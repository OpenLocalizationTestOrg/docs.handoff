<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="external-ruleset-toolkit.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c453c6137beeae8eee0e356734a1f9cdf8d8568b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\external-ruleset-toolkit.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">268107eb9f8bd64376c8c65c9596aa624f422868</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">284443d0d95e05a6f15c1b65a392e6e13a8b358c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>External Ruleset Toolkit</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>External Ruleset Toolkit</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Normally when rules are used within a workflow application, the rules are part of the assembly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In some scenarios, you may want to maintain the RuleSets separately from the assembly so that they can be updated without rebuilding and deploying the workflow assembly.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This sample allows you to manage and edit RuleSets in a database and access those RuleSets from a workflow at runtime.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This enables running workflow instances to automatically incorporate RuleSet changes.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The External RuleSet Toolkit sample contains a Windows Forms-based tool that you can use to manage and edit RuleSet versions in a database.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It also includes an activity and a host service for executing those rules.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This sample requires <bpt id="p1">[</bpt>Microsoft SQL Server<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=96181)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Visual Studio provides a RuleSet editor as part of the Windows Workflow Foundation (WF).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can start this editor by double-clicking the <ph id="ph1">`Policy`</ph> activity in a workflow; it serializes the defined RuleSet object to the .rules file associated with the workflow (a <ph id="ph2">`Policy`</ph> activity runs a RuleSet instance against the workflow).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The .rules file is compiled into the assembly as a resource when you build the workflow project.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The components of this sample include:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A RuleSet graphical user interface tool that you can use to edit and manage RuleSet versions in the database.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A RuleSet service that is configured on the host application and accesses RuleSets from the database.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`ExternalPolicy`</ph> activity that requests a RuleSet from the RuleSet service and runs the RuleSet against the workflow.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The interaction of the components is shown in the following image.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The sections that follow describe each component.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Diagram showing the External RuleSet Toolkit sample overview.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id="ph1">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>RuleSet Tool</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following image is a screenshot of the RuleSet tool.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Rule Store<ept id="p1">**</ept> menu, you can load the available RuleSets from the database and save modified RuleSets back to the store.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An application configuration file provides a database connection string for the RuleSet database.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When you start the tool, it automatically loads the RuleSets from the configured database.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Screenshot showing the RuleSet Browser.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The RuleSet tool applies major and minor version numbers to the RuleSets, allowing you to simultaneously maintain and store multiple versions (the tool provides no locking or other configuration management features in addition to the versioning capability).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Using the tool, you can create new RuleSet versions or delete existing versions.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When you click <bpt id="p1">**</bpt>New<ept id="p1">**</ept>, the tool creates a new RuleSet name and applies version 1.0.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When you copy a version, the tool creates a copy of the selected RuleSet version, including the contained rules, and assigns new, unique version numbers.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These version numbers are based on the version numbers of existing RuleSets.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can change the RuleSet name and version numbers using the associated fields on the form.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When you click <bpt id="p1">**</bpt>Edit Rules<ept id="p1">**</ept>, the RuleSet editor starts, as shown in the following image:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Screenshot showing the RuleSet Editor.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This is a re-hosting of the editor dialog that is part of the Windows Workflow Foundation Visual Studio add-in.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It provides the same functionality, including Intellisense support.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The rules are authored against a target type (such as a workflow) that is associated with the RuleSet in the tool; when you click <bpt id="p1">**</bpt>Browse<ept id="p1">**</ept> in the main tool dialog, the <bpt id="p2">**</bpt>Workflow/Type Selector<ept id="p2">**</ept> dialog appears, as shown in Figure 4.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Workflow &amp;#47;Type Selection<ept id="p1">]</ept><bpt id="p2">(./media/71f08d57-e8f2-499e-8151-ece2cbdcabfd.gif "</bpt>71f08d57-e8f2-499e-8151-ece2cbdcabfd<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Figure 4: Workflow/Type Selector</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>Workflow/Type Selector<ept id="p1">**</ept> dialog to specify an assembly and a specific type within that assembly.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This type is the target type against which the rules are authored (and run).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In many cases, the target type is a workflow or some other activity type.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, you can run a RuleSet against any .NET type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The path to the assembly file and the type <ph id="ph1">`name are stored with the`</ph> RuleSet in the database, so that when the RuleSet is retrieved from the database, the tool attempts to automatically load the target type.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Workflow/Type Selector<ept id="p2">**</ept> dialog, it validates the selected type against the RuleSet, to ensure that the target type has all the members referenced by the rules.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Errors are shown in a <bpt id="p1">**</bpt>Validation Errors<ept id="p1">**</ept> dialog.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can choose to continue with the change despite the errors, or click <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> menu in the main tool dialog, you can click <bpt id="p2">**</bpt>Validate<ept id="p2">**</ept> to re-validate the RuleSet version against the target activity.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Screenshot showing the Validation Errors dialog.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Data<ept id="p1">**</ept> menu in the tool, you can import and export RuleSets.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When you click <bpt id="p1">**</bpt>Import<ept id="p1">**</ept>, a file-chooser dialog appears, from which you can select a .rules file.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This may or may not be a file initially created in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The .rules file should contain a serialized <ph id="ph1">`RuleDefinitions`</ph> instance that contains a collection of conditions and a collection of RuleSets.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The tool does not use the conditions collection, but it does use the <ph id="ph1">`RuleDefinitions`</ph> .rules format to allow interaction with the Visual Studio environment.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>After selecting a .rules file, a <bpt id="p1">**</bpt>RuleSet Selector<ept id="p1">**</ept> dialog appears.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can use the dialog to select the RuleSets from the file that you want to import (the default specifies all RuleSets).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>RuleSets in the .rules file do not have version numbers, because their versioning within a WF project is the same as the version of the assembly.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>During the importing process, the tool automatically assigns the next available major version number (which you can change after importing); you can see the assigned version numbers in the <bpt id="p1">**</bpt>RuleSet Selector<ept id="p1">**</ept> list.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For each RuleSet it imports, the tool attempts to locate the associated type from the bin\Debug folder under the location of the .rules file (if it exists), based on the members used in the RuleSet.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the tool finds multiple matching types, it attempts to choose a type based on a match between the .rules file name and the type name (for example, the <ph id="ph1">`Workflow1`</ph> type corresponds to Workflow1.rules).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If multiple matches exist, you are prompted to select the type.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If this auto-identification mechanism fails to locate a matching assembly or type, then after importing you can click <bpt id="p1">**</bpt>Browse<ept id="p1">**</ept> on the main tool dialog to navigate to the associated type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following image shows the RuleSet Selector:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Screenshot showing the RuleSet Selector dialog.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When you click <bpt id="p1">**</bpt>Data-Export<ept id="p1">**</ept> from the main tool menu, the <bpt id="p2">**</bpt>RuleSet Selector<ept id="p2">**</ept> dialog appears again, from which you can determine the RuleSets from the database that should be exported.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When you click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>, a <bpt id="p2">**</bpt>Save File<ept id="p2">**</ept> dialog appears, in which you can specify the name and location of the resulting .rules file.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Because the .rules file does not contain version information, you can only select one RuleSet version with a given RuleSet name.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>PolicyFromService Activity</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The code for the <ph id="ph1">`PolicyFromService`</ph> activity is straightforward.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It works much like the <ph id="ph1">`Policy`</ph> activity provided with WF, but instead of retrieving the target RuleSet from the .rules file, it calls a host service to obtain the RuleSet instance.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It then runs the RuleSet against the root workflow activity instance.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To use the activity in a workflow, add a reference to the <ph id="ph1">`PolicyActivities`</ph> and <ph id="ph2">`RuleSetService`</ph> assemblies from your workflow project.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>See the procedure at the end of this topic for a discussion of how to add the activity to the toolbox.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>After placing the activity in your workflow, you must provide the name of the RuleSet to be run.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can enter the name as a literal value, or bind to a workflow variable or property of another activity.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Optionally, you can enter version numbers for the specific RuleSet that should be run.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you leave the default value of 0 for the major and minor version numbers, the latest version number in the database is automatically provided for the activity.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>RuleSet Service</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The service is responsible for retrieving the specified RuleSet version from the database and returning it to the calling activity.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>As previously discussed, if the major and minor version values passed in the <ph id="ph1">`GetRuleSet`</ph> call are both 0, the service retrieves the latest version.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>At this point, there is no caching of RuleSet definitions or instances; similarly, there are no features for marking RuleSet versions as "deployed" to differentiate them from in-progress RuleSets.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The database to be accessed by the service should be configured on the host using an application configuration file.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To run the tool</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The folder that sets up the RuleSet table used by the tool and the service contains a Setup.sql file.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can run the Setup.cmd batch file to create the Rules database on SQL Express and to set up the RuleSet table.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If you edit the batch file or Setup.sql and specify not to use SQL Express or to place the table in a database named something other than <ph id="ph1">`Rules`</ph>, the application configuration files in the RuleSet tool and <ph id="ph2">`UsageSample`</ph> projects should be edited with the same information.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>After you run the Setup.sql script, you can build the <ph id="ph1">`ExternalRuleSetToolkit`</ph> solution and then launch the RuleSet tool from the ExternalRuleSetTool project.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RuleSetToolkitUsageSample`</ph> Sequential Workflow Console Application solution includes a sample workflow.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The workflow consists of a <ph id="ph1">`PolicyFromService`</ph> activity and two variables, <ph id="ph2">`orderValue`</ph> and <ph id="ph3">`discount`</ph>, against which the target RuleSet runs.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To use the sample, build the <ph id="ph1">`RuleSetToolkitUsageSample`</ph> solution.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Then from the RuleSet tool main menu, click <bpt id="p1">**</bpt>Data-Import<ept id="p1">**</ept> and point to the DiscountRuleSet.rules file in the RuleSetToolkitUsageSample folder.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Rule Store-Save<ept id="p1">**</ept> menu option to save the imported RuleSet to the database.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`PolicyActivities`</ph> assembly is referenced from the sample workflow project, the <ph id="ph2">`PolicyFromService`</ph> activity appears in the workflow.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It does not, however, appear in the toolbox by default.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To add it to the toolbox, do the following:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Right-click the toolbox and select <bpt id="p1">**</bpt>Choose Items<ept id="p1">**</ept> (this may take a while).</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When the <bpt id="p1">**</bpt>Choose Toolbox Items<ept id="p1">**</ept> dialog appears, click the <bpt id="p2">**</bpt>Activities<ept id="p2">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Browse to the <ph id="ph1">`PolicyActivities`</ph> assembly in the <ph id="ph2">`ExternalRuleSetToolkit`</ph> solution and click <bpt id="p1">**</bpt>Open<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Ensure that the <ph id="ph1">`PolicyFromService`</ph> activity is selected in the <bpt id="p1">**</bpt>Choose Toolbox Items<ept id="p1">**</ept> dialog and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The activity should now appear in the toolbox in the <bpt id="p1">**</bpt>RuleSetToolkitUsageSample Components<ept id="p1">**</ept> category.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The RuleSet service is already configured on the console application host using the following statement in Program.cs.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can also configure the service on the host using a configuration file; see the SDK documentation for details.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>An application configuration file is added to the workflow project to specify the connection string for the database to be used by the service.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This should be the same connection string used by the RuleSet tool, which points to the database that contains the RuleSet table.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can now run the <ph id="ph1">`RuleSetToolkitUsageSample`</ph> project as you would any other workflow console application.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Press F5 or Ctrl+F5 within Visual Studio or run the RuleSetToolkitUsageSample.exe file directly.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You must close the RuleSet tool to recompile the usage sample, because the tool loads the usage sample assembly.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>