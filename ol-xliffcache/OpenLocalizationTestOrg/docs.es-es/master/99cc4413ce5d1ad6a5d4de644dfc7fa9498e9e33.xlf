<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99cc4413ce5d1ad6a5d4de644dfc7fa9498e9e33</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\converting-strings-to-dotnet-data-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55dd1962b6e1896d08d87993c55fc7becc7ab29f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32bd6abb5d9462e42e0d48b7fdd0784b494f702e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Converting Strings to .NET Framework Data Types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Converting Strings to .NET Framework Data Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If you want to convert a string to a .NET Framework data type, use the <bpt id="p1">**</bpt>XmlConvert<ept id="p1">**</ept> method that fits the application requirements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For a list of all conversion methods available in the <bpt id="p1">**</bpt>XmlConvert<ept id="p1">**</ept> class, see <ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The string returned from the <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> method is a string version of the data that is passed in.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Additionally, there are several .NET Framework types that convert using the <bpt id="p1">**</bpt>XmlConvert<ept id="p1">**</ept> class yet they do not use the methods in the <bpt id="p2">**</bpt>System.Convert<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XmlConvert<ept id="p1">**</ept> class follows the XML Schema (XSD) data type specification and has a data type that the <bpt id="p2">**</bpt>XmlConvert<ept id="p2">**</ept> can map to.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following table lists .NET Framework data types and the string types that are returned using XML Schema (XSD) data type mapping.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These .NET Framework types cannot be processed using <bpt id="p1">**</bpt>System.Convert<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>.NET Framework type</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>String returned</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Boolean</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>"true", "false"</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Single.PositiveInfinity</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>"INF"</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Single.NegativeInfinity</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>"-INF"</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Double.PositiveInfinity</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>"INF"</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Double.NegativeInfinity</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>"-INF"</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>DateTime</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Format is "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Timespan</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Format is PnYnMnTnHnMnS that is, <ph id="ph1">`P2Y10M15DT10H30M20S`</ph> is a duration of 2 years, 10 months, 15 days, 10 hours, 30 minutes, and 20 seconds.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If converting any of the .NET Framework types listed in the table to a string using the <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> method, the returned string is not the base type, but the XML Schema (XSD) string type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Timespan<ept id="p2">**</ept> value type differs in that a <bpt id="p3">**</bpt>DateTime<ept id="p3">**</ept> represents an instant in time, whereas a <bpt id="p4">**</bpt>TimeSpan<ept id="p4">**</ept> represents a time interval.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Timespan<ept id="p2">**</ept> formats are specified in the XML Schema (XSD) data types specification.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Output<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;Date&gt;2001-08-04T00:00:00&lt;/Date&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following code converts an integer to a string:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Output<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, if you are converting a string to <bpt id="p1">**</bpt>Boolean<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Single<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>Double<ept id="p3">**</ept>, the .NET Framework type that is returned is not the same as the type returned when using the <bpt id="p4">**</bpt>System.Convert<ept id="p4">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>String to Boolean</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following table shows what type is generated for the given input strings, when converting a string to <bpt id="p1">**</bpt>Boolean<ept id="p1">**</ept> using the <bpt id="p2">**</bpt>ToBoolean<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Valid string input parameter</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>.NET Framework output type</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>"true"</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Boolean.True</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>"1"</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Boolean.True</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>"false"</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Boolean.False</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>"0"</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Boolean.False</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, given the following XML:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Input<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Both can be understood by the following code, and <bpt id="p1">**</bpt>bvalue<ept id="p1">**</ept> is <bpt id="p2">**</bpt>System.Boolean.True<ept id="p2">**</ept>:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>String to Single</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following table shows what type is generated for the given input strings, when converting a string to a <bpt id="p1">**</bpt>Single<ept id="p1">**</ept> using the <bpt id="p2">**</bpt>ToSingle<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Valid string input parameter</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>.NET Framework output type</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>"INF"</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Single.PositiveInfinity</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>"-INF"</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Single.NegativeInfinity</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>String to Double</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following table shows what type is generated for the given input strings, when converting a string to a <bpt id="p1">**</bpt>Single<ept id="p1">**</ept> using the <bpt id="p2">**</bpt>ToDouble<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Valid string input parameter</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>.NET Framework output type</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>"INF"</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Double.PositiveInfinity</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>"-INF"</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Double.NegativeInfinity</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following code writes <ph id="ph1">`&lt;Infinity&gt;INF&lt;/Infinity&gt;`</ph>:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conversion of XML Data Types<ept id="p1">](../../../../docs/standard/data/xml/conversion-of-xml-data-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Converting .NET Framework Types to Strings<ept id="p1">](../../../../docs/standard/data/xml/converting-dotnet-types-to-strings.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>