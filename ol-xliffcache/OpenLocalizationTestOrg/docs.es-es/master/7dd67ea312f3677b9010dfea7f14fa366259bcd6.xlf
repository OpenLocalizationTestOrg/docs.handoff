<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="dynamic-language-runtime-overview.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7dd67ea312f3677b9010dfea7f14fa366259bcd6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\dynamic-language-runtime-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">189896d19146b8b870bbf3832c50c7199b0935df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bf02fd396829dacaace67624f1adee6faeb31f3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Dynamic Language Runtime Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dynamic Language Runtime Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>dynamic language runtime<ept id="p1">*</ept> (DLR) is a runtime environment that adds a set of services for dynamic languages to the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The DLR makes it easier to develop dynamic languages to run on the .NET Framework and to add dynamic features to statically typed languages.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Dynamic languages can identify the type of an object at run time, whereas in statically typed languages such as C# and Visual Basic (when you use <ph id="ph1">`Option Explicit On`</ph>) you must specify object types at design time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Examples of dynamic languages are Lisp, Smalltalk, JavaScript, PHP, Ruby, Python, ColdFusion, Lua, Cobra, and Groovy.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Most dynamic languages provide the following advantages for developers:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The ability to use a rapid feedback loop (REPL, or read-evaluate-print loop).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This lets you enter several statements and immediately execute them to see the results.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Support for both top-down development and more traditional bottom-up development.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, when you use a top-down approach, you can call functions that are not yet implemented and then add underlying implementations when you need them.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Easier refactoring and code modifications, because you do not have to change static type declarations throughout the code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Dynamic languages make excellent scripting languages.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Customers can easily extend applications created by using dynamic languages with new commands and functionality.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Dynamic languages are also frequently used for creating Web sites and test harnesses, maintaining server farms, developing various utilities, and performing data transformations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The purpose of the DLR is to enable a system of dynamic languages to run on the .NET Framework and give them .NET interoperability.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The DLR adds dynamic objects to C# and Visual Basic to support dynamic behavior in these languages and enable their interoperation with dynamic languages.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The DLR also helps you create libraries that support dynamic operations.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, if you have a library that uses XML or JavaScript Object Notation (JSON) objects, your objects can appear as dynamic objects to languages that use the DLR.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This lets library users write syntactically simpler and more natural code for operating with objects and accessing object members.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, you might use the following code to increment a counter in XML in C#.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By using the DLR, you could use the following code instead for the same operation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Like the CLR, the DLR is a part of the .NET Framework and is provided with the .NET Framework and Visual Studio installation packages.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The open-source version of the DLR is also available for download on the <bpt id="p1">[</bpt>IronLanguages/dlr<ept id="p1">](https://github.com/IronLanguages/dlr)</ept> repo on GitHub.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The open-source version of the DLR has all the features of the DLR that is included in Visual Studio and the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It also provides additional support for language implementers.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation on the <bpt id="p1">[</bpt>IronLanguages/dlr<ept id="p1">](https://github.com/IronLanguages/dlr)</ept> repo on GitHub.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Examples of languages developed by using the DLR include the following:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>IronPython.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Available as open-source software from the <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/IronLanguages/ironpython2)</ept> Web site.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>IronRuby.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Available as open-source software from the <bpt id="p1">[</bpt>RubyForge<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=141044)</ept> Web site.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Primary DLR Advantages</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The DLR provides the following advantages.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Simplifies Porting Dynamic Languages to the .NET Framework</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The DLR allows language implementers to avoid creating lexical analyzers, parsers, semantic analyzers, code generators, and other tools that they traditionally had to create themselves.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To use the DLR, a language needs to produce <bpt id="p1">*</bpt>expression trees<ept id="p1">*</ept>, which represent language-level code in a tree-shaped structure, runtime helper routines, and optional dynamic objects that implement the <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The DLR and the .NET Framework automate a lot of code analysis and code generation tasks.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This enables language implementers to concentrate on unique language features.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Enables Dynamic Features in Statically Typed Languages</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Existing .NET Framework languages such as C# and Visual Basic can create dynamic objects and use them together with statically typed objects.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, C# and Visual Basic can use dynamic objects for HTML, Document Object Model (DOM), and .NET reflection.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Provides Future Benefits of the DLR and .NET Framework</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Languages implemented by using the DLR can benefit from future DLR and .NET Framework improvements.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, if the .NET Framework releases a new version that has an improved garbage collector or faster assembly loading time, languages implemented by using the DLR immediately get the same benefit.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the DLR adds optimizations such as better compilation, the performance also improves for all languages implemented by using the DLR.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Enables Sharing of Libraries and Objects</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The objects and libraries implemented in one language can be used by other languages.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The DLR also enables interoperation between statically typed and dynamic languages.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, C# can declare a dynamic object that uses a library that is written in a dynamic language.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>At the same time, dynamic languages can use libraries from the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Provides Fast Dynamic Dispatch and Invocation</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The DLR provides fast execution of dynamic operations by supporting advanced polymorphic caching.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The DLR creates rules for binding operations that use objects to the necessary runtime implementations and then caches these rules to avoid resource-exhausting binding computations during successive executions of the same code on the same types of objects.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>DLR Architecture</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following illustration shows the architecture of the dynamic language runtime.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Dynamic Language Runtime Architecture Overview<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/reflection-and-codedom/media/dlr-archoverview.png "</bpt>DLR_ArchOverview<ept id="p2">")</ept> DLR architecture</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The DLR adds a set of services to the CLR for better supporting dynamic languages.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These services include the following:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Expression trees.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The DLR uses expression trees to represent language semantics.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For this purpose, the DLR has extended LINQ expression trees to include control flow, assignment, and other language-modeling nodes.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Expression Trees (C#)<ept id="p1">](../../csharp/programming-guide/concepts/expression-trees/index.md)</ept> or <bpt id="p2">[</bpt>Expression Trees (Visual Basic)<ept id="p2">](../../visual-basic/programming-guide/concepts/expression-trees/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Call site caching.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>dynamic call site<ept id="p1">*</ept> is a place in the code where you perform an operation like <ph id="ph1">`a + b`</ph> or <ph id="ph2">`a.b()`</ph> on dynamic objects.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The DLR caches the characteristics of <ph id="ph1">`a`</ph> and <ph id="ph2">`b`</ph> (usually the types of these objects) and information about the operation.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If such an operation has been performed previously, the DLR retrieves all the necessary information from the cache for fast dispatch.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Dynamic object interoperability.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The DLR provides a set of classes and interfaces that represent dynamic objects and operations and can be used by language implementers and authors of dynamic libraries.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>These classes and interfaces include <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, <ph id="ph2">&lt;xref:System.Dynamic.DynamicMetaObject&gt;</ph>, <ph id="ph3">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>, and <ph id="ph4">&lt;xref:System.Dynamic.ExpandoObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The DLR uses binders in call sites to communicate not only with the .NET Framework, but with other infrastructures and services, including Silverlight and COM.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Binders encapsulate a language's semantics and specify how to perform operations in a call site by using expression trees.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This enables dynamic and statically typed languages that use the DLR to share libraries and gain access to all the technologies that the DLR supports.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>DLR Documentation</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information about how to use the open source version of the DLR to add dynamic behavior to a language, or about how to enable the use of a dynamic language with the .NET Framework, see the documentation on the <bpt id="p1">[</bpt>IronLanguages/dlr<ept id="p1">](https://github.com/IronLanguages/dlr/tree/master/Docs)</ept> repo on GitHub.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Common Language Runtime<ept id="p1">](../../../docs/standard/clr.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expression Trees (C#)<ept id="p1">](../../csharp/programming-guide/concepts/expression-trees/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expression Trees (Visual Basic)<ept id="p1">](../../visual-basic/programming-guide/concepts/expression-trees/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Creating and Using Dynamic Objects<ept id="p1">](~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>