{"content":"---\ntitle: \"How to: Create a C-C++ Union by Using Attributes (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 9352a7e4-c0da-4d07-aa14-55ed43736fcb\ncaps.latest.revision: 4\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Create a C/C++ Union by Using Attributes (Visual Basic)\nBy using attributes you can customize how structs are laid out in memory. For example, you can create what is known as a union in C/C++ by using the `StructLayout(LayoutKind.Explicit)` and `FieldOffset` attributes.  \n  \n## Example  \n In this code segment, all of the fields of `TestUnion` start at the same location in memory.  \n  \n```vb  \n' Add an Imports statement for System.Runtime.InteropServices.  \n  \n<System.Runtime.InteropServices.StructLayout(   \n      System.Runtime.InteropServices.LayoutKind.Explicit)>   \nStructure TestUnion  \n    <System.Runtime.InteropServices.FieldOffset(0)>   \n    Public i As Integer  \n  \n    <System.Runtime.InteropServices.FieldOffset(0)>   \n    Public d As Double  \n  \n    <System.Runtime.InteropServices.FieldOffset(0)>   \n    Public c As Char  \n  \n    <System.Runtime.InteropServices.FieldOffset(0)>   \n    Public b As Byte  \nEnd Structure  \n```  \n  \n## Example  \n The following is another example where fields start at different explicitly set locations.  \n  \n```vb  \n' Add an Imports statement for System.Runtime.InteropServices.  \n  \n <System.Runtime.InteropServices.StructLayout(   \n      System.Runtime.InteropServices.LayoutKind.Explicit)>   \nStructure TestExplicit  \n     <System.Runtime.InteropServices.FieldOffset(0)>   \n     Public lg As Long  \n  \n     <System.Runtime.InteropServices.FieldOffset(0)>   \n     Public i1 As Integer  \n  \n     <System.Runtime.InteropServices.FieldOffset(4)>   \n     Public i2 As Integer  \n  \n     <System.Runtime.InteropServices.FieldOffset(8)>   \n     Public d As Double  \n  \n     <System.Runtime.InteropServices.FieldOffset(12)>   \n     Public c As Char  \n  \n     <System.Runtime.InteropServices.FieldOffset(14)>   \n     Public b As Byte  \n End Structure  \n```  \n  \n The two integer fields, `i1` and `i2`, share the same memory locations as `lg`. This sort of control over struct layout is useful when using platform invocation.  \n  \n## See Also  \n <xref:System.Reflection>   \n <xref:System.Attribute>   \n [Visual Basic Programming Guide](../../../../visual-basic/programming-guide/index.md)   \n [Attributes](https://msdn.microsoft.com/library/5x6cd29c)   \n [Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/reflection.md)   \n [Attributes (Visual Basic)](../../../../visual-basic/language-reference/attributes.md)   \n [Creating Custom Attributes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)   \n [Accessing Attributes by Using Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)","nodes":[{"pos":[12,92],"content":"How to: Create a C-C++ Union by Using Attributes (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Create a C-C++ Union by Using Attributes (Visual Basic) | Microsoft Docs","pos":[0,80]}]},{"pos":[473,536],"content":"How to: Create a C/C++ Union by Using Attributes (Visual Basic)","linkify":"How to: Create a C/C++ Union by Using Attributes (Visual Basic)","nodes":[{"content":"How to: Create a C/C++ Union by Using Attributes (Visual Basic)","pos":[0,63]}]},{"content":"By using attributes you can customize how structs are laid out in memory.","pos":[537,610]},{"content":"For example, you can create what is known as a union in C/C++ by using the <ph id=\"ph1\">`StructLayout(LayoutKind.Explicit)`</ph> and <ph id=\"ph2\">`FieldOffset`</ph> attributes.","pos":[611,751],"source":" For example, you can create what is known as a union in C/C++ by using the `StructLayout(LayoutKind.Explicit)` and `FieldOffset` attributes."},{"pos":[760,767],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[771,863],"content":"In this code segment, all of the fields of <ph id=\"ph1\">`TestUnion`</ph> start at the same location in memory.","source":"In this code segment, all of the fields of `TestUnion` start at the same location in memory."},{"pos":[1432,1439],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following is another example where fields start at different explicitly set locations.","pos":[1443,1533]},{"content":"The two integer fields, <ph id=\"ph1\">`i1`</ph> and <ph id=\"ph2\">`i2`</ph>, share the same memory locations as <ph id=\"ph3\">`lg`</ph>.","pos":[2287,2366],"source":"The two integer fields, `i1` and `i2`, share the same memory locations as `lg`."},{"content":"This sort of control over struct layout is useful when using platform invocation.","pos":[2367,2448]},{"pos":[2457,2465],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Visual Basic Programming Guide<ept id=\"p1\">](../../../../visual-basic/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2525,2612],"source":" [Visual Basic Programming Guide](../../../../visual-basic/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Attributes<ept id=\"p1\">](https://msdn.microsoft.com/library/5x6cd29c)</ept><ph id=\"ph1\"> </ph>","pos":[2615,2674],"source":" [Attributes](https://msdn.microsoft.com/library/5x6cd29c) "},{"content":"<bpt id=\"p1\"> [</bpt>Reflection (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/reflection.md)</ept><ph id=\"ph1\"> </ph>","pos":[2677,2773],"source":" [Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/reflection.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Attributes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/language-reference/attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[2776,2864],"source":" [Attributes (Visual Basic)](../../../../visual-basic/language-reference/attributes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Creating Custom Attributes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[2867,3006],"source":" [Creating Custom Attributes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Accessing Attributes by Using Reflection (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept>","pos":[3009,3175],"source":" [Accessing Attributes by Using Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)"}]}