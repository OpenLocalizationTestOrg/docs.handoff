<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d09224d5bf2dff31f7ba7440faeb5129719830b4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\hosting-win32-content-in-wpf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c57d0ab08c3154aae5f56dd451a5edecc74f404</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c2de71c18afa8616b9cbb36cf039bfc6a52106e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Hosting Win32 Content in WPF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Hosting Win32 Content in WPF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A Walkthrough of Win32 Inside Windows Presentation Framework (HwndHost)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To reuse <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> content inside <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications, use <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>, which is a control that makes HWNDs look like <ph id="ph4">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Like <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> is straightforward to use: derive from <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> and implement <ph id="ph4">`BuildWindowCore`</ph> and <ph id="ph5">`DestroyWindowCore`</ph> methods, then instantiate your <ph id="ph6">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> derived class and place it inside your <ph id="ph7">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> logic is already packaged as a control, then your <ph id="ph2">`BuildWindowCore`</ph> implementation is little more than a call to <ph id="ph3">`CreateWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, to create a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> LISTBOX control in <ph id="ph2">[!INCLUDE[TLA#tla_cpp](../../../../includes/tlasharptla-cpp-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>But suppose the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> code is not quite so self-contained?</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If so, you can create a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> dialog box and embed its contents into a larger <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The sample shows this in <ph id="ph1">[!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA#tla_cpp](../../../../includes/tlasharptla-cpp-md.md)]</ph>, although it is also possible to do this in a different language or at the command line.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Start with a simple dialog, which is compiled into a <ph id="ph1">[!INCLUDE[TLA#tla_cpp](../../../../includes/tlasharptla-cpp-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_dll](../../../../includes/tla2sharptla-dll-md.md)]</ph> project.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Next, introduce the dialog into the larger <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Compile the <ph id="ph1">[!INCLUDE[TLA2#tla_dll](../../../../includes/tla2sharptla-dll-md.md)]</ph> as managed (<ph id="ph2">`/clr`</ph>)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Turn the dialog into a control</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Define the derived class of <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> with <ph id="ph2">`BuildWindowCore`</ph> and <ph id="ph3">`DestroyWindowCore`</ph> methods</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`TranslateAccelerator`</ph> method to handle dialog keys</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`TabInto`</ph> method to support tabbing</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnMnemonic`</ph> method to support mnemonics</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Instantiate the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> subclass and put it under the right <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> element</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Turn the Dialog into a Control</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can turn a dialog box into a child HWND using the WS_CHILD and DS_CONTROL styles.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Go into the resource file (.rc) where the dialog is defined, and find the beginning of the definition of the dialog:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Change the second line to:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This action does not fully package it into a self-contained control; you still need to call <ph id="ph1">`IsDialogMessage()`</ph> so <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> can process certain messages, but the control change does provide a straightforward way of putting those controls inside another HWND.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Subclass HwndHost</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Import the following namespaces:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Then create a derived class of <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> and override the <ph id="ph2">`BuildWindowCore`</ph> and <ph id="ph3">`DestroyWindowCore`</ph> methods:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Here you use the <ph id="ph1">`CreateDialog`</ph> to create the dialog box that is really a control.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Since this is one of the first methods called inside the <ph id="ph1">[!INCLUDE[TLA2#tla_dll](../../../../includes/tla2sharptla-dll-md.md)]</ph>, you should also do some standard <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> initialization by calling a function you will define later, called <ph id="ph3">`InitializeGlobals()`</ph>:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Override TranslateAccelerator Method to Handle Dialog Keys</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you ran this sample now, you would get a dialog control that displays, but it would ignore all of the keyboard processing that makes a dialog box a functional dialog box.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You should now override the <ph id="ph1">`TranslateAccelerator`</ph> implementation (which comes from <ph id="ph2">`IKeyboardInputSink`</ph>, an interface that <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> implements).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This method gets called when the application receives WM_KEYDOWN and WM_SYSKEYDOWN.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This is a lot of code in one piece, so it could use some more detailed explanations.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>First, the code using <ph id="ph1">[!INCLUDE[TLA#tla_cpp](../../../../includes/tlasharptla-cpp-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA#tla_cpp](../../../../includes/tlasharptla-cpp-md.md)]</ph> macros; you need to be aware that there is already a macro named <ph id="ph3">`TranslateAccelerator`</ph>, which is defined in winuser.h:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>So make sure to define a <ph id="ph1">`TranslateAccelerator`</ph> method and not a <ph id="ph2">`TranslateAcceleratorW`</ph> method.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Similarly, there is both the unmanaged winuser.h MSG and the managed <ph id="ph1">`Microsoft::Win32::MSG`</ph> struct.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can disambiguate between the two using the <ph id="ph1">[!INCLUDE[TLA#tla_cpp](../../../../includes/tlasharptla-cpp-md.md)]</ph> <ph id="ph2">`::`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Both MSGs have the same data, but sometimes it is easier to work with the unmanaged definition, so in this sample you can define the obvious conversion routine:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Back to <ph id="ph1">`TranslateAccelerator`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The basic principle is to call the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> function <ph id="ph2">`IsDialogMessage`</ph> to do as much work as possible, but <ph id="ph3">`IsDialogMessage`</ph> does not have access to anything outside the dialog.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As a user tab around the dialog, when tabbing runs past the last control in our dialog, you need to set focus to the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> portion by calling <ph id="ph2">`IKeyboardInputSite::OnNoMoreStops`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Finally, call <ph id="ph1">`IsDialogMessage`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>But one of the responsibilities of a <ph id="ph1">`TranslateAccelerator`</ph> method is telling <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> whether you handled the keystroke or not.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you did not handle it, the input event can tunnel and bubble through the rest of the application.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Here, you will expose a quirk of keyboard messange handling and the nature of the input architecture in <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Unfortunately, <ph id="ph1">`IsDialogMessage`</ph> does not return in any way whether it handles a particular keystroke.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Even worse, it will call <ph id="ph1">`DispatchMessage()`</ph> on keystrokes it should not handle!</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>So you will have to reverse-engineer <ph id="ph1">`IsDialogMessage`</ph>, and only call it for the keys you know it will handle:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Override TabInto Method to Support Tabbing</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Now that you have implemented <ph id="ph1">`TranslateAccelerator`</ph>, a user can tab around inside the dialog box and tab out of it into the greater <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>But a user cannot tab back into the dialog box.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To solve that, you override <ph id="ph1">`TabInto`</ph>:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TraversalRequest`</ph> parameter tells you whether the tab action is a tab or shift tab.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Override OnMnemonic Method to Support Mnemonics</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Keyboard handling is almost complete, but there is one thing missing – mnemonics do not work.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If a user presses alt-F, focus doe not jump to the "First name:" edit box.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>So, you override the <ph id="ph1">`OnMnemonic`</ph> method:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Why not call <ph id="ph1">`IsDialogMessage`</ph> here?</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You have the same issue as before--you need to be able to inform <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> code whether your code handled the keystroke or not, and <ph id="ph2">`IsDialogMessage`</ph> cannot do that.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>There is also a second issue, because <ph id="ph1">`IsDialogMessage`</ph> refuses to process the mnemonic if the focused HWND is not inside the dialog box.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Instantiate the HwndHost Derived Class</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Finally, now that all the key and tab support is in place, you can put your <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> into the larger <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the main application is written in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, the easiest way to put it in the right place is to leave an empty <ph id="ph2">&lt;xref:System.Windows.Controls.Border&gt;</ph> element where you want to put the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Here you create a <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> named <ph id="ph2">`insertHwndHostHere`</ph>:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Then all that remains is to find a good place in code sequence to instantiate the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> and connect it to the <ph id="ph2">&lt;xref:System.Windows.Controls.Border&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In this example, you will put it inside the constructor for the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> derived class:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Which gives you:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>WPF application screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/interoparch09.PNG "</bpt>InteropArch09<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>