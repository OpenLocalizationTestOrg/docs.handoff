<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="data-contract-known-types.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f64854ad4c10500677f42c0b60de8dadb309d935</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\data-contract-known-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa107365032769c60bd7e999a4a73206a692f775</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71a1dbd04ae86094b453c13dccfb73a56ce3d6d4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Data Contract Known Types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Contract Known Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> class allows you to specify, in advance, the types that should be included for consideration during deserialization.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For a working example, see the <bpt id="p1">[</bpt>Known Types<ept id="p1">](../../../../docs/framework/wcf/samples/known-types.md)</ept> example.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Normally, when passing parameters and return values between a client and a service, both endpoints share all of the data contracts of the data to be transmitted.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, this is not the case in the following circumstances:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The sent data contract is derived from the expected data contract.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> the section about inheritance in <bpt id="p1">[</bpt>Data Contract Equivalence<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-equivalence.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In that case, the transmitted data does not have the same data contract as expected by the receiving endpoint.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The declared type for the information to be transmitted is an interface, as opposed to a class, structure, or enumeration.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Therefore, it cannot be known in advance which type that implements the interface is actually sent and therefore, the receiving endpoint cannot determine in advance the data contract for the transmitted data.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The declared type for the information to be transmitted is <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because every type inherits from <ph id="ph1">&lt;xref:System.Object&gt;</ph>, and it cannot be known in advance which type is actually sent, the receiving endpoint cannot determine in advance the data contract for the transmitted data.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is a special case of the first item: Every data contract derives from the default, a blank data contract that is generated for <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Some types, which include <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> types, have members that are in one of the preceding three categories.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph> uses <ph id="ph2">&lt;xref:System.Object&gt;</ph> to store the actual objects in the hash table.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When serializing these types, the receiving side cannot determine in advance the data contract for these members.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The KnownTypeAttribute Class</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When data arrives at a receiving endpoint, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> runtime attempts to deserialize the data into an instance of a common language runtime (CLR) type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The type that is instantiated for deserialization is chosen by first inspecting the incoming message to determine the data contract to which the contents of the message conform.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The deserialization engine then attempts to find a CLR type that implements a data contract compatible with the message contents.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The set of candidate types that the deserialization engine allows for during this process is referred to as the deserializer's set of "known types."</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>One way to let the deserialization engine know about a type is by using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The attribute cannot be applied to individual data members, only to whole data contract types.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The attribute is applied to an <bpt id="p1">*</bpt>outer type<ept id="p1">*</ept> that can be a class or a structure.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In its most basic usage, applying the attribute specifies a type as a "known type."</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This causes the known type to be a part of the set of known types whenever an object of the outer type or any object referred to through its members is being deserialized.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>More than one <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> attribute can be applied to the same type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Known Types and Primitives</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Primitive types, as well as certain types treated as primitives (for example, <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlElement&gt;</ph>) are always "known" and never have to be added through this mechanism.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, arrays of primitive types have to be added explicitly.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Most collections are considered equivalent to arrays.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>(Non-generic collections are considered equivalent to arrays of <ph id="ph1">&lt;xref:System.Object&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For an example of the using primitives, primitive arrays, and primitive collections, see Example 4.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Unlike other primitive types, the <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> structure is not a known type by default, so it must be manually added to the list of known types.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following examples show the <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> class in use.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example 1</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>There are three classes with an inheritance relationship.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`CompanyLogo`</ph> class can be serialized, but cannot be deserialized if the <ph id="ph2">`ShapeOfLogo`</ph> member is set to either a <ph id="ph3">`CircleType`</ph> or a <ph id="ph4">`TriangleType`</ph> object, because the deserialization engine does not recognize any types with data contract names "Circle" or "Triangle."</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The correct way to write the <ph id="ph1">`CompanyLogo`</ph> type is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Whenever the outer type <ph id="ph1">`CompanyLogo2`</ph> is being deserialized, the deserialization engine knows about <ph id="ph2">`CircleType`</ph> and <ph id="ph3">`TriangleType`</ph> and, therefore, is able to find matching types for the "Circle" and "Triangle" data contracts.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Example 2</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the following example, even though both <ph id="ph1">`CustomerTypeA`</ph> and <ph id="ph2">`CustomerTypeB`</ph> have the <ph id="ph3">`Customer`</ph> data contract, an instance of <ph id="ph4">`CustomerTypeB`</ph> is created whenever a <ph id="ph5">`PurchaseOrder`</ph> is deserialized, because only <ph id="ph6">`CustomerTypeB`</ph> is known to the deserialization engine.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example 3</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph> stores its contents internally as <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To successfully deserialize a hash table, the deserialization engine must know the set of possible types that can occur there.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this case, we know in advance that only <ph id="ph1">`Book`</ph> and <ph id="ph2">`Magazine`</ph> objects are stored in the <ph id="ph3">`Catalog`</ph>, so those are added using the <ph id="ph4">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example 4</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the following example, a data contract stores a number and an operation to perform on the number.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Numbers`</ph> data member can be an integer, an array of integers, or a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains integers.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This will only work on the client side if SVCUTIL.EXE is used to generate a WCF proxy.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>SVCUTIL.EXE retrieves metadata from the service including any known types.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Without this information a client will not be able to deserialize the types.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This is the application code.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Known Types, Inheritance, and Interfaces</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When a known type is associated with a particular type using the <ph id="ph1">`KnownTypeAttribute`</ph> attribute, the known type is also associated with all of the derived types of that type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, see the following code.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DoubleDrawing`</ph> class does not require the <ph id="ph2">`KnownTypeAttribute`</ph> attribute to use <ph id="ph3">`Square`</ph> and <ph id="ph4">`Circle`</ph> in the <ph id="ph5">`AdditionalShape`</ph> field, because the base class (<ph id="ph6">`Drawing`</ph>) already has these attributes applied.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Known types can be associated only with classes and structures, not interfaces.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Known Types Using Open Generic Methods</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It may be necessary to add a generic type as a known type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, an open generic type cannot be passed as a parameter to the <ph id="ph1">`KnownTypeAttribute`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This problem can be solved by using an alternative mechanism: Write a method that returns a list of types to add to the known types collection.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The name of the method is then specified as a string argument to the <ph id="ph1">`KnownTypeAttribute`</ph> attribute due to some restrictions.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The method must exist on the type to which the <ph id="ph1">`KnownTypeAttribute`</ph> attribute is applied, must be static, must accept no parameters, and must return an object that can be assigned to <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> of <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You cannot combine the <ph id="ph1">`KnownTypeAttribute`</ph> attribute with a method name and <ph id="ph2">`KnownTypeAttribute`</ph> attributes with actual types on the same type.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Furthermore, you cannot apply more than one <ph id="ph1">`KnownTypeAttribute`</ph> with a method name to the same type.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See the following class.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`theDrawing`</ph> field contains instances of a generic class <ph id="ph2">`ColorDrawing`</ph> and a generic class <ph id="ph3">`BlackAndWhiteDrawing`</ph>, both of which inherit from a generic class <ph id="ph4">`Drawing`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Normally, both must be added to known types, but the following is not valid syntax for attributes.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Thus, a method must be created to return these types.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The correct way to write this type, then, is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Additional Ways to Add Known Types</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Additionally, known types can be added through a configuration file.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This is useful when you do not control the type that requires known types for proper deserialization, such as when using third-party type libraries with <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following configuration file shows how to specify a known type in a configuration file.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In the preceding configuration file a data contract type called <ph id="ph1">`MyCompany.Library.Shape`</ph> is declared to have <ph id="ph2">`MyCompany.Library.Circle`</ph> as a known type.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Object&gt;</ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer.KnownTypes%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Known Types<ept id="p1">](../../../../docs/framework/wcf/samples/known-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Contract Equivalence<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-equivalence.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Designing Service Contracts<ept id="p1">](../../../../docs/framework/wcf/designing-service-contracts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>