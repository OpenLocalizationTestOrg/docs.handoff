{"content":"---\ntitle: \"Me, My, MyBase, and MyClass in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"MyClass\"\n  - \"vb.Me\"\n  - \"MyBase\"\n  - \"vb.MyBase\"\n  - \"Me\"\n  - \"vb.MyClass\"\n  - \"vb.This\"\n  - \"vb.My\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"My object\"\n  - \"self-reference, Me keyword\"\n  - \"MyClass keyword, relationship to similar programming elements\"\n  - \"Me keyword, relationship to similar programming elements\"\n  - \"Me keyword, referring to the current instance of an object\"\n  - \"Me keyword\"\n  - \"self-reference\"\n  - \"current instance, Me keyword\"\n  - \"MyBase keyword, relationship to similar programming elements\"\nms.assetid: f8e241ae-b1ed-4886-9aa0-08c632154029\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Me, My, MyBase, and MyClass in Visual Basic\n`Me`, `My`, `MyBase`, and `MyClass` in [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] have similar names, but different purposes. This topic describes each of these entities in order to distinguish them.  \n  \n## Me  \n The `Me` keyword provides a way to refer to the specific instance of a class or structure in which the code is currently executing. `Me` behaves like either an object variable or a structure variable referring to the current instance. Using `Me` is particularly useful for passing information about the currently executing instance of a class or structure to a procedure in another class, structure, or module.  \n  \n For example, suppose you have the following procedure in a module.  \n  \n```  \nSub ChangeFormColor(FormName As Form)  \n   Randomize()  \n   FormName.BackColor = Color.FromArgb(Rnd() * 256, Rnd() * 256, Rnd() * 256)  \nEnd Sub  \n```  \n  \n You can call this procedure and pass the current instance of the <xref:System.Windows.Forms.Form> class as an argument by using the following statement.  \n  \n```  \nChangeFormColor(Me)  \n```  \n  \n## My  \n The `My` feature provides easy and intuitive access to a number of [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] classes, enabling the [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] user to interact with the computer, application, settings, resources, and so on.  \n  \n## MyBase  \n The `MyBase` keyword behaves like an object variable referring to the base class of the current instance of a class. `MyBase` is commonly used to access base class members that are overridden or shadowed in a derived class. `MyBase.New` is used to explicitly call a base class constructor from a derived class constructor.  \n  \n## MyClass  \n The `MyClass` keyword behaves like an object variable referring to the current instance of a class as originally implemented. `MyClass` is similar to `Me`, but all method calls on it are treated as if the method were `NotOverridable`.  \n  \n## See Also  \n [Inheritance Basics](../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)","nodes":[{"pos":[12,72],"content":"Me, My, MyBase, and MyClass in Visual Basic | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Me, My, MyBase, and MyClass in Visual Basic | Microsoft Docs","pos":[0,60]}]},{"pos":[1073,1116],"content":"Me, My, MyBase, and MyClass in Visual Basic","linkify":"Me, My, MyBase, and MyClass in Visual Basic","nodes":[{"content":"Me, My, MyBase, and MyClass in Visual Basic","pos":[0,43]}]},{"content":"<ph id=\"ph1\">`Me`</ph>, <ph id=\"ph2\">`My`</ph>, <ph id=\"ph3\">`MyBase`</ph>, and <ph id=\"ph4\">`MyClass`</ph> in <ph id=\"ph5\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> have similar names, but different purposes.","pos":[1117,1289],"source":"`Me`, `My`, `MyBase`, and `MyClass` in [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] have similar names, but different purposes."},{"content":"This topic describes each of these entities in order to distinguish them.","pos":[1290,1363]},{"pos":[1372,1374],"content":"Me","linkify":"Me","nodes":[{"content":"Me","pos":[0,2]}]},{"content":"The <ph id=\"ph1\">`Me`</ph> keyword provides a way to refer to the specific instance of a class or structure in which the code is currently executing.","pos":[1378,1509],"source":"The `Me` keyword provides a way to refer to the specific instance of a class or structure in which the code is currently executing."},{"content":"<ph id=\"ph1\">`Me`</ph> behaves like either an object variable or a structure variable referring to the current instance.","pos":[1510,1612],"source":"`Me` behaves like either an object variable or a structure variable referring to the current instance."},{"content":"Using <ph id=\"ph1\">`Me`</ph> is particularly useful for passing information about the currently executing instance of a class or structure to a procedure in another class, structure, or module.","pos":[1613,1788],"source":" Using `Me` is particularly useful for passing information about the currently executing instance of a class or structure to a procedure in another class, structure, or module."},{"content":"For example, suppose you have the following procedure in a module.","pos":[1795,1861]},{"content":"You can call this procedure and pass the current instance of the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form&gt;</ph> class as an argument by using the following statement.","pos":[2030,2182],"source":"You can call this procedure and pass the current instance of the <xref:System.Windows.Forms.Form> class as an argument by using the following statement."},{"pos":[2228,2230],"content":"My","linkify":"My","nodes":[{"content":"My","pos":[0,2]}]},{"pos":[2234,2577],"content":"The <ph id=\"ph1\">`My`</ph> feature provides easy and intuitive access to a number of <ph id=\"ph2\">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> classes, enabling the <ph id=\"ph3\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> user to interact with the computer, application, settings, resources, and so on.","source":"The `My` feature provides easy and intuitive access to a number of [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] classes, enabling the [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] user to interact with the computer, application, settings, resources, and so on."},{"pos":[2586,2592],"content":"MyBase","linkify":"MyBase","nodes":[{"content":"MyBase","pos":[0,6]}]},{"content":"The <ph id=\"ph1\">`MyBase`</ph> keyword behaves like an object variable referring to the base class of the current instance of a class.","pos":[2596,2712],"source":"The `MyBase` keyword behaves like an object variable referring to the base class of the current instance of a class."},{"content":"<ph id=\"ph1\">`MyBase`</ph> is commonly used to access base class members that are overridden or shadowed in a derived class.","pos":[2713,2819],"source":"`MyBase` is commonly used to access base class members that are overridden or shadowed in a derived class."},{"content":"<ph id=\"ph1\">`MyBase.New`</ph> is used to explicitly call a base class constructor from a derived class constructor.","pos":[2820,2918],"source":"`MyBase.New` is used to explicitly call a base class constructor from a derived class constructor."},{"pos":[2927,2934],"content":"MyClass","linkify":"MyClass","nodes":[{"content":"MyClass","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`MyClass`</ph> keyword behaves like an object variable referring to the current instance of a class as originally implemented.","pos":[2938,3063],"source":"The `MyClass` keyword behaves like an object variable referring to the current instance of a class as originally implemented."},{"content":"<ph id=\"ph1\">`MyClass`</ph> is similar to <ph id=\"ph2\">`Me`</ph>, but all method calls on it are treated as if the method were <ph id=\"ph3\">`NotOverridable`</ph>.","pos":[3064,3172],"source":"`MyClass` is similar to `Me`, but all method calls on it are treated as if the method were `NotOverridable`."},{"pos":[3181,3189],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3193,3314],"content":"<bpt id=\"p1\">[</bpt>Inheritance Basics<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept>","source":"[Inheritance Basics](../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)"}]}