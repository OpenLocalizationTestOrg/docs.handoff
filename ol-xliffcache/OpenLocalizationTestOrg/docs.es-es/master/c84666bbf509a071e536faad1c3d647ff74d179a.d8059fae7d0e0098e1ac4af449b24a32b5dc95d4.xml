{"content":"---\ntitle: \"Walkthrough: Simple Object Model and Query (C#)\"\nms.date: \"03/30/2017\"\nms.assetid: 419961cc-92d6-45f5-ae8a-d485bdde3a37\n---\n# Walkthrough: Simple Object Model and Query (C#)\nThis walkthrough provides a fundamental end-to-end [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] scenario with minimal complexities. You will create an entity class that models the Customers table in the sample Northwind database. You will then create a simple query to list customers who are located in London.  \n  \n This walkthrough is code-oriented by design to help show [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] concepts. Normally speaking, you would use the [!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)] to create your object model.  \n  \n [!INCLUDE[note_settings_general](../../../../../../includes/note-settings-general-md.md)]  \n  \n This walkthrough was written by using Visual C# Development Settings.  \n  \n## Prerequisites  \n  \n-   This walkthrough uses a dedicated folder (\"c:\\linqtest5\") to hold files. Create this folder before you begin the walkthrough.  \n  \n-   This walkthrough requires the Northwind sample database. If you do not have this database on your development computer, you can download it from the Microsoft download site. For instructions, see [Downloading Sample Databases](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md). After you have downloaded the database, copy the file to the c:\\linqtest5 folder.  \n  \n## Overview  \n This walkthrough consists of six main tasks:  \n  \n-   Creating a [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] solution in Visual Studio.  \n  \n-   Mapping a class to a database table.  \n  \n-   Designating properties on the class to represent database columns.  \n  \n-   Specifying the connection to the Northwind database.  \n  \n-   Creating a simple query to run against the database.  \n  \n-   Executing the query and observing the results.  \n  \n## Creating a LINQ to SQL Solution  \n In this first task, you create a Visual Studio solution that contains the necessary references to build and run a [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] project.  \n  \n#### To create a LINQ to SQL solution  \n  \n1.  On the Visual Studio **File** menu, point to **New**, and then click **Project**.  \n  \n2.  In the **Project types** pane of the **New Project** dialog box, click **Visual C#**.  \n  \n3.  In the **Templates** pane, click **Console Application**.  \n  \n4.  In the **Name** box, type **LinqConsoleApp**.  \n  \n5.  In the **Location** box, verify where you want to store your project files.  \n  \n6.  Click **OK**.  \n  \n## Adding LINQ References and Directives  \n This walkthrough uses assemblies that might not be installed by default in your project. If System.Data.Linq is not listed as a reference in your project (expand the **References** node in **Solution Explorer**), add it, as explained in the following steps.  \n  \n#### To add System.Data.Linq  \n  \n1.  In **Solution Explorer**, right-click **References**, and then click **Add Reference**.  \n  \n2.  In the **Add Reference** dialog box, click **.NET**, click the System.Data.Linq assembly, and then click **OK**.  \n  \n     The assembly is added to the project.  \n  \n3.  Add the following directives at the top of **Program.cs**:  \n  \n     [!code-csharp[DLinqWalk1CS#1](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqWalk1CS/cs/Program.cs#1)]  \n  \n## Mapping a Class to a Database Table  \n In this step, you create a class and map it to a database table. Such a class is termed an *entity class*. Note that the mapping is accomplished by just adding the <xref:System.Data.Linq.Mapping.TableAttribute> attribute. The <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> property specifies the name of the table in the database.  \n  \n#### To create an entity class and map it to a database table  \n  \n-   Type or paste the following code into Program.cs immediately above the `Program` class declaration:  \n  \n     [!code-csharp[DLinqWalk1CS#2](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqWalk1CS/cs/Program.cs#2)]  \n  \n## Designating Properties on the Class to Represent Database Columns  \n In this step, you accomplish several tasks.  \n  \n-   You use the <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute to designate `CustomerID` and `City` properties on the entity class as representing columns in the database table.  \n  \n-   You designate the `CustomerID` property as representing a primary key column in the database.  \n  \n-   You designate `_CustomerID` and `_City` fields for private storage. [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] can then store and retrieve values directly, instead of using public accessors that might include business logic.  \n  \n#### To represent characteristics of two database columns  \n  \n-   Type or paste the following code into Program.cs inside the curly braces for the `Customer` class.  \n  \n     [!code-csharp[DLinqWalk1CS#3](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqWalk1CS/cs/Program.cs#3)]  \n  \n## Specifying the Connection to the Northwind Database  \n In this step you use a <xref:System.Data.Linq.DataContext> object to establish a connection between your code-based data structures and the database itself. The <xref:System.Data.Linq.DataContext> is the main channel through which you retrieve objects from the database and submit changes.  \n  \n You also declare a `Table<Customer>` to act as the logical, typed table for your queries against the Customers table in the database. You will create and execute these queries in later steps.  \n  \n#### To specify the database connection  \n  \n-   Type or paste the following code into the `Main` method.  \n  \n     Note that the `northwnd.mdf` file is assumed to be in the linqtest5 folder. For more information, see the Prerequisites section earlier in this walkthrough.  \n  \n     [!code-csharp[DLinqWalk1CS#4](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqWalk1CS/cs/Program.cs#4)]  \n  \n## Creating a Simple Query  \n In this step, you create a query to find which customers in the database Customers table are located in London. The query code in this step just describes the query. It does not execute it. This approach is known as *deferred execution*. For more information, see [Introduction to LINQ Queries (C#)](~/docs/csharp/programming-guide/concepts/linq/introduction-to-linq-queries.md).  \n  \n You will also produce a log output to show the SQL commands that [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] generates. This logging feature (which uses <xref:System.Data.Linq.DataContext.Log%2A>) is helpful in debugging, and in determining that the commands being sent to the database accurately represent your query.  \n  \n#### To create a simple query  \n  \n-   Type or paste the following code into the `Main` method after the `Table<Customer>` declaration.  \n  \n     [!code-csharp[DLinqWalk1ACS#5](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqWalk1ACS/cs/Program.cs#5)]  \n  \n## Executing the Query  \n In this step, you actually execute the query. The query expressions you created in the previous steps are not evaluated until the results are needed. When you begin the `foreach` iteration, a SQL command is executed against the database and objects are materialized.  \n  \n#### To execute the query  \n  \n1.  Type or paste the following code at the end of the `Main` method (after the query description).  \n  \n     [!code-csharp[DLinqWalk1ACS#6](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqWalk1ACS/cs/Program.cs#6)]  \n  \n2.  Press F5 to debug the application.  \n  \n    > [!NOTE]\n    >  If your application generates a run-time error, see the Troubleshooting section of [Learning by Walkthroughs](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md).  \n  \n     The query results in the console window should appear as follows:  \n  \n     `ID=AROUT, City=London`  \n  \n     `ID=BSBEV, City=London`  \n  \n     `ID=CONSH, City=London`  \n  \n     `ID=EASTC, City=London`  \n  \n     `ID=NORTS, City=London`  \n  \n     `ID=SEVES, City=London`  \n  \n3.  Press Enter in the console window to close the application.  \n  \n## Next Steps  \n The [Walkthrough: Querying Across Relationships (C#)](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-querying-across-relationships-csharp.md) topic continues where this walkthrough ends. The Query Across Relationships walkthrough demonstrates how [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] can query across tables, similar to *joins* in a relational database.  \n  \n If you want to do the Query Across Relationships walkthrough, make sure to save the solution for the walkthrough you have just completed, which is a prerequisite.  \n  \n## See also\n\n- [Learning by Walkthroughs](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)\n","nodes":[{"pos":[4,131],"embed":true,"restype":"x-metadata","content":"title: \"Walkthrough: Simple Object Model and Query (C#)\"\nms.date: \"03/30/2017\"\nms.assetid: 419961cc-92d6-45f5-ae8a-d485bdde3a37","nodes":[{"content":"Walkthrough: Simple Object Model and Query (C#)","nodes":[{"pos":[0,47],"content":"Walkthrough: Simple Object Model and Query (C#)","nodes":[{"content":"Walkthrough: Simple Object Model and Query (C#)","pos":[0,47]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[138,185],"content":"Walkthrough: Simple Object Model and Query (C#)","linkify":"Walkthrough: Simple Object Model and Query (C#)","nodes":[{"content":"Walkthrough: Simple Object Model and Query (C#)","pos":[0,47]}]},{"content":"This walkthrough provides a fundamental end-to-end <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> scenario with minimal complexities.","pos":[186,340],"source":"This walkthrough provides a fundamental end-to-end [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] scenario with minimal complexities."},{"content":"You will create an entity class that models the Customers table in the sample Northwind database.","pos":[341,438]},{"content":"You will then create a simple query to list customers who are located in London.","pos":[439,519]},{"content":"This walkthrough is code-oriented by design to help show <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> concepts.","pos":[526,660],"source":"This walkthrough is code-oriented by design to help show [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] concepts."},{"content":"Normally speaking, you would use the <ph id=\"ph1\">[!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)]</ph> to create your object model.","pos":[661,810],"source":" Normally speaking, you would use the [!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)] to create your object model."},{"content":"This walkthrough was written by using Visual C# Development Settings.","pos":[913,982]},{"pos":[991,1004],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"This walkthrough uses a dedicated folder (\"c:\\linqtest5\") to hold files.","pos":[1014,1086]},{"content":"Create this folder before you begin the walkthrough.","pos":[1087,1139]},{"content":"This walkthrough requires the Northwind sample database.","pos":[1149,1205]},{"content":"If you do not have this database on your development computer, you can download it from the Microsoft download site.","pos":[1206,1322]},{"content":"For instructions, see <bpt id=\"p1\">[</bpt>Downloading Sample Databases<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md)</ept>.","pos":[1323,1463],"source":" For instructions, see [Downloading Sample Databases](../../../../../../docs/framework/data/adonet/sql/linq/downloading-sample-databases.md)."},{"content":"After you have downloaded the database, copy the file to the c:\\linqtest5 folder.","pos":[1464,1545]},{"pos":[1554,1562],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"content":"This walkthrough consists of six main tasks:","pos":[1566,1610]},{"pos":[1620,1725],"content":"Creating a <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> solution in Visual Studio.","source":"Creating a [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] solution in Visual Studio."},{"content":"Mapping a class to a database table.","pos":[1735,1771]},{"content":"Designating properties on the class to represent database columns.","pos":[1781,1847]},{"content":"Specifying the connection to the Northwind database.","pos":[1857,1909]},{"content":"Creating a simple query to run against the database.","pos":[1919,1971]},{"content":"Executing the query and observing the results.","pos":[1981,2027]},{"pos":[2036,2067],"content":"Creating a LINQ to SQL Solution","linkify":"Creating a LINQ to SQL Solution","nodes":[{"content":"Creating a LINQ to SQL Solution","pos":[0,31]}]},{"pos":[2071,2261],"content":"In this first task, you create a Visual Studio solution that contains the necessary references to build and run a <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> project.","source":"In this first task, you create a Visual Studio solution that contains the necessary references to build and run a [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] project."},{"pos":[2272,2304],"content":"To create a LINQ to SQL solution","linkify":"To create a LINQ to SQL solution","nodes":[{"content":"To create a LINQ to SQL solution","pos":[0,32]}]},{"pos":[2314,2395],"content":"On the Visual Studio <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, point to <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","source":"On the Visual Studio **File** menu, point to **New**, and then click **Project**."},{"pos":[2405,2490],"content":"In the <bpt id=\"p1\">**</bpt>Project types<ept id=\"p1\">**</ept> pane of the <bpt id=\"p2\">**</bpt>New Project<ept id=\"p2\">**</ept> dialog box, click <bpt id=\"p3\">**</bpt>Visual C#<ept id=\"p3\">**</ept>.","source":"In the **Project types** pane of the **New Project** dialog box, click **Visual C#**."},{"pos":[2500,2557],"content":"In the <bpt id=\"p1\">**</bpt>Templates<ept id=\"p1\">**</ept> pane, click <bpt id=\"p2\">**</bpt>Console Application<ept id=\"p2\">**</ept>.","source":"In the **Templates** pane, click **Console Application**."},{"pos":[2567,2612],"content":"In the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> box, type <bpt id=\"p2\">**</bpt>LinqConsoleApp<ept id=\"p2\">**</ept>.","source":"In the **Name** box, type **LinqConsoleApp**."},{"pos":[2622,2697],"content":"In the <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept> box, verify where you want to store your project files.","source":"In the **Location** box, verify where you want to store your project files."},{"pos":[2707,2720],"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","source":"Click **OK**."},{"pos":[2729,2766],"content":"Adding LINQ References and Directives","linkify":"Adding LINQ References and Directives","nodes":[{"content":"Adding LINQ References and Directives","pos":[0,37]}]},{"content":"This walkthrough uses assemblies that might not be installed by default in your project.","pos":[2770,2858]},{"content":"If System.Data.Linq is not listed as a reference in your project (expand the <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept> node in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept>), add it, as explained in the following steps.","pos":[2859,3027],"source":" If System.Data.Linq is not listed as a reference in your project (expand the **References** node in **Solution Explorer**), add it, as explained in the following steps."},{"pos":[3038,3061],"content":"To add System.Data.Linq","linkify":"To add System.Data.Linq","nodes":[{"content":"To add System.Data.Linq","pos":[0,23]}]},{"pos":[3071,3158],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click <bpt id=\"p2\">**</bpt>References<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Add Reference<ept id=\"p3\">**</ept>.","source":"In **Solution Explorer**, right-click **References**, and then click **Add Reference**."},{"pos":[3168,3280],"content":"In the <bpt id=\"p1\">**</bpt>Add Reference<ept id=\"p1\">**</ept> dialog box, click <bpt id=\"p2\">**</bpt>.NET<ept id=\"p2\">**</ept>, click the System.Data.Linq assembly, and then click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>.","source":"In the **Add Reference** dialog box, click **.NET**, click the System.Data.Linq assembly, and then click **OK**."},{"content":"The assembly is added to the project.","pos":[3291,3328]},{"pos":[3338,3396],"content":"Add the following directives at the top of <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>:","source":"Add the following directives at the top of **Program.cs**:"},{"pos":[3535,3570],"content":"Mapping a Class to a Database Table","linkify":"Mapping a Class to a Database Table","nodes":[{"content":"Mapping a Class to a Database Table","pos":[0,35]}]},{"content":"In this step, you create a class and map it to a database table.","pos":[3574,3638]},{"content":"Such a class is termed an <bpt id=\"p1\">*</bpt>entity class<ept id=\"p1\">*</ept>.","pos":[3639,3680],"source":" Such a class is termed an *entity class*."},{"content":"Note that the mapping is accomplished by just adding the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Mapping.TableAttribute&gt;</ph> attribute.","pos":[3681,3795],"source":" Note that the mapping is accomplished by just adding the <xref:System.Data.Linq.Mapping.TableAttribute> attribute."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.Linq.Mapping.TableAttribute.Name%2A&gt;</ph> property specifies the name of the table in the database.","pos":[3796,3912],"source":" The <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> property specifies the name of the table in the database."},{"pos":[3923,3979],"content":"To create an entity class and map it to a database table","linkify":"To create an entity class and map it to a database table","nodes":[{"content":"To create an entity class and map it to a database table","pos":[0,56]}]},{"pos":[3989,4088],"content":"Type or paste the following code into Program.cs immediately above the <ph id=\"ph1\">`Program`</ph> class declaration:","source":"Type or paste the following code into Program.cs immediately above the `Program` class declaration:"},{"pos":[4227,4292],"content":"Designating Properties on the Class to Represent Database Columns","linkify":"Designating Properties on the Class to Represent Database Columns","nodes":[{"content":"Designating Properties on the Class to Represent Database Columns","pos":[0,65]}]},{"content":"In this step, you accomplish several tasks.","pos":[4296,4339]},{"pos":[4349,4533],"content":"You use the <ph id=\"ph1\">&lt;xref:System.Data.Linq.Mapping.ColumnAttribute&gt;</ph> attribute to designate <ph id=\"ph2\">`CustomerID`</ph> and <ph id=\"ph3\">`City`</ph> properties on the entity class as representing columns in the database table.","source":"You use the <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute to designate `CustomerID` and `City` properties on the entity class as representing columns in the database table."},{"pos":[4543,4636],"content":"You designate the <ph id=\"ph1\">`CustomerID`</ph> property as representing a primary key column in the database.","source":"You designate the `CustomerID` property as representing a primary key column in the database."},{"content":"You designate <ph id=\"ph1\">`_CustomerID`</ph> and <ph id=\"ph2\">`_City`</ph> fields for private storage.","pos":[4646,4713],"source":"You designate `_CustomerID` and `_City` fields for private storage."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> can then store and retrieve values directly, instead of using public accessors that might include business logic.","pos":[4714,4895],"source":"[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] can then store and retrieve values directly, instead of using public accessors that might include business logic."},{"pos":[4906,4958],"content":"To represent characteristics of two database columns","linkify":"To represent characteristics of two database columns","nodes":[{"content":"To represent characteristics of two database columns","pos":[0,52]}]},{"pos":[4968,5066],"content":"Type or paste the following code into Program.cs inside the curly braces for the <ph id=\"ph1\">`Customer`</ph> class.","source":"Type or paste the following code into Program.cs inside the curly braces for the `Customer` class."},{"pos":[5205,5256],"content":"Specifying the Connection to the Northwind Database","linkify":"Specifying the Connection to the Northwind Database","nodes":[{"content":"Specifying the Connection to the Northwind Database","pos":[0,51]}]},{"content":"In this step you use a <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> object to establish a connection between your code-based data structures and the database itself.","pos":[5260,5416],"source":"In this step you use a <xref:System.Data.Linq.DataContext> object to establish a connection between your code-based data structures and the database itself."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> is the main channel through which you retrieve objects from the database and submit changes.","pos":[5417,5549],"source":" The <xref:System.Data.Linq.DataContext> is the main channel through which you retrieve objects from the database and submit changes."},{"content":"You also declare a <ph id=\"ph1\">`Table&lt;Customer&gt;`</ph> to act as the logical, typed table for your queries against the Customers table in the database.","pos":[5556,5689],"source":"You also declare a `Table<Customer>` to act as the logical, typed table for your queries against the Customers table in the database."},{"content":"You will create and execute these queries in later steps.","pos":[5690,5747]},{"pos":[5758,5792],"content":"To specify the database connection","linkify":"To specify the database connection","nodes":[{"content":"To specify the database connection","pos":[0,34]}]},{"pos":[5802,5858],"content":"Type or paste the following code into the <ph id=\"ph1\">`Main`</ph> method.","source":"Type or paste the following code into the `Main` method."},{"content":"Note that the <ph id=\"ph1\">`northwnd.mdf`</ph> file is assumed to be in the linqtest5 folder.","pos":[5869,5944],"source":"Note that the `northwnd.mdf` file is assumed to be in the linqtest5 folder."},{"content":"For more information, see the Prerequisites section earlier in this walkthrough.","pos":[5945,6025]},{"pos":[6164,6187],"content":"Creating a Simple Query","linkify":"Creating a Simple Query","nodes":[{"content":"Creating a Simple Query","pos":[0,23]}]},{"content":"In this step, you create a query to find which customers in the database Customers table are located in London.","pos":[6191,6302]},{"content":"The query code in this step just describes the query.","pos":[6303,6356]},{"content":"It does not execute it.","pos":[6357,6380]},{"content":"This approach is known as <bpt id=\"p1\">*</bpt>deferred execution<ept id=\"p1\">*</ept>.","pos":[6381,6428],"source":" This approach is known as *deferred execution*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Introduction to LINQ Queries (C#)<ept id=\"p1\">](~/docs/csharp/programming-guide/concepts/linq/introduction-to-linq-queries.md)</ept>.","pos":[6429,6570],"source":" For more information, see [Introduction to LINQ Queries (C#)](~/docs/csharp/programming-guide/concepts/linq/introduction-to-linq-queries.md)."},{"content":"You will also produce a log output to show the SQL commands that <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> generates.","pos":[6577,6720],"source":"You will also produce a log output to show the SQL commands that [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] generates."},{"content":"This logging feature (which uses <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext.Log%2A&gt;</ph>) is helpful in debugging, and in determining that the commands being sent to the database accurately represent your query.","pos":[6721,6919],"source":" This logging feature (which uses <xref:System.Data.Linq.DataContext.Log%2A>) is helpful in debugging, and in determining that the commands being sent to the database accurately represent your query."},{"pos":[6930,6954],"content":"To create a simple query","linkify":"To create a simple query","nodes":[{"content":"To create a simple query","pos":[0,24]}]},{"pos":[6964,7060],"content":"Type or paste the following code into the <ph id=\"ph1\">`Main`</ph> method after the <ph id=\"ph2\">`Table&lt;Customer&gt;`</ph> declaration.","source":"Type or paste the following code into the `Main` method after the `Table<Customer>` declaration."},{"pos":[7201,7220],"content":"Executing the Query","linkify":"Executing the Query","nodes":[{"content":"Executing the Query","pos":[0,19]}]},{"content":"In this step, you actually execute the query.","pos":[7224,7269]},{"content":"The query expressions you created in the previous steps are not evaluated until the results are needed.","pos":[7270,7373]},{"content":"When you begin the <ph id=\"ph1\">`foreach`</ph> iteration, a SQL command is executed against the database and objects are materialized.","pos":[7374,7490],"source":" When you begin the `foreach` iteration, a SQL command is executed against the database and objects are materialized."},{"pos":[7501,7521],"content":"To execute the query","linkify":"To execute the query","nodes":[{"content":"To execute the query","pos":[0,20]}]},{"pos":[7531,7626],"content":"Type or paste the following code at the end of the <ph id=\"ph1\">`Main`</ph> method (after the query description).","source":"Type or paste the following code at the end of the `Main` method (after the query description)."},{"content":"Press F5 to debug the application.","pos":[7768,7802]},{"pos":[7814,8022],"content":"[!NOTE]\nIf your application generates a run-time error, see the Troubleshooting section of [Learning by Walkthroughs](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md).","leadings":["","    >  "],"nodes":[{"content":"If your application generates a run-time error, see the Troubleshooting section of <bpt id=\"p1\">[</bpt>Learning by Walkthroughs<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)</ept>.","pos":[8,201],"source":"If your application generates a run-time error, see the Troubleshooting section of [Learning by Walkthroughs](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)."}]},{"content":"The query results in the console window should appear as follows:","pos":[8033,8098]},{"content":"Press Enter in the console window to close the application.","pos":[8312,8371]},{"pos":[8380,8390],"content":"Next Steps","linkify":"Next Steps","nodes":[{"content":"Next Steps","pos":[0,10]}]},{"content":"The <bpt id=\"p1\">[</bpt>Walkthrough: Querying Across Relationships (C#)<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-querying-across-relationships-csharp.md)</ept> topic continues where this walkthrough ends.","pos":[8394,8599],"source":"The [Walkthrough: Querying Across Relationships (C#)](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-querying-across-relationships-csharp.md) topic continues where this walkthrough ends."},{"content":"The Query Across Relationships walkthrough demonstrates how <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> can query across tables, similar to <bpt id=\"p1\">*</bpt>joins<ept id=\"p1\">*</ept> in a relational database.","pos":[8600,8797],"source":" The Query Across Relationships walkthrough demonstrates how [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] can query across tables, similar to *joins* in a relational database."},{"content":"If you want to do the Query Across Relationships walkthrough, make sure to save the solution for the walkthrough you have just completed, which is a prerequisite.","pos":[8804,8966]},{"pos":[8975,8983],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8987,9096],"content":"<bpt id=\"p1\">[</bpt>Learning by Walkthroughs<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)</ept>","source":"[Learning by Walkthroughs](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)"}]}