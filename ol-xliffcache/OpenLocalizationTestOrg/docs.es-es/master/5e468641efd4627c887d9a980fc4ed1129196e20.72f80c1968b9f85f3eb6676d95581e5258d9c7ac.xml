{"content":"---\ntitle: \"Using nullable types - C# Programming Guide\"\nms.custom: seodec18\ndescription: Learn how to work with C# nullable types\nms.date: 08/02/2018\nhelpviewer_keywords: \n  - \"nullable types [C#], about nullable types\"\nms.assetid: 0bacbe72-ce15-4b14-83e1-9c14e6380c28\n---\n# Using nullable types (C# Programming Guide)\n\nNullable types are types that represent all the values of an underlying value type `T`, and an additional [null](../../language-reference/keywords/null.md) value. For more information, see the [Nullable types](index.md) topic.\n\nYou can refer to a nullable type in any of the following forms: `Nullable<T>` or `T?`. These two forms are interchangeable.  \n  \n## Declaration and assignment\n\nAs a value type can be implicitly converted to the corresponding nullable type, you assign a value to a nullable type as you would for its underlying value type. You also can assign the `null` value.  For example:\n  \n[!code-csharp[declare and assign](../../../../samples/snippets/csharp/programming-guide/nullable-types/NullableTypesUsage.cs#1)]\n\n## Examination of a nullable type value\n\nUse the following readonly properties to examine an instance of a nullable type for null and retrieve a value of an underlying type:  \n  \n- <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> indicates whether an instance of a nullable type has a value of its underlying type.\n  \n- <xref:System.Nullable%601.Value%2A?displayProperty=nameWithType> gets the value of an underlying type if <xref:System.Nullable%601.HasValue%2A> is `true`. If <xref:System.Nullable%601.HasValue%2A> is `false`, the <xref:System.Nullable%601.Value%2A> property throws an <xref:System.InvalidOperationException>.\n  \nThe code in the following example uses the `HasValue` property to test whether the variable contains a value before displaying it:\n  \n[!code-csharp-interactive[use HasValue](../../../../samples/snippets/csharp/programming-guide/nullable-types/NullableTypesUsage.cs#2)]\n  \nYou also can compare a nullable type variable with `null` instead of using the `HasValue` property, as the following example shows:  \n  \n[!code-csharp-interactive[use comparison with null](../../../../samples/snippets/csharp/programming-guide/nullable-types/NullableTypesUsage.cs#3)]\n\nBeginning with C# 7.0, you can use [pattern matching](../../pattern-matching.md) to both examine and get a value of a nullable type:\n\n[!code-csharp-interactive[use pattern matching](../../../../samples/snippets/csharp/programming-guide/nullable-types/NullableTypesUsage.cs#4)]\n\n## Conversion from a nullable type to an underlying type\n\nIf you need to assign a nullable type value to a non-nullable type, use the [null-coalescing operator `??`](../../language-reference/operators/null-coalescing-operator.md) to specify the value to be assigned if a nullable type value is null (you also can use the <xref:System.Nullable%601.GetValueOrDefault(%600)?displayProperty=nameWithType> method to do that):\n  \n[!code-csharp-interactive[?? operator](../../../../samples/snippets/csharp/programming-guide/nullable-types/NullableTypesUsage.cs#5)]\n\nUse the <xref:System.Nullable%601.GetValueOrDefault?displayProperty=nameWithType> method if the value to be used when a nullable type value is null should be the default value of the underlying value type.\n  \nYou can explicitly cast a nullable type to a non-nullable type. For example:  \n  \n[!code-csharp[explicit cast](../../../../samples/snippets/csharp/programming-guide/nullable-types/NullableTypesUsage.cs#6)]\n\nAt run time, if the value of a nullable type is null, the explicit cast throws an <xref:System.InvalidOperationException>.\n\nA non-nullable value type is implicitly converted to the corresponding nullable type.\n  \n## Operators\n\nThe predefined unary and binary operators and any user-defined operators that exist for value types may also be used by nullable types. These operators produce a null value if one or both operands are null; otherwise, the operator uses the contained values to calculate the result. For example:  \n  \n[!code-csharp[operators](../../../../samples/snippets/csharp/programming-guide/nullable-types/NullableTypesUsage.cs#7)]\n  \nFor the relational operators (`<`, `>`, `<=`, `>=`), if one or both operands are null, the result is `false`. Do not assume that because a particular comparison (for example, `<=`) returns `false`, the opposite comparison (`>`) returns `true`. The following example shows that 10 is\n\n- neither greater than or equal to null,\n- nor less than null.\n  \n[!code-csharp-interactive[relational and equality operators](../../../../samples/snippets/csharp/programming-guide/nullable-types/NullableTypesUsage.cs#8)]\n  \nThe above example also shows that an equality comparison of two nullable types that are both null evaluates to `true`.\n\n## Boxing and unboxing\n\nA nullable value type is [boxed](../types/boxing-and-unboxing.md) by the following rules:\n\n- If <xref:System.Nullable%601.HasValue%2A> returns `false`, the null reference is produced.  \n- If <xref:System.Nullable%601.HasValue%2A> returns `true`, a value of the underlying value type `T` is boxed, not the instance of <xref:System.Nullable%601>.\n\nYou can unbox the boxed value type to the corresponding nullable type, as the following example shows:\n\n[!code-csharp-interactive[boxing and unboxing](../../../../samples/snippets/csharp/programming-guide/nullable-types/NullableTypesUsage.cs#9)]\n\n## The bool? type\n\nThe `bool?` nullable type can contain three different values: [true](../../language-reference/keywords/true-literal.md), [false](../../language-reference/keywords/false-literal.md), and [null](../../language-reference/keywords/null.md). The `bool?` type is like the Boolean variable type that is used in SQL. To ensure that the results produced by the `&` and `|` operators are consistent with the three-valued Boolean type in SQL, the following predefined operators are provided:\n\n- `bool? operator &(bool? x, bool? y)`  \n- `bool? operator |(bool? x, bool? y)`  \n  \nThe semantics of these operators is defined by the following table:  \n  \n|x|y|x&y|x&#124;y|  \n|-------|-------|---------|--------------|  \n|true|true|true|true|  \n|true|false|false|true|  \n|true|null|null|true|  \n|false|true|false|true|  \n|false|false|false|false|  \n|false|null|false|null|  \n|null|true|null|true|  \n|null|false|false|null|  \n|null|null|null|null|  \n\nNote that these two operators don't follow the rules described in the [Operators](#operators) section: the result of an operator evaluation can be non-null even if one of the operands is null.\n  \n## See also\n\n- [Nullable types](index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [What exactly does 'lifted' mean?](https://blogs.msdn.microsoft.com/ericlippert/2007/06/27/what-exactly-does-lifted-mean/)\n","nodes":[{"pos":[4,269],"embed":true,"restype":"x-metadata","content":"title: \"Using nullable types - C# Programming Guide\"\nms.custom: seodec18\ndescription: Learn how to work with C# nullable types\nms.date: 08/02/2018\nhelpviewer_keywords: \n  - \"nullable types [C#], about nullable types\"\nms.assetid: 0bacbe72-ce15-4b14-83e1-9c14e6380c28","nodes":[{"content":"Using nullable types - C# Programming Guide","nodes":[{"pos":[0,43],"content":"Using nullable types - C# Programming Guide","nodes":[{"content":"Using nullable types - C# Programming Guide","pos":[0,43]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to work with C# nullable types","nodes":[{"pos":[0,40],"content":"Learn how to work with C# nullable types","nodes":[{"content":"Learn how to work with C# nullable types","pos":[0,40]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[276,319],"content":"Using nullable types (C# Programming Guide)","linkify":"Using nullable types (C# Programming Guide)","nodes":[{"content":"Using nullable types (C# Programming Guide)","pos":[0,43]}]},{"content":"Nullable types are types that represent all the values of an underlying value type <ph id=\"ph1\">`T`</ph>, and an additional <bpt id=\"p1\">[</bpt>null<ept id=\"p1\">](../../language-reference/keywords/null.md)</ept> value.","pos":[321,483],"source":"Nullable types are types that represent all the values of an underlying value type `T`, and an additional [null](../../language-reference/keywords/null.md) value."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Nullable types<ept id=\"p1\">](index.md)</ept> topic.","pos":[484,547],"source":" For more information, see the [Nullable types](index.md) topic."},{"content":"You can refer to a nullable type in any of the following forms: <ph id=\"ph1\">`Nullable&lt;T&gt;`</ph> or <ph id=\"ph2\">`T?`</ph>.","pos":[549,635],"source":"You can refer to a nullable type in any of the following forms: `Nullable<T>` or `T?`."},{"content":"These two forms are interchangeable.","pos":[636,672]},{"pos":[681,707],"content":"Declaration and assignment","linkify":"Declaration and assignment","nodes":[{"content":"Declaration and assignment","pos":[0,26]}]},{"content":"As a value type can be implicitly converted to the corresponding nullable type, you assign a value to a nullable type as you would for its underlying value type.","pos":[709,870]},{"content":"You also can assign the <ph id=\"ph1\">`null`</ph> value.","pos":[871,908],"source":" You also can assign the `null` value."},{"content":"For example:","pos":[910,922]},{"pos":[1059,1095],"content":"Examination of a nullable type value","linkify":"Examination of a nullable type value","nodes":[{"content":"Examination of a nullable type value","pos":[0,36]}]},{"content":"Use the following readonly properties to examine an instance of a nullable type for null and retrieve a value of an underlying type:","pos":[1097,1229]},{"pos":[1237,1389],"content":"<ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType&gt;</ph> indicates whether an instance of a nullable type has a value of its underlying type.","source":"<xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> indicates whether an instance of a nullable type has a value of its underlying type."},{"content":"<ph id=\"ph1\">&lt;xref:System.Nullable%601.Value%2A?displayProperty=nameWithType&gt;</ph> gets the value of an underlying type if <ph id=\"ph2\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> is <ph id=\"ph3\">`true`</ph>.","pos":[1395,1549],"source":"<xref:System.Nullable%601.Value%2A?displayProperty=nameWithType> gets the value of an underlying type if <xref:System.Nullable%601.HasValue%2A> is `true`."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the <ph id=\"ph3\">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property throws an <ph id=\"ph4\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[1550,1703],"source":" If <xref:System.Nullable%601.HasValue%2A> is `false`, the <xref:System.Nullable%601.Value%2A> property throws an <xref:System.InvalidOperationException>."},{"pos":[1707,1837],"content":"The code in the following example uses the <ph id=\"ph1\">`HasValue`</ph> property to test whether the variable contains a value before displaying it:","source":"The code in the following example uses the `HasValue` property to test whether the variable contains a value before displaying it:"},{"pos":[1979,2110],"content":"You also can compare a nullable type variable with <ph id=\"ph1\">`null`</ph> instead of using the <ph id=\"ph2\">`HasValue`</ph> property, as the following example shows:","source":"You also can compare a nullable type variable with `null` instead of using the `HasValue` property, as the following example shows:"},{"pos":[2264,2396],"content":"Beginning with C# 7.0, you can use <bpt id=\"p1\">[</bpt>pattern matching<ept id=\"p1\">](../../pattern-matching.md)</ept> to both examine and get a value of a nullable type:","source":"Beginning with C# 7.0, you can use [pattern matching](../../pattern-matching.md) to both examine and get a value of a nullable type:"},{"pos":[2545,2598],"content":"Conversion from a nullable type to an underlying type","linkify":"Conversion from a nullable type to an underlying type","nodes":[{"content":"Conversion from a nullable type to an underlying type","pos":[0,53]}]},{"pos":[2600,2962],"content":"If you need to assign a nullable type value to a non-nullable type, use the <bpt id=\"p1\">[</bpt>null-coalescing operator <ph id=\"ph1\">`??`</ph><ept id=\"p1\">](../../language-reference/operators/null-coalescing-operator.md)</ept> to specify the value to be assigned if a nullable type value is null (you also can use the <ph id=\"ph2\">&lt;xref:System.Nullable%601.GetValueOrDefault(%600)?displayProperty=nameWithType&gt;</ph> method to do that):","source":"If you need to assign a nullable type value to a non-nullable type, use the [null-coalescing operator `??`](../../language-reference/operators/null-coalescing-operator.md) to specify the value to be assigned if a nullable type value is null (you also can use the <xref:System.Nullable%601.GetValueOrDefault(%600)?displayProperty=nameWithType> method to do that):"},{"pos":[3101,3306],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Nullable%601.GetValueOrDefault?displayProperty=nameWithType&gt;</ph> method if the value to be used when a nullable type value is null should be the default value of the underlying value type.","source":"Use the <xref:System.Nullable%601.GetValueOrDefault?displayProperty=nameWithType> method if the value to be used when a nullable type value is null should be the default value of the underlying value type."},{"content":"You can explicitly cast a nullable type to a non-nullable type.","pos":[3310,3373]},{"content":"For example:","pos":[3374,3386]},{"pos":[3517,3639],"content":"At run time, if the value of a nullable type is null, the explicit cast throws an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph>.","source":"At run time, if the value of a nullable type is null, the explicit cast throws an <xref:System.InvalidOperationException>."},{"content":"A non-nullable value type is implicitly converted to the corresponding nullable type.","pos":[3641,3726]},{"pos":[3733,3742],"content":"Operators","linkify":"Operators","nodes":[{"content":"Operators","pos":[0,9]}]},{"content":"The predefined unary and binary operators and any user-defined operators that exist for value types may also be used by nullable types.","pos":[3744,3879]},{"content":"These operators produce a null value if one or both operands are null; otherwise, the operator uses the contained values to calculate the result.","pos":[3880,4025]},{"content":"For example:","pos":[4026,4038]},{"content":"For the relational operators (<ph id=\"ph1\">`&lt;`</ph>, <ph id=\"ph2\">`&gt;`</ph>, <ph id=\"ph3\">`&lt;=`</ph>, <ph id=\"ph4\">`&gt;=`</ph>), if one or both operands are null, the result is <ph id=\"ph5\">`false`</ph>.","pos":[4167,4276],"source":"For the relational operators (`<`, `>`, `<=`, `>=`), if one or both operands are null, the result is `false`."},{"content":"Do not assume that because a particular comparison (for example, <ph id=\"ph1\">`&lt;=`</ph>) returns <ph id=\"ph2\">`false`</ph>, the opposite comparison (<ph id=\"ph3\">`&gt;`</ph>) returns <ph id=\"ph4\">`true`</ph>.","pos":[4277,4410],"source":" Do not assume that because a particular comparison (for example, `<=`) returns `false`, the opposite comparison (`>`) returns `true`."},{"content":"The following example shows that 10 is","pos":[4411,4449]},{"content":"neither greater than or equal to null,","pos":[4453,4491]},{"content":"nor less than null.","pos":[4494,4513]},{"pos":[4676,4794],"content":"The above example also shows that an equality comparison of two nullable types that are both null evaluates to <ph id=\"ph1\">`true`</ph>.","source":"The above example also shows that an equality comparison of two nullable types that are both null evaluates to `true`."},{"pos":[4799,4818],"content":"Boxing and unboxing","linkify":"Boxing and unboxing","nodes":[{"content":"Boxing and unboxing","pos":[0,19]}]},{"pos":[4820,4909],"content":"A nullable value type is <bpt id=\"p1\">[</bpt>boxed<ept id=\"p1\">](../types/boxing-and-unboxing.md)</ept> by the following rules:","source":"A nullable value type is [boxed](../types/boxing-and-unboxing.md) by the following rules:"},{"pos":[4913,5003],"content":"If <ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> returns <ph id=\"ph2\">`false`</ph>, the null reference is produced.","source":"If <xref:System.Nullable%601.HasValue%2A> returns `false`, the null reference is produced."},{"pos":[5008,5164],"content":"If <ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, a value of the underlying value type <ph id=\"ph3\">`T`</ph> is boxed, not the instance of <ph id=\"ph4\">&lt;xref:System.Nullable%601&gt;</ph>.","source":"If <xref:System.Nullable%601.HasValue%2A> returns `true`, a value of the underlying value type `T` is boxed, not the instance of <xref:System.Nullable%601>."},{"content":"You can unbox the boxed value type to the corresponding nullable type, as the following example shows:","pos":[5166,5268]},{"pos":[5416,5430],"content":"The bool? type","linkify":"The bool? type","nodes":[{"content":"The bool? type","pos":[0,14]}]},{"content":"The <ph id=\"ph1\">`bool?`</ph> nullable type can contain three different values: <bpt id=\"p1\">[</bpt>true<ept id=\"p1\">](../../language-reference/keywords/true-literal.md)</ept>, <bpt id=\"p2\">[</bpt>false<ept id=\"p2\">](../../language-reference/keywords/false-literal.md)</ept>, and <bpt id=\"p3\">[</bpt>null<ept id=\"p3\">](../../language-reference/keywords/null.md)</ept>.","pos":[5432,5668],"source":"The `bool?` nullable type can contain three different values: [true](../../language-reference/keywords/true-literal.md), [false](../../language-reference/keywords/false-literal.md), and [null](../../language-reference/keywords/null.md)."},{"content":"The <ph id=\"ph1\">`bool?`</ph> type is like the Boolean variable type that is used in SQL.","pos":[5669,5740],"source":" The `bool?` type is like the Boolean variable type that is used in SQL."},{"content":"To ensure that the results produced by the <ph id=\"ph1\">`&amp;`</ph> and <ph id=\"ph2\">`|`</ph> operators are consistent with the three-valued Boolean type in SQL, the following predefined operators are provided:","pos":[5741,5912],"source":" To ensure that the results produced by the `&` and `|` operators are consistent with the three-valued Boolean type in SQL, the following predefined operators are provided:"},{"content":"The semantics of these operators is defined by the following table:","pos":[5999,6066]},{"content":"x","pos":[6073,6074]},{"content":"y","pos":[6075,6076]},{"content":"x&amp;y","pos":[6077,6080],"source":"x&y"},{"content":"x&amp;#124;y","pos":[6081,6089],"source":"x&#124;y"},{"content":"true","pos":[6139,6143]},{"content":"true","pos":[6144,6148]},{"content":"true","pos":[6149,6153]},{"content":"true","pos":[6154,6158]},{"content":"true","pos":[6163,6167]},{"content":"false","pos":[6168,6173]},{"content":"false","pos":[6174,6179]},{"content":"true","pos":[6180,6184]},{"content":"true","pos":[6189,6193]},{"content":"null","pos":[6194,6198]},{"content":"null","pos":[6199,6203]},{"content":"true","pos":[6204,6208]},{"content":"false","pos":[6213,6218]},{"content":"true","pos":[6219,6223]},{"content":"false","pos":[6224,6229]},{"content":"true","pos":[6230,6234]},{"content":"false","pos":[6239,6244]},{"content":"false","pos":[6245,6250]},{"content":"false","pos":[6251,6256]},{"content":"false","pos":[6257,6262]},{"content":"false","pos":[6267,6272]},{"content":"null","pos":[6273,6277]},{"content":"false","pos":[6278,6283]},{"content":"null","pos":[6284,6288]},{"content":"null","pos":[6293,6297]},{"content":"true","pos":[6298,6302]},{"content":"null","pos":[6303,6307]},{"content":"true","pos":[6308,6312]},{"content":"null","pos":[6317,6321]},{"content":"false","pos":[6322,6327]},{"content":"false","pos":[6328,6333]},{"content":"null","pos":[6334,6338]},{"content":"null","pos":[6343,6347]},{"content":"null","pos":[6348,6352]},{"content":"null","pos":[6353,6357]},{"content":"null","pos":[6358,6362]},{"pos":[6367,6559],"content":"Note that these two operators don't follow the rules described in the <bpt id=\"p1\">[</bpt>Operators<ept id=\"p1\">](#operators)</ept> section: the result of an operator evaluation can be non-null even if one of the operands is null.","source":"Note that these two operators don't follow the rules described in the [Operators](#operators) section: the result of an operator evaluation can be non-null even if one of the operands is null."},{"pos":[6566,6574],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6578,6604],"content":"<bpt id=\"p1\">[</bpt>Nullable types<ept id=\"p1\">](index.md)</ept>","source":"[Nullable types](index.md)"},{"pos":[6607,6663],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[6666,6788],"content":"<bpt id=\"p1\">[</bpt>What exactly does 'lifted' mean?<ept id=\"p1\">](https://blogs.msdn.microsoft.com/ericlippert/2007/06/27/what-exactly-does-lifted-mean/)</ept>","source":"[What exactly does 'lifted' mean?](https://blogs.msdn.microsoft.com/ericlippert/2007/06/27/what-exactly-does-lifted-mean/)"}]}