{"content":"---\ntitle: \"How to: Retrieve a Single Attribute (LINQ to XML) (C#)\"\nms.date: 07/20/2015\nms.assetid: 1b6b07b9-933f-47e9-874e-e790cab49dc5\n---\n# How to: Retrieve a Single Attribute (LINQ to XML) (C#)\nThis topic explains how to retrieve a single attribute of an element, given the attribute name. This is useful for writing query expressions where you want to find an element that has a particular attribute.  \n  \n The <xref:System.Xml.Linq.XElement.Attribute%2A> method of the <xref:System.Xml.Linq.XElement> class returns the <xref:System.Xml.Linq.XAttribute> with the specified name.  \n  \n## Example  \n The following example uses the <xref:System.Xml.Linq.XElement.Attribute%2A> method.  \n  \n```csharp  \nXElement cust = new XElement(\"PhoneNumbers\",  \n    new XElement(\"Phone\",  \n        new XAttribute(\"type\", \"home\"),  \n        \"555-555-5555\"),  \n    new XElement(\"Phone\",  \n        new XAttribute(\"type\", \"work\"),  \n        \"555-555-6666\")  \n);  \nIEnumerable<XElement> elList =  \n    from el in cust.Descendants(\"Phone\")  \n    select el;  \nforeach (XElement el in elList)  \n    Console.WriteLine((string)el.Attribute(\"type\"));  \n```  \n  \n This example finds all the descendants in the tree named `Phone`, and then finds the attribute named `type`.  \n  \n This code produces the following output:  \n  \n```  \nhome  \nwork  \n```  \n  \n## Example  \n If you want to retrieve the value of the attribute, you can cast it, just as you do for with <xref:System.Xml.Linq.XElement> objects. The following example demonstrates this.  \n  \n```csharp  \nXElement cust = new XElement(\"PhoneNumbers\",  \n    new XElement(\"Phone\",  \n        new XAttribute(\"type\", \"home\"),  \n        \"555-555-5555\"),  \n    new XElement(\"Phone\",  \n        new XAttribute(\"type\", \"work\"),  \n        \"555-555-6666\")  \n);  \nIEnumerable<XElement> elList =   \n    from el in cust.Descendants(\"Phone\")  \n    select el;  \nforeach (XElement el in elList)  \n    Console.WriteLine((string)el.Attribute(\"type\"));  \n```  \n  \n This code produces the following output:  \n  \n```  \nhome  \nwork  \n```  \n  \n [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides explicit cast operators for the <xref:System.Xml.Linq.XAttribute> class to `string`, `bool`, `bool?`, `int`, `int?`, `uint`, `uint?`, `long`, `long?`, `ulong`, `ulong?`, `float`, `float?`, `double`, `double?`, `decimal`, `decimal?`, `DateTime`, `DateTime?`, `TimeSpan`, `TimeSpan?`, `GUID`, and `GUID?`.  \n  \n## Example  \n The following example shows the same code for an attribute that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n```csharp  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXElement cust = new XElement(aw + \"PhoneNumbers\",  \n    new XElement(aw + \"Phone\",  \n        new XAttribute(aw + \"type\", \"home\"),  \n        \"555-555-5555\"),  \n    new XElement(aw + \"Phone\",  \n        new XAttribute(aw + \"type\", \"work\"),  \n        \"555-555-6666\")  \n);  \nIEnumerable<XElement> elList =  \n    from el in cust.Descendants(aw + \"Phone\")  \n    select el;  \nforeach (XElement el in elList)  \n    Console.WriteLine((string)el.Attribute(aw + \"type\"));  \n```  \n  \n This code produces the following output:  \n  \n```  \nhome  \nwork  \n```  \n  \n## See also\n\n- [LINQ to XML Axes (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-axes.md)\n","nodes":[{"pos":[4,136],"embed":true,"restype":"x-metadata","content":"title: \"How to: Retrieve a Single Attribute (LINQ to XML) (C#)\"\nms.date: 07/20/2015\nms.assetid: 1b6b07b9-933f-47e9-874e-e790cab49dc5","nodes":[{"content":"How to: Retrieve a Single Attribute (LINQ to XML) (C#)","nodes":[{"pos":[0,54],"content":"How to: Retrieve a Single Attribute (LINQ to XML) (C#)","nodes":[{"content":"How to: Retrieve a Single Attribute (LINQ to XML) (C#)","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[143,197],"content":"How to: Retrieve a Single Attribute (LINQ to XML) (C#)","linkify":"How to: Retrieve a Single Attribute (LINQ to XML) (C#)","nodes":[{"content":"How to: Retrieve a Single Attribute (LINQ to XML) (C#)","pos":[0,54]}]},{"content":"This topic explains how to retrieve a single attribute of an element, given the attribute name.","pos":[198,293]},{"content":"This is useful for writing query expressions where you want to find an element that has a particular attribute.","pos":[294,405]},{"pos":[412,583],"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class returns the <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> with the specified name.","source":"The <xref:System.Xml.Linq.XElement.Attribute%2A> method of the <xref:System.Xml.Linq.XElement> class returns the <xref:System.Xml.Linq.XAttribute> with the specified name."},{"pos":[592,599],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[603,686],"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Attribute%2A&gt;</ph> method.","source":"The following example uses the <xref:System.Xml.Linq.XElement.Attribute%2A> method."},{"pos":[1141,1249],"content":"This example finds all the descendants in the tree named <ph id=\"ph1\">`Phone`</ph>, and then finds the attribute named <ph id=\"ph2\">`type`</ph>.","source":"This example finds all the descendants in the tree named `Phone`, and then finds the attribute named `type`."},{"content":"This code produces the following output:","pos":[1256,1296]},{"pos":[1334,1341],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"If you want to retrieve the value of the attribute, you can cast it, just as you do for with <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects.","pos":[1345,1478],"source":"If you want to retrieve the value of the attribute, you can cast it, just as you do for with <xref:System.Xml.Linq.XElement> objects."},{"content":"The following example demonstrates this.","pos":[1479,1519]},{"content":"This code produces the following output:","pos":[1975,2015]},{"pos":[2051,2417],"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> provides explicit cast operators for the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> class to <ph id=\"ph3\">`string`</ph>, <ph id=\"ph4\">`bool`</ph>, <ph id=\"ph5\">`bool?`</ph>, <ph id=\"ph6\">`int`</ph>, <ph id=\"ph7\">`int?`</ph>, <ph id=\"ph8\">`uint`</ph>, <ph id=\"ph9\">`uint?`</ph>, <ph id=\"ph10\">`long`</ph>, <ph id=\"ph11\">`long?`</ph>, <ph id=\"ph12\">`ulong`</ph>, <ph id=\"ph13\">`ulong?`</ph>, <ph id=\"ph14\">`float`</ph>, <ph id=\"ph15\">`float?`</ph>, <ph id=\"ph16\">`double`</ph>, <ph id=\"ph17\">`double?`</ph>, <ph id=\"ph18\">`decimal`</ph>, <ph id=\"ph19\">`decimal?`</ph>, <ph id=\"ph20\">`DateTime`</ph>, <ph id=\"ph21\">`DateTime?`</ph>, <ph id=\"ph22\">`TimeSpan`</ph>, <ph id=\"ph23\">`TimeSpan?`</ph>, <ph id=\"ph24\">`GUID`</ph>, and <ph id=\"ph25\">`GUID?`</ph>.","source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides explicit cast operators for the <xref:System.Xml.Linq.XAttribute> class to `string`, `bool`, `bool?`, `int`, `int?`, `uint`, `uint?`, `long`, `long?`, `ulong`, `ulong?`, `float`, `float?`, `double`, `double?`, `decimal`, `decimal?`, `DateTime`, `DateTime?`, `TimeSpan`, `TimeSpan?`, `GUID`, and `GUID?`."},{"pos":[2426,2433],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same code for an attribute that is in a namespace.","pos":[2437,2519]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[2520,2664],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"content":"This code produces the following output:","pos":[3206,3246]},{"pos":[3284,3292],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3296,3391],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML Axes (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept>","source":"[LINQ to XML Axes (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-axes.md)"}]}