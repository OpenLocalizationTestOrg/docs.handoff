<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-variance-for-func-and-action-generic-delegates.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f517eea07588bb01ef903c8311126eab872bd735</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\covariance-contravariance\using-variance-for-func-and-action-generic-delegates.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4fb0af73b70eee94d04730cbc3338e050f1adc5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2a9368aed25f85b973708fb524514e4e9ebe794</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using Variance for Func and Action Generic Delegates (C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Variance for Func and Action Generic Delegates (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These examples demonstrate how to use covariance and contravariance in the <ph id="ph1">`Func`</ph> and <ph id="ph2">`Action`</ph> generic delegates to enable reuse of methods and provide more flexibility in your code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information about covariance and contravariance, see <bpt id="p1">[</bpt>Variance in Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Using Delegates with Covariant Type Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following example illustrates the benefits of covariance support in the generic <ph id="ph1">`Func`</ph> delegates.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FindByTitle`</ph> method takes a parameter of the <ph id="ph2">`String`</ph> type and returns an object of the <ph id="ph3">`Employee`</ph> type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, you can assign this method to the <ph id="ph1">`Func&lt;String, Person&gt;`</ph> delegate because <ph id="ph2">`Employee`</ph> inherits <ph id="ph3">`Person`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using Delegates with Contravariant Type Parameters</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example illustrates the benefits of contravariance support in the generic <ph id="ph1">`Action`</ph> delegates.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddToContacts`</ph> method takes a parameter of the <ph id="ph2">`Person`</ph> type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, you can assign this method to the <ph id="ph1">`Action&lt;Employee&gt;`</ph> delegate because <ph id="ph2">`Employee`</ph> inherits <ph id="ph3">`Person`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Covariance and Contravariance (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](~/docs/standard/generics/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>