{"content":"---\ntitle: \"Configuring and Extending the Runtime with Behaviors | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"attaching extensions using behaviors [WCF]\"\nms.assetid: 149b99b6-6eb6-4f45-be22-c967279677d9\ncaps.latest.revision: 20\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Configuring and Extending the Runtime with Behaviors\nBehaviors enable you to modify default behavior and add custom extensions that inspect and validate service configuration or modify runtime behavior in [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] client and service applications. This topic describes the behavior interfaces, how to implement them, and how to add them to the service description (in a service application) or endpoint (in a client application) programmatically or in a configuration file. For more information about using system-provided behaviors, see [Specifying Service Run-Time Behavior](../../../../docs/framework/wcf/specifying-service-run-time-behavior.md) and [Specifying Client Run-Time Behavior](../../../../docs/framework/wcf/specifying-client-run-time-behavior.md).  \n  \n## Behaviors  \n Behavior types are added to the service or service endpoint description objects (on the service or client, respectively) before those objects are used by [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] to create a runtime that executes a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service or a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] client. When these behaviors are called during the runtime construction process they are then able to access runtime properties and methods that modify the runtime constructed by the contract, bindings, and addresses.  \n  \n### Behavior Methods  \n All behaviors have an `AddBindingParameters` method, an `ApplyDispatchBehavior` method, a `Validate` method, and an `ApplyClientBehavior` method with one exception: Because <xref:System.ServiceModel.Description.IServiceBehavior> cannot execute in a client, it does not implement `ApplyClientBehavior`.  \n  \n-   Use the `AddBindingParameters` method to modify or add custom objects to a collection that custom bindings can access for their use when the runtime is constructed. For example, this how protection requirements are specified that affect the way the channel is built, but are not known by the channel developer.  \n  \n-   Use the `Validate` method to examine the description tree and corresponding runtime object to ensure it conforms to some set of criteria.  \n  \n-   Use the `ApplyDispatchBehavior` and `ApplyClientBehavior` methods to examine the description tree and modify the runtime for a particular scope on either the service or the client. You can also insert extension objects as well.  \n  \n    > [!NOTE]\n    >  Although a description tree is provided in these methods, it is for examination only. If a description tree is modified, the behavior is undefined.  \n  \n The properties you can modify and the customization interfaces you can implement are accessed through the service and client runtime classes. The service types are the <xref:System.ServiceModel.Dispatcher.DispatchRuntime> and  <xref:System.ServiceModel.Dispatcher.DispatchOperation> classes. The client types are the <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.ClientOperation> classes. The <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.DispatchRuntime> classes are the extensibility entry points to access client-wide and service-wide runtime properties and extension collections, respectively. Similarly, the <xref:System.ServiceModel.Dispatcher.ClientOperation> and  <xref:System.ServiceModel.Dispatcher.DispatchOperation> classes expose client operation and service operation runtime properties and extension collections, respectively. You can, however, access the wider scoped runtime object from the operation runtime object and vice versa if need be.  \n  \n> [!NOTE]\n>  For a discussion of runtime properties and extension types that you can use to modify the execution behavior of a client, see [Extending Clients](../../../../docs/framework/wcf/extending/extending-clients.md). For a discussion of runtime properties and extension types that you can use to modify the execution behavior of a service dispatcher, see [Extending Dispatchers](../../../../docs/framework/wcf/extending/extending-dispatchers.md).  \n  \n Most [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] users do not interact with the runtime directly; instead they use core programming model constructs like endpoints, contracts, bindings, addresses, and behavior attributes on classes or behaviors in configuration files. These constructs make up the *description tree*, which is the complete specification for constructing a runtime to support a service or client described by the description tree.  \n  \n There are four kinds of behaviors in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]:  \n  \n-   Service behaviors (<xref:System.ServiceModel.Description.IServiceBehavior> types) enable the customization of the entire service runtime including <xref:System.ServiceModel.ServiceHostBase>.  \n  \n-   Endpoint behaviors (<xref:System.ServiceModel.Description.IEndpointBehavior> types) enable the customization of service endpoints and their associated <xref:System.ServiceModel.Dispatcher.EndpointDispatcher> objects.  \n  \n-   Contract behaviors (<xref:System.ServiceModel.Description.IContractBehavior> types) enable the customization of both the <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.DispatchRuntime> classes in client and service applications, respectively.  \n  \n-   Operation behaviors (<xref:System.ServiceModel.Description.IOperationBehavior> types) enable the customization of the <xref:System.ServiceModel.Dispatcher.ClientOperation> and <xref:System.ServiceModel.Dispatcher.DispatchOperation> classes, again, on the client and service.  \n  \n You can add these behaviors to the various description objects by implementing custom attributes, using application configuration files, or directly by adding them to the behaviors collection on the appropriate description object. The must, however, be added to a service description or service endpoint description object prior to calling <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName> on the <xref:System.ServiceModel.ServiceHost> or a <xref:System.ServiceModel.ChannelFactory%601>.  \n  \n### Behavior Scopes  \n There are four behavior types, each of which corresponds to a particular scope of runtime access.  \n  \n#### Service Behaviors  \n Service behaviors, which implement <xref:System.ServiceModel.Description.IServiceBehavior>, are the primary mechanism by which you modify the entire service runtime. There are three mechanisms for adding service behaviors to a service.  \n  \n1.  Using an attribute on the service class.  When a <xref:System.ServiceModel.ServiceHost> is constructed, the <xref:System.ServiceModel.ServiceHost> implementation uses reflection to discover the set of attributes on the type of the service. If any of those attributes are implementations of <xref:System.ServiceModel.Description.IServiceBehavior>, they are added to the behaviors collection on <xref:System.ServiceModel.Description.ServiceDescription>. This allows those behaviors to participate in the construction of the service run time.  \n  \n2.  Programmatically adding the behavior to the behaviors collection on <xref:System.ServiceModel.Description.ServiceDescription>. This can be accomplished with the following lines of code:  \n  \n    ```  \n    ServiceHost host = new ServiceHost(/* Parameters */);  \n    host.Description.Behaviors.Add(/* Service Behavior */);  \n    ```  \n  \n3.  Implementing a custom <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> that extends configuration. This enables the use of the service behavior from application configuration files.  \n  \n Examples of service behaviors in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] include the <xref:System.ServiceModel.ServiceBehaviorAttribute> attribute, the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior>, and the <xref:System.ServiceModel.Description.ServiceMetadataBehavior> behavior.  \n  \n#### Contract Behaviors  \n Contract behaviors, which implement the <xref:System.ServiceModel.Description.IContractBehavior> interface, are used to extend both the client and service runtime across a contract.  \n  \n There are two mechanisms for adding contract behaviors to a contract.  The first mechanism is to create a custom attribute to be used on the contract interface. When a contract interface is passed to either a <xref:System.ServiceModel.ServiceHost> or a <xref:System.ServiceModel.ChannelFactory%601>, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] examines the attributes on the interface. If any attributes are implementations of <xref:System.ServiceModel.Description.IContractBehavior>, those are added to the behaviors collection on the <xref:System.ServiceModel.Description.ContractDescription?displayProperty=fullName> created for that interface.  \n  \n You can also implement the <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=fullName> on the custom contract behavior attribute. In this case, the behavior is as follows when applied to:  \n  \n â€¢A contract interface. In this case, the behavior is applied to all contracts of that type in any endpoint and [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ignores the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=fullName> property.  \n  \n â€¢A service class. In this case, the behavior is applied only to endpoints the contract of which is the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> property.  \n  \n â€¢A callback class. In this case, the behavior is applied to the duplex client's endpoint and [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ignores the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> property.  \n  \n The second mechanism is to add the behavior to the behaviors collection on a <xref:System.ServiceModel.Description.ContractDescription>.  \n  \n Examples of contract behaviors in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] include the <xref:System.ServiceModel.DeliveryRequirementsAttribute?displayProperty=fullName> attribute. For more information and an example, see the reference topic.  \n  \n#### Endpoint Behaviors  \n Endpoint behaviors, which implement <xref:System.ServiceModel.Description.IEndpointBehavior>, are the primary mechanism by which you modify the entire service or client run time for a specific endpoint.  \n  \n There are two mechanisms for adding endpoint behaviors to a service.  \n  \n1.  Add the behavior to the <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> property.  \n  \n2.  Implement a custom <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> that extends configuration.  \n  \n For more information and an example, see the reference topic.  \n  \n#### Operation Behaviors  \n Operation behaviors, which implement the <xref:System.ServiceModel.Description.IOperationBehavior> interface, are used to extend both the client and service runtime for each operation.  \n  \n There are two mechanisms for adding operation behaviors to an operation. The first mechanism is to create a custom attribute to be used on the method that models the operation. When an operation is added to either a <xref:System.ServiceModel.ServiceHost> or a <xref:System.ServiceModel.ChannelFactory>, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] adds any  <xref:System.ServiceModel.Description.IOperationBehavior> attributes to the behaviors collection on the <xref:System.ServiceModel.Description.OperationDescription> created for that operation.  \n  \n The second mechanism is by directly adding the behavior to the behaviors collection on a constructed <xref:System.ServiceModel.Description.OperationDescription>.  \n  \n Examples of operation behaviors in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] include the <xref:System.ServiceModel.OperationBehaviorAttribute> and the <xref:System.ServiceModel.TransactionFlowAttribute>.  \n  \n For more information and an example, see the reference topic.  \n  \n### Using Configuration to Create Behaviors  \n Service and endpoint, and contract behaviors can by designed to be specified in code or using attributes; only service and endpoint behaviors can be configured using application or Web configuration files. Exposing behaviors using attributes allows developers to specify a behavior at compilation-time that cannot be added, removed, or modified at runtime. This is often suitable for behaviors that are always required for the correct operation of a service (for example, the transaction-related parameters to the <xref:System.ServiceModel.ServiceBehaviorAttribute?displayProperty=fullName> attribute). Exposing behaviors using configuration allows developers to leave the specification and configuration of those behaviors to those who deploy the service. This is suitable for behaviors that are optional components or other deployment-specific configuration, such as whether metadata is exposed for the service or the particular authorization configuration for a service.  \n  \n> [!NOTE]\n>  You can also use behaviors that support configuration to enforce company application policies by inserting them into the machine.config configuration file and locking those items down. For a description and an example, see [How to: Lock Down Endpoints in the Enterprise](../../../../docs/framework/wcf/extending/how-to-lock-down-endpoints-in-the-enterprise.md).  \n  \n To expose a behavior using configuration, a developer must create a derived class of <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> and then register that extension with configuration.  \n  \n The following code example shows how an  <xref:System.ServiceModel.Description.IEndpointBehavior> implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>:  \n  \n```  \n// BehaviorExtensionElement members  \n    public override Type BehaviorType  \n    {  \n      get { return typeof(EndpointBehaviorMessageInspector); }  \n    }  \n  \n    protected override object CreateBehavior()  \n    {  \n      return new EndpointBehaviorMessageInspector();  \n    }  \n```  \n  \n In order for the configuration system to load a custom <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>, it must be registered as an extension. The following code example shows the configuration file for the preceding endpoint behavior:  \n  \n```xml  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metadataSupport\"  \n      >  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/ServiceMetadata\" />  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"/SampleService\"  \n          binding=\"wsHttpBinding\"  \n          behaviorConfiguration=\"withMessageInspector\"   \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n        />  \n        <endpoint  \n           address=\"mex\"  \n           binding=\"mexHttpBinding\"  \n           contract=\"IMetadataExchange\"  \n        />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n      <behavior name=\"metadataSupport\">  \n        <serviceMetadata httpGetEnabled=\"true\" httpGetUrl=\"\"/>  \n      </behavior>  \n      </serviceBehaviors>  \n      <endpointBehaviors>  \n        <behavior name=\"withMessageInspector\">  \n          <endpointMessageInspector />  \n        </behavior>  \n      </endpointBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"endpointMessageInspector\"  \n          type=\"Microsoft.WCF.Documentation.EndpointBehaviorMessageInspector, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```  \n  \n Where `Microsoft.WCF.Documentation.EndpointBehaviorMessageInspector` is the behavior extension type and `HostApplication` is the name of the assembly into which that class has been compiled.  \n  \n### Evaluation Order  \n The <xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName> and the <xref:System.ServiceModel.ServiceHost?displayProperty=fullName> are responsible for building the runtime from the programming model and description. Behaviors, as previously described, contribute to that build process at the service, endpoint, contract, and operation.  \n  \n The <xref:System.ServiceModel.ServiceHost> applies behaviors in the following order:  \n  \n1.  Service  \n  \n2.  Contract  \n  \n3.  Endpoint  \n  \n4.  Operation  \n  \n Within any collection of behaviors, no order is guaranteed.  \n  \n The <xref:System.ServiceModel.ChannelFactory%601> applies behaviors in the following order:  \n  \n1.  Contract  \n  \n2.  Endpoint  \n  \n3.  Operation  \n  \n Within any collection of behaviors, again, no order is guaranteed.  \n  \n### Adding Behaviors Programmatically  \n Properties of the <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> in the service application must not be modified subsequent to the <xref:System.ServiceModel.Channels.CommunicationObject.OnOpening%2A?displayProperty=fullName> method on <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>. Some members, like the <xref:System.ServiceModel.ServiceHostBase.Credentials%2A?displayProperty=fullName> property and the `AddServiceEndpoint` methods on <xref:System.ServiceModel.ServiceHostBase> and <xref:System.ServiceModel.ServiceHost?displayProperty=fullName>, throw an exception if modified past that point. Others permit you to modify them, but the result is undefined.  \n  \n Similarly, on the client the <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName> values must not be modified after the call to <xref:System.ServiceModel.Channels.CommunicationObject.OnOpening%2A> on the <xref:System.ServiceModel.ChannelFactory?displayProperty=fullName>. The <xref:System.ServiceModel.ChannelFactory.Credentials%2A?displayProperty=fullName> property throws an exception if modified past that point, but the other client description values can be modified without error. The result, however, is undefined.  \n  \n Whether for the service or client, it is recommended that you modify the description prior to calling <xref:System.ServiceModel.Channels.CommunicationObject.Open%2A?displayProperty=fullName>.  \n  \n### Inheritance Rules for Behavior Attributes  \n All four types of behaviors can be populated using attributes â€“ service behaviors and contract behaviors. Because attributes are defined on managed objects and members, and managed objects and members support inheritance, it is necessary to define how behavior attributes work in the context of inheritance.  \n  \n At a high level, the rule is that for a particular scope (for example, service, contract, or operation), all behavior attributes in the inheritance hierarchy for that scope are applied. If there are two behavior attributes of the same type, only the most-derived type is used.  \n  \n#### Service Behaviors  \n For a given service class, all service behavior attributes on that class, and on parents of that class, are applied. If the same type of attribute is applied at multiple places in the inheritance hierarchy, the most-derived type is used.  \n  \n```  \n[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Multiple)]  \n[AspNetCompatibilityRequirementsAttribute(  \n    AspNetCompatibilityRequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]  \npublic class A { /* â€¦ */ }  \n  \n[ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]  \npublic class B : A { /* â€¦ */}  \n```  \n  \n For example, in the preceding case, the service B ends up with an <xref:System.ServiceModel.InstanceContextMode> of <xref:System.ServiceModel.InstanceContextMode>, an <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode> mode of <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode>, and a <xref:System.ServiceModel.ConcurrencyMode> of <xref:System.ServiceModel.ConcurrencyMode>. The <xref:System.ServiceModel.ConcurrencyMode> is <xref:System.ServiceModel.ConcurrencyMode>, because <xref:System.ServiceModel.ServiceBehaviorAttribute> attribute on service B is on \"more derived\" than that on service A.  \n  \n#### Contract Behaviors  \n For a given contract, all contract behavior attributes on that interface and on parents of that interface, are applied. If the same type of attribute is applied at multiple places in the inheritance hierarchy, the most-derived type is used.  \n  \n#### Operation Behaviors  \n If a given operation does not override an existing abstract or virtual operation, no inheritance rules apply.  \n  \n If an operation does override an existing operation, then all operation behavior attributes on that operation and on parents of that operation, are applied.  If the same type of attribute is applied at multiple places in the inheritance hierarchy, the most-derived type is used.","nodes":[{"pos":[12,81],"content":"Configuring and Extending the Runtime with Behaviors | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Configuring and Extending the Runtime with Behaviors | Microsoft Docs","pos":[0,69]}]},{"pos":[451,503],"content":"Configuring and Extending the Runtime with Behaviors","linkify":"Configuring and Extending the Runtime with Behaviors","nodes":[{"content":"Configuring and Extending the Runtime with Behaviors","pos":[0,52]}]},{"content":"Behaviors enable you to modify default behavior and add custom extensions that inspect and validate service configuration or modify runtime behavior in <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> client and service applications.","pos":[504,744],"source":"Behaviors enable you to modify default behavior and add custom extensions that inspect and validate service configuration or modify runtime behavior in [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] client and service applications."},{"content":"This topic describes the behavior interfaces, how to implement them, and how to add them to the service description (in a service application) or endpoint (in a client application) programmatically or in a configuration file.","pos":[745,970]},{"content":"For more information about using system-provided behaviors, see <bpt id=\"p1\">[</bpt>Specifying Service Run-Time Behavior<ept id=\"p1\">](../../../../docs/framework/wcf/specifying-service-run-time-behavior.md)</ept> and <bpt id=\"p2\">[</bpt>Specifying Client Run-Time Behavior<ept id=\"p2\">](../../../../docs/framework/wcf/specifying-client-run-time-behavior.md)</ept>.","pos":[971,1259],"source":" For more information about using system-provided behaviors, see [Specifying Service Run-Time Behavior](../../../../docs/framework/wcf/specifying-service-run-time-behavior.md) and [Specifying Client Run-Time Behavior](../../../../docs/framework/wcf/specifying-client-run-time-behavior.md)."},{"pos":[1268,1277],"content":"Behaviors","linkify":"Behaviors","nodes":[{"content":"Behaviors","pos":[0,9]}]},{"content":"Behavior types are added to the service or service endpoint description objects (on the service or client, respectively) before those objects are used by <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> to create a runtime that executes a <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service or a <ph id=\"ph3\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client.","pos":[1281,1659],"source":"Behavior types are added to the service or service endpoint description objects (on the service or client, respectively) before those objects are used by [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] to create a runtime that executes a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service or a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] client."},{"content":"When these behaviors are called during the runtime construction process they are then able to access runtime properties and methods that modify the runtime constructed by the contract, bindings, and addresses.","pos":[1660,1869]},{"pos":[1879,1895],"content":"Behavior Methods","linkify":"Behavior Methods","nodes":[{"content":"Behavior Methods","pos":[0,16]}]},{"pos":[1899,2200],"content":"All behaviors have an <ph id=\"ph1\">`AddBindingParameters`</ph> method, an <ph id=\"ph2\">`ApplyDispatchBehavior`</ph> method, a <ph id=\"ph3\">`Validate`</ph> method, and an <ph id=\"ph4\">`ApplyClientBehavior`</ph> method with one exception: Because <ph id=\"ph5\">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> cannot execute in a client, it does not implement <ph id=\"ph6\">`ApplyClientBehavior`</ph>.","source":"All behaviors have an `AddBindingParameters` method, an `ApplyDispatchBehavior` method, a `Validate` method, and an `ApplyClientBehavior` method with one exception: Because <xref:System.ServiceModel.Description.IServiceBehavior> cannot execute in a client, it does not implement `ApplyClientBehavior`."},{"content":"Use the <ph id=\"ph1\">`AddBindingParameters`</ph> method to modify or add custom objects to a collection that custom bindings can access for their use when the runtime is constructed.","pos":[2210,2374],"source":"Use the `AddBindingParameters` method to modify or add custom objects to a collection that custom bindings can access for their use when the runtime is constructed."},{"content":"For example, this how protection requirements are specified that affect the way the channel is built, but are not known by the channel developer.","pos":[2375,2520]},{"pos":[2530,2667],"content":"Use the <ph id=\"ph1\">`Validate`</ph> method to examine the description tree and corresponding runtime object to ensure it conforms to some set of criteria.","source":"Use the `Validate` method to examine the description tree and corresponding runtime object to ensure it conforms to some set of criteria."},{"content":"Use the <ph id=\"ph1\">`ApplyDispatchBehavior`</ph> and <ph id=\"ph2\">`ApplyClientBehavior`</ph> methods to examine the description tree and modify the runtime for a particular scope on either the service or the client.","pos":[2677,2857],"source":"Use the `ApplyDispatchBehavior` and `ApplyClientBehavior` methods to examine the description tree and modify the runtime for a particular scope on either the service or the client."},{"content":"You can also insert extension objects as well.","pos":[2858,2904]},{"pos":[2916,3078],"content":"[!NOTE]\nAlthough a description tree is provided in these methods, it is for examination only. If a description tree is modified, the behavior is undefined.","leadings":["","    >  "],"nodes":[{"content":"Although a description tree is provided in these methods, it is for examination only. If a description tree is modified, the behavior is undefined.","pos":[8,155],"nodes":[{"content":"Although a description tree is provided in these methods, it is for examination only.","pos":[0,85]},{"content":"If a description tree is modified, the behavior is undefined.","pos":[86,147]}]}]},{"content":"The properties you can modify and the customization interfaces you can implement are accessed through the service and client runtime classes.","pos":[3085,3226]},{"content":"The service types are the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime&gt;</ph> and  <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.DispatchOperation&gt;</ph> classes.","pos":[3227,3376],"source":" The service types are the <xref:System.ServiceModel.Dispatcher.DispatchRuntime> and  <xref:System.ServiceModel.Dispatcher.DispatchOperation> classes."},{"content":"The client types are the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> classes.","pos":[3377,3520],"source":" The client types are the <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.ClientOperation> classes."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime&gt;</ph> classes are the extensibility entry points to access client-wide and service-wide runtime properties and extension collections, respectively.","pos":[3521,3776],"source":" The <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.DispatchRuntime> classes are the extensibility entry points to access client-wide and service-wide runtime properties and extension collections, respectively."},{"content":"Similarly, the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> and  <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.DispatchOperation&gt;</ph> classes expose client operation and service operation runtime properties and extension collections, respectively.","pos":[3777,4020],"source":" Similarly, the <xref:System.ServiceModel.Dispatcher.ClientOperation> and  <xref:System.ServiceModel.Dispatcher.DispatchOperation> classes expose client operation and service operation runtime properties and extension collections, respectively."},{"content":"You can, however, access the wider scoped runtime object from the operation runtime object and vice versa if need be.","pos":[4021,4138]},{"pos":[4146,4596],"content":"[!NOTE]\n For a discussion of runtime properties and extension types that you can use to modify the execution behavior of a client, see [Extending Clients](../../../../docs/framework/wcf/extending/extending-clients.md). For a discussion of runtime properties and extension types that you can use to modify the execution behavior of a service dispatcher, see [Extending Dispatchers](../../../../docs/framework/wcf/extending/extending-dispatchers.md).","leadings":["","> "],"nodes":[{"content":" For a discussion of runtime properties and extension types that you can use to modify the execution behavior of a client, see [Extending Clients](../../../../docs/framework/wcf/extending/extending-clients.md). For a discussion of runtime properties and extension types that you can use to modify the execution behavior of a service dispatcher, see [Extending Dispatchers](../../../../docs/framework/wcf/extending/extending-dispatchers.md).","pos":[8,448],"nodes":[{"content":"For a discussion of runtime properties and extension types that you can use to modify the execution behavior of a client, see <bpt id=\"p1\">[</bpt>Extending Clients<ept id=\"p1\">](../../../../docs/framework/wcf/extending/extending-clients.md)</ept>.","pos":[1,210],"source":" For a discussion of runtime properties and extension types that you can use to modify the execution behavior of a client, see [Extending Clients](../../../../docs/framework/wcf/extending/extending-clients.md)."},{"content":"For a discussion of runtime properties and extension types that you can use to modify the execution behavior of a service dispatcher, see <bpt id=\"p1\">[</bpt>Extending Dispatchers<ept id=\"p1\">](../../../../docs/framework/wcf/extending/extending-dispatchers.md)</ept>.","pos":[211,440],"source":" For a discussion of runtime properties and extension types that you can use to modify the execution behavior of a service dispatcher, see [Extending Dispatchers](../../../../docs/framework/wcf/extending/extending-dispatchers.md)."}]}]},{"content":"Most <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> users do not interact with the runtime directly; instead they use core programming model constructs like endpoints, contracts, bindings, addresses, and behavior attributes on classes or behaviors in configuration files.","pos":[4603,4883],"source":"Most [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] users do not interact with the runtime directly; instead they use core programming model constructs like endpoints, contracts, bindings, addresses, and behavior attributes on classes or behaviors in configuration files."},{"content":"These constructs make up the <bpt id=\"p1\">*</bpt>description tree<ept id=\"p1\">*</ept>, which is the complete specification for constructing a runtime to support a service or client described by the description tree.","pos":[4884,5061],"source":" These constructs make up the *description tree*, which is the complete specification for constructing a runtime to support a service or client described by the description tree."},{"pos":[5068,5161],"content":"There are four kinds of behaviors in <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:","source":"There are four kinds of behaviors in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]:"},{"content":"Service behaviors (<ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> types) enable the customization of the entire service runtime including <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph>.","pos":[5171,5361],"source":"Service behaviors (<xref:System.ServiceModel.Description.IServiceBehavior> types) enable the customization of the entire service runtime including <xref:System.ServiceModel.ServiceHostBase>."},{"content":"Endpoint behaviors (<ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph> types) enable the customization of service endpoints and their associated <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher&gt;</ph> objects.","pos":[5371,5587],"source":"Endpoint behaviors (<xref:System.ServiceModel.Description.IEndpointBehavior> types) enable the customization of service endpoints and their associated <xref:System.ServiceModel.Dispatcher.EndpointDispatcher> objects."},{"content":"Contract behaviors (<ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> types) enable the customization of both the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime&gt;</ph> classes in client and service applications, respectively.","pos":[5597,5885],"source":"Contract behaviors (<xref:System.ServiceModel.Description.IContractBehavior> types) enable the customization of both the <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.DispatchRuntime> classes in client and service applications, respectively."},{"content":"Operation behaviors (<ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IOperationBehavior&gt;</ph> types) enable the customization of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ServiceModel.Dispatcher.DispatchOperation&gt;</ph> classes, again, on the client and service.","pos":[5895,6169],"source":"Operation behaviors (<xref:System.ServiceModel.Description.IOperationBehavior> types) enable the customization of the <xref:System.ServiceModel.Dispatcher.ClientOperation> and <xref:System.ServiceModel.Dispatcher.DispatchOperation> classes, again, on the client and service."},{"content":"You can add these behaviors to the various description objects by implementing custom attributes, using application configuration files, or directly by adding them to the behaviors collection on the appropriate description object.","pos":[6176,6406]},{"content":"The must, however, be added to a service description or service endpoint description object prior to calling <ph id=\"ph1\">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName&gt;</ph> on the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> or a <ph id=\"ph3\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>.","pos":[6407,6694],"source":" The must, however, be added to a service description or service endpoint description object prior to calling <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName> on the <xref:System.ServiceModel.ServiceHost> or a <xref:System.ServiceModel.ChannelFactory%601>."},{"pos":[6704,6719],"content":"Behavior Scopes","linkify":"Behavior Scopes","nodes":[{"content":"Behavior Scopes","pos":[0,15]}]},{"content":"There are four behavior types, each of which corresponds to a particular scope of runtime access.","pos":[6723,6820]},{"pos":[6831,6848],"content":"Service Behaviors","linkify":"Service Behaviors","nodes":[{"content":"Service Behaviors","pos":[0,17]}]},{"content":"Service behaviors, which implement <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>, are the primary mechanism by which you modify the entire service runtime.","pos":[6852,7017],"source":"Service behaviors, which implement <xref:System.ServiceModel.Description.IServiceBehavior>, are the primary mechanism by which you modify the entire service runtime."},{"content":"There are three mechanisms for adding service behaviors to a service.","pos":[7018,7087]},{"content":"Using an attribute on the service class.","pos":[7097,7137]},{"content":"When a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> is constructed, the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> implementation uses reflection to discover the set of attributes on the type of the service.","pos":[7139,7336],"source":"  When a <xref:System.ServiceModel.ServiceHost> is constructed, the <xref:System.ServiceModel.ServiceHost> implementation uses reflection to discover the set of attributes on the type of the service."},{"content":"If any of those attributes are implementations of <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>, they are added to the behaviors collection on <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph>.","pos":[7337,7548],"source":" If any of those attributes are implementations of <xref:System.ServiceModel.Description.IServiceBehavior>, they are added to the behaviors collection on <xref:System.ServiceModel.Description.ServiceDescription>."},{"content":"This allows those behaviors to participate in the construction of the service run time.","pos":[7549,7636]},{"content":"Programmatically adding the behavior to the behaviors collection on <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph>.","pos":[7646,7772],"source":"Programmatically adding the behavior to the behaviors collection on <xref:System.ServiceModel.Description.ServiceDescription>."},{"content":"This can be accomplished with the following lines of code:","pos":[7773,7831]},{"content":"Implementing a custom <ph id=\"ph1\">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> that extends configuration.","pos":[7986,8101],"source":"Implementing a custom <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> that extends configuration."},{"content":"This enables the use of the service behavior from application configuration files.","pos":[8102,8184]},{"pos":[8191,8505],"content":"Examples of service behaviors in <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> include the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute&gt;</ph> attribute, the <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.ServiceThrottlingBehavior&gt;</ph>, and the <ph id=\"ph4\">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> behavior.","source":"Examples of service behaviors in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] include the <xref:System.ServiceModel.ServiceBehaviorAttribute> attribute, the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior>, and the <xref:System.ServiceModel.Description.ServiceMetadataBehavior> behavior."},{"pos":[8516,8534],"content":"Contract Behaviors","linkify":"Contract Behaviors","nodes":[{"content":"Contract Behaviors","pos":[0,18]}]},{"content":"Contract behaviors, which implement the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> interface, are used to extend both the client and service runtime across a contract.","pos":[8538,8719],"source":"Contract behaviors, which implement the <xref:System.ServiceModel.Description.IContractBehavior> interface, are used to extend both the client and service runtime across a contract."},{"content":"There are two mechanisms for adding contract behaviors to a contract.","pos":[8726,8795]},{"content":"The first mechanism is to create a custom attribute to be used on the contract interface.","pos":[8797,8886]},{"content":"When a contract interface is passed to either a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> or a <ph id=\"ph2\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>, <ph id=\"ph3\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> examines the attributes on the interface.","pos":[8887,9123],"source":" When a contract interface is passed to either a <xref:System.ServiceModel.ServiceHost> or a <xref:System.ServiceModel.ChannelFactory%601>, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] examines the attributes on the interface."},{"content":"If any attributes are implementations of <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph>, those are added to the behaviors collection on the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.ContractDescription?displayProperty=fullName&gt;</ph> created for that interface.","pos":[9124,9385],"source":" If any attributes are implementations of <xref:System.ServiceModel.Description.IContractBehavior>, those are added to the behaviors collection on the <xref:System.ServiceModel.Description.ContractDescription?displayProperty=fullName> created for that interface."},{"content":"You can also implement the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=fullName&gt;</ph> on the custom contract behavior attribute.","pos":[9392,9552],"source":"You can also implement the <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=fullName> on the custom contract behavior attribute."},{"content":"In this case, the behavior is as follows when applied to:","pos":[9553,9610]},{"content":"â€¢A contract interface.","pos":[9617,9639]},{"content":"In this case, the behavior is applied to all contracts of that type in any endpoint and <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ignores the value of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=fullName&gt;</ph> property.","pos":[9640,9927],"source":" In this case, the behavior is applied to all contracts of that type in any endpoint and [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ignores the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=fullName> property."},{"content":"â€¢A service class.","pos":[9934,9951]},{"content":"In this case, the behavior is applied only to endpoints the contract of which is the value of the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A&gt;</ph> property.","pos":[9952,10143],"source":" In this case, the behavior is applied only to endpoints the contract of which is the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> property."},{"content":"â€¢A callback class.","pos":[10150,10168]},{"content":"In this case, the behavior is applied to the duplex client's endpoint and <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ignores the value of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A&gt;</ph> property.","pos":[10169,10417],"source":" In this case, the behavior is applied to the duplex client's endpoint and [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ignores the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> property."},{"content":"The second mechanism is to add the behavior to the behaviors collection on a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ContractDescription&gt;</ph>.","pos":[10424,10560],"source":"The second mechanism is to add the behavior to the behaviors collection on a <xref:System.ServiceModel.Description.ContractDescription>."},{"content":"Examples of contract behaviors in <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> include the <ph id=\"ph2\">&lt;xref:System.ServiceModel.DeliveryRequirementsAttribute?displayProperty=fullName&gt;</ph> attribute.","pos":[10567,10761],"source":"Examples of contract behaviors in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] include the <xref:System.ServiceModel.DeliveryRequirementsAttribute?displayProperty=fullName> attribute."},{"content":"For more information and an example, see the reference topic.","pos":[10762,10823]},{"pos":[10834,10852],"content":"Endpoint Behaviors","linkify":"Endpoint Behaviors","nodes":[{"content":"Endpoint Behaviors","pos":[0,18]}]},{"content":"Endpoint behaviors, which implement <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph>, are the primary mechanism by which you modify the entire service or client run time for a specific endpoint.","pos":[10856,11058],"source":"Endpoint behaviors, which implement <xref:System.ServiceModel.Description.IEndpointBehavior>, are the primary mechanism by which you modify the entire service or client run time for a specific endpoint."},{"content":"There are two mechanisms for adding endpoint behaviors to a service.","pos":[11065,11133]},{"content":"Add the behavior to the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A&gt;</ph> property.","pos":[11143,11244],"source":"Add the behavior to the <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> property."},{"content":"Implement a custom <ph id=\"ph1\">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> that extends configuration.","pos":[11254,11366],"source":"Implement a custom <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> that extends configuration."},{"content":"For more information and an example, see the reference topic.","pos":[11373,11434]},{"pos":[11445,11464],"content":"Operation Behaviors","linkify":"Operation Behaviors","nodes":[{"content":"Operation Behaviors","pos":[0,19]}]},{"content":"Operation behaviors, which implement the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IOperationBehavior&gt;</ph> interface, are used to extend both the client and service runtime for each operation.","pos":[11468,11652],"source":"Operation behaviors, which implement the <xref:System.ServiceModel.Description.IOperationBehavior> interface, are used to extend both the client and service runtime for each operation."},{"content":"There are two mechanisms for adding operation behaviors to an operation.","pos":[11659,11731]},{"content":"The first mechanism is to create a custom attribute to be used on the method that models the operation.","pos":[11732,11835]},{"content":"When an operation is added to either a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> or a <ph id=\"ph2\">&lt;xref:System.ServiceModel.ChannelFactory&gt;</ph>, <ph id=\"ph3\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> adds any  <ph id=\"ph4\">&lt;xref:System.ServiceModel.Description.IOperationBehavior&gt;</ph> attributes to the behaviors collection on the <ph id=\"ph5\">&lt;xref:System.ServiceModel.Description.OperationDescription&gt;</ph> created for that operation.","pos":[11836,12219],"source":" When an operation is added to either a <xref:System.ServiceModel.ServiceHost> or a <xref:System.ServiceModel.ChannelFactory>, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] adds any  <xref:System.ServiceModel.Description.IOperationBehavior> attributes to the behaviors collection on the <xref:System.ServiceModel.Description.OperationDescription> created for that operation."},{"content":"The second mechanism is by directly adding the behavior to the behaviors collection on a constructed <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.OperationDescription&gt;</ph>.","pos":[12226,12387],"source":"The second mechanism is by directly adding the behavior to the behaviors collection on a constructed <xref:System.ServiceModel.Description.OperationDescription>."},{"pos":[12394,12611],"content":"Examples of operation behaviors in <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> include the <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph> and the <ph id=\"ph3\">&lt;xref:System.ServiceModel.TransactionFlowAttribute&gt;</ph>.","source":"Examples of operation behaviors in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] include the <xref:System.ServiceModel.OperationBehaviorAttribute> and the <xref:System.ServiceModel.TransactionFlowAttribute>."},{"content":"For more information and an example, see the reference topic.","pos":[12618,12679]},{"pos":[12689,12728],"content":"Using Configuration to Create Behaviors","linkify":"Using Configuration to Create Behaviors","nodes":[{"content":"Using Configuration to Create Behaviors","pos":[0,39]}]},{"content":"Service and endpoint, and contract behaviors can by designed to be specified in code or using attributes; only service and endpoint behaviors can be configured using application or Web configuration files.","pos":[12732,12937]},{"content":"Exposing behaviors using attributes allows developers to specify a behavior at compilation-time that cannot be added, removed, or modified at runtime.","pos":[12938,13088]},{"content":"This is often suitable for behaviors that are always required for the correct operation of a service (for example, the transaction-related parameters to the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute?displayProperty=fullName&gt;</ph> attribute).","pos":[13089,13334],"source":" This is often suitable for behaviors that are always required for the correct operation of a service (for example, the transaction-related parameters to the <xref:System.ServiceModel.ServiceBehaviorAttribute?displayProperty=fullName> attribute)."},{"content":"Exposing behaviors using configuration allows developers to leave the specification and configuration of those behaviors to those who deploy the service.","pos":[13335,13488]},{"content":"This is suitable for behaviors that are optional components or other deployment-specific configuration, such as whether metadata is exposed for the service or the particular authorization configuration for a service.","pos":[13489,13705]},{"pos":[13713,14085],"content":"[!NOTE]\n You can also use behaviors that support configuration to enforce company application policies by inserting them into the machine.config configuration file and locking those items down. For a description and an example, see [How to: Lock Down Endpoints in the Enterprise](../../../../docs/framework/wcf/extending/how-to-lock-down-endpoints-in-the-enterprise.md).","leadings":["","> "],"nodes":[{"content":" You can also use behaviors that support configuration to enforce company application policies by inserting them into the machine.config configuration file and locking those items down. For a description and an example, see [How to: Lock Down Endpoints in the Enterprise](../../../../docs/framework/wcf/extending/how-to-lock-down-endpoints-in-the-enterprise.md).","pos":[8,370],"nodes":[{"content":"You can also use behaviors that support configuration to enforce company application policies by inserting them into the machine.config configuration file and locking those items down.","pos":[1,185]},{"content":"For a description and an example, see <bpt id=\"p1\">[</bpt>How to: Lock Down Endpoints in the Enterprise<ept id=\"p1\">](../../../../docs/framework/wcf/extending/how-to-lock-down-endpoints-in-the-enterprise.md)</ept>.","pos":[186,362],"source":" For a description and an example, see [How to: Lock Down Endpoints in the Enterprise](../../../../docs/framework/wcf/extending/how-to-lock-down-endpoints-in-the-enterprise.md)."}]}]},{"content":"To expose a behavior using configuration, a developer must create a derived class of <ph id=\"ph1\">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> and then register that extension with configuration.","pos":[14092,14295],"source":"To expose a behavior using configuration, a developer must create a derived class of <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> and then register that extension with configuration."},{"content":"The following code example shows how an  <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph> implements <ph id=\"ph2\">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph>:","pos":[14302,14477],"source":"The following code example shows how an  <xref:System.ServiceModel.Description.IEndpointBehavior> implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>:"},{"content":"In order for the configuration system to load a custom <ph id=\"ph1\">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph>, it must be registered as an extension.","pos":[14781,14941],"source":"In order for the configuration system to load a custom <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>, it must be registered as an extension."},{"content":"The following code example shows the configuration file for the preceding endpoint behavior:","pos":[14942,15034]},{"pos":[16587,16777],"content":"Where <ph id=\"ph1\">`Microsoft.WCF.Documentation.EndpointBehaviorMessageInspector`</ph> is the behavior extension type and <ph id=\"ph2\">`HostApplication`</ph> is the name of the assembly into which that class has been compiled.","source":"Where `Microsoft.WCF.Documentation.EndpointBehaviorMessageInspector` is the behavior extension type and `HostApplication` is the name of the assembly into which that class has been compiled."},{"pos":[16787,16803],"content":"Evaluation Order","linkify":"Evaluation Order","nodes":[{"content":"Evaluation Order","pos":[0,16]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceHost?displayProperty=fullName&gt;</ph> are responsible for building the runtime from the programming model and description.","pos":[16807,17038],"source":"The <xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName> and the <xref:System.ServiceModel.ServiceHost?displayProperty=fullName> are responsible for building the runtime from the programming model and description."},{"content":"Behaviors, as previously described, contribute to that build process at the service, endpoint, contract, and operation.","pos":[17039,17158]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> applies behaviors in the following order:","pos":[17165,17249],"source":"The <xref:System.ServiceModel.ServiceHost> applies behaviors in the following order:"},{"content":"Service","pos":[17259,17266]},{"content":"Contract","pos":[17276,17284]},{"content":"Endpoint","pos":[17294,17302]},{"content":"Operation","pos":[17312,17321]},{"content":"Within any collection of behaviors, no order is guaranteed.","pos":[17328,17387]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> applies behaviors in the following order:","pos":[17394,17485],"source":"The <xref:System.ServiceModel.ChannelFactory%601> applies behaviors in the following order:"},{"content":"Contract","pos":[17495,17503]},{"content":"Endpoint","pos":[17513,17521]},{"content":"Operation","pos":[17531,17540]},{"content":"Within any collection of behaviors, again, no order is guaranteed.","pos":[17547,17613]},{"pos":[17623,17656],"content":"Adding Behaviors Programmatically","linkify":"Adding Behaviors Programmatically","nodes":[{"content":"Adding Behaviors Programmatically","pos":[0,33]}]},{"content":"Properties of the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName&gt;</ph> in the service application must not be modified subsequent to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.CommunicationObject.OnOpening%2A?displayProperty=fullName&gt;</ph> method on <ph id=\"ph3\">&lt;xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName&gt;</ph>.","pos":[17660,17999],"source":"Properties of the <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> in the service application must not be modified subsequent to the <xref:System.ServiceModel.Channels.CommunicationObject.OnOpening%2A?displayProperty=fullName> method on <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>."},{"content":"Some members, like the <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHostBase.Credentials%2A?displayProperty=fullName&gt;</ph> property and the <ph id=\"ph2\">`AddServiceEndpoint`</ph> methods on <ph id=\"ph3\">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.ServiceModel.ServiceHost?displayProperty=fullName&gt;</ph>, throw an exception if modified past that point.","pos":[18000,18314],"source":" Some members, like the <xref:System.ServiceModel.ServiceHostBase.Credentials%2A?displayProperty=fullName> property and the `AddServiceEndpoint` methods on <xref:System.ServiceModel.ServiceHostBase> and <xref:System.ServiceModel.ServiceHost?displayProperty=fullName>, throw an exception if modified past that point."},{"content":"Others permit you to modify them, but the result is undefined.","pos":[18315,18377]},{"content":"Similarly, on the client the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName&gt;</ph> values must not be modified after the call to <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.CommunicationObject.OnOpening%2A&gt;</ph> on the <ph id=\"ph3\">&lt;xref:System.ServiceModel.ChannelFactory?displayProperty=fullName&gt;</ph>.","pos":[18384,18682],"source":"Similarly, on the client the <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName> values must not be modified after the call to <xref:System.ServiceModel.Channels.CommunicationObject.OnOpening%2A> on the <xref:System.ServiceModel.ChannelFactory?displayProperty=fullName>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory.Credentials%2A?displayProperty=fullName&gt;</ph> property throws an exception if modified past that point, but the other client description values can be modified without error.","pos":[18683,18897],"source":" The <xref:System.ServiceModel.ChannelFactory.Credentials%2A?displayProperty=fullName> property throws an exception if modified past that point, but the other client description values can be modified without error."},{"content":"The result, however, is undefined.","pos":[18898,18932]},{"content":"Whether for the service or client, it is recommended that you modify the description prior to calling <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.CommunicationObject.Open%2A?displayProperty=fullName&gt;</ph>.","pos":[18939,19130],"source":"Whether for the service or client, it is recommended that you modify the description prior to calling <xref:System.ServiceModel.Channels.CommunicationObject.Open%2A?displayProperty=fullName>."},{"pos":[19140,19181],"content":"Inheritance Rules for Behavior Attributes","linkify":"Inheritance Rules for Behavior Attributes","nodes":[{"content":"Inheritance Rules for Behavior Attributes","pos":[0,41]}]},{"content":"All four types of behaviors can be populated using attributes â€“ service behaviors and contract behaviors.","pos":[19185,19290]},{"content":"Because attributes are defined on managed objects and members, and managed objects and members support inheritance, it is necessary to define how behavior attributes work in the context of inheritance.","pos":[19291,19492]},{"content":"At a high level, the rule is that for a particular scope (for example, service, contract, or operation), all behavior attributes in the inheritance hierarchy for that scope are applied.","pos":[19499,19684]},{"content":"If there are two behavior attributes of the same type, only the most-derived type is used.","pos":[19685,19775]},{"pos":[19786,19803],"content":"Service Behaviors","linkify":"Service Behaviors","nodes":[{"content":"Service Behaviors","pos":[0,17]}]},{"content":"For a given service class, all service behavior attributes on that class, and on parents of that class, are applied.","pos":[19807,19923]},{"content":"If the same type of attribute is applied at multiple places in the inheritance hierarchy, the most-derived type is used.","pos":[19924,20044]},{"content":"For example, in the preceding case, the service B ends up with an <ph id=\"ph1\">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph>, an <ph id=\"ph3\">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode&gt;</ph> mode of <ph id=\"ph4\">&lt;xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode&gt;</ph>, and a <ph id=\"ph5\">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph> of <ph id=\"ph6\">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph>.","pos":[20399,20818],"source":"For example, in the preceding case, the service B ends up with an <xref:System.ServiceModel.InstanceContextMode> of <xref:System.ServiceModel.InstanceContextMode>, an <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode> mode of <xref:System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode>, and a <xref:System.ServiceModel.ConcurrencyMode> of <xref:System.ServiceModel.ConcurrencyMode>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.ServiceModel.ConcurrencyMode&gt;</ph>, because <ph id=\"ph3\">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute&gt;</ph> attribute on service B is on \"more derived\" than that on service A.","pos":[20819,21040],"source":" The <xref:System.ServiceModel.ConcurrencyMode> is <xref:System.ServiceModel.ConcurrencyMode>, because <xref:System.ServiceModel.ServiceBehaviorAttribute> attribute on service B is on \"more derived\" than that on service A."},{"pos":[21051,21069],"content":"Contract Behaviors","linkify":"Contract Behaviors","nodes":[{"content":"Contract Behaviors","pos":[0,18]}]},{"content":"For a given contract, all contract behavior attributes on that interface and on parents of that interface, are applied.","pos":[21073,21192]},{"content":"If the same type of attribute is applied at multiple places in the inheritance hierarchy, the most-derived type is used.","pos":[21193,21313]},{"pos":[21324,21343],"content":"Operation Behaviors","linkify":"Operation Behaviors","nodes":[{"content":"Operation Behaviors","pos":[0,19]}]},{"content":"If a given operation does not override an existing abstract or virtual operation, no inheritance rules apply.","pos":[21347,21456]},{"content":"If an operation does override an existing operation, then all operation behavior attributes on that operation and on parents of that operation, are applied.","pos":[21463,21619]},{"content":"If the same type of attribute is applied at multiple places in the inheritance hierarchy, the most-derived type is used.","pos":[21621,21741]}]}