{"content":"---\ntitle: \"Threads and threading\"\nms.date: \"11/08/2018\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"multiple threads\"\n  - \"threading [.NET]\"\n  - \"threading [.NET], multiple threads\"\nms.assetid: 5baac3aa-e603-4fa6-9f89-0f2c1084e6b1\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Threads and threading\n\nMultithreading allows you to increase the responsiveness of your application and, if your application runs on a multiprocessor or multi-core system, increase its throughput.\n\n## Processes and threads\n\nA *process* is an executing program. An operating system uses processes to separate the applications that are being executed. A *thread* is the basic unit to which an operating system allocates processor time. Each thread has a [scheduling priority](scheduling-threads.md) and maintains a set of structures the system uses to save the thread context when the thread's execution is paused. The thread context includes all the information the thread needs to seamlessly resume execution, including the thread's set of CPU registers and stack. Multiple threads can run in the context of a process. All threads of a process share its virtual address space. A thread can execute any part of the program code, including parts currently being executed by another thread.\n\n> [!NOTE]\n> The .NET Framework provides a way to isolate applications within a process with the use of *application domains*. (Application domains are not available on .NET Core.) For more information, see the [Application domains and threads](../../framework/app-domains/application-domains.md#application-domains-and-threads) section of the [Application domains](../../framework/app-domains/application-domains.md) article.\n\nBy default, a .NET program is started with a single thread, often called the *primary* thread. However, it can create additional threads to execute code in parallel or concurrently with the primary thread. These threads are often called *worker* threads.\n\n## When to use multiple threads\n\nYou use multiple threads to increase the responsiveness of your application and to take advantage of a multiprocessor or multi-core system to increase the application's throughput.\n\nConsider a desktop application, in which the primary thread is responsible for user interface elements and responds to user actions. Use worker threads to perform time-consuming operations that, otherwise, would occupy the primary thread and make the user interface non-responsive. You also can use a dedicated thread for network or device communication to be more responsive to incoming messages or events.\n\nIf your program performs operations that can be done in parallel, the total execution time can be decreased by performing those operations in separate threads and running the program on a multiprocessor or multi-core system. On such a system, use of multithreading might increase throughput along with the increased responsiveness.\n\n## How to use multithreading in .NET\n\nStarting with the .NET Framework 4, the recommended way to utilize multithreading is to use [Task Parallel Library (TPL)](../parallel-programming/task-parallel-library-tpl.md) and [Parallel LINQ (PLINQ)](../parallel-programming/parallel-linq-plinq.md). For more information, see [Parallel programming](../parallel-programming/index.md).\n\nBoth TPL and PLINQ rely on the <xref:System.Threading.ThreadPool> threads. The <xref:System.Threading.ThreadPool?displayProperty=nameWithType> class provides a .NET application with a pool of worker threads. You also can use thread pool threads. For more information, see [The managed thread pool](the-managed-thread-pool.md).\n\nAt last, you can use the <xref:System.Threading.Thread?displayProperty=nameWithType> class that represents a managed thread. For more information, see [Using threads and threading](using-threads-and-threading.md).\n\nMultiple threads might need to access a shared resource. To keep the resource in a uncorrupted state and avoid race conditions, you must synchronize the thread access to it. You also might want to coordinate the interaction of multiple threads. .NET provides a range of types that you can use to synchronize access to a shared resource or coordinate thread interaction. For more information, see [Overview of synchronization primitives](overview-of-synchronization-primitives.md).\n\nDo handle exceptions in threads. Unhandled exceptions in threads generally terminate the process. For more information, see [Exceptions in managed threads](exceptions-in-managed-threads.md).\n\n## See also\n\n- [Threading objects and features](threading-objects-and-features.md)\n- [Managed threading best practices](managed-threading-best-practices.md)\n- [Parallel Processing, Concurrency, and Async Programming in .NET](../parallel-processing-and-concurrency.md)\n- [About Processes and Threads](/windows/desktop/procthread/about-processes-and-threads)","nodes":[{"pos":[4,285],"embed":true,"restype":"x-metadata","content":"title: \"Threads and threading\"\nms.date: \"11/08/2018\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"multiple threads\"\n  - \"threading [.NET]\"\n  - \"threading [.NET], multiple threads\"\nms.assetid: 5baac3aa-e603-4fa6-9f89-0f2c1084e6b1\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Threads and threading","nodes":[{"pos":[0,21],"content":"Threads and threading","nodes":[{"content":"Threads and threading","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[292,313],"content":"Threads and threading","linkify":"Threads and threading","nodes":[{"content":"Threads and threading","pos":[0,21]}]},{"content":"Multithreading allows you to increase the responsiveness of your application and, if your application runs on a multiprocessor or multi-core system, increase its throughput.","pos":[315,488]},{"pos":[493,514],"content":"Processes and threads","linkify":"Processes and threads","nodes":[{"content":"Processes and threads","pos":[0,21]}]},{"content":"A <bpt id=\"p1\">*</bpt>process<ept id=\"p1\">*</ept> is an executing program.","pos":[516,552],"source":"A *process* is an executing program."},{"content":"An operating system uses processes to separate the applications that are being executed.","pos":[553,641]},{"content":"A <bpt id=\"p1\">*</bpt>thread<ept id=\"p1\">*</ept> is the basic unit to which an operating system allocates processor time.","pos":[642,725],"source":" A *thread* is the basic unit to which an operating system allocates processor time."},{"content":"Each thread has a <bpt id=\"p1\">[</bpt>scheduling priority<ept id=\"p1\">](scheduling-threads.md)</ept> and maintains a set of structures the system uses to save the thread context when the thread's execution is paused.","pos":[726,904],"source":" Each thread has a [scheduling priority](scheduling-threads.md) and maintains a set of structures the system uses to save the thread context when the thread's execution is paused."},{"content":"The thread context includes all the information the thread needs to seamlessly resume execution, including the thread's set of CPU registers and stack.","pos":[905,1056]},{"content":"Multiple threads can run in the context of a process.","pos":[1057,1110]},{"content":"All threads of a process share its virtual address space.","pos":[1111,1168]},{"content":"A thread can execute any part of the program code, including parts currently being executed by another thread.","pos":[1169,1279]},{"pos":[1283,1706],"content":"[!NOTE]\nThe .NET Framework provides a way to isolate applications within a process with the use of *application domains*. (Application domains are not available on .NET Core.) For more information, see the [Application domains and threads](../../framework/app-domains/application-domains.md#application-domains-and-threads) section of the [Application domains](../../framework/app-domains/application-domains.md) article.","leadings":["","> "],"nodes":[{"content":"The .NET Framework provides a way to isolate applications within a process with the use of *application domains*. (Application domains are not available on .NET Core.) For more information, see the [Application domains and threads](../../framework/app-domains/application-domains.md#application-domains-and-threads) section of the [Application domains](../../framework/app-domains/application-domains.md) article.","pos":[8,421],"nodes":[{"content":"The .NET Framework provides a way to isolate applications within a process with the use of <bpt id=\"p1\">*</bpt>application domains<ept id=\"p1\">*</ept>.","pos":[0,113],"source":"The .NET Framework provides a way to isolate applications within a process with the use of *application domains*."},{"content":"(Application domains are not available on .NET Core.) For more information, see the <bpt id=\"p1\">[</bpt>Application domains and threads<ept id=\"p1\">](../../framework/app-domains/application-domains.md#application-domains-and-threads)</ept> section of the <bpt id=\"p2\">[</bpt>Application domains<ept id=\"p2\">](../../framework/app-domains/application-domains.md)</ept> article.","pos":[114,413],"source":" (Application domains are not available on .NET Core.) For more information, see the [Application domains and threads](../../framework/app-domains/application-domains.md#application-domains-and-threads) section of the [Application domains](../../framework/app-domains/application-domains.md) article."}]}]},{"content":"By default, a .NET program is started with a single thread, often called the <bpt id=\"p1\">*</bpt>primary<ept id=\"p1\">*</ept> thread.","pos":[1708,1802],"source":"By default, a .NET program is started with a single thread, often called the *primary* thread."},{"content":"However, it can create additional threads to execute code in parallel or concurrently with the primary thread.","pos":[1803,1913]},{"content":"These threads are often called <bpt id=\"p1\">*</bpt>worker<ept id=\"p1\">*</ept> threads.","pos":[1914,1962],"source":" These threads are often called *worker* threads."},{"pos":[1967,1995],"content":"When to use multiple threads","linkify":"When to use multiple threads","nodes":[{"content":"When to use multiple threads","pos":[0,28]}]},{"content":"You use multiple threads to increase the responsiveness of your application and to take advantage of a multiprocessor or multi-core system to increase the application's throughput.","pos":[1997,2177]},{"content":"Consider a desktop application, in which the primary thread is responsible for user interface elements and responds to user actions.","pos":[2179,2311]},{"content":"Use worker threads to perform time-consuming operations that, otherwise, would occupy the primary thread and make the user interface non-responsive.","pos":[2312,2460]},{"content":"You also can use a dedicated thread for network or device communication to be more responsive to incoming messages or events.","pos":[2461,2586]},{"content":"If your program performs operations that can be done in parallel, the total execution time can be decreased by performing those operations in separate threads and running the program on a multiprocessor or multi-core system.","pos":[2588,2812]},{"content":"On such a system, use of multithreading might increase throughput along with the increased responsiveness.","pos":[2813,2919]},{"pos":[2924,2957],"content":"How to use multithreading in .NET","linkify":"How to use multithreading in .NET","nodes":[{"content":"How to use multithreading in .NET","pos":[0,33]}]},{"content":"Starting with the .NET Framework 4, the recommended way to utilize multithreading is to use <bpt id=\"p1\">[</bpt>Task Parallel Library (TPL)<ept id=\"p1\">](../parallel-programming/task-parallel-library-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>Parallel LINQ (PLINQ)<ept id=\"p2\">](../parallel-programming/parallel-linq-plinq.md)</ept>.","pos":[2959,3211],"source":"Starting with the .NET Framework 4, the recommended way to utilize multithreading is to use [Task Parallel Library (TPL)](../parallel-programming/task-parallel-library-tpl.md) and [Parallel LINQ (PLINQ)](../parallel-programming/parallel-linq-plinq.md)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Parallel programming<ept id=\"p1\">](../parallel-programming/index.md)</ept>.","pos":[3212,3295],"source":" For more information, see [Parallel programming](../parallel-programming/index.md)."},{"content":"Both TPL and PLINQ rely on the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.","pos":[3297,3371],"source":"Both TPL and PLINQ rely on the <xref:System.Threading.ThreadPool> threads."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ThreadPool?displayProperty=nameWithType&gt;</ph> class provides a .NET application with a pool of worker threads.","pos":[3372,3504],"source":" The <xref:System.Threading.ThreadPool?displayProperty=nameWithType> class provides a .NET application with a pool of worker threads."},{"content":"You also can use thread pool threads.","pos":[3505,3542]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>The managed thread pool<ept id=\"p1\">](the-managed-thread-pool.md)</ept>.","pos":[3543,3623],"source":" For more information, see [The managed thread pool](the-managed-thread-pool.md)."},{"content":"At last, you can use the <ph id=\"ph1\">&lt;xref:System.Threading.Thread?displayProperty=nameWithType&gt;</ph> class that represents a managed thread.","pos":[3625,3749],"source":"At last, you can use the <xref:System.Threading.Thread?displayProperty=nameWithType> class that represents a managed thread."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using threads and threading<ept id=\"p1\">](using-threads-and-threading.md)</ept>.","pos":[3750,3838],"source":" For more information, see [Using threads and threading](using-threads-and-threading.md)."},{"content":"Multiple threads might need to access a shared resource.","pos":[3840,3896]},{"content":"To keep the resource in a uncorrupted state and avoid race conditions, you must synchronize the thread access to it.","pos":[3897,4013]},{"content":"You also might want to coordinate the interaction of multiple threads.","pos":[4014,4084]},{"content":".NET provides a range of types that you can use to synchronize access to a shared resource or coordinate thread interaction.","pos":[4085,4209]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Overview of synchronization primitives<ept id=\"p1\">](overview-of-synchronization-primitives.md)</ept>.","pos":[4210,4320],"source":" For more information, see [Overview of synchronization primitives](overview-of-synchronization-primitives.md)."},{"content":"Do handle exceptions in threads.","pos":[4322,4354]},{"content":"Unhandled exceptions in threads generally terminate the process.","pos":[4355,4419]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Exceptions in managed threads<ept id=\"p1\">](exceptions-in-managed-threads.md)</ept>.","pos":[4420,4512],"source":" For more information, see [Exceptions in managed threads](exceptions-in-managed-threads.md)."},{"pos":[4517,4525],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4529,4596],"content":"<bpt id=\"p1\">[</bpt>Threading objects and features<ept id=\"p1\">](threading-objects-and-features.md)</ept>","source":"[Threading objects and features](threading-objects-and-features.md)"},{"pos":[4599,4670],"content":"<bpt id=\"p1\">[</bpt>Managed threading best practices<ept id=\"p1\">](managed-threading-best-practices.md)</ept>","source":"[Managed threading best practices](managed-threading-best-practices.md)"},{"pos":[4673,4781],"content":"<bpt id=\"p1\">[</bpt>Parallel Processing, Concurrency, and Async Programming in .NET<ept id=\"p1\">](../parallel-processing-and-concurrency.md)</ept>","source":"[Parallel Processing, Concurrency, and Async Programming in .NET](../parallel-processing-and-concurrency.md)"},{"pos":[4784,4870],"content":"<bpt id=\"p1\">[</bpt>About Processes and Threads<ept id=\"p1\">](/windows/desktop/procthread/about-processes-and-threads)</ept>","source":"[About Processes and Threads](/windows/desktop/procthread/about-processes-and-threads)"}]}