{"content":"---\ntitle: \"How to: Safely Cast by Using as and is Operators (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"cast operators [C#], as and is operators\"\n  - \"as operator [C#]\"\n  - \"is operator [C#]\"\nms.assetid: c1176cea-1426-4a44-8570-3eadafa58863\ncaps.latest.revision: 10\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Safely Cast by Using as and is Operators (C# Programming Guide)\nBecause objects are polymorphic, it is possible for a variable of a base class type to hold a derived type. To access the derived type's method, it is necessary to cast the value back to the derived type. However, to attempt a simple cast in these cases creates the risk of throwing an <xref:System.InvalidCastException>. That is why C# provides the [is](../../../csharp/language-reference/keywords/is.md) and [as](../../../csharp/language-reference/keywords/as.md) operators. You can use these operators to test whether a cast will succeed without causing an exception to be thrown. In general, the `as` operator is more efficient because it actually returns the cast value if the cast can be made successfully. The `is` operator returns only a Boolean value. It can therefore be used when you just want to determine an object's type but do not have to actually cast it.  \n  \n## Example  \n The following examples show how to use the `is` and `as` operators to cast from one reference type to another without the risk of throwing an exception. The example also shows how to use the `as` operator with nullable value types.  \n  \n [!code-cs[csProgGuideTypes#40](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/how-to-safely-cast-by-using-as-and-is-operators_1.cs)]  \n  \n## See Also  \n [Types](../../../csharp/programming-guide/types/index.md)   \n [Casting and Type Conversions](../../../csharp/programming-guide/types/casting-and-type-conversions.md)   \n [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md)","nodes":[{"pos":[4,636],"nodes":[{"content":"How to: Safely Cast by Using as and is Operators (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,88],"content":"How to: Safely Cast by Using as and is Operators (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"How to: Safely Cast by Using as and is Operators (C# Programming Guide) | Microsoft Docs","pos":[0,88]}]}],"pos":[6,97],"yaml":true}],"content":"title: \"How to: Safely Cast by Using as and is Operators (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"cast operators [C#], as and is operators\"\n  - \"as operator [C#]\"\n  - \"is operator [C#]\"\nms.assetid: c1176cea-1426-4a44-8570-3eadafa58863\ncaps.latest.revision: 10\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[643,714],"content":"How to: Safely Cast by Using as and is Operators (C# Programming Guide)","linkify":"How to: Safely Cast by Using as and is Operators (C# Programming Guide)","nodes":[{"content":"How to: Safely Cast by Using as and is Operators (C# Programming Guide)","pos":[0,71]}]},{"content":"Because objects are polymorphic, it is possible for a variable of a base class type to hold a derived type.","pos":[715,822]},{"content":"To access the derived type's method, it is necessary to cast the value back to the derived type.","pos":[823,919]},{"content":"However, to attempt a simple cast in these cases creates the risk of throwing an <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph>.","pos":[920,1036],"source":" However, to attempt a simple cast in these cases creates the risk of throwing an <xref:System.InvalidCastException>."},{"content":"That is why C# provides the <bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../../../csharp/language-reference/keywords/is.md)</ept> and <bpt id=\"p2\">[</bpt>as<ept id=\"p2\">](../../../csharp/language-reference/keywords/as.md)</ept> operators.","pos":[1037,1191],"source":" That is why C# provides the [is](../../../csharp/language-reference/keywords/is.md) and [as](../../../csharp/language-reference/keywords/as.md) operators."},{"content":"You can use these operators to test whether a cast will succeed without causing an exception to be thrown.","pos":[1192,1298]},{"content":"In general, the <ph id=\"ph1\">`as`</ph> operator is more efficient because it actually returns the cast value if the cast can be made successfully.","pos":[1299,1427],"source":" In general, the `as` operator is more efficient because it actually returns the cast value if the cast can be made successfully."},{"content":"The <ph id=\"ph1\">`is`</ph> operator returns only a Boolean value.","pos":[1428,1475],"source":" The `is` operator returns only a Boolean value."},{"content":"It can therefore be used when you just want to determine an object's type but do not have to actually cast it.","pos":[1476,1586]},{"pos":[1595,1602],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following examples show how to use the <ph id=\"ph1\">`is`</ph> and <ph id=\"ph2\">`as`</ph> operators to cast from one reference type to another without the risk of throwing an exception.","pos":[1606,1758],"source":"The following examples show how to use the `is` and `as` operators to cast from one reference type to another without the risk of throwing an exception."},{"content":"The example also shows how to use the <ph id=\"ph1\">`as`</ph> operator with nullable value types.","pos":[1759,1837],"source":" The example also shows how to use the `as` operator with nullable value types."},{"pos":[1844,1997],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideTypes#40<ept id=\"p2\">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/how-to-safely-cast-by-using-as-and-is-operators_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideTypes#40](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/how-to-safely-cast-by-using-as-and-is-operators_1.cs)]"},{"pos":[2006,2014],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/programming-guide/types/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2018,2076],"source":"[Types](../../../csharp/programming-guide/types/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Casting and Type Conversions<ept id=\"p1\">](../../../csharp/programming-guide/types/casting-and-type-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[2080,2184],"source":"[Casting and Type Conversions](../../../csharp/programming-guide/types/casting-and-type-conversions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept>","pos":[2188,2263],"source":"[Nullable Types](../../../csharp/programming-guide/nullable-types/index.md)"}]}