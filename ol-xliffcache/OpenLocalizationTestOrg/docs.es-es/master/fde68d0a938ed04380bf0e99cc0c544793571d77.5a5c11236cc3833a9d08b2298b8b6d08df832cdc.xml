{"content":"---\ntitle: \"How to: Speed Up Small Loop Bodies\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"parallel loops, how to speed up\"\nms.assetid: c7a66677-cb59-4cbf-969a-d2e8fc61a6ce\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Speed Up Small Loop Bodies\nWhen a <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> loop has a small body, it might perform more slowly than the equivalent sequential loop, such as the [for](../../csharp/language-reference/keywords/for.md) loop in C# and the [For](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/44kykk21(v=vs.90)) loop in Visual Basic. Slower performance is caused by the overhead involved in partitioning the data and the cost of invoking a delegate on each loop iteration. To address such scenarios, the <xref:System.Collections.Concurrent.Partitioner> class provides the <xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=nameWithType> method, which enables you to provide a sequential loop for the delegate body, so that the delegate is invoked only once per partition, instead of once per iteration. For more information, see [Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).  \n  \n## Example  \n [!code-csharp[TPL_Partitioners#01](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_partitioners/cs/partitioner01.cs#01)]\n [!code-vb[TPL_Partitioners#01](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_partitioners/vb/partitionercreate01.vb#01)]  \n  \n The approach demonstrated in this example is useful when the loop performs a minimal amount of work. As the work becomes more computationally expensive, you will probably get the same or better performance by using a <xref:System.Threading.Tasks.Parallel.For%2A> or <xref:System.Threading.Tasks.Parallel.ForEach%2A> loop with the default partitioner.  \n  \n## See also\n\n- [Data Parallelism](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)\n- [Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)\n- [Iterators (C#)](../../csharp/programming-guide/concepts/iterators.md)\n- [Iterators (Visual Basic)](../../visual-basic/programming-guide/concepts/iterators.md)\n- [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)\n","nodes":[{"pos":[4,283],"embed":true,"restype":"x-metadata","content":"title: \"How to: Speed Up Small Loop Bodies\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"parallel loops, how to speed up\"\nms.assetid: c7a66677-cb59-4cbf-969a-d2e8fc61a6ce\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Speed Up Small Loop Bodies","nodes":[{"pos":[0,34],"content":"How to: Speed Up Small Loop Bodies","nodes":[{"content":"How to: Speed Up Small Loop Bodies","pos":[0,34]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[290,324],"content":"How to: Speed Up Small Loop Bodies","linkify":"How to: Speed Up Small Loop Bodies","nodes":[{"content":"How to: Speed Up Small Loop Bodies","pos":[0,34]}]},{"content":"When a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> loop has a small body, it might perform more slowly than the equivalent sequential loop, such as the <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../csharp/language-reference/keywords/for.md)</ept> loop in C# and the <bpt id=\"p2\">[</bpt>For<ept id=\"p2\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/44kykk21(v=vs.90))</ept> loop in Visual Basic.","pos":[325,705],"source":"When a <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> loop has a small body, it might perform more slowly than the equivalent sequential loop, such as the [for](../../csharp/language-reference/keywords/for.md) loop in C# and the [For](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/44kykk21(v=vs.90)) loop in Visual Basic."},{"content":"Slower performance is caused by the overhead involved in partitioning the data and the cost of invoking a delegate on each loop iteration.","pos":[706,844]},{"content":"To address such scenarios, the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.Partitioner&gt;</ph> class provides the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=nameWithType&gt;</ph> method, which enables you to provide a sequential loop for the delegate body, so that the delegate is invoked only once per partition, instead of once per iteration.","pos":[845,1197],"source":" To address such scenarios, the <xref:System.Collections.Concurrent.Partitioner> class provides the <xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=nameWithType> method, which enables you to provide a sequential loop for the delegate body, so that the delegate is invoked only once per partition, instead of once per iteration."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","pos":[1198,1350],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."},{"pos":[1359,1366],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The approach demonstrated in this example is useful when the loop performs a minimal amount of work.","pos":[1638,1738]},{"content":"As the work becomes more computationally expensive, you will probably get the same or better performance by using a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> loop with the default partitioner.","pos":[1739,1988],"source":" As the work becomes more computationally expensive, you will probably get the same or better performance by using a <xref:System.Threading.Tasks.Parallel.For%2A> or <xref:System.Threading.Tasks.Parallel.ForEach%2A> loop with the default partitioner."},{"pos":[1997,2005],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2009,2114],"content":"<bpt id=\"p1\">[</bpt>Data Parallelism<ept id=\"p1\">](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)</ept>","source":"[Data Parallelism](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)"},{"pos":[2117,2242],"content":"<bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>","source":"[Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)"},{"pos":[2245,2315],"content":"<bpt id=\"p1\">[</bpt>Iterators (C#)<ept id=\"p1\">](../../csharp/programming-guide/concepts/iterators.md)</ept>","source":"[Iterators (C#)](../../csharp/programming-guide/concepts/iterators.md)"},{"pos":[2318,2404],"content":"<bpt id=\"p1\">[</bpt>Iterators (Visual Basic)<ept id=\"p1\">](../../visual-basic/programming-guide/concepts/iterators.md)</ept>","source":"[Iterators (Visual Basic)](../../visual-basic/programming-guide/concepts/iterators.md)"},{"pos":[2407,2528],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions in PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)</ept>","source":"[Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)"}]}