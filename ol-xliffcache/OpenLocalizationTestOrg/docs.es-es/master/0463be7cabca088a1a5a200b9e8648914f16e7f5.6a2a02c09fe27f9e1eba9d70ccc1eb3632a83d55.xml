{"content":"---\ntitle: \"How to: Find Related Elements (XPath-LINQ to XML) (C#)\"\nms.date: 07/20/2015\nms.assetid: 41b386ee-562d-4841-bd6b-e44a7eb69f26\n---\n# How to: Find Related Elements (XPath-LINQ to XML) (C#)\nThis topic shows how to get an element selecting on an attribute that is referred to by the value of another element.  \n  \n The XPath expression is:  \n  \n `.//Customer[@CustomerID=/Root/Orders/Order[12]/CustomerID]`  \n  \n## Example  \n This example finds the 12th `Order` element, and then finds the customer for that order.  \n  \n Note that indexing into a list in .NET is 'zero' based. Indexing into a collection of nodes in an XPath predicate is 'one' based. This example reflects this difference.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md).  \n  \n```csharp  \nXDocument co = XDocument.Load(\"CustomersOrders.xml\");  \n  \n// LINQ to XML query  \nXElement customer1 =  \n    (from el in co.Descendants(\"Customer\")  \n     where (string)el.Attribute(\"CustomerID\") ==  \n          (string)(co  \n              .Element(\"Root\")  \n              .Element(\"Orders\")  \n              .Elements(\"Order\")  \n              .ToList()[11]  \n              .Element(\"CustomerID\"))  \n    select el)  \n    .First();  \n  \n// An alternate way to write the query that avoids creation  \n// of a System.Collections.Generic.List:  \nXElement customer2 =  \n    (from el in co.Descendants(\"Customer\")  \n     where (string)el.Attribute(\"CustomerID\") ==  \n          (string)(co  \n              .Element(\"Root\")  \n              .Element(\"Orders\")  \n              .Elements(\"Order\")  \n              .Skip(11).First()  \n              .Element(\"CustomerID\"))  \n    select el)  \n    .First();  \n  \n// XPath expression  \nXElement customer3 = co.XPathSelectElement(  \n  \".//Customer[@CustomerID=/Root/Orders/Order[12]/CustomerID]\");  \n  \nif (customer1 == customer2 && customer1 == customer3)  \n    Console.WriteLine(\"Results are identical\");  \nelse  \n    Console.WriteLine(\"Results differ\");  \nConsole.WriteLine(customer1);  \n```  \n  \n This example produces the following output:  \n  \n```  \nResults are identical  \n<Customer CustomerID=\"HUNGC\">  \n  <CompanyName>Hungry Coyote Import Store</CompanyName>  \n  <ContactName>Yoshi Latimer</ContactName>  \n  <ContactTitle>Sales Representative</ContactTitle>  \n  <Phone>(503) 555-6874</Phone>  \n  <Fax>(503) 555-2376</Fax>  \n  <FullAddress>  \n    <Address>City Center Plaza 516 Main St.</Address>  \n    <City>Elgin</City>  \n    <Region>OR</Region>  \n    <PostalCode>97827</PostalCode>  \n    <Country>USA</Country>  \n  </FullAddress>  \n</Customer>  \n```  \n  \n## See also\n\n- [LINQ to XML for XPath Users (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)\n","nodes":[{"pos":[4,136],"embed":true,"restype":"x-metadata","content":"title: \"How to: Find Related Elements (XPath-LINQ to XML) (C#)\"\nms.date: 07/20/2015\nms.assetid: 41b386ee-562d-4841-bd6b-e44a7eb69f26","nodes":[{"content":"How to: Find Related Elements (XPath-LINQ to XML) (C#)","nodes":[{"pos":[0,54],"content":"How to: Find Related Elements (XPath-LINQ to XML) (C#)","nodes":[{"content":"How to: Find Related Elements (XPath-LINQ to XML) (C#)","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[143,197],"content":"How to: Find Related Elements (XPath-LINQ to XML) (C#)","linkify":"How to: Find Related Elements (XPath-LINQ to XML) (C#)","nodes":[{"content":"How to: Find Related Elements (XPath-LINQ to XML) (C#)","pos":[0,54]}]},{"content":"This topic shows how to get an element selecting on an attribute that is referred to by the value of another element.","pos":[198,315]},{"content":"The XPath expression is:","pos":[322,346]},{"pos":[422,429],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[433,521],"content":"This example finds the 12th <ph id=\"ph1\">`Order`</ph> element, and then finds the customer for that order.","source":"This example finds the 12th `Order` element, and then finds the customer for that order."},{"content":"Note that indexing into a list in .NET is 'zero' based.","pos":[528,583]},{"content":"Indexing into a collection of nodes in an XPath predicate is 'one' based.","pos":[584,657]},{"content":"This example reflects this difference.","pos":[658,696]},{"pos":[703,909],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)."},{"content":"This example produces the following output:","pos":[2158,2201]},{"pos":[2726,2734],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2738,2855],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML for XPath Users (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)</ept>","source":"[LINQ to XML for XPath Users (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)"}]}