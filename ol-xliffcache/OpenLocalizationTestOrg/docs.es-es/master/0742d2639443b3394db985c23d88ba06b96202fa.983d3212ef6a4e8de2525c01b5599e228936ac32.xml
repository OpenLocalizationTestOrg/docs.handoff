{"content":"---\ntitle: \"&amp;= Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"&=_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"AND assignment operator (&=) [C#]\"\n  - \"&= operator [C#]\"\nms.assetid: e8d58f3f-72dd-4b5a-b995-452fcce7e6bb\ncaps.latest.revision: 15\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &amp;= Operator (C# Reference)\nThe AND assignment operator.  \n  \n## Remarks  \n An expression using the `&=` assignment operator, such as  \n  \n```  \nx &= y  \n```  \n  \n is equivalent to  \n  \n```  \nx = x & y  \n```  \n  \n except that `x` is only evaluated once. The [& operator](../../../csharp/language-reference/operators/and-operator.md) performs a bitwise logical AND operation on integral operands and logical AND on `bool` operands.  \n  \n The `&=` operator cannot be overloaded directly, but user-defined types can overload the binary [& operator](../../../csharp/language-reference/operators/and-operator.md) (see [operator](../../../csharp/language-reference/keywords/operator.md)).  \n  \n## Example  \n [!code-cs[csRefOperators#34](../../../csharp/language-reference/operators/codesnippet/CSharp/and-assignment-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[12,59],"content":"&amp;= Operator (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph>= Operator (C# Reference) | Microsoft Docs","pos":[0,47],"source":"&amp;= Operator (C# Reference) | Microsoft Docs"}]},{"pos":[604,634],"content":"&amp;= Operator (C# Reference)","linkify":"&amp;= Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph>= Operator (C# Reference)","pos":[0,30],"source":"&amp;= Operator (C# Reference)"}]},{"content":"The AND assignment operator.","pos":[635,663]},{"pos":[672,679],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[683,740],"content":"An expression using the <ph id=\"ph1\">`&amp;=`</ph> assignment operator, such as","source":"An expression using the `&=` assignment operator, such as"},{"content":"is equivalent to","pos":[771,787]},{"content":"except that <ph id=\"ph1\">`x`</ph> is only evaluated once.","pos":[821,860],"source":"except that `x` is only evaluated once."},{"content":"The <bpt id=\"p1\">[</bpt>&amp; operator<ept id=\"p1\">](../../../csharp/language-reference/operators/and-operator.md)</ept> performs a bitwise logical AND operation on integral operands and logical AND on <ph id=\"ph1\">`bool`</ph> operands.","pos":[861,1037],"source":" The [& operator](../../../csharp/language-reference/operators/and-operator.md) performs a bitwise logical AND operation on integral operands and logical AND on `bool` operands."},{"pos":[1044,1289],"content":"The <ph id=\"ph1\">`&amp;=`</ph> operator cannot be overloaded directly, but user-defined types can overload the binary <bpt id=\"p1\">[</bpt>&amp; operator<ept id=\"p1\">](../../../csharp/language-reference/operators/and-operator.md)</ept> (see <bpt id=\"p2\">[</bpt>operator<ept id=\"p2\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","source":"The `&=` operator cannot be overloaded directly, but user-defined types can overload the binary [& operator](../../../csharp/language-reference/operators/and-operator.md) (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"pos":[1298,1305],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1309,1432],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#34<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/and-assignment-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#34](../../../csharp/language-reference/operators/codesnippet/CSharp/and-assignment-operator_1.cs)]"},{"pos":[1441,1449],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1453,1513],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1516,1584],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1587,1657],"source":" [C# Operators](../../../csharp/language-reference/operators/index.md)"}]}