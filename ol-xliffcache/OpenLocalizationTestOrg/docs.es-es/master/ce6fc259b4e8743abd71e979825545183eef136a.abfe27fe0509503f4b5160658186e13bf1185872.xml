{"content":"---\ntitle: \"WPF and WF Integration in XAML\"\nms.date: \"03/30/2017\"\nms.assetid: a4f53b48-fc90-4315-bca0-ba009562f488\n---\n# WPF and WF Integration in XAML\nThis sample demonstrates how to create an application that uses Windows Presentation Foundation (WPF) and Windows Workflow Foundation (WF) features in a single XAML document. To accomplish this, the sample uses Windows Workflow Foundation (WF) and XAML extensibility.\n\n## Sample Details\n The ShowWindow.xaml file deserializes into a <xref:System.Activities.Statements.Sequence> activity with two string variables that are manipulated by the sequence’s activities: `ShowWindow` and `WriteLine`. The <xref:System.Activities.Statements.WriteLine> activity outputs to the console window the expression that it assigns to the <xref:System.Activities.Statements.WriteLine.Text%2A> property. The `ShowWindow` activity displays a [!INCLUDE[avalon2](../../../../includes/avalon2-md.md)] window as part of its execution logic. The <xref:System.Activities.ActivityContext.DataContext%2A> of the window includes the variables declared in the sequence. The controls of the window declared in the `ShowWindow` activity use data binding to manipulate those variables. Finally, the window contains a button control. The `Click` event for the button is handled by a <xref:System.Activities.ActivityDelegate> named `MarkupExtension` that contains a `CloseWindow` activity. `MarkUpExtension` invokes the contained activity that provides, as context, any objects identified by an `x:Name`, as well as the <xref:System.Activities.ActivityContext.DataContext%2A> of the containing window. Thus, the `CloseWindow.InArgument<Window>` can be bound using an expression that references the window’s name.\n\n The `ShowWindow` activity derives from the <xref:System.Activities.AsyncCodeActivity%601> class to display a [!INCLUDE[avalon2](../../../../includes/avalon2-md.md)] window and completes when the window is closed. The `Window` property is of type `Func<Window>` that allows the window to be created on demand for each execution of the activity. The `Window` property uses a <xref:System.Xaml.XamlDeferringLoader> to enable this deferred evaluation model. The `FuncFactoryDeferringLoader` allows a `XamlReader` to be captured during serialization and then read during activity execution.\n\n A well-written activity never blocks the scheduler thread. However, the `ShowWindow` activity cannot complete until the window it is displaying is closed. The `ShowWindow` activity achieves this behavior by deriving from <xref:System.Activities.AsyncCodeActivity>, calling the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> method in the <xref:System.Activities.AsyncCodeActivity.BeginExecute%2A> method, and showing the window modally. The delegate is invoked through the WPF <xref:System.ServiceModel.InstanceContext.SynchronizationContext%2A>. The `ShowWindow` activity assigns the <xref:System.Activities.ActivityContext.DataContext%2A> property to the `Window.DataContext` property to provide any data bound controls access to the in-scope variables.\n\n The last point of interest in this sample is a <xref:System.Workflow.ComponentModel.Serialization.MarkupExtension> called `DelegateActivityExtension`. The `ProvideValue` method of this markup extension returns a delegate that invokes an embedded activity. This activity runs in an environment that includes the [!INCLUDE[avalon2](../../../../includes/avalon2-md.md)] data context and any `x:Name` values in scope. In the `GenericInvoke` method, this environment is provided to the activity through a <xref:System.Activities.Hosting.SymbolResolver> extension. This extension is added to a <xref:System.Activities.WorkflowInvoker> that is then used to invoke the embedded activity whenever the markup extension’s delegate is invoked.\n\n> [!NOTE]\n>  The default designer does not support the ShowWindow activity; as such, the ShowWindow.Xaml file does not display correctly in the designer.\n\n#### To use this sample\n\n1.  Using Visual Studio 2010, open the WPFWFIntegration.sln solution file.\n\n2.  To build the solution, press CTRL+SHIFT+B.\n\n3.  To run the solution, press F5.\n\n4.  Type your first and last name into the dialog.\n\n5.  Close the dialog and the console echoes your name.\n\n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Scenario\\WPFWFIntegration`","nodes":[{"pos":[4,114],"embed":true,"restype":"x-metadata","content":"title: \"WPF and WF Integration in XAML\"\nms.date: \"03/30/2017\"\nms.assetid: a4f53b48-fc90-4315-bca0-ba009562f488","nodes":[{"content":"WPF and WF Integration in XAML","nodes":[{"pos":[0,30],"content":"WPF and WF Integration in XAML","nodes":[{"content":"WPF and WF Integration in XAML","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[121,151],"content":"WPF and WF Integration in XAML","linkify":"WPF and WF Integration in XAML","nodes":[{"content":"WPF and WF Integration in XAML","pos":[0,30]}]},{"content":"This sample demonstrates how to create an application that uses Windows Presentation Foundation (WPF) and Windows Workflow Foundation (WF) features in a single XAML document.","pos":[152,326]},{"content":"To accomplish this, the sample uses Windows Workflow Foundation (WF) and XAML extensibility.","pos":[327,419]},{"pos":[424,438],"content":"Sample Details","linkify":"Sample Details","nodes":[{"content":"Sample Details","pos":[0,14]}]},{"content":"The ShowWindow.xaml file deserializes into a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity with two string variables that are manipulated by the sequence’s activities: <ph id=\"ph2\">`ShowWindow`</ph> and <ph id=\"ph3\">`WriteLine`</ph>.","pos":[440,645],"source":"The ShowWindow.xaml file deserializes into a <xref:System.Activities.Statements.Sequence> activity with two string variables that are manipulated by the sequence’s activities: `ShowWindow` and `WriteLine`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity outputs to the console window the expression that it assigns to the <ph id=\"ph2\">&lt;xref:System.Activities.Statements.WriteLine.Text%2A&gt;</ph> property.","pos":[646,836],"source":" The <xref:System.Activities.Statements.WriteLine> activity outputs to the console window the expression that it assigns to the <xref:System.Activities.Statements.WriteLine.Text%2A> property."},{"content":"The <ph id=\"ph1\">`ShowWindow`</ph> activity displays a <ph id=\"ph2\">[!INCLUDE[avalon2](../../../../includes/avalon2-md.md)]</ph> window as part of its execution logic.","pos":[837,968],"source":" The `ShowWindow` activity displays a [!INCLUDE[avalon2](../../../../includes/avalon2-md.md)] window as part of its execution logic."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.ActivityContext.DataContext%2A&gt;</ph> of the window includes the variables declared in the sequence.","pos":[969,1091],"source":" The <xref:System.Activities.ActivityContext.DataContext%2A> of the window includes the variables declared in the sequence."},{"content":"The controls of the window declared in the <ph id=\"ph1\">`ShowWindow`</ph> activity use data binding to manipulate those variables.","pos":[1092,1204],"source":" The controls of the window declared in the `ShowWindow` activity use data binding to manipulate those variables."},{"content":"Finally, the window contains a button control.","pos":[1205,1251]},{"content":"The <ph id=\"ph1\">`Click`</ph> event for the button is handled by a <ph id=\"ph2\">&lt;xref:System.Activities.ActivityDelegate&gt;</ph> named <ph id=\"ph3\">`MarkupExtension`</ph> that contains a <ph id=\"ph4\">`CloseWindow`</ph> activity.","pos":[1252,1406],"source":" The `Click` event for the button is handled by a <xref:System.Activities.ActivityDelegate> named `MarkupExtension` that contains a `CloseWindow` activity."},{"content":"<ph id=\"ph1\">`MarkUpExtension`</ph> invokes the contained activity that provides, as context, any objects identified by an <ph id=\"ph2\">`x:Name`</ph>, as well as the <ph id=\"ph3\">&lt;xref:System.Activities.ActivityContext.DataContext%2A&gt;</ph> of the containing window.","pos":[1407,1618],"source":"`MarkUpExtension` invokes the contained activity that provides, as context, any objects identified by an `x:Name`, as well as the <xref:System.Activities.ActivityContext.DataContext%2A> of the containing window."},{"content":"Thus, the <ph id=\"ph1\">`CloseWindow.InArgument&lt;Window&gt;`</ph> can be bound using an expression that references the window’s name.","pos":[1619,1729],"source":" Thus, the `CloseWindow.InArgument<Window>` can be bound using an expression that references the window’s name."},{"content":"The <ph id=\"ph1\">`ShowWindow`</ph> activity derives from the <ph id=\"ph2\">&lt;xref:System.Activities.AsyncCodeActivity%601&gt;</ph> class to display a <ph id=\"ph3\">[!INCLUDE[avalon2](../../../../includes/avalon2-md.md)]</ph> window and completes when the window is closed.","pos":[1732,1944],"source":"The `ShowWindow` activity derives from the <xref:System.Activities.AsyncCodeActivity%601> class to display a [!INCLUDE[avalon2](../../../../includes/avalon2-md.md)] window and completes when the window is closed."},{"content":"The <ph id=\"ph1\">`Window`</ph> property is of type <ph id=\"ph2\">`Func&lt;Window&gt;`</ph> that allows the window to be created on demand for each execution of the activity.","pos":[1945,2075],"source":" The `Window` property is of type `Func<Window>` that allows the window to be created on demand for each execution of the activity."},{"content":"The <ph id=\"ph1\">`Window`</ph> property uses a <ph id=\"ph2\">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph> to enable this deferred evaluation model.","pos":[2076,2185],"source":" The `Window` property uses a <xref:System.Xaml.XamlDeferringLoader> to enable this deferred evaluation model."},{"content":"The <ph id=\"ph1\">`FuncFactoryDeferringLoader`</ph> allows a <ph id=\"ph2\">`XamlReader`</ph> to be captured during serialization and then read during activity execution.","pos":[2186,2317],"source":" The `FuncFactoryDeferringLoader` allows a `XamlReader` to be captured during serialization and then read during activity execution."},{"content":"A well-written activity never blocks the scheduler thread.","pos":[2320,2378]},{"content":"However, the <ph id=\"ph1\">`ShowWindow`</ph> activity cannot complete until the window it is displaying is closed.","pos":[2379,2474],"source":" However, the `ShowWindow` activity cannot complete until the window it is displaying is closed."},{"content":"The <ph id=\"ph1\">`ShowWindow`</ph> activity achieves this behavior by deriving from <ph id=\"ph2\">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>, calling the <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> method in the <ph id=\"ph4\">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph> method, and showing the window modally.","pos":[2475,2765],"source":" The `ShowWindow` activity achieves this behavior by deriving from <xref:System.Activities.AsyncCodeActivity>, calling the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> method in the <xref:System.Activities.AsyncCodeActivity.BeginExecute%2A> method, and showing the window modally."},{"content":"The delegate is invoked through the WPF <ph id=\"ph1\">&lt;xref:System.ServiceModel.InstanceContext.SynchronizationContext%2A&gt;</ph>.","pos":[2766,2875],"source":" The delegate is invoked through the WPF <xref:System.ServiceModel.InstanceContext.SynchronizationContext%2A>."},{"content":"The <ph id=\"ph1\">`ShowWindow`</ph> activity assigns the <ph id=\"ph2\">&lt;xref:System.Activities.ActivityContext.DataContext%2A&gt;</ph> property to the <ph id=\"ph3\">`Window.DataContext`</ph> property to provide any data bound controls access to the in-scope variables.","pos":[2876,3084],"source":" The `ShowWindow` activity assigns the <xref:System.Activities.ActivityContext.DataContext%2A> property to the `Window.DataContext` property to provide any data bound controls access to the in-scope variables."},{"content":"The last point of interest in this sample is a <ph id=\"ph1\">&lt;xref:System.Workflow.ComponentModel.Serialization.MarkupExtension&gt;</ph> called <ph id=\"ph2\">`DelegateActivityExtension`</ph>.","pos":[3087,3237],"source":"The last point of interest in this sample is a <xref:System.Workflow.ComponentModel.Serialization.MarkupExtension> called `DelegateActivityExtension`."},{"content":"The <ph id=\"ph1\">`ProvideValue`</ph> method of this markup extension returns a delegate that invokes an embedded activity.","pos":[3238,3342],"source":" The `ProvideValue` method of this markup extension returns a delegate that invokes an embedded activity."},{"content":"This activity runs in an environment that includes the <ph id=\"ph1\">[!INCLUDE[avalon2](../../../../includes/avalon2-md.md)]</ph> data context and any <ph id=\"ph2\">`x:Name`</ph> values in scope.","pos":[3343,3500],"source":" This activity runs in an environment that includes the [!INCLUDE[avalon2](../../../../includes/avalon2-md.md)] data context and any `x:Name` values in scope."},{"content":"In the <ph id=\"ph1\">`GenericInvoke`</ph> method, this environment is provided to the activity through a <ph id=\"ph2\">&lt;xref:System.Activities.Hosting.SymbolResolver&gt;</ph> extension.","pos":[3501,3645],"source":" In the `GenericInvoke` method, this environment is provided to the activity through a <xref:System.Activities.Hosting.SymbolResolver> extension."},{"content":"This extension is added to a <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> that is then used to invoke the embedded activity whenever the markup extension’s delegate is invoked.","pos":[3646,3818],"source":" This extension is added to a <xref:System.Activities.WorkflowInvoker> that is then used to invoke the embedded activity whenever the markup extension’s delegate is invoked."},{"pos":[3822,3973],"content":"[!NOTE]\n The default designer does not support the ShowWindow activity; as such, the ShowWindow.Xaml file does not display correctly in the designer.","leadings":["","> "],"nodes":[{"content":"The default designer does not support the ShowWindow activity; as such, the ShowWindow.Xaml file does not display correctly in the designer.","pos":[9,149]}]},{"pos":[3980,3998],"content":"To use this sample","linkify":"To use this sample","nodes":[{"content":"To use this sample","pos":[0,18]}]},{"content":"Using Visual Studio 2010, open the WPFWFIntegration.sln solution file.","pos":[4004,4074]},{"content":"To build the solution, press CTRL+SHIFT+B.","pos":[4080,4122]},{"content":"To run the solution, press F5.","pos":[4128,4158]},{"content":"Type your first and last name into the dialog.","pos":[4164,4210]},{"content":"Close the dialog and the console echoes your name.","pos":[4216,4266]},{"pos":[4270,4402],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[14,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[0,53]},{"content":"Check for the following (default) directory before continuing.","pos":[54,116]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id=\"ph1\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[4456,4766],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[4767,4817]}]}