<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc78b8ffffc4f40629f213921fab6145751a7c57</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\how-to\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e9b53b2c98a0dd68204aba9dbc7790949d731b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34c7fd332dd4bcf8c0928fa555a8839c2547e11d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to articles (C# Guide)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>A collection of quick tips and short, focused code samples</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to (C#)</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the How to section of the C# Guide you can find quick answers to common questions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In some cases, articles may be listed in multiple sections.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>We wanted to make them easy to find for multiple search paths.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>General C# concepts</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are several tips and tricks that are common C# developer practices.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Initialize objects using an object initializer<ept id="p1">](../programming-guide/classes-and-structs/how-to-initialize-objects-by-using-an-object-initializer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Learn the differences between passing a struct and a class to a method<ept id="p1">](../programming-guide/classes-and-structs/how-to-know-the-difference-passing-a-struct-and-passing-a-class-to-a-method.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to use lambda expressions<ept id="p1">](../programming-guide/statements-expressions-operators/how-to-use-lambda-expressions-outside-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resolve type name conflicts by using the global namespace alias<ept id="p1">](../programming-guide/namespaces/how-to-use-the-global-namespace-alias.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use operator overloading<ept id="p1">](../language-reference/keywords/operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implement and call a custom extension method<ept id="p1">](../programming-guide/classes-and-structs/how-to-implement-and-call-a-custom-extension-method.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Even C# programmers may want to <bpt id="p1">[</bpt>use the <ph id="ph1">`My`</ph> namespace from VB<ept id="p1">](../programming-guide/namespaces/how-to-use-the-my-namespace.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a new method for an <ph id="ph1">`enum`</ph> type using extension methods<ept id="p1">](../programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Class and struct members</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You create classes and structs to implement your program.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These techniques are commonly used when writing classes or structs.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declare auto implemented properties<ept id="p1">](../programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declare and use read/write properties<ept id="p1">](../programming-guide/classes-and-structs/how-to-declare-and-use-read-write-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Define constants<ept id="p1">](../programming-guide/classes-and-structs/how-to-define-constants.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Override the <ph id="ph1">`ToString`</ph> method to provide string output<ept id="p1">](../programming-guide/classes-and-structs/how-to-override-the-tostring-method.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Define abstract properties<ept id="p1">](../programming-guide/classes-and-structs/how-to-define-abstract-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use the xml documentation features to document your code<ept id="p1">](../programming-guide/xmldoc/how-to-use-the-xml-documentation-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Explicitly implement interface members<ept id="p1">](../programming-guide/interfaces/how-to-explicitly-implement-interface-members.md)</ept> to keep your public interface concise.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Explicitly implement members of two interfaces<ept id="p1">](../programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Working with collections</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These articles help you work with collections of data.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Initialize a dictionary with a collection initializer<ept id="p1">](../programming-guide/classes-and-structs/how-to-initialize-a-dictionary-with-a-collection-initializer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Working with strings</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Strings are the fundamental data type used to display or manipulate text.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>These articles demonstrate common practices with strings.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Compare strings<ept id="p1">](compare-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Modify the contents of a string<ept id="p1">](modify-string-contents.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Determine if a string represents a number<ept id="p1">](../programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use <ph id="ph1">`String.Split`</ph> to separate strings<ept id="p1">](parse-strings-using-split.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Combine multiple strings into one<ept id="p1">](concatenate-multiple-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Search for text in a string<ept id="p1">](search-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Convert between types</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You may need to convert an object to a different type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Determine if a string represents a number<ept id="p1">](../programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Convert between strings that represent hexadecimal numbers and the number<ept id="p1">](../programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Convert a string to a <ph id="ph1">`DateTime`</ph><ept id="p1">](../../standard/base-types/parsing-datetime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Convert a byte array to an int<ept id="p1">](../programming-guide/types/how-to-convert-a-byte-array-to-an-int.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Convert a string to a number<ept id="p1">](../programming-guide/types/how-to-convert-a-string-to-a-number.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use pattern matching, the <ph id="ph1">`as`</ph> and <ph id="ph2">`is`</ph> operators to safely cast to a different type<ept id="p1">](../how-to/safely-cast-using-pattern-matching-is-and-as-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Define conversion operators for <ph id="ph1">`struct`</ph> types<ept id="p1">](../programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Determine if a type is a nullable value type<ept id="p1">](../programming-guide/nullable-types/how-to-identify-a-nullable-type.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Convert between nullable and non-nullable value types<ept id="p1">](../programming-guide/nullable-types/using-nullable-types.md#conversion-from-a-nullable-type-to-an-underlying-type)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Equality and ordering comparisons</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You may create types that define their own rules for equality or define a natural ordering among objects of that type.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Test for reference-based equality<ept id="p1">](../programming-guide/statements-expressions-operators/how-to-test-for-reference-equality-identity.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Define value-based equality for a type<ept id="p1">](../programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Exception handling</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>.NET programs report that methods did not successfully complete their work by throwing exceptions.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In these articles you'll learn to work with exceptions.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Handle exceptions using <ph id="ph1">`try`</ph> and <ph id="ph2">`catch`</ph><ept id="p1">](../programming-guide/exceptions/how-to-handle-an-exception-using-try-catch.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cleanup resources using <ph id="ph1">`finally`</ph> clauses<ept id="p1">](../programming-guide/exceptions/how-to-execute-cleanup-code-using-finally.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Recover from non-CLS (Common Language Specification) exceptions<ept id="p1">](../programming-guide/exceptions/how-to-catch-a-non-cls-exception.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Delegates and events</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Delegates and events provide a capability for strategies that involve loosely coupled blocks of code.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declare, instantiate, and use delegates<ept id="p1">](../programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Combine multicast delegates<ept id="p1">](../programming-guide/delegates/how-to-combine-delegates-multicast-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Events provide a mechanism to publish or subscribe to notifications.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Subscribe and unsubscribe from events<ept id="p1">](../programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implement events declared in interfaces<ept id="p1">](../programming-guide/events/how-to-implement-interface-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conform to .NET Framework guidelines when your code publishes events<ept id="p1">](../programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Raise events defined in base classes from derived classes<ept id="p1">](../programming-guide/events/how-to-raise-base-class-events-in-derived-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Store event instances in a dictionary<ept id="p1">](../programming-guide/events/how-to-use-a-dictionary-to-store-event-instances.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implement custom event accessors<ept id="p1">](../programming-guide/events/how-to-implement-custom-event-accessors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>LINQ practices</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>LINQ enables you to write code to query any data source that supports the LINQ query expression pattern.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These articles help you understand the pattern and work with different data sources.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query a collection<ept id="p1">](../programming-guide/concepts/linq/how-to-query-an-arraylist-with-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use lambda expressions in a query<ept id="p1">](../programming-guide/statements-expressions-operators/how-to-use-lambda-expressions-in-a-query.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use <ph id="ph1">`var`</ph> in query expressions<ept id="p1">](../programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Return subsets of element properties from a query<ept id="p1">](../programming-guide/classes-and-structs/how-to-return-subsets-of-element-properties-in-a-query.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Write queries with complex filtering<ept id="p1">](../programming-guide/concepts/linq/how-to-write-queries-with-complex-filtering.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sort elements of a data source<ept id="p1">](../programming-guide/concepts/linq/how-to-sort-elements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sort elements on multiple keys<ept id="p1">](../programming-guide/concepts/linq/how-to-sort-elements-on-multiple-keys.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Control the type of a projection<ept id="p1">](../programming-guide/concepts/linq/how-to-control-the-type-of-a-projection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Count occurrences of a value in a source sequence<ept id="p1">](../programming-guide/concepts/linq/how-to-count-occurrences-of-a-word-in-a-string-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Calculate intermediate values<ept id="p1">](../programming-guide/concepts/linq/how-to-calculate-intermediate-values.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Merge data from multiple sources<ept id="p1">](../programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Find the set difference between two sequences<ept id="p1">](../programming-guide/concepts/linq/how-to-find-the-set-difference-between-two-lists-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debug empty query results<ept id="p1">](../programming-guide/concepts/linq/how-to-debug-empty-query-results-sets.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Add custom methods to LINQ queries<ept id="p1">](../programming-guide/concepts/linq/how-to-add-custom-methods-for-linq-queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Multiple threads and async processing</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Modern programs often use asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>These articles will help you learn to use these techniques.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Improve async performance using <ph id="ph1">`System.Threading.Tasks.Task.WhenAll`</ph><ept id="p1">](../programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Make multiple web requests in parallel using <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph><ept id="p1">](../programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use a thread pool<ept id="p1">](../../standard/threading/the-managed-thread-pool.md#using-the-thread-pool)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Command line args to your program</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Typically, C# programs have command line arguments.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>These articles teach you to access and process those command line arguments.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieve all command line arguments with <ph id="ph1">`for`</ph><ept id="p1">](../programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieve all command line arguments with <ph id="ph1">`foreach`</ph><ept id="p1">](../programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>