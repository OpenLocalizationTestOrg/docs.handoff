<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56f39e82e9295a9c1d9f862e3486373590a32e7f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6402f080b236b9f2d161cd1be7d439ca8f2001e4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">562a4c03cd8038494363f33769d2d9d402a664a9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Procedures in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Procedures in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>procedure<ept id="p1">*</ept> is a block of <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> statements enclosed by a declaration statement (<ph id="ph2">`Function`</ph>, <ph id="ph3">`Sub`</ph>, <ph id="ph4">`Operator`</ph>, <ph id="ph5">`Get`</ph>, <ph id="ph6">`Set`</ph>) and a matching <ph id="ph7">`End`</ph> declaration.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All executable statements in <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> must be within some procedure.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Calling a Procedure</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You invoke a procedure from some other place in the code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This is known as a <bpt id="p1">*</bpt>procedure call<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When the procedure is finished running, it returns control to the code that invoked it, which is known as the <bpt id="p1">*</bpt>calling code<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The calling code is a statement, or an expression within a statement, that specifies the procedure by name and transfers control to it.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Returning from a Procedure</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A procedure returns control to the calling code when it has finished running.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To do this, it can use a <bpt id="p1">[</bpt>Return Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/return-statement.md)</ept>, the appropriate <bpt id="p2">[</bpt>Exit Statement<ept id="p2">](../../../../visual-basic/language-reference/statements/exit-statement.md)</ept> statement for the procedure, or the procedure's <bpt id="p3">[</bpt>End <ph id="ph1">\&lt;</ph>keyword&gt; Statement<ept id="p3">](../../../../visual-basic/language-reference/statements/end-keyword-statement.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Control then passes to the calling code following the point of the procedure call.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>With a <ph id="ph1">`Return`</ph> statement, control returns immediately to the calling code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Statements following the <ph id="ph1">`Return`</ph> statement do not run.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can have more than one <ph id="ph1">`Return`</ph> statement in the same procedure.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>With an <ph id="ph1">`Exit Sub`</ph> or <ph id="ph2">`Exit Function`</ph> statement, control returns immediately to the calling code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Statements following the <ph id="ph1">`Exit`</ph> statement do not run.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can have more than one <ph id="ph1">`Exit`</ph> statement in the same procedure, and you can mix <ph id="ph2">`Return`</ph> and <ph id="ph3">`Exit`</ph> statements in the same procedure.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If a procedure has no <ph id="ph1">`Return`</ph> or <ph id="ph2">`Exit`</ph> statements, it concludes with an <ph id="ph3">`End Sub`</ph> or <ph id="ph4">`End Function`</ph>, <ph id="ph5">`End Get`</ph>, or <ph id="ph6">`End Set`</ph> statement following the last statement of the procedure body.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`End`</ph> statement returns control immediately to the calling code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can have only one <ph id="ph1">`End`</ph> statement in a procedure.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Parameters and Arguments</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In most cases, a procedure needs to operate on different data each time you call it.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can pass this information to the procedure as part of the procedure call.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The procedure defines zero or more <bpt id="p1">*</bpt>parameters<ept id="p1">*</ept>, each of which represents a value it expects you to pass to it.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Corresponding to each parameter in the procedure definition is an <bpt id="p1">*</bpt>argument<ept id="p1">*</ept> in the procedure call.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An argument represents the value you pass to the corresponding parameter in a given procedure call.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Types of Procedures</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> uses several types of procedures:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept> perform actions but do not return a value to the calling code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Event-handling procedures are <ph id="ph1">`Sub`</ph> procedures that execute in response to an event raised by user action or by an occurrence in a program.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Function Procedures<ept id="p1">](./function-procedures.md)</ept> return a value to the calling code.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>They can perform other actions before returning.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Some functions written in C# return a <bpt id="p1">*</bpt>reference return value<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Function callers can modify the return value, and this modification is reflected in the state of the called object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Starting with Visual Basic 2017, Visual Basic code can consume reference return values, although it cannot return a value by reference.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Reference return values<ept id="p1">](ref-return-values.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept> return and assign values of properties on objects or modules.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept> define the behavior of a standard operator when one or both of the operands is a newly-defined class or structure.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Procedures in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)</ept> define one or more <bpt id="p2">*</bpt>type parameters<ept id="p2">*</ept> in addition to their normal parameters, so the calling code can pass specific data types each time it makes a call.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Procedures and Structured Code</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Every line of executable code in your application must be inside some procedure, such as <ph id="ph1">`Main`</ph>, <ph id="ph2">`calculate`</ph>, or <ph id="ph3">`Button1_Click`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you subdivide large procedures into smaller ones, your application is more readable.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Procedures are useful for performing repeated or shared tasks, such as frequently used calculations, text and control manipulation, and database operations.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can call a procedure from many different places in your code, so you can use procedures as building blocks for your application.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Structuring your code with procedures gives you the following benefits:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Procedures allow you to break your programs into discrete logical units.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can debug separate units more easily than you can debug an entire program without procedures.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>After you develop procedures for use in one program, you can use them in other programs, often with little or no modification.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This helps you avoid code duplication.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Procedure<ept id="p1">](./how-to-create-a-procedure.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Procedures<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Recursive Procedures<ept id="p1">](./recursive-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Overloading<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Generic Procedures in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Objects and Classes<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>