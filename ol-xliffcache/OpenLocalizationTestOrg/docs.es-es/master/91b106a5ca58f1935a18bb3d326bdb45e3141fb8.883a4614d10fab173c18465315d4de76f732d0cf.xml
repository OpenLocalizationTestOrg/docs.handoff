{"content":"---\ntitle: \"ISymUnmanagedWriter::GetDebugInfo Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ISymUnmanagedWriter.GetDebugInfo\"\napi_location: \n  - \"diasymreader.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ISymUnmanagedWriter::GetDebugInfo\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ISymUnmanagedWriter::GetDebugInfo method [.NET Framework debugging]\"\n  - \"GetDebugInfo method [.NET Framework debugging]\"\nms.assetid: dd31c210-6829-45eb-927e-cc53932638b7\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 7\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ISymUnmanagedWriter::GetDebugInfo Method\nReturns the information necessary for a compiler to write the debug directory entry in the portable executable (PE) file header. The symbol writer fills out all fields except for `TimeDateStamp` and `PointerToRawData`. (The compiler is responsible for setting these two fields appropriately.)  \n  \n A compiler should call this method, emit the data blob to the PE file, set the `PointerToRawData` field in the IMAGE_DEBUG_DIRECTORY to point to the emitted data, and write the IMAGE_DEBUG_DIRECTORY to the PE file. The compiler should also set the `TimeDateStamp` field to equal the `TimeDateStamp` of the PE file being generated.  \n  \n## Syntax  \n  \n```  \nHRESULT GetDebugInfo(  \n    [in, out] IMAGE_DEBUG_DIRECTORY *pIDD,  \n    [in]  DWORD cData,  \n    [out] DWORD *pcData,  \n    [out, size_is(cData),  \n        length_is(*pcData)] BYTE data[]);  \n```  \n  \n#### Parameters  \n `pIDD`  \n [in, out] A pointer to an IMAGE_DEBUG_DIRECTORY that the symbol writer will fill out.  \n  \n `cData`  \n [in] A `DWORD` that contains the size of the debug data.  \n  \n `pcData`  \n [out] A pointer to a `DWORD` that receives the size of the buffer required to contain the debug data.  \n  \n `data`  \n [out] A pointer to a buffer that is large enough to hold the debug data for the symbol store.  \n  \n## Return Value  \n S_OK if the method succeeds; otherwise, E_FAIL or some other error code.  \n  \n## Requirements  \n **Header:** CorSym.idl, CorSym.h  \n  \n## See Also  \n [ISymUnmanagedWriter Interface](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)","nodes":[{"pos":[12,69],"content":"ISymUnmanagedWriter::GetDebugInfo Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ISymUnmanagedWriter::GetDebugInfo Method | Microsoft Docs","pos":[0,57]}]},{"pos":[731,771],"content":"ISymUnmanagedWriter::GetDebugInfo Method","linkify":"ISymUnmanagedWriter::GetDebugInfo Method","nodes":[{"content":"ISymUnmanagedWriter::GetDebugInfo Method","pos":[0,40]}]},{"content":"Returns the information necessary for a compiler to write the debug directory entry in the portable executable (PE) file header.","pos":[772,900]},{"content":"The symbol writer fills out all fields except for <ph id=\"ph1\">`TimeDateStamp`</ph> and <ph id=\"ph2\">`PointerToRawData`</ph>.","pos":[901,990],"source":" The symbol writer fills out all fields except for `TimeDateStamp` and `PointerToRawData`."},{"content":"(The compiler is responsible for setting these two fields appropriately.)","pos":[991,1064]},{"content":"A compiler should call this method, emit the data blob to the PE file, set the <ph id=\"ph1\">`PointerToRawData`</ph> field in the IMAGE_DEBUG_DIRECTORY to point to the emitted data, and write the IMAGE_DEBUG_DIRECTORY to the PE file.","pos":[1071,1285],"source":"A compiler should call this method, emit the data blob to the PE file, set the `PointerToRawData` field in the IMAGE_DEBUG_DIRECTORY to point to the emitted data, and write the IMAGE_DEBUG_DIRECTORY to the PE file."},{"content":"The compiler should also set the <ph id=\"ph1\">`TimeDateStamp`</ph> field to equal the <ph id=\"ph2\">`TimeDateStamp`</ph> of the PE file being generated.","pos":[1286,1401],"source":" The compiler should also set the `TimeDateStamp` field to equal the `TimeDateStamp` of the PE file being generated."},{"pos":[1410,1416],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1635,1645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in, out] A pointer to an IMAGE_DEBUG_DIRECTORY that the symbol writer will fill out.","pos":[1659,1744]},{"content":"[in] A <ph id=\"ph1\">`DWORD`</ph> that contains the size of the debug data.","pos":[1762,1818],"source":" [in] A `DWORD` that contains the size of the debug data."},{"content":"[out] A pointer to a <ph id=\"ph1\">`DWORD`</ph> that receives the size of the buffer required to contain the debug data.","pos":[1837,1938],"source":" [out] A pointer to a `DWORD` that receives the size of the buffer required to contain the debug data."},{"content":"[out] A pointer to a buffer that is large enough to hold the debug data for the symbol store.","pos":[1955,2048]},{"pos":[2057,2069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if the method succeeds; otherwise, E_FAIL or some other error code.","pos":[2073,2145]},{"pos":[2154,2166],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2170,2202],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorSym.idl, CorSym.h","source":"**Header:** CorSym.idl, CorSym.h"},{"pos":[2211,2219],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2223,2341],"content":"<bpt id=\"p1\">[</bpt>ISymUnmanagedWriter Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)</ept>","source":"[ISymUnmanagedWriter Interface](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)"}]}