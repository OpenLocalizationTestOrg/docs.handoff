<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-call-wcf-service-operations-asynchronously.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a7bd1d67d9730c75e3f3f3b1eeb59f5d2d3c49a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\how-to-call-wcf-service-operations-asynchronously.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76e24f92011fb48c193fc5253ce2ef85bfe2d3ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e03fd1f01f909ddb327c18294778eff93022a8c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Call WCF Service Operations Asynchronously</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Call WCF Service Operations Asynchronously</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic covers how a client can access a service operation asynchronously.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The service in this topic implements the <ph id="ph1">`ICalculator`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The client can call the operations on this interface asynchronously by using the event-driven asynchronous calling model.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>(For more information about the event-based asynchronous calling model, see <bpt id="p1">[</bpt>Multithreaded Programming with the Event-based Asynchronous Pattern<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=248184)</ept>).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For an example that shows how to implement an operation asynchronously in a service, see <bpt id="p1">[</bpt>How to: Implement an Asynchronous Service Operation<ept id="p1">](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about synchronous and asynchronous operations, see <bpt id="p1">[</bpt>Synchronous and Asynchronous Operations<ept id="p1">](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The event-driven asynchronous calling model is not supported when using a <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For information about making asynchronous calls using the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>, see <bpt id="p1">[</bpt>How to: Call Operations Asynchronously Using a Channel Factory<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-call-operations-asynchronously-using-a-channel-factory.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Procedure</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To call WCF service operations asynchronously</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> tool with both the <ph id="ph1">`/async`</ph> and the <ph id="ph2">`/tcv:Version35`</ph> command options together as shown in the following command.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This generates, in addition to the synchronous and standard delegate-based asynchronous operations, a WCF client class that contains:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Two &lt;<ph id="ph1">`operationName`</ph><ph id="ph2">&gt;</ph><ph id="ph3">`Async`</ph> operations for use with the event-based asynchronous calling approach.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Operation completed events of the form &lt;<ph id="ph1">`operationName`</ph><ph id="ph2">&gt;</ph><ph id="ph3">`Completed`</ph> for use with the event-based asynchronous calling approach.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.EventArgs?displayProperty=nameWithType&gt;</ph> types for each operation (of the form &lt;<ph id="ph2">`operationName`</ph><ph id="ph3">&gt;</ph><ph id="ph4">`CompletedEventArgs`</ph>) for use with the event-based asynchronous calling approach.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the calling application, create a callback method to be called when the asynchronous operation is complete, as shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Prior to calling the operation, use a new generic <ph id="ph1">&lt;xref:System.EventHandler%601?displayProperty=nameWithType&gt;</ph> of type &lt;<ph id="ph2">`operationName`</ph><ph id="ph3">&gt;</ph><ph id="ph4">`EventArgs`</ph> to add the handler method (created in the preceding step) to the &lt;<ph id="ph5">`operationName`</ph><ph id="ph6">&gt;</ph><ph id="ph7">`Completed`</ph> event.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Then call the &lt;<ph id="ph1">`operationName`</ph><ph id="ph2">&gt;</ph><ph id="ph3">`Async`</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The design guidelines for the event-based asynchronous model state that if more than one value is returned, one value is returned as the <ph id="ph1">`Result`</ph> property and the others are returned as properties on the <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>One result of this is that if a client imports metadata using the event-based asynchronous command options and the operation returns more than one value, the default <ph id="ph1">&lt;xref:System.EventArgs&gt;</ph> object returns one value as the <ph id="ph2">`Result`</ph> property and the remainder are properties of the <ph id="ph3">&lt;xref:System.EventArgs&gt;</ph> object.If you want to receive the message object as the <ph id="ph4">`Result`</ph> property and have the returned values as properties on that object, use the <ph id="ph5">`/messageContract`</ph> command option.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This generates a signature that returns the response message as the <ph id="ph1">`Result`</ph> property on the <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>All internal return values are then properties of the response message object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement an Asynchronous Service Operation<ept id="p1">](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>