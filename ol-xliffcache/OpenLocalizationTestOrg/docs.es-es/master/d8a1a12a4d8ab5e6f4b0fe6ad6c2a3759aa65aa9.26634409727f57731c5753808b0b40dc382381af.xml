{"content":"---\ntitle: \"Annotating Typed DataSets\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: f82aaa62-321e-4c8a-b51b-9d1114700170\n---\n# Annotating Typed DataSets\nAnnotations enable you to modify the names of the elements in your typed <xref:System.Data.DataSet> without modifying the underlying schema. Modifying the names of the elements in your underlying schema would cause the typed **DataSet** to refer to objects that do not exist in the data source, as well as lose a reference to the objects that do exist in the data source.  \n  \n Using annotations, you can customize the names of objects in your typed **DataSet** with more meaningful names, making code more readable and your typed **DataSet** easier for clients to use, while leaving underlying schema intact. For example, the following schema element for the **Customers** table of the **Northwind** database would result in a **DataRow** object name of **CustomersRow** and a <xref:System.Data.DataRowCollection> named **Customers**.  \n  \n```xml  \n<xs:element name=\"Customers\">  \n  <xs:complexType>  \n    <xs:sequence>  \n      <xs:element name=\"CustomerID\" type=\"xs:string\" minOccurs=\"0\" />  \n    </xs:sequence>  \n  </xs:complexType>  \n</xs:element>  \n```  \n  \n A **DataRowCollection** name of **Customers** is meaningful in client code, but a **DataRow** name of **CustomersRow** is misleading because it is a single object. Also, in common scenarios, the object would be referred to without the **Row** identifier and instead would be simply referred to as a **Customer** object. The solution is to annotate the schema and identify new names for the **DataRow** and **DataRowCollection** objects. Following is the annotated version of the previous schema.  \n  \n```xml  \n<xs:element name=\"Customers\" codegen:typedName=\"Customer\" codegen:typedPlural=\"Customers\">  \n  <xs:complexType>  \n    <xs:sequence>  \n      <xs:element name=\"CustomerID\" type=\"xs:string\" minOccurs=\"0\" />  \n    </xs:sequence>  \n  </xs:complexType>  \n</xs:element>  \n```  \n  \n Specifying a **typedName** value of **Customer** will result in a **DataRow** object name of **Customer**. Specifying a **typedPlural** value of **Customers** preserves the **DataRowCollection** name of **Customers**.  \n  \n The following table shows the annotations available for use.  \n  \n|Annotation|Description|  \n|----------------|-----------------|  \n|**typedName**|Name of the object.|  \n|**typedPlural**|Name of a collection of objects.|  \n|**typedParent**|Name of the object when referred to in a parent relationship.|  \n|**typedChildren**|Name of the method to return objects from a child relationship.|  \n|**nullValue**|Value if the underlying value is **DBNull**. See the following table for **nullValue** annotations. The default is **_throw**.|  \n  \n The following table shows the values that can be specified for the **nullValue** annotation.  \n  \n|nullValue Value|Description|  \n|---------------------|-----------------|  \n|*Replacement Value*|Specify a value to be returned. The returned value must match the type of the element. For example, use `nullValue=\"0\"` to return 0 for null integer fields.|  \n|**_throw**|Throw an exception. This is the default.|  \n|**_null**|Return a null reference or throw an exception if a primitive type is encountered.|  \n|**_empty**|For strings, return **String.Empty**, otherwise return an object created from an empty constructor. If a primitive type is encountered, throw an exception.|  \n  \n The following table shows default values for objects in a typed **DataSet** and the available annotations.  \n  \n|Object/Method/Event|Default|Annotation|  \n|---------------------------|-------------|----------------|  \n|**DataTable**|TableNameDataTable|typedPlural|  \n|**DataTable** Methods|NewTableNameRow<br /><br /> AddTableNameRow<br /><br /> DeleteTableNameRow|typedName|  \n|**DataRowCollection**|TableName|typedPlural|  \n|**DataRow**|TableNameRow|typedName|  \n|**DataColumn**|DataTable.ColumnNameColumn<br /><br /> DataRow.ColumnName|typedName|  \n|**Property**|PropertyName|typedName|  \n|**Child** Accessor|GetChildTableNameRows|typedChildren|  \n|**Parent** Accessor|TableNameRow|typedParent|  \n|**DataSet** Events|TableNameRowChangeEvent<br /><br /> TableNameRowChangeEventHandler|typedName|  \n  \n To use typed **DataSet** annotations, you must include the following **xmlns** reference in your XML Schema definition language (XSD) schema. To create an xsd from database tables, see <xref:System.Data.DataSet.WriteXmlSchema%2A> or [Working with Datasets in Visual Studio](/visualstudio/data-tools/dataset-tools-in-visual-studio).  \n  \n```  \nxmlns:codegen=\"urn:schemas-microsoft-com:xml-msprop\"  \n```  \n  \n The following is a sample annotated schema that exposes the **Customers** table of the **Northwind** database with a relation to the **Orders** table included.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<xs:schema id=\"CustomerDataSet\"   \n      xmlns:codegen=\"urn:schemas-microsoft-com:xml-msprop\"  \n      xmlns=\"\"   \n      xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"   \n      xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n  <xs:element name=\"CustomerDataSet\" msdata:IsDataSet=\"true\">  \n    <xs:complexType>  \n      <xs:choice maxOccurs=\"unbounded\">  \n        <xs:element name=\"Customers\" codegen:typedName=\"Customer\" codegen:typedPlural=\"Customers\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"CustomerID\"  \ncodegen:typedName=\"CustomerID\" type=\"xs:string\" minOccurs=\"0\" />  \n              <xs:element name=\"CompanyName\"  \ncodegen:typedName=\"CompanyName\" type=\"xs:string\" minOccurs=\"0\" />  \n              <xs:element name=\"Phone\" codegen:typedName=\"Phone\" codegen:nullValue=\"\" type=\"xs:string\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n        <xs:element name=\"Orders\" codegen:typedName=\"Order\" codegen:typedPlural=\"Orders\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"OrderID\" codegen:typedName=\"OrderID\"  \ntype=\"xs:int\" minOccurs=\"0\" />  \n              <xs:element name=\"CustomerID\"  \ncodegen:typedName=\"CustomerID\"                  codegen:nullValue=\"\" type=\"xs:string\" minOccurs=\"0\" />  \n              <xs:element name=\"EmployeeID\"  \ncodegen:typedName=\"EmployeeID\" codegen:nullValue=\"0\"   \ntype=\"xs:int\" minOccurs=\"0\" />  \n              <xs:element name=\"OrderAdapter\"  \ncodegen:typedName=\"OrderAdapter\" codegen:nullValue=\"1980-01-01T00:00:00\"   \ntype=\"xs:dateTime\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:choice>  \n    </xs:complexType>  \n    <xs:unique name=\"Constraint1\">  \n      <xs:selector xpath=\".//Customers\" />  \n      <xs:field xpath=\"CustomerID\" />  \n    </xs:unique>  \n    <xs:keyref name=\"CustOrders\" refer=\"Constraint1\"  \ncodegen:typedParent=\"Customer\" codegen:typedChildren=\"GetOrders\">  \n      <xs:selector xpath=\".//Orders\" />  \n      <xs:field xpath=\"CustomerID\" />  \n    </xs:keyref>  \n  </xs:element>  \n</xs:schema>  \n```  \n  \n The following code example uses a strongly typed **DataSet** created from the sample schema. It uses one <xref:System.Data.SqlClient.SqlDataAdapter> to populate the **Customers** table and another <xref:System.Data.SqlClient.SqlDataAdapter> to populate the **Orders** table. The strongly typed **DataSet** defines the **DataRelations**.  \n  \n```vb  \n' Assumes a valid SqlConnection object named connection.  \nDim customerAdapter As SqlDataAdapter = New SqlDataAdapter( _  \n    \"SELECT CustomerID, CompanyName, Phone FROM Customers\", &  \n    connection)  \nDim orderAdapter As SqlDataAdapter = New SqlDataAdapter( _  \n    \"SELECT OrderID, CustomerID, EmployeeID, OrderAdapter FROM Orders\", &  \n    connection)  \n  \n' Populate a strongly typed DataSet.  \nconnection.Open()  \nDim customers As CustomerDataSet = New CustomerDataSet()  \ncustomerAdapter.Fill(customers, \"Customers\")  \norderAdapter.Fill(customers, \"Orders\")  \nconnection.Close()  \n  \n' Add a strongly typed event.  \nAddHandler customers.Customers.CustomerChanged, &  \n    New CustomerDataSet.CustomerChangeEventHandler( _  \n    AddressOf OnCustomerChanged)  \n  \n' Add a strongly typed DataRow.  \nDim newCustomer As CustomerDataSet.Customer = _  \n    customers.Customers.NewCustomer()  \nnewCustomer.CustomerID = \"NEW01\"  \nnewCustomer.CompanyName = \"My New Company\"  \ncustomers.Customers.AddCustomer(newCustomer)  \n  \n' Navigate the child relation.  \nDim customer As CustomerDataSet.Customer  \nDim order As CustomerDataSet.Order  \n  \nFor Each customer In customers.Customers  \n  Console.WriteLine(customer.CustomerID)  \n  For Each order In customer.GetOrders()  \n    Console.WriteLine(vbTab & order.OrderID)  \n  Next  \nNext  \n  \nPrivate Shared Sub OnCustomerChanged( _  \n    sender As Object, e As CustomerDataSet.CustomerChangeEvent)  \n  \nEnd Sub  \n```  \n  \n```csharp  \n// Assumes a valid SqlConnection object named connection.  \nSqlDataAdapter customerAdapter = new SqlDataAdapter(  \n    \"SELECT CustomerID, CompanyName, Phone FROM Customers\",  \n    connection);  \nSqlDataAdapter orderAdapter = new SqlDataAdapter(  \n    \"SELECT OrderID, CustomerID, EmployeeID, OrderAdapter FROM Orders\",   \n    connection);  \n  \n// Populate a strongly typed DataSet.  \nconnection.Open();  \nCustomerDataSet customers = new CustomerDataSet();  \ncustomerAdapter.Fill(customers, \"Customers\");  \norderAdapter.Fill(customers, \"Orders\");  \nconnection.Close();  \n  \n// Add a strongly typed event.  \ncustomers.Customers.CustomerChanged += new   \n  CustomerDataSet.CustomerChangeEventHandler(OnCustomerChanged);  \n  \n// Add a strongly typed DataRow.  \nCustomerDataSet.Customer newCustomer =   \n    customers.Customers.NewCustomer();  \nnewCustomer.CustomerID = \"NEW01\";  \nnewCustomer.CompanyName = \"My New Company\";  \ncustomers.Customers.AddCustomer(newCustomer);  \n  \n// Navigate the child relation.  \nforeach(CustomerDataSet.Customer customer in customers.Customers)  \n{  \n  Console.WriteLine(customer.CustomerID);  \n  foreach(CustomerDataSet.Order order in customer.GetOrders())  \n    Console.WriteLine(\"\\t\" + order.OrderID);  \n}  \n  \nprotected static void OnCustomerChanged(object sender, CustomerDataSet.CustomerChangeEvent e)  \n    {  \n  \n    }  \n```  \n  \n## See also\n\n- <xref:System.Data.DataColumnCollection>\n- <xref:System.Data.DataSet>\n- [Typed DataSets](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/typed-datasets.md)\n- [DataSets, DataTables, and DataViews](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,143],"embed":true,"restype":"x-metadata","content":"title: \"Annotating Typed DataSets\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: f82aaa62-321e-4c8a-b51b-9d1114700170","nodes":[{"content":"Annotating Typed DataSets","nodes":[{"pos":[0,25],"content":"Annotating Typed DataSets","nodes":[{"content":"Annotating Typed DataSets","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[150,175],"content":"Annotating Typed DataSets","linkify":"Annotating Typed DataSets","nodes":[{"content":"Annotating Typed DataSets","pos":[0,25]}]},{"content":"Annotations enable you to modify the names of the elements in your typed <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> without modifying the underlying schema.","pos":[176,316],"source":"Annotations enable you to modify the names of the elements in your typed <xref:System.Data.DataSet> without modifying the underlying schema."},{"content":"Modifying the names of the elements in your underlying schema would cause the typed <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> to refer to objects that do not exist in the data source, as well as lose a reference to the objects that do exist in the data source.","pos":[317,547],"source":" Modifying the names of the elements in your underlying schema would cause the typed **DataSet** to refer to objects that do not exist in the data source, as well as lose a reference to the objects that do exist in the data source."},{"content":"Using annotations, you can customize the names of objects in your typed <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> with more meaningful names, making code more readable and your typed <bpt id=\"p2\">**</bpt>DataSet<ept id=\"p2\">**</ept> easier for clients to use, while leaving underlying schema intact.","pos":[554,785],"source":"Using annotations, you can customize the names of objects in your typed **DataSet** with more meaningful names, making code more readable and your typed **DataSet** easier for clients to use, while leaving underlying schema intact."},{"content":"For example, the following schema element for the <bpt id=\"p1\">**</bpt>Customers<ept id=\"p1\">**</ept> table of the <bpt id=\"p2\">**</bpt>Northwind<ept id=\"p2\">**</ept> database would result in a <bpt id=\"p3\">**</bpt>DataRow<ept id=\"p3\">**</ept> object name of <bpt id=\"p4\">**</bpt>CustomersRow<ept id=\"p4\">**</ept> and a <ph id=\"ph1\">&lt;xref:System.Data.DataRowCollection&gt;</ph> named <bpt id=\"p5\">**</bpt>Customers<ept id=\"p5\">**</ept>.","pos":[786,1011],"source":" For example, the following schema element for the **Customers** table of the **Northwind** database would result in a **DataRow** object name of **CustomersRow** and a <xref:System.Data.DataRowCollection> named **Customers**."},{"content":"A <bpt id=\"p1\">**</bpt>DataRowCollection<ept id=\"p1\">**</ept> name of <bpt id=\"p2\">**</bpt>Customers<ept id=\"p2\">**</ept> is meaningful in client code, but a <bpt id=\"p3\">**</bpt>DataRow<ept id=\"p3\">**</ept> name of <bpt id=\"p4\">**</bpt>CustomersRow<ept id=\"p4\">**</ept> is misleading because it is a single object.","pos":[1240,1403],"source":"A **DataRowCollection** name of **Customers** is meaningful in client code, but a **DataRow** name of **CustomersRow** is misleading because it is a single object."},{"content":"Also, in common scenarios, the object would be referred to without the <bpt id=\"p1\">**</bpt>Row<ept id=\"p1\">**</ept> identifier and instead would be simply referred to as a <bpt id=\"p2\">**</bpt>Customer<ept id=\"p2\">**</ept> object.","pos":[1404,1559],"source":" Also, in common scenarios, the object would be referred to without the **Row** identifier and instead would be simply referred to as a **Customer** object."},{"content":"The solution is to annotate the schema and identify new names for the <bpt id=\"p1\">**</bpt>DataRow<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>DataRowCollection<ept id=\"p2\">**</ept> objects.","pos":[1560,1676],"source":" The solution is to annotate the schema and identify new names for the **DataRow** and **DataRowCollection** objects."},{"content":"Following is the annotated version of the previous schema.","pos":[1677,1735]},{"content":"Specifying a <bpt id=\"p1\">**</bpt>typedName<ept id=\"p1\">**</ept> value of <bpt id=\"p2\">**</bpt>Customer<ept id=\"p2\">**</ept> will result in a <bpt id=\"p3\">**</bpt>DataRow<ept id=\"p3\">**</ept> object name of <bpt id=\"p4\">**</bpt>Customer<ept id=\"p4\">**</ept>.","pos":[2025,2131],"source":"Specifying a **typedName** value of **Customer** will result in a **DataRow** object name of **Customer**."},{"content":"Specifying a <bpt id=\"p1\">**</bpt>typedPlural<ept id=\"p1\">**</ept> value of <bpt id=\"p2\">**</bpt>Customers<ept id=\"p2\">**</ept> preserves the <bpt id=\"p3\">**</bpt>DataRowCollection<ept id=\"p3\">**</ept> name of <bpt id=\"p4\">**</bpt>Customers<ept id=\"p4\">**</ept>.","pos":[2132,2242],"source":" Specifying a **typedPlural** value of **Customers** preserves the **DataRowCollection** name of **Customers**."},{"content":"The following table shows the annotations available for use.","pos":[2249,2309]},{"content":"Annotation","pos":[2316,2326]},{"content":"Description","pos":[2327,2338]},{"pos":[2382,2395],"content":"<bpt id=\"p1\">**</bpt>typedName<ept id=\"p1\">**</ept>","source":"**typedName**"},{"content":"Name of the object.","pos":[2396,2415]},{"pos":[2420,2435],"content":"<bpt id=\"p1\">**</bpt>typedPlural<ept id=\"p1\">**</ept>","source":"**typedPlural**"},{"content":"Name of a collection of objects.","pos":[2436,2468]},{"pos":[2473,2488],"content":"<bpt id=\"p1\">**</bpt>typedParent<ept id=\"p1\">**</ept>","source":"**typedParent**"},{"content":"Name of the object when referred to in a parent relationship.","pos":[2489,2550]},{"pos":[2555,2572],"content":"<bpt id=\"p1\">**</bpt>typedChildren<ept id=\"p1\">**</ept>","source":"**typedChildren**"},{"content":"Name of the method to return objects from a child relationship.","pos":[2573,2636]},{"pos":[2641,2654],"content":"<bpt id=\"p1\">**</bpt>nullValue<ept id=\"p1\">**</ept>","source":"**nullValue**"},{"content":"Value if the underlying value is <bpt id=\"p1\">**</bpt>DBNull<ept id=\"p1\">**</ept>.","pos":[2655,2699],"source":"Value if the underlying value is **DBNull**."},{"content":"See the following table for <bpt id=\"p1\">**</bpt>nullValue<ept id=\"p1\">**</ept> annotations.","pos":[2700,2754],"source":" See the following table for **nullValue** annotations."},{"content":"The default is <bpt id=\"p1\">**</bpt>_throw<ept id=\"p1\">**</ept>.","pos":[2755,2781],"source":" The default is **_throw**."},{"pos":[2789,2881],"content":"The following table shows the values that can be specified for the <bpt id=\"p1\">**</bpt>nullValue<ept id=\"p1\">**</ept> annotation.","source":"The following table shows the values that can be specified for the **nullValue** annotation."},{"content":"nullValue Value","pos":[2888,2903]},{"content":"Description","pos":[2904,2915]},{"pos":[2964,2983],"content":"<bpt id=\"p1\">*</bpt>Replacement Value<ept id=\"p1\">*</ept>","source":"*Replacement Value*"},{"content":"Specify a value to be returned.","pos":[2984,3015]},{"content":"The returned value must match the type of the element.","pos":[3016,3070]},{"content":"For example, use <ph id=\"ph1\">`nullValue=\"0\"`</ph> to return 0 for null integer fields.","pos":[3071,3140],"source":" For example, use `nullValue=\"0\"` to return 0 for null integer fields."},{"pos":[3145,3155],"content":"<bpt id=\"p1\">**</bpt>_throw<ept id=\"p1\">**</ept>","source":"**_throw**"},{"content":"Throw an exception.","pos":[3156,3175]},{"content":"This is the default.","pos":[3176,3196]},{"pos":[3201,3210],"content":"<bpt id=\"p1\">**</bpt>_null<ept id=\"p1\">**</ept>","source":"**_null**"},{"content":"Return a null reference or throw an exception if a primitive type is encountered.","pos":[3211,3292]},{"pos":[3297,3307],"content":"<bpt id=\"p1\">**</bpt>_empty<ept id=\"p1\">**</ept>","source":"**_empty**"},{"content":"For strings, return <bpt id=\"p1\">**</bpt>String.Empty<ept id=\"p1\">**</ept>, otherwise return an object created from an empty constructor.","pos":[3308,3407],"source":"For strings, return **String.Empty**, otherwise return an object created from an empty constructor."},{"content":"If a primitive type is encountered, throw an exception.","pos":[3408,3463]},{"pos":[3471,3577],"content":"The following table shows default values for objects in a typed <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> and the available annotations.","source":"The following table shows default values for objects in a typed **DataSet** and the available annotations."},{"content":"Object/Method/Event","pos":[3584,3603]},{"content":"Default","pos":[3604,3611]},{"content":"Annotation","pos":[3612,3622]},{"pos":[3690,3703],"content":"<bpt id=\"p1\">**</bpt>DataTable<ept id=\"p1\">**</ept>","source":"**DataTable**"},{"content":"TableNameDataTable","pos":[3704,3722]},{"content":"typedPlural","pos":[3723,3734]},{"pos":[3739,3760],"content":"<bpt id=\"p1\">**</bpt>DataTable<ept id=\"p1\">**</ept> Methods","source":"**DataTable** Methods"},{"content":"NewTableNameRow","pos":[3761,3776]},{"content":"AddTableNameRow","pos":[3789,3804]},{"content":"DeleteTableNameRow","pos":[3817,3835]},{"content":"typedName","pos":[3836,3845]},{"pos":[3850,3871],"content":"<bpt id=\"p1\">**</bpt>DataRowCollection<ept id=\"p1\">**</ept>","source":"**DataRowCollection**"},{"content":"TableName","pos":[3872,3881]},{"content":"typedPlural","pos":[3882,3893]},{"pos":[3898,3909],"content":"<bpt id=\"p1\">**</bpt>DataRow<ept id=\"p1\">**</ept>","source":"**DataRow**"},{"content":"TableNameRow","pos":[3910,3922]},{"content":"typedName","pos":[3923,3932]},{"pos":[3937,3951],"content":"<bpt id=\"p1\">**</bpt>DataColumn<ept id=\"p1\">**</ept>","source":"**DataColumn**"},{"content":"DataTable.ColumnNameColumn","pos":[3952,3978]},{"content":"DataRow.ColumnName","pos":[3991,4009]},{"content":"typedName","pos":[4010,4019]},{"pos":[4024,4036],"content":"<bpt id=\"p1\">**</bpt>Property<ept id=\"p1\">**</ept>","source":"**Property**"},{"content":"PropertyName","pos":[4037,4049]},{"content":"typedName","pos":[4050,4059]},{"pos":[4064,4082],"content":"<bpt id=\"p1\">**</bpt>Child<ept id=\"p1\">**</ept> Accessor","source":"**Child** Accessor"},{"content":"GetChildTableNameRows","pos":[4083,4104]},{"content":"typedChildren","pos":[4105,4118]},{"pos":[4123,4142],"content":"<bpt id=\"p1\">**</bpt>Parent<ept id=\"p1\">**</ept> Accessor","source":"**Parent** Accessor"},{"content":"TableNameRow","pos":[4143,4155]},{"content":"typedParent","pos":[4156,4167]},{"pos":[4172,4190],"content":"<bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> Events","source":"**DataSet** Events"},{"content":"TableNameRowChangeEvent","pos":[4191,4214]},{"content":"TableNameRowChangeEventHandler","pos":[4227,4257]},{"content":"typedName","pos":[4258,4267]},{"content":"To use typed <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> annotations, you must include the following <bpt id=\"p2\">**</bpt>xmlns<ept id=\"p2\">**</ept> reference in your XML Schema definition language (XSD) schema.","pos":[4275,4416],"source":"To use typed **DataSet** annotations, you must include the following **xmlns** reference in your XML Schema definition language (XSD) schema."},{"content":"To create an xsd from database tables, see <ph id=\"ph1\">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> or <bpt id=\"p1\">[</bpt>Working with Datasets in Visual Studio<ept id=\"p1\">](/visualstudio/data-tools/dataset-tools-in-visual-studio)</ept>.","pos":[4417,4606],"source":" To create an xsd from database tables, see <xref:System.Data.DataSet.WriteXmlSchema%2A> or [Working with Datasets in Visual Studio](/visualstudio/data-tools/dataset-tools-in-visual-studio)."},{"pos":[4683,4842],"content":"The following is a sample annotated schema that exposes the <bpt id=\"p1\">**</bpt>Customers<ept id=\"p1\">**</ept> table of the <bpt id=\"p2\">**</bpt>Northwind<ept id=\"p2\">**</ept> database with a relation to the <bpt id=\"p3\">**</bpt>Orders<ept id=\"p3\">**</ept> table included.","source":"The following is a sample annotated schema that exposes the **Customers** table of the **Northwind** database with a relation to the **Orders** table included."},{"content":"The following code example uses a strongly typed <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> created from the sample schema.","pos":[7083,7175],"source":"The following code example uses a strongly typed **DataSet** created from the sample schema."},{"content":"It uses one <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> to populate the <bpt id=\"p1\">**</bpt>Customers<ept id=\"p1\">**</ept> table and another <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> to populate the <bpt id=\"p2\">**</bpt>Orders<ept id=\"p2\">**</ept> table.","pos":[7176,7357],"source":" It uses one <xref:System.Data.SqlClient.SqlDataAdapter> to populate the **Customers** table and another <xref:System.Data.SqlClient.SqlDataAdapter> to populate the **Orders** table."},{"content":"The strongly typed <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> defines the <bpt id=\"p2\">**</bpt>DataRelations<ept id=\"p2\">**</ept>.","pos":[7358,7419],"source":" The strongly typed **DataSet** defines the **DataRelations**."},{"pos":[10281,10289],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[10364,10468],"content":"<bpt id=\"p1\">[</bpt>Typed DataSets<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/typed-datasets.md)</ept>","source":"[Typed DataSets](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/typed-datasets.md)"},{"pos":[10471,10587],"content":"<bpt id=\"p1\">[</bpt>DataSets, DataTables, and DataViews<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)</ept>","source":"[DataSets, DataTables, and DataViews](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)"},{"pos":[10590,10694],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}