{"content":"---\ntitle: \"ICorProfilerInfo2::GetFunctionInfo2 Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerInfo2.GetFunctionInfo2\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo2::GetFunctionInfo2\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"GetFunctionInfo2 method [.NET Framework profiling]\"\n  - \"ICorProfilerInfo2::GetFunctionInfo2 method [.NET Framework profiling]\"\nms.assetid: 0aa60f24-8bbd-4c83-83c5-86ad191b1d82\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 18\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ICorProfilerInfo2::GetFunctionInfo2 Method\nGets the parent class, the metadata token, and the `ClassID` of each type argument, if present, of a function.  \n  \n## Syntax  \n  \n```  \nHRESULT GetFunctionInfo2(  \n    [in]  FunctionID funcId,  \n    [in]  COR_PRF_FRAME_INFO frameInfo,  \n    [out] ClassID *pClassId,  \n    [out] ModuleID *pModuleId,  \n    [out] mdToken *pToken,  \n    [in]  ULONG32 cTypeArgs,  \n    [out] ULONG32 *pcTypeArgs,  \n    [out] ClassID typeArgs[]);  \n```  \n  \n#### Parameters  \n `funcId`  \n [in] The ID of the function for which to get the parent class and other information.  \n  \n `frameInfo`  \n [in] A `COR_PRF_FRAME_INFO` value that points to information about a stack frame.  \n  \n `pClassId`  \n [out] A pointer to the parent class of the function.  \n  \n `pModuleId`  \n [out] A pointer to the module in which the function's parent class is defined.  \n  \n `pToken`  \n [out] A pointer to the metadata token for the function.  \n  \n `cTypeArgs`  \n [in] The size of the `typeArgs` array.  \n  \n `pcTypeArgs`  \n [out] A pointer to the total number of `ClassID` values.  \n  \n `typeArgs`  \n [out] An array of `ClassID` values, each of which is the ID of a type argument of the function. When the method returns, `typeArgs` will contain some or all of the `ClassID` values.  \n  \n## Remarks  \n The profiler code can call [ICorProfilerInfo::GetModuleMetaData](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getmodulemetadata-method.md) to obtain a [metadata](../../../../docs/framework/unmanaged-api/metadata/index.md) interface for a given module. The metadata token that is returned to the location referenced by `pToken` can then be used to access the metadata for the function.  \n  \n The class ID and type arguments that are returned through the `pClassId` and `typeArgs` parameters depend on the value that is passed in the `frameInfo` parameter, as shown in the following table.  \n  \n|Value of the `frameInfo` parameter|Result|  \n|----------------------------------------|------------|  \n|A `COR_PRF_FRAME_INFO` value that was obtained from a `FunctionEnter2` callback|The `ClassID`, returned in the location referenced by `pClassId`, and all type arguments, returned in the `typeArgs` array, will be exact.|  \n|A `COR_PRF_FRAME_INFO` that was obtained from a source other than a `FunctionEnter2` callback|The exact `ClassID` and type arguments cannot be determined. That is, the `ClassID` might be null and some type arguments might come back as <xref:System.Object>.|  \n|Zero|The exact `ClassID` and type arguments cannot be determined. That is, the `ClassID` might be null and some type arguments might come back as <xref:System.Object>.|  \n  \n After `GetFunctionInfo2` returns, you must verify that the `typeArgs` buffer was large enough to contain all the `ClassID` values. To do this, compare the value that `pcTypeArgs` points to with the value of the `cTypeArgs` parameter. If `pcTypeArgs` points to a value that is larger than `cTypeArgs` divided by the size of a `ClassID` value, allocate a larger `pcTypeArgs` buffer, update `cTypeArgs` with the new, larger size, and call `GetFunctionInfo2` again.  \n  \n Alternatively, you can first call `GetFunctionInfo2` with a zero-length `pcTypeArgs` buffer to obtain the correct buffer size. You can then set the buffer size to the value returned in `pcTypeArgs` divided by the size of a `ClassID` value, and call `GetFunctionInfo2` again.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See Also  \n [ICorProfilerInfo Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)   \n [ICorProfilerInfo2 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)   \n [Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)   \n [Profiling](../../../../docs/framework/unmanaged-api/profiling/index.md)","nodes":[{"pos":[12,71],"content":"ICorProfilerInfo2::GetFunctionInfo2 Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ICorProfilerInfo2::GetFunctionInfo2 Method | Microsoft Docs","pos":[0,59]}]},{"pos":[740,782],"content":"ICorProfilerInfo2::GetFunctionInfo2 Method","linkify":"ICorProfilerInfo2::GetFunctionInfo2 Method","nodes":[{"content":"ICorProfilerInfo2::GetFunctionInfo2 Method","pos":[0,42]}]},{"pos":[783,893],"content":"Gets the parent class, the metadata token, and the <ph id=\"ph1\">`ClassID`</ph> of each type argument, if present, of a function.","source":"Gets the parent class, the metadata token, and the `ClassID` of each type argument, if present, of a function."},{"pos":[902,908],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1225,1235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The ID of the function for which to get the parent class and other information.","pos":[1251,1335]},{"content":"[in] A <ph id=\"ph1\">`COR_PRF_FRAME_INFO`</ph> value that points to information about a stack frame.","pos":[1357,1438],"source":" [in] A `COR_PRF_FRAME_INFO` value that points to information about a stack frame."},{"content":"[out] A pointer to the parent class of the function.","pos":[1459,1511]},{"content":"[out] A pointer to the module in which the function's parent class is defined.","pos":[1533,1611]},{"content":"[out] A pointer to the metadata token for the function.","pos":[1630,1685]},{"content":"[in] The size of the <ph id=\"ph1\">`typeArgs`</ph> array.","pos":[1707,1745],"source":" [in] The size of the `typeArgs` array."},{"content":"[out] A pointer to the total number of <ph id=\"ph1\">`ClassID`</ph> values.","pos":[1768,1824],"source":" [out] A pointer to the total number of `ClassID` values."},{"content":"[out] An array of <ph id=\"ph1\">`ClassID`</ph> values, each of which is the ID of a type argument of the function.","pos":[1845,1940],"source":" [out] An array of `ClassID` values, each of which is the ID of a type argument of the function."},{"content":"When the method returns, <ph id=\"ph1\">`typeArgs`</ph> will contain some or all of the <ph id=\"ph2\">`ClassID`</ph> values.","pos":[1941,2026],"source":" When the method returns, `typeArgs` will contain some or all of the `ClassID` values."},{"pos":[2035,2042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The profiler code can call <bpt id=\"p1\">[</bpt>ICorProfilerInfo::GetModuleMetaData<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getmodulemetadata-method.md)</ept> to obtain a <bpt id=\"p2\">[</bpt>metadata<ept id=\"p2\">](../../../../docs/framework/unmanaged-api/metadata/index.md)</ept> interface for a given module.","pos":[2046,2320],"source":"The profiler code can call [ICorProfilerInfo::GetModuleMetaData](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getmodulemetadata-method.md) to obtain a [metadata](../../../../docs/framework/unmanaged-api/metadata/index.md) interface for a given module."},{"content":"The metadata token that is returned to the location referenced by <ph id=\"ph1\">`pToken`</ph> can then be used to access the metadata for the function.","pos":[2321,2453],"source":" The metadata token that is returned to the location referenced by `pToken` can then be used to access the metadata for the function."},{"pos":[2460,2656],"content":"The class ID and type arguments that are returned through the <ph id=\"ph1\">`pClassId`</ph> and <ph id=\"ph2\">`typeArgs`</ph> parameters depend on the value that is passed in the <ph id=\"ph3\">`frameInfo`</ph> parameter, as shown in the following table.","source":"The class ID and type arguments that are returned through the `pClassId` and `typeArgs` parameters depend on the value that is passed in the `frameInfo` parameter, as shown in the following table."},{"pos":[2663,2697],"content":"Value of the <ph id=\"ph1\">`frameInfo`</ph> parameter","source":"Value of the `frameInfo` parameter"},{"content":"Result","pos":[2698,2704]},{"pos":[2767,2846],"content":"A <ph id=\"ph1\">`COR_PRF_FRAME_INFO`</ph> value that was obtained from a <ph id=\"ph2\">`FunctionEnter2`</ph> callback","source":"A `COR_PRF_FRAME_INFO` value that was obtained from a `FunctionEnter2` callback"},{"pos":[2847,2985],"content":"The <ph id=\"ph1\">`ClassID`</ph>, returned in the location referenced by <ph id=\"ph2\">`pClassId`</ph>, and all type arguments, returned in the <ph id=\"ph3\">`typeArgs`</ph> array, will be exact.","source":"The `ClassID`, returned in the location referenced by `pClassId`, and all type arguments, returned in the `typeArgs` array, will be exact."},{"pos":[2990,3083],"content":"A <ph id=\"ph1\">`COR_PRF_FRAME_INFO`</ph> that was obtained from a source other than a <ph id=\"ph2\">`FunctionEnter2`</ph> callback","source":"A `COR_PRF_FRAME_INFO` that was obtained from a source other than a `FunctionEnter2` callback"},{"content":"The exact <ph id=\"ph1\">`ClassID`</ph> and type arguments cannot be determined.","pos":[3084,3144],"source":"The exact `ClassID` and type arguments cannot be determined."},{"content":"That is, the <ph id=\"ph1\">`ClassID`</ph> might be null and some type arguments might come back as <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph>.","pos":[3145,3246],"source":" That is, the `ClassID` might be null and some type arguments might come back as <xref:System.Object>."},{"content":"Zero","pos":[3251,3255]},{"content":"The exact <ph id=\"ph1\">`ClassID`</ph> and type arguments cannot be determined.","pos":[3256,3316],"source":"The exact `ClassID` and type arguments cannot be determined."},{"content":"That is, the <ph id=\"ph1\">`ClassID`</ph> might be null and some type arguments might come back as <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph>.","pos":[3317,3418],"source":" That is, the `ClassID` might be null and some type arguments might come back as <xref:System.Object>."},{"content":"After <ph id=\"ph1\">`GetFunctionInfo2`</ph> returns, you must verify that the <ph id=\"ph2\">`typeArgs`</ph> buffer was large enough to contain all the <ph id=\"ph3\">`ClassID`</ph> values.","pos":[3426,3556],"source":"After `GetFunctionInfo2` returns, you must verify that the `typeArgs` buffer was large enough to contain all the `ClassID` values."},{"content":"To do this, compare the value that <ph id=\"ph1\">`pcTypeArgs`</ph> points to with the value of the <ph id=\"ph2\">`cTypeArgs`</ph> parameter.","pos":[3557,3659],"source":" To do this, compare the value that `pcTypeArgs` points to with the value of the `cTypeArgs` parameter."},{"content":"If <ph id=\"ph1\">`pcTypeArgs`</ph> points to a value that is larger than <ph id=\"ph2\">`cTypeArgs`</ph> divided by the size of a <ph id=\"ph3\">`ClassID`</ph> value, allocate a larger <ph id=\"ph4\">`pcTypeArgs`</ph> buffer, update <ph id=\"ph5\">`cTypeArgs`</ph> with the new, larger size, and call <ph id=\"ph6\">`GetFunctionInfo2`</ph> again.","pos":[3660,3887],"source":" If `pcTypeArgs` points to a value that is larger than `cTypeArgs` divided by the size of a `ClassID` value, allocate a larger `pcTypeArgs` buffer, update `cTypeArgs` with the new, larger size, and call `GetFunctionInfo2` again."},{"content":"Alternatively, you can first call <ph id=\"ph1\">`GetFunctionInfo2`</ph> with a zero-length <ph id=\"ph2\">`pcTypeArgs`</ph> buffer to obtain the correct buffer size.","pos":[3894,4020],"source":"Alternatively, you can first call `GetFunctionInfo2` with a zero-length `pcTypeArgs` buffer to obtain the correct buffer size."},{"content":"You can then set the buffer size to the value returned in <ph id=\"ph1\">`pcTypeArgs`</ph> divided by the size of a <ph id=\"ph2\">`ClassID`</ph> value, and call <ph id=\"ph3\">`GetFunctionInfo2`</ph> again.","pos":[4021,4168],"source":" You can then set the buffer size to the value returned in `pcTypeArgs` divided by the size of a `ClassID` value, and call `GetFunctionInfo2` again."},{"pos":[4177,4189],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[4193,4297],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[4304,4338],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[4345,4370],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[4377,4485],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[4494,4502],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>ICorProfilerInfo Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[4506,4617],"source":"[ICorProfilerInfo Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ICorProfilerInfo2 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[4620,4734],"source":" [ICorProfilerInfo2 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Profiling Interfaces<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)</ept><ph id=\"ph1\"> </ph>","pos":[4737,4837],"source":" [Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Profiling<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/index.md)</ept>","pos":[4840,4913],"source":" [Profiling](../../../../docs/framework/unmanaged-api/profiling/index.md)"}]}