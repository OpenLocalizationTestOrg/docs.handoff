{"content":"---\ntitle: \"where clause (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"whereclause_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"where keyword [C#]\"\n  - \"where clause [C#]\"\nms.assetid: 7f9bf952-7744-4f91-b676-cddb55d107c3\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# where clause (C# Reference)\nThe `where` clause is used in a query expression to specify which elements from the data source will be returned in the query expression. It applies a Boolean condition (*predicate*) to each source element (referenced by the range variable) and returns those for which the specified condition is true. A single query expression may contain multiple `where` clauses and a single clause may contain multiple predicate subexpressions.  \n  \n## Example  \n In the following example, the `where` clause filters out all numbers except those that are less than five. If you remove the `where` clause, all numbers from the data source would be returned. The expression `num < 5` is the predicate that is applied to each element.  \n  \n [!code-cs[cscsrefQueryKeywords#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-clause_1.cs)]  \n  \n## Example  \n Within a single `where` clause, you can specify as many predicates as necessary by using the [&&](../../../csharp/language-reference/operators/conditional-and-operator.md) and [&#124;&#124;](../../../csharp/language-reference/operators/conditional-or-operator.md) operators. In the following example, the query specifies two predicates in order to select only the even numbers that are less than five.  \n  \n [!code-cs[cscsrefQueryKeywords#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-clause_2.cs)]  \n  \n## Example  \n A `where` clause may contain one or more methods that return Boolean values. In the following example, the `where` clause uses a method to determine whether the current value of the range variable is even or odd.  \n  \n [!code-cs[cscsrefQueryKeywords#7](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-clause_3.cs)]  \n  \n## Remarks  \n The `where` clause is a filtering mechanism. It can be positioned almost anywhere in a query expression, except it cannot be the first or last clause. A `where` clause may appear either before or after a [group](../../../csharp/language-reference/keywords/group-clause.md) clause depending on whether you have to filter the source elements before or after they are grouped.  \n  \n If a specified predicate is not valid for the elements in the data source, a compile-time error will result. This is one benefit of the strong type-checking provided by [!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)].  \n  \n At compile time the `where` keyword is converted into a call to the <xref:System.Linq.Enumerable.Where%2A> Standard Query Operator method.  \n  \n## See Also  \n [Query Keywords (LINQ)](../../../csharp/language-reference/keywords/query-keywords.md)   \n [from clause](../../../csharp/language-reference/keywords/from-clause.md)   \n [select clause](../../../csharp/language-reference/keywords/select-clause.md)   \n [Filtering Data](http://msdn.microsoft.com/library/cee88d0f-31aa-4c60-9452-cc122ed0057d)   \n [LINQ Query Expressions](../../../csharp/programming-guide/linq-query-expressions/index.md)   \n [Getting Started with LINQ in C#](../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)","nodes":[{"pos":[12,56],"content":"where clause (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"where clause (C# Reference) | Microsoft Docs","pos":[0,44]}]},{"pos":[596,623],"content":"where clause (C# Reference)","linkify":"where clause (C# Reference)","nodes":[{"content":"where clause (C# Reference)","pos":[0,27]}]},{"content":"The <ph id=\"ph1\">`where`</ph> clause is used in a query expression to specify which elements from the data source will be returned in the query expression.","pos":[624,761],"source":"The `where` clause is used in a query expression to specify which elements from the data source will be returned in the query expression."},{"content":"It applies a Boolean condition (<bpt id=\"p1\">*</bpt>predicate<ept id=\"p1\">*</ept>) to each source element (referenced by the range variable) and returns those for which the specified condition is true.","pos":[762,925],"source":" It applies a Boolean condition (*predicate*) to each source element (referenced by the range variable) and returns those for which the specified condition is true."},{"content":"A single query expression may contain multiple <ph id=\"ph1\">`where`</ph> clauses and a single clause may contain multiple predicate subexpressions.","pos":[926,1055],"source":" A single query expression may contain multiple `where` clauses and a single clause may contain multiple predicate subexpressions."},{"pos":[1064,1071],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, the <ph id=\"ph1\">`where`</ph> clause filters out all numbers except those that are less than five.","pos":[1075,1181],"source":"In the following example, the `where` clause filters out all numbers except those that are less than five."},{"content":"If you remove the <ph id=\"ph1\">`where`</ph> clause, all numbers from the data source would be returned.","pos":[1182,1267],"source":" If you remove the `where` clause, all numbers from the data source would be returned."},{"content":"The expression <ph id=\"ph1\">`num &lt; 5`</ph> is the predicate that is applied to each element.","pos":[1268,1342],"source":" The expression `num < 5` is the predicate that is applied to each element."},{"pos":[1349,1465],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>cscsrefQueryKeywords#5<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-clause_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[cscsrefQueryKeywords#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-clause_1.cs)]"},{"pos":[1474,1481],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Within a single <ph id=\"ph1\">`where`</ph> clause, you can specify as many predicates as necessary by using the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">&amp;&amp;</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/conditional-and-operator.md)</ept> and <bpt id=\"p2\">[</bpt>&amp;#124;&amp;#124;<ept id=\"p2\">](../../../csharp/language-reference/operators/conditional-or-operator.md)</ept> operators.","pos":[1485,1759],"source":"Within a single `where` clause, you can specify as many predicates as necessary by using the [&&](../../../csharp/language-reference/operators/conditional-and-operator.md) and [&#124;&#124;](../../../csharp/language-reference/operators/conditional-or-operator.md) operators."},{"content":"In the following example, the query specifies two predicates in order to select only the even numbers that are less than five.","pos":[1760,1886]},{"pos":[1893,2009],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>cscsrefQueryKeywords#6<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-clause_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[cscsrefQueryKeywords#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-clause_2.cs)]"},{"pos":[2018,2025],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"A <ph id=\"ph1\">`where`</ph> clause may contain one or more methods that return Boolean values.","pos":[2029,2105],"source":"A `where` clause may contain one or more methods that return Boolean values."},{"content":"In the following example, the <ph id=\"ph1\">`where`</ph> clause uses a method to determine whether the current value of the range variable is even or odd.","pos":[2106,2241],"source":" In the following example, the `where` clause uses a method to determine whether the current value of the range variable is even or odd."},{"pos":[2248,2364],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>cscsrefQueryKeywords#7<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-clause_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[cscsrefQueryKeywords#7](../../../csharp/language-reference/keywords/codesnippet/CSharp/where-clause_3.cs)]"},{"pos":[2373,2380],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`where`</ph> clause is a filtering mechanism.","pos":[2384,2428],"source":"The `where` clause is a filtering mechanism."},{"content":"It can be positioned almost anywhere in a query expression, except it cannot be the first or last clause.","pos":[2429,2534]},{"content":"A <ph id=\"ph1\">`where`</ph> clause may appear either before or after a <bpt id=\"p1\">[</bpt>group<ept id=\"p1\">](../../../csharp/language-reference/keywords/group-clause.md)</ept> clause depending on whether you have to filter the source elements before or after they are grouped.","pos":[2535,2757],"source":" A `where` clause may appear either before or after a [group](../../../csharp/language-reference/keywords/group-clause.md) clause depending on whether you have to filter the source elements before or after they are grouped."},{"content":"If a specified predicate is not valid for the elements in the data source, a compile-time error will result.","pos":[2764,2872]},{"content":"This is one benefit of the strong type-checking provided by <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph>.","pos":[2873,2997],"source":" This is one benefit of the strong type-checking provided by [!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]."},{"pos":[3004,3142],"content":"At compile time the <ph id=\"ph1\">`where`</ph> keyword is converted into a call to the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> Standard Query Operator method.","source":"At compile time the `where` keyword is converted into a call to the <xref:System.Linq.Enumerable.Where%2A> Standard Query Operator method."},{"pos":[3151,3159],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Query Keywords (LINQ)<ept id=\"p1\">](../../../csharp/language-reference/keywords/query-keywords.md)</ept><ph id=\"ph1\"> </ph>","pos":[3163,3250],"source":"[Query Keywords (LINQ)](../../../csharp/language-reference/keywords/query-keywords.md) "},{"content":"<bpt id=\"p1\"> [</bpt>from clause<ept id=\"p1\">](../../../csharp/language-reference/keywords/from-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[3253,3328],"source":" [from clause](../../../csharp/language-reference/keywords/from-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>select clause<ept id=\"p1\">](../../../csharp/language-reference/keywords/select-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[3331,3410],"source":" [select clause](../../../csharp/language-reference/keywords/select-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Filtering Data<ept id=\"p1\">](http://msdn.microsoft.com/library/cee88d0f-31aa-4c60-9452-cc122ed0057d)</ept><ph id=\"ph1\"> </ph>","pos":[3413,3503],"source":" [Filtering Data](http://msdn.microsoft.com/library/cee88d0f-31aa-4c60-9452-cc122ed0057d) "},{"content":"<bpt id=\"p1\"> [</bpt>LINQ Query Expressions<ept id=\"p1\">](../../../csharp/programming-guide/linq-query-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3506,3599],"source":" [LINQ Query Expressions](../../../csharp/programming-guide/linq-query-expressions/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Getting Started with LINQ in C#<ept id=\"p1\">](../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept>","pos":[3602,3714],"source":" [Getting Started with LINQ in C#](../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)"}]}