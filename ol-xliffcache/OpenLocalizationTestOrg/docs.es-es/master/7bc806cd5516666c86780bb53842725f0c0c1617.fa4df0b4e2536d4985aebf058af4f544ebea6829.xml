{"content":"---\ntitle: \"decimal keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"decimal_CSharpKeyword\"\n  - \"decimal\"\nhelpviewer_keywords: \n  - \"decimal keyword [C#]\"\nms.assetid: b6522132-b5ee-4be3-ad13-3adfdb7de7a1\n---\n# decimal (C# Reference)\n\nThe `decimal` keyword indicates a 128-bit data type. Compared to other floating-point types, the `decimal` type has more precision and a smaller range, which makes it appropriate for financial and monetary calculations. The approximate range and precision for the `decimal` type are shown in the following table.\n\n|Type|Approximate Range|Precision|.NET type|\n|----------|-----------------------|---------------|-------------------------|\n|`decimal`|±1.0 x 10<sup>-28</sup> to ±7.9228 x 10<sup>28</sup>|28-29 significant digits|<xref:System.Decimal?displayProperty=nameWithType>|\n\nThe default value of a `decimal` is 0m.\n\n## Literals\n\nIf you want a numeric real literal to be treated as `decimal`, use the suffix m or M, for example:\n\n```csharp\ndecimal myMoney = 300.5m;\n```\n\nWithout the suffix m, the number is treated as a [double](../../../csharp/language-reference/keywords/double.md) and generates a compiler error.\n\n## Conversions\n\nThe integral types are implicitly converted to `decimal` and the result evaluates to `decimal`. Therefore you can initialize a decimal variable using an integer literal, without the suffix, as follows:\n\n```csharp\ndecimal myMoney = 300;\n```\n\nThere is no implicit conversion between other floating-point types and the `decimal` type; therefore, a cast must be used to convert between these two types. For example:\n\n```csharp\ndecimal myMoney = 99.9m;\ndouble x = (double)myMoney;\nmyMoney = (decimal)x;\n```\n\nYou can also mix `decimal` and numeric integral types in the same expression. However, mixing `decimal` and other floating-point types without a cast causes a compilation error.\n\nFor more information about implicit numeric conversions, see [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md).\n\nFor more information about explicit numeric conversions, see [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md).\n\n## Formatting decimal output\n\nYou can format the results by using the `String.Format` method, or through the <xref:System.Console.Write%2A?displayProperty=nameWithType> method, which calls `String.Format()`. The currency format is specified by using the standard currency format string \"C\" or \"c,\" as shown in the second example later in this article. For more information about the `String.Format` method, see <xref:System.String.Format%2A?displayProperty=nameWithType>.\n\n## Example\n\nThe following example causes a compiler error by trying to add [double](../../../csharp/language-reference/keywords/double.md) and `decimal` variables.\n\n```csharp\ndecimal dec = 0m;\ndouble dub = 9;\n// The following line causes an error that reads \"Operator '+' cannot be applied to\n// operands of type 'double' and 'decimal'\"\nConsole.WriteLine(dec + dub);\n\n// You can fix the error by using explicit casting of either operand.\nConsole.WriteLine(dec + (decimal)dub);\nConsole.WriteLine((double)dec + dub);\n```\n\nThe result is the following error:\n\n`Operator '+' cannot be applied to operands of type 'double' and 'decimal'`\n\nIn this example, a `decimal` and an [int](../../../csharp/language-reference/keywords/int.md) are mixed in the same expression. The result evaluates to the `decimal` type.\n\n[!code-csharp[csrefKeywordsTypes#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#6)]\n\n## Example\n\nIn this example, the output is formatted by using the currency format string. Notice that `x` is rounded because the decimal places exceed $0.99. The variable `y`, which represents the maximum exact digits, is displayed exactly in the correct format.\n\n[!code-csharp[csrefKeywordsTypes#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#7)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- <xref:System.Decimal>\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)\n- [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)\n- [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)\n- [Standard Numeric Format Strings](../../../standard/base-types/standard-numeric-format-strings.md)\n","nodes":[{"pos":[4,238],"embed":true,"restype":"x-metadata","content":"title: \"decimal keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"decimal_CSharpKeyword\"\n  - \"decimal\"\nhelpviewer_keywords: \n  - \"decimal keyword [C#]\"\nms.assetid: b6522132-b5ee-4be3-ad13-3adfdb7de7a1","nodes":[{"content":"decimal keyword - C# Reference","nodes":[{"pos":[0,30],"content":"decimal keyword - C# Reference","nodes":[{"content":"decimal keyword - C# Reference","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[245,267],"content":"decimal (C# Reference)","linkify":"decimal (C# Reference)","nodes":[{"content":"decimal (C# Reference)","pos":[0,22]}]},{"content":"The <ph id=\"ph1\">`decimal`</ph> keyword indicates a 128-bit data type.","pos":[269,321],"source":"The `decimal` keyword indicates a 128-bit data type."},{"content":"Compared to other floating-point types, the <ph id=\"ph1\">`decimal`</ph> type has more precision and a smaller range, which makes it appropriate for financial and monetary calculations.","pos":[322,488],"source":" Compared to other floating-point types, the `decimal` type has more precision and a smaller range, which makes it appropriate for financial and monetary calculations."},{"content":"The approximate range and precision for the <ph id=\"ph1\">`decimal`</ph> type are shown in the following table.","pos":[489,581],"source":" The approximate range and precision for the `decimal` type are shown in the following table."},{"content":"Type","pos":[584,588]},{"content":"Approximate Range","pos":[589,606]},{"content":"Precision","pos":[607,616]},{"content":".NET type","pos":[617,626]},{"pos":[718,770],"content":"±1.0 x 10<bpt id=\"p1\">&lt;sup&gt;</bpt>-28<ept id=\"p1\">&lt;/sup&gt;</ept> to ±7.9228 x 10<bpt id=\"p2\">&lt;sup&gt;</bpt>28<ept id=\"p2\">&lt;/sup&gt;</ept>","source":"±1.0 x 10<sup>-28</sup> to ±7.9228 x 10<sup>28</sup>"},{"content":"28-29 significant digits","pos":[771,795]},{"pos":[849,888],"content":"The default value of a <ph id=\"ph1\">`decimal`</ph> is 0m.","source":"The default value of a `decimal` is 0m."},{"pos":[893,901],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"pos":[903,1001],"content":"If you want a numeric real literal to be treated as <ph id=\"ph1\">`decimal`</ph>, use the suffix m or M, for example:","source":"If you want a numeric real literal to be treated as `decimal`, use the suffix m or M, for example:"},{"pos":[1044,1188],"content":"Without the suffix m, the number is treated as a <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](../../../csharp/language-reference/keywords/double.md)</ept> and generates a compiler error.","source":"Without the suffix m, the number is treated as a [double](../../../csharp/language-reference/keywords/double.md) and generates a compiler error."},{"pos":[1193,1204],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"The integral types are implicitly converted to <ph id=\"ph1\">`decimal`</ph> and the result evaluates to <ph id=\"ph2\">`decimal`</ph>.","pos":[1206,1301],"source":"The integral types are implicitly converted to `decimal` and the result evaluates to `decimal`."},{"content":"Therefore you can initialize a decimal variable using an integer literal, without the suffix, as follows:","pos":[1302,1407]},{"content":"There is no implicit conversion between other floating-point types and the <ph id=\"ph1\">`decimal`</ph> type; therefore, a cast must be used to convert between these two types.","pos":[1447,1604],"source":"There is no implicit conversion between other floating-point types and the `decimal` type; therefore, a cast must be used to convert between these two types."},{"content":"For example:","pos":[1605,1617]},{"content":"You can also mix <ph id=\"ph1\">`decimal`</ph> and numeric integral types in the same expression.","pos":[1709,1786],"source":"You can also mix `decimal` and numeric integral types in the same expression."},{"content":"However, mixing <ph id=\"ph1\">`decimal`</ph> and other floating-point types without a cast causes a compilation error.","pos":[1787,1886],"source":" However, mixing `decimal` and other floating-point types without a cast causes a compilation error."},{"pos":[1888,2069],"content":"For more information about implicit numeric conversions, see <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.","source":"For more information about implicit numeric conversions, see [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)."},{"pos":[2071,2252],"content":"For more information about explicit numeric conversions, see <bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>.","source":"For more information about explicit numeric conversions, see [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)."},{"pos":[2257,2282],"content":"Formatting decimal output","linkify":"Formatting decimal output","nodes":[{"content":"Formatting decimal output","pos":[0,25]}]},{"content":"You can format the results by using the <ph id=\"ph1\">`String.Format`</ph> method, or through the <ph id=\"ph2\">&lt;xref:System.Console.Write%2A?displayProperty=nameWithType&gt;</ph> method, which calls <ph id=\"ph3\">`String.Format()`</ph>.","pos":[2284,2461],"source":"You can format the results by using the `String.Format` method, or through the <xref:System.Console.Write%2A?displayProperty=nameWithType> method, which calls `String.Format()`."},{"content":"The currency format is specified by using the standard currency format string \"C\" or \"c,\" as shown in the second example later in this article.","pos":[2462,2605]},{"content":"For more information about the <ph id=\"ph1\">`String.Format`</ph> method, see <ph id=\"ph2\">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph>.","pos":[2606,2725],"source":" For more information about the `String.Format` method, see <xref:System.String.Format%2A?displayProperty=nameWithType>."},{"pos":[2730,2737],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2739,2890],"content":"The following example causes a compiler error by trying to add <bpt id=\"p1\">[</bpt>double<ept id=\"p1\">](../../../csharp/language-reference/keywords/double.md)</ept> and <ph id=\"ph1\">`decimal`</ph> variables.","source":"The following example causes a compiler error by trying to add [double](../../../csharp/language-reference/keywords/double.md) and `decimal` variables."},{"content":"The result is the following error:","pos":[3247,3281]},{"content":"In this example, a <ph id=\"ph1\">`decimal`</ph> and an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> are mixed in the same expression.","pos":[3360,3487],"source":"In this example, a `decimal` and an [int](../../../csharp/language-reference/keywords/int.md) are mixed in the same expression."},{"content":"The result evaluates to the <ph id=\"ph1\">`decimal`</ph> type.","pos":[3488,3531],"source":" The result evaluates to the `decimal` type."},{"pos":[3663,3670],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the output is formatted by using the currency format string.","pos":[3672,3749]},{"content":"Notice that <ph id=\"ph1\">`x`</ph> is rounded because the decimal places exceed $0.99.","pos":[3750,3817],"source":" Notice that `x` is rounded because the decimal places exceed $0.99."},{"content":"The variable <ph id=\"ph1\">`y`</ph>, which represents the maximum exact digits, is displayed exactly in the correct format.","pos":[3818,3922],"source":" The variable `y`, which represents the maximum exact digits, is displayed exactly in the correct format."},{"pos":[4054,4079],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[4145,4153],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4181,4240],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[4243,4309],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[4312,4379],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[4382,4473],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept>","source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)"},{"pos":[4476,4567],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept>","source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)"},{"pos":[4570,4689],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)"},{"pos":[4692,4811],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"},{"pos":[4814,4912],"content":"<bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](../../../standard/base-types/standard-numeric-format-strings.md)</ept>","source":"[Standard Numeric Format Strings](../../../standard/base-types/standard-numeric-format-strings.md)"}]}