{"content":"---\ntitle: \"Comparison Operators (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.<>\"\n  - \"vb.>=\"\n  - \"vb.<=\"\n  - \"vb.>\"\n  - \"vb.<\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"greater than or equal to operator [Visual Basic]\"\n  - \">= operator [Visual Basic]\"\n  - \"= operator [Visual Basic]\"\n  - \"< operator [Visual Basic]\"\n  - \"less than operator [Visual Basic]\"\n  - \"relational operators, syntax\"\n  - \"Like operator [Visual Basic]\"\n  - \"<> operator [Visual Basic]\"\n  - \"> operator [Visual Basic]\"\n  - \"equal operator [Visual Basic]\"\n  - \"less than or equal to operator [Visual Basic]\"\n  - \"symbols, operators\"\n  - \"greater than operator [Visual Basic]\"\n  - \"comparing values [Visual Basic]\"\n  - \"operators [Visual Basic], relational\"\n  - \"string comparison [Visual Basic]\"\n  - \"not equal to comparison operator [Visual Basic]\"\n  - \"<= operator [Visual Basic]\"\n  - \"operators [Visual Basic], comparison\"\n  - \"Is operator [Visual Basic]\"\n  - \"comparison operators, Visual Basicl\"\nms.assetid: d6cb12a8-e52e-46a7-8aaf-f804d634a825\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Comparison Operators (Visual Basic)\nThe following are the comparison operators defined in Visual Basic.  \n  \n `<` operator  \n  \n `<=` operator  \n  \n `>` operator  \n  \n `>=` operator  \n  \n `=` operator  \n  \n `<>` operator  \n  \n [Is Operator](../../../visual-basic/language-reference/operators/is-operator.md)  \n  \n [IsNot Operator](../../../visual-basic/language-reference/operators/isnot-operator.md)  \n  \n [Like Operator](../../../visual-basic/language-reference/operators/like-operator.md)  \n  \n These operators compare two expressions to determine whether or not they are equal, and if not, how they differ. `Is`, `IsNot`, and `Like` are discussed in detail on separate Help pages. The relational comparison operators are discussed in detail on this page.  \n  \n## Syntax  \n  \n```  \n  \n      result = expression1 comparisonoperator expression2  \nresult = object1 [Is | IsNot] object2  \nresult = string Like pattern  \n```  \n  \n## Parts  \n `result`  \n Required. A `Boolean` value representing the result of the comparison.  \n  \n `expression`  \n Required. Any expression.  \n  \n `comparisonoperator`  \n Required. Any relational comparison operator.  \n  \n `object1`, `object2`  \n Required. Any reference object names.  \n  \n `string`  \n Required. Any `String` expression.  \n  \n `pattern`  \n Required. Any `String` expression or range of characters.  \n  \n## Remarks  \n The following table contains a list of the relational comparison operators and the conditions that determine whether `result` is `True` or `False`.  \n  \n|Operator|`True` if|`False` if|  \n|--------------|---------------|----------------|  \n|`<` (Less than)|`expression1` < `expression2`|`expression1` >= `expression2`|  \n|`<=` (Less than or equal to)|`expression1` <= `expression2`|`expression1` > `expression2`|  \n|`>` (Greater than)|`expression1` > `expression2`|`expression1` <= `expression2`|  \n|`>=` (Greater than or equal to)|`expression1` >= `expression2`|`expression1` < `expression2`|  \n|`=` (Equal to)|`expression1` = `expression2`|`expression1` <> `expression2`|  \n|`<>` (Not equal to)|`expression1` <> `expression2`|`expression1` = `expression2`|  \n  \n> [!NOTE]\n>  The [= Operator](../../../visual-basic/language-reference/operators/assignment-operator.md) is also used as an assignment operator.  \n  \n The `Is` operator, the `IsNot` operator, and the `Like` operator have specific comparison functionalities that differ from the operators in the preceding table.  \n  \n## Comparing Numbers  \n When you compare an expression of type `Single` to one of type `Double`, the `Single` expression is converted to `Double`. This behavior is opposite to the behavior found in Visual Basic 6.  \n  \n Similarly, when you compare an expression of type `Decimal` to an expression of type `Single` or `Double`, the `Decimal` expression is converted to `Single` or `Double`. For `Decimal` expressions, any fractional value less than 1E-28 might be lost. Such fractional value loss may cause two values to compare as equal when they are not. For this reason, you should take care when using equality (`=`) to compare two floating-point variables. It is safer to test whether the absolute value of the difference between the two numbers is less than a small acceptable tolerance.  \n  \n### Floating-point Imprecision  \n When you work with floating-point numbers, keep in mind that they do not always have a precise representation in memory. This could lead to unexpected results from certain operations, such as value comparison and the [Mod Operator](../../../visual-basic/language-reference/operators/mod-operator.md). For more information, see [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md).  \n  \n## Comparing Strings  \n When you compare strings, the string expressions are evaluated based on their alphabetical sort order, which depends on the `Option Compare` setting.  \n  \n `Option Compare Binary` bases string comparisons on a sort order derived from the internal binary representations of the characters. The sort order is determined by the code page. The following example shows a typical binary sort order.  \n  \n `A < B < E < Z < a < b < e < z < À < Ê < Ø < à < ê < ø`  \n  \n `Option Compare Text` bases string comparisons on a case-insensitive, textual sort order determined by your application's locale. When you set `Option Compare Text` and sort the characters in the preceding example, the following text sort order applies:  \n  \n `(A=a) < (À= à) < (B=b) < (E=e) < (Ê= ê) < (Ø = ø) < (Z=z)`  \n  \n### Locale Dependence  \n When you set `Option Compare Text`, the result of a string comparison can depend on the locale in which the application is running. Two characters might compare as equal in one locale but not in another. If you are using a string comparison to make important decisions, such as whether to accept an attempt to log on, you should be alert to locale sensitivity. Consider either setting `Option Compare Binary` or calling the <xref:Microsoft.VisualBasic.Strings.StrComp%2A>, which takes the locale into account.  \n  \n## Typeless Programming with Relational Comparison Operators  \n The use of relational comparison operators with `Object` expressions is not allowed under `Option Strict On`. When `Option Strict` is `Off`, and either `expression1` or `expression2` is an `Object` expression, the run-time types determine how they are compared. The following table shows how the expressions are compared and the result from the comparison, depending on the runtime type of the operands.  \n  \n|If operands are|Comparison is|  \n|---------------------|-------------------|  \n|Both `String`|Sort comparison based on string sorting characteristics.|  \n|Both numeric|Objects converted to `Double`, numeric comparison.|  \n|One numeric and one `String`|The `String` is converted to a `Double` and numeric comparison is performed. If the `String` cannot be converted to `Double`, an <xref:System.InvalidCastException> is thrown.|  \n|Either or both are reference types other than `String`|An <xref:System.InvalidCastException> is thrown.|  \n  \n Numeric comparisons treat `Nothing` as 0. String comparisons treat `Nothing` as `\"\"` (an empty string).  \n  \n## Overloading  \n The relational comparison operators (`<`. `<=`, `>`, `>=`, `=`, `<>`) can be *overloaded*, which means that a class or structure can redefine their behavior when an operand has the type of that class or structure. If your code uses any of these operators on such a class or structure, be sure you understand the redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n Notice that the [= Operator](../../../visual-basic/language-reference/operators/assignment-operator.md) can be overloaded only as a relational comparison operator, not as an assignment operator.  \n  \n## Example  \n The following example shows various uses of relational comparison operators, which you use to compare expressions. Relational comparison operators return a `Boolean` result that represents whether or not the stated expression evaluates to `True`. When you apply the `>` and `<` operators to strings, the comparison is made using the normal alphabetical sorting order of the strings. This order can be dependent on your locale setting. Whether the sort is case-sensitive or not depends on the [Option Compare](../../../visual-basic/language-reference/statements/option-compare-statement.md) setting.  \n  \n [!code-vb[VbVbalrOperators#1](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_1.vb)]  \n  \n In the preceding example, the first comparison returns `False` and the remaining comparisons return `True`.  \n  \n## See Also  \n <xref:System.InvalidCastException>   \n [= Operator](../../../visual-basic/language-reference/operators/assignment-operator.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)   \n [Comparison Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)","nodes":[{"pos":[4,1419],"nodes":[{"content":"Comparison Operators (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,52],"content":"Comparison Operators (Visual Basic) | Microsoft Docs","nodes":[{"content":"Comparison Operators (Visual Basic) | Microsoft Docs","pos":[0,52]}]}],"pos":[6,61],"yaml":true}],"content":"title: \"Comparison Operators (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.<>\"\n  - \"vb.>=\"\n  - \"vb.<=\"\n  - \"vb.>\"\n  - \"vb.<\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"greater than or equal to operator [Visual Basic]\"\n  - \">= operator [Visual Basic]\"\n  - \"= operator [Visual Basic]\"\n  - \"< operator [Visual Basic]\"\n  - \"less than operator [Visual Basic]\"\n  - \"relational operators, syntax\"\n  - \"Like operator [Visual Basic]\"\n  - \"<> operator [Visual Basic]\"\n  - \"> operator [Visual Basic]\"\n  - \"equal operator [Visual Basic]\"\n  - \"less than or equal to operator [Visual Basic]\"\n  - \"symbols, operators\"\n  - \"greater than operator [Visual Basic]\"\n  - \"comparing values [Visual Basic]\"\n  - \"operators [Visual Basic], relational\"\n  - \"string comparison [Visual Basic]\"\n  - \"not equal to comparison operator [Visual Basic]\"\n  - \"<= operator [Visual Basic]\"\n  - \"operators [Visual Basic], comparison\"\n  - \"Is operator [Visual Basic]\"\n  - \"comparison operators, Visual Basicl\"\nms.assetid: d6cb12a8-e52e-46a7-8aaf-f804d634a825\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[1426,1461],"content":"Comparison Operators (Visual Basic)","linkify":"Comparison Operators (Visual Basic)","nodes":[{"content":"Comparison Operators (Visual Basic)","pos":[0,35]}]},{"content":"The following are the comparison operators defined in Visual Basic.","pos":[1462,1529]},{"pos":[1536,1548],"content":"<ph id=\"ph1\">`&lt;`</ph> operator","source":"`<` operator"},{"pos":[1555,1568],"content":"<ph id=\"ph1\">`&lt;=`</ph> operator","source":"`<=` operator"},{"pos":[1575,1587],"content":"<ph id=\"ph1\">`&gt;`</ph> operator","source":"`>` operator"},{"pos":[1594,1607],"content":"<ph id=\"ph1\">`&gt;=`</ph> operator","source":"`>=` operator"},{"pos":[1614,1626],"content":"<ph id=\"ph1\">`=`</ph> operator","source":"`=` operator"},{"pos":[1633,1646],"content":"<ph id=\"ph1\">`&lt;&gt;`</ph> operator","source":"`<>` operator"},{"pos":[1653,1733],"content":"<bpt id=\"p1\">[</bpt>Is Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/is-operator.md)</ept>","source":"[Is Operator](../../../visual-basic/language-reference/operators/is-operator.md)"},{"pos":[1740,1826],"content":"<bpt id=\"p1\">[</bpt>IsNot Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/isnot-operator.md)</ept>","source":"[IsNot Operator](../../../visual-basic/language-reference/operators/isnot-operator.md)"},{"pos":[1833,1917],"content":"<bpt id=\"p1\">[</bpt>Like Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/like-operator.md)</ept>","source":"[Like Operator](../../../visual-basic/language-reference/operators/like-operator.md)"},{"content":"These operators compare two expressions to determine whether or not they are equal, and if not, how they differ.","pos":[1924,2036]},{"content":"<ph id=\"ph1\">`Is`</ph>, <ph id=\"ph2\">`IsNot`</ph>, and <ph id=\"ph3\">`Like`</ph> are discussed in detail on separate Help pages.","pos":[2037,2110],"source":"`Is`, `IsNot`, and `Like` are discussed in detail on separate Help pages."},{"content":"The relational comparison operators are discussed in detail on this page.","pos":[2111,2184]},{"pos":[2193,2199],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2357,2362],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[2378,2387]},{"content":"A <ph id=\"ph1\">`Boolean`</ph> value representing the result of the comparison.","pos":[2388,2448],"source":" A `Boolean` value representing the result of the comparison."},{"content":"Required.","pos":[2471,2480]},{"content":"Any expression.","pos":[2481,2496]},{"content":"Required.","pos":[2527,2536]},{"content":"Any relational comparison operator.","pos":[2537,2572]},{"content":"<ph id=\"ph1\">`object1`</ph>, <ph id=\"ph2\">`object2`</ph>","pos":[2579,2599],"source":"`object1`, `object2`"},{"content":"Required.","pos":[2603,2612]},{"content":"Any reference object names.","pos":[2613,2640]},{"content":"Required.","pos":[2659,2668]},{"content":"Any <ph id=\"ph1\">`String`</ph> expression.","pos":[2669,2693],"source":" Any `String` expression."},{"content":"Required.","pos":[2713,2722]},{"content":"Any <ph id=\"ph1\">`String`</ph> expression or range of characters.","pos":[2723,2770],"source":" Any `String` expression or range of characters."},{"pos":[2779,2786],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2790,2937],"content":"The following table contains a list of the relational comparison operators and the conditions that determine whether <ph id=\"ph1\">`result`</ph> is <ph id=\"ph2\">`True`</ph> or <ph id=\"ph3\">`False`</ph>.","source":"The following table contains a list of the relational comparison operators and the conditions that determine whether `result` is `True` or `False`."},{"content":"Operator","pos":[2944,2952]},{"pos":[2953,2962],"content":"<ph id=\"ph1\">`True`</ph> if","source":"`True` if"},{"pos":[2963,2973],"content":"<ph id=\"ph1\">`False`</ph> if","source":"`False` if"},{"pos":[3030,3045],"content":"<ph id=\"ph1\">`&lt;`</ph> (Less than)","source":"`<` (Less than)"},{"pos":[3111,3139],"content":"<ph id=\"ph1\">`&lt;=`</ph> (Less than or equal to)","source":"`<=` (Less than or equal to)"},{"pos":[3205,3223],"content":"<ph id=\"ph1\">`&gt;`</ph> (Greater than)","source":"`>` (Greater than)"},{"pos":[3289,3320],"content":"<ph id=\"ph1\">`&gt;=`</ph> (Greater than or equal to)","source":"`>=` (Greater than or equal to)"},{"pos":[3386,3400],"content":"<ph id=\"ph1\">`=`</ph> (Equal to)","source":"`=` (Equal to)"},{"pos":[3466,3485],"content":"<ph id=\"ph1\">`&lt;&gt;`</ph> (Not equal to)","source":"`<>` (Not equal to)"},{"pos":[3555,3697],"content":"[!NOTE]\n The [= Operator](../../../visual-basic/language-reference/operators/assignment-operator.md) is also used as an assignment operator.","leadings":["","> "],"nodes":[{"content":"The <bpt id=\"p1\">[</bpt>= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operator.md)</ept> is also used as an assignment operator.","pos":[9,140],"source":"The [= Operator](../../../visual-basic/language-reference/operators/assignment-operator.md) is also used as an assignment operator."}]},{"pos":[3704,3864],"content":"The <ph id=\"ph1\">`Is`</ph> operator, the <ph id=\"ph2\">`IsNot`</ph> operator, and the <ph id=\"ph3\">`Like`</ph> operator have specific comparison functionalities that differ from the operators in the preceding table.","source":"The `Is` operator, the `IsNot` operator, and the `Like` operator have specific comparison functionalities that differ from the operators in the preceding table."},{"pos":[3873,3890],"content":"Comparing Numbers","linkify":"Comparing Numbers","nodes":[{"content":"Comparing Numbers","pos":[0,17]}]},{"content":"When you compare an expression of type <ph id=\"ph1\">`Single`</ph> to one of type <ph id=\"ph2\">`Double`</ph>, the <ph id=\"ph3\">`Single`</ph> expression is converted to <ph id=\"ph4\">`Double`</ph>.","pos":[3894,4016],"source":"When you compare an expression of type `Single` to one of type `Double`, the `Single` expression is converted to `Double`."},{"content":"This behavior is opposite to the behavior found in Visual Basic 6.","pos":[4017,4083]},{"content":"Similarly, when you compare an expression of type <ph id=\"ph1\">`Decimal`</ph> to an expression of type <ph id=\"ph2\">`Single`</ph> or <ph id=\"ph3\">`Double`</ph>, the <ph id=\"ph4\">`Decimal`</ph> expression is converted to <ph id=\"ph5\">`Single`</ph> or <ph id=\"ph6\">`Double`</ph>.","pos":[4090,4259],"source":"Similarly, when you compare an expression of type `Decimal` to an expression of type `Single` or `Double`, the `Decimal` expression is converted to `Single` or `Double`."},{"content":"For <ph id=\"ph1\">`Decimal`</ph> expressions, any fractional value less than 1E-28 might be lost.","pos":[4260,4338],"source":" For `Decimal` expressions, any fractional value less than 1E-28 might be lost."},{"content":"Such fractional value loss may cause two values to compare as equal when they are not.","pos":[4339,4425]},{"content":"For this reason, you should take care when using equality (<ph id=\"ph1\">`=`</ph>) to compare two floating-point variables.","pos":[4426,4530],"source":" For this reason, you should take care when using equality (`=`) to compare two floating-point variables."},{"content":"It is safer to test whether the absolute value of the difference between the two numbers is less than a small acceptable tolerance.","pos":[4531,4662]},{"pos":[4672,4698],"content":"Floating-point Imprecision","linkify":"Floating-point Imprecision","nodes":[{"content":"Floating-point Imprecision","pos":[0,26]}]},{"content":"When you work with floating-point numbers, keep in mind that they do not always have a precise representation in memory.","pos":[4702,4822]},{"content":"This could lead to unexpected results from certain operations, such as value comparison and the <bpt id=\"p1\">[</bpt>Mod Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/mod-operator.md)</ept>.","pos":[4823,5002],"source":" This could lead to unexpected results from certain operations, such as value comparison and the [Mod Operator](../../../visual-basic/language-reference/operators/mod-operator.md)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept>.","pos":[5003,5158],"source":" For more information, see [Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)."},{"pos":[5167,5184],"content":"Comparing Strings","linkify":"Comparing Strings","nodes":[{"content":"Comparing Strings","pos":[0,17]}]},{"pos":[5188,5337],"content":"When you compare strings, the string expressions are evaluated based on their alphabetical sort order, which depends on the <ph id=\"ph1\">`Option Compare`</ph> setting.","source":"When you compare strings, the string expressions are evaluated based on their alphabetical sort order, which depends on the `Option Compare` setting."},{"content":"<ph id=\"ph1\">`Option Compare Binary`</ph> bases string comparisons on a sort order derived from the internal binary representations of the characters.","pos":[5344,5476],"source":"`Option Compare Binary` bases string comparisons on a sort order derived from the internal binary representations of the characters."},{"content":"The sort order is determined by the code page.","pos":[5477,5523]},{"content":"The following example shows a typical binary sort order.","pos":[5524,5580]},{"content":"<ph id=\"ph1\">`Option Compare Text`</ph> bases string comparisons on a case-insensitive, textual sort order determined by your application's locale.","pos":[5649,5778],"source":"`Option Compare Text` bases string comparisons on a case-insensitive, textual sort order determined by your application's locale."},{"content":"When you set <ph id=\"ph1\">`Option Compare Text`</ph> and sort the characters in the preceding example, the following text sort order applies:","pos":[5779,5902],"source":" When you set `Option Compare Text` and sort the characters in the preceding example, the following text sort order applies:"},{"pos":[5978,5995],"content":"Locale Dependence","linkify":"Locale Dependence","nodes":[{"content":"Locale Dependence","pos":[0,17]}]},{"content":"When you set <ph id=\"ph1\">`Option Compare Text`</ph>, the result of a string comparison can depend on the locale in which the application is running.","pos":[5999,6130],"source":"When you set `Option Compare Text`, the result of a string comparison can depend on the locale in which the application is running."},{"content":"Two characters might compare as equal in one locale but not in another.","pos":[6131,6202]},{"content":"If you are using a string comparison to make important decisions, such as whether to accept an attempt to log on, you should be alert to locale sensitivity.","pos":[6203,6359]},{"content":"Consider either setting <ph id=\"ph1\">`Option Compare Binary`</ph> or calling the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Strings.StrComp%2A&gt;</ph>, which takes the locale into account.","pos":[6360,6508],"source":" Consider either setting `Option Compare Binary` or calling the <xref:Microsoft.VisualBasic.Strings.StrComp%2A>, which takes the locale into account."},{"pos":[6517,6574],"content":"Typeless Programming with Relational Comparison Operators","linkify":"Typeless Programming with Relational Comparison Operators","nodes":[{"content":"Typeless Programming with Relational Comparison Operators","pos":[0,57]}]},{"content":"The use of relational comparison operators with <ph id=\"ph1\">`Object`</ph> expressions is not allowed under <ph id=\"ph2\">`Option Strict On`</ph>.","pos":[6578,6687],"source":"The use of relational comparison operators with `Object` expressions is not allowed under `Option Strict On`."},{"content":"When <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, and either <ph id=\"ph3\">`expression1`</ph> or <ph id=\"ph4\">`expression2`</ph> is an <ph id=\"ph5\">`Object`</ph> expression, the run-time types determine how they are compared.","pos":[6688,6839],"source":" When `Option Strict` is `Off`, and either `expression1` or `expression2` is an `Object` expression, the run-time types determine how they are compared."},{"content":"The following table shows how the expressions are compared and the result from the comparison, depending on the runtime type of the operands.","pos":[6840,6981]},{"content":"If operands are","pos":[6988,7003]},{"content":"Comparison is","pos":[7004,7017]},{"pos":[7068,7081],"content":"Both <ph id=\"ph1\">`String`</ph>","source":"Both `String`"},{"content":"Sort comparison based on string sorting characteristics.","pos":[7082,7138]},{"content":"Both numeric","pos":[7143,7155]},{"pos":[7156,7206],"content":"Objects converted to <ph id=\"ph1\">`Double`</ph>, numeric comparison.","source":"Objects converted to `Double`, numeric comparison."},{"pos":[7211,7239],"content":"One numeric and one <ph id=\"ph1\">`String`</ph>","source":"One numeric and one `String`"},{"content":"The <ph id=\"ph1\">`String`</ph> is converted to a <ph id=\"ph2\">`Double`</ph> and numeric comparison is performed.","pos":[7240,7316],"source":"The `String` is converted to a `Double` and numeric comparison is performed."},{"content":"If the <ph id=\"ph1\">`String`</ph> cannot be converted to <ph id=\"ph2\">`Double`</ph>, an <ph id=\"ph3\">&lt;xref:System.InvalidCastException&gt;</ph> is thrown.","pos":[7317,7414],"source":" If the `String` cannot be converted to `Double`, an <xref:System.InvalidCastException> is thrown."},{"pos":[7419,7473],"content":"Either or both are reference types other than <ph id=\"ph1\">`String`</ph>","source":"Either or both are reference types other than `String`"},{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph> is thrown.","pos":[7474,7522],"source":"An <xref:System.InvalidCastException> is thrown."},{"content":"Numeric comparisons treat <ph id=\"ph1\">`Nothing`</ph> as 0.","pos":[7530,7571],"source":"Numeric comparisons treat `Nothing` as 0."},{"content":"String comparisons treat <ph id=\"ph1\">`Nothing`</ph> as <ph id=\"ph2\">`\"\"`</ph> (an empty string).","pos":[7572,7633],"source":" String comparisons treat `Nothing` as `\"\"` (an empty string)."},{"pos":[7642,7653],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The relational comparison operators (<ph id=\"ph1\">`&lt;`</ph>.","pos":[7657,7698],"source":"The relational comparison operators (`<`."},{"content":"<ph id=\"ph1\">`&lt;=`</ph>, <ph id=\"ph2\">`&gt;`</ph>, <ph id=\"ph3\">`&gt;=`</ph>, <ph id=\"ph4\">`=`</ph>, <ph id=\"ph5\">`&lt;&gt;`</ph>) can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine their behavior when an operand has the type of that class or structure.","pos":[7699,7870],"source":"`<=`, `>`, `>=`, `=`, `<>`) can be *overloaded*, which means that a class or structure can redefine their behavior when an operand has the type of that class or structure."},{"content":"If your code uses any of these operators on such a class or structure, be sure you understand the redefined behavior.","pos":[7871,7988]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[7989,8130],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[8137,8331],"content":"Notice that the <bpt id=\"p1\">[</bpt>= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operator.md)</ept> can be overloaded only as a relational comparison operator, not as an assignment operator.","source":"Notice that the [= Operator](../../../visual-basic/language-reference/operators/assignment-operator.md) can be overloaded only as a relational comparison operator, not as an assignment operator."},{"pos":[8340,8347],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows various uses of relational comparison operators, which you use to compare expressions.","pos":[8351,8465]},{"content":"Relational comparison operators return a <ph id=\"ph1\">`Boolean`</ph> result that represents whether or not the stated expression evaluates to <ph id=\"ph2\">`True`</ph>.","pos":[8466,8597],"source":" Relational comparison operators return a `Boolean` result that represents whether or not the stated expression evaluates to `True`."},{"content":"When you apply the <ph id=\"ph1\">`&gt;`</ph> and <ph id=\"ph2\">`&lt;`</ph> operators to strings, the comparison is made using the normal alphabetical sorting order of the strings.","pos":[8598,8733],"source":" When you apply the `>` and `<` operators to strings, the comparison is made using the normal alphabetical sorting order of the strings."},{"content":"This order can be dependent on your locale setting.","pos":[8734,8785]},{"content":"Whether the sort is case-sensitive or not depends on the <bpt id=\"p1\">[</bpt>Option Compare<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept> setting.","pos":[8786,8949],"source":" Whether the sort is case-sensitive or not depends on the [Option Compare](../../../visual-basic/language-reference/statements/option-compare-statement.md) setting."},{"pos":[8956,9088],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#1<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#1](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/comparison-operators_1.vb)]"},{"pos":[9095,9202],"content":"In the preceding example, the first comparison returns <ph id=\"ph1\">`False`</ph> and the remaining comparisons return <ph id=\"ph2\">`True`</ph>.","source":"In the preceding example, the first comparison returns `False` and the remaining comparisons return `True`."},{"pos":[9211,9219],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph>","pos":[9223,9257],"source":"<xref:System.InvalidCastException> "},{"content":"<bpt id=\"p1\">[</bpt>= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[9262,9350],"source":"[= Operator](../../../visual-basic/language-reference/operators/assignment-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[9354,9467],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[9471,9596],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[9600,9729],"source":"[Troubleshooting Data Types](../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept>","pos":[9733,9880],"source":"[Comparison Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)"}]}