{"content":"---\ntitle: \"Code-Behind and XAML in WPF\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"XAML [WPF], code-behind\"\n  - \"code-behind files [WPF], XAML\"\nms.assetid: 9df6d3c9-aed3-471c-af36-6859b19d999f\n---\n# Code-Behind and XAML in WPF\n<a name=\"introduction\"></a> Code-behind is a term used to describe the code that is joined with markup-defined objects, when a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] page is markup-compiled. This topic describes requirements for code-behind as well as an alternative inline code mechanism for code in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)].  \n  \n This topic contains the following sections:  \n  \n-   [Prerequisites](#Prerequisites)  \n  \n-   [Code-Behind and the XAML Language](#codebehind_and_the_xaml_language)  \n  \n-   [Code-behind, Event Handler, and Partial Class Requirements in WPF](#Code_behind__Event_Handler__and_Partial_Class)  \n  \n-   [x:Code](#x_Code)  \n  \n-   [Inline Code Limitations](#Inline_Code_Limitations)  \n  \n<a name=\"Prerequisites\"></a>   \n## Prerequisites  \n This topic assumes that you have read the [XAML Overview (WPF)](xaml-overview-wpf.md) and have some basic knowledge of the [!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)] and object-oriented programming.  \n  \n<a name=\"codebehind_and_the_xaml_language\"></a>   \n## Code-Behind and the XAML Language  \n The XAML language includes language-level features that make it possible to associate code files with markup files, from the markup file side. Specifically, the XAML language defines the language features [x:Class Directive](../../xaml-services/x-class-directive.md), [x:Subclass Directive](../../xaml-services/x-subclass-directive.md), and [x:ClassModifier Directive](../../xaml-services/x-classmodifier-directive.md). Exactly how the code should be produced, and how to integrate markup and code, is not part of what the XAML language specifies. It is left up to frameworks such as WPF to determine how to integrate the code, how to use XAML in the application and programming models, and the build actions or other support that all this requires.  \n  \n<a name=\"Code_behind__Event_Handler__and_Partial_Class\"></a>   \n## Code-behind, Event Handler, and Partial Class Requirements in WPF  \n  \n-   The partial class must derive from the type that backs the root element.  \n  \n-   Note that under the default behavior of the markup compile build actions, you can leave the derivation blank in the partial class definition on the code-behind side. The compiled result will assume the page root's backing type to be the basis for the partial class, even if it not specified. However, relying on this behavior is not a best practice.  \n  \n-   The event handlers you write in the code-behind must be instance methods and cannot be static methods. These methods must be defined by the partial class within the CLR namespace identified by `x:Class`. You cannot qualify the name of an event handler to instruct a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor to look for an event handler for event wiring in a different class scope.  \n  \n-   The handler must match the delegate for the appropriate event in the backing type system.  \n  \n-   For the Microsoft Visual Basic language specifically, you can use the language-specific `Handles` keyword to associate handlers with instances and events in the handler declaration, instead of attaching handlers with attributes in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]. However, this technique does have some limitations because the `Handles` keyword cannot support all of the specific features of the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] event system, such as certain routed event scenarios or attached events. For details, see [Visual Basic and WPF Event Handling](visual-basic-and-wpf-event-handling.md).  \n  \n<a name=\"x_Code\"></a>   \n## x:Code  \n [x:Code](../../xaml-services/x-code-intrinsic-xaml-type.md) is a directive element defined in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]. An `x:Code` directive element can contain inline programming code. The code that is defined inline can interact with the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] on the same page. The following example illustrates inline C# code. Notice that the code is inside the `x:Code` element and that the code must be surrounded by `<CDATA[`...`]]>` to escape the contents for [!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)], so that a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor (interpreting either the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] schema or the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] schema) will not try to interpret the contents literally as [!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)].  \n  \n [!code-xaml[XAMLOvwSupport#ButtonWithInlineCode](~/samples/snippets/csharp/VS_Snippets_Wpf/XAMLOvwSupport/CSharp/page4.xaml#buttonwithinlinecode)]  \n  \n<a name=\"Inline_Code_Limitations\"></a>   \n## Inline Code Limitations  \n You should consider avoiding or limiting the use of inline code. In terms of architecture and coding philosophy, maintaining a separation between markup and code-behind keeps the designer and developer roles much more distinct. On a more technical level, the code that you write for inline code can be awkward to write, because you are always writing into the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] generated partial class, and can only use the default XML namespace mappings. Because you cannot add `using` statements, you must fully qualify many of the [!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)] calls that you make. The default [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] mappings include most but not all [!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)] namespaces that are present in the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] assemblies; you will have to fully qualify calls to types and members contained within the other CLR namespaces. You also cannot define anything beyond the partial class in the inline code, and all user code entities you reference must exist as a member or variable within the generated partial class. Other language specific programming features, such as macros or `#ifdef` against global variables or build variables, are also not available. For more information, see [x:Code Intrinsic XAML Type](../../xaml-services/x-code-intrinsic-xaml-type.md).  \n  \n## See also\n\n- [XAML Overview (WPF)](xaml-overview-wpf.md)\n- [x:Code Intrinsic XAML Type](../../xaml-services/x-code-intrinsic-xaml-type.md)\n- [Building a WPF Application](../app-development/building-a-wpf-application-wpf.md)\n- [XAML Syntax In Detail](xaml-syntax-in-detail.md)\n","nodes":[{"pos":[4,199],"embed":true,"restype":"x-metadata","content":"title: \"Code-Behind and XAML in WPF\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"XAML [WPF], code-behind\"\n  - \"code-behind files [WPF], XAML\"\nms.assetid: 9df6d3c9-aed3-471c-af36-6859b19d999f","nodes":[{"content":"Code-Behind and XAML in WPF","nodes":[{"pos":[0,27],"content":"Code-Behind and XAML in WPF","nodes":[{"content":"Code-Behind and XAML in WPF","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[206,233],"content":"Code-Behind and XAML in WPF","linkify":"Code-Behind and XAML in WPF","nodes":[{"content":"Code-Behind and XAML in WPF","pos":[0,27]}]},{"content":"<bpt id=\"p1\">&lt;a name=\"introduction\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Code-behind is a term used to describe the code that is joined with markup-defined objects, when a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> page is markup-compiled.","pos":[234,457],"source":"<a name=\"introduction\"></a> Code-behind is a term used to describe the code that is joined with markup-defined objects, when a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] page is markup-compiled."},{"content":"This topic describes requirements for code-behind as well as an alternative inline code mechanism for code in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[458,640],"source":" This topic describes requirements for code-behind as well as an alternative inline code mechanism for code in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]."},{"content":"This topic contains the following sections:","pos":[647,690]},{"pos":[700,731],"content":"<bpt id=\"p1\">[</bpt>Prerequisites<ept id=\"p1\">](#Prerequisites)</ept>","source":"[Prerequisites](#Prerequisites)"},{"pos":[741,811],"content":"<bpt id=\"p1\">[</bpt>Code-Behind and the XAML Language<ept id=\"p1\">](#codebehind_and_the_xaml_language)</ept>","source":"[Code-Behind and the XAML Language](#codebehind_and_the_xaml_language)"},{"pos":[821,936],"content":"<bpt id=\"p1\">[</bpt>Code-behind, Event Handler, and Partial Class Requirements in WPF<ept id=\"p1\">](#Code_behind__Event_Handler__and_Partial_Class)</ept>","source":"[Code-behind, Event Handler, and Partial Class Requirements in WPF](#Code_behind__Event_Handler__and_Partial_Class)"},{"pos":[946,963],"content":"<bpt id=\"p1\">[</bpt>x:Code<ept id=\"p1\">](#x_Code)</ept>","source":"[x:Code](#x_Code)"},{"pos":[973,1024],"content":"<bpt id=\"p1\">[</bpt>Inline Code Limitations<ept id=\"p1\">](#Inline_Code_Limitations)</ept>","source":"[Inline Code Limitations](#Inline_Code_Limitations)"},{"pos":[1065,1078],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"pos":[1082,1307],"content":"This topic assumes that you have read the <bpt id=\"p1\">[</bpt>XAML Overview (WPF)<ept id=\"p1\">](xaml-overview-wpf.md)</ept> and have some basic knowledge of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> and object-oriented programming.","source":"This topic assumes that you have read the [XAML Overview (WPF)](xaml-overview-wpf.md) and have some basic knowledge of the [!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)] and object-oriented programming."},{"pos":[1367,1400],"content":"Code-Behind and the XAML Language","linkify":"Code-Behind and the XAML Language","nodes":[{"content":"Code-Behind and the XAML Language","pos":[0,33]}]},{"content":"The XAML language includes language-level features that make it possible to associate code files with markup files, from the markup file side.","pos":[1404,1546]},{"content":"Specifically, the XAML language defines the language features <bpt id=\"p1\">[</bpt>x:Class Directive<ept id=\"p1\">](../../xaml-services/x-class-directive.md)</ept>, <bpt id=\"p2\">[</bpt>x:Subclass Directive<ept id=\"p2\">](../../xaml-services/x-subclass-directive.md)</ept>, and <bpt id=\"p3\">[</bpt>x:ClassModifier Directive<ept id=\"p3\">](../../xaml-services/x-classmodifier-directive.md)</ept>.","pos":[1547,1823],"source":" Specifically, the XAML language defines the language features [x:Class Directive](../../xaml-services/x-class-directive.md), [x:Subclass Directive](../../xaml-services/x-subclass-directive.md), and [x:ClassModifier Directive](../../xaml-services/x-classmodifier-directive.md)."},{"content":"Exactly how the code should be produced, and how to integrate markup and code, is not part of what the XAML language specifies.","pos":[1824,1951]},{"content":"It is left up to frameworks such as WPF to determine how to integrate the code, how to use XAML in the application and programming models, and the build actions or other support that all this requires.","pos":[1952,2153]},{"pos":[2226,2291],"content":"Code-behind, Event Handler, and Partial Class Requirements in WPF","linkify":"Code-behind, Event Handler, and Partial Class Requirements in WPF","nodes":[{"content":"Code-behind, Event Handler, and Partial Class Requirements in WPF","pos":[0,65]}]},{"content":"The partial class must derive from the type that backs the root element.","pos":[2301,2373]},{"content":"Note that under the default behavior of the markup compile build actions, you can leave the derivation blank in the partial class definition on the code-behind side.","pos":[2383,2548]},{"content":"The compiled result will assume the page root's backing type to be the basis for the partial class, even if it not specified.","pos":[2549,2674]},{"content":"However, relying on this behavior is not a best practice.","pos":[2675,2732]},{"content":"The event handlers you write in the code-behind must be instance methods and cannot be static methods.","pos":[2742,2844]},{"content":"These methods must be defined by the partial class within the CLR namespace identified by <ph id=\"ph1\">`x:Class`</ph>.","pos":[2845,2945],"source":" These methods must be defined by the partial class within the CLR namespace identified by `x:Class`."},{"content":"You cannot qualify the name of an event handler to instruct a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor to look for an event handler for event wiring in a different class scope.","pos":[2946,3163],"source":" You cannot qualify the name of an event handler to instruct a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor to look for an event handler for event wiring in a different class scope."},{"content":"The handler must match the delegate for the appropriate event in the backing type system.","pos":[3173,3262]},{"content":"For the Microsoft Visual Basic language specifically, you can use the language-specific <ph id=\"ph1\">`Handles`</ph> keyword to associate handlers with instances and events in the handler declaration, instead of attaching handlers with attributes in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[3272,3575],"source":"For the Microsoft Visual Basic language specifically, you can use the language-specific `Handles` keyword to associate handlers with instances and events in the handler declaration, instead of attaching handlers with attributes in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]."},{"content":"However, this technique does have some limitations because the <ph id=\"ph1\">`Handles`</ph> keyword cannot support all of the specific features of the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> event system, such as certain routed event scenarios or attached events.","pos":[3576,3862],"source":" However, this technique does have some limitations because the `Handles` keyword cannot support all of the specific features of the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] event system, such as certain routed event scenarios or attached events."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Visual Basic and WPF Event Handling<ept id=\"p1\">](visual-basic-and-wpf-event-handling.md)</ept>.","pos":[3863,3958],"source":" For details, see [Visual Basic and WPF Event Handling](visual-basic-and-wpf-event-handling.md)."},{"pos":[3992,3998],"content":"x:Code","linkify":"x:Code","nodes":[{"content":"x:Code","pos":[0,6]}]},{"content":"<bpt id=\"p1\">[</bpt>x:Code<ept id=\"p1\">](../../xaml-services/x-code-intrinsic-xaml-type.md)</ept> is a directive element defined in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[4002,4168],"source":"[x:Code](../../xaml-services/x-code-intrinsic-xaml-type.md) is a directive element defined in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]."},{"content":"An <ph id=\"ph1\">`x:Code`</ph> directive element can contain inline programming code.","pos":[4169,4235],"source":" An `x:Code` directive element can contain inline programming code."},{"content":"The code that is defined inline can interact with the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> on the same page.","pos":[4236,4379],"source":" The code that is defined inline can interact with the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] on the same page."},{"content":"The following example illustrates inline C# code.","pos":[4380,4429]},{"content":"Notice that the code is inside the <ph id=\"ph1\">`x:Code`</ph> element and that the code must be surrounded by <ph id=\"ph2\">`&lt;CDATA[`</ph>...<ph id=\"ph3\">`]]&gt;`</ph> to escape the contents for <ph id=\"ph4\">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph>, so that a <ph id=\"ph5\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor (interpreting either the <ph id=\"ph6\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> schema or the <ph id=\"ph7\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> schema) will not try to interpret the contents literally as <ph id=\"ph8\">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph>.","pos":[4430,5053],"source":" Notice that the code is inside the `x:Code` element and that the code must be surrounded by `<CDATA[`...`]]>` to escape the contents for [!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)], so that a [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] processor (interpreting either the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] schema or the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] schema) will not try to interpret the contents literally as [!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]."},{"pos":[5257,5280],"content":"Inline Code Limitations","linkify":"Inline Code Limitations","nodes":[{"content":"Inline Code Limitations","pos":[0,23]}]},{"content":"You should consider avoiding or limiting the use of inline code.","pos":[5284,5348]},{"content":"In terms of architecture and coding philosophy, maintaining a separation between markup and code-behind keeps the designer and developer roles much more distinct.","pos":[5349,5511]},{"content":"On a more technical level, the code that you write for inline code can be awkward to write, because you are always writing into the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> generated partial class, and can only use the default XML namespace mappings.","pos":[5512,5793],"source":" On a more technical level, the code that you write for inline code can be awkward to write, because you are always writing into the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] generated partial class, and can only use the default XML namespace mappings."},{"content":"Because you cannot add <ph id=\"ph1\">`using`</ph> statements, you must fully qualify many of the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)]</ph> calls that you make.","pos":[5794,5962],"source":" Because you cannot add `using` statements, you must fully qualify many of the [!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)] calls that you make."},{"content":"The default <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> mappings include most but not all <ph id=\"ph2\">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> namespaces that are present in the <ph id=\"ph3\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> assemblies; you will have to fully qualify calls to types and members contained within the other CLR namespaces.","pos":[5963,6390],"source":" The default [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] mappings include most but not all [!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)] namespaces that are present in the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] assemblies; you will have to fully qualify calls to types and members contained within the other CLR namespaces."},{"content":"You also cannot define anything beyond the partial class in the inline code, and all user code entities you reference must exist as a member or variable within the generated partial class.","pos":[6391,6579]},{"content":"Other language specific programming features, such as macros or <ph id=\"ph1\">`#ifdef`</ph> against global variables or build variables, are also not available.","pos":[6580,6721],"source":" Other language specific programming features, such as macros or `#ifdef` against global variables or build variables, are also not available."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>x:Code Intrinsic XAML Type<ept id=\"p1\">](../../xaml-services/x-code-intrinsic-xaml-type.md)</ept>.","pos":[6722,6828],"source":" For more information, see [x:Code Intrinsic XAML Type](../../xaml-services/x-code-intrinsic-xaml-type.md)."},{"pos":[6837,6845],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6849,6892],"content":"<bpt id=\"p1\">[</bpt>XAML Overview (WPF)<ept id=\"p1\">](xaml-overview-wpf.md)</ept>","source":"[XAML Overview (WPF)](xaml-overview-wpf.md)"},{"pos":[6895,6974],"content":"<bpt id=\"p1\">[</bpt>x:Code Intrinsic XAML Type<ept id=\"p1\">](../../xaml-services/x-code-intrinsic-xaml-type.md)</ept>","source":"[x:Code Intrinsic XAML Type](../../xaml-services/x-code-intrinsic-xaml-type.md)"},{"pos":[6977,7059],"content":"<bpt id=\"p1\">[</bpt>Building a WPF Application<ept id=\"p1\">](../app-development/building-a-wpf-application-wpf.md)</ept>","source":"[Building a WPF Application](../app-development/building-a-wpf-application-wpf.md)"},{"pos":[7062,7111],"content":"<bpt id=\"p1\">[</bpt>XAML Syntax In Detail<ept id=\"p1\">](xaml-syntax-in-detail.md)</ept>","source":"[XAML Syntax In Detail](xaml-syntax-in-detail.md)"}]}