{"content":"---\ntitle: \"C# operators\"\nms.date: 04/04/2018\nf1_keywords: \n  - \"cs.operators\"\nhelpviewer_keywords: \n  - \"boolean operators [C#]\"\n  - \"expressions [C#], operators\"\n  - \"logical operators [C#]\"\n  - \"operators [C#]\"\n  - \"Visual C#, operators\"\n  - \"indirection operators [C#]\"\n  - \"assignment operators [C#]\"\n  - \"shift operators [C#]\"\n  - \"relational operators [C#]\"\n  - \"bitwise operators [C#]\"\n  - \"address operators [C#]\"\n  - \"keywords [C#], operators\"\n  - \"arithmetic operators [C#]\"\nms.assetid: 0301e31f-22ad-49af-ac3c-d5eae7f0ac43\n---\n# C# operators\n\nC# provides many operators, which are symbols that specify which operations (math, indexing, function call, etc.) to perform in an expression. You can [overload](../../programming-guide/statements-expressions-operators/overloadable-operators.md) many operators to change their meaning when applied to a user-defined type.\n\nOperations on integral types (such as `==`, `!=`, `<`, `>`, `&`, `|`) are generally allowed on enumeration (`enum`) types.\n\nThe sections below list the C# operators starting with the highest precedence to the lowest. The operators within each section share the same precedence level.\n\n## Primary operators\n\nThese are the highest precedence operators.\n\n[x.y](member-access-operator.md) – member access.\n\n[x?.y](null-conditional-operators.md) – null conditional member access. Returns `null` if the left-hand operand evaluates to `null`.\n\n[x?[y]](null-conditional-operators.md) - null conditional index access. Returns `null` if the left-hand operand evaluates to `null`.\n\n[f(x)](invocation-operator.md) – function invocation.\n\n[a&#91;x&#93;](index-operator.md) – aggregate object indexing.\n\n[x++](arithmetic-operators.md#increment-operator-) – postfix increment. Returns the value of x and then updates the storage location with the value of x that is one greater (typically adds the integer 1).\n\n[x--](arithmetic-operators.md#decrement-operator---) –  postfix decrement. Returns the value of x and then updates the storage location with the value of x that is one less (typically subtracts the integer 1).\n\n[new](../keywords/new-operator.md) – type instantiation.\n\n[typeof](../keywords/typeof.md) – returns the <xref:System.Type> object representing the operand.\n\n[checked](../keywords/checked.md) – enables overflow checking for integer operations.\n\n[unchecked](../keywords/unchecked.md) – disables overflow checking for integer operations. This is the default compiler behavior.\n\n[default(T)](../../programming-guide/statements-expressions-operators/default-value-expressions.md) – produces the default value of type T.\n\n[delegate](../../programming-guide/statements-expressions-operators/anonymous-methods.md) – declares and returns a delegate instance.\n\n[sizeof](../keywords/sizeof.md) – returns the size in bytes of the type operand.\n\n[->](dereference-operator.md) – pointer dereferencing combined with member access.\n\n## Unary operators\n\nThese operators have higher precedence than the next section and lower precedence than the previous section.\n\n[+x](addition-operator.md) – returns the value of x.\n\n[-x](subtraction-operator.md) – numeric negation.\n\n[\\!x](logical-negation-operator.md) – logical negation.\n\n[~x](bitwise-complement-operator.md) – bitwise complement.\n\n[++x](arithmetic-operators.md#increment-operator-) – prefix increment. Returns the value of x after updating the storage location with the value of x that is one greater (typically adds the integer 1).\n\n[--x](arithmetic-operators.md#decrement-operator---) – prefix decrement. Returns the value of x after updating the storage location with the value of x that is one less (typically subtracts the integer 1).\n\n[(T)x](invocation-operator.md) – type casting.\n\n[await](../keywords/await.md) – awaits a `Task`.\n\n[&x](and-operator.md) – address of.\n\n[*x](multiplication-operator.md) – dereferencing.\n\n## Multiplicative operators\n\nThese operators have higher precedence than the next section and lower precedence than the previous section.\n\n[x * y](arithmetic-operators.md#multiplication-operator-) – multiplication.\n\n[x / y](arithmetic-operators.md#division-operator-) – division. If the operands are integers, the result is an integer truncated toward zero (for example, `-7 / 2 is -3`).\n\n[x % y](arithmetic-operators.md#remainder-operator-) – remainder. If the operands are integers, this returns the remainder of dividing x by y.  If `q = x / y` and `r = x % y`, then `x = q * y + r`.\n\n## Additive operators\n\nThese operators have higher precedence than the next section and lower precedence than the previous section.\n\n[x + y](arithmetic-operators.md#addition-operator-) – addition.\n\n[x – y](arithmetic-operators.md#subtraction-operator--) – subtraction.\n\n## Shift operators\n\nThese operators have higher precedence than the next section and lower precedence than the previous section.\n\n[x <\\<  y](left-shift-operator.md) – shift bits left and fill with zero on the right.\n\n[x >> y](right-shift-operator.md) – shift bits right. If the left operand is `int` or `long`, then left bits are filled with the sign bit. If the left operand is `uint` or `ulong`, then left bits are filled with zero.\n\n## Relational and type-testing operators\n\nThese operators have higher precedence than the next section and lower precedence than the previous section.\n\n[x \\< y](less-than-operator.md) – less than (true if x is less than y).\n\n[x > y](greater-than-operator.md) – greater than (true if x is greater than y).\n\n[x \\<= y](less-than-equal-operator.md) – less than or equal to.\n\n[x >= y](greater-than-equal-operator.md) – greater than or equal to.\n\n[is](../keywords/is.md) – type compatibility. Returns true if the evaluated left operand can be cast to the type specified in the right operand (a static type).\n\n[as](../keywords/as.md) – type conversion. Returns the left operand cast to the type specified by the right operand (a static type), but `as` returns `null` where `(T)x` would throw an exception.\n\n## Equality operators\n\nThese operators have higher precedence than the next section and lower precedence than the previous section.\n\n[x == y](equality-operators.md#equality-operator-) – equality. By default, for reference types other than `string`, this returns reference equality (identity test). However, types can overload `==`, so if your intent is to test identity, it is best to use the `ReferenceEquals` method on `object`.\n\n[x != y](equality-operators.md#inequality-operator-) – not equal. See comment for `==`. If a type overloads `==`, then it must overload `!=`.\n\n## Logical AND operator\n\nThis operator has higher precedence than the next section and lower precedence than the previous section.\n\n[x & y](and-operator.md) – logical or bitwise AND. You can generally use this with integer types and `enum` types.\n\n## Logical XOR operator\n\nThis operator has higher precedence than the next section and lower precedence than the previous section.\n\n[x ^ y](xor-operator.md) – logical or bitwise XOR. You can generally use this with integer types and `enum` types.\n\n## Logical OR operator\n\nThis operator has higher precedence than the next section and lower precedence than the previous section.\n\n[x &#124; y](or-operator.md) – logical or bitwise OR. You can generally use this with integer types and `enum` types.\n\n## Conditional AND operator\n\nThis operator has higher precedence than the next section and lower precedence than the previous section.\n\n[x && y](conditional-and-operator.md) – logical AND. If the first operand evaluates to false, then C# does not evaluate the second operand.\n\n## Conditional OR operator\n\nThis operator has higher precedence than the next section and lower precedence than the previous section.\n\n[x &#124;&#124; y](conditional-or-operator.md) – logical OR. If the first operand evaluates to true, then C# does not evaluate the second operand.\n\n## Null-coalescing operator\n\nThis operator has higher precedence than the next section and lower precedence than the previous section.\n\n[x ?? y](null-coalescing-operator.md) – returns `x` if it is non-`null`; otherwise, returns `y`.\n\n## Conditional operator\n\nThis operator has higher precedence than the next section and lower precedence than the previous section.\n\n[t ? x : y](conditional-operator.md) – if test `t` evaluates to true, then evaluate and return `x`; otherwise, evaluate and return `y`.\n\n## Assignment and Lambda operators\n\nThese operators have higher precedence than the next section and lower precedence than the previous section.\n\n[x = y](assignment-operator.md) – assignment.\n\n[x += y](addition-assignment-operator.md) – increment. Add the value of `y` to the value of `x`, store the result in `x`, and return the new value. If `x` designates an `event`, then `y` must be an appropriate function that C# adds as an event handler.\n\n[x -= y](subtraction-assignment-operator.md) – decrement. Subtract the value of `y` from the value of `x`, store the result in `x`, and return the new value. If `x` designates an `event`, then `y` must be an appropriate function that C# removes as an event handler\n\n[x *= y](multiplication-assignment-operator.md) – multiplication assignment. Multiply the value of `y` to the value of `x`, store the result in `x`, and return the new value.\n\n[x /= y](arithmetic-operators.md#compound-assignment) – division assignment. Divide the value of `x` by the value of `y`, store the result in `x`, and return the new value.\n\n[x %= y](arithmetic-operators.md#compound-assignment) – remainder assignment. Divide the value of `x` by the value of `y`, store the remainder in `x`, and return the new value.\n\n[x &= y](and-assignment-operator.md) – AND assignment. AND the value of `y` with the value of `x`, store the result in `x`, and return the new value.\n\n[x &#124;= y](or-assignment-operator.md) – OR assignment. OR the value of `y` with the value of `x`, store the result in `x`, and return the new value.\n\n[x ^= y](xor-assignment-operator.md) – XOR assignment. XOR the value of `y` with the value of `x`, store the result in `x`, and return the new value.\n\n[x <<= y](left-shift-assignment-operator.md) – left-shift assignment. Shift the value of `x` left by `y` places, store the result in `x`, and return the new value.\n\n[x >>= y](right-shift-assignment-operator.md) – right-shift assignment. Shift the value of `x` right by `y` places, store the result in `x`, and return the new value.\n\n[=>](lambda-operator.md) – lambda declaration.\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C#](../../index.md)\n- [Overloadable Operators](../../programming-guide/statements-expressions-operators/overloadable-operators.md)\n- [C# Keywords](../keywords/index.md)","nodes":[{"pos":[4,534],"embed":true,"restype":"x-metadata","content":"title: \"C# operators\"\nms.date: 04/04/2018\nf1_keywords: \n  - \"cs.operators\"\nhelpviewer_keywords: \n  - \"boolean operators [C#]\"\n  - \"expressions [C#], operators\"\n  - \"logical operators [C#]\"\n  - \"operators [C#]\"\n  - \"Visual C#, operators\"\n  - \"indirection operators [C#]\"\n  - \"assignment operators [C#]\"\n  - \"shift operators [C#]\"\n  - \"relational operators [C#]\"\n  - \"bitwise operators [C#]\"\n  - \"address operators [C#]\"\n  - \"keywords [C#], operators\"\n  - \"arithmetic operators [C#]\"\nms.assetid: 0301e31f-22ad-49af-ac3c-d5eae7f0ac43","nodes":[{"content":"C# operators","nodes":[{"pos":[0,12],"content":"C# operators","nodes":[{"content":"C# operators","pos":[0,12]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[541,553],"content":"C# operators","linkify":"C# operators","nodes":[{"content":"C# operators","pos":[0,12]}]},{"content":"C# provides many operators, which are symbols that specify which operations (math, indexing, function call, etc.) to perform in an expression.","pos":[555,697]},{"content":"You can <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/overloadable-operators.md)</ept> many operators to change their meaning when applied to a user-defined type.","pos":[698,876],"source":" You can [overload](../../programming-guide/statements-expressions-operators/overloadable-operators.md) many operators to change their meaning when applied to a user-defined type."},{"pos":[878,1000],"content":"Operations on integral types (such as <ph id=\"ph1\">`==`</ph>, <ph id=\"ph2\">`!=`</ph>, <ph id=\"ph3\">`&lt;`</ph>, <ph id=\"ph4\">`&gt;`</ph>, <ph id=\"ph5\">`&amp;`</ph>, <ph id=\"ph6\">`|`</ph>) are generally allowed on enumeration (<ph id=\"ph7\">`enum`</ph>) types.","source":"Operations on integral types (such as `==`, `!=`, `<`, `>`, `&`, `|`) are generally allowed on enumeration (`enum`) types."},{"content":"The sections below list the C# operators starting with the highest precedence to the lowest.","pos":[1002,1094]},{"content":"The operators within each section share the same precedence level.","pos":[1095,1161]},{"pos":[1166,1183],"content":"Primary operators","linkify":"Primary operators","nodes":[{"content":"Primary operators","pos":[0,17]}]},{"content":"These are the highest precedence operators.","pos":[1185,1228]},{"pos":[1230,1279],"content":"<bpt id=\"p1\">[</bpt>x.y<ept id=\"p1\">](member-access-operator.md)</ept> – member access.","source":"[x.y](member-access-operator.md) – member access."},{"content":"<bpt id=\"p1\">[</bpt>x?.y<ept id=\"p1\">](null-conditional-operators.md)</ept> – null conditional member access.","pos":[1281,1352],"source":"[x?.y](null-conditional-operators.md) – null conditional member access."},{"content":"Returns <ph id=\"ph1\">`null`</ph> if the left-hand operand evaluates to <ph id=\"ph2\">`null`</ph>.","pos":[1353,1413],"source":" Returns `null` if the left-hand operand evaluates to `null`."},{"content":"<bpt id=\"p1\">[</bpt>x?[y]<ept id=\"p1\">](null-conditional-operators.md)</ept> - null conditional index access.","pos":[1415,1486],"source":"[x?[y]](null-conditional-operators.md) - null conditional index access."},{"content":"Returns <ph id=\"ph1\">`null`</ph> if the left-hand operand evaluates to <ph id=\"ph2\">`null`</ph>.","pos":[1487,1547],"source":" Returns `null` if the left-hand operand evaluates to `null`."},{"pos":[1549,1602],"content":"<bpt id=\"p1\">[</bpt>f(x)<ept id=\"p1\">](invocation-operator.md)</ept> – function invocation.","source":"[f(x)](invocation-operator.md) – function invocation."},{"pos":[1604,1666],"content":"<bpt id=\"p1\">[</bpt>a&amp;#91;x&amp;#93;<ept id=\"p1\">](index-operator.md)</ept> – aggregate object indexing.","source":"[a&#91;x&#93;](index-operator.md) – aggregate object indexing."},{"content":"<bpt id=\"p1\">[</bpt>x++<ept id=\"p1\">](arithmetic-operators.md#increment-operator-)</ept> – postfix increment.","pos":[1668,1739],"source":"[x++](arithmetic-operators.md#increment-operator-) – postfix increment."},{"content":"Returns the value of x and then updates the storage location with the value of x that is one greater (typically adds the integer 1).","pos":[1740,1872]},{"content":"<bpt id=\"p1\">[</bpt>x--<ept id=\"p1\">](arithmetic-operators.md#decrement-operator---)</ept> –  postfix decrement.","pos":[1874,1948],"source":"[x--](arithmetic-operators.md#decrement-operator---) –  postfix decrement."},{"content":"Returns the value of x and then updates the storage location with the value of x that is one less (typically subtracts the integer 1).","pos":[1949,2083]},{"pos":[2085,2141],"content":"<bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](../keywords/new-operator.md)</ept> – type instantiation.","source":"[new](../keywords/new-operator.md) – type instantiation."},{"pos":[2143,2240],"content":"<bpt id=\"p1\">[</bpt>typeof<ept id=\"p1\">](../keywords/typeof.md)</ept> – returns the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object representing the operand.","source":"[typeof](../keywords/typeof.md) – returns the <xref:System.Type> object representing the operand."},{"pos":[2242,2327],"content":"<bpt id=\"p1\">[</bpt>checked<ept id=\"p1\">](../keywords/checked.md)</ept> – enables overflow checking for integer operations.","source":"[checked](../keywords/checked.md) – enables overflow checking for integer operations."},{"content":"<bpt id=\"p1\">[</bpt>unchecked<ept id=\"p1\">](../keywords/unchecked.md)</ept> – disables overflow checking for integer operations.","pos":[2329,2419],"source":"[unchecked](../keywords/unchecked.md) – disables overflow checking for integer operations."},{"content":"This is the default compiler behavior.","pos":[2420,2458]},{"pos":[2460,2599],"content":"<bpt id=\"p1\">[</bpt>default(T)<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/default-value-expressions.md)</ept> – produces the default value of type T.","source":"[default(T)](../../programming-guide/statements-expressions-operators/default-value-expressions.md) – produces the default value of type T."},{"pos":[2601,2734],"content":"<bpt id=\"p1\">[</bpt>delegate<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/anonymous-methods.md)</ept> – declares and returns a delegate instance.","source":"[delegate](../../programming-guide/statements-expressions-operators/anonymous-methods.md) – declares and returns a delegate instance."},{"pos":[2736,2816],"content":"<bpt id=\"p1\">[</bpt>sizeof<ept id=\"p1\">](../keywords/sizeof.md)</ept> – returns the size in bytes of the type operand.","source":"[sizeof](../keywords/sizeof.md) – returns the size in bytes of the type operand."},{"pos":[2818,2900],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">-&gt;</ph><ept id=\"p1\">](dereference-operator.md)</ept> – pointer dereferencing combined with member access.","source":"[->](dereference-operator.md) – pointer dereferencing combined with member access."},{"pos":[2905,2920],"content":"Unary operators","linkify":"Unary operators","nodes":[{"content":"Unary operators","pos":[0,15]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[2922,3030]},{"pos":[3032,3084],"content":"<bpt id=\"p1\">[</bpt>+x<ept id=\"p1\">](addition-operator.md)</ept> – returns the value of x.","source":"[+x](addition-operator.md) – returns the value of x."},{"pos":[3086,3135],"content":"<bpt id=\"p1\">[</bpt>-x<ept id=\"p1\">](subtraction-operator.md)</ept> – numeric negation.","source":"[-x](subtraction-operator.md) – numeric negation."},{"pos":[3137,3192],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\!</ph>x<ept id=\"p1\">](logical-negation-operator.md)</ept> – logical negation.","source":"[\\!x](logical-negation-operator.md) – logical negation."},{"pos":[3194,3252],"content":"<bpt id=\"p1\">[</bpt>~x<ept id=\"p1\">](bitwise-complement-operator.md)</ept> – bitwise complement.","source":"[~x](bitwise-complement-operator.md) – bitwise complement."},{"content":"<bpt id=\"p1\">[</bpt>++x<ept id=\"p1\">](arithmetic-operators.md#increment-operator-)</ept> – prefix increment.","pos":[3254,3324],"source":"[++x](arithmetic-operators.md#increment-operator-) – prefix increment."},{"content":"Returns the value of x after updating the storage location with the value of x that is one greater (typically adds the integer 1).","pos":[3325,3455]},{"content":"<bpt id=\"p1\">[</bpt>--x<ept id=\"p1\">](arithmetic-operators.md#decrement-operator---)</ept> – prefix decrement.","pos":[3457,3529],"source":"[--x](arithmetic-operators.md#decrement-operator---) – prefix decrement."},{"content":"Returns the value of x after updating the storage location with the value of x that is one less (typically subtracts the integer 1).","pos":[3530,3662]},{"pos":[3664,3710],"content":"<bpt id=\"p1\">[</bpt>(T)x<ept id=\"p1\">](invocation-operator.md)</ept> – type casting.","source":"[(T)x](invocation-operator.md) – type casting."},{"pos":[3712,3760],"content":"<bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](../keywords/await.md)</ept> – awaits a <ph id=\"ph1\">`Task`</ph>.","source":"[await](../keywords/await.md) – awaits a `Task`."},{"pos":[3762,3797],"content":"<bpt id=\"p1\">[</bpt>&amp;x<ept id=\"p1\">](and-operator.md)</ept> – address of.","source":"[&x](and-operator.md) – address of."},{"pos":[3799,3848],"content":"<bpt id=\"p1\">[</bpt>*x<ept id=\"p1\">](multiplication-operator.md)</ept> – dereferencing.","source":"[*x](multiplication-operator.md) – dereferencing."},{"pos":[3853,3877],"content":"Multiplicative operators","linkify":"Multiplicative operators","nodes":[{"content":"Multiplicative operators","pos":[0,24]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[3879,3987]},{"pos":[3989,4064],"content":"<bpt id=\"p1\">[</bpt>x * y<ept id=\"p1\">](arithmetic-operators.md#multiplication-operator-)</ept> – multiplication.","source":"[x * y](arithmetic-operators.md#multiplication-operator-) – multiplication."},{"content":"<bpt id=\"p1\">[</bpt>x / y<ept id=\"p1\">](arithmetic-operators.md#division-operator-)</ept> – division.","pos":[4066,4129],"source":"[x / y](arithmetic-operators.md#division-operator-) – division."},{"content":"If the operands are integers, the result is an integer truncated toward zero (for example, <ph id=\"ph1\">`-7 / 2 is -3`</ph>).","pos":[4130,4237],"source":" If the operands are integers, the result is an integer truncated toward zero (for example, `-7 / 2 is -3`)."},{"content":"<bpt id=\"p1\">[</bpt>x % y<ept id=\"p1\">](arithmetic-operators.md#remainder-operator-)</ept> – remainder.","pos":[4239,4304],"source":"[x % y](arithmetic-operators.md#remainder-operator-) – remainder."},{"content":"If the operands are integers, this returns the remainder of dividing x by y.","pos":[4305,4381]},{"content":"If <ph id=\"ph1\">`q = x / y`</ph> and <ph id=\"ph2\">`r = x % y`</ph>, then <ph id=\"ph3\">`x = q * y + r`</ph>.","pos":[4383,4436],"source":"  If `q = x / y` and `r = x % y`, then `x = q * y + r`."},{"pos":[4441,4459],"content":"Additive operators","linkify":"Additive operators","nodes":[{"content":"Additive operators","pos":[0,18]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[4461,4569]},{"pos":[4571,4634],"content":"<bpt id=\"p1\">[</bpt>x + y<ept id=\"p1\">](arithmetic-operators.md#addition-operator-)</ept> – addition.","source":"[x + y](arithmetic-operators.md#addition-operator-) – addition."},{"pos":[4636,4706],"content":"<bpt id=\"p1\">[</bpt>x – y<ept id=\"p1\">](arithmetic-operators.md#subtraction-operator--)</ept> – subtraction.","source":"[x – y](arithmetic-operators.md#subtraction-operator--) – subtraction."},{"pos":[4711,4726],"content":"Shift operators","linkify":"Shift operators","nodes":[{"content":"Shift operators","pos":[0,15]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[4728,4836]},{"pos":[4838,4923],"content":"<bpt id=\"p1\">[</bpt>x &lt;<ph id=\"ph1\">\\&lt;</ph>  y<ept id=\"p1\">](left-shift-operator.md)</ept> – shift bits left and fill with zero on the right.","source":"[x <\\<  y](left-shift-operator.md) – shift bits left and fill with zero on the right."},{"content":"<bpt id=\"p1\">[</bpt>x &gt;&gt; y<ept id=\"p1\">](right-shift-operator.md)</ept> – shift bits right.","pos":[4925,4978],"source":"[x >> y](right-shift-operator.md) – shift bits right."},{"content":"If the left operand is <ph id=\"ph1\">`int`</ph> or <ph id=\"ph2\">`long`</ph>, then left bits are filled with the sign bit.","pos":[4979,5063],"source":" If the left operand is `int` or `long`, then left bits are filled with the sign bit."},{"content":"If the left operand is <ph id=\"ph1\">`uint`</ph> or <ph id=\"ph2\">`ulong`</ph>, then left bits are filled with zero.","pos":[5064,5142],"source":" If the left operand is `uint` or `ulong`, then left bits are filled with zero."},{"pos":[5147,5184],"content":"Relational and type-testing operators","linkify":"Relational and type-testing operators","nodes":[{"content":"Relational and type-testing operators","pos":[0,37]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[5186,5294]},{"pos":[5296,5367],"content":"<bpt id=\"p1\">[</bpt>x <ph id=\"ph1\">\\&lt;</ph> y<ept id=\"p1\">](less-than-operator.md)</ept> – less than (true if x is less than y).","source":"[x \\< y](less-than-operator.md) – less than (true if x is less than y)."},{"pos":[5369,5448],"content":"<bpt id=\"p1\">[</bpt>x &gt; y<ept id=\"p1\">](greater-than-operator.md)</ept> – greater than (true if x is greater than y).","source":"[x > y](greater-than-operator.md) – greater than (true if x is greater than y)."},{"pos":[5450,5513],"content":"<bpt id=\"p1\">[</bpt>x <ph id=\"ph1\">\\&lt;</ph>= y<ept id=\"p1\">](less-than-equal-operator.md)</ept> – less than or equal to.","source":"[x \\<= y](less-than-equal-operator.md) – less than or equal to."},{"pos":[5515,5583],"content":"<bpt id=\"p1\">[</bpt>x &gt;= y<ept id=\"p1\">](greater-than-equal-operator.md)</ept> – greater than or equal to.","source":"[x >= y](greater-than-equal-operator.md) – greater than or equal to."},{"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../keywords/is.md)</ept> – type compatibility.","pos":[5585,5630],"source":"[is](../keywords/is.md) – type compatibility."},{"content":"Returns true if the evaluated left operand can be cast to the type specified in the right operand (a static type).","pos":[5631,5745]},{"content":"<bpt id=\"p1\">[</bpt>as<ept id=\"p1\">](../keywords/as.md)</ept> – type conversion.","pos":[5747,5789],"source":"[as](../keywords/as.md) – type conversion."},{"content":"Returns the left operand cast to the type specified by the right operand (a static type), but <ph id=\"ph1\">`as`</ph> returns <ph id=\"ph2\">`null`</ph> where <ph id=\"ph3\">`(T)x`</ph> would throw an exception.","pos":[5790,5942],"source":" Returns the left operand cast to the type specified by the right operand (a static type), but `as` returns `null` where `(T)x` would throw an exception."},{"pos":[5947,5965],"content":"Equality operators","linkify":"Equality operators","nodes":[{"content":"Equality operators","pos":[0,18]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[5967,6075]},{"content":"<bpt id=\"p1\">[</bpt>x == y<ept id=\"p1\">](equality-operators.md#equality-operator-)</ept> – equality.","pos":[6077,6139],"source":"[x == y](equality-operators.md#equality-operator-) – equality."},{"content":"By default, for reference types other than <ph id=\"ph1\">`string`</ph>, this returns reference equality (identity test).","pos":[6140,6241],"source":" By default, for reference types other than `string`, this returns reference equality (identity test)."},{"content":"However, types can overload <ph id=\"ph1\">`==`</ph>, so if your intent is to test identity, it is best to use the <ph id=\"ph2\">`ReferenceEquals`</ph> method on <ph id=\"ph3\">`object`</ph>.","pos":[6242,6374],"source":" However, types can overload `==`, so if your intent is to test identity, it is best to use the `ReferenceEquals` method on `object`."},{"content":"<bpt id=\"p1\">[</bpt>x != y<ept id=\"p1\">](equality-operators.md#inequality-operator-)</ept> – not equal.","pos":[6376,6441],"source":"[x != y](equality-operators.md#inequality-operator-) – not equal."},{"content":"See comment for <ph id=\"ph1\">`==`</ph>.","pos":[6442,6463],"source":" See comment for `==`."},{"content":"If a type overloads <ph id=\"ph1\">`==`</ph>, then it must overload <ph id=\"ph2\">`!=`</ph>.","pos":[6464,6517],"source":" If a type overloads `==`, then it must overload `!=`."},{"pos":[6522,6542],"content":"Logical AND operator","linkify":"Logical AND operator","nodes":[{"content":"Logical AND operator","pos":[0,20]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[6544,6649]},{"content":"<bpt id=\"p1\">[</bpt>x &amp; y<ept id=\"p1\">](and-operator.md)</ept> – logical or bitwise AND.","pos":[6651,6701],"source":"[x & y](and-operator.md) – logical or bitwise AND."},{"content":"You can generally use this with integer types and <ph id=\"ph1\">`enum`</ph> types.","pos":[6702,6765],"source":" You can generally use this with integer types and `enum` types."},{"pos":[6770,6790],"content":"Logical XOR operator","linkify":"Logical XOR operator","nodes":[{"content":"Logical XOR operator","pos":[0,20]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[6792,6897]},{"content":"<bpt id=\"p1\">[</bpt>x ^ y<ept id=\"p1\">](xor-operator.md)</ept> – logical or bitwise XOR.","pos":[6899,6949],"source":"[x ^ y](xor-operator.md) – logical or bitwise XOR."},{"content":"You can generally use this with integer types and <ph id=\"ph1\">`enum`</ph> types.","pos":[6950,7013],"source":" You can generally use this with integer types and `enum` types."},{"pos":[7018,7037],"content":"Logical OR operator","linkify":"Logical OR operator","nodes":[{"content":"Logical OR operator","pos":[0,19]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[7039,7144]},{"content":"<bpt id=\"p1\">[</bpt>x &amp;#124; y<ept id=\"p1\">](or-operator.md)</ept> – logical or bitwise OR.","pos":[7146,7199],"source":"[x &#124; y](or-operator.md) – logical or bitwise OR."},{"content":"You can generally use this with integer types and <ph id=\"ph1\">`enum`</ph> types.","pos":[7200,7263],"source":" You can generally use this with integer types and `enum` types."},{"pos":[7268,7292],"content":"Conditional AND operator","linkify":"Conditional AND operator","nodes":[{"content":"Conditional AND operator","pos":[0,24]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[7294,7399]},{"content":"<bpt id=\"p1\">[</bpt>x &amp;&amp; y<ept id=\"p1\">](conditional-and-operator.md)</ept> – logical AND.","pos":[7401,7453],"source":"[x && y](conditional-and-operator.md) – logical AND."},{"content":"If the first operand evaluates to false, then C# does not evaluate the second operand.","pos":[7454,7540]},{"pos":[7545,7568],"content":"Conditional OR operator","linkify":"Conditional OR operator","nodes":[{"content":"Conditional OR operator","pos":[0,23]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[7570,7675]},{"content":"<bpt id=\"p1\">[</bpt>x &amp;#124;&amp;#124; y<ept id=\"p1\">](conditional-or-operator.md)</ept> – logical OR.","pos":[7677,7737],"source":"[x &#124;&#124; y](conditional-or-operator.md) – logical OR."},{"content":"If the first operand evaluates to true, then C# does not evaluate the second operand.","pos":[7738,7823]},{"pos":[7828,7852],"content":"Null-coalescing operator","linkify":"Null-coalescing operator","nodes":[{"content":"Null-coalescing operator","pos":[0,24]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[7854,7959]},{"pos":[7961,8057],"content":"<bpt id=\"p1\">[</bpt>x ?? y<ept id=\"p1\">](null-coalescing-operator.md)</ept> – returns <ph id=\"ph1\">`x`</ph> if it is non-<ph id=\"ph2\">`null`</ph>; otherwise, returns <ph id=\"ph3\">`y`</ph>.","source":"[x ?? y](null-coalescing-operator.md) – returns `x` if it is non-`null`; otherwise, returns `y`."},{"pos":[8062,8082],"content":"Conditional operator","linkify":"Conditional operator","nodes":[{"content":"Conditional operator","pos":[0,20]}]},{"content":"This operator has higher precedence than the next section and lower precedence than the previous section.","pos":[8084,8189]},{"pos":[8191,8326],"content":"<bpt id=\"p1\">[</bpt>t ? x : y<ept id=\"p1\">](conditional-operator.md)</ept> – if test <ph id=\"ph1\">`t`</ph> evaluates to true, then evaluate and return <ph id=\"ph2\">`x`</ph>; otherwise, evaluate and return <ph id=\"ph3\">`y`</ph>.","source":"[t ? x : y](conditional-operator.md) – if test `t` evaluates to true, then evaluate and return `x`; otherwise, evaluate and return `y`."},{"pos":[8331,8362],"content":"Assignment and Lambda operators","linkify":"Assignment and Lambda operators","nodes":[{"content":"Assignment and Lambda operators","pos":[0,31]}]},{"content":"These operators have higher precedence than the next section and lower precedence than the previous section.","pos":[8364,8472]},{"pos":[8474,8519],"content":"<bpt id=\"p1\">[</bpt>x = y<ept id=\"p1\">](assignment-operator.md)</ept> – assignment.","source":"[x = y](assignment-operator.md) – assignment."},{"content":"<bpt id=\"p1\">[</bpt>x += y<ept id=\"p1\">](addition-assignment-operator.md)</ept> – increment.","pos":[8521,8575],"source":"[x += y](addition-assignment-operator.md) – increment."},{"content":"Add the value of <ph id=\"ph1\">`y`</ph> to the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[8576,8668],"source":" Add the value of `y` to the value of `x`, store the result in `x`, and return the new value."},{"content":"If <ph id=\"ph1\">`x`</ph> designates an <ph id=\"ph2\">`event`</ph>, then <ph id=\"ph3\">`y`</ph> must be an appropriate function that C# adds as an event handler.","pos":[8669,8773],"source":" If `x` designates an `event`, then `y` must be an appropriate function that C# adds as an event handler."},{"content":"<bpt id=\"p1\">[</bpt>x -= y<ept id=\"p1\">](subtraction-assignment-operator.md)</ept> – decrement.","pos":[8775,8832],"source":"[x -= y](subtraction-assignment-operator.md) – decrement."},{"content":"Subtract the value of <ph id=\"ph1\">`y`</ph> from the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[8833,8932],"source":" Subtract the value of `y` from the value of `x`, store the result in `x`, and return the new value."},{"content":"If <ph id=\"ph1\">`x`</ph> designates an <ph id=\"ph2\">`event`</ph>, then <ph id=\"ph3\">`y`</ph> must be an appropriate function that C# removes as an event handler","pos":[8933,9039],"source":" If `x` designates an `event`, then `y` must be an appropriate function that C# removes as an event handler"},{"content":"<bpt id=\"p1\">[</bpt>x *= y<ept id=\"p1\">](multiplication-assignment-operator.md)</ept> – multiplication assignment.","pos":[9041,9117],"source":"[x *= y](multiplication-assignment-operator.md) – multiplication assignment."},{"content":"Multiply the value of <ph id=\"ph1\">`y`</ph> to the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[9118,9215],"source":" Multiply the value of `y` to the value of `x`, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x /= y<ept id=\"p1\">](arithmetic-operators.md#compound-assignment)</ept> – division assignment.","pos":[9217,9293],"source":"[x /= y](arithmetic-operators.md#compound-assignment) – division assignment."},{"content":"Divide the value of <ph id=\"ph1\">`x`</ph> by the value of <ph id=\"ph2\">`y`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[9294,9389],"source":" Divide the value of `x` by the value of `y`, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x %= y<ept id=\"p1\">](arithmetic-operators.md#compound-assignment)</ept> – remainder assignment.","pos":[9391,9468],"source":"[x %= y](arithmetic-operators.md#compound-assignment) – remainder assignment."},{"content":"Divide the value of <ph id=\"ph1\">`x`</ph> by the value of <ph id=\"ph2\">`y`</ph>, store the remainder in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[9469,9567],"source":" Divide the value of `x` by the value of `y`, store the remainder in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x &amp;= y<ept id=\"p1\">](and-assignment-operator.md)</ept> – AND assignment.","pos":[9569,9623],"source":"[x &= y](and-assignment-operator.md) – AND assignment."},{"content":"AND the value of <ph id=\"ph1\">`y`</ph> with the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[9624,9718],"source":" AND the value of `y` with the value of `x`, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x &amp;#124;= y<ept id=\"p1\">](or-assignment-operator.md)</ept> – OR assignment.","pos":[9720,9777],"source":"[x &#124;= y](or-assignment-operator.md) – OR assignment."},{"content":"OR the value of <ph id=\"ph1\">`y`</ph> with the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[9778,9871],"source":" OR the value of `y` with the value of `x`, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x ^= y<ept id=\"p1\">](xor-assignment-operator.md)</ept> – XOR assignment.","pos":[9873,9927],"source":"[x ^= y](xor-assignment-operator.md) – XOR assignment."},{"content":"XOR the value of <ph id=\"ph1\">`y`</ph> with the value of <ph id=\"ph2\">`x`</ph>, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[9928,10022],"source":" XOR the value of `y` with the value of `x`, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x &lt;&lt;= y<ept id=\"p1\">](left-shift-assignment-operator.md)</ept> – left-shift assignment.","pos":[10024,10093],"source":"[x <<= y](left-shift-assignment-operator.md) – left-shift assignment."},{"content":"Shift the value of <ph id=\"ph1\">`x`</ph> left by <ph id=\"ph2\">`y`</ph> places, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[10094,10187],"source":" Shift the value of `x` left by `y` places, store the result in `x`, and return the new value."},{"content":"<bpt id=\"p1\">[</bpt>x &gt;&gt;= y<ept id=\"p1\">](right-shift-assignment-operator.md)</ept> – right-shift assignment.","pos":[10189,10260],"source":"[x >>= y](right-shift-assignment-operator.md) – right-shift assignment."},{"content":"Shift the value of <ph id=\"ph1\">`x`</ph> right by <ph id=\"ph2\">`y`</ph> places, store the result in <ph id=\"ph3\">`x`</ph>, and return the new value.","pos":[10261,10355],"source":" Shift the value of `x` right by `y` places, store the result in `x`, and return the new value."},{"pos":[10357,10403],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">=&gt;</ph><ept id=\"p1\">](lambda-operator.md)</ept> – lambda declaration.","source":"[=>](lambda-operator.md) – lambda declaration."},{"pos":[10408,10416],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[10420,10447],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[10450,10506],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[10509,10529],"content":"<bpt id=\"p1\">[</bpt>C#<ept id=\"p1\">](../../index.md)</ept>","source":"[C#](../../index.md)"},{"pos":[10532,10640],"content":"<bpt id=\"p1\">[</bpt>Overloadable Operators<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/overloadable-operators.md)</ept>","source":"[Overloadable Operators](../../programming-guide/statements-expressions-operators/overloadable-operators.md)"},{"pos":[10643,10678],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../keywords/index.md)</ept>","source":"[C# Keywords](../keywords/index.md)"}]}