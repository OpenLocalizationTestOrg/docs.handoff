{"content":"---\ntitle: \"Pointer Conversions (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"pointers [C#], conversions\"\nms.assetid: f0e87502-477a-4ede-a31f-7a3e262e46fb\ncaps.latest.revision: 17\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Pointer Conversions (C# Programming Guide)\nThe following table shows the predefined implicit pointer conversions. Implicit conversions might occur in many situations, including method invoking and assignment statements.  \n  \n## Implicit pointer conversions  \n  \n|From|To|  \n|----------|--------|  \n|Any pointer type|void*|  \n|null|Any pointer type|  \n  \n Explicit pointer conversion is used to perform conversions, for which there is no implicit conversion, by using a cast expression. The following table shows these conversions.  \n  \n## Explicit pointer conversions  \n  \n|From|To|  \n|----------|--------|  \n|Any pointer type|Any other pointer type|  \n|sbyte, byte, short, ushort, int, uint, long, or ulong|Any pointer type|  \n|Any pointer type|sbyte, byte, short, ushort, int, uint, long, or ulong|  \n  \n## Example  \n In the following example, a pointer to `int` is converted to a pointer to `byte`. Notice that the pointer points to the lowest addressed byte of the variable. When you successively increment the result, up to the size of `int` (4 bytes), you can display the remaining bytes of the variable.  \n  \n [!code-cs[csProgGuidePointers#3](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/pointer-conversions_1.cs)]  \n  \n [!code-cs[csProgGuidePointers#4](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/pointer-conversions_2.cs)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)   \n [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)   \n [Types](../../../csharp/language-reference/keywords/types.md)   \n [unsafe](../../../csharp/language-reference/keywords/unsafe.md)   \n [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)   \n [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)","nodes":[{"pos":[12,71],"content":"Pointer Conversions (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Pointer Conversions (C# Programming Guide) | Microsoft Docs","pos":[0,59]}]},{"pos":[554,596],"content":"Pointer Conversions (C# Programming Guide)","linkify":"Pointer Conversions (C# Programming Guide)","nodes":[{"content":"Pointer Conversions (C# Programming Guide)","pos":[0,42]}]},{"content":"The following table shows the predefined implicit pointer conversions.","pos":[597,667]},{"content":"Implicit conversions might occur in many situations, including method invoking and assignment statements.","pos":[668,773]},{"pos":[782,810],"content":"Implicit pointer conversions","linkify":"Implicit pointer conversions","nodes":[{"content":"Implicit pointer conversions","pos":[0,28]}]},{"content":"From","pos":[817,821]},{"content":"To","pos":[822,824]},{"content":"Any pointer type","pos":[853,869]},{"content":"void*","pos":[870,875]},{"content":"null","pos":[880,884]},{"content":"Any pointer type","pos":[885,901]},{"content":"Explicit pointer conversion is used to perform conversions, for which there is no implicit conversion, by using a cast expression.","pos":[909,1039]},{"content":"The following table shows these conversions.","pos":[1040,1084]},{"pos":[1093,1121],"content":"Explicit pointer conversions","linkify":"Explicit pointer conversions","nodes":[{"content":"Explicit pointer conversions","pos":[0,28]}]},{"content":"From","pos":[1128,1132]},{"content":"To","pos":[1133,1135]},{"content":"Any pointer type","pos":[1164,1180]},{"content":"Any other pointer type","pos":[1181,1203]},{"content":"sbyte, byte, short, ushort, int, uint, long, or ulong","pos":[1208,1261]},{"content":"Any pointer type","pos":[1262,1278]},{"content":"Any pointer type","pos":[1283,1299]},{"content":"sbyte, byte, short, ushort, int, uint, long, or ulong","pos":[1300,1353]},{"pos":[1363,1370],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, a pointer to <ph id=\"ph1\">`int`</ph> is converted to a pointer to <ph id=\"ph2\">`byte`</ph>.","pos":[1374,1455],"source":"In the following example, a pointer to `int` is converted to a pointer to `byte`."},{"content":"Notice that the pointer points to the lowest addressed byte of the variable.","pos":[1456,1532]},{"content":"When you successively increment the result, up to the size of <ph id=\"ph1\">`int`</ph> (4 bytes), you can display the remaining bytes of the variable.","pos":[1533,1664],"source":" When you successively increment the result, up to the size of `int` (4 bytes), you can display the remaining bytes of the variable."},{"pos":[1671,1804],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuidePointers#3<ept id=\"p2\">](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/pointer-conversions_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuidePointers#3](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/pointer-conversions_1.cs)]"},{"pos":[1811,1944],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuidePointers#4<ept id=\"p2\">](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/pointer-conversions_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuidePointers#4](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/pointer-conversions_2.cs)]"},{"pos":[1953,1961],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1965,2032],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Pointer Expressions<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[2035,2137],"source":" [Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Pointer types<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2140,2230],"source":" [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2233,2296],"source":" [Types](../../../csharp/language-reference/keywords/types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept><ph id=\"ph1\"> </ph>","pos":[2299,2364],"source":" [unsafe](../../../csharp/language-reference/keywords/unsafe.md) "},{"content":"<bpt id=\"p1\"> [</bpt>fixed Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2367,2450],"source":" [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>stackalloc<ept id=\"p1\">](../../../csharp/language-reference/keywords/stackalloc.md)</ept>","pos":[2453,2525],"source":" [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)"}]}