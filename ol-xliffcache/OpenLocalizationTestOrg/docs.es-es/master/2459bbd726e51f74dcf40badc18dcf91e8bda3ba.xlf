<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2459bbd726e51f74dcf40badc18dcf91e8bda3ba</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\controls\customizing-the-appearance-of-an-existing-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71b96b9a46061c7eb3161c996a019469e9afb464</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">549a3b9b140c6f46c12ce8e7dcbd1ae6e29c2e4e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Customizing the Appearance of an Existing Control by Creating a ControlTemplate | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Customizing the Appearance of an Existing Control by Creating a ControlTemplate</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="introduction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> A<ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> specifies the visual structure and visual behavior of a control.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can customize the appearance of a control by giving it a new <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you create a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, you replace the appearance of an existing control without changing its functionality.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, you can make the buttons in your application round instead of the default square shape, but the button will still raise the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic explains the various parts of a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, demonstrates creating a simple <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>, and explains how to understand the control contract of a control so that you can customize its appearance.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because you create a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you can change a control's appearance without writing any code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also use a designer, such as Microsoft Expression Blend, to create custom control templates.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic shows examples in the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> that customize the appearance of a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> and lists the complete example at the end of the topic.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about using Expression Blend, see <bpt id="p1">[</bpt>Styling a control that supports templates<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=161153)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following illustrations show a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that uses the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> that is created in this topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A button with a custom control template.<ept id="p1">](../../../../docs/framework/wpf/controls/media/ndp-buttonnormal.png "NDP_ButtonNormal")</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A button that uses a custom control template</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A button with a red border.<ept id="p1">](../../../../docs/framework/wpf/controls/media/ndp-buttonmouseover.png "NDP_ButtonMouseOver")</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A button that uses a custom control template and has the mouse pointer over it</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This topic assumes that you understand how to create and use controls and styles as discussed in <bpt id="p1">[</bpt>Controls<ept id="p1">](../../../../docs/framework/wpf/controls/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The concepts discussed in this topic apply to elements that inherit from the <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> class, except for the <ph id="ph2">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You cannot apply a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to a <ph id="ph2">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When You Should Create a ControlTemplate</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Controls have many properties, such as <ph id="ph1">&lt;xref:System.Windows.Controls.Border.Background%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.Control.FontFamily%2A&gt;</ph>, that you can set to specify different aspects of the control's appearance, but the changes that you can make by setting these properties are limited.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, you can set the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph> property to blue and <ph id="ph2">&lt;xref:System.Windows.Controls.Control.FontStyle%2A&gt;</ph> to italic on a <ph id="ph3">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Without the ability to create a new <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for controls, all controls in every <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>-based application would have the same general appearance, which would limit the ability to create an application with a custom look and feel.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>By default, every <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> has similar characteristics.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, the content of the <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> is always to the right of the selection indicator, and the check mark is always used to indicate that the <ph id="ph2">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> is selected.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You create a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> when you want to customize the control's appearance beyond what setting the other properties on the control will do.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the example of the <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>, suppose that you want the content of the check box to be above the selection indicator and you want an X to indicate that the <ph id="ph2">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> is selected.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You specify these changes in the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> of the <ph id="ph2">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following illustration shows a <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> that uses a default <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A checkbox with the default control template.<ept id="p1">](../../../../docs/framework/wpf/controls/media/ndp-checkboxdefault.png "NDP_CheckBoxDefault")</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A CheckBox that uses the default control template</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following illustration shows a <ph id="ph1">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> that uses a custom <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to place the content of the <ph id="ph3">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> above the selection indicator and displays an X when the <ph id="ph4">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> is selected.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A checkbox with a custom control template.<ept id="p1">](../../../../docs/framework/wpf/controls/media/ndp-checkboxcustom.png "NDP_CheckBoxCustom")</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A CheckBox that uses a custom control template</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The<ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for the <ph id="ph2">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> in this sample is relatively complex, so this topic uses a simpler example of creating a <ph id="ph3">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for a <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Changing the Visual Structure of a Control</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, a control is often a composite <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you create a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, you combine <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> objects to build a single control.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> must have only one <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> as its root element.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The root element usually contains other <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The combination of objects makes up the control's visual structure.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example creates a custom <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> creates the visual structure of the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This example does not change the button's appearance when you move the mouse pointer over it or click it.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Changing the button's appearance when it is in a different state is discussed later in this topic.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this example, the visual structure consists of the following parts:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> named <ph id="ph2">`RootElement`</ph> that serves as the template's root <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> that is a child of <ph id="ph2">`RootElement`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> that displays the button's content.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> enables any type of object to be displayed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#BasicTemplate<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#basictemplate)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Preserving the Functionality of a Control's Properties by Using TemplateBinding</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When you create a new <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, you still might want to use the public properties to change the control's appearance.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>TemplateBinding<ept id="p1">](../../../../docs/framework/wpf/advanced/templatebinding-markup-extension.md)</ept> markup extension binds a property of an element that is in the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to a public property that is defined by the control.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When you use <bpt id="p1">[</bpt>TemplateBinding<ept id="p1">](../../../../docs/framework/wpf/advanced/templatebinding-markup-extension.md)</ept>, you enable properties on the control to act as parameters to the template.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>That is, when a property on a control is set, that value is passed on to the element that has the <bpt id="p1">[</bpt>TemplateBinding<ept id="p1">](../../../../docs/framework/wpf/advanced/templatebinding-markup-extension.md)</ept> on it.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example repeats the part of the preceding example that uses the <bpt id="p1">[</bpt>TemplateBinding<ept id="p1">](../../../../docs/framework/wpf/advanced/templatebinding-markup-extension.md)</ept> markup extension to bind properties of elements that are in the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to public properties that are defined by the button.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#TemplateBinding<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#templatebinding)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> has its <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Background%2A?displayProperty=fullName&gt;</ph> property template bound to <ph id="ph3">&lt;xref:System.Windows.Controls.Control.Background%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Background%2A?displayProperty=fullName&gt;</ph> is template bound, you can create multiple buttons that use the same <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and set the <ph id="ph3">&lt;xref:System.Windows.Controls.Control.Background%2A?displayProperty=fullName&gt;</ph> to different values on each button.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A?displayProperty=fullName&gt;</ph> was not template bound to a property of an element in the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, setting the <ph id="ph3">&lt;xref:System.Windows.Controls.Control.Background%2A?displayProperty=fullName&gt;</ph> of a button would have no impact on the button's appearance.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that the names of the two properties do not need to be identical.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the preceding example, the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A?displayProperty=fullName&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> is template bound to the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A?displayProperty=fullName&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This enables the content of the button to be positioned horizontally.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> does not have a property named <ph id="ph2">`HorizontalContentAlignment`</ph>, but <ph id="ph3">&lt;xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A?displayProperty=fullName&gt;</ph> can be bound to <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When you template bind a property, be sure that the target and source properties are the same type.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> class defines several properties that must be used by the control template to have an effect on the control when they are set.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>How the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> uses the property depends on the property.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> must use the property in one of the following ways:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An element in the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> template binds to the property.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An element in the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> inherits the property from a parent <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following table lists the visual properties inherited by a control from the <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It also indicates whether the default control template of a control uses the inherited property value or if it must be template bound.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Usage method</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Template binding</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Template binding</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Template binding</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Property inheritance or template binding</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Property inheritance or template binding</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Property inheritance or template binding</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Property inheritance or template binding</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Property inheritance or template binding</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Template binding</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Template binding</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Template binding</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The table lists only the visual properties inherited from the <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Apart from the properties listed in the table, a control may also inherit the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock.TextDecorations%2A&gt;</ph> properties from the parent framework element.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Also, if the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> is in the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> of a <ph id="ph3">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, the <ph id="ph4">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> will automatically bind to the <ph id="ph5">&lt;xref:System.Windows.Controls.ContentControl.ContentTemplate%2A&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Likewise, an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsPresenter&gt;</ph> that is in the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> of an <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> will automatically bind to the <ph id="ph4">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Controls.ItemsPresenter&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following example creates two buttons that use the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> defined in the preceding example.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The example sets the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.Control.FontSize%2A&gt;</ph> properties on each button.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property has an effect because it is template bound in the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Even though the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.Control.FontSize%2A&gt;</ph> properties are not template bound, setting them has an effect because their values are inherited.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#ButtonDeclaration<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#buttondeclaration)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The preceding example produces output that is similar to the following illustration.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Two buttons, one blue and one purple.<ept id="p1">](../../../../docs/framework/wpf/controls/media/ndp-buttontwo.png "NDP_ButtonTwo")</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Two buttons with different background colors</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Changing the Appearance of a Control Depending on Its State</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The difference between a button with its default appearance and the button in the preceding example is that the default button subtly changes when it is in different states.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, the default button's appearance changes when the button is pressed, or when the mouse pointer is over the button.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> does not change the functionality of a control, it does change the control's visual behavior.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A visual behavior describes the control appearance when it is in a certain state.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To understand the difference between the functionality and visual behavior of a control, consider the button example.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The button's functionality is to raise the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event when it is clicked, but the button's visual behavior is to change its appearance when it is pointed to or pressed.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph> objects to specify the appearance of a control when it is in a certain state.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph> contains a <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> that changes the appearance of the elements that are in the <ph id="ph3">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You do not have to write any code to make this occur because the control's logic changes state by using the <ph id="ph1">&lt;xref:System.Windows.VisualStateManager&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When the control enters the state that is specified by the <ph id="ph1">&lt;xref:System.Windows.VisualState.Name%2A?displayProperty=fullName&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> begins.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When the control exits the state, the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> stops.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph> that changes the appearance of a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> when the mouse pointer is over it.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> changes the button's border color by changing the color of the <ph id="ph2">`BorderBrush`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If you refer to the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> example at the beginning of this topic, you will recall that <ph id="ph2">`BorderBrush`</ph> is the name of the <ph id="ph3">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> that is assigned to the <ph id="ph4">&lt;xref:System.Windows.Controls.Border.Background%2A&gt;</ph> of the <ph id="ph5">&lt;xref:System.Windows.Controls.Border&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The control is responsible for defining the states as part of its control contract, which is discussed in detail in <bpt id="p1">[</bpt>Customizing Other Controls by Understanding the Control Contract<ept id="p1">](#customizing_other_controls_by_understanding_the_control_contract)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following table lists the states that are specified for the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>VisualState Name</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>VisualStateGroup Name</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Normal</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CommonStates</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The default state.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>MouseOver</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>CommonStates</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The mouse pointer is positioned over the control.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Pressed</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>CommonStates</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The control is pressed.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Disabled</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CommonStates</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The control is disabled.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Focused</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>FocusStates</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The control has focus.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Unfocused</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>FocusStates</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The control does not have focus.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> defines two state groups: the <ph id="ph2">`CommonStates`</ph> group contains the <ph id="ph3">`Normal`</ph>, <ph id="ph4">`MouseOver`</ph>, <ph id="ph5">`Pressed`</ph>, and <ph id="ph6">`Disabled`</ph> states.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FocusStates`</ph> group contains the <ph id="ph2">`Focused`</ph> and <ph id="ph3">`Unfocused`</ph> states.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>States in the same state group are mutually exclusive.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The control is always in exactly one state per group.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> can have focus even when the mouse pointer is not over it, so a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> in the <ph id="ph3">`Focused`</ph> state can be in the <ph id="ph4">`MouseOver`</ph>, <ph id="ph5">`Pressed`</ph>, or <ph id="ph6">`Normal`</ph> state.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>You add <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph> objects to <ph id="ph2">&lt;xref:System.Windows.VisualStateGroup&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You add <ph id="ph1">&lt;xref:System.Windows.VisualStateGroup&gt;</ph> objects to the <ph id="ph2">&lt;xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=fullName&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The following example defines the <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph> objects for the <ph id="ph2">`Normal`</ph>, <ph id="ph3">`MouseOver`</ph>, and <ph id="ph4">`Pressed`</ph> states, which are all in the <ph id="ph5">`CommonStates`</ph> group.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.VisualState.Name%2A&gt;</ph> of each <ph id="ph2">&lt;xref:System.Windows.VisualState&gt;</ph> matches the name in the preceding table.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Disabled`</ph> state and the states in the <ph id="ph2">`FocusStates`</ph> group are omitted to keep the example short, but they are included in the entire example at the end of this topic.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Be sure to set the <ph id="ph1">&lt;xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=fullName&gt;</ph> attached property on the root <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> of the <ph id="ph3">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#VisualStates<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#visualstates)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The preceding example produces output that is similar to the following illustrations.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A button with a custom control template.<ept id="p1">](../../../../docs/framework/wpf/controls/media/ndp-buttonnormal.png "NDP_ButtonNormal")</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A button that uses a custom control template in the normal state</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A button with a red border.<ept id="p1">](../../../../docs/framework/wpf/controls/media/ndp-buttonmouseover.png "NDP_ButtonMouseOver")</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A button that uses a custom control template in the mouse over state</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The border is transparent on a pressed button.<ept id="p1">](../../../../docs/framework/wpf/controls/media/ndp-buttonpressed.png "NDP_ButtonPressed")</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A button that uses a custom control template in the pressed state</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>To find the visual states for controls that are included with <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, see <bpt id="p1">[</bpt>Control Styles and Templates<ept id="p1">](../../../../docs/framework/wpf/controls/control-styles-and-templates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Specifying the Behavior of a Control When It Transitions Between States</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In the preceding example, the appearance of the button also changes when the user clicks it, but unless the button is pressed for a full second, the user does not see the effect.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>By default, the animation takes one second to occur.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Because users are likely to click and release a button in much less time, the visual feedback will not be effective if you leave the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> in its default state.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You can specify the amount of time that it takes an animation to occur to smoothly transition a control from one state to another by adding <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> objects to the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>When you create a <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph>, you specify one or more of the following:</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The time it takes for a transition between states to occur.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Additional changes in the control's appearance that occur at the time of the transition.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Which states the <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> is applied to.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Specifying the Duration of a Transition</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>You can specify how long a transition takes by setting the <ph id="ph1">&lt;xref:System.Windows.VisualTransition.GeneratedDuration%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The preceding example has a <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph> that specifies that the button's border becomes transparent when the button is pressed, but the animation takes too long to be noticeable if the button is quickly pressed and released.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>You can use a <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> to specify the amount of time it takes the control to transition into the pressed state.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The following example specifies that the control takes one hundredth of a second to go into the pressed state.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#PressedTransition<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#pressedtransition)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Specifying Changes to the Control's Appearance During a Transition</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> contains a <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> that begins when the control transitions between states.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>For example, you can specify that a certain animation occurs when the control transitions from the <ph id="ph1">`MouseOver`</ph> state to the <ph id="ph2">`Normal`</ph> State.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> that specifies that when the user moves the mouse pointer away from the button, the button's border changes to blue, then to yellow, then to black in 1.5 seconds.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#8<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#8)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Specifying When a VisualTransition Is Applied</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> can be restricted to apply to only certain states, or it can be applied any time the control transitions between states.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>In the preceding example, the <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> is applied when the control goes from the <ph id="ph2">`MouseOver`</ph> state to the <ph id="ph3">`Normal`</ph> state; in the example before that, the <ph id="ph4">&lt;xref:System.Windows.VisualTransition&gt;</ph> is applied when the control goes into the <ph id="ph5">`Pressed`</ph> state.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>You restrict when a <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> is applied by setting the <ph id="ph2">&lt;xref:System.Windows.VisualTransition.To%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.VisualTransition.From%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The following table describes the levels of restriction from most restrictive to least restrictive.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Type of restriction</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Value of From</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Value of To</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>From a specified state to another specified state</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The name of a <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The name of a <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>From any state to a specified state</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Not set</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The name of a <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>From a specified state to any state</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The name of a <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Not set</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>From any state to any other state</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Not set</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Not set</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>You can have multiple <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> objects in a <ph id="ph2">&lt;xref:System.Windows.VisualStateGroup&gt;</ph> that refer to the same state, but they will be used in the order that the previous table specifies.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In the following example, there are two <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>When the control transitions from the <ph id="ph1">`Pressed`</ph> state to the <ph id="ph2">`MouseOver`</ph> state, the <ph id="ph3">&lt;xref:System.Windows.VisualTransition&gt;</ph> that has both <ph id="ph4">&lt;xref:System.Windows.VisualTransition.From%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.VisualTransition.To%2A&gt;</ph> set is used.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>When the control transitions from a state that is not <ph id="ph1">`Pressed`</ph> to the <ph id="ph2">`MouseOver`</ph> state, the other state is used.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#7<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#7)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.VisualStateGroup&gt;</ph> has a <ph id="ph2">&lt;xref:System.Windows.VisualStateGroup.Transitions%2A&gt;</ph> property that contains the <ph id="ph3">&lt;xref:System.Windows.VisualTransition&gt;</ph> objects that apply to the <ph id="ph4">&lt;xref:System.Windows.VisualState&gt;</ph> objects in the <ph id="ph5">&lt;xref:System.Windows.VisualStateGroup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>As the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> author, you are free to include any <ph id="ph2">&lt;xref:System.Windows.VisualTransition&gt;</ph> you want.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>However, if the <ph id="ph1">&lt;xref:System.Windows.VisualTransition.To%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.VisualTransition.From%2A&gt;</ph> properties are set to state names that are not in the <ph id="ph3">&lt;xref:System.Windows.VisualStateGroup&gt;</ph>, the <ph id="ph4">&lt;xref:System.Windows.VisualTransition&gt;</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.VisualStateGroup&gt;</ph> for the <ph id="ph2">`CommonStates`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The example defines a <ph id="ph1">&lt;xref:System.Windows.VisualTransition&gt;</ph> for each of the button's following transitions.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>To the <ph id="ph1">`Pressed`</ph> state.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>To the <ph id="ph1">`MouseOver`</ph> state.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>From the <ph id="ph1">`Pressed`</ph> state to the <ph id="ph2">`MouseOver`</ph> state.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>From the <ph id="ph1">`MouseOver`</ph> state to the <ph id="ph2">`Normal`</ph> state.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#VisualTransitions<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#visualtransitions)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Customizing Other Controls by Understanding the Control Contract</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A control that uses a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to specify its visual structure (by using <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> objects) and visual behavior (by using <ph id="ph3">&lt;xref:System.Windows.VisualState&gt;</ph> objects) uses the parts control model.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Many of the controls that are included with <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> 4 use this model.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The parts that a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> author needs to be aware of are communicated through the control contract.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>When you understand the parts of a control contract, you can customize the appearance of any control that uses the parts control model.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>A control contract has three elements:</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The visual elements that the control's logic uses.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The states of the control and the group each state belongs to.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The public properties that visually affect the control.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Visual Elements in the Control Contract</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Sometimes a control's logic interacts with a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that is in the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>For example, the control might handle an event of one of its elements.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>When a control expects to find a particular <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> in the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, it must convey that information to the <ph id="ph3">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> author.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The control uses the <ph id="ph1">&lt;xref:System.Windows.TemplatePartAttribute&gt;</ph> to convey the type of element that is expected, and what the name of the element should be.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> does not have <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> parts in its control contract, but other controls, such as the <ph id="ph3">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph>, do.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.TemplatePartAttribute&gt;</ph> objects that are specified on the <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The logic of <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> expects to find a <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> named <ph id="ph3">`PART_EditableTextBox`</ph> and a <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> named <ph id="ph5">`PART_Popup`</ph> in its <ph id="ph6">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#ComboBoxContract<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/controlcontracts.cs#comboboxcontract)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VSMButtonTemplate#ComboBoxContract<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/vsmbuttontemplate/visualbasic/window1.xaml.vb#comboboxcontract)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The following example shows a simplified <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for the <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> that includes the elements that are specified by the <ph id="ph3">&lt;xref:System.Windows.TemplatePartAttribute&gt;</ph> objects on the <ph id="ph4">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#ComboBoxTemplate<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#comboboxtemplate)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>States in the Control Contract</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The states of a control are also a part of the control contract.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The example of creating a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> shows how to specify the appearance of a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> depending on its states.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>You create a <ph id="ph1">&lt;xref:System.Windows.VisualState&gt;</ph> for each specified state and put all <ph id="ph2">&lt;xref:System.Windows.VisualState&gt;</ph> objects that share a <ph id="ph3">&lt;xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A&gt;</ph> in a <ph id="ph4">&lt;xref:System.Windows.VisualStateGroup&gt;</ph>, as described in <bpt id="p1">[</bpt>Changing the Appearance of a Control Depending on Its State<ept id="p1">](#changing_the_appearance_of_a_control_depending_on_its_state)</ept> earlier in this topic.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Third-party controls should specify states by using the <ph id="ph1">&lt;xref:System.Windows.TemplateVisualStateAttribute&gt;</ph>, which enables designer tools, such as Expression Blend, to expose the control's states for authoring control templates.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>To find the control contract for controls that are included with <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, see <bpt id="p1">[</bpt>Control Styles and Templates<ept id="p1">](../../../../docs/framework/wpf/controls/control-styles-and-templates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Properties in the Control Contract</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The public properties that visually affect the control are also included in the control contract.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>You can set these properties to change the appearance of the control without creating a new <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">[</bpt>TemplateBinding<ept id="p1">](../../../../docs/framework/wpf/advanced/templatebinding-markup-extension.md)</ept> markup extension to bind properties of elements that are in the <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to public properties that are defined by the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The following example shows the control contract for the button.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#ButtonContract<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/controlcontracts.cs#buttoncontract)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VSMButtonTemplate#ButtonContract<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/vsmbuttontemplate/visualbasic/window1.xaml.vb#buttoncontract)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>When creating a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, it is often easiest to begin with an existing <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and make changes to it.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>You can do one of the following to change an existing <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Use a designer, such as Expression Blend, which provides a graphical user interface for creating control templates.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Styling a control that supports templates<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=161153)</ept>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Get the default <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and edit it.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>To find the default control templates that are included with <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, see <bpt id="p1">[</bpt>Default WPF Themes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Complete Example</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The following example shows the complete <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph><ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> that is discussed in this topic.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VSMButtonTemplate#3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../../../../docs/framework/wpf/controls/styling-and-templating.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>