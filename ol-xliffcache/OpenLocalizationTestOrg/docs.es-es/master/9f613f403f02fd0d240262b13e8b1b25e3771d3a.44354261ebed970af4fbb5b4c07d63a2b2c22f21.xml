{"content":"---\ntitle: \"Easing Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"applying mathematical formulas to animations [WPF]\"\n  - \"applying easing functions to animations [WPF]\"\n  - \"mathematical formulas [WPF], applying to animations\"\n  - \"animations [WPF], realistic movement\"\n  - \"easing functions [WPF]\"\n  - \"customizing easing functions [WPF]\"\n  - \"easing functions [WPF], definition\"\n  - \"easing functions [WPF], customizing\"\n  - \"animations [WPF], applying\"\nms.assetid: 075b9c2b-82c4-43fa-b3cd-de0b6236eb38\ncaps.latest.revision: 10\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Easing Functions\nEasing functions allow you to apply custom mathematical formulas to your animations. For example, you may want an object to realistically bounce or behave as though it were on a spring. You could use Key-Frame or even From/To/By animations to approximate these effects but it would take a significant amount of work and the animation would be less accurate than using a mathematical formula.  \n  \n Besides creating your own custom easing function by inheriting from              <xref:System.Windows.Media.Animation.EasingFunctionBase>, you can use one of several easing functions provided by the runtime to create common effects.  \n  \n-   <xref:System.Windows.Media.Animation.BackEase>: Retracts the motion of an animation slightly before it begins to animate in the path indicated.  \n  \n-   <xref:System.Windows.Media.Animation.BounceEase>: Creates a bouncing effect.  \n  \n-   <xref:System.Windows.Media.Animation.CircleEase>: Creates an animation that accelerates and/or decelerates using a circular function.  \n  \n-   <xref:System.Windows.Media.Animation.CubicEase>: Creates an animation that accelerates and/or decelerates using the formula                      *f*(                     *t*) =                      *t*<sup>3</sup>.  \n  \n-   <xref:System.Windows.Media.Animation.ElasticEase>: Creates an animation that resembles a spring oscillating back and forth until it comes to rest.  \n  \n-   <xref:System.Windows.Media.Animation.ExponentialEase>: Creates an animation that accelerates and/or decelerates using an exponential formula.  \n  \n-   <xref:System.Windows.Media.Animation.PowerEase>: Creates an animation that accelerates and/or decelerates using the formula                      *f*(                     *t*) =                      *t*<sup>p</sup> where p is equal to the                      <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property.  \n  \n-   <xref:System.Windows.Media.Animation.QuadraticEase>: Creates an animation that accelerates and/or decelerates using the formula                      *f*(                     *t*) =                      *t*<sup>2</sup>.  \n  \n-   <xref:System.Windows.Media.Animation.QuarticEase>: Creates an animation that accelerates and/or decelerates using the formula                      *f*(                     *t*) =                      *t*<sup>4</sup>.  \n  \n-   <xref:System.Windows.Media.Animation.QuinticEase>: Create an animation that accelerates and/or decelerates using the formula                      *f*(                     *t*) =                      *t*<sup>5</sup>.  \n  \n-   <xref:System.Windows.Media.Animation.SineEase>: Creates an animation that accelerates and/or decelerates using a sine formula.  \n  \n You can explore the behavior of these easing functions with the following sample.  \n  \n [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  \n  \n To apply an easing function to an animation, use the              `EasingFunction` property of the animation specify the easing function to apply to the animation. The following example applies a              <xref:System.Windows.Media.Animation.BounceEase> easing function to a              <xref:System.Windows.Media.Animation.DoubleAnimation> to create a bouncing effect.  \n  \n [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=BounceEase)  \n  \n [!code-xml[BounceEase_snippet#BounceEase](../../../../samples/snippets/csharp/VS_Snippets_Wpf/bounceease_snippet/CS/window1.xaml#bounceease)]  \n  \n In the previous example, the easing function was applied to a From/To/By animation. You can also apply these easing functions to Key-Frame animations. The following example shows how to use key frames with easing functions associated with them to create an animation of a rectangle that contracts upward, slows down, then expands downward (as though falling) and then bounces to a stop.  \n  \n [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=EasingFunctionDoubleKeyFrame)  \n  \n [!code-xml[EasingFunctionDoubleKeyFrame_snippet#EasingFunctionDoubleKeyFrame](../../../../samples/snippets/csharp/VS_Snippets_Wpf/easingfunctiondoublekeyframe_snippet/CS/window1.xaml#easingfunctiondoublekeyframe)]  \n  \n You can use the              <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> property to alter how the easing function behaves, that is, change how the animation interpolates. There are three possible values you can give for              <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>:  \n  \n-   <xref:System.Windows.Media.Animation.EasingMode>: Interpolation follows the mathematical formula associated with the easing function.  \n  \n-   <xref:System.Windows.Media.Animation.EasingMode>: Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.  \n  \n-   <xref:System.Windows.Media.Animation.EasingMode>: Interpolation uses                      <xref:System.Windows.Media.Animation.EasingMode> for the first half of the animation and                      <xref:System.Windows.Media.Animation.EasingMode> for the second half.  \n  \n The graphs below demonstrate the different values of              <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> where              *f*(             *x*) represents the animation progress and              *t* represents time.  \n  \n <xref:System.Windows.Media.Animation.BackEase>  \n  \n ![BackEase EasingMode graphs.](../../../../docs/framework/wpf/graphics-multimedia/media/backease-graph.png \"BackEase_Graph\")  \n  \n <xref:System.Windows.Media.Animation.BounceEase>  \n  \n ![BounceEase EasingMode graphs.](../../../../docs/framework/wpf/graphics-multimedia/media/bounceease-graph.png \"BounceEase_Graph\")  \n  \n <xref:System.Windows.Media.Animation.CircleEase>  \n  \n ![CircleEase EasingMode graphs.](../../../../docs/framework/wpf/graphics-multimedia/media/circleease-graph.png \"CircleEase_Graph\")  \n  \n <xref:System.Windows.Media.Animation.CubicEase>  \n  \n ![CubicEase EasingMode graphs.](../../../../docs/framework/wpf/graphics-multimedia/media/cubicease-graph.png \"CubicEase_Graph\")  \n  \n <xref:System.Windows.Media.Animation.ElasticEase>  \n  \n ![ElasticEase with graphs of different easingmodes.](../../../../docs/framework/wpf/graphics-multimedia/media/elasticease-graph.png \"ElasticEase_Graph\")  \n  \n <xref:System.Windows.Media.Animation.ExponentialEase>  \n  \n ![ExponentialEase graphs of different easingmodes.](../../../../docs/framework/wpf/graphics-multimedia/media/exponentialease-graph.png \"ExponentialEase_Graph\")  \n  \n <xref:System.Windows.Media.Animation.PowerEase>  \n  \n ![QuarticEase with graphs of different easingmodes.](../../../../docs/framework/wpf/graphics-multimedia/media/quarticease-graph.png \"QuarticEase_Graph\")  \n  \n <xref:System.Windows.Media.Animation.QuadraticEase>  \n  \n ![QuadraticEase with graphs of different easingmodes](../../../../docs/framework/wpf/graphics-multimedia/media/quadraticease-graph.png \"QuadraticEase_Graph\")  \n  \n <xref:System.Windows.Media.Animation.QuarticEase>  \n  \n ![QuarticEase with graphs of different easingmodes.](../../../../docs/framework/wpf/graphics-multimedia/media/quarticease-graph.png \"QuarticEase_Graph\")  \n  \n <xref:System.Windows.Media.Animation.QuinticEase>  \n  \n ![QuinticEase with graphs of different easingmodes.](../../../../docs/framework/wpf/graphics-multimedia/media/quinticease-graph.png \"QuinticEase_Graph\")  \n  \n <xref:System.Windows.Media.Animation.SineEase>  \n  \n ![SineEase for different EasingMode values](../../../../docs/framework/wpf/graphics-multimedia/media/sineease-graph.png \"SineEase_Graph\")  \n  \n> [!NOTE]\n>  You can use                  <xref:System.Windows.Media.Animation.PowerEase> to create the same behavior as                  <xref:System.Windows.Media.Animation.CubicEase>,                  <xref:System.Windows.Media.Animation.QuadraticEase>,                  <xref:System.Windows.Media.Animation.QuarticEase>, and                  <xref:System.Windows.Media.Animation.QuinticEase> by using the                  <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property. For example, if you want to use                  <xref:System.Windows.Media.Animation.PowerEase> to substitute for                  <xref:System.Windows.Media.Animation.CubicEase>, specify a                  <xref:System.Windows.Media.Animation.PowerEase.Power%2A> value of 3.  \n  \n In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from              <xref:System.Windows.Media.Animation.EasingFunctionBase>. The following example demonstrates how to create a simple custom easing function. You can add your own mathematical logic for how the easing function behaves by overriding the              <xref:System.Windows.Media.Animation.EasingFunctionBase.EaseInCore%2A> method.  \n  \n [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=CustomEasingFunction)  \n  \n [!code-csharp[CustomEasingFunction#CustomEasingFunction](../../../../samples/snippets/csharp/VS_Snippets_Wpf/customeasingfunction/csharp/customlog10easingfunction.cs#customeasingfunction)]\n [!code-vb[CustomEasingFunction#CustomEasingFunction](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/customeasingfunction/visualbasic/customlog10easingfunction.vb#customeasingfunction)]\n [!code-xml[CustomEasingFunction#CustomEasingFunction](../../../../samples/snippets/csharp/VS_Snippets_Wpf/customeasingfunction/csharp/window1.xaml#customeasingfunction)]","nodes":[{"pos":[12,45],"content":"Easing Functions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Easing Functions | Microsoft Docs","pos":[0,33]}]},{"pos":[771,787],"content":"Easing Functions","linkify":"Easing Functions","nodes":[{"content":"Easing Functions","pos":[0,16]}]},{"content":"Easing functions allow you to apply custom mathematical formulas to your animations.","pos":[788,872]},{"content":"For example, you may want an object to realistically bounce or behave as though it were on a spring.","pos":[873,973]},{"content":"You could use Key-Frame or even From/To/By animations to approximate these effects but it would take a significant amount of work and the animation would be less accurate than using a mathematical formula.","pos":[974,1179]},{"content":"Besides creating your own custom easing function by inheriting from              <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase&gt;</ph>, you can use one of several easing functions provided by the runtime to create common effects.","pos":[1186,1418],"source":"Besides creating your own custom easing function by inheriting from              <xref:System.Windows.Media.Animation.EasingFunctionBase>, you can use one of several easing functions provided by the runtime to create common effects."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.BackEase&gt;</ph>: Retracts the motion of an animation slightly before it begins to animate in the path indicated.","pos":[1428,1571],"source":"<xref:System.Windows.Media.Animation.BackEase>: Retracts the motion of an animation slightly before it begins to animate in the path indicated."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.BounceEase&gt;</ph>: Creates a bouncing effect.","pos":[1581,1657],"source":"<xref:System.Windows.Media.Animation.BounceEase>: Creates a bouncing effect."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.CircleEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using a circular function.","pos":[1667,1800],"source":"<xref:System.Windows.Media.Animation.CircleEase>: Creates an animation that accelerates and/or decelerates using a circular function."},{"pos":[1810,2024],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.CubicEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using the formula                      <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(                     <bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) =                      <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept><bpt id=\"p4\">&lt;sup&gt;</bpt>3<ept id=\"p4\">&lt;/sup&gt;</ept>.","source":"<xref:System.Windows.Media.Animation.CubicEase>: Creates an animation that accelerates and/or decelerates using the formula                      *f*(                     *t*) =                      *t*<sup>3</sup>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.ElasticEase&gt;</ph>: Creates an animation that resembles a spring oscillating back and forth until it comes to rest.","pos":[2034,2180],"source":"<xref:System.Windows.Media.Animation.ElasticEase>: Creates an animation that resembles a spring oscillating back and forth until it comes to rest."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.ExponentialEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using an exponential formula.","pos":[2190,2331],"source":"<xref:System.Windows.Media.Animation.ExponentialEase>: Creates an animation that accelerates and/or decelerates using an exponential formula."},{"pos":[2341,2666],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.PowerEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using the formula                      <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(                     <bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) =                      <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept><bpt id=\"p4\">&lt;sup&gt;</bpt>p<ept id=\"p4\">&lt;/sup&gt;</ept> where p is equal to the                      <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.PowerEase.Power%2A&gt;</ph> property.","source":"<xref:System.Windows.Media.Animation.PowerEase>: Creates an animation that accelerates and/or decelerates using the formula                      *f*(                     *t*) =                      *t*<sup>p</sup> where p is equal to the                      <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property."},{"pos":[2676,2894],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.QuadraticEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using the formula                      <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(                     <bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) =                      <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept><bpt id=\"p4\">&lt;sup&gt;</bpt>2<ept id=\"p4\">&lt;/sup&gt;</ept>.","source":"<xref:System.Windows.Media.Animation.QuadraticEase>: Creates an animation that accelerates and/or decelerates using the formula                      *f*(                     *t*) =                      *t*<sup>2</sup>."},{"pos":[2904,3120],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.QuarticEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using the formula                      <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(                     <bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) =                      <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept><bpt id=\"p4\">&lt;sup&gt;</bpt>4<ept id=\"p4\">&lt;/sup&gt;</ept>.","source":"<xref:System.Windows.Media.Animation.QuarticEase>: Creates an animation that accelerates and/or decelerates using the formula                      *f*(                     *t*) =                      *t*<sup>4</sup>."},{"pos":[3130,3345],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.QuinticEase&gt;</ph>: Create an animation that accelerates and/or decelerates using the formula                      <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(                     <bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) =                      <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept><bpt id=\"p4\">&lt;sup&gt;</bpt>5<ept id=\"p4\">&lt;/sup&gt;</ept>.","source":"<xref:System.Windows.Media.Animation.QuinticEase>: Create an animation that accelerates and/or decelerates using the formula                      *f*(                     *t*) =                      *t*<sup>5</sup>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.SineEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using a sine formula.","pos":[3355,3481],"source":"<xref:System.Windows.Media.Animation.SineEase>: Creates an animation that accelerates and/or decelerates using a sine formula."},{"content":"You can explore the behavior of these easing functions with the following sample.","pos":[3488,3569]},{"pos":[3576,3670],"content":"<bpt id=\"p1\">[</bpt>Run this sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=139798&amp;sref=easing_functions_gallery)</ept>","source":"[Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)"},{"content":"To apply an easing function to an animation, use the              <ph id=\"ph1\">`EasingFunction`</ph> property of the animation specify the easing function to apply to the animation.","pos":[3677,3840],"source":"To apply an easing function to an animation, use the              `EasingFunction` property of the animation specify the easing function to apply to the animation."},{"content":"The following example applies a              <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.BounceEase&gt;</ph> easing function to a              <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> to create a bouncing effect.","pos":[3841,4051],"source":" The following example applies a              <xref:System.Windows.Media.Animation.BounceEase> easing function to a              <xref:System.Windows.Media.Animation.DoubleAnimation> to create a bouncing effect."},{"pos":[4058,4138],"content":"<bpt id=\"p1\">[</bpt>Run this sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=139798&amp;sref=BounceEase)</ept>","source":"[Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=BounceEase)"},{"pos":[4145,4286],"content":"<bpt id=\"p1\">[!code-xml</bpt><bpt id=\"p2\">[</bpt>BounceEase_snippet#BounceEase<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/bounceease_snippet/CS/window1.xaml#bounceease)</ept><ept id=\"p1\">]</ept>","source":"[!code-xml[BounceEase_snippet#BounceEase](../../../../samples/snippets/csharp/VS_Snippets_Wpf/bounceease_snippet/CS/window1.xaml#bounceease)]"},{"content":"In the previous example, the easing function was applied to a From/To/By animation.","pos":[4293,4376]},{"content":"You can also apply these easing functions to Key-Frame animations.","pos":[4377,4443]},{"content":"The following example shows how to use key frames with easing functions associated with them to create an animation of a rectangle that contracts upward, slows down, then expands downward (as though falling) and then bounces to a stop.","pos":[4444,4679]},{"pos":[4686,4784],"content":"<bpt id=\"p1\">[</bpt>Run this sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=139798&amp;sref=EasingFunctionDoubleKeyFrame)</ept>","source":"[Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=EasingFunctionDoubleKeyFrame)"},{"pos":[4791,5004],"content":"<bpt id=\"p1\">[!code-xml</bpt><bpt id=\"p2\">[</bpt>EasingFunctionDoubleKeyFrame_snippet#EasingFunctionDoubleKeyFrame<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/easingfunctiondoublekeyframe_snippet/CS/window1.xaml#easingfunctiondoublekeyframe)</ept><ept id=\"p1\">]</ept>","source":"[!code-xml[EasingFunctionDoubleKeyFrame_snippet#EasingFunctionDoubleKeyFrame](../../../../samples/snippets/csharp/VS_Snippets_Wpf/easingfunctiondoublekeyframe_snippet/CS/window1.xaml#easingfunctiondoublekeyframe)]"},{"content":"You can use the              <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;</ph> property to alter how the easing function behaves, that is, change how the animation interpolates.","pos":[5011,5209],"source":"You can use the              <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> property to alter how the easing function behaves, that is, change how the animation interpolates."},{"content":"There are three possible values you can give for              <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;</ph>:","pos":[5210,5343],"source":" There are three possible values you can give for              <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>:"},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.EasingMode&gt;</ph>: Interpolation follows the mathematical formula associated with the easing function.","pos":[5353,5486],"source":"<xref:System.Windows.Media.Animation.EasingMode>: Interpolation follows the mathematical formula associated with the easing function."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.EasingMode&gt;</ph>: Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.","pos":[5496,5655],"source":"<xref:System.Windows.Media.Animation.EasingMode>: Interpolation follows 100% interpolation minus the output of the formula associated with the easing function."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.EasingMode&gt;</ph>: Interpolation uses                      <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.EasingMode&gt;</ph> for the first half of the animation and                      <ph id=\"ph3\">&lt;xref:System.Windows.Media.Animation.EasingMode&gt;</ph> for the second half.","pos":[5665,5934],"source":"<xref:System.Windows.Media.Animation.EasingMode>: Interpolation uses                      <xref:System.Windows.Media.Animation.EasingMode> for the first half of the animation and                      <xref:System.Windows.Media.Animation.EasingMode> for the second half."},{"pos":[5941,6190],"content":"The graphs below demonstrate the different values of              <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;</ph> where              <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(             <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept>) represents the animation progress and              <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept> represents time.","source":"The graphs below demonstrate the different values of              <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> where              *f*(             *x*) represents the animation progress and              *t* represents time."},{"pos":[6250,6374],"content":"<bpt id=\"p1\">![</bpt>BackEase EasingMode graphs.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/backease-graph.png \"</bpt>BackEase_Graph<ept id=\"p2\">\")</ept>","source":"![BackEase EasingMode graphs.](../../../../docs/framework/wpf/graphics-multimedia/media/backease-graph.png \"BackEase_Graph\")"},{"pos":[6436,6566],"content":"<bpt id=\"p1\">![</bpt>BounceEase EasingMode graphs.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/bounceease-graph.png \"</bpt>BounceEase_Graph<ept id=\"p2\">\")</ept>","source":"![BounceEase EasingMode graphs.](../../../../docs/framework/wpf/graphics-multimedia/media/bounceease-graph.png \"BounceEase_Graph\")"},{"pos":[6628,6758],"content":"<bpt id=\"p1\">![</bpt>CircleEase EasingMode graphs.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/circleease-graph.png \"</bpt>CircleEase_Graph<ept id=\"p2\">\")</ept>","source":"![CircleEase EasingMode graphs.](../../../../docs/framework/wpf/graphics-multimedia/media/circleease-graph.png \"CircleEase_Graph\")"},{"pos":[6819,6946],"content":"<bpt id=\"p1\">![</bpt>CubicEase EasingMode graphs.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/cubicease-graph.png \"</bpt>CubicEase_Graph<ept id=\"p2\">\")</ept>","source":"![CubicEase EasingMode graphs.](../../../../docs/framework/wpf/graphics-multimedia/media/cubicease-graph.png \"CubicEase_Graph\")"},{"pos":[7009,7161],"content":"<bpt id=\"p1\">![</bpt>ElasticEase with graphs of different easingmodes.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/elasticease-graph.png \"</bpt>ElasticEase_Graph<ept id=\"p2\">\")</ept>","source":"![ElasticEase with graphs of different easingmodes.](../../../../docs/framework/wpf/graphics-multimedia/media/elasticease-graph.png \"ElasticEase_Graph\")"},{"pos":[7228,7387],"content":"<bpt id=\"p1\">![</bpt>ExponentialEase graphs of different easingmodes.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/exponentialease-graph.png \"</bpt>ExponentialEase_Graph<ept id=\"p2\">\")</ept>","source":"![ExponentialEase graphs of different easingmodes.](../../../../docs/framework/wpf/graphics-multimedia/media/exponentialease-graph.png \"ExponentialEase_Graph\")"},{"pos":[7448,7600],"content":"<bpt id=\"p1\">![</bpt>QuarticEase with graphs of different easingmodes.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/quarticease-graph.png \"</bpt>QuarticEase_Graph<ept id=\"p2\">\")</ept>","source":"![QuarticEase with graphs of different easingmodes.](../../../../docs/framework/wpf/graphics-multimedia/media/quarticease-graph.png \"QuarticEase_Graph\")"},{"pos":[7665,7822],"content":"<bpt id=\"p1\">![</bpt>QuadraticEase with graphs of different easingmodes<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/quadraticease-graph.png \"</bpt>QuadraticEase_Graph<ept id=\"p2\">\")</ept>","source":"![QuadraticEase with graphs of different easingmodes](../../../../docs/framework/wpf/graphics-multimedia/media/quadraticease-graph.png \"QuadraticEase_Graph\")"},{"pos":[7885,8037],"content":"<bpt id=\"p1\">![</bpt>QuarticEase with graphs of different easingmodes.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/quarticease-graph.png \"</bpt>QuarticEase_Graph<ept id=\"p2\">\")</ept>","source":"![QuarticEase with graphs of different easingmodes.](../../../../docs/framework/wpf/graphics-multimedia/media/quarticease-graph.png \"QuarticEase_Graph\")"},{"pos":[8100,8252],"content":"<bpt id=\"p1\">![</bpt>QuinticEase with graphs of different easingmodes.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/quinticease-graph.png \"</bpt>QuinticEase_Graph<ept id=\"p2\">\")</ept>","source":"![QuinticEase with graphs of different easingmodes.](../../../../docs/framework/wpf/graphics-multimedia/media/quinticease-graph.png \"QuinticEase_Graph\")"},{"pos":[8312,8449],"content":"<bpt id=\"p1\">![</bpt>SineEase for different EasingMode values<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../docs/framework/wpf/graphics-multimedia/media/sineease-graph.png \"</bpt>SineEase_Graph<ept id=\"p2\">\")</ept>","source":"![SineEase for different EasingMode values](../../../../docs/framework/wpf/graphics-multimedia/media/sineease-graph.png \"SineEase_Graph\")"},{"pos":[8457,9224],"content":"[!NOTE]\n You can use                  <xref:System.Windows.Media.Animation.PowerEase> to create the same behavior as                  <xref:System.Windows.Media.Animation.CubicEase>,                  <xref:System.Windows.Media.Animation.QuadraticEase>,                  <xref:System.Windows.Media.Animation.QuarticEase>, and                  <xref:System.Windows.Media.Animation.QuinticEase> by using the                  <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property. For example, if you want to use                  <xref:System.Windows.Media.Animation.PowerEase> to substitute for                  <xref:System.Windows.Media.Animation.CubicEase>, specify a                  <xref:System.Windows.Media.Animation.PowerEase.Power%2A> value of 3.","leadings":["","> "],"nodes":[{"content":" You can use                  <xref:System.Windows.Media.Animation.PowerEase> to create the same behavior as                  <xref:System.Windows.Media.Animation.CubicEase>,                  <xref:System.Windows.Media.Animation.QuadraticEase>,                  <xref:System.Windows.Media.Animation.QuarticEase>, and                  <xref:System.Windows.Media.Animation.QuinticEase> by using the                  <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property. For example, if you want to use                  <xref:System.Windows.Media.Animation.PowerEase> to substitute for                  <xref:System.Windows.Media.Animation.CubicEase>, specify a                  <xref:System.Windows.Media.Animation.PowerEase.Power%2A> value of 3.","pos":[8,765],"nodes":[{"content":"You can use                  <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.PowerEase&gt;</ph> to create the same behavior as                  <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.CubicEase&gt;</ph>,                  <ph id=\"ph3\">&lt;xref:System.Windows.Media.Animation.QuadraticEase&gt;</ph>,                  <ph id=\"ph4\">&lt;xref:System.Windows.Media.Animation.QuarticEase&gt;</ph>, and                  <ph id=\"ph5\">&lt;xref:System.Windows.Media.Animation.QuinticEase&gt;</ph> by using the                  <ph id=\"ph6\">&lt;xref:System.Windows.Media.Animation.PowerEase.Power%2A&gt;</ph> property.","pos":[1,480],"source":" You can use                  <xref:System.Windows.Media.Animation.PowerEase> to create the same behavior as                  <xref:System.Windows.Media.Animation.CubicEase>,                  <xref:System.Windows.Media.Animation.QuadraticEase>,                  <xref:System.Windows.Media.Animation.QuarticEase>, and                  <xref:System.Windows.Media.Animation.QuinticEase> by using the                  <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property."},{"content":"For example, if you want to use                  <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.PowerEase&gt;</ph> to substitute for                  <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.CubicEase&gt;</ph>, specify a                  <ph id=\"ph3\">&lt;xref:System.Windows.Media.Animation.PowerEase.Power%2A&gt;</ph> value of 3.","pos":[481,757],"source":" For example, if you want to use                  <xref:System.Windows.Media.Animation.PowerEase> to substitute for                  <xref:System.Windows.Media.Animation.CubicEase>, specify a                  <xref:System.Windows.Media.Animation.PowerEase.Power%2A> value of 3."}]}]},{"content":"In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from              <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase&gt;</ph>.","pos":[9231,9436],"source":"In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from              <xref:System.Windows.Media.Animation.EasingFunctionBase>."},{"content":"The following example demonstrates how to create a simple custom easing function.","pos":[9437,9518]},{"content":"You can add your own mathematical logic for how the easing function behaves by overriding the              <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EaseInCore%2A&gt;</ph> method.","pos":[9519,9704],"source":" You can add your own mathematical logic for how the easing function behaves by overriding the              <xref:System.Windows.Media.Animation.EasingFunctionBase.EaseInCore%2A> method."},{"pos":[9711,9801],"content":"<bpt id=\"p1\">[</bpt>Run this sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=139798&amp;sref=CustomEasingFunction)</ept>","source":"[Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=CustomEasingFunction)"},{"pos":[9808,10363],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CustomEasingFunction#CustomEasingFunction<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/customeasingfunction/csharp/customlog10easingfunction.cs#customeasingfunction)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>CustomEasingFunction#CustomEasingFunction<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/customeasingfunction/visualbasic/customlog10easingfunction.vb#customeasingfunction)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-xml</bpt><bpt id=\"p6\">[</bpt>CustomEasingFunction#CustomEasingFunction<ept id=\"p6\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/customeasingfunction/csharp/window1.xaml#customeasingfunction)</ept><ept id=\"p5\">]</ept>","source":"[!code-csharp[CustomEasingFunction#CustomEasingFunction](../../../../samples/snippets/csharp/VS_Snippets_Wpf/customeasingfunction/csharp/customlog10easingfunction.cs#customeasingfunction)]\n [!code-vb[CustomEasingFunction#CustomEasingFunction](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/customeasingfunction/visualbasic/customlog10easingfunction.vb#customeasingfunction)]\n [!code-xml[CustomEasingFunction#CustomEasingFunction](../../../../samples/snippets/csharp/VS_Snippets_Wpf/customeasingfunction/csharp/window1.xaml#customeasingfunction)]"}]}