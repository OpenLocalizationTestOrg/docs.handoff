{"content":"---\ntitle: \"^= Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"^=_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"^= operator [C#]\"\nms.assetid: 3658ff9a-61cd-467e-ad6b-8fbf1cfbaae4\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ^= Operator (C# Reference)\nThe exclusive-OR assignment operator.  \n  \n## Remarks  \n An expression of the form  \n  \n```  \nx ^= y  \n```  \n  \n is evaluated as  \n  \n```  \nx = x ^ y  \n```  \n  \n except that `x` is only evaluated once. The [^ operator](../../../csharp/language-reference/operators/xor-operator.md) performs a bitwise exclusive-OR operation on integral operands and logical exclusive-OR on [bool](../../../csharp/language-reference/keywords/bool.md) operands.  \n  \n The ^= operator cannot be overloaded directly, but user-defined types can overload the [^ operator](../../../csharp/language-reference/operators/xor-operator.md) (see [operator](../../../csharp/language-reference/keywords/operator.md)).  \n  \n## Example  \n [!code-cs[csRefOperators#23](../../../csharp/language-reference/operators/codesnippet/CSharp/xor-assignment-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[12,55],"content":"^= Operator (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"^= Operator (C# Reference) | Microsoft Docs","pos":[0,43]}]},{"pos":[560,586],"content":"^= Operator (C# Reference)","linkify":"^= Operator (C# Reference)","nodes":[{"content":"^= Operator (C# Reference)","pos":[0,26]}]},{"content":"The exclusive-OR assignment operator.","pos":[587,624]},{"pos":[633,640],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An expression of the form","pos":[644,669]},{"content":"is evaluated as","pos":[700,715]},{"content":"except that <ph id=\"ph1\">`x`</ph> is only evaluated once.","pos":[749,788],"source":"except that `x` is only evaluated once."},{"content":"The <bpt id=\"p1\">[</bpt>^ operator<ept id=\"p1\">](../../../csharp/language-reference/operators/xor-operator.md)</ept> performs a bitwise exclusive-OR operation on integral operands and logical exclusive-OR on <bpt id=\"p2\">[</bpt>bool<ept id=\"p2\">](../../../csharp/language-reference/keywords/bool.md)</ept> operands.","pos":[789,1028],"source":" The [^ operator](../../../csharp/language-reference/operators/xor-operator.md) performs a bitwise exclusive-OR operation on integral operands and logical exclusive-OR on [bool](../../../csharp/language-reference/keywords/bool.md) operands."},{"pos":[1035,1271],"content":"The ^= operator cannot be overloaded directly, but user-defined types can overload the <bpt id=\"p1\">[</bpt>^ operator<ept id=\"p1\">](../../../csharp/language-reference/operators/xor-operator.md)</ept> (see <bpt id=\"p2\">[</bpt>operator<ept id=\"p2\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","source":"The ^= operator cannot be overloaded directly, but user-defined types can overload the [^ operator](../../../csharp/language-reference/operators/xor-operator.md) (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"pos":[1280,1287],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1291,1414],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#23<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/xor-assignment-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#23](../../../csharp/language-reference/operators/codesnippet/CSharp/xor-assignment-operator_1.cs)]"},{"pos":[1423,1431],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1435,1495],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1498,1566],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1569,1639],"source":" [C# Operators](../../../csharp/language-reference/operators/index.md)"}]}