<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="activity.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b93960d4006499c935c27ee18e066d091632d3d9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\diagnostics\tracing\activity.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cf5692bfe9378dfcd860ad256d7e07cd616c96f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3701b984c2330f8d0ce10b0bcf982fc6607bc758</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Activity</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Activity</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes activity traces in the Windows Communication Foundation (WCF) tracing model.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Activities are processing units that help the user narrow down the scope of a failure.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Errors that occur in the same activity are directly related.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, an operation fails because message decryption has failed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The traces for both the operation and message decryption failure appear in the same activity, showing direct correlation between the decryption error and the request error.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Configuring Activity Tracing</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>WCF provides pre-defined activities for processing applications (see <bpt id="p1">[</bpt>Activity List<ept id="p1">](../../../../../docs/framework/wcf/diagnostics/tracing/activity-list.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also define activities programmatically to group user traces.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Emitting User-Code Traces<ept id="p1">](../../../../../docs/framework/wcf/diagnostics/tracing/emitting-user-code-traces.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To emit activity traces at run time, use the <ph id="ph1">`ActivityTracing`</ph> setting for the <ph id="ph2">`System.ServiceModel`</ph> trace source, or other WCF or custom trace sources, as demonstrated by the following configuration code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To understand more about the configuration element and attributes being used, see the <bpt id="p1">[</bpt>Configuring Tracing<ept id="p1">](../../../../../docs/framework/wcf/diagnostics/tracing/configuring-tracing.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Viewing Activities</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can view the activities and their utility in the <bpt id="p1">[</bpt>Service Trace Viewer Tool (SvcTraceViewer.exe)<ept id="p1">](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When ActivityTracing is enabled, this tool takes the traces and sorts them based on activity.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can also see trace transfers.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A trace transfer indicates how different activities are related to each other.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can see that a particular activity caused another to start.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, a message request started a security handshake to get a Secure Conversation Token.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Correlating Activities in Service Trace Viewer</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The Service Trace Viewer tool provides two views of activities:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>List<ept id="p1">**</ept> view, where the activity ID is used to directly correlate traces across processes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Traces from different processes, for example, client and service, but with the same activity ID are grouped in the same activity.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, an error occurring on the service which then causes an error on the client will both show up in the same activity view in the tool.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Graph<ept id="p1">**</ept> view, where activities are grouped by processes.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this view, a client and service with the same activity ID have their traces in different activities.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To correlate activities with the same activity ID in different processes, the tool shows message flows across the related activities.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, and to see a graphical view of the Service Trace Viewer tool, see <bpt id="p1">[</bpt>Service Trace Viewer Tool (SvcTraceViewer.exe)<ept id="p1">](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)</ept> and <bpt id="p2">[</bpt>Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting<ept id="p2">](../../../../../docs/framework/wcf/diagnostics/tracing/using-service-trace-viewer-for-viewing-correlated-traces-and-troubleshooting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Defining the Scope of an Activity</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An activity is defined at design time and denotes a logical unit of work.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Emitted traces with the same activity identifier are directly related, they are part of the same activity.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Because an activity can cross endpoint boundaries (a request), two scopes for an activity are defined.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Global`</ph> scope, per application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this scope, the activity is identified by its 128-bit globally unique activity identifier, the gAId.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The gAid is what is propagated across endpoints.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Local`</ph> scope, per endpoint.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In this scope, the activity is identified by its gAId, along with the trace source name emitting the activity traces and the process Id. This triplet constitutes the local activity id, lAId.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The lAId is used to define the (local) boundaries of an activity.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Trace Schema</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Traces can be emitted using any schema, and across Microsoft platforms.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>"e2e" (for "End to End") is a commonly used schema.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This schema includes a 128 bit identifier (gAId), the trace source name, and process ID.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In managed code, <ph id="ph1">&lt;xref:System.Diagnostics.XmlWriterTraceListener&gt;</ph> emits traces in the E2E schema.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Developers can set the AID that is emitted with a trace by setting the <ph id="ph1">&lt;xref:System.Diagnostics.CorrelationManager.ActivityId%2A&gt;</ph> property with a Guid on Thread Local Storage (TLS).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Setting the gAId in TLS will be evident when traces are emitted using a trace source, as shown by the following example.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The trace emitted will contain the gAId currently in TLS, the trace source name passed as a parameter to the trace source’s constructor, and the current process’s ID.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Activity Lifetime</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In strictest terms, evidence of an activity starts the first time the activity ID is used in an emitted trace, and ends the last time it is used in an emitted trace.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A predefined set of trace types are provided by <ph id="ph1">&lt;xref:System.Diagnostics&gt;</ph>, including Start and Stop, to explicitly mark the activity lifetime boundaries.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Start: Indicates the beginning of an activity.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A "Start" trace provides a record of beginning a new processing milestone.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It contains a new activity ID for a given trace source in a given process, except when the activity ID is propagated across endpoints, in which case we see one "Start" per endpoint.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Examples of starting a new activity include creating a new thread for processing, or entering a new public method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Stop: Indicates the end of an activity.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A "Stop" trace provides a record of ending an existing processing milestone.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It contains an existing activity ID for a given trace source in a given process, except when the activity ID is propagated across endpoints, in which case we see one "Stop" per endpoint.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Examples of stopping an activity include terminating a processing thread, or exiting a method whose beginning was denoted with a "Start" trace.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Suspend: Indicates suspension of processing of an activity.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A "Suspend" trace contains an existing activity ID whose processing is expected to resume at a later time.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>No traces are emitted with this ID between the Suspend and Resume events from the current trace source.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Examples include pausing an activity when calling into an external library function, or when waiting on a resource such as an I/O completion port.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Resume: Indicates the resumption of processing of an activity.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A "Resume" trace contains an existing activity id whose last emitted trace from the current trace source was a "Suspend" trace.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Examples include returning from a call to an external library function, or when signaled to resume processing by a resource such as an I/O completion port.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Transfer: Because some activities are caused by others, or relate to others, activities can be related to other activities through "Transfer" traces.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A transfer records the directed relationship of one activity to another</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Start and Stop traces are not critical for correlation.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, they can help in increasing performance, profiling, and activity scope validation.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Using these types, the tools can optimize navigating the trace logs to find the immediately related events of the same activity, or events in related activities if the tool follows transfer traces.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, the tools will stop parsing the logs for a given activity when they see a Start/Stop trace.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>These trace types can also be used for profiling.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Resources consumed between the start and stop markers represent the activity’s inclusive time including contained logical activities.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Subtracting the time intervals between the Suspend and Resume traces provides the actual activity time.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The Stop trace is also particularly useful for validating the scope of the implemented activities.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If some processing traces appear after the Stop trace instead of inside a given activity, this can suggests code defect.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Guidelines for Using Activity Tracing</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following is a guideline of using ActivityTracing traces (Start, Stop, Suspend, Resume, and Transfer).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Tracing is a directed cyclic graph, not a tree.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can return control to an activity which spawned an activity.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An activity denotes a processing boundary which can be meaningful to the administrator of the system or for supportability.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Each WCF method, both on the client and server, is bounded by beginning a new activity, then (after work is done) ending the new activity and returning to the ambient activity.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Long running (ongoing) activities such as listening for connections or waiting for messages are represented by corresponding start/stop markers.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Activities triggered by the receipt or processing of a message are represented by trace boundaries.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Activities represent activities, not necessarily objects.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>An activity should be interpreted as "this was happening when .</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>(meaningful trace emission occurred)."</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Configuring Tracing<ept id="p1">](../../../../../docs/framework/wcf/diagnostics/tracing/configuring-tracing.md)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting<ept id="p1">](../../../../../docs/framework/wcf/diagnostics/tracing/using-service-trace-viewer-for-viewing-correlated-traces-and-troubleshooting.md)</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>End-To-End Tracing Scenarios<ept id="p1">](../../../../../docs/framework/wcf/diagnostics/tracing/end-to-end-tracing-scenarios.md)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Service Trace Viewer Tool (SvcTraceViewer.exe)<ept id="p1">](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Emitting User-Code Traces<ept id="p1">](../../../../../docs/framework/wcf/diagnostics/tracing/emitting-user-code-traces.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>