{"content":"---\ntitle: \"How to: Implement ICommandSource | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"interfaces, ICommandSource, implementing\"\n  - \"ICommandSource interfaces, implementing\"\nms.assetid: 7452dd39-6e11-44bf-806a-31d87f3772ac\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Implement ICommandSource\nThis example shows how to create a command source by implementing <xref:System.Windows.Input.ICommandSource>.  A command source is an object that knows how to invoke a command.  The <xref:System.Windows.Input.ICommandSource> interface exposes three members: <xref:System.Windows.Input.ICommandSource.Command%2A>, <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>, and <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  <xref:System.Windows.Input.ICommandSource.Command%2A> is the command which will be invoked. The <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is a user-defined data type which is passed from the command source to the method which handles the command. The <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is the object that the command is being executed on.  \n  \n In this example, a class is created which subclasses the <xref:System.Windows.Controls.Slider> control and implements <xref:System.Windows.Input.ICommandSource>.  \n  \n## Example  \n [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] provides a number of classes which implement <xref:System.Windows.Input.ICommandSource>, such as <xref:System.Windows.Controls.Button>, <xref:System.Windows.Controls.MenuItem>, and <xref:System.Windows.Controls.ListBoxItem>.  A command source defines how it invokes a command.   <xref:System.Windows.Controls.Button> and <xref:System.Windows.Controls.MenuItem> invoke a command when they are clicked.  A <xref:System.Windows.Controls.ListBoxItem> invokes a command when it is double clicked. These classes only become a command source when their <xref:System.Windows.Input.ICommandSource.Command%2A> property is set.  \n  \n For this example we will invoke the command when the slider is moved, or more accurately, when the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property is changed.  \n  \n The following is the class definition.  \n  \n [!code-csharp[ImplementICommandSource#ImplementICommandSourceClassDefinition](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourceclassdefinition)]\n [!code-vb[ImplementICommandSource#ImplementICommandSourceClassDefinition](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourceclassdefinition)]  \n  \n The next step is to implement the <xref:System.Windows.Input.ICommandSource> members.  In this example, the properties are implemented as <xref:System.Windows.DependencyProperty> objects.  This enables the properties to use data binding.  For more information about the <xref:System.Windows.DependencyProperty> class, see the [Dependency Properties Overview](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md).  For more information about data binding, see the [Data Binding Overview](../../../../docs/framework/wpf/data/data-binding-overview.md).  \n  \n Only the <xref:System.Windows.Input.ICommandSource.Command%2A> property is shown here.  \n  \n [!code-csharp[ImplementICommandSource#ImplementICommandSourceCommandPropertyDefinition](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourcecommandpropertydefinition)]\n [!code-vb[ImplementICommandSource#ImplementICommandSourceCommandPropertyDefinition](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourcecommandpropertydefinition)]  \n  \n The following is the <xref:System.Windows.DependencyProperty> change callback.  \n  \n [!code-csharp[ImplementICommandSource#ImplementICommandSourceCommandChanged](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourcecommandchanged)]\n [!code-vb[ImplementICommandSource#ImplementICommandSourceCommandChanged](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourcecommandchanged)]  \n  \n The next step is to add and remove the command which is associated with the command source.  The <xref:System.Windows.Input.ICommandSource.Command%2A> property cannot simply be overwritten when a new command is added, because the event handlers associated with the previous command, if there was one, must be removed first.  \n  \n [!code-csharp[ImplementICommandSource#ImplementICommandSourceHookUnHookCommands](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourcehookunhookcommands)]\n [!code-vb[ImplementICommandSource#ImplementICommandSourceHookUnHookCommands](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourcehookunhookcommands)]  \n  \n The last step is to create logic for the <xref:System.Windows.Input.ICommand.CanExecuteChanged> handler and the <xref:System.Windows.Input.ICommand.Execute%2A> method.  \n  \n The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies the command source that the ability of the command to execute on the current command target may have changed.  When a command source receives this event, it typically calls the <xref:System.Windows.Input.ICommand.CanExecute%2A> method on the command.  If the command cannot execute on the current command target, the command source will typically disable itself.  If the command can execute on the current command target, the command source will typically enable itself.  \n  \n [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  \n  \n The last step is the <xref:System.Windows.Input.ICommand.Execute%2A> method.  If the command is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called; otherwise, the <xref:System.Windows.Input.ICommand> <xref:System.Windows.Input.ICommand.Execute%2A> method is called.  \n  \n [!code-csharp[ImplementICommandSource#ImplementICommandExecute](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]\n [!code-vb[ImplementICommandSource#ImplementICommandExecute](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  \n  \n## See Also  \n <xref:System.Windows.Input.ICommandSource>   \n <xref:System.Windows.Input.ICommand>   \n <xref:System.Windows.Input.RoutedCommand>   \n [Commanding Overview](../../../../docs/framework/wpf/advanced/commanding-overview.md)","nodes":[{"pos":[12,61],"content":"How to: Implement ICommandSource | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Implement ICommandSource | Microsoft Docs","pos":[0,49]}]},{"pos":[484,516],"content":"How to: Implement ICommandSource","linkify":"How to: Implement ICommandSource","nodes":[{"content":"How to: Implement ICommandSource","pos":[0,32]}]},{"content":"This example shows how to create a command source by implementing <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.","pos":[517,626],"source":"This example shows how to create a command source by implementing <xref:System.Windows.Input.ICommandSource>."},{"content":"A command source is an object that knows how to invoke a command.","pos":[628,693]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> interface exposes three members: <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph>.","pos":[695,958],"source":"  The <xref:System.Windows.Input.ICommandSource> interface exposes three members: <xref:System.Windows.Input.ICommandSource.Command%2A>, <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>, and <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> is the command which will be invoked.","pos":[960,1051],"source":"<xref:System.Windows.Input.ICommandSource.Command%2A> is the command which will be invoked."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph> is a user-defined data type which is passed from the command source to the method which handles the command.","pos":[1052,1227],"source":" The <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is a user-defined data type which is passed from the command source to the method which handles the command."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is the object that the command is being executed on.","pos":[1228,1344],"source":" The <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is the object that the command is being executed on."},{"content":"In this example, a class is created which subclasses the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Slider&gt;</ph> control and implements <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.","pos":[1351,1512],"source":"In this example, a class is created which subclasses the <xref:System.Windows.Controls.Slider> control and implements <xref:System.Windows.Input.ICommandSource>."},{"pos":[1521,1528],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides a number of classes which implement <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>, such as <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph>.","pos":[1532,1838],"source":"[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] provides a number of classes which implement <xref:System.Windows.Input.ICommandSource>, such as <xref:System.Windows.Controls.Button>, <xref:System.Windows.Controls.MenuItem>, and <xref:System.Windows.Controls.ListBoxItem>."},{"content":"A command source defines how it invokes a command.","pos":[1840,1890]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> invoke a command when they are clicked.","pos":[1893,2014],"source":"<xref:System.Windows.Controls.Button> and <xref:System.Windows.Controls.MenuItem> invoke a command when they are clicked."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph> invokes a command when it is double clicked.","pos":[2016,2105],"source":"  A <xref:System.Windows.Controls.ListBoxItem> invokes a command when it is double clicked."},{"content":"These classes only become a command source when their <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> property is set.","pos":[2106,2230],"source":" These classes only become a command source when their <xref:System.Windows.Input.ICommandSource.Command%2A> property is set."},{"content":"For this example we will invoke the command when the slider is moved, or more accurately, when the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A&gt;</ph> property is changed.","pos":[2237,2417],"source":"For this example we will invoke the command when the slider is moved, or more accurately, when the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property is changed."},{"content":"The following is the class definition.","pos":[2424,2462]},{"pos":[2469,2913],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ImplementICommandSource#ImplementICommandSourceClassDefinition<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourceclassdefinition)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>ImplementICommandSource#ImplementICommandSourceClassDefinition<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourceclassdefinition)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[ImplementICommandSource#ImplementICommandSourceClassDefinition](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourceclassdefinition)]\n [!code-vb[ImplementICommandSource#ImplementICommandSourceClassDefinition](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourceclassdefinition)]"},{"content":"The next step is to implement the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> members.","pos":[2920,3005],"source":"The next step is to implement the <xref:System.Windows.Input.ICommandSource> members."},{"content":"In this example, the properties are implemented as <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty&gt;</ph> objects.","pos":[3007,3107],"source":"  In this example, the properties are implemented as <xref:System.Windows.DependencyProperty> objects."},{"content":"This enables the properties to use data binding.","pos":[3109,3157]},{"content":"For more information about the <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty&gt;</ph> class, see the <bpt id=\"p1\">[</bpt>Dependency Properties Overview<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept>.","pos":[3159,3354],"source":"  For more information about the <xref:System.Windows.DependencyProperty> class, see the [Dependency Properties Overview](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)."},{"content":"For more information about data binding, see the <bpt id=\"p1\">[</bpt>Data Binding Overview<ept id=\"p1\">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.","pos":[3356,3491],"source":"  For more information about data binding, see the [Data Binding Overview](../../../../docs/framework/wpf/data/data-binding-overview.md)."},{"content":"Only the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> property is shown here.","pos":[3498,3584],"source":"Only the <xref:System.Windows.Input.ICommandSource.Command%2A> property is shown here."},{"pos":[3591,4075],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ImplementICommandSource#ImplementICommandSourceCommandPropertyDefinition<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourcecommandpropertydefinition)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>ImplementICommandSource#ImplementICommandSourceCommandPropertyDefinition<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourcecommandpropertydefinition)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[ImplementICommandSource#ImplementICommandSourceCommandPropertyDefinition](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourcecommandpropertydefinition)]\n [!code-vb[ImplementICommandSource#ImplementICommandSourceCommandPropertyDefinition](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourcecommandpropertydefinition)]"},{"content":"The following is the <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty&gt;</ph> change callback.","pos":[4082,4160],"source":"The following is the <xref:System.Windows.DependencyProperty> change callback."},{"pos":[4167,4607],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ImplementICommandSource#ImplementICommandSourceCommandChanged<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourcecommandchanged)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>ImplementICommandSource#ImplementICommandSourceCommandChanged<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourcecommandchanged)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[ImplementICommandSource#ImplementICommandSourceCommandChanged](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourcecommandchanged)]\n [!code-vb[ImplementICommandSource#ImplementICommandSourceCommandChanged](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourcecommandchanged)]"},{"content":"The next step is to add and remove the command which is associated with the command source.","pos":[4614,4705]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> property cannot simply be overwritten when a new command is added, because the event handlers associated with the previous command, if there was one, must be removed first.","pos":[4707,4937],"source":"  The <xref:System.Windows.Input.ICommandSource.Command%2A> property cannot simply be overwritten when a new command is added, because the event handlers associated with the previous command, if there was one, must be removed first."},{"pos":[4944,5400],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ImplementICommandSource#ImplementICommandSourceHookUnHookCommands<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourcehookunhookcommands)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>ImplementICommandSource#ImplementICommandSourceHookUnHookCommands<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourcehookunhookcommands)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[ImplementICommandSource#ImplementICommandSourceHookUnHookCommands](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandsourcehookunhookcommands)]\n [!code-vb[ImplementICommandSource#ImplementICommandSourceHookUnHookCommands](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandsourcehookunhookcommands)]"},{"content":"The last step is to create logic for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> handler and the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommand.Execute%2A&gt;</ph> method.","pos":[5407,5574],"source":"The last step is to create logic for the <xref:System.Windows.Input.ICommand.CanExecuteChanged> handler and the <xref:System.Windows.Input.ICommand.Execute%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> event notifies the command source that the ability of the command to execute on the current command target may have changed.","pos":[5581,5764],"source":"The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies the command source that the ability of the command to execute on the current command target may have changed."},{"content":"When a command source receives this event, it typically calls the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> method on the command.","pos":[5766,5905],"source":"  When a command source receives this event, it typically calls the <xref:System.Windows.Input.ICommand.CanExecute%2A> method on the command."},{"content":"If the command cannot execute on the current command target, the command source will typically disable itself.","pos":[5907,6017]},{"content":"If the command can execute on the current command target, the command source will typically enable itself.","pos":[6019,6125]},{"pos":[6132,6560],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ImplementICommandSource#ImplementICommandCanExecuteChanged<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>ImplementICommandSource#ImplementICommandCanExecuteChanged<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]"},{"content":"The last step is the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand.Execute%2A&gt;</ph> method.","pos":[6567,6643],"source":"The last step is the <xref:System.Windows.Input.ICommand.Execute%2A> method."},{"content":"If the command is a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> <ph id=\"ph3\">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> method is called; otherwise, the <ph id=\"ph4\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> <ph id=\"ph5\">&lt;xref:System.Windows.Input.ICommand.Execute%2A&gt;</ph> method is called.","pos":[6645,6942],"source":"  If the command is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called; otherwise, the <xref:System.Windows.Input.ICommand> <xref:System.Windows.Input.ICommand.Execute%2A> method is called."},{"pos":[6949,7337],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ImplementICommandSource#ImplementICommandExecute<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>ImplementICommandSource#ImplementICommandExecute<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[ImplementICommandSource#ImplementICommandExecute](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]\n [!code-vb[ImplementICommandSource#ImplementICommandExecute](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]"},{"pos":[7346,7354],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Commanding Overview<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/commanding-overview.md)</ept>","pos":[7491,7577],"source":" [Commanding Overview](../../../../docs/framework/wpf/advanced/commanding-overview.md)"}]}