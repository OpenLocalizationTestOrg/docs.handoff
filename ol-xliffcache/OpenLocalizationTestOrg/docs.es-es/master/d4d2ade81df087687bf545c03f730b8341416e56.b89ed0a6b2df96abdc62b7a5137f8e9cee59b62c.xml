{"content":"---\ntitle: \"% Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"%_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"modulus operator [C#]\"\n  - \"% operator [C#]\"\nms.assetid: 3b74f4f9-fd9c-45e7-84fa-c8d71a0dfad7\ncaps.latest.revision: 15\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# % Operator (C# Reference)\nThe `%` operator computes the remainder after dividing its first operand by its second. All numeric types have predefined remainder operators.  \n  \n## Remarks  \n User-defined types can overload the `%` operator (see [operator](../../../csharp/language-reference/keywords/operator.md)). When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.  \n  \n## Example  \n [!code-cs[csRefOperators#9](../../../csharp/language-reference/operators/codesnippet/CSharp/modulus-operator_1.cs)]  \n  \n## Comments  \n Note the round-off errors associated with the double type.  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[4,578],"nodes":[{"content":"% Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,42],"content":"% Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"% Operator (C# Reference) | Microsoft Docs","pos":[0,42]}]}],"pos":[6,51],"yaml":true}],"content":"title: \"% Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"%_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"modulus operator [C#]\"\n  - \"% operator [C#]\"\nms.assetid: 3b74f4f9-fd9c-45e7-84fa-c8d71a0dfad7\ncaps.latest.revision: 15\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[585,610],"content":"% Operator (C# Reference)","linkify":"% Operator (C# Reference)","nodes":[{"content":"% Operator (C# Reference)","pos":[0,25]}]},{"content":"The <ph id=\"ph1\">`%`</ph> operator computes the remainder after dividing its first operand by its second.","pos":[611,698],"source":"The `%` operator computes the remainder after dividing its first operand by its second."},{"content":"All numeric types have predefined remainder operators.","pos":[699,753]},{"pos":[762,769],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"User-defined types can overload the <ph id=\"ph1\">`%`</ph> operator (see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","pos":[773,896],"source":"User-defined types can overload the `%` operator (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"content":"When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.","pos":[897,1012]},{"pos":[1021,1028],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1032,1147],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#9<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/modulus-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#9](../../../csharp/language-reference/operators/codesnippet/CSharp/modulus-operator_1.cs)]"},{"pos":[1156,1164],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"Note the round-off errors associated with the double type.","pos":[1168,1226]},{"pos":[1235,1243],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1247,1307],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1311,1378],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1382,1451],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"}]}