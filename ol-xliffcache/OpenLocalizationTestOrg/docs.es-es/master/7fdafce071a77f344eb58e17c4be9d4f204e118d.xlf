<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="collections.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7fdafce071a77f344eb58e17c4be9d4f204e118d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\collections.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87c5499c217d1e5ad40e519ef6a0cf5e3909bead</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28815ad4f641af9c8af897051869f0750d8e5924</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Collections (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Collections (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For many applications, you want to create and manage groups of related objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are two ways to group objects: by creating arrays of objects, and by creating collections of objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Arrays are most useful for creating and working with a fixed number of strongly-typed objects.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For information about arrays, see <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Collections provide a more flexible way to work with groups of objects.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Unlike arrays, the group of objects you work with can grow and shrink dynamically as the needs of the application change.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For some collections, you can assign a key to any object that you put into the collection so that you can quickly retrieve the object by using the key.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A collection is a class, so you must declare an instance of the class before you can add elements to that collection.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If your collection contains elements of only one data type, you can use one of the classes in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A generic collection enforces type safety so that no other data type can be added to it.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you retrieve an element from a generic collection, you do not have to determine its data type or convert it.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For the examples in this topic, include <bpt id="p1">[</bpt>Imports<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept> statements for the <ph id="ph1">`System.Collections.Generic`</ph> and <ph id="ph2">`System.Linq`</ph> namespaces.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>In this topic<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using a Simple Collection<ept id="p1">](#BKMK_SimpleCollection)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Kinds of Collections<ept id="p1">](#BKMK_KindsOfCollections)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections.Generic Classes<ept id="p1">](#BKMK_Generic)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections.Concurrent Classes<ept id="p1">](#BKMK_Concurrent)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Collections Classes<ept id="p1">](#BKMK_Collections)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic Collection Class<ept id="p1">](#BKMK_VisualBasic)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing a Collection of Key/Value Pairs<ept id="p1">](#BKMK_KeyValuePairs)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using LINQ to Access a Collection<ept id="p1">](#BKMK_LINQ)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sorting a Collection<ept id="p1">](#BKMK_Sorting)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Defining a Custom Collection<ept id="p1">](#BKMK_CustomCollection)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Iterators<ept id="p1">](#BKMK_Iterators)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Using a Simple Collection</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The examples in this section use the generic <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, which enables you to work with a strongly typed list of objects.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example creates a list of strings and then iterates through the strings by using a <bpt id="p1">[</bpt>For Each…Next<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the contents of a collection are known in advance, you can use a <bpt id="p1">*</bpt>collection initializer<ept id="p1">*</ept> to initialize the collection.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Collection Initializers<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example is the same as the previous example, except a collection initializer is used to add elements to the collection.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can use a <bpt id="p1">[</bpt>For…Next<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> statement instead of a <ph id="ph1">`For Each`</ph> statement to iterate through a collection.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You accomplish this by accessing the collection elements by the index position.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The index of the elements starts at 0 and ends at the element count minus 1.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example iterates through the elements of a collection by using <ph id="ph1">`For…Next`</ph> instead of <ph id="ph2">`For Each`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example removes an element from the collection by specifying the object to remove.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example removes elements from a generic list.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Instead of a <ph id="ph1">`For Each`</ph> statement, a <bpt id="p1">[</bpt>For…Next<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> statement that iterates in descending order is used.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is because the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAt%2A&gt;</ph> method causes elements after a removed element to have a lower index value.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For the type of elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, you can also define your own class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`Galaxy`</ph> class that is used by the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is defined in the code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Kinds of Collections</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Many common collections are provided by the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Each type of collection is designed for a specific purpose.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Some of the common collection classes are described in this section:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic&gt;</ph> classes</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent&gt;</ph> classes</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections&gt;</ph> classes</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Visual Basic <ph id="ph1">`Collection`</ph> class</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>System.Collections.Generic Classes</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can create a generic collection by using one of the classes in the <ph id="ph1">&lt;xref:System.Collections.Generic&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A generic collection is useful when every item in the collection has the same data type.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A generic collection enforces strong typing by allowing only the desired data type to be added.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following table lists some of the frequently used classes of the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Represents a collection of key/value pairs that are organized based on the key.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Represents a list of objects that can be accessed by index.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Provides methods to search, sort, and modify lists.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Represents a first in, first out (FIFO) collection of objects.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Represents a collection of key/value pairs that are sorted by key based on the associated <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Represents a last in, first out (LIFO) collection of objects.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For additional information, see <bpt id="p1">[</bpt>Commonly Used Collection Types<ept id="p1">](../../../standard/collections/commonly-used-collection-types.md)</ept>, <bpt id="p2">[</bpt>Selecting a Collection Class<ept id="p2">](../../../standard/collections/selecting-a-collection-class.md)</ept>, and <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>System.Collections.Concurrent Classes</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4 or newer, the collections in the <ph id="ph1">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace provide efficient thread-safe operations for accessing collection items from multiple threads.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The classes in the <ph id="ph1">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace should be used instead of the corresponding types in the <ph id="ph2">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph> namespaces whenever multiple threads are accessing the collection concurrently.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Thread-Safe Collections<ept id="p1">](../../../standard/collections/thread-safe/index.md)</ept> and <ph id="ph1">&lt;xref:System.Collections.Concurrent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Some classes included in the <ph id="ph1">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace are <ph id="ph2">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>System.Collections Classes</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The classes in the <ph id="ph1">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph> namespace do not store elements as specifically typed objects, but as objects of type <ph id="ph2">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Whenever possible, you should use the generic collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace or the <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace instead of the legacy types in the <ph id="ph3">`System.Collections`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following table lists some of the frequently used classes in the <ph id="ph1">`System.Collections`</ph> namespace:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Represents an array of objects whose size is dynamically increased as required.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Represents a collection of key/value pairs that are organized based on the hash code of the key.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Represents a first in, first out (FIFO) collection of objects.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Represents a last in, first out (LIFO) collection of objects.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Specialized&gt;</ph> namespace provides specialized and strongly typed collection classes, such as string-only collections and linked-list and hybrid dictionaries.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Visual Basic Collection Class</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can use the Visual Basic <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> class to access a collection item by using either a numeric index or a <ph id="ph2">`String`</ph> key.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can add items to a collection object either with or without specifying a key.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you add an item without a key, you must use its numeric index to access it.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The Visual Basic <ph id="ph1">`Collection`</ph> class stores all its elements as type <ph id="ph2">`Object`</ph>, so you can add an item of any data type.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>There is no safeguard against inappropriate data types being added.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When you use the Visual Basic <ph id="ph1">`Collection`</ph> class, the first item in a collection has an index of 1.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This differs from the .NET Framework collection classes, for which the starting index is 0.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Whenever possible, you should use the generic collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace or the <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace instead of the Visual Basic <ph id="ph3">`Collection`</ph> class.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Implementing a Collection of Key/Value Pairs</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> generic collection enables you to access to elements in a collection by using the key of each element.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Each addition to the dictionary consists of a value and its associated key.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Retrieving a value by using its key is fast because the <ph id="ph1">`Dictionary`</ph> class is implemented as a hash table.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">`Dictionary`</ph> collection and iterates through the dictionary by using a <ph id="ph2">`For Each`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To instead use a collection initializer to build the <ph id="ph1">`Dictionary`</ph> collection, you can replace the <ph id="ph2">`BuildDictionary`</ph> and <ph id="ph3">`AddToDictionary`</ph> methods with the following method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property of <ph id="ph3">`Dictionary`</ph> to quickly find an item by key.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Item`</ph> property enables you to access an item in the <ph id="ph2">`elements`</ph> collection by using the <ph id="ph3">`elements(symbol)`</ph> code in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following example instead uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph> method quickly find an item by key.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Using LINQ to Access a Collection</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>LINQ (Language-Integrated Query) can be used to access collections.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>LINQ queries provide filtering, ordering, and grouping capabilities.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Getting Started with LINQ in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The following example runs a LINQ query against a generic <ph id="ph1">`List`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The LINQ query returns a different collection that contains the results.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Sorting a Collection</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following example illustrates a procedure for sorting a collection.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The example sorts instances of the <ph id="ph1">`Car`</ph> class that are stored in a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Car`</ph> class implements the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface, which requires that the <ph id="ph3">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method be implemented.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Each call to the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method makes a single comparison that is used for sorting.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>User-written code in the <ph id="ph1">`CompareTo`</ph> method returns a value for each comparison of the current object with another object.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The value returned is less than zero if the current object is less than the other object, greater than zero if the current object is greater than the other object, and zero if they are equal.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This enables you to define in code the criteria for greater than, less than, and equal.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`ListCars`</ph> method, the <ph id="ph2">`cars.Sort()`</ph> statement sorts the list.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This call to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> causes the <ph id="ph3">`CompareTo`</ph> method to be called automatically for the <ph id="ph4">`Car`</ph> objects in the <ph id="ph5">`List`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Defining a Custom Collection</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can define a collection by implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For additional information, see <bpt id="p1">[</bpt>Enumerating a Collection<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hwyysy67(v=vs.100))</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Although you can define a custom collection, it is usually better to instead use the collections that are included in the .NET Framework, which are described in <bpt id="p1">[</bpt>Kinds of Collections<ept id="p1">](#kinds-of-collections)</ept> earlier in this topic.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following example defines a custom collection class named <ph id="ph1">`AllColors`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This class implements the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, which requires that the <ph id="ph2">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> method be implemented.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetEnumerator`</ph> method returns an instance of the <ph id="ph2">`ColorEnumerator`</ph> class.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ColorEnumerator`</ph> implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface, which requires that the <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property, <ph id="ph4">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method, and <ph id="ph5">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method be implemented.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Iterators</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>iterator<ept id="p1">*</ept> is used to perform a custom iteration over a collection.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>An iterator can be a method or a <ph id="ph1">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>An iterator uses a <bpt id="p1">[</bpt>Yield<ept id="p1">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> statement to return each element of the collection one at a time.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You call an iterator by using a <bpt id="p1">[</bpt>For Each…Next<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Each iteration of the <ph id="ph1">`For Each`</ph> loop calls the iterator.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Yield`</ph> statement is reached in the iterator, an expression is returned, and the current location in code is retained.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Execution is restarted from that location the next time that the iterator is called.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Iterators (Visual Basic)<ept id="p1">](../../../visual-basic/programming-guide/concepts/iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The following example uses an iterator method.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The iterator method has a <ph id="ph1">`Yield`</ph> statement that is inside a <bpt id="p1">[</bpt>For…Next<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> loop.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`ListEvenNumbers`</ph> method, each iteration of the <ph id="ph2">`For Each`</ph> statement body creates a call to the iterator method, which proceeds to the next <ph id="ph3">`Yield`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Collection Initializers<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming Concepts (Visual Basic)<ept id="p1">](../../../visual-basic/programming-guide/concepts/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Option Strict Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to Objects (Visual Basic)<ept id="p1">](../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel LINQ (PLINQ)<ept id="p1">](../../../standard/parallel-programming/parallel-linq-plinq.md)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Collections and Data Structures<ept id="p1">](../../../standard/collections/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Selecting a Collection Class<ept id="p1">](../../../standard/collections/selecting-a-collection-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Comparisons and Sorts Within Collections<ept id="p1">](../../../standard/collections/comparisons-and-sorts-within-collections.md)</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>When to Use Generic Collections<ept id="p1">](../../../standard/collections/when-to-use-generic-collections.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>