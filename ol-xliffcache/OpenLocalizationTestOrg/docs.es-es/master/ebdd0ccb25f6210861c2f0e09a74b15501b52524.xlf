<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebdd0ccb25f6210861c2f0e09a74b15501b52524</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\maintaining-name-value-pairs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c4a4cebb1c2981e9e2b17a55846498475082479</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5fa8d5ee9e80f1b4377f135b441c14793e84937</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Maintaining Name-Value Pairs (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Maintaining Name/Value Pairs (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Many applications have to maintain information that is best kept as name/value pairs.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This information might be configuration information or global settings.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> contains some methods that make it easy to keep a set of name/value pairs.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can either keep the information as attributes or as a set of child elements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>One difference between keeping the information as attributes or as child elements is that attributes have the constraint that there can be only one attribute with a particular name for an element.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This limitation does not apply to child elements.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>SetAttributeValue and SetElementValue</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The two methods that facilitate keeping name/value pairs are <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These two methods have similar semantics.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> can add, modify, or remove attributes of an element.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> with a name of an attribute that does not exist, the method creates a new attribute and adds it to the specified element.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> with a name of an existing attribute and with some specified content, the contents of the attribute are replaced with the specified content.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> with a name of an existing attribute, and specify null for the content, the attribute is removed from its parent.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph> can add, modify, or remove child elements of an element.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph> with a name of a child element that does not exist, the method creates a new element and adds it to the specified element.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph> with a name of an existing element and with some specified content, the contents of the element are replaced with the specified content.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph> with a name of an existing element, and specify null for the content, the element is removed from its parent.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example creates an element with no attributes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetAttributeValue%2A&gt;</ph> method to create and maintain a list of name/value pairs.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example creates an element with no child elements.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.SetElementValue%2A&gt;</ph> method to create and maintain a list of name/value pairs.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Modifying XML Trees (LINQ to XML) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/modifying-xml-trees-linq-to-xml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>