<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-workflowinvoker-and-workflowapplication.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29d152cd6011fb3b55aae60726d095dc44dd23a5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\using-workflowinvoker-and-workflowapplication.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e39111402071303b351244396a4973cc48c5e3c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe49ec74c6904b29ad780d0c5d8022a5660de9b8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using WorkflowInvoker and WorkflowApplication</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using WorkflowInvoker and WorkflowApplication</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows Workflow Foundation (WF) provides several methods of hosting workflows.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> provides a simple way for invoking a workflow as if it were a method call and can be used only for workflows that do not use persistence.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> provides a richer model for executing workflows that includes notification of lifecycle events, execution control, bookmark resumption, and persistence.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph> provides support for messaging activities and is primarily used with workflow services.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic introduces you to workflow hosting with <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about hosting workflows with <ph id="ph1">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph>, see <bpt id="p1">[</bpt>Workflow Services<ept id="p1">](../wcf/feature-details/workflow-services.md)</ept> and <bpt id="p2">[</bpt>Hosting Workflow Services Overview<ept id="p2">](../wcf/feature-details/hosting-workflow-services-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using WorkflowInvoker</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> provides a model for executing a workflow as if it were a method call.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To invoke a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> method and pass in the workflow definition of the workflow to invoke.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this example, a <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity is invoked using <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When a workflow is invoked using <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>, the workflow executes on the calling thread and the <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> method blocks until the workflow is complete, including any idle time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that takes a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this example, a workflow is invoked twice with two different time-out intervals.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The first workflow complets, but the second does not.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> also provides asynchronous versions of the invoke method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Setting Input Arguments of a Workflow</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Data can be passed into a workflow using a dictionary of input parameters, keyed by argument name, that map to the input arguments of the workflow.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In this example, a <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> is invoked and the value for its <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine.Text%2A&gt;</ph> argument is specified using the dictionary of input parameters.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Retrieving Output Arguments of a Workflow</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The output parameters of a workflow can be obtained using the outputs dictionary that is returned from the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Divide`</ph> activity that has two input arguments and two output arguments.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, each output argument is returned in the <ph id="ph2">`outputs`</ph> dictionary, also keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the workflow derives from <ph id="ph1">&lt;xref:System.Activities.ActivityWithResult&gt;</ph>, such as <ph id="ph2">`CodeActivity&lt;TResult&gt;`</ph> or <ph id="ph3">`Activity&lt;TResult&gt;`</ph>, and there are output arguments in addition to the well-defined <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument, a non-generic overload of <ph id="ph5">`Invoke`</ph> must be used in order to retrieve the additional arguments.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To do this, the workflow definition passed into <ph id="ph1">`Invoke`</ph> must be of type <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this example the <ph id="ph1">`Divide`</ph> activity derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph>, but is declared as <ph id="ph3">&lt;xref:System.Activities.Activity&gt;</ph> so that a non-generic overload of <ph id="ph4">`Invoke`</ph> is used which returns a dictionary of arguments instead of a single return value.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Using WorkflowApplication</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> provides a rich set of features for workflow instance management.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> acts as a thread safe proxy to the actual  <ph id="ph2">&lt;xref:System.Activities.Hosting.WorkflowInstance&gt;</ph>, which encapsulates the runtime, and provides methods for creating and loading workflow instances, pausing and resuming, terminating, and notification of lifecycle events.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To run a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> you create the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>, subscribe to any desired lifecycle events, start the workflow, and then wait for it to finish.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example, a workflow definition that consists of a <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity is created and a <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> is created using the specified workflow definition.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> is handled so the host is notified when the workflow completes, the workflow is started with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>, and then the host waits for the workflow to complete.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When the workflow completes, the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is set and the host application can resume execution, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>WorkflowApplication Lifecycle Events</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph>, host authors can be notified when a workflow is unloaded (<ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Unloaded%2A&gt;</ph>), aborted (<ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph>), becomes idle (<ph id="ph4">&lt;xref:System.Activities.WorkflowApplication.Idle%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Activities.WorkflowApplication.PersistableIdle%2A&gt;</ph>), or an unhandled exception occurs (<ph id="ph6">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Workflow application developers can handle these notifications and take appropriate action, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Setting Input Arguments of a Workflow</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Data can be passed into a workflow as it is started using a dictionary of parameters, similar to the way data is passed in when using <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each item in the dictionary maps to an input argument of the specified workflow.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In this example, a workflow that consists of a <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity is invoked and its <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine.Text%2A&gt;</ph> argument is specified using the dictionary of input parameters.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Retrieving Output Arguments of a Workflow</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When a workflow completes, any output arguments can be retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handler by accessing the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplicationCompletedEventArgs.Outputs%2A?displayProperty=nameWithType&gt;</ph> dictionary.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using a workflow definition consisting of a single <ph id="ph2">`DiceRoll`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When the workflow completes, the outputs are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handler.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> take a dictionary of input arguments and return a dictionary of <ph id="ph3">`out`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>These dictionary parameters, properties, and return values are of type <ph id="ph1">`IDictionary&lt;string, object&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The actual instance of the dictionary class that is passed in can be any class that implements <ph id="ph1">`IDictionary&lt;string, object&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In these examples, <ph id="ph1">`Dictionary&lt;string, object&gt;`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information about dictionaries, see <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Passing Data into a Running Workflow Using Bookmarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Bookmarks are the mechanism by which an activity can passively wait to be resumed and are a mechanism for passing data into a running workflow instance.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If an activity is waiting for data, it can create a <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph> and register a callback method to be called when the <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph> is resumed, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When executed, the <ph id="ph1">`ReadLine`</ph> activity creates a <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph>, registers a callback, and then waits for the <ph id="ph3">&lt;xref:System.Activities.Bookmark&gt;</ph> to be resumed.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When it is resumed, the <ph id="ph1">`ReadLine`</ph> activity assigns the data that was passed with the <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph> to its <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> argument.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In this example, a workflow is created that uses the <ph id="ph1">`ReadLine`</ph> activity to gather the user’s name and display it to the console window.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`ReadLine`</ph> activity is executed, it creates a <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph> named <ph id="ph3">`UserName`</ph> and then waits for the bookmark to be resumed.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The host collects the desired data and then resumes the <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The workflow resumes, displays the name, and then completes.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The host application can inspect the workflow to determine if there are any active bookmarks.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It can do this by calling the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.GetBookmarks%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance, or by inspecting the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplicationIdleEventArgs&gt;</ph> in the <ph id="ph4">&lt;xref:System.Activities.WorkflowApplication.Idle%2A&gt;</ph> handler.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following code example is like the previous example except that the active bookmarks are enumerated before the bookmark is resumed.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The workflow is started, and once the <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph> is created and the workflow goes idle, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.GetBookmarks%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When the workflow is completed, the following output is displayed to the console.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>What is your name?<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BookmarkName: UserName - OwnerDisplayName: ReadLine<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Steve<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hello, Steve<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following code example inspects the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationIdleEventArgs&gt;</ph> passed into the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Idle%2A&gt;</ph> handler of a <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In this example the workflow going idle has one <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph> with a name of <ph id="ph2">`EnterGuess`</ph>, owned by an activity named <ph id="ph3">`ReadInt`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This code example is based off of <bpt id="p1">[</bpt>How to: Run a Workflow<ept id="p1">](how-to-run-a-workflow.md)</ept>, which is part of the <bpt id="p2">[</bpt>Getting Started Tutorial<ept id="p2">](getting-started-tutorial.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Idle%2A&gt;</ph> handler in that step is modified to contain the code from this example, the following output is displayed.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BookmarkName: EnterGuess - OwnerDisplayName: ReadInt<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> provides a lightweight way to invoke workflows, and although it provides methods for passing data in at the start of a workflow and extracting data from a completed workflow, it does not provide for more complex scenarios which is where <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> can be used.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>