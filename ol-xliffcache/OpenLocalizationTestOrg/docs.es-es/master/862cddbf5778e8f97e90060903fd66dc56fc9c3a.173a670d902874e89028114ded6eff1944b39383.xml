{"content":"---\ntitle: \"How to: Implement a Discoverable Service that Registers with the Discovery Proxy | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: eb275bc1-535b-44c8-b9f3-0b75e9aa473b\ncaps.latest.revision: 14\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Implement a Discoverable Service that Registers with the Discovery Proxy\nThis topic is the second of four topics that discusses how to implement a discovery proxy. In the previous topic, [How to: Implement a Discovery Proxy](../../../../docs/framework/wcf/feature-details/how-to-implement-a-discovery-proxy.md), you implemented a discovery proxy. In this topic, you create a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service that sends announcement messages (`Hello` and `Bye`) to the discovery proxy, causing it to register and unregister itself with the discovery proxy.  \n  \n### To define the service contract  \n  \n1.  Add a new console application project to the `DiscoveryProxyExample` solution called `Service`.  \n  \n2.  Add references to the following assemblies:  \n  \n    1.  System.ServiceModel  \n  \n    2.  System.ServiceModel.Discovery  \n  \n3.  Add a new class to the project called `CalculatorService`.  \n  \n4.  Add the following using statements.  \n  \n    ```csharp  \n    using System;  \n    using System.ServiceModel;  \n    ```  \n  \n5.  Within CalculatorService.cs, define the service contract.  \n  \n    ```csharp  \n    // Define a service contract.  \n        [ServiceContract(Namespace = \"http://Microsoft.Samples.Discovery\")]  \n        public interface ICalculatorService  \n        {  \n            [OperationContract]  \n            double Add(double n1, double n2);  \n            [OperationContract]  \n            double Subtract(double n1, double n2);  \n            [OperationContract]  \n            double Multiply(double n1, double n2);  \n            [OperationContract]  \n            double Divide(double n1, double n2);  \n        }  \n    ```  \n  \n6.  Also within CalculatorService.cs, implement the service contract.  \n  \n    ```csharp  \n    // Service class which implements the service contract.      \n        public class CalculatorService : ICalculatorService  \n        {  \n            public double Add(double n1, double n2)  \n            {  \n                double result = n1 + n2;  \n                Console.WriteLine(\"Received Add({0},{1})\", n1, n2);  \n                Console.WriteLine(\"Return: {0}\", result);  \n                return result;  \n            }  \n  \n            public double Subtract(double n1, double n2)  \n            {  \n                double result = n1 - n2;  \n                Console.WriteLine(\"Received Subtract({0},{1})\", n1, n2);  \n                Console.WriteLine(\"Return: {0}\", result);  \n                return result;  \n            }  \n  \n            public double Multiply(double n1, double n2)  \n            {  \n                double result = n1 * n2;  \n                Console.WriteLine(\"Received Multiply({0},{1})\", n1, n2);  \n                Console.WriteLine(\"Return: {0}\", result);  \n                return result;  \n            }  \n  \n            public double Divide(double n1, double n2)  \n            {  \n                double result = n1 / n2;  \n                Console.WriteLine(\"Received Divide({0},{1})\", n1, n2);  \n                Console.WriteLine(\"Return: {0}\", result);  \n                return result;  \n            }  \n        }  \n    ```  \n  \n### To host the service  \n  \n1.  Open the Program.cs file that was generated when you created the project.  \n  \n2.  Add the following using statements.  \n  \n    ```csharp \n    using System;  \n    using System.ServiceModel;  \n    using System.ServiceModel.Description;  \n    using System.ServiceModel.Discovery;  \n    ```  \n  \n3.  Within the `Main()` method, add the following code:  \n  \n    ```csharp  \n    // Define the base address of the service  \n    Uri baseAddress = new Uri(\"net.tcp://localhost:9002/CalculatorService/\" + Guid.NewGuid().ToString());  \n    // Define the endpoint address where announcement messages will be sent  \n    Uri announcementEndpointAddress = new Uri(\"net.tcp://localhost:9021/Announcement\");  \n  \n    // Create the service host  \n    ServiceHost serviceHost = new ServiceHost(typeof(CalculatorService), baseAddress);  \n    try  \n    {  \n       // Add a service endpoint  \n       ServiceEndpoint netTcpEndpoint = serviceHost.AddServiceEndpoint(typeof(ICalculatorService), new NetTcpBinding(), string.Empty);                \n  \n       // Create an announcement endpoint, which points to the Announcement Endpoint hosted by the proxy service.  \n       AnnouncementEndpoint announcementEndpoint = new AnnouncementEndpoint(new NetTcpBinding(), new EndpointAddress(announcementEndpointAddress));  \n  \n       // Create a ServiceDiscoveryBehavior and add the announcement endpoint  \n       ServiceDiscoveryBehavior serviceDiscoveryBehavior = new ServiceDiscoveryBehavior();  \n                    serviceDiscoveryBehavior.AnnouncementEndpoints.Add(announcementEndpoint);  \n  \n       // Add the ServiceDiscoveryBehavior to the service host to make the service discoverable  \n       serviceHost.Description.Behaviors.Add(serviceDiscoveryBehavior);  \n  \n       // Start listening for messages  \n      serviceHost.Open();  \n  \n       Console.WriteLine(\"Calculator Service started at {0}\", baseAddress);  \n       Console.WriteLine();  \n       Console.WriteLine(\"Press <ENTER> to terminate the service.\");  \n       Console.WriteLine();  \n       Console.ReadLine();  \n  \n       serviceHost.Close();  \n    }  \n    catch (CommunicationException e)  \n    {  \n       Console.WriteLine(e.Message);  \n    }  \n    catch (TimeoutException e)  \n    {  \n       Console.WriteLine(e.Message);  \n    }     \n  \n    if (serviceHost.State != CommunicationState.Closed)  \n    {  \n       Console.WriteLine(\"Aborting the service...\");  \n       serviceHost.Abort();  \n    }  \n    ```  \n  \n You have completed implementing a discoverable service. Continue on to [How to: Implement a Client Application that Uses the Discovery Proxy to Find a Service](../../../../docs/framework/wcf/feature-details/client-app-discovery-proxy-to-find-a-service.md).  \n  \n## Example  \n This is the full listing of the code used in this topic.  \n  \n```csharp  \n// CalculatorService.cs  \n//----------------------------------------------------------------  \n// Copyright (c) Microsoft Corporation.  All rights reserved.  \n//----------------------------------------------------------------  \n  \nusing System;  \nusing System.ServiceModel;  \n  \nnamespace Microsoft.Samples.Discovery  \n{  \n    // Define a service contract.  \n    [ServiceContract(Namespace = \"http://Microsoft.Samples.Discovery\")]  \n    public interface ICalculatorService  \n    {  \n        [OperationContract]  \n        double Add(double n1, double n2);  \n        [OperationContract]  \n        double Subtract(double n1, double n2);  \n        [OperationContract]  \n        double Multiply(double n1, double n2);  \n        [OperationContract]  \n        double Divide(double n1, double n2);  \n    }  \n  \n    // Service class which implements the service contract.      \n    public class CalculatorService : ICalculatorService  \n    {  \n        public double Add(double n1, double n2)  \n        {  \n            double result = n1 + n2;  \n            Console.WriteLine(\"Received Add({0},{1})\", n1, n2);  \n            Console.WriteLine(\"Return: {0}\", result);  \n            return result;  \n        }  \n  \n        public double Subtract(double n1, double n2)  \n        {  \n            double result = n1 - n2;  \n            Console.WriteLine(\"Received Subtract({0},{1})\", n1, n2);  \n            Console.WriteLine(\"Return: {0}\", result);  \n            return result;  \n        }  \n  \n        public double Multiply(double n1, double n2)  \n        {  \n            double result = n1 * n2;  \n            Console.WriteLine(\"Received Multiply({0},{1})\", n1, n2);  \n            Console.WriteLine(\"Return: {0}\", result);  \n            return result;  \n        }  \n  \n        public double Divide(double n1, double n2)  \n        {  \n            double result = n1 / n2;  \n            Console.WriteLine(\"Received Divide({0},{1})\", n1, n2);  \n            Console.WriteLine(\"Return: {0}\", result);  \n            return result;  \n        }  \n    }  \n}  \n```  \n  \n```csharp  \n// Program.cs  \n//----------------------------------------------------------------  \n// Copyright (c) Microsoft Corporation.  All rights reserved.  \n//----------------------------------------------------------------  \n  \nusing System;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Description;  \nusing System.ServiceModel.Discovery;  \n  \nnamespace Microsoft.Samples.Discovery  \n{  \n    class Program  \n    {  \n        public static void Main()  \n        {  \n            Uri baseAddress = new Uri(\"net.tcp://localhost:9002/CalculatorService/\" + Guid.NewGuid().ToString());  \n            Uri announcementEndpointAddress = new Uri(\"net.tcp://localhost:9021/Announcement\");  \n  \n            ServiceHost serviceHost = new ServiceHost(typeof(CalculatorService), baseAddress);  \n            try  \n            {  \n                ServiceEndpoint netTcpEndpoint = serviceHost.AddServiceEndpoint(typeof(ICalculatorService), new NetTcpBinding(), string.Empty);                \n  \n                // Create an announcement endpoint, which points to the Announcement Endpoint hosted by the proxy service.  \n                AnnouncementEndpoint announcementEndpoint = new AnnouncementEndpoint(new NetTcpBinding(), new EndpointAddress(announcementEndpointAddress));  \n                ServiceDiscoveryBehavior serviceDiscoveryBehavior = new ServiceDiscoveryBehavior();  \n                serviceDiscoveryBehavior.AnnouncementEndpoints.Add(announcementEndpoint);  \n  \n                // Make the service discoverable  \n                serviceHost.Description.Behaviors.Add(serviceDiscoveryBehavior);  \n  \n                serviceHost.Open();  \n  \n                Console.WriteLine(\"Calculator Service started at {0}\", baseAddress);  \n                Console.WriteLine();  \n                Console.WriteLine(\"Press <ENTER> to terminate the service.\");  \n                Console.WriteLine();  \n                Console.ReadLine();  \n  \n                serviceHost.Close();  \n            }  \n            catch (CommunicationException e)  \n            {  \n                Console.WriteLine(e.Message);  \n            }  \n            catch (TimeoutException e)  \n            {  \n                Console.WriteLine(e.Message);  \n            }     \n  \n            if (serviceHost.State != CommunicationState.Closed)  \n            {  \n                Console.WriteLine(\"Aborting the service...\");  \n                serviceHost.Abort();  \n            }  \n        }  \n    }  \n}  \n```  \n\n## See Also  \n [WCF Discovery](../../../../docs/framework/wcf/feature-details/wcf-discovery.md)   \n [How to: Implement a Discovery Proxy](../../../../docs/framework/wcf/feature-details/how-to-implement-a-discovery-proxy.md)   \n [How to: Implement a Client Application that Uses the Discovery Proxy to Find a Service](../../../../docs/framework/wcf/feature-details/client-app-discovery-proxy-to-find-a-service.md)","nodes":[{"pos":[12,109],"content":"How to: Implement a Discoverable Service that Registers with the Discovery Proxy | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Implement a Discoverable Service that Registers with the Discovery Proxy | Microsoft Docs","pos":[0,97]}]},{"pos":[408,488],"content":"How to: Implement a Discoverable Service that Registers with the Discovery Proxy","linkify":"How to: Implement a Discoverable Service that Registers with the Discovery Proxy","nodes":[{"content":"How to: Implement a Discoverable Service that Registers with the Discovery Proxy","pos":[0,80]}]},{"content":"This topic is the second of four topics that discusses how to implement a discovery proxy.","pos":[489,579]},{"content":"In the previous topic, <bpt id=\"p1\">[</bpt>How to: Implement a Discovery Proxy<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-implement-a-discovery-proxy.md)</ept>, you implemented a discovery proxy.","pos":[580,762],"source":" In the previous topic, [How to: Implement a Discovery Proxy](../../../../docs/framework/wcf/feature-details/how-to-implement-a-discovery-proxy.md), you implemented a discovery proxy."},{"content":"In this topic, you create a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service that sends announcement messages (<ph id=\"ph2\">`Hello`</ph> and <ph id=\"ph3\">`Bye`</ph>) to the discovery proxy, causing it to register and unregister itself with the discovery proxy.","pos":[763,1002],"source":" In this topic, you create a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service that sends announcement messages (`Hello` and `Bye`) to the discovery proxy, causing it to register and unregister itself with the discovery proxy."},{"pos":[1012,1042],"content":"To define the service contract","linkify":"To define the service contract","nodes":[{"content":"To define the service contract","pos":[0,30]}]},{"pos":[1052,1147],"content":"Add a new console application project to the <ph id=\"ph1\">`DiscoveryProxyExample`</ph> solution called <ph id=\"ph2\">`Service`</ph>.","source":"Add a new console application project to the `DiscoveryProxyExample` solution called `Service`."},{"content":"Add references to the following assemblies:","pos":[1157,1200]},{"content":"System.ServiceModel","pos":[1214,1233]},{"content":"System.ServiceModel.Discovery","pos":[1247,1276]},{"pos":[1286,1344],"content":"Add a new class to the project called <ph id=\"ph1\">`CalculatorService`</ph>.","source":"Add a new class to the project called `CalculatorService`."},{"content":"Add the following using statements.","pos":[1354,1389]},{"content":"Within CalculatorService.cs, define the service contract.","pos":[1481,1538]},{"content":"Also within CalculatorService.cs, implement the service contract.","pos":[2102,2167]},{"pos":[3561,3580],"content":"To host the service","linkify":"To host the service","nodes":[{"content":"To host the service","pos":[0,19]}]},{"content":"Open the Program.cs file that was generated when you created the project.","pos":[3590,3663]},{"content":"Add the following using statements.","pos":[3673,3708]},{"pos":[3887,3938],"content":"Within the <ph id=\"ph1\">`Main()`</ph> method, add the following code:","source":"Within the `Main()` method, add the following code:"},{"content":"You have completed implementing a discoverable service.","pos":[6044,6099]},{"content":"Continue on to <bpt id=\"p1\">[</bpt>How to: Implement a Client Application that Uses the Discovery Proxy to Find a Service<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/client-app-discovery-proxy-to-find-a-service.md)</ept>.","pos":[6100,6300],"source":" Continue on to [How to: Implement a Client Application that Uses the Discovery Proxy to Find a Service](../../../../docs/framework/wcf/feature-details/client-app-discovery-proxy-to-find-a-service.md)."},{"pos":[6309,6316],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This is the full listing of the code used in this topic.","pos":[6320,6376]},{"pos":[10922,10930],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>WCF Discovery<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/wcf-discovery.md)</ept><ph id=\"ph1\"> </ph>","pos":[10934,11015],"source":"[WCF Discovery](../../../../docs/framework/wcf/feature-details/wcf-discovery.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Implement a Discovery Proxy<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-implement-a-discovery-proxy.md)</ept><ph id=\"ph1\"> </ph>","pos":[11018,11143],"source":" [How to: Implement a Discovery Proxy](../../../../docs/framework/wcf/feature-details/how-to-implement-a-discovery-proxy.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Implement a Client Application that Uses the Discovery Proxy to Find a Service<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/client-app-discovery-proxy-to-find-a-service.md)</ept>","pos":[11146,11331],"source":" [How to: Implement a Client Application that Uses the Discovery Proxy to Find a Service](../../../../docs/framework/wcf/feature-details/client-app-discovery-proxy-to-find-a-service.md)"}]}