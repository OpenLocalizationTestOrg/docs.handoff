{"content":"---\ntitle: \"&lt;= Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<=_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"less than or equal to operator (<=) [C#]\"\n  - \"<= operator [C#]\"\nms.assetid: bb0caec9-d253-4105-b8bc-5252233251e4\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;= Operator (C# Reference)\nAll numeric and enumeration types define a \"less than or equal\" relational operator (`<=`) that returns `true` if the first operand is less than or equal to the second, `false` otherwise.  \n  \n## Remarks  \n User-defined types can overload the `<=` operator. For more information, see [operator](../../../csharp/language-reference/keywords/operator.md). If `<=` is overloaded, [>=](../../../csharp/language-reference/operators/greater-than-equal-operator.md) must also be overloaded. Operations on integral types are generally allowed on enumeration.  \n  \n## Example  \n [!code-cs[csRefOperators#32](../../../csharp/language-reference/operators/codesnippet/CSharp/less-than-equal-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)   \n [explicit](../../../csharp/language-reference/keywords/explicit.md)","nodes":[{"pos":[4,603],"nodes":[{"content":"&lt;= Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"&lt;= Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>= Operator (C# Reference) | Microsoft Docs","pos":[0,46],"source":"&lt;= Operator (C# Reference) | Microsoft Docs"}]}],"pos":[6,55],"yaml":true}],"content":"title: \"&lt;= Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<=_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"less than or equal to operator (<=) [C#]\"\n  - \"<= operator [C#]\"\nms.assetid: bb0caec9-d253-4105-b8bc-5252233251e4\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[610,639],"content":"&lt;= Operator (C# Reference)","linkify":"&lt;= Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>= Operator (C# Reference)","pos":[0,29],"source":"&lt;= Operator (C# Reference)"}]},{"pos":[640,827],"content":"All numeric and enumeration types define a \"less than or equal\" relational operator (<ph id=\"ph1\">`&lt;=`</ph>) that returns <ph id=\"ph2\">`true`</ph> if the first operand is less than or equal to the second, <ph id=\"ph3\">`false`</ph> otherwise.","source":"All numeric and enumeration types define a \"less than or equal\" relational operator (`<=`) that returns `true` if the first operand is less than or equal to the second, `false` otherwise."},{"pos":[836,843],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"User-defined types can overload the <ph id=\"ph1\">`&lt;=`</ph> operator.","pos":[847,897],"source":"User-defined types can overload the `<=` operator."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>.","pos":[898,992],"source":" For more information, see [operator](../../../csharp/language-reference/keywords/operator.md)."},{"content":"If <ph id=\"ph1\">`&lt;=`</ph> is overloaded, <bpt id=\"p1\">[</bpt><ph id=\"ph2\">&gt;=</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/greater-than-equal-operator.md)</ept> must also be overloaded.","pos":[993,1122],"source":" If `<=` is overloaded, [>=](../../../csharp/language-reference/operators/greater-than-equal-operator.md) must also be overloaded."},{"content":"Operations on integral types are generally allowed on enumeration.","pos":[1123,1189]},{"pos":[1198,1205],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1209,1333],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#32<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/less-than-equal-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#32](../../../csharp/language-reference/operators/codesnippet/CSharp/less-than-equal-operator_1.cs)]"},{"pos":[1342,1350],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1354,1414],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1418,1485],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1489,1559],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>explicit<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit.md)</ept>","pos":[1563,1630],"source":"[explicit](../../../csharp/language-reference/keywords/explicit.md)"}]}