{"content":"---\ntitle: \"How to: Call Operations Asynchronously Using a Channel Factory | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: cc17dd47-b9ad-451c-a362-e36e0aac7ba0\ncaps.latest.revision: 7\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Call Operations Asynchronously Using a Channel Factory\nThis topic covers how a client can access a service operation asynchronously when using a <xref:System.ServiceModel.ChannelFactory%601>-based client application. (When using a <xref:System.ServiceModel.ClientBase%601?displayProperty=fullName> object to invoke a service you can use the event-driven asynchronous calling model. For more information, see [How to: Call Service Operations Asynchronously](../../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md). For more information about the event-based asynchronous calling model, see [Multithreaded Programming with the Event-based Asynchronous Pattern](../../../../docs/standard/asynchronous-programming-patterns/multithreaded-programming-with-the-event-based-asynchronous-pattern.md).)  \n  \n The service in this topic implements the `ICalculator` interface. The client can call the operations on this interface asynchronously, which means that operations like `Add` are split into two methods, `BeginAdd` and `EndAdd`, the former of which initiates the call and the latter of which retrieves the result when the operation completes. For an example showing how to implement an operation asynchronously in a service, see [How to: Implement an Asynchronous Service Operation](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md). For details about synchronous and asynchronous operations, see [Synchronous and Asynchronous Operations](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md).  \n  \n## Procedure  \n  \n#### To call WCF service operations asynchronously  \n  \n1.  Run the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) tool with the `/async` option as shown in the following command.  \n  \n    ```  \n    svcutil /n:http://Microsoft.ServiceModel.Samples,Microsoft.ServiceModel.Samples http://localhost:8000/servicemodelsamples/service/mex /a  \n  \n    ```  \n  \n     This generates an asynchronous client version of the service contract for the operation.  \n  \n2.  Create a callback function to be called when the asynchronous operation is complete, as shown in the following sample code.  \n  \n     [!code-csharp[C_How_To_CF_Async#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/client.cs#2)]\n     [!code-vb[C_How_To_CF_Async#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/client.vb#2)]  \n  \n3.  To access a service operation asynchronously, create the client and call the `Begin[Operation]` (for example, `BeginAdd`) and specify a callback function, as shown in the following sample code.  \n  \n     [!code-csharp[C_How_To_CF_Async#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/client.cs#3)]\n     [!code-vb[C_How_To_CF_Async#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/client.vb#3)]  \n  \n     When the callback function executes, the client calls `End<operation>` (for example, `EndAdd`) to retrieve the result.  \n  \n## Example  \n The service that is used with the client code that is used in the preceding procedure implements the `ICalculator` interface as shown in the following code. On the service side, the `Add` and `Subtract` operations of the contract are invoked synchronously by the [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] run time, even though the preceding client steps are invoked asynchronously on the client. The `Multiply` and `Divide` operations are used to invoke the service asynchronously on the service side, even if the client invokes them synchronously. This example sets the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property to `true`. This property setting, in combination with the implementation of the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] asynchronous pattern, tells the run time to invoke the operation asynchronously.  \n  \n [!code-csharp[C_How_To_CF_Async#4](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/service.cs#4)]\n [!code-vb[C_How_To_CF_Async#4](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/service.vb#4)]  \n  \n## See Also  \n [Service Contract: Asynchronous Sample](http://msdn.microsoft.com/en-us/833db946-f511-4f64-a26f-2759a11217c7)","nodes":[{"pos":[4,382],"embed":true,"restype":"x-metadata","content":"title: \"How to: Call Operations Asynchronously Using a Channel Factory | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: cc17dd47-b9ad-451c-a362-e36e0aac7ba0\ncaps.latest.revision: 7\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"How to: Call Operations Asynchronously Using a Channel Factory | Microsoft Docs","nodes":[{"pos":[0,79],"content":"How to: Call Operations Asynchronously Using a Channel Factory | Microsoft Docs","nodes":[{"content":"How to: Call Operations Asynchronously Using a Channel Factory | Microsoft Docs","pos":[0,79]}]}],"path":["title"]}],"yml":true},{"pos":[389,451],"content":"How to: Call Operations Asynchronously Using a Channel Factory","linkify":"How to: Call Operations Asynchronously Using a Channel Factory","nodes":[{"content":"How to: Call Operations Asynchronously Using a Channel Factory","pos":[0,62]}]},{"content":"This topic covers how a client can access a service operation asynchronously when using a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>-based client application.","pos":[452,613],"source":"This topic covers how a client can access a service operation asynchronously when using a <xref:System.ServiceModel.ChannelFactory%601>-based client application."},{"content":"(When using a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601?displayProperty=fullName&gt;</ph> object to invoke a service you can use the event-driven asynchronous calling model.","pos":[614,778],"source":" (When using a <xref:System.ServiceModel.ClientBase%601?displayProperty=fullName> object to invoke a service you can use the event-driven asynchronous calling model."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Call Service Operations Asynchronously<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)</ept>.","pos":[779,955],"source":" For more information, see [How to: Call Service Operations Asynchronously](../../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)."},{"content":"For more information about the event-based asynchronous calling model, see <bpt id=\"p1\">[</bpt>Multithreaded Programming with the Event-based Asynchronous Pattern<ept id=\"p1\">](../../../../docs/standard/asynchronous-programming-patterns/multithreaded-programming-with-the-event-based-asynchronous-pattern.md)</ept>.)","pos":[956,1234],"source":" For more information about the event-based asynchronous calling model, see [Multithreaded Programming with the Event-based Asynchronous Pattern](../../../../docs/standard/asynchronous-programming-patterns/multithreaded-programming-with-the-event-based-asynchronous-pattern.md).)"},{"content":"The service in this topic implements the <ph id=\"ph1\">`ICalculator`</ph> interface.","pos":[1241,1306],"source":"The service in this topic implements the `ICalculator` interface."},{"content":"The client can call the operations on this interface asynchronously, which means that operations like <ph id=\"ph1\">`Add`</ph> are split into two methods, <ph id=\"ph2\">`BeginAdd`</ph> and <ph id=\"ph3\">`EndAdd`</ph>, the former of which initiates the call and the latter of which retrieves the result when the operation completes.","pos":[1307,1581],"source":" The client can call the operations on this interface asynchronously, which means that operations like `Add` are split into two methods, `BeginAdd` and `EndAdd`, the former of which initiates the call and the latter of which retrieves the result when the operation completes."},{"content":"For an example showing how to implement an operation asynchronously in a service, see <bpt id=\"p1\">[</bpt>How to: Implement an Asynchronous Service Operation<ept id=\"p1\">](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)</ept>.","pos":[1582,1808],"source":" For an example showing how to implement an operation asynchronously in a service, see [How to: Implement an Asynchronous Service Operation](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)."},{"content":"For details about synchronous and asynchronous operations, see <bpt id=\"p1\">[</bpt>Synchronous and Asynchronous Operations<ept id=\"p1\">](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)</ept>.","pos":[1809,1989],"source":" For details about synchronous and asynchronous operations, see [Synchronous and Asynchronous Operations](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)."},{"pos":[1998,2007],"content":"Procedure","linkify":"Procedure","nodes":[{"content":"Procedure","pos":[0,9]}]},{"pos":[2018,2063],"content":"To call WCF service operations asynchronously","linkify":"To call WCF service operations asynchronously","nodes":[{"content":"To call WCF service operations asynchronously","pos":[0,45]}]},{"pos":[2073,2278],"content":"Run the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> tool with the <ph id=\"ph1\">`/async`</ph> option as shown in the following command.","source":"Run the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) tool with the `/async` option as shown in the following command."},{"content":"This generates an asynchronous client version of the service contract for the operation.","pos":[2458,2546]},{"content":"Create a callback function to be called when the asynchronous operation is complete, as shown in the following sample code.","pos":[2556,2679]},{"pos":[2690,2939],"content":"[!code-csharp[C_How_To_CF_Async#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/client.cs#2)]\n [!code-vb[C_How_To_CF_Async#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/client.vb#2)]","leadings":["","    "],"nodes":[]},{"pos":[2949,3142],"content":"To access a service operation asynchronously, create the client and call the <ph id=\"ph1\">`Begin[Operation]`</ph> (for example, <ph id=\"ph2\">`BeginAdd`</ph>) and specify a callback function, as shown in the following sample code.","source":"To access a service operation asynchronously, create the client and call the `Begin[Operation]` (for example, `BeginAdd`) and specify a callback function, as shown in the following sample code."},{"pos":[3153,3402],"content":"[!code-csharp[C_How_To_CF_Async#3](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/client.cs#3)]\n [!code-vb[C_How_To_CF_Async#3](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/client.vb#3)]","leadings":["","    "],"nodes":[]},{"pos":[3413,3531],"content":"When the callback function executes, the client calls <ph id=\"ph1\">`End&lt;operation&gt;`</ph> (for example, <ph id=\"ph2\">`EndAdd`</ph>) to retrieve the result.","source":"When the callback function executes, the client calls `End<operation>` (for example, `EndAdd`) to retrieve the result."},{"pos":[3540,3547],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The service that is used with the client code that is used in the preceding procedure implements the <ph id=\"ph1\">`ICalculator`</ph> interface as shown in the following code.","pos":[3551,3707],"source":"The service that is used with the client code that is used in the preceding procedure implements the `ICalculator` interface as shown in the following code."},{"content":"On the service side, the <ph id=\"ph1\">`Add`</ph> and <ph id=\"ph2\">`Subtract`</ph> operations of the contract are invoked synchronously by the <ph id=\"ph3\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> run time, even though the preceding client steps are invoked asynchronously on the client.","pos":[3708,3960],"source":" On the service side, the `Add` and `Subtract` operations of the contract are invoked synchronously by the [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] run time, even though the preceding client steps are invoked asynchronously on the client."},{"content":"The <ph id=\"ph1\">`Multiply`</ph> and <ph id=\"ph2\">`Divide`</ph> operations are used to invoke the service asynchronously on the service side, even if the client invokes them synchronously.","pos":[3961,4113],"source":" The `Multiply` and `Divide` operations are used to invoke the service asynchronously on the service side, even if the client invokes them synchronously."},{"content":"This example sets the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[4114,4225],"source":" This example sets the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property to `true`."},{"content":"This property setting, in combination with the implementation of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> asynchronous pattern, tells the run time to invoke the operation asynchronously.","pos":[4226,4439],"source":" This property setting, in combination with the implementation of the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] asynchronous pattern, tells the run time to invoke the operation asynchronously."},{"pos":[4702,4710],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4714,4823],"content":"<bpt id=\"p1\">[</bpt>Service Contract: Asynchronous Sample<ept id=\"p1\">](http://msdn.microsoft.com/en-us/833db946-f511-4f64-a26f-2759a11217c7)</ept>","source":"[Service Contract: Asynchronous Sample](http://msdn.microsoft.com/en-us/833db946-f511-4f64-a26f-2759a11217c7)"}]}