{"content":"---\ntitle: Organizing your project to support .NET Framework and .NET Core\ndescription: Help for project owners who want to compile their solution against .NET Framework and .NET Core side-by-side.\nkeywords: .NET, .NET Core, .NET Framework, project layout, multiple frameworks\nauthor: conniey\nms.author: mairaw\nms.date: 04/06/2017\nms.topic: article\nms.prod: .net-core\nms.devlang: dotnet\nms.assetid: 3af62252-1dfa-4336-8d2f-5cfdb57d7724\n---\n\n# Organizing your project to support .NET Framework and .NET Core\n\nThis article helps project owners who want to compile their solution against .NET Framework and .NET Core side-by-side. It provides several options to organize projects to help developers achieve this goal. The following list provides some typical scenarios to consider when you're deciding how to setup your project layout with .NET Core. The list may not cover everything you want; prioritize based on your project's needs.\n\n* [**Combine existing projects and .NET Core projects into single projects**][option-csproj]\n\n  *What this is good for:*\n  * Simplifying your build process by compiling a single project rather than compiling multiple projects, each targeting a different .NET Framework version or platform.\n  * Simplifying source file management for multi-targeted projects because you must manage a single project file. When adding/removing source files, the alternatives require you to manually sync these with your other projects.\n  * Easily generating a NuGet package for consumption.\n  * Allows you to write code for a specific .NET Framework version in your libraries through the use of compiler directives.\n\n  *Unsupported scenarios:*\n  * Requires developers to use Visual Studio 2017 to open existing projects. To support older versions of Visual Studio, [keeping your project files in different folders](#support-vs) is a better option.\n\n* <a name=\"support-vs\"></a>[**Keep existing projects and new .NET Core projects separate**][option-csproj-folder]\n\n  *What this is good for:*\n  * Continuing to support development on existing projects without having to upgrade for developers/contributors who may not have Visual Studio 2017.\n  * Decreasing the possibility of creating new bugs in existing projects because no code churn is required in those projects.\n\n## Example\n\nConsider the repository below:\n\n![Existing project][example-initial-project]\n\n[**Source Code**][example-initial-project-code]\n\nThe following describes several ways to add support for .NET Core for this repository depending on the constraints and complexity of the existing projects.\n\n## Replace existing projects with a multi-targeted .NET Core project\n\nReorganize the repository so that any existing *\\*.csproj* files are removed and a single *\\*.csproj* file is created that targets multiple frameworks. This is a great option because a single project is able to compile for different frameworks. It also has the power to handle different compilation options and dependencies per targeted framework.\n\n![Create an csproj that targets multiple frameworks][example-csproj]\n\n[**Source Code**][example-csproj-code]\n\nChanges to note are:\n* Replacement of *packages.config* and *\\*.csproj* with a new [.NET Core *\\*.csproj*][example-csproj-netcore]. NuGet packages are specified with `<PackageReference> ItemGroup`.\n\n## Keep existing projects and create a .NET Core project\n\nIf there are existing projects that target older frameworks, you may want to leave these projects untouched and use a .NET Core project to target future frameworks.\n\n![.NET Core project with existing project in different folder][example-csproj-different-folder]\n\n[**Source Code**][example-csproj-different-code]\n\nChanges to note are:\n* The .NET Core and existing projects are kept in separate folders.\n    * Keeping projects in separate folders avoids forcing you to have Visual Studio 2017. You can create a separate solution that only opens the old projects.\n\n## See Also\n\nPlease see the [.NET Core porting documentation][porting-doc] for more guidance on migrating to .NET Core.\n\n[porting-doc]: index.md\n[example-initial-project]: media/project-structure/project.png \"Existing project\"\n[example-initial-project-code]: https://github.com/dotnet/docs/tree/master/samples/framework/libraries/migrate-library/\n\n[example-csproj]: media/project-structure/project.csproj.png \"Create an csproj that targets multiple frameworks\"\n[example-csproj-code]: https://github.com/dotnet/docs/tree/master/samples/framework/libraries/migrate-library-csproj/\n[example-csproj-netcore]: https://github.com/dotnet/docs/tree/master/samples/framework/libraries/migrate-library-csproj/src/Car/Car.csproj\n\n[example-csproj-different-folder]: media/project-structure/project.csproj.different.png \".NET Core project with existing PCL in different folder\"\n[example-csproj-different-code]: https://github.com/dotnet/docs/tree/master/samples/framework/libraries/migrate-library-csproj-keep-existing/\n\n[option-csproj]: #replace-existing-projects-with-a-multi-targeted-net-core-project\n[option-csproj-folder]: #keep-existing-projects-and-create-a-net-core-project","nodes":[{"pos":[11,74],"content":"Organizing your project to support .NET Framework and .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":"Organizing your project to support .NET Framework and .NET Core","pos":[0,63]}]},{"pos":[88,197],"content":"Help for project owners who want to compile their solution against .NET Framework and .NET Core side-by-side.","needQuote":true,"needEscape":true,"nodes":[{"content":"Help for project owners who want to compile their solution against .NET Framework and .NET Core side-by-side.","pos":[0,109]}]},{"pos":[208,276],"content":".NET, .NET Core, .NET Framework, project layout, multiple frameworks","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core, .NET Framework, project layout, multiple frameworks","pos":[0,68]}]},{"pos":[443,506],"content":"Organizing your project to support .NET Framework and .NET Core","linkify":"Organizing your project to support .NET Framework and .NET Core","nodes":[{"content":"Organizing your project to support .NET Framework and .NET Core","pos":[0,63]}]},{"content":"This article helps project owners who want to compile their solution against .NET Framework and .NET Core side-by-side.","pos":[508,627]},{"content":"It provides several options to organize projects to help developers achieve this goal.","pos":[628,714]},{"content":"The following list provides some typical scenarios to consider when you're deciding how to setup your project layout with .NET Core.","pos":[715,847]},{"content":"The list may not cover everything you want; prioritize based on your project's needs.","pos":[848,933]},{"pos":[937,1027],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Combine existing projects and .NET Core projects into single projects<ept id=\"p2\">**</ept><ept id=\"p1\">]</ept><bpt id=\"p3\">[</bpt><ept id=\"p3\">option-csproj]</ept>","source":"[**Combine existing projects and .NET Core projects into single projects**][option-csproj]"},{"pos":[1031,1055],"content":"<bpt id=\"p1\">*</bpt>What this is good for:<ept id=\"p1\">*</ept>","source":"*What this is good for:*"},{"content":"Simplifying your build process by compiling a single project rather than compiling multiple projects, each targeting a different .NET Framework version or platform.","pos":[1060,1224]},{"content":"Simplifying source file management for multi-targeted projects because you must manage a single project file.","pos":[1229,1338]},{"content":"When adding/removing source files, the alternatives require you to manually sync these with your other projects.","pos":[1339,1451]},{"content":"Easily generating a NuGet package for consumption.","pos":[1456,1506]},{"content":"Allows you to write code for a specific .NET Framework version in your libraries through the use of compiler directives.","pos":[1511,1631]},{"pos":[1635,1659],"content":"<bpt id=\"p1\">*</bpt>Unsupported scenarios:<ept id=\"p1\">*</ept>","source":"*Unsupported scenarios:*"},{"content":"Requires developers to use Visual Studio 2017 to open existing projects.","pos":[1664,1736]},{"content":"To support older versions of Visual Studio, <bpt id=\"p1\">[</bpt>keeping your project files in different folders<ept id=\"p1\">](#support-vs)</ept> is a better option.","pos":[1737,1863],"source":" To support older versions of Visual Studio, [keeping your project files in different folders](#support-vs) is a better option."},{"pos":[1867,1978],"content":"<bpt id=\"p1\">&lt;a name=\"support-vs\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept><bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Keep existing projects and new .NET Core projects separate<ept id=\"p3\">**</ept><ept id=\"p2\">]</ept><bpt id=\"p4\">[</bpt><ept id=\"p4\">option-csproj-folder]</ept>","source":"<a name=\"support-vs\"></a>[**Keep existing projects and new .NET Core projects separate**][option-csproj-folder]"},{"pos":[1982,2006],"content":"<bpt id=\"p1\">*</bpt>What this is good for:<ept id=\"p1\">*</ept>","source":"*What this is good for:*"},{"content":"Continuing to support development on existing projects without having to upgrade for developers/contributors who may not have Visual Studio 2017.","pos":[2011,2156]},{"content":"Decreasing the possibility of creating new bugs in existing projects because no code churn is required in those projects.","pos":[2161,2282]},{"pos":[2287,2294],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Consider the repository below:","pos":[2296,2326]},{"pos":[2328,2372],"content":"<bpt id=\"p1\">![</bpt>Existing project<ept id=\"p1\">][example-initial-project]</ept>","source":"![Existing project][example-initial-project]"},{"pos":[2374,2421],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Source Code<ept id=\"p2\">**</ept><ept id=\"p1\">]</ept><bpt id=\"p3\">[</bpt><ept id=\"p3\">example-initial-project-code]</ept>","source":"[**Source Code**][example-initial-project-code]"},{"content":"The following describes several ways to add support for .NET Core for this repository depending on the constraints and complexity of the existing projects.","pos":[2423,2578]},{"pos":[2583,2648],"content":"Replace existing projects with a multi-targeted .NET Core project","linkify":"Replace existing projects with a multi-targeted .NET Core project","nodes":[{"content":"Replace existing projects with a multi-targeted .NET Core project","pos":[0,65]}]},{"content":"Reorganize the repository so that any existing <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph>.csproj<ept id=\"p1\">*</ept> files are removed and a single <bpt id=\"p2\">*</bpt><ph id=\"ph2\">\\*</ph>.csproj<ept id=\"p2\">*</ept> file is created that targets multiple frameworks.","pos":[2650,2801],"source":"Reorganize the repository so that any existing *\\*.csproj* files are removed and a single *\\*.csproj* file is created that targets multiple frameworks."},{"content":"This is a great option because a single project is able to compile for different frameworks.","pos":[2802,2894]},{"content":"It also has the power to handle different compilation options and dependencies per targeted framework.","pos":[2895,2997]},{"pos":[2999,3067],"content":"<bpt id=\"p1\">![</bpt>Create an csproj that targets multiple frameworks<ept id=\"p1\">][example-csproj]</ept>","source":"![Create an csproj that targets multiple frameworks][example-csproj]"},{"pos":[3069,3107],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Source Code<ept id=\"p2\">**</ept><ept id=\"p1\">]</ept><bpt id=\"p3\">[</bpt><ept id=\"p3\">example-csproj-code]</ept>","source":"[**Source Code**][example-csproj-code]"},{"content":"Changes to note are:","pos":[3109,3129]},{"content":"Replacement of <bpt id=\"p1\">*</bpt>packages.config<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt><ph id=\"ph1\">\\*</ph>.csproj<ept id=\"p2\">*</ept> with a new <bpt id=\"p3\">[</bpt>.NET Core <bpt id=\"p4\">*</bpt><ph id=\"ph2\">\\*</ph>.csproj<ept id=\"p4\">*</ept><ept id=\"p3\">]</ept><bpt id=\"p5\">[</bpt><ept id=\"p5\">example-csproj-netcore]</ept>.","pos":[3132,3240],"source":"Replacement of *packages.config* and *\\*.csproj* with a new [.NET Core *\\*.csproj*][example-csproj-netcore]."},{"content":"NuGet packages are specified with <ph id=\"ph1\">`&lt;PackageReference&gt; ItemGroup`</ph>.","pos":[3241,3306],"source":" NuGet packages are specified with `<PackageReference> ItemGroup`."},{"pos":[3311,3364],"content":"Keep existing projects and create a .NET Core project","linkify":"Keep existing projects and create a .NET Core project","nodes":[{"content":"Keep existing projects and create a .NET Core project","pos":[0,53]}]},{"content":"If there are existing projects that target older frameworks, you may want to leave these projects untouched and use a .NET Core project to target future frameworks.","pos":[3366,3530]},{"pos":[3532,3627],"content":"<bpt id=\"p1\">![</bpt>.NET Core project with existing project in different folder<ept id=\"p1\">][example-csproj-different-folder]</ept>","source":"![.NET Core project with existing project in different folder][example-csproj-different-folder]"},{"pos":[3629,3677],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Source Code<ept id=\"p2\">**</ept><ept id=\"p1\">]</ept><bpt id=\"p3\">[</bpt><ept id=\"p3\">example-csproj-different-code]</ept>","source":"[**Source Code**][example-csproj-different-code]"},{"content":"Changes to note are:","pos":[3679,3699]},{"content":"The .NET Core and existing projects are kept in separate folders.","pos":[3702,3767]},{"content":"Keeping projects in separate folders avoids forcing you to have Visual Studio 2017.","pos":[3774,3857]},{"content":"You can create a separate solution that only opens the old projects.","pos":[3858,3926]},{"pos":[3931,3939],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3941,4047],"content":"Please see the <bpt id=\"p1\">[</bpt>.NET Core porting documentation<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt><ept id=\"p2\">porting-doc]</ept> for more guidance on migrating to .NET Core.","source":"Please see the [.NET Core porting documentation][porting-doc] for more guidance on migrating to .NET Core."},{"pos":[4073,4154],"content":"<bpt id=\"p1\">[</bpt><ept id=\"p1\">example-initial-project]: media/project-structure/project.png</ept><bpt id=\"p2\"> \"</bpt>Existing project<ept id=\"p2\">\"</ept>","source":"[example-initial-project]: media/project-structure/project.png \"Existing project\""},{"pos":[4276,4388],"content":"<bpt id=\"p1\">[</bpt><ept id=\"p1\">example-csproj]: media/project-structure/project.csproj.png</ept><bpt id=\"p2\"> \"</bpt>Create an csproj that targets multiple frameworks<ept id=\"p2\">\"</ept>","source":"[example-csproj]: media/project-structure/project.csproj.png \"Create an csproj that targets multiple frameworks\""},{"pos":[4647,4792],"content":"<bpt id=\"p1\">[</bpt><ept id=\"p1\">example-csproj-different-folder]: media/project-structure/project.csproj.different.png</ept><bpt id=\"p2\"> \"</bpt>.NET Core project with existing PCL in different folder<ept id=\"p2\">\"</ept>","source":"[example-csproj-different-folder]: media/project-structure/project.csproj.different.png \".NET Core project with existing PCL in different folder\""}]}