{"content":"---\ntitle: \"Procedure Parameters and Arguments (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"procedures, arguments\"\n  - \"procedures, argument lists\"\n  - \"values, passing to procedures\"\n  - \"arguments [Visual Basic], passing\"\n  - \"procedures, parameters\"\n  - \"Visual Basic code, argument lists\"\n  - \"Visual Basic code, procedures\"\n  - \"parameters, Visual Basic procedures\"\n  - \"parameters, lists\"\n  - \"arguments [Visual Basic], Visual Basic procedures\"\n  - \"arguments [Visual Basic], procedures\"\n  - \"parameter lists\"\n  - \"Visual Basic code, parameter lists\"\n  - \"argument lists\"\n  - \"procedures, parameter lists\"\nms.assetid: ff275aff-aa13-40df-bd4c-63486db8c1e9\ncaps.latest.revision: 21\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Procedure Parameters and Arguments (Visual Basic)\nIn most cases, a procedure needs some information about the circumstances in which it has been called. A procedure that performs repeated or shared tasks uses different information for each call. This information consists of variables, constants, and expressions that you pass to the procedure when you call it.  \n  \n A *parameter* represents a value that the procedure expects you to supply when you call it. The procedure's declaration defines its parameters.  \n  \n You can define a procedure with no parameters, one parameter, or more than one. The part of the procedure definition that specifies the parameters is called the *parameter list*.  \n  \n An *argument* represents the value you supply to a procedure parameter when you call the procedure. The calling code supplies the arguments when it calls the procedure. The part of the procedure call that specifies the arguments is called the *argument list*.  \n  \n The following illustration shows code calling the procedure `safeSquareRoot` from two different places. The first call passes the value of the variable `x` (4.0) to the parameter `number`, and the return value in `root` (2.0) is assigned to the variable `y`. The second call passes the literal value 9.0 to `number`, and assigns the return value (3.0) to variable `z`.  \n  \n ![Graphic diagram of passing argument to parameter](./media/parametersargue.gif \"ParametersArgue\")  \nPassing an argument to a parameter  \n  \n For more information, see [Differences Between Parameters and Arguments](./differences-between-parameters-and-arguments.md).  \n  \n## Parameter Data Type  \n You define a data type for a parameter by using the `As` clause in its declaration. For example, the following function accepts a string and an integer.  \n  \n [!code-vb[VbVbcnProcedures#32](./codesnippet/VisualBasic/procedure-parameters-and-arguments_1.vb)]  \n  \n If the type checking switch ([Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md)) is `Off,` the `As` clause is optional, except that if any one parameter uses it, all parameters must use it. If type checking is `On`, the `As` clause is required for all procedure parameters.  \n  \n If the calling code expects to supply an argument with a data type different from that of its corresponding parameter, such as `Byte` to a `String` parameter, it must do one of the following:  \n  \n-   Supply only arguments with data types that widen to the parameter data type;  \n  \n-   Set `Option Strict Off` to allow implicit narrowing conversions; or  \n  \n-   Use a conversion keyword to explicitly convert the data type.  \n  \n### Type Parameters  \n A *generic procedure* also defines one or more *type parameters* in addition to its normal parameters. A generic procedure allows the calling code to pass different data types each time it calls the procedure, so it can tailor the data types to the requirements of each individual call. See [Generic Procedures in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md).  \n  \n## See Also  \n [Procedures](./index.md)   \n [Sub Procedures](./sub-procedures.md)   \n [Function Procedures](./function-procedures.md)   \n [Property Procedures](./property-procedures.md)   \n [Operator Procedures](./operator-procedures.md)   \n [How to: Define a Parameter for a Procedure](./how-to-define-a-parameter-for-a-procedure.md)   \n [How to: Pass Arguments to a Procedure](./how-to-pass-arguments-to-a-procedure.md)   \n [Passing Arguments by Value and by Reference](./passing-arguments-by-value-and-by-reference.md)   \n [Procedure Overloading](./procedure-overloading.md)   \n [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)","nodes":[{"pos":[4,1091],"embed":true,"restype":"x-metadata","content":"title: \"Procedure Parameters and Arguments (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"procedures, arguments\"\n  - \"procedures, argument lists\"\n  - \"values, passing to procedures\"\n  - \"arguments [Visual Basic], passing\"\n  - \"procedures, parameters\"\n  - \"Visual Basic code, argument lists\"\n  - \"Visual Basic code, procedures\"\n  - \"parameters, Visual Basic procedures\"\n  - \"parameters, lists\"\n  - \"arguments [Visual Basic], Visual Basic procedures\"\n  - \"arguments [Visual Basic], procedures\"\n  - \"parameter lists\"\n  - \"Visual Basic code, parameter lists\"\n  - \"argument lists\"\n  - \"procedures, parameter lists\"\nms.assetid: ff275aff-aa13-40df-bd4c-63486db8c1e9\ncaps.latest.revision: 21\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Procedure Parameters and Arguments (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,66],"content":"Procedure Parameters and Arguments (Visual Basic) | Microsoft Docs","nodes":[{"content":"Procedure Parameters and Arguments (Visual Basic) | Microsoft Docs","pos":[0,66]}]}],"path":["title"]}],"yml":true},{"pos":[1098,1147],"content":"Procedure Parameters and Arguments (Visual Basic)","linkify":"Procedure Parameters and Arguments (Visual Basic)","nodes":[{"content":"Procedure Parameters and Arguments (Visual Basic)","pos":[0,49]}]},{"content":"In most cases, a procedure needs some information about the circumstances in which it has been called.","pos":[1148,1250]},{"content":"A procedure that performs repeated or shared tasks uses different information for each call.","pos":[1251,1343]},{"content":"This information consists of variables, constants, and expressions that you pass to the procedure when you call it.","pos":[1344,1459]},{"content":"A <bpt id=\"p1\">*</bpt>parameter<ept id=\"p1\">*</ept> represents a value that the procedure expects you to supply when you call it.","pos":[1466,1557],"source":"A *parameter* represents a value that the procedure expects you to supply when you call it."},{"content":"The procedure's declaration defines its parameters.","pos":[1558,1609]},{"content":"You can define a procedure with no parameters, one parameter, or more than one.","pos":[1616,1695]},{"content":"The part of the procedure definition that specifies the parameters is called the <bpt id=\"p1\">*</bpt>parameter list<ept id=\"p1\">*</ept>.","pos":[1696,1794],"source":" The part of the procedure definition that specifies the parameters is called the *parameter list*."},{"content":"An <bpt id=\"p1\">*</bpt>argument<ept id=\"p1\">*</ept> represents the value you supply to a procedure parameter when you call the procedure.","pos":[1801,1900],"source":"An *argument* represents the value you supply to a procedure parameter when you call the procedure."},{"content":"The calling code supplies the arguments when it calls the procedure.","pos":[1901,1969]},{"content":"The part of the procedure call that specifies the arguments is called the <bpt id=\"p1\">*</bpt>argument list<ept id=\"p1\">*</ept>.","pos":[1970,2060],"source":" The part of the procedure call that specifies the arguments is called the *argument list*."},{"content":"The following illustration shows code calling the procedure <ph id=\"ph1\">`safeSquareRoot`</ph> from two different places.","pos":[2067,2170],"source":"The following illustration shows code calling the procedure `safeSquareRoot` from two different places."},{"content":"The first call passes the value of the variable <ph id=\"ph1\">`x`</ph> (4.0) to the parameter <ph id=\"ph2\">`number`</ph>, and the return value in <ph id=\"ph3\">`root`</ph> (2.0) is assigned to the variable <ph id=\"ph4\">`y`</ph>.","pos":[2171,2325],"source":" The first call passes the value of the variable `x` (4.0) to the parameter `number`, and the return value in `root` (2.0) is assigned to the variable `y`."},{"content":"The second call passes the literal value 9.0 to <ph id=\"ph1\">`number`</ph>, and assigns the return value (3.0) to variable <ph id=\"ph2\">`z`</ph>.","pos":[2326,2435],"source":" The second call passes the literal value 9.0 to `number`, and assigns the return value (3.0) to variable `z`."},{"content":"<bpt id=\"p1\">![</bpt>Graphic diagram of passing argument to parameter<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/parametersargue.gif \"</bpt>ParametersArgue<ept id=\"p2\">\")</ept>","pos":[2442,2540],"source":"![Graphic diagram of passing argument to parameter](./media/parametersargue.gif \"ParametersArgue\")"},{"content":"Passing an argument to a parameter","pos":[2543,2577]},{"pos":[2584,2708],"content":"For more information, see <bpt id=\"p1\">[</bpt>Differences Between Parameters and Arguments<ept id=\"p1\">](./differences-between-parameters-and-arguments.md)</ept>.","source":"For more information, see [Differences Between Parameters and Arguments](./differences-between-parameters-and-arguments.md)."},{"pos":[2717,2736],"content":"Parameter Data Type","linkify":"Parameter Data Type","nodes":[{"content":"Parameter Data Type","pos":[0,19]}]},{"content":"You define a data type for a parameter by using the <ph id=\"ph1\">`As`</ph> clause in its declaration.","pos":[2740,2823],"source":"You define a data type for a parameter by using the `As` clause in its declaration."},{"content":"For example, the following function accepts a string and an integer.","pos":[2824,2892]},{"content":"If the type checking switch (<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>) is <ph id=\"ph1\">`Off,`</ph> the <ph id=\"ph2\">`As`</ph> clause is optional, except that if any one parameter uses it, all parameters must use it.","pos":[3004,3251],"source":"If the type checking switch ([Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md)) is `Off,` the `As` clause is optional, except that if any one parameter uses it, all parameters must use it."},{"content":"If type checking is <ph id=\"ph1\">`On`</ph>, the <ph id=\"ph2\">`As`</ph> clause is required for all procedure parameters.","pos":[3252,3335],"source":" If type checking is `On`, the `As` clause is required for all procedure parameters."},{"pos":[3342,3533],"content":"If the calling code expects to supply an argument with a data type different from that of its corresponding parameter, such as <ph id=\"ph1\">`Byte`</ph> to a <ph id=\"ph2\">`String`</ph> parameter, it must do one of the following:","source":"If the calling code expects to supply an argument with a data type different from that of its corresponding parameter, such as `Byte` to a `String` parameter, it must do one of the following:"},{"content":"Supply only arguments with data types that widen to the parameter data type;","pos":[3543,3619]},{"pos":[3629,3696],"content":"Set <ph id=\"ph1\">`Option Strict Off`</ph> to allow implicit narrowing conversions; or","source":"Set `Option Strict Off` to allow implicit narrowing conversions; or"},{"content":"Use a conversion keyword to explicitly convert the data type.","pos":[3706,3767]},{"pos":[3777,3792],"content":"Type Parameters","linkify":"Type Parameters","nodes":[{"content":"Type Parameters","pos":[0,15]}]},{"content":"A <bpt id=\"p1\">*</bpt>generic procedure<ept id=\"p1\">*</ept> also defines one or more <bpt id=\"p2\">*</bpt>type parameters<ept id=\"p2\">*</ept> in addition to its normal parameters.","pos":[3796,3898],"source":"A *generic procedure* also defines one or more *type parameters* in addition to its normal parameters."},{"content":"A generic procedure allows the calling code to pass different data types each time it calls the procedure, so it can tailor the data types to the requirements of each individual call.","pos":[3899,4082]},{"content":"See <bpt id=\"p1\">[</bpt>Generic Procedures in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)</ept>.","pos":[4083,4219],"source":" See [Generic Procedures in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)."},{"pos":[4228,4236],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](./index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4240,4265],"source":"[Procedures](./index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Sub Procedures<ept id=\"p1\">](./sub-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[4269,4307],"source":"[Sub Procedures](./sub-procedures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Function Procedures<ept id=\"p1\">](./function-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[4311,4359],"source":"[Function Procedures](./function-procedures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Property Procedures<ept id=\"p1\">](./property-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[4363,4411],"source":"[Property Procedures](./property-procedures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](./operator-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[4415,4463],"source":"[Operator Procedures](./operator-procedures.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Define a Parameter for a Procedure<ept id=\"p1\">](./how-to-define-a-parameter-for-a-procedure.md)</ept><ph id=\"ph1\"> </ph>","pos":[4467,4560],"source":"[How to: Define a Parameter for a Procedure](./how-to-define-a-parameter-for-a-procedure.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Pass Arguments to a Procedure<ept id=\"p1\">](./how-to-pass-arguments-to-a-procedure.md)</ept><ph id=\"ph1\"> </ph>","pos":[4564,4647],"source":"[How to: Pass Arguments to a Procedure](./how-to-pass-arguments-to-a-procedure.md) "},{"content":"<bpt id=\"p1\">[</bpt>Passing Arguments by Value and by Reference<ept id=\"p1\">](./passing-arguments-by-value-and-by-reference.md)</ept><ph id=\"ph1\"> </ph>","pos":[4651,4747],"source":"[Passing Arguments by Value and by Reference](./passing-arguments-by-value-and-by-reference.md) "},{"content":"<bpt id=\"p1\">[</bpt>Procedure Overloading<ept id=\"p1\">](./procedure-overloading.md)</ept><ph id=\"ph1\"> </ph>","pos":[4751,4803],"source":"[Procedure Overloading](./procedure-overloading.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type Conversions in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>","pos":[4807,4934],"source":"[Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)"}]}