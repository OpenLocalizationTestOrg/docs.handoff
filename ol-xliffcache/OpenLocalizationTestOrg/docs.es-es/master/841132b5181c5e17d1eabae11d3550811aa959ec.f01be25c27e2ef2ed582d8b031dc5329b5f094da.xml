{"content":"---\ntitle: \"How to: Access a Collection Class with foreach (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"collection classes [C#], foreach statement\"\nms.assetid: a6b9cf5c-6c8d-4223-b12c-288949434493\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Access a Collection Class with foreach (C# Programming Guide)\nThe following code example illustrates how to write a non-generic collection class that can be used with [foreach](../../../csharp/language-reference/keywords/foreach-in.md). The example defines a string tokenizer class.  \n  \n> [!NOTE]\n>  This example represents recommended practice only when you cannot use a generic collection class. For an example of how to implement a type-safe generic collection class that supports <xref:System.Collections.Generic.IEnumerable%601>, see [Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7).  \n  \n In the example, the following code segment uses the `Tokens` class to break the sentence \"This is a sample sentence.\" into tokens by using ' ' and '-' as separators. The code then displays those tokens by using a `foreach` statement.  \n  \n [!code-cs[csProgGuideCollections#3](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-access-a-collection-class-with-foreach_1.cs)]  \n  \n## Example  \n Internally, the `Tokens` class uses an array to store the tokens. Because arrays implement <xref:System.Collections.IEnumerator> and <xref:System.Collections.IEnumerable>, the code example could have used the array's enumeration methods (<xref:System.Collections.IEnumerable.GetEnumerator%2A>, <xref:System.Collections.IEnumerator.MoveNext%2A>, <xref:System.Collections.IEnumerator.Reset%2A>, and <xref:System.Collections.IEnumerator.Current%2A>) instead of defining them in the `Tokens` class. The method definitions are included in the example to clarify how they are defined and what each does.  \n  \n [!code-cs[csProgGuideCollections#2](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-access-a-collection-class-with-foreach_2.cs)]  \n  \n In C#, it is not necessary for a collection class to implement <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> to be compatible with `foreach`. If the class has the required <xref:System.Collections.IEnumerable.GetEnumerator%2A>, <xref:System.Collections.IEnumerator.MoveNext%2A>, <xref:System.Collections.IEnumerator.Reset%2A>, and <xref:System.Collections.IEnumerator.Current%2A> members, it will work with `foreach`. Omitting the interfaces has the advantage of enabling you to define a return type for `Current` that is more specific than <xref:System.Object>. This provides type safety.  \n  \n For example, change the following lines in the previous example.  \n  \n```csharp  \n  \n// Change the Tokens class so that it no longer implements IEnumerable.  \npublic class Tokens  \n{  \n    // . . .  \n  \n    // Change the return type for the GetEnumerator method.  \n    public TokenEnumerator GetEnumerator()  \n    {   }  \n  \n    // Change TokenEnumerator so that it no longer implements IEnumerator.  \n    public class TokenEnumerator  \n    {  \n        // . . .  \n  \n        // Change the return type of method Current to string.  \n        public string Current  \n        {   }  \n    }  \n }  \n  \n```  \n  \n Because `Current` returns a string, the compiler can detect when an incompatible type is used in a `foreach` statement, as shown in the following code.  \n  \n```csharp  \n  \n// Error: Cannot convert type string to int.  \nforeach (int item in f)    \n```  \n  \n The disadvantage of omitting <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> is that the collection class is no longer interoperable with the `foreach` statements, or equivalent statements, of other common language runtime languages.  \n  \n## See Also  \n <xref:System.Collections.Generic>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Arrays](../../../csharp/programming-guide/arrays/index.md)   \n [Collections](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)","nodes":[{"pos":[4,590],"embed":true,"restype":"x-metadata","content":"title: \"How to: Access a Collection Class with foreach (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"collection classes [C#], foreach statement\"\nms.assetid: a6b9cf5c-6c8d-4223-b12c-288949434493\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Access a Collection Class with foreach (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,86],"content":"How to: Access a Collection Class with foreach (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"How to: Access a Collection Class with foreach (C# Programming Guide) | Microsoft Docs","pos":[0,86]}]}],"path":["title"]}],"yml":true},{"pos":[597,666],"content":"How to: Access a Collection Class with foreach (C# Programming Guide)","linkify":"How to: Access a Collection Class with foreach (C# Programming Guide)","nodes":[{"content":"How to: Access a Collection Class with foreach (C# Programming Guide)","pos":[0,69]}]},{"content":"The following code example illustrates how to write a non-generic collection class that can be used with <bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](../../../csharp/language-reference/keywords/foreach-in.md)</ept>.","pos":[667,841],"source":"The following code example illustrates how to write a non-generic collection class that can be used with [foreach](../../../csharp/language-reference/keywords/foreach-in.md)."},{"content":"The example defines a string tokenizer class.","pos":[842,887]},{"pos":[895,1229],"content":"[!NOTE]\n This example represents recommended practice only when you cannot use a generic collection class. For an example of how to implement a type-safe generic collection class that supports <xref:System.Collections.Generic.IEnumerable%601>, see [Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7).","leadings":["","> "],"nodes":[{"content":"This example represents recommended practice only when you cannot use a generic collection class. For an example of how to implement a type-safe generic collection class that supports <xref:System.Collections.Generic.IEnumerable%601>, see [Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7).","pos":[9,332],"nodes":[{"content":"This example represents recommended practice only when you cannot use a generic collection class.","pos":[0,97]},{"content":"For an example of how to implement a type-safe generic collection class that supports <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, see <bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.","pos":[98,323],"source":" For an example of how to implement a type-safe generic collection class that supports <xref:System.Collections.Generic.IEnumerable%601>, see [Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)."}]}]},{"content":"In the example, the following code segment uses the <ph id=\"ph1\">`Tokens`</ph> class to break the sentence \"This is a sample sentence.\"","pos":[1236,1353],"source":"In the example, the following code segment uses the `Tokens` class to break the sentence \"This is a sample sentence.\""},{"content":"into tokens by using ' ' and '-' as separators.","pos":[1354,1401]},{"content":"The code then displays those tokens by using a <ph id=\"ph1\">`foreach`</ph> statement.","pos":[1402,1469],"source":" The code then displays those tokens by using a `foreach` statement."},{"pos":[1646,1653],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Internally, the <ph id=\"ph1\">`Tokens`</ph> class uses an array to store the tokens.","pos":[1657,1722],"source":"Internally, the `Tokens` class uses an array to store the tokens."},{"content":"Because arrays implement <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph>, the code example could have used the array's enumeration methods (<ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>) instead of defining them in the <ph id=\"ph7\">`Tokens`</ph> class.","pos":[1723,2151],"source":" Because arrays implement <xref:System.Collections.IEnumerator> and <xref:System.Collections.IEnumerable>, the code example could have used the array's enumeration methods (<xref:System.Collections.IEnumerable.GetEnumerator%2A>, <xref:System.Collections.IEnumerator.MoveNext%2A>, <xref:System.Collections.IEnumerator.Reset%2A>, and <xref:System.Collections.IEnumerator.Current%2A>) instead of defining them in the `Tokens` class."},{"content":"The method definitions are included in the example to clarify how they are defined and what each does.","pos":[2152,2254]},{"content":"In C#, it is not necessary for a collection class to implement <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator&gt;</ph> to be compatible with <ph id=\"ph3\">`foreach`</ph>.","pos":[2429,2604],"source":"In C#, it is not necessary for a collection class to implement <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> to be compatible with `foreach`."},{"content":"If the class has the required <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> members, it will work with <ph id=\"ph5\">`foreach`</ph>.","pos":[2605,2880],"source":" If the class has the required <xref:System.Collections.IEnumerable.GetEnumerator%2A>, <xref:System.Collections.IEnumerator.MoveNext%2A>, <xref:System.Collections.IEnumerator.Reset%2A>, and <xref:System.Collections.IEnumerator.Current%2A> members, it will work with `foreach`."},{"content":"Omitting the interfaces has the advantage of enabling you to define a return type for <ph id=\"ph1\">`Current`</ph> that is more specific than <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph>.","pos":[2881,3025],"source":" Omitting the interfaces has the advantage of enabling you to define a return type for `Current` that is more specific than <xref:System.Object>."},{"content":"This provides type safety.","pos":[3026,3052]},{"content":"For example, change the following lines in the previous example.","pos":[3059,3123]},{"pos":[3665,3816],"content":"Because <ph id=\"ph1\">`Current`</ph> returns a string, the compiler can detect when an incompatible type is used in a <ph id=\"ph2\">`foreach`</ph> statement, as shown in the following code.","source":"Because `Current` returns a string, the compiler can detect when an incompatible type is used in a `foreach` statement, as shown in the following code."},{"pos":[3922,4187],"content":"The disadvantage of omitting <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator&gt;</ph> is that the collection class is no longer interoperable with the <ph id=\"ph3\">`foreach`</ph> statements, or equivalent statements, of other common language runtime languages.","source":"The disadvantage of omitting <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> is that the collection class is no longer interoperable with the `foreach` statements, or equivalent statements, of other common language runtime languages."},{"pos":[4196,4204],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph>","pos":[4208,4241],"source":"<xref:System.Collections.Generic> "},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4246,4306],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4310,4377],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4381,4441],"source":"[Arrays](../../../csharp/programming-guide/arrays/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Collections<ept id=\"p1\">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>","pos":[4445,4530],"source":"[Collections](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)"}]}