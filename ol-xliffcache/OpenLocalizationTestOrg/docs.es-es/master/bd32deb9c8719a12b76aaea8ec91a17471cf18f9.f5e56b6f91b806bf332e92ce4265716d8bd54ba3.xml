{"content":"---\ntitle: \"Canceling threads cooperatively\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"threads, cancellation\"\nms.assetid: d2d6d5fd-e263-4fa0-847b-2fc3e0d82337\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Canceling threads cooperatively\n\nPrior to the .NET Framework 4, the .NET Framework provided no built-in way to cancel a thread cooperatively after it was started. However, starting with the .NET Framework 4, you can use a <xref:System.Threading.CancellationToken?displayProperty=nameWithType> to cancel threads, just as you can use them to cancel <xref:System.Threading.Tasks.Task?displayProperty=nameWithType> objects or PLINQ queries. Although the <xref:System.Threading.Thread?displayProperty=nameWithType> class does not offer built-in support for cancellation tokens, you can pass a token to a thread procedure by using the <xref:System.Threading.Thread> constructor that takes a <xref:System.Threading.ParameterizedThreadStart> delegate. The following example demonstrates how to do this.  \n  \n [!code-csharp[Cancellation#14](../../../samples/snippets/csharp/VS_Snippets_Misc/cancellation/cs/CooperativeThreads.cs#14)]\n [!code-vb[Cancellation#14](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cancellation/vb/CooperativeThreads.vb#14)]  \n  \n## See also\n\n- [Using Threads and Threading](using-threads-and-threading.md)\n","nodes":[{"pos":[4,270],"embed":true,"restype":"x-metadata","content":"title: \"Canceling threads cooperatively\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"threads, cancellation\"\nms.assetid: d2d6d5fd-e263-4fa0-847b-2fc3e0d82337\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Canceling threads cooperatively","nodes":[{"pos":[0,31],"content":"Canceling threads cooperatively","nodes":[{"content":"Canceling threads cooperatively","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[277,308],"content":"Canceling threads cooperatively","linkify":"Canceling threads cooperatively","nodes":[{"content":"Canceling threads cooperatively","pos":[0,31]}]},{"content":"Prior to the .NET Framework 4, the .NET Framework provided no built-in way to cancel a thread cooperatively after it was started.","pos":[310,439]},{"content":"However, starting with the .NET Framework 4, you can use a <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken?displayProperty=nameWithType&gt;</ph> to cancel threads, just as you can use them to cancel <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task?displayProperty=nameWithType&gt;</ph> objects or PLINQ queries.","pos":[440,713],"source":" However, starting with the .NET Framework 4, you can use a <xref:System.Threading.CancellationToken?displayProperty=nameWithType> to cancel threads, just as you can use them to cancel <xref:System.Threading.Tasks.Task?displayProperty=nameWithType> objects or PLINQ queries."},{"content":"Although the <ph id=\"ph1\">&lt;xref:System.Threading.Thread?displayProperty=nameWithType&gt;</ph> class does not offer built-in support for cancellation tokens, you can pass a token to a thread procedure by using the <ph id=\"ph2\">&lt;xref:System.Threading.Thread&gt;</ph> constructor that takes a <ph id=\"ph3\">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate.","pos":[714,1020],"source":" Although the <xref:System.Threading.Thread?displayProperty=nameWithType> class does not offer built-in support for cancellation tokens, you can pass a token to a thread procedure by using the <xref:System.Threading.Thread> constructor that takes a <xref:System.Threading.ParameterizedThreadStart> delegate."},{"content":"The following example demonstrates how to do this.","pos":[1021,1071]},{"pos":[1336,1344],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1348,1409],"content":"<bpt id=\"p1\">[</bpt>Using Threads and Threading<ept id=\"p1\">](using-threads-and-threading.md)</ept>","source":"[Using Threads and Threading](using-threads-and-threading.md)"}]}