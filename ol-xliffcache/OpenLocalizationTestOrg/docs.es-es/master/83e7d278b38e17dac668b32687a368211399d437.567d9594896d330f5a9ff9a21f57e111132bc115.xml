{"content":"---\ntitle: \"class keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/18/2017\nf1_keywords: \n  - \"class_CSharpKeyword\"\n  - \"class\"\nhelpviewer_keywords: \n  - \"class keyword [C#]\"\nms.assetid: b95d8815-de18-4c3f-a8cc-a0a53bdf8690\n---\n# class (C# Reference)\n\nClasses are declared using the keyword `class`, as shown in the following example:\n\n```csharp\nclass TestClass\n{\n    // Methods, properties, fields, events, delegates\n    // and nested classes go here.\n}\n```\n\n## Remarks\n\nOnly single inheritance is allowed in C#. In other words, a class can inherit implementation from one base class only. However, a class can implement more than one interface. The following table shows examples of class inheritance and interface implementation:\n\n|Inheritance|Example|\n|-----------------|-------------|\n|None|`class ClassA { }`|\n|Single|`class DerivedClass: BaseClass { }`|\n|None, implements two interfaces|`class ImplClass: IFace1, IFace2 { }`|\n|Single, implements one interface|`class ImplDerivedClass: BaseClass, IFace1 { }`|\n\nClasses that you declare directly within a namespace, not nested within other classes, can be either [public](../../../csharp/language-reference/keywords/public.md) or [internal](../../../csharp/language-reference/keywords/internal.md). Classes are `internal` by default.\n\nClass members, including nested classes, can be [public](public.md), [protected internal](protected-internal.md), [protected](protected.md), [internal](internal.md), [private](private.md), or [private protected](private-protected.md). Members are `private` by default.\n\nFor more information, see [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md).\n\nYou can declare generic classes that have type parameters. For more information, see [Generic Classes](../../../csharp/programming-guide/generics/generic-classes.md).\n\nA class can contain declarations of the following members:\n\n- [Constructors](../../../csharp/programming-guide/classes-and-structs/constructors.md)\n\n- [Constants](../../../csharp/programming-guide/classes-and-structs/constants.md)\n\n- [Fields](../../../csharp/programming-guide/classes-and-structs/fields.md)\n\n- [Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)\n\n- [Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)\n\n- [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)\n\n- [Indexers](../../../csharp/programming-guide/indexers/index.md)\n\n- [Operators](../../../csharp/programming-guide/statements-expressions-operators/operators.md)\n\n- [Events](../../../csharp/programming-guide/events/index.md)\n\n- [Delegates](../../../csharp/programming-guide/delegates/index.md)\n\n- [Classes](../../../csharp/programming-guide/classes-and-structs/classes.md)\n\n- [Interfaces](../../../csharp/programming-guide/interfaces/index.md)\n\n- [Structs](../../../csharp/programming-guide/classes-and-structs/structs.md)\n\n- [Enumerations](../../../csharp/programming-guide/enumeration-types.md)\n\n## Example\n\nThe following example demonstrates declaring class fields, constructors, and methods. It also demonstrates object instantiation and printing instance data. In this example, two classes are declared. The first class, `Child`, contains two private fields (`name` and `age`), two public constructors and one public method. The second class, `StringTest`, is used to contain `Main`.\n\n[!code-csharp[csrefKeywordsTypes#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#5)]\n\n## Comments\n\nNotice that in the previous example the private fields (`name` and `age`) can only be accessed through the public method of the `Child` class. For example, you cannot print the child's name, from the `Main` method, using a statement like this:\n\n```csharp\nConsole.Write(child1.name);   // Error\n```\n\nAccessing private members of `Child` from `Main` would only be possible if `Main` were a member of the class.\n\nTypes declared inside a class without an access modifier default to `private`, so the data members in this example would still be `private` if the keyword were removed.\n\nFinally, notice that for the object created using the default constructor (`child3`), the `age` field was initialized to zero by default.\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)\n","nodes":[{"pos":[4,230],"embed":true,"restype":"x-metadata","content":"title: \"class keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/18/2017\nf1_keywords: \n  - \"class_CSharpKeyword\"\n  - \"class\"\nhelpviewer_keywords: \n  - \"class keyword [C#]\"\nms.assetid: b95d8815-de18-4c3f-a8cc-a0a53bdf8690","nodes":[{"content":"class keyword - C# Reference","nodes":[{"pos":[0,28],"content":"class keyword - C# Reference","nodes":[{"content":"class keyword - C# Reference","pos":[0,28]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[237,257],"content":"class (C# Reference)","linkify":"class (C# Reference)","nodes":[{"content":"class (C# Reference)","pos":[0,20]}]},{"pos":[259,341],"content":"Classes are declared using the keyword <ph id=\"ph1\">`class`</ph>, as shown in the following example:","source":"Classes are declared using the keyword `class`, as shown in the following example:"},{"pos":[470,477],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Only single inheritance is allowed in C#.","pos":[479,520]},{"content":"In other words, a class can inherit implementation from one base class only.","pos":[521,597]},{"content":"However, a class can implement more than one interface.","pos":[598,653]},{"content":"The following table shows examples of class inheritance and interface implementation:","pos":[654,739]},{"content":"Inheritance","pos":[742,753]},{"content":"Example","pos":[754,761]},{"content":"None","pos":[798,802]},{"content":"Single","pos":[824,830]},{"content":"None, implements two interfaces","pos":[869,900]},{"content":"Single, implements one interface","pos":[941,973]},{"content":"Classes that you declare directly within a namespace, not nested within other classes, can be either <bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](../../../csharp/language-reference/keywords/public.md)</ept> or <bpt id=\"p2\">[</bpt>internal<ept id=\"p2\">](../../../csharp/language-reference/keywords/internal.md)</ept>.","pos":[1024,1260],"source":"Classes that you declare directly within a namespace, not nested within other classes, can be either [public](../../../csharp/language-reference/keywords/public.md) or [internal](../../../csharp/language-reference/keywords/internal.md)."},{"content":"Classes are <ph id=\"ph1\">`internal`</ph> by default.","pos":[1261,1295],"source":" Classes are `internal` by default."},{"content":"Class members, including nested classes, can be <bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](public.md)</ept>, <bpt id=\"p2\">[</bpt>protected internal<ept id=\"p2\">](protected-internal.md)</ept>, <bpt id=\"p3\">[</bpt>protected<ept id=\"p3\">](protected.md)</ept>, <bpt id=\"p4\">[</bpt>internal<ept id=\"p4\">](internal.md)</ept>, <bpt id=\"p5\">[</bpt>private<ept id=\"p5\">](private.md)</ept>, or <bpt id=\"p6\">[</bpt>private protected<ept id=\"p6\">](private-protected.md)</ept>.","pos":[1297,1531],"source":"Class members, including nested classes, can be [public](public.md), [protected internal](protected-internal.md), [protected](protected.md), [internal](internal.md), [private](private.md), or [private protected](private-protected.md)."},{"content":"Members are <ph id=\"ph1\">`private`</ph> by default.","pos":[1532,1565],"source":" Members are `private` by default."},{"pos":[1567,1687],"content":"For more information, see <bpt id=\"p1\">[</bpt>Access Modifiers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)</ept>.","source":"For more information, see [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)."},{"content":"You can declare generic classes that have type parameters.","pos":[1689,1747]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generic Classes<ept id=\"p1\">](../../../csharp/programming-guide/generics/generic-classes.md)</ept>.","pos":[1748,1855],"source":" For more information, see [Generic Classes](../../../csharp/programming-guide/generics/generic-classes.md)."},{"content":"A class can contain declarations of the following members:","pos":[1857,1915]},{"pos":[1919,2004],"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/constructors.md)</ept>","source":"[Constructors](../../../csharp/programming-guide/classes-and-structs/constructors.md)"},{"pos":[2008,2087],"content":"<bpt id=\"p1\">[</bpt>Constants<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/constants.md)</ept>","source":"[Constants](../../../csharp/programming-guide/classes-and-structs/constants.md)"},{"pos":[2091,2164],"content":"<bpt id=\"p1\">[</bpt>Fields<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/fields.md)</ept>","source":"[Fields](../../../csharp/programming-guide/classes-and-structs/fields.md)"},{"pos":[2168,2250],"content":"<bpt id=\"p1\">[</bpt>Finalizers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/destructors.md)</ept>","source":"[Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)"},{"pos":[2254,2329],"content":"<bpt id=\"p1\">[</bpt>Methods<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept>","source":"[Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)"},{"pos":[2333,2414],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","source":"[Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"},{"pos":[2418,2481],"content":"<bpt id=\"p1\">[</bpt>Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/index.md)</ept>","source":"[Indexers](../../../csharp/programming-guide/indexers/index.md)"},{"pos":[2485,2577],"content":"<bpt id=\"p1\">[</bpt>Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/operators.md)</ept>","source":"[Operators](../../../csharp/programming-guide/statements-expressions-operators/operators.md)"},{"pos":[2581,2640],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept>","source":"[Events](../../../csharp/programming-guide/events/index.md)"},{"pos":[2644,2709],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept>","source":"[Delegates](../../../csharp/programming-guide/delegates/index.md)"},{"pos":[2713,2788],"content":"<bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/classes.md)</ept>","source":"[Classes](../../../csharp/programming-guide/classes-and-structs/classes.md)"},{"pos":[2792,2859],"content":"<bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](../../../csharp/programming-guide/interfaces/index.md)</ept>","source":"[Interfaces](../../../csharp/programming-guide/interfaces/index.md)"},{"pos":[2863,2938],"content":"<bpt id=\"p1\">[</bpt>Structs<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/structs.md)</ept>","source":"[Structs](../../../csharp/programming-guide/classes-and-structs/structs.md)"},{"pos":[2942,3012],"content":"<bpt id=\"p1\">[</bpt>Enumerations<ept id=\"p1\">](../../../csharp/programming-guide/enumeration-types.md)</ept>","source":"[Enumerations](../../../csharp/programming-guide/enumeration-types.md)"},{"pos":[3017,3024],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates declaring class fields, constructors, and methods.","pos":[3026,3111]},{"content":"It also demonstrates object instantiation and printing instance data.","pos":[3112,3181]},{"content":"In this example, two classes are declared.","pos":[3182,3224]},{"content":"The first class, <ph id=\"ph1\">`Child`</ph>, contains two private fields (<ph id=\"ph2\">`name`</ph> and <ph id=\"ph3\">`age`</ph>), two public constructors and one public method.","pos":[3225,3345],"source":" The first class, `Child`, contains two private fields (`name` and `age`), two public constructors and one public method."},{"content":"The second class, <ph id=\"ph1\">`StringTest`</ph>, is used to contain <ph id=\"ph2\">`Main`</ph>.","pos":[3346,3404],"source":" The second class, `StringTest`, is used to contain `Main`."},{"pos":[3536,3544],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"Notice that in the previous example the private fields (<ph id=\"ph1\">`name`</ph> and <ph id=\"ph2\">`age`</ph>) can only be accessed through the public method of the <ph id=\"ph3\">`Child`</ph> class.","pos":[3546,3688],"source":"Notice that in the previous example the private fields (`name` and `age`) can only be accessed through the public method of the `Child` class."},{"content":"For example, you cannot print the child's name, from the <ph id=\"ph1\">`Main`</ph> method, using a statement like this:","pos":[3689,3789],"source":" For example, you cannot print the child's name, from the `Main` method, using a statement like this:"},{"pos":[3845,3954],"content":"Accessing private members of <ph id=\"ph1\">`Child`</ph> from <ph id=\"ph2\">`Main`</ph> would only be possible if <ph id=\"ph3\">`Main`</ph> were a member of the class.","source":"Accessing private members of `Child` from `Main` would only be possible if `Main` were a member of the class."},{"pos":[3956,4124],"content":"Types declared inside a class without an access modifier default to <ph id=\"ph1\">`private`</ph>, so the data members in this example would still be <ph id=\"ph2\">`private`</ph> if the keyword were removed.","source":"Types declared inside a class without an access modifier default to `private`, so the data members in this example would still be `private` if the keyword were removed."},{"pos":[4126,4263],"content":"Finally, notice that for the object created using the default constructor (<ph id=\"ph1\">`child3`</ph>), the <ph id=\"ph2\">`age`</ph> field was initialized to zero by default.","source":"Finally, notice that for the object created using the default constructor (`child3`), the `age` field was initialized to zero by default."},{"pos":[4268,4293],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[4359,4367],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4371,4430],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[4433,4499],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[4502,4569],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[4572,4653],"content":"<bpt id=\"p1\">[</bpt>Reference Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept>","source":"[Reference Types](../../../csharp/language-reference/keywords/reference-types.md)"}]}