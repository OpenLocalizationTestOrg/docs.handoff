<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="dynamically-specify-predicate-filters-at-runtime.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">314be8f98b9ff014f14bef11a1f3581eff8574b4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\linq\dynamically-specify-predicate-filters-at-runtime.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27f6ee8561b1d109495519282b4395ce386a2762</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3276560fe47eeea1c31f082cdd1f30fde1e445fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Dynamically specify predicate filters at runtime (LINQ in C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to dynamically specify predicate filters at runtime using LINQ in C#.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Dynamically specify predicate filters at runtime</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In some cases, you don't know until run time how many predicates you have to apply to source elements in the <ph id="ph1">`where`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>One way to dynamically specify multiple predicate filters is to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> method, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The example is constructed in two ways.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>First, the project is run by filtering on values that are provided in the program.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Then the project is run again by using input provided at run time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To filter by using the Contains method</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Open a new console application and name it <ph id="ph1">`PredicateFilters`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Copy the <ph id="ph1">`StudentClass`</ph> class from <bpt id="p1">[</bpt>Query a collection of objects<ept id="p1">](query-a-collection-of-objects.md)</ept> and paste it into namespace <ph id="ph2">`PredicateFilters`</ph> underneath class <ph id="ph3">`Program`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`StudentClass`</ph> provides a list of <ph id="ph2">`Student`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Comment out the <ph id="ph1">`Main`</ph> method in <ph id="ph2">`StudentClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Replace class <ph id="ph1">`Program`</ph> with the following code:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Add the following line to the <ph id="ph1">`Main`</ph> method in class <ph id="ph2">`DynamicPredicates`</ph>, under the declaration of <ph id="ph3">`ids`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Run the project.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following output is displayed in a console window:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Garcia: 114</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>O'Donnell: 112</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Omelchenko: 111</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The next step is to run the project again, this time by using input entered at run time instead of array <ph id="ph1">`ids`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Change <ph id="ph1">`QueryByID(ids)`</ph> to <ph id="ph2">`QueryByID(args)`</ph> in the <ph id="ph3">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Run the project with the command line arguments <ph id="ph1">`122 117 120 115`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the project is run, those values become elements of <ph id="ph1">`args`</ph>, the parameter of the <ph id="ph2">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following output is displayed in a console window:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Adams: 120</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Feng: 117</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Garcia: 115</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Tucker: 122</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To filter by using a switch statement</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can use a <ph id="ph1">`switch`</ph> statement to select among predetermined alternative queries.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`studentQuery`</ph> uses a different <ph id="ph2">`where`</ph> clause depending on which grade level, or year, is specified at run time.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Copy the following method and paste it into class <ph id="ph1">`DynamicPredicates`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Main`</ph> method, replace the call to <ph id="ph2">`QueryByID`</ph> with the following call, which sends the first element from the <ph id="ph3">`args`</ph> array as its argument: <ph id="ph4">`QueryByYear(args[0])`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Run the project with a command line argument of an integer value between 1 and 4.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Language Integrated Query (LINQ)<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>where clause<ept id="p1">](../language-reference/keywords/where-clause.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>