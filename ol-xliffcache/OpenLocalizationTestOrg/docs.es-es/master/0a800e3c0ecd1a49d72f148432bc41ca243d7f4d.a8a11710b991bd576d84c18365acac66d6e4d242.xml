{"content":"---\ntitle: \"/= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb./=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"assignment statements, compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"/= operator [Visual Basic]\"\n  - \"operator /=\"\n  - \"compound assignment statements\"\nms.assetid: a1e22d0e-8380-4761-9da1-84fb51c34821\ncaps.latest.revision: 23\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# /= Operator (Visual Basic)\nDivides the value of a variable or property by the value of an expression and assigns the floating-point result to the variable or property.  \n  \n## Syntax  \n  \n```  \n  \nvariableorproperty /= expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any numeric variable or property.  \n  \n `expression`  \n Required. Any numeric expression.  \n  \n## Remarks  \n The element on the left side of the `/=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `/=` operator first divides the value of the variable or property (on the left-hand side of the operator) by the value of the expression (on the right-hand side of the operator). The operator then assigns the floating-point result of that operation to the variable or property.  \n  \n This statement assigns a `Double` value to the variable or property on the left. If `Option Strict` is `On`, `variableorproperty` must be a `Double`. If `Option Strict` is `Off`, Visual Basic performs an implicit conversion and assigns the resulting value to `variableorproperty`, with a possible error at run time. For more information, see [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md) and [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md).  \n  \n## Overloading  \n The [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `/` operator affects the behavior of the `/=` operator. If your code uses `/=` on a class or structure that overloads `/`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `/=` operator to divide one `Integer` variable by a second and assign the quotient to the first variable.  \n  \n [!code-vb[VbVbalrOperators#17](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/floating-point-division-assignment-operator_1.vb)]  \n  \n## See Also  \n [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)   \n [\\\\= Operator](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)   \n [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)   \n [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n","nodes":[{"pos":[4,735],"nodes":[{"content":"/= Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,43],"content":"/= Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"/= Operator (Visual Basic) | Microsoft Docs","pos":[0,43]}]}],"pos":[6,52],"yaml":true}],"content":"title: \"/= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb./=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"assignment statements, compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"/= operator [Visual Basic]\"\n  - \"operator /=\"\n  - \"compound assignment statements\"\nms.assetid: a1e22d0e-8380-4761-9da1-84fb51c34821\ncaps.latest.revision: 23\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[742,768],"content":"/= Operator (Visual Basic)","linkify":"/= Operator (Visual Basic)","nodes":[{"content":"/= Operator (Visual Basic)","pos":[0,26]}]},{"content":"Divides the value of a variable or property by the value of an expression and assigns the floating-point result to the variable or property.","pos":[769,909]},{"pos":[918,924],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[986,991],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1019,1028]},{"content":"Any numeric variable or property.","pos":[1029,1062]},{"content":"Required.","pos":[1085,1094]},{"content":"Any numeric expression.","pos":[1095,1118]},{"pos":[1127,1134],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`/=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[1138,1259],"source":"The element on the left side of the `/=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[1260,1370],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`/=`</ph> operator first divides the value of the variable or property (on the left-hand side of the operator) by the value of the expression (on the right-hand side of the operator).","pos":[1377,1559],"source":"The `/=` operator first divides the value of the variable or property (on the left-hand side of the operator) by the value of the expression (on the right-hand side of the operator)."},{"content":"The operator then assigns the floating-point result of that operation to the variable or property.","pos":[1560,1658]},{"content":"This statement assigns a <ph id=\"ph1\">`Double`</ph> value to the variable or property on the left.","pos":[1665,1745],"source":"This statement assigns a `Double` value to the variable or property on the left."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`On`</ph>, <ph id=\"ph3\">`variableorproperty`</ph> must be a <ph id=\"ph4\">`Double`</ph>.","pos":[1746,1814],"source":" If `Option Strict` is `On`, `variableorproperty` must be a `Double`."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, Visual Basic performs an implicit conversion and assigns the resulting value to <ph id=\"ph3\">`variableorproperty`</ph>, with a possible error at run time.","pos":[1815,1980],"source":" If `Option Strict` is `Off`, Visual Basic performs an implicit conversion and assigns the resulting value to `variableorproperty`, with a possible error at run time."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept> and <bpt id=\"p2\">[</bpt>Option Strict Statement<ept id=\"p2\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>.","pos":[1981,2262],"source":" For more information, see [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md) and [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)."},{"pos":[2271,2282],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>/ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept> can be <bpt id=\"p2\">*</bpt>overloaded<ept id=\"p2\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[2286,2547],"source":"The [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`/`</ph> operator affects the behavior of the <ph id=\"ph2\">`/=`</ph> operator.","pos":[2548,2619],"source":" Overloading the `/` operator affects the behavior of the `/=` operator."},{"content":"If your code uses <ph id=\"ph1\">`/=`</ph> on a class or structure that overloads <ph id=\"ph2\">`/`</ph>, be sure you understand its redefined behavior.","pos":[2620,2733],"source":" If your code uses `/=` on a class or structure that overloads `/`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[2734,2875],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[2884,2891],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2895,3031],"content":"The following example uses the <ph id=\"ph1\">`/=`</ph> operator to divide one <ph id=\"ph2\">`Integer`</ph> variable by a second and assign the quotient to the first variable.","source":"The following example uses the `/=` operator to divide one `Integer` variable by a second and assign the quotient to the first variable."},{"pos":[3038,3194],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#17<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/floating-point-division-assignment-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#17](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/floating-point-division-assignment-operator_1.vb)]"},{"pos":[3203,3211],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>/ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[3215,3331],"source":"[/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\\\</ph>= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)</ept><ph id=\"ph2\"> </ph>","pos":[3335,3442],"source":"[\\\\= Operator](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3446,3545],"source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3549,3648],"source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[3652,3765],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[3769,3894],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","pos":[3898,3983],"source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}