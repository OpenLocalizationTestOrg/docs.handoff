{"content":"---\ntitle: \"-deterministic\"\nms.date: 04/11/2018\nhelpviewer_keywords: \n  - \"deterministic compiler option [Visual Basic]\"\n  - \"-deterministic compiler option [Visual Basic]\"\n  - \"-deterministic compiler option [Visual Basic]\"\n---\n# -deterministic\n\nCauses the compiler to produce an assembly whose byte-for-byte output is identical across compilations for identical inputs. \n\n## Syntax\n\n```\n-deterministic\n```\n\n## Remarks\n\nBy default, compiler output from a given set of inputs is unique, since the compiler adds a timestamp and a GUID that is generated from random numbers. You use the `-deterministic` option to produce a *deterministic assembly*, one whose binary content is identical across compilations as long as the input remains the same.\n\nThe compiler considers the following inputs for the purpose of determinism:\n\n- The sequence of command-line parameters.\n- The contents of the compiler's .rsp response file.\n- The precise version of the compiler used, and its referenced assemblies.\n- The current directory path.\n- The binary contents of all files explicitly passed to the compiler either directly or indirectly, including: \n    - Source files\n    - Referenced assemblies\n    - Referenced modules\n    - Resources\n    - The strong name key file\n    - @ response files\n    - Analyzers\n    - Rulesets\n    - Additional files that may be used by analyzers\n- The current culture (for the language in which diagnostics and exception messages are produced).\n- The default encoding (or the current code page) if the encoding is not specified.\n- The existence, non-existence, and contents of files on the compiler's search paths (specified, for example, by `/lib` or `/recurse`).\n- The CLR platform on which the compiler is run.\n- The value of `%LIBPATH%`, which can affect analyzer dependency loading.\n\nWhen sources are publicly available, deterministic compilation can be used for establishing whether a binary is compiled from a trusted source. It can also be useful in a continuous build system for determining whether build steps that are dependent on changes to a binary need to be executed. \n\n## See also\n\n- [Visual Basic Command-Line Compiler](../../../visual-basic/reference/command-line-compiler/index.md)\n- [Sample Compilation Command Lines](../../../visual-basic/reference/command-line-compiler/sample-compilation-command-lines.md)\n","nodes":[{"pos":[4,224],"embed":true,"restype":"x-metadata","content":"title: \"-deterministic\"\nms.date: 04/11/2018\nhelpviewer_keywords: \n  - \"deterministic compiler option [Visual Basic]\"\n  - \"-deterministic compiler option [Visual Basic]\"\n  - \"-deterministic compiler option [Visual Basic]\"","nodes":[{"content":"-deterministic","nodes":[{"pos":[0,14],"content":"-deterministic","nodes":[{"content":"-deterministic","pos":[0,14]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[231,245],"content":"-deterministic","linkify":"-deterministic","nodes":[{"content":"-deterministic","pos":[0,14]}]},{"content":"Causes the compiler to produce an assembly whose byte-for-byte output is identical across compilations for identical inputs.","pos":[247,371]},{"pos":[377,383],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[412,419],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, compiler output from a given set of inputs is unique, since the compiler adds a timestamp and a GUID that is generated from random numbers.","pos":[421,572]},{"content":"You use the <ph id=\"ph1\">`-deterministic`</ph> option to produce a <bpt id=\"p1\">*</bpt>deterministic assembly<ept id=\"p1\">*</ept>, one whose binary content is identical across compilations as long as the input remains the same.","pos":[573,744],"source":" You use the `-deterministic` option to produce a *deterministic assembly*, one whose binary content is identical across compilations as long as the input remains the same."},{"content":"The compiler considers the following inputs for the purpose of determinism:","pos":[746,821]},{"content":"The sequence of command-line parameters.","pos":[825,865]},{"content":"The contents of the compiler's .rsp response file.","pos":[868,918]},{"content":"The precise version of the compiler used, and its referenced assemblies.","pos":[921,993]},{"content":"The current directory path.","pos":[996,1023]},{"content":"The binary contents of all files explicitly passed to the compiler either directly or indirectly, including:","pos":[1026,1134]},{"content":"Source files","pos":[1142,1154]},{"content":"Referenced assemblies","pos":[1161,1182]},{"content":"Referenced modules","pos":[1189,1207]},{"content":"Resources","pos":[1214,1223]},{"content":"The strong name key file","pos":[1230,1254]},{"content":"@ response files","pos":[1261,1277]},{"content":"Analyzers","pos":[1284,1293]},{"content":"Rulesets","pos":[1300,1308]},{"content":"Additional files that may be used by analyzers","pos":[1315,1361]},{"content":"The current culture (for the language in which diagnostics and exception messages are produced).","pos":[1364,1460]},{"content":"The default encoding (or the current code page) if the encoding is not specified.","pos":[1463,1544]},{"pos":[1547,1680],"content":"The existence, non-existence, and contents of files on the compiler's search paths (specified, for example, by <ph id=\"ph1\">`/lib`</ph> or <ph id=\"ph2\">`/recurse`</ph>).","source":"The existence, non-existence, and contents of files on the compiler's search paths (specified, for example, by `/lib` or `/recurse`)."},{"content":"The CLR platform on which the compiler is run.","pos":[1683,1729]},{"pos":[1732,1803],"content":"The value of <ph id=\"ph1\">`%LIBPATH%`</ph>, which can affect analyzer dependency loading.","source":"The value of `%LIBPATH%`, which can affect analyzer dependency loading."},{"content":"When sources are publicly available, deterministic compilation can be used for establishing whether a binary is compiled from a trusted source.","pos":[1805,1948]},{"content":"It can also be useful in a continuous build system for determining whether build steps that are dependent on changes to a binary need to be executed.","pos":[1949,2098]},{"pos":[2104,2112],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2116,2216],"content":"<bpt id=\"p1\">[</bpt>Visual Basic Command-Line Compiler<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/index.md)</ept>","source":"[Visual Basic Command-Line Compiler](../../../visual-basic/reference/command-line-compiler/index.md)"},{"pos":[2219,2344],"content":"<bpt id=\"p1\">[</bpt>Sample Compilation Command Lines<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/sample-compilation-command-lines.md)</ept>","source":"[Sample Compilation Command Lines](../../../visual-basic/reference/command-line-compiler/sample-compilation-command-lines.md)"}]}