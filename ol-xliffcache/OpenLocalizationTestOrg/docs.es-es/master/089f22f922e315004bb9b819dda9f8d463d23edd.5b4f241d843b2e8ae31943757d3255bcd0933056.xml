{"content":"---\ntitle: \"How to: Register and Configure a Service Moniker | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"COM [WCF], configure service monikers\"\n  - \"COM [WCF], register service monikers\"\nms.assetid: e5e16c80-8a8e-4eef-af53-564933b651ef\ncaps.latest.revision: 20\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Register and Configure a Service Moniker\nBefore using the [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service moniker within a COM application with a typed contract, you must register the required attributed types with COM, and configure the COM application and the moniker with the required binding configuration.  \n  \n### To register the required attributed types with COM  \n  \n1.  Use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) tool to retrieve the metadata contract from the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service. This generates the source code for a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] client assembly and a client application configuration file.  \n  \n2.  Ensure that the types in the assembly are marked as `ComVisible`. To do so, add the following attribute to the AssemblyInfo.cs file in your Visual Studio project.  \n  \n    ```  \n    [assembly: ComVisible(true)]  \n    ```  \n  \n3.  Compile the managed [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] client as a strong-named assembly. This requires signing with a cryptographic key pair. [!INCLUDE[crdefault](../../../../includes/crdefault-md.md)][Signing an Assembly with a Strong Name](http://go.microsoft.com/fwlink/?LinkId=94874) in the .NET Developer's Guide.  \n  \n4.  Use the Assembly Registration (Regasm.exe) tool with the `/tlb` option to register the types in the assembly with COM.  \n  \n5.  Use the Global Assembly Cache (Gacutil.exe) tool to add the assembly to the global assembly cache.  \n  \n    > [!NOTE]\n    >  Signing the assembly and adding it to the Global Assembly Cache are optional steps, but they can simplify the process of loading the assembly from the correct location at runtime.  \n  \n### To configure the COM application and the moniker with the required binding configuration  \n  \n-   Place the binding definitions (generated by the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) in the generated client application configuration file) in the client application's configuration file. For example, for a Visual Basic 6.0 executable named CallCenterClient.exe, the configuration should be placed in a file named CallCenterConfig.exe.config within the same directory as the executable. The client application can now use the moniker. Note that the binding configuration is not required if using one of the standard binding types provided by [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)].  \n  \n     The following type is registered.  \n  \n    ```  \n    using System.ServiceModel;  \n  \n    ...  \n  \n    [ServiceContract]   \n    public interface IMathService   \n    {  \n    [OperationContract]  \n    public int Add(int x, int y);  \n    [OperationContract]  \n    public int Subtract(int x, int y);  \n    }  \n    ```  \n  \n     The application is exposed using a `wsHttpBinding` binding. For the given type and application configuration, the following example moniker strings are used.  \n  \n    ```  \n    service4:address=http://localhost/MathService, binding=wsHttpBinding, bindingConfiguration=Binding1  \n  \n    ```  \n  \n     `or`  \n  \n    ```  \n    service4:address=http://localhost/MathService, binding=wsHttpBinding, bindingConfiguration=Binding1, contract={36ADAD5A-A944-4d5c-9B7C-967E4F00A090}  \n  \n    ```  \n  \n     You can use either of these moniker strings from within a Visual Basic 6.0 application, after adding a reference to the assembly that contains the `IMathService` types, as shown in the following sample code.  \n  \n    ```  \n    Dim MathProxy As IMathService  \n    Dim result As Integer  \n  \n    Set MathProxy = GetObject( _  \n            \"service4:address=http://localhost/MathService, _  \n            binding=wsHttpBinding, _  \n            bindingConfiguration=Binding1\")  \n  \n    result = MathProxy.Add(3, 5)  \n  \n    ```  \n  \n     In this example, the definition for the binding configuration `Binding1` is stored in a suitably named configuration file for the client application, such as vb6appname.exe.config.  \n  \n    > [!NOTE]\n    >  You can use similar code in a C#, a C++, or any other .NET Language application.  \n  \n    > [!NOTE]\n    >  : If the moniker is malformed or if the service is unavailable, the call to `GetObject` returns an error of \"Invalid Syntax\". If you receive this error, make sure the moniker you are using is correct and the service is available.  \n  \n     Although this topic focuses on using the service moniker from VB 6.0 code, you can use a service moniker from other languages. When using a moniker from C++ code the Svcutil.exe generated assembly should be imported with \"no_namespace named_guids raw_interfaces_only\" as shown in the following code.  \n  \n    ```  \n    #import \"ComTestProxy.tlb\" no_namespace named_guids  \n    ```  \n  \n     This modifies the imported interface definitions so that all methods return an `HResult`. Any other return values are converted into out parameters. The overall execution of the methods remains the same. This allows you to determine the cause of an exception when calling a method on the proxy. This functionality is only available from C++ code.  \n  \n## See Also  \n [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)","nodes":[{"pos":[12,77],"content":"How to: Register and Configure a Service Moniker | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Register and Configure a Service Moniker | Microsoft Docs","pos":[0,65]}]},{"pos":[519,567],"content":"How to: Register and Configure a Service Moniker","linkify":"How to: Register and Configure a Service Moniker","nodes":[{"content":"How to: Register and Configure a Service Moniker","pos":[0,48]}]},{"pos":[568,853],"content":"Before using the <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> service moniker within a COM application with a typed contract, you must register the required attributed types with COM, and configure the COM application and the moniker with the required binding configuration.","source":"Before using the [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service moniker within a COM application with a typed contract, you must register the required attributed types with COM, and configure the COM application and the moniker with the required binding configuration."},{"pos":[863,913],"content":"To register the required attributed types with COM","linkify":"To register the required attributed types with COM","nodes":[{"content":"To register the required attributed types with COM","pos":[0,50]}]},{"content":"Use the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> tool to retrieve the metadata contract from the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service.","pos":[923,1176],"source":"Use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) tool to retrieve the metadata contract from the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service."},{"content":"This generates the source code for a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client assembly and a client application configuration file.","pos":[1177,1330],"source":" This generates the source code for a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] client assembly and a client application configuration file."},{"content":"Ensure that the types in the assembly are marked as <ph id=\"ph1\">`ComVisible`</ph>.","pos":[1340,1405],"source":"Ensure that the types in the assembly are marked as `ComVisible`."},{"content":"To do so, add the following attribute to the AssemblyInfo.cs file in your Visual Studio project.","pos":[1406,1502]},{"content":"Compile the managed <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client as a strong-named assembly.","pos":[1570,1680],"source":"Compile the managed [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] client as a strong-named assembly."},{"content":"This requires signing with a cryptographic key pair.","pos":[1681,1733]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Signing an Assembly with a Strong Name<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=94874)</ept> in the .NET Developer's Guide.","pos":[1734,1910],"source":"[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)][Signing an Assembly with a Strong Name](http://go.microsoft.com/fwlink/?LinkId=94874) in the .NET Developer's Guide."},{"pos":[1920,2038],"content":"Use the Assembly Registration (Regasm.exe) tool with the <ph id=\"ph1\">`/tlb`</ph> option to register the types in the assembly with COM.","source":"Use the Assembly Registration (Regasm.exe) tool with the `/tlb` option to register the types in the assembly with COM."},{"content":"Use the Global Assembly Cache (Gacutil.exe) tool to add the assembly to the global assembly cache.","pos":[2048,2146]},{"pos":[2158,2352],"content":"[!NOTE]\nSigning the assembly and adding it to the Global Assembly Cache are optional steps, but they can simplify the process of loading the assembly from the correct location at runtime.","leadings":["","    >  "],"nodes":[{"content":"Signing the assembly and adding it to the Global Assembly Cache are optional steps, but they can simplify the process of loading the assembly from the correct location at runtime.","pos":[8,187]}]},{"pos":[2362,2450],"content":"To configure the COM application and the moniker with the required binding configuration","linkify":"To configure the COM application and the moniker with the required binding configuration","nodes":[{"content":"To configure the COM application and the moniker with the required binding configuration","pos":[0,88]}]},{"content":"Place the binding definitions (generated by the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> in the generated client application configuration file) in the client application's configuration file.","pos":[2460,2744],"source":"Place the binding definitions (generated by the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) in the generated client application configuration file) in the client application's configuration file."},{"content":"For example, for a Visual Basic 6.0 executable named CallCenterClient.exe, the configuration should be placed in a file named CallCenterConfig.exe.config within the same directory as the executable.","pos":[2745,2943]},{"content":"The client application can now use the moniker.","pos":[2944,2991]},{"content":"Note that the binding configuration is not required if using one of the standard binding types provided by <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.","pos":[2992,3155],"source":" Note that the binding configuration is not required if using one of the standard binding types provided by [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]."},{"content":"The following type is registered.","pos":[3166,3199]},{"content":"The application is exposed using a <ph id=\"ph1\">`wsHttpBinding`</ph> binding.","pos":[3489,3548],"source":"The application is exposed using a `wsHttpBinding` binding."},{"content":"For the given type and application configuration, the following example moniker strings are used.","pos":[3549,3646]},{"pos":[3985,4192],"content":"You can use either of these moniker strings from within a Visual Basic 6.0 application, after adding a reference to the assembly that contains the <ph id=\"ph1\">`IMathService`</ph> types, as shown in the following sample code.","source":"You can use either of these moniker strings from within a Visual Basic 6.0 application, after adding a reference to the assembly that contains the `IMathService` types, as shown in the following sample code."},{"pos":[4518,4698],"content":"In this example, the definition for the binding configuration <ph id=\"ph1\">`Binding1`</ph> is stored in a suitably named configuration file for the client application, such as vb6appname.exe.config.","source":"In this example, the definition for the binding configuration `Binding1` is stored in a suitably named configuration file for the client application, such as vb6appname.exe.config."},{"pos":[4710,4805],"content":"[!NOTE]\nYou can use similar code in a C#, a C++, or any other .NET Language application.","leadings":["","    >  "],"nodes":[{"content":"You can use similar code in a C#, a C++, or any other .NET Language application.","pos":[8,88]}]},{"pos":[4817,5061],"content":"[!NOTE]\n: If the moniker is malformed or if the service is unavailable, the call to `GetObject` returns an error of \"Invalid Syntax\". If you receive this error, make sure the moniker you are using is correct and the service is available.","leadings":["","    >  "],"nodes":[{"content":": If the moniker is malformed or if the service is unavailable, the call to `GetObject` returns an error of \"Invalid Syntax\". If you receive this error, make sure the moniker you are using is correct and the service is available.","pos":[8,237],"nodes":[{"content":": If the moniker is malformed or if the service is unavailable, the call to <ph id=\"ph1\">`GetObject`</ph> returns an error of \"Invalid Syntax\".","pos":[0,125],"source":": If the moniker is malformed or if the service is unavailable, the call to `GetObject` returns an error of \"Invalid Syntax\"."},{"content":"If you receive this error, make sure the moniker you are using is correct and the service is available.","pos":[126,229]}]}]},{"content":"Although this topic focuses on using the service moniker from VB 6.0 code, you can use a service moniker from other languages.","pos":[5072,5198]},{"content":"When using a moniker from C++ code the Svcutil.exe generated assembly should be imported with \"no_namespace named_guids raw_interfaces_only\" as shown in the following code.","pos":[5199,5371]},{"content":"This modifies the imported interface definitions so that all methods return an <ph id=\"ph1\">`HResult`</ph>.","pos":[5463,5552],"source":"This modifies the imported interface definitions so that all methods return an `HResult`."},{"content":"Any other return values are converted into out parameters.","pos":[5553,5611]},{"content":"The overall execution of the methods remains the same.","pos":[5612,5666]},{"content":"This allows you to determine the cause of an exception when calling a method on the proxy.","pos":[5667,5757]},{"content":"This functionality is only available from C++ code.","pos":[5758,5809]},{"pos":[5818,5826],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5830,5962],"content":"<bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>","source":"[ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)"}]}