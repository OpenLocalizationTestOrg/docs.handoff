{"content":"---\ntitle: \"&lt;&lt; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<<_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"left shift operator (<<) [C#]\"\n  - \"<< operator [C#]\"\nms.assetid: a654eb56-1ff7-4bf3-9064-b631be0cdccc\ncaps.latest.revision: 18\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt;&lt; Operator (C# Reference)\nThe left-shift operator (`<<`) shifts its first operand left by the number of bits specified by its second operand. The type of the second operand must be an [int](../../../csharp/language-reference/keywords/int.md) or a type that has a predefined implicit numeric conversion to `int`.  \n  \n## Remarks  \n If the first operand is an [int](../../../csharp/language-reference/keywords/int.md) or [uint](../../../csharp/language-reference/keywords/uint.md) (32-bit quantity), the shift count is given by the low-order five bits of the second operand. That is, the actual shift count is 0 to 31 bits.  \n  \n If the first operand is a [long](../../../csharp/language-reference/keywords/long.md) or [ulong](../../../csharp/language-reference/keywords/ulong.md) (64-bit quantity), the shift count is given by the low-order six bits of the second operand. That is, the actual shift count is 0 to 63 bits.  \n  \n Any high-order bits that are not within the range of the type of the first operand after the shift are discarded, and the low-order empty bits are zero-filled. Shift operations never cause overflows.  \n  \n User-defined types can overload the `<<` operator (see [operator](../../../csharp/language-reference/keywords/operator.md)); the type of the first operand must be the user-defined type, and the type of the second operand must be `int`. When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.  \n  \n## Example  \n [!code-cs[csRefOperators#14](../../../csharp/language-reference/operators/codesnippet/CSharp/left-shift-operator_1.cs)]  \n  \n## Comments  \n Note that `i<<1` and `i<<33` give the same result, because 1 and 33 have the same low-order five bits.  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[4,595],"nodes":[{"content":"&lt;&lt; Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,49],"content":"&lt;&lt; Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph> Operator (C# Reference) | Microsoft Docs","pos":[0,49],"source":"&lt;&lt; Operator (C# Reference) | Microsoft Docs"}]}],"pos":[6,58],"yaml":true}],"content":"title: \"&lt;&lt; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<<_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"left shift operator (<<) [C#]\"\n  - \"<< operator [C#]\"\nms.assetid: a654eb56-1ff7-4bf3-9064-b631be0cdccc\ncaps.latest.revision: 18\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[602,634],"content":"&lt;&lt; Operator (C# Reference)","linkify":"&lt;&lt; Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph><ph id=\"ph2\">&amp;lt;</ph> Operator (C# Reference)","pos":[0,32],"source":"&lt;&lt; Operator (C# Reference)"}]},{"content":"The left-shift operator (<ph id=\"ph1\">`&lt;&lt;`</ph>) shifts its first operand left by the number of bits specified by its second operand.","pos":[635,750],"source":"The left-shift operator (`<<`) shifts its first operand left by the number of bits specified by its second operand."},{"content":"The type of the second operand must be an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> or a type that has a predefined implicit numeric conversion to <ph id=\"ph1\">`int`</ph>.","pos":[751,920],"source":" The type of the second operand must be an [int](../../../csharp/language-reference/keywords/int.md) or a type that has a predefined implicit numeric conversion to `int`."},{"pos":[929,936],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the first operand is an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> or <bpt id=\"p2\">[</bpt>uint<ept id=\"p2\">](../../../csharp/language-reference/keywords/uint.md)</ept> (32-bit quantity), the shift count is given by the low-order five bits of the second operand.","pos":[940,1181],"source":"If the first operand is an [int](../../../csharp/language-reference/keywords/int.md) or [uint](../../../csharp/language-reference/keywords/uint.md) (32-bit quantity), the shift count is given by the low-order five bits of the second operand."},{"content":"That is, the actual shift count is 0 to 31 bits.","pos":[1182,1230]},{"content":"If the first operand is a <bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept> or <bpt id=\"p2\">[</bpt>ulong<ept id=\"p2\">](../../../csharp/language-reference/keywords/ulong.md)</ept> (64-bit quantity), the shift count is given by the low-order six bits of the second operand.","pos":[1237,1480],"source":"If the first operand is a [long](../../../csharp/language-reference/keywords/long.md) or [ulong](../../../csharp/language-reference/keywords/ulong.md) (64-bit quantity), the shift count is given by the low-order six bits of the second operand."},{"content":"That is, the actual shift count is 0 to 63 bits.","pos":[1481,1529]},{"content":"Any high-order bits that are not within the range of the type of the first operand after the shift are discarded, and the low-order empty bits are zero-filled.","pos":[1536,1695]},{"content":"Shift operations never cause overflows.","pos":[1696,1735]},{"content":"User-defined types can overload the <ph id=\"ph1\">`&lt;&lt;`</ph> operator (see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>); the type of the first operand must be the user-defined type, and the type of the second operand must be <ph id=\"ph2\">`int`</ph>.","pos":[1742,1977],"source":"User-defined types can overload the `<<` operator (see [operator](../../../csharp/language-reference/keywords/operator.md)); the type of the first operand must be the user-defined type, and the type of the second operand must be `int`."},{"content":"When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.","pos":[1978,2093]},{"pos":[2102,2109],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2113,2232],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#14<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/left-shift-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#14](../../../csharp/language-reference/operators/codesnippet/CSharp/left-shift-operator_1.cs)]"},{"pos":[2241,2249],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"pos":[2253,2355],"content":"Note that <ph id=\"ph1\">`i&lt;&lt;1`</ph> and <ph id=\"ph2\">`i&lt;&lt;33`</ph> give the same result, because 1 and 33 have the same low-order five bits.","source":"Note that `i<<1` and `i<<33` give the same result, because 1 and 33 have the same low-order five bits."},{"pos":[2364,2372],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2376,2436],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2440,2507],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[2511,2580],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"}]}