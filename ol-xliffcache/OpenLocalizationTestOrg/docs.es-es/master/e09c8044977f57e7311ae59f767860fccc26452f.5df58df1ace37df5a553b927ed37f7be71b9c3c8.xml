{"content":"---\ntitle: \"Activity Tree Inspection | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 100d00e4-8c1d-4233-8fbb-dd443a01155d\ncaps.latest.revision: 10\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Activity Tree Inspection\nActivity tree inspection is used by workflow application authors to inspect the workflows hosted by the application. By using <xref:System.Activities.WorkflowInspectionServices>, workflows can be searched for specific child activities, individual activities and their properties can be enumerated, and runtime metadata of the activities can be cached at a specific time. This topic provides an overview of <xref:System.Activities.WorkflowInspectionServices> and how to use it to inspect an activity tree.  \n  \n## Using WorkflowInspectionServices  \n The <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> method is used to enumerate all of the activities in the specified activity tree. <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> returns an enumerable that touches all activities within the tree including children, delegate handlers, variable defaults, and argument expressions. In the following example, a workflow definition is created by using a <xref:System.Activities.Statements.Sequence>, <xref:System.Activities.Statements.While>, <xref:System.Activities.Statements.ForEach%601>, <xref:System.Activities.Statements.WriteLine>, and expressions. After the workflow definition is created, it is invoked and then the `InspectActivity` method is called.  \n  \n [!code-csharp[CFX_WorkflowApplicationExample#45](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#45)]  \n  \n To enumerate the activities, the <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> is called on the root activity, and again recursively on each returned activity. In the following example, the <xref:System.Activities.Activity.DisplayName%2A> of each activity and expression in the activity tree is written to the console.  \n  \n [!code-csharp[CFX_WorkflowApplicationExample#46](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#46)]  \n  \n This sample code provides the following output.  \n  \n **List Item 1**   \n**List Item 2**   \n**List Item 3**   \n**List Item 4**   \n**List Item 5**   \n**Items added to collection.**   \n**Sequence**   \n **Literal<List\\<String>>**   \n **While**   \n **AddToCollection\\<String>**   \n **VariableValue<ICollection\\<String>>**   \n **LambdaValue\\<String>**   \n **LocationReferenceValue<List\\<String>>**   \n **LambdaValue\\<Boolean>**   \n **LocationReferenceValue<List\\<String>>**   \n **ForEach\\<String>**   \n **VariableValue<IEnumerable\\<String>>**   \n **WriteLine**   \n **DelegateArgumentValue\\<String>**   \n **Sequence**   \n **WriteLine**   \n **Literal\\<String>**  To retrieve a specific activity instead of enumerating all of the activities, <xref:System.Activities.WorkflowInspectionServices.Resolve%2A> is used. Both <xref:System.Activities.WorkflowInspectionServices.Resolve%2A> and <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> perform metadata caching if `WorkflowInspectionServices.CacheMetadata` has not been previously called. If <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> has been called then <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> is based on the existing metadata. Therefore, if tree changes have been made since the last call to <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A>, <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> might give unexpected results. If changes have been made to the workflow after calling <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A>, metadata can be re-cached by calling the <xref:System.Activities.Validation.ActivityValidationServices> <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> method. Caching metadata is discussed in the next section.  \n  \n### Caching Metadata  \n Caching the metadata for an activity builds and validates a description of the activityâ€™s arguments, variables, child activities, and activity delegates. Metadata, by default, is cached by the runtime when an activity is prepared for execution. If a workflow host author wants to cache the metadata for an activity or activity tree before this, for example to take all of the cost upfront, then <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> can be used to cache the metadata at the desired time.","nodes":[{"pos":[4,312],"embed":true,"restype":"x-metadata","content":"title: \"Activity Tree Inspection | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 100d00e4-8c1d-4233-8fbb-dd443a01155d\ncaps.latest.revision: 10\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"Activity Tree Inspection | Microsoft Docs","nodes":[{"pos":[0,41],"content":"Activity Tree Inspection | Microsoft Docs","nodes":[{"content":"Activity Tree Inspection | Microsoft Docs","pos":[0,41]}]}],"path":["title"]}],"yml":true},{"pos":[319,343],"content":"Activity Tree Inspection","linkify":"Activity Tree Inspection","nodes":[{"content":"Activity Tree Inspection","pos":[0,24]}]},{"content":"Activity tree inspection is used by workflow application authors to inspect the workflows hosted by the application.","pos":[344,460]},{"content":"By using <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices&gt;</ph>, workflows can be searched for specific child activities, individual activities and their properties can be enumerated, and runtime metadata of the activities can be cached at a specific time.","pos":[461,714],"source":" By using <xref:System.Activities.WorkflowInspectionServices>, workflows can be searched for specific child activities, individual activities and their properties can be enumerated, and runtime metadata of the activities can be cached at a specific time."},{"content":"This topic provides an overview of <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices&gt;</ph> and how to use it to inspect an activity tree.","pos":[715,848],"source":" This topic provides an overview of <xref:System.Activities.WorkflowInspectionServices> and how to use it to inspect an activity tree."},{"pos":[857,889],"content":"Using WorkflowInspectionServices","linkify":"Using WorkflowInspectionServices","nodes":[{"content":"Using WorkflowInspectionServices","pos":[0,32]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> method is used to enumerate all of the activities in the specified activity tree.","pos":[893,1047],"source":"The <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> method is used to enumerate all of the activities in the specified activity tree."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> returns an enumerable that touches all activities within the tree including children, delegate handlers, variable defaults, and argument expressions.","pos":[1048,1266],"source":" <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> returns an enumerable that touches all activities within the tree including children, delegate handlers, variable defaults, and argument expressions."},{"content":"In the following example, a workflow definition is created by using a <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.Statements.While&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph>, and expressions.","pos":[1267,1538],"source":" In the following example, a workflow definition is created by using a <xref:System.Activities.Statements.Sequence>, <xref:System.Activities.Statements.While>, <xref:System.Activities.Statements.ForEach%601>, <xref:System.Activities.Statements.WriteLine>, and expressions."},{"content":"After the workflow definition is created, it is invoked and then the <ph id=\"ph1\">`InspectActivity`</ph> method is called.","pos":[1539,1643],"source":" After the workflow definition is created, it is invoked and then the `InspectActivity` method is called."},{"content":"To enumerate the activities, the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> is called on the root activity, and again recursively on each returned activity.","pos":[1804,1986],"source":"To enumerate the activities, the <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> is called on the root activity, and again recursively on each returned activity."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.Activities.Activity.DisplayName%2A&gt;</ph> of each activity and expression in the activity tree is written to the console.","pos":[1987,2145],"source":" In the following example, the <xref:System.Activities.Activity.DisplayName%2A> of each activity and expression in the activity tree is written to the console."},{"content":"This sample code provides the following output.","pos":[2306,2353]},{"content":"<bpt id=\"p1\">**</bpt>List Item 1<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2360,2376],"source":"**List Item 1** "},{"content":"<bpt id=\"p1\">**</bpt>List Item 2<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2379,2395],"source":"**List Item 2** "},{"content":"<bpt id=\"p1\">**</bpt>List Item 3<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2398,2414],"source":"**List Item 3** "},{"content":"<bpt id=\"p1\">**</bpt>List Item 4<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2417,2433],"source":"**List Item 4** "},{"content":"<bpt id=\"p1\">**</bpt>List Item 5<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2436,2452],"source":"**List Item 5** "},{"content":"<bpt id=\"p1\">**</bpt>Items added to collection.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2455,2486],"source":"**Items added to collection.** "},{"content":"<bpt id=\"p1\">**</bpt>Sequence<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2489,2502],"source":"**Sequence** "},{"content":"<bpt id=\"p1\">**</bpt>Literal&lt;List<ph id=\"ph1\">\\&lt;</ph>String&gt;&gt;<ept id=\"p1\">**</ept><ph id=\"ph2\"> </ph>","pos":[2506,2533],"source":"**Literal<List\\<String>>** "},{"content":"<bpt id=\"p1\">**</bpt>While<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2537,2547],"source":"**While** "},{"content":"<bpt id=\"p1\">**</bpt>AddToCollection<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">**</ept><ph id=\"ph2\"> </ph>","pos":[2551,2580],"source":"**AddToCollection\\<String>** "},{"content":"<bpt id=\"p1\">**</bpt>VariableValue&lt;ICollection<ph id=\"ph1\">\\&lt;</ph>String&gt;&gt;<ept id=\"p1\">**</ept><ph id=\"ph2\"> </ph>","pos":[2584,2624],"source":"**VariableValue<ICollection\\<String>>** "},{"content":"<bpt id=\"p1\">**</bpt>LambdaValue<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">**</ept><ph id=\"ph2\"> </ph>","pos":[2628,2653],"source":"**LambdaValue\\<String>** "},{"content":"<bpt id=\"p1\">**</bpt>LocationReferenceValue&lt;List<ph id=\"ph1\">\\&lt;</ph>String&gt;&gt;<ept id=\"p1\">**</ept><ph id=\"ph2\"> </ph>","pos":[2657,2699],"source":"**LocationReferenceValue<List\\<String>>** "},{"content":"<bpt id=\"p1\">**</bpt>LambdaValue<ph id=\"ph1\">\\&lt;</ph>Boolean&gt;<ept id=\"p1\">**</ept><ph id=\"ph2\"> </ph>","pos":[2703,2729],"source":"**LambdaValue\\<Boolean>** "},{"content":"<bpt id=\"p1\">**</bpt>LocationReferenceValue&lt;List<ph id=\"ph1\">\\&lt;</ph>String&gt;&gt;<ept id=\"p1\">**</ept><ph id=\"ph2\"> </ph>","pos":[2733,2775],"source":"**LocationReferenceValue<List\\<String>>** "},{"content":"<bpt id=\"p1\">**</bpt>ForEach<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">**</ept><ph id=\"ph2\"> </ph>","pos":[2779,2800],"source":"**ForEach\\<String>** "},{"content":"<bpt id=\"p1\">**</bpt>VariableValue&lt;IEnumerable<ph id=\"ph1\">\\&lt;</ph>String&gt;&gt;<ept id=\"p1\">**</ept><ph id=\"ph2\"> </ph>","pos":[2804,2844],"source":"**VariableValue<IEnumerable\\<String>>** "},{"content":"<bpt id=\"p1\">**</bpt>WriteLine<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2848,2862],"source":"**WriteLine** "},{"content":"<bpt id=\"p1\">**</bpt>DelegateArgumentValue<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">**</ept><ph id=\"ph2\"> </ph>","pos":[2866,2901],"source":"**DelegateArgumentValue\\<String>** "},{"content":"<bpt id=\"p1\">**</bpt>Sequence<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2905,2918],"source":"**Sequence** "},{"content":"<bpt id=\"p1\">**</bpt>WriteLine<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[2922,2936],"source":"**WriteLine** "},{"content":"<bpt id=\"p1\">**</bpt>Literal<ph id=\"ph1\">\\&lt;</ph>String&gt;<ept id=\"p1\">**</ept>  To retrieve a specific activity instead of enumerating all of the activities, <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInspectionServices.Resolve%2A&gt;</ph> is used.","pos":[2940,3111],"source":"**Literal\\<String>**  To retrieve a specific activity instead of enumerating all of the activities, <xref:System.Activities.WorkflowInspectionServices.Resolve%2A> is used."},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.Resolve%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> perform metadata caching if <ph id=\"ph3\">`WorkflowInspectionServices.CacheMetadata`</ph> has not been previously called.","pos":[3112,3355],"source":" Both <xref:System.Activities.WorkflowInspectionServices.Resolve%2A> and <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> perform metadata caching if `WorkflowInspectionServices.CacheMetadata` has not been previously called."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A&gt;</ph> has been called then <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> is based on the existing metadata.","pos":[3356,3552],"source":" If <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> has been called then <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> is based on the existing metadata."},{"content":"Therefore, if tree changes have been made since the last call to <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph> might give unexpected results.","pos":[3553,3787],"source":" Therefore, if tree changes have been made since the last call to <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A>, <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A> might give unexpected results."},{"content":"If changes have been made to the workflow after calling <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.GetActivities%2A&gt;</ph>, metadata can be re-cached by calling the <ph id=\"ph2\">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> <ph id=\"ph3\">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> method.","pos":[3788,4100],"source":" If changes have been made to the workflow after calling <xref:System.Activities.WorkflowInspectionServices.GetActivities%2A>, metadata can be re-cached by calling the <xref:System.Activities.Validation.ActivityValidationServices> <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> method."},{"content":"Caching metadata is discussed in the next section.","pos":[4101,4151]},{"pos":[4161,4177],"content":"Caching Metadata","linkify":"Caching Metadata","nodes":[{"content":"Caching Metadata","pos":[0,16]}]},{"content":"Caching the metadata for an activity builds and validates a description of the activityâ€™s arguments, variables, child activities, and activity delegates.","pos":[4181,4334]},{"content":"Metadata, by default, is cached by the runtime when an activity is prepared for execution.","pos":[4335,4425]},{"content":"If a workflow host author wants to cache the metadata for an activity or activity tree before this, for example to take all of the cost upfront, then <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A&gt;</ph> can be used to cache the metadata at the desired time.","pos":[4426,4699],"source":" If a workflow host author wants to cache the metadata for an activity or activity tree before this, for example to take all of the cost upfront, then <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> can be used to cache the metadata at the desired time."}]}