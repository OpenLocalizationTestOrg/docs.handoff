{"content":"---\ntitle: \"#define - C# Reference\"\nms.custom: seodec18\n\nms.date: 06/30/2018\nf1_keywords: \n  - \"#define\"\nhelpviewer_keywords: \n  - \"#define directive [C#]\"\nms.assetid: 23638b8f-779c-450e-b600-d55682de7d01\n---\n# #define (C# Reference)\nYou use `#define` to define a symbol. When you use the symbol as the expression that's passed to the [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md) directive, the expression will evaluate to `true`, as the following example shows:  \n \n ```csharp\n #define DEBUG\n ```\n  \n## Remarks  \n  \n> [!NOTE]\n>  The `#define` directive cannot be used to declare constant values as is typically done in C and C++. Constants in C# are best defined as static members of a class or struct. If you have several such constants, consider creating a separate \"Constants\" class to hold them.  \n  \n Symbols can be used to specify conditions for compilation. You can test for the symbol with either [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md) or [#elif](../../../csharp/language-reference/preprocessor-directives/preprocessor-elif.md). You can also use the <xref:System.Diagnostics.ConditionalAttribute> to perform conditional compilation.  \n  \n You can define a symbol, but you cannot assign a value to a symbol. The `#define` directive must appear in the file before you use any instructions that aren't also preprocessor directives.  \n  \n You can also define a symbol with the [-define](../../../csharp/language-reference/compiler-options/define-compiler-option.md) compiler option. You can undefine a symbol with [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md).  \n  \n A symbol that you define with `-define` or with `#define` does not conflict with a variable of the same name. That is, a variable name should not be passed to a preprocessor directive and a symbol can only be evaluated by a preprocessor directive.  \n  \n The scope of a symbol that was created by using `#define` is the file in which the symbol was defined.  \n  \n As the following example shows, you must put `#define` directives at the top of the file.  \n  \n```csharp  \n#define DEBUG  \n//#define TRACE  \n#undef TRACE  \n  \nusing System;  \n  \npublic class TestDefine  \n{  \n    static void Main()  \n    {  \n#if (DEBUG)  \n        Console.WriteLine(\"Debugging is enabled.\");  \n#endif  \n  \n#if (TRACE)  \n     Console.WriteLine(\"Tracing is enabled.\");  \n#endif  \n    }  \n}  \n// Output:  \n// Debugging is enabled.  \n```  \n  \n For an example of how to undefine a symbol, see [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md).  \n  \n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Preprocessor Directives](../../../csharp/language-reference/preprocessor-directives/index.md)\n- [const](../../../csharp/language-reference/keywords/const.md)\n- [How to: Compile Conditionally with Trace and Debug](../../../framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)\n- [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)\n- [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)\n","nodes":[{"pos":[4,204],"embed":true,"restype":"x-metadata","content":"title: \"#define - C# Reference\"\nms.custom: seodec18\n\nms.date: 06/30/2018\nf1_keywords: \n  - \"#define\"\nhelpviewer_keywords: \n  - \"#define directive [C#]\"\nms.assetid: 23638b8f-779c-450e-b600-d55682de7d01","nodes":[{"content":"#define - C# Reference","nodes":[{"pos":[1,22],"content":"define - C# Reference","linkify":"define - C# Reference","nodes":[{"content":"define - C# Reference","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[211,233],"content":"#define (C# Reference)","linkify":"#define (C# Reference)","nodes":[{"content":"#define (C# Reference)","pos":[0,22]}]},{"content":"You use <ph id=\"ph1\">`#define`</ph> to define a symbol.","pos":[234,271],"source":"You use `#define` to define a symbol."},{"content":"When you use the symbol as the expression that's passed to the <bpt id=\"p1\">[</bpt>#if<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)</ept> directive, the expression will evaluate to <ph id=\"ph1\">`true`</ph>, as the following example shows:","pos":[272,502],"source":" When you use the symbol as the expression that's passed to the [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md) directive, the expression will evaluate to `true`, as the following example shows:"},{"pos":[544,551],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[559,840],"content":"[!NOTE]\n The `#define` directive cannot be used to declare constant values as is typically done in C and C++. Constants in C# are best defined as static members of a class or struct. If you have several such constants, consider creating a separate \"Constants\" class to hold them.","leadings":["","> "],"nodes":[{"content":"The `#define` directive cannot be used to declare constant values as is typically done in C and C++. Constants in C# are best defined as static members of a class or struct. If you have several such constants, consider creating a separate \"Constants\" class to hold them.","pos":[9,279],"nodes":[{"content":"The <ph id=\"ph1\">`#define`</ph> directive cannot be used to declare constant values as is typically done in C and C++.","pos":[0,100],"source":"The `#define` directive cannot be used to declare constant values as is typically done in C and C++."},{"content":"Constants in C# are best defined as static members of a class or struct.","pos":[101,173]},{"content":"If you have several such constants, consider creating a separate \"Constants\" class to hold them.","pos":[174,270]}]}]},{"content":"Symbols can be used to specify conditions for compilation.","pos":[847,905]},{"content":"You can test for the symbol with either <bpt id=\"p1\">[</bpt>#if<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)</ept> or <bpt id=\"p2\">[</bpt>#elif<ept id=\"p2\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-elif.md)</ept>.","pos":[906,1123],"source":" You can test for the symbol with either [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md) or [#elif](../../../csharp/language-reference/preprocessor-directives/preprocessor-elif.md)."},{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConditionalAttribute&gt;</ph> to perform conditional compilation.","pos":[1124,1227],"source":" You can also use the <xref:System.Diagnostics.ConditionalAttribute> to perform conditional compilation."},{"content":"You can define a symbol, but you cannot assign a value to a symbol.","pos":[1234,1301]},{"content":"The <ph id=\"ph1\">`#define`</ph> directive must appear in the file before you use any instructions that aren't also preprocessor directives.","pos":[1302,1423],"source":" The `#define` directive must appear in the file before you use any instructions that aren't also preprocessor directives."},{"content":"You can also define a symbol with the <bpt id=\"p1\">[</bpt>-define<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/define-compiler-option.md)</ept> compiler option.","pos":[1430,1573],"source":"You can also define a symbol with the [-define](../../../csharp/language-reference/compiler-options/define-compiler-option.md) compiler option."},{"content":"You can undefine a symbol with <bpt id=\"p1\">[</bpt>#undef<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)</ept>.","pos":[1574,1696],"source":" You can undefine a symbol with [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)."},{"content":"A symbol that you define with <ph id=\"ph1\">`-define`</ph> or with <ph id=\"ph2\">`#define`</ph> does not conflict with a variable of the same name.","pos":[1703,1812],"source":"A symbol that you define with `-define` or with `#define` does not conflict with a variable of the same name."},{"content":"That is, a variable name should not be passed to a preprocessor directive and a symbol can only be evaluated by a preprocessor directive.","pos":[1813,1950]},{"pos":[1957,2059],"content":"The scope of a symbol that was created by using <ph id=\"ph1\">`#define`</ph> is the file in which the symbol was defined.","source":"The scope of a symbol that was created by using `#define` is the file in which the symbol was defined."},{"pos":[2066,2155],"content":"As the following example shows, you must put <ph id=\"ph1\">`#define`</ph> directives at the top of the file.","source":"As the following example shows, you must put `#define` directives at the top of the file."},{"pos":[2521,2660],"content":"For an example of how to undefine a symbol, see <bpt id=\"p1\">[</bpt>#undef<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)</ept>.","source":"For an example of how to undefine a symbol, see [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)."},{"pos":[2669,2677],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2681,2740],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[2743,2809],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2812,2909],"content":"<bpt id=\"p1\">[</bpt>C# Preprocessor Directives<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/index.md)</ept>","source":"[C# Preprocessor Directives](../../../csharp/language-reference/preprocessor-directives/index.md)"},{"pos":[2912,2973],"content":"<bpt id=\"p1\">[</bpt>const<ept id=\"p1\">](../../../csharp/language-reference/keywords/const.md)</ept>","source":"[const](../../../csharp/language-reference/keywords/const.md)"},{"pos":[2976,3121],"content":"<bpt id=\"p1\">[</bpt>How to: Compile Conditionally with Trace and Debug<ept id=\"p1\">](../../../framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)</ept>","source":"[How to: Compile Conditionally with Trace and Debug](../../../framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)"},{"pos":[3124,3214],"content":"<bpt id=\"p1\">[</bpt>#undef<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)</ept>","source":"[#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)"},{"pos":[3217,3301],"content":"<bpt id=\"p1\">[</bpt>#if<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)</ept>","source":"[#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)"}]}