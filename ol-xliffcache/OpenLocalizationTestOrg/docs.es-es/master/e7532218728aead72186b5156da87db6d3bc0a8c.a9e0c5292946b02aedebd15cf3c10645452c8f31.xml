{"content":"---\ntitle: \"EnumerateCLRs Function\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"EnumerateCLRs\"\napi_location: \n  - \"dbgshim.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"EnumerateCLRs\"\nhelpviewer_keywords: \n  - \"debugging API [Silverlight]\"\n  - \"Silverlight, debugging\"\n  - \"EnumerateCLRs function\"\nms.assetid: f8d50cb3-ec4f-4529-8fe3-bd61fd28e13c\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# EnumerateCLRs Function\nProvides a mechanism for enumerating the CLRs in a process.  \n  \n## Syntax  \n  \n```  \nHRESULT EnumerateCLRs (  \n    [in]  DWORD      debuggeePID,  \n    [out] HANDLE**   ppHandleArrayOut,  \n    [out] LPWSTR**   ppStringArrayOut,  \n    [out] DWORD*     pdwArrayLengthOut  \n);  \n```  \n  \n## Parameters  \n `debuggeePID`  \n [in] Process identifier of the process from which loaded CLRs will be enumerated.  \n  \n `ppHandleArrayOut`  \n [out] Pointer to an array containing event handles that are used to continue a CLR startup. Each handle in the array is not guaranteed to be valid. If valid, the handle is to be used as the continue-startup event for the corresponding runtime located in the same index of `ppStringArrayOut`.  \n  \n `ppStringArrayOut`  \n [out] Pointer to an array of strings that specify full paths to CLRs loaded in the process.  \n  \n `pdwArrayLengthOut`  \n [out] Pointer to a DWORD that contains the length of the equally sized `ppHandleArrayOut` and `pdwArrayLengthOut`.  \n  \n## Return Value  \n S_OK  \n The number of CLRs in the process was successfully determined, and the corresponding handle and path arrays were properly filled.  \n  \n E_INVALIDARG  \n Either `ppHandleArrayOut` or `ppStringArrayOut` is null, or `pdwArrayLengthOut` is null.  \n  \n E_OUTOFMEMORY  \n The function is unable to allocate enough memory for the handle and path arrays.  \n  \n E_FAIL (or other E_ return codes)  \n Unable to enumerate loaded CLRs.  \n  \n## Remarks  \n For a target process that is identified by `debuggeePID`, the function returns an array of paths, `ppStringArrayOut`, to CLRs loaded in the process; an array of event handles, `ppHandleArrayOut`, which may contain a continue-startup event for the CLR at the same index; and the size of the arrays, `pdwArrayLengthOut`, which specifies the number of CLRs that are loaded.  \n  \n On the Windows operating system, `debuggeePID` maps to an OS process identifier.  \n  \n The memory for `ppHandleArrayOut` and `ppStringArrayOut` are allocated by this function. To free the memory allocated, you must call [CloseCLREnumeration Function](../../../../docs/framework/unmanaged-api/debugging/closeclrenumeration-function.md).  \n  \n This function can be called with both array parameters set to null in order to return the count of CLRs in the target process. From this count, a caller can infer the size of the buffer that will be created: `(sizeof(HANDLE) * count) + (sizeof(LPWSTR) * count) + (sizeof(WCHAR*) * count * MAX_PATH)`.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** dbgshim.h  \n  \n **Library:** dbgshim.dll  \n  \n **.NET Framework Versions:** 3.5 SP1\n","nodes":[{"pos":[4,405],"embed":true,"restype":"x-metadata","content":"title: \"EnumerateCLRs Function\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"EnumerateCLRs\"\napi_location: \n  - \"dbgshim.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"EnumerateCLRs\"\nhelpviewer_keywords: \n  - \"debugging API [Silverlight]\"\n  - \"Silverlight, debugging\"\n  - \"EnumerateCLRs function\"\nms.assetid: f8d50cb3-ec4f-4529-8fe3-bd61fd28e13c\ntopic_type: \n  - \"apiref\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"EnumerateCLRs Function","nodes":[{"pos":[0,22],"content":"EnumerateCLRs Function","nodes":[{"content":"EnumerateCLRs Function","pos":[0,22]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[412,434],"content":"EnumerateCLRs Function","linkify":"EnumerateCLRs Function","nodes":[{"content":"EnumerateCLRs Function","pos":[0,22]}]},{"content":"Provides a mechanism for enumerating the CLRs in a process.","pos":[435,494]},{"pos":[503,509],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[723,733],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] Process identifier of the process from which loaded CLRs will be enumerated.","pos":[754,835]},{"content":"[out] Pointer to an array containing event handles that are used to continue a CLR startup.","pos":[864,955]},{"content":"Each handle in the array is not guaranteed to be valid.","pos":[956,1011]},{"content":"If valid, the handle is to be used as the continue-startup event for the corresponding runtime located in the same index of <ph id=\"ph1\">`ppStringArrayOut`</ph>.","pos":[1012,1155],"source":" If valid, the handle is to be used as the continue-startup event for the corresponding runtime located in the same index of `ppStringArrayOut`."},{"content":"[out] Pointer to an array of strings that specify full paths to CLRs loaded in the process.","pos":[1184,1275]},{"content":"[out] Pointer to a DWORD that contains the length of the equally sized <ph id=\"ph1\">`ppHandleArrayOut`</ph> and <ph id=\"ph2\">`pdwArrayLengthOut`</ph>.","pos":[1305,1419],"source":"[out] Pointer to a DWORD that contains the length of the equally sized `ppHandleArrayOut` and `pdwArrayLengthOut`."},{"pos":[1428,1440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK","pos":[1444,1448]},{"content":"The number of CLRs in the process was successfully determined, and the corresponding handle and path arrays were properly filled.","pos":[1452,1581]},{"content":"E_INVALIDARG","pos":[1588,1600]},{"content":"Either <ph id=\"ph1\">`ppHandleArrayOut`</ph> or <ph id=\"ph2\">`ppStringArrayOut`</ph> is null, or <ph id=\"ph3\">`pdwArrayLengthOut`</ph> is null.","pos":[1604,1692],"source":"Either `ppHandleArrayOut` or `ppStringArrayOut` is null, or `pdwArrayLengthOut` is null."},{"content":"E_OUTOFMEMORY","pos":[1699,1712]},{"content":"The function is unable to allocate enough memory for the handle and path arrays.","pos":[1716,1796]},{"content":"E_FAIL (or other E_ return codes)","pos":[1803,1836]},{"content":"Unable to enumerate loaded CLRs.","pos":[1840,1872]},{"pos":[1881,1888],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1892,2262],"content":"For a target process that is identified by <ph id=\"ph1\">`debuggeePID`</ph>, the function returns an array of paths, <ph id=\"ph2\">`ppStringArrayOut`</ph>, to CLRs loaded in the process; an array of event handles, <ph id=\"ph3\">`ppHandleArrayOut`</ph>, which may contain a continue-startup event for the CLR at the same index; and the size of the arrays, <ph id=\"ph4\">`pdwArrayLengthOut`</ph>, which specifies the number of CLRs that are loaded.","source":"For a target process that is identified by `debuggeePID`, the function returns an array of paths, `ppStringArrayOut`, to CLRs loaded in the process; an array of event handles, `ppHandleArrayOut`, which may contain a continue-startup event for the CLR at the same index; and the size of the arrays, `pdwArrayLengthOut`, which specifies the number of CLRs that are loaded."},{"pos":[2269,2349],"content":"On the Windows operating system, <ph id=\"ph1\">`debuggeePID`</ph> maps to an OS process identifier.","source":"On the Windows operating system, `debuggeePID` maps to an OS process identifier."},{"content":"The memory for <ph id=\"ph1\">`ppHandleArrayOut`</ph> and <ph id=\"ph2\">`ppStringArrayOut`</ph> are allocated by this function.","pos":[2356,2444],"source":"The memory for `ppHandleArrayOut` and `ppStringArrayOut` are allocated by this function."},{"content":"To free the memory allocated, you must call <bpt id=\"p1\">[</bpt>CloseCLREnumeration Function<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/closeclrenumeration-function.md)</ept>.","pos":[2445,2604],"source":" To free the memory allocated, you must call [CloseCLREnumeration Function](../../../../docs/framework/unmanaged-api/debugging/closeclrenumeration-function.md)."},{"content":"This function can be called with both array parameters set to null in order to return the count of CLRs in the target process.","pos":[2611,2737]},{"content":"From this count, a caller can infer the size of the buffer that will be created: <ph id=\"ph1\">`(sizeof(HANDLE) * count) + (sizeof(LPWSTR) * count) + (sizeof(WCHAR*) * count * MAX_PATH)`</ph>.","pos":[2738,2911],"source":" From this count, a caller can infer the size of the buffer that will be created: `(sizeof(HANDLE) * count) + (sizeof(LPWSTR) * count) + (sizeof(WCHAR*) * count * MAX_PATH)`."},{"pos":[2920,2932],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2936,3040],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3047,3068],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> dbgshim.h","source":"**Header:** dbgshim.h"},{"pos":[3075,3099],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> dbgshim.dll","source":"**Library:** dbgshim.dll"},{"pos":[3106,3142],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> 3.5 SP1","source":"**.NET Framework Versions:** 3.5 SP1"}]}