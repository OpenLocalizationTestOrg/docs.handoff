{"content":"---\ntitle: \"x:Type Markup Extension\"\nms.date: \"03/30/2017\"\nf1_keywords: \n  - \"x:TypeExtension\"\n  - \"Type\"\n  - \"x:Type\"\n  - \"xType\"\n  - \"TypeExtension\"\nhelpviewer_keywords: \n  - \"x:Type markup extension [XAML Services]\"\n  - \"XAML [XAML Services], x:Type markup extension\"\n  - \"XAML [XAML Services], TargetType attribute\"\n  - \"TargetType attribute [XAML Services]\"\n  - \"Type markup extension in XAML [XAML Services]\"\nms.assetid: e0e0ce6f-e873-49c7-8ad7-8b840eb353ec\n---\n# x:Type Markup Extension\nSupplies the CLR <xref:System.Type> object that is the underlying type for a specified XAML type.  \n  \n## XAML Attribute Usage  \n  \n```xaml  \n<object property=\"{x:Type prefix:typeNameValue}\" .../>  \n```  \n  \n## XAML Object Element Usage  \n  \n```xaml  \n<x:Type TypeName=\"prefix:typeNameValue\"/>  \n```  \n  \n## XAML Values  \n  \n|||  \n|-|-|  \n|`prefix`|Optional. A prefix that maps a non-default XAML namespace. Specifying a prefix is frequently not necessary. See Remarks.|  \n|`typeNameValue`|Required. A type name resolvable to the current default XAML namespace; or the specified mapped prefix if `prefix` is supplied.|  \n  \n## Remarks  \n The `x:Type` markup extension has a similar function to the `typeof()` operator in C# or the `GetType` operator in Microsoft Visual Basic.  \n  \n The `x:Type` markup extension supplies a from-string conversion behavior for properties that take the type <xref:System.Type>. The input is a XAML type. The relationship between the input XAML type and the output CLR <xref:System.Type> is that the output <xref:System.Type> is the <xref:System.Xaml.XamlType.UnderlyingType%2A> of the input <xref:System.Xaml.XamlType>, after looking up the necessary <xref:System.Xaml.XamlType> based on XAML schema context and the <xref:System.Windows.Markup.IXamlTypeResolver> service the context provides.  \n  \n In .NET Framework XAML Services, the handling for this markup extension is defined by the <xref:System.Windows.Markup.TypeExtension> class.  \n  \n In specific framework implementations, some properties that take <xref:System.Type> as a value can accept the name of the type directly (the string value of the type `Name`). However, implementing this behavior is a complex scenario. For examples, see the \"WPF Usage Notes\" section that follows.  \n  \n Attribute syntax is the most common syntax used with this markup extension. The string token provided after the `x:Type` identifier string is assigned as the <xref:System.Windows.Markup.TypeExtension.TypeName%2A> value of the underlying <xref:System.Windows.Markup.TypeExtension> extension class. Under the default XAML schema context for .NET Framework XAML Services, which is based on CLR types, the value of this attribute is either the <xref:System.Reflection.MemberInfo.Name%2A> of the desired type, or contains that <xref:System.Reflection.MemberInfo.Name%2A> preceded by a prefix for a non-default XAML namespace mapping.  \n  \n The `x:Type` markup extension can be used in object element syntax. In this case, specifying the value of the <xref:System.Windows.Markup.TypeExtension.TypeName%2A> property is required to properly initialize the extension.  \n  \n The `x:Type` markup extension can also be used as a verbose attribute; however this use is not typical: `<object property=\"{x:Type TypeName=typeNameValue}\" .../>`  \n  \n## WPF Usage Notes  \n  \n### Default XAML Namespace and Type Mapping  \n The default XAML namespace for WPF programming contains most of the XAML types you need for typical XAML scenarios; therefore, you can often avoid prefixes when referencing XAML type values. You might need to map a prefix if you are referencing a type from a custom assembly or for types that exist in a WPF assembly but are from a CLR namespace that was not mapped to the default XAML namespace. For more information about prefixes, XAML namespaces, and mapping CLR namespaces, see [XAML Namespaces and Namespace Mapping for WPF XAML](../wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  \n  \n### Type Properties That Support Typename-as-String  \n WPF supports techniques that enable specifying the value of some properties of type <xref:System.Type> without requiring an `x:Type` markup extension usage. Instead, you can specify the value as a string that names the type. Examples of this are <xref:System.Windows.Controls.ControlTemplate.TargetType%2A?displayProperty=nameWithType> and <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType>. Support for this behavior is not provided through either type converters or markup extensions. Instead, this is a deferral behavior implemented through <xref:System.Windows.FrameworkElementFactory>.  \n  \n Silverlight supports a similar convention. In fact, Silverlight does not currently support `{x:Type}` in its XAML language support, and does not accept `{x:Type}` usages outside of a few circumstances that are intended to support WPF-Silverlight XAML migration. Therefore, the typename-as-string behavior is built-in to all Silverlight native property evaluation where a <xref:System.Type> is the value.  \n  \n## XAML 2009  \n XAML 2009 provides additional support for generic types and modifies the feature behavior of `x:TypeArguments` and `x:Type` to provide this support.  \n  \n-   `x:TypeArguments` and the associated object element for a generic object instantiation can be on elements other than the root. For more information, see the \"XAML 2009\" section of [x:TypeArguments Directive](x-typearguments-directive.md).  \n  \n-   XAML 2009 supports a syntax for specifying a generic type's constraint in markup. This can be used by `x:TypeArguments`, by `x:Type`, or by the two features in combination.  \n  \n-   WPF XAML implementation when processing XAML 2009 for load also adds this capability to the implicit type conversion behavior for certain framework properties that use type <xref:System.Type>.  \n  \n In WPF, you can use XAML 2009 features but only for loose XAML (XAML that is not markup-compiled). Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.  \n  \n## See also\n\n- <xref:System.Windows.Style>\n- [Styling and Templating](../wpf/controls/styling-and-templating.md)\n- [XAML Overview (WPF)](../wpf/advanced/xaml-overview-wpf.md)\n- [Markup Extensions and WPF XAML](../wpf/advanced/markup-extensions-and-wpf-xaml.md)\n","nodes":[{"pos":[4,463],"embed":true,"restype":"x-metadata","content":"title: \"x:Type Markup Extension\"\nms.date: \"03/30/2017\"\nf1_keywords: \n  - \"x:TypeExtension\"\n  - \"Type\"\n  - \"x:Type\"\n  - \"xType\"\n  - \"TypeExtension\"\nhelpviewer_keywords: \n  - \"x:Type markup extension [XAML Services]\"\n  - \"XAML [XAML Services], x:Type markup extension\"\n  - \"XAML [XAML Services], TargetType attribute\"\n  - \"TargetType attribute [XAML Services]\"\n  - \"Type markup extension in XAML [XAML Services]\"\nms.assetid: e0e0ce6f-e873-49c7-8ad7-8b840eb353ec","nodes":[{"content":"x:Type Markup Extension","nodes":[{"pos":[0,23],"content":"x:Type Markup Extension","nodes":[{"content":"x:Type Markup Extension","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[470,493],"content":"x:Type Markup Extension","linkify":"x:Type Markup Extension","nodes":[{"content":"x:Type Markup Extension","pos":[0,23]}]},{"pos":[494,591],"content":"Supplies the CLR <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object that is the underlying type for a specified XAML type.","source":"Supplies the CLR <xref:System.Type> object that is the underlying type for a specified XAML type."},{"pos":[600,620],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[705,730],"content":"XAML Object Element Usage","linkify":"XAML Object Element Usage","nodes":[{"content":"XAML Object Element Usage","pos":[0,25]}]},{"pos":[802,813],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"content":"Optional.","pos":[843,852]},{"content":"A prefix that maps a non-default XAML namespace.","pos":[853,901]},{"content":"Specifying a prefix is frequently not necessary.","pos":[902,950]},{"content":"See Remarks.","pos":[951,963]},{"content":"Required.","pos":[984,993]},{"content":"A type name resolvable to the current default XAML namespace; or the specified mapped prefix if <ph id=\"ph1\">`prefix`</ph> is supplied.","pos":[994,1111],"source":" A type name resolvable to the current default XAML namespace; or the specified mapped prefix if `prefix` is supplied."},{"pos":[1121,1128],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1132,1270],"content":"The <ph id=\"ph1\">`x:Type`</ph> markup extension has a similar function to the <ph id=\"ph2\">`typeof()`</ph> operator in C# or the <ph id=\"ph3\">`GetType`</ph> operator in Microsoft Visual Basic.","source":"The `x:Type` markup extension has a similar function to the `typeof()` operator in C# or the `GetType` operator in Microsoft Visual Basic."},{"content":"The <ph id=\"ph1\">`x:Type`</ph> markup extension supplies a from-string conversion behavior for properties that take the type <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph>.","pos":[1277,1403],"source":"The `x:Type` markup extension supplies a from-string conversion behavior for properties that take the type <xref:System.Type>."},{"content":"The input is a XAML type.","pos":[1404,1429]},{"content":"The relationship between the input XAML type and the output CLR <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> is that the output <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> is the <ph id=\"ph3\">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> of the input <ph id=\"ph4\">&lt;xref:System.Xaml.XamlType&gt;</ph>, after looking up the necessary <ph id=\"ph5\">&lt;xref:System.Xaml.XamlType&gt;</ph> based on XAML schema context and the <ph id=\"ph6\">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> service the context provides.","pos":[1430,1818],"source":" The relationship between the input XAML type and the output CLR <xref:System.Type> is that the output <xref:System.Type> is the <xref:System.Xaml.XamlType.UnderlyingType%2A> of the input <xref:System.Xaml.XamlType>, after looking up the necessary <xref:System.Xaml.XamlType> based on XAML schema context and the <xref:System.Windows.Markup.IXamlTypeResolver> service the context provides."},{"pos":[1825,1964],"content":"In .NET Framework XAML Services, the handling for this markup extension is defined by the <ph id=\"ph1\">&lt;xref:System.Windows.Markup.TypeExtension&gt;</ph> class.","source":"In .NET Framework XAML Services, the handling for this markup extension is defined by the <xref:System.Windows.Markup.TypeExtension> class."},{"content":"In specific framework implementations, some properties that take <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> as a value can accept the name of the type directly (the string value of the type <ph id=\"ph2\">`Name`</ph>).","pos":[1971,2145],"source":"In specific framework implementations, some properties that take <xref:System.Type> as a value can accept the name of the type directly (the string value of the type `Name`)."},{"content":"However, implementing this behavior is a complex scenario.","pos":[2146,2204]},{"content":"For examples, see the \"WPF Usage Notes\" section that follows.","pos":[2205,2266]},{"content":"Attribute syntax is the most common syntax used with this markup extension.","pos":[2273,2348]},{"content":"The string token provided after the <ph id=\"ph1\">`x:Type`</ph> identifier string is assigned as the <ph id=\"ph2\">&lt;xref:System.Windows.Markup.TypeExtension.TypeName%2A&gt;</ph> value of the underlying <ph id=\"ph3\">&lt;xref:System.Windows.Markup.TypeExtension&gt;</ph> extension class.","pos":[2349,2569],"source":" The string token provided after the `x:Type` identifier string is assigned as the <xref:System.Windows.Markup.TypeExtension.TypeName%2A> value of the underlying <xref:System.Windows.Markup.TypeExtension> extension class."},{"content":"Under the default XAML schema context for .NET Framework XAML Services, which is based on CLR types, the value of this attribute is either the <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> of the desired type, or contains that <ph id=\"ph2\">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> preceded by a prefix for a non-default XAML namespace mapping.","pos":[2570,2901],"source":" Under the default XAML schema context for .NET Framework XAML Services, which is based on CLR types, the value of this attribute is either the <xref:System.Reflection.MemberInfo.Name%2A> of the desired type, or contains that <xref:System.Reflection.MemberInfo.Name%2A> preceded by a prefix for a non-default XAML namespace mapping."},{"content":"The <ph id=\"ph1\">`x:Type`</ph> markup extension can be used in object element syntax.","pos":[2908,2975],"source":"The `x:Type` markup extension can be used in object element syntax."},{"content":"In this case, specifying the value of the <ph id=\"ph1\">&lt;xref:System.Windows.Markup.TypeExtension.TypeName%2A&gt;</ph> property is required to properly initialize the extension.","pos":[2976,3131],"source":" In this case, specifying the value of the <xref:System.Windows.Markup.TypeExtension.TypeName%2A> property is required to properly initialize the extension."},{"pos":[3138,3300],"content":"The <ph id=\"ph1\">`x:Type`</ph> markup extension can also be used as a verbose attribute; however this use is not typical: <ph id=\"ph2\">`&lt;object property=\"{x:Type TypeName=typeNameValue}\" .../&gt;`</ph>","source":"The `x:Type` markup extension can also be used as a verbose attribute; however this use is not typical: `<object property=\"{x:Type TypeName=typeNameValue}\" .../>`"},{"pos":[3309,3324],"content":"WPF Usage Notes","linkify":"WPF Usage Notes","nodes":[{"content":"WPF Usage Notes","pos":[0,15]}]},{"pos":[3334,3373],"content":"Default XAML Namespace and Type Mapping","linkify":"Default XAML Namespace and Type Mapping","nodes":[{"content":"Default XAML Namespace and Type Mapping","pos":[0,39]}]},{"content":"The default XAML namespace for WPF programming contains most of the XAML types you need for typical XAML scenarios; therefore, you can often avoid prefixes when referencing XAML type values.","pos":[3377,3567]},{"content":"You might need to map a prefix if you are referencing a type from a custom assembly or for types that exist in a WPF assembly but are from a CLR namespace that was not mapped to the default XAML namespace.","pos":[3568,3773]},{"content":"For more information about prefixes, XAML namespaces, and mapping CLR namespaces, see <bpt id=\"p1\">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id=\"p1\">](../wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.","pos":[3774,3984],"source":" For more information about prefixes, XAML namespaces, and mapping CLR namespaces, see [XAML Namespaces and Namespace Mapping for WPF XAML](../wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)."},{"pos":[3994,4041],"content":"Type Properties That Support Typename-as-String","linkify":"Type Properties That Support Typename-as-String","nodes":[{"content":"Type Properties That Support Typename-as-String","pos":[0,47]}]},{"content":"WPF supports techniques that enable specifying the value of some properties of type <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> without requiring an <ph id=\"ph2\">`x:Type`</ph> markup extension usage.","pos":[4045,4201],"source":"WPF supports techniques that enable specifying the value of some properties of type <xref:System.Type> without requiring an `x:Type` markup extension usage."},{"content":"Instead, you can specify the value as a string that names the type.","pos":[4202,4269]},{"content":"Examples of this are <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate.TargetType%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType&gt;</ph>.","pos":[4270,4456],"source":" Examples of this are <xref:System.Windows.Controls.ControlTemplate.TargetType%2A?displayProperty=nameWithType> and <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType>."},{"content":"Support for this behavior is not provided through either type converters or markup extensions.","pos":[4457,4551]},{"content":"Instead, this is a deferral behavior implemented through <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElementFactory&gt;</ph>.","pos":[4552,4655],"source":" Instead, this is a deferral behavior implemented through <xref:System.Windows.FrameworkElementFactory>."},{"content":"Silverlight supports a similar convention.","pos":[4662,4704]},{"content":"In fact, Silverlight does not currently support <ph id=\"ph1\">`{x:Type}`</ph> in its XAML language support, and does not accept <ph id=\"ph2\">`{x:Type}`</ph> usages outside of a few circumstances that are intended to support WPF-Silverlight XAML migration.","pos":[4705,4923],"source":" In fact, Silverlight does not currently support `{x:Type}` in its XAML language support, and does not accept `{x:Type}` usages outside of a few circumstances that are intended to support WPF-Silverlight XAML migration."},{"content":"Therefore, the typename-as-string behavior is built-in to all Silverlight native property evaluation where a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> is the value.","pos":[4924,5065],"source":" Therefore, the typename-as-string behavior is built-in to all Silverlight native property evaluation where a <xref:System.Type> is the value."},{"pos":[5074,5083],"content":"XAML 2009","linkify":"XAML 2009","nodes":[{"content":"XAML 2009","pos":[0,9]}]},{"pos":[5087,5235],"content":"XAML 2009 provides additional support for generic types and modifies the feature behavior of <ph id=\"ph1\">`x:TypeArguments`</ph> and <ph id=\"ph2\">`x:Type`</ph> to provide this support.","source":"XAML 2009 provides additional support for generic types and modifies the feature behavior of `x:TypeArguments` and `x:Type` to provide this support."},{"content":"<ph id=\"ph1\">`x:TypeArguments`</ph> and the associated object element for a generic object instantiation can be on elements other than the root.","pos":[5245,5371],"source":"`x:TypeArguments` and the associated object element for a generic object instantiation can be on elements other than the root."},{"content":"For more information, see the \"XAML 2009\" section of <bpt id=\"p1\">[</bpt>x:TypeArguments Directive<ept id=\"p1\">](x-typearguments-directive.md)</ept>.","pos":[5372,5483],"source":" For more information, see the \"XAML 2009\" section of [x:TypeArguments Directive](x-typearguments-directive.md)."},{"content":"XAML 2009 supports a syntax for specifying a generic type's constraint in markup.","pos":[5493,5574]},{"content":"This can be used by <ph id=\"ph1\">`x:TypeArguments`</ph>, by <ph id=\"ph2\">`x:Type`</ph>, or by the two features in combination.","pos":[5575,5665],"source":" This can be used by `x:TypeArguments`, by `x:Type`, or by the two features in combination."},{"pos":[5675,5867],"content":"WPF XAML implementation when processing XAML 2009 for load also adds this capability to the implicit type conversion behavior for certain framework properties that use type <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph>.","source":"WPF XAML implementation when processing XAML 2009 for load also adds this capability to the implicit type conversion behavior for certain framework properties that use type <xref:System.Type>."},{"content":"In WPF, you can use XAML 2009 features but only for loose XAML (XAML that is not markup-compiled).","pos":[5874,5972]},{"content":"Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.","pos":[5973,6089]},{"pos":[6098,6106],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6140,6207],"content":"<bpt id=\"p1\">[</bpt>Styling and Templating<ept id=\"p1\">](../wpf/controls/styling-and-templating.md)</ept>","source":"[Styling and Templating](../wpf/controls/styling-and-templating.md)"},{"pos":[6210,6269],"content":"<bpt id=\"p1\">[</bpt>XAML Overview (WPF)<ept id=\"p1\">](../wpf/advanced/xaml-overview-wpf.md)</ept>","source":"[XAML Overview (WPF)](../wpf/advanced/xaml-overview-wpf.md)"},{"pos":[6272,6355],"content":"<bpt id=\"p1\">[</bpt>Markup Extensions and WPF XAML<ept id=\"p1\">](../wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>","source":"[Markup Extensions and WPF XAML](../wpf/advanced/markup-extensions-and-wpf-xaml.md)"}]}