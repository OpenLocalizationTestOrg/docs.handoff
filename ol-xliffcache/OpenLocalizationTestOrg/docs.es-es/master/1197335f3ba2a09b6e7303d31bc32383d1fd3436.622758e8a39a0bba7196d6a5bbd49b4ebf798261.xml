{"content":"---\ntitle: \"Connection Strings in ADO.NET\"\nms.date: \"10/10/2018\"\nms.assetid: 745c5f95-2f02-4674-b378-6d51a7ec2490\n---\n\n# Connection Strings in ADO.NET\n\nA connection string contains initialization information that is passed as a parameter from a data provider to a data source. The data provider receives the connection string as the value of the <xref:System.Data.Common.DbConnection.ConnectionString?displayProperty=nameWithType> property. The provider parses the connection string and ensures that the syntax is correct and that the keywords are supported. Then the <xref:System.Data.Common.DbConnection.Open?displayProperty=nameWithType> method passes the parsed connection parameters to the data source. The data source performs further validation and establishes a connection.\n\n## Connection string syntax\n\nA connection string is a semicolon-delimited list of key/value parameter pairs:\n\n    keyword1=value; keyword2=value;\n\nKeywords are not case-sensitive. Values, however, may be case-sensitive, depending on the data source. Both keywords and values may contain [whitespace characters](https://en.wikipedia.org/wiki/Whitespace_character#Unicode). Leading and trailing white space is ignored in keywords and unquoted values.\n\nIf a value contains the semicolon, [Unicode control characters](https://en.wikipedia.org/wiki/Unicode_control_characters), or leading or trailing white space, it must be enclosed in single or double quotation marks. For example:\n\n    Keyword=\" whitespace  \";\n    Keyword='special;character';\n\nThe enclosing character may not occur within the value it encloses. Therefore, a value containing single quotation marks can be enclosed only in double quotation marks, and vice versa:\n\n    Keyword='double\"quotation;mark';\n    Keyword=\"single'quotation;mark\";\n\nThe quotation marks themselves, as well as the equals sign, do not require escaping, so the following connection strings are valid:\n\n    Keyword=no \"escaping\" 'required';\n    Keyword=a=b=c\n\nSince each value is read till the next semicolon or the end of string, the value in the latter example is `a=b=c`, and the final semicolon is optional.\n\nAll connection strings share the same basic syntax described above. The set of recognized keywords depends on the provider, however, and has evolved over the years from earlier APIs such as *ODBC*. The *.NET Framework* data provider for *SQL Server* (`SqlClient`) supports many keywords from older APIs, but is generally more flexible and accepts synonyms for many of the common connection string keywords.\n\nTyping mistakes can cause errors. For example, `Integrated Security=true` is valid, but `IntegratedSecurity=true` causes an error.\n\nConnection strings constructed manually at run time from unvalidated user input are vulnerable to string-injection attacks and jeopardize security at the data source. To address these problems, *ADO.NET* 2.0 introduced [connection string builders](../../../../docs/framework/data/adonet/connection-string-builders.md) for each *.NET Framework* data provider. These connection string builders expose parameters as strongly-typed properties, and make it possible to validate the connection string before it's sent to the data source.\n\n## In This Section\n\n[Connection String Builders](../../../../docs/framework/data/adonet/connection-string-builders.md)\\\nDemonstrates how to use the `ConnectionStringBuilder` classes to construct valid connection strings at run time.\n\n[Connection Strings and Configuration Files](../../../../docs/framework/data/adonet/connection-strings-and-configuration-files.md)\\\nDemonstrates how to store and retrieve connection strings in configuration files.\n\n[Connection String Syntax](../../../../docs/framework/data/adonet/connection-string-syntax.md)\\\nDescribes how to configure provider-specific connection strings for `SqlClient`, `OracleClient`, `OleDb`, and `Odbc`.\n\n[Protecting Connection Information](../../../../docs/framework/data/adonet/protecting-connection-information.md)\\\nDemonstrates techniques for protecting information used to connect to a data source.\n\n## See also\n\n- [Connecting to a Data Source](/cpp/data/odbc/connecting-to-a-data-source)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,113],"embed":true,"restype":"x-metadata","content":"title: \"Connection Strings in ADO.NET\"\nms.date: \"10/10/2018\"\nms.assetid: 745c5f95-2f02-4674-b378-6d51a7ec2490","nodes":[{"content":"Connection Strings in ADO.NET","nodes":[{"pos":[0,29],"content":"Connection Strings in ADO.NET","nodes":[{"content":"Connection Strings in ADO.NET","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[121,150],"content":"Connection Strings in ADO.NET","linkify":"Connection Strings in ADO.NET","nodes":[{"content":"Connection Strings in ADO.NET","pos":[0,29]}]},{"content":"A connection string contains initialization information that is passed as a parameter from a data provider to a data source.","pos":[152,276]},{"content":"The data provider receives the connection string as the value of the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbConnection.ConnectionString?displayProperty=nameWithType&gt;</ph> property.","pos":[277,440],"source":" The data provider receives the connection string as the value of the <xref:System.Data.Common.DbConnection.ConnectionString?displayProperty=nameWithType> property."},{"content":"The provider parses the connection string and ensures that the syntax is correct and that the keywords are supported.","pos":[441,558]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbConnection.Open?displayProperty=nameWithType&gt;</ph> method passes the parsed connection parameters to the data source.","pos":[559,707],"source":" Then the <xref:System.Data.Common.DbConnection.Open?displayProperty=nameWithType> method passes the parsed connection parameters to the data source."},{"content":"The data source performs further validation and establishes a connection.","pos":[708,781]},{"pos":[786,810],"content":"Connection string syntax","linkify":"Connection string syntax","nodes":[{"content":"Connection string syntax","pos":[0,24]}]},{"content":"A connection string is a semicolon-delimited list of key/value parameter pairs:","pos":[812,891]},{"content":"Keywords are not case-sensitive.","pos":[930,962]},{"content":"Values, however, may be case-sensitive, depending on the data source.","pos":[963,1032]},{"content":"Both keywords and values may contain <bpt id=\"p1\">[</bpt>whitespace characters<ept id=\"p1\">](https://en.wikipedia.org/wiki/Whitespace_character#Unicode)</ept>.","pos":[1033,1154],"source":" Both keywords and values may contain [whitespace characters](https://en.wikipedia.org/wiki/Whitespace_character#Unicode)."},{"content":"Leading and trailing white space is ignored in keywords and unquoted values.","pos":[1155,1231]},{"content":"If a value contains the semicolon, <bpt id=\"p1\">[</bpt>Unicode control characters<ept id=\"p1\">](https://en.wikipedia.org/wiki/Unicode_control_characters)</ept>, or leading or trailing white space, it must be enclosed in single or double quotation marks.","pos":[1233,1448],"source":"If a value contains the semicolon, [Unicode control characters](https://en.wikipedia.org/wiki/Unicode_control_characters), or leading or trailing white space, it must be enclosed in single or double quotation marks."},{"content":"For example:","pos":[1449,1461]},{"content":"The enclosing character may not occur within the value it encloses.","pos":[1526,1593]},{"content":"Therefore, a value containing single quotation marks can be enclosed only in double quotation marks, and vice versa:","pos":[1594,1710]},{"content":"The quotation marks themselves, as well as the equals sign, do not require escaping, so the following connection strings are valid:","pos":[1787,1918]},{"pos":[1977,2128],"content":"Since each value is read till the next semicolon or the end of string, the value in the latter example is <ph id=\"ph1\">`a=b=c`</ph>, and the final semicolon is optional.","source":"Since each value is read till the next semicolon or the end of string, the value in the latter example is `a=b=c`, and the final semicolon is optional."},{"content":"All connection strings share the same basic syntax described above.","pos":[2130,2197]},{"content":"The set of recognized keywords depends on the provider, however, and has evolved over the years from earlier APIs such as <bpt id=\"p1\">*</bpt>ODBC<ept id=\"p1\">*</ept>.","pos":[2198,2327],"source":" The set of recognized keywords depends on the provider, however, and has evolved over the years from earlier APIs such as *ODBC*."},{"content":"The <bpt id=\"p1\">*</bpt>.NET Framework<ept id=\"p1\">*</ept> data provider for <bpt id=\"p2\">*</bpt>SQL Server<ept id=\"p2\">*</ept> (<ph id=\"ph1\">`SqlClient`</ph>) supports many keywords from older APIs, but is generally more flexible and accepts synonyms for many of the common connection string keywords.","pos":[2328,2536],"source":" The *.NET Framework* data provider for *SQL Server* (`SqlClient`) supports many keywords from older APIs, but is generally more flexible and accepts synonyms for many of the common connection string keywords."},{"content":"Typing mistakes can cause errors.","pos":[2538,2571]},{"content":"For example, <ph id=\"ph1\">`Integrated Security=true`</ph> is valid, but <ph id=\"ph2\">`IntegratedSecurity=true`</ph> causes an error.","pos":[2572,2668],"source":" For example, `Integrated Security=true` is valid, but `IntegratedSecurity=true` causes an error."},{"content":"Connection strings constructed manually at run time from unvalidated user input are vulnerable to string-injection attacks and jeopardize security at the data source.","pos":[2670,2836]},{"content":"To address these problems, <bpt id=\"p1\">*</bpt>ADO.NET<ept id=\"p1\">*</ept> 2.0 introduced <bpt id=\"p2\">[</bpt>connection string builders<ept id=\"p2\">](../../../../docs/framework/data/adonet/connection-string-builders.md)</ept> for each <bpt id=\"p3\">*</bpt>.NET Framework<ept id=\"p3\">*</ept> data provider.","pos":[2837,3028],"source":" To address these problems, *ADO.NET* 2.0 introduced [connection string builders](../../../../docs/framework/data/adonet/connection-string-builders.md) for each *.NET Framework* data provider."},{"content":"These connection string builders expose parameters as strongly-typed properties, and make it possible to validate the connection string before it's sent to the data source.","pos":[3029,3201]},{"pos":[3206,3221],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"content":"<bpt id=\"p1\">[</bpt>Connection String Builders<ept id=\"p1\">](../../../../docs/framework/data/adonet/connection-string-builders.md)</ept><ph id=\"ph1\">\\</ph>","pos":[3223,3322],"source":"[Connection String Builders](../../../../docs/framework/data/adonet/connection-string-builders.md)\\"},{"content":"Demonstrates how to use the <ph id=\"ph1\">`ConnectionStringBuilder`</ph> classes to construct valid connection strings at run time.","pos":[3323,3435],"source":"Demonstrates how to use the `ConnectionStringBuilder` classes to construct valid connection strings at run time."},{"content":"<bpt id=\"p1\">[</bpt>Connection Strings and Configuration Files<ept id=\"p1\">](../../../../docs/framework/data/adonet/connection-strings-and-configuration-files.md)</ept><ph id=\"ph1\">\\</ph>","pos":[3437,3568],"source":"[Connection Strings and Configuration Files](../../../../docs/framework/data/adonet/connection-strings-and-configuration-files.md)\\"},{"content":"Demonstrates how to store and retrieve connection strings in configuration files.","pos":[3569,3650]},{"content":"<bpt id=\"p1\">[</bpt>Connection String Syntax<ept id=\"p1\">](../../../../docs/framework/data/adonet/connection-string-syntax.md)</ept><ph id=\"ph1\">\\</ph>","pos":[3652,3747],"source":"[Connection String Syntax](../../../../docs/framework/data/adonet/connection-string-syntax.md)\\"},{"content":"Describes how to configure provider-specific connection strings for <ph id=\"ph1\">`SqlClient`</ph>, <ph id=\"ph2\">`OracleClient`</ph>, <ph id=\"ph3\">`OleDb`</ph>, and <ph id=\"ph4\">`Odbc`</ph>.","pos":[3748,3865],"source":"Describes how to configure provider-specific connection strings for `SqlClient`, `OracleClient`, `OleDb`, and `Odbc`."},{"content":"<bpt id=\"p1\">[</bpt>Protecting Connection Information<ept id=\"p1\">](../../../../docs/framework/data/adonet/protecting-connection-information.md)</ept><ph id=\"ph1\">\\</ph>","pos":[3867,3980],"source":"[Protecting Connection Information](../../../../docs/framework/data/adonet/protecting-connection-information.md)\\"},{"content":"Demonstrates techniques for protecting information used to connect to a data source.","pos":[3981,4065]},{"pos":[4070,4078],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4082,4155],"content":"<bpt id=\"p1\">[</bpt>Connecting to a Data Source<ept id=\"p1\">](/cpp/data/odbc/connecting-to-a-data-source)</ept>","source":"[Connecting to a Data Source](/cpp/data/odbc/connecting-to-a-data-source)"},{"pos":[4158,4262],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}