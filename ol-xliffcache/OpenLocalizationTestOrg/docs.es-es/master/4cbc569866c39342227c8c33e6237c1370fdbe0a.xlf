<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cbc569866c39342227c8c33e6237c1370fdbe0a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\like-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5cc1b9e05b5e19fa1eb7396a9850cbb5d83ef15e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">236d206d5e5e8956d705a275622b2c94192bccfe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Like Operator (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Like Operator (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Compares a string against a pattern.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`Boolean`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The result is a <ph id="ph1">`Boolean`</ph> value indicating whether or not the <ph id="ph2">`string`</ph> satisfies the <ph id="ph3">`pattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`String`</ph> expression conforming to the pattern-matching conventions described in "Remarks."</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the value in <ph id="ph1">`string`</ph> satisfies the pattern contained in <ph id="ph2">`pattern`</ph>, <ph id="ph3">`result`</ph> is <ph id="ph4">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the string does not satisfy the pattern, <ph id="ph1">`result`</ph> is <ph id="ph2">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If both <ph id="ph1">`string`</ph> and <ph id="ph2">`pattern`</ph> are empty strings, the result is <ph id="ph3">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Comparison Method</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The behavior of the <ph id="ph1">`Like`</ph> operator depends on the <bpt id="p1">[</bpt>Option Compare Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default string comparison method for each source file is <ph id="ph1">`Option Compare Binary`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Pattern Options</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Built-in pattern matching provides a versatile tool for string comparisons.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The pattern-matching features allow you to match each character in <ph id="ph1">`string`</ph> against a specific character, a wildcard character, a character list, or a character range.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following table shows the characters allowed in <ph id="ph1">`pattern`</ph> and what they match.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Characters in <ph id="ph1">`pattern`</ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Matches in <ph id="ph1">`string`</ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Any single character</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Zero or more characters</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Any single digit (0â€“9)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[`</ph> <ph id="ph2">`charlist`</ph> <ph id="ph3">`]`</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Any single character in <ph id="ph1">`charlist`</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[!`</ph> <ph id="ph2">`charlist`</ph> <ph id="ph3">`]`</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Any single character not in <ph id="ph1">`charlist`</ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Character Lists</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A group of one or more characters (<ph id="ph1">`charlist`</ph>) enclosed in brackets (<ph id="ph2">`[ ]`</ph>) can be used to match any single character in <ph id="ph3">`string`</ph> and can include almost any character code, including digits.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An exclamation point (<ph id="ph1">`!`</ph>) at the beginning of <ph id="ph2">`charlist`</ph> means that a match is made if any character except the characters in <ph id="ph3">`charlist`</ph> is found in <ph id="ph4">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When used outside brackets, the exclamation point matches itself.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Special Characters</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To match the special characters left bracket (<ph id="ph1">`[`</ph>), question mark (<ph id="ph2">`?`</ph>), number sign (<ph id="ph3">`#`</ph>), and asterisk (<ph id="ph4">`*`</ph>), enclose them in brackets.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The right bracket (<ph id="ph1">`]`</ph>) cannot be used within a group to match itself, but it can be used outside a group as an individual character.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The character sequence <ph id="ph1">`[]`</ph> is considered a zero-length string (<ph id="ph2">`""`</ph>).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, it cannot be part of a character list enclosed in brackets.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you want to check whether a position in <ph id="ph1">`string`</ph> contains one of a group of characters or no character at all, you can use <ph id="ph2">`Like`</ph> twice.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Match a String against a Pattern<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-match-a-string-against-a-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Character Ranges</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>By using a hyphen (<ph id="ph1">`â€“`</ph>) to separate the lower and upper bounds of the range, <ph id="ph2">`charlist`</ph> can specify a range of characters.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`[Aâ€“Z]`</ph> results in a match if the corresponding character position in <ph id="ph2">`string`</ph> contains any character within the range <ph id="ph3">`A`</ph>â€“<ph id="ph4">`Z`</ph>, and <ph id="ph5">`[!Hâ€“L]`</ph> results in a match if the corresponding character position contains any character outside the range <ph id="ph6">`H`</ph>â€“<ph id="ph7">`L`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When you specify a range of characters, they must appear in ascending sort order, that is, from lowest to highest.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Thus, <ph id="ph1">`[Aâ€“Z]`</ph> is a valid pattern, but <ph id="ph2">`[Zâ€“A]`</ph> is not.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Multiple Character Ranges</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To specify multiple ranges for the same character position, put them within the same brackets without delimiters.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`[Aâ€“CXâ€“Z]`</ph> results in a match if the corresponding character position in <ph id="ph2">`string`</ph> contains any character within either the range <ph id="ph3">`A`</ph>â€“<ph id="ph4">`C`</ph> or the range <ph id="ph5">`X`</ph>â€“<ph id="ph6">`Z`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Usage of the Hyphen</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A hyphen (<ph id="ph1">`â€“`</ph>) can appear either at the beginning (after an exclamation point, if any) or at the end of <ph id="ph2">`charlist`</ph> to match itself.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In any other location, the hyphen identifies a range of characters delimited by the characters on either side of the hyphen.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Collating Sequence</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The meaning of a specified range depends on the character ordering at run time, as determined by <ph id="ph1">`Option``Compare`</ph> and the locale setting of the system the code is running on.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`Option``Compare``Binary`</ph>, the range <ph id="ph2">`[Aâ€“E]`</ph> matches <ph id="ph3">`A`</ph>, <ph id="ph4">`B`</ph>, <ph id="ph5">`C`</ph>, <ph id="ph6">`D`</ph>, and <ph id="ph7">`E`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`Option``Compare``Text`</ph>, <ph id="ph2">`[Aâ€“E]`</ph> matches <ph id="ph3">`A`</ph>, <ph id="ph4">`a`</ph>, <ph id="ph5">`Ã€`</ph>, <ph id="ph6">`Ã `</ph>, <ph id="ph7">`B`</ph>, <ph id="ph8">`b`</ph>, <ph id="ph9">`C`</ph>, <ph id="ph10">`c`</ph>, <ph id="ph11">`D`</ph>, <ph id="ph12">`d`</ph>, <ph id="ph13">`E`</ph>, and <ph id="ph14">`e`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The range does not match <ph id="ph1">`ÃŠ`</ph> or <ph id="ph2">`Ãª`</ph> because accented characters collate after unaccented characters in the sort order.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Digraph Characters</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In some languages, there are alphabetic characters that represent two separate characters.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, several languages use the character <ph id="ph1">`Ã¦`</ph> to represent the characters <ph id="ph2">`a`</ph> and <ph id="ph3">`e`</ph> when they appear together.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Like`</ph> operator recognizes that the single digraph character and the two individual characters are equivalent.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When a language that uses a digraph character is specified in the system locale settings, an occurrence of the single digraph character in either <ph id="ph1">`pattern`</ph> or <ph id="ph2">`string`</ph> matches the equivalent two-character sequence in the other string.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Similarly, a digraph character in <ph id="ph1">`pattern`</ph> enclosed in brackets (by itself, in a list, or in a range) matches the equivalent two-character sequence in <ph id="ph2">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Overloading</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Like`</ph> operator can be <bpt id="p1">*</bpt>overloaded<ept id="p1">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">`Like`</ph> operator to compare strings to various patterns.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The results go into a <ph id="ph1">`Boolean`</ph> variable indicating whether each string satisfies the pattern.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#30<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/like-operator_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Comparison Operators<ept id="p1">](../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators Listed by Functionality<ept id="p1">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Compare Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operators and Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Match a String against a Pattern<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-match-a-string-against-a-pattern.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>