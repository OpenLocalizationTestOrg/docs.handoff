{"content":"---\ntitle: \"&#39;New&#39; cannot be used on a type parameter that does not have a &#39;New&#39; constraint | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"bc32046\"\n  - \"vbc32046\"\nhelpviewer_keywords: \n  - \"BC32046\"\nms.assetid: 7ec6b52d-6fd5-47a0-b4a2-163bfd3dae35\ncaps.latest.revision: 8\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# &#39;New&#39; cannot be used on a type parameter that does not have a &#39;New&#39; constraint\nA declaration statement uses a [New Operator](../../visual-basic/language-reference/operators/new-operator.md) clause specifying a type parameter as the type to be created, and the type parameter is declared without a `New` constraint.  \n  \n A *constraint* on a type parameter imposes a requirement on any type argument passed to that type parameter when the generic type is created. The `New` constraint specifies that the type argument must expose a parameterless constructor that the creating code can access. This is what allows a `New` clause in a declaration statement to create an instance of that type.  \n  \n **Error ID:** BC32046  \n  \n## To correct this error  \n  \n-   If you can require the type argument to expose an accessible parameterless constructor, add the `New` constraint to the declaration of the type parameter.  \n  \n-   If you cannot require the type argument to expose an accessible parameterless constructor, remove the `New` clause from the declaration statement. You cannot guarantee that any type argument passed to that type parameter permits creation of an instance.  \n  \n## See Also  \n [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [Type List](../../visual-basic/language-reference/statements/type-list.md)","nodes":[{"pos":[12,123],"content":"&#39;New&#39; cannot be used on a type parameter that does not have a &#39;New&#39; constraint | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"&amp;#39;New&amp;#39; cannot be used on a type parameter that does not have a &amp;#39;New&amp;#39; constraint | Microsoft Docs","pos":[0,111],"source":"&#39;New&#39; cannot be used on a type parameter that does not have a &#39;New&#39; constraint | Microsoft Docs"}]},{"pos":[639,733],"content":"&#39;New&#39; cannot be used on a type parameter that does not have a &#39;New&#39; constraint","linkify":"&#39;New&#39; cannot be used on a type parameter that does not have a &#39;New&#39; constraint","nodes":[{"content":"&amp;#39;New&amp;#39; cannot be used on a type parameter that does not have a &amp;#39;New&amp;#39; constraint","pos":[0,94],"source":"&#39;New&#39; cannot be used on a type parameter that does not have a &#39;New&#39; constraint"}]},{"pos":[734,969],"content":"A declaration statement uses a <bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/new-operator.md)</ept> clause specifying a type parameter as the type to be created, and the type parameter is declared without a <ph id=\"ph1\">`New`</ph> constraint.","source":"A declaration statement uses a [New Operator](../../visual-basic/language-reference/operators/new-operator.md) clause specifying a type parameter as the type to be created, and the type parameter is declared without a `New` constraint."},{"content":"A <bpt id=\"p1\">*</bpt>constraint<ept id=\"p1\">*</ept> on a type parameter imposes a requirement on any type argument passed to that type parameter when the generic type is created.","pos":[976,1117],"source":"A *constraint* on a type parameter imposes a requirement on any type argument passed to that type parameter when the generic type is created."},{"content":"The <ph id=\"ph1\">`New`</ph> constraint specifies that the type argument must expose a parameterless constructor that the creating code can access.","pos":[1118,1246],"source":" The `New` constraint specifies that the type argument must expose a parameterless constructor that the creating code can access."},{"content":"This is what allows a <ph id=\"ph1\">`New`</ph> clause in a declaration statement to create an instance of that type.","pos":[1247,1344],"source":" This is what allows a `New` clause in a declaration statement to create an instance of that type."},{"pos":[1351,1372],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32046","source":"**Error ID:** BC32046"},{"pos":[1381,1402],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[1412,1566],"content":"If you can require the type argument to expose an accessible parameterless constructor, add the <ph id=\"ph1\">`New`</ph> constraint to the declaration of the type parameter.","source":"If you can require the type argument to expose an accessible parameterless constructor, add the `New` constraint to the declaration of the type parameter."},{"content":"If you cannot require the type argument to expose an accessible parameterless constructor, remove the <ph id=\"ph1\">`New`</ph> clause from the declaration statement.","pos":[1576,1722],"source":"If you cannot require the type argument to expose an accessible parameterless constructor, remove the `New` clause from the declaration statement."},{"content":"You cannot guarantee that any type argument passed to that type parameter permits creation of an instance.","pos":[1723,1829]},{"pos":[1838,1846],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[1850,1966],"source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type List<ept id=\"p1\">](../../visual-basic/language-reference/statements/type-list.md)</ept>","pos":[1969,2044],"source":" [Type List](../../visual-basic/language-reference/statements/type-list.md)"}]}