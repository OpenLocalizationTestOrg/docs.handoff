{"content":"---\ntitle: \"while (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"while_CSharpKeyword\"\n  - \"while\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"while keyword [C#]\"\nms.assetid: 72a0765c-6852-4aca-b327-4a11cb7f5c59\ncaps.latest.revision: 22\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# while (C# Reference)\nThe `while` statement executes a statement or a block of statements until a specified expression evaluates to `false`.  \n  \n## Example  \n [!code-cs[csrefKeywordsIteration#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/while_1.cs)]  \n  \n## Example  \n [!code-cs[csrefKeywordsIteration#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/while_2.cs)]  \n  \n## Example  \n Because the test of the `while` expression takes place before each execution of the loop, a `while` loop executes zero or more times. This differs from the [do](../../../csharp/language-reference/keywords/do.md) loop, which executes one or more times.  \n  \n A `while` loop can be terminated when a [break](../../../csharp/language-reference/keywords/break.md), [goto](../../../csharp/language-reference/keywords/goto.md), [return](../../../csharp/language-reference/keywords/return.md), or [throw](../../../csharp/language-reference/keywords/throw.md) statement transfers control outside the loop. To pass control to the next iteration without exiting the loop, use the [continue](../../../csharp/language-reference/keywords/continue.md) statement. Notice the difference in output in the three previous examples, depending on where `int n` is incremented. In the example below no output is generated.  \n  \n [!code-cs[csrefKeywordsIteration#7](../../../csharp/language-reference/keywords/codesnippet/CSharp/while_3.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [while Statement (C++)](https://docs.microsoft.com/cpp/cpp/while-statement-cpp)   \n [Iteration Statements](../../../csharp/language-reference/keywords/iteration-statements.md)","nodes":[{"pos":[12,49],"content":"while (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"while (C# Reference) | Microsoft Docs","pos":[0,37]}]},{"pos":[571,591],"content":"while (C# Reference)","linkify":"while (C# Reference)","nodes":[{"content":"while (C# Reference)","pos":[0,20]}]},{"pos":[592,710],"content":"The <ph id=\"ph1\">`while`</ph> statement executes a statement or a block of statements until a specified expression evaluates to <ph id=\"ph2\">`false`</ph>.","source":"The `while` statement executes a statement or a block of statements until a specified expression evaluates to `false`."},{"pos":[719,726],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[730,841],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsIteration#5<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/while_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsIteration#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/while_1.cs)]"},{"pos":[850,857],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[861,972],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsIteration#6<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/while_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsIteration#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/while_2.cs)]"},{"pos":[981,988],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Because the test of the <ph id=\"ph1\">`while`</ph> expression takes place before each execution of the loop, a <ph id=\"ph2\">`while`</ph> loop executes zero or more times.","pos":[992,1125],"source":"Because the test of the `while` expression takes place before each execution of the loop, a `while` loop executes zero or more times."},{"content":"This differs from the <bpt id=\"p1\">[</bpt>do<ept id=\"p1\">](../../../csharp/language-reference/keywords/do.md)</ept> loop, which executes one or more times.","pos":[1126,1243],"source":" This differs from the [do](../../../csharp/language-reference/keywords/do.md) loop, which executes one or more times."},{"content":"A <ph id=\"ph1\">`while`</ph> loop can be terminated when a <bpt id=\"p1\">[</bpt>break<ept id=\"p1\">](../../../csharp/language-reference/keywords/break.md)</ept>, <bpt id=\"p2\">[</bpt>goto<ept id=\"p2\">](../../../csharp/language-reference/keywords/goto.md)</ept>, <bpt id=\"p3\">[</bpt>return<ept id=\"p3\">](../../../csharp/language-reference/keywords/return.md)</ept>, or <bpt id=\"p4\">[</bpt>throw<ept id=\"p4\">](../../../csharp/language-reference/keywords/throw.md)</ept> statement transfers control outside the loop.","pos":[1250,1589],"source":"A `while` loop can be terminated when a [break](../../../csharp/language-reference/keywords/break.md), [goto](../../../csharp/language-reference/keywords/goto.md), [return](../../../csharp/language-reference/keywords/return.md), or [throw](../../../csharp/language-reference/keywords/throw.md) statement transfers control outside the loop."},{"content":"To pass control to the next iteration without exiting the loop, use the <bpt id=\"p1\">[</bpt>continue<ept id=\"p1\">](../../../csharp/language-reference/keywords/continue.md)</ept> statement.","pos":[1590,1740],"source":" To pass control to the next iteration without exiting the loop, use the [continue](../../../csharp/language-reference/keywords/continue.md) statement."},{"content":"Notice the difference in output in the three previous examples, depending on where <ph id=\"ph1\">`int n`</ph> is incremented.","pos":[1741,1847],"source":" Notice the difference in output in the three previous examples, depending on where `int n` is incremented."},{"content":"In the example below no output is generated.","pos":[1848,1892]},{"pos":[1899,2010],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsIteration#7<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/while_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsIteration#7](../../../csharp/language-reference/keywords/codesnippet/CSharp/while_3.cs)]"},{"pos":[2019,2044],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2158,2166],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2170,2230],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2233,2301],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2304,2373],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>while Statement (C++)<ept id=\"p1\">](https://docs.microsoft.com/cpp/cpp/while-statement-cpp)</ept><ph id=\"ph1\"> </ph>","pos":[2376,2457],"source":" [while Statement (C++)](https://docs.microsoft.com/cpp/cpp/while-statement-cpp) "},{"content":"<bpt id=\"p1\"> [</bpt>Iteration Statements<ept id=\"p1\">](../../../csharp/language-reference/keywords/iteration-statements.md)</ept>","pos":[2460,2552],"source":" [Iteration Statements](../../../csharp/language-reference/keywords/iteration-statements.md)"}]}