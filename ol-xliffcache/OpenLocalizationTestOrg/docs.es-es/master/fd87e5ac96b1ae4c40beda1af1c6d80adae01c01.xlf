<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="mutexes.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd87e5ac96b1ae4c40beda1af1c6d80adae01c01</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\mutexes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22826a88196ccd708f47e349f85ab3087bc9dd70</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">496bd49dc98387bf97b097f0ef571450f682a0ab</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Mutexes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Mutexes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> object to provide exclusive access to a resource.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> class uses more system resources than the <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> class, but it can be marshaled across application domain boundaries, it can be used with multiple waits, and it can be used to synchronize threads in different processes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For a comparison of managed synchronization mechanisms, see <bpt id="p1">[</bpt>Overview of Synchronization Primitives<ept id="p1">](../../../docs/standard/threading/overview-of-synchronization-primitives.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For code examples, see the reference documentation for the <ph id="ph1">&lt;xref:System.Threading.Mutex.%23ctor%2A&gt;</ph> constructors.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using Mutexes</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A thread calls the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method of a mutex to request ownership.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The call blocks until the mutex is available, or until the optional timeout interval elapses.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The state of a mutex is signaled if no thread owns it.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A thread releases a mutex by calling its <ph id="ph1">&lt;xref:System.Threading.Mutex.ReleaseMutex%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Mutexes have thread affinity; that is, the mutex can be released only by the thread that owns it.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If a thread releases a mutex it does not own, an <ph id="ph1">&lt;xref:System.ApplicationException&gt;</ph> is thrown in the thread.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> class derives from <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, you can also call the static <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods of <ph id="ph5">&lt;xref:System.Threading.WaitHandle&gt;</ph> to request ownership of a <ph id="ph6">&lt;xref:System.Threading.Mutex&gt;</ph> in combination with other wait handles.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If a thread owns a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, that thread can specify the same <ph id="ph2">&lt;xref:System.Threading.Mutex&gt;</ph> in repeated wait-request calls without blocking its execution; however, it must release the <ph id="ph3">&lt;xref:System.Threading.Mutex&gt;</ph> as many times to release ownership.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Abandoned Mutexes</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If a thread terminates without releasing a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, the mutex is said to be abandoned.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This often indicates a serious programming error because the resource the mutex is protecting might be left in an inconsistent state.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the .NET Framework version 2.0, an <ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> is thrown in the next thread that acquires the mutex.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the .NET Framework versions 1.0 and 1.1, an abandoned <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> is set to the signaled state and the next waiting thread gets ownership.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If no thread is waiting, the <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> remains in a signaled state.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>No exception is thrown.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Local and System Mutexes</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Mutexes are of two types: local mutexes and named system mutexes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you create a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> object using a constructor that accepts a name, it is associated with an operating-system object of that name.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Named system mutexes are visible throughout the operating system and can be used to synchronize the activities of processes.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can create multiple <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> objects that represent the same named system mutex, and you can use the <ph id="ph2">&lt;xref:System.Threading.Mutex.OpenExisting%2A&gt;</ph> method to open an existing named system mutex.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A local mutex exists only within your process.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It can be used by any thread in your process that has a reference to the local <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> object is a separate local mutex.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Access Control Security for System Mutexes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The .NET Framework version 2.0 provides the ability to query and set Windows access control security for named system objects.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Protecting system mutexes from the moment of creation is recommended because system objects are global and therefore can be locked by code other than your own.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For information on access control security for mutexes, see the <ph id="ph1">&lt;xref:System.Security.AccessControl.MutexSecurity&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.AccessControl.MutexAccessRule&gt;</ph> classes, the <ph id="ph3">&lt;xref:System.Security.AccessControl.MutexRights&gt;</ph> enumeration, the <ph id="ph4">&lt;xref:System.Threading.Mutex.GetAccessControl%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Threading.Mutex.SetAccessControl%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Threading.Mutex.OpenExisting%2A&gt;</ph> methods of the <ph id="ph7">&lt;xref:System.Threading.Mutex&gt;</ph> class, and the <ph id="ph8">&lt;xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%2CSystem.Security.AccessControl.MutexSecurity%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading<ept id="p1">](../../../docs/standard/threading/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading Objects and Features<ept id="p1">](../../../docs/standard/threading/threading-objects-and-features.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Monitors<ept id="p1">](http://msdn.microsoft.com/library/33fe4aef-b44b-42fd-9e72-c908e39e75db)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threads and Threading<ept id="p1">](../../../docs/standard/threading/threads-and-threading.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>