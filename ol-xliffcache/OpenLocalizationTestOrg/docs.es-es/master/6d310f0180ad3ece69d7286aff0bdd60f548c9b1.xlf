<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d310f0180ad3ece69d7286aff0bdd60f548c9b1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\continue-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">759460559074d2eaaf091b1e45f81ebaf54f65fe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a853b9f6f4917f7e2ec10ebd51513ff90e7a8cf3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Continue Statement (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Continue Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Transfers control immediately to the next iteration of a loop.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can transfer from inside a <ph id="ph1">`Do`</ph>, <ph id="ph2">`For`</ph>, or <ph id="ph3">`While`</ph> loop to the next iteration of that loop.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Control passes immediately to the loop condition test, which is equivalent to transferring to the <ph id="ph1">`For`</ph> or <ph id="ph2">`While`</ph> statement, or to the <ph id="ph3">`Do`</ph> or <ph id="ph4">`Loop`</ph> statement that contains the <ph id="ph5">`Until`</ph> or <ph id="ph6">`While`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Continue`</ph> at any location in the loop that allows transfers.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The rules allowing transfer of control are the same as with the <bpt id="p1">[</bpt>GoTo Statement<ept id="p1">](../../../visual-basic/language-reference/statements/goto-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, if a loop is totally contained within a <ph id="ph1">`Try`</ph> block, a <ph id="ph2">`Catch`</ph> block, or a <ph id="ph3">`Finally`</ph> block, you can use <ph id="ph4">`Continue`</ph> to transfer out of the loop.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If, on the other hand, the <ph id="ph1">`Try`</ph>...<ph id="ph2">`End Try`</ph> structure is contained within the loop, you cannot use <ph id="ph3">`Continue`</ph> to transfer control out of the <ph id="ph4">`Finally`</ph> block, and you can use it to transfer out of a <ph id="ph5">`Try`</ph> or <ph id="ph6">`Catch`</ph> block only if you transfer completely out of the <ph id="ph7">`Try`</ph>...<ph id="ph8">`End Try`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you have nested loops of the same type, for example a <ph id="ph1">`Do`</ph> loop within another <ph id="ph2">`Do`</ph> loop, a <ph id="ph3">`Continue Do`</ph> statement skips to the next iteration of the innermost <ph id="ph4">`Do`</ph> loop that contains it.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You cannot use <ph id="ph1">`Continue`</ph> to skip to the next iteration of a containing loop of the same type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you have nested loops of different types, for example a <ph id="ph1">`Do`</ph> loop within a <ph id="ph2">`For`</ph> loop, you can skip to the next iteration of either loop by using either <ph id="ph3">`Continue Do`</ph> or <ph id="ph4">`Continue For`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Continue While`</ph> statement to skip to the next column of an array if a divisor is zero.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Continue While`</ph> is inside a <ph id="ph2">`For`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It transfers to the <ph id="ph1">`While col &lt; lastcol`</ph> statement, which is the next iteration of the innermost <ph id="ph2">`While`</ph> loop that contains the <ph id="ph3">`For`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#14<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/continue-statement_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>For...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>While...End While Statement<ept id="p1">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>