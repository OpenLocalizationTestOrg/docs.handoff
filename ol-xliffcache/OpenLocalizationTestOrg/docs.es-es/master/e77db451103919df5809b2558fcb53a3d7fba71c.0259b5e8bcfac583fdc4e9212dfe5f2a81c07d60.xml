{"content":"---\ntitle: \"<include> - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"include\"\n  - \"<include>\"\nhelpviewer_keywords: \n  - \"<include> C# XML tag\"\n  - \"include C# XML tag\"\nms.assetid: a8a70302-6196-4643-bd09-ef33f411f18f\n---\n# \\<include> (C# Programming Guide)\n## Syntax  \n  \n```xml  \n<include file='filename' path='tagpath[@name=\"id\"]' />  \n```  \n  \n## Parameters  \n `filename`  \n The name of the XML file containing the documentation. The file name can be qualified with a path relative to the source code file. Enclose `filename` in single quotation marks (' ').  \n  \n `tagpath`  \n The path of the tags in `filename` that leads to the tag `name`. Enclose the path in single quotation marks (' ').  \n  \n `name`  \n The name specifier in the tag that precedes the comments; `name` will have an `id`.  \n  \n `id`  \n The ID for the tag that precedes the comments. Enclose the ID in double quotation marks (\" \").  \n  \n## Remarks  \n The \\<include> tag lets you refer to comments in another file that describe the types and members in your source code. This is an alternative to placing documentation comments directly in your source code file. By putting the documentation in a separate file, you can apply source control to the documentation separately from the source code. One person can have the source code file checked out and someone else can have the documentation file checked out.  \n  \n The \\<include> tag uses the XML XPath syntax. Refer to XPath documentation for ways to customize your \\<include> use.  \n  \n## Example  \n This is a multifile example. The first file, which uses \\<include>, is listed below:  \n  \n [!code-csharp[csProgGuideDocComments#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideDocComments/CS/DocComments.cs#5)]  \n  \n The second file, xml_include_tag.doc, contains the following documentation comments:  \n  \n```xml  \n<MyDocs>  \n  \n<MyMembers name=\"test\">  \n<summary>  \nThe summary for this type.  \n</summary>  \n</MyMembers>  \n  \n<MyMembers name=\"test2\">  \n<summary>  \nThe summary for this other type.  \n</summary>  \n</MyMembers>  \n  \n</MyDocs>  \n```  \n  \n## Program Output  \n The following output is generated when you compile the Test and Test2 classes with the following command line: `/doc:DocFileName.xml.` In Visual Studio, you specify the XML doc comments option in the Build pane of the Project Designer. When the C# compiler sees the \\<include> tag, it will search for documentation comments in xml_include_tag.doc instead of the current source file. The compiler then generates DocFileName.xml, and this is the file that is consumed by documentation tools such as [DocFX](https://dotnet.github.io/docfx/) and [Sandcastle](https://github.com/EWSoftware/SHFB) to produce the final documentation.  \n  \n```xml  \n<?xml version=\"1.0\"?>   \n<doc>   \n    <assembly>   \n        <name>xml_include_tag</name>   \n    </assembly>   \n    <members>   \n        <member name=\"T:Test\">   \n            <summary>   \nThe summary for this type.   \n</summary>   \n        </member>   \n        <member name=\"T:Test2\">   \n            <summary>   \nThe summary for this other type.   \n</summary>   \n        </member>   \n    </members>   \n</doc>   \n```  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Recommended Tags for Documentation Comments](../../../csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)\n","nodes":[{"pos":[4,252],"embed":true,"restype":"x-metadata","content":"title: \"<include> - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"include\"\n  - \"<include>\"\nhelpviewer_keywords: \n  - \"<include> C# XML tag\"\n  - \"include C# XML tag\"\nms.assetid: a8a70302-6196-4643-bd09-ef33f411f18f","nodes":[{"content":"<include> - C# Programming Guide","nodes":[{"pos":[0,32],"content":"<include> - C# Programming Guide","nodes":[{"content":"- C# Programming Guide","pos":[10,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[259,292],"content":"\\<include> (C# Programming Guide)","linkify":"\\<include> (C# Programming Guide)","nodes":[{"content":"<ph id=\"ph1\">\\&lt;</ph>include&gt; (C# Programming Guide)","pos":[0,33],"source":"\\<include> (C# Programming Guide)"}]},{"pos":[296,302],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[386,396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The name of the XML file containing the documentation.","pos":[414,468]},{"content":"The file name can be qualified with a path relative to the source code file.","pos":[469,545]},{"content":"Enclose <ph id=\"ph1\">`filename`</ph> in single quotation marks (' ').","pos":[546,597],"source":" Enclose `filename` in single quotation marks (' ')."},{"content":"The path of the tags in <ph id=\"ph1\">`filename`</ph> that leads to the tag <ph id=\"ph2\">`name`</ph>.","pos":[617,681],"source":"The path of the tags in `filename` that leads to the tag `name`."},{"content":"Enclose the path in single quotation marks (' ').","pos":[682,731]},{"content":"The name specifier in the tag that precedes the comments; <ph id=\"ph1\">`name`</ph> will have an <ph id=\"ph2\">`id`</ph>.","pos":[748,831],"source":"The name specifier in the tag that precedes the comments; `name` will have an `id`."},{"content":"The ID for the tag that precedes the comments.","pos":[846,892]},{"content":"Enclose the ID in double quotation marks (\" \").","pos":[893,940]},{"pos":[949,956],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">\\&lt;</ph>include&gt; tag lets you refer to comments in another file that describe the types and members in your source code.","pos":[960,1078],"source":"The \\<include> tag lets you refer to comments in another file that describe the types and members in your source code."},{"content":"This is an alternative to placing documentation comments directly in your source code file.","pos":[1079,1170]},{"content":"By putting the documentation in a separate file, you can apply source control to the documentation separately from the source code.","pos":[1171,1302]},{"content":"One person can have the source code file checked out and someone else can have the documentation file checked out.","pos":[1303,1417]},{"content":"The <ph id=\"ph1\">\\&lt;</ph>include&gt; tag uses the XML XPath syntax.","pos":[1424,1469],"source":"The \\<include> tag uses the XML XPath syntax."},{"content":"Refer to XPath documentation for ways to customize your <ph id=\"ph1\">\\&lt;</ph>include&gt; use.","pos":[1470,1541],"source":" Refer to XPath documentation for ways to customize your \\<include> use."},{"pos":[1550,1557],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This is a multifile example.","pos":[1561,1589]},{"content":"The first file, which uses <ph id=\"ph1\">\\&lt;</ph>include&gt;, is listed below:","pos":[1590,1645],"source":" The first file, which uses \\<include>, is listed below:"},{"content":"The second file, xml_include_tag.doc, contains the following documentation comments:","pos":[1790,1874]},{"pos":[2130,2144],"content":"Program Output","linkify":"Program Output","nodes":[{"content":"Program Output","pos":[0,14]}]},{"content":"The following output is generated when you compile the Test and Test2 classes with the following command line: <ph id=\"ph1\">`/doc:DocFileName.xml.`</ph> In Visual Studio, you specify the XML doc comments option in the Build pane of the Project Designer.","pos":[2148,2383],"source":"The following output is generated when you compile the Test and Test2 classes with the following command line: `/doc:DocFileName.xml.` In Visual Studio, you specify the XML doc comments option in the Build pane of the Project Designer."},{"content":"When the C# compiler sees the <ph id=\"ph1\">\\&lt;</ph>include&gt; tag, it will search for documentation comments in xml_include_tag.doc instead of the current source file.","pos":[2384,2530],"source":" When the C# compiler sees the \\<include> tag, it will search for documentation comments in xml_include_tag.doc instead of the current source file."},{"content":"The compiler then generates DocFileName.xml, and this is the file that is consumed by documentation tools such as <bpt id=\"p1\">[</bpt>DocFX<ept id=\"p1\">](https://dotnet.github.io/docfx/)</ept> and <bpt id=\"p2\">[</bpt>Sandcastle<ept id=\"p2\">](https://github.com/EWSoftware/SHFB)</ept> to produce the final documentation.","pos":[2531,2774],"source":" The compiler then generates DocFileName.xml, and this is the file that is consumed by documentation tools such as [DocFX](https://dotnet.github.io/docfx/) and [Sandcastle](https://github.com/EWSoftware/SHFB) to produce the final documentation."},{"pos":[3212,3220],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3224,3290],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[3293,3427],"content":"<bpt id=\"p1\">[</bpt>Recommended Tags for Documentation Comments<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)</ept>","source":"[Recommended Tags for Documentation Comments](../../../csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)"}]}