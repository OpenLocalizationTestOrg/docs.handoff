<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="retrieving-identity-or-autonumber-values.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4f596889a6f52b97fcc27207fec67fb42f8734f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\retrieving-identity-or-autonumber-values.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2a37102c79eb62b7ab6aab95c4a0061de14a3ef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">488f55ebdbe574b5a7cb4ac04980ede834dcb4d4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Retrieving Identity or Autonumber Values | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Retrieving Identity or Autonumber Values</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A primary key in a relational database is a column or combination of columns that always contain unique values.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Knowing the primary key value allows you to locate the row that contains it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Relational database engines, such as SQL Server, Oracle, and Microsoft Access/Jet support the creation of automatically incrementing columns that can be designated as primary keys.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These values are generated by the server as rows are added to a table.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In SQL Server, you set the identity property of a column, in Oracle you create a Sequence, and in Microsoft Access you create an AutoNumber column.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> can also be used to generate automatically incrementing values by setting the <ph id="ph2">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> property to true.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, you might end up with duplicate values in separate instances of a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, if multiple client applications are independently generating automatically incrementing values.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Having the server generate automatically incrementing values eliminates potential conflicts by allowing each user to retrieve the generated value for each inserted row.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>During a call to the <ph id="ph1">`Update`</ph> method of a <ph id="ph2">`DataAdapter`</ph>, the database can send data back to your ADO.NET application as output parameters or as the first returned record of the result set of a SELECT statement executed in the same batch as the INSERT statement.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>ADO.NET can retrieve these values and update the corresponding columns in the <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> being updated.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Some database engines, such as the Microsoft Access Jet database engine, do not support output parameters and cannot process multiple statements in a single batch.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When working with the Jet database engine, you can retrieve the new AutoNumber value generated for an inserted row by executing a separate SELECT command in an event handler for the <ph id="ph1">`RowUpdated`</ph> event of the <ph id="ph2">`DataAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An alternative to using an auto incrementing value is to use the <ph id="ph1">&lt;xref:System.Guid.NewGuid%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Guid&gt;</ph> object to generate a GUID, or globally unique identifier, on the client computer that can be copied to the server as each new row is inserted.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NewGuid`</ph> method generates a 16-byte binary value that is created using an algorithm that provides a high probability that no value will be duplicated.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In a SQL Server database, a GUID is stored in a <ph id="ph1">`uniqueidentifier`</ph> column which SQL Server can automatically generate using the Transact-SQL <ph id="ph2">`NEWID()`</ph> function.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Using a GUID as a primary key can adversely affect performance.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> provides support for the <ph id="ph2">`NEWSEQUENTIALID()`</ph> function, which generates a sequential GUID that is not guaranteed to be globally unique but that can be indexed more efficiently.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Retrieving SQL Server Identity Column Values</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When working with Microsoft SQL Server, you can create a stored procedure with an output parameter to return the identity value for an inserted row.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following table describes the three Transact-SQL functions in SQL Server that can be used to retrieve identity column values.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>SCOPE_IDENTITY</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns the last identity value within the current execution scope.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>SCOPE_IDENTITY is recommended for most scenarios.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>@<ph id="ph1">@IDENTITY</ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Contains the last identity value generated in any table in the current session.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>@<ph id="ph1">@IDENTITY</ph> can be affected by triggers and may not return the identity value that you expect.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>IDENT_CURRENT</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Returns the last identity value generated for a specific table in any session and any scope.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following stored procedure demonstrates how to insert a row into the <bpt id="p1">**</bpt>Categories<ept id="p1">**</ept> table and use an output parameter to return the new identity value generated by the Transact-SQL SCOPE_IDENTITY() function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The stored procedure can then be specified as the source of the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCommand.CommandType%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A&gt;</ph> must be set to <ph id="ph3">&lt;xref:System.Data.CommandType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The identity output is retrieved by creating a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> that has a <ph id="ph2">&lt;xref:System.Data.ParameterDirection&gt;</ph> of <ph id="ph3">&lt;xref:System.Data.ParameterDirection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`InsertCommand`</ph> is processed, the auto-incremented identity value is returned and placed in the <bpt id="p1">**</bpt>CategoryID<ept id="p1">**</ept> column of the current row if you set the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlCommand.UpdatedRowSource%2A&gt;</ph> property of the insert command to <ph id="ph3">`UpdateRowSource.OutputParameters`</ph> or to <ph id="ph4">`UpdateRowSource.Both`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If your insert command executes a batch that includes both an INSERT statement and a SELECT statement that returns the new identity value, then you can retrieve the new value by setting the <ph id="ph1">`UpdatedRowSource`</ph> property of the insert command to <ph id="ph2">`UpdateRowSource.FirstReturnedRecord`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Merging New Identity Values</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A common scenario is to call the <ph id="ph1">`GetChanges`</ph> method of a <ph id="ph2">`DataTable`</ph> to create a copy that contains only changed rows, and to use the new copy when calling the <ph id="ph3">`Update`</ph> method of a <ph id="ph4">`DataAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is especially useful when you need to marshal the changed rows to a separate component that performs the update.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Following the update, the copy can contain new identity values that must then be merged back into the original <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The new identity values are likely to be different from the original values in the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To accomplish the merge, the original values of the <bpt id="p1">**</bpt>AutoIncrement<ept id="p1">**</ept> columns in the copy must be preserved, in order to be able to locate and update existing rows in the original <ph id="ph1">`DataTable`</ph>, rather than appending new rows containing the new identity values.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>However, by default those original values are lost after a call to the <ph id="ph1">`Update`</ph> method of a <ph id="ph2">`DataAdapter`</ph>, because <ph id="ph3">`AcceptChanges`</ph> is implicitly called for each updated <ph id="ph4">`DataRow`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>There are two ways to preserve the original values of a <ph id="ph1">`DataColumn`</ph> in a <ph id="ph2">`DataRow`</ph> during a <ph id="ph3">`DataAdapter`</ph> update:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The first method of preserving the original values is to set the <ph id="ph1">`AcceptChangesDuringUpdate`</ph> property of the <ph id="ph2">`DataAdapter`</ph> to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This affects every <ph id="ph1">`DataRow`</ph> in the <ph id="ph2">`DataTable`</ph> being updated.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information and a code example, see <ph id="ph1">&lt;xref:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The second method is to write code in the <ph id="ph1">`RowUpdated`</ph> event handler of the <ph id="ph2">`DataAdapter`</ph> to set the <ph id="ph3">&lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt;</ph> to <ph id="ph4">&lt;xref:System.Data.UpdateStatus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataRow`</ph> is updated but the original value of each <ph id="ph2">`DataColumn`</ph> is preserved.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This method enables you to preserve the original values for some rows and not for others.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, your code can preserve the original values for added rows and not for edited or deleted rows by first checking the <ph id="ph1">&lt;xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A&gt;</ph> and then setting <ph id="ph2">&lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Data.UpdateStatus&gt;</ph> only for rows with a <ph id="ph4">`StatementType`</ph> of <ph id="ph5">`Insert`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When either of these methods is used to preserve original values in a <ph id="ph1">`DataRow`</ph> during a <ph id="ph2">`DataAdapter`</ph> update, ADO.NET performs a series of actions to set the current values of the <ph id="ph3">`DataRow`</ph> to new values returned by output parameters or by the first returned row of a result set, while still preserving the original value in each <ph id="ph4">`DataColumn`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>First, the <ph id="ph1">`AcceptChanges`</ph> method of the <ph id="ph2">`DataRow`</ph> is called to preserve the current values as original values, and then the new values are assigned.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Following these actions, <ph id="ph1">`DataRows`</ph> that had their <ph id="ph2">&lt;xref:System.Data.DataRow.RowState%2A&gt;</ph> property set to <ph id="ph3">&lt;xref:System.Data.DataRowState&gt;</ph> will have their <ph id="ph4">`RowState`</ph> property set to <ph id="ph5">&lt;xref:System.Data.DataRowState&gt;</ph>, which may be unexpected.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>How the command results are applied to each <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> being updated is determined by the <ph id="ph2">&lt;xref:System.Data.Common.DbCommand.UpdatedRowSource%2A&gt;</ph> property of each <ph id="ph3">&lt;xref:System.Data.Common.DbCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This property is set to a value from the <ph id="ph1">`UpdateRowSource`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following table describes how the <ph id="ph1">`UpdateRowSource`</ph> enumeration values affect the <ph id="ph2">&lt;xref:System.Data.DataRow.RowState%2A&gt;</ph> property of updated rows.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Member name</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AcceptChanges`</ph> is called and both output parameter values and/or the values in the first row of any returned result set are placed in the <ph id="ph2">`DataRow`</ph> being updated.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If there are no values to apply, the <ph id="ph1">`RowState`</ph> will be <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If a row was returned, <ph id="ph1">`AcceptChanges`</ph> is called and the row is mapped to the changed row in the <ph id="ph2">`DataTable`</ph>, setting the <ph id="ph3">`RowState`</ph> to <ph id="ph4">`Modified`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If no row is returned, then <ph id="ph1">`AcceptChanges`</ph> is not called and the <ph id="ph2">`RowState`</ph> remains <ph id="ph3">`Added`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Any returned parameters or rows are ignored.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>There is no call to <ph id="ph1">`AcceptChanges`</ph> and the <ph id="ph2">`RowState`</ph> remains <ph id="ph3">`Added`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AcceptChanges`</ph> is called and any output parameters are mapped to the changed row in the <ph id="ph2">`DataTable`</ph>, setting the <ph id="ph3">`RowState`</ph> to <ph id="ph4">`Modified`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If there are no output parameters, the <ph id="ph1">`RowState`</ph> will be <ph id="ph2">`Unchanged`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This example demonstrates extracting changed rows from a <ph id="ph1">`DataTable`</ph> and using a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> to update the data source and retrieve a new identity column value.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A&gt;</ph> executes two Transact-SQL statements; the first one is the INSERT statement, and the second one is a SELECT statement that uses the SCOPE_IDENTITY function to retrieve the identity value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UpdatedRowSource`</ph> property of the insert command is set to <ph id="ph2">`UpdateRowSource.FirstReturnedRow`</ph> and the <ph id="ph3">&lt;xref:System.Data.MissingSchemaAction&gt;</ph> property of the <ph id="ph4">`DataAdapter`</ph> is set to <ph id="ph5">`MissingSchemaAction.AddWithKey`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataTable`</ph> is filled and the code adds a new row to the <ph id="ph2">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The changed rows are then extracted into a new <ph id="ph1">`DataTable`</ph>, which is passed to the <ph id="ph2">`DataAdapter`</ph>, which then updates the server.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OnRowUpdated`</ph> event handler checks the <ph id="ph2">&lt;xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A&gt;</ph> of the <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlRowUpdatedEventArgs&gt;</ph> to determine if the row is an insert.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If it is, then the <ph id="ph1">&lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Data.UpdateStatus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The row is updated, but the original values in the row are preserved.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In the main body of the procedure, the <ph id="ph1">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is called to merge the new identity value into the original <ph id="ph2">`DataTable`</ph>, and finally <ph id="ph3">`AcceptChanges`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Retrieving Microsoft Access Autonumber Values</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This section includes a sample that shows how to retrieve <ph id="ph1">`Autonumber`</ph> values from a Jet 4.0 database.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The Jet database engine does not support the execution of multiple statements in a batch or the use of output parameters, so it is not possible to use either of these techniques to return the new <ph id="ph1">`Autonumber`</ph> value assigned to an inserted row.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>However, you can add code to the <ph id="ph1">`RowUpdated`</ph> event handler that executes a separate SELECT @<ph id="ph2">@IDENTITY</ph> statement to retrieve the new <ph id="ph3">`Autonumber`</ph> value.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Instead of adding schema information using <ph id="ph1">`MissingSchemaAction.AddWithKey`</ph>, this example configures a <ph id="ph2">`DataTable`</ph> with the correct schema prior to calling the <ph id="ph3">&lt;xref:System.Data.OleDb.OleDbDataAdapter&gt;</ph> to fill the <ph id="ph4">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In this case, the <bpt id="p1">**</bpt>CategoryID<ept id="p1">**</ept> column is configured to decrement the value assigned each inserted row starting from zero, by setting <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> to <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrementSeed%2A&gt;</ph> to 0, and <ph id="ph4">&lt;xref:System.Data.DataColumn.AutoIncrementStep%2A&gt;</ph> to -1.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The code then adds two new rows and uses <ph id="ph1">`GetChanges`</ph> to add the changed rows to a new <ph id="ph2">`DataTable`</ph> that is passed to the <ph id="ph3">`Update`</ph> method.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RowUpdated`</ph> event handler uses the same open <ph id="ph2">&lt;xref:System.Data.OleDb.OleDbConnection&gt;</ph> as the <ph id="ph3">`Update`</ph> statement of the <ph id="ph4">`OleDbDataAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>It checks the <ph id="ph1">`StatementType`</ph> of the <ph id="ph2">&lt;xref:System.Data.OleDb.OleDbRowUpdatedEventArgs&gt;</ph> for inserted rows.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For each inserted row a new <ph id="ph1">&lt;xref:System.Data.OleDb.OleDbCommand&gt;</ph> is created to execute the SELECT @<ph id="ph2">@IDENTITY</ph> statement on the connection, returning the new <ph id="ph3">`Autonumber`</ph> value, which is placed in the <bpt id="p1">**</bpt>CategoryID<ept id="p1">**</ept> column of the <ph id="ph4">`DataRow`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Status`</ph> property is then set to <ph id="ph2">`UpdateStatus.SkipCurrentRow`</ph> to suppress the hidden call to <ph id="ph3">`AcceptChanges`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In the main body of the procedure, the <ph id="ph1">`Merge`</ph> method is called to merge the two <ph id="ph2">`DataTable`</ph> objects, and finally <ph id="ph3">`AcceptChanges`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Retrieving Identity Values</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>We often set the column as identity when the values in the column must be unique.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>And sometimes we need the identity value of new data.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to retrieve identity values:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Creates a stored procedure to insert data and return an identity value.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Executes a command to insert the new data and display the result.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Uses <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> to insert new data and display the result.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Before you compile and run the sample, you must create the sample database, using the following script:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The code listing follows:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The code listing refers to an Access database file called MySchool.mdb.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can download MySchool.mdb (as part of the full C# or Visual Basic sample project) from either the <bpt id="p1">[</bpt>Visual Studio 2012 sample<ept id="p1">](http://code.msdn.microsoft.com/How-to-retrieve-the-95b4ee43)</ept> or the <bpt id="p2">[</bpt>Visual Studio 2013 sample<ept id="p2">](http://code.msdn.microsoft.com/How-to-Retrieve-the-511acece)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving and Modifying Data in ADO.NET<ept id="p1">](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataAdapters and DataReaders<ept id="p1">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AcceptChanges and RejectChanges<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/acceptchanges-and-rejectchanges.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Merging DataSet Contents<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/merging-dataset-contents.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Updating Data Sources with DataAdapters<ept id="p1">](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>