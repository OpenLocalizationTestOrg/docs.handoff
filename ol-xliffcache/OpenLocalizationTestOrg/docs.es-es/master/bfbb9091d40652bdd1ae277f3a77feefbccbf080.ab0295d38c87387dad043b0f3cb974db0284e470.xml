{"content":"---\ntitle: \"Developing a Composite Windows Forms Control\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords:\n  - \"custom controls [Windows Forms], composite controls\"\n  - \"composite controls [Windows Forms]\"\n  - \"composite controls [Windows Forms], Windows Forms\"\n  - \"controls [Windows Forms], composite\"\nms.assetid: d086f2a3-baa3-4e09-b40c-a5bb3cfc51a6\n---\n# Developing a Composite Windows Forms Control\nYou can develop a composite Windows Forms control by combining other Windows Forms controls. Composite controls that derive from <xref:System.Web.UI.UserControl> are called user controls. The base class, <xref:System.Windows.Forms.UserControl>, provides keyboard routing for the child controls, thus ensuring that child controls can receive focus. For an example of a user control, see the <xref:System.Windows.Forms.UserControl> sample in [How to: Apply Attributes in Windows Forms Controls](how-to-apply-attributes-in-windows-forms-controls.md).  \n  \n The Windows Forms designer in Visual Studio provides rich design-time support for authoring user controls.  \n  \n-   [How to: Display a Control in the Choose Toolbox Items Dialog Box](how-to-display-a-control-in-the-choose-toolbox-items-dialog-box.md)  \n  \n-   [Walkthrough: Serializing Collections of Standard Types with the DesignerSerializationVisibilityAttribute](serializing-collections-designerserializationvisibilityattribute.md)  \n  \n-   [Walkthrough: Inheriting from a Windows Forms Control with Visual C#](walkthrough-inheriting-from-a-windows-forms-control-with-visual-csharp.md)  \n  \n-   [How to: Provide a Toolbox Bitmap for a Control](how-to-provide-a-toolbox-bitmap-for-a-control.md)  \n  \n-   [How to: Inherit from Existing Windows Forms Controls](how-to-inherit-from-existing-windows-forms-controls.md)  \n  \n-   [Walkthrough: Debugging Custom Windows Forms Controls at Design Time](walkthrough-debugging-custom-windows-forms-controls-at-design-time.md)  \n  \n-   [How to: Inherit from the Control Class](how-to-inherit-from-the-control-class.md)  \n  \n-   [How to: Test the Run-Time Behavior of a UserControl](how-to-test-the-run-time-behavior-of-a-usercontrol.md)  \n  \n-   [How to: Align a Control to the Edges of Forms at Design Time](how-to-align-a-control-to-the-edges-of-forms-at-design-time.md)  \n  \n-   [How to: Inherit from the UserControl Class](how-to-inherit-from-the-usercontrol-class.md)  \n  \n-   [How to: Author Controls for Windows Forms](how-to-author-controls-for-windows-forms.md)  \n  \n-   [How to: Author Composite Controls](how-to-author-composite-controls.md)  \n  \n-   [Walkthrough: Authoring a Composite Control with Visual Basic](walkthrough-authoring-a-composite-control-with-visual-basic.md)  \n  \n-   [Walkthrough: Authoring a Composite Control with Visual C#](walkthrough-authoring-a-composite-control-with-visual-csharp.md)  \n  \n-   [Walkthrough: Inheriting from a Windows Forms Control with Visual Basic](walkthrough-inheriting-from-a-windows-forms-control-with-visual-basic.md)  \n  \n-   [Walkthrough: Creating a Windows Forms Control That Takes Advantage of Visual Studio Design-Time Features](creating-a-wf-control-design-time-features.md)  \n  \n-   [How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/307hck25(v=vs.120))  \n  \n## See also\n\n- [How to: Apply Attributes in Windows Forms Controls](how-to-apply-attributes-in-windows-forms-controls.md)\n- [Developing Custom Windows Forms Controls with the .NET Framework](developing-custom-windows-forms-controls.md)\n- [Varieties of Custom Controls](varieties-of-custom-controls.md)\n","nodes":[{"pos":[4,346],"embed":true,"restype":"x-metadata","content":"title: \"Developing a Composite Windows Forms Control\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords:\n  - \"custom controls [Windows Forms], composite controls\"\n  - \"composite controls [Windows Forms]\"\n  - \"composite controls [Windows Forms], Windows Forms\"\n  - \"controls [Windows Forms], composite\"\nms.assetid: d086f2a3-baa3-4e09-b40c-a5bb3cfc51a6","nodes":[{"content":"Developing a Composite Windows Forms Control","nodes":[{"pos":[0,44],"content":"Developing a Composite Windows Forms Control","nodes":[{"content":"Developing a Composite Windows Forms Control","pos":[0,44]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[353,397],"content":"Developing a Composite Windows Forms Control","linkify":"Developing a Composite Windows Forms Control","nodes":[{"content":"Developing a Composite Windows Forms Control","pos":[0,44]}]},{"content":"You can develop a composite Windows Forms control by combining other Windows Forms controls.","pos":[398,490]},{"content":"Composite controls that derive from <ph id=\"ph1\">&lt;xref:System.Web.UI.UserControl&gt;</ph> are called user controls.","pos":[491,585],"source":" Composite controls that derive from <xref:System.Web.UI.UserControl> are called user controls."},{"content":"The base class, <ph id=\"ph1\">&lt;xref:System.Windows.Forms.UserControl&gt;</ph>, provides keyboard routing for the child controls, thus ensuring that child controls can receive focus.","pos":[586,745],"source":" The base class, <xref:System.Windows.Forms.UserControl>, provides keyboard routing for the child controls, thus ensuring that child controls can receive focus."},{"content":"For an example of a user control, see the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> sample in <bpt id=\"p1\">[</bpt>How to: Apply Attributes in Windows Forms Controls<ept id=\"p1\">](how-to-apply-attributes-in-windows-forms-controls.md)</ept>.","pos":[746,945],"source":" For an example of a user control, see the <xref:System.Windows.Forms.UserControl> sample in [How to: Apply Attributes in Windows Forms Controls](how-to-apply-attributes-in-windows-forms-controls.md)."},{"content":"The Windows Forms designer in Visual Studio provides rich design-time support for authoring user controls.","pos":[952,1058]},{"pos":[1068,1202],"content":"<bpt id=\"p1\">[</bpt>How to: Display a Control in the Choose Toolbox Items Dialog Box<ept id=\"p1\">](how-to-display-a-control-in-the-choose-toolbox-items-dialog-box.md)</ept>","source":"[How to: Display a Control in the Choose Toolbox Items Dialog Box](how-to-display-a-control-in-the-choose-toolbox-items-dialog-box.md)"},{"pos":[1212,1387],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Serializing Collections of Standard Types with the DesignerSerializationVisibilityAttribute<ept id=\"p1\">](serializing-collections-designerserializationvisibilityattribute.md)</ept>","source":"[Walkthrough: Serializing Collections of Standard Types with the DesignerSerializationVisibilityAttribute](serializing-collections-designerserializationvisibilityattribute.md)"},{"pos":[1397,1541],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual C#<ept id=\"p1\">](walkthrough-inheriting-from-a-windows-forms-control-with-visual-csharp.md)</ept>","source":"[Walkthrough: Inheriting from a Windows Forms Control with Visual C#](walkthrough-inheriting-from-a-windows-forms-control-with-visual-csharp.md)"},{"pos":[1551,1649],"content":"<bpt id=\"p1\">[</bpt>How to: Provide a Toolbox Bitmap for a Control<ept id=\"p1\">](how-to-provide-a-toolbox-bitmap-for-a-control.md)</ept>","source":"[How to: Provide a Toolbox Bitmap for a Control](how-to-provide-a-toolbox-bitmap-for-a-control.md)"},{"pos":[1659,1769],"content":"<bpt id=\"p1\">[</bpt>How to: Inherit from Existing Windows Forms Controls<ept id=\"p1\">](how-to-inherit-from-existing-windows-forms-controls.md)</ept>","source":"[How to: Inherit from Existing Windows Forms Controls](how-to-inherit-from-existing-windows-forms-controls.md)"},{"pos":[1779,1919],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Debugging Custom Windows Forms Controls at Design Time<ept id=\"p1\">](walkthrough-debugging-custom-windows-forms-controls-at-design-time.md)</ept>","source":"[Walkthrough: Debugging Custom Windows Forms Controls at Design Time](walkthrough-debugging-custom-windows-forms-controls-at-design-time.md)"},{"pos":[1929,2011],"content":"<bpt id=\"p1\">[</bpt>How to: Inherit from the Control Class<ept id=\"p1\">](how-to-inherit-from-the-control-class.md)</ept>","source":"[How to: Inherit from the Control Class](how-to-inherit-from-the-control-class.md)"},{"pos":[2021,2129],"content":"<bpt id=\"p1\">[</bpt>How to: Test the Run-Time Behavior of a UserControl<ept id=\"p1\">](how-to-test-the-run-time-behavior-of-a-usercontrol.md)</ept>","source":"[How to: Test the Run-Time Behavior of a UserControl](how-to-test-the-run-time-behavior-of-a-usercontrol.md)"},{"pos":[2139,2265],"content":"<bpt id=\"p1\">[</bpt>How to: Align a Control to the Edges of Forms at Design Time<ept id=\"p1\">](how-to-align-a-control-to-the-edges-of-forms-at-design-time.md)</ept>","source":"[How to: Align a Control to the Edges of Forms at Design Time](how-to-align-a-control-to-the-edges-of-forms-at-design-time.md)"},{"pos":[2275,2365],"content":"<bpt id=\"p1\">[</bpt>How to: Inherit from the UserControl Class<ept id=\"p1\">](how-to-inherit-from-the-usercontrol-class.md)</ept>","source":"[How to: Inherit from the UserControl Class](how-to-inherit-from-the-usercontrol-class.md)"},{"pos":[2375,2463],"content":"<bpt id=\"p1\">[</bpt>How to: Author Controls for Windows Forms<ept id=\"p1\">](how-to-author-controls-for-windows-forms.md)</ept>","source":"[How to: Author Controls for Windows Forms](how-to-author-controls-for-windows-forms.md)"},{"pos":[2473,2545],"content":"<bpt id=\"p1\">[</bpt>How to: Author Composite Controls<ept id=\"p1\">](how-to-author-composite-controls.md)</ept>","source":"[How to: Author Composite Controls](how-to-author-composite-controls.md)"},{"pos":[2555,2681],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Authoring a Composite Control with Visual Basic<ept id=\"p1\">](walkthrough-authoring-a-composite-control-with-visual-basic.md)</ept>","source":"[Walkthrough: Authoring a Composite Control with Visual Basic](walkthrough-authoring-a-composite-control-with-visual-basic.md)"},{"pos":[2691,2815],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Authoring a Composite Control with Visual C#<ept id=\"p1\">](walkthrough-authoring-a-composite-control-with-visual-csharp.md)</ept>","source":"[Walkthrough: Authoring a Composite Control with Visual C#](walkthrough-authoring-a-composite-control-with-visual-csharp.md)"},{"pos":[2825,2971],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual Basic<ept id=\"p1\">](walkthrough-inheriting-from-a-windows-forms-control-with-visual-basic.md)</ept>","source":"[Walkthrough: Inheriting from a Windows Forms Control with Visual Basic](walkthrough-inheriting-from-a-windows-forms-control-with-visual-basic.md)"},{"pos":[2981,3134],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Creating a Windows Forms Control That Takes Advantage of Visual Studio Design-Time Features<ept id=\"p1\">](creating-a-wf-control-design-time-features.md)</ept>","source":"[Walkthrough: Creating a Windows Forms Control That Takes Advantage of Visual Studio Design-Time Features](creating-a-wf-control-design-time-features.md)"},{"pos":[3144,3326],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/307hck25(v=vs.120))</ept>","source":"[How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/307hck25(v=vs.120))"},{"pos":[3335,3343],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3347,3453],"content":"<bpt id=\"p1\">[</bpt>How to: Apply Attributes in Windows Forms Controls<ept id=\"p1\">](how-to-apply-attributes-in-windows-forms-controls.md)</ept>","source":"[How to: Apply Attributes in Windows Forms Controls](how-to-apply-attributes-in-windows-forms-controls.md)"},{"pos":[3456,3567],"content":"<bpt id=\"p1\">[</bpt>Developing Custom Windows Forms Controls with the .NET Framework<ept id=\"p1\">](developing-custom-windows-forms-controls.md)</ept>","source":"[Developing Custom Windows Forms Controls with the .NET Framework](developing-custom-windows-forms-controls.md)"},{"pos":[3570,3633],"content":"<bpt id=\"p1\">[</bpt>Varieties of Custom Controls<ept id=\"p1\">](varieties-of-custom-controls.md)</ept>","source":"[Varieties of Custom Controls](varieties-of-custom-controls.md)"}]}