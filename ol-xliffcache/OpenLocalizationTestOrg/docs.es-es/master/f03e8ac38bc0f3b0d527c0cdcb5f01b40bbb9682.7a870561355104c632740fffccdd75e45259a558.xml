{"content":"---\ntitle: Attributes | C#\ndescription: Learn how attributes work in C#.\nkeywords: .NET, .NET Core, C#, attributes\nauthor: mgroves\nms.author: wiwagn\nms.date: 03/06/2017\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: b152cf36-76e4-43a5-b805-1a1952e53b79\n---\n\n# Using Attributes in C# #\n\nAttributes provide a way of associating information with code in a declarative way. They can also provide a reusable element that can be applied to a variety of targets.\n\nConsider the `[Obsolete]` attribute. It can be applied to classes, structs, methods, constructors, and more. It _declares_ that the element is obsolete. It's then up to the C#\ncompiler to look for this attribute, and do some action in response.\n\nIn this tutorial, you'll be introduced to how to add attributes to your code, how to create and use your own attributes, and how to use some\nattributes that are built into .NET Core.\n\n## Prerequisites\nYou’ll need to setup your machine to run .NET core. You can find the\ninstallation instructions on the [.NET Core](https://www.microsoft.com/net/core)\npage.\nYou can run this application on Windows, Ubuntu Linux, macOS or in a Docker container. \nYou’ll need to install your favorite code editor. The descriptions below\nuse [Visual Studio Code](https://code.visualstudio.com/) which is an open\nsource, cross platform editor. However, you can use whatever tools you are\ncomfortable with.\n\n## Create the Application\n\nNow that you've installed all the tools, create a new .NET Core application. To use the command line generator, execute the following command in your favorite shell:\n\n`dotnet new console`\n\nThis command will create barebones .NET core project files. You will need to execute `dotnet restore` to restore the dependencies needed to compile this project.\n\nTo execute the program, use `dotnet run`. You should see \"Hello, World\" output to the console.\n\n## How to add attributes to code\n\nIn C#, attributes are classes that inherit from the `Attribute` base class. Any class that inherits from `Attribute` can be used as a sort of \"tag\" on other pieces of code.\nFor instance, there is an attribute called `ObsoleteAttribute`. This is used to signal that code is obsolete and shouldn't be used anymore. You can place this attribute on a class,\nfor instance, by using square brackets.\n\n[!code-csharp[Obsolete attribute example](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#ObsoleteExample1)]  \n\nNote that while the class is called `ObsoleteAttribute`, it's only necessary to use `[Obsolete]` in the code. This is a convention that C# follows.\nYou can use the full name `[ObsoleteAttribute]` if you choose.\n\nWhen marking a class obsolete, it's a good idea to provide some information as to *why* it's obsolete, and/or *what* to use instead. Do this by passing a string\nparameter to the Obsolete attribute.\n\n[!code-csharp[Obsolete attribute example with parameters](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#ObsoleteExample2)]\n\nThe string is being passed as an argument to an `ObsoleteAttribute` constructor, just as if you were writing `var attr = new ObsoleteAttribute(\"some string\")`.\n\nParameters to an attribute constructor are limited to simple types/literals: `bool, int, double, string, Type, enums, etc` and arrays of those types.\nYou can not use an expression or a variable. You are free to use positional or named parameters.\n\n## How to create your own attribute\n\nCreating an attribute is as simple as inheriting from the `Attribute` base class.\n\n[!code-csharp[Create your own attribute](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#CreateAttributeExample1)]\n\nWith the above, I can now use `[MySpecial]` (or `[MySpecialAttribute]`) as an attribute elsewhere in the code base.\n\n[!code-csharp[Using your own attribute](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#CreateAttributeExample2)]\n\nAttributes in the .NET base class library like `ObsoleteAttribute` trigger certain behaviors within the compiler. However, any attribute you create acts\nonly as metadata, and doesn't result in any code within the attribute class being executed. It's up to you to act\non that metadata elsewhere in your code (more on that later in the tutorial).\n\nThere is a 'gotcha' here to watch out for. As mentioned above, only certain types are allowed to be passed as arguments when using attributes. However, when creating an attribute type,\nthe C# compiler won't stop you from creating those parameters. In the below example, I've created an attribute with a constructor that compiles just fine.\n\n[!code-csharp[Valid constructor used in an attribute](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#AttributeGothca1)]\n\nHowever, you will be unable to use this constructor with attribute syntax.\n\n[!code-csharp[Invalid attempt to use the attribute constructor](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#AttributeGotcha2)]\n\nThe above will cause a compiler error like `Attribute constructor parameter 'myClass' has type 'Foo', which is not a valid attribute parameter type`\n\n## How to restrict attribute usage\n\nAttributes can be used on a number of \"targets\". The above examples show them on classes, but they can also be used on:\n\n* Assembly\n* Class\n* Constructor\n* Delegate\n* Enum\n* Event\n* Field\n* GenericParameter\n* Interface\n* Method\n* Module\n* Parameter\n* Property\n* ReturnValue\n* Struct\n\nWhen you create an attribute class, by default, C# will allow you to use that attribute on any of the possible attribute targets. If you want to restrict your attribute\nto certain targets, you can do so by using the `AttributeUsageAttribute` on your attribute class. That's right, an attribute on an attribute!\n\n[!code-csharp[Using your own attribute](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#AttributeUsageExample1)]\n\nIf you attempt to put the above attribute on something that's not a class or a struct, you will get a compiler error\nlike `Attribute 'MyAttributeForClassAndStructOnly' is not valid on this declaration type. It is only valid on 'class, struct' declarations`\n\n[!code-csharp[Using your own attribute](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#AttributeUsageExample2)]\n\n## How to use attributes attached to a code element\n\nAttributes act as metadata. Without some outward force, they won't actually do anything.\n\nTo find and act on attributes, [Reflection](../programming-guide/concepts/reflection.md) is generally needed. I won't cover Reflection in-depth in this tutorial, but the basic\nidea is that Reflection allows you to write code in C# that examines other code.\n\nFor instance, you can use Reflection to get information about a class: \n\n[!code-csharp[Getting type information with Reflection](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#ReflectionExample1)]\n\nThat will print out something like: `The assembly qualified name of MyClass is ConsoleApplication.MyClass, attributes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`\n\nOnce you have a `TypeInfo` object (or a `MemberInfo`, `FieldInfo`, etc), you can use the `GetCustomAttributes` method. This will return a collection of `Attribute` objects.\nYou can also use `GetCustomAttribute` and specify an Attribute type.\n\nHere's an example of using `GetCustomAttributes` on a `MemberInfo` instance for `MyClass` (which we saw earlier has an `[Obsolete]` attribute on it).\n\n[!code-csharp[Getting type information with Reflection](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#ReflectionExample2)]\n\nThat will print to console: `Attribute on MyClass: ObsoleteAttribute`. Try adding other attributes to `MyClass`.\n\nIt's important to note that these `Attribute` objects are instantiated lazily. That is, they won't be instantiated until you use `GetCustomAttribute` or `GetCustomAttributes`.\nThey are also instantiated each time. Calling `GetCustomAttributes` twice in a row will return two different instances of `ObsoleteAttribute`.\n\n## Common attributes in the base class library (BCL)\n\nAttributes are used by many tools and frameworks. NUnit uses attributes like `[Test]` and `[TestFixture]` that are used by the NUnit test runner. ASP.NET MVC uses attributes like `[Authorize]`\nand provides an action filter framework to perform cross-cutting concerns on MVC actions. [PostSharp](https://www.postsharp.net) uses the attribute syntax to allow aspect-oriented programming in C#.\n\nHere are a few notable attributes built into the .NET Core base class libraries:\n\n* `[Obsolete]`. This one was used in the above examples, and it lives in the `System` namespace. It is useful to provide declarative documentation about a changing code base. A message can be provided in the form of a string,\nand another boolean parameter can be used to escalate from a compiler warning to a compiler error.\n\n* `[Conditional]`. This attribute is in the `System.Diagnostics` namespace. This attribute can be applied to methods (or attribute classes). You must pass a string to the constructor.\nIf that string matches a `#define` directive, then any calls to that method (but not the method itself) will be removed by the C# compiler. Typically this is used for debugging (diagnostics) purposes.\n\n* `[CallerMemberName]`. This attribute can be used on parameters, and lives in the `System.Runtime.CompilerServices` namespace. This is an attribute that is used to inject the name\nof the method that is calling another method. This is typically used as a way to eliminate 'magic strings' when implementing INotifyPropertyChanged in various UI frameworks. As an\nexample:\n\n[!code-csharp[Using CallerMemberName when implementing INotifyPropertyChanged](../../../samples/snippets/csharp/tutorials/attributes/Program.cs#CallerMemberName1)]\n\nIn the above code, you don't have to have a literal `\"Name\"` string. This can help prevent typo-related bugs and also makes for smoother refactoring/renaming.\n\n## Summary\n\nAttributes bring declarative power to C#. But they are a form of code as meta-data, and don't act by themselves.\n","nodes":[{"pos":[4,298],"embed":true,"restype":"x-metadata","content":"title: Attributes | C#\ndescription: Learn how attributes work in C#.\nkeywords: .NET, .NET Core, C#, attributes\nauthor: mgroves\nms.author: wiwagn\nms.date: 03/06/2017\nms.topic: article\nms.prod: .net\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: b152cf36-76e4-43a5-b805-1a1952e53b79","nodes":[{"content":"Attributes | C#","nodes":[{"pos":[0,15],"content":"Attributes | C#","nodes":[{"content":"Attributes | C#","pos":[0,15]}]}],"path":["title"]},{"content":"Learn how attributes work in C#.","nodes":[{"pos":[0,32],"content":"Learn how attributes work in C#.","nodes":[{"content":"Learn how attributes work in C#.","pos":[0,32]}]}],"path":["description"]},{"content":".NET, .NET Core, C#, attributes","nodes":[{"pos":[0,31],"content":".NET, .NET Core, C#, attributes","nodes":[{"content":".NET, .NET Core, C#, attributes","pos":[0,31]}]}],"path":["keywords"]}],"yml":true},{"pos":[306,328],"content":"Using Attributes in C#","linkify":"Using Attributes in C#","nodes":[{"content":"Using Attributes in C#","pos":[0,22]}]},{"content":"Attributes provide a way of associating information with code in a declarative way.","pos":[332,415]},{"content":"They can also provide a reusable element that can be applied to a variety of targets.","pos":[416,501]},{"content":"Consider the <ph id=\"ph1\">`[Obsolete]`</ph> attribute.","pos":[503,539],"source":"Consider the `[Obsolete]` attribute."},{"content":"It can be applied to classes, structs, methods, constructors, and more.","pos":[540,611]},{"content":"It <bpt id=\"p1\">_</bpt>declares<ept id=\"p1\">_</ept> that the element is obsolete.","pos":[612,655],"source":" It _declares_ that the element is obsolete."},{"content":"It's then up to the C# compiler to look for this attribute, and do some action in response.","pos":[656,747],"source":" It's then up to the C#\ncompiler to look for this attribute, and do some action in response."},{"pos":[749,931],"content":"In this tutorial, you'll be introduced to how to add attributes to your code, how to create and use your own attributes, and how to use some attributes that are built into .NET Core.","source":"In this tutorial, you'll be introduced to how to add attributes to your code, how to create and use your own attributes, and how to use some\nattributes that are built into .NET Core."},{"pos":[936,949],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"You’ll need to setup your machine to run .NET core.","pos":[950,1001]},{"content":"You can find the installation instructions on the <bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept> page.","pos":[1002,1105],"source":" You can find the\ninstallation instructions on the [.NET Core](https://www.microsoft.com/net/core)\npage."},{"content":"You can run this application on Windows, Ubuntu Linux, macOS or in a Docker container.","pos":[1106,1192],"source":"\nYou can run this application on Windows, Ubuntu Linux, macOS or in a Docker container."},{"content":"You’ll need to install your favorite code editor.","pos":[1193,1243],"source":" \nYou’ll need to install your favorite code editor."},{"content":"The descriptions below use <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](https://code.visualstudio.com/)</ept> which is an open source, cross platform editor.","pos":[1244,1371],"source":" The descriptions below\nuse [Visual Studio Code](https://code.visualstudio.com/) which is an open\nsource, cross platform editor."},{"content":"However, you can use whatever tools you are comfortable with.","pos":[1372,1433],"source":" However, you can use whatever tools you are\ncomfortable with."},{"pos":[1438,1460],"content":"Create the Application","linkify":"Create the Application","nodes":[{"content":"Create the Application","pos":[0,22]}]},{"content":"Now that you've installed all the tools, create a new .NET Core application.","pos":[1462,1538]},{"content":"To use the command line generator, execute the following command in your favorite shell:","pos":[1539,1627]},{"content":"This command will create barebones .NET core project files.","pos":[1651,1710]},{"content":"You will need to execute <ph id=\"ph1\">`dotnet restore`</ph> to restore the dependencies needed to compile this project.","pos":[1711,1812],"source":" You will need to execute `dotnet restore` to restore the dependencies needed to compile this project."},{"content":"To execute the program, use <ph id=\"ph1\">`dotnet run`</ph>.","pos":[1814,1855],"source":"To execute the program, use `dotnet run`."},{"content":"You should see \"Hello, World\" output to the console.","pos":[1856,1908]},{"pos":[1913,1942],"content":"How to add attributes to code","linkify":"How to add attributes to code","nodes":[{"content":"How to add attributes to code","pos":[0,29]}]},{"content":"In C#, attributes are classes that inherit from the <ph id=\"ph1\">`Attribute`</ph> base class.","pos":[1944,2019],"source":"In C#, attributes are classes that inherit from the `Attribute` base class."},{"content":"Any class that inherits from <ph id=\"ph1\">`Attribute`</ph> can be used as a sort of \"tag\" on other pieces of code.","pos":[2020,2116],"source":" Any class that inherits from `Attribute` can be used as a sort of \"tag\" on other pieces of code."},{"content":"For instance, there is an attribute called <ph id=\"ph1\">`ObsoleteAttribute`</ph>.","pos":[2117,2180],"source":"\nFor instance, there is an attribute called `ObsoleteAttribute`."},{"content":"This is used to signal that code is obsolete and shouldn't be used anymore.","pos":[2181,2256]},{"content":"You can place this attribute on a class, for instance, by using square brackets.","pos":[2257,2337],"source":" You can place this attribute on a class,\nfor instance, by using square brackets."},{"content":"Note that while the class is called <ph id=\"ph1\">`ObsoleteAttribute`</ph>, it's only necessary to use <ph id=\"ph2\">`[Obsolete]`</ph> in the code.","pos":[2468,2577],"source":"Note that while the class is called `ObsoleteAttribute`, it's only necessary to use `[Obsolete]` in the code."},{"content":"This is a convention that C# follows.","pos":[2578,2615]},{"content":"You can use the full name <ph id=\"ph1\">`[ObsoleteAttribute]`</ph> if you choose.","pos":[2616,2678],"source":"\nYou can use the full name `[ObsoleteAttribute]` if you choose."},{"content":"When marking a class obsolete, it's a good idea to provide some information as to <bpt id=\"p1\">*</bpt>why<ept id=\"p1\">*</ept> it's obsolete, and/or <bpt id=\"p2\">*</bpt>what<ept id=\"p2\">*</ept> to use instead.","pos":[2680,2812],"source":"When marking a class obsolete, it's a good idea to provide some information as to *why* it's obsolete, and/or *what* to use instead."},{"content":"Do this by passing a string parameter to the Obsolete attribute.","pos":[2813,2877],"source":" Do this by passing a string\nparameter to the Obsolete attribute."},{"pos":[3022,3181],"content":"The string is being passed as an argument to an <ph id=\"ph1\">`ObsoleteAttribute`</ph> constructor, just as if you were writing <ph id=\"ph2\">`var attr = new ObsoleteAttribute(\"some string\")`</ph>.","source":"The string is being passed as an argument to an `ObsoleteAttribute` constructor, just as if you were writing `var attr = new ObsoleteAttribute(\"some string\")`."},{"content":"Parameters to an attribute constructor are limited to simple types/literals: <ph id=\"ph1\">`bool, int, double, string, Type, enums, etc`</ph> and arrays of those types.","pos":[3183,3332],"source":"Parameters to an attribute constructor are limited to simple types/literals: `bool, int, double, string, Type, enums, etc` and arrays of those types."},{"content":"You can not use an expression or a variable.","pos":[3333,3377],"source":"\nYou can not use an expression or a variable."},{"content":"You are free to use positional or named parameters.","pos":[3378,3429]},{"pos":[3434,3466],"content":"How to create your own attribute","linkify":"How to create your own attribute","nodes":[{"content":"How to create your own attribute","pos":[0,32]}]},{"pos":[3468,3549],"content":"Creating an attribute is as simple as inheriting from the <ph id=\"ph1\">`Attribute`</ph> base class.","source":"Creating an attribute is as simple as inheriting from the `Attribute` base class."},{"pos":[3684,3799],"content":"With the above, I can now use <ph id=\"ph1\">`[MySpecial]`</ph> (or <ph id=\"ph2\">`[MySpecialAttribute]`</ph>) as an attribute elsewhere in the code base.","source":"With the above, I can now use `[MySpecial]` (or `[MySpecialAttribute]`) as an attribute elsewhere in the code base."},{"content":"Attributes in the .NET base class library like <ph id=\"ph1\">`ObsoleteAttribute`</ph> trigger certain behaviors within the compiler.","pos":[3933,4046],"source":"Attributes in the .NET base class library like `ObsoleteAttribute` trigger certain behaviors within the compiler."},{"content":"However, any attribute you create acts only as metadata, and doesn't result in any code within the attribute class being executed.","pos":[4047,4177],"source":" However, any attribute you create acts\nonly as metadata, and doesn't result in any code within the attribute class being executed."},{"content":"It's up to you to act on that metadata elsewhere in your code (more on that later in the tutorial).","pos":[4178,4277],"source":" It's up to you to act\non that metadata elsewhere in your code (more on that later in the tutorial)."},{"content":"There is a 'gotcha' here to watch out for.","pos":[4279,4321]},{"content":"As mentioned above, only certain types are allowed to be passed as arguments when using attributes.","pos":[4322,4421]},{"content":"However, when creating an attribute type, the C# compiler won't stop you from creating those parameters.","pos":[4422,4526],"source":" However, when creating an attribute type,\nthe C# compiler won't stop you from creating those parameters."},{"content":"In the below example, I've created an attribute with a constructor that compiles just fine.","pos":[4527,4618]},{"content":"However, you will be unable to use this constructor with attribute syntax.","pos":[4759,4833]},{"pos":[4984,5132],"content":"The above will cause a compiler error like <ph id=\"ph1\">`Attribute constructor parameter 'myClass' has type 'Foo', which is not a valid attribute parameter type`</ph>","source":"The above will cause a compiler error like `Attribute constructor parameter 'myClass' has type 'Foo', which is not a valid attribute parameter type`"},{"pos":[5137,5168],"content":"How to restrict attribute usage","linkify":"How to restrict attribute usage","nodes":[{"content":"How to restrict attribute usage","pos":[0,31]}]},{"content":"Attributes can be used on a number of \"targets\".","pos":[5170,5218]},{"content":"The above examples show them on classes, but they can also be used on:","pos":[5219,5289]},{"content":"Assembly","pos":[5293,5301]},{"content":"Class","pos":[5304,5309]},{"content":"Constructor","pos":[5312,5323]},{"content":"Delegate","pos":[5326,5334]},{"content":"Enum","pos":[5337,5341]},{"content":"Event","pos":[5344,5349]},{"content":"Field","pos":[5352,5357]},{"content":"GenericParameter","pos":[5360,5376]},{"content":"Interface","pos":[5379,5388]},{"content":"Method","pos":[5391,5397]},{"content":"Module","pos":[5400,5406]},{"content":"Parameter","pos":[5409,5418]},{"content":"Property","pos":[5421,5429]},{"content":"ReturnValue","pos":[5432,5443]},{"content":"Struct","pos":[5446,5452]},{"content":"When you create an attribute class, by default, C# will allow you to use that attribute on any of the possible attribute targets.","pos":[5454,5583]},{"content":"If you want to restrict your attribute to certain targets, you can do so by using the <ph id=\"ph1\">`AttributeUsageAttribute`</ph> on your attribute class.","pos":[5584,5720],"source":" If you want to restrict your attribute\nto certain targets, you can do so by using the `AttributeUsageAttribute` on your attribute class."},{"content":"That's right, an attribute on an attribute!","pos":[5721,5764]},{"pos":[5897,6153],"content":"If you attempt to put the above attribute on something that's not a class or a struct, you will get a compiler error like <ph id=\"ph1\">`Attribute 'MyAttributeForClassAndStructOnly' is not valid on this declaration type. It is only valid on 'class, struct' declarations`</ph>","source":"If you attempt to put the above attribute on something that's not a class or a struct, you will get a compiler error\nlike `Attribute 'MyAttributeForClassAndStructOnly' is not valid on this declaration type. It is only valid on 'class, struct' declarations`"},{"pos":[6289,6337],"content":"How to use attributes attached to a code element","linkify":"How to use attributes attached to a code element","nodes":[{"content":"How to use attributes attached to a code element","pos":[0,48]}]},{"content":"Attributes act as metadata.","pos":[6339,6366]},{"content":"Without some outward force, they won't actually do anything.","pos":[6367,6427]},{"content":"To find and act on attributes, <bpt id=\"p1\">[</bpt>Reflection<ept id=\"p1\">](../programming-guide/concepts/reflection.md)</ept> is generally needed.","pos":[6429,6538],"source":"To find and act on attributes, [Reflection](../programming-guide/concepts/reflection.md) is generally needed."},{"content":"I won't cover Reflection in-depth in this tutorial, but the basic idea is that Reflection allows you to write code in C# that examines other code.","pos":[6539,6685],"source":" I won't cover Reflection in-depth in this tutorial, but the basic\nidea is that Reflection allows you to write code in C# that examines other code."},{"content":"For instance, you can use Reflection to get information about a class:","pos":[6687,6757]},{"pos":[6903,7076],"content":"That will print out something like: <ph id=\"ph1\">`The assembly qualified name of MyClass is ConsoleApplication.MyClass, attributes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`</ph>","source":"That will print out something like: `The assembly qualified name of MyClass is ConsoleApplication.MyClass, attributes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`"},{"content":"Once you have a <ph id=\"ph1\">`TypeInfo`</ph> object (or a <ph id=\"ph2\">`MemberInfo`</ph>, <ph id=\"ph3\">`FieldInfo`</ph>, etc), you can use the <ph id=\"ph4\">`GetCustomAttributes`</ph> method.","pos":[7078,7196],"source":"Once you have a `TypeInfo` object (or a `MemberInfo`, `FieldInfo`, etc), you can use the `GetCustomAttributes` method."},{"content":"This will return a collection of <ph id=\"ph1\">`Attribute`</ph> objects.","pos":[7197,7250],"source":" This will return a collection of `Attribute` objects."},{"content":"You can also use <ph id=\"ph1\">`GetCustomAttribute`</ph> and specify an Attribute type.","pos":[7251,7319],"source":"\nYou can also use `GetCustomAttribute` and specify an Attribute type."},{"pos":[7321,7470],"content":"Here's an example of using <ph id=\"ph1\">`GetCustomAttributes`</ph> on a <ph id=\"ph2\">`MemberInfo`</ph> instance for <ph id=\"ph3\">`MyClass`</ph> (which we saw earlier has an <ph id=\"ph4\">`[Obsolete]`</ph> attribute on it).","source":"Here's an example of using `GetCustomAttributes` on a `MemberInfo` instance for `MyClass` (which we saw earlier has an `[Obsolete]` attribute on it)."},{"content":"That will print to console: <ph id=\"ph1\">`Attribute on MyClass: ObsoleteAttribute`</ph>.","pos":[7615,7685],"source":"That will print to console: `Attribute on MyClass: ObsoleteAttribute`."},{"content":"Try adding other attributes to <ph id=\"ph1\">`MyClass`</ph>.","pos":[7686,7727],"source":" Try adding other attributes to `MyClass`."},{"content":"It's important to note that these <ph id=\"ph1\">`Attribute`</ph> objects are instantiated lazily.","pos":[7729,7807],"source":"It's important to note that these `Attribute` objects are instantiated lazily."},{"content":"That is, they won't be instantiated until you use <ph id=\"ph1\">`GetCustomAttribute`</ph> or <ph id=\"ph2\">`GetCustomAttributes`</ph>.","pos":[7808,7904],"source":" That is, they won't be instantiated until you use `GetCustomAttribute` or `GetCustomAttributes`."},{"content":"They are also instantiated each time.","pos":[7905,7942],"source":"\nThey are also instantiated each time."},{"content":"Calling <ph id=\"ph1\">`GetCustomAttributes`</ph> twice in a row will return two different instances of <ph id=\"ph2\">`ObsoleteAttribute`</ph>.","pos":[7943,8047],"source":" Calling `GetCustomAttributes` twice in a row will return two different instances of `ObsoleteAttribute`."},{"pos":[8052,8101],"content":"Common attributes in the base class library (BCL)","linkify":"Common attributes in the base class library (BCL)","nodes":[{"content":"Common attributes in the base class library (BCL)","pos":[0,49]}]},{"content":"Attributes are used by many tools and frameworks.","pos":[8103,8152]},{"content":"NUnit uses attributes like <ph id=\"ph1\">`[Test]`</ph> and <ph id=\"ph2\">`[TestFixture]`</ph> that are used by the NUnit test runner.","pos":[8153,8248],"source":" NUnit uses attributes like `[Test]` and `[TestFixture]` that are used by the NUnit test runner."},{"content":"ASP.NET MVC uses attributes like <ph id=\"ph1\">`[Authorize]`</ph> and provides an action filter framework to perform cross-cutting concerns on MVC actions.","pos":[8249,8385],"source":" ASP.NET MVC uses attributes like `[Authorize]`\nand provides an action filter framework to perform cross-cutting concerns on MVC actions."},{"content":"<bpt id=\"p1\">[</bpt>PostSharp<ept id=\"p1\">](https://www.postsharp.net)</ept> uses the attribute syntax to allow aspect-oriented programming in C#.","pos":[8386,8494],"source":"[PostSharp](https://www.postsharp.net) uses the attribute syntax to allow aspect-oriented programming in C#."},{"content":"Here are a few notable attributes built into the .NET Core base class libraries:","pos":[8496,8576]},{"content":"<ph id=\"ph1\">`[Obsolete]`</ph>.","pos":[8580,8593],"source":"`[Obsolete]`."},{"content":"This one was used in the above examples, and it lives in the <ph id=\"ph1\">`System`</ph> namespace.","pos":[8594,8674],"source":" This one was used in the above examples, and it lives in the `System` namespace."},{"content":"It is useful to provide declarative documentation about a changing code base.","pos":[8675,8752]},{"content":"A message can be provided in the form of a string, and another boolean parameter can be used to escalate from a compiler warning to a compiler error.","pos":[8753,8902],"source":" A message can be provided in the form of a string,\nand another boolean parameter can be used to escalate from a compiler warning to a compiler error."},{"content":"<ph id=\"ph1\">`[Conditional]`</ph>.","pos":[8906,8922],"source":"`[Conditional]`."},{"content":"This attribute is in the <ph id=\"ph1\">`System.Diagnostics`</ph> namespace.","pos":[8923,8979],"source":" This attribute is in the `System.Diagnostics` namespace."},{"content":"This attribute can be applied to methods (or attribute classes).","pos":[8980,9044]},{"content":"You must pass a string to the constructor.","pos":[9045,9087]},{"content":"If that string matches a <ph id=\"ph1\">`#define`</ph> directive, then any calls to that method (but not the method itself) will be removed by the C# compiler.","pos":[9088,9227],"source":"\nIf that string matches a `#define` directive, then any calls to that method (but not the method itself) will be removed by the C# compiler."},{"content":"Typically this is used for debugging (diagnostics) purposes.","pos":[9228,9288]},{"content":"<ph id=\"ph1\">`[CallerMemberName]`</ph>.","pos":[9292,9313],"source":"`[CallerMemberName]`."},{"content":"This attribute can be used on parameters, and lives in the <ph id=\"ph1\">`System.Runtime.CompilerServices`</ph> namespace.","pos":[9314,9417],"source":" This attribute can be used on parameters, and lives in the `System.Runtime.CompilerServices` namespace."},{"content":"This is an attribute that is used to inject the name of the method that is calling another method.","pos":[9418,9516],"source":" This is an attribute that is used to inject the name\nof the method that is calling another method."},{"content":"This is typically used as a way to eliminate 'magic strings' when implementing INotifyPropertyChanged in various UI frameworks.","pos":[9517,9644]},{"content":"As an example:","pos":[9645,9659],"source":" As an\nexample:"},{"content":"In the above code, you don't have to have a literal <ph id=\"ph1\">`\"Name\"`</ph> string.","pos":[9826,9894],"source":"In the above code, you don't have to have a literal `\"Name\"` string."},{"content":"This can help prevent typo-related bugs and also makes for smoother refactoring/renaming.","pos":[9895,9984]},{"pos":[9989,9996],"content":"Summary","linkify":"Summary","nodes":[{"content":"Summary","pos":[0,7]}]},{"content":"Attributes bring declarative power to C#.","pos":[9998,10039]},{"content":"But they are a form of code as meta-data, and don't act by themselves.","pos":[10040,10110]}]}