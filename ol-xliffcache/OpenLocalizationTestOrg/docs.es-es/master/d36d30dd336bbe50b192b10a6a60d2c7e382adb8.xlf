<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="resources-and-code.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d36d30dd336bbe50b192b10a6a60d2c7e382adb8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\resources-and-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c2c4cc0fd9a1c882f13ac4da064fe5d6da64892</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59a719ee8d467f7c47cf37f28f8d0e3e203a80c8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Resources and Code</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Resources and Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This overview concentrates on how <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> resources can be accessed or created using  code rather than <ph id="ph2">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> syntax.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information on general resource usage and resources from a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> syntax perspective, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Accessing Resources from Code</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The keys that identify resources if they are defined through <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> are also used to retrieve specific resources if you request the resource in code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The simplest way to retrieve a resource from code is to call either the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph> or the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> method from framework-level objects in your application.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The behavioral difference between these methods is what happens if the requested key is not found.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph> raises an exception; <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TryFindResource%2A&gt;</ph> will not raise an exception but returns <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each method takes the resource key as an input parameter, and returns a loosely typed object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Typically, a resource key is a string, but there are occasional nonstring usages; see the <bpt id="p1">[</bpt>Using Objects as Keys<ept id="p1">](#objectaskey)</ept> section for details.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Typically you would cast the returned object to the type required by the property that you are setting when requesting the resource.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The lookup logic for code resource resolution is the same as the dynamic resource reference <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> case.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The search for resources starts from the calling element, then continues to successive parent elements in the logical tree.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The lookup continues onwards into application resources, themes, and system resources if necessary.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A code request for a resource will properly account for runtime changes in resource dictionaries that might have been made subsequent to that resource dictionary being loaded from <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, and also for realtime system resource changes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following is a brief code example that finds a resource by key and uses the returned value to set a property, implemented as a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An alternative method for assigning a resource reference is <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SetResourceReference%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This method takes two parameters: the key of the resource, and the identifier for a particular dependency property that is present on the element instance to which the resource value should be assigned.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Functionally, this method is the same and has the advantage of not requiring any casting of return values.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Still another way to access resources programmatically is to access the contents of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> property as a dictionary.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Accessing the dictionary contained by this property is also how you can add new resources to existing collections, check to see if a given key name is already taken in the collection, and other dictionary/collection operations.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you are writing a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application entirely in code, you can also create the entire collection in code, assign keys to it, and then assign the finished collection to the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> property of an established element.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This will be described in the next section.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can index within any given <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> collection, using a specific key as the index, but you should be aware that accessing the resource in this way does not follow the normal runtime rules of resource resolution.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You are only accessing that particular collection.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Resource lookup will not be traversing the scope to the root or the application if no valid object was found at the requested key.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, this approach may have performance advantages in some cases precisely because the scope of the search for the key is more constrained.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> class for more details on how to work with the resource dictionary directly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creating Resources with Code</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you want to create an entire <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application in code, you might also want to create any resources in that application in code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To achieve this, create a new <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> instance, and then add all the resources to the dictionary using successive calls to <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary.Add%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Then, use the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> thus created to set the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> property on an element that is present in a page scope, or the <ph id="ph3">&lt;xref:System.Windows.Application.Resources%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You could also maintain the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> as a standalone object without adding it to an element.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, if you do this, you must access the resources within it by item key, as if it were a generic dictionary.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> that is not attached to an element <ph id="ph2">`Resources`</ph> property would not  exist as part of the element tree and has no scope in a lookup sequence that can be used by <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.FindResource%2A&gt;</ph> and related methods.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Using Objects as Keys</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Most resource usages will set the key of the resource to be a string.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, various <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> features deliberately do not use a string type to specify keys, instead this parameter is an object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The capability of having the resource be keyed by an object is used by the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> style and theming support.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The styles in themes which become the default style for an otherwise non-styled control are each keyed by the <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the control that they should apply to.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Being keyed by type provides a reliable lookup mechanism that works on default instances of each control type, and type can be detected by reflection and used for styling derived classes even though the derived type otherwise has no default style.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can specify a <ph id="ph1">&lt;xref:System.Type&gt;</ph> key for a resource defined in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> by using the <bpt id="p1">[</bpt>x:Type Markup Extension<ept id="p1">](../../xaml-services/x-type-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Similar extensions exist for other nonstring key usages that support <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> features, such as <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](componentresourcekey-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML Resources<ept id="p1">](xaml-resources.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../controls/styling-and-templating.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>