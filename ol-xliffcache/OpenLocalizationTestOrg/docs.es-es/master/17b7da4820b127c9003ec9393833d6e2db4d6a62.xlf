<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17b7da4820b127c9003ec9393833d6e2db4d6a62</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\dataset-datatable-dataview\consuming-a-dataset-from-an-xml-web-service.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54262915a1643fd151c92b12039817b54faa3de8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f114692434a8df7aee8ab1dad6afd1a65e19e35</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Consuming a DataSet from an XML Web Service | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Consuming a DataSet from an XML Web Service</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> was architected with a disconnected design, in part to facilitate the convenient transport of data over the Internet.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept> is "serializable" in that it can be specified as an input to or output from XML Web services without any additional coding required to stream the contents of the <bpt id="p2">**</bpt>DataSet<ept id="p2">**</ept> from an XML Web service to a client and back.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept> is implicitly converted to an XML stream using the DiffGram format, sent over the network, and then reconstructed from the XML stream as a <bpt id="p2">**</bpt>DataSet<ept id="p2">**</ept> on the receiving end.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This gives you a very simple and flexible method for transmitting and returning relational data using XML Web services.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about the DiffGram format, see <bpt id="p1">[</bpt>DiffGrams<ept id="p1">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows how to create an XML Web service and client that use the <bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept> to transport relational data (including modified data) and resolve any updates back to the original data source.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We recommend that you always consider security implications when creating an XML Web service.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For information on securing an XML Web service, see <bpt id="p1">[</bpt>Securing XML Web Services Created Using ASP.NET<ept id="p1">](http://msdn.microsoft.com/en-us/354b2ab1-2782-4542-b32a-dc560178b90c)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To create an XML Web service that returns and consumes a DataSet</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create the XML Web service.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the example, an XML Web service is created that returns data, in this case a list of customers from the <bpt id="p1">**</bpt>Northwind<ept id="p1">**</ept> database, and receives a <bpt id="p2">**</bpt>DataSet<ept id="p2">**</ept> with updates to the data, which the XML Web service resolves back to the original data source.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The XML Web service exposes two methods: <bpt id="p1">**</bpt>GetCustomers<ept id="p1">**</ept>, to return the list of customers, and <bpt id="p2">**</bpt>UpdateCustomers<ept id="p2">**</ept>, to resolve updates back to the data source.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The XML Web service is stored in a file on the Web server called DataSetSample.asmx.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following code outlines the contents of DataSetSample.asmx.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In a typical scenario, the <bpt id="p1">**</bpt>UpdateCustomers<ept id="p1">**</ept> method would be written to catch optimistic concurrency violations.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For simplicity, the example does not include this.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about optimistic concurrency, see <bpt id="p1">[</bpt>Optimistic Concurrency<ept id="p1">](../../../../../docs/framework/data/adonet/optimistic-concurrency.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Create an XML Web service proxy.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Clients of the XML Web service require a SOAP proxy in order to consume the exposed methods.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can have Visual Studio generate this proxy for you.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By setting a Web reference to an existing Web service from within Visual Studio, all the behavior described in this step occurs transparently.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you want to create the proxy class yourself, continue with this discussion.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In most circumstances, however, using Visual Studio to create the proxy class for the client application is sufficient.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A proxy can be created using the Web Services Description Language Tool.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, if the XML Web service is exposed at the URL http://myserver/data/DataSetSample.asmx, issue a command such as the following to create a Visual Basic .NET proxy with a namespace of <bpt id="p1">**</bpt>WebData.DSSample<ept id="p1">**</ept> and store it in the file sample.vb.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To create a C# proxy in the file sample.cs, issue the following command.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The proxy can then be compiled as a library and imported into the XML Web service client.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To compile the Visual Basic .NET proxy code stored in sample.vb as sample.dll, issue the following command.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To compile the C# proxy code stored in sample.cs as sample.dll, issue the following command.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create an XML Web service client.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you want to have Visual Studio generate the Web service proxy class for you, simply create the client project, and, in the Solution Explorer window, right-click the project, click <bpt id="p1">**</bpt>Add Web Reference<ept id="p1">**</ept>, and select the Web service from the list of available Web services (this may require supplying the address of the Web service endpoint, if the Web service isn't available within the current solution, or on the current computer.) If you create the XML Web service proxy yourself (as described in the previous step), you can import it into your client code and consume the XML Web service methods.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following sample code imports the proxy library, calls <bpt id="p1">**</bpt>GetCustomers<ept id="p1">**</ept> to get a list of customers, adds a new customer, and then returns a <bpt id="p2">**</bpt>DataSet<ept id="p2">**</ept> with the updates to <bpt id="p3">**</bpt>UpdateCustomers<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Notice that the example passes the <bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept> returned by <bpt id="p2">**</bpt>DataSet.GetChanges<ept id="p2">**</ept> to <bpt id="p3">**</bpt>UpdateCustomers<ept id="p3">**</ept> because only modified rows need to be passed to <bpt id="p4">**</bpt>UpdateCustomers<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UpdateCustomers<ept id="p1">**</ept> returns the resolved <bpt id="p2">**</bpt>DataSet<ept id="p2">**</ept>, which you can then <bpt id="p3">**</bpt>Merge<ept id="p3">**</ept> into the existing <bpt id="p4">**</bpt>DataSet<ept id="p4">**</ept> to incorporate the resolved changes and any row error information from the update.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following code assumes that you have used Visual Studio to create the Web reference, and that you have renamed the Web reference to DsSample in the <bpt id="p1">**</bpt>Add Web Reference<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you decide to create the proxy class yourself, you must take the following extra steps.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To compile the sample, supply the proxy library that was created (sample.dll) and the related .NET libraries.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To compile the Visual Basic .NET version of the sample, stored in the file client.vb, issue the following command.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To compile the C# version of the sample, stored in the file client.cs, issue the following command.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET<ept id="p1">](../../../../../docs/framework/data/adonet/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataSets, DataTables, and DataViews<ept id="p1">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataTables<ept id="p1">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/datatables.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Populating a DataSet from a DataAdapter<ept id="p1">](../../../../../docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Updating Data Sources with DataAdapters<ept id="p1">](../../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataAdapter Parameters<ept id="p1">](../../../../../docs/framework/data/adonet/dataadapter-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Web Services Description Language Tool (Wsdl.exe)<ept id="p1">](http://msdn.microsoft.com/en-us/b9210348-8bc2-4367-8c91-d1a04b403e88)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>