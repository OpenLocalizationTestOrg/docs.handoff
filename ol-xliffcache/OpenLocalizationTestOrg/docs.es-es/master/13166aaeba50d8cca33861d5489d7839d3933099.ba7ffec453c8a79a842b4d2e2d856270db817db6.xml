{"content":"---\ntitle: \"How to: Find the Set Difference Between Two Lists (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: 8e8945f0-4aba-439d-8d5d-c8d1eeef4e71\n---\n# How to: Find the Set Difference Between Two Lists (LINQ) (C#)\nThis example shows how to use LINQ to compare two lists of strings and output those lines that are in names1.txt but not in names2.txt.  \n  \n### To create the data files  \n  \n1.  Copy names1.txt and names2.txt to your solution folder as shown in [How to: Combine and Compare String Collections (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md).  \n  \n## Example  \n  \n```csharp  \nclass CompareLists  \n{          \n    static void Main()  \n    {  \n        // Create the IEnumerable data sources.  \n        string[] names1 = System.IO.File.ReadAllLines(@\"../../../names1.txt\");  \n        string[] names2 = System.IO.File.ReadAllLines(@\"../../../names2.txt\");  \n  \n        // Create the query. Note that method syntax must be used here.  \n        IEnumerable<string> differenceQuery =  \n          names1.Except(names2);  \n  \n        // Execute the query.  \n        Console.WriteLine(\"The following lines are in names1.txt but not names2.txt\");  \n        foreach (string s in differenceQuery)  \n            Console.WriteLine(s);  \n  \n        // Keep the console window open in debug mode.  \n        Console.WriteLine(\"Press any key to exit\");  \n        Console.ReadKey();  \n    }  \n}  \n/* Output:  \n     The following lines are in names1.txt but not names2.txt  \n    Potra, Cristina  \n    Noriega, Fabricio  \n    Aw, Kam Foo  \n    Toyoshima, Tim  \n    Guy, Wey Yuan  \n    Garcia, Debra  \n     */  \n```  \n  \n Some types of query operations in C#, such as <xref:System.Linq.Enumerable.Except%2A>, <xref:System.Linq.Enumerable.Distinct%2A>, <xref:System.Linq.Enumerable.Union%2A>, and <xref:System.Linq.Enumerable.Concat%2A>, can only be expressed in method-based syntax.  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces.  \n  \n## See also\n\n- [LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)\n","nodes":[{"pos":[4,143],"embed":true,"restype":"x-metadata","content":"title: \"How to: Find the Set Difference Between Two Lists (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: 8e8945f0-4aba-439d-8d5d-c8d1eeef4e71","nodes":[{"content":"How to: Find the Set Difference Between Two Lists (LINQ) (C#)","nodes":[{"pos":[0,61],"content":"How to: Find the Set Difference Between Two Lists (LINQ) (C#)","nodes":[{"content":"How to: Find the Set Difference Between Two Lists (LINQ) (C#)","pos":[0,61]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[150,211],"content":"How to: Find the Set Difference Between Two Lists (LINQ) (C#)","linkify":"How to: Find the Set Difference Between Two Lists (LINQ) (C#)","nodes":[{"content":"How to: Find the Set Difference Between Two Lists (LINQ) (C#)","pos":[0,61]}]},{"content":"This example shows how to use LINQ to compare two lists of strings and output those lines that are in names1.txt but not in names2.txt.","pos":[212,347]},{"pos":[357,381],"content":"To create the data files","linkify":"To create the data files","nodes":[{"content":"To create the data files","pos":[0,24]}]},{"pos":[391,625],"content":"Copy names1.txt and names2.txt to your solution folder as shown in <bpt id=\"p1\">[</bpt>How to: Combine and Compare String Collections (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md)</ept>.","source":"Copy names1.txt and names2.txt to your solution folder as shown in [How to: Combine and Compare String Collections (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md)."},{"pos":[634,641],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1682,1942],"content":"Some types of query operations in C#, such as <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph>, can only be expressed in method-based syntax.","source":"Some types of query operations in C#, such as <xref:System.Linq.Enumerable.Except%2A>, <xref:System.Linq.Enumerable.Distinct%2A>, <xref:System.Linq.Enumerable.Union%2A>, and <xref:System.Linq.Enumerable.Concat%2A>, can only be expressed in method-based syntax."},{"pos":[1951,1969],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[1973,2150],"content":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <ph id=\"ph1\">`using`</ph> directives for the System.Linq and System.IO namespaces.","source":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces."},{"pos":[2159,2167],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2171,2266],"content":"<bpt id=\"p1\">[</bpt>LINQ and Strings (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)</ept>","source":"[LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)"}]}