<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="events-overview-windows-forms.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57802cad0a75ed21bba02a11fec39f821835c5ea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\events-overview-windows-forms.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">deaf7466c04ba64f77e7811a966e01aa48053175</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6de0e31899ee0eff6802c82e10a9900d4ead4897</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Events Overview (Windows Forms)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Events Overview (Windows Forms)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An event is an action which you can respond to, or "handle," in code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Events can be generated by a user action, such as clicking the mouse or pressing a key; by program code; or by the system.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Event-driven applications execute code in response to an event.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each form and control exposes a predefined set of events that you can program against.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If one of these events occurs and there is code in the associated event handler, that code is invoked.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The types of events raised by an object vary, but many types are common to most controls.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, most objects will handle a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If a user clicks a form, code in the form's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler is executed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Many events occur in conjunction with other events.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, in the course of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> event occurring, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> events occur.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For information about how to raise and consume an event, see <bpt id="p1">[</bpt>Events<ept id="p1">](../../standard/events/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Delegates and Their Role</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Delegates are classes commonly used within the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> to build event-handling mechanisms.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Delegates roughly equate to function pointers, commonly used in <ph id="ph1">[!INCLUDE[vcprvc](../../../includes/vcprvc-md.md)]</ph> and other object-oriented languages.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unlike function pointers however, delegates are object-oriented, type-safe, and secure.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In addition, where a function pointer contains only a reference to a particular function, a delegate consists of a reference to an object, and references to one or more methods within the object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This event model uses <bpt id="p1">*</bpt>delegates<ept id="p1">*</ept> to bind events to the methods that are used to handle them.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The delegate enables other classes to register for event notification by specifying a handler method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the event occurs, the delegate calls the bound method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information about how to define delegates, see <bpt id="p1">[</bpt>Events<ept id="p1">](../../standard/events/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Delegates can be bound to a single method or to multiple methods, referred to as multicasting.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When creating a delegate for an event, you (or the Windows Forms Designer) typically create a multicast event.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A rare exception might be an event that results in a specific procedure (such as displaying a dialog box) that would not logically repeat multiple times per event.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For information about how to create a multicast delegate, see <bpt id="p1">[</bpt>How to: Combine Delegates (Multicast Delegates)<ept id="p1">](~/docs/csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A multicast delegate maintains an invocation list of the methods it is bound to.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The multicast delegate supports a <ph id="ph1">&lt;xref:System.Delegate.Combine%2A&gt;</ph> method to add a method to the invocation list and a <ph id="ph2">&lt;xref:System.Delegate.Remove%2A&gt;</ph> method to remove it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When an event is recorded by the application, the control raises the event by invoking the delegate for that event.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The delegate in turn calls the bound method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the most common case (a multicast delegate) the delegate calls each bound method in the invocation list in turn, which provides a one-to-many notification.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This strategy means that the control does not need to maintain a list of target objects for event notification—the delegate handles all registration and notification.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Delegates also enable multiple events to be bound to the same method, allowing a many-to-one notification.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, a button-click event and a menu-command–click event can both invoke the same delegate, which then calls a single method to handle these separate events the same way.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The binding mechanism used with delegates is dynamic: a delegate can be bound at run time to any method whose signature matches that of the event handler.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>With this feature, you can set up or change the bound method depending on a condition and to dynamically attach an event handler to a control.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Event Handlers in Windows Forms<ept id="p1">](creating-event-handlers-in-windows-forms.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Event Handlers Overview<ept id="p1">](event-handlers-overview-windows-forms.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>