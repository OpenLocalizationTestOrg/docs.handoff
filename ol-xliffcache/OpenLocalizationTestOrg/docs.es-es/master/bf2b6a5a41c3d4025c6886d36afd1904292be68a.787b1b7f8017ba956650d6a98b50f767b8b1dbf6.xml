{"content":"---\ntitle: \"Developing a Composite Windows Forms Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"custom controls [Windows Forms], composite controls\"\n  - \"composite controls\"\n  - \"UserControl class\"\n  - \"composite controls, Windows Forms\"\n  - \"controls [Windows Forms], composite\"\nms.assetid: d086f2a3-baa3-4e09-b40c-a5bb3cfc51a6\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Developing a Composite Windows Forms Control\nYou can develop a composite Windows Forms control by combining other Windows Forms controls. Composite controls that derive from <xref:System.Web.UI.UserControl> are called user controls. The base class, <xref:System.Windows.Forms.UserControl>, provides keyboard routing for the child controls, thus ensuring that child controls can receive focus. For an example of a user control, see the <xref:System.Windows.Forms.UserControl> sample in [How to: Apply Attributes in Windows Forms Controls](../../../../docs/framework/winforms/controls/how-to-apply-attributes-in-windows-forms-controls.md).  \n  \n The Windows Forms designer in [!INCLUDE[vsprvsext](../../../../includes/vsprvsext-md.md)] provides rich design-time support for authoring user controls.  \n  \n-   [How to: Display a Control in the Choose Toolbox Items Dialog Box](http://msdn.microsoft.com/library/9yxtkx75\\(v=vs.110\\))  \n  \n-   [Walkthrough: Serializing Collections of Standard Types with the DesignerSerializationVisibilityAttribute](http://msdn.microsoft.com/library/ms171731\\(v=vs.110\\))  \n  \n-   [Walkthrough: Inheriting from a Windows Forms Control with Visual C#](http://msdn.microsoft.com/en-us/09476da0-8d4c-4a4c-b969-649519dfb438))  \n  \n-   [How to: Provide a Toolbox Bitmap for a Control](http://msdn.microsoft.com/library/4wk1wc0a\\(v=vs.110\\))  \n  \n-   [How to: Inherit from Existing Windows Forms Controls](http://msdn.microsoft.com/library/7h62478z\\(v=vs.110\\))  \n  \n-   [Walkthrough: Debugging Custom Windows Forms Controls at Design Time](http://msdn.microsoft.com/library/5ytx0z24\\(v=vs.110\\))  \n  \n-   [How to: Inherit from the Control Class](http://msdn.microsoft.com/library/skcysbt2\\(v=vs.110\\))  \n  \n-   [How to: Test the Run-Time Behavior of a UserControl](http://msdn.microsoft.com/library/ms171738\\(v=vs.110\\))  \n  \n-   [How to: Align a Control to the Edges of Forms at Design Time](http://msdn.microsoft.com/library/1fxyb15b\\(v=vs.110\\))  \n  \n-   [How to: Inherit from the UserControl Class](http://msdn.microsoft.com/library/00ctb4z0\\(v=vs.110\\))  \n  \n-   [How to: Author Controls for Windows Forms](http://msdn.microsoft.com/library/bs3yhkh7\\(v=vs.110\\))  \n  \n-   [How to: Author Composite Controls](http://msdn.microsoft.com/library/3sf86w5h\\(v=vs.110\\))  \n  \n-   [Walkthrough: Authoring a Composite Control with Visual Basic](http://msdn.microsoft.com/library/c316f119\\(v=vs.110\\))  \n  \n-   [Walkthrough: Authoring a Composite Control with Visual C#](http://msdn.microsoft.com/en-us/f88481a8-c746-4a36-9479-374ce5f2e91f))  \n  \n-   [Walkthrough: Inheriting from a Windows Forms Control with Visual Basic](http://msdn.microsoft.com/library/w2a8y03d\\(v=vs.110\\))  \n  \n-   [How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features](http://msdn.microsoft.com/library/307hck25\\(v=vs.110\\))  \n  \n-   [How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features](http://msdn.microsoft.com/library/307hck25\\(v=vs.120\\))  \n  \n## See Also  \n [How to: Apply Attributes in Windows Forms Controls](../../../../docs/framework/winforms/controls/how-to-apply-attributes-in-windows-forms-controls.md)   \n [Developing Custom Windows Forms Controls with the .NET Framework](../../../../docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)   \n [Varieties of Custom Controls](../../../../docs/framework/winforms/controls/varieties-of-custom-controls.md)","nodes":[{"pos":[4,615],"nodes":[{"content":"Developing a Composite Windows Forms Control | Microsoft Docs","nodes":[{"pos":[0,61],"content":"Developing a Composite Windows Forms Control | Microsoft Docs","nodes":[{"content":"Developing a Composite Windows Forms Control | Microsoft Docs","pos":[0,61]}]}],"pos":[6,70],"yaml":true}],"content":"title: \"Developing a Composite Windows Forms Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"custom controls [Windows Forms], composite controls\"\n  - \"composite controls\"\n  - \"UserControl class\"\n  - \"composite controls, Windows Forms\"\n  - \"controls [Windows Forms], composite\"\nms.assetid: d086f2a3-baa3-4e09-b40c-a5bb3cfc51a6\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","yamlblock":true},{"pos":[622,666],"content":"Developing a Composite Windows Forms Control","linkify":"Developing a Composite Windows Forms Control","nodes":[{"content":"Developing a Composite Windows Forms Control","pos":[0,44]}]},{"content":"You can develop a composite Windows Forms control by combining other Windows Forms controls.","pos":[667,759]},{"content":"Composite controls that derive from <ph id=\"ph1\">&lt;xref:System.Web.UI.UserControl&gt;</ph> are called user controls.","pos":[760,854],"source":" Composite controls that derive from <xref:System.Web.UI.UserControl> are called user controls."},{"content":"The base class, <ph id=\"ph1\">&lt;xref:System.Windows.Forms.UserControl&gt;</ph>, provides keyboard routing for the child controls, thus ensuring that child controls can receive focus.","pos":[855,1014],"source":" The base class, <xref:System.Windows.Forms.UserControl>, provides keyboard routing for the child controls, thus ensuring that child controls can receive focus."},{"content":"For an example of a user control, see the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> sample in <bpt id=\"p1\">[</bpt>How to: Apply Attributes in Windows Forms Controls<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-apply-attributes-in-windows-forms-controls.md)</ept>.","pos":[1015,1259],"source":" For an example of a user control, see the <xref:System.Windows.Forms.UserControl> sample in [How to: Apply Attributes in Windows Forms Controls](../../../../docs/framework/winforms/controls/how-to-apply-attributes-in-windows-forms-controls.md)."},{"pos":[1266,1418],"content":"The Windows Forms designer in <ph id=\"ph1\">[!INCLUDE[vsprvsext](../../../../includes/vsprvsext-md.md)]</ph> provides rich design-time support for authoring user controls.","source":"The Windows Forms designer in [!INCLUDE[vsprvsext](../../../../includes/vsprvsext-md.md)] provides rich design-time support for authoring user controls."},{"pos":[1428,1550],"content":"<bpt id=\"p1\">[</bpt>How to: Display a Control in the Choose Toolbox Items Dialog Box<ept id=\"p1\">](http://msdn.microsoft.com/library/9yxtkx75\\(v=vs.110\\))</ept>","source":"[How to: Display a Control in the Choose Toolbox Items Dialog Box](http://msdn.microsoft.com/library/9yxtkx75\\(v=vs.110\\))"},{"pos":[1560,1722],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Serializing Collections of Standard Types with the DesignerSerializationVisibilityAttribute<ept id=\"p1\">](http://msdn.microsoft.com/library/ms171731\\(v=vs.110\\))</ept>","source":"[Walkthrough: Serializing Collections of Standard Types with the DesignerSerializationVisibilityAttribute](http://msdn.microsoft.com/library/ms171731\\(v=vs.110\\))"},{"pos":[1732,1872],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual C#<ept id=\"p1\">](http://msdn.microsoft.com/en-us/09476da0-8d4c-4a4c-b969-649519dfb438)</ept>)","source":"[Walkthrough: Inheriting from a Windows Forms Control with Visual C#](http://msdn.microsoft.com/en-us/09476da0-8d4c-4a4c-b969-649519dfb438))"},{"pos":[1882,1986],"content":"<bpt id=\"p1\">[</bpt>How to: Provide a Toolbox Bitmap for a Control<ept id=\"p1\">](http://msdn.microsoft.com/library/4wk1wc0a\\(v=vs.110\\))</ept>","source":"[How to: Provide a Toolbox Bitmap for a Control](http://msdn.microsoft.com/library/4wk1wc0a\\(v=vs.110\\))"},{"pos":[1996,2106],"content":"<bpt id=\"p1\">[</bpt>How to: Inherit from Existing Windows Forms Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/7h62478z\\(v=vs.110\\))</ept>","source":"[How to: Inherit from Existing Windows Forms Controls](http://msdn.microsoft.com/library/7h62478z\\(v=vs.110\\))"},{"pos":[2116,2241],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Debugging Custom Windows Forms Controls at Design Time<ept id=\"p1\">](http://msdn.microsoft.com/library/5ytx0z24\\(v=vs.110\\))</ept>","source":"[Walkthrough: Debugging Custom Windows Forms Controls at Design Time](http://msdn.microsoft.com/library/5ytx0z24\\(v=vs.110\\))"},{"pos":[2251,2347],"content":"<bpt id=\"p1\">[</bpt>How to: Inherit from the Control Class<ept id=\"p1\">](http://msdn.microsoft.com/library/skcysbt2\\(v=vs.110\\))</ept>","source":"[How to: Inherit from the Control Class](http://msdn.microsoft.com/library/skcysbt2\\(v=vs.110\\))"},{"pos":[2357,2466],"content":"<bpt id=\"p1\">[</bpt>How to: Test the Run-Time Behavior of a UserControl<ept id=\"p1\">](http://msdn.microsoft.com/library/ms171738\\(v=vs.110\\))</ept>","source":"[How to: Test the Run-Time Behavior of a UserControl](http://msdn.microsoft.com/library/ms171738\\(v=vs.110\\))"},{"pos":[2476,2594],"content":"<bpt id=\"p1\">[</bpt>How to: Align a Control to the Edges of Forms at Design Time<ept id=\"p1\">](http://msdn.microsoft.com/library/1fxyb15b\\(v=vs.110\\))</ept>","source":"[How to: Align a Control to the Edges of Forms at Design Time](http://msdn.microsoft.com/library/1fxyb15b\\(v=vs.110\\))"},{"pos":[2604,2704],"content":"<bpt id=\"p1\">[</bpt>How to: Inherit from the UserControl Class<ept id=\"p1\">](http://msdn.microsoft.com/library/00ctb4z0\\(v=vs.110\\))</ept>","source":"[How to: Inherit from the UserControl Class](http://msdn.microsoft.com/library/00ctb4z0\\(v=vs.110\\))"},{"pos":[2714,2813],"content":"<bpt id=\"p1\">[</bpt>How to: Author Controls for Windows Forms<ept id=\"p1\">](http://msdn.microsoft.com/library/bs3yhkh7\\(v=vs.110\\))</ept>","source":"[How to: Author Controls for Windows Forms](http://msdn.microsoft.com/library/bs3yhkh7\\(v=vs.110\\))"},{"pos":[2823,2914],"content":"<bpt id=\"p1\">[</bpt>How to: Author Composite Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/3sf86w5h\\(v=vs.110\\))</ept>","source":"[How to: Author Composite Controls](http://msdn.microsoft.com/library/3sf86w5h\\(v=vs.110\\))"},{"pos":[2924,3042],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Authoring a Composite Control with Visual Basic<ept id=\"p1\">](http://msdn.microsoft.com/library/c316f119\\(v=vs.110\\))</ept>","source":"[Walkthrough: Authoring a Composite Control with Visual Basic](http://msdn.microsoft.com/library/c316f119\\(v=vs.110\\))"},{"pos":[3052,3182],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Authoring a Composite Control with Visual C#<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f88481a8-c746-4a36-9479-374ce5f2e91f)</ept>)","source":"[Walkthrough: Authoring a Composite Control with Visual C#](http://msdn.microsoft.com/en-us/f88481a8-c746-4a36-9479-374ce5f2e91f))"},{"pos":[3192,3320],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual Basic<ept id=\"p1\">](http://msdn.microsoft.com/library/w2a8y03d\\(v=vs.110\\))</ept>","source":"[Walkthrough: Inheriting from a Windows Forms Control with Visual Basic](http://msdn.microsoft.com/library/w2a8y03d\\(v=vs.110\\))"},{"pos":[3330,3471],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features<ept id=\"p1\">](http://msdn.microsoft.com/library/307hck25\\(v=vs.110\\))</ept>","source":"[How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features](http://msdn.microsoft.com/library/307hck25\\(v=vs.110\\))"},{"pos":[3481,3622],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features<ept id=\"p1\">](http://msdn.microsoft.com/library/307hck25\\(v=vs.120\\))</ept>","source":"[How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features](http://msdn.microsoft.com/library/307hck25\\(v=vs.120\\))"},{"pos":[3631,3639],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>How to: Apply Attributes in Windows Forms Controls<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-apply-attributes-in-windows-forms-controls.md)</ept><ph id=\"ph1\"> </ph>","pos":[3643,3795],"source":"[How to: Apply Attributes in Windows Forms Controls](../../../../docs/framework/winforms/controls/how-to-apply-attributes-in-windows-forms-controls.md) "},{"content":"<bpt id=\"p1\">[</bpt>Developing Custom Windows Forms Controls with the .NET Framework<ept id=\"p1\">](../../../../docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)</ept><ph id=\"ph1\"> </ph>","pos":[3799,3956],"source":"[Developing Custom Windows Forms Controls with the .NET Framework](../../../../docs/framework/winforms/controls/developing-custom-windows-forms-controls.md) "},{"content":"<bpt id=\"p1\">[</bpt>Varieties of Custom Controls<ept id=\"p1\">](../../../../docs/framework/winforms/controls/varieties-of-custom-controls.md)</ept>","pos":[3960,4068],"source":"[Varieties of Custom Controls](../../../../docs/framework/winforms/controls/varieties-of-custom-controls.md)"}]}