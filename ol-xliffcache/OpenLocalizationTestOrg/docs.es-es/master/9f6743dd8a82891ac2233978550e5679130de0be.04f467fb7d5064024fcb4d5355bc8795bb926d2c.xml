{"content":"---\ntitle: \"{} Escape Sequence - Markup Extension\"\nms.date: \"03/30/2017\"\nf1_keywords: \n  - \"{}\"\nhelpviewer_keywords: \n  - \"XAML [XAML Services], quotation mark (\\\")\"\n  - \"{} escape sequence [XAML Services]\"\n  - \"XAML [XAML Services], {} escape sequence\"\n  - \"XAML [XAML Services], escape sequence\"\n  - \"quotation mark (\\\") [XAML Services]\"\n  - \"escape sequence [XAML Services]\"\nms.assetid: 3ce3e2ad-a868-43f9-9c98-b29561cb146e\n---\n# {} Escape Sequence / Markup Extension\nProvides the XAML escape sequence for attribute values. The escape sequence allows the subsequent values in the attribute to be interpreted as a literal.  \n  \n## XAML Attribute Usage  \n  \n```xml  \n<object property=\"{} literalValue\" .../>  \n```  \n  \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.property>  \n    {} literalValue  \n  </object.property>  \n</object>  \n```  \n  \n## XAML Values  \n  \n|||  \n|-|-|  \n|*literalValue*|The literal string that follows the escape sequence. Typically this string contains an open or close brace ({ or }).|  \n  \n## Remarks  \n The escape sequence ({}) is used so that an open brace ({)can be used as a literal character in XAML.  \n  \n XAML readers typically use the open brace ({) to denote the entry point of a markup extension; however, they first check the next character to determine whether it is a closing brace (}). Only when the two braces ({}) are adjacent, are they considered an escape sequence.  \n  \n If the escape sequence is encountered, the XAML reader should process the remainder of the string as a string. However, if the escape sequence is applied to a member that has a type converter, the string might undergo type conversion when it is interpreted by a XAML writer.  \n  \n The escape sequence is not a markup extension and is not backed by a class. However, it is a convention that XAML readers (including custom XAML readers) should respect.  \n  \n A quotation mark (\") cannot be used as an escape sequence in this manner. If you need to set a quotation mark as a property value for a noncontent property, use property element syntax and place the quotation mark as a string inside the property element, or use an XML character entity. For a content property, the quotation mark can be the entire content.  \n  \n The escape sequence ({}) is frequently required when specifying an XML type that must include a namespace qualifier in a location where a XAML markup extension might appear. This includes the start of a XAML attribute value, and in a markup extension, immediately after an equal sign (=). The following example shows escape sequences for an XML namespace that appears at the start of a XAML attribute value.  \n  \n [!code-xaml[XLINQExample#StackPanelResources](~/samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml#stackpanelresources)]  \n  \n## See also\n\n- [Type Converters and Markup Extensions for XAML](type-converters-and-markup-extensions-for-xaml.md)\n- [XML Character Entities and XAML](xml-character-entities-and-xaml.md)\n","nodes":[{"pos":[4,426],"embed":true,"restype":"x-metadata","content":"title: \"{} Escape Sequence - Markup Extension\"\nms.date: \"03/30/2017\"\nf1_keywords: \n  - \"{}\"\nhelpviewer_keywords: \n  - \"XAML [XAML Services], quotation mark (\\\")\"\n  - \"{} escape sequence [XAML Services]\"\n  - \"XAML [XAML Services], {} escape sequence\"\n  - \"XAML [XAML Services], escape sequence\"\n  - \"quotation mark (\\\") [XAML Services]\"\n  - \"escape sequence [XAML Services]\"\nms.assetid: 3ce3e2ad-a868-43f9-9c98-b29561cb146e","nodes":[{"content":"{} Escape Sequence - Markup Extension","nodes":[{"pos":[0,37],"content":"{} Escape Sequence - Markup Extension","nodes":[{"content":"<ph id=\"ph1\">{}</ph> Escape Sequence - Markup Extension","pos":[0,37],"source":"{} Escape Sequence - Markup Extension"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[433,470],"content":"{} Escape Sequence / Markup Extension","linkify":"{} Escape Sequence / Markup Extension","nodes":[{"content":"<ph id=\"ph1\">{}</ph> Escape Sequence / Markup Extension","pos":[0,37],"source":"{} Escape Sequence / Markup Extension"}]},{"content":"Provides the XAML escape sequence for attribute values.","pos":[471,526]},{"content":"The escape sequence allows the subsequent values in the attribute to be interpreted as a literal.","pos":[527,624]},{"pos":[633,653],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[723,750],"content":"XAML Property Element Usage","linkify":"XAML Property Element Usage","nodes":[{"content":"XAML Property Element Usage","pos":[0,27]}]},{"pos":[864,875],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[896,910],"content":"<bpt id=\"p1\">*</bpt>literalValue<ept id=\"p1\">*</ept>","source":"*literalValue*"},{"content":"The literal string that follows the escape sequence.","pos":[911,963]},{"content":"Typically this string contains an open or close brace ({ or }).","pos":[964,1027]},{"pos":[1037,1044],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The escape sequence (<ph id=\"ph1\">{}</ph>) is used so that an open brace ({)can be used as a literal character in XAML.","pos":[1048,1149],"source":"The escape sequence ({}) is used so that an open brace ({)can be used as a literal character in XAML."},{"content":"XAML readers typically use the open brace ({) to denote the entry point of a markup extension; however, they first check the next character to determine whether it is a closing brace (}).","pos":[1156,1343]},{"content":"Only when the two braces (<ph id=\"ph1\">{}</ph>) are adjacent, are they considered an escape sequence.","pos":[1344,1427],"source":" Only when the two braces ({}) are adjacent, are they considered an escape sequence."},{"content":"If the escape sequence is encountered, the XAML reader should process the remainder of the string as a string.","pos":[1434,1544]},{"content":"However, if the escape sequence is applied to a member that has a type converter, the string might undergo type conversion when it is interpreted by a XAML writer.","pos":[1545,1708]},{"content":"The escape sequence is not a markup extension and is not backed by a class.","pos":[1715,1790]},{"content":"However, it is a convention that XAML readers (including custom XAML readers) should respect.","pos":[1791,1884]},{"content":"A quotation mark (\") cannot be used as an escape sequence in this manner.","pos":[1891,1964]},{"content":"If you need to set a quotation mark as a property value for a noncontent property, use property element syntax and place the quotation mark as a string inside the property element, or use an XML character entity.","pos":[1965,2177]},{"content":"For a content property, the quotation mark can be the entire content.","pos":[2178,2247]},{"content":"The escape sequence (<ph id=\"ph1\">{}</ph>) is frequently required when specifying an XML type that must include a namespace qualifier in a location where a XAML markup extension might appear.","pos":[2254,2427],"source":"The escape sequence ({}) is frequently required when specifying an XML type that must include a namespace qualifier in a location where a XAML markup extension might appear."},{"content":"This includes the start of a XAML attribute value, and in a markup extension, immediately after an equal sign (=).","pos":[2428,2542]},{"content":"The following example shows escape sequences for an XML namespace that appears at the start of a XAML attribute value.","pos":[2543,2661]},{"pos":[2819,2827],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2831,2930],"content":"<bpt id=\"p1\">[</bpt>Type Converters and Markup Extensions for XAML<ept id=\"p1\">](type-converters-and-markup-extensions-for-xaml.md)</ept>","source":"[Type Converters and Markup Extensions for XAML](type-converters-and-markup-extensions-for-xaml.md)"},{"pos":[2933,3002],"content":"<bpt id=\"p1\">[</bpt>XML Character Entities and XAML<ept id=\"p1\">](xml-character-entities-and-xaml.md)</ept>","source":"[XML Character Entities and XAML](xml-character-entities-and-xaml.md)"}]}