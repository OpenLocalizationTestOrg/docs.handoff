{"content":"---\ntitle: \"Passing arrays as arguments - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/05/2018\nhelpviewer_keywords: \n  - \"arrays [C#], passing as arguments\"\nms.assetid: f3a0971e-c87c-4a1f-8262-bc0a3b712772\n---\n# Passing arrays as arguments (C# Programming Guide)\n\nArrays can be passed as arguments to method parameters. Because arrays are reference types, the method can change the value of the elements.\n\n## Passing single-dimensional arrays as arguments\n\nYou can pass an initialized single-dimensional array to a method. For example, the following statement sends an array to a print method.\n\n[!code-csharp[csProgGuideArrays#34](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#34)]\n\nThe following code shows a partial implementation of the print method.\n\n[!code-csharp[csProgGuideArrays#33](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#33)]\n\nYou can initialize and pass a new array in one step, as is shown in the following example.\n\n[!code-csharp[CsProgGuideArrays#35](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#35)]\n\n### Example\n\nIn the following example, an array of strings is initialized and passed as an argument to a `DisplayArray` method for strings. The method displays the elements of the array. Next, the `ChangeArray` method reverses the array elements, and then the `ChangeArrayElements` method modifies the first three elements of the array. After each method returns, the `DisplayArray` method shows that passing an array by value doesn't prevent changes to the array elements.\n\n[!code-csharp[csProgGuideArrays#30](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/ArrayExample.cs)]\n\n## Passing multidimensional arrays as arguments\n\nYou pass an initialized multidimensional array to a method in the same way that you pass a one-dimensional array.\n\n[!code-csharp[csProgGuideArrays#41](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#41)]\n\nThe following code shows a partial declaration of a print method that accepts a two-dimensional array as its argument.\n\n[!code-csharp[csProgGuideArrays#36](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#36)]\n\nYou can initialize and pass a new array in one step, as is shown in the following example:\n\n[!code-csharp[csProgGuideArrays#32](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#32)]\n\n### Example\n\nIn the following example, a two-dimensional array of integers is initialized and passed to the `Print2DArray` method. The method displays the elements of the array.\n\n[!code-csharp[csProgGuideArrays#31](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#31)]\n\n## See also\n\n- [C# Programming Guide](../index.md)\n- [Arrays](index.md)\n- [Single-Dimensional Arrays](single-dimensional-arrays.md)\n- [Multidimensional Arrays](multidimensional-arrays.md)\n- [Jagged Arrays](jagged-arrays.md)\n","nodes":[{"pos":[4,214],"embed":true,"restype":"x-metadata","content":"title: \"Passing arrays as arguments - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/05/2018\nhelpviewer_keywords: \n  - \"arrays [C#], passing as arguments\"\nms.assetid: f3a0971e-c87c-4a1f-8262-bc0a3b712772","nodes":[{"content":"Passing arrays as arguments - C# Programming Guide","nodes":[{"pos":[0,50],"content":"Passing arrays as arguments - C# Programming Guide","nodes":[{"content":"Passing arrays as arguments - C# Programming Guide","pos":[0,50]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[221,271],"content":"Passing arrays as arguments (C# Programming Guide)","linkify":"Passing arrays as arguments (C# Programming Guide)","nodes":[{"content":"Passing arrays as arguments (C# Programming Guide)","pos":[0,50]}]},{"content":"Arrays can be passed as arguments to method parameters.","pos":[273,328]},{"content":"Because arrays are reference types, the method can change the value of the elements.","pos":[329,413]},{"pos":[418,464],"content":"Passing single-dimensional arrays as arguments","linkify":"Passing single-dimensional arrays as arguments","nodes":[{"content":"Passing single-dimensional arrays as arguments","pos":[0,46]}]},{"content":"You can pass an initialized single-dimensional array to a method.","pos":[466,531]},{"content":"For example, the following statement sends an array to a print method.","pos":[532,602]},{"content":"The following code shows a partial implementation of the print method.","pos":[724,794]},{"content":"You can initialize and pass a new array in one step, as is shown in the following example.","pos":[916,1006]},{"pos":[1132,1139],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, an array of strings is initialized and passed as an argument to a <ph id=\"ph1\">`DisplayArray`</ph> method for strings.","pos":[1141,1267],"source":"In the following example, an array of strings is initialized and passed as an argument to a `DisplayArray` method for strings."},{"content":"The method displays the elements of the array.","pos":[1268,1314]},{"content":"Next, the <ph id=\"ph1\">`ChangeArray`</ph> method reverses the array elements, and then the <ph id=\"ph2\">`ChangeArrayElements`</ph> method modifies the first three elements of the array.","pos":[1315,1464],"source":" Next, the `ChangeArray` method reverses the array elements, and then the `ChangeArrayElements` method modifies the first three elements of the array."},{"content":"After each method returns, the <ph id=\"ph1\">`DisplayArray`</ph> method shows that passing an array by value doesn't prevent changes to the array elements.","pos":[1465,1601],"source":" After each method returns, the `DisplayArray` method shows that passing an array by value doesn't prevent changes to the array elements."},{"pos":[1729,1773],"content":"Passing multidimensional arrays as arguments","linkify":"Passing multidimensional arrays as arguments","nodes":[{"content":"Passing multidimensional arrays as arguments","pos":[0,44]}]},{"content":"You pass an initialized multidimensional array to a method in the same way that you pass a one-dimensional array.","pos":[1775,1888]},{"content":"The following code shows a partial declaration of a print method that accepts a two-dimensional array as its argument.","pos":[2010,2128]},{"content":"You can initialize and pass a new array in one step, as is shown in the following example:","pos":[2250,2340]},{"pos":[2466,2473],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, a two-dimensional array of integers is initialized and passed to the <ph id=\"ph1\">`Print2DArray`</ph> method.","pos":[2475,2592],"source":"In the following example, a two-dimensional array of integers is initialized and passed to the `Print2DArray` method."},{"content":"The method displays the elements of the array.","pos":[2593,2639]},{"pos":[2764,2772],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2776,2811],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../index.md)</ept>","source":"[C# Programming Guide](../index.md)"},{"pos":[2814,2832],"content":"<bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](index.md)</ept>","source":"[Arrays](index.md)"},{"pos":[2835,2892],"content":"<bpt id=\"p1\">[</bpt>Single-Dimensional Arrays<ept id=\"p1\">](single-dimensional-arrays.md)</ept>","source":"[Single-Dimensional Arrays](single-dimensional-arrays.md)"},{"pos":[2895,2948],"content":"<bpt id=\"p1\">[</bpt>Multidimensional Arrays<ept id=\"p1\">](multidimensional-arrays.md)</ept>","source":"[Multidimensional Arrays](multidimensional-arrays.md)"},{"pos":[2951,2984],"content":"<bpt id=\"p1\">[</bpt>Jagged Arrays<ept id=\"p1\">](jagged-arrays.md)</ept>","source":"[Jagged Arrays](jagged-arrays.md)"}]}