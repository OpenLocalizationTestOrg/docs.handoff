{"content":"---\ntitle: \"Getting Started Sample | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"basic samples [WCF], getting started\"\nms.assetid: 967a3d94-0261-49ff-b85a-20bb07f1af20\ncaps.latest.revision: 60\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Getting Started Sample\nThe Getting Started sample demonstrates how to implement a typical service and a typical client using [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]. This sample is the basis for all other basic technology samples.  \n  \n> [!NOTE]\n>  The setup procedure and build instructions for this sample are located at the end of this topic.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your computer. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\GettingStarted\\GettingStarted`  \n  \n The service describes the operations it performs in a service contract that it exposes publicly as metadata. The service also contains the code to implement the operations.  \n  \n The client contains a definition of the service contract and a proxy class for accessing the service. The proxy code is generated from the service metadata using the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).  \n  \n On [!INCLUDE[wv](../../../../includes/wv-md.md)], the service is hosted in the Windows Activation Service (WAS). On [!INCLUDE[wxp](../../../../includes/wxp-md.md)] and [!INCLUDE[ws2003](../../../../includes/ws2003-md.md)], it is hosted by Internet Information Services (IIS) and ASP.NET. Hosting a service in IIS or WAS allows the service to be activated automatically when it is accessed for the first time.  \n  \n> [!NOTE]\n>  If you would prefer to get started with a sample that hosts the service in a console application instead of IIS, see the [Self-Host](../../../../docs/framework/wcf/samples/self-host.md) sample.  \n  \n The service and client specify access details in configuration file settings, which provide flexibility at the time of deployment. This includes an endpoint definition that specifies an address, binding, and contract. The binding specifies transport and security details for how the service is to be accessed.  \n  \n The service configures a run-time behavior to publish its metadata.  \n  \n The service implements a contract that defines a request-reply communication pattern. The contract is defined by the `ICalculator` interface, which exposes math operations (add, subtract, multiply, and divide). The client makes requests to a given math operation and the service replies with the result. The service implements an `ICalculator` contract that is defined in the following code.  \n  \n```vb  \n' Define a service contract.  \n    <ServiceContract(Namespace:=\"http://Microsoft.Samples.GettingStarted\")>  \n     Public Interface ICalculator  \n        <OperationContract()>  \n        Function Add(ByVal n1 As Double, ByVal n2 As Double) As Double  \n        <OperationContract()>  \n        Function Subtract(ByVal n1 As Double, ByVal n2 As Double) As Double  \n        <OperationContract()>  \n        Function Multiply(ByVal n1 As Double, ByVal n2 As Double) As Double  \n        <OperationContract()>  \n        Function Divide(ByVal n1 As Double, ByVal n2 As Double) As Double  \n    End Interface  \n  \n```  \n  \n```csharp  \n// Define a service contract.  \n[ServiceContract(Namespace=\"http://Microsoft.ServiceModel.Samples\")]  \npublic interface ICalculator  \n{  \n    [OperationContract]  \n    double Add(double n1, double n2);  \n    [OperationContract]  \n    double Subtract(double n1, double n2);  \n    [OperationContract]  \n    double Multiply(double n1, double n2);  \n    [OperationContract]  \n    double Divide(double n1, double n2);  \n}  \n  \n```  \n  \n The service implementation calculates and returns the appropriate result, as shown in the following example code.  \n  \n```vb  \n' Service class which implements the service contract.  \nPublic Class CalculatorService  \nImplements ICalculator  \nPublic Function Add(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Add  \nReturn n1 + n2  \nEnd Function  \n  \nPublic Function Subtract(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Subtract  \nReturn n1 - n2  \nEnd Function  \n  \nPublic Function Multiply(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Multiply  \nReturn n1 * n2  \nEnd Function  \n  \nPublic Function Divide(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Divide  \nReturn n1 / n2  \nEnd Function  \nEnd Class  \n  \n```  \n  \n```csharp  \n// Service class that implements the service contract.  \npublic class CalculatorService : ICalculator  \n{  \n    public double Add(double n1, double n2)  \n    {  \n        return n1 + n2;  \n    }  \n    public double Subtract(double n1, double n2)  \n    {  \n        return n1 - n2;  \n    }  \n    public double Multiply(double n1, double n2)  \n    {  \n        return n1 * n2;  \n    }  \n    public double Divide(double n1, double n2)  \n    {  \n        return n1 / n2;  \n    }  \n}  \n  \n```  \n  \n The service exposes an endpoint for communicating with the service, defined using a configuration file (Web.config), as shown in the following sample configuration.  \n  \n```xaml  \n<services>  \n    <service   \n        name=\"Microsoft.ServiceModel.Samples.CalculatorService\"  \n        behaviorConfiguration=\"CalculatorServiceBehavior\">  \n        <!-- ICalculator is exposed at the base address provided by  \n         host: http://localhost/servicemodelsamples/service.svc.  -->  \n       <endpoint address=\"\"  \n              binding=\"wsHttpBinding\"  \n              contract=\"Microsoft.ServiceModel.Samples.ICalculator\" />  \n       ...  \n    </service>  \n</services>  \n  \n```  \n  \n The service exposes the endpoint at the base address provided by the IIS or WAS host. The binding is configured with a standard <xref:System.ServiceModel.WSHttpBinding>, which provides HTTP communication and standard Web service protocols for addressing and security. The contract is the `ICalculator` implemented by the service.  \n  \n As configured, the service can be accessed at http://localhost/servicemodelsamples/service.svc by a client on the same computer. For clients on remote computersto access the service, a fully-qualified domain name must be specified instead of localhost.  \n  \n The framework does not expose metadata by default. As such, the service turns on the <xref:System.ServiceModel.Description.ServiceMetadataBehavior> and exposes a metadata exchange (MEX) endpoint at http://localhost/servicemodelsamples/service.svc/mex. The following configuration demonstrates this.  \n  \n```xaml  \n<system.serviceModel>  \n  <services>  \n    <service   \n        name=\"Microsoft.ServiceModel.Samples.CalculatorService\"  \n        behaviorConfiguration=\"CalculatorServiceBehavior\">  \n      ...  \n      <!-- the mex endpoint is explosed at  \n       http://localhost/servicemodelsamples/service.svc/mex -->  \n      <endpoint address=\"mex\"  \n                binding=\"mexHttpBinding\"  \n                contract=\"IMetadataExchange\" />  \n    </service>  \n  </services>  \n  \n  <!--For debugging purposes set the includeExceptionDetailInFaults  \n   attribute to true-->  \n  <behaviors>  \n    <serviceBehaviors>  \n      <behavior name=\"CalculatorServiceBehavior\">  \n        <serviceMetadata httpGetEnabled=\"True\"/>  \n        <serviceDebug includeExceptionDetailInFaults=\"False\" />  \n      </behavior>  \n    </serviceBehaviors>  \n  </behaviors>  \n</system.serviceModel>  \n```  \n  \n The client communicates using a given contract type by using a client class that is generated by the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md). This generated client is contained in the file generatedClient.cs or generatedClient.vb. This utility retrieves metadata for a given service and generates a client for use by the client application to communicate using a given contract type. The hosted service must be available to generate the client code, because the service is used to retrieve the updated metadata.  \n  \n Run the following command from the SDK command prompt in the client directory to generate the typed proxy:  \n  \n```  \nsvcutil.exe /n:\"http://Microsoft.ServiceModel.Samples,Microsoft.ServiceModel.Samples\" http://localhost/servicemodelsamples/service.svc/mex /out:generatedClient.cs  \n```  \n  \n To generate client in Visual Basic type the following from the SDK command prompt:  \n  \n `Svcutil.exe /n:\"http://Microsoft.ServiceModel.Samples,Microsoft.ServiceModel.Samples\" http://localhost/servicemodelsamples/service.svc/mex /l:vb /out:generatedClient.vb`  \n  \n By using the generated client, the client can access a given service endpoint by configuring the appropriate address and binding. Like the service, the client uses a configuration file (App.config) to specify the endpoint with which it wants to communicate. The client endpoint configuration consists of an absolute address for the service endpoint, the binding, and the contract, as shown in the following example.  \n  \n```xaml  \n<client>  \n     <endpoint  \n         address=\"http://localhost/servicemodelsamples/service.svc\"   \n         binding=\"wsHttpBinding\"   \n         contract=\" Microsoft.ServiceModel.Samples.ICalculator\" />  \n</client>  \n  \n```  \n  \n The client implementation instantiates the client and uses the typed interface to begin communicating with the service, as shown in the following example code.  \n  \n```vb  \n' Create a client  \nDim client As New CalculatorClient()  \n  \n' Call the Add service operation.  \n            Dim value1 = 100.0R  \n            Dim value2 = 15.99R  \n            Dim result = client.Add(value1, value2)  \nConsole.WriteLine(\"Add({0},{1}) = {2}\", value1, value2, result)  \n  \n' Call the Subtract service operation.  \nvalue1 = 145.00R  \nvalue2 = 76.54R  \nresult = client.Subtract(value1, value2)  \nConsole.WriteLine(\"Subtract({0},{1}) = {2}\", value1, value2, result)  \n  \n' Call the Multiply service operation.  \nvalue1 = 9.00R  \nvalue2 = 81.25R  \nresult = client.Multiply(value1, value2)  \nConsole.WriteLine(\"Multiply({0},{1}) = {2}\", value1, value2, result)  \n  \n' Call the Divide service operation.  \nvalue1 = 22.00R  \nvalue2 = 7.00R  \nresult = client.Divide(value1, value2)  \nConsole.WriteLine(\"Divide({0},{1}) = {2}\", value1, value2, result)  \n  \n'Closing the client gracefully closes the connection and cleans up resources  \n  \n```  \n  \n```csharp  \n// Create a client.  \nCalculatorClient client = new CalculatorClient();  \n  \n// Call the Add service operation.  \ndouble value1 = 100.00D;  \ndouble value2 = 15.99D;  \ndouble result = client.Add(value1, value2);  \nConsole.WriteLine(\"Add({0},{1}) = {2}\", value1, value2, result);  \n  \n// Call the Subtract service operation.  \nvalue1 = 145.00D;  \nvalue2 = 76.54D;  \nresult = client.Subtract(value1, value2);  \nConsole.WriteLine(\"Subtract({0},{1}) = {2}\", value1, value2, result);  \n  \n// Call the Multiply service operation.  \nvalue1 = 9.00D;  \nvalue2 = 81.25D;  \nresult = client.Multiply(value1, value2);  \nConsole.WriteLine(\"Multiply({0},{1}) = {2}\", value1, value2, result);  \n  \n// Call the Divide service operation.  \nvalue1 = 22.00D;  \nvalue2 = 7.00D;  \nresult = client.Divide(value1, value2);  \nConsole.WriteLine(\"Divide({0},{1}) = {2}\", value1, value2, result);  \n  \n//Closing the client releases all communication resources.  \nclient.Close();  \n  \n```  \n  \n When you run the sample, the operation requests and responses are displayed in the client console window. Press ENTER in the client window to shut down the client.  \n  \n```  \nAdd(100,15.99) = 115.99  \nSubtract(145,76.54) = 68.46  \nMultiply(9,81.25) = 731.25  \nDivide(22,7) = 3.14285714285714  \n  \nPress <ENTER> to terminate client.  \n  \n```  \n  \n The Getting Started sample shows the standard way to create a service and client. The other [Basic](../../../../docs/framework/wcf/samples/basic-sample.md) build on this sample to demonstrate specific product features.  \n  \n### To set up, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n3.  To run the sample in a single- or cross-computer configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md).  \n  \n## See Also  \n [How to: Host a WCF Service in a Managed Application](../../../../docs/framework/wcf/how-to-host-a-wcf-service-in-a-managed-application.md)   \n [How to: Host a WCF Service in IIS](../../../../docs/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis.md)","nodes":[{"pos":[12,51],"content":"Getting Started Sample | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Getting Started Sample | Microsoft Docs","pos":[0,39]}]},{"pos":[449,471],"content":"Getting Started Sample","linkify":"Getting Started Sample","nodes":[{"content":"Getting Started Sample","pos":[0,22]}]},{"content":"The Getting Started sample demonstrates how to implement a typical service and a typical client using <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph>.","pos":[472,630],"source":"The Getting Started sample demonstrates how to implement a typical service and a typical client using [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]."},{"content":"This sample is the basis for all other basic technology samples.","pos":[631,695]},{"pos":[703,810],"content":"[!NOTE]\n The setup procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The setup procedure and build instructions for this sample are located at the end of this topic.","pos":[9,105]}]},{"pos":[818,951],"content":"[!IMPORTANT]\n The samples may already be installed on your computer. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your computer. Check for the following (default) directory before continuing.","pos":[13,131],"nodes":[{"content":"The samples may already be installed on your computer.","pos":[1,55]},{"content":"Check for the following (default) directory before continuing.","pos":[56,118]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[1005,1331],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[1332,1382]},{"content":"The service describes the operations it performs in a service contract that it exposes publicly as metadata.","pos":[1466,1574]},{"content":"The service also contains the code to implement the operations.","pos":[1575,1638]},{"content":"The client contains a definition of the service contract and a proxy class for accessing the service.","pos":[1645,1746]},{"content":"The proxy code is generated from the service metadata using the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.","pos":[1747,1944],"source":" The proxy code is generated from the service metadata using the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)."},{"content":"On <ph id=\"ph1\">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>, the service is hosted in the Windows Activation Service (WAS).","pos":[1951,2063],"source":"On [!INCLUDE[wv](../../../../includes/wv-md.md)], the service is hosted in the Windows Activation Service (WAS)."},{"content":"On <ph id=\"ph1\">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph>, it is hosted by Internet Information Services (IIS) and ASP.NET.","pos":[2064,2238],"source":" On [!INCLUDE[wxp](../../../../includes/wxp-md.md)] and [!INCLUDE[ws2003](../../../../includes/ws2003-md.md)], it is hosted by Internet Information Services (IIS) and ASP.NET."},{"content":"Hosting a service in IIS or WAS allows the service to be activated automatically when it is accessed for the first time.","pos":[2239,2359]},{"pos":[2367,2571],"content":"[!NOTE]\n If you would prefer to get started with a sample that hosts the service in a console application instead of IIS, see the [Self-Host](../../../../docs/framework/wcf/samples/self-host.md) sample.","leadings":["","> "],"nodes":[{"content":"If you would prefer to get started with a sample that hosts the service in a console application instead of IIS, see the <bpt id=\"p1\">[</bpt>Self-Host<ept id=\"p1\">](../../../../docs/framework/wcf/samples/self-host.md)</ept> sample.","pos":[9,202],"source":" If you would prefer to get started with a sample that hosts the service in a console application instead of IIS, see the [Self-Host](../../../../docs/framework/wcf/samples/self-host.md) sample."}]},{"content":"The service and client specify access details in configuration file settings, which provide flexibility at the time of deployment.","pos":[2578,2708]},{"content":"This includes an endpoint definition that specifies an address, binding, and contract.","pos":[2709,2795]},{"content":"The binding specifies transport and security details for how the service is to be accessed.","pos":[2796,2887]},{"content":"The service configures a run-time behavior to publish its metadata.","pos":[2894,2961]},{"content":"The service implements a contract that defines a request-reply communication pattern.","pos":[2968,3053]},{"content":"The contract is defined by the <ph id=\"ph1\">`ICalculator`</ph> interface, which exposes math operations (add, subtract, multiply, and divide).","pos":[3054,3178],"source":" The contract is defined by the `ICalculator` interface, which exposes math operations (add, subtract, multiply, and divide)."},{"content":"The client makes requests to a given math operation and the service replies with the result.","pos":[3179,3271]},{"content":"The service implements an <ph id=\"ph1\">`ICalculator`</ph> contract that is defined in the following code.","pos":[3272,3359],"source":" The service implements an `ICalculator` contract that is defined in the following code."},{"content":"The service implementation calculates and returns the appropriate result, as shown in the following example code.","pos":[4427,4540]},{"content":"The service exposes an endpoint for communicating with the service, defined using a configuration file (Web.config), as shown in the following sample configuration.","pos":[5754,5918]},{"content":"The service exposes the endpoint at the base address provided by the IIS or WAS host.","pos":[6432,6517]},{"content":"The binding is configured with a standard <ph id=\"ph1\">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph>, which provides HTTP communication and standard Web service protocols for addressing and security.","pos":[6518,6699],"source":" The binding is configured with a standard <xref:System.ServiceModel.WSHttpBinding>, which provides HTTP communication and standard Web service protocols for addressing and security."},{"content":"The contract is the <ph id=\"ph1\">`ICalculator`</ph> implemented by the service.","pos":[6700,6761],"source":" The contract is the `ICalculator` implemented by the service."},{"content":"As configured, the service can be accessed at http://localhost/servicemodelsamples/service.svc by a client on the same computer.","pos":[6768,6896]},{"content":"For clients on remote computersto access the service, a fully-qualified domain name must be specified instead of localhost.","pos":[6897,7020]},{"content":"The framework does not expose metadata by default.","pos":[7027,7077]},{"content":"As such, the service turns on the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> and exposes a metadata exchange (MEX) endpoint at http://localhost/servicemodelsamples/service.svc/mex.","pos":[7078,7278],"source":" As such, the service turns on the <xref:System.ServiceModel.Description.ServiceMetadataBehavior> and exposes a metadata exchange (MEX) endpoint at http://localhost/servicemodelsamples/service.svc/mex."},{"content":"The following configuration demonstrates this.","pos":[7279,7325]},{"content":"The client communicates using a given contract type by using a client class that is generated by the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.","pos":[8211,8445],"source":"The client communicates using a given contract type by using a client class that is generated by the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)."},{"content":"This generated client is contained in the file generatedClient.cs or generatedClient.vb.","pos":[8446,8534]},{"content":"This utility retrieves metadata for a given service and generates a client for use by the client application to communicate using a given contract type.","pos":[8535,8687]},{"content":"The hosted service must be available to generate the client code, because the service is used to retrieve the updated metadata.","pos":[8688,8815]},{"content":"Run the following command from the SDK command prompt in the client directory to generate the typed proxy:","pos":[8822,8928]},{"content":"To generate client in Visual Basic type the following from the SDK command prompt:","pos":[9115,9197]},{"content":"By using the generated client, the client can access a given service endpoint by configuring the appropriate address and binding.","pos":[9381,9510]},{"content":"Like the service, the client uses a configuration file (App.config) to specify the endpoint with which it wants to communicate.","pos":[9511,9638]},{"content":"The client endpoint configuration consists of an absolute address for the service endpoint, the binding, and the contract, as shown in the following example.","pos":[9639,9796]},{"content":"The client implementation instantiates the client and uses the typed interface to begin communicating with the service, as shown in the following example code.","pos":[10041,10200]},{"content":"When you run the sample, the operation requests and responses are displayed in the client console window.","pos":[12146,12251]},{"content":"Press ENTER in the client window to shut down the client.","pos":[12252,12309]},{"content":"The Getting Started sample shows the standard way to create a service and client.","pos":[12493,12574]},{"content":"The other <bpt id=\"p1\">[</bpt>Basic<ept id=\"p1\">](../../../../docs/framework/wcf/samples/basic-sample.md)</ept> build on this sample to demonstrate specific product features.","pos":[12575,12711],"source":" The other [Basic](../../../../docs/framework/wcf/samples/basic-sample.md) build on this sample to demonstrate specific product features."},{"pos":[12721,12757],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[12767,12966],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[12976,13185],"content":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[13195,13404],"content":"To run the sample in a single- or cross-computer configuration, follow the instructions in <bpt id=\"p1\">[</bpt>Running the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.","source":"To run the sample in a single- or cross-computer configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md)."},{"pos":[13413,13421],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>How to: Host a WCF Service in a Managed Application<ept id=\"p1\">](../../../../docs/framework/wcf/how-to-host-a-wcf-service-in-a-managed-application.md)</ept><ph id=\"ph1\"> </ph>","pos":[13425,13565],"source":"[How to: Host a WCF Service in a Managed Application](../../../../docs/framework/wcf/how-to-host-a-wcf-service-in-a-managed-application.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Host a WCF Service in IIS<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis.md)</ept>","pos":[13568,13688],"source":" [How to: Host a WCF Service in IIS](../../../../docs/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis.md)"}]}