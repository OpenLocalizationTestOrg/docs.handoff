{"content":"---\ntitle: \"-define (C# Compiler Options)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"/define\"\nhelpviewer_keywords: \n  - \"-define compiler option [C#]\"\n  - \"/define compiler option [C#]\"\n  - \"-d compiler option [C#]\"\n  - \"define compiler option [C#]\"\n  - \"/d compiler option [C#]\"\n  - \"d compiler option [C#]\"\nms.assetid: f17d7b4d-82d0-4133-8563-68cced1cac6e\n---\n# -define (C# Compiler Options)\nThe **-define** option defines `name` as a symbol in all source code files your program.  \n  \n## Syntax  \n  \n```console  \n-define:name[;name2]  \n```  \n  \n## Arguments  \n `name`, `name2`  \n The name of one or more symbols that you want to define.  \n  \n## Remarks  \n The **-define** option has the same effect as using a [#define](../../../csharp/language-reference/preprocessor-directives/preprocessor-define.md) preprocessor directive except that the compiler option is in effect for all files in the project. A symbol remains defined in a source file until an [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md) directive in the source file removes the definition. When you use the -define option, an `#undef` directive in one file has no effect on other source code files in the project.  \n  \n You can use symbols created by this option with [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md), [#else](../../../csharp/language-reference/preprocessor-directives/preprocessor-else.md), [#elif](../../../csharp/language-reference/preprocessor-directives/preprocessor-elif.md), and [#endif](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md) to compile source files conditionally.  \n  \n **-d** is the short form of **-define**.  \n  \n You can define multiple symbols with **-define** by using a semicolon or comma to separate symbol names. For example:  \n  \n```console  \n-define:DEBUG;TUESDAY  \n```  \n  \n The C# compiler itself defines no symbols or macros that you can use in your source code; all symbol definitions must be user-defined.  \n  \n> [!NOTE]\n>  The C# `#define` does not allow a symbol to be given a value, as in languages such as C++. For example, `#define` cannot be used to create a macro or to define a constant. If you need to define a constant, use an `enum` variable. If you want to create a C++ style macro, consider alternatives such as generics. Since macros are notoriously error-prone, C# disallows their use but provides safer alternatives.  \n  \n### To set this compiler option in the Visual Studio development environment  \n  \n1.  Open the project's **Properties** page.  \n  \n2.  On the **Build** tab, type the symbol that is to be defined in the **Conditional compilation symbols** box. For example, if you are using the code example that follows, just type `xx` into the text box.  \n  \n For information on how to set this compiler option programmatically, see <xref:VSLangProj80.CSharpProjectConfigurationProperties3.DefineConstants%2A>.  \n  \n## Example  \n  \n```csharp  \n// preprocessor_define.cs  \n// compile with: -define:xx  \n// or uncomment the next line  \n// #define xx  \nusing System;  \npublic class Test   \n{  \n    public static void Main()   \n    {  \n        #if (xx)   \n            Console.WriteLine(\"xx defined\");  \n        #else  \n            Console.WriteLine(\"xx not defined\");  \n        #endif  \n    }  \n}  \n```  \n  \n## See also\n\n- [C# Compiler Options](../../../csharp/language-reference/compiler-options/index.md)\n- [Managing Project and Solution Properties](/visualstudio/ide/managing-project-and-solution-properties)\n","nodes":[{"pos":[4,354],"embed":true,"restype":"x-metadata","content":"title: \"-define (C# Compiler Options)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"/define\"\nhelpviewer_keywords: \n  - \"-define compiler option [C#]\"\n  - \"/define compiler option [C#]\"\n  - \"-d compiler option [C#]\"\n  - \"define compiler option [C#]\"\n  - \"/d compiler option [C#]\"\n  - \"d compiler option [C#]\"\nms.assetid: f17d7b4d-82d0-4133-8563-68cced1cac6e","nodes":[{"content":"-define (C# Compiler Options)","nodes":[{"pos":[0,29],"content":"-define (C# Compiler Options)","nodes":[{"content":"-define (C# Compiler Options)","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[361,390],"content":"-define (C# Compiler Options)","linkify":"-define (C# Compiler Options)","nodes":[{"content":"-define (C# Compiler Options)","pos":[0,29]}]},{"pos":[391,479],"content":"The <bpt id=\"p1\">**</bpt>-define<ept id=\"p1\">**</ept> option defines <ph id=\"ph1\">`name`</ph> as a symbol in all source code files your program.","source":"The **-define** option defines `name` as a symbol in all source code files your program."},{"pos":[488,494],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[548,557],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"<ph id=\"ph1\">`name`</ph>, <ph id=\"ph2\">`name2`</ph>","pos":[561,576],"source":"`name`, `name2`"},{"content":"The name of one or more symbols that you want to define.","pos":[580,636]},{"pos":[645,652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">**</bpt>-define<ept id=\"p1\">**</ept> option has the same effect as using a <bpt id=\"p2\">[</bpt>#define<ept id=\"p2\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-define.md)</ept> preprocessor directive except that the compiler option is in effect for all files in the project.","pos":[656,900],"source":"The **-define** option has the same effect as using a [#define](../../../csharp/language-reference/preprocessor-directives/preprocessor-define.md) preprocessor directive except that the compiler option is in effect for all files in the project."},{"content":"A symbol remains defined in a source file until an <bpt id=\"p1\">[</bpt>#undef<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)</ept> directive in the source file removes the definition.","pos":[901,1095],"source":" A symbol remains defined in a source file until an [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md) directive in the source file removes the definition."},{"content":"When you use the -define option, an <ph id=\"ph1\">`#undef`</ph> directive in one file has no effect on other source code files in the project.","pos":[1096,1219],"source":" When you use the -define option, an `#undef` directive in one file has no effect on other source code files in the project."},{"pos":[1226,1673],"content":"You can use symbols created by this option with <bpt id=\"p1\">[</bpt>#if<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)</ept>, <bpt id=\"p2\">[</bpt>#else<ept id=\"p2\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-else.md)</ept>, <bpt id=\"p3\">[</bpt>#elif<ept id=\"p3\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-elif.md)</ept>, and <bpt id=\"p4\">[</bpt>#endif<ept id=\"p4\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md)</ept> to compile source files conditionally.","source":"You can use symbols created by this option with [#if](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md), [#else](../../../csharp/language-reference/preprocessor-directives/preprocessor-else.md), [#elif](../../../csharp/language-reference/preprocessor-directives/preprocessor-elif.md), and [#endif](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md) to compile source files conditionally."},{"pos":[1680,1720],"content":"<bpt id=\"p1\">**</bpt>-d<ept id=\"p1\">**</ept> is the short form of <bpt id=\"p2\">**</bpt>-define<ept id=\"p2\">**</ept>.","source":"**-d** is the short form of **-define**."},{"content":"You can define multiple symbols with <bpt id=\"p1\">**</bpt>-define<ept id=\"p1\">**</ept> by using a semicolon or comma to separate symbol names.","pos":[1727,1831],"source":"You can define multiple symbols with **-define** by using a semicolon or comma to separate symbol names."},{"content":"For example:","pos":[1832,1844]},{"content":"The C# compiler itself defines no symbols or macros that you can use in your source code; all symbol definitions must be user-defined.","pos":[1897,2031]},{"pos":[2039,2458],"content":"[!NOTE]\n The C# `#define` does not allow a symbol to be given a value, as in languages such as C++. For example, `#define` cannot be used to create a macro or to define a constant. If you need to define a constant, use an `enum` variable. If you want to create a C++ style macro, consider alternatives such as generics. Since macros are notoriously error-prone, C# disallows their use but provides safer alternatives.","leadings":["","> "],"nodes":[{"content":"The C# `#define` does not allow a symbol to be given a value, as in languages such as C++. For example, `#define` cannot be used to create a macro or to define a constant. If you need to define a constant, use an `enum` variable. If you want to create a C++ style macro, consider alternatives such as generics. Since macros are notoriously error-prone, C# disallows their use but provides safer alternatives.","pos":[9,417],"nodes":[{"content":"The C# <ph id=\"ph1\">`#define`</ph> does not allow a symbol to be given a value, as in languages such as C++.","pos":[0,90],"source":"The C# `#define` does not allow a symbol to be given a value, as in languages such as C++."},{"content":"For example, <ph id=\"ph1\">`#define`</ph> cannot be used to create a macro or to define a constant.","pos":[91,171],"source":" For example, `#define` cannot be used to create a macro or to define a constant."},{"content":"If you need to define a constant, use an <ph id=\"ph1\">`enum`</ph> variable.","pos":[172,229],"source":" If you need to define a constant, use an `enum` variable."},{"content":"If you want to create a C++ style macro, consider alternatives such as generics.","pos":[230,310]},{"content":"Since macros are notoriously error-prone, C# disallows their use but provides safer alternatives.","pos":[311,408]}]}]},{"pos":[2468,2540],"content":"To set this compiler option in the Visual Studio development environment","linkify":"To set this compiler option in the Visual Studio development environment","nodes":[{"content":"To set this compiler option in the Visual Studio development environment","pos":[0,72]}]},{"pos":[2550,2589],"content":"Open the project's <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> page.","source":"Open the project's **Properties** page."},{"content":"On the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> tab, type the symbol that is to be defined in the <bpt id=\"p2\">**</bpt>Conditional compilation symbols<ept id=\"p2\">**</ept> box.","pos":[2599,2706],"source":"On the **Build** tab, type the symbol that is to be defined in the **Conditional compilation symbols** box."},{"content":"For example, if you are using the code example that follows, just type <ph id=\"ph1\">`xx`</ph> into the text box.","pos":[2707,2801],"source":" For example, if you are using the code example that follows, just type `xx` into the text box."},{"pos":[2808,2958],"content":"For information on how to set this compiler option programmatically, see <ph id=\"ph1\">&lt;xref:VSLangProj80.CSharpProjectConfigurationProperties3.DefineConstants%2A&gt;</ph>.","source":"For information on how to set this compiler option programmatically, see <xref:VSLangProj80.CSharpProjectConfigurationProperties3.DefineConstants%2A>."},{"pos":[2967,2974],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3355,3363],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3367,3450],"content":"<bpt id=\"p1\">[</bpt>C# Compiler Options<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/index.md)</ept>","source":"[C# Compiler Options](../../../csharp/language-reference/compiler-options/index.md)"},{"pos":[3453,3555],"content":"<bpt id=\"p1\">[</bpt>Managing Project and Solution Properties<ept id=\"p1\">](/visualstudio/ide/managing-project-and-solution-properties)</ept>","source":"[Managing Project and Solution Properties](/visualstudio/ide/managing-project-and-solution-properties)"}]}