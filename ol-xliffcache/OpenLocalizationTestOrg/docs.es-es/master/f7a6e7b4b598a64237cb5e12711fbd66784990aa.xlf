<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="validating-an-xml-document-in-the-dom.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7a6e7b4b598a64237cb5e12711fbd66784990aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\validating-an-xml-document-in-the-dom.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">064b4482a7f99505e2a3b2ee65f2daa0aff95679</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ea8f9508272cb9325abe30a5357ef0e99c08137</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Validating an XML Document in the DOM | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Validating an XML Document in the DOM</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> class does not validate the XML in the Document Object Model (DOM) against an XML Schema definition language (XSD) schema or document type definition (DTD) by default; the XML is only verified to be well-formed.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To validate the XML in the DOM, you can validate the XML as it is loaded into the DOM by passing a schema-validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to the <ph id="ph2">&lt;xref:System.Xml.XmlDocument.Load%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Xml.XmlDocument&gt;</ph> class, or validate a previously unvalidated XML document in the DOM using the <ph id="ph4">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method of the <ph id="ph5">&lt;xref:System.Xml.XmlDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Validating an XML Document As It Is Loaded into the DOM</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> class validates the XML data as it is loaded into the DOM when a validating <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> is passed to the <ph id="ph3">&lt;xref:System.Xml.XmlDocument.Load%2A&gt;</ph> method of the <ph id="ph4">&lt;xref:System.Xml.XmlDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>After successful validation, schema defaults are applied, text values are converted to atomic values as necessary, and type information is associated with validated information items.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As a result, typed XML data replaces previously untyped XML data.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating an XML Schema-Validating XmlReader</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To create an XML schema-validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, follow these steps.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Construct a new <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Add an XML schema to the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Schemas%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`Schema`</ph> as the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.ValidationType%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optionally specify <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.ValidationFlags%2A&gt;</ph> and a <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.ValidationEventHandler&gt;</ph> to handle schema validation errors and warnings encountered during validation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Finally, pass the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> class along with the XML document, creating a schema-validating <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the code example that follows, a schema-validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> validates the XML data loaded into the DOM.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Invalid modifications are made to the XML document and the document is then revalidated, causing schema validation errors.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Finally, one of the errors is corrected, and then part of the XML document is partially validated.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as input.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> file as input.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Consider the following when validating XML data as it is loaded into the DOM.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the above example, the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.ValidationEventHandler&gt;</ph> is called whenever an invalid type is encountered.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.ValidationEventHandler&gt;</ph> is not set on the validating <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>,an <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> is thrown when <ph id="ph4">&lt;xref:System.Xml.XmlDocument.Load%2A&gt;</ph> is called if any attribute or element type does not match the corresponding type specified in the validating schema.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When an XML document is loaded into an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object with an associated schema that defines default values, the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> treats these defaults as if they appeared in the XML document.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This means that the <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsEmptyElement%2A&gt;</ph> property always returns <ph id="ph2">`false`</ph> for an element that was defaulted from the schema.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Even if in the XML document, it was written as an empty element.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Validating an XML Document in the DOM</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> class validates the XML data loaded in the DOM against the schemas in the <ph id="ph3">&lt;xref:System.Xml.XmlDocument&gt;</ph> object's <ph id="ph4">&lt;xref:System.Xml.XmlDocument.Schemas%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>After successful validation, schema defaults are applied, text values are converted to atomic values as necessary, and type information is associated with validated information items.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>As a result, typed XML data replaces previously untyped XML data.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The example below is similar to the example in "Validating an XML Document As It Is Loaded into the DOM" above.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this example, the XML document is not validated as it is loaded into the DOM, but rather is validated after it has been loaded into the DOM using the <ph id="ph1">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method validates the XML document against the XML schemas contained in the <ph id="ph2">&lt;xref:System.Xml.XmlDocument.Schemas%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Xml.XmlDocument&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Invalid modifications are then made to the XML document, and the document is then revalidated, causing schema validation errors.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Finally, one of the errors is corrected, and then part of the XML document is partially validated.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The example takes as input the <ph id="ph1">`contosoBooks.xml`</ph> and <ph id="ph2">`contosoBooks.xsd`</ph> files referred to in "Validating an XML Document as it is Loaded into the DOM" above.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Handling Validation Errors and Warnings</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>XML schema validation errors are reported when validating XML data loaded in the DOM.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You are notified about all schema validation errors found while validating the XML data as it is being loaded, or when validating a previously unvalidated XML document.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Validation errors are handled by the <ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph> was assigned to the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> instance, or passed to the <ph id="ph3">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method of the <ph id="ph4">&lt;xref:System.Xml.XmlDocument&gt;</ph> class, the <ph id="ph5">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph> will handle schema validation errors; otherwise an <ph id="ph6">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> is raised when a schema validation error is encountered.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The XML data is loaded into the DOM despite schema validation errors unless your <ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph> raises an exception to stop the process.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Schema validation warnings are not reported unless the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;</ph> flag is specified to the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For examples illustrating the <ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph>, see "Validating an XML Document As It Is Loaded into the DOM" and "Validating an XML Document in the DOM" above.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Process XML Data Using the DOM Model<ept id="p1">](../../../../docs/standard/data/xml/process-xml-data-using-the-dom-model.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Working with XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/working-with-xml-schemas.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>