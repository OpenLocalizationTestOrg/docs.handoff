{"content":"---\ntitle: \"How to: Determine What Type an Object Variable Refers To (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"TypeOf operator [Visual Basic], determining object variable type\"\n  - \"variables [Visual Basic], object\"\n  - \"object variables [Visual Basic], determining type\"\nms.assetid: 6f6a138d-58a4-40d1-9f4e-0a3c598eaf81\n---\n# How to: Determine What Type an Object Variable Refers To (Visual Basic)\nAn object variable contains a pointer to data that is stored elsewhere. The type of that data can change during run time. At any moment, you can use the <xref:System.Type.GetTypeCode%2A> method to determine the current run-time type, or the [TypeOf Operator](../../../../visual-basic/language-reference/operators/typeof-operator.md) to find out if the current run-time type is compatible with a specified type.  \n  \n### To determine the exact type an object variable currently refers to  \n  \n1.  On the object variable, call the <xref:System.Object.GetType%2A> method to retrieve a <xref:System.Type?displayProperty=nameWithType> object.  \n  \n    ```  \n    Dim myObject As Object  \n    myObject.GetType()  \n    ```  \n  \n2.  On the <xref:System.Type?displayProperty=nameWithType> class, call the shared method <xref:System.Type.GetTypeCode%2A> to retrieve the <xref:System.TypeCode> enumeration value for the object's type.  \n  \n    ```  \n    Dim myObject As Object  \n    Dim datTyp As Integer = Type.GetTypeCode(myObject.GetType())  \n    MsgBox(\"myObject currently has type code \" & CStr(datTyp))  \n    ```  \n  \n     You can test the <xref:System.TypeCode> enumeration value against whichever enumeration members are of interest, such as `Double`.  \n  \n### To determine whether an object variable's type is compatible with a specified type  \n  \n-   Use the `TypeOf` operator in combination with the [Is Operator](../../../../visual-basic/language-reference/operators/is-operator.md) to test the object with a `TypeOf`...`Is` expression.  \n  \n    ```  \n    If TypeOf objA Is System.Windows.Forms.Control Then  \n        MsgBox(\"objA is compatible with the Control class\")  \n    End If  \n    ```  \n  \n     The `TypeOf`...`Is` expression returns `True` if the object's run-time type is compatible with the specified type.  \n  \n     The criterion for compatibility depends on whether the specified type is a class, structure, or interface. In general, the types are compatible if the object is of the same type as, inherits from, or implements the specified type. For more information, see [TypeOf Operator](../../../../visual-basic/language-reference/operators/typeof-operator.md).  \n  \n## Compiling the Code  \n Note that the specified type cannot be a variable or expression. It must be the name of a defined type, such as a class, structure, or interface. This includes intrinsic types such as `Integer` and `String`.  \n  \n## See also\n\n- <xref:System.Object.GetType%2A>\n- <xref:System.Type?displayProperty=nameWithType>\n- <xref:System.Type.GetTypeCode%2A>\n- <xref:System.TypeCode>\n- [Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)\n- [Object Variable Values](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md)\n- [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)\n","nodes":[{"pos":[4,341],"embed":true,"restype":"x-metadata","content":"title: \"How to: Determine What Type an Object Variable Refers To (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"TypeOf operator [Visual Basic], determining object variable type\"\n  - \"variables [Visual Basic], object\"\n  - \"object variables [Visual Basic], determining type\"\nms.assetid: 6f6a138d-58a4-40d1-9f4e-0a3c598eaf81","nodes":[{"content":"How to: Determine What Type an Object Variable Refers To (Visual Basic)","nodes":[{"pos":[0,71],"content":"How to: Determine What Type an Object Variable Refers To (Visual Basic)","nodes":[{"content":"How to: Determine What Type an Object Variable Refers To (Visual Basic)","pos":[0,71]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[348,419],"content":"How to: Determine What Type an Object Variable Refers To (Visual Basic)","linkify":"How to: Determine What Type an Object Variable Refers To (Visual Basic)","nodes":[{"content":"How to: Determine What Type an Object Variable Refers To (Visual Basic)","pos":[0,71]}]},{"content":"An object variable contains a pointer to data that is stored elsewhere.","pos":[420,491]},{"content":"The type of that data can change during run time.","pos":[492,541]},{"content":"At any moment, you can use the <ph id=\"ph1\">&lt;xref:System.Type.GetTypeCode%2A&gt;</ph> method to determine the current run-time type, or the <bpt id=\"p1\">[</bpt>TypeOf Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/typeof-operator.md)</ept> to find out if the current run-time type is compatible with a specified type.","pos":[542,830],"source":" At any moment, you can use the <xref:System.Type.GetTypeCode%2A> method to determine the current run-time type, or the [TypeOf Operator](../../../../visual-basic/language-reference/operators/typeof-operator.md) to find out if the current run-time type is compatible with a specified type."},{"pos":[840,906],"content":"To determine the exact type an object variable currently refers to","linkify":"To determine the exact type an object variable currently refers to","nodes":[{"content":"To determine the exact type an object variable currently refers to","pos":[0,66]}]},{"pos":[916,1057],"content":"On the object variable, call the <ph id=\"ph1\">&lt;xref:System.Object.GetType%2A&gt;</ph> method to retrieve a <ph id=\"ph2\">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> object.","source":"On the object variable, call the <xref:System.Object.GetType%2A> method to retrieve a <xref:System.Type?displayProperty=nameWithType> object."},{"pos":[1144,1342],"content":"On the <ph id=\"ph1\">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> class, call the shared method <ph id=\"ph2\">&lt;xref:System.Type.GetTypeCode%2A&gt;</ph> to retrieve the <ph id=\"ph3\">&lt;xref:System.TypeCode&gt;</ph> enumeration value for the object's type.","source":"On the <xref:System.Type?displayProperty=nameWithType> class, call the shared method <xref:System.Type.GetTypeCode%2A> to retrieve the <xref:System.TypeCode> enumeration value for the object's type."},{"pos":[1537,1667],"content":"You can test the <ph id=\"ph1\">&lt;xref:System.TypeCode&gt;</ph> enumeration value against whichever enumeration members are of interest, such as <ph id=\"ph2\">`Double`</ph>.","source":"You can test the <xref:System.TypeCode> enumeration value against whichever enumeration members are of interest, such as `Double`."},{"pos":[1677,1759],"content":"To determine whether an object variable's type is compatible with a specified type","linkify":"To determine whether an object variable's type is compatible with a specified type","nodes":[{"content":"To determine whether an object variable's type is compatible with a specified type","pos":[0,82]}]},{"pos":[1769,1956],"content":"Use the <ph id=\"ph1\">`TypeOf`</ph> operator in combination with the <bpt id=\"p1\">[</bpt>Is Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/is-operator.md)</ept> to test the object with a <ph id=\"ph2\">`TypeOf`</ph>...<ph id=\"ph3\">`Is`</ph> expression.","source":"Use the `TypeOf` operator in combination with the [Is Operator](../../../../visual-basic/language-reference/operators/is-operator.md) to test the object with a `TypeOf`...`Is` expression."},{"pos":[2123,2237],"content":"The <ph id=\"ph1\">`TypeOf`</ph>...<ph id=\"ph2\">`Is`</ph> expression returns <ph id=\"ph3\">`True`</ph> if the object's run-time type is compatible with the specified type.","source":"The `TypeOf`...`Is` expression returns `True` if the object's run-time type is compatible with the specified type."},{"content":"The criterion for compatibility depends on whether the specified type is a class, structure, or interface.","pos":[2248,2354]},{"content":"In general, the types are compatible if the object is of the same type as, inherits from, or implements the specified type.","pos":[2355,2478]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>TypeOf Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/typeof-operator.md)</ept>.","pos":[2479,2597],"source":" For more information, see [TypeOf Operator](../../../../visual-basic/language-reference/operators/typeof-operator.md)."},{"pos":[2606,2624],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"Note that the specified type cannot be a variable or expression.","pos":[2628,2692]},{"content":"It must be the name of a defined type, such as a class, structure, or interface.","pos":[2693,2773]},{"content":"This includes intrinsic types such as <ph id=\"ph1\">`Integer`</ph> and <ph id=\"ph2\">`String`</ph>.","pos":[2774,2835],"source":" This includes intrinsic types such as `Integer` and `String`."},{"pos":[2844,2852],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3001,3111],"content":"<bpt id=\"p1\">[</bpt>Object Variables<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)</ept>","source":"[Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)"},{"pos":[3114,3236],"content":"<bpt id=\"p1\">[</bpt>Object Variable Values<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md)</ept>","source":"[Object Variable Values](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md)"},{"pos":[3239,3333],"content":"<bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>","source":"[Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)"}]}