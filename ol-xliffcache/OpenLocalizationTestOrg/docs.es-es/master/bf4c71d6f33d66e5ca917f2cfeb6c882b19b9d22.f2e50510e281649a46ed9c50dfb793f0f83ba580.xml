{"content":"---\ntitle: \"char (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"char\"\n  - \"char_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"char data type [C#]\"\nms.assetid: b51cf4fb-124c-4067-af48-afbac122b228\ncaps.latest.revision: 27\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# char (C# Reference)\nThe `char` keyword is used to declare an instance of the <xref:System.Char?displayProperty=fullName> structure that the .NET Framework uses to represent a Unicode character. The value of a `Char` object is a 16-bit numeric (ordinal) value.  \n  \n Unicode characters are used to represent most of the written languages throughout the world.  \n  \n|Type|Range|Size|.NET Framework type|  \n|----------|-----------|----------|-------------------------|  \n|`char`|U+0000 to U+FFFF|Unicode 16-bit character|<xref:System.Char?displayProperty=fullName>|  \n  \n## Literals  \n Constants of the `char` type can be written as character literals, hexadecimal escape sequence, or Unicode representation. You can also cast the integral character codes. In the following example four `char` variables are initialized with the same character `X`:  \n  \n [!code-cs[csrefKeywordsTypes#19](../../../csharp/language-reference/keywords/codesnippet/CSharp/char_1.cs)]  \n  \n## Conversions  \n A `char` can be implicitly converted to [ushort](../../../csharp/language-reference/keywords/ushort.md), [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md). However, there are no implicit conversions from other types to the `char` type.  \n  \n The <xref:System.Char?displayProperty=fullName> type provides several static methods for working with `char` values.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.Char>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)   \n [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md)   \n [Strings](../../../csharp/programming-guide/strings/index.md)","nodes":[{"pos":[4,588],"embed":true,"restype":"x-metadata","content":"title: \"char (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"char\"\n  - \"char_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"char data type [C#]\"\nms.assetid: b51cf4fb-124c-4067-af48-afbac122b228\ncaps.latest.revision: 27\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","nodes":[{"content":"char (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,36],"content":"char (C# Reference) | Microsoft Docs","nodes":[{"content":"char (C# Reference) | Microsoft Docs","pos":[0,36]}]}],"path":["title"]}],"yml":true},{"pos":[595,614],"content":"char (C# Reference)","linkify":"char (C# Reference)","nodes":[{"content":"char (C# Reference)","pos":[0,19]}]},{"content":"The <ph id=\"ph1\">`char`</ph> keyword is used to declare an instance of the <ph id=\"ph2\">&lt;xref:System.Char?displayProperty=fullName&gt;</ph> structure that the .NET Framework uses to represent a Unicode character.","pos":[615,788],"source":"The `char` keyword is used to declare an instance of the <xref:System.Char?displayProperty=fullName> structure that the .NET Framework uses to represent a Unicode character."},{"content":"The value of a <ph id=\"ph1\">`Char`</ph> object is a 16-bit numeric (ordinal) value.","pos":[789,854],"source":" The value of a `Char` object is a 16-bit numeric (ordinal) value."},{"content":"Unicode characters are used to represent most of the written languages throughout the world.","pos":[861,953]},{"content":"Type","pos":[960,964]},{"content":"Range","pos":[965,970]},{"content":"Size","pos":[971,975]},{"content":".NET Framework type","pos":[976,995]},{"content":"U+0000 to U+FFFF","pos":[1071,1087]},{"content":"Unicode 16-bit character","pos":[1088,1112]},{"pos":[1166,1174],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"Constants of the <ph id=\"ph1\">`char`</ph> type can be written as character literals, hexadecimal escape sequence, or Unicode representation.","pos":[1178,1300],"source":"Constants of the `char` type can be written as character literals, hexadecimal escape sequence, or Unicode representation."},{"content":"You can also cast the integral character codes.","pos":[1301,1348]},{"content":"In the following example four <ph id=\"ph1\">`char`</ph> variables are initialized with the same character <ph id=\"ph2\">`X`</ph>:","pos":[1349,1440],"source":" In the following example four `char` variables are initialized with the same character `X`:"},{"pos":[1563,1574],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"A <ph id=\"ph1\">`char`</ph> can be implicitly converted to <bpt id=\"p1\">[</bpt>ushort<ept id=\"p1\">](../../../csharp/language-reference/keywords/ushort.md)</ept>, <bpt id=\"p2\">[</bpt>int<ept id=\"p2\">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id=\"p3\">[</bpt>uint<ept id=\"p3\">](../../../csharp/language-reference/keywords/uint.md)</ept>, <bpt id=\"p4\">[</bpt>long<ept id=\"p4\">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id=\"p5\">[</bpt>ulong<ept id=\"p5\">](../../../csharp/language-reference/keywords/ulong.md)</ept>, <bpt id=\"p6\">[</bpt>float<ept id=\"p6\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p7\">[</bpt>double<ept id=\"p7\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p8\">[</bpt>decimal<ept id=\"p8\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","pos":[1578,2124],"source":"A `char` can be implicitly converted to [ushort](../../../csharp/language-reference/keywords/ushort.md), [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"However, there are no implicit conversions from other types to the <ph id=\"ph1\">`char`</ph> type.","pos":[2125,2204],"source":" However, there are no implicit conversions from other types to the `char` type."},{"pos":[2211,2327],"content":"The <ph id=\"ph1\">&lt;xref:System.Char?displayProperty=fullName&gt;</ph> type provides several static methods for working with <ph id=\"ph2\">`char`</ph> values.","source":"The <xref:System.Char?displayProperty=fullName> type provides several static methods for working with `char` values."},{"pos":[2336,2361],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2475,2483],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Char&gt;</ph>","pos":[2487,2505],"source":"<xref:System.Char> "},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2510,2570],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2574,2641],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2645,2713],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[2717,2809],"source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[2813,2905],"source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[2909,3029],"source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3033,3153],"source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3157,3233],"source":"[Nullable Types](../../../csharp/programming-guide/nullable-types/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Strings<ept id=\"p1\">](../../../csharp/programming-guide/strings/index.md)</ept>","pos":[3237,3298],"source":"[Strings](../../../csharp/programming-guide/strings/index.md)"}]}