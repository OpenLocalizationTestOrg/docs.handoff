{"content":"---\ntitle: \"How to: Find a Single Descendant Using the Descendants Method (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 6f735be9-0293-4680-8007-ca9d96bfebed\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Find a Single Descendant Using the Descendants Method (C#)\nYou can use the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis method to quickly write code to find a single uniquely named element. This technique is especially useful when you want to find a particular descendant with a specific name. You could write the code to navigate to the desired element, but it is often faster and easier to write the code using the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis.  \n  \n## Example  \n This example uses the <xref:System.Linq.Enumerable.First%2A> standard query operator.  \n  \n```csharp  \nXElement root = XElement.Parse(@\"<Root>  \n  <Child1>  \n    <GrandChild1>GC1 Value</GrandChild1>  \n  </Child1>  \n  <Child2>  \n    <GrandChild2>GC2 Value</GrandChild2>  \n  </Child2>  \n  <Child3>  \n    <GrandChild3>GC3 Value</GrandChild3>  \n  </Child3>  \n  <Child4>  \n    <GrandChild4>GC4 Value</GrandChild4>  \n  </Child4>  \n</Root>\");  \nstring grandChild3 = (string)  \n    (from el in root.Descendants(\"GrandChild3\")  \n    select el).First();  \nConsole.WriteLine(grandChild3);  \n```  \n  \n This code produces the following output:  \n  \n```  \nGC3 Value  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n```csharp  \nXElement root = XElement.Parse(@\"<aw:Root xmlns:aw='http://www.adventure-works.com'>  \n  <aw:Child1>  \n    <aw:GrandChild1>GC1 Value</aw:GrandChild1>  \n  </aw:Child1>  \n  <aw:Child2>  \n    <aw:GrandChild2>GC2 Value</aw:GrandChild2>  \n  </aw:Child2>  \n  <aw:Child3>  \n    <aw:GrandChild3>GC3 Value</aw:GrandChild3>  \n  </aw:Child3>  \n  <aw:Child4>  \n    <aw:GrandChild4>GC4 Value</aw:GrandChild4>  \n  </aw:Child4>  \n</aw:Root>\");  \nXNamespace aw = \"http://www.adventure-works.com\";  \nstring grandChild3 = (string)  \n    (from el in root.Descendants(aw + \"GrandChild3\")  \n     select el).First();  \nConsole.WriteLine(grandChild3);  \n```  \n  \n This code produces the following output:  \n  \n```  \nGC3 Value  \n```  \n  \n## See Also  \n [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)","nodes":[{"pos":[12,95],"content":"How to: Find a Single Descendant Using the Descendants Method (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Find a Single Descendant Using the Descendants Method (C#) | Microsoft Docs","pos":[0,83]}]},{"pos":[380,446],"content":"How to: Find a Single Descendant Using the Descendants Method (C#)","linkify":"How to: Find a Single Descendant Using the Descendants Method (C#)","nodes":[{"content":"How to: Find a Single Descendant Using the Descendants Method (C#)","pos":[0,66]}]},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> axis method to quickly write code to find a single uniquely named element.","pos":[447,586],"source":"You can use the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis method to quickly write code to find a single uniquely named element."},{"content":"This technique is especially useful when you want to find a particular descendant with a specific name.","pos":[587,690]},{"content":"You could write the code to navigate to the desired element, but it is often faster and easier to write the code using the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> axis.","pos":[691,868],"source":" You could write the code to navigate to the desired element, but it is often faster and easier to write the code using the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis."},{"pos":[877,884],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.First%2A&gt;</ph> standard query operator.","pos":[888,973],"source":"This example uses the <xref:System.Linq.Enumerable.First%2A> standard query operator."},{"content":"This code produces the following output:","pos":[1478,1518]},{"pos":[1554,1561],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1565,1639]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[1640,1784],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"content":"This code produces the following output:","pos":[2443,2483]},{"pos":[2519,2527],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2531,2646],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}