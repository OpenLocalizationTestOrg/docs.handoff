<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="yield-statement.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fea91731694f18625e43c5545b353851e72234a6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\yield-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86aeec1231fbbddfee9b80aedf51c4ab67e27e23</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f35b4e0c62e15c31592e1e44004f2ebdbcb4c931</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Yield Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Yield Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Sends the next element of a collection to a <ph id="ph1">`For Each...Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An expression that is implicitly convertible to the type of the iterator function or <ph id="ph1">`Get`</ph> accessor that contains the <ph id="ph2">`Yield`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Yield`</ph> statement returns one element of a collection at a time.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Yield`</ph> statement is included in an iterator function or <ph id="ph2">`Get`</ph> accessor, which perform custom iterations over a collection.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You consume an iterator function by using a <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> or a LINQ query.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each iteration of the <ph id="ph1">`For Each`</ph> loop calls the iterator function.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Yield`</ph> statement is reached in the iterator function, <ph id="ph2">`expression`</ph> is returned, and the current location in code is retained.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Execution is restarted from that location the next time that the iterator function is called.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An implicit conversion must exist from the type of <ph id="ph1">`expression`</ph> in the <ph id="ph2">`Yield`</ph> statement to the return type of the iterator.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can use an <ph id="ph1">`Exit Function`</ph> or <ph id="ph2">`Return`</ph> statement to end the iteration.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>"Yield" is not a reserved word and has special meaning only when it is used in an <ph id="ph1">`Iterator`</ph> function or <ph id="ph2">`Get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about iterator functions and <ph id="ph1">`Get`</ph> accessors, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](../../programming-guide/concepts/iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Iterator Functions and Get Accessors</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The declaration of an iterator function or <ph id="ph1">`Get`</ph> accessor must meet the following requirements:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It must include an <bpt id="p1">[</bpt>Iterator<ept id="p1">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The return type must be <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator&gt;</ph>, or <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It cannot have any <ph id="ph1">`ByRef`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An iterator function cannot occur in an event, instance constructor, static constructor, or static destructor.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An iterator function can be an anonymous function.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](../../programming-guide/concepts/iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement can be inside a <ph id="ph2">`Try`</ph> block of a <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Try`</ph> block that has a <ph id="ph2">`Yield`</ph> statement can have <ph id="ph3">`Catch`</ph> blocks, and can have a <ph id="ph4">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Yield`</ph> statement cannot be inside a <ph id="ph2">`Catch`</ph> block or a <ph id="ph3">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`For Each`</ph> body (outside of the iterator function) throws an exception, a <ph id="ph2">`Catch`</ph> block in the iterator function is not executed, but a <ph id="ph3">`Finally`</ph> block in the iterator function is executed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Catch`</ph> block inside an iterator function catches only exceptions that occur inside the iterator function.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Technical Implementation</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code returns an <ph id="ph1">`IEnumerable (Of String)`</ph> from an iterator function and then iterates through the elements of the <ph id="ph2">`IEnumerable (Of String)`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`MyIteratorFunction`</ph> doesn't execute the body of the function.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Instead the call returns an <ph id="ph1">`IEnumerable(Of String)`</ph> into the <ph id="ph2">`elements`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>On an iteration of the <ph id="ph1">`For Each`</ph> loop, the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method is called for <ph id="ph3">`elements`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This call executes the body of <ph id="ph1">`MyIteratorFunction`</ph> until the next <ph id="ph2">`Yield`</ph> statement is reached.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Yield`</ph> statement returns an expression that determines not only the value of the <ph id="ph2">`element`</ph> variable for consumption by the loop body but also the <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property of elements, which is an <ph id="ph4">`IEnumerable (Of String)`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>On each subsequent iteration of the <ph id="ph1">`For Each`</ph> loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a <ph id="ph2">`Yield`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`For Each`</ph> loop completes when the end of the iterator function or a <ph id="ph2">`Return`</ph> or <ph id="ph3">`Exit Function`</ph> statement is reached.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example has a <ph id="ph1">`Yield`</ph> statement that is inside a <bpt id="p1">[</bpt>For…Next<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> loop.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Each iteration of the <bpt id="p1">[</bpt>For Each<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> statement body in <ph id="ph1">`Main`</ph> creates a call to the <ph id="ph2">`Power`</ph> iterator function.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Each call to the iterator function proceeds to the next execution of the <ph id="ph1">`Yield`</ph> statement, which occurs during the next iteration of the <ph id="ph2">`For…Next`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The return type of the iterator method is <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, an iterator interface type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When the iterator method is called, it returns an enumerable object that contains the powers of a number.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a <ph id="ph1">`Get`</ph> accessor that is an iterator.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The property declaration includes an <ph id="ph1">`Iterator`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For additional examples, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](../../programming-guide/concepts/iterators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Statements<ept id="p1">](../../../visual-basic/language-reference/statements/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>