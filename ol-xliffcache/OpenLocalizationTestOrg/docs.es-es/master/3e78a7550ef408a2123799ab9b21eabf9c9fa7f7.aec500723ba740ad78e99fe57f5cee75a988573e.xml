{"content":"---\ntitle: \"Creating Custom Attributes (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 5c9ef584-6c7c-496b-92a9-6e42f8d9ca28\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Creating Custom Attributes (Visual Basic)\nYou can create your own custom attributes by defining an attribute class, a class that derives directly or indirectly from <xref:System.Attribute>, which makes identifying attribute definitions in metadata fast and easy. Suppose you want to tag types with the name of the programmer who wrote the type. You might define a custom `Author` attribute class:  \n  \n```vb  \n<System.AttributeUsage(System.AttributeTargets.Class Or   \n                       System.AttributeTargets.Struct)>   \nPublic Class Author  \n    Inherits System.Attribute  \n    Private name As String  \n    Public version As Double  \n    Sub New(ByVal authorName As String)  \n        name = authorName  \n        version = 1.0  \n    End Sub  \nEnd Class  \n```  \n  \n The class name is the attribute's name, `Author`. It is derived from `System.Attribute`, so it is a custom attribute class. The constructor's parameters are the custom attribute's positional parameters. In this example, `name` is a positional parameter. Any public read-write fields or properties are named parameters. In this case, `version` is the only named parameter. Note the use of the `AttributeUsage` attribute to make the `Author` attribute valid only on class and `Structure` declarations.  \n  \n You could use this new attribute as follows:  \n  \n```vb  \n<Author(\"P. Ackerman\", Version:=1.1)>   \nClass SampleClass  \n    ' P. Ackerman's code goes here...  \nEnd Class  \n```  \n  \n `AttributeUsage` has a named parameter, `AllowMultiple`, with which you can make a custom attribute single-use or multiuse. In the following code example, a multiuse attribute is created.  \n  \n```vb  \n' multiuse attribute  \n<System.AttributeUsage(System.AttributeTargets.Class Or   \n                       System.AttributeTargets.Struct,   \n                       AllowMultiple:=True)>   \nPublic Class Author  \n    Inherits System.Attribute  \n```  \n  \n In the following code example, multiple attributes of the same type are applied to a class.  \n  \n```vb  \n<Author(\"P. Ackerman\", Version:=1.1),   \nAuthor(\"R. Koch\", Version:=1.2)>   \nClass SampleClass  \n    ' P. Ackerman's code goes here...  \n    ' R. Koch's code goes here...  \nEnd Class  \n```  \n  \n> [!NOTE]\n>  If your attribute class contains a property, that property must be read-write.  \n  \n## See Also  \n <xref:System.Reflection>   \n [Visual Basic Programming Guide](../../../../visual-basic/programming-guide/index.md)   \n [Writing Custom Attributes](../../../../standard/attributes/writing-custom-attributes.md)   \n [Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/reflection.md)   \n [Attributes (Visual Basic)](../../../../visual-basic/language-reference/attributes.md)   \n [Accessing Attributes by Using Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)   \n [AttributeUsage (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/attributeusage.md)","nodes":[{"pos":[12,70],"content":"Creating Custom Attributes (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Creating Custom Attributes (Visual Basic) | Microsoft Docs","pos":[0,58]}]},{"pos":[451,492],"content":"Creating Custom Attributes (Visual Basic)","linkify":"Creating Custom Attributes (Visual Basic)","nodes":[{"content":"Creating Custom Attributes (Visual Basic)","pos":[0,41]}]},{"content":"You can create your own custom attributes by defining an attribute class, a class that derives directly or indirectly from <ph id=\"ph1\">&lt;xref:System.Attribute&gt;</ph>, which makes identifying attribute definitions in metadata fast and easy.","pos":[493,713],"source":"You can create your own custom attributes by defining an attribute class, a class that derives directly or indirectly from <xref:System.Attribute>, which makes identifying attribute definitions in metadata fast and easy."},{"content":"Suppose you want to tag types with the name of the programmer who wrote the type.","pos":[714,795]},{"content":"You might define a custom <ph id=\"ph1\">`Author`</ph> attribute class:","pos":[796,847],"source":" You might define a custom `Author` attribute class:"},{"content":"The class name is the attribute's name, <ph id=\"ph1\">`Author`</ph>.","pos":[1223,1272],"source":"The class name is the attribute's name, `Author`."},{"content":"It is derived from <ph id=\"ph1\">`System.Attribute`</ph>, so it is a custom attribute class.","pos":[1273,1346],"source":" It is derived from `System.Attribute`, so it is a custom attribute class."},{"content":"The constructor's parameters are the custom attribute's positional parameters.","pos":[1347,1425]},{"content":"In this example, <ph id=\"ph1\">`name`</ph> is a positional parameter.","pos":[1426,1476],"source":" In this example, `name` is a positional parameter."},{"content":"Any public read-write fields or properties are named parameters.","pos":[1477,1541]},{"content":"In this case, <ph id=\"ph1\">`version`</ph> is the only named parameter.","pos":[1542,1594],"source":" In this case, `version` is the only named parameter."},{"content":"Note the use of the <ph id=\"ph1\">`AttributeUsage`</ph> attribute to make the <ph id=\"ph2\">`Author`</ph> attribute valid only on class and <ph id=\"ph3\">`Structure`</ph> declarations.","pos":[1595,1722],"source":" Note the use of the `AttributeUsage` attribute to make the `Author` attribute valid only on class and `Structure` declarations."},{"content":"You could use this new attribute as follows:","pos":[1729,1773]},{"content":"<ph id=\"ph1\">`AttributeUsage`</ph> has a named parameter, <ph id=\"ph2\">`AllowMultiple`</ph>, with which you can make a custom attribute single-use or multiuse.","pos":[1910,2033],"source":"`AttributeUsage` has a named parameter, `AllowMultiple`, with which you can make a custom attribute single-use or multiuse."},{"content":"In the following code example, a multiuse attribute is created.","pos":[2034,2097]},{"content":"In the following code example, multiple attributes of the same type are applied to a class.","pos":[2363,2454]},{"pos":[2664,2753],"content":"[!NOTE]\n If your attribute class contains a property, that property must be read-write.","leadings":["","> "],"nodes":[{"content":"If your attribute class contains a property, that property must be read-write.","pos":[9,87]}]},{"pos":[2762,2770],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection&gt;</ph>","pos":[2774,2798],"source":"<xref:System.Reflection> "},{"content":"<bpt id=\"p1\"> [</bpt>Visual Basic Programming Guide<ept id=\"p1\">](../../../../visual-basic/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2802,2889],"source":" [Visual Basic Programming Guide](../../../../visual-basic/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Writing Custom Attributes<ept id=\"p1\">](../../../../standard/attributes/writing-custom-attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[2892,2983],"source":" [Writing Custom Attributes](../../../../standard/attributes/writing-custom-attributes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Reflection (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/reflection.md)</ept><ph id=\"ph1\"> </ph>","pos":[2986,3082],"source":" [Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/reflection.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Attributes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/language-reference/attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[3085,3173],"source":" [Attributes (Visual Basic)](../../../../visual-basic/language-reference/attributes.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Accessing Attributes by Using Reflection (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept><ph id=\"ph1\"> </ph>","pos":[3176,3343],"source":" [Accessing Attributes by Using Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md) "},{"content":"<bpt id=\"p1\"> [</bpt>AttributeUsage (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/attributes/attributeusage.md)</ept>","pos":[3346,3460],"source":" [AttributeUsage (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/attributeusage.md)"}]}