<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-portable-class-library-with-model-view-view-model.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b48dc67e18411d82f03d29ab244d57575d6d720</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\cross-platform\using-portable-class-library-with-model-view-view-model.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c4f637e17f2d46ff292b5af3452908d27c65f42</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4bb5972a6f375db122246d18fd6309a93361d2b4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using Portable Class Library with Model-View-View Model</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Portable Class Library with Model-View-View Model</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use the .NET Framework <bpt id="p1">[</bpt>Portable Class Library<ept id="p1">](../../../docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> to implement the Model-View-View Model (MVVM) pattern and share assemblies across multiple platforms.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>MVVM is an application pattern that isolates the user interface from the underlying business logic.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can implement the model and view model classes in a <ph id="ph1">[!INCLUDE[net_portable](../../../includes/net-portable-md.md)]</ph> project in Visual Studio 2012, and then create views that are customized for different platforms.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This approach enables you to write the data model and business logic only once, and use that code from .NET Framework, Silverlight, Windows Phone, and <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps, as shown in the following illustration.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Portable with MVVM diagram<ept id="p1">]</ept><bpt id="p2">(../../../docs/standard/cross-platform/media/portablemvvmdiagram.png "</bpt>PortableMVVMdiagram<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic does not provide general information about the MVVM pattern.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It only provides information about how to use <ph id="ph1">[!INCLUDE[net_portable](../../../includes/net-portable-md.md)]</ph> to implement MVVM.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about MVVM, see the <bpt id="p1">[</bpt>MVVM Quickstart Using the Prism Library 5.0 for WPF<ept id="p1">](https://docs.microsoft.com/previous-versions/msp-n-p/gg430857(v=pandp.40))</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Classes That Support MVVM</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you target the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, <ph id="ph2">[!INCLUDE[net_win8_profile](../../../includes/net-win8-profile-md.md)]</ph>, Silverlight, or Windows Phone 7.5 for your <ph id="ph3">[!INCLUDE[net_portable](../../../includes/net-portable-md.md)]</ph> project, the following classes are available for implementing the MVVM pattern:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.ObservableCollection%601?displayProperty=nameWithType&gt;</ph> class</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.ReadOnlyObservableCollection%601?displayProperty=nameWithType&gt;</ph> class</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.INotifyCollectionChanged?displayProperty=nameWithType&gt;</ph> class</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.NotifyCollectionChangedAction?displayProperty=nameWithType&gt;</ph> class</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.NotifyCollectionChangedEventArgs?displayProperty=nameWithType&gt;</ph> class</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.NotifyCollectionChangedEventHandler?displayProperty=nameWithType&gt;</ph> class</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.DataErrorsChangedEventArgs?displayProperty=nameWithType&gt;</ph> class</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.INotifyDataErrorInfo?displayProperty=nameWithType&gt;</ph> class</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.INotifyPropertyChanged?displayProperty=nameWithType&gt;</ph> class</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommand?displayProperty=nameWithType&gt;</ph> class</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>All classes in the <ph id="ph1">&lt;xref:System.ComponentModel.DataAnnotations?displayProperty=nameWithType&gt;</ph> namespace</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Implementing MVVM</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To implement MVVM, you typically create both the model and the view model in a <ph id="ph1">[!INCLUDE[net_portable](../../../includes/net-portable-md.md)]</ph> project, because a <ph id="ph2">[!INCLUDE[net_portable](../../../includes/net-portable-md.md)]</ph> project cannot reference a non-portable project.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The model and view model can be in the same project or in separate projects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you use separate projects, add a reference from the view model project to the model project.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>After you compile the model and view model projects, you reference those assemblies in the app that contains the view.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the view interacts only with the view model, you only have to reference the assembly that contains the view model.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Model</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example shows a simplified model class that could reside in a <ph id="ph1">[!INCLUDE[net_portable](../../../includes/net-portable-md.md)]</ph> project.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example shows a simple way to populate, retrieve, and update the data in a <ph id="ph1">[!INCLUDE[net_portable](../../../includes/net-portable-md.md)]</ph> project.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In a real app, you would retrieve the data from a source such as a Windows Communication Foundation (WCF) service.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>View Model</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A base class for view models is frequently added when implementing the MVVM pattern.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example shows a base class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface is frequently used with the MVVM pattern.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example shows an implementation of the <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example shows a simplified view model.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>View</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>From a <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> app, <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app, Silverlight-based app, or Windows Phone 7.5 app, you can reference the assembly that contains the model and view model projects.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You then create a view that interacts with the view model.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example shows a simplified Windows Presentation Foundation (WPF) app that retrieves and updates data from the view model.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You could create similar views in Silverlight, Windows Phone, or <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Portable Class Library<ept id="p1">](../../../docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>