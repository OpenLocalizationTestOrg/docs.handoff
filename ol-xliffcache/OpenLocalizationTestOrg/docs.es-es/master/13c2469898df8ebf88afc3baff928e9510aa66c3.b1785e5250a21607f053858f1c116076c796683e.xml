{"content":"---\ntitle: \"How to: Use Components That Support the Event-based Asynchronous Pattern | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Event-based Asynchronous Pattern\"\n  - \"ProgressChangedEventArgs class\"\n  - \"BackgroundWorker component\"\n  - \"events [.NET Framework], asynchronous\"\n  - \"Asynchronous Pattern\"\n  - \"AsyncOperationManager class\"\n  - \"threading [.NET Framework], asynchronous features\"\n  - \"components [.NET Framework], asynchronous\"\n  - \"AsyncOperation class\"\n  - \"threading [Windows Forms], asynchronous features\"\n  - \"AsyncCompletedEventArgs class\"\nms.assetid: 35e9549c-1568-4768-ad07-17cc6dff11e1\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Use Components That Support the Event-based Asynchronous Pattern\nMany components provide you with the option of performing their work asynchronously. The <xref:System.Media.SoundPlayer> and <xref:System.Windows.Forms.PictureBox> components, for example, enable you to load sounds and images \"in the background\" while your main thread continues running without interruption.  \n  \n Using asynchronous methods on a class that supports the [Event-based Asynchronous Pattern Overview](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md) can be as simple as attaching an event handler to the component's *MethodName*`Completed` event, just as you would for any other event. When you call the *MethodName*`Async` method, your application will continue running without interruption until the *MethodName*`Completed` event is raised. In your event handler, you can examine the <xref:System.ComponentModel.AsyncCompletedEventArgs> parameter to determine if the asynchronous operation successfully completed or if it was canceled.  \n  \n For more information about using event handlers, see [Event Handlers Overview](../../../docs/framework/winforms/event-handlers-overview-windows-forms.md).  \n  \n The following procedure shows how to use the asynchronous image-loading capability of a <xref:System.Windows.Forms.PictureBox> control.  \n  \n### To enable a PictureBox control to asynchronously load an image  \n  \n1.  Create an instance of the <xref:System.Windows.Forms.PictureBox> component in your form.  \n  \n2.  Assign an event handler to the <xref:System.Windows.Forms.PictureBox.LoadCompleted> event.  \n  \n     Check for any errors that may have occurred during the asynchronous download here. This is also where you check for cancellation.  \n  \n     [!code-csharp[System.Windows.Forms.PictureBox.LoadAsync#2](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#2)]\n     [!code-vb[System.Windows.Forms.PictureBox.LoadAsync#2](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#2)]  \n  \n     [!code-csharp[System.Windows.Forms.PictureBox.LoadAsync#5](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#5)]\n     [!code-vb[System.Windows.Forms.PictureBox.LoadAsync#5](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#5)]  \n  \n3.  Add two buttons, called `loadButton` and `cancelLoadButton`, to your form. Add <xref:System.Windows.Forms.Control.Click> event handlers to start and cancel the download.  \n  \n     [!code-csharp[System.Windows.Forms.PictureBox.LoadAsync#3](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#3)]\n     [!code-vb[System.Windows.Forms.PictureBox.LoadAsync#3](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#3)]  \n  \n     [!code-csharp[System.Windows.Forms.PictureBox.LoadAsync#4](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#4)]\n     [!code-vb[System.Windows.Forms.PictureBox.LoadAsync#4](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#4)]  \n  \n4.  Run your application.  \n  \n     As the image download proceeds, you can move the form freely, minimize it, and maximize it.  \n  \n## See Also  \n [How to: Run an Operation in the Background](../../../docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)   \n [Event-based Asynchronous Pattern Overview](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)   \n [NOT IN BUILD: Multithreading in Visual Basic](http://msdn.microsoft.com/en-us/c731a50c-09c1-4468-9646-54c86b75d269)","nodes":[{"pos":[4,848],"nodes":[{"content":"How to: Use Components That Support the Event-based Asynchronous Pattern | Microsoft Docs","nodes":[{"pos":[0,89],"content":"How to: Use Components That Support the Event-based Asynchronous Pattern | Microsoft Docs","nodes":[{"content":"How to: Use Components That Support the Event-based Asynchronous Pattern | Microsoft Docs","pos":[0,89]}]}],"pos":[6,98],"yaml":true}],"content":"title: \"How to: Use Components That Support the Event-based Asynchronous Pattern | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Event-based Asynchronous Pattern\"\n  - \"ProgressChangedEventArgs class\"\n  - \"BackgroundWorker component\"\n  - \"events [.NET Framework], asynchronous\"\n  - \"Asynchronous Pattern\"\n  - \"AsyncOperationManager class\"\n  - \"threading [.NET Framework], asynchronous features\"\n  - \"components [.NET Framework], asynchronous\"\n  - \"AsyncOperation class\"\n  - \"threading [Windows Forms], asynchronous features\"\n  - \"AsyncCompletedEventArgs class\"\nms.assetid: 35e9549c-1568-4768-ad07-17cc6dff11e1\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","yamlblock":true},{"pos":[855,927],"content":"How to: Use Components That Support the Event-based Asynchronous Pattern","linkify":"How to: Use Components That Support the Event-based Asynchronous Pattern","nodes":[{"content":"How to: Use Components That Support the Event-based Asynchronous Pattern","pos":[0,72]}]},{"content":"Many components provide you with the option of performing their work asynchronously.","pos":[928,1012]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Media.SoundPlayer&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> components, for example, enable you to load sounds and images \"in the background\" while your main thread continues running without interruption.","pos":[1013,1236],"source":" The <xref:System.Media.SoundPlayer> and <xref:System.Windows.Forms.PictureBox> components, for example, enable you to load sounds and images \"in the background\" while your main thread continues running without interruption."},{"content":"Using asynchronous methods on a class that supports the <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept> can be as simple as attaching an event handler to the component's <bpt id=\"p2\">*</bpt>MethodName<ept id=\"p2\">*</ept><ph id=\"ph1\">`Completed`</ph> event, just as you would for any other event.","pos":[1243,1581],"source":"Using asynchronous methods on a class that supports the [Event-based Asynchronous Pattern Overview](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md) can be as simple as attaching an event handler to the component's *MethodName*`Completed` event, just as you would for any other event."},{"content":"When you call the <bpt id=\"p1\">*</bpt>MethodName<ept id=\"p1\">*</ept><ph id=\"ph1\">`Async`</ph> method, your application will continue running without interruption until the <bpt id=\"p2\">*</bpt>MethodName<ept id=\"p2\">*</ept><ph id=\"ph2\">`Completed`</ph> event is raised.","pos":[1582,1738],"source":" When you call the *MethodName*`Async` method, your application will continue running without interruption until the *MethodName*`Completed` event is raised."},{"content":"In your event handler, you can examine the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> parameter to determine if the asynchronous operation successfully completed or if it was canceled.","pos":[1739,1933],"source":" In your event handler, you can examine the <xref:System.ComponentModel.AsyncCompletedEventArgs> parameter to determine if the asynchronous operation successfully completed or if it was canceled."},{"pos":[1940,2094],"content":"For more information about using event handlers, see <bpt id=\"p1\">[</bpt>Event Handlers Overview<ept id=\"p1\">](../../../docs/framework/winforms/event-handlers-overview-windows-forms.md)</ept>.","source":"For more information about using event handlers, see [Event Handlers Overview](../../../docs/framework/winforms/event-handlers-overview-windows-forms.md)."},{"content":"The following procedure shows how to use the asynchronous image-loading capability of a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> control.","pos":[2101,2236],"source":"The following procedure shows how to use the asynchronous image-loading capability of a <xref:System.Windows.Forms.PictureBox> control."},{"pos":[2246,2308],"content":"To enable a PictureBox control to asynchronously load an image","linkify":"To enable a PictureBox control to asynchronously load an image","nodes":[{"content":"To enable a PictureBox control to asynchronously load an image","pos":[0,62]}]},{"content":"Create an instance of the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> component in your form.","pos":[2318,2406],"source":"Create an instance of the <xref:System.Windows.Forms.PictureBox> component in your form."},{"content":"Assign an event handler to the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.PictureBox.LoadCompleted&gt;</ph> event.","pos":[2416,2506],"source":"Assign an event handler to the <xref:System.Windows.Forms.PictureBox.LoadCompleted> event."},{"content":"Check for any errors that may have occurred during the asynchronous download here.","pos":[2517,2599]},{"content":"This is also where you check for cancellation.","pos":[2600,2646]},{"pos":[2657,3004],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Windows.Forms.PictureBox.LoadAsync#2<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#2)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Windows.Forms.PictureBox.LoadAsync#2<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#2)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Windows.Forms.PictureBox.LoadAsync#2](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#2)]\n [!code-vb[System.Windows.Forms.PictureBox.LoadAsync#2](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#2)]"},{"pos":[3015,3362],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Windows.Forms.PictureBox.LoadAsync#5<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#5)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Windows.Forms.PictureBox.LoadAsync#5<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#5)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Windows.Forms.PictureBox.LoadAsync#5](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#5)]\n [!code-vb[System.Windows.Forms.PictureBox.LoadAsync#5](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#5)]"},{"content":"Add two buttons, called <ph id=\"ph1\">`loadButton`</ph> and <ph id=\"ph2\">`cancelLoadButton`</ph>, to your form.","pos":[3372,3446],"source":"Add two buttons, called `loadButton` and `cancelLoadButton`, to your form."},{"content":"Add <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handlers to start and cancel the download.","pos":[3447,3541],"source":" Add <xref:System.Windows.Forms.Control.Click> event handlers to start and cancel the download."},{"pos":[3552,3899],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Windows.Forms.PictureBox.LoadAsync#3<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#3)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Windows.Forms.PictureBox.LoadAsync#3<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#3)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Windows.Forms.PictureBox.LoadAsync#3](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#3)]\n [!code-vb[System.Windows.Forms.PictureBox.LoadAsync#3](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#3)]"},{"pos":[3910,4257],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Windows.Forms.PictureBox.LoadAsync#4<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#4)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Windows.Forms.PictureBox.LoadAsync#4<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#4)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Windows.Forms.PictureBox.LoadAsync#4](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/CS/Form1.cs#4)]\n [!code-vb[System.Windows.Forms.PictureBox.LoadAsync#4](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PictureBox.LoadAsync/VB/Form1.vb#4)]"},{"content":"Run your application.","pos":[4267,4288]},{"content":"As the image download proceeds, you can move the form freely, minimize it, and maximize it.","pos":[4299,4390]},{"pos":[4399,4407],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>How to: Run an Operation in the Background<ept id=\"p1\">](../../../docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept><ph id=\"ph1\"> </ph>","pos":[4411,4544],"source":"[How to: Run an Operation in the Background](../../../docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md) "},{"content":"<bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[4548,4695],"source":"[Event-based Asynchronous Pattern Overview](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>NOT IN BUILD: Multithreading in Visual Basic<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c731a50c-09c1-4468-9646-54c86b75d269)</ept>","pos":[4699,4815],"source":"[NOT IN BUILD: Multithreading in Visual Basic](http://msdn.microsoft.com/en-us/c731a50c-09c1-4468-9646-54c86b75d269)"}]}