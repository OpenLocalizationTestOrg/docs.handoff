{"content":"---\ntitle: \"Protected (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Protected\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Protected Friend keyword combination\"\n  - \"Protected keyword, and Friend\"\n  - \"Protected keyword, syntax\"\n  - \"Protected access modifier\"\n  - \"Protected keyword\"\nms.assetid: 74ad3d56-309f-49d2-b60c-1d0157d010e8\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Protected (Visual Basic)\nSpecifies that one or more declared programming elements are accessible only from within their own class or from a derived class.  \n  \n## Remarks  \n Sometimes a programming element declared in a class contains sensitive data or restricted code, and you want to limit access to the element. However, if the class is inheritable and you expect a hierarchy of derived classes, it might be necessary for these derived classes to access the data or code. In such a case, you want the element to be accessible both from the base class and from all derived classes. To limit access to an element in this manner, you can declare it with `Protected`.  \n  \n## Rules  \n  \n-   **Declaration Context.** You can use `Protected` only at class level. This means the declaration context for a `Protected` element must be a class, and cannot be a source file, namespace, interface, module, structure, or procedure.  \n  \n-   **Combined Modifiers.** You can use the `Protected` modifier together with the [Friend](../../../visual-basic/language-reference/modifiers/friend.md) modifier in the same declaration. This combination makes the declared elements accessible from anywhere in the same assembly, from their own class, and from derived classes. You can specify `Protected Friend` only on members of classes.  \n  \n## Behavior  \n  \n-   **Access Level.** All code in a class can access its elements. Code in any class that derives from a base class can access all the `Protected` elements of the base class. This is true for all generations of derivation. This means that a class can access `Protected` elements of the base class of the base class, and so on.  \n  \n     Protected access is not a superset or subset of friend access.  \n  \n-   **Access Modifiers.** The keywords that specify access level are called *access modifiers*. For a comparison of the access modifiers, see [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n The `Protected` modifier can be used in these contexts:  \n  \n [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)  \n  \n [Const Statement](../../../visual-basic/language-reference/statements/const-statement.md)  \n  \n [Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)  \n  \n [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)  \n  \n [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)  \n  \n [Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md)  \n  \n [Event Statement](../../../visual-basic/language-reference/statements/event-statement.md)  \n  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)  \n  \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)  \n  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)  \n  \n## See Also  \n [Public](../../../visual-basic/language-reference/modifiers/public.md)   \n [Friend](../../../visual-basic/language-reference/modifiers/friend.md)   \n [Private](../../../visual-basic/language-reference/modifiers/private.md)   \n [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)   \n [Procedures](../../../visual-basic/programming-guide/language-features/procedures/index.md)   \n [Structures](../../../visual-basic/programming-guide/language-features/data-types/structures.md)   \n [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)","nodes":[{"pos":[12,53],"content":"Protected (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Protected (Visual Basic) | Microsoft Docs","pos":[0,41]}]},{"pos":[720,744],"content":"Protected (Visual Basic)","linkify":"Protected (Visual Basic)","nodes":[{"content":"Protected (Visual Basic)","pos":[0,24]}]},{"content":"Specifies that one or more declared programming elements are accessible only from within their own class or from a derived class.","pos":[745,874]},{"pos":[883,890],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Sometimes a programming element declared in a class contains sensitive data or restricted code, and you want to limit access to the element.","pos":[894,1034]},{"content":"However, if the class is inheritable and you expect a hierarchy of derived classes, it might be necessary for these derived classes to access the data or code.","pos":[1035,1194]},{"content":"In such a case, you want the element to be accessible both from the base class and from all derived classes.","pos":[1195,1303]},{"content":"To limit access to an element in this manner, you can declare it with <ph id=\"ph1\">`Protected`</ph>.","pos":[1304,1386],"source":" To limit access to an element in this manner, you can declare it with `Protected`."},{"pos":[1395,1400],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Declaration Context.<ept id=\"p1\">**</ept>","pos":[1410,1434],"source":"**Declaration Context.**"},{"content":"You can use <ph id=\"ph1\">`Protected`</ph> only at class level.","pos":[1435,1479],"source":" You can use `Protected` only at class level."},{"content":"This means the declaration context for a <ph id=\"ph1\">`Protected`</ph> element must be a class, and cannot be a source file, namespace, interface, module, structure, or procedure.","pos":[1480,1641],"source":" This means the declaration context for a `Protected` element must be a class, and cannot be a source file, namespace, interface, module, structure, or procedure."},{"content":"<bpt id=\"p1\">**</bpt>Combined Modifiers.<ept id=\"p1\">**</ept>","pos":[1651,1674],"source":"**Combined Modifiers.**"},{"content":"You can use the <ph id=\"ph1\">`Protected`</ph> modifier together with the <bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept> modifier in the same declaration.","pos":[1675,1834],"source":" You can use the `Protected` modifier together with the [Friend](../../../visual-basic/language-reference/modifiers/friend.md) modifier in the same declaration."},{"content":"This combination makes the declared elements accessible from anywhere in the same assembly, from their own class, and from derived classes.","pos":[1835,1974]},{"content":"You can specify <ph id=\"ph1\">`Protected Friend`</ph> only on members of classes.","pos":[1975,2037],"source":" You can specify `Protected Friend` only on members of classes."},{"pos":[2046,2054],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"<bpt id=\"p1\">**</bpt>Access Level.<ept id=\"p1\">**</ept>","pos":[2064,2081],"source":"**Access Level.**"},{"content":"All code in a class can access its elements.","pos":[2082,2126]},{"content":"Code in any class that derives from a base class can access all the <ph id=\"ph1\">`Protected`</ph> elements of the base class.","pos":[2127,2234],"source":" Code in any class that derives from a base class can access all the `Protected` elements of the base class."},{"content":"This is true for all generations of derivation.","pos":[2235,2282]},{"content":"This means that a class can access <ph id=\"ph1\">`Protected`</ph> elements of the base class of the base class, and so on.","pos":[2283,2386],"source":" This means that a class can access `Protected` elements of the base class of the base class, and so on."},{"content":"Protected access is not a superset or subset of friend access.","pos":[2397,2459]},{"content":"<bpt id=\"p1\">**</bpt>Access Modifiers.<ept id=\"p1\">**</ept>","pos":[2469,2490],"source":"**Access Modifiers.**"},{"content":"The keywords that specify access level are called <bpt id=\"p1\">*</bpt>access modifiers<ept id=\"p1\">*</ept>.","pos":[2491,2560],"source":" The keywords that specify access level are called *access modifiers*."},{"content":"For a comparison of the access modifiers, see <bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","pos":[2561,2733],"source":" For a comparison of the access modifiers, see [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[2740,2795],"content":"The <ph id=\"ph1\">`Protected`</ph> modifier can be used in these contexts:","source":"The `Protected` modifier can be used in these contexts:"},{"pos":[2802,2891],"content":"<bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept>","source":"[Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)"},{"pos":[2898,2987],"content":"<bpt id=\"p1\">[</bpt>Const Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/const-statement.md)</ept>","source":"[Const Statement](../../../visual-basic/language-reference/statements/const-statement.md)"},{"pos":[2994,3087],"content":"<bpt id=\"p1\">[</bpt>Declare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declare-statement.md)</ept>","source":"[Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)"},{"pos":[3094,3189],"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept>","source":"[Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)"},{"pos":[3196,3281],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)"},{"pos":[3288,3375],"content":"<bpt id=\"p1\">[</bpt>Enum Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/enum-statement.md)</ept>","source":"[Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md)"},{"pos":[3382,3471],"content":"<bpt id=\"p1\">[</bpt>Event Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/event-statement.md)</ept>","source":"[Event Statement](../../../visual-basic/language-reference/statements/event-statement.md)"},{"pos":[3478,3573],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[3580,3677],"content":"<bpt id=\"p1\">[</bpt>Interface Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept>","source":"[Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)"},{"pos":[3684,3779],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[3786,3883],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[3890,3975],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[3984,3992],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept><ph id=\"ph1\"> </ph>","pos":[3996,4067],"source":"[Public](../../../visual-basic/language-reference/modifiers/public.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept><ph id=\"ph1\"> </ph>","pos":[4070,4142],"source":" [Friend](../../../visual-basic/language-reference/modifiers/friend.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Private<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/private.md)</ept><ph id=\"ph1\"> </ph>","pos":[4145,4219],"source":" [Private](../../../visual-basic/language-reference/modifiers/private.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept><ph id=\"ph1\"> </ph>","pos":[4222,4349],"source":" [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4352,4445],"source":" [Procedures](../../../visual-basic/programming-guide/language-features/procedures/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[4448,4546],"source":" [Structures](../../../visual-basic/programming-guide/language-features/data-types/structures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Objects and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>","pos":[4549,4659],"source":" [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)"}]}