{"content":"---\ntitle: \"How to: Catch a non-CLS Exception\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"exceptions [C#], non-CLS\"\nms.assetid: db4630b3-5240-471a-b3a7-c7ff6ab31e8d\n---\n# How to: Catch a non-CLS Exception\nSome .NET languages, including C++/CLI, allow objects to throw exceptions that do not derive from <xref:System.Exception>. Such exceptions are called *non-CLS exceptions* or *non-Exceptions*. In C# you cannot throw non-CLS exceptions, but you can catch them in two ways:  \n  \n-   Within a `catch (RuntimeWrappedException e)` block.\n  \n     By default, a Visual C# assembly catches non-CLS exceptions as wrapped exceptions. Use this method if you need access to the original exception, which can be accessed through the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property. The procedure later in this topic explains how to catch exceptions in this manner.  \n  \n-   Within a general catch block (a catch block without an exception type specified) that is put after all other `catch` blocks.\n  \n     Use this method when you want to perform some action (such as writing to a log file) in response to non-CLS exceptions, and you do not need access to the exception information. By default the common language runtime wraps all exceptions. To disable this behavior, add this assembly-level attribute to your code, typically in the AssemblyInfo.cs file: `[assembly: RuntimeCompatibilityAttribute(WrapNonExceptionThrows = false)]`.  \n  \n### To catch a non-CLS exception  \n  \nWithin a `catch(RuntimeWrappedException e)` block, access the original exception through the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property.  \n  \n## Example  \n The following example shows how to catch a non-CLS exception that was thrown from a class library written in C++/CLI. Note that in this example, the C# client code knows in advance that the exception type being thrown is a <xref:System.String?displayProperty=nameWithType>. You can cast the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property back its original type as long as that type is accessible from your code.  \n  \n```csharp\n// Class library written in C++/CLI.\nvar myClass = new ThrowNonCLS.Class1();\n\ntry\n{\n    // throws gcnew System::String(  \n    // \"I do not derive from System.Exception!\");  \n    myClass.TestThrow();\n}\ncatch (RuntimeWrappedException e)\n{\n    String s = e.WrappedException as String;\n    if (s != null)\n    {\n        Console.WriteLine(s);\n    }\n}\n```  \n  \n## See also\n\n- <xref:System.Runtime.CompilerServices.RuntimeWrappedException>\n- [Exceptions and Exception Handling](../../../csharp/programming-guide/exceptions/index.md)\n","nodes":[{"pos":[4,168],"embed":true,"restype":"x-metadata","content":"title: \"How to: Catch a non-CLS Exception\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"exceptions [C#], non-CLS\"\nms.assetid: db4630b3-5240-471a-b3a7-c7ff6ab31e8d","nodes":[{"content":"How to: Catch a non-CLS Exception","nodes":[{"pos":[0,33],"content":"How to: Catch a non-CLS Exception","nodes":[{"content":"How to: Catch a non-CLS Exception","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[175,208],"content":"How to: Catch a non-CLS Exception","linkify":"How to: Catch a non-CLS Exception","nodes":[{"content":"How to: Catch a non-CLS Exception","pos":[0,33]}]},{"content":"Some .NET languages, including C++/CLI, allow objects to throw exceptions that do not derive from <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>.","pos":[209,331],"source":"Some .NET languages, including C++/CLI, allow objects to throw exceptions that do not derive from <xref:System.Exception>."},{"content":"Such exceptions are called <bpt id=\"p1\">*</bpt>non-CLS exceptions<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>non-Exceptions<ept id=\"p2\">*</ept>.","pos":[332,400],"source":" Such exceptions are called *non-CLS exceptions* or *non-Exceptions*."},{"content":"In C# you cannot throw non-CLS exceptions, but you can catch them in two ways:","pos":[401,479]},{"pos":[489,540],"content":"Within a <ph id=\"ph1\">`catch (RuntimeWrappedException e)`</ph> block.","source":"Within a `catch (RuntimeWrappedException e)` block."},{"content":"By default, a Visual C# assembly catches non-CLS exceptions as wrapped exceptions.","pos":[549,631]},{"content":"Use this method if you need access to the original exception, which can be accessed through the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> property.","pos":[632,849],"source":" Use this method if you need access to the original exception, which can be accessed through the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property."},{"content":"The procedure later in this topic explains how to catch exceptions in this manner.","pos":[850,932]},{"pos":[942,1066],"content":"Within a general catch block (a catch block without an exception type specified) that is put after all other <ph id=\"ph1\">`catch`</ph> blocks.","source":"Within a general catch block (a catch block without an exception type specified) that is put after all other `catch` blocks."},{"content":"Use this method when you want to perform some action (such as writing to a log file) in response to non-CLS exceptions, and you do not need access to the exception information.","pos":[1075,1251]},{"content":"By default the common language runtime wraps all exceptions.","pos":[1252,1312]},{"content":"To disable this behavior, add this assembly-level attribute to your code, typically in the AssemblyInfo.cs file: <ph id=\"ph1\">`[assembly: RuntimeCompatibilityAttribute(WrapNonExceptionThrows = false)]`</ph>.","pos":[1313,1502],"source":" To disable this behavior, add this assembly-level attribute to your code, typically in the AssemblyInfo.cs file: `[assembly: RuntimeCompatibilityAttribute(WrapNonExceptionThrows = false)]`."},{"pos":[1512,1540],"content":"To catch a non-CLS exception","linkify":"To catch a non-CLS exception","nodes":[{"content":"To catch a non-CLS exception","pos":[0,28]}]},{"pos":[1546,1760],"content":"Within a <ph id=\"ph1\">`catch(RuntimeWrappedException e)`</ph> block, access the original exception through the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> property.","source":"Within a `catch(RuntimeWrappedException e)` block, access the original exception through the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property."},{"pos":[1769,1776],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to catch a non-CLS exception that was thrown from a class library written in C++/CLI.","pos":[1780,1897]},{"content":"Note that in this example, the C# client code knows in advance that the exception type being thrown is a <ph id=\"ph1\">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph>.","pos":[1898,2053],"source":" Note that in this example, the C# client code knows in advance that the exception type being thrown is a <xref:System.String?displayProperty=nameWithType>."},{"content":"You can cast the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> property back its original type as long as that type is accessible from your code.","pos":[2054,2265],"source":" You can cast the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property back its original type as long as that type is accessible from your code."},{"pos":[2638,2646],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2715,2805],"content":"<bpt id=\"p1\">[</bpt>Exceptions and Exception Handling<ept id=\"p1\">](../../../csharp/programming-guide/exceptions/index.md)</ept>","source":"[Exceptions and Exception Handling](../../../csharp/programming-guide/exceptions/index.md)"}]}