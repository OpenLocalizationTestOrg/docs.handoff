{"content":"---\ntitle: \"How To: Transform Incoming Claims\"\nms.date: \"03/30/2017\"\nms.assetid: 2831d514-d9d8-4200-9192-954bb6da1126\nauthor: \"BrucePerlerMS\"\n---\n# How To: Transform Incoming Claims\n## Applies To  \n  \n-   Microsoft® Windows® Identity Foundation (WIF)  \n  \n-   ASP.NET® Web Forms  \n  \n## Summary  \n This How-To provides detailed step-by-step procedures for creating a simple claims-aware ASP.NET Web Forms application and transforming incoming claims. It also provides instructions for how to test the application to verify that transformed claims are presented when the application is run.  \n  \n## Contents  \n  \n-   Objectives  \n  \n-   Overview  \n  \n-   Summary of Steps  \n  \n-   Step 1 – Create a Simple ASP.NET Web Forms Application  \n  \n-   Step 2 – Implement Claims Transformation Using a Custom ClaimsAuthenticationManager  \n  \n-   Step 3 – Test Your Solution  \n  \n## Objectives  \n  \n-   Configure an ASP.NET Web Forms application for claims-based authentication  \n  \n-   Transform incoming claims by adding an Administrator role claim  \n  \n-   Test the ASP.NET Web Forms application to see if it is working properly  \n  \n## Overview  \n WIF exposes a class named <xref:System.Security.Claims.ClaimsAuthenticationManager> that enables users to modify claims before they are presented to a relying party (RP) application. The <xref:System.Security.Claims.ClaimsAuthenticationManager> is useful for separation of concerns between authentication and the underlying application code. The example below demonstrates how to add a role to the claims in the incoming <xref:System.Security.Claims.ClaimsPrincipal> that may be required by the RP.  \n  \n## Summary of Steps  \n  \n-   Step 1 – Create a Simple ASP.NET Web Forms Application  \n  \n-   Step 2 – Implement Claims Transformation Using a Custom ClaimsAuthenticationManager  \n  \n-   Step 3 – Test Your Solution  \n  \n## Step 1 – Create a Simple ASP.NET Web Forms Application  \n In this step, you will create a new ASP.NET Web Forms application.  \n  \n#### To create a simple ASP.NET application  \n  \n1.  Start Visual Studio in elevated mode as administrator.  \n  \n2.  In Visual Studio, click **File**, click **New**, and then click **Project**.  \n  \n3.  In the **New Project** window, click **ASP.NET Web Forms Application**.  \n  \n4.  In **Name**, enter `TestApp` and press **OK**.  \n  \n5.  Right-click the **TestApp** project under **Solution Explorer**, then select **Identity and Access**.  \n  \n6.  The **Identity and Access** window appears. Under **Providers**, select **Test your application with the Local Development STS**, then click **Apply**.  \n  \n7.  In the *Default.aspx* file, replace the existing markup with the following, then save the file:  \n  \n    ```  \n    <%@ Page Title=\"Home Page\" Language=\"C#\" MasterPageFile=\"~/Site.Master\" AutoEventWireup=\"true\"  \n        CodeBehind=\"Default.aspx.cs\" Inherits=\"TestApp._Default\" %>  \n  \n    <asp:Content runat=\"server\" ID=\"BodyContent\" ContentPlaceHolderID=\"MainContent\">  \n          <h3>Your Claims</h3>  \n        <p>  \n            <asp:GridView ID=\"ClaimsGridView\" runat=\"server\" CellPadding=\"3\">  \n                <AlternatingRowStyle BackColor=\"White\" />  \n                <HeaderStyle BackColor=\"#7AC0DA\" ForeColor=\"White\" />  \n            </asp:GridView>  \n        </p>  \n    </asp:Content>  \n    ```  \n  \n8.  Open the code-behind file named *Default.aspx.cs*. Replace the existing code with the following, then save the file:  \n  \n    ```csharp  \n    using System;  \n    using System.Web.UI;  \n    using System.Security.Claims;  \n  \n    namespace TestApp  \n    {  \n        public partial class _Default : Page  \n        {  \n            protected void Page_Load(object sender, EventArgs e)  \n            {  \n                ClaimsPrincipal claimsPrincipal = Page.User as ClaimsPrincipal;  \n                this.ClaimsGridView.DataSource = claimsPrincipal.Claims;  \n                this.ClaimsGridView.DataBind();  \n            }  \n        }  \n    }  \n    ```  \n  \n## Step 2 – Implement Claims Transformation Using a Custom ClaimsAuthenticationManager  \n In this step you will override default functionality in the <xref:System.Security.Claims.ClaimsAuthenticationManager> class to add an Administrator role to the incoming Principal.  \n  \n#### To implement claims transformation using a custom ClaimsAuthenticationManager  \n  \n1.  In Visual Studio, right-click the on the solution, click **Add**, and then click **New Project**.  \n  \n2.  In the **Add New Project** window, select **Class Library** from the **Visual C#** templates list, enter `ClaimsTransformation`, and then press **OK**. The new project will be created in your solution folder.  \n  \n3.  Right-click on **References** under the **ClaimsTransformation** project, and then click **Add Reference**.  \n  \n4.  In the **Reference Manager** window, select **System.IdentityModel**, and then click **OK**.  \n  \n5.  Open **Class1.cs**, or if it doesn’t exist, right-click **ClaimsTransformation**, click **Add**, then click **Class…**  \n  \n6.  Add the following using directives to the code file:  \n  \n    ```csharp  \n    using System.Security.Claims;  \n    using System.Security.Principal;  \n    ```  \n  \n7.  Add the following class and method in the code file.  \n  \n    > [!WARNING]\n    >  The following code is for demonstration purposes only; make sure that you verify your intended permissions in production code.  \n  \n    ```csharp  \n    public class ClaimsTransformationModule : ClaimsAuthenticationManager  \n    {  \n        public override ClaimsPrincipal Authenticate(string resourceName, ClaimsPrincipal incomingPrincipal)  \n        {  \n            if (incomingPrincipal != null && incomingPrincipal.Identity.IsAuthenticated == true)  \n            {  \n               ((ClaimsIdentity)incomingPrincipal.Identity).AddClaim(new Claim(ClaimTypes.Role, \"Admin\"));  \n            }  \n  \n            return incomingPrincipal;  \n        }  \n    }  \n    ```  \n  \n8.  Save the file and build the **ClaimsTransformation** project.  \n  \n9. In your **TestApp** ASP.NET project, right-click on References, and then click **Add Reference**.  \n  \n10. In the **Reference Manager** window, select **Solution** from the left menu, select **ClaimsTransformation** from the populated options, and then click **OK**.  \n  \n11. In the root **Web.config** file, navigate to the **\\<system.identityModel>** entry. Within the **\\<identityConfiguration>** elements, add the following line and save the file:  \n  \n    ```xml  \n    <claimsAuthenticationManager type=\"ClaimsTransformation.ClaimsTransformationModule, ClaimsTransformation\" />  \n    ```  \n  \n## Step 3 – Test Your Solution  \n In this step you will test your ASP.NET Web Forms application, and verify that claims are presented when a user signs in with Forms authentication.  \n  \n#### To test your ASP.NET Web Forms application for claims using Forms authentication  \n  \n1.  Press **F5** to build and run the application. You should be presented with *Default.aspx*.  \n  \n2.  On the *Default.aspx* page, you should see a table beneath the **Your Claims** heading that includes the **Issuer**, **OriginalIssuer**, **Type**, **Value**, and **ValueType** claims information about your account. The last row should be presented in the following way:  \n  \n    ||||||  \n    |-|-|-|-|-|  \n    |LOCAL AUTHORITY|LOCAL AUTHORITY|`http://schemas.microsoft.com/ws/2008/06/identity/claims/role`|Admin|<https://www.w3.org/2001/XMLSchema#string>|\n","nodes":[{"pos":[4,141],"embed":true,"restype":"x-metadata","content":"title: \"How To: Transform Incoming Claims\"\nms.date: \"03/30/2017\"\nms.assetid: 2831d514-d9d8-4200-9192-954bb6da1126\nauthor: \"BrucePerlerMS\"","nodes":[{"content":"How To: Transform Incoming Claims","nodes":[{"pos":[0,33],"content":"How To: Transform Incoming Claims","nodes":[{"content":"How To: Transform Incoming Claims","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[148,181],"content":"How To: Transform Incoming Claims","linkify":"How To: Transform Incoming Claims","nodes":[{"content":"How To: Transform Incoming Claims","pos":[0,33]}]},{"pos":[185,195],"content":"Applies To","linkify":"Applies To","nodes":[{"content":"Applies To","pos":[0,10]}]},{"content":"Microsoft® Windows® Identity Foundation (WIF)","pos":[205,250]},{"content":"ASP.NET® Web Forms","pos":[260,278]},{"pos":[287,294],"content":"Summary","linkify":"Summary","nodes":[{"content":"Summary","pos":[0,7]}]},{"content":"This How-To provides detailed step-by-step procedures for creating a simple claims-aware ASP.NET Web Forms application and transforming incoming claims.","pos":[298,450]},{"content":"It also provides instructions for how to test the application to verify that transformed claims are presented when the application is run.","pos":[451,589]},{"pos":[598,606],"content":"Contents","linkify":"Contents","nodes":[{"content":"Contents","pos":[0,8]}]},{"content":"Objectives","pos":[616,626]},{"content":"Overview","pos":[636,644]},{"content":"Summary of Steps","pos":[654,670]},{"content":"Step 1 – Create a Simple ASP.NET Web Forms Application","pos":[680,734]},{"content":"Step 2 – Implement Claims Transformation Using a Custom ClaimsAuthenticationManager","pos":[744,827]},{"content":"Step 3 – Test Your Solution","pos":[837,864]},{"pos":[873,883],"content":"Objectives","linkify":"Objectives","nodes":[{"content":"Objectives","pos":[0,10]}]},{"content":"Configure an ASP.NET Web Forms application for claims-based authentication","pos":[893,967]},{"content":"Transform incoming claims by adding an Administrator role claim","pos":[977,1040]},{"content":"Test the ASP.NET Web Forms application to see if it is working properly","pos":[1050,1121]},{"pos":[1130,1138],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"content":"WIF exposes a class named <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsAuthenticationManager&gt;</ph> that enables users to modify claims before they are presented to a relying party (RP) application.","pos":[1142,1324],"source":"WIF exposes a class named <xref:System.Security.Claims.ClaimsAuthenticationManager> that enables users to modify claims before they are presented to a relying party (RP) application."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsAuthenticationManager&gt;</ph> is useful for separation of concerns between authentication and the underlying application code.","pos":[1325,1483],"source":" The <xref:System.Security.Claims.ClaimsAuthenticationManager> is useful for separation of concerns between authentication and the underlying application code."},{"content":"The example below demonstrates how to add a role to the claims in the incoming <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsPrincipal&gt;</ph> that may be required by the RP.","pos":[1484,1640],"source":" The example below demonstrates how to add a role to the claims in the incoming <xref:System.Security.Claims.ClaimsPrincipal> that may be required by the RP."},{"pos":[1649,1665],"content":"Summary of Steps","linkify":"Summary of Steps","nodes":[{"content":"Summary of Steps","pos":[0,16]}]},{"content":"Step 1 – Create a Simple ASP.NET Web Forms Application","pos":[1675,1729]},{"content":"Step 2 – Implement Claims Transformation Using a Custom ClaimsAuthenticationManager","pos":[1739,1822]},{"content":"Step 3 – Test Your Solution","pos":[1832,1859]},{"pos":[1868,1922],"content":"Step 1 – Create a Simple ASP.NET Web Forms Application","linkify":"Step 1 – Create a Simple ASP.NET Web Forms Application","nodes":[{"content":"Step 1 – Create a Simple ASP.NET Web Forms Application","pos":[0,54]}]},{"content":"In this step, you will create a new ASP.NET Web Forms application.","pos":[1926,1992]},{"pos":[2003,2041],"content":"To create a simple ASP.NET application","linkify":"To create a simple ASP.NET application","nodes":[{"content":"To create a simple ASP.NET application","pos":[0,38]}]},{"content":"Start Visual Studio in elevated mode as administrator.","pos":[2051,2105]},{"pos":[2115,2191],"content":"In Visual Studio, click <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","source":"In Visual Studio, click **File**, click **New**, and then click **Project**."},{"pos":[2201,2272],"content":"In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> window, click <bpt id=\"p2\">**</bpt>ASP.NET Web Forms Application<ept id=\"p2\">**</ept>.","source":"In the **New Project** window, click **ASP.NET Web Forms Application**."},{"pos":[2282,2328],"content":"In <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept>, enter <ph id=\"ph1\">`TestApp`</ph> and press <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","source":"In **Name**, enter `TestApp` and press **OK**."},{"pos":[2338,2439],"content":"Right-click the <bpt id=\"p1\">**</bpt>TestApp<ept id=\"p1\">**</ept> project under <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept>, then select <bpt id=\"p3\">**</bpt>Identity and Access<ept id=\"p3\">**</ept>.","source":"Right-click the **TestApp** project under **Solution Explorer**, then select **Identity and Access**."},{"content":"The <bpt id=\"p1\">**</bpt>Identity and Access<ept id=\"p1\">**</ept> window appears.","pos":[2449,2492],"source":"The **Identity and Access** window appears."},{"content":"Under <bpt id=\"p1\">**</bpt>Providers<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Test your application with the Local Development STS<ept id=\"p2\">**</ept>, then click <bpt id=\"p3\">**</bpt>Apply<ept id=\"p3\">**</ept>.","pos":[2493,2600],"source":" Under **Providers**, select **Test your application with the Local Development STS**, then click **Apply**."},{"pos":[2610,2705],"content":"In the <bpt id=\"p1\">*</bpt>Default.aspx<ept id=\"p1\">*</ept> file, replace the existing markup with the following, then save the file:","source":"In the *Default.aspx* file, replace the existing markup with the following, then save the file:"},{"content":"Open the code-behind file named <bpt id=\"p1\">*</bpt>Default.aspx.cs<ept id=\"p1\">*</ept>.","pos":[3324,3374],"source":"Open the code-behind file named *Default.aspx.cs*."},{"content":"Replace the existing code with the following, then save the file:","pos":[3375,3440]},{"pos":[3981,4064],"content":"Step 2 – Implement Claims Transformation Using a Custom ClaimsAuthenticationManager","linkify":"Step 2 – Implement Claims Transformation Using a Custom ClaimsAuthenticationManager","nodes":[{"content":"Step 2 – Implement Claims Transformation Using a Custom ClaimsAuthenticationManager","pos":[0,83]}]},{"pos":[4068,4247],"content":"In this step you will override default functionality in the <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsAuthenticationManager&gt;</ph> class to add an Administrator role to the incoming Principal.","source":"In this step you will override default functionality in the <xref:System.Security.Claims.ClaimsAuthenticationManager> class to add an Administrator role to the incoming Principal."},{"pos":[4258,4335],"content":"To implement claims transformation using a custom ClaimsAuthenticationManager","linkify":"To implement claims transformation using a custom ClaimsAuthenticationManager","nodes":[{"content":"To implement claims transformation using a custom ClaimsAuthenticationManager","pos":[0,77]}]},{"pos":[4345,4442],"content":"In Visual Studio, right-click the on the solution, click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>New Project<ept id=\"p2\">**</ept>.","source":"In Visual Studio, right-click the on the solution, click **Add**, and then click **New Project**."},{"content":"In the <bpt id=\"p1\">**</bpt>Add New Project<ept id=\"p1\">**</ept> window, select <bpt id=\"p2\">**</bpt>Class Library<ept id=\"p2\">**</ept> from the <bpt id=\"p3\">**</bpt>Visual C#<ept id=\"p3\">**</ept> templates list, enter <ph id=\"ph1\">`ClaimsTransformation`</ph>, and then press <bpt id=\"p4\">**</bpt>OK<ept id=\"p4\">**</ept>.","pos":[4452,4603],"source":"In the **Add New Project** window, select **Class Library** from the **Visual C#** templates list, enter `ClaimsTransformation`, and then press **OK**."},{"content":"The new project will be created in your solution folder.","pos":[4604,4660]},{"pos":[4670,4777],"content":"Right-click on <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept> under the <bpt id=\"p2\">**</bpt>ClaimsTransformation<ept id=\"p2\">**</ept> project, and then click <bpt id=\"p3\">**</bpt>Add Reference<ept id=\"p3\">**</ept>.","source":"Right-click on **References** under the **ClaimsTransformation** project, and then click **Add Reference**."},{"pos":[4787,4879],"content":"In the <bpt id=\"p1\">**</bpt>Reference Manager<ept id=\"p1\">**</ept> window, select <bpt id=\"p2\">**</bpt>System.IdentityModel<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>.","source":"In the **Reference Manager** window, select **System.IdentityModel**, and then click **OK**."},{"pos":[4889,5007],"content":"Open <bpt id=\"p1\">**</bpt>Class1.cs<ept id=\"p1\">**</ept>, or if it doesn’t exist, right-click <bpt id=\"p2\">**</bpt>ClaimsTransformation<ept id=\"p2\">**</ept>, click <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>, then click <bpt id=\"p4\">**</bpt>Class…<ept id=\"p4\">**</ept>","source":"Open **Class1.cs**, or if it doesn’t exist, right-click **ClaimsTransformation**, click **Add**, then click **Class…**"},{"content":"Add the following using directives to the code file:","pos":[5017,5069]},{"content":"Add the following class and method in the code file.","pos":[5183,5235]},{"pos":[5247,5391],"content":"[!WARNING]\nThe following code is for demonstration purposes only; make sure that you verify your intended permissions in production code.","leadings":["","    >  "],"nodes":[{"content":"The following code is for demonstration purposes only; make sure that you verify your intended permissions in production code.","pos":[11,137]}]},{"pos":[5940,6001],"content":"Save the file and build the <bpt id=\"p1\">**</bpt>ClaimsTransformation<ept id=\"p1\">**</ept> project.","source":"Save the file and build the **ClaimsTransformation** project."},{"pos":[6010,6107],"content":"In your <bpt id=\"p1\">**</bpt>TestApp<ept id=\"p1\">**</ept> ASP.NET project, right-click on References, and then click <bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept>.","source":"In your **TestApp** ASP.NET project, right-click on References, and then click **Add Reference**."},{"pos":[6117,6276],"content":"In the <bpt id=\"p1\">**</bpt>Reference Manager<ept id=\"p1\">**</ept> window, select <bpt id=\"p2\">**</bpt>Solution<ept id=\"p2\">**</ept> from the left menu, select <bpt id=\"p3\">**</bpt>ClaimsTransformation<ept id=\"p3\">**</ept> from the populated options, and then click <bpt id=\"p4\">**</bpt>OK<ept id=\"p4\">**</ept>.","source":"In the **Reference Manager** window, select **Solution** from the left menu, select **ClaimsTransformation** from the populated options, and then click **OK**."},{"content":"In the root <bpt id=\"p1\">**</bpt>Web.config<ept id=\"p1\">**</ept> file, navigate to the <bpt id=\"p2\">**</bpt><ph id=\"ph1\">\\&lt;</ph>system.identityModel&gt;<ept id=\"p2\">**</ept> entry.","pos":[6286,6369],"source":"In the root **Web.config** file, navigate to the **\\<system.identityModel>** entry."},{"content":"Within the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>identityConfiguration&gt;<ept id=\"p1\">**</ept> elements, add the following line and save the file:","pos":[6370,6461],"source":" Within the **\\<identityConfiguration>** elements, add the following line and save the file:"},{"pos":[6611,6638],"content":"Step 3 – Test Your Solution","linkify":"Step 3 – Test Your Solution","nodes":[{"content":"Step 3 – Test Your Solution","pos":[0,27]}]},{"content":"In this step you will test your ASP.NET Web Forms application, and verify that claims are presented when a user signs in with Forms authentication.","pos":[6642,6789]},{"pos":[6800,6880],"content":"To test your ASP.NET Web Forms application for claims using Forms authentication","linkify":"To test your ASP.NET Web Forms application for claims using Forms authentication","nodes":[{"content":"To test your ASP.NET Web Forms application for claims using Forms authentication","pos":[0,80]}]},{"content":"Press <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> to build and run the application.","pos":[6890,6936],"source":"Press **F5** to build and run the application."},{"content":"You should be presented with <bpt id=\"p1\">*</bpt>Default.aspx<ept id=\"p1\">*</ept>.","pos":[6937,6981],"source":" You should be presented with *Default.aspx*."},{"content":"On the <bpt id=\"p1\">*</bpt>Default.aspx<ept id=\"p1\">*</ept> page, you should see a table beneath the <bpt id=\"p2\">**</bpt>Your Claims<ept id=\"p2\">**</ept> heading that includes the <bpt id=\"p3\">**</bpt>Issuer<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>OriginalIssuer<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>Type<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>Value<ept id=\"p6\">**</ept>, and <bpt id=\"p7\">**</bpt>ValueType<ept id=\"p7\">**</ept> claims information about your account.","pos":[6991,7205],"source":"On the *Default.aspx* page, you should see a table beneath the **Your Claims** heading that includes the **Issuer**, **OriginalIssuer**, **Type**, **Value**, and **ValueType** claims information about your account."},{"content":"The last row should be presented in the following way:","pos":[7206,7260]},{"content":"LOCAL AUTHORITY","pos":[7302,7317]},{"content":"LOCAL AUTHORITY","pos":[7318,7333]},{"content":"Admin","pos":[7397,7402]}]}