{"content":"---\ntitle: \"operator keyword - C# Reference\"\nms.custom: seodec18\n\ndescription: \"Learn how to overload a built-in C# operator\"\nms.date: 08/27/2018\nf1_keywords: \n  - \"operator_CSharpKeyword\"\n  - \"operator\"\nhelpviewer_keywords: \n  - \"operator keyword [C#]\"\nms.assetid: 59218cce-e90e-42f6-a6bb-30300981b86a\n---\n# operator (C# Reference)\n\nUse the `operator` keyword to overload a built-in operator or to provide a user-defined conversion in a class or struct declaration.\n\nTo overload an operator on a custom class or struct, you create an operator declaration in the corresponding type. The operator declaration that overloads a built-in C# operator must satisfy the following rules:\n\n- It includes both a `public` and a `static` modifier.\n- It includes `operator X` where `X` is the name or symbol of the operator being overloaded.\n- Unary operators have one parameter, and binary operators have two parameters. In each case, at least one parameter must be the same type as the class or struct that declares the operator.\n\nFor information about how to define conversion operators, see the [explicit](explicit.md) and [implicit](implicit.md) keyword articles.\n\nFor an overview of the C# operators that can be overloaded, see the [Overloadable operators](../../programming-guide/statements-expressions-operators/overloadable-operators.md) article.\n\n## Example\n\nThe following example defines a `Fraction` type that represents fractional numbers. It overloads the `+` and `*` operators to perform fractional addition and multiplication, and also provides a conversion operator that converts a `Fraction` type to a `double` type.\n\n[!code-csharp[csrefKeywordsConversion#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsConversion/CS/csrefKeywordsConversion.cs#6)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [implicit](implicit.md)\n- [explicit](explicit.md)\n- [Overloadable operators](../../programming-guide/statements-expressions-operators/overloadable-operators.md)\n- [How to: Implement User-Defined Conversions Between Structs](../../programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md)\n","nodes":[{"pos":[4,302],"embed":true,"restype":"x-metadata","content":"title: \"operator keyword - C# Reference\"\nms.custom: seodec18\n\ndescription: \"Learn how to overload a built-in C# operator\"\nms.date: 08/27/2018\nf1_keywords: \n  - \"operator_CSharpKeyword\"\n  - \"operator\"\nhelpviewer_keywords: \n  - \"operator keyword [C#]\"\nms.assetid: 59218cce-e90e-42f6-a6bb-30300981b86a","nodes":[{"content":"operator keyword - C# Reference","nodes":[{"pos":[0,31],"content":"operator keyword - C# Reference","nodes":[{"content":"operator keyword - C# Reference","pos":[0,31]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to overload a built-in C# operator","nodes":[{"pos":[0,44],"content":"Learn how to overload a built-in C# operator","nodes":[{"content":"Learn how to overload a built-in C# operator","pos":[0,44]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[309,332],"content":"operator (C# Reference)","linkify":"operator (C# Reference)","nodes":[{"content":"operator (C# Reference)","pos":[0,23]}]},{"pos":[334,466],"content":"Use the <ph id=\"ph1\">`operator`</ph> keyword to overload a built-in operator or to provide a user-defined conversion in a class or struct declaration.","source":"Use the `operator` keyword to overload a built-in operator or to provide a user-defined conversion in a class or struct declaration."},{"content":"To overload an operator on a custom class or struct, you create an operator declaration in the corresponding type.","pos":[468,582]},{"content":"The operator declaration that overloads a built-in C# operator must satisfy the following rules:","pos":[583,679]},{"pos":[683,735],"content":"It includes both a <ph id=\"ph1\">`public`</ph> and a <ph id=\"ph2\">`static`</ph> modifier.","source":"It includes both a `public` and a `static` modifier."},{"pos":[738,828],"content":"It includes <ph id=\"ph1\">`operator X`</ph> where <ph id=\"ph2\">`X`</ph> is the name or symbol of the operator being overloaded.","source":"It includes `operator X` where `X` is the name or symbol of the operator being overloaded."},{"content":"Unary operators have one parameter, and binary operators have two parameters.","pos":[831,908]},{"content":"In each case, at least one parameter must be the same type as the class or struct that declares the operator.","pos":[909,1018]},{"pos":[1020,1155],"content":"For information about how to define conversion operators, see the <bpt id=\"p1\">[</bpt>explicit<ept id=\"p1\">](explicit.md)</ept> and <bpt id=\"p2\">[</bpt>implicit<ept id=\"p2\">](implicit.md)</ept> keyword articles.","source":"For information about how to define conversion operators, see the [explicit](explicit.md) and [implicit](implicit.md) keyword articles."},{"pos":[1157,1342],"content":"For an overview of the C# operators that can be overloaded, see the <bpt id=\"p1\">[</bpt>Overloadable operators<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/overloadable-operators.md)</ept> article.","source":"For an overview of the C# operators that can be overloaded, see the [Overloadable operators](../../programming-guide/statements-expressions-operators/overloadable-operators.md) article."},{"pos":[1347,1354],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example defines a <ph id=\"ph1\">`Fraction`</ph> type that represents fractional numbers.","pos":[1356,1439],"source":"The following example defines a `Fraction` type that represents fractional numbers."},{"content":"It overloads the <ph id=\"ph1\">`+`</ph> and <ph id=\"ph2\">`*`</ph> operators to perform fractional addition and multiplication, and also provides a conversion operator that converts a <ph id=\"ph3\">`Fraction`</ph> type to a <ph id=\"ph4\">`double`</ph> type.","pos":[1440,1621],"source":" It overloads the `+` and `*` operators to perform fractional addition and multiplication, and also provides a conversion operator that converts a `Fraction` type to a `double` type."},{"pos":[1773,1798],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1864,1872],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1876,1903],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1906,1962],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1965,1988],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[1991,2014],"content":"<bpt id=\"p1\">[</bpt>implicit<ept id=\"p1\">](implicit.md)</ept>","source":"[implicit](implicit.md)"},{"pos":[2017,2040],"content":"<bpt id=\"p1\">[</bpt>explicit<ept id=\"p1\">](explicit.md)</ept>","source":"[explicit](explicit.md)"},{"pos":[2043,2151],"content":"<bpt id=\"p1\">[</bpt>Overloadable operators<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/overloadable-operators.md)</ept>","source":"[Overloadable operators](../../programming-guide/statements-expressions-operators/overloadable-operators.md)"},{"pos":[2154,2333],"content":"<bpt id=\"p1\">[</bpt>How to: Implement User-Defined Conversions Between Structs<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md)</ept>","source":"[How to: Implement User-Defined Conversions Between Structs](../../programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md)"}]}