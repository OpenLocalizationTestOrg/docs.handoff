{"content":"---\ntitle: \"Introduction to Generics (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"generics [C#], about generics\"\nms.assetid: a1ad761e-42f7-41dd-a62f-452a2de26b9d\ncaps.latest.revision: 32\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Introduction to Generics (C# Programming Guide)\nGeneric classes and methods combine reusability, type safety and efficiency in a way that their non-generic counterparts cannot. Generics are most frequently used with collections and the methods that operate on them. Version 2.0 of the .NET Framework class library provides a new namespace, <xref:System.Collections.Generic>, which contains several new generic-based collection classes. It is recommended that all applications that target the [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] 2.0 and later use the new generic collection classes instead of the older non-generic counterparts such as <xref:System.Collections.ArrayList>. For more information, see [Generics in the .NET Framework Class Library](../../../csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).  \n  \n Of course, you can also create custom generic types and methods to provide your own generalized solutions and design patterns that are type-safe and efficient. The following code example shows a simple generic linked-list class for demonstration purposes. (In most cases, you should use the <xref:System.Collections.Generic.List%601> class provided by the .NET Framework class library instead of creating your own.) The type parameter `T` is used in several locations where a concrete type would ordinarily be used to indicate the type of the item stored in the list. It is used in the following ways:  \n  \n-   As the type of a method parameter in the `AddHead` method.  \n  \n-   As the return type of the public method `GetNext` and the `Data` property in the nested `Node` class.  \n  \n-   As the type of the private member data in the nested class.  \n  \n Note that T is available to the nested `Node` class. When `GenericList<T>` is instantiated with a concrete type, for example as a `GenericList<int>`, each occurrence of `T` will be replaced with `int`.  \n  \n [!code-cs[csProgGuideGenerics#2](../../../csharp/programming-guide/generics/codesnippet/CSharp/introduction-to-generics_1.cs)]  \n  \n The following code example shows how client code uses the generic `GenericList<T>` class to create a list of integers. Simply by changing the type argument, the following code could easily be modified to create lists of strings or any other custom type:  \n  \n [!code-cs[csProgGuideGenerics#3](../../../csharp/programming-guide/generics/codesnippet/CSharp/introduction-to-generics_2.cs)]  \n  \n## See Also  \n <xref:System.Collections.Generic>   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Generics](../../../csharp/programming-guide/generics/index.md)","nodes":[{"pos":[12,76],"content":"Introduction to Generics (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Introduction to Generics (C# Programming Guide) | Microsoft Docs","pos":[0,64]}]},{"pos":[562,609],"content":"Introduction to Generics (C# Programming Guide)","linkify":"Introduction to Generics (C# Programming Guide)","nodes":[{"content":"Introduction to Generics (C# Programming Guide)","pos":[0,47]}]},{"content":"Generic classes and methods combine reusability, type safety and efficiency in a way that their non-generic counterparts cannot.","pos":[610,738]},{"content":"Generics are most frequently used with collections and the methods that operate on them.","pos":[739,827]},{"content":"Version 2.0 of the .NET Framework class library provides a new namespace, <ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph>, which contains several new generic-based collection classes.","pos":[828,997],"source":" Version 2.0 of the .NET Framework class library provides a new namespace, <xref:System.Collections.Generic>, which contains several new generic-based collection classes."},{"content":"It is recommended that all applications that target the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> 2.0 and later use the new generic collection classes instead of the older non-generic counterparts such as <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[998,1281],"source":" It is recommended that all applications that target the [!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)] 2.0 and later use the new generic collection classes instead of the older non-generic counterparts such as <xref:System.Collections.ArrayList>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generics in the .NET Framework Class Library<ept id=\"p1\">](../../../csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>.","pos":[1282,1446],"source":" For more information, see [Generics in the .NET Framework Class Library](../../../csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)."},{"content":"Of course, you can also create custom generic types and methods to provide your own generalized solutions and design patterns that are type-safe and efficient.","pos":[1453,1612]},{"content":"The following code example shows a simple generic linked-list class for demonstration purposes.","pos":[1613,1708]},{"content":"(In most cases, you should use the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class provided by the .NET Framework class library instead of creating your own.) The type parameter <ph id=\"ph2\">`T`</ph> is used in several locations where a concrete type would ordinarily be used to indicate the type of the item stored in the list.","pos":[1709,2020],"source":" (In most cases, you should use the <xref:System.Collections.Generic.List%601> class provided by the .NET Framework class library instead of creating your own.) The type parameter `T` is used in several locations where a concrete type would ordinarily be used to indicate the type of the item stored in the list."},{"content":"It is used in the following ways:","pos":[2021,2054]},{"pos":[2064,2122],"content":"As the type of a method parameter in the <ph id=\"ph1\">`AddHead`</ph> method.","source":"As the type of a method parameter in the `AddHead` method."},{"pos":[2132,2233],"content":"As the return type of the public method <ph id=\"ph1\">`GetNext`</ph> and the <ph id=\"ph2\">`Data`</ph> property in the nested <ph id=\"ph3\">`Node`</ph> class.","source":"As the return type of the public method `GetNext` and the `Data` property in the nested `Node` class."},{"content":"As the type of the private member data in the nested class.","pos":[2243,2302]},{"content":"Note that T is available to the nested <ph id=\"ph1\">`Node`</ph> class.","pos":[2309,2361],"source":"Note that T is available to the nested `Node` class."},{"content":"When <ph id=\"ph1\">`GenericList&lt;T&gt;`</ph> is instantiated with a concrete type, for example as a <ph id=\"ph2\">`GenericList&lt;int&gt;`</ph>, each occurrence of <ph id=\"ph3\">`T`</ph> will be replaced with <ph id=\"ph4\">`int`</ph>.","pos":[2362,2510],"source":" When `GenericList<T>` is instantiated with a concrete type, for example as a `GenericList<int>`, each occurrence of `T` will be replaced with `int`."},{"pos":[2517,2643],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideGenerics#2<ept id=\"p2\">](../../../csharp/programming-guide/generics/codesnippet/CSharp/introduction-to-generics_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideGenerics#2](../../../csharp/programming-guide/generics/codesnippet/CSharp/introduction-to-generics_1.cs)]"},{"content":"The following code example shows how client code uses the generic <ph id=\"ph1\">`GenericList&lt;T&gt;`</ph> class to create a list of integers.","pos":[2650,2768],"source":"The following code example shows how client code uses the generic `GenericList<T>` class to create a list of integers."},{"content":"Simply by changing the type argument, the following code could easily be modified to create lists of strings or any other custom type:","pos":[2769,2903]},{"pos":[2910,3036],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideGenerics#3<ept id=\"p2\">](../../../csharp/programming-guide/generics/codesnippet/CSharp/introduction-to-generics_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideGenerics#3](../../../csharp/programming-guide/generics/codesnippet/CSharp/introduction-to-generics_2.cs)]"},{"pos":[3045,3053],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph>","pos":[3057,3090],"source":"<xref:System.Collections.Generic> "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3094,3162],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/index.md)</ept>","pos":[3165,3229],"source":" [Generics](../../../csharp/programming-guide/generics/index.md)"}]}