{"content":"---\ntitle: \"Overloads (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Overloads\"\n  - \"Overloads\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Overloads keyword\"\n  - \"hiding by signature\"\n  - \"Shadows keyword\"\n  - \"signature, hiding by\"\nms.assetid: 0c6820b8-25b2-4664-bc59-5ca93c99c042\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Overloads (Visual Basic)\nSpecifies that a property or procedure redeclares one or more existing properties or procedures with the same name.  \n  \n## Remarks  \n *Overloading* is the practice of supplying more than one definition for a given property or procedure name in the same scope. Redeclaring a property or procedure with a different signature is sometimes called *hiding by signature*.  \n  \n## Rules  \n  \n-   **Declaration Context.** You can use `Overloads` only in a property or procedure declaration statement.  \n  \n-   **Combined Modifiers.** You cannot specify `Overloads` together with [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md) in the same procedure declaration.  \n  \n-   **Required Differences.** The *signature* in this declaration must be different from the signature of every property or procedure that it overloads. The signature comprises the property or procedure name together with the following:  \n  \n    -   the number of parameters  \n  \n    -   the order of the parameters  \n  \n    -   the data types of the parameters  \n  \n    -   the number of type parameters (for a generic procedure)  \n  \n    -   the return type (only for a conversion operator procedure)  \n  \n     All overloads must have the same name, but each must differ from all the others in one or more of the preceding respects. This allows the compiler to distinguish which version to use when code calls the property or procedure.  \n  \n-   **Disallowed Differences.** Changing one or more of the following is not valid for overloading a property or procedure, because they are not part of the signature:  \n  \n    -   whether or not it returns a value (for a procedure)  \n  \n    -   the data type of the return value (except for a conversion operator)  \n  \n    -   the names of the parameters or type parameters  \n  \n    -   the constraints on the type parameters (for a generic procedure)  \n  \n    -   parameter modifier keywords (such as `ByRef` or `Optional`)  \n  \n    -   property or procedure modifier keywords (such as `Public` or `Shared`)  \n  \n-   **Optional Modifier.** You do not have to use the `Overloads` modifier when you are defining multiple overloaded properties or procedures in the same class. However, if you use `Overloads` in one of the declarations, you must use it in all of them.  \n  \n-   **Shadowing and Overloading.** `Overloads` can also be used to shadow an existing member, or set of overloaded members, in a base class. When you use `Overloads` in this way, you declare the property or method with the same name and the same parameter list as the base class member, and you do not supply the `Shadows` keyword.  \n  \n If you use `Overrides`, the compiler implicitly adds `Overloads` so that your library APIs work with C# more easily.  \n  \n The `Overloads` modifier can be used in these contexts:  \n  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n [Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)  \n  \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)  \n  \n## See Also  \n [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md)   \n [Procedure Overloading](../../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md)   \n [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)   \n [How to: Define a Conversion Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)","nodes":[{"pos":[12,53],"content":"Overloads (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Overloads (Visual Basic) | Microsoft Docs","pos":[0,41]}]},{"pos":[668,692],"content":"Overloads (Visual Basic)","linkify":"Overloads (Visual Basic)","nodes":[{"content":"Overloads (Visual Basic)","pos":[0,24]}]},{"content":"Specifies that a property or procedure redeclares one or more existing properties or procedures with the same name.","pos":[693,808]},{"pos":[817,824],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<bpt id=\"p1\">*</bpt>Overloading<ept id=\"p1\">*</ept> is the practice of supplying more than one definition for a given property or procedure name in the same scope.","pos":[828,953],"source":"*Overloading* is the practice of supplying more than one definition for a given property or procedure name in the same scope."},{"content":"Redeclaring a property or procedure with a different signature is sometimes called <bpt id=\"p1\">*</bpt>hiding by signature<ept id=\"p1\">*</ept>.","pos":[954,1059],"source":" Redeclaring a property or procedure with a different signature is sometimes called *hiding by signature*."},{"pos":[1068,1073],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Declaration Context.<ept id=\"p1\">**</ept>","pos":[1083,1107],"source":"**Declaration Context.**"},{"content":"You can use <ph id=\"ph1\">`Overloads`</ph> only in a property or procedure declaration statement.","pos":[1108,1186],"source":" You can use `Overloads` only in a property or procedure declaration statement."},{"content":"<bpt id=\"p1\">**</bpt>Combined Modifiers.<ept id=\"p1\">**</ept>","pos":[1196,1219],"source":"**Combined Modifiers.**"},{"content":"You cannot specify <ph id=\"ph1\">`Overloads`</ph> together with <bpt id=\"p1\">[</bpt>Shadows<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept> in the same procedure declaration.","pos":[1220,1372],"source":" You cannot specify `Overloads` together with [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md) in the same procedure declaration."},{"content":"<bpt id=\"p1\">**</bpt>Required Differences.<ept id=\"p1\">**</ept>","pos":[1382,1407],"source":"**Required Differences.**"},{"content":"The <bpt id=\"p1\">*</bpt>signature<ept id=\"p1\">*</ept> in this declaration must be different from the signature of every property or procedure that it overloads.","pos":[1408,1530],"source":" The *signature* in this declaration must be different from the signature of every property or procedure that it overloads."},{"content":"The signature comprises the property or procedure name together with the following:","pos":[1531,1614]},{"content":"the number of parameters","pos":[1628,1652]},{"content":"the order of the parameters","pos":[1666,1693]},{"content":"the data types of the parameters","pos":[1707,1739]},{"content":"the number of type parameters (for a generic procedure)","pos":[1753,1808]},{"content":"the return type (only for a conversion operator procedure)","pos":[1822,1880]},{"content":"All overloads must have the same name, but each must differ from all the others in one or more of the preceding respects.","pos":[1891,2012]},{"content":"This allows the compiler to distinguish which version to use when code calls the property or procedure.","pos":[2013,2116]},{"content":"<bpt id=\"p1\">**</bpt>Disallowed Differences.<ept id=\"p1\">**</ept>","pos":[2126,2153],"source":"**Disallowed Differences.**"},{"content":"Changing one or more of the following is not valid for overloading a property or procedure, because they are not part of the signature:","pos":[2154,2289]},{"content":"whether or not it returns a value (for a procedure)","pos":[2303,2354]},{"content":"the data type of the return value (except for a conversion operator)","pos":[2368,2436]},{"content":"the names of the parameters or type parameters","pos":[2450,2496]},{"content":"the constraints on the type parameters (for a generic procedure)","pos":[2510,2574]},{"pos":[2588,2647],"content":"parameter modifier keywords (such as <ph id=\"ph1\">`ByRef`</ph> or <ph id=\"ph2\">`Optional`</ph>)","source":"parameter modifier keywords (such as `ByRef` or `Optional`)"},{"pos":[2661,2731],"content":"property or procedure modifier keywords (such as <ph id=\"ph1\">`Public`</ph> or <ph id=\"ph2\">`Shared`</ph>)","source":"property or procedure modifier keywords (such as `Public` or `Shared`)"},{"content":"<bpt id=\"p1\">**</bpt>Optional Modifier.<ept id=\"p1\">**</ept>","pos":[2741,2763],"source":"**Optional Modifier.**"},{"content":"You do not have to use the <ph id=\"ph1\">`Overloads`</ph> modifier when you are defining multiple overloaded properties or procedures in the same class.","pos":[2764,2897],"source":" You do not have to use the `Overloads` modifier when you are defining multiple overloaded properties or procedures in the same class."},{"content":"However, if you use <ph id=\"ph1\">`Overloads`</ph> in one of the declarations, you must use it in all of them.","pos":[2898,2989],"source":" However, if you use `Overloads` in one of the declarations, you must use it in all of them."},{"content":"<bpt id=\"p1\">**</bpt>Shadowing and Overloading.<ept id=\"p1\">**</ept>","pos":[2999,3029],"source":"**Shadowing and Overloading.**"},{"content":"<ph id=\"ph1\">`Overloads`</ph> can also be used to shadow an existing member, or set of overloaded members, in a base class.","pos":[3030,3135],"source":"`Overloads` can also be used to shadow an existing member, or set of overloaded members, in a base class."},{"content":"When you use <ph id=\"ph1\">`Overloads`</ph> in this way, you declare the property or method with the same name and the same parameter list as the base class member, and you do not supply the <ph id=\"ph2\">`Shadows`</ph> keyword.","pos":[3136,3326],"source":" When you use `Overloads` in this way, you declare the property or method with the same name and the same parameter list as the base class member, and you do not supply the `Shadows` keyword."},{"pos":[3333,3449],"content":"If you use <ph id=\"ph1\">`Overrides`</ph>, the compiler implicitly adds <ph id=\"ph2\">`Overloads`</ph> so that your library APIs work with C# more easily.","source":"If you use `Overrides`, the compiler implicitly adds `Overloads` so that your library APIs work with C# more easily."},{"pos":[3456,3511],"content":"The <ph id=\"ph1\">`Overloads`</ph> modifier can be used in these contexts:","source":"The `Overloads` modifier can be used in these contexts:"},{"pos":[3518,3613],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[3620,3715],"content":"<bpt id=\"p1\">[</bpt>Operator Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/operator-statement.md)</ept>","source":"[Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)"},{"pos":[3722,3817],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[3824,3909],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[3918,3926],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Shadows<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id=\"ph1\"> </ph>","pos":[3930,4003],"source":"[Shadows](../../../visual-basic/language-reference/modifiers/shadows.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Procedure Overloading<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md)</ept><ph id=\"ph1\"> </ph>","pos":[4006,4126],"source":" [Procedure Overloading](../../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[4129,4249],"source":" [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[4252,4368],"source":" [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>","pos":[4371,4519],"source":" [How to: Define a Conversion Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)"}]}