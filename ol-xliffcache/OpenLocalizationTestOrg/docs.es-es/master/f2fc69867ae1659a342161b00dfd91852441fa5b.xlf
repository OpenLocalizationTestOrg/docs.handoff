<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="optimistic-concurrency.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2fc69867ae1659a342161b00dfd91852441fa5b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\optimistic-concurrency.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3393e6314d562554a826369bcb104f56405c4ccd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2f7c1619cdf7b7b5fbeee79763341f4357de520</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Optimistic Concurrency</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Optimistic Concurrency</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In a multiuser environment, there are two models for updating data in a database: optimistic concurrency and pessimistic concurrency.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> object is designed to encourage the use of optimistic concurrency for long-running activities, such as remoting data and interacting with data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Pessimistic concurrency involves locking rows at the data source to prevent other users from modifying data in a way that affects the current user.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In a pessimistic model, when a user performs an action that causes a lock to be applied, other users cannot perform actions that would conflict with the lock until the lock owner releases it.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This model is primarily used in environments where there is heavy contention for data, so that the cost of protecting data with locks is less than the cost of rolling back transactions if concurrency conflicts occur.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Therefore, in a pessimistic concurrency model, a user who updates a row establishes a lock.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Until the user has finished the update and released the lock, no one else can change that row.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For this reason, pessimistic concurrency is best implemented when lock times will be short, as in programmatic processing of records.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Pessimistic concurrency is not a scalable option when users are interacting with data and causing records to be locked for relatively large periods of time.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you need to update multiple rows in the same operation, then creating a transaction is a more scalable option than using pessimistic locking.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By contrast, users who use optimistic concurrency do not lock a row when reading it.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When a user wants to update a row, the application must determine whether another user has changed the row since it was read.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optimistic concurrency is generally used in environments with a low contention for data.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Optimistic concurrency improves performance because no locking of records is required, and locking of records requires additional server resources.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Also, in order to maintain record locks, a persistent connection to the database server is required.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Because this is not the case in an optimistic concurrency model, connections to the server are free to serve a larger number of clients in less time.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In an optimistic concurrency model, a violation is considered to have occurred if, after a user receives a value from the database, another user modifies the value before the first user has attempted to modify it.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>How the server resolves a concurrency violation is best shown by first describing the following example.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following tables follow an example of optimistic concurrency.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>At 1:00 p.m., User1 reads a row from the database with the following values:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CustID     LastName     FirstName<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>101          Smith             Bob</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Column name</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Original value</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Current value</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Value in database</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CustID</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>101</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>101</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>101</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>LastName</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Smith</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Smith</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Smith</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>FirstName</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Bob</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Bob</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Bob</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>At 1:01 p.m., User2 reads the same row.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>At 1:03 p.m., User2 changes <bpt id="p1">**</bpt>FirstName<ept id="p1">**</ept> from "Bob" to "Robert" and updates the database.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Column name</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Original value</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Current value</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Value in database</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CustID</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>101</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>101</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>101</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>LastName</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Smith</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Smith</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Smith</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>FirstName</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Bob</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Robert</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Bob</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The update succeeds because the values in the database at the time of update match the original values that User2 has.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>At 1:05 p.m., User1 changes "Bob"'s first name to "James" and tries to update the row.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Column name</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Original value</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Current value</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Value in database</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CustID</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>101</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>101</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>101</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>LastName</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Smith</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Smith</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Smith</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>FirstName</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Bob</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>James</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Robert</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>At this point, User1 encounters an optimistic concurrency violation because the value in the database ("Robert") no longer matches the original value that User1 was expecting ("Bob").</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The concurrency violation simply lets you know that the update failed.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The decision now needs to be made whether to overwrite the changes supplied by User2 with the changes supplied by User1, or to cancel the changes by User1.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Testing for Optimistic Concurrency Violations</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>There are several techniques for testing for an optimistic concurrency violation.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>One involves including a timestamp column in the table.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Databases commonly provide timestamp functionality that can be used to identify the date and time when the record was last updated.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Using this technique, a timestamp column is included in the table definition.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Whenever the record is updated, the timestamp is updated to reflect the current date and time.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In a test for optimistic concurrency violations, the timestamp column is returned with any query of the contents of the table.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When an update is attempted, the timestamp value in the database is compared to the original timestamp value contained in the modified row.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If they match, the update is performed and the timestamp column is updated with the current time to reflect the update.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If they do not match, an optimistic concurrency violation has occurred.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Another technique for testing for an optimistic concurrency violation is to verify that all the original column values in a row still match those found in the database.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For example, consider the following query:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To test for an optimistic concurrency violation when updating a row in <bpt id="p1">**</bpt>Table1<ept id="p1">**</ept>, you would issue the following UPDATE statement:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>As long as the original values match the values in the database, the update is performed.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If a value has been modified, the update will not modify the row because the WHERE clause will not find a match.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Note that it is recommended to always return a unique primary key value in your query.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Otherwise, the preceding UPDATE statement may update more than one row, which might not be your intent.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If a column at your data source allows nulls, you may need to extend your WHERE clause to check for a matching null reference in your local table and at the data source.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, the following UPDATE statement verifies that a null reference in the local row still matches a null reference at the data source, or that the value in the local row still matches the value at the data source.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You may also choose to apply less restrictive criteria when using an optimistic concurrency model.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For example, using only the primary key columns in the WHERE clause causes the data to be overwritten regardless of whether the other columns have been updated since the last query.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can also apply a WHERE clause only to specific columns, resulting in data being overwritten unless particular fields have been updated since they were last queried.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The DataAdapter.RowUpdated Event</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RowUpdated<ept id="p1">**</ept> event of the <ph id="ph1">&lt;xref:System.Data.Common.DataAdapter&gt;</ph> object can be used in conjunction with the techniques described earlier, to provide notification to your application of optimistic concurrency violations.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RowUpdated<ept id="p1">**</ept> occurs after each attempt to update a <bpt id="p2">**</bpt>Modified<ept id="p2">**</ept> row from a <bpt id="p3">**</bpt>DataSet<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This enables you to add special handling code, including processing when an exception occurs, adding custom error information, adding retry logic, and so on.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.RowUpdatedEventArgs&gt;</ph> object returns a <bpt id="p1">**</bpt>RecordsAffected<ept id="p1">**</ept> property containing the number of rows affected by a particular update command for a modified row in a table.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>By setting the update command to test for optimistic concurrency, the <bpt id="p1">**</bpt>RecordsAffected<ept id="p1">**</ept> property will, as a result, return a value of 0 when an optimistic concurrency violation has occurred, because no records were updated.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If this is the case, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RowUpdated<ept id="p1">**</ept> event enables you to handle this occurrence and avoid the exception by setting an appropriate <bpt id="p2">**</bpt>RowUpdatedEventArgs.Status<ept id="p2">**</ept> value, such as <bpt id="p3">**</bpt>UpdateStatus.SkipCurrentRow<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>RowUpdated<ept id="p1">**</ept> event, see <bpt id="p2">[</bpt>Handling DataAdapter Events<ept id="p2">](../../../../docs/framework/data/adonet/handling-dataadapter-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Optionally, you can set <bpt id="p1">**</bpt>DataAdapter.ContinueUpdateOnError<ept id="p1">**</ept> to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>, before calling <bpt id="p3">**</bpt>Update<ept id="p3">**</ept>, and respond to the error information stored in the <bpt id="p4">**</bpt>RowError<ept id="p4">**</ept> property of a particular row when the <bpt id="p5">**</bpt>Update<ept id="p5">**</ept> is completed.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Row Error Information<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/row-error-information.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Optimistic Concurrency Example</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The following is a simple example that sets the <bpt id="p1">**</bpt>UpdateCommand<ept id="p1">**</ept> of a <bpt id="p2">**</bpt>DataAdapter<ept id="p2">**</ept> to test for optimistic concurrency, and then uses the <bpt id="p3">**</bpt>RowUpdated<ept id="p3">**</ept> event to test for optimistic concurrency violations.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>When an optimistic concurrency violation is encountered, the application sets the <bpt id="p1">**</bpt>RowError<ept id="p1">**</ept> of the row that the update was issued for to reflect an optimistic concurrency violation.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Note that the parameter values passed to the WHERE clause of the UPDATE command are mapped to the <bpt id="p1">**</bpt>Original<ept id="p1">**</ept> values of their respective columns.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving and Modifying Data in ADO.NET<ept id="p1">](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Updating Data Sources with DataAdapters<ept id="p1">](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Row Error Information<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/row-error-information.md)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Transactions and Concurrency<ept id="p1">](../../../../docs/framework/data/adonet/transactions-and-concurrency.md)</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>