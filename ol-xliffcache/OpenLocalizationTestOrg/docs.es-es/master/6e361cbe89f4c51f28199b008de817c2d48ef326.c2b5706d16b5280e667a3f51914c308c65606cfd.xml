{"content":"---\ntitle: \"ReadOnly (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.ReadOnly\"\nhelpviewer_keywords: \n  - \"ReadOnly keyword [Visual Basic]\"\n  - \"variables [Visual Basic], read-only\"\n  - \"ReadOnly property\"\n  - \"properties [Visual Basic], read-only\"\n  - \"read-only variables\"\nms.assetid: e868185d-6142-4359-a2fd-a7965cadfce8\n---\n# ReadOnly (Visual Basic)\nSpecifies that a variable or property can be read but not written.  \n  \n## Remarks  \n  \n## Rules  \n  \n-   **Declaration Context.** You can use `ReadOnly` only at module level. This means the declaration context for a `ReadOnly` element must be a class, structure, or module, and cannot be a source file, namespace, or procedure.  \n  \n-   **Combined Modifiers.** You cannot specify `ReadOnly` together with `Static` in the same declaration.  \n  \n-   **Assigning a Value.** Code consuming a `ReadOnly` property cannot set its value. But code that has access to the underlying storage can assign or change the value at any time.  \n  \n     You can assign a value to a `ReadOnly` variable only in its declaration or in the constructor of a class or structure in which it is defined.  \n  \n## When to Use a ReadOnly Variable  \n There are situations in which you cannot use a [Const Statement](../../../visual-basic/language-reference/statements/const-statement.md) to declare and assign a constant value. For example, the `Const` statement might not accept the data type you want to assign, or you might not be able to compute the value at compile time with a constant expression. You might not even know the value at compile time. In these cases, you can use a `ReadOnly` variable to hold a constant value.  \n  \n> [!IMPORTANT]\n>  If the data type of the variable is a reference type, such as an array or a class instance, its members can be changed even if the variable itself is `ReadOnly`. The following example illustrates this.  \n  \n `ReadOnly characterArray() As Char = {\"x\"c, \"y\"c, \"z\"c}`  \n  \n `Sub changeArrayElement()`  \n  \n `characterArray(1) = \"M\"c`  \n  \n `End Sub`  \n  \n When initialized, the array pointed to by `characterArray()` holds \"x\", \"y\", and \"z\". Because the variable `characterArray` is `ReadOnly`, you cannot change its value once it is initialized; that is, you cannot assign a new array to it. However, you can change the values of one or more of the array members. Following a call to the procedure `changeArrayElement`, the array pointed to by `characterArray()` holds \"x\", \"M\", and \"z\".  \n  \n Note that this is similar to declaring a procedure parameter to be [ByVal](../../../visual-basic/language-reference/modifiers/byval.md), which prevents the procedure from changing the calling argument itself but allows it to change its members.  \n  \n## Example  \n The following example defines a `ReadOnly` property for the date on which an employee was hired. The class stores the property value internally as a `Private` variable, and only code inside the class can change that value. However, the property is `Public`, and any code that can access the class can read the property.  \n  \n [!code-vb[VbVbalrKeywords#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrKeywords/VB/Class1.vb#4)]  \n  \n The `ReadOnly` modifier can be used in these contexts:  \n  \n [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)  \n  \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n## See also\n\n- [WriteOnly](../../../visual-basic/language-reference/modifiers/writeonly.md)\n- [Keywords](../../../visual-basic/language-reference/keywords/index.md)\n","nodes":[{"pos":[4,332],"embed":true,"restype":"x-metadata","content":"title: \"ReadOnly (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.ReadOnly\"\nhelpviewer_keywords: \n  - \"ReadOnly keyword [Visual Basic]\"\n  - \"variables [Visual Basic], read-only\"\n  - \"ReadOnly property\"\n  - \"properties [Visual Basic], read-only\"\n  - \"read-only variables\"\nms.assetid: e868185d-6142-4359-a2fd-a7965cadfce8","nodes":[{"content":"ReadOnly (Visual Basic)","nodes":[{"pos":[0,23],"content":"ReadOnly (Visual Basic)","nodes":[{"content":"ReadOnly (Visual Basic)","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[339,362],"content":"ReadOnly (Visual Basic)","linkify":"ReadOnly (Visual Basic)","nodes":[{"content":"ReadOnly (Visual Basic)","pos":[0,23]}]},{"content":"Specifies that a variable or property can be read but not written.","pos":[363,429]},{"pos":[438,445],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[454,459],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Declaration Context.<ept id=\"p1\">**</ept>","pos":[469,493],"source":"**Declaration Context.**"},{"content":"You can use <ph id=\"ph1\">`ReadOnly`</ph> only at module level.","pos":[494,538],"source":" You can use `ReadOnly` only at module level."},{"content":"This means the declaration context for a <ph id=\"ph1\">`ReadOnly`</ph> element must be a class, structure, or module, and cannot be a source file, namespace, or procedure.","pos":[539,691],"source":" This means the declaration context for a `ReadOnly` element must be a class, structure, or module, and cannot be a source file, namespace, or procedure."},{"content":"<bpt id=\"p1\">**</bpt>Combined Modifiers.<ept id=\"p1\">**</ept>","pos":[701,724],"source":"**Combined Modifiers.**"},{"content":"You cannot specify <ph id=\"ph1\">`ReadOnly`</ph> together with <ph id=\"ph2\">`Static`</ph> in the same declaration.","pos":[725,802],"source":" You cannot specify `ReadOnly` together with `Static` in the same declaration."},{"content":"<bpt id=\"p1\">**</bpt>Assigning a Value.<ept id=\"p1\">**</ept>","pos":[812,834],"source":"**Assigning a Value.**"},{"content":"Code consuming a <ph id=\"ph1\">`ReadOnly`</ph> property cannot set its value.","pos":[835,893],"source":" Code consuming a `ReadOnly` property cannot set its value."},{"content":"But code that has access to the underlying storage can assign or change the value at any time.","pos":[894,988]},{"pos":[999,1140],"content":"You can assign a value to a <ph id=\"ph1\">`ReadOnly`</ph> variable only in its declaration or in the constructor of a class or structure in which it is defined.","source":"You can assign a value to a `ReadOnly` variable only in its declaration or in the constructor of a class or structure in which it is defined."},{"pos":[1149,1180],"content":"When to Use a ReadOnly Variable","linkify":"When to Use a ReadOnly Variable","nodes":[{"content":"When to Use a ReadOnly Variable","pos":[0,31]}]},{"content":"There are situations in which you cannot use a <bpt id=\"p1\">[</bpt>Const Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/const-statement.md)</ept> to declare and assign a constant value.","pos":[1184,1360],"source":"There are situations in which you cannot use a [Const Statement](../../../visual-basic/language-reference/statements/const-statement.md) to declare and assign a constant value."},{"content":"For example, the <ph id=\"ph1\">`Const`</ph> statement might not accept the data type you want to assign, or you might not be able to compute the value at compile time with a constant expression.","pos":[1361,1536],"source":" For example, the `Const` statement might not accept the data type you want to assign, or you might not be able to compute the value at compile time with a constant expression."},{"content":"You might not even know the value at compile time.","pos":[1537,1587]},{"content":"In these cases, you can use a <ph id=\"ph1\">`ReadOnly`</ph> variable to hold a constant value.","pos":[1588,1663],"source":" In these cases, you can use a `ReadOnly` variable to hold a constant value."},{"pos":[1671,1888],"content":"[!IMPORTANT]\n If the data type of the variable is a reference type, such as an array or a class instance, its members can be changed even if the variable itself is `ReadOnly`. The following example illustrates this.","leadings":["","> "],"nodes":[{"content":"If the data type of the variable is a reference type, such as an array or a class instance, its members can be changed even if the variable itself is `ReadOnly`. The following example illustrates this.","pos":[14,215],"nodes":[{"content":"If the data type of the variable is a reference type, such as an array or a class instance, its members can be changed even if the variable itself is <ph id=\"ph1\">`ReadOnly`</ph>.","pos":[0,161],"source":"If the data type of the variable is a reference type, such as an array or a class instance, its members can be changed even if the variable itself is `ReadOnly`."},{"content":"The following example illustrates this.","pos":[162,201]}]}]},{"content":"When initialized, the array pointed to by <ph id=\"ph1\">`characterArray()`</ph> holds \"x\", \"y\", and \"z\".","pos":[2040,2125],"source":"When initialized, the array pointed to by `characterArray()` holds \"x\", \"y\", and \"z\"."},{"content":"Because the variable <ph id=\"ph1\">`characterArray`</ph> is <ph id=\"ph2\">`ReadOnly`</ph>, you cannot change its value once it is initialized; that is, you cannot assign a new array to it.","pos":[2126,2276],"source":" Because the variable `characterArray` is `ReadOnly`, you cannot change its value once it is initialized; that is, you cannot assign a new array to it."},{"content":"However, you can change the values of one or more of the array members.","pos":[2277,2348]},{"content":"Following a call to the procedure <ph id=\"ph1\">`changeArrayElement`</ph>, the array pointed to by <ph id=\"ph2\">`characterArray()`</ph> holds \"x\", \"M\", and \"z\".","pos":[2349,2472],"source":" Following a call to the procedure `changeArrayElement`, the array pointed to by `characterArray()` holds \"x\", \"M\", and \"z\"."},{"pos":[2479,2723],"content":"Note that this is similar to declaring a procedure parameter to be <bpt id=\"p1\">[</bpt>ByVal<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/byval.md)</ept>, which prevents the procedure from changing the calling argument itself but allows it to change its members.","source":"Note that this is similar to declaring a procedure parameter to be [ByVal](../../../visual-basic/language-reference/modifiers/byval.md), which prevents the procedure from changing the calling argument itself but allows it to change its members."},{"pos":[2732,2739],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example defines a <ph id=\"ph1\">`ReadOnly`</ph> property for the date on which an employee was hired.","pos":[2743,2839],"source":"The following example defines a `ReadOnly` property for the date on which an employee was hired."},{"content":"The class stores the property value internally as a <ph id=\"ph1\">`Private`</ph> variable, and only code inside the class can change that value.","pos":[2840,2965],"source":" The class stores the property value internally as a `Private` variable, and only code inside the class can change that value."},{"content":"However, the property is <ph id=\"ph1\">`Public`</ph>, and any code that can access the class can read the property.","pos":[2966,3062],"source":" However, the property is `Public`, and any code that can access the class can read the property."},{"pos":[3189,3243],"content":"The <ph id=\"ph1\">`ReadOnly`</ph> modifier can be used in these contexts:","source":"The `ReadOnly` modifier can be used in these contexts:"},{"pos":[3250,3335],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)"},{"pos":[3342,3437],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[3446,3454],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3458,3534],"content":"<bpt id=\"p1\">[</bpt>WriteOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/writeonly.md)</ept>","source":"[WriteOnly](../../../visual-basic/language-reference/modifiers/writeonly.md)"},{"pos":[3537,3607],"content":"<bpt id=\"p1\">[</bpt>Keywords<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/index.md)</ept>","source":"[Keywords](../../../visual-basic/language-reference/keywords/index.md)"}]}