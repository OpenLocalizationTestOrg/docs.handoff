{"content":"---\ntitle: \"Arithmetic operators - C# Reference\"\ndescription: \"Learn about C# operators that perform multiplication, division, remainder, addition, and subtraction operations with numeric types.\"\nms.date: 03/27/2019\nauthor: pkulikov\nf1_keywords: \n  - \"++_CSharpKeyword\"\n  - \"--_CSharpKeyword\"\n  - \"*_CSharpKeyword\"\n  - \"/_CSharpKeyword\"\n  - \"%_CSharpKeyword\"\n  - \"+_CSharpKeyword\"\n  - \"-_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"arithmetic operators [C#]\"\n  - \"increment operator [C#]\"\n  - \"++ operator [C#]\"\n  - \"decrement operator [C#]\"\n  - \"-- operator [C#]\"\n  - \"multiplication operator [C#]\"\n  - \"* operator [C#]\"\n  - \"division operator [C#]\"\n  - \"/ operator [C#]\"\n  - \"remainder operator [C#]\"\n  - \"% operator [C#]\"\n  - \"addition operator [C#]\"\n  - \"+ operator [C#]\"\n  - \"subtraction operator [C#]\"\n  - \"- operator [C#]\"\n---\n# Arithmetic operators (C# Reference)\n\nThe following operators perform arithmetic operations with numeric types:\n\n- Unary [`++` (increment)](#increment-operator-), [`--` (decrement)](#decrement-operator---), [`+` (plus)](#unary-plus-and-minus-operators), and [`-` (minus)](#unary-plus-and-minus-operators) operators.\n- Binary [`*` (multiplication)](#multiplication-operator-), [`/` (division)](#division-operator-), [`%` (remainder)](#remainder-operator-), [`+` (addition)](#addition-operator-), and [`-` (subtraction)](#subtraction-operator--) operators.\n\nThose operators support all [integral](../keywords/integral-types-table.md) and [floating-point](../keywords/floating-point-types-table.md) numeric types.\n\n## Increment operator ++\n\nThe unary increment operator `++` increments its operand by 1. The operand must be a variable, a [property](../../programming-guide/classes-and-structs/properties.md) access, or an [indexer](../../../csharp/programming-guide/indexers/index.md) access.\n\nThe increment operator is supported in two forms: the postfix increment operator, `x++`, and the prefix increment operator, `++x`.\n\n### Postfix increment operator\n\nThe result of `x++` is the value of `x` *before* the operation, as the following example shows:\n\n[!code-csharp-interactive[postfix increment](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#PostfixIncrement)]\n\n### Prefix increment operator\n\nThe result of `++x` is the value of `x` *after* the operation, as the following example shows:\n\n[!code-csharp-interactive[prefix increment](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#PrefixIncrement)]\n\n## Decrement operator --\n\nThe unary decrement operator `--` decrements its operand by 1. The operand must be a variable, a [property](../../programming-guide/classes-and-structs/properties.md) access, or an [indexer](../../../csharp/programming-guide/indexers/index.md) access.\n\nThe decrement operator is supported in two forms: the postfix decrement operator, `x--`, and the prefix decrement operator, `--x`.\n\n### Postfix decrement operator\n\nThe result of `x--` is the value of `x` *before* the operation, as the following example shows:\n\n[!code-csharp-interactive[postfix decrement](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#PostfixDecrement)]\n\n### Prefix decrement operator\n\nThe result of `--x` is the value of `x` *after* the operation, as the following example shows:\n\n[!code-csharp-interactive[prefix decrement](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#PrefixDecrement)]\n\n## Unary plus and minus operators\n\nThe unary `+` operator returns the value of its operand. The unary `-` operator computes the numeric negation of its operand.\n\n[!code-csharp-interactive[unary plus and minus](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#UnaryPlusAndMinus)]\n\nThe unary `-` operator doesn't support the [ulong](../keywords/ulong.md) type.\n\n## Multiplication operator *\n\nThe multiplication operator `*` computes the product of its operands:\n\n[!code-csharp-interactive[multiplication operator](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#Multiplication)]\n\nThe unary `*` operator is a [pointer indirection operator](multiplication-operator.md#pointer-indirection-operator).\n\n## Division operator /\n\nThe division operator `/` divides its first operand by its second operand.\n\n### Integer division\n\nFor the operands of integer types, the result of the `/` operator is of an integer type and equals the quotient of the two operands rounded towards zero:\n\n[!code-csharp-interactive[integer division](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#IntegerDivision)]\n\nTo obtain the quotient of the two operands as a floating-point number, use the `float`, `double`, or `decimal` type:\n\n[!code-csharp-interactive[integer as floating-point division](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#IntegerAsFloatingPointDivision)]\n\n### Floating-point division\n\nFor the `float`, `double`, and `decimal` types, the result of the `/` operator is the quotient of the two operands:\n\n[!code-csharp-interactive[floating-point division](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#FloatingPointDivision)]\n\nIf one of the operands is `decimal`, another operand can be neither `float` nor `double`, because neither `float` nor `double` is implicitly convertible to `decimal`. You must explicitly convert the `float` or `double` operand to the `decimal` type. For more information about implicit conversions between numeric types, see [Implicit numeric conversions table](../keywords/implicit-numeric-conversions-table.md).\n\n## Remainder operator %\n\nThe remainder operator `%` computes the remainder after dividing its first operand by its second operand.\n\n### Integer remainder\n  \nFor the operands of integer types, the result of `a % b` is the value produced by `a - (a / b) * b`. The sign of the non-zero remainder is the same as that of the first operand, as the following example shows:\n\n[!code-csharp-interactive[integer remainder](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#IntegerRemainder)]\n\nUse the <xref:System.Math.DivRem%2A?displayProperty=nameWithType> method to compute both integer division and remainder results.\n\n### Floating-point remainder\n\nFor the `float` and `double` operands, the result of `x % y` for the finite `x` and `y` is the value `z` such that\n\n- The sign of `z`, if non-zero, is the same as the sign of `x`.\n- The absolute value of `z` is the value produced by `|x| - n * |y|` where `n` is the largest possible integer that is less than or equal to `|x| / |y|` and `|x|` and `|y|` are the absolute values of `x` and `y`, respectively.\n\n> [!NOTE]\n> This method of computing the remainder is analogous to that used for integer operands, but differs from the IEEE 754. If you need the remainder operation that complies with the IEEE 754, use the <xref:System.Math.IEEERemainder%2A?displayProperty=nameWithType> method.\n\nFor information about the behavior of the `%` operator with non-finite operands, see the [Remainder operator](~/_csharplang/spec/expressions.md#remainder-operator) section of the [C# language specification](~/_csharplang/spec/introduction.md).\n\nFor the `decimal` operands, the remainder operator `%` is equivalent to the [remainder operator](<xref:System.Decimal.op_Modulus(System.Decimal,System.Decimal)>) of the <xref:System.Decimal?displayProperty=nameWithType> type.\n\nThe following example demonstrates the behavior of the remainder operator with floating-point operands:\n\n[!code-csharp-interactive[floating-point remainder](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#FloatingPointRemainder)]\n\n## Addition operator +\n\nThe addition operator `+` computes the sum of its operands:\n\n[!code-csharp-interactive[addition operator](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#Addition)]\n\nYou also can use the `+` operator for string concatenation and delegate combination. For more information, see the [`+` operator](addition-operator.md) article.\n\n## Subtraction operator -\n\nThe subtraction operator `-` subtracts its second operand from its first operand:\n\n[!code-csharp-interactive[subtraction operator](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#Subtraction)]\n\nYou also can use the `-` operator for delegate removal. For more information, see the [`-` operator](subtraction-operator.md) article.\n\n## Operator precedence and associativity\n\nThe following list orders arithmetic operators starting from the highest precedence to the lowest:\n\n- Postfix increment `x++` and decrement `x--` operators.\n- Prefix increment `++x` and decrement `--x` and unary `+` and `-` operators.\n- Multiplicative `*`, `/`, and `%` operators.\n- Additive `+` and `-` operators.\n\nBinary arithmetic operators are left-associative. That is, operators with the same precedence level are evaluated from left to right.\n\nUse parentheses, `()`, to change the order of evaluation imposed by operator precedence and associativity.\n\n[!code-csharp-interactive[precedence and associativity](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#PrecedenceAndAssociativity)]\n\nFor the complete list of C# operators ordered by precedence level, see [C# operators](index.md).\n\n## Compound assignment\n\nFor a binary operator `op`, a compound assignment expression of the form\n\n```csharp\nx op= y\n```\n\nis equivalent to\n\n```csharp\nx = x op y\n```\n\nexcept that `x` is only evaluated once.\n\nThe following example demonstrates the usage of compound assignment with arithmetic operators:\n\n[!code-csharp-interactive[compound assignment](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#CompoundAssignment)]\n\nYou also use the `+=` and `-=` operators to subscribe to and unsubscribe from [events](../keywords/event.md). For more information, see [How to: subscribe to and unsubscribe from events](../../programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md).\n\n## Arithmetic overflow and division by zero\n\nWhen the result of an arithmetic operation is outside the range of possible finite values of the involved numeric type, the behavior of an arithmetic operator depends on the type of its operands.\n\n### Integer arithmetic overflow\n\nInteger division by zero always throws a <xref:System.DivideByZeroException>.\n\nIn case of integer arithmetic overflow, an overflow checking context, which can be [checked or unchecked](../keywords/checked-and-unchecked.md), controls the resulting behavior:\n\n- In a checked context, if overflow happens in a constant expression, a compile-time error occurs. Otherwise, when the operation is performed at run time, an <xref:System.OverflowException> is thrown.\n- In an unchecked context, the result is truncated by discarding any high-order bits that don't fit in the destination type.\n\nAlong with the [checked and unchecked](../keywords/checked-and-unchecked.md) statements, you can use the `checked` and `unchecked` operators to control the overflow checking context, in which an expression is evaluated:\n\n[!code-csharp-interactive[checked and unchecked](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#CheckedUnchecked)]\n\nBy default, arithmetic operations occur in an *unchecked* context.\n\n### Floating-point arithmetic overflow\n\nArithmetic operations with the `float` and `double` types never throw an exception. The result of arithmetic operations with those types can be one of special values that represent infinity and not-a-number:\n\n[!code-csharp-interactive[double non-finite values](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#FloatingPointOverflow)]\n\nFor the operands of the `decimal` type, arithmetic overflow always throws an <xref:System.OverflowException> and division by zero always throws a <xref:System.DivideByZeroException>.\n\n## Round-off errors\n\nBecause of general limitations of the floating-point representation of real numbers and floating-point arithmetic, the round-off errors might occur in calculations with floating-point types. That is, the produced result of an expression might differ from the expected mathematical result. The following example demonstrates several such cases:\n\n[!code-csharp-interactive[round-off errors](~/samples/snippets/csharp/language-reference/operators/ArithmeticOperators.cs#RoundOffErrors)]\n\nFor more information, see remarks at [System.Double](/dotnet/api/system.double#remarks), [System.Single](/dotnet/api/system.single#remarks), or [System.Decimal](/dotnet/api/system.decimal#remarks) reference pages.\n\n## Operator overloadability\n\nUser-defined types can [overload](../keywords/operator.md) the unary (`++`, `--`, `+`, and `-`) and binary (`*`, `/`, `%`, `+`, and `-`) arithmetic operators. When a binary operator is overloaded, the corresponding compound assignment operator is also implicitly overloaded. A user-defined type cannot explicitly overload a compound assignment operator.\n\n## C# language specification\n\nFor more information, see the following sections of the [C# language specification](~/_csharplang/spec/introduction.md):\n\n- [Postfix increment and decrement operators](~/_csharplang/spec/expressions.md#postfix-increment-and-decrement-operators)\n- [Prefix increment and decrement operators](~/_csharplang/spec/expressions.md#prefix-increment-and-decrement-operators)\n- [Unary plus operator](~/_csharplang/spec/expressions.md#unary-plus-operator)\n- [Unary minus operator](~/_csharplang/spec/expressions.md#unary-minus-operator)\n- [Multiplication operator](~/_csharplang/spec/expressions.md#multiplication-operator)\n- [Division operator](~/_csharplang/spec/expressions.md#division-operator)\n- [Remainder operator](~/_csharplang/spec/expressions.md#remainder-operator)\n- [Addition operator](~/_csharplang/spec/expressions.md#addition-operator)\n- [Subtraction operator](~/_csharplang/spec/expressions.md#subtraction-operator)\n- [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment)\n- [The checked and unchecked operators](~/_csharplang/spec/expressions.md#the-checked-and-unchecked-operators)\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- <xref:System.Math?displayProperty=nameWithType>\n- <xref:System.MathF?displayProperty=nameWithType>\n- [Numerics in .NET](../../../standard/numerics.md)\n","nodes":[{"pos":[4,827],"embed":true,"restype":"x-metadata","content":"title: \"Arithmetic operators - C# Reference\"\ndescription: \"Learn about C# operators that perform multiplication, division, remainder, addition, and subtraction operations with numeric types.\"\nms.date: 03/27/2019\nauthor: pkulikov\nf1_keywords: \n  - \"++_CSharpKeyword\"\n  - \"--_CSharpKeyword\"\n  - \"*_CSharpKeyword\"\n  - \"/_CSharpKeyword\"\n  - \"%_CSharpKeyword\"\n  - \"+_CSharpKeyword\"\n  - \"-_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"arithmetic operators [C#]\"\n  - \"increment operator [C#]\"\n  - \"++ operator [C#]\"\n  - \"decrement operator [C#]\"\n  - \"-- operator [C#]\"\n  - \"multiplication operator [C#]\"\n  - \"* operator [C#]\"\n  - \"division operator [C#]\"\n  - \"/ operator [C#]\"\n  - \"remainder operator [C#]\"\n  - \"% operator [C#]\"\n  - \"addition operator [C#]\"\n  - \"+ operator [C#]\"\n  - \"subtraction operator [C#]\"\n  - \"- operator [C#]\"","nodes":[{"content":"Arithmetic operators - C# Reference","nodes":[{"pos":[0,35],"content":"Arithmetic operators - C# Reference","nodes":[{"content":"Arithmetic operators - C# Reference","pos":[0,35]}]}],"path":["title"],"nosxs":false},{"content":"Learn about C# operators that perform multiplication, division, remainder, addition, and subtraction operations with numeric types.","nodes":[{"pos":[0,131],"content":"Learn about C# operators that perform multiplication, division, remainder, addition, and subtraction operations with numeric types.","nodes":[{"content":"Learn about C# operators that perform multiplication, division, remainder, addition, and subtraction operations with numeric types.","pos":[0,131]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[834,869],"content":"Arithmetic operators (C# Reference)","linkify":"Arithmetic operators (C# Reference)","nodes":[{"content":"Arithmetic operators (C# Reference)","pos":[0,35]}]},{"content":"The following operators perform arithmetic operations with numeric types:","pos":[871,944]},{"pos":[948,1148],"content":"Unary <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`++`</ph> (increment)<ept id=\"p1\">](#increment-operator-)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`--`</ph> (decrement)<ept id=\"p2\">](#decrement-operator---)</ept>, <bpt id=\"p3\">[</bpt><ph id=\"ph3\">`+`</ph> (plus)<ept id=\"p3\">](#unary-plus-and-minus-operators)</ept>, and <bpt id=\"p4\">[</bpt><ph id=\"ph4\">`-`</ph> (minus)<ept id=\"p4\">](#unary-plus-and-minus-operators)</ept> operators.","source":"Unary [`++` (increment)](#increment-operator-), [`--` (decrement)](#decrement-operator---), [`+` (plus)](#unary-plus-and-minus-operators), and [`-` (minus)](#unary-plus-and-minus-operators) operators."},{"pos":[1151,1387],"content":"Binary <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`*`</ph> (multiplication)<ept id=\"p1\">](#multiplication-operator-)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`/`</ph> (division)<ept id=\"p2\">](#division-operator-)</ept>, <bpt id=\"p3\">[</bpt><ph id=\"ph3\">`%`</ph> (remainder)<ept id=\"p3\">](#remainder-operator-)</ept>, <bpt id=\"p4\">[</bpt><ph id=\"ph4\">`+`</ph> (addition)<ept id=\"p4\">](#addition-operator-)</ept>, and <bpt id=\"p5\">[</bpt><ph id=\"ph5\">`-`</ph> (subtraction)<ept id=\"p5\">](#subtraction-operator--)</ept> operators.","source":"Binary [`*` (multiplication)](#multiplication-operator-), [`/` (division)](#division-operator-), [`%` (remainder)](#remainder-operator-), [`+` (addition)](#addition-operator-), and [`-` (subtraction)](#subtraction-operator--) operators."},{"pos":[1389,1543],"content":"Those operators support all <bpt id=\"p1\">[</bpt>integral<ept id=\"p1\">](../keywords/integral-types-table.md)</ept> and <bpt id=\"p2\">[</bpt>floating-point<ept id=\"p2\">](../keywords/floating-point-types-table.md)</ept> numeric types.","source":"Those operators support all [integral](../keywords/integral-types-table.md) and [floating-point](../keywords/floating-point-types-table.md) numeric types."},{"pos":[1548,1569],"content":"Increment operator ++","linkify":"Increment operator ++","nodes":[{"content":"Increment operator ++","pos":[0,21]}]},{"content":"The unary increment operator <ph id=\"ph1\">`++`</ph> increments its operand by 1.","pos":[1571,1633],"source":"The unary increment operator `++` increments its operand by 1."},{"content":"The operand must be a variable, a <bpt id=\"p1\">[</bpt>property<ept id=\"p1\">](../../programming-guide/classes-and-structs/properties.md)</ept> access, or an <bpt id=\"p2\">[</bpt>indexer<ept id=\"p2\">](../../../csharp/programming-guide/indexers/index.md)</ept> access.","pos":[1634,1822],"source":" The operand must be a variable, a [property](../../programming-guide/classes-and-structs/properties.md) access, or an [indexer](../../../csharp/programming-guide/indexers/index.md) access."},{"pos":[1824,1954],"content":"The increment operator is supported in two forms: the postfix increment operator, <ph id=\"ph1\">`x++`</ph>, and the prefix increment operator, <ph id=\"ph2\">`++x`</ph>.","source":"The increment operator is supported in two forms: the postfix increment operator, `x++`, and the prefix increment operator, `++x`."},{"pos":[1960,1986],"content":"Postfix increment operator","linkify":"Postfix increment operator","nodes":[{"content":"Postfix increment operator","pos":[0,26]}]},{"pos":[1988,2083],"content":"The result of <ph id=\"ph1\">`x++`</ph> is the value of <ph id=\"ph2\">`x`</ph> <bpt id=\"p1\">*</bpt>before<ept id=\"p1\">*</ept> the operation, as the following example shows:","source":"The result of `x++` is the value of `x` *before* the operation, as the following example shows:"},{"pos":[2232,2257],"content":"Prefix increment operator","linkify":"Prefix increment operator","nodes":[{"content":"Prefix increment operator","pos":[0,25]}]},{"pos":[2259,2353],"content":"The result of <ph id=\"ph1\">`++x`</ph> is the value of <ph id=\"ph2\">`x`</ph> <bpt id=\"p1\">*</bpt>after<ept id=\"p1\">*</ept> the operation, as the following example shows:","source":"The result of `++x` is the value of `x` *after* the operation, as the following example shows:"},{"pos":[2499,2520],"content":"Decrement operator --","linkify":"Decrement operator --","nodes":[{"content":"Decrement operator --","pos":[0,21]}]},{"content":"The unary decrement operator <ph id=\"ph1\">`--`</ph> decrements its operand by 1.","pos":[2522,2584],"source":"The unary decrement operator `--` decrements its operand by 1."},{"content":"The operand must be a variable, a <bpt id=\"p1\">[</bpt>property<ept id=\"p1\">](../../programming-guide/classes-and-structs/properties.md)</ept> access, or an <bpt id=\"p2\">[</bpt>indexer<ept id=\"p2\">](../../../csharp/programming-guide/indexers/index.md)</ept> access.","pos":[2585,2773],"source":" The operand must be a variable, a [property](../../programming-guide/classes-and-structs/properties.md) access, or an [indexer](../../../csharp/programming-guide/indexers/index.md) access."},{"pos":[2775,2905],"content":"The decrement operator is supported in two forms: the postfix decrement operator, <ph id=\"ph1\">`x--`</ph>, and the prefix decrement operator, <ph id=\"ph2\">`--x`</ph>.","source":"The decrement operator is supported in two forms: the postfix decrement operator, `x--`, and the prefix decrement operator, `--x`."},{"pos":[2911,2937],"content":"Postfix decrement operator","linkify":"Postfix decrement operator","nodes":[{"content":"Postfix decrement operator","pos":[0,26]}]},{"pos":[2939,3034],"content":"The result of <ph id=\"ph1\">`x--`</ph> is the value of <ph id=\"ph2\">`x`</ph> <bpt id=\"p1\">*</bpt>before<ept id=\"p1\">*</ept> the operation, as the following example shows:","source":"The result of `x--` is the value of `x` *before* the operation, as the following example shows:"},{"pos":[3183,3208],"content":"Prefix decrement operator","linkify":"Prefix decrement operator","nodes":[{"content":"Prefix decrement operator","pos":[0,25]}]},{"pos":[3210,3304],"content":"The result of <ph id=\"ph1\">`--x`</ph> is the value of <ph id=\"ph2\">`x`</ph> <bpt id=\"p1\">*</bpt>after<ept id=\"p1\">*</ept> the operation, as the following example shows:","source":"The result of `--x` is the value of `x` *after* the operation, as the following example shows:"},{"pos":[3450,3480],"content":"Unary plus and minus operators","linkify":"Unary plus and minus operators","nodes":[{"content":"Unary plus and minus operators","pos":[0,30]}]},{"content":"The unary <ph id=\"ph1\">`+`</ph> operator returns the value of its operand.","pos":[3482,3538],"source":"The unary `+` operator returns the value of its operand."},{"content":"The unary <ph id=\"ph1\">`-`</ph> operator computes the numeric negation of its operand.","pos":[3539,3607],"source":" The unary `-` operator computes the numeric negation of its operand."},{"pos":[3756,3834],"content":"The unary <ph id=\"ph1\">`-`</ph> operator doesn't support the <bpt id=\"p1\">[</bpt>ulong<ept id=\"p1\">](../keywords/ulong.md)</ept> type.","source":"The unary `-` operator doesn't support the [ulong](../keywords/ulong.md) type."},{"pos":[3839,3864],"content":"Multiplication operator *","linkify":"Multiplication operator *","nodes":[{"content":"Multiplication operator *","pos":[0,25]}]},{"pos":[3866,3935],"content":"The multiplication operator <ph id=\"ph1\">`*`</ph> computes the product of its operands:","source":"The multiplication operator `*` computes the product of its operands:"},{"pos":[4084,4200],"content":"The unary <ph id=\"ph1\">`*`</ph> operator is a <bpt id=\"p1\">[</bpt>pointer indirection operator<ept id=\"p1\">](multiplication-operator.md#pointer-indirection-operator)</ept>.","source":"The unary `*` operator is a [pointer indirection operator](multiplication-operator.md#pointer-indirection-operator)."},{"pos":[4205,4224],"content":"Division operator /","linkify":"Division operator /","nodes":[{"content":"Division operator /","pos":[0,19]}]},{"pos":[4226,4300],"content":"The division operator <ph id=\"ph1\">`/`</ph> divides its first operand by its second operand.","source":"The division operator `/` divides its first operand by its second operand."},{"pos":[4306,4322],"content":"Integer division","linkify":"Integer division","nodes":[{"content":"Integer division","pos":[0,16]}]},{"pos":[4324,4477],"content":"For the operands of integer types, the result of the <ph id=\"ph1\">`/`</ph> operator is of an integer type and equals the quotient of the two operands rounded towards zero:","source":"For the operands of integer types, the result of the `/` operator is of an integer type and equals the quotient of the two operands rounded towards zero:"},{"pos":[4620,4736],"content":"To obtain the quotient of the two operands as a floating-point number, use the <ph id=\"ph1\">`float`</ph>, <ph id=\"ph2\">`double`</ph>, or <ph id=\"ph3\">`decimal`</ph> type:","source":"To obtain the quotient of the two operands as a floating-point number, use the `float`, `double`, or `decimal` type:"},{"pos":[4916,4939],"content":"Floating-point division","linkify":"Floating-point division","nodes":[{"content":"Floating-point division","pos":[0,23]}]},{"pos":[4941,5056],"content":"For the <ph id=\"ph1\">`float`</ph>, <ph id=\"ph2\">`double`</ph>, and <ph id=\"ph3\">`decimal`</ph> types, the result of the <ph id=\"ph4\">`/`</ph> operator is the quotient of the two operands:","source":"For the `float`, `double`, and `decimal` types, the result of the `/` operator is the quotient of the two operands:"},{"content":"If one of the operands is <ph id=\"ph1\">`decimal`</ph>, another operand can be neither <ph id=\"ph2\">`float`</ph> nor <ph id=\"ph3\">`double`</ph>, because neither <ph id=\"ph4\">`float`</ph> nor <ph id=\"ph5\">`double`</ph> is implicitly convertible to <ph id=\"ph6\">`decimal`</ph>.","pos":[5212,5378],"source":"If one of the operands is `decimal`, another operand can be neither `float` nor `double`, because neither `float` nor `double` is implicitly convertible to `decimal`."},{"content":"You must explicitly convert the <ph id=\"ph1\">`float`</ph> or <ph id=\"ph2\">`double`</ph> operand to the <ph id=\"ph3\">`decimal`</ph> type.","pos":[5379,5461],"source":" You must explicitly convert the `float` or `double` operand to the `decimal` type."},{"content":"For more information about implicit conversions between numeric types, see <bpt id=\"p1\">[</bpt>Implicit numeric conversions table<ept id=\"p1\">](../keywords/implicit-numeric-conversions-table.md)</ept>.","pos":[5462,5625],"source":" For more information about implicit conversions between numeric types, see [Implicit numeric conversions table](../keywords/implicit-numeric-conversions-table.md)."},{"pos":[5630,5650],"content":"Remainder operator %","linkify":"Remainder operator %","nodes":[{"content":"Remainder operator %","pos":[0,20]}]},{"pos":[5652,5757],"content":"The remainder operator <ph id=\"ph1\">`%`</ph> computes the remainder after dividing its first operand by its second operand.","source":"The remainder operator `%` computes the remainder after dividing its first operand by its second operand."},{"pos":[5763,5780],"content":"Integer remainder","linkify":"Integer remainder","nodes":[{"content":"Integer remainder","pos":[0,17]}]},{"content":"For the operands of integer types, the result of <ph id=\"ph1\">`a % b`</ph> is the value produced by <ph id=\"ph2\">`a - (a / b) * b`</ph>.","pos":[5784,5884],"source":"For the operands of integer types, the result of `a % b` is the value produced by `a - (a / b) * b`."},{"content":"The sign of the non-zero remainder is the same as that of the first operand, as the following example shows:","pos":[5885,5993]},{"pos":[6138,6266],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Math.DivRem%2A?displayProperty=nameWithType&gt;</ph> method to compute both integer division and remainder results.","source":"Use the <xref:System.Math.DivRem%2A?displayProperty=nameWithType> method to compute both integer division and remainder results."},{"pos":[6272,6296],"content":"Floating-point remainder","linkify":"Floating-point remainder","nodes":[{"content":"Floating-point remainder","pos":[0,24]}]},{"pos":[6298,6412],"content":"For the <ph id=\"ph1\">`float`</ph> and <ph id=\"ph2\">`double`</ph> operands, the result of <ph id=\"ph3\">`x % y`</ph> for the finite <ph id=\"ph4\">`x`</ph> and <ph id=\"ph5\">`y`</ph> is the value <ph id=\"ph6\">`z`</ph> such that","source":"For the `float` and `double` operands, the result of `x % y` for the finite `x` and `y` is the value `z` such that"},{"pos":[6416,6477],"content":"The sign of <ph id=\"ph1\">`z`</ph>, if non-zero, is the same as the sign of <ph id=\"ph2\">`x`</ph>.","source":"The sign of `z`, if non-zero, is the same as the sign of `x`."},{"pos":[6480,6704],"content":"The absolute value of <ph id=\"ph1\">`z`</ph> is the value produced by <ph id=\"ph2\">`|x| - n * |y|`</ph> where <ph id=\"ph3\">`n`</ph> is the largest possible integer that is less than or equal to <ph id=\"ph4\">`|x| / |y|`</ph> and <ph id=\"ph5\">`|x|`</ph> and <ph id=\"ph6\">`|y|`</ph> are the absolute values of <ph id=\"ph7\">`x`</ph> and <ph id=\"ph8\">`y`</ph>, respectively.","source":"The absolute value of `z` is the value produced by `|x| - n * |y|` where `n` is the largest possible integer that is less than or equal to `|x| / |y|` and `|x|` and `|y|` are the absolute values of `x` and `y`, respectively."},{"pos":[6708,6985],"content":"[!NOTE]\nThis method of computing the remainder is analogous to that used for integer operands, but differs from the IEEE 754. If you need the remainder operation that complies with the IEEE 754, use the <xref:System.Math.IEEERemainder%2A?displayProperty=nameWithType> method.","leadings":["","> "],"nodes":[{"content":"This method of computing the remainder is analogous to that used for integer operands, but differs from the IEEE 754. If you need the remainder operation that complies with the IEEE 754, use the <xref:System.Math.IEEERemainder%2A?displayProperty=nameWithType> method.","pos":[8,275],"nodes":[{"content":"This method of computing the remainder is analogous to that used for integer operands, but differs from the IEEE 754.","pos":[0,117]},{"content":"If you need the remainder operation that complies with the IEEE 754, use the <ph id=\"ph1\">&lt;xref:System.Math.IEEERemainder%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[118,267],"source":" If you need the remainder operation that complies with the IEEE 754, use the <xref:System.Math.IEEERemainder%2A?displayProperty=nameWithType> method."}]}]},{"pos":[6987,7230],"content":"For information about the behavior of the <ph id=\"ph1\">`%`</ph> operator with non-finite operands, see the <bpt id=\"p1\">[</bpt>Remainder operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#remainder-operator)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](~/_csharplang/spec/introduction.md)</ept>.","source":"For information about the behavior of the `%` operator with non-finite operands, see the [Remainder operator](~/_csharplang/spec/expressions.md#remainder-operator) section of the [C# language specification](~/_csharplang/spec/introduction.md)."},{"pos":[7232,7457],"content":"For the <ph id=\"ph1\">`decimal`</ph> operands, the remainder operator <ph id=\"ph2\">`%`</ph> is equivalent to the <bpt id=\"p1\">[</bpt>remainder operator<ept id=\"p1\">](&lt;xref:System.Decimal.op_Modulus(System.Decimal,System.Decimal)&gt;)</ept> of the <ph id=\"ph3\">&lt;xref:System.Decimal?displayProperty=nameWithType&gt;</ph> type.","source":"For the `decimal` operands, the remainder operator `%` is equivalent to the [remainder operator](<xref:System.Decimal.op_Modulus(System.Decimal,System.Decimal)>) of the <xref:System.Decimal?displayProperty=nameWithType> type."},{"content":"The following example demonstrates the behavior of the remainder operator with floating-point operands:","pos":[7459,7562]},{"pos":[7723,7742],"content":"Addition operator +","linkify":"Addition operator +","nodes":[{"content":"Addition operator +","pos":[0,19]}]},{"pos":[7744,7803],"content":"The addition operator <ph id=\"ph1\">`+`</ph> computes the sum of its operands:","source":"The addition operator `+` computes the sum of its operands:"},{"content":"You also can use the <ph id=\"ph1\">`+`</ph> operator for string concatenation and delegate combination.","pos":[7940,8024],"source":"You also can use the `+` operator for string concatenation and delegate combination."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`+`</ph> operator<ept id=\"p1\">](addition-operator.md)</ept> article.","pos":[8025,8100],"source":" For more information, see the [`+` operator](addition-operator.md) article."},{"pos":[8105,8127],"content":"Subtraction operator -","linkify":"Subtraction operator -","nodes":[{"content":"Subtraction operator -","pos":[0,22]}]},{"pos":[8129,8210],"content":"The subtraction operator <ph id=\"ph1\">`-`</ph> subtracts its second operand from its first operand:","source":"The subtraction operator `-` subtracts its second operand from its first operand:"},{"content":"You also can use the <ph id=\"ph1\">`-`</ph> operator for delegate removal.","pos":[8353,8408],"source":"You also can use the `-` operator for delegate removal."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`-`</ph> operator<ept id=\"p1\">](subtraction-operator.md)</ept> article.","pos":[8409,8487],"source":" For more information, see the [`-` operator](subtraction-operator.md) article."},{"pos":[8492,8529],"content":"Operator precedence and associativity","linkify":"Operator precedence and associativity","nodes":[{"content":"Operator precedence and associativity","pos":[0,37]}]},{"content":"The following list orders arithmetic operators starting from the highest precedence to the lowest:","pos":[8531,8629]},{"pos":[8633,8687],"content":"Postfix increment <ph id=\"ph1\">`x++`</ph> and decrement <ph id=\"ph2\">`x--`</ph> operators.","source":"Postfix increment `x++` and decrement `x--` operators."},{"pos":[8690,8765],"content":"Prefix increment <ph id=\"ph1\">`++x`</ph> and decrement <ph id=\"ph2\">`--x`</ph> and unary <ph id=\"ph3\">`+`</ph> and <ph id=\"ph4\">`-`</ph> operators.","source":"Prefix increment `++x` and decrement `--x` and unary `+` and `-` operators."},{"pos":[8768,8811],"content":"Multiplicative <ph id=\"ph1\">`*`</ph>, <ph id=\"ph2\">`/`</ph>, and <ph id=\"ph3\">`%`</ph> operators.","source":"Multiplicative `*`, `/`, and `%` operators."},{"pos":[8814,8845],"content":"Additive <ph id=\"ph1\">`+`</ph> and <ph id=\"ph2\">`-`</ph> operators.","source":"Additive `+` and `-` operators."},{"content":"Binary arithmetic operators are left-associative.","pos":[8847,8896]},{"content":"That is, operators with the same precedence level are evaluated from left to right.","pos":[8897,8980]},{"pos":[8982,9088],"content":"Use parentheses, <ph id=\"ph1\">`()`</ph>, to change the order of evaluation imposed by operator precedence and associativity.","source":"Use parentheses, `()`, to change the order of evaluation imposed by operator precedence and associativity."},{"pos":[9254,9350],"content":"For the complete list of C# operators ordered by precedence level, see <bpt id=\"p1\">[</bpt>C# operators<ept id=\"p1\">](index.md)</ept>.","source":"For the complete list of C# operators ordered by precedence level, see [C# operators](index.md)."},{"pos":[9355,9374],"content":"Compound assignment","linkify":"Compound assignment","nodes":[{"content":"Compound assignment","pos":[0,19]}]},{"pos":[9376,9448],"content":"For a binary operator <ph id=\"ph1\">`op`</ph>, a compound assignment expression of the form","source":"For a binary operator `op`, a compound assignment expression of the form"},{"content":"is equivalent to","pos":[9473,9489]},{"pos":[9517,9556],"content":"except that <ph id=\"ph1\">`x`</ph> is only evaluated once.","source":"except that `x` is only evaluated once."},{"content":"The following example demonstrates the usage of compound assignment with arithmetic operators:","pos":[9558,9652]},{"content":"You also use the <ph id=\"ph1\">`+=`</ph> and <ph id=\"ph2\">`-=`</ph> operators to subscribe to and unsubscribe from <bpt id=\"p1\">[</bpt>events<ept id=\"p1\">](../keywords/event.md)</ept>.","pos":[9801,9910],"source":"You also use the `+=` and `-=` operators to subscribe to and unsubscribe from [events](../keywords/event.md)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: subscribe to and unsubscribe from events<ept id=\"p1\">](../../programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md)</ept>.","pos":[9911,10071],"source":" For more information, see [How to: subscribe to and unsubscribe from events](../../programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md)."},{"pos":[10076,10116],"content":"Arithmetic overflow and division by zero","linkify":"Arithmetic overflow and division by zero","nodes":[{"content":"Arithmetic overflow and division by zero","pos":[0,40]}]},{"content":"When the result of an arithmetic operation is outside the range of possible finite values of the involved numeric type, the behavior of an arithmetic operator depends on the type of its operands.","pos":[10118,10313]},{"pos":[10319,10346],"content":"Integer arithmetic overflow","linkify":"Integer arithmetic overflow","nodes":[{"content":"Integer arithmetic overflow","pos":[0,27]}]},{"pos":[10348,10425],"content":"Integer division by zero always throws a <ph id=\"ph1\">&lt;xref:System.DivideByZeroException&gt;</ph>.","source":"Integer division by zero always throws a <xref:System.DivideByZeroException>."},{"pos":[10427,10604],"content":"In case of integer arithmetic overflow, an overflow checking context, which can be <bpt id=\"p1\">[</bpt>checked or unchecked<ept id=\"p1\">](../keywords/checked-and-unchecked.md)</ept>, controls the resulting behavior:","source":"In case of integer arithmetic overflow, an overflow checking context, which can be [checked or unchecked](../keywords/checked-and-unchecked.md), controls the resulting behavior:"},{"content":"In a checked context, if overflow happens in a constant expression, a compile-time error occurs.","pos":[10608,10704]},{"content":"Otherwise, when the operation is performed at run time, an <ph id=\"ph1\">&lt;xref:System.OverflowException&gt;</ph> is thrown.","pos":[10705,10806],"source":" Otherwise, when the operation is performed at run time, an <xref:System.OverflowException> is thrown."},{"content":"In an unchecked context, the result is truncated by discarding any high-order bits that don't fit in the destination type.","pos":[10809,10931]},{"pos":[10933,11152],"content":"Along with the <bpt id=\"p1\">[</bpt>checked and unchecked<ept id=\"p1\">](../keywords/checked-and-unchecked.md)</ept> statements, you can use the <ph id=\"ph1\">`checked`</ph> and <ph id=\"ph2\">`unchecked`</ph> operators to control the overflow checking context, in which an expression is evaluated:","source":"Along with the [checked and unchecked](../keywords/checked-and-unchecked.md) statements, you can use the `checked` and `unchecked` operators to control the overflow checking context, in which an expression is evaluated:"},{"pos":[11301,11367],"content":"By default, arithmetic operations occur in an <bpt id=\"p1\">*</bpt>unchecked<ept id=\"p1\">*</ept> context.","source":"By default, arithmetic operations occur in an *unchecked* context."},{"pos":[11373,11407],"content":"Floating-point arithmetic overflow","linkify":"Floating-point arithmetic overflow","nodes":[{"content":"Floating-point arithmetic overflow","pos":[0,34]}]},{"content":"Arithmetic operations with the <ph id=\"ph1\">`float`</ph> and <ph id=\"ph2\">`double`</ph> types never throw an exception.","pos":[11409,11492],"source":"Arithmetic operations with the `float` and `double` types never throw an exception."},{"content":"The result of arithmetic operations with those types can be one of special values that represent infinity and not-a-number:","pos":[11493,11616]},{"pos":[11773,11955],"content":"For the operands of the <ph id=\"ph1\">`decimal`</ph> type, arithmetic overflow always throws an <ph id=\"ph2\">&lt;xref:System.OverflowException&gt;</ph> and division by zero always throws a <ph id=\"ph3\">&lt;xref:System.DivideByZeroException&gt;</ph>.","source":"For the operands of the `decimal` type, arithmetic overflow always throws an <xref:System.OverflowException> and division by zero always throws a <xref:System.DivideByZeroException>."},{"pos":[11960,11976],"content":"Round-off errors","linkify":"Round-off errors","nodes":[{"content":"Round-off errors","pos":[0,16]}]},{"content":"Because of general limitations of the floating-point representation of real numbers and floating-point arithmetic, the round-off errors might occur in calculations with floating-point types.","pos":[11978,12168]},{"content":"That is, the produced result of an expression might differ from the expected mathematical result.","pos":[12169,12266]},{"content":"The following example demonstrates several such cases:","pos":[12267,12321]},{"pos":[12463,12676],"content":"For more information, see remarks at <bpt id=\"p1\">[</bpt>System.Double<ept id=\"p1\">](/dotnet/api/system.double#remarks)</ept>, <bpt id=\"p2\">[</bpt>System.Single<ept id=\"p2\">](/dotnet/api/system.single#remarks)</ept>, or <bpt id=\"p3\">[</bpt>System.Decimal<ept id=\"p3\">](/dotnet/api/system.decimal#remarks)</ept> reference pages.","source":"For more information, see remarks at [System.Double](/dotnet/api/system.double#remarks), [System.Single](/dotnet/api/system.single#remarks), or [System.Decimal](/dotnet/api/system.decimal#remarks) reference pages."},{"pos":[12681,12705],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"User-defined types can <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](../keywords/operator.md)</ept> the unary (<ph id=\"ph1\">`++`</ph>, <ph id=\"ph2\">`--`</ph>, <ph id=\"ph3\">`+`</ph>, and <ph id=\"ph4\">`-`</ph>) and binary (<ph id=\"ph5\">`*`</ph>, <ph id=\"ph6\">`/`</ph>, <ph id=\"ph7\">`%`</ph>, <ph id=\"ph8\">`+`</ph>, and <ph id=\"ph9\">`-`</ph>) arithmetic operators.","pos":[12707,12865],"source":"User-defined types can [overload](../keywords/operator.md) the unary (`++`, `--`, `+`, and `-`) and binary (`*`, `/`, `%`, `+`, and `-`) arithmetic operators."},{"content":"When a binary operator is overloaded, the corresponding compound assignment operator is also implicitly overloaded.","pos":[12866,12981]},{"content":"A user-defined type cannot explicitly overload a compound assignment operator.","pos":[12982,13060]},{"pos":[13065,13090],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[13092,13212],"content":"For more information, see the following sections of the <bpt id=\"p1\">[</bpt>C# language specification<ept id=\"p1\">](~/_csharplang/spec/introduction.md)</ept>:","source":"For more information, see the following sections of the [C# language specification](~/_csharplang/spec/introduction.md):"},{"pos":[13216,13336],"content":"<bpt id=\"p1\">[</bpt>Postfix increment and decrement operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#postfix-increment-and-decrement-operators)</ept>","source":"[Postfix increment and decrement operators](~/_csharplang/spec/expressions.md#postfix-increment-and-decrement-operators)"},{"pos":[13339,13457],"content":"<bpt id=\"p1\">[</bpt>Prefix increment and decrement operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#prefix-increment-and-decrement-operators)</ept>","source":"[Prefix increment and decrement operators](~/_csharplang/spec/expressions.md#prefix-increment-and-decrement-operators)"},{"pos":[13460,13536],"content":"<bpt id=\"p1\">[</bpt>Unary plus operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#unary-plus-operator)</ept>","source":"[Unary plus operator](~/_csharplang/spec/expressions.md#unary-plus-operator)"},{"pos":[13539,13617],"content":"<bpt id=\"p1\">[</bpt>Unary minus operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#unary-minus-operator)</ept>","source":"[Unary minus operator](~/_csharplang/spec/expressions.md#unary-minus-operator)"},{"pos":[13620,13704],"content":"<bpt id=\"p1\">[</bpt>Multiplication operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#multiplication-operator)</ept>","source":"[Multiplication operator](~/_csharplang/spec/expressions.md#multiplication-operator)"},{"pos":[13707,13779],"content":"<bpt id=\"p1\">[</bpt>Division operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#division-operator)</ept>","source":"[Division operator](~/_csharplang/spec/expressions.md#division-operator)"},{"pos":[13782,13856],"content":"<bpt id=\"p1\">[</bpt>Remainder operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#remainder-operator)</ept>","source":"[Remainder operator](~/_csharplang/spec/expressions.md#remainder-operator)"},{"pos":[13859,13931],"content":"<bpt id=\"p1\">[</bpt>Addition operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#addition-operator)</ept>","source":"[Addition operator](~/_csharplang/spec/expressions.md#addition-operator)"},{"pos":[13934,14012],"content":"<bpt id=\"p1\">[</bpt>Subtraction operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#subtraction-operator)</ept>","source":"[Subtraction operator](~/_csharplang/spec/expressions.md#subtraction-operator)"},{"pos":[14015,14091],"content":"<bpt id=\"p1\">[</bpt>Compound assignment<ept id=\"p1\">](~/_csharplang/spec/expressions.md#compound-assignment)</ept>","source":"[Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment)"},{"pos":[14094,14202],"content":"<bpt id=\"p1\">[</bpt>The checked and unchecked operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#the-checked-and-unchecked-operators)</ept>","source":"[The checked and unchecked operators](~/_csharplang/spec/expressions.md#the-checked-and-unchecked-operators)"},{"pos":[14207,14215],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[14219,14246],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[14249,14305],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[14308,14332],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[14436,14485],"content":"<bpt id=\"p1\">[</bpt>Numerics in .NET<ept id=\"p1\">](../../../standard/numerics.md)</ept>","source":"[Numerics in .NET](../../../standard/numerics.md)"}]}