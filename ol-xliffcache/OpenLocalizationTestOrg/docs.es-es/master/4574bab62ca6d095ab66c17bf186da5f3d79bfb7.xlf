<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="imports-statement-net-namespace-and-type.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4574bab62ca6d095ab66c17bf186da5f3d79bfb7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\imports-statement-net-namespace-and-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07869e3db7f3923135143cac8f0a497f55f75815</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c08d5a37220f2ad4a6bbe6eb62822fdcac13611</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Imports Statement - .NET Namespace and Type (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Imports Statement (.NET Namespace and Type)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Enables type names to be referenced without namespace qualification.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>import alias<ept id="p1">*</ept> or name by which code can refer to <ph id="ph1">`namespace`</ph> instead of the full qualification string.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the namespace being imported.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Can be a string of namespaces nested to any level.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The name of a programming element declared in the namespace.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Can be any container element.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Imports`</ph>  statement enables types that are contained in a given namespace to be referenced directly.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can supply a single namespace name or a string of nested namespaces.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each nested namespace is separated from the next higher level namespace by a period (<ph id="ph1">`.`</ph>), as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each source file can contain any number of <ph id="ph1">`Imports`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These must follow any option declarations, such as the <ph id="ph1">`Option Strict`</ph> statement, and they must precede any programming element declarations, such as <ph id="ph2">`Module`</ph> or <ph id="ph3">`Class`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Imports`</ph> only at file level.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This means the declaration context for importation must be a source file, and cannot be a namespace, class, structure, module, interface, procedure, or block.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`Imports`</ph> statement does not make elements from other projects and assemblies available to your project.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Importing does not take the place of setting a reference.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It only removes the need to qualify names that are already available to your project.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see "Importing Containing Elements" in <bpt id="p1">[</bpt>References to Declared Elements<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can define implicit <ph id="ph1">`Imports`</ph> statements by using the <bpt id="p1">[</bpt>References Page, Project Designer (Visual Basic)<ept id="p1">](/visualstudio/ide/reference/references-page-project-designer-visual-basic)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Imported Namespaces (Visual Basic)<ept id="p1">](/visualstudio/ide/how-to-add-or-remove-imported-namespaces-visual-basic)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Import Aliases</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>import alias<ept id="p1">*</ept> defines the alias for a namespace or type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Import aliases are useful when you need to use items with the same name that are declared in one or more namespaces.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information and an example, see "Qualifying an Element Name" in <bpt id="p1">[</bpt>References to Declared Elements<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You should not declare a member at module level with the same name as <ph id="ph1">`aliasname`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you do, the Visual Basic compiler uses <ph id="ph1">`aliasname`</ph> only for the declared member and no longer recognizes it as an import alias.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Although the syntax used for declaring an import alias is like that used for importing an XML namespace prefix, the results are different.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An import alias can be used as an expression in your code, whereas an XML namespace prefix can be used only in XML literals or XML axis properties as the prefix for a qualified element or attribute name.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Element Names</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you supply <ph id="ph1">`element`</ph>, it must represent a <bpt id="p1">*</bpt>container element<ept id="p1">*</ept>, that is, a programming element that can contain other elements.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Container elements include classes, structures, modules, interfaces, and enumerations.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The scope of the elements made available by an <ph id="ph1">`Imports`</ph> statement depends on whether you specify <ph id="ph2">`element`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you specify only <ph id="ph1">`namespace`</ph>, all uniquely named members of that namespace, and members of container elements within that namespace, are available without qualification.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you specify both <ph id="ph1">`namespace`</ph> and <ph id="ph2">`element`</ph>, only the members of that element are available without qualification.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example returns all the folders in the C:\ directory by using the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The code has no <ph id="ph1">`Imports`</ph> statements at the top of the file.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`DirectoryInfo`</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph>, and <ph id="ph3">&lt;xref:Microsoft.VisualBasic.ControlChars.CrLf&gt;</ph> references are all fully qualified with the namespaces.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example includes <ph id="ph1">`Imports`</ph> statements for the referenced namespaces.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Therefore, the types do not have to be fully qualified with the namespaces.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following example includes <ph id="ph1">`Imports`</ph> statements that create aliases for the referenced namespaces.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The types are qualified with the aliases.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following example includes <ph id="ph1">`Imports`</ph> statements that create aliases for the referenced types.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Aliases are used to specify the types.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Namespace Statement<ept id="p1">](../../../visual-basic/language-reference/statements/namespace-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Namespaces in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/program-structure/namespaces.md)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>References and the Imports Statement<ept id="p1">](../../../visual-basic/programming-guide/program-structure/references-and-the-imports-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Imports Statement (XML Namespace)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-xml-namespace.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>References to Declared Elements<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>