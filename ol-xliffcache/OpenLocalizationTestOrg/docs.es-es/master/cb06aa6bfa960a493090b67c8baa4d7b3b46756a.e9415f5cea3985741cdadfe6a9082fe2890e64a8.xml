{"content":"---\ntitle: \"Walkthrough: Running an Operation in the Background\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"background tasks\"\n  - \"forms [Windows Forms], multithreading\"\n  - \"forms [Windows Forms], background operations\"\n  - \"background threads\"\n  - \"BackgroundWorker class [Windows Forms], examples\"\n  - \"threading [Windows Forms], background operations\"\n  - \"background operations\"\nms.assetid: 1b9a4e0a-f134-48ff-a1be-c461446a31ba\n---\n# Walkthrough: Running an Operation in the Background\nIf you have an operation that will take a long time to complete, and you do not want to cause delays in your user interface, you can use the <xref:System.ComponentModel.BackgroundWorker> class to run the operation on another thread.  \n  \n For a complete listing of the code used in this example, see [How to: Run an Operation in the Background](how-to-run-an-operation-in-the-background.md).  \n  \n> [!NOTE]\n>  The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Personalize the Visual Studio IDE](/visualstudio/ide/personalizing-the-visual-studio-ide).  \n  \n### To run an operation in the background  \n  \n1.  With your form active in the Windows Forms Designer, drag two <xref:System.Windows.Forms.Button> controls from the **Toolbox** to the form, and then set the `Name` and <xref:System.Windows.Forms.Control.Text%2A> properties of the buttons according to the following table.  \n  \n    |Button|Name|Text|  \n    |------------|----------|----------|  \n    |`button1`|`startBtn`|**Start**|  \n    |`button2`|`cancelBtn`|**Cancel**|  \n  \n2.  Open the **Toolbox**, click the **Components** tab, and then drag the <xref:System.ComponentModel.BackgroundWorker> component onto your form.  \n  \n     The `backgroundWorker1` component appears in the **Component Tray**.  \n  \n3.  In the **Properties** window, set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true`.  \n  \n4.  In the **Properties** window, click on the **Events** button, and then double-click the <xref:System.ComponentModel.BackgroundWorker.DoWork> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events to create event handlers.  \n  \n5.  Insert your time-consuming code into the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.  \n  \n6.  Extract any parameters required by the operation from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A> property of the <xref:System.ComponentModel.DoWorkEventArgs> parameter.  \n  \n7.  Assign the result of the computation to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A> property of the <xref:System.ComponentModel.DoWorkEventArgs>.  \n  \n     This is will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler.  \n  \n     [!code-csharp[System.ComponentModel.BackgroundWorker.Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#2)]\n     [!code-vb[System.ComponentModel.BackgroundWorker.Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#2)]  \n  \n8.  Insert code for retrieving the result of your operation in the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler.  \n  \n     [!code-csharp[System.ComponentModel.BackgroundWorker.Example#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#3)]\n     [!code-vb[System.ComponentModel.BackgroundWorker.Example#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#3)]  \n  \n9. Implement the `TimeConsumingOperation` method.  \n  \n     [!code-csharp[System.ComponentModel.BackgroundWorker.Example#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#4)]\n     [!code-vb[System.ComponentModel.BackgroundWorker.Example#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#4)]  \n  \n10. In the Windows Forms Designer, double-click `startButton` to create the <xref:System.Windows.Forms.Control.Click> event handler.  \n  \n11. Call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method in the <xref:System.Windows.Forms.Control.Click> event handler for `startButton`.  \n  \n     [!code-csharp[System.ComponentModel.BackgroundWorker.Example#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#5)]\n     [!code-vb[System.ComponentModel.BackgroundWorker.Example#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#5)]  \n  \n12. In the Windows Forms Designer, double-click `cancelButton` to create the <xref:System.Windows.Forms.Control.Click> event handler.  \n  \n13. Call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method in the <xref:System.Windows.Forms.Control.Click> event handler for `cancelButton`.  \n  \n     [!code-csharp[System.ComponentModel.BackgroundWorker.Example#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#6)]\n     [!code-vb[System.ComponentModel.BackgroundWorker.Example#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#6)]  \n  \n14. At the top of the file, import the System.ComponentModel and System.Threading namespaces.  \n  \n     [!code-csharp[System.ComponentModel.BackgroundWorker.Example#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#7)]\n     [!code-vb[System.ComponentModel.BackgroundWorker.Example#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#7)]  \n  \n15. Press F6 to build the solution, and then press CTRL-F5 to run the application outside the debugger.  \n  \n> [!NOTE]\n>  If you press F5 to run the application under the debugger, the exception raised in the `TimeConsumingOperation` method is caught and displayed by the debugger. When you run the application outside the debugger, the <xref:System.ComponentModel.BackgroundWorker> handles the exception and caches it in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.RunWorkerCompletedEventArgs>.  \n  \n1.  Click the **Start** button to run an asynchronous operation, and then click the **Cancel** button to stop a running asynchronous operation.  \n  \n     The outcome of each operation is displayed in a <xref:System.Windows.Forms.MessageBox>.  \n  \n## Next Steps  \n  \n-   Implement a form that reports progress as an asynchronous operation proceeds. For more information, see [How to: Implement a Form That Uses a Background Operation](how-to-implement-a-form-that-uses-a-background-operation.md).  \n  \n-   Implement a class that supports the Asynchronous Pattern for Components. For more information, see [Implementing the Event-based Asynchronous Pattern](../../../standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  \n  \n## See also\n\n- <xref:System.ComponentModel.BackgroundWorker>\n- <xref:System.ComponentModel.DoWorkEventArgs>\n- [How to: Implement a Form That Uses a Background Operation](how-to-implement-a-form-that-uses-a-background-operation.md)\n- [How to: Run an Operation in the Background](how-to-run-an-operation-in-the-background.md)\n- [BackgroundWorker Component](backgroundworker-component.md)\n","nodes":[{"pos":[4,472],"embed":true,"restype":"x-metadata","content":"title: \"Walkthrough: Running an Operation in the Background\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"background tasks\"\n  - \"forms [Windows Forms], multithreading\"\n  - \"forms [Windows Forms], background operations\"\n  - \"background threads\"\n  - \"BackgroundWorker class [Windows Forms], examples\"\n  - \"threading [Windows Forms], background operations\"\n  - \"background operations\"\nms.assetid: 1b9a4e0a-f134-48ff-a1be-c461446a31ba","nodes":[{"content":"Walkthrough: Running an Operation in the Background","nodes":[{"pos":[0,51],"content":"Walkthrough: Running an Operation in the Background","nodes":[{"content":"Walkthrough: Running an Operation in the Background","pos":[0,51]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[479,530],"content":"Walkthrough: Running an Operation in the Background","linkify":"Walkthrough: Running an Operation in the Background","nodes":[{"content":"Walkthrough: Running an Operation in the Background","pos":[0,51]}]},{"pos":[531,763],"content":"If you have an operation that will take a long time to complete, and you do not want to cause delays in your user interface, you can use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class to run the operation on another thread.","source":"If you have an operation that will take a long time to complete, and you do not want to cause delays in your user interface, you can use the <xref:System.ComponentModel.BackgroundWorker> class to run the operation on another thread."},{"pos":[770,922],"content":"For a complete listing of the code used in this example, see <bpt id=\"p1\">[</bpt>How to: Run an Operation in the Background<ept id=\"p1\">](how-to-run-an-operation-in-the-background.md)</ept>.","source":"For a complete listing of the code used in this example, see [How to: Run an Operation in the Background](how-to-run-an-operation-in-the-background.md)."},{"pos":[930,1275],"content":"[!NOTE]\n The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Personalize the Visual Studio IDE](/visualstudio/ide/personalizing-the-visual-studio-ide).","leadings":["","> "],"nodes":[{"content":"The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Personalize the Visual Studio IDE](/visualstudio/ide/personalizing-the-visual-studio-ide).","pos":[9,343],"nodes":[{"content":"The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition.","pos":[0,130]},{"content":"To change your settings, choose <bpt id=\"p1\">**</bpt>Import and Export Settings<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>Tools<ept id=\"p2\">**</ept> menu.","pos":[131,216],"source":" To change your settings, choose **Import and Export Settings** on the **Tools** menu."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Personalize the Visual Studio IDE<ept id=\"p1\">](/visualstudio/ide/personalizing-the-visual-studio-ide)</ept>.","pos":[217,334],"source":" For more information, see [Personalize the Visual Studio IDE](/visualstudio/ide/personalizing-the-visual-studio-ide)."}]}]},{"pos":[1285,1322],"content":"To run an operation in the background","linkify":"To run an operation in the background","nodes":[{"content":"To run an operation in the background","pos":[0,37]}]},{"pos":[1332,1603],"content":"With your form active in the Windows Forms Designer, drag two <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls from the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept> to the form, and then set the <ph id=\"ph2\">`Name`</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> properties of the buttons according to the following table.","source":"With your form active in the Windows Forms Designer, drag two <xref:System.Windows.Forms.Button> controls from the **Toolbox** to the form, and then set the `Name` and <xref:System.Windows.Forms.Control.Text%2A> properties of the buttons according to the following table."},{"content":"Button","pos":[1614,1620]},{"content":"Name","pos":[1621,1625]},{"content":"Text","pos":[1626,1630]},{"pos":[1703,1712],"content":"<bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>","source":"**Start**"},{"pos":[1743,1753],"content":"<bpt id=\"p1\">**</bpt>Cancel<ept id=\"p1\">**</ept>","source":"**Cancel**"},{"pos":[1764,1905],"content":"Open the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, click the <bpt id=\"p2\">**</bpt>Components<ept id=\"p2\">**</ept> tab, and then drag the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component onto your form.","source":"Open the **Toolbox**, click the **Components** tab, and then drag the <xref:System.ComponentModel.BackgroundWorker> component onto your form."},{"pos":[1916,1984],"content":"The <ph id=\"ph1\">`backgroundWorker1`</ph> component appears in the <bpt id=\"p1\">**</bpt>Component Tray<ept id=\"p1\">**</ept>.","source":"The `backgroundWorker1` component appears in the **Component Tray**."},{"pos":[1994,2127],"content":"In the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, set the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","source":"In the **Properties** window, set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true`."},{"pos":[2137,2379],"content":"In the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, click on the <bpt id=\"p2\">**</bpt>Events<ept id=\"p2\">**</ept> button, and then double-click the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> events to create event handlers.","source":"In the **Properties** window, click on the **Events** button, and then double-click the <xref:System.ComponentModel.BackgroundWorker.DoWork> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events to create event handlers."},{"pos":[2389,2497],"content":"Insert your time-consuming code into the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.","source":"Insert your time-consuming code into the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler."},{"pos":[2507,2693],"content":"Extract any parameters required by the operation from the <ph id=\"ph1\">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.ComponentModel.DoWorkEventArgs&gt;</ph> parameter.","source":"Extract any parameters required by the operation from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A> property of the <xref:System.ComponentModel.DoWorkEventArgs> parameter."},{"pos":[2703,2863],"content":"Assign the result of the computation to the <ph id=\"ph1\">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.ComponentModel.DoWorkEventArgs&gt;</ph>.","source":"Assign the result of the computation to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A> property of the <xref:System.ComponentModel.DoWorkEventArgs>."},{"pos":[2874,2986],"content":"This is will be available to the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler.","source":"This is will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler."},{"pos":[2997,3350],"content":"[!code-csharp[System.ComponentModel.BackgroundWorker.Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#2)]\n [!code-vb[System.ComponentModel.BackgroundWorker.Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#2)]","leadings":["","    "],"nodes":[]},{"pos":[3360,3502],"content":"Insert code for retrieving the result of your operation in the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler.","source":"Insert code for retrieving the result of your operation in the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler."},{"pos":[3513,3866],"content":"[!code-csharp[System.ComponentModel.BackgroundWorker.Example#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#3)]\n [!code-vb[System.ComponentModel.BackgroundWorker.Example#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#3)]","leadings":["","    "],"nodes":[]},{"pos":[3875,3921],"content":"Implement the <ph id=\"ph1\">`TimeConsumingOperation`</ph> method.","source":"Implement the `TimeConsumingOperation` method."},{"pos":[3932,4285],"content":"[!code-csharp[System.ComponentModel.BackgroundWorker.Example#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#4)]\n  [!code-vb[System.ComponentModel.BackgroundWorker.Example#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#4)]","leadings":["","   "],"nodes":[]},{"pos":[4295,4423],"content":"In the Windows Forms Designer, double-click <ph id=\"ph1\">`startButton`</ph> to create the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler.","source":"In the Windows Forms Designer, double-click `startButton` to create the <xref:System.Windows.Forms.Control.Click> event handler."},{"pos":[4433,4594],"content":"Call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method in the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler for <ph id=\"ph3\">`startButton`</ph>.","source":"Call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method in the <xref:System.Windows.Forms.Control.Click> event handler for `startButton`."},{"pos":[4605,4958],"content":"[!code-csharp[System.ComponentModel.BackgroundWorker.Example#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#5)]\n [!code-vb[System.ComponentModel.BackgroundWorker.Example#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#5)]","leadings":["","    "],"nodes":[]},{"pos":[4968,5097],"content":"In the Windows Forms Designer, double-click <ph id=\"ph1\">`cancelButton`</ph> to create the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler.","source":"In the Windows Forms Designer, double-click `cancelButton` to create the <xref:System.Windows.Forms.Control.Click> event handler."},{"pos":[5107,5266],"content":"Call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method in the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler for <ph id=\"ph3\">`cancelButton`</ph>.","source":"Call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method in the <xref:System.Windows.Forms.Control.Click> event handler for `cancelButton`."},{"pos":[5277,5630],"content":"[!code-csharp[System.ComponentModel.BackgroundWorker.Example#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#6)]\n [!code-vb[System.ComponentModel.BackgroundWorker.Example#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#6)]","leadings":["","    "],"nodes":[]},{"content":"At the top of the file, import the System.ComponentModel and System.Threading namespaces.","pos":[5640,5729]},{"pos":[5740,6093],"content":"[!code-csharp[System.ComponentModel.BackgroundWorker.Example#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#7)]\n [!code-vb[System.ComponentModel.BackgroundWorker.Example#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#7)]","leadings":["","    "],"nodes":[]},{"content":"Press F6 to build the solution, and then press CTRL-F5 to run the application outside the debugger.","pos":[6103,6202]},{"pos":[6210,6660],"content":"[!NOTE]\n If you press F5 to run the application under the debugger, the exception raised in the `TimeConsumingOperation` method is caught and displayed by the debugger. When you run the application outside the debugger, the <xref:System.ComponentModel.BackgroundWorker> handles the exception and caches it in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.RunWorkerCompletedEventArgs>.","leadings":["","> "],"nodes":[{"content":"If you press F5 to run the application under the debugger, the exception raised in the `TimeConsumingOperation` method is caught and displayed by the debugger. When you run the application outside the debugger, the <xref:System.ComponentModel.BackgroundWorker> handles the exception and caches it in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.RunWorkerCompletedEventArgs>.","pos":[9,448],"nodes":[{"content":"If you press F5 to run the application under the debugger, the exception raised in the <ph id=\"ph1\">`TimeConsumingOperation`</ph> method is caught and displayed by the debugger.","pos":[0,159],"source":"If you press F5 to run the application under the debugger, the exception raised in the `TimeConsumingOperation` method is caught and displayed by the debugger."},{"content":"When you run the application outside the debugger, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> handles the exception and caches it in the <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs&gt;</ph>.","pos":[160,439],"source":" When you run the application outside the debugger, the <xref:System.ComponentModel.BackgroundWorker> handles the exception and caches it in the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.RunWorkerCompletedEventArgs>."}]}]},{"pos":[6670,6809],"content":"Click the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> button to run an asynchronous operation, and then click the <bpt id=\"p2\">**</bpt>Cancel<ept id=\"p2\">**</ept> button to stop a running asynchronous operation.","source":"Click the **Start** button to run an asynchronous operation, and then click the **Cancel** button to stop a running asynchronous operation."},{"pos":[6820,6907],"content":"The outcome of each operation is displayed in a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>.","source":"The outcome of each operation is displayed in a <xref:System.Windows.Forms.MessageBox>."},{"pos":[6916,6926],"content":"Next Steps","linkify":"Next Steps","nodes":[{"content":"Next Steps","pos":[0,10]}]},{"content":"Implement a form that reports progress as an asynchronous operation proceeds.","pos":[6936,7013]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id=\"p1\">](how-to-implement-a-form-that-uses-a-background-operation.md)</ept>.","pos":[7014,7161],"source":" For more information, see [How to: Implement a Form That Uses a Background Operation](how-to-implement-a-form-that-uses-a-background-operation.md)."},{"content":"Implement a class that supports the Asynchronous Pattern for Components.","pos":[7171,7243]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id=\"p1\">](../../../standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.","pos":[7244,7428],"source":" For more information, see [Implementing the Event-based Asynchronous Pattern](../../../standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)."},{"pos":[7437,7445],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7544,7664],"content":"<bpt id=\"p1\">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id=\"p1\">](how-to-implement-a-form-that-uses-a-background-operation.md)</ept>","source":"[How to: Implement a Form That Uses a Background Operation](how-to-implement-a-form-that-uses-a-background-operation.md)"},{"pos":[7667,7757],"content":"<bpt id=\"p1\">[</bpt>How to: Run an Operation in the Background<ept id=\"p1\">](how-to-run-an-operation-in-the-background.md)</ept>","source":"[How to: Run an Operation in the Background](how-to-run-an-operation-in-the-background.md)"},{"pos":[7760,7819],"content":"<bpt id=\"p1\">[</bpt>BackgroundWorker Component<ept id=\"p1\">](backgroundworker-component.md)</ept>","source":"[BackgroundWorker Component](backgroundworker-component.md)"}]}