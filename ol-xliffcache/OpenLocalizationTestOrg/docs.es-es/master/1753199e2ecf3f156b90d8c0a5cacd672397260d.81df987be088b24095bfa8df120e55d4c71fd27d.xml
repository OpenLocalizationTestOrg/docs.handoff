{"content":"---\ntitle: \"\\\\ Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.\\\\\"\n  - \"\\\\\"\nhelpviewer_keywords: \n  - \"division operator [Visual Basic], integer\"\n  - \"integer division operator [Visual Basic]\"\n  - \"zero, division by zero\"\n  - \"arithmetic operators [Visual Basic], division\"\n  - \"division [Visual Basic], by zero\"\n  - \"backslash (\\\\) [Visual Basic]\"\n  - \"\\\\ operator [Visual Basic]\"\n  - \"integer quotient\"\n  - \"math operators [Visual Basic]\"\n  - \"quotients, integer\"\n  - \"truncation [Visual Basic], integer division\"\nms.assetid: 4b0ee347-950c-45c9-8e23-54bc85df208e\n---\n# \\ Operator (Visual Basic)\nDivides two numbers and returns an integer result.  \n  \n## Syntax  \n  \n```  \nexpression1 \\ expression2  \n```  \n  \n## Parts  \n `expression1`  \n Required. Any numeric expression.  \n  \n `expression2`  \n Required. Any numeric expression.  \n  \n## Supported Types  \n All numeric types, including the unsigned and floating-point types and `Decimal`.  \n  \n## Result  \n The result is the integer quotient of `expression1` divided by `expression2`, which discards any remainder and retains only the integer portion. This is known as *truncation*.  \n  \n The result data type is a numeric type appropriate for the data types of `expression1` and `expression2`. See the \"Integer Arithmetic\" tables in [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md).  \n  \n The [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md) returns the full quotient, which retains the remainder in the fractional portion.  \n  \n## Remarks  \n Before performing the division, Visual Basic attempts to convert any floating-point numeric expression to `Long`. If `Option Strict` is `On`, a compiler error occurs. If `Option Strict` is `Off`, an <xref:System.OverflowException> is possible if the value is outside the range of the [Long Data Type](../../../visual-basic/language-reference/data-types/long-data-type.md). The conversion to `Long` is also subject to *banker's rounding*. For more information, see \"Fractional Parts\" in [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md).  \n  \n If `expression1` or `expression2` evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), it is treated as zero.  \n  \n## Attempted Division by Zero  \n If `expression2` evaluates to zero, the `\\` operator throws a <xref:System.DivideByZeroException> exception. This is true for all numeric data types of the operands.  \n  \n> [!NOTE]\n>  The `\\` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `\\` operator to perform integer division. The result is an integer that represents the integer quotient of the two operands, with the remainder discarded.  \n  \n [!code-vb[VbVbalrOperators#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#18)]  \n  \n The expressions in the preceding example return values of 2, 3, 33, and -22, respectively.  \n  \n## See also\n\n- [\\\\= Operator](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)\n- [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)\n- [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)\n","nodes":[{"pos":[4,583],"embed":true,"restype":"x-metadata","content":"title: \"\\\\ Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.\\\\\"\n  - \"\\\\\"\nhelpviewer_keywords: \n  - \"division operator [Visual Basic], integer\"\n  - \"integer division operator [Visual Basic]\"\n  - \"zero, division by zero\"\n  - \"arithmetic operators [Visual Basic], division\"\n  - \"division [Visual Basic], by zero\"\n  - \"backslash (\\\\) [Visual Basic]\"\n  - \"\\\\ operator [Visual Basic]\"\n  - \"integer quotient\"\n  - \"math operators [Visual Basic]\"\n  - \"quotients, integer\"\n  - \"truncation [Visual Basic], integer division\"\nms.assetid: 4b0ee347-950c-45c9-8e23-54bc85df208e","nodes":[{"content":"\\ Operator (Visual Basic)","nodes":[{"pos":[0,25],"content":"\\ Operator (Visual Basic)","nodes":[{"content":"\\ Operator (Visual Basic)","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[590,615],"content":"\\ Operator (Visual Basic)","linkify":"\\ Operator (Visual Basic)","nodes":[{"content":"\\ Operator (Visual Basic)","pos":[0,25]}]},{"content":"Divides two numbers and returns an integer result.","pos":[616,666]},{"pos":[675,681],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[733,738],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[759,768]},{"content":"Any numeric expression.","pos":[769,792]},{"content":"Required.","pos":[816,825]},{"content":"Any numeric expression.","pos":[826,849]},{"pos":[858,873],"content":"Supported Types","linkify":"Supported Types","nodes":[{"content":"Supported Types","pos":[0,15]}]},{"pos":[877,958],"content":"All numeric types, including the unsigned and floating-point types and <ph id=\"ph1\">`Decimal`</ph>.","source":"All numeric types, including the unsigned and floating-point types and `Decimal`."},{"pos":[967,973],"content":"Result","linkify":"Result","nodes":[{"content":"Result","pos":[0,6]}]},{"content":"The result is the integer quotient of <ph id=\"ph1\">`expression1`</ph> divided by <ph id=\"ph2\">`expression2`</ph>, which discards any remainder and retains only the integer portion.","pos":[977,1121],"source":"The result is the integer quotient of `expression1` divided by `expression2`, which discards any remainder and retains only the integer portion."},{"content":"This is known as <bpt id=\"p1\">*</bpt>truncation<ept id=\"p1\">*</ept>.","pos":[1122,1152],"source":" This is known as *truncation*."},{"content":"The result data type is a numeric type appropriate for the data types of <ph id=\"ph1\">`expression1`</ph> and <ph id=\"ph2\">`expression2`</ph>.","pos":[1159,1264],"source":"The result data type is a numeric type appropriate for the data types of `expression1` and `expression2`."},{"content":"See the \"Integer Arithmetic\" tables in <bpt id=\"p1\">[</bpt>Data Types of Operator Results<ept id=\"p1\">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept>.","pos":[1265,1423],"source":" See the \"Integer Arithmetic\" tables in [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)."},{"pos":[1430,1631],"content":"The <bpt id=\"p1\">[</bpt>/ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept> returns the full quotient, which retains the remainder in the fractional portion.","source":"The [/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md) returns the full quotient, which retains the remainder in the fractional portion."},{"pos":[1640,1647],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Before performing the division, Visual Basic attempts to convert any floating-point numeric expression to <ph id=\"ph1\">`Long`</ph>.","pos":[1651,1764],"source":"Before performing the division, Visual Basic attempts to convert any floating-point numeric expression to `Long`."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`On`</ph>, a compiler error occurs.","pos":[1765,1817],"source":" If `Option Strict` is `On`, a compiler error occurs."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, an <ph id=\"ph3\">&lt;xref:System.OverflowException&gt;</ph> is possible if the value is outside the range of the <bpt id=\"p1\">[</bpt>Long Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>.","pos":[1818,2023],"source":" If `Option Strict` is `Off`, an <xref:System.OverflowException> is possible if the value is outside the range of the [Long Data Type](../../../visual-basic/language-reference/data-types/long-data-type.md)."},{"content":"The conversion to <ph id=\"ph1\">`Long`</ph> is also subject to <bpt id=\"p1\">*</bpt>banker's rounding<ept id=\"p1\">*</ept>.","pos":[2024,2088],"source":" The conversion to `Long` is also subject to *banker's rounding*."},{"content":"For more information, see \"Fractional Parts\" in <bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>.","pos":[2089,2246],"source":" For more information, see \"Fractional Parts\" in [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)."},{"pos":[2253,2386],"content":"If <ph id=\"ph1\">`expression1`</ph> or <ph id=\"ph2\">`expression2`</ph> evaluates to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept>, it is treated as zero.","source":"If `expression1` or `expression2` evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), it is treated as zero."},{"pos":[2395,2421],"content":"Attempted Division by Zero","linkify":"Attempted Division by Zero","nodes":[{"content":"Attempted Division by Zero","pos":[0,26]}]},{"content":"If <ph id=\"ph1\">`expression2`</ph> evaluates to zero, the <ph id=\"ph2\">`\\`</ph> operator throws a <ph id=\"ph3\">&lt;xref:System.DivideByZeroException&gt;</ph> exception.","pos":[2425,2533],"source":"If `expression2` evaluates to zero, the `\\` operator throws a <xref:System.DivideByZeroException> exception."},{"content":"This is true for all numeric data types of the operands.","pos":[2534,2590]},{"pos":[2598,3018],"content":"[!NOTE]\n The `\\` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":"The `\\` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[9,418],"nodes":[{"content":"The <ph id=\"ph1\">`\\`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[0,158],"source":"The `\\` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[159,267]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[268,409],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[3027,3034],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`\\`</ph> operator to perform integer division.","pos":[3038,3110],"source":"The following example uses the `\\` operator to perform integer division."},{"content":"The result is an integer that represents the integer quotient of the two operands, with the remainder discarded.","pos":[3111,3223]},{"content":"The expressions in the preceding example return values of 2, 3, 33, and -22, respectively.","pos":[3354,3444]},{"pos":[3453,3461],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3465,3571],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\\\</ph>= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)</ept>","source":"[\\\\= Operator](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)"},{"pos":[3574,3689],"content":"<bpt id=\"p1\">[</bpt>/ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)</ept>","source":"[/ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-operator.md)"},{"pos":[3692,3797],"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>","source":"[Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)"},{"pos":[3800,3898],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[3901,4013],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[4016,4140],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[4143,4290],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"}]}