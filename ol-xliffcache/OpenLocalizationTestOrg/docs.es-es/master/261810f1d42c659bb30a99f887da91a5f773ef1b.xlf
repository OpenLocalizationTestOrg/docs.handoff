<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">261810f1d42c659bb30a99f887da91a5f773ef1b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\dead-letter-queues.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba9c7a4a19c62713cbff46c11ac99a05cac99728</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a886b72877778263fdb50ce02968f2c91236a5d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Dead Letter Queues | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dead Letter Queues</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to handle and process messages that have failed delivery.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is based on the <bpt id="p1">[</bpt>Transacted MSMQ Binding<ept id="p1">](../../../../docs/framework/wcf/samples/transacted-msmq-binding.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This sample uses the <ph id="ph1">`netMsmqBinding`</ph> binding.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The service is a self-hosted console application to enable you to observe the service receiving queued messages.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The setup procedure and build instructions for this sample are located at the end of this topic.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This sample demonstrates each application dead letter queue that is only available on <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The sample can be modified to use the default system-wide queues for MSMQ 3.0 on <ph id="ph1">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In queued communication, the client communicates to the service using a queue.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>More precisely, the client sends messages to a queue.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The service receives messages from the queue.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The service and client therefore, do not have to be running at the same time to communicate using a queue.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because queued communication can involve a certain amount of dormancy, you may want to associate a time-to-live value on the message to ensure that the message does not get delivered to the application if it has gone past the time.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are also cases, where an application must be informed whether a message failed delivery.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In all of these cases, such as when the time-to-live on the message has expired or the message failed delivery, the message is put in a dead letter queue.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The sending application can then read the messages in the dead-letter queue and take corrective actions that range from no action to correcting the reasons for failed delivery and resending the message.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The dead-letter queue in the <ph id="ph1">`NetMsmqBinding`</ph> binding is expressed in the following properties:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.DeadLetterQueue%2A&gt;</ph> property to express the kind of dead-letter queue required by the client.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This enumeration has the following values:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`None`</ph>: No dead-letter queue is required by the client.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`System`</ph>: The system dead-letter queue is used to store dead messages.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The system dead-letter queue is shared by all applications running on the computer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Custom`</ph>: A custom dead-letter queue specified using the <ph id="ph2">&lt;xref:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue%2A&gt;</ph> property is used to store dead messages.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This feature is only available on <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is used when the application must use its own dead letter queue instead of sharing it with other applications running on the same computer.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue%2A&gt;</ph> property to express the specific queue to use as a dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is available only in <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this sample, the client sends a batch of messages to the service from within the scope of a transaction and specifies an arbitrarily low value for "time-to-live" for these messages (about 2 seconds).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The client also specifies a custom dead-letter queue to use to enqueue the messages that have expired.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The client application can read the messages in the dead-letter queue and either retry sending the message or correct the error that caused the original message to be placed in the dead-letter queue and send the message.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the sample, the client displays an error message.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The service contract is <ph id="ph1">`IOrderProcessor`</ph>, as shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The service code in the sample is that of the <bpt id="p1">[</bpt>Transacted MSMQ Binding<ept id="p1">](../../../../docs/framework/wcf/samples/transacted-msmq-binding.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Communication with the service takes place within the scope of a transaction.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The service reads messages from the queue, performs the operation and then displays the results of the operation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The application also creates a dead-letter queue for dead-letter messages.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The client's configuration specifies a short duration for the message to reach the service.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the message cannot be transmitted within the duration specified, the message expires and is moved to the dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is possible for the client to deliver the message to the service queue within the specified time.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To ensure you see the dead-letter service in action, you should run the client before starting the service.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The message times out and is delivered to the dead-letter service.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The application must define which queue to use as its dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If no queue is specified, the default system-wide transactional dead-letter queue is used to queue dead messages.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In this example, the client application specifies its own application dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The dead-letter message service reads messages from the dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The dead-letter message service implements the <ph id="ph1">`IOrderProcessor`</ph> contract.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Its implementation however is not to process orders.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The dead-letter message service is a client service and does not have the facility to process orders.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The dead-letter queue is a client queue and is local to the client queue manager.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The dead-letter message service implementation checks for the reason a message failed delivery and takes corrective measures.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The reason for a message failure is captured in two enumerations, <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MsmqMessageProperty.DeliveryFailure%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MsmqMessageProperty.DeliveryStatus%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can retrieve the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MsmqMessageProperty&gt;</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> as shown in the following sample code:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Messages in the dead-letter queue are messages that are addressed to the service that is processing the message.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Therefore, when the dead-letter message service reads messages from the queue, the <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> channel layer finds the mismatch in endpoints and does not dispatch the message.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In this case, the message is addressed to the order processing service but is received by the dead-letter message service.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To receive a message that is addressed to a different endpoint, an address filter to match any address is specified in the <ph id="ph1">`ServiceBehavior`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This is required to successfully process messages that are read from the dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In this sample, the dead-letter message service resends the message if the reason for failure is that the message timed out.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For all other reasons, it displays the delivery failure, as shown in the following sample code:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following sample shows the configuration for a dead-letter message:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In running the sample, there are 3 executables to run to see how the dead-letter queue works for each application; the client, service and a dead-letter service that reads from the dead-letter queue for each application and resends the message to the service.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>All are console applications with output in console windows.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Because queuing is in use, the client and service do not have to be up and running at the same time.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can run the client, shut it down, and then start up the service and it still receives its messages.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You should start the service and shut it down so that the queue can be created.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When running the client, the client displays the message:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The client attempted to send the message but with a short timeout, the message expired and is now queued in the dead-letter queue for each application.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You then run the dead-letter service, which reads the message and displays the error code and resends the message back to the service.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The service starts and then reads the resent message and processes it.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Ensure that you have performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the service is run first, it will check to ensure that the queue is present.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the queue is not present, the service will create one.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can run the service first to create the queue, or you can create one via the MSMQ Queue Manager.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Follow these steps to create a queue in Windows 2008.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Open Server Manager in <ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Expand the <bpt id="p1">**</bpt>Features<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Right-click <bpt id="p1">**</bpt>Private Message Queues<ept id="p1">**</ept>, and select <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Private Queue<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">**</bpt>Transactional<ept id="p1">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Enter <ph id="ph1">`ServiceModelSamplesTransacted`</ph> as the name of the new queue.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To run the sample in a single- or cross-computer configuration change queue names appropriately, replacing localhost with full name of the computer and follow the instructions in <bpt id="p1">[</bpt>Running the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To run the sample on a computer joined to a workgroup</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If your computer is not part of a domain, turn off transport security by setting the authentication mode and protection level to <ph id="ph1">`None`</ph> as shown in the following sample configuration:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Ensure the endpoint is associated with the binding by setting the endpoint's <ph id="ph1">`bindingConfiguration`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Ensure that you change the configuration on the DeadLetterService, server and the client before you run the sample.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Setting <ph id="ph1">`security mode`</ph> to <ph id="ph2">`None`</ph> is equivalent to setting <ph id="ph3">`MsmqAuthenticationMode`</ph>, <ph id="ph4">`MsmqProtectionLevel`</ph> and <ph id="ph5">`Message`</ph> security to <ph id="ph6">`None`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>By default with the <ph id="ph1">`netMsmqBinding`</ph> binding transport, security is enabled.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Two properties, <ph id="ph1">`MsmqAuthenticationMode`</ph> and <ph id="ph2">`MsmqProtectionLevel`</ph>, together determine the type of transport security.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>By default the authentication mode is set to <ph id="ph1">`Windows`</ph> and the protection level is set to <ph id="ph2">`Sign`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For MSMQ to provide the authentication and signing feature, it must be part of a domain.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If you run this sample on a computer that is not part of a domain, you receive the following error: "User's internal message queuing certificate does not exist".</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your computer.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>