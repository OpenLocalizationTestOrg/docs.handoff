{"content":"---\ntitle: \"Compiler Warning (level 1) CS0420\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0420\"\nhelpviewer_keywords: \n  - \"CS0420\"\nms.assetid: 0f52f508-286e-493d-9151-180e05397bf9\n---\n# Compiler Warning (level 1) CS0420\n'identifier': a reference to a volatile field will not be treated as volatile  \n  \n A volatile field should not normally be passed using a `ref` or **out** parameter, since it will not be treated as volatile within the scope of the function. There are exceptions to this, such as when calling an interlocked API. As with any warning, you may use the [#pragma warning](../../../csharp/language-reference/preprocessor-directives/preprocessor-pragma-warning.md) to disable this warning in those rare cases where you are intentionally using a volatile field as a reference parameter.  \n  \n The following sample generates CS0420:  \n  \n```csharp  \n// CS0420.cs  \n// compile with: /W:1  \nusing System;  \n  \nclass TestClass  \n{  \n   private volatile int i;  \n  \n   public void TestVolatile(ref int ii)  \n   {  \n   }  \n  \n   public static void Main()  \n   {  \n      TestClass x = new TestClass();  \n      x.TestVolatile(ref x.i);   // CS0420   \n   }  \n}  \n```\n","nodes":[{"pos":[4,177],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Warning (level 1) CS0420\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0420\"\nhelpviewer_keywords: \n  - \"CS0420\"\nms.assetid: 0f52f508-286e-493d-9151-180e05397bf9","nodes":[{"content":"Compiler Warning (level 1) CS0420","nodes":[{"pos":[0,33],"content":"Compiler Warning (level 1) CS0420","nodes":[{"content":"Compiler Warning (level 1) CS0420","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[184,217],"content":"Compiler Warning (level 1) CS0420","linkify":"Compiler Warning (level 1) CS0420","nodes":[{"content":"Compiler Warning (level 1) CS0420","pos":[0,33]}]},{"content":"'identifier': a reference to a volatile field will not be treated as volatile","pos":[218,295]},{"content":"A volatile field should not normally be passed using a <ph id=\"ph1\">`ref`</ph> or <bpt id=\"p1\">**</bpt>out<ept id=\"p1\">**</ept> parameter, since it will not be treated as volatile within the scope of the function.","pos":[302,459],"source":"A volatile field should not normally be passed using a `ref` or **out** parameter, since it will not be treated as volatile within the scope of the function."},{"content":"There are exceptions to this, such as when calling an interlocked API.","pos":[460,530]},{"content":"As with any warning, you may use the <bpt id=\"p1\">[</bpt>#pragma warning<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-pragma-warning.md)</ept> to disable this warning in those rare cases where you are intentionally using a volatile field as a reference parameter.","pos":[531,797],"source":" As with any warning, you may use the [#pragma warning](../../../csharp/language-reference/preprocessor-directives/preprocessor-pragma-warning.md) to disable this warning in those rare cases where you are intentionally using a volatile field as a reference parameter."},{"content":"The following sample generates CS0420:","pos":[804,842]}]}