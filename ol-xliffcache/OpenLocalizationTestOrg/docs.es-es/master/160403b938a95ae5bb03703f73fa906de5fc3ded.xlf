<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="interoperability-overview.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">160403b938a95ae5bb03703f73fa906de5fc3ded</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\interop\interoperability-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e6f10775e7c6ab574fe0d7949da2c057c411fad</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e6e6feef08ffa0d859581a1496d0fb29f8694df</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Interoperability Overview - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Interoperability Overview (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The topic describes methods to enable interoperability between C# managed code and unmanaged code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Platform Invoke</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Platform invoke<ept id="p1">*</ept> is a service that enables managed code to call unmanaged functions that are implemented in dynamic link libraries (DLLs), such as those in the Microsoft Windows API.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It locates and invokes an exported function and marshals its arguments (integers, strings, arrays, structures, and so on) across the interoperation boundary as needed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](../../../framework/interop/consuming-unmanaged-dll-functions.md)</ept> and <bpt id="p2">[</bpt>How to: Use Platform Invoke to Play a Wave File<ept id="p2">](../../../csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Common Language Runtime<ept id="p1">](../../../standard/clr.md)</ept> (CLR) manages access to system resources.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Calling unmanaged code that is outside the CLR bypasses this security mechanism, and therefore presents a security risk.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, unmanaged code might call resources in unmanaged code directly, bypassing CLR security mechanisms.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Security in .NET<ept id="p1">](../../../standard/security/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>C++ Interop</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use C++ interop, also known as It Just Works (IJW), to wrap a native C++ class so that it can be consumed by code that is authored in C# or another .NET Framework language.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To do this, you write C++ code to wrap a native DLL or COM component.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Unlike other .NET Framework languages, <ph id="ph1">[!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]</ph> has interoperability support that enables managed and unmanaged code to be located in the same application and even in the same file.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You then build the C++ code by using the <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> compiler switch to produce a managed assembly.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Finally, you add a reference to the assembly in your C# project and use the wrapped objects just as you would use other managed classes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Exposing COM Components to C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can consume a COM component from a C# project.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The general steps are as follows:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Locate a COM component to use and register it.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use regsvr32.exe to register or unâ€“register a COM DLL.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add to the project a reference to the COM component or type library.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you add the reference, Visual Studio uses the <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](../../../../docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept>, which takes a type library as input, to output a .NET Framework interop assembly.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The assembly, also named a runtime callable wrapper (RCW), contains managed classes and interfaces that wrap the COM classes and interfaces that are in the type library.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Visual Studio adds to the project a reference to the generated assembly.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Create an instance of a class that is defined in the RCW.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This, in turn, creates an instance of the COM object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use the object just as you use other managed objects.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When the object is reclaimed by garbage collection, the instance of the COM object is also released from memory.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Exposing COM Components to the .NET Framework<ept id="p1">](../../../../docs/framework/interop/exposing-com-components.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Exposing C# to COM</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>COM clients can consume C# types that have been correctly exposed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The basic steps to expose C# types are as follows:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add interop attributes in the C# project.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can make an assembly COM visible by modifying Visual C# project properties.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Assembly Information Dialog Box<ept id="p1">](/visualstudio/ide/reference/assembly-information-dialog-box)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Generate a COM type library and register it for COM usage.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can modify Visual C# project properties to automatically register the C# assembly for COM interop.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Visual Studio uses the <bpt id="p1">[</bpt>Regasm.exe (Assembly Registration Tool)<ept id="p1">](../../../../docs/framework/tools/regasm-exe-assembly-registration-tool.md)</ept>, using the <ph id="ph1">`/tlb`</ph> command-line switch, which takes a managed assembly as input, to generate a type library.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This type library describes the <ph id="ph1">`public`</ph> types in the assembly and adds registry entries so that COM clients can create managed classes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Exposing .NET Framework Components to COM<ept id="p1">](../../../../docs/framework/interop/exposing-dotnet-components-to-com.md)</ept> and <bpt id="p2">[</bpt>Example COM Class<ept id="p2">](../../../csharp/programming-guide/interop/example-com-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Improving Interop Performance<ept id="p1">](https://docs.microsoft.com/previous-versions/msp-n-p/ff647812%28v=pandp.10%29)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Interoperability between COM and .NET<ept id="p1">](/office/client-developer/outlook/pia/introduction-to-interoperability-between-com-and-net)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to COM Interop in Visual Basic<ept id="p1">](../../../../docs/visual-basic/programming-guide/com-interop/introduction-to-com-interop.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marshaling between Managed and Unmanaged Code<ept id="p1">](../../../../docs/framework/interop/interop-marshaling.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interoperating with Unmanaged Code<ept id="p1">](../../../../docs/framework/interop/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>