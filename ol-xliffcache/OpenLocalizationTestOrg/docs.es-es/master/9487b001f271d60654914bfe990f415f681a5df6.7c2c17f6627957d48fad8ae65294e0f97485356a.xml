{"content":"---\ntitle: \"Ildasm.exe (IL Disassembler) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"PE files, MSIL Disassembler\"\n  - \"portable executable files, MSIL Disassembler\"\n  - \"Ildasm.exe\"\n  - \"MSIL Disassembler\"\n  - \"text files produced by MSIL Disassembler\"\n  - \"disassembling file for MSIL Assembler input\"\nms.assetid: db27f6b2-f1ec-499e-be3a-7eecf95ca42b\ncaps.latest.revision: 33\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Ildasm.exe (IL Disassembler)\nThe IL Disassembler is a companion tool to the IL Assembler (Ilasm.exe). Ildasm.exe takes a portable executable (PE) file that contains intermediate language (IL) code and creates a text file suitable as input to Ilasm.exe.  \n  \n This tool is automatically installed with Visual Studio. To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7). For more information, see [Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md).  \n  \n At the command prompt, type the following:  \n  \n## Syntax  \n  \n```  \n  \nildasm [options] [PEfilename] [options]  \n```  \n  \n#### Parameters  \n The following options are available for .exe, .dll, .obj, .lib, and .winmd files.  \n  \n|Option|Description|  \n|------------|-----------------|  \n|**/out=** *filename*|Creates an output file with the specified *filename*, rather than displaying the results in a graphical user interface.|  \n|**/rtf**|Produces output in rich text format. Invalid with the **/text** option.|  \n|**/text**|Displays the results to the console window, rather than in a graphical user interface or as an output file.|  \n|**/html**|Produces output in HTML format. Valid with the **/output** option only.|  \n|**/?**|Displays the command syntax and options for the tool.|  \n  \n The following additional options are available for .exe, .dll, and .winmd files.  \n  \n|Option|Description|  \n|------------|-----------------|  \n|**/bytes**|Shows actual bytes, in hexadecimal format, as instruction comments.|  \n|**/caverbal**|Produces custom attribute blobs in verbal form. The default is binary form.|  \n|**/linenum**|Includes references to original source lines.|  \n|**/nobar**|Suppresses the disassembly progress indicator pop-up window.|  \n|**/noca**|Suppresses the output of custom attributes.|  \n|**/project**|Displays metadata the way it appears to managed code, instead of the way it appears in the native [!INCLUDE[wrt](../../../includes/wrt-md.md)]. If `PEfilename` is not a Windows metadata (.winmd) file, this option has no effect. See [.NET Framework Support for Windows Store Apps and Windows Runtime](../../../docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md).|  \n|**/pubonly**|Disassembles only public types and members. Equivalent to **/visibility:PUB**.|  \n|**/quoteallnames**|Includes all names in single quotes.|  \n|**/raweh**|Shows exception handling clauses in raw form.|  \n|**/source**|Shows original source lines as comments.|  \n|**/tokens**|Shows metadata tokens of classes and members.|  \n|**/visibility:** *vis*[+*vis*...]|Disassembles only types or members with the specified visibility. The following are valid values for *vis*:<br /><br /> **PUB** — Public<br /><br /> **PRI** — Private<br /><br /> **FAM** — Family<br /><br /> **ASM** — Assembly<br /><br /> **FAA** — Family and Assembly<br /><br /> **FOA** — Family or Assembly<br /><br /> **PSC** — Private Scope<br /><br /> For definitions of these visibility modifiers, see <xref:System.Reflection.MethodAttributes> and <xref:System.Reflection.TypeAttributes>.|  \n  \n The following options are valid for .exe, .dll, and .winmd files for file or console output only.  \n  \n|Option|Description|  \n|------------|-----------------|  \n|**/all**|Specifies a combination of the **/header**, **/bytes**, **/stats**, **/classlist**, and **/tokens** options.|  \n|**/classlist**|Includes a list of classes defined in the module.|  \n|**/forward**|Uses forward class declaration.|  \n|**/headers**|Includes file header information in the output.|  \n|**/item:** *class*[**::** *member*[`(`*sig*]]|Disassembles the following depending upon the argument supplied:<br /><br /> -   Disassembles the specified *class*.<br />-   Disassembles the specified `member`of the *class*.<br />-   Disassembles the `member`of the *class* with the specified signature *sig*. The format of *sig* is:<br />     [`instance`] `returnType`(`parameterType1`, `parameterType2`, …, `parameterTypeN`)<br />     **Note** In the .NET Framework versions 1.0 and 1.1, `sig` must be followed by a closing parenthesis: (`sig`). Starting with the Net Framework 2.0 the closing parenthesis must be omitted: (`sig`.|  \n|**/noil**|Suppresses IL assembly code output.|  \n|**/stats**|Includes statistics on the image.|  \n|**/typelist**|Produces the full list of types, to preserve type ordering in a round trip.|  \n|**/unicode**|Uses Unicode encoding for the output.|  \n|**/utf8**|Uses UTF-8 encoding for the output. ANSI is the default.|  \n  \n The following options are valid for .exe, .dll, .obj, .lib, and .winmd files for file or console output only.  \n  \n|Option|Description|  \n|------------|-----------------|  \n|**/metadata**[=`specifier`]|Shows metadata, where `specifier` is:<br /><br /> **MDHEADER** — Show the metadata header information and sizes.<br /><br /> **HEX** — Show information in hex as well as in words.<br /><br /> **CSV** — Show the record counts and heap sizes.<br /><br /> **UNREX** — Show unresolved externals.<br /><br /> **SCHEMA** — Show the metadata header and schema information.<br /><br /> **RAW** — Show the raw metadata tables.<br /><br /> **HEAPS** — Show the raw heaps.<br /><br /> **VALIDATE** — Validate the consistency of the metadata.<br /><br /> You can specify **/metadata** multiple times, with different values for `specifier`.|  \n  \n The following options are valid for .lib files for file or console output only.  \n  \n|Option|Description|  \n|------------|-----------------|  \n|**/objectfile**=`filename`|Shows the metadata of a single object file in the specified library.|  \n  \n> [!NOTE]\n>  All options for Ildasm.exe are case-insensitive and recognized by the first three letters. For example, **/quo** is equivalent to **/quoteallnames**. Options that specify arguments accept either a colon (:) or an equal sign (=) as the separator between the option and the argument. For example, **/output:** *filename* is equivalent to **/output=** *filename*.  \n  \n## Remarks  \n Ildasm.exe only operates on PE files on disk. It does not operate on files installed in the global assembly cache.  \n  \n The text file produced by Ildasm.exe can be used as input to the IL Assembler (Ilasm.exe). This is useful, for example, when compiling code in a programming language that does not support all the runtime metadata attributes. After compiling the code and running its output through Ildasm.exe, the resulting IL text file can be hand-edited to add the missing attributes. You can then run this text file through the IL Assembler to produce a final executable file.  \n  \n> [!NOTE]\n>  Currently, you cannot use this technique with PE files that contain embedded native code (for example, PE files produced by Visual C++).  \n  \n You can use the default GUI in the IL Disassembler to view the metadata and disassembled code of any existing PE file in a hierarchical tree view. To use the GUI, type **ildasm** at the command line without supplying the *PEfilename* argument or any options. From the **File** menu, you can navigate to the PE file that you want to load into Ildasm.exe. To save the metadata and disassembled code displayed for the selected PE, select the **Dump** command from the **File** menu. To save the hierarchical tree view only, select the **Dump Treeview** command from the **File** menu. For a detailed guide to loading a file into Ildasm.exe and interpreting the output, see the Ildasm.exe Tutorial, located in the Samples folder that ships with the [!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)].  \n  \n If you provide Ildasm.exe with a *PEfilename* argument that contains embedded resources, the tool produces multiple output files: a text file that contains IL code and, for each embedded managed resource, a .resources file produced using the resource's name from metadata. If an unmanaged resource is embedded in *PEfilename*, a .res file is produced using the filename specified for IL output by the **/output** option*.*  \n  \n> [!NOTE]\n>  Ildasm.exe shows only metadata descriptions for .obj and .lib input files. IL code for these file types is not disassembled.  \n  \n You can run Ildasm.exe over an.exe or .dll file to determine whether the file is managed. If the file is not managed, the tool displays a message stating that the file has no valid common language runtime header and cannot be disassembled. If the file is managed, the tool runs successfully.  \n  \n## Version Information  \n Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], Ildasm.exe handles an unrecognized marshal BLOB (binary large object) by displaying the raw binary content. For example, the following code shows how a marshal BLOB generated by a C# program is displayed:  \n  \n```  \n  // C#  \n  public void Test([MarshalAs((short)70)] int test) { }  \n  \n// IL from Ildasm.exe output  \n.method public hidebysig instance void  \n  Test(int32  marshal({ 46 }) test) cil managed  \n  \n```  \n  \n Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], Ildasm.exe displays attributes that are applied to interface implementations, as shown in the following excerpt from Ildasm.exe output:  \n  \n```  \n.class public auto ansi beforefieldinit MyClass  \n  extends [mscorlib]System.Object  \n  implements IMyInterface  \n  {  \n    .interfaceimpl type IMyInterface  \n    .custom instance void  \n      [mscorlib]System.Diagnostics.DebuggerNonUserCodeAttribute::.ctor() = ( 01 00 00 00 )  \n      …  \n  \n```  \n  \n## Examples  \n The following command causes the metadata and disassembled code for the PE file `MyHello.exe` to display in the Ildasm.exe default GUI.  \n  \n```  \nildasm myHello.exe  \n```  \n  \n The following command disassembles the file `MyFile.exe` and stores the resulting IL Assembler text in the file `MyFile.il`.  \n  \n```  \nildasm MyFile.exe /output:MyFile.il  \n```  \n  \n The following command disassembles the file `MyFile.exe` and displays the resulting IL Assembler text to the console window.  \n  \n```  \nildasm MyFile.exe /text  \n```  \n  \n If the file `MyApp.exe` contains embedded managed and unmanaged resources, the following command produces four files: `MyApp.il`, `MyApp.res`, `Icons.resources,` and `Message.resources`:  \n  \n```  \nildasm MyApp.exe /output:MyApp.il  \n```  \n  \n The following command disassembles the method `MyMethod` within the class `MyClass` in `MyFile.exe` and displays the output to the console window.  \n  \n```  \nildasm /item:MyClass::MyMethod MyFile.exe /text  \n```  \n  \n In the previous example, there could be several methods named `MyMethod` with different signatures. The following command disassembles the instance method `MyMethod` with the return type of **void** and the parameter types **int32** and **string**.  \n  \n```  \nildasm /item:\"MyClass::MyMethod(instance void(int32,string)\" MyFile.exe /text  \n```  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0 and 1.1, the left parenthesis that follows the method name must be balanced by a right parenthesis after the signature: `MyMethod(instance void(int32))`. Starting with the .NET Framework 2.0 the closing parenthesis must be omitted: `MyMethod(instance void(int32)`.  \n  \n To retrieve a `static` method (`Shared` method in Visual Basic), omit the keyword `instance`. Class types that are not primitive types like `int32` and `string` must include the namespace and must be preceded by the keyword `class`. External types must be preceded by the library name in square brackets. The following command disassembles a static method named `MyMethod` that has one parameter of type <xref:System.AppDomain> and has a return type of <xref:System.AppDomain>.  \n  \n```  \nildasm /item:\"MyClass::MyMethod(class [mscorlib]System.AppDomain(class [mscorlib]System.AppDomain)\" MyFile.exe /text  \n```  \n  \n A nested type must be preceded by its containing class, delimited by a forward slash. For example, if the `MyNamespace.MyClass` class contains a nested class named `NestedClass`, the nested class is identified as follows: `class MyNamespace.MyClass/NestedClass`.  \n  \n## See Also  \n [Tools](../../../docs/framework/tools/index.md)   \n [Ilasm.exe (IL Assembler)](../../../docs/framework/tools/ilasm-exe-il-assembler.md)   \n [Managed Execution Process](../../../docs/standard/managed-execution-process.md)   \n [Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md)","nodes":[{"pos":[12,57],"content":"Ildasm.exe (IL Disassembler) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Ildasm.exe (IL Disassembler) | Microsoft Docs","pos":[0,45]}]},{"pos":[663,691],"content":"Ildasm.exe (IL Disassembler)","linkify":"Ildasm.exe (IL Disassembler)","nodes":[{"content":"Ildasm.exe (IL Disassembler)","pos":[0,28]}]},{"content":"The IL Disassembler is a companion tool to the IL Assembler (Ilasm.exe).","pos":[692,764]},{"content":"Ildasm.exe takes a portable executable (PE) file that contains intermediate language (IL) code and creates a text file suitable as input to Ilasm.exe.","pos":[765,915]},{"content":"This tool is automatically installed with Visual Studio.","pos":[922,978]},{"content":"To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7).","pos":[979,1080]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Command Prompts<ept id=\"p1\">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>.","pos":[1081,1191],"source":" For more information, see [Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md)."},{"content":"At the command prompt, type the following:","pos":[1198,1240]},{"pos":[1249,1255],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1326,1336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"The following options are available for .exe, .dll, .obj, .lib, and .winmd files.","pos":[1340,1421]},{"content":"Option","pos":[1428,1434]},{"content":"Description","pos":[1435,1446]},{"pos":[1486,1506],"content":"<bpt id=\"p1\">**</bpt>/out=<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>filename<ept id=\"p2\">*</ept>","source":"**/out=** *filename*"},{"pos":[1507,1626],"content":"Creates an output file with the specified <bpt id=\"p1\">*</bpt>filename<ept id=\"p1\">*</ept>, rather than displaying the results in a graphical user interface.","source":"Creates an output file with the specified *filename*, rather than displaying the results in a graphical user interface."},{"pos":[1631,1639],"content":"<bpt id=\"p1\">**</bpt>/rtf<ept id=\"p1\">**</ept>","source":"**/rtf**"},{"content":"Produces output in rich text format.","pos":[1640,1676]},{"content":"Invalid with the <bpt id=\"p1\">**</bpt>/text<ept id=\"p1\">**</ept> option.","pos":[1677,1711],"source":" Invalid with the **/text** option."},{"pos":[1716,1725],"content":"<bpt id=\"p1\">**</bpt>/text<ept id=\"p1\">**</ept>","source":"**/text**"},{"content":"Displays the results to the console window, rather than in a graphical user interface or as an output file.","pos":[1726,1833]},{"pos":[1838,1847],"content":"<bpt id=\"p1\">**</bpt>/html<ept id=\"p1\">**</ept>","source":"**/html**"},{"content":"Produces output in HTML format.","pos":[1848,1879]},{"content":"Valid with the <bpt id=\"p1\">**</bpt>/output<ept id=\"p1\">**</ept> option only.","pos":[1880,1919],"source":" Valid with the **/output** option only."},{"pos":[1924,1930],"content":"<bpt id=\"p1\">**</bpt>/?<ept id=\"p1\">**</ept>","source":"**/?**"},{"content":"Displays the command syntax and options for the tool.","pos":[1931,1984]},{"content":"The following additional options are available for .exe, .dll, and .winmd files.","pos":[1992,2072]},{"content":"Option","pos":[2079,2085]},{"content":"Description","pos":[2086,2097]},{"pos":[2137,2147],"content":"<bpt id=\"p1\">**</bpt>/bytes<ept id=\"p1\">**</ept>","source":"**/bytes**"},{"content":"Shows actual bytes, in hexadecimal format, as instruction comments.","pos":[2148,2215]},{"pos":[2220,2233],"content":"<bpt id=\"p1\">**</bpt>/caverbal<ept id=\"p1\">**</ept>","source":"**/caverbal**"},{"content":"Produces custom attribute blobs in verbal form.","pos":[2234,2281]},{"content":"The default is binary form.","pos":[2282,2309]},{"pos":[2314,2326],"content":"<bpt id=\"p1\">**</bpt>/linenum<ept id=\"p1\">**</ept>","source":"**/linenum**"},{"content":"Includes references to original source lines.","pos":[2327,2372]},{"pos":[2377,2387],"content":"<bpt id=\"p1\">**</bpt>/nobar<ept id=\"p1\">**</ept>","source":"**/nobar**"},{"content":"Suppresses the disassembly progress indicator pop-up window.","pos":[2388,2448]},{"pos":[2453,2462],"content":"<bpt id=\"p1\">**</bpt>/noca<ept id=\"p1\">**</ept>","source":"**/noca**"},{"content":"Suppresses the output of custom attributes.","pos":[2463,2506]},{"pos":[2511,2523],"content":"<bpt id=\"p1\">**</bpt>/project<ept id=\"p1\">**</ept>","source":"**/project**"},{"content":"Displays metadata the way it appears to managed code, instead of the way it appears in the native <ph id=\"ph1\">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>.","pos":[2524,2667],"source":"Displays metadata the way it appears to managed code, instead of the way it appears in the native [!INCLUDE[wrt](../../../includes/wrt-md.md)]."},{"content":"If <ph id=\"ph1\">`PEfilename`</ph> is not a Windows metadata (.winmd) file, this option has no effect.","pos":[2668,2751],"source":" If `PEfilename` is not a Windows metadata (.winmd) file, this option has no effect."},{"content":"See <bpt id=\"p1\">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id=\"p1\">](../../../docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>.","pos":[2752,2917],"source":" See [.NET Framework Support for Windows Store Apps and Windows Runtime](../../../docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)."},{"pos":[2922,2934],"content":"<bpt id=\"p1\">**</bpt>/pubonly<ept id=\"p1\">**</ept>","source":"**/pubonly**"},{"content":"Disassembles only public types and members.","pos":[2935,2978]},{"content":"Equivalent to <bpt id=\"p1\">**</bpt>/visibility:PUB<ept id=\"p1\">**</ept>.","pos":[2979,3013],"source":" Equivalent to **/visibility:PUB**."},{"pos":[3018,3036],"content":"<bpt id=\"p1\">**</bpt>/quoteallnames<ept id=\"p1\">**</ept>","source":"**/quoteallnames**"},{"content":"Includes all names in single quotes.","pos":[3037,3073]},{"pos":[3078,3088],"content":"<bpt id=\"p1\">**</bpt>/raweh<ept id=\"p1\">**</ept>","source":"**/raweh**"},{"content":"Shows exception handling clauses in raw form.","pos":[3089,3134]},{"pos":[3139,3150],"content":"<bpt id=\"p1\">**</bpt>/source<ept id=\"p1\">**</ept>","source":"**/source**"},{"content":"Shows original source lines as comments.","pos":[3151,3191]},{"pos":[3196,3207],"content":"<bpt id=\"p1\">**</bpt>/tokens<ept id=\"p1\">**</ept>","source":"**/tokens**"},{"content":"Shows metadata tokens of classes and members.","pos":[3208,3253]},{"pos":[3258,3291],"content":"<bpt id=\"p1\">**</bpt>/visibility:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>vis<ept id=\"p2\">*</ept>[+<bpt id=\"p3\">*</bpt>vis<ept id=\"p3\">*</ept>...]","source":"**/visibility:** *vis*[+*vis*...]"},{"content":"Disassembles only types or members with the specified visibility.","pos":[3292,3357]},{"content":"The following are valid values for <bpt id=\"p1\">*</bpt>vis<ept id=\"p1\">*</ept>:","pos":[3358,3399],"source":" The following are valid values for *vis*:"},{"content":"<bpt id=\"p1\">**</bpt>PUB<ept id=\"p1\">**</ept> — Public","pos":[3412,3428],"source":"**PUB** — Public"},{"content":"<bpt id=\"p1\">**</bpt>PRI<ept id=\"p1\">**</ept> — Private","pos":[3441,3458],"source":"**PRI** — Private"},{"content":"<bpt id=\"p1\">**</bpt>FAM<ept id=\"p1\">**</ept> — Family","pos":[3471,3487],"source":"**FAM** — Family"},{"content":"<bpt id=\"p1\">**</bpt>ASM<ept id=\"p1\">**</ept> — Assembly","pos":[3500,3518],"source":"**ASM** — Assembly"},{"content":"<bpt id=\"p1\">**</bpt>FAA<ept id=\"p1\">**</ept> — Family and Assembly","pos":[3531,3560],"source":"**FAA** — Family and Assembly"},{"content":"<bpt id=\"p1\">**</bpt>FOA<ept id=\"p1\">**</ept> — Family or Assembly","pos":[3573,3601],"source":"**FOA** — Family or Assembly"},{"content":"<bpt id=\"p1\">**</bpt>PSC<ept id=\"p1\">**</ept> — Private Scope","pos":[3614,3637],"source":"**PSC** — Private Scope"},{"content":"For definitions of these visibility modifiers, see <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.TypeAttributes&gt;</ph>.","pos":[3650,3787],"source":" For definitions of these visibility modifiers, see <xref:System.Reflection.MethodAttributes> and <xref:System.Reflection.TypeAttributes>."},{"content":"The following options are valid for .exe, .dll, and .winmd files for file or console output only.","pos":[3795,3892]},{"content":"Option","pos":[3899,3905]},{"content":"Description","pos":[3906,3917]},{"pos":[3957,3965],"content":"<bpt id=\"p1\">**</bpt>/all<ept id=\"p1\">**</ept>","source":"**/all**"},{"pos":[3966,4074],"content":"Specifies a combination of the <bpt id=\"p1\">**</bpt>/header<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>/bytes<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>/stats<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>/classlist<ept id=\"p4\">**</ept>, and <bpt id=\"p5\">**</bpt>/tokens<ept id=\"p5\">**</ept> options.","source":"Specifies a combination of the **/header**, **/bytes**, **/stats**, **/classlist**, and **/tokens** options."},{"pos":[4079,4093],"content":"<bpt id=\"p1\">**</bpt>/classlist<ept id=\"p1\">**</ept>","source":"**/classlist**"},{"content":"Includes a list of classes defined in the module.","pos":[4094,4143]},{"pos":[4148,4160],"content":"<bpt id=\"p1\">**</bpt>/forward<ept id=\"p1\">**</ept>","source":"**/forward**"},{"content":"Uses forward class declaration.","pos":[4161,4192]},{"pos":[4197,4209],"content":"<bpt id=\"p1\">**</bpt>/headers<ept id=\"p1\">**</ept>","source":"**/headers**"},{"content":"Includes file header information in the output.","pos":[4210,4257]},{"pos":[4262,4307],"content":"<bpt id=\"p1\">**</bpt>/item:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>class<ept id=\"p2\">*</ept>[<bpt id=\"p3\">**</bpt>::<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>member<ept id=\"p4\">*</ept>[<ph id=\"ph1\">`(`</ph><bpt id=\"p5\">*</bpt>sig<ept id=\"p5\">*</ept>]]","source":"**/item:** *class*[**::** *member*[`(`*sig*]]"},{"content":"Disassembles the following depending upon the argument supplied:","pos":[4308,4372]},{"content":"-   Disassembles the specified <bpt id=\"p1\">*</bpt>class<ept id=\"p1\">*</ept>.","pos":[4385,4424],"source":" -   Disassembles the specified *class*."},{"content":"-   Disassembles the specified <ph id=\"ph1\">`member`</ph>of the <bpt id=\"p1\">*</bpt>class<ept id=\"p1\">*</ept>.","pos":[4430,4484],"source":"-   Disassembles the specified `member`of the *class*."},{"content":"-   Disassembles the <ph id=\"ph1\">`member`</ph>of the <bpt id=\"p1\">*</bpt>class<ept id=\"p1\">*</ept> with the specified signature <bpt id=\"p2\">*</bpt>sig<ept id=\"p2\">*</ept>.","pos":[4490,4569],"source":"-   Disassembles the `member`of the *class* with the specified signature *sig*."},{"content":"The format of <bpt id=\"p1\">*</bpt>sig<ept id=\"p1\">*</ept> is:","pos":[4570,4593],"source":" The format of *sig* is:"},{"content":"[<ph id=\"ph1\">`instance`</ph>] <ph id=\"ph2\">`returnType`</ph>(<ph id=\"ph3\">`parameterType1`</ph>, <ph id=\"ph4\">`parameterType2`</ph>, …, <ph id=\"ph5\">`parameterTypeN`</ph>)","pos":[4604,4686],"source":"     [`instance`] `returnType`(`parameterType1`, `parameterType2`, …, `parameterTypeN`)"},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> In the .NET Framework versions 1.0 and 1.1, <ph id=\"ph1\">`sig`</ph> must be followed by a closing parenthesis: (<ph id=\"ph2\">`sig`</ph>).","pos":[4697,4807],"source":"**Note** In the .NET Framework versions 1.0 and 1.1, `sig` must be followed by a closing parenthesis: (`sig`)."},{"content":"Starting with the Net Framework 2.0 the closing parenthesis must be omitted: (<ph id=\"ph1\">`sig`</ph>.","pos":[4808,4892],"source":" Starting with the Net Framework 2.0 the closing parenthesis must be omitted: (`sig`."},{"pos":[4897,4906],"content":"<bpt id=\"p1\">**</bpt>/noil<ept id=\"p1\">**</ept>","source":"**/noil**"},{"content":"Suppresses IL assembly code output.","pos":[4907,4942]},{"pos":[4947,4957],"content":"<bpt id=\"p1\">**</bpt>/stats<ept id=\"p1\">**</ept>","source":"**/stats**"},{"content":"Includes statistics on the image.","pos":[4958,4991]},{"pos":[4996,5009],"content":"<bpt id=\"p1\">**</bpt>/typelist<ept id=\"p1\">**</ept>","source":"**/typelist**"},{"content":"Produces the full list of types, to preserve type ordering in a round trip.","pos":[5010,5085]},{"pos":[5090,5102],"content":"<bpt id=\"p1\">**</bpt>/unicode<ept id=\"p1\">**</ept>","source":"**/unicode**"},{"content":"Uses Unicode encoding for the output.","pos":[5103,5140]},{"pos":[5145,5154],"content":"<bpt id=\"p1\">**</bpt>/utf8<ept id=\"p1\">**</ept>","source":"**/utf8**"},{"content":"Uses UTF-8 encoding for the output.","pos":[5155,5190]},{"content":"ANSI is the default.","pos":[5191,5211]},{"content":"The following options are valid for .exe, .dll, .obj, .lib, and .winmd files for file or console output only.","pos":[5219,5328]},{"content":"Option","pos":[5335,5341]},{"content":"Description","pos":[5342,5353]},{"pos":[5393,5420],"content":"<bpt id=\"p1\">**</bpt>/metadata<ept id=\"p1\">**</ept>[=<ph id=\"ph1\">`specifier`</ph>]","source":"**/metadata**[=`specifier`]"},{"content":"Shows metadata, where <ph id=\"ph1\">`specifier`</ph> is:","pos":[5421,5458],"source":"Shows metadata, where `specifier` is:"},{"content":"<bpt id=\"p1\">**</bpt>MDHEADER<ept id=\"p1\">**</ept> — Show the metadata header information and sizes.","pos":[5471,5533],"source":"**MDHEADER** — Show the metadata header information and sizes."},{"content":"<bpt id=\"p1\">**</bpt>HEX<ept id=\"p1\">**</ept> — Show information in hex as well as in words.","pos":[5546,5600],"source":"**HEX** — Show information in hex as well as in words."},{"content":"<bpt id=\"p1\">**</bpt>CSV<ept id=\"p1\">**</ept> — Show the record counts and heap sizes.","pos":[5613,5661],"source":"**CSV** — Show the record counts and heap sizes."},{"content":"<bpt id=\"p1\">**</bpt>UNREX<ept id=\"p1\">**</ept> — Show unresolved externals.","pos":[5674,5712],"source":"**UNREX** — Show unresolved externals."},{"content":"<bpt id=\"p1\">**</bpt>SCHEMA<ept id=\"p1\">**</ept> — Show the metadata header and schema information.","pos":[5725,5786],"source":"**SCHEMA** — Show the metadata header and schema information."},{"content":"<bpt id=\"p1\">**</bpt>RAW<ept id=\"p1\">**</ept> — Show the raw metadata tables.","pos":[5799,5838],"source":"**RAW** — Show the raw metadata tables."},{"content":"<bpt id=\"p1\">**</bpt>HEAPS<ept id=\"p1\">**</ept> — Show the raw heaps.","pos":[5851,5882],"source":"**HEAPS** — Show the raw heaps."},{"content":"<bpt id=\"p1\">**</bpt>VALIDATE<ept id=\"p1\">**</ept> — Validate the consistency of the metadata.","pos":[5895,5951],"source":"**VALIDATE** — Validate the consistency of the metadata."},{"content":"You can specify <bpt id=\"p1\">**</bpt>/metadata<ept id=\"p1\">**</ept> multiple times, with different values for <ph id=\"ph1\">`specifier`</ph>.","pos":[5964,6048],"source":" You can specify **/metadata** multiple times, with different values for `specifier`."},{"content":"The following options are valid for .lib files for file or console output only.","pos":[6056,6135]},{"content":"Option","pos":[6142,6148]},{"content":"Description","pos":[6149,6160]},{"pos":[6200,6226],"content":"<bpt id=\"p1\">**</bpt>/objectfile<ept id=\"p1\">**</ept><ph id=\"ph1\">=</ph><ph id=\"ph2\">`filename`</ph>","source":"**/objectfile**=`filename`"},{"content":"Shows the metadata of a single object file in the specified library.","pos":[6227,6295]},{"pos":[6304,6675],"content":"[!NOTE]\n All options for Ildasm.exe are case-insensitive and recognized by the first three letters. For example, **/quo** is equivalent to **/quoteallnames**. Options that specify arguments accept either a colon (:) or an equal sign (=) as the separator between the option and the argument. For example, **/output:** *filename* is equivalent to **/output=** *filename*.","leadings":["","> "],"nodes":[{"content":" All options for Ildasm.exe are case-insensitive and recognized by the first three letters. For example, **/quo** is equivalent to **/quoteallnames**. Options that specify arguments accept either a colon (:) or an equal sign (=) as the separator between the option and the argument. For example, **/output:** *filename* is equivalent to **/output=** *filename*.","pos":[8,369],"nodes":[{"content":"All options for Ildasm.exe are case-insensitive and recognized by the first three letters.","pos":[1,91]},{"content":"For example, <bpt id=\"p1\">**</bpt>/quo<ept id=\"p1\">**</ept> is equivalent to <bpt id=\"p2\">**</bpt>/quoteallnames<ept id=\"p2\">**</ept>.","pos":[92,150],"source":" For example, **/quo** is equivalent to **/quoteallnames**."},{"content":"Options that specify arguments accept either a colon (:) or an equal sign (=) as the separator between the option and the argument.","pos":[151,282]},{"content":"For example, <bpt id=\"p1\">**</bpt>/output:<ept id=\"p1\">**</ept> <bpt id=\"p2\">*</bpt>filename<ept id=\"p2\">*</ept> is equivalent to <bpt id=\"p3\">**</bpt>/output=<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>filename<ept id=\"p4\">*</ept>.","pos":[283,361],"source":" For example, **/output:** *filename* is equivalent to **/output=** *filename*."}]}]},{"pos":[6684,6691],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Ildasm.exe only operates on PE files on disk.","pos":[6695,6740]},{"content":"It does not operate on files installed in the global assembly cache.","pos":[6741,6809]},{"content":"The text file produced by Ildasm.exe can be used as input to the IL Assembler (Ilasm.exe).","pos":[6816,6906]},{"content":"This is useful, for example, when compiling code in a programming language that does not support all the runtime metadata attributes.","pos":[6907,7040]},{"content":"After compiling the code and running its output through Ildasm.exe, the resulting IL text file can be hand-edited to add the missing attributes.","pos":[7041,7185]},{"content":"You can then run this text file through the IL Assembler to produce a final executable file.","pos":[7186,7278]},{"pos":[7286,7433],"content":"[!NOTE]\n Currently, you cannot use this technique with PE files that contain embedded native code (for example, PE files produced by Visual C++).","leadings":["","> "],"nodes":[{"content":"Currently, you cannot use this technique with PE files that contain embedded native code (for example, PE files produced by Visual C++).","pos":[9,145]}]},{"content":"You can use the default GUI in the IL Disassembler to view the metadata and disassembled code of any existing PE file in a hierarchical tree view.","pos":[7440,7586]},{"content":"To use the GUI, type <bpt id=\"p1\">**</bpt>ildasm<ept id=\"p1\">**</ept> at the command line without supplying the <bpt id=\"p2\">*</bpt>PEfilename<ept id=\"p2\">*</ept> argument or any options.","pos":[7587,7698],"source":" To use the GUI, type **ildasm** at the command line without supplying the *PEfilename* argument or any options."},{"content":"From the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, you can navigate to the PE file that you want to load into Ildasm.exe.","pos":[7699,7793],"source":" From the **File** menu, you can navigate to the PE file that you want to load into Ildasm.exe."},{"content":"To save the metadata and disassembled code displayed for the selected PE, select the <bpt id=\"p1\">**</bpt>Dump<ept id=\"p1\">**</ept> command from the <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> menu.","pos":[7794,7919],"source":" To save the metadata and disassembled code displayed for the selected PE, select the **Dump** command from the **File** menu."},{"content":"To save the hierarchical tree view only, select the <bpt id=\"p1\">**</bpt>Dump Treeview<ept id=\"p1\">**</ept> command from the <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> menu.","pos":[7920,8021],"source":" To save the hierarchical tree view only, select the **Dump Treeview** command from the **File** menu."},{"content":"For a detailed guide to loading a file into Ildasm.exe and interpreting the output, see the Ildasm.exe Tutorial, located in the Samples folder that ships with the <ph id=\"ph1\">[!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]</ph>.","pos":[8022,8244],"source":" For a detailed guide to loading a file into Ildasm.exe and interpreting the output, see the Ildasm.exe Tutorial, located in the Samples folder that ships with the [!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]."},{"content":"If you provide Ildasm.exe with a <bpt id=\"p1\">*</bpt>PEfilename<ept id=\"p1\">*</ept> argument that contains embedded resources, the tool produces multiple output files: a text file that contains IL code and, for each embedded managed resource, a .resources file produced using the resource's name from metadata.","pos":[8251,8523],"source":"If you provide Ildasm.exe with a *PEfilename* argument that contains embedded resources, the tool produces multiple output files: a text file that contains IL code and, for each embedded managed resource, a .resources file produced using the resource's name from metadata."},{"content":"If an unmanaged resource is embedded in <bpt id=\"p1\">*</bpt>PEfilename<ept id=\"p1\">*</ept>, a .res file is produced using the filename specified for IL output by the <bpt id=\"p2\">**</bpt>/output<ept id=\"p2\">**</ept> option<bpt id=\"p3\">*</bpt>.<ept id=\"p3\">*</ept>","pos":[8524,8673],"source":" If an unmanaged resource is embedded in *PEfilename*, a .res file is produced using the filename specified for IL output by the **/output** option*.*"},{"pos":[8681,8816],"content":"[!NOTE]\n Ildasm.exe shows only metadata descriptions for .obj and .lib input files. IL code for these file types is not disassembled.","leadings":["","> "],"nodes":[{"content":" Ildasm.exe shows only metadata descriptions for .obj and .lib input files. IL code for these file types is not disassembled.","pos":[8,133],"nodes":[{"content":"Ildasm.exe shows only metadata descriptions for .obj and .lib input files.","pos":[1,75]},{"content":"IL code for these file types is not disassembled.","pos":[76,125]}]}]},{"content":"You can run Ildasm.exe over an.exe or .dll file to determine whether the file is managed.","pos":[8823,8912]},{"content":"If the file is not managed, the tool displays a message stating that the file has no valid common language runtime header and cannot be disassembled.","pos":[8913,9062]},{"content":"If the file is managed, the tool runs successfully.","pos":[9063,9114]},{"pos":[9123,9142],"content":"Version Information","linkify":"Version Information","nodes":[{"content":"Version Information","pos":[0,19]}]},{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, Ildasm.exe handles an unrecognized marshal BLOB (binary large object) by displaying the raw binary content.","pos":[9146,9325],"source":"Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], Ildasm.exe handles an unrecognized marshal BLOB (binary large object) by displaying the raw binary content."},{"content":"For example, the following code shows how a marshal BLOB generated by a C# program is displayed:","pos":[9326,9422]},{"pos":[9640,9847],"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, Ildasm.exe displays attributes that are applied to interface implementations, as shown in the following excerpt from Ildasm.exe output:","source":"Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], Ildasm.exe displays attributes that are applied to interface implementations, as shown in the following excerpt from Ildasm.exe output:"},{"pos":[10164,10172],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[10176,10311],"content":"The following command causes the metadata and disassembled code for the PE file <ph id=\"ph1\">`MyHello.exe`</ph> to display in the Ildasm.exe default GUI.","source":"The following command causes the metadata and disassembled code for the PE file `MyHello.exe` to display in the Ildasm.exe default GUI."},{"pos":[10354,10478],"content":"The following command disassembles the file <ph id=\"ph1\">`MyFile.exe`</ph> and stores the resulting IL Assembler text in the file <ph id=\"ph2\">`MyFile.il`</ph>.","source":"The following command disassembles the file `MyFile.exe` and stores the resulting IL Assembler text in the file `MyFile.il`."},{"pos":[10538,10662],"content":"The following command disassembles the file <ph id=\"ph1\">`MyFile.exe`</ph> and displays the resulting IL Assembler text to the console window.","source":"The following command disassembles the file `MyFile.exe` and displays the resulting IL Assembler text to the console window."},{"pos":[10710,10896],"content":"If the file <ph id=\"ph1\">`MyApp.exe`</ph> contains embedded managed and unmanaged resources, the following command produces four files: <ph id=\"ph2\">`MyApp.il`</ph>, <ph id=\"ph3\">`MyApp.res`</ph>, <ph id=\"ph4\">`Icons.resources,`</ph> and <ph id=\"ph5\">`Message.resources`</ph>:","source":"If the file `MyApp.exe` contains embedded managed and unmanaged resources, the following command produces four files: `MyApp.il`, `MyApp.res`, `Icons.resources,` and `Message.resources`:"},{"pos":[10954,11100],"content":"The following command disassembles the method <ph id=\"ph1\">`MyMethod`</ph> within the class <ph id=\"ph2\">`MyClass`</ph> in <ph id=\"ph3\">`MyFile.exe`</ph> and displays the output to the console window.","source":"The following command disassembles the method `MyMethod` within the class `MyClass` in `MyFile.exe` and displays the output to the console window."},{"content":"In the previous example, there could be several methods named <ph id=\"ph1\">`MyMethod`</ph> with different signatures.","pos":[11172,11271],"source":"In the previous example, there could be several methods named `MyMethod` with different signatures."},{"content":"The following command disassembles the instance method <ph id=\"ph1\">`MyMethod`</ph> with the return type of <bpt id=\"p1\">**</bpt>void<ept id=\"p1\">**</ept> and the parameter types <bpt id=\"p2\">**</bpt>int32<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>string<ept id=\"p3\">**</ept>.","pos":[11272,11420],"source":" The following command disassembles the instance method `MyMethod` with the return type of **void** and the parameter types **int32** and **string**."},{"pos":[11523,11833],"content":"[!NOTE]\n In the .NET Framework versions 1.0 and 1.1, the left parenthesis that follows the method name must be balanced by a right parenthesis after the signature: `MyMethod(instance void(int32))`. Starting with the .NET Framework 2.0 the closing parenthesis must be omitted: `MyMethod(instance void(int32)`.","leadings":["","> "],"nodes":[{"content":" In the .NET Framework versions 1.0 and 1.1, the left parenthesis that follows the method name must be balanced by a right parenthesis after the signature: `MyMethod(instance void(int32))`. Starting with the .NET Framework 2.0 the closing parenthesis must be omitted: `MyMethod(instance void(int32)`.","pos":[8,308],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, the left parenthesis that follows the method name must be balanced by a right parenthesis after the signature: <ph id=\"ph1\">`MyMethod(instance void(int32))`</ph>.","pos":[1,189],"source":" In the .NET Framework versions 1.0 and 1.1, the left parenthesis that follows the method name must be balanced by a right parenthesis after the signature: `MyMethod(instance void(int32))`."},{"content":"Starting with the .NET Framework 2.0 the closing parenthesis must be omitted: <ph id=\"ph1\">`MyMethod(instance void(int32)`</ph>.","pos":[190,300],"source":" Starting with the .NET Framework 2.0 the closing parenthesis must be omitted: `MyMethod(instance void(int32)`."}]}]},{"content":"To retrieve a <ph id=\"ph1\">`static`</ph> method (<ph id=\"ph2\">`Shared`</ph> method in Visual Basic), omit the keyword <ph id=\"ph3\">`instance`</ph>.","pos":[11840,11933],"source":"To retrieve a `static` method (`Shared` method in Visual Basic), omit the keyword `instance`."},{"content":"Class types that are not primitive types like <ph id=\"ph1\">`int32`</ph> and <ph id=\"ph2\">`string`</ph> must include the namespace and must be preceded by the keyword <ph id=\"ph3\">`class`</ph>.","pos":[11934,12072],"source":" Class types that are not primitive types like `int32` and `string` must include the namespace and must be preceded by the keyword `class`."},{"content":"External types must be preceded by the library name in square brackets.","pos":[12073,12144]},{"content":"The following command disassembles a static method named <ph id=\"ph1\">`MyMethod`</ph> that has one parameter of type <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph> and has a return type of <ph id=\"ph3\">&lt;xref:System.AppDomain&gt;</ph>.","pos":[12145,12317],"source":" The following command disassembles a static method named `MyMethod` that has one parameter of type <xref:System.AppDomain> and has a return type of <xref:System.AppDomain>."},{"content":"A nested type must be preceded by its containing class, delimited by a forward slash.","pos":[12458,12543]},{"content":"For example, if the <ph id=\"ph1\">`MyNamespace.MyClass`</ph> class contains a nested class named <ph id=\"ph2\">`NestedClass`</ph>, the nested class is identified as follows: <ph id=\"ph3\">`class MyNamespace.MyClass/NestedClass`</ph>.","pos":[12544,12720],"source":" For example, if the `MyNamespace.MyClass` class contains a nested class named `NestedClass`, the nested class is identified as follows: `class MyNamespace.MyClass/NestedClass`."},{"pos":[12729,12737],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Tools<ept id=\"p1\">](../../../docs/framework/tools/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[12741,12789],"source":"[Tools](../../../docs/framework/tools/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Ilasm.exe (IL Assembler)<ept id=\"p1\">](../../../docs/framework/tools/ilasm-exe-il-assembler.md)</ept><ph id=\"ph1\"> </ph>","pos":[12792,12877],"source":" [Ilasm.exe (IL Assembler)](../../../docs/framework/tools/ilasm-exe-il-assembler.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Managed Execution Process<ept id=\"p1\">](../../../docs/standard/managed-execution-process.md)</ept><ph id=\"ph1\"> </ph>","pos":[12880,12962],"source":" [Managed Execution Process](../../../docs/standard/managed-execution-process.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Command Prompts<ept id=\"p1\">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>","pos":[12965,13049],"source":" [Command Prompts](../../../docs/framework/tools/developer-command-prompt-for-vs.md)"}]}