<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="in-parameter-modifier.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e39d470308ed5a2b2ed82ade0faf8ba925228c2c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\in-parameter-modifier.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a71002be43620c5fe300d84bfea75c6e201ca4d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b047f909ce14cc21bf27fcf40b3c67a16a37c2d5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>in parameter modifier - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>in parameter modifier (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`in`</ph> keyword causes arguments to be passed by reference.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It makes the formal parameter an alias for the argument, which must be a variable.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In other words, any operation on the parameter is made on the argument.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is like the <bpt id="p1">[</bpt>ref<ept id="p1">](ref.md)</ept> or <bpt id="p2">[</bpt>out<ept id="p2">](out-parameter-modifier.md)</ept> keywords, except that <ph id="ph1">`in`</ph> arguments cannot be modified by the called method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Whereas <ph id="ph1">`ref`</ph> arguments may be modified, <ph id="ph2">`out`</ph> arguments must be modified by the called method, and those modifications are observable in the calling context.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The preceding example demonstrates that the <ph id="ph1">`in`</ph> modifier is usually unnecessary at the call site.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is only required in the method declaration.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`in`</ph> keyword can also be used with a generic type parameter to specify that the type parameter is contravariant, as part of a <ph id="ph2">`foreach`</ph> statement, or as part of a <ph id="ph3">`join`</ph> clause in a LINQ query.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information on the use of the <ph id="ph1">`in`</ph> keyword in these contexts, see <bpt id="p1">[</bpt>in<ept id="p1">](in.md)</ept>, which provides links to all those uses.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Variables passed as <ph id="ph1">`in`</ph> arguments must be initialized before being passed in a method call.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, the called method may not assign a value or modify the argument.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`in`</ph> parameter modifier is available in C# 7.2 and later.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Previous versions generate compiler error <ph id="ph1">`CS8107`</ph> ("Feature 'readonly references' is not available in C# 7.0.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Please use language version 7.2 or greater.") To configure the compiler language version, see <bpt id="p1">[</bpt>Select the C# language version<ept id="p1">](../configure-language-version.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`in`</ph>, <ph id="ph2">`ref`</ph>, and <ph id="ph3">`out`</ph> keywords are not considered part of the method signature for the purpose of overload resolution.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, methods cannot be overloaded if the only difference is that one method takes a <ph id="ph1">`ref`</ph> or <ph id="ph2">`in`</ph> argument and the other takes an <ph id="ph3">`out`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following code, for example, will not compile:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Overloading based on the presence of <ph id="ph1">`in`</ph> is allowed:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Overload resolution rules</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can understand the overload resolution rules for methods with by value vs. <ph id="ph1">`in`</ph> arguments by understanding the motivation for <ph id="ph2">`in`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Defining methods using <ph id="ph1">`in`</ph> parameters is a potential performance optimization.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Some <ph id="ph1">`struct`</ph> type arguments may be large in size, and when methods are called in tight loops or critical code paths, the cost of copying those structures is critical.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Methods declare <ph id="ph1">`in`</ph> parameters to specify that arguments may be passed by reference safely because the called method does not modify the state of that argument.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Passing those arguments by reference avoids the (potentially) expensive copy.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Specifying <ph id="ph1">`in`</ph> for arguments at the call site is typically optional.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>There is no semantic difference between passing arguments by value and passing them by reference using the <ph id="ph1">`in`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`in`</ph> modifier at the call site is optional because you don't need to indicate that the argument's value might be changed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You explicitly add the <ph id="ph1">`in`</ph> modifier at the call site to ensure the argument is passed by reference, not by value.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Explicitly using <ph id="ph1">`in`</ph> has the following two effects:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>First, specifying <ph id="ph1">`in`</ph> at the call site forces the compiler to select a method defined with a matching <ph id="ph2">`in`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Otherwise, when two methods differ only in the presence of <ph id="ph1">`in`</ph>, the by value overload is a better match.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Second, specifying <ph id="ph1">`in`</ph> declares your intent to pass an argument by reference.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The argument used with <ph id="ph1">`in`</ph> must represent a location that can be directly referred to.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The same general rules for <ph id="ph1">`out`</ph> and <ph id="ph2">`ref`</ph> arguments apply: You cannot use constants, ordinary properties, or other expressions that produce values.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Otherwise, omitting <ph id="ph1">`in`</ph> at the call site informs the compiler that you will allow it to create a temporary variable to pass by read-only reference to the method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The compiler creates a temporary variable to overcome several restrictions with <ph id="ph1">`in`</ph> arguments:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A temporary variable allows compile-time constants as <ph id="ph1">`in`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A temporary variable allows properties, or other expressions for <ph id="ph1">`in`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A temporary variable allows arguments where there is an implicit conversion from the argument type to the parameter type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In all the preceding instances, the compiler creates a temporary variable that stores the value of the constant, property, or other expression.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following code illustrates these rules:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Now, suppose another method using by value arguments was available.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The results change as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The only method call where the argument is passed by reference is the final one.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The preceding code uses <ph id="ph1">`int`</ph> as the argument type for simplicity.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`int`</ph> is no larger than a reference in most modern machines, there is no benefit to passing a single <ph id="ph2">`int`</ph> as a readonly reference.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Limitations on <ph id="ph1">`in`</ph> parameters</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can't use the <ph id="ph1">`in`</ph>, <ph id="ph2">`ref`</ph>, and <ph id="ph3">`out`</ph> keywords for the following kinds of methods:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Async methods, which you define by using the <bpt id="p1">[</bpt>async<ept id="p1">](async.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Iterator methods, which include a <bpt id="p1">[</bpt>yield return<ept id="p1">](yield.md)</ept> or <ph id="ph1">`yield break`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Method Parameters<ept id="p1">](method-parameters.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Write safe efficient code<ept id="p1">](../../write-safe-efficient-code.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>