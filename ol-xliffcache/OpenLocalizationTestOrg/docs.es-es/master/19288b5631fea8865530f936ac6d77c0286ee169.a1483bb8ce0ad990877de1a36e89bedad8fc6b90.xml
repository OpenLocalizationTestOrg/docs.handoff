{"content":"---\ntitle: \"ICorProfilerInfo2::GetGenerationBounds Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICorProfilerInfo2.GetGenerationBounds\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo2::GetGenerationBounds\"\nhelpviewer_keywords: \n  - \"ICorProfilerInfo2::GetGenerationBounds method [.NET Framework profiling]\"\n  - \"GetGenerationBounds method [.NET Framework profiling]\"\nms.assetid: 9c37185f-d1e0-4a6e-8b99-707f7df61d88\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# ICorProfilerInfo2::GetGenerationBounds Method\nGets the memory regions, which are segments of the heap, that make up the various garbage collection generations.  \n  \n## Syntax  \n  \n```  \nHRESULT GetGenerationBounds(  \n    [in]  ULONG cObjectRanges,  \n    [out] ULONG *pcObjectRanges,  \n    [out, size_is(cObjectRanges), length_is(*pcObjectRanges)] COR_PRF_GC_GENERATION_RANGE ranges[]);  \n```  \n  \n## Parameters  \n `cObjectRanges`  \n [in] The number of elements allocated by the caller for the `ranges` array.  \n  \n `pcObjectRanges`  \n [out] A pointer to an integer that specifies the total number of ranges, some or all of which will be returned in the `ranges` array.  \n  \n `ranges`  \n [out] An array of [COR_PRF_GC_GENERATION_RANGE](../../../../docs/framework/unmanaged-api/profiling/cor-prf-gc-generation-range-structure.md) structures, each of which describes a range (that is, block) of memory within the generation that is undergoing garbage collection.  \n  \n## Remarks  \n The `GetGenerationBounds` method can be called from any profiler callback, provided that garbage collection is not in progress. That is, it can be called from any callback except those that occur between [ICorProfilerCallback2::GarbageCollectionStarted](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionstarted-method.md) and [ICorProfilerCallback2::GarbageCollectionFinished](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md).  \n  \n Most shifting of generations takes place during garbage collections. Generations might grow between collections but generally do not move around. Therefore, the most interesting places to call `GetGenerationBounds` are in `ICorProfilerCallback2::GarbageCollectionStarted` and `ICorProfilerCallback2::GarbageCollectionFinished`.  \n  \n During program startup, some objects are allocated by the common language runtime (CLR) itself, generally in generations 3 and 0. Thus, by the time managed code starts executing, these generations will already contain objects. Generations 1 and 2 will normally be empty, except for dummy objects that are generated by the garbage collector. (The size of dummy objects is 12 bytes in 32-bit implementations of the CLR; the size is larger in 64-bit implementations.) You might also see generation 2 ranges that are inside modules produced by the Native Image Generator (NGen.exe). In this case, the objects in generation 2 are *frozen objects*, which are allocated when NGen.exe runs rather than by the garbage collector.  \n  \n This function uses caller-allocated buffers.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See also\n\n- [ICorProfilerInfo Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)\n- [ICorProfilerInfo2 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)\n- [Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)\n- [Profiling](../../../../docs/framework/unmanaged-api/profiling/index.md)\n","nodes":[{"pos":[4,522],"embed":true,"restype":"x-metadata","content":"title: \"ICorProfilerInfo2::GetGenerationBounds Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICorProfilerInfo2.GetGenerationBounds\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo2::GetGenerationBounds\"\nhelpviewer_keywords: \n  - \"ICorProfilerInfo2::GetGenerationBounds method [.NET Framework profiling]\"\n  - \"GetGenerationBounds method [.NET Framework profiling]\"\nms.assetid: 9c37185f-d1e0-4a6e-8b99-707f7df61d88\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"ICorProfilerInfo2::GetGenerationBounds Method","nodes":[{"pos":[0,45],"content":"ICorProfilerInfo2::GetGenerationBounds Method","nodes":[{"content":"ICorProfilerInfo2::GetGenerationBounds Method","pos":[0,45]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[529,574],"content":"ICorProfilerInfo2::GetGenerationBounds Method","linkify":"ICorProfilerInfo2::GetGenerationBounds Method","nodes":[{"content":"ICorProfilerInfo2::GetGenerationBounds Method","pos":[0,45]}]},{"content":"Gets the memory regions, which are segments of the heap, that make up the various garbage collection generations.","pos":[575,688]},{"pos":[697,703],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[929,939],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The number of elements allocated by the caller for the <ph id=\"ph1\">`ranges`</ph> array.","pos":[962,1037],"source":"[in] The number of elements allocated by the caller for the `ranges` array."},{"content":"[out] A pointer to an integer that specifies the total number of ranges, some or all of which will be returned in the <ph id=\"ph1\">`ranges`</ph> array.","pos":[1064,1197],"source":"[out] A pointer to an integer that specifies the total number of ranges, some or all of which will be returned in the `ranges` array."},{"content":"[out] An array of <bpt id=\"p1\">[</bpt>COR_PRF_GC_GENERATION_RANGE<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/cor-prf-gc-generation-range-structure.md)</ept> structures, each of which describes a range (that is, block) of memory within the generation that is undergoing garbage collection.","pos":[1216,1488],"source":"[out] An array of [COR_PRF_GC_GENERATION_RANGE](../../../../docs/framework/unmanaged-api/profiling/cor-prf-gc-generation-range-structure.md) structures, each of which describes a range (that is, block) of memory within the generation that is undergoing garbage collection."},{"pos":[1497,1504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`GetGenerationBounds`</ph> method can be called from any profiler callback, provided that garbage collection is not in progress.","pos":[1508,1635],"source":"The `GetGenerationBounds` method can be called from any profiler callback, provided that garbage collection is not in progress."},{"content":"That is, it can be called from any callback except those that occur between <bpt id=\"p1\">[</bpt>ICorProfilerCallback2::GarbageCollectionStarted<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionstarted-method.md)</ept> and <bpt id=\"p2\">[</bpt>ICorProfilerCallback2::GarbageCollectionFinished<ept id=\"p2\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md)</ept>.","pos":[1636,2036],"source":" That is, it can be called from any callback except those that occur between [ICorProfilerCallback2::GarbageCollectionStarted](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionstarted-method.md) and [ICorProfilerCallback2::GarbageCollectionFinished](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md)."},{"content":"Most shifting of generations takes place during garbage collections.","pos":[2043,2111]},{"content":"Generations might grow between collections but generally do not move around.","pos":[2112,2188]},{"content":"Therefore, the most interesting places to call <ph id=\"ph1\">`GetGenerationBounds`</ph> are in <ph id=\"ph2\">`ICorProfilerCallback2::GarbageCollectionStarted`</ph> and <ph id=\"ph3\">`ICorProfilerCallback2::GarbageCollectionFinished`</ph>.","pos":[2189,2370],"source":" Therefore, the most interesting places to call `GetGenerationBounds` are in `ICorProfilerCallback2::GarbageCollectionStarted` and `ICorProfilerCallback2::GarbageCollectionFinished`."},{"content":"During program startup, some objects are allocated by the common language runtime (CLR) itself, generally in generations 3 and 0.","pos":[2377,2506]},{"content":"Thus, by the time managed code starts executing, these generations will already contain objects.","pos":[2507,2603]},{"content":"Generations 1 and 2 will normally be empty, except for dummy objects that are generated by the garbage collector.","pos":[2604,2717]},{"content":"(The size of dummy objects is 12 bytes in 32-bit implementations of the CLR; the size is larger in 64-bit implementations.) You might also see generation 2 ranges that are inside modules produced by the Native Image Generator (NGen.exe).","pos":[2718,2955]},{"content":"In this case, the objects in generation 2 are <bpt id=\"p1\">*</bpt>frozen objects<ept id=\"p1\">*</ept>, which are allocated when NGen.exe runs rather than by the garbage collector.","pos":[2956,3096],"source":" In this case, the objects in generation 2 are *frozen objects*, which are allocated when NGen.exe runs rather than by the garbage collector."},{"content":"This function uses caller-allocated buffers.","pos":[3103,3147]},{"pos":[3156,3168],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3172,3276],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3283,3317],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[3324,3349],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[3356,3464],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[3473,3481],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3485,3595],"content":"<bpt id=\"p1\">[</bpt>ICorProfilerInfo Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)</ept>","source":"[ICorProfilerInfo Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)"},{"pos":[3598,3710],"content":"<bpt id=\"p1\">[</bpt>ICorProfilerInfo2 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)</ept>","source":"[ICorProfilerInfo2 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)"},{"pos":[3713,3811],"content":"<bpt id=\"p1\">[</bpt>Profiling Interfaces<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)</ept>","source":"[Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)"},{"pos":[3814,3886],"content":"<bpt id=\"p1\">[</bpt>Profiling<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/index.md)</ept>","source":"[Profiling](../../../../docs/framework/unmanaged-api/profiling/index.md)"}]}