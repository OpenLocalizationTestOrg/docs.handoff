{"content":"---\ntitle: \"How to: Call an Event Handler in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Visual Basic code, procedures\"\n  - \"event handlers, calling\"\n  - \"event handlers\"\n  - \"procedures, event handlers\"\n  - \"procedures, calling\"\nms.assetid: 72e18ef8-144e-40df-a1f4-066a57271e28\ncaps.latest.revision: 19\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Call an Event Handler in Visual Basic\nAn *event* is an action or occurrence — such as a mouse click or a credit limit exceeded — that is recognized by some program component, and for which you can write code to respond. An *event handler* is the code you write to respond to an event.  \n  \n An event handler in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] is a `Sub` procedure. However, you do not normally call it the same way as other `Sub` procedures. Instead, you identify the procedure as a handler for the event. You can do this either with a [Handles](../../../../visual-basic/language-reference/statements/handles-clause.md) clause and a [WithEvents](../../../../visual-basic/language-reference/modifiers/withevents.md) variable, or with an [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md). Using a `Handles` clause is the default way to declare an event handler in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]. This is the way the event handlers are written by the designers when you program in the integrated development environment (IDE). The `AddHandler` statement is suitable for raising events dynamically at run time.  \n  \n When the event occurs, [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] automatically calls the event handler procedure. Any code that has access to the event can cause it to occur by executing a [RaiseEvent Statement](../../../../visual-basic/language-reference/statements/raiseevent-statement.md).  \n  \n You can associate more than one event handler with the same event. In some cases you can dissociate a handler from an event. For more information, see [Events](../../../../visual-basic/programming-guide/language-features/events/index.md).  \n  \n### To call an event handler using Handles and WithEvents  \n  \n1.  Make sure the event is declared with an [Event Statement](../../../../visual-basic/language-reference/statements/event-statement.md).  \n  \n2.  Declare an object variable at module or class level, using the [WithEvents](../../../../visual-basic/language-reference/modifiers/withevents.md) keyword. The `As` clause for this variable must specify the class that raises the event.  \n  \n3.  In the declaration of the event-handling `Sub` procedure, add a [Handles](../../../../visual-basic/language-reference/statements/handles-clause.md) clause that specifies the `WithEvents` variable and the event name.  \n  \n4.  When the event occurs, [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] automatically calls the `Sub` procedure. Your code can use a `RaiseEvent` statement to make the event occur.  \n  \n     The following example defines an event and a `WithEvents` variable that refers to the class that raises the event. The event-handling `Sub` procedure uses a `Handles` clause to specify the class and event it handles.  \n  \n     [!code-vb[VbVbcnProcedures#4](./codesnippet/VisualBasic/how-to-call-an-event-handler_1.vb)]  \n  \n### To call an event handler using AddHandler  \n  \n1.  Make sure the event is declared with an `Event` statement.  \n  \n2.  Execute an [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md) to dynamically connect the event-handling `Sub` procedure with the event.  \n  \n3.  When the event occurs, [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] automatically calls the `Sub` procedure. Your code can use a `RaiseEvent` statement to make the event occur.  \n  \n     The following example defines a `Sub` procedure to handle the <xref:System.Windows.Forms.Form.Closing> event of a form. It then uses the [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md) to associate the `catchClose` procedure as an event handler for <xref:System.Windows.Forms.Form.Closing>.  \n  \n     [!code-vb[VbVbcnProcedures#5](./codesnippet/VisualBasic/how-to-call-an-event-handler_2.vb)]  \n  \n     You can dissociate an event handler from an event by executing the [RemoveHandler Statement](../../../../visual-basic/language-reference/statements/removehandler-statement.md).  \n  \n## See Also  \n [Procedures](./index.md)   \n [Sub Procedures](./sub-procedures.md)   \n [Sub Statement](../../../../visual-basic/language-reference/statements/sub-statement.md)   \n [AddressOf Operator](../../../../visual-basic/language-reference/operators/addressof-operator.md)   \n [How to: Create a Procedure](./how-to-create-a-procedure.md)   \n [How to: Call a Procedure that Does Not Return a Value](./how-to-call-a-procedure-that-does-not-return-a-value.md)","nodes":[{"pos":[4,708],"nodes":[{"content":"How to: Call an Event Handler in Visual Basic | Microsoft Docs","nodes":[{"pos":[0,62],"content":"How to: Call an Event Handler in Visual Basic | Microsoft Docs","nodes":[{"content":"How to: Call an Event Handler in Visual Basic | Microsoft Docs","pos":[0,62]}]}],"pos":[6,71],"yaml":true}],"content":"title: \"How to: Call an Event Handler in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Visual Basic code, procedures\"\n  - \"event handlers, calling\"\n  - \"event handlers\"\n  - \"procedures, event handlers\"\n  - \"procedures, calling\"\nms.assetid: 72e18ef8-144e-40df-a1f4-066a57271e28\ncaps.latest.revision: 19\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[715,760],"content":"How to: Call an Event Handler in Visual Basic","linkify":"How to: Call an Event Handler in Visual Basic","nodes":[{"content":"How to: Call an Event Handler in Visual Basic","pos":[0,45]}]},{"content":"An <bpt id=\"p1\">*</bpt>event<ept id=\"p1\">*</ept> is an action or occurrence — such as a mouse click or a credit limit exceeded — that is recognized by some program component, and for which you can write code to respond.","pos":[761,942],"source":"An *event* is an action or occurrence — such as a mouse click or a credit limit exceeded — that is recognized by some program component, and for which you can write code to respond."},{"content":"An <bpt id=\"p1\">*</bpt>event handler<ept id=\"p1\">*</ept> is the code you write to respond to an event.","pos":[943,1007],"source":" An *event handler* is the code you write to respond to an event."},{"content":"An event handler in <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is a <ph id=\"ph2\">`Sub`</ph> procedure.","pos":[1014,1148],"source":"An event handler in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] is a `Sub` procedure."},{"content":"However, you do not normally call it the same way as other <ph id=\"ph1\">`Sub`</ph> procedures.","pos":[1149,1225],"source":" However, you do not normally call it the same way as other `Sub` procedures."},{"content":"Instead, you identify the procedure as a handler for the event.","pos":[1226,1289]},{"content":"You can do this either with a <bpt id=\"p1\">[</bpt>Handles<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> clause and a <bpt id=\"p2\">[</bpt>WithEvents<ept id=\"p2\">](../../../../visual-basic/language-reference/modifiers/withevents.md)</ept> variable, or with an <bpt id=\"p3\">[</bpt>AddHandler Statement<ept id=\"p3\">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept>.","pos":[1290,1623],"source":" You can do this either with a [Handles](../../../../visual-basic/language-reference/statements/handles-clause.md) clause and a [WithEvents](../../../../visual-basic/language-reference/modifiers/withevents.md) variable, or with an [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md)."},{"content":"Using a <ph id=\"ph1\">`Handles`</ph> clause is the default way to declare an event handler in <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.","pos":[1624,1792],"source":" Using a `Handles` clause is the default way to declare an event handler in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]."},{"content":"This is the way the event handlers are written by the designers when you program in the integrated development environment (IDE).","pos":[1793,1922]},{"content":"The <ph id=\"ph1\">`AddHandler`</ph> statement is suitable for raising events dynamically at run time.","pos":[1923,2005],"source":" The `AddHandler` statement is suitable for raising events dynamically at run time."},{"content":"When the event occurs, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically calls the event handler procedure.","pos":[2012,2176],"source":"When the event occurs, [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] automatically calls the event handler procedure."},{"content":"Any code that has access to the event can cause it to occur by executing a <bpt id=\"p1\">[</bpt>RaiseEvent Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/raiseevent-statement.md)</ept>.","pos":[2177,2355],"source":" Any code that has access to the event can cause it to occur by executing a [RaiseEvent Statement](../../../../visual-basic/language-reference/statements/raiseevent-statement.md)."},{"content":"You can associate more than one event handler with the same event.","pos":[2362,2428]},{"content":"In some cases you can dissociate a handler from an event.","pos":[2429,2486]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept>.","pos":[2487,2600],"source":" For more information, see [Events](../../../../visual-basic/programming-guide/language-features/events/index.md)."},{"pos":[2610,2663],"content":"To call an event handler using Handles and WithEvents","linkify":"To call an event handler using Handles and WithEvents","nodes":[{"content":"To call an event handler using Handles and WithEvents","pos":[0,53]}]},{"pos":[2673,2806],"content":"Make sure the event is declared with an <bpt id=\"p1\">[</bpt>Event Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/event-statement.md)</ept>.","source":"Make sure the event is declared with an [Event Statement](../../../../visual-basic/language-reference/statements/event-statement.md)."},{"content":"Declare an object variable at module or class level, using the <bpt id=\"p1\">[</bpt>WithEvents<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/withevents.md)</ept> keyword.","pos":[2816,2969],"source":"Declare an object variable at module or class level, using the [WithEvents](../../../../visual-basic/language-reference/modifiers/withevents.md) keyword."},{"content":"The <ph id=\"ph1\">`As`</ph> clause for this variable must specify the class that raises the event.","pos":[2970,3049],"source":" The `As` clause for this variable must specify the class that raises the event."},{"pos":[3059,3274],"content":"In the declaration of the event-handling <ph id=\"ph1\">`Sub`</ph> procedure, add a <bpt id=\"p1\">[</bpt>Handles<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/handles-clause.md)</ept> clause that specifies the <ph id=\"ph2\">`WithEvents`</ph> variable and the event name.","source":"In the declaration of the event-handling `Sub` procedure, add a [Handles](../../../../visual-basic/language-reference/statements/handles-clause.md) clause that specifies the `WithEvents` variable and the event name."},{"content":"When the event occurs, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically calls the <ph id=\"ph2\">`Sub`</ph> procedure.","pos":[3284,3440],"source":"When the event occurs, [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] automatically calls the `Sub` procedure."},{"content":"Your code can use a <ph id=\"ph1\">`RaiseEvent`</ph> statement to make the event occur.","pos":[3441,3508],"source":" Your code can use a `RaiseEvent` statement to make the event occur."},{"content":"The following example defines an event and a <ph id=\"ph1\">`WithEvents`</ph> variable that refers to the class that raises the event.","pos":[3519,3633],"source":"The following example defines an event and a `WithEvents` variable that refers to the class that raises the event."},{"content":"The event-handling <ph id=\"ph1\">`Sub`</ph> procedure uses a <ph id=\"ph2\">`Handles`</ph> clause to specify the class and event it handles.","pos":[3634,3735],"source":" The event-handling `Sub` procedure uses a `Handles` clause to specify the class and event it handles."},{"pos":[3746,3837],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbcnProcedures#4<ept id=\"p2\">](./codesnippet/VisualBasic/how-to-call-an-event-handler_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbcnProcedures#4](./codesnippet/VisualBasic/how-to-call-an-event-handler_1.vb)]"},{"pos":[3847,3888],"content":"To call an event handler using AddHandler","linkify":"To call an event handler using AddHandler","nodes":[{"content":"To call an event handler using AddHandler","pos":[0,41]}]},{"pos":[3898,3956],"content":"Make sure the event is declared with an <ph id=\"ph1\">`Event`</ph> statement.","source":"Make sure the event is declared with an `Event` statement."},{"pos":[3966,4153],"content":"Execute an <bpt id=\"p1\">[</bpt>AddHandler Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept> to dynamically connect the event-handling <ph id=\"ph1\">`Sub`</ph> procedure with the event.","source":"Execute an [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md) to dynamically connect the event-handling `Sub` procedure with the event."},{"content":"When the event occurs, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically calls the <ph id=\"ph2\">`Sub`</ph> procedure.","pos":[4163,4319],"source":"When the event occurs, [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] automatically calls the `Sub` procedure."},{"content":"Your code can use a <ph id=\"ph1\">`RaiseEvent`</ph> statement to make the event occur.","pos":[4320,4387],"source":" Your code can use a `RaiseEvent` statement to make the event occur."},{"content":"The following example defines a <ph id=\"ph1\">`Sub`</ph> procedure to handle the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event of a form.","pos":[4398,4517],"source":"The following example defines a `Sub` procedure to handle the <xref:System.Windows.Forms.Form.Closing> event of a form."},{"content":"It then uses the <bpt id=\"p1\">[</bpt>AddHandler Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/addhandler-statement.md)</ept> to associate the <ph id=\"ph1\">`catchClose`</ph> procedure as an event handler for <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph>.","pos":[4518,4743],"source":" It then uses the [AddHandler Statement](../../../../visual-basic/language-reference/statements/addhandler-statement.md) to associate the `catchClose` procedure as an event handler for <xref:System.Windows.Forms.Form.Closing>."},{"pos":[4754,4845],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbcnProcedures#5<ept id=\"p2\">](./codesnippet/VisualBasic/how-to-call-an-event-handler_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbcnProcedures#5](./codesnippet/VisualBasic/how-to-call-an-event-handler_2.vb)]"},{"pos":[4856,5032],"content":"You can dissociate an event handler from an event by executing the <bpt id=\"p1\">[</bpt>RemoveHandler Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/removehandler-statement.md)</ept>.","source":"You can dissociate an event handler from an event by executing the [RemoveHandler Statement](../../../../visual-basic/language-reference/statements/removehandler-statement.md)."},{"pos":[5041,5049],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](./index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5053,5078],"source":"[Procedures](./index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Sub Procedures<ept id=\"p1\">](./sub-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[5082,5120],"source":"[Sub Procedures](./sub-procedures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[5124,5213],"source":"[Sub Statement](../../../../visual-basic/language-reference/statements/sub-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>AddressOf Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/addressof-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[5217,5315],"source":"[AddressOf Operator](../../../../visual-basic/language-reference/operators/addressof-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Create a Procedure<ept id=\"p1\">](./how-to-create-a-procedure.md)</ept><ph id=\"ph1\"> </ph>","pos":[5319,5380],"source":"[How to: Create a Procedure](./how-to-create-a-procedure.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Call a Procedure that Does Not Return a Value<ept id=\"p1\">](./how-to-call-a-procedure-that-does-not-return-a-value.md)</ept>","pos":[5384,5498],"source":"[How to: Call a Procedure that Does Not Return a Value](./how-to-call-a-procedure-that-does-not-return-a-value.md)"}]}