<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-make-thread-safe-calls-to-windows-forms-controls.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">145474954167b6bcabc14eb17852fe963124a008</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\how-to-make-thread-safe-calls-to-windows-forms-controls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0109d3c6fde4b322cf103109a0ed0825a7b8e5fa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbfea66dd7e8617154420eaf48b725cdf5ef7653</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Make Thread-Safe Calls to Windows Forms Controls | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Make Thread-Safe Calls to Windows Forms Controls</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If you use multithreading to improve the performance of your Windows Forms applications, you must make sure that you make calls to your controls in a thread-safe way.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Access to Windows Forms controls is not inherently thread safe.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you have two or more threads manipulating the state of a control, it is possible to force the control into an inconsistent state.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Other thread-related bugs are possible, such as race conditions and deadlocks.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is important to make sure that access to your controls is performed in a thread-safe way.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It is unsafe to call a control from a thread other than the one that created the control without using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following is an example of a call that is not thread safe.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> helps you detect when you are accessing your controls in a manner that is not thread safe.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you are running your application in the debugger, and a thread other than the one which created a control tries to call that control, the debugger raises an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> with the message, "Control <bpt id="p1">*</bpt>control name<ept id="p1">*</ept> accessed from a thread other than the thread it was created on."</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This exception occurs reliably during debugging and, under some circumstances, at run time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You might see this exception when you debug applications that you wrote with the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> prior to the <ph id="ph2">[!INCLUDE[dnprdnext](../../../../includes/dnprdnext-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You are strongly advised to fix this problem when you see it, but you can disable it by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This causes your control to run like it would run under Visual Studio .NET 2003 and the <ph id="ph1">[!INCLUDE[net_v11_short](../../../../includes/net-v11-short-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you are using ActiveX controls on a form, you may receive the cross-thread <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> when you run under the debugger.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When this occurs, the ActiveX control does not support multithreading.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about using ActiveX controls with Windows Forms, see <bpt id="p1">[</bpt>Windows Forms and Unmanaged Applications<ept id="p1">](../../../../docs/framework/winforms/advanced/windows-forms-and-unmanaged-applications.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you are using Visual Studio, you can prevent this exception by disabling the Visual Studio hosting process, see <bpt id="p1">[</bpt>How to: Disable the Hosting Process<ept id="p1">](/visualstudio/ide/how-to-disable-the-hosting-process)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Making Thread-Safe Calls to Windows Forms Controls</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To make a thread-safe call to a Windows Forms control</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Query the control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, call <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> with a delegate that makes the actual call to the control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, call the control directly.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the following code example, a thread-safe call is implemented in the <ph id="ph1">`ThreadProcSafe`</ph> method, which is executed by the background thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> returns <ph id="ph3">`true`</ph>, the <ph id="ph4">`ThreadProcSafe`</ph> method creates an instance of <ph id="ph5">`StringArgReturningVoidDelegate`</ph> and passes that to the form's <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This causes the <ph id="ph1">`SetText`</ph> method to be called on the thread that created the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control, and in this thread context the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property is set directly.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Making Thread-Safe Calls by using BackgroundWorker</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The preferred way to implement multithreading in your application is to use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component uses an event-driven model for multithreading.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The background thread runs your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, and the thread that creates your controls runs your <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> and <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handlers.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can call your controls from your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handlers.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To make thread-safe calls by using BackgroundWorker</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Create a method to do the work that you want done in the background thread.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Do not call controls created by the main thread in this method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Create a method to report the results of your background work after it finishes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can call controls created by the main thread in this method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Bind the method created in step 1 to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event of an instance of <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, and bind the method created in step 2 to the same instance’s <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To start the background thread, call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the following code example, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler uses <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph> to simulate work that takes some time.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It does not call the form’s <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property is set directly in the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can also report the progress of a background task by using the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For an example that incorporates that event, see <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following code example is a complete Windows Forms application that consists of a form with three buttons and one text box.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The first button demonstrates unsafe cross-thread access, the second button demonstrates safe access by using <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, and the third button demonstrates safe access by using <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For instructions on how to run the example, see <bpt id="p1">[</bpt>How to: Compile and Run a Complete Windows Forms Code Example Using Visual Studio<ept id="p1">](http://msdn.microsoft.com/en-us/cc447f7e-4c3b-4397-9d05-aeba3ca49416)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This example requires references to the System.Drawing and System.Windows.Forms assemblies.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When you run the application and click the <bpt id="p1">**</bpt>Unsafe Call<ept id="p1">**</ept> button, you immediately see "Written by the main thread" in the text box.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Two seconds later, when the unsafe call is attempted, the Visual Studio debugger indicates that an exception occurred.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The debugger stops at the line in the background thread that attempted to write directly to the text box.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You will have to restart the application to test the other two buttons.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When you click the <bpt id="p1">**</bpt>Safe Call<ept id="p1">**</ept> button, "Written by the main thread" appears in the text box.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Two seconds later, the text box is set to "Written by the background thread (Invoke)", which indicates that the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method was called.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When you click the <bpt id="p1">**</bpt>Safe BW Call<ept id="p1">**</ept> button, "Written by the main thread" appears in the text box.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Two seconds later, the text box is set to "Written by the main thread after the background thread completed", which indicates that the handler for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event of <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> was called.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When you use multithreading of any sort, your code can be exposed to very serious and complex bugs.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](../../../../docs/standard/threading/managed-threading-best-practices.md)</ept> before you implement any solution that uses multithreading.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-implement-a-form-that-uses-a-background-operation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Developing Custom Windows Forms Controls with the .NET Framework<ept id="p1">](../../../../docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Forms and Unmanaged Applications<ept id="p1">](../../../../docs/framework/winforms/advanced/windows-forms-and-unmanaged-applications.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>