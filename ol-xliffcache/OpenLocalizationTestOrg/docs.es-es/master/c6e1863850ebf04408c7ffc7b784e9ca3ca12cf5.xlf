<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="visual-basic-and-wpf-event-handling.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6e1863850ebf04408c7ffc7b784e9ca3ca12cf5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\visual-basic-and-wpf-event-handling.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52f02df757f58508ecc6ffce36db2ef8633b118b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1334e9832bb542aa7e2532092f29909fe594dc89</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Visual Basic and WPF Event Handling</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Visual Basic and WPF Event Handling</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For the Microsoft Visual Basic .NET language specifically, you can use the language-specific <ph id="ph1">`Handles`</ph> keyword to associate event handlers with instances, instead of attaching event handlers with attributes or using the <ph id="ph2">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`Handles`</ph> technique for attaching handlers to instances does have some limitations, because the <ph id="ph2">`Handles`</ph> syntax cannot support some of the specific routed event features of the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> event system.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Using "Handles" in a WPF Application</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The event handlers that are connected to instances and events with <ph id="ph1">`Handles`</ph> must all be defined within the partial class declaration of the instance, which is also a requirement for event handlers that are assigned through attribute values on elements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can only specify <ph id="ph1">`Handles`</ph> for an element on the page that has a <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.Name%2A&gt;</ph> property value (or <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](../../xaml-services/x-name-directive.md)</ept> declared).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is because the <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.Name%2A&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> creates the instance reference that is necessary to support the <bpt id="p1">*</bpt>Instance.Event<ept id="p1">*</ept> reference format required by the <ph id="ph3">`Handles`</ph> syntax.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The only element that can be used for <ph id="ph1">`Handles`</ph> without a <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.Name%2A&gt;</ph> reference is the root-element instance that defines the partial class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can assign the same handler to multiple elements by separating <bpt id="p1">*</bpt>Instance.Event<ept id="p1">*</ept> references after <ph id="ph1">`Handles`</ph> with commas.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Handles`</ph> to assign more than one handler to the same <bpt id="p1">*</bpt>Instance.Event<ept id="p1">*</ept>reference.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Do not assign any importance to the order in which handlers are given in the <ph id="ph1">`Handles`</ph> reference; you should assume that handlers that handle the same event can be invoked in any order.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To remove a handler that was added with <ph id="ph1">`Handles`</ph> in the declaration, you can call <ph id="ph2">&lt;xref:System.Windows.UIElement.RemoveHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Handles`</ph> to attach handlers for routed events, so long as you attach handlers to instances that define the event being handled in their members tables.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For routed events, handlers that are attached with <ph id="ph1">`Handles`</ph> follow the same routing rules as do handlers that are attached as <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> attributes, or with the common signature of <ph id="ph3">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This means that if the event is already marked handled (the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property in the event data is <ph id="ph2">`True`</ph>), then handlers attached with <ph id="ph3">`Handles`</ph> are not invoked in response to that event instance.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The event could be marked handled by instance handlers on another element in the route, or by class handling either on the current element or earlier elements along the route.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For input events that support paired tunnel/bubble events, the tunneling route may have marked the event pair handled.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about routed events, see <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](routed-events-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Limitations of "Handles" for Adding Handlers</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Handles`</ph> cannot reference handlers for attached events.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You must use the <ph id="ph1">`add`</ph> accessor method for that attached event, or <bpt id="p1">*</bpt>typename.eventname<ept id="p1">*</ept> event attributes in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](routed-events-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For routed events, you can only use <ph id="ph1">`Handles`</ph> to assign handlers for instances where that event exists in the instance members table.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, with routed events in general, a parent element can be a listener for an event from child elements, even if the parent element does not have that event in its members table.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In attribute syntax, you can specify this through a <bpt id="p1">*</bpt>typename.membername<ept id="p1">*</ept> attribute form that qualifies which type actually defines the event you want to handle.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For instance, a parent <ph id="ph1">`Page`</ph> (with no <ph id="ph2">`Click`</ph> event defined) can listen for button-click events by assigning an attribute handler in the form <ph id="ph3">`Button.Click`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>But <ph id="ph1">`Handles`</ph> does not support the <bpt id="p1">*</bpt>typename.membername<ept id="p1">*</ept> form, because it must support a conflicting <bpt id="p2">*</bpt>Instance.Event<ept id="p2">*</ept> form.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](routed-events-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Handles`</ph> cannot attach handlers that are invoked for events that are already marked handled.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Instead, you must use code and call the <ph id="ph1">`handledEventsToo`</ph> overload of <ph id="ph2">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Do not use the <ph id="ph1">`Handles`</ph> syntax in Visual Basic code when you specify an event handler for the same event in XAML.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this case, the event handler is called twice.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>How WPF Implements "Handles" Functionality</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> page is compiled, the intermediate file declares <ph id="ph2">`Friend`</ph> <ph id="ph3">`WithEvents`</ph> references to every element on the page that has a <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement.Name%2A&gt;</ph> property set (or <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](../../xaml-services/x-name-directive.md)</ept> declared).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each named instance is potentially an element that can be assigned to a handler through <ph id="ph1">`Handles`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Within <ph id="ph1">[!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)]</ph>, <ph id="ph2">[!INCLUDE[TLA2#tla_intellisense](../../../../includes/tla2sharptla-intellisense-md.md)]</ph> can show you completion for which elements are available for a <ph id="ph3">`Handles`</ph> reference in a page.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, this might take one compile pass so that the intermediate file can populate all the <ph id="ph1">`Friends`</ph> references.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](marking-routed-events-as-handled-and-class-handling.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](routed-events-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML Overview (WPF)<ept id="p1">](xaml-overview-wpf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>