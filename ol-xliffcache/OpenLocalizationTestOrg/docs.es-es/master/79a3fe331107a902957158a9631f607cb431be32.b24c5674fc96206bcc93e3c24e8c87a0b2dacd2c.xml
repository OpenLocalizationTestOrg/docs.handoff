{"content":"---\ntitle: \"var - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"var\"\n  - \"var_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"var keyword [C#]\"\nms.assetid: 0777850a-2691-4e3e-927f-0c850f5efe15\n---\n# var (C# Reference)\n\nBeginning in Visual C# 3.0, variables that are declared at method scope can have an implicit \"type\" `var`. An implicitly typed local variable is strongly typed just as if you had declared the type yourself, but the compiler determines the type. The following two declarations of `i` are functionally equivalent:\n\n```csharp\nvar i = 10; // Implicitly typed.\nint i = 10; // Explicitly typed.\n```\n\nFor more information, see [Implicitly Typed Local Variables](../../programming-guide/classes-and-structs/implicitly-typed-local-variables.md) and [Type Relationships in LINQ Query Operations](../../programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md).\n\n## Example\n\nThe following example shows two query expressions. In the first expression, the use of `var` is permitted but is not required, because the type of the query result can be stated explicitly as an `IEnumerable<string>`. However, in the second expression, `var` allows the result to be a collection of anonymous types, and the name of that type is not accessible except to the compiler itself. Use of `var` eliminates the requirement to create a new class for the result. Note that in Example #2, the `foreach` iteration variable `item` must also be implicitly typed.\n\n[!code-csharp[csrefKeywordsTypes#18](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#18)]\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [Implicitly Typed Local Variables](../../programming-guide/classes-and-structs/implicitly-typed-local-variables.md)","nodes":[{"pos":[4,214],"embed":true,"restype":"x-metadata","content":"title: \"var - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"var\"\n  - \"var_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"var keyword [C#]\"\nms.assetid: 0777850a-2691-4e3e-927f-0c850f5efe15","nodes":[{"content":"var - C# Reference","nodes":[{"pos":[0,18],"content":"var - C# Reference","nodes":[{"content":"var - C# Reference","pos":[0,18]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[221,239],"content":"var (C# Reference)","linkify":"var (C# Reference)","nodes":[{"content":"var (C# Reference)","pos":[0,18]}]},{"content":"Beginning in Visual C# 3.0, variables that are declared at method scope can have an implicit \"type\" <ph id=\"ph1\">`var`</ph>.","pos":[241,347],"source":"Beginning in Visual C# 3.0, variables that are declared at method scope can have an implicit \"type\" `var`."},{"content":"An implicitly typed local variable is strongly typed just as if you had declared the type yourself, but the compiler determines the type.","pos":[348,485]},{"content":"The following two declarations of <ph id=\"ph1\">`i`</ph> are functionally equivalent:","pos":[486,552],"source":" The following two declarations of `i` are functionally equivalent:"},{"pos":[635,913],"content":"For more information, see <bpt id=\"p1\">[</bpt>Implicitly Typed Local Variables<ept id=\"p1\">](../../programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept> and <bpt id=\"p2\">[</bpt>Type Relationships in LINQ Query Operations<ept id=\"p2\">](../../programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md)</ept>.","source":"For more information, see [Implicitly Typed Local Variables](../../programming-guide/classes-and-structs/implicitly-typed-local-variables.md) and [Type Relationships in LINQ Query Operations](../../programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md)."},{"pos":[918,925],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows two query expressions.","pos":[927,977]},{"content":"In the first expression, the use of <ph id=\"ph1\">`var`</ph> is permitted but is not required, because the type of the query result can be stated explicitly as an <ph id=\"ph2\">`IEnumerable&lt;string&gt;`</ph>.","pos":[978,1144],"source":" In the first expression, the use of `var` is permitted but is not required, because the type of the query result can be stated explicitly as an `IEnumerable<string>`."},{"content":"However, in the second expression, <ph id=\"ph1\">`var`</ph> allows the result to be a collection of anonymous types, and the name of that type is not accessible except to the compiler itself.","pos":[1145,1317],"source":" However, in the second expression, `var` allows the result to be a collection of anonymous types, and the name of that type is not accessible except to the compiler itself."},{"content":"Use of <ph id=\"ph1\">`var`</ph> eliminates the requirement to create a new class for the result.","pos":[1318,1395],"source":" Use of `var` eliminates the requirement to create a new class for the result."},{"content":"Note that in Example #2, the <ph id=\"ph1\">`foreach`</ph> iteration variable <ph id=\"ph2\">`item`</ph> must also be implicitly typed.","pos":[1396,1491],"source":" Note that in Example #2, the `foreach` iteration variable `item` must also be implicitly typed."},{"pos":[1625,1633],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1637,1664],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1667,1723],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1726,1841],"content":"<bpt id=\"p1\">[</bpt>Implicitly Typed Local Variables<ept id=\"p1\">](../../programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>","source":"[Implicitly Typed Local Variables](../../programming-guide/classes-and-structs/implicitly-typed-local-variables.md)"}]}