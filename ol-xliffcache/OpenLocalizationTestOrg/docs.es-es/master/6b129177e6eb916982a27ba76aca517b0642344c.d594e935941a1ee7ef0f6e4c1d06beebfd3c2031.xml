{"content":"---\ntitle: \"Using Indexers - C# Programming Guide\"\nms.custom: seodec18\nms.date: 10/03/2018\nhelpviewer_keywords: \n  - \"indexers [C#], about indexers\"\nms.assetid: df70e1a2-3ce3-4aba-ad80-4b2f3538699f\n---\n# Using indexers (C# Programming Guide)\n\nIndexers are a syntactic convenience that enable you to create a [class](../../../csharp/language-reference/keywords/class.md), [struct](../../../csharp/language-reference/keywords/struct.md), or [interface](../../../csharp/language-reference/keywords/interface.md) that client applications can access just as an array. Indexers are most frequently implemented in types whose primary purpose is to encapsulate an internal collection or array. For example, suppose you have a class `TempRecord` that represents the temperature in Fahrenheit as recorded at 10 different times during a 24 hour period. The class contains an array `temps` of type `float[]` to store the temperature values. By implementing an indexer in this class, clients can access the temperatures in a `TempRecord` instance as `float temp = tr[4]` instead of as `float temp = tr.temps[4]`. The indexer notation not only simplifies the syntax for client applications; it also makes the class and its purpose more intuitive for other developers to understand.  \n  \nTo declare an indexer on a class or struct, use the [this](../../../csharp/language-reference/keywords/this.md) keyword, as the following example shows:\n\n```csharp\npublic int this[int index]    // Indexer declaration  \n{  \n    // get and set accessors  \n}  \n```\n\n## Remarks\n\nThe type of an indexer and the type of its parameters must be at least as accessible as the indexer itself. For more information about accessibility levels, see [Access Modifiers](../../../csharp/language-reference/keywords/access-modifiers.md).  \n  \n For more information about how to use indexers with an interface, see [Interface Indexers](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md).  \n  \n The signature of an indexer consists of the number and types of its formal parameters. It doesn't include the indexer type or the names of the formal parameters. If you declare more than one indexer in the same class, they must have different signatures.  \n  \n An indexer value is not classified as a variable; therefore, you cannot pass an indexer value as a [ref](../../../csharp/language-reference/keywords/ref.md) or [out](../../../csharp/language-reference/keywords/out-parameter-modifier.md) parameter.  \n  \n To provide the indexer with a name that other languages can use, use <xref:System.Runtime.CompilerServices.IndexerNameAttribute?displayProperty=nameWithType>, as the following example shows:  \n\n```csharp\n[System.Runtime.CompilerServices.IndexerName(\"TheItem\")]  \npublic int this[int index]   // Indexer declaration  \n{\n    // get and set accessors  \n}  \n```\n\nThis indexer will have the name `TheItem`. Not providing the name attribute would make `Item` the default name.  \n  \n## Example 1  \n  \nThe following example shows how to declare a private array field, `temps`, and an indexer. The indexer enables direct access to the instance `tempRecord[i]`. The alternative to using the indexer is to declare the array as a [public](../../../csharp/language-reference/keywords/public.md) member and access its members, `tempRecord.temps[i]`, directly.  \n  \n Notice that when an indexer's access is evaluated, for example, in a `Console.Write` statement, the [get](../../../csharp/language-reference/keywords/get.md) accessor is invoked. Therefore, if no `get` accessor exists, a compile-time error occurs.  \n  \n [!code-csharp[csProgGuideIndexers#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideIndexers/CS/Indexers.cs#1)]  \n  \n## Indexing using other values\n\nC# doesn't limit the indexer parameter type to integer. For example, it may be useful to use a string with an indexer. Such an indexer might be implemented by searching for the string in the collection, and returning the appropriate value. As accessors can be overloaded, the string and integer versions can co-exist.  \n  \n## Example 2  \n  \nThe following example declares a class that stores the days of the week. A `get` accessor takes a string, the name of a day, and returns the corresponding integer. For example, \"Sunday\" returns 0, \"Monday\" returns 1, and so on.  \n  \n [!code-csharp[csProgGuideIndexers#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideIndexers/CS/Indexers.cs#2)]  \n  \n## Robust programming\n\n There are two main ways in which the security and reliability of indexers can be improved:  \n  \n- Be sure to incorporate some type of error-handling strategy to handle the chance of client code passing in an invalid index value. In the first example earlier in this topic, the TempRecord class provides a Length property that enables the client code to verify the input before passing it to the indexer. You can also put the error handling code inside the indexer itself. Be sure to document for users any exceptions that you throw inside an indexer accessor.  \n  \n- Set the accessibility of the [get](../../../csharp/language-reference/keywords/get.md) and [set](../../../csharp/language-reference/keywords/set.md) accessors to be as restrictive as is reasonable. This is important for the `set` accessor in particular. For more information, see [Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md).  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Indexers](../../../csharp/programming-guide/indexers/index.md)\n- [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)\n","nodes":[{"pos":[4,197],"embed":true,"restype":"x-metadata","content":"title: \"Using Indexers - C# Programming Guide\"\nms.custom: seodec18\nms.date: 10/03/2018\nhelpviewer_keywords: \n  - \"indexers [C#], about indexers\"\nms.assetid: df70e1a2-3ce3-4aba-ad80-4b2f3538699f","nodes":[{"content":"Using Indexers - C# Programming Guide","nodes":[{"pos":[0,37],"content":"Using Indexers - C# Programming Guide","nodes":[{"content":"Using Indexers - C# Programming Guide","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[204,241],"content":"Using indexers (C# Programming Guide)","linkify":"Using indexers (C# Programming Guide)","nodes":[{"content":"Using indexers (C# Programming Guide)","pos":[0,37]}]},{"content":"Indexers are a syntactic convenience that enable you to create a <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](../../../csharp/language-reference/keywords/class.md)</ept>, <bpt id=\"p2\">[</bpt>struct<ept id=\"p2\">](../../../csharp/language-reference/keywords/struct.md)</ept>, or <bpt id=\"p3\">[</bpt>interface<ept id=\"p3\">](../../../csharp/language-reference/keywords/interface.md)</ept> that client applications can access just as an array.","pos":[243,562],"source":"Indexers are a syntactic convenience that enable you to create a [class](../../../csharp/language-reference/keywords/class.md), [struct](../../../csharp/language-reference/keywords/struct.md), or [interface](../../../csharp/language-reference/keywords/interface.md) that client applications can access just as an array."},{"content":"Indexers are most frequently implemented in types whose primary purpose is to encapsulate an internal collection or array.","pos":[563,685]},{"content":"For example, suppose you have a class <ph id=\"ph1\">`TempRecord`</ph> that represents the temperature in Fahrenheit as recorded at 10 different times during a 24 hour period.","pos":[686,841],"source":" For example, suppose you have a class `TempRecord` that represents the temperature in Fahrenheit as recorded at 10 different times during a 24 hour period."},{"content":"The class contains an array <ph id=\"ph1\">`temps`</ph> of type <ph id=\"ph2\">`float[]`</ph> to store the temperature values.","pos":[842,928],"source":" The class contains an array `temps` of type `float[]` to store the temperature values."},{"content":"By implementing an indexer in this class, clients can access the temperatures in a <ph id=\"ph1\">`TempRecord`</ph> instance as <ph id=\"ph2\">`float temp = tr[4]`</ph> instead of as <ph id=\"ph3\">`float temp = tr.temps[4]`</ph>.","pos":[929,1099],"source":" By implementing an indexer in this class, clients can access the temperatures in a `TempRecord` instance as `float temp = tr[4]` instead of as `float temp = tr.temps[4]`."},{"content":"The indexer notation not only simplifies the syntax for client applications; it also makes the class and its purpose more intuitive for other developers to understand.","pos":[1100,1267]},{"pos":[1273,1425],"content":"To declare an indexer on a class or struct, use the <bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](../../../csharp/language-reference/keywords/this.md)</ept> keyword, as the following example shows:","source":"To declare an indexer on a class or struct, use the [this](../../../csharp/language-reference/keywords/this.md) keyword, as the following example shows:"},{"pos":[1539,1546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type of an indexer and the type of its parameters must be at least as accessible as the indexer itself.","pos":[1548,1655]},{"content":"For more information about accessibility levels, see <bpt id=\"p1\">[</bpt>Access Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/access-modifiers.md)</ept>.","pos":[1656,1793],"source":" For more information about accessibility levels, see [Access Modifiers](../../../csharp/language-reference/keywords/access-modifiers.md)."},{"pos":[1800,1961],"content":"For more information about how to use indexers with an interface, see <bpt id=\"p1\">[</bpt>Interface Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)</ept>.","source":"For more information about how to use indexers with an interface, see [Interface Indexers](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)."},{"content":"The signature of an indexer consists of the number and types of its formal parameters.","pos":[1968,2054]},{"content":"It doesn't include the indexer type or the names of the formal parameters.","pos":[2055,2129]},{"content":"If you declare more than one indexer in the same class, they must have different signatures.","pos":[2130,2222]},{"pos":[2229,2476],"content":"An indexer value is not classified as a variable; therefore, you cannot pass an indexer value as a <bpt id=\"p1\">[</bpt>ref<ept id=\"p1\">](../../../csharp/language-reference/keywords/ref.md)</ept> or <bpt id=\"p2\">[</bpt>out<ept id=\"p2\">](../../../csharp/language-reference/keywords/out-parameter-modifier.md)</ept> parameter.","source":"An indexer value is not classified as a variable; therefore, you cannot pass an indexer value as a [ref](../../../csharp/language-reference/keywords/ref.md) or [out](../../../csharp/language-reference/keywords/out-parameter-modifier.md) parameter."},{"pos":[2483,2673],"content":"To provide the indexer with a name that other languages can use, use <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute?displayProperty=nameWithType&gt;</ph>, as the following example shows:","source":"To provide the indexer with a name that other languages can use, use <xref:System.Runtime.CompilerServices.IndexerNameAttribute?displayProperty=nameWithType>, as the following example shows:"},{"content":"This indexer will have the name <ph id=\"ph1\">`TheItem`</ph>.","pos":[2842,2884],"source":"This indexer will have the name `TheItem`."},{"content":"Not providing the name attribute would make <ph id=\"ph1\">`Item`</ph> the default name.","pos":[2885,2953],"source":" Not providing the name attribute would make `Item` the default name."},{"pos":[2962,2971],"content":"Example 1","linkify":"Example 1","nodes":[{"content":"Example 1","pos":[0,9]}]},{"content":"The following example shows how to declare a private array field, <ph id=\"ph1\">`temps`</ph>, and an indexer.","pos":[2977,3067],"source":"The following example shows how to declare a private array field, `temps`, and an indexer."},{"content":"The indexer enables direct access to the instance <ph id=\"ph1\">`tempRecord[i]`</ph>.","pos":[3068,3134],"source":" The indexer enables direct access to the instance `tempRecord[i]`."},{"content":"The alternative to using the indexer is to declare the array as a <bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](../../../csharp/language-reference/keywords/public.md)</ept> member and access its members, <ph id=\"ph1\">`tempRecord.temps[i]`</ph>, directly.","pos":[3135,3328],"source":" The alternative to using the indexer is to declare the array as a [public](../../../csharp/language-reference/keywords/public.md) member and access its members, `tempRecord.temps[i]`, directly."},{"content":"Notice that when an indexer's access is evaluated, for example, in a <ph id=\"ph1\">`Console.Write`</ph> statement, the <bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](../../../csharp/language-reference/keywords/get.md)</ept> accessor is invoked.","pos":[3335,3513],"source":"Notice that when an indexer's access is evaluated, for example, in a `Console.Write` statement, the [get](../../../csharp/language-reference/keywords/get.md) accessor is invoked."},{"content":"Therefore, if no <ph id=\"ph1\">`get`</ph> accessor exists, a compile-time error occurs.","pos":[3514,3582],"source":" Therefore, if no `get` accessor exists, a compile-time error occurs."},{"pos":[3720,3747],"content":"Indexing using other values","linkify":"Indexing using other values","nodes":[{"content":"Indexing using other values","pos":[0,27]}]},{"content":"C# doesn't limit the indexer parameter type to integer.","pos":[3749,3804]},{"content":"For example, it may be useful to use a string with an indexer.","pos":[3805,3867]},{"content":"Such an indexer might be implemented by searching for the string in the collection, and returning the appropriate value.","pos":[3868,3988]},{"content":"As accessors can be overloaded, the string and integer versions can co-exist.","pos":[3989,4066]},{"pos":[4075,4084],"content":"Example 2","linkify":"Example 2","nodes":[{"content":"Example 2","pos":[0,9]}]},{"content":"The following example declares a class that stores the days of the week.","pos":[4090,4162]},{"content":"A <ph id=\"ph1\">`get`</ph> accessor takes a string, the name of a day, and returns the corresponding integer.","pos":[4163,4253],"source":" A `get` accessor takes a string, the name of a day, and returns the corresponding integer."},{"content":"For example, \"Sunday\" returns 0, \"Monday\" returns 1, and so on.","pos":[4254,4317]},{"pos":[4455,4473],"content":"Robust programming","linkify":"Robust programming","nodes":[{"content":"Robust programming","pos":[0,18]}]},{"content":"There are two main ways in which the security and reliability of indexers can be improved:","pos":[4476,4566]},{"content":"Be sure to incorporate some type of error-handling strategy to handle the chance of client code passing in an invalid index value.","pos":[4574,4704]},{"content":"In the first example earlier in this topic, the TempRecord class provides a Length property that enables the client code to verify the input before passing it to the indexer.","pos":[4705,4879]},{"content":"You can also put the error handling code inside the indexer itself.","pos":[4880,4947]},{"content":"Be sure to document for users any exceptions that you throw inside an indexer accessor.","pos":[4948,5035]},{"content":"Set the accessibility of the <bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](../../../csharp/language-reference/keywords/get.md)</ept> and <bpt id=\"p2\">[</bpt>set<ept id=\"p2\">](../../../csharp/language-reference/keywords/set.md)</ept> accessors to be as restrictive as is reasonable.","pos":[5043,5240],"source":"Set the accessibility of the [get](../../../csharp/language-reference/keywords/get.md) and [set](../../../csharp/language-reference/keywords/set.md) accessors to be as restrictive as is reasonable."},{"content":"This is important for the <ph id=\"ph1\">`set`</ph> accessor in particular.","pos":[5241,5296],"source":" This is important for the `set` accessor in particular."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Restricting Accessor Accessibility<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)</ept>.","pos":[5297,5453],"source":" For more information, see [Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)."},{"pos":[5462,5470],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5474,5540],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[5543,5606],"content":"<bpt id=\"p1\">[</bpt>Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/index.md)</ept>","source":"[Indexers](../../../csharp/programming-guide/indexers/index.md)"},{"pos":[5609,5690],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","source":"[Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"}]}