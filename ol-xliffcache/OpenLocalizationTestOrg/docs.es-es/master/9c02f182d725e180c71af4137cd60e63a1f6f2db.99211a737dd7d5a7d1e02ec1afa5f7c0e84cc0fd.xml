{"content":"---\ntitle: \"Generics (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"C# language, generics\"\n  - \"generics [C#]\"\nms.assetid: 75ea8509-a4ea-4e7a-a2b3-cf72482e9282\ncaps.latest.revision: 23\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Generics (C# Programming Guide)\nGenerics were added to version 2.0 of the C# language and the common language runtime (CLR). Generics introduce to the .NET Framework the concept of type parameters, which make it possible to design classes and methods that defer the specification of one or more types until the class or method is declared and instantiated by client code. For example, by using a generic type parameter T you can write a single class that other client code can use without incurring the cost or risk of runtime casts or boxing operations, as shown here:  \n  \n [!code-cs[csProgGuideGenerics#1](../../../csharp/programming-guide/generics/codesnippet/CSharp/index_1.cs)]  \n  \n## Generics Overview  \n  \n-   Use generic types to maximize code reuse, type safety, and performance.  \n  \n-   The most common use of generics is to create collection classes.  \n  \n-   The .NET Framework class library contains several new generic collection classes in the <xref:System.Collections.Generic> namespace. These should be used whenever possible instead of classes such as <xref:System.Collections.ArrayList> in the <xref:System.Collections> namespace.  \n  \n-   You can create your own generic interfaces, classes, methods, events and delegates.  \n  \n-   Generic classes may be constrained to enable access to methods on particular data types.  \n  \n-   Information on the types that are used in a generic data type may be obtained at run-time by using reflection.  \n  \n## Related Sections  \n For more information:  \n  \n-   [Introduction to Generics](../../../csharp/programming-guide/generics/introduction-to-generics.md)  \n  \n-   [Benefits of Generics](../../../csharp/programming-guide/generics/benefits-of-generics.md)  \n  \n-   [Generic Type Parameters](../../../csharp/programming-guide/generics/generic-type-parameters.md)  \n  \n-   [Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)  \n  \n-   [Generic Classes](../../../csharp/programming-guide/generics/generic-classes.md)  \n  \n-   [Generic Interfaces](../../../csharp/programming-guide/generics/generic-interfaces.md)  \n  \n-   [Generic Methods](../../../csharp/programming-guide/generics/generic-methods.md)  \n  \n-   [Generic Delegates](../../../csharp/programming-guide/generics/generic-delegates.md)  \n  \n-   [default Keyword](../../../csharp/programming-guide/generics/default-keyword-in-generic-code.md)  \n  \n-   [Differences Between C++ Templates and C# Generics](../../../csharp/programming-guide/generics/differences-between-cpp-templates-and-csharp-generics.md)  \n  \n-   [Generics and Reflection](../../../csharp/programming-guide/generics/generics-and-reflection.md)  \n  \n-   [Generics in the Run Time](../../../csharp/programming-guide/generics/generics-in-the-run-time.md)  \n  \n-   [Generics in the .NET Framework Class Library](../../../csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)  \n  \n## C# Language Specification  \n For more information, see the [C# Language Specification](../../../csharp/language-reference/language-specification.md).  \n  \n## See Also  \n <xref:System.Collections.Generic>   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Types](../../../csharp/programming-guide/types/index.md)   \n [\\<typeparam>](../../../csharp/programming-guide/xmldoc/typeparam.md)   \n [\\<typeparamref>](../../../csharp/programming-guide/xmldoc/typeparamref.md)","nodes":[{"pos":[4,551],"embed":true,"restype":"x-metadata","content":"title: \"Generics (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"C# language, generics\"\n  - \"generics [C#]\"\nms.assetid: 75ea8509-a4ea-4e7a-a2b3-cf72482e9282\ncaps.latest.revision: 23\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Generics (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,48],"content":"Generics (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Generics (C# Programming Guide) | Microsoft Docs","pos":[0,48]}]}],"path":["title"]}],"yml":true},{"pos":[558,589],"content":"Generics (C# Programming Guide)","linkify":"Generics (C# Programming Guide)","nodes":[{"content":"Generics (C# Programming Guide)","pos":[0,31]}]},{"content":"Generics were added to version 2.0 of the C# language and the common language runtime (CLR).","pos":[590,682]},{"content":"Generics introduce to the .NET Framework the concept of type parameters, which make it possible to design classes and methods that defer the specification of one or more types until the class or method is declared and instantiated by client code.","pos":[683,929]},{"content":"For example, by using a generic type parameter T you can write a single class that other client code can use without incurring the cost or risk of runtime casts or boxing operations, as shown here:","pos":[930,1127]},{"pos":[1250,1267],"content":"Generics Overview","linkify":"Generics Overview","nodes":[{"content":"Generics Overview","pos":[0,17]}]},{"content":"Use generic types to maximize code reuse, type safety, and performance.","pos":[1277,1348]},{"content":"The most common use of generics is to create collection classes.","pos":[1358,1422]},{"content":"The .NET Framework class library contains several new generic collection classes in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph> namespace.","pos":[1432,1564],"source":"The .NET Framework class library contains several new generic collection classes in the <xref:System.Collections.Generic> namespace."},{"content":"These should be used whenever possible instead of classes such as <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> in the <ph id=\"ph2\">&lt;xref:System.Collections&gt;</ph> namespace.","pos":[1565,1710],"source":" These should be used whenever possible instead of classes such as <xref:System.Collections.ArrayList> in the <xref:System.Collections> namespace."},{"content":"You can create your own generic interfaces, classes, methods, events and delegates.","pos":[1720,1803]},{"content":"Generic classes may be constrained to enable access to methods on particular data types.","pos":[1813,1901]},{"content":"Information on the types that are used in a generic data type may be obtained at run-time by using reflection.","pos":[1911,2021]},{"pos":[2030,2046],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"For more information:","pos":[2050,2071]},{"pos":[2081,2179],"content":"<bpt id=\"p1\">[</bpt>Introduction to Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/introduction-to-generics.md)</ept>","source":"[Introduction to Generics](../../../csharp/programming-guide/generics/introduction-to-generics.md)"},{"pos":[2189,2279],"content":"<bpt id=\"p1\">[</bpt>Benefits of Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/benefits-of-generics.md)</ept>","source":"[Benefits of Generics](../../../csharp/programming-guide/generics/benefits-of-generics.md)"},{"pos":[2289,2385],"content":"<bpt id=\"p1\">[</bpt>Generic Type Parameters<ept id=\"p1\">](../../../csharp/programming-guide/generics/generic-type-parameters.md)</ept>","source":"[Generic Type Parameters](../../../csharp/programming-guide/generics/generic-type-parameters.md)"},{"pos":[2395,2505],"content":"<bpt id=\"p1\">[</bpt>Constraints on Type Parameters<ept id=\"p1\">](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)</ept>","source":"[Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)"},{"pos":[2515,2595],"content":"<bpt id=\"p1\">[</bpt>Generic Classes<ept id=\"p1\">](../../../csharp/programming-guide/generics/generic-classes.md)</ept>","source":"[Generic Classes](../../../csharp/programming-guide/generics/generic-classes.md)"},{"pos":[2605,2691],"content":"<bpt id=\"p1\">[</bpt>Generic Interfaces<ept id=\"p1\">](../../../csharp/programming-guide/generics/generic-interfaces.md)</ept>","source":"[Generic Interfaces](../../../csharp/programming-guide/generics/generic-interfaces.md)"},{"pos":[2701,2781],"content":"<bpt id=\"p1\">[</bpt>Generic Methods<ept id=\"p1\">](../../../csharp/programming-guide/generics/generic-methods.md)</ept>","source":"[Generic Methods](../../../csharp/programming-guide/generics/generic-methods.md)"},{"pos":[2791,2875],"content":"<bpt id=\"p1\">[</bpt>Generic Delegates<ept id=\"p1\">](../../../csharp/programming-guide/generics/generic-delegates.md)</ept>","source":"[Generic Delegates](../../../csharp/programming-guide/generics/generic-delegates.md)"},{"pos":[2885,2981],"content":"<bpt id=\"p1\">[</bpt>default Keyword<ept id=\"p1\">](../../../csharp/programming-guide/generics/default-keyword-in-generic-code.md)</ept>","source":"[default Keyword](../../../csharp/programming-guide/generics/default-keyword-in-generic-code.md)"},{"pos":[2991,3143],"content":"<bpt id=\"p1\">[</bpt>Differences Between C++ Templates and C# Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/differences-between-cpp-templates-and-csharp-generics.md)</ept>","source":"[Differences Between C++ Templates and C# Generics](../../../csharp/programming-guide/generics/differences-between-cpp-templates-and-csharp-generics.md)"},{"pos":[3153,3249],"content":"<bpt id=\"p1\">[</bpt>Generics and Reflection<ept id=\"p1\">](../../../csharp/programming-guide/generics/generics-and-reflection.md)</ept>","source":"[Generics and Reflection](../../../csharp/programming-guide/generics/generics-and-reflection.md)"},{"pos":[3259,3357],"content":"<bpt id=\"p1\">[</bpt>Generics in the Run Time<ept id=\"p1\">](../../../csharp/programming-guide/generics/generics-in-the-run-time.md)</ept>","source":"[Generics in the Run Time](../../../csharp/programming-guide/generics/generics-in-the-run-time.md)"},{"pos":[3367,3504],"content":"<bpt id=\"p1\">[</bpt>Generics in the .NET Framework Class Library<ept id=\"p1\">](../../../csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>","source":"[Generics in the .NET Framework Class Library](../../../csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)"},{"pos":[3513,3538],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3542,3662],"content":"For more information, see the <bpt id=\"p1\">[</bpt>C# Language Specification<ept id=\"p1\">](../../../csharp/language-reference/language-specification.md)</ept>.","source":"For more information, see the [C# Language Specification](../../../csharp/language-reference/language-specification.md)."},{"pos":[3671,3679],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph>","pos":[3683,3716],"source":"<xref:System.Collections.Generic> "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3721,3788],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/programming-guide/types/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3792,3850],"source":"[Types](../../../csharp/programming-guide/types/index.md) "},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>typeparam&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/typeparam.md)</ept><ph id=\"ph2\"> </ph>","pos":[3854,3924],"source":"[\\<typeparam>](../../../csharp/programming-guide/xmldoc/typeparam.md) "},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>typeparamref&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/typeparamref.md)</ept>","pos":[3928,4003],"source":"[\\<typeparamref>](../../../csharp/programming-guide/xmldoc/typeparamref.md)"}]}