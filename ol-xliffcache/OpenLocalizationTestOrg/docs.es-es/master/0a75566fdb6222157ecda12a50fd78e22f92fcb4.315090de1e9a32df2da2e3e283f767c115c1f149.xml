{"content":"---\ntitle: \"true and false operators - C# Reference\"\nms.custom: seodec18\n\nms.date: 12/10/2018\nhelpviewer_keywords: \n  - \"false operator [C#]\"\n  - \"true operator [C#]\"\nms.assetid: 81a888fd-011e-4589-b242-6c261fea505e\n---\n# true and false operators (C# Reference)\n\nThe `true` operator returns the [bool](bool.md) value `true` to indicate that an operand is definitely true. The `false` operator returns the `bool` value `true` to indicate that an operand is definitely false. The `true` and `false` operators are not guaranteed to complement each other. That is, both the `true` and `false` operator might return the `bool` value `false` for the same operand. If a type defines one of the two operators, it must also define another operator.\n\nIf a type with the defined `true` and `false` operators [overloads](operator.md) the [logical OR operator](../operators/or-operator.md) `|` or the [logical AND operator](../operators/and-operator.md) `&` in a certain way, the [conditional logical OR operator](../operators/conditional-or-operator.md) `||` or [conditional logical AND operator](../operators/conditional-and-operator.md) `&&`, respectively, can be evaluated for the operands of that type. For more information, see the [User-defined conditional logical operators](~/_csharplang/spec/expressions.md#user-defined-conditional-logical-operators) section of the [C# language specification](../language-specification/index.md).\n\nA type with the defined `true` operator can be the type of a result of a controlling conditional expression in the [if](if-else.md), [do](do.md), [while](while.md), and [for](for.md) statements and in the [conditional operator `?:`](../operators/conditional-operator.md). For more information, see the [Boolean expressions](~/_csharplang/spec/expressions.md#boolean-expressions) section of the [C# language specification](../language-specification/index.md).\n\n> [!TIP]\n> Use the `bool?` type, if you need to support the three-valued logic, for example, when you work with databases that support a three-valued logical type. For more information, see [The bool? type](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type) section of the [Using nullable types](../../programming-guide/nullable-types/using-nullable-types.md) article.\n\nThe following example presents the type that defines both `true` and `false` operators. Moreover, it overloads the logical AND operator `&` in such a way that the operator `&&` also can be evaluated for the operands of that type.\n\n[!code-csharp-interactive[true and false operators example](~/samples/snippets/csharp/keywords/TrueFalseOperatorsExample.cs)]\n\nNotice the short-circuiting behavior of the `&&` operator. When the `GetFuelLaunchStatus` method returns `LaunchStatus.Red`, the second operand of the `&&` operator is not evaluated. That is because `LaunchStatus.Red` is definitely false. Then the result of the logical AND doesn't depend on the value of the second operand. The output of the example is as follows:\n\n```console\nGetting fuel launch status...\nWait!\n```\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [C# Operators](../operators/index.md)\n- [`true` literal](true-literal.md)\n- [`false` literal](false-literal.md)","nodes":[{"pos":[4,215],"embed":true,"restype":"x-metadata","content":"title: \"true and false operators - C# Reference\"\nms.custom: seodec18\n\nms.date: 12/10/2018\nhelpviewer_keywords: \n  - \"false operator [C#]\"\n  - \"true operator [C#]\"\nms.assetid: 81a888fd-011e-4589-b242-6c261fea505e","nodes":[{"content":"true and false operators - C# Reference","nodes":[{"pos":[0,39],"content":"true and false operators - C# Reference","nodes":[{"content":"true and false operators - C# Reference","pos":[0,39]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[222,261],"content":"true and false operators (C# Reference)","linkify":"true and false operators (C# Reference)","nodes":[{"content":"true and false operators (C# Reference)","pos":[0,39]}]},{"content":"The <ph id=\"ph1\">`true`</ph> operator returns the <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](bool.md)</ept> value <ph id=\"ph2\">`true`</ph> to indicate that an operand is definitely true.","pos":[263,371],"source":"The `true` operator returns the [bool](bool.md) value `true` to indicate that an operand is definitely true."},{"content":"The <ph id=\"ph1\">`false`</ph> operator returns the <ph id=\"ph2\">`bool`</ph> value <ph id=\"ph3\">`true`</ph> to indicate that an operand is definitely false.","pos":[372,473],"source":" The `false` operator returns the `bool` value `true` to indicate that an operand is definitely false."},{"content":"The <ph id=\"ph1\">`true`</ph> and <ph id=\"ph2\">`false`</ph> operators are not guaranteed to complement each other.","pos":[474,551],"source":" The `true` and `false` operators are not guaranteed to complement each other."},{"content":"That is, both the <ph id=\"ph1\">`true`</ph> and <ph id=\"ph2\">`false`</ph> operator might return the <ph id=\"ph3\">`bool`</ph> value <ph id=\"ph4\">`false`</ph> for the same operand.","pos":[552,657],"source":" That is, both the `true` and `false` operator might return the `bool` value `false` for the same operand."},{"content":"If a type defines one of the two operators, it must also define another operator.","pos":[658,739]},{"content":"If a type with the defined <ph id=\"ph1\">`true`</ph> and <ph id=\"ph2\">`false`</ph> operators <bpt id=\"p1\">[</bpt>overloads<ept id=\"p1\">](operator.md)</ept> the <bpt id=\"p2\">[</bpt>logical OR operator<ept id=\"p2\">](../operators/or-operator.md)</ept> <ph id=\"ph3\">`|`</ph> or the <bpt id=\"p3\">[</bpt>logical AND operator<ept id=\"p3\">](../operators/and-operator.md)</ept> <ph id=\"ph4\">`&amp;`</ph> in a certain way, the <bpt id=\"p4\">[</bpt>conditional logical OR operator<ept id=\"p4\">](../operators/conditional-or-operator.md)</ept> <ph id=\"ph5\">`||`</ph> or <bpt id=\"p5\">[</bpt>conditional logical AND operator<ept id=\"p5\">](../operators/conditional-and-operator.md)</ept> <ph id=\"ph6\">`&amp;&amp;`</ph>, respectively, can be evaluated for the operands of that type.","pos":[741,1194],"source":"If a type with the defined `true` and `false` operators [overloads](operator.md) the [logical OR operator](../operators/or-operator.md) `|` or the [logical AND operator](../operators/and-operator.md) `&` in a certain way, the [conditional logical OR operator](../operators/conditional-or-operator.md) `||` or [conditional logical AND operator](../operators/conditional-and-operator.md) `&&`, respectively, can be evaluated for the operands of that type."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>User-defined conditional logical operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#user-defined-conditional-logical-operators)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[1195,1427],"source":" For more information, see the [User-defined conditional logical operators](~/_csharplang/spec/expressions.md#user-defined-conditional-logical-operators) section of the [C# language specification](../language-specification/index.md)."},{"content":"A type with the defined <ph id=\"ph1\">`true`</ph> operator can be the type of a result of a controlling conditional expression in the <bpt id=\"p1\">[</bpt>if<ept id=\"p1\">](if-else.md)</ept>, <bpt id=\"p2\">[</bpt>do<ept id=\"p2\">](do.md)</ept>, <bpt id=\"p3\">[</bpt>while<ept id=\"p3\">](while.md)</ept>, and <bpt id=\"p4\">[</bpt>for<ept id=\"p4\">](for.md)</ept> statements and in the <bpt id=\"p5\">[</bpt>conditional operator <ph id=\"ph2\">`?:`</ph><ept id=\"p5\">](../operators/conditional-operator.md)</ept>.","pos":[1429,1700],"source":"A type with the defined `true` operator can be the type of a result of a controlling conditional expression in the [if](if-else.md), [do](do.md), [while](while.md), and [for](for.md) statements and in the [conditional operator `?:`](../operators/conditional-operator.md)."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Boolean expressions<ept id=\"p1\">](~/_csharplang/spec/expressions.md#boolean-expressions)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[1701,1887],"source":" For more information, see the [Boolean expressions](~/_csharplang/spec/expressions.md#boolean-expressions) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1891,2284],"content":"[!TIP]\nUse the `bool?` type, if you need to support the three-valued logic, for example, when you work with databases that support a three-valued logical type. For more information, see [The bool? type](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type) section of the [Using nullable types](../../programming-guide/nullable-types/using-nullable-types.md) article.","leadings":["","> "],"nodes":[{"content":"Use the `bool?` type, if you need to support the three-valued logic, for example, when you work with databases that support a three-valued logical type. For more information, see [The bool? type](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type) section of the [Using nullable types](../../programming-guide/nullable-types/using-nullable-types.md) article.","pos":[7,391],"nodes":[{"content":"Use the <ph id=\"ph1\">`bool?`</ph> type, if you need to support the three-valued logic, for example, when you work with databases that support a three-valued logical type.","pos":[0,152],"source":"Use the `bool?` type, if you need to support the three-valued logic, for example, when you work with databases that support a three-valued logical type."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>The bool? type<ept id=\"p1\">](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type)</ept> section of the <bpt id=\"p2\">[</bpt>Using nullable types<ept id=\"p2\">](../../programming-guide/nullable-types/using-nullable-types.md)</ept> article.","pos":[153,384],"source":" For more information, see [The bool? type](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type) section of the [Using nullable types](../../programming-guide/nullable-types/using-nullable-types.md) article."}]}]},{"content":"The following example presents the type that defines both <ph id=\"ph1\">`true`</ph> and <ph id=\"ph2\">`false`</ph> operators.","pos":[2286,2373],"source":"The following example presents the type that defines both `true` and `false` operators."},{"content":"Moreover, it overloads the logical AND operator <ph id=\"ph1\">`&amp;`</ph> in such a way that the operator <ph id=\"ph2\">`&amp;&amp;`</ph> also can be evaluated for the operands of that type.","pos":[2374,2515],"source":" Moreover, it overloads the logical AND operator `&` in such a way that the operator `&&` also can be evaluated for the operands of that type."},{"content":"Notice the short-circuiting behavior of the <ph id=\"ph1\">`&amp;&amp;`</ph> operator.","pos":[2644,2702],"source":"Notice the short-circuiting behavior of the `&&` operator."},{"content":"When the <ph id=\"ph1\">`GetFuelLaunchStatus`</ph> method returns <ph id=\"ph2\">`LaunchStatus.Red`</ph>, the second operand of the <ph id=\"ph3\">`&amp;&amp;`</ph> operator is not evaluated.","pos":[2703,2826],"source":" When the `GetFuelLaunchStatus` method returns `LaunchStatus.Red`, the second operand of the `&&` operator is not evaluated."},{"content":"That is because <ph id=\"ph1\">`LaunchStatus.Red`</ph> is definitely false.","pos":[2827,2882],"source":" That is because `LaunchStatus.Red` is definitely false."},{"content":"Then the result of the logical AND doesn't depend on the value of the second operand.","pos":[2883,2968]},{"content":"The output of the example is as follows:","pos":[2969,3009]},{"pos":[3066,3074],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3078,3105],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[3108,3164],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[3167,3190],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[3193,3230],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../operators/index.md)</ept>","source":"[C# Operators](../operators/index.md)"},{"pos":[3233,3266],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`true`</ph> literal<ept id=\"p1\">](true-literal.md)</ept>","source":"[`true` literal](true-literal.md)"},{"pos":[3269,3304],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`false`</ph> literal<ept id=\"p1\">](false-literal.md)</ept>","source":"[`false` literal](false-literal.md)"}]}