{"content":"---\ntitle: \"Sorting Data (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 6f81065c-0c89-4bf3-a6d8-442273f8810e\n---\n# Sorting Data (Visual Basic)\nA sorting operation orders the elements of a sequence based on one or more attributes. The first sort criterion performs a primary sort on the elements. By specifying a second sort criterion, you can sort the elements within each primary sort group.  \n  \n The following illustration shows the results of an alphabetical sort operation on a sequence of characters.  \n  \n ![Graphic that shows an alphabetical sort operation.](./media/sorting-data/alphabetical-sort-operation.png)  \n  \n The standard query operator methods that sort data are listed in the following section.  \n  \n## Methods  \n  \n|Method Name|Description|Visual Basic Query Expression Syntax|More Information|  \n|-----------------|-----------------|------------------------------------------|----------------------|  \n|OrderBy|Sorts values in ascending order.|`Order By`|<xref:System.Linq.Enumerable.OrderBy%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.OrderBy%2A?displayProperty=nameWithType>|  \n|OrderByDescending|Sorts values in descending order.|`Order By … Descending`|<xref:System.Linq.Enumerable.OrderByDescending%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.OrderByDescending%2A?displayProperty=nameWithType>|  \n|ThenBy|Performs a secondary sort in ascending order.|`Order By …, …`|<xref:System.Linq.Enumerable.ThenBy%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.ThenBy%2A?displayProperty=nameWithType>|  \n|ThenByDescending|Performs a secondary sort in descending order.|`Order By …, … Descending`|<xref:System.Linq.Enumerable.ThenByDescending%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.ThenByDescending%2A?displayProperty=nameWithType>|  \n|Reverse|Reverses the order of the elements in a collection.|Not applicable.|<xref:System.Linq.Enumerable.Reverse%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.Reverse%2A?displayProperty=nameWithType>|  \n  \n## Query Expression Syntax Examples  \n  \n### Primary Sort Examples  \n  \n#### Primary Ascending Sort  \n The following example demonstrates how to use the `Order By` clause in a LINQ query to sort the strings in an array by string length, in ascending order.  \n  \n```vb  \nDim words = {\"the\", \"quick\", \"brown\", \"fox\", \"jumps\"}  \n  \nDim sortQuery = From word In words   \n                Order By word.Length   \n                Select word  \n  \nDim sb As New System.Text.StringBuilder()  \nFor Each str As String In sortQuery  \n    sb.AppendLine(str)  \nNext  \n  \n' Display the results.  \nMsgBox(sb.ToString())  \n  \n' This code produces the following output:  \n  \n' the  \n' fox  \n' quick  \n' brown  \n' jumps  \n```  \n  \n#### Primary Descending Sort  \n The next example demonstrates how to use the `Order By Descending` clause in a LINQ query to sort the strings by their first letter, in descending order.  \n  \n```vb  \nDim words = {\"the\", \"quick\", \"brown\", \"fox\", \"jumps\"}  \n  \nDim sortQuery = From word In words   \n                Order By word.Substring(0, 1) Descending   \n                Select word  \n  \nDim sb As New System.Text.StringBuilder()  \nFor Each str As String In sortQuery  \n    sb.AppendLine(str)  \nNext  \n  \n' Display the results.  \nMsgBox(sb.ToString())  \n  \n' This code produces the following output:  \n  \n' the  \n' quick  \n' jumps  \n' fox  \n' brown  \n```  \n  \n### Secondary Sort Examples  \n  \n#### Secondary Ascending Sort  \n The following example demonstrates how to use the `Order By` clause in a LINQ query to perform a primary and secondary sort of the strings in an array. The strings are sorted primarily by length and secondarily by the first letter of the string, both in ascending order.  \n  \n```vb  \nDim words = {\"the\", \"quick\", \"brown\", \"fox\", \"jumps\"}  \n  \nDim sortQuery = From word In words   \n                Order By word.Length, word.Substring(0, 1)   \n                Select word  \n  \nDim sb As New System.Text.StringBuilder()  \nFor Each str As String In sortQuery  \n    sb.AppendLine(str)  \nNext  \n  \n' Display the results.  \nMsgBox(sb.ToString())  \n  \n' This code produces the following output:  \n  \n' fox  \n' the  \n' brown  \n' jumps  \n' quick  \n```  \n  \n#### Secondary Descending Sort  \n The next example demonstrates how to use the `Order By Descending` clause in a LINQ query to perform a primary sort, in ascending order, and a secondary sort, in descending order. The strings are sorted primarily by length and secondarily by the first letter of the string.  \n  \n```vb  \nDim words = {\"the\", \"quick\", \"brown\", \"fox\", \"jumps\"}  \n  \nDim sortQuery = From word In words   \n                Order By word.Length, word.Substring(0, 1) Descending   \n                Select word  \n  \nDim sb As New System.Text.StringBuilder()  \nFor Each str As String In sortQuery  \n    sb.AppendLine(str)  \nNext  \n  \n' Display the results.  \nMsgBox(sb.ToString())  \n  \n' This code produces the following output:  \n  \n' fox  \n' the  \n' quick  \n' jumps  \n' brown  \n```  \n  \n## See also\n\n- <xref:System.Linq>\n- [Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)\n- [Order By Clause](../../../../visual-basic/language-reference/queries/order-by-clause.md)\n- [How to: Sort Query Results](../../../../visual-basic/programming-guide/language-features/linq/how-to-sort-query-results-by-using-linq.md)\n- [How to: Sort or Filter Text Data by Any Word or Field (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)\n","nodes":[{"pos":[4,109],"embed":true,"restype":"x-metadata","content":"title: \"Sorting Data (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 6f81065c-0c89-4bf3-a6d8-442273f8810e","nodes":[{"content":"Sorting Data (Visual Basic)","nodes":[{"pos":[0,27],"content":"Sorting Data (Visual Basic)","nodes":[{"content":"Sorting Data (Visual Basic)","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[116,143],"content":"Sorting Data (Visual Basic)","linkify":"Sorting Data (Visual Basic)","nodes":[{"content":"Sorting Data (Visual Basic)","pos":[0,27]}]},{"content":"A sorting operation orders the elements of a sequence based on one or more attributes.","pos":[144,230]},{"content":"The first sort criterion performs a primary sort on the elements.","pos":[231,296]},{"content":"By specifying a second sort criterion, you can sort the elements within each primary sort group.","pos":[297,393]},{"content":"The following illustration shows the results of an alphabetical sort operation on a sequence of characters.","pos":[400,507]},{"content":"Graphic that shows an alphabetical sort operation.","pos":[516,566]},{"content":"The standard query operator methods that sort data are listed in the following section.","pos":[628,715]},{"pos":[724,731],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method Name","pos":[738,749]},{"content":"Description","pos":[750,761]},{"content":"Visual Basic Query Expression Syntax","pos":[762,798]},{"content":"More Information","pos":[799,815]},{"content":"OrderBy","pos":[926,933]},{"content":"Sorts values in ascending order.","pos":[934,966]},{"content":"OrderByDescending","pos":[1133,1150]},{"content":"Sorts values in descending order.","pos":[1151,1184]},{"content":"ThenBy","pos":[1384,1390]},{"content":"Performs a secondary sort in ascending order.","pos":[1391,1436]},{"content":"ThenByDescending","pos":[1606,1622]},{"content":"Performs a secondary sort in descending order.","pos":[1623,1669]},{"content":"Reverse","pos":[1870,1877]},{"content":"Reverses the order of the elements in a collection.","pos":[1878,1929]},{"content":"Not applicable.","pos":[1930,1945]},{"pos":[2106,2138],"content":"Query Expression Syntax Examples","linkify":"Query Expression Syntax Examples","nodes":[{"content":"Query Expression Syntax Examples","pos":[0,32]}]},{"pos":[2148,2169],"content":"Primary Sort Examples","linkify":"Primary Sort Examples","nodes":[{"content":"Primary Sort Examples","pos":[0,21]}]},{"pos":[2180,2202],"content":"Primary Ascending Sort","linkify":"Primary Ascending Sort","nodes":[{"content":"Primary Ascending Sort","pos":[0,22]}]},{"pos":[2206,2359],"content":"The following example demonstrates how to use the <ph id=\"ph1\">`Order By`</ph> clause in a LINQ query to sort the strings in an array by string length, in ascending order.","source":"The following example demonstrates how to use the `Order By` clause in a LINQ query to sort the strings in an array by string length, in ascending order."},{"pos":[2820,2843],"content":"Primary Descending Sort","linkify":"Primary Descending Sort","nodes":[{"content":"Primary Descending Sort","pos":[0,23]}]},{"pos":[2847,3000],"content":"The next example demonstrates how to use the <ph id=\"ph1\">`Order By Descending`</ph> clause in a LINQ query to sort the strings by their first letter, in descending order.","source":"The next example demonstrates how to use the `Order By Descending` clause in a LINQ query to sort the strings by their first letter, in descending order."},{"pos":[3480,3503],"content":"Secondary Sort Examples","linkify":"Secondary Sort Examples","nodes":[{"content":"Secondary Sort Examples","pos":[0,23]}]},{"pos":[3514,3538],"content":"Secondary Ascending Sort","linkify":"Secondary Ascending Sort","nodes":[{"content":"Secondary Ascending Sort","pos":[0,24]}]},{"content":"The following example demonstrates how to use the <ph id=\"ph1\">`Order By`</ph> clause in a LINQ query to perform a primary and secondary sort of the strings in an array.","pos":[3542,3693],"source":"The following example demonstrates how to use the `Order By` clause in a LINQ query to perform a primary and secondary sort of the strings in an array."},{"content":"The strings are sorted primarily by length and secondarily by the first letter of the string, both in ascending order.","pos":[3694,3812]},{"pos":[4295,4320],"content":"Secondary Descending Sort","linkify":"Secondary Descending Sort","nodes":[{"content":"Secondary Descending Sort","pos":[0,25]}]},{"content":"The next example demonstrates how to use the <ph id=\"ph1\">`Order By Descending`</ph> clause in a LINQ query to perform a primary sort, in ascending order, and a secondary sort, in descending order.","pos":[4324,4503],"source":"The next example demonstrates how to use the `Order By Descending` clause in a LINQ query to perform a primary sort, in ascending order, and a secondary sort, in descending order."},{"content":"The strings are sorted primarily by length and secondarily by the first letter of the string.","pos":[4504,4597]},{"pos":[5089,5097],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5122,5267],"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>","source":"[Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)"},{"pos":[5270,5359],"content":"<bpt id=\"p1\">[</bpt>Order By Clause<ept id=\"p1\">](../../../../visual-basic/language-reference/queries/order-by-clause.md)</ept>","source":"[Order By Clause](../../../../visual-basic/language-reference/queries/order-by-clause.md)"},{"pos":[5362,5500],"content":"<bpt id=\"p1\">[</bpt>How to: Sort Query Results<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/linq/how-to-sort-query-results-by-using-linq.md)</ept>","source":"[How to: Sort Query Results](../../../../visual-basic/programming-guide/language-features/linq/how-to-sort-query-results-by-using-linq.md)"},{"pos":[5503,5699],"content":"<bpt id=\"p1\">[</bpt>How to: Sort or Filter Text Data by Any Word or Field (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)</ept>","source":"[How to: Sort or Filter Text Data by Any Word or Field (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)"}]}