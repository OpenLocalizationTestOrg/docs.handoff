<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b3cf059ea91d0c049ea41f217a5ec01a7825df6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\profiling\icorprofilerinfo2-getfunctioninfo2-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01708776ff8e9527fadaf4c0aa751963dc8e606a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">112554a28e563cf2f238c881e6a3a5df86230af5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ICorProfilerInfo2::GetFunctionInfo2 Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ICorProfilerInfo2::GetFunctionInfo2 Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Gets the parent class, the metadata token, and the <ph id="ph1">`ClassID`</ph> of each type argument, if present, of a function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>[in] The ID of the function for which to get the parent class and other information.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[in] A <ph id="ph1">`COR_PRF_FRAME_INFO`</ph> value that points to information about a stack frame.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>[out] A pointer to the parent class of the function.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[out] A pointer to the module in which the function's parent class is defined.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[out] A pointer to the metadata token for the function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>[in] The size of the <ph id="ph1">`typeArgs`</ph> array.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>[out] A pointer to the total number of <ph id="ph1">`ClassID`</ph> values.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[out] An array of <ph id="ph1">`ClassID`</ph> values, each of which is the ID of a type argument of the function.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When the method returns, <ph id="ph1">`typeArgs`</ph> will contain some or all of the <ph id="ph2">`ClassID`</ph> values.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The profiler code can call <bpt id="p1">[</bpt>ICorProfilerInfo::GetModuleMetaData<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getmodulemetadata-method.md)</ept> to obtain a <bpt id="p2">[</bpt>metadata<ept id="p2">](../../../../docs/framework/unmanaged-api/metadata/index.md)</ept> interface for a given module.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The metadata token that is returned to the location referenced by <ph id="ph1">`pToken`</ph> can then be used to access the metadata for the function.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The class ID and type arguments that are returned through the <ph id="ph1">`pClassId`</ph> and <ph id="ph2">`typeArgs`</ph> parameters depend on the value that is passed in the <ph id="ph3">`frameInfo`</ph> parameter, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Value of the <ph id="ph1">`frameInfo`</ph> parameter</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Result</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`COR_PRF_FRAME_INFO`</ph> value that was obtained from a <ph id="ph2">`FunctionEnter2`</ph> callback</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ClassID`</ph>, returned in the location referenced by <ph id="ph2">`pClassId`</ph>, and all type arguments, returned in the <ph id="ph3">`typeArgs`</ph> array, will be exact.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`COR_PRF_FRAME_INFO`</ph> that was obtained from a source other than a <ph id="ph2">`FunctionEnter2`</ph> callback</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The exact <ph id="ph1">`ClassID`</ph> and type arguments cannot be determined.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That is, the <ph id="ph1">`ClassID`</ph> might be null and some type arguments might come back as <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The exact <ph id="ph1">`ClassID`</ph> and type arguments cannot be determined.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>That is, the <ph id="ph1">`ClassID`</ph> might be null and some type arguments might come back as <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>After <ph id="ph1">`GetFunctionInfo2`</ph> returns, you must verify that the <ph id="ph2">`typeArgs`</ph> buffer was large enough to contain all the <ph id="ph3">`ClassID`</ph> values.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To do this, compare the value that <ph id="ph1">`pcTypeArgs`</ph> points to with the value of the <ph id="ph2">`cTypeArgs`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pcTypeArgs`</ph> points to a value that is larger than <ph id="ph2">`cTypeArgs`</ph> divided by the size of a <ph id="ph3">`ClassID`</ph> value, allocate a larger <ph id="ph4">`pcTypeArgs`</ph> buffer, update <ph id="ph5">`cTypeArgs`</ph> with the new, larger size, and call <ph id="ph6">`GetFunctionInfo2`</ph> again.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Alternatively, you can first call <ph id="ph1">`GetFunctionInfo2`</ph> with a zero-length <ph id="ph2">`pcTypeArgs`</ph> buffer to obtain the correct buffer size.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can then set the buffer size to the value returned in <ph id="ph1">`pcTypeArgs`</ph> divided by the size of a <ph id="ph2">`ClassID`</ph> value, and call <ph id="ph3">`GetFunctionInfo2`</ph> again.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> CorProf.idl, CorProf.h</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> CorGuids.lib</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept> <ph id="ph1">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorProfilerInfo Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ICorProfilerInfo2 Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Profiling Interfaces<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Profiling<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>