{"content":"---\ntitle: \"Retrieving Identity or Autonumber Values | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: d6b7f9cb-81be-44e1-bb94-56137954876d\ncaps.latest.revision: 7\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Retrieving Identity or Autonumber Values\nA primary key in a relational database is a column or combination of columns that always contain unique values. Knowing the primary key value allows you to locate the row that contains it. Relational database engines, such as SQL Server, Oracle, and Microsoft Access/Jet support the creation of automatically incrementing columns that can be designated as primary keys. These values are generated by the server as rows are added to a table. In SQL Server, you set the identity property of a column, in Oracle you create a Sequence, and in Microsoft Access you create an AutoNumber column.  \n  \n A <xref:System.Data.DataColumn> can also be used to generate automatically incrementing values by setting the <xref:System.Data.DataColumn.AutoIncrement%2A> property to true. However, you might end up with duplicate values in separate instances of a <xref:System.Data.DataTable>, if multiple client applications are independently generating automatically incrementing values. Having the server generate automatically incrementing values eliminates potential conflicts by allowing each user to retrieve the generated value for each inserted row.  \n  \n During a call to the `Update` method of a `DataAdapter`, the database can send data back to your ADO.NET application as output parameters or as the first returned record of the result set of a SELECT statement executed in the same batch as the INSERT statement. ADO.NET can retrieve these values and update the corresponding columns in the <xref:System.Data.DataRow> being updated.  \n  \n Some database engines, such as the Microsoft Access Jet database engine, do not support output parameters and cannot process multiple statements in a single batch. When working with the Jet database engine, you can retrieve the new AutoNumber value generated for an inserted row by executing a separate SELECT command in an event handler for the `RowUpdated` event of the `DataAdapter`.  \n  \n> [!NOTE]\n>  An alternative to using an auto incrementing value is to use the <xref:System.Guid.NewGuid%2A> method of a <xref:System.Guid> object to generate a GUID, or globally unique identifier, on the client computer that can be copied to the server as each new row is inserted. The `NewGuid` method generates a 16-byte binary value that is created using an algorithm that provides a high probability that no value will be duplicated. In a SQL Server database, a GUID is stored in a `uniqueidentifier` column which SQL Server can automatically generate using the Transact-SQL `NEWID()` function. Using a GUID as a primary key can adversely affect performance. [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] provides support for the `NEWSEQUENTIALID()` function, which generates a sequential GUID that is not guaranteed to be globally unique but that can be indexed more efficiently.  \n  \n## Retrieving SQL Server Identity Column Values  \n When working with Microsoft SQL Server, you can create a stored procedure with an output parameter to return the identity value for an inserted row. The following table describes the three Transact-SQL functions in SQL Server that can be used to retrieve identity column values.  \n  \n|Function|Description|  \n|--------------|-----------------|  \n|SCOPE_IDENTITY|Returns the last identity value within the current execution scope. SCOPE_IDENTITY is recommended for most scenarios.|  \n|@@IDENTITY|Contains the last identity value generated in any table in the current session. @@IDENTITY can be affected by triggers and may not return the identity value that you expect.|  \n|IDENT_CURRENT|Returns the last identity value generated for a specific table in any session and any scope.|  \n  \n The following stored procedure demonstrates how to insert a row into the **Categories** table and use an output parameter to return the new identity value generated by the Transact-SQL SCOPE_IDENTITY() function.  \n  \n```  \nCREATE PROCEDURE dbo.InsertCategory  \n  @CategoryName nvarchar(15),  \n  @Identity int OUT  \nAS  \nINSERT INTO Categories (CategoryName) VALUES(@CategoryName)  \nSET @Identity = SCOPE_IDENTITY()  \n```  \n  \n The stored procedure can then be specified as the source of the <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> of a <xref:System.Data.SqlClient.SqlDataAdapter> object. The <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> property of the <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> must be set to <xref:System.Data.CommandType>. The identity output is retrieved by creating a <xref:System.Data.SqlClient.SqlParameter> that has a <xref:System.Data.ParameterDirection> of <xref:System.Data.ParameterDirection>. When the `InsertCommand` is processed, the auto-incremented identity value is returned and placed in the **CategoryID** column of the current row if you set the <xref:System.Data.SqlClient.SqlCommand.UpdatedRowSource%2A> property of the insert command to `UpdateRowSource.OutputParameters` or to `UpdateRowSource.Both`.  \n  \n If your insert command executes a batch that includes both an INSERT statement and a SELECT statement that returns the new identity value, then you can retrieve the new value by setting the `UpdatedRowSource` property of the insert command to `UpdateRowSource.FirstReturnedRecord`.  \n  \n [!code-csharp[DataWorks SqlClient.RetrieveIdentityStoredProcedure#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.RetrieveIdentityStoredProcedure/CS/source.cs#1)]\n [!code-vb[DataWorks SqlClient.RetrieveIdentityStoredProcedure#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.RetrieveIdentityStoredProcedure/VB/source.vb#1)]  \n  \n## Merging New Identity Values  \n A common scenario is to call the `GetChanges` method of a `DataTable` to create a copy that contains only changed rows, and to use the new copy when calling the `Update` method of a `DataAdapter`. This is especially useful when you need to marshal the changed rows to a separate component that performs the update. Following the update, the copy can contain new identity values that must then be merged back into the original `DataTable`. The new identity values are likely to be different from the original values in the `DataTable`. To accomplish the merge, the original values of the **AutoIncrement** columns in the copy must be preserved, in order to be able to locate and update existing rows in the original `DataTable`, rather than appending new rows containing the new identity values. However, by default those original values are lost after a call to the `Update` method of a `DataAdapter`, because `AcceptChanges` is implicitly called for each updated `DataRow`.  \n  \n There are two ways to preserve the original values of a `DataColumn` in a `DataRow` during a `DataAdapter` update:  \n  \n-   The first method of preserving the original values is to set the `AcceptChangesDuringUpdate` property of the `DataAdapter` to `false`. This affects every `DataRow` in the `DataTable` being updated. For more information and a code example, see <xref:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate%2A>.  \n  \n-   The second method is to write code in the `RowUpdated` event handler of the `DataAdapter` to set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> to <xref:System.Data.UpdateStatus>. The `DataRow` is updated but the original value of each `DataColumn` is preserved. This method enables you to preserve the original values for some rows and not for others. For example, your code can preserve the original values for added rows and not for edited or deleted rows by first checking the <xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A> and then setting <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> to <xref:System.Data.UpdateStatus> only for rows with a `StatementType` of `Insert`.  \n  \n When either of these methods is used to preserve original values in a `DataRow` during a `DataAdapter` update, ADO.NET performs a series of actions to set the current values of the `DataRow` to new values returned by output parameters or by the first returned row of a result set, while still preserving the original value in each `DataColumn`. First, the `AcceptChanges` method of the `DataRow` is called to preserve the current values as original values, and then the new values are assigned. Following these actions, `DataRows` that had their <xref:System.Data.DataRow.RowState%2A> property set to <xref:System.Data.DataRowState> will have their `RowState` property set to <xref:System.Data.DataRowState>, which may be unexpected.  \n  \n How the command results are applied to each <xref:System.Data.DataRow> being updated is determined by the <xref:System.Data.Common.DbCommand.UpdatedRowSource%2A> property of each <xref:System.Data.Common.DbCommand>. This property is set to a value from the `UpdateRowSource` enumeration.  \n  \n The following table describes how the `UpdateRowSource` enumeration values affect the <xref:System.Data.DataRow.RowState%2A> property of updated rows.  \n  \n|Member name|Description|  \n|-----------------|-----------------|  \n|<xref:System.Data.UpdateRowSource>|`AcceptChanges` is called and both output parameter values and/or the values in the first row of any returned result set are placed in the `DataRow` being updated. If there are no values to apply, the `RowState` will be <xref:System.Data.DataRowState>.|  \n|<xref:System.Data.UpdateRowSource>|If a row was returned, `AcceptChanges` is called and the row is mapped to the changed row in the `DataTable`, setting the `RowState` to `Modified`. If no row is returned, then `AcceptChanges` is not called and the `RowState` remains `Added`.|  \n|<xref:System.Data.UpdateRowSource>|Any returned parameters or rows are ignored. There is no call to `AcceptChanges` and the `RowState` remains `Added`.|  \n|<xref:System.Data.UpdateRowSource>|`AcceptChanges` is called and any output parameters are mapped to the changed row in the `DataTable`, setting the `RowState` to `Modified`. If there are no output parameters, the `RowState` will be `Unchanged`.|  \n  \n### Example  \n This example demonstrates extracting changed rows from a `DataTable` and using a <xref:System.Data.SqlClient.SqlDataAdapter> to update the data source and retrieve a new identity column value. The <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> executes two Transact-SQL statements; the first one is the INSERT statement, and the second one is a SELECT statement that uses the SCOPE_IDENTITY function to retrieve the identity value.  \n  \n```  \nINSERT INTO dbo.Shippers (CompanyName)   \nVALUES (@CompanyName);  \nSELECT ShipperID, CompanyName FROM dbo.Shippers   \nWHERE ShipperID = SCOPE_IDENTITY();  \n```  \n  \n The `UpdatedRowSource` property of the insert command is set to `UpdateRowSource.FirstReturnedRow` and the <xref:System.Data.MissingSchemaAction> property of the `DataAdapter` is set to `MissingSchemaAction.AddWithKey`. The `DataTable` is filled and the code adds a new row to the `DataTable`. The changed rows are then extracted into a new `DataTable`, which is passed to the `DataAdapter`, which then updates the server.  \n  \n [!code-csharp[DataWorks SqlClient.MergeIdentity#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/CS/source.cs#1)]\n [!code-vb[DataWorks SqlClient.MergeIdentity#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/VB/source.vb#1)]  \n  \n The `OnRowUpdated` event handler checks the <xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A> of the <xref:System.Data.SqlClient.SqlRowUpdatedEventArgs> to determine if the row is an insert. If it is, then the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property is set to <xref:System.Data.UpdateStatus>. The row is updated, but the original values in the row are preserved. In the main body of the procedure, the <xref:System.Data.DataSet.Merge%2A> method is called to merge the new identity value into the original `DataTable`, and finally `AcceptChanges` is called.  \n  \n [!code-csharp[DataWorks SqlClient.MergeIdentity#2](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/CS/source.cs#2)]\n [!code-vb[DataWorks SqlClient.MergeIdentity#2](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/VB/source.vb#2)]  \n  \n## Retrieving Microsoft Access Autonumber Values  \n This section includes a sample that shows how to retrieve `Autonumber` values from a Jet 4.0 database. The Jet database engine does not support the execution of multiple statements in a batch or the use of output parameters, so it is not possible to use either of these techniques to return the new `Autonumber` value assigned to an inserted row. However, you can add code to the `RowUpdated` event handler that executes a separate SELECT @@IDENTITY statement to retrieve the new `Autonumber` value.  \n  \n### Example  \n Instead of adding schema information using `MissingSchemaAction.AddWithKey`, this example configures a `DataTable` with the correct schema prior to calling the <xref:System.Data.OleDb.OleDbDataAdapter> to fill the `DataTable`. In this case, the **CategoryID** column is configured to decrement the value assigned each inserted row starting from zero, by setting <xref:System.Data.DataColumn.AutoIncrement%2A> to `true`, <xref:System.Data.DataColumn.AutoIncrementSeed%2A> to 0, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> to -1. The code then adds two new rows and uses `GetChanges` to add the changed rows to a new `DataTable` that is passed to the `Update` method.  \n  \n [!code-csharp[DataWorks OleDb.JetAutonumberMerge#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/CS/source.cs#1)]\n [!code-vb[DataWorks OleDb.JetAutonumberMerge#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/VB/source.vb#1)]  \n  \n The `RowUpdated` event handler uses the same open <xref:System.Data.OleDb.OleDbConnection> as the `Update` statement of the `OleDbDataAdapter`. It checks the `StatementType` of the <xref:System.Data.OleDb.OleDbRowUpdatedEventArgs> for inserted rows. For each inserted row a new <xref:System.Data.OleDb.OleDbCommand> is created to execute the SELECT @@IDENTITY statement on the connection, returning the new `Autonumber` value, which is placed in the **CategoryID** column of the `DataRow`. The `Status` property is then set to `UpdateStatus.SkipCurrentRow` to suppress the hidden call to `AcceptChanges`. In the main body of the procedure, the `Merge` method is called to merge the two `DataTable` objects, and finally `AcceptChanges` is called.  \n  \n [!code-csharp[DataWorks OleDb.JetAutonumberMerge#2](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/CS/source.cs#2)]\n [!code-vb[DataWorks OleDb.JetAutonumberMerge#2](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/VB/source.vb#2)]  \n  \n### Retrieving Identity Values  \n We often set the column as identity when the values in the column must be unique. And sometimes we need the identity value of new data. This sample demonstrates how to retrieve identity values:  \n  \n-   Creates a stored procedure to insert data and return an identity value.  \n  \n-   Executes a command to insert the new data and display the result.  \n  \n-   Uses <xref:System.Data.SqlClient.SqlDataAdapter> to insert new data and display the result.  \n  \n Before you compile and run the sample, you must create the sample database, using the following script:  \n  \n```  \nUSE [master]  \nGO  \n  \nCREATE DATABASE [MySchool]  \nGO  \n  \nUSE [MySchool]  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE procedure [dbo].[CourseExtInfo] @CourseId int  \nas  \nselect c.CourseID,c.Title,c.Credits,d.Name as DepartmentName  \nfrom Course as c left outer join Department as d on c.DepartmentID=d.DepartmentID  \nwhere c.CourseID=@CourseId  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \ncreate procedure [dbo].[DepartmentInfo] @DepartmentId int,@CourseCount int output  \nas  \nselect @CourseCount=Count(c.CourseID)  \nfrom course as c  \nwhere c.DepartmentID=@DepartmentId  \n  \nselect d.DepartmentID,d.Name,d.Budget,d.StartDate,d.Administrator  \nfrom Department as d  \nwhere d.DepartmentID=@DepartmentId  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCreate PROCEDURE [dbo].[GetDepartmentsOfSpecifiedYear]   \n@Year int,@BudgetSum money output  \nAS  \nBEGIN  \n        SELECT @BudgetSum=SUM([Budget])  \n  FROM [MySchool].[dbo].[Department]  \n  Where YEAR([StartDate])=@Year   \n  \nSELECT [DepartmentID]  \n      ,[Name]  \n      ,[Budget]  \n      ,[StartDate]  \n      ,[Administrator]  \n  FROM [MySchool].[dbo].[Department]  \n  Where YEAR([StartDate])=@Year  \n  \nEND  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE PROCEDURE [dbo].[GradeOfStudent]   \n-- Add the parameters for the stored procedure here  \n@CourseTitle nvarchar(100),@FirstName nvarchar(50),  \n@LastName nvarchar(50),@Grade decimal(3,2) output  \nAS  \nBEGIN  \nselect @Grade=Max(Grade)  \nfrom [dbo].[StudentGrade] as s join [dbo].[Course] as c on   \ns.CourseID=c.CourseID join [dbo].[Person] as p on s.StudentID=p.PersonID  \nwhere c.Title=@CourseTitle and p.FirstName=@FirstName   \nand p.LastName= @LastName  \nEND  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE PROCEDURE [dbo].[InsertPerson]   \n-- Add the parameters for the stored procedure here  \n@FirstName nvarchar(50),@LastName nvarchar(50),  \n@PersonID int output  \nAS  \nBEGIN  \n    insert [dbo].[Person](LastName,FirstName) Values(@LastName,@FirstName)  \n  \n    set @PersonID=SCOPE_IDENTITY()  \nEND  \nGo  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  \n[Year] [smallint] NOT NULL,  \n[Title] [nvarchar](100) NOT NULL,  \n[Credits] [int] NOT NULL,  \n[DepartmentID] [int] NOT NULL,  \n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \n(  \n[CourseID] ASC,  \n[Year] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  \n[Name] [nvarchar](50) NOT NULL,  \n[Budget] [money] NOT NULL,  \n[StartDate] [datetime] NOT NULL,  \n[Administrator] [int] NULL,  \n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \n(  \n[DepartmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nSET ANSI_PADDING ON  \nGO  \nCREATE TABLE [dbo].[Person]([PersonID] [int] IDENTITY(1,1) NOT NULL,  \n[LastName] [nvarchar](50) NOT NULL,  \n[FirstName] [nvarchar](50) NOT NULL,  \n[HireDate] [datetime] NULL,  \n[EnrollmentDate] [datetime] NULL,  \n[Picture] [varbinary](max) NULL,  \n CONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED   \n(  \n[PersonID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[StudentGrade]([EnrollmentID] [int] IDENTITY(1,1) NOT NULL,  \n[CourseID] [nvarchar](10) NOT NULL,  \n[StudentID] [int] NOT NULL,  \n[Grade] [decimal](3, 2) NOT NULL,  \n CONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED   \n(  \n[EnrollmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \ncreate view [dbo].[EnglishCourse]  \nas  \nselect c.CourseID,c.Title,c.Credits,c.DepartmentID  \nfrom Course as c join Department as d on c.DepartmentID=d.DepartmentID  \nwhere d.Name=N'English'  \n  \nGO  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  \nSET IDENTITY_INSERT [dbo].[Department] ON   \n  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \nSET IDENTITY_INSERT [dbo].[Department] OFF  \nSET IDENTITY_INSERT [dbo].[Person] ON   \n  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (1, N'Hu', N'Nan', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (2, N'Norman', N'Laura', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (3, N'Olivotto', N'Nino', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (4, N'Anand', N'Arturo', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (5, N'Jai', N'Damien', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (6, N'Holt', N'Roger', CAST(0x000097F100000000 AS DateTime), NULL)  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (7, N'Martin', N'Randall', CAST(0x00008B1A00000000 AS DateTime), NULL)  \nSET IDENTITY_INSERT [dbo].[Person] OFF  \nSET IDENTITY_INSERT [dbo].[StudentGrade] ON   \n  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (1, N'C1045', 1, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (2, N'C1045', 2, CAST(3.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (3, N'C1045', 3, CAST(2.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (4, N'C1045', 4, CAST(4.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (5, N'C1045', 5, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (6, N'C1061', 1, CAST(4.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (7, N'C1061', 3, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (8, N'C1061', 4, CAST(2.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (9, N'C1061', 5, CAST(1.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (10, N'C2021', 1, CAST(2.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (11, N'C2021', 2, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (12, N'C2021', 4, CAST(3.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (13, N'C2021', 5, CAST(3.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (14, N'C2042', 1, CAST(2.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (15, N'C2042', 2, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (16, N'C2042', 3, CAST(4.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (17, N'C2042', 5, CAST(3.00 AS Decimal(3, 2)))  \nSET IDENTITY_INSERT [dbo].[StudentGrade] OFF  \nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \nREFERENCES [dbo].[Department] ([DepartmentID])  \nGO  \nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \nGO  \nALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  CONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])  \nREFERENCES [dbo].[Person] ([PersonID])  \nGO  \nALTER TABLE [dbo].[StudentGrade] CHECK CONSTRAINT [FK_StudentGrade_Student]  \nGO  \n```  \n  \n The code listing follows:  \n  \n> [!IMPORTANT]\n>  The code listing refers to an Access database file called MySchool.mdb. You can download MySchool.mdb (as part of the full C# or Visual Basic sample project) from either the [Visual Studio 2012 sample](http://code.msdn.microsoft.com/How-to-retrieve-the-95b4ee43) or the [Visual Studio 2013 sample](http://code.msdn.microsoft.com/How-to-Retrieve-the-511acece).  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.Data.OleDb;  \nusing System.Data.SqlClient;  \n  \nclass Program {  \n   static void Main(string[] args) {  \n      String SqlDbConnectionString = \"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;\";  \n  \n      InsertPerson(SqlDbConnectionString, \"Janice\", \"Galvin\");  \n      Console.WriteLine();  \n  \n      InsertPersonInAdapter(SqlDbConnectionString, \"Peter\", \"Krebs\");  \n      Console.WriteLine();  \n  \n      String oledbConnectionString = \"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=Database\\\\MySchool.mdb\";  \n      InsertPersonInJet4Database(oledbConnectionString, \"Janice\", \"Galvin\");  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Please press any key to exit.....\");  \n      Console.ReadKey();  \n   }  \n  \n   // Using stored procedure to insert a new row and retrieve the identity value  \n   static void InsertPerson(String connectionString, String firstName, String lastName) {  \n      String commandText = \"dbo.InsertPerson\";  \n  \n      using (SqlConnection conn = new SqlConnection(connectionString)) {  \n         using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  \n            cmd.CommandType = CommandType.StoredProcedure;  \n  \n            cmd.Parameters.Add(new SqlParameter(\"@FirstName\", firstName));  \n            cmd.Parameters.Add(new SqlParameter(\"@LastName\", lastName));  \n            SqlParameter personId = new SqlParameter(\"@PersonID\", SqlDbType.Int);  \n            personId.Direction = ParameterDirection.Output;  \n            cmd.Parameters.Add(personId);  \n  \n            conn.Open();  \n            cmd.ExecuteNonQuery();  \n  \n            Console.WriteLine(\"Person Id of new person:{0}\", personId.Value);  \n         }  \n      }  \n   }  \n  \n   // Using stored procedure in adapter to insert new rows and update the identity value.  \n   static void InsertPersonInAdapter(String connectionString, String firstName, String lastName) {  \n      String commandText = \"dbo.InsertPerson\";  \n      using (SqlConnection conn = new SqlConnection(connectionString)) {  \n         SqlDataAdapter mySchool = new SqlDataAdapter(\"Select PersonID,FirstName,LastName from [dbo].[Person]\", conn);  \n  \n         mySchool.InsertCommand = new SqlCommand(commandText, conn);  \n         mySchool.InsertCommand.CommandType = CommandType.StoredProcedure;  \n  \n         mySchool.InsertCommand.Parameters.Add(  \n             new SqlParameter(\"@FirstName\", SqlDbType.NVarChar, 50, \"FirstName\"));  \n         mySchool.InsertCommand.Parameters.Add(  \n             new SqlParameter(\"@LastName\", SqlDbType.NVarChar, 50, \"LastName\"));  \n  \n         SqlParameter personId = mySchool.InsertCommand.Parameters.Add(new SqlParameter(\"@PersonID\", SqlDbType.Int, 0, \"PersonID\"));  \n         personId.Direction = ParameterDirection.Output;  \n  \n         DataTable persons = new DataTable();  \n         mySchool.Fill(persons);  \n  \n         DataRow newPerson = persons.NewRow();  \n         newPerson[\"FirstName\"] = firstName;  \n         newPerson[\"LastName\"] = lastName;  \n         persons.Rows.Add(newPerson);  \n  \n         mySchool.Update(persons);  \n         Console.WriteLine(\"Show all persons:\");  \n         ShowDataTable(persons, 14);  \n      }  \n   }  \n  \n   /// For a Jet 4.0 database, we need use the sigle statement and event handler to insert new rows and retrieve the identity value.  \n   static void InsertPersonInJet4Database(String connectionString, String firstName, String lastName) {  \n      String commandText = \"Insert into Person(FirstName,LastName) Values(?,?)\";  \n      using (OleDbConnection conn = new OleDbConnection(connectionString)) {  \n         OleDbDataAdapter mySchool = new OleDbDataAdapter(\"Select PersonID,FirstName,LastName from Person\", conn);  \n  \n         // Create Insert Command  \n         mySchool.InsertCommand = new OleDbCommand(commandText, conn);  \n         mySchool.InsertCommand.CommandType = CommandType.Text;  \n  \n         mySchool.InsertCommand.Parameters.Add(new OleDbParameter(\"@FirstName\", OleDbType.VarChar, 50, \"FirstName\"));  \n         mySchool.InsertCommand.Parameters.Add(new OleDbParameter(\"@LastName\", OleDbType.VarChar, 50, \"LastName\"));  \n         mySchool.InsertCommand.UpdatedRowSource = UpdateRowSource.Both;  \n  \n         DataTable persons = CreatePersonsTable();  \n  \n         mySchool.Fill(persons);  \n  \n         DataRow newPerson = persons.NewRow();  \n         newPerson[\"FirstName\"] = firstName;  \n         newPerson[\"LastName\"] = lastName;  \n         persons.Rows.Add(newPerson);  \n  \n         DataTable dataChanges = persons.GetChanges();  \n  \n         mySchool.RowUpdated += OnRowUpdated;  \n  \n         mySchool.Update(dataChanges);  \n  \n         Console.WriteLine(\"Data before merging:\");  \n         ShowDataTable(persons, 14);  \n         Console.WriteLine();  \n  \n         persons.Merge(dataChanges);  \n         persons.AcceptChanges();  \n  \n         Console.WriteLine(\"Data after merging\");  \n         ShowDataTable(persons, 14);  \n      }  \n   }  \n  \n   static void OnRowUpdated(object sender, OleDbRowUpdatedEventArgs e) {  \n      if (e.StatementType == StatementType.Insert) {  \n         // Retrieve the identity value  \n         OleDbCommand cmdNewId = new OleDbCommand(\"Select @@IDENTITY\", e.Command.Connection);  \n         e.Row[\"PersonID\"] = (Int32)cmdNewId.ExecuteScalar();  \n  \n         // After the status is changed, the original values in the row are preserved. And the   \n         // Merge method will be called to merge the new identity value into the original DataTable.  \n         e.Status = UpdateStatus.SkipCurrentRow;  \n      }  \n   }  \n  \n   // Create the Persons table before filling.  \n   private static DataTable CreatePersonsTable() {  \n      DataTable persons = new DataTable();  \n  \n      DataColumn personId = new DataColumn();  \n      personId.DataType = Type.GetType(\"System.Int32\");  \n      personId.ColumnName = \"PersonID\";  \n      personId.AutoIncrement = true;  \n      personId.AutoIncrementSeed = 0;  \n      personId.AutoIncrementStep = -1;  \n      persons.Columns.Add(personId);  \n  \n      DataColumn firstName = new DataColumn();  \n      firstName.DataType = Type.GetType(\"System.String\");  \n      firstName.ColumnName = \"FirstName\";  \n      persons.Columns.Add(firstName);  \n  \n      DataColumn lastName = new DataColumn();  \n      lastName.DataType = Type.GetType(\"System.String\");  \n      lastName.ColumnName = \"LastName\";  \n      persons.Columns.Add(lastName);  \n  \n      DataColumn[] pkey = { personId };  \n      persons.PrimaryKey = pkey;  \n  \n      return persons;  \n   }  \n  \n   private static void ShowDataTable(DataTable table, Int32 length) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(\"{0,-\" + length + \"}\", col.ColumnName);  \n      }  \n      Console.WriteLine();  \n  \n      foreach (DataRow row in table.Rows) {  \n         foreach (DataColumn col in table.Columns) {  \n            if (col.DataType.Equals(typeof(DateTime)))  \n               Console.Write(\"{0,-\" + length + \":d}\", row[col]);  \n            else if (col.DataType.Equals(typeof(Decimal)))   \n               Console.Write(\"{0,-\" + length + \":C}\", row[col]);  \n            else  \n               Console.Write(\"{0,-\" + length + \"}\", row[col]);  \n         }  \n  \n         Console.WriteLine();  \n      }  \n   }  \n}  \n```  \n  \n## See Also  \n [Retrieving and Modifying Data in ADO.NET](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)   \n [DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)   \n [Row States and Row Versions](../../../../docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)   \n [AcceptChanges and RejectChanges](../../../../docs/framework/data/adonet/dataset-datatable-dataview/acceptchanges-and-rejectchanges.md)   \n [Merging DataSet Contents](../../../../docs/framework/data/adonet/dataset-datatable-dataview/merging-dataset-contents.md)   \n [Updating Data Sources with DataAdapters](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[4,371],"nodes":[{"content":"Retrieving Identity or Autonumber Values | Microsoft Docs","nodes":[{"pos":[0,57],"content":"Retrieving Identity or Autonumber Values | Microsoft Docs","nodes":[{"content":"Retrieving Identity or Autonumber Values | Microsoft Docs","pos":[0,57]}]}],"pos":[6,66],"yaml":true}],"content":"title: \"Retrieving Identity or Autonumber Values | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: d6b7f9cb-81be-44e1-bb94-56137954876d\ncaps.latest.revision: 7\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","yamlblock":true},{"pos":[378,418],"content":"Retrieving Identity or Autonumber Values","linkify":"Retrieving Identity or Autonumber Values","nodes":[{"content":"Retrieving Identity or Autonumber Values","pos":[0,40]}]},{"content":"A primary key in a relational database is a column or combination of columns that always contain unique values.","pos":[419,530]},{"content":"Knowing the primary key value allows you to locate the row that contains it.","pos":[531,607]},{"content":"Relational database engines, such as SQL Server, Oracle, and Microsoft Access/Jet support the creation of automatically incrementing columns that can be designated as primary keys.","pos":[608,788]},{"content":"These values are generated by the server as rows are added to a table.","pos":[789,859]},{"content":"In SQL Server, you set the identity property of a column, in Oracle you create a Sequence, and in Microsoft Access you create an AutoNumber column.","pos":[860,1007]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Data.DataColumn&gt;</ph> can also be used to generate automatically incrementing values by setting the <ph id=\"ph2\">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> property to true.","pos":[1014,1188],"source":"A <xref:System.Data.DataColumn> can also be used to generate automatically incrementing values by setting the <xref:System.Data.DataColumn.AutoIncrement%2A> property to true."},{"content":"However, you might end up with duplicate values in separate instances of a <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph>, if multiple client applications are independently generating automatically incrementing values.","pos":[1189,1389],"source":" However, you might end up with duplicate values in separate instances of a <xref:System.Data.DataTable>, if multiple client applications are independently generating automatically incrementing values."},{"content":"Having the server generate automatically incrementing values eliminates potential conflicts by allowing each user to retrieve the generated value for each inserted row.","pos":[1390,1558]},{"content":"During a call to the <ph id=\"ph1\">`Update`</ph> method of a <ph id=\"ph2\">`DataAdapter`</ph>, the database can send data back to your ADO.NET application as output parameters or as the first returned record of the result set of a SELECT statement executed in the same batch as the INSERT statement.","pos":[1565,1826],"source":"During a call to the `Update` method of a `DataAdapter`, the database can send data back to your ADO.NET application as output parameters or as the first returned record of the result set of a SELECT statement executed in the same batch as the INSERT statement."},{"content":"ADO.NET can retrieve these values and update the corresponding columns in the <ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph> being updated.","pos":[1827,1946],"source":" ADO.NET can retrieve these values and update the corresponding columns in the <xref:System.Data.DataRow> being updated."},{"content":"Some database engines, such as the Microsoft Access Jet database engine, do not support output parameters and cannot process multiple statements in a single batch.","pos":[1953,2116]},{"content":"When working with the Jet database engine, you can retrieve the new AutoNumber value generated for an inserted row by executing a separate SELECT command in an event handler for the <ph id=\"ph1\">`RowUpdated`</ph> event of the <ph id=\"ph2\">`DataAdapter`</ph>.","pos":[2117,2339],"source":" When working with the Jet database engine, you can retrieve the new AutoNumber value generated for an inserted row by executing a separate SELECT command in an event handler for the `RowUpdated` event of the `DataAdapter`."},{"pos":[2347,3247],"content":"[!NOTE]\n An alternative to using an auto incrementing value is to use the <xref:System.Guid.NewGuid%2A> method of a <xref:System.Guid> object to generate a GUID, or globally unique identifier, on the client computer that can be copied to the server as each new row is inserted. The `NewGuid` method generates a 16-byte binary value that is created using an algorithm that provides a high probability that no value will be duplicated. In a SQL Server database, a GUID is stored in a `uniqueidentifier` column which SQL Server can automatically generate using the Transact-SQL `NEWID()` function. Using a GUID as a primary key can adversely affect performance. [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] provides support for the `NEWSEQUENTIALID()` function, which generates a sequential GUID that is not guaranteed to be globally unique but that can be indexed more efficiently.","leadings":["","> "],"nodes":[{"content":"An alternative to using an auto incrementing value is to use the <xref:System.Guid.NewGuid%2A> method of a <xref:System.Guid> object to generate a GUID, or globally unique identifier, on the client computer that can be copied to the server as each new row is inserted. The `NewGuid` method generates a 16-byte binary value that is created using an algorithm that provides a high probability that no value will be duplicated. In a SQL Server database, a GUID is stored in a `uniqueidentifier` column which SQL Server can automatically generate using the Transact-SQL `NEWID()` function. Using a GUID as a primary key can adversely affect performance. [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] provides support for the `NEWSEQUENTIALID()` function, which generates a sequential GUID that is not guaranteed to be globally unique but that can be indexed more efficiently.","pos":[9,898],"nodes":[{"content":"An alternative to using an auto incrementing value is to use the <ph id=\"ph1\">&lt;xref:System.Guid.NewGuid%2A&gt;</ph> method of a <ph id=\"ph2\">&lt;xref:System.Guid&gt;</ph> object to generate a GUID, or globally unique identifier, on the client computer that can be copied to the server as each new row is inserted.","pos":[0,268],"source":"An alternative to using an auto incrementing value is to use the <xref:System.Guid.NewGuid%2A> method of a <xref:System.Guid> object to generate a GUID, or globally unique identifier, on the client computer that can be copied to the server as each new row is inserted."},{"content":"The <ph id=\"ph1\">`NewGuid`</ph> method generates a 16-byte binary value that is created using an algorithm that provides a high probability that no value will be duplicated.","pos":[269,424],"source":" The `NewGuid` method generates a 16-byte binary value that is created using an algorithm that provides a high probability that no value will be duplicated."},{"content":"In a SQL Server database, a GUID is stored in a <ph id=\"ph1\">`uniqueidentifier`</ph> column which SQL Server can automatically generate using the Transact-SQL <ph id=\"ph2\">`NEWID()`</ph> function.","pos":[425,585],"source":" In a SQL Server database, a GUID is stored in a `uniqueidentifier` column which SQL Server can automatically generate using the Transact-SQL `NEWID()` function."},{"content":"Using a GUID as a primary key can adversely affect performance.","pos":[586,649]},{"content":"<ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> provides support for the <ph id=\"ph2\">`NEWSEQUENTIALID()`</ph> function, which generates a sequential GUID that is not guaranteed to be globally unique but that can be indexed more efficiently.","pos":[650,889],"source":"[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] provides support for the `NEWSEQUENTIALID()` function, which generates a sequential GUID that is not guaranteed to be globally unique but that can be indexed more efficiently."}]}]},{"pos":[3256,3300],"content":"Retrieving SQL Server Identity Column Values","linkify":"Retrieving SQL Server Identity Column Values","nodes":[{"content":"Retrieving SQL Server Identity Column Values","pos":[0,44]}]},{"content":"When working with Microsoft SQL Server, you can create a stored procedure with an output parameter to return the identity value for an inserted row.","pos":[3304,3452]},{"content":"The following table describes the three Transact-SQL functions in SQL Server that can be used to retrieve identity column values.","pos":[3453,3582]},{"content":"Function","pos":[3589,3597]},{"content":"Description","pos":[3598,3609]},{"content":"SCOPE_IDENTITY","pos":[3651,3665]},{"content":"Returns the last identity value within the current execution scope.","pos":[3666,3733]},{"content":"SCOPE_IDENTITY is recommended for most scenarios.","pos":[3734,3783]},{"content":"@<ph id=\"ph1\">@IDENTITY</ph>","pos":[3788,3798],"source":"@@IDENTITY"},{"content":"Contains the last identity value generated in any table in the current session.","pos":[3799,3878]},{"content":"@<ph id=\"ph1\">@IDENTITY</ph> can be affected by triggers and may not return the identity value that you expect.","pos":[3879,3972],"source":" @@IDENTITY can be affected by triggers and may not return the identity value that you expect."},{"content":"IDENT_CURRENT","pos":[3977,3990]},{"content":"Returns the last identity value generated for a specific table in any session and any scope.","pos":[3991,4083]},{"pos":[4091,4302],"content":"The following stored procedure demonstrates how to insert a row into the <bpt id=\"p1\">**</bpt>Categories<ept id=\"p1\">**</ept> table and use an output parameter to return the new identity value generated by the Transact-SQL SCOPE_IDENTITY() function.","source":"The following stored procedure demonstrates how to insert a row into the **Categories** table and use an output parameter to return the new identity value generated by the Transact-SQL SCOPE_IDENTITY() function."},{"content":"The stored procedure can then be specified as the source of the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A&gt;</ph> of a <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> object.","pos":[4518,4699],"source":"The stored procedure can then be specified as the source of the <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> of a <xref:System.Data.SqlClient.SqlDataAdapter> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlCommand.CommandType%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A&gt;</ph> must be set to <ph id=\"ph3\">&lt;xref:System.Data.CommandType&gt;</ph>.","pos":[4700,4882],"source":" The <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> property of the <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> must be set to <xref:System.Data.CommandType>."},{"content":"The identity output is retrieved by creating a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> that has a <ph id=\"ph2\">&lt;xref:System.Data.ParameterDirection&gt;</ph> of <ph id=\"ph3\">&lt;xref:System.Data.ParameterDirection&gt;</ph>.","pos":[4883,5062],"source":" The identity output is retrieved by creating a <xref:System.Data.SqlClient.SqlParameter> that has a <xref:System.Data.ParameterDirection> of <xref:System.Data.ParameterDirection>."},{"content":"When the <ph id=\"ph1\">`InsertCommand`</ph> is processed, the auto-incremented identity value is returned and placed in the <bpt id=\"p1\">**</bpt>CategoryID<ept id=\"p1\">**</ept> column of the current row if you set the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlCommand.UpdatedRowSource%2A&gt;</ph> property of the insert command to <ph id=\"ph3\">`UpdateRowSource.OutputParameters`</ph> or to <ph id=\"ph4\">`UpdateRowSource.Both`</ph>.","pos":[5063,5382],"source":" When the `InsertCommand` is processed, the auto-incremented identity value is returned and placed in the **CategoryID** column of the current row if you set the <xref:System.Data.SqlClient.SqlCommand.UpdatedRowSource%2A> property of the insert command to `UpdateRowSource.OutputParameters` or to `UpdateRowSource.Both`."},{"pos":[5389,5670],"content":"If your insert command executes a batch that includes both an INSERT statement and a SELECT statement that returns the new identity value, then you can retrieve the new value by setting the <ph id=\"ph1\">`UpdatedRowSource`</ph> property of the insert command to <ph id=\"ph2\">`UpdateRowSource.FirstReturnedRecord`</ph>.","source":"If your insert command executes a batch that includes both an INSERT statement and a SELECT statement that returns the new identity value, then you can retrieve the new value by setting the `UpdatedRowSource` property of the insert command to `UpdateRowSource.FirstReturnedRecord`."},{"pos":[5677,6066],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DataWorks SqlClient.RetrieveIdentityStoredProcedure#1<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.RetrieveIdentityStoredProcedure/CS/source.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DataWorks SqlClient.RetrieveIdentityStoredProcedure#1<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.RetrieveIdentityStoredProcedure/VB/source.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DataWorks SqlClient.RetrieveIdentityStoredProcedure#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.RetrieveIdentityStoredProcedure/CS/source.cs#1)]\n [!code-vb[DataWorks SqlClient.RetrieveIdentityStoredProcedure#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.RetrieveIdentityStoredProcedure/VB/source.vb#1)]"},{"pos":[6075,6102],"content":"Merging New Identity Values","linkify":"Merging New Identity Values","nodes":[{"content":"Merging New Identity Values","pos":[0,27]}]},{"content":"A common scenario is to call the <ph id=\"ph1\">`GetChanges`</ph> method of a <ph id=\"ph2\">`DataTable`</ph> to create a copy that contains only changed rows, and to use the new copy when calling the <ph id=\"ph3\">`Update`</ph> method of a <ph id=\"ph4\">`DataAdapter`</ph>.","pos":[6106,6302],"source":"A common scenario is to call the `GetChanges` method of a `DataTable` to create a copy that contains only changed rows, and to use the new copy when calling the `Update` method of a `DataAdapter`."},{"content":"This is especially useful when you need to marshal the changed rows to a separate component that performs the update.","pos":[6303,6420]},{"content":"Following the update, the copy can contain new identity values that must then be merged back into the original <ph id=\"ph1\">`DataTable`</ph>.","pos":[6421,6544],"source":" Following the update, the copy can contain new identity values that must then be merged back into the original `DataTable`."},{"content":"The new identity values are likely to be different from the original values in the <ph id=\"ph1\">`DataTable`</ph>.","pos":[6545,6640],"source":" The new identity values are likely to be different from the original values in the `DataTable`."},{"content":"To accomplish the merge, the original values of the <bpt id=\"p1\">**</bpt>AutoIncrement<ept id=\"p1\">**</ept> columns in the copy must be preserved, in order to be able to locate and update existing rows in the original <ph id=\"ph1\">`DataTable`</ph>, rather than appending new rows containing the new identity values.","pos":[6641,6900],"source":" To accomplish the merge, the original values of the **AutoIncrement** columns in the copy must be preserved, in order to be able to locate and update existing rows in the original `DataTable`, rather than appending new rows containing the new identity values."},{"content":"However, by default those original values are lost after a call to the <ph id=\"ph1\">`Update`</ph> method of a <ph id=\"ph2\">`DataAdapter`</ph>, because <ph id=\"ph3\">`AcceptChanges`</ph> is implicitly called for each updated <ph id=\"ph4\">`DataRow`</ph>.","pos":[6901,7080],"source":" However, by default those original values are lost after a call to the `Update` method of a `DataAdapter`, because `AcceptChanges` is implicitly called for each updated `DataRow`."},{"pos":[7087,7201],"content":"There are two ways to preserve the original values of a <ph id=\"ph1\">`DataColumn`</ph> in a <ph id=\"ph2\">`DataRow`</ph> during a <ph id=\"ph3\">`DataAdapter`</ph> update:","source":"There are two ways to preserve the original values of a `DataColumn` in a `DataRow` during a `DataAdapter` update:"},{"content":"The first method of preserving the original values is to set the <ph id=\"ph1\">`AcceptChangesDuringUpdate`</ph> property of the <ph id=\"ph2\">`DataAdapter`</ph> to <ph id=\"ph3\">`false`</ph>.","pos":[7211,7345],"source":"The first method of preserving the original values is to set the `AcceptChangesDuringUpdate` property of the `DataAdapter` to `false`."},{"content":"This affects every <ph id=\"ph1\">`DataRow`</ph> in the <ph id=\"ph2\">`DataTable`</ph> being updated.","pos":[7346,7408],"source":" This affects every `DataRow` in the `DataTable` being updated."},{"content":"For more information and a code example, see <ph id=\"ph1\">&lt;xref:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate%2A&gt;</ph>.","pos":[7409,7521],"source":" For more information and a code example, see <xref:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate%2A>."},{"content":"The second method is to write code in the <ph id=\"ph1\">`RowUpdated`</ph> event handler of the <ph id=\"ph2\">`DataAdapter`</ph> to set the <ph id=\"ph3\">&lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt;</ph> to <ph id=\"ph4\">&lt;xref:System.Data.UpdateStatus&gt;</ph>.","pos":[7531,7723],"source":"The second method is to write code in the `RowUpdated` event handler of the `DataAdapter` to set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> to <xref:System.Data.UpdateStatus>."},{"content":"The <ph id=\"ph1\">`DataRow`</ph> is updated but the original value of each <ph id=\"ph2\">`DataColumn`</ph> is preserved.","pos":[7724,7806],"source":" The `DataRow` is updated but the original value of each `DataColumn` is preserved."},{"content":"This method enables you to preserve the original values for some rows and not for others.","pos":[7807,7896]},{"content":"For example, your code can preserve the original values for added rows and not for edited or deleted rows by first checking the <ph id=\"ph1\">&lt;xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A&gt;</ph> and then setting <ph id=\"ph2\">&lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt;</ph> to <ph id=\"ph3\">&lt;xref:System.Data.UpdateStatus&gt;</ph> only for rows with a <ph id=\"ph4\">`StatementType`</ph> of <ph id=\"ph5\">`Insert`</ph>.","pos":[7897,8245],"source":" For example, your code can preserve the original values for added rows and not for edited or deleted rows by first checking the <xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A> and then setting <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> to <xref:System.Data.UpdateStatus> only for rows with a `StatementType` of `Insert`."},{"content":"When either of these methods is used to preserve original values in a <ph id=\"ph1\">`DataRow`</ph> during a <ph id=\"ph2\">`DataAdapter`</ph> update, ADO.NET performs a series of actions to set the current values of the <ph id=\"ph3\">`DataRow`</ph> to new values returned by output parameters or by the first returned row of a result set, while still preserving the original value in each <ph id=\"ph4\">`DataColumn`</ph>.","pos":[8252,8596],"source":"When either of these methods is used to preserve original values in a `DataRow` during a `DataAdapter` update, ADO.NET performs a series of actions to set the current values of the `DataRow` to new values returned by output parameters or by the first returned row of a result set, while still preserving the original value in each `DataColumn`."},{"content":"First, the <ph id=\"ph1\">`AcceptChanges`</ph> method of the <ph id=\"ph2\">`DataRow`</ph> is called to preserve the current values as original values, and then the new values are assigned.","pos":[8597,8746],"source":" First, the `AcceptChanges` method of the `DataRow` is called to preserve the current values as original values, and then the new values are assigned."},{"content":"Following these actions, <ph id=\"ph1\">`DataRows`</ph> that had their <ph id=\"ph2\">&lt;xref:System.Data.DataRow.RowState%2A&gt;</ph> property set to <ph id=\"ph3\">&lt;xref:System.Data.DataRowState&gt;</ph> will have their <ph id=\"ph4\">`RowState`</ph> property set to <ph id=\"ph5\">&lt;xref:System.Data.DataRowState&gt;</ph>, which may be unexpected.","pos":[8747,8985],"source":" Following these actions, `DataRows` that had their <xref:System.Data.DataRow.RowState%2A> property set to <xref:System.Data.DataRowState> will have their `RowState` property set to <xref:System.Data.DataRowState>, which may be unexpected."},{"content":"How the command results are applied to each <ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph> being updated is determined by the <ph id=\"ph2\">&lt;xref:System.Data.Common.DbCommand.UpdatedRowSource%2A&gt;</ph> property of each <ph id=\"ph3\">&lt;xref:System.Data.Common.DbCommand&gt;</ph>.","pos":[8992,9207],"source":"How the command results are applied to each <xref:System.Data.DataRow> being updated is determined by the <xref:System.Data.Common.DbCommand.UpdatedRowSource%2A> property of each <xref:System.Data.Common.DbCommand>."},{"content":"This property is set to a value from the <ph id=\"ph1\">`UpdateRowSource`</ph> enumeration.","pos":[9208,9279],"source":" This property is set to a value from the `UpdateRowSource` enumeration."},{"pos":[9286,9436],"content":"The following table describes how the <ph id=\"ph1\">`UpdateRowSource`</ph> enumeration values affect the <ph id=\"ph2\">&lt;xref:System.Data.DataRow.RowState%2A&gt;</ph> property of updated rows.","source":"The following table describes how the `UpdateRowSource` enumeration values affect the <xref:System.Data.DataRow.RowState%2A> property of updated rows."},{"content":"Member name","pos":[9443,9454]},{"content":"Description","pos":[9455,9466]},{"content":"<ph id=\"ph1\">`AcceptChanges`</ph> is called and both output parameter values and/or the values in the first row of any returned result set are placed in the <ph id=\"ph2\">`DataRow`</ph> being updated.","pos":[9546,9709],"source":"`AcceptChanges` is called and both output parameter values and/or the values in the first row of any returned result set are placed in the `DataRow` being updated."},{"content":"If there are no values to apply, the <ph id=\"ph1\">`RowState`</ph> will be <ph id=\"ph2\">&lt;xref:System.Data.DataRowState&gt;</ph>.","pos":[9710,9798],"source":" If there are no values to apply, the `RowState` will be <xref:System.Data.DataRowState>."},{"content":"If a row was returned, <ph id=\"ph1\">`AcceptChanges`</ph> is called and the row is mapped to the changed row in the <ph id=\"ph2\">`DataTable`</ph>, setting the <ph id=\"ph3\">`RowState`</ph> to <ph id=\"ph4\">`Modified`</ph>.","pos":[9838,9985],"source":"If a row was returned, `AcceptChanges` is called and the row is mapped to the changed row in the `DataTable`, setting the `RowState` to `Modified`."},{"content":"If no row is returned, then <ph id=\"ph1\">`AcceptChanges`</ph> is not called and the <ph id=\"ph2\">`RowState`</ph> remains <ph id=\"ph3\">`Added`</ph>.","pos":[9986,10079],"source":" If no row is returned, then `AcceptChanges` is not called and the `RowState` remains `Added`."},{"content":"Any returned parameters or rows are ignored.","pos":[10119,10163]},{"content":"There is no call to <ph id=\"ph1\">`AcceptChanges`</ph> and the <ph id=\"ph2\">`RowState`</ph> remains <ph id=\"ph3\">`Added`</ph>.","pos":[10164,10235],"source":" There is no call to `AcceptChanges` and the `RowState` remains `Added`."},{"content":"<ph id=\"ph1\">`AcceptChanges`</ph> is called and any output parameters are mapped to the changed row in the <ph id=\"ph2\">`DataTable`</ph>, setting the <ph id=\"ph3\">`RowState`</ph> to <ph id=\"ph4\">`Modified`</ph>.","pos":[10275,10414],"source":"`AcceptChanges` is called and any output parameters are mapped to the changed row in the `DataTable`, setting the `RowState` to `Modified`."},{"content":"If there are no output parameters, the <ph id=\"ph1\">`RowState`</ph> will be <ph id=\"ph2\">`Unchanged`</ph>.","pos":[10415,10485],"source":" If there are no output parameters, the `RowState` will be `Unchanged`."},{"pos":[10496,10503],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example demonstrates extracting changed rows from a <ph id=\"ph1\">`DataTable`</ph> and using a <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> to update the data source and retrieve a new identity column value.","pos":[10507,10699],"source":"This example demonstrates extracting changed rows from a `DataTable` and using a <xref:System.Data.SqlClient.SqlDataAdapter> to update the data source and retrieve a new identity column value."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A&gt;</ph> executes two Transact-SQL statements; the first one is the INSERT statement, and the second one is a SELECT statement that uses the SCOPE_IDENTITY function to retrieve the identity value.","pos":[10700,10952],"source":" The <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> executes two Transact-SQL statements; the first one is the INSERT statement, and the second one is a SELECT statement that uses the SCOPE_IDENTITY function to retrieve the identity value."},{"content":"The <ph id=\"ph1\">`UpdatedRowSource`</ph> property of the insert command is set to <ph id=\"ph2\">`UpdateRowSource.FirstReturnedRow`</ph> and the <ph id=\"ph3\">&lt;xref:System.Data.MissingSchemaAction&gt;</ph> property of the <ph id=\"ph4\">`DataAdapter`</ph> is set to <ph id=\"ph5\">`MissingSchemaAction.AddWithKey`</ph>.","pos":[11130,11349],"source":"The `UpdatedRowSource` property of the insert command is set to `UpdateRowSource.FirstReturnedRow` and the <xref:System.Data.MissingSchemaAction> property of the `DataAdapter` is set to `MissingSchemaAction.AddWithKey`."},{"content":"The <ph id=\"ph1\">`DataTable`</ph> is filled and the code adds a new row to the <ph id=\"ph2\">`DataTable`</ph>.","pos":[11350,11423],"source":" The `DataTable` is filled and the code adds a new row to the `DataTable`."},{"content":"The changed rows are then extracted into a new <ph id=\"ph1\">`DataTable`</ph>, which is passed to the <ph id=\"ph2\">`DataAdapter`</ph>, which then updates the server.","pos":[11424,11552],"source":" The changed rows are then extracted into a new `DataTable`, which is passed to the `DataAdapter`, which then updates the server."},{"pos":[11559,11876],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DataWorks SqlClient.MergeIdentity#1<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/CS/source.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DataWorks SqlClient.MergeIdentity#1<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/VB/source.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DataWorks SqlClient.MergeIdentity#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/CS/source.cs#1)]\n [!code-vb[DataWorks SqlClient.MergeIdentity#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/VB/source.vb#1)]"},{"content":"The <ph id=\"ph1\">`OnRowUpdated`</ph> event handler checks the <ph id=\"ph2\">&lt;xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A&gt;</ph> of the <ph id=\"ph3\">&lt;xref:System.Data.SqlClient.SqlRowUpdatedEventArgs&gt;</ph> to determine if the row is an insert.","pos":[11883,12086],"source":"The `OnRowUpdated` event handler checks the <xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A> of the <xref:System.Data.SqlClient.SqlRowUpdatedEventArgs> to determine if the row is an insert."},{"content":"If it is, then the <ph id=\"ph1\">&lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt;</ph> property is set to <ph id=\"ph2\">&lt;xref:System.Data.UpdateStatus&gt;</ph>.","pos":[12087,12213],"source":" If it is, then the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property is set to <xref:System.Data.UpdateStatus>."},{"content":"The row is updated, but the original values in the row are preserved.","pos":[12214,12283]},{"content":"In the main body of the procedure, the <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Merge%2A&gt;</ph> method is called to merge the new identity value into the original <ph id=\"ph2\">`DataTable`</ph>, and finally <ph id=\"ph3\">`AcceptChanges`</ph> is called.","pos":[12284,12477],"source":" In the main body of the procedure, the <xref:System.Data.DataSet.Merge%2A> method is called to merge the new identity value into the original `DataTable`, and finally `AcceptChanges` is called."},{"pos":[12484,12801],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DataWorks SqlClient.MergeIdentity#2<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/CS/source.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DataWorks SqlClient.MergeIdentity#2<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/VB/source.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DataWorks SqlClient.MergeIdentity#2](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/CS/source.cs#2)]\n [!code-vb[DataWorks SqlClient.MergeIdentity#2](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.MergeIdentity/VB/source.vb#2)]"},{"pos":[12810,12855],"content":"Retrieving Microsoft Access Autonumber Values","linkify":"Retrieving Microsoft Access Autonumber Values","nodes":[{"content":"Retrieving Microsoft Access Autonumber Values","pos":[0,45]}]},{"content":"This section includes a sample that shows how to retrieve <ph id=\"ph1\">`Autonumber`</ph> values from a Jet 4.0 database.","pos":[12859,12961],"source":"This section includes a sample that shows how to retrieve `Autonumber` values from a Jet 4.0 database."},{"content":"The Jet database engine does not support the execution of multiple statements in a batch or the use of output parameters, so it is not possible to use either of these techniques to return the new <ph id=\"ph1\">`Autonumber`</ph> value assigned to an inserted row.","pos":[12962,13205],"source":" The Jet database engine does not support the execution of multiple statements in a batch or the use of output parameters, so it is not possible to use either of these techniques to return the new `Autonumber` value assigned to an inserted row."},{"content":"However, you can add code to the <ph id=\"ph1\">`RowUpdated`</ph> event handler that executes a separate SELECT @<ph id=\"ph2\">@IDENTITY</ph> statement to retrieve the new <ph id=\"ph3\">`Autonumber`</ph> value.","pos":[13206,13358],"source":" However, you can add code to the `RowUpdated` event handler that executes a separate SELECT @@IDENTITY statement to retrieve the new `Autonumber` value."},{"pos":[13368,13375],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Instead of adding schema information using <ph id=\"ph1\">`MissingSchemaAction.AddWithKey`</ph>, this example configures a <ph id=\"ph2\">`DataTable`</ph> with the correct schema prior to calling the <ph id=\"ph3\">&lt;xref:System.Data.OleDb.OleDbDataAdapter&gt;</ph> to fill the <ph id=\"ph4\">`DataTable`</ph>.","pos":[13379,13605],"source":"Instead of adding schema information using `MissingSchemaAction.AddWithKey`, this example configures a `DataTable` with the correct schema prior to calling the <xref:System.Data.OleDb.OleDbDataAdapter> to fill the `DataTable`."},{"content":"In this case, the <bpt id=\"p1\">**</bpt>CategoryID<ept id=\"p1\">**</ept> column is configured to decrement the value assigned each inserted row starting from zero, by setting <ph id=\"ph1\">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph>, <ph id=\"ph3\">&lt;xref:System.Data.DataColumn.AutoIncrementSeed%2A&gt;</ph> to 0, and <ph id=\"ph4\">&lt;xref:System.Data.DataColumn.AutoIncrementStep%2A&gt;</ph> to -1.","pos":[13606,13917],"source":" In this case, the **CategoryID** column is configured to decrement the value assigned each inserted row starting from zero, by setting <xref:System.Data.DataColumn.AutoIncrement%2A> to `true`, <xref:System.Data.DataColumn.AutoIncrementSeed%2A> to 0, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> to -1."},{"content":"The code then adds two new rows and uses <ph id=\"ph1\">`GetChanges`</ph> to add the changed rows to a new <ph id=\"ph2\">`DataTable`</ph> that is passed to the <ph id=\"ph3\">`Update`</ph> method.","pos":[13918,14055],"source":" The code then adds two new rows and uses `GetChanges` to add the changed rows to a new `DataTable` that is passed to the `Update` method."},{"pos":[14062,14383],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DataWorks OleDb.JetAutonumberMerge#1<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/CS/source.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DataWorks OleDb.JetAutonumberMerge#1<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/VB/source.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DataWorks OleDb.JetAutonumberMerge#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/CS/source.cs#1)]\n [!code-vb[DataWorks OleDb.JetAutonumberMerge#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/VB/source.vb#1)]"},{"content":"The <ph id=\"ph1\">`RowUpdated`</ph> event handler uses the same open <ph id=\"ph2\">&lt;xref:System.Data.OleDb.OleDbConnection&gt;</ph> as the <ph id=\"ph3\">`Update`</ph> statement of the <ph id=\"ph4\">`OleDbDataAdapter`</ph>.","pos":[14390,14533],"source":"The `RowUpdated` event handler uses the same open <xref:System.Data.OleDb.OleDbConnection> as the `Update` statement of the `OleDbDataAdapter`."},{"content":"It checks the <ph id=\"ph1\">`StatementType`</ph> of the <ph id=\"ph2\">&lt;xref:System.Data.OleDb.OleDbRowUpdatedEventArgs&gt;</ph> for inserted rows.","pos":[14534,14639],"source":" It checks the `StatementType` of the <xref:System.Data.OleDb.OleDbRowUpdatedEventArgs> for inserted rows."},{"content":"For each inserted row a new <ph id=\"ph1\">&lt;xref:System.Data.OleDb.OleDbCommand&gt;</ph> is created to execute the SELECT @<ph id=\"ph2\">@IDENTITY</ph> statement on the connection, returning the new <ph id=\"ph3\">`Autonumber`</ph> value, which is placed in the <bpt id=\"p1\">**</bpt>CategoryID<ept id=\"p1\">**</ept> column of the <ph id=\"ph4\">`DataRow`</ph>.","pos":[14640,14879],"source":" For each inserted row a new <xref:System.Data.OleDb.OleDbCommand> is created to execute the SELECT @@IDENTITY statement on the connection, returning the new `Autonumber` value, which is placed in the **CategoryID** column of the `DataRow`."},{"content":"The <ph id=\"ph1\">`Status`</ph> property is then set to <ph id=\"ph2\">`UpdateStatus.SkipCurrentRow`</ph> to suppress the hidden call to <ph id=\"ph3\">`AcceptChanges`</ph>.","pos":[14880,14994],"source":" The `Status` property is then set to `UpdateStatus.SkipCurrentRow` to suppress the hidden call to `AcceptChanges`."},{"content":"In the main body of the procedure, the <ph id=\"ph1\">`Merge`</ph> method is called to merge the two <ph id=\"ph2\">`DataTable`</ph> objects, and finally <ph id=\"ph3\">`AcceptChanges`</ph> is called.","pos":[14995,15135],"source":" In the main body of the procedure, the `Merge` method is called to merge the two `DataTable` objects, and finally `AcceptChanges` is called."},{"pos":[15142,15463],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>DataWorks OleDb.JetAutonumberMerge#2<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/CS/source.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>DataWorks OleDb.JetAutonumberMerge#2<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/VB/source.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[DataWorks OleDb.JetAutonumberMerge#2](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/CS/source.cs#2)]\n [!code-vb[DataWorks OleDb.JetAutonumberMerge#2](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks OleDb.JetAutonumberMerge/VB/source.vb#2)]"},{"pos":[15473,15499],"content":"Retrieving Identity Values","linkify":"Retrieving Identity Values","nodes":[{"content":"Retrieving Identity Values","pos":[0,26]}]},{"content":"We often set the column as identity when the values in the column must be unique.","pos":[15503,15584]},{"content":"And sometimes we need the identity value of new data.","pos":[15585,15638]},{"content":"This sample demonstrates how to retrieve identity values:","pos":[15639,15696]},{"content":"Creates a stored procedure to insert data and return an identity value.","pos":[15706,15777]},{"content":"Executes a command to insert the new data and display the result.","pos":[15787,15852]},{"content":"Uses <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> to insert new data and display the result.","pos":[15862,15953],"source":"Uses <xref:System.Data.SqlClient.SqlDataAdapter> to insert new data and display the result."},{"content":"Before you compile and run the sample, you must create the sample database, using the following script:","pos":[15960,16063]},{"content":"The code listing follows:","pos":[25973,25998]},{"pos":[26006,26381],"content":"[!IMPORTANT]\n The code listing refers to an Access database file called MySchool.mdb. You can download MySchool.mdb (as part of the full C# or Visual Basic sample project) from either the [Visual Studio 2012 sample](http://code.msdn.microsoft.com/How-to-retrieve-the-95b4ee43) or the [Visual Studio 2013 sample](http://code.msdn.microsoft.com/How-to-Retrieve-the-511acece).","leadings":["","> "],"nodes":[{"content":"The code listing refers to an Access database file called MySchool.mdb. You can download MySchool.mdb (as part of the full C# or Visual Basic sample project) from either the [Visual Studio 2012 sample](http://code.msdn.microsoft.com/How-to-retrieve-the-95b4ee43) or the [Visual Studio 2013 sample](http://code.msdn.microsoft.com/How-to-Retrieve-the-511acece).","pos":[14,373],"nodes":[{"content":"The code listing refers to an Access database file called MySchool.mdb.","pos":[0,71]},{"content":"You can download MySchool.mdb (as part of the full C# or Visual Basic sample project) from either the <bpt id=\"p1\">[</bpt>Visual Studio 2012 sample<ept id=\"p1\">](http://code.msdn.microsoft.com/How-to-retrieve-the-95b4ee43)</ept> or the <bpt id=\"p2\">[</bpt>Visual Studio 2013 sample<ept id=\"p2\">](http://code.msdn.microsoft.com/How-to-Retrieve-the-511acece)</ept>.","pos":[72,359],"source":" You can download MySchool.mdb (as part of the full C# or Visual Basic sample project) from either the [Visual Studio 2012 sample](http://code.msdn.microsoft.com/How-to-retrieve-the-95b4ee43) or the [Visual Studio 2013 sample](http://code.msdn.microsoft.com/How-to-Retrieve-the-511acece)."}]}]},{"pos":[33742,33750],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Retrieving and Modifying Data in ADO.NET<ept id=\"p1\">](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)</ept><ph id=\"ph1\"> </ph>","pos":[33754,33870],"source":"[Retrieving and Modifying Data in ADO.NET](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md) "},{"content":"<bpt id=\"p1\">[</bpt>DataAdapters and DataReaders<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept><ph id=\"ph1\"> </ph>","pos":[33874,33977],"source":"[DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md) "},{"content":"<bpt id=\"p1\">[</bpt>Row States and Row Versions<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept><ph id=\"ph1\"> </ph>","pos":[33981,34109],"source":"[Row States and Row Versions](../../../../docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md) "},{"content":"<bpt id=\"p1\">[</bpt>AcceptChanges and RejectChanges<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/acceptchanges-and-rejectchanges.md)</ept><ph id=\"ph1\"> </ph>","pos":[34113,34249],"source":"[AcceptChanges and RejectChanges](../../../../docs/framework/data/adonet/dataset-datatable-dataview/acceptchanges-and-rejectchanges.md) "},{"content":"<bpt id=\"p1\">[</bpt>Merging DataSet Contents<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/merging-dataset-contents.md)</ept><ph id=\"ph1\"> </ph>","pos":[34253,34375],"source":"[Merging DataSet Contents](../../../../docs/framework/data/adonet/dataset-datatable-dataview/merging-dataset-contents.md) "},{"content":"<bpt id=\"p1\">[</bpt>Updating Data Sources with DataAdapters<ept id=\"p1\">](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)</ept><ph id=\"ph1\"> </ph>","pos":[34379,34504],"source":"[Updating Data Sources with DataAdapters](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md) "},{"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[34508,34611],"source":"[ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}