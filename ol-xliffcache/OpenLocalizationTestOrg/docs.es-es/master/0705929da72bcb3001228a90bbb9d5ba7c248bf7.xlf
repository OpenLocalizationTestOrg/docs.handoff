<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0705929da72bcb3001228a90bbb9d5ba7c248bf7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\extension-methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb4036359696c25ebce4fbe7735619491b3b9f2c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56d34f039b1438766543d5745213bed0cee6296d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Extension Methods (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Extension Methods (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Extension methods enable developers to add custom functionality to data types that are already defined without creating a new derived type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Extension methods make it possible to write a method that can be called as if it were an instance method of the existing type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An extension method can be only a <ph id="ph1">`Sub`</ph> procedure or a <ph id="ph2">`Function`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You cannot define an extension property, field, or event.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All extension methods must be marked with the extension attribute <ph id="ph1">`&lt;Extension()&gt;`</ph> from the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first parameter in an extension method definition specifies which data type the method extends.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When the method is run, the first parameter is bound to the instance of the data type that invokes the method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`Print`</ph> extension to the <ph id="ph2">&lt;xref:System.String&gt;</ph> data type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The method uses <ph id="ph1">`Console.WriteLine`</ph> to display a string.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The parameter of the <ph id="ph1">`Print`</ph> method, <ph id="ph2">`aString`</ph>, establishes that the method extends the <ph id="ph3">&lt;xref:System.String&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrExtensionMethods#1<ept id="p2">](./codesnippet/VisualBasic/extension-methods_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Notice that the extension method definition is marked with the extension attribute <ph id="ph1">`&lt;Extension()&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Marking the module in which the method is defined is optional, but each extension method must be marked.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.CompilerServices&gt;</ph> must be imported in order to access the extension attribute.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Extension methods can be declared only within modules.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Typically, the module in which an extension method is defined is not the same module as the one in which it is called.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Instead, the module that contains the extension method is imported, if it needs to be, to bring it into scope.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>After the module that contains <ph id="ph1">`Print`</ph> is in scope, the method can be called as if it were an ordinary instance method that takes no arguments, such as <ph id="ph2">`ToUpper`</ph>:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrExtensionMethods#2<ept id="p2">](./codesnippet/VisualBasic/extension-methods_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The next example, <ph id="ph1">`PrintAndPunctuate`</ph>, is also an extension to <ph id="ph2">&lt;xref:System.String&gt;</ph>, this time defined with two parameters.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first parameter, <ph id="ph1">`aString`</ph>, establishes that the extension method extends <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The second parameter, <ph id="ph1">`punc`</ph>, is intended to be a string of punctuation marks that is passed in as an argument when the method is called.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The method displays the string followed by the punctuation marks.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrExtensionMethods#3<ept id="p2">](./codesnippet/VisualBasic/extension-methods_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The method is called by sending in a string argument for <ph id="ph1">`punc`</ph>: <ph id="ph2">`example.PrintAndPunctuate(".")`</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example shows <ph id="ph1">`Print`</ph> and <ph id="ph2">`PrintAndPunctuate`</ph> defined and called.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.CompilerServices&gt;</ph> is imported in the definition module in order to enable access to the extension attribute.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Next, the extension methods are brought into scope and called.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>All that is required to be able to run these or similar extension methods is that they be in scope.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the module that contains an extension method is in scope, it is visible in IntelliSense and can be called as if it were an ordinary instance method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Notice that when the methods are invoked, no argument is sent in for the first parameter.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Parameter <ph id="ph1">`aString`</ph> in the previous method definitions is bound to <ph id="ph2">`example`</ph>, the instance of <ph id="ph3">`String`</ph> that calls them.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The compiler will use <ph id="ph1">`example`</ph> as the argument sent to the first parameter.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If an extension method is called for an object that is set to <ph id="ph1">`Nothing`</ph>, the extension method executes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This does not apply to ordinary instance methods.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can explicitly check for <ph id="ph1">`Nothing`</ph> in the extension method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Types That Can Be Extended</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can define an extension method on most types that can be represented in a Visual Basic parameter list, including the following:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Classes (reference types)</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Structures (value types)</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Delegates</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>ByRef and ByVal arguments</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Generic method parameters</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Arrays</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because the first parameter specifies the data type that the extension method extends, it is required and cannot be optional.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For that reason, <ph id="ph1">`Optional`</ph> parameters and <ph id="ph2">`ParamArray`</ph> parameters cannot be the first parameter in the parameter list.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Extension methods are not considered in late binding.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the following example, the statement <ph id="ph1">`anObject.PrintMe()`</ph> raises a <ph id="ph2">&lt;xref:System.MissingMemberException&gt;</ph> exception, the same exception you would see if the second <ph id="ph3">`PrintMe`</ph> extension method definition were deleted.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrExtensionMethods#9<ept id="p2">](./codesnippet/VisualBasic/extension-methods_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Best Practices</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Extension methods provide a convenient and powerful way to extend an existing type.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>However, to use them successfully, there are some points to consider.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>These considerations apply mainly to authors of class libraries, but they might affect any application that uses extension methods.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Most generally, extension methods that you add to types that you do not own are more vulnerable than extension methods added to types that you control.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A number of things can occur in classes you do not own that can interfere with your extension methods.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If any accessible instance member exists that has a signature that is compatible with the arguments in the calling statement, with no narrowing conversions required from argument to parameter, the instance method will be used in preference to any extension method.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Therefore, if an appropriate instance method is added to a class at some point, an existing extension member that you rely on may become inaccessible.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The author of an extension method cannot prevent other programmers from writing conflicting extension methods that may have precedence over the original extension.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can improve robustness by putting extension methods in their own namespace.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Consumers of your library can then include a namespace or exclude it, or select among namespaces, separately from the rest of the library.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>It may be safer to extend interfaces than it is to extend classes, especially if you do not own the interface or class.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A change in an interface affects every class that implements it.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Therefore, the author may be less likely to add or change methods in an interface.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>However, if a class implements two interfaces that have extension methods with the same signature, neither extension method is visible.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Extend the most specific type you can.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In a hierarchy of types, if you select a type from which many other types are derived, there are layers of possibilities for the introduction of instance methods or other extension methods that might interfere with yours.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Extension Methods, Instance Methods, and Properties</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When an in-scope instance method has a signature that is compatible with the arguments of a calling statement, the instance method is chosen in preference to any extension method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The instance method has precedence even if the extension method is a better match.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`ExampleClass`</ph> contains an instance method named <ph id="ph2">`ExampleMethod`</ph> that has one parameter of type <ph id="ph3">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Extension method <ph id="ph1">`ExampleMethod`</ph> extends <ph id="ph2">`ExampleClass`</ph>, and has one parameter of type <ph id="ph3">`Long`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrExtensionMethods#4<ept id="p2">](./codesnippet/VisualBasic/extension-methods_5.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The first call to <ph id="ph1">`ExampleMethod`</ph> in the following code calls the extension method, because <ph id="ph2">`arg1`</ph> is <ph id="ph3">`Long`</ph> and is compatible only with the <ph id="ph4">`Long`</ph> parameter in the extension method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The second call to <ph id="ph1">`ExampleMethod`</ph> has an <ph id="ph2">`Integer`</ph> argument, <ph id="ph3">`arg2`</ph>, and it calls the instance method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrExtensionMethods#5<ept id="p2">](./codesnippet/VisualBasic/extension-methods_6.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Now reverse the data types of the parameters in the two methods:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrExtensionMethods#6<ept id="p2">](./codesnippet/VisualBasic/extension-methods_7.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This time the code in <ph id="ph1">`Main`</ph> calls the instance method both times.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This is because both <ph id="ph1">`arg1`</ph> and <ph id="ph2">`arg2`</ph> have a widening conversion to <ph id="ph3">`Long`</ph>, and the instance method takes precedence over the extension method in both cases.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrExtensionMethods#7<ept id="p2">](./codesnippet/VisualBasic/extension-methods_8.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Therefore, an extension method cannot replace an existing instance method.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>However, when an extension method has the same name as an instance method but the signatures do not conflict, both methods can be accessed.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For example, if class <ph id="ph1">`ExampleClass`</ph> contains a method named <ph id="ph2">`ExampleMethod`</ph> that takes no arguments, extension methods with the same name but different signatures are permitted, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrExtensionMethods#8<ept id="p2">](./codesnippet/VisualBasic/extension-methods_9.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The output from this code is as follows:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The situation is simpler with properties: if an extension method has the same name as a property of the class it extends, the extension method is not visible and cannot be accessed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Extension Method Precedence</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When two extension methods that have identical signatures are in scope and accessible, the one with higher precedence will be invoked.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An extension method's precedence is based on the mechanism used to bring the method into scope.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The following list shows the precedence hierarchy, from highest to lowest.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Extension methods defined inside the current module.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Extension methods defined inside data types in the current namespace or any one of its parents, with child namespaces having higher precedence than parent namespaces.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Extension methods defined inside any type imports in the current file.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Extension methods defined inside any namespace imports in the current file.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Extension methods defined inside any project-level type imports.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Extension methods defined inside any project-level namespace imports.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If precedence does not resolve the ambiguity, you can use the fully qualified name to specify the method that you are calling.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Print`</ph> method in the earlier example is defined in a module named <ph id="ph2">`StringExtensions`</ph>, the fully qualified name is <ph id="ph3">`StringExtensions.Print(example)`</ph> instead of <ph id="ph4">`example.Print()`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.CompilerServices&gt;</ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ExtensionAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Extension Methods<ept id="p1">](../../../../csharp/programming-guide/classes-and-structs/extension-methods.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Module Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/module-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Optional Parameters<ept id="p1">](./optional-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Parameter Arrays<ept id="p1">](./parameter-arrays.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Attributes overview<ept id="p1">](../../../../visual-basic/programming-guide/concepts/attributes/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Scope in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>