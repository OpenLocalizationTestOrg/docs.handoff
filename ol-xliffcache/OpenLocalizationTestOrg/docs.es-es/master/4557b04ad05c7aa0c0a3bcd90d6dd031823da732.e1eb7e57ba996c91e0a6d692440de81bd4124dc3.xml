{"content":"---\ntitle: \"UInteger Data Type | Microsoft Docs\"\n\nms.date: \"2017-14-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.uinteger\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"numbers, whole\"\n  - \"UInteger data type\"\n  - \"literal type characters, UI\"\n  - \"whole numbers\"\n  - \"integral data types\"\n  - \"integer numbers\"\n  - \"numbers, integer\"\n  - \"integers, data types\"\n  - \"integers, types\"\n  - \"UI literal type characters\"\n  - \"data types [Visual Basic], integral\"\nms.assetid: db7ddd34-4f23-46f5-84dd-8b0f83bb8729\ncaps.latest.revision: 19\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# UInteger data type\n\nHolds unsigned 32-bit (4-byte) integers ranging in value from 0 through 4,294,967,295.  \n  \n## Remarks\n\n The `UInteger` data type provides the largest unsigned value in the most efficient data width.  \n  \n The default value of `UInteger` is 0.  \n  \n## Literal assignments\n\nYou can declare and initialize a `UInteger` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal. If the integer literal is outside the range of `UInteger` (that is, if it is less than <xref:System.UInt32.MinValue?displayProperty=fullName> or greater than <xref:System.UInt32.MaxValue?displayProperty=fullName>, a compilation error occurs.\n\nIn the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to `UInteger` values.\n  \n[!code-vb[UInteger](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#UInt)]  \n\n> [!NOTE] \n> You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.\n\nStarting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-vb[UInteger](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#UIntS)]  \n\nNumeric literals can also include the `UI` or `ui` [type character](../../programming-guide\\language-features\\data-types/type-characters.md) to denote the `UInteger` data type, as the following example shows.\n\n```vb\nDim number = &H0FAC14D7ui\n```\n\n## Programming tips\n\n The `UInteger` and `Integer` data types provide optimal performance on a 32-bit processor, because the smaller integer types (`UShort`, `Short`, `Byte`, and `SByte`), even though they use fewer bits, take more time to load, store, and fetch.  \n  \n-   **Negative Numbers.** Because `UInteger` is an unsigned type, it cannot represent a negative number. If you use the unary minus (`-`) operator on an expression that evaluates to type `UInteger`, Visual Basic converts the expression to `Long` first.  \n  \n-   **CLS Compliance.** The `UInteger` data type is not part of the [Common Language Specification](http://www.ecma-international.org/publications/standards/Ecma-335.htm) (CLS), so CLS-compliant code cannot consume a component that uses it.\n  \n-   **Interop Considerations.** If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, keep in mind that types such as `uint` can have a different data width (16 bits) in other environments. If you are passing a 16-bit argument to such a component, declare it as `UShort` instead of `UInteger` in your managed Visual Basic code.  \n  \n-   **Widening.** The `UInteger` data type widens to `Long`, `ULong`, `Decimal`, `Single`, and `Double`. This means you can convert `UInteger` to any of these types without encountering a <xref:System.OverflowException?displayProperty=fullName> error.  \n  \n-   **Type Characters.** Appending the literal type characters `UI` to a literal forces it to the `UInteger` data type. `UInteger` has no identifier type character.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.UInt32?displayProperty=fullName> structure.  \n  \n## See Also  \n <xref:System.UInt32>   \n [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)   \n [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)   \n [How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)   \n [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)","nodes":[{"pos":[4,830],"embed":true,"restype":"x-metadata","content":"title: \"UInteger Data Type | Microsoft Docs\"\n\nms.date: \"2017-14-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.uinteger\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"numbers, whole\"\n  - \"UInteger data type\"\n  - \"literal type characters, UI\"\n  - \"whole numbers\"\n  - \"integral data types\"\n  - \"integer numbers\"\n  - \"numbers, integer\"\n  - \"integers, data types\"\n  - \"integers, types\"\n  - \"UI literal type characters\"\n  - \"data types [Visual Basic], integral\"\nms.assetid: db7ddd34-4f23-46f5-84dd-8b0f83bb8729\ncaps.latest.revision: 19\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"UInteger Data Type | Microsoft Docs","nodes":[{"pos":[0,35],"content":"UInteger Data Type | Microsoft Docs","nodes":[{"content":"UInteger Data Type | Microsoft Docs","pos":[0,35]}]}],"path":["title"]}],"yml":true},{"pos":[837,855],"content":"UInteger data type","linkify":"UInteger data type","nodes":[{"content":"UInteger data type","pos":[0,18]}]},{"content":"Holds unsigned 32-bit (4-byte) integers ranging in value from 0 through 4,294,967,295.","pos":[857,943]},{"pos":[952,959],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[962,1056],"content":"The <ph id=\"ph1\">`UInteger`</ph> data type provides the largest unsigned value in the most efficient data width.","source":"The `UInteger` data type provides the largest unsigned value in the most efficient data width."},{"pos":[1063,1100],"content":"The default value of <ph id=\"ph1\">`UInteger`</ph> is 0.","source":"The default value of `UInteger` is 0."},{"pos":[1109,1128],"content":"Literal assignments","linkify":"Literal assignments","nodes":[{"content":"Literal assignments","pos":[0,19]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`UInteger`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.","pos":[1130,1313],"source":"You can declare and initialize a `UInteger` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`UInteger`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.UInt32.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[1314,1555],"source":" If the integer literal is outside the range of `UInteger` (that is, if it is less than <xref:System.UInt32.MinValue?displayProperty=fullName> or greater than <xref:System.UInt32.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"pos":[1557,1715],"content":"In the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`UInteger`</ph> values.","source":"In the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to `UInteger` values."},{"pos":[1842,2058],"content":"[!NOTE] \nYou use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","pos":[9,214],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`&amp;h`</ph> or <ph id=\"ph2\">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id=\"ph3\">`&amp;b`</ph> or <ph id=\"ph4\">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id=\"ph5\">`&amp;o`</ph> or <ph id=\"ph6\">`&amp;O`</ph> to denote an octal literal.","pos":[0,172],"source":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal."},{"content":"Decimal literals have no prefix.","pos":[173,205]}]}]},{"pos":[2060,2217],"content":"Starting with Visual Basic 2017, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"pos":[2341,2549],"content":"Numeric literals can also include the <ph id=\"ph1\">`UI`</ph> or <ph id=\"ph2\">`ui`</ph> <bpt id=\"p1\">[</bpt>type character<ept id=\"p1\">](../../programming-guide\\language-features\\data-types/type-characters.md)</ept> to denote the <ph id=\"ph3\">`UInteger`</ph> data type, as the following example shows.","source":"Numeric literals can also include the `UI` or `ui` [type character](../../programming-guide\\language-features\\data-types/type-characters.md) to denote the `UInteger` data type, as the following example shows."},{"pos":[2591,2607],"content":"Programming tips","linkify":"Programming tips","nodes":[{"content":"Programming tips","pos":[0,16]}]},{"pos":[2610,2851],"content":"The <ph id=\"ph1\">`UInteger`</ph> and <ph id=\"ph2\">`Integer`</ph> data types provide optimal performance on a 32-bit processor, because the smaller integer types (<ph id=\"ph3\">`UShort`</ph>, <ph id=\"ph4\">`Short`</ph>, <ph id=\"ph5\">`Byte`</ph>, and <ph id=\"ph6\">`SByte`</ph>), even though they use fewer bits, take more time to load, store, and fetch.","source":"The `UInteger` and `Integer` data types provide optimal performance on a 32-bit processor, because the smaller integer types (`UShort`, `Short`, `Byte`, and `SByte`), even though they use fewer bits, take more time to load, store, and fetch."},{"content":"<bpt id=\"p1\">**</bpt>Negative Numbers.<ept id=\"p1\">**</ept>","pos":[2861,2882],"source":"**Negative Numbers.**"},{"content":"Because <ph id=\"ph1\">`UInteger`</ph> is an unsigned type, it cannot represent a negative number.","pos":[2883,2961],"source":" Because `UInteger` is an unsigned type, it cannot represent a negative number."},{"content":"If you use the unary minus (<ph id=\"ph1\">`-`</ph>) operator on an expression that evaluates to type <ph id=\"ph2\">`UInteger`</ph>, Visual Basic converts the expression to <ph id=\"ph3\">`Long`</ph> first.","pos":[2962,3109],"source":" If you use the unary minus (`-`) operator on an expression that evaluates to type `UInteger`, Visual Basic converts the expression to `Long` first."},{"content":"<bpt id=\"p1\">**</bpt>CLS Compliance.<ept id=\"p1\">**</ept>","pos":[3119,3138],"source":"**CLS Compliance.**"},{"content":"The <ph id=\"ph1\">`UInteger`</ph> data type is not part of the <bpt id=\"p1\">[</bpt>Common Language Specification<ept id=\"p1\">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept> (CLS), so CLS-compliant code cannot consume a component that uses it.","pos":[3139,3355],"source":" The `UInteger` data type is not part of the [Common Language Specification](http://www.ecma-international.org/publications/standards/Ecma-335.htm) (CLS), so CLS-compliant code cannot consume a component that uses it."},{"content":"<bpt id=\"p1\">**</bpt>Interop Considerations.<ept id=\"p1\">**</ept>","pos":[3363,3390],"source":"**Interop Considerations.**"},{"content":"If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, keep in mind that types such as <ph id=\"ph1\">`uint`</ph> can have a different data width (16 bits) in other environments.","pos":[3391,3608],"source":" If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, keep in mind that types such as `uint` can have a different data width (16 bits) in other environments."},{"content":"If you are passing a 16-bit argument to such a component, declare it as <ph id=\"ph1\">`UShort`</ph> instead of <ph id=\"ph2\">`UInteger`</ph> in your managed Visual Basic code.","pos":[3609,3746],"source":" If you are passing a 16-bit argument to such a component, declare it as `UShort` instead of `UInteger` in your managed Visual Basic code."},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[3756,3769],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`UInteger`</ph> data type widens to <ph id=\"ph2\">`Long`</ph>, <ph id=\"ph3\">`ULong`</ph>, <ph id=\"ph4\">`Decimal`</ph>, <ph id=\"ph5\">`Single`</ph>, and <ph id=\"ph6\">`Double`</ph>.","pos":[3770,3856],"source":" The `UInteger` data type widens to `Long`, `ULong`, `Decimal`, `Single`, and `Double`."},{"content":"This means you can convert <ph id=\"ph1\">`UInteger`</ph> to any of these types without encountering a <ph id=\"ph2\">&lt;xref:System.OverflowException?displayProperty=fullName&gt;</ph> error.","pos":[3857,4003],"source":" This means you can convert `UInteger` to any of these types without encountering a <xref:System.OverflowException?displayProperty=fullName> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[4013,4033],"source":"**Type Characters.**"},{"content":"Appending the literal type characters <ph id=\"ph1\">`UI`</ph> to a literal forces it to the <ph id=\"ph2\">`UInteger`</ph> data type.","pos":[4034,4128],"source":" Appending the literal type characters `UI` to a literal forces it to the `UInteger` data type."},{"content":"<ph id=\"ph1\">`UInteger`</ph> has no identifier type character.","pos":[4129,4173],"source":"`UInteger` has no identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[4183,4202],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.UInt32?displayProperty=fullName&gt;</ph> structure.","pos":[4203,4311],"source":" The corresponding type in the .NET Framework is the <xref:System.UInt32?displayProperty=fullName> structure."},{"pos":[4320,4328],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.UInt32&gt;</ph>","pos":[4332,4352],"source":"<xref:System.UInt32> "},{"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[4357,4444],"source":"[Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[4448,4557],"source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[4561,4655],"source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id=\"p1\">](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[4659,4832],"source":"[How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","pos":[4836,4966],"source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}