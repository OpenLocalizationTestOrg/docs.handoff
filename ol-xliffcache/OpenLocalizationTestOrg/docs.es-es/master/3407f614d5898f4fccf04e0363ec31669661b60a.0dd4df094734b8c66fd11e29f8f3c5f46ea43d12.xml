{"content":"---\ntitle: \"Character Data Types (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"data types [Visual Basic], character\"\n  - \"String data type, character data types\"\n  - \"character data types [Visual Basic]\"\n  - \"Char data type, character data types\"\n  - \"data types [Visual Basic], choosing\"\nms.assetid: 902479ef-1679-47fc-9911-0c1c5008226c\ncaps.latest.revision: 23\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Character Data Types (Visual Basic)\n[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides *character data types* to deal with printable and displayable characters. While they both deal with Unicode characters, `Char` holds a single character whereas `String` contains an indefinite number of characters.  \n  \n For a table that displays a side-by-side comparison of the [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] data types, see [Data Types](../../../../visual-basic/language-reference/data-types/data-type-summary.md).  \n  \n## Char Type  \n The `Char` data type is a single two-byte (16-bit) Unicode character. If a variable always stores exactly one character, declare it as `Char`. For example:  \n  \n [!code-vb[VbVbalrCharTypes#1](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/character-data-types_1.vb)]  \n  \n Each possible value in a `Char` or `String` variable is a *code point*, or character code, in the Unicode character set. Unicode characters include the basic ASCII character set, various other alphabet letters, accents, currency symbols, fractions, diacritics, and mathematical and technical symbols.  \n  \n> [!NOTE]\n>  The Unicode character set reserves the code points D800 through DFFF (55296 through 55551 decimal) for *surrogate pairs*, which require two 16-bit values to represent a single code point. A `Char` variable cannot hold a surrogate pair, and a `String` uses two positions to hold such a pair.  \n  \n For more information, see [Char Data Type](../../../../visual-basic/language-reference/data-types/char-data-type.md).  \n  \n## String Type  \n The `String` data type is a sequence of zero or more two-byte (16-bit) Unicode characters. If a variable can contain an indefinite number of characters, declare it as `String`. For example:  \n  \n [!code-vb[VbVbalrCharTypes#2](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/character-data-types_2.vb)]  \n  \n For more information, see [String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md).  \n  \n## See Also  \n [Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)   \n [Composite Data Types](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)   \n [Generic Types in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)   \n [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)   \n [Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)   \n [Type Characters](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)","nodes":[{"pos":[12,64],"content":"Character Data Types (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Character Data Types (Visual Basic) | Microsoft Docs","pos":[0,52]}]},{"pos":[774,809],"content":"Character Data Types (Visual Basic)","linkify":"Character Data Types (Visual Basic)","nodes":[{"content":"Character Data Types (Visual Basic)","pos":[0,35]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> provides <bpt id=\"p1\">*</bpt>character data types<ept id=\"p1\">*</ept> to deal with printable and displayable characters.","pos":[810,985],"source":"[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides *character data types* to deal with printable and displayable characters."},{"content":"While they both deal with Unicode characters, <ph id=\"ph1\">`Char`</ph> holds a single character whereas <ph id=\"ph2\">`String`</ph> contains an indefinite number of characters.","pos":[986,1125],"source":" While they both deal with Unicode characters, `Char` holds a single character whereas `String` contains an indefinite number of characters."},{"pos":[1132,1390],"content":"For a table that displays a side-by-side comparison of the <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> data types, see <bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>.","source":"For a table that displays a side-by-side comparison of the [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] data types, see [Data Types](../../../../visual-basic/language-reference/data-types/data-type-summary.md)."},{"pos":[1399,1408],"content":"Char Type","linkify":"Char Type","nodes":[{"content":"Char Type","pos":[0,9]}]},{"content":"The <ph id=\"ph1\">`Char`</ph> data type is a single two-byte (16-bit) Unicode character.","pos":[1412,1481],"source":"The `Char` data type is a single two-byte (16-bit) Unicode character."},{"content":"If a variable always stores exactly one character, declare it as <ph id=\"ph1\">`Char`</ph>.","pos":[1482,1554],"source":" If a variable always stores exactly one character, declare it as `Char`."},{"content":"For example:","pos":[1555,1567]},{"pos":[1574,1727],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCharTypes#1<ept id=\"p2\">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/character-data-types_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrCharTypes#1](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/character-data-types_1.vb)]"},{"content":"Each possible value in a <ph id=\"ph1\">`Char`</ph> or <ph id=\"ph2\">`String`</ph> variable is a <bpt id=\"p1\">*</bpt>code point<ept id=\"p1\">*</ept>, or character code, in the Unicode character set.","pos":[1734,1854],"source":"Each possible value in a `Char` or `String` variable is a *code point*, or character code, in the Unicode character set."},{"content":"Unicode characters include the basic ASCII character set, various other alphabet letters, accents, currency symbols, fractions, diacritics, and mathematical and technical symbols.","pos":[1855,2034]},{"pos":[2042,2343],"content":"[!NOTE]\n The Unicode character set reserves the code points D800 through DFFF (55296 through 55551 decimal) for *surrogate pairs*, which require two 16-bit values to represent a single code point. A `Char` variable cannot hold a surrogate pair, and a `String` uses two positions to hold such a pair.","leadings":["","> "],"nodes":[{"content":" The Unicode character set reserves the code points D800 through DFFF (55296 through 55551 decimal) for *surrogate pairs*, which require two 16-bit values to represent a single code point. A `Char` variable cannot hold a surrogate pair, and a `String` uses two positions to hold such a pair.","pos":[8,299],"nodes":[{"content":"The Unicode character set reserves the code points D800 through DFFF (55296 through 55551 decimal) for <bpt id=\"p1\">*</bpt>surrogate pairs<ept id=\"p1\">*</ept>, which require two 16-bit values to represent a single code point.","pos":[1,188],"source":" The Unicode character set reserves the code points D800 through DFFF (55296 through 55551 decimal) for *surrogate pairs*, which require two 16-bit values to represent a single code point."},{"content":"A <ph id=\"ph1\">`Char`</ph> variable cannot hold a surrogate pair, and a <ph id=\"ph2\">`String`</ph> uses two positions to hold such a pair.","pos":[189,291],"source":" A `Char` variable cannot hold a surrogate pair, and a `String` uses two positions to hold such a pair."}]}]},{"pos":[2350,2467],"content":"For more information, see <bpt id=\"p1\">[</bpt>Char Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/char-data-type.md)</ept>.","source":"For more information, see [Char Data Type](../../../../visual-basic/language-reference/data-types/char-data-type.md)."},{"pos":[2476,2487],"content":"String Type","linkify":"String Type","nodes":[{"content":"String Type","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`String`</ph> data type is a sequence of zero or more two-byte (16-bit) Unicode characters.","pos":[2491,2581],"source":"The `String` data type is a sequence of zero or more two-byte (16-bit) Unicode characters."},{"content":"If a variable can contain an indefinite number of characters, declare it as <ph id=\"ph1\">`String`</ph>.","pos":[2582,2667],"source":" If a variable can contain an indefinite number of characters, declare it as `String`."},{"content":"For example:","pos":[2668,2680]},{"pos":[2687,2840],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrCharTypes#2<ept id=\"p2\">](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/character-data-types_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrCharTypes#2](../../../../visual-basic/programming-guide/language-features/data-types/codesnippet/VisualBasic/character-data-types_2.vb)]"},{"pos":[2847,2968],"content":"For more information, see <bpt id=\"p1\">[</bpt>String Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept>.","source":"For more information, see [String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md)."},{"pos":[2977,2985],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Elementary Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2989,3111],"source":"[Elementary Data Types](../../../../visual-basic/programming-guide/language-features/data-types/elementary-data-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Composite Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[3114,3235],"source":" [Composite Data Types](../../../../visual-basic/programming-guide/language-features/data-types/composite-data-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[3238,3361],"source":" [Generic Types in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Value Types and Reference Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[3364,3507],"source":" [Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type Conversions in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3510,3639],"source":" [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Troubleshooting Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[3642,3775],"source":" [Troubleshooting Data Types](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type Characters<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept>","pos":[3778,3888],"source":" [Type Characters](../../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)"}]}