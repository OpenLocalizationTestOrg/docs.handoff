{"content":"---\ntitle: \"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: e566c15a-b600-4e4a-be3a-4af43e767dae\ncaps.latest.revision: 8\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model\nSometimes developers must have full control of how data is returned from a service operation. This is the case when a service operation must return data in a format not supported by[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]. This topic discusses using the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] REST Programming Model to create a service that receives arbitrary data.  \n  \n### To implement the service contract  \n  \n1.  Define the service contract. The operation that receives the arbitrary data must have a parameter of type <xref:System.IO.Stream>. In addition, this parameter must be the only parameter passed in the body of the request. The operation described in this example also takes a filename parameter. This parameter is passed within the URL of the request. You can specify that a parameter is passed within the URL by specifying a <xref:System.UriTemplate> in the <xref:System.ServiceModel.Web.WebInvokeAttribute>. In this case the URI used to call this method ends in \"UploadFile/Some-Filename\". The \"{filename}\" portion of the URI template specifies that the filename parameter for the operation is passed within the URI used to call the operation.  \n  \n    ```csharp  \n     [ServiceContract]  \n    public interface IReceiveData  \n    {  \n        [WebInvoke(UriTemplate = \"UploadFile/{fileName}\")]  \n        void UploadFile(string fileName, Stream fileContents);  \n    }  \n    ```  \n  \n2.  Implement the service contract. The contract has only one method, `UploadFile` that receives a file of arbitrary data in a stream. The operation reads the stream counting the number of bytes read and then displays the filename and the number of bytes read.  \n  \n    ```csharp  \n    public class RawDataService : IReceiveData  \n    {  \n        public void UploadFile(string fileName, Stream fileContents)  \n        {  \n            byte[] buffer = new byte[10000];  \n            int bytesRead, totalBytesRead = 0;  \n            do  \n            {  \n                bytesRead = fileContents.Read(buffer, 0, buffer.Length);  \n                totalBytesRead += bytesRead;  \n            } while (bytesRead > 0);  \n            Console.WriteLine(\"Service: Received file {0} with {1} bytes\", fileName, totalBytesRead);  \n        }  \n    }  \n    ```  \n  \n### To host the service  \n  \n1.  Create a console application to host the service.  \n  \n    ```csharp  \n    class Program  \n    {  \n       static void Main(string[] args)  \n       {  \n       }  \n    }  \n  \n    ```  \n  \n2.  Create a variable to hold the base address for the service within the `Main` method.  \n  \n    ```csharp  \n    string baseAddress = \"http://\" + Environment.MachineName + \":8000/Service\";  \n    ```  \n  \n3.  Create a <xref:System.ServiceModel.ServiceHost> instance for the service that specifies the service class and the base address.  \n  \n    ```csharp  \n    ServiceHost host = new ServiceHost(typeof(RawDataService), new Uri(baseAddress));  \n    ```  \n  \n4.  Add an endpoint that specifies the contract, <xref:System.ServiceModel.WebHttpBinding>, and <xref:System.ServiceModel.Description.WebHttpBehavior>.  \n  \n    ```csharp  \n    host.AddServiceEndpoint(typeof(IReceiveData), new WebHttpBinding(), \"\").Behaviors.Add(new WebHttpBehavior());  \n    ```  \n  \n5.  Open the service host. The service is now ready to receive requests.  \n  \n    ```csharp  \n    host.Open();  \n    Console.WriteLine(\"Host opened\");  \n    ```  \n  \n### To call the service programmatically  \n  \n1.  Create a <xref:System.Net.HttpWebRequest> with the URI used to call the service. In this code, the base address is combined with `\"/UploadFile/Text\"`. The `\"UploadFile\"` portion of the URI specifies the operation to call. The `\"Test.txt\"` portion of the URI specifies the filename parameter to pass to the `UploadFile` operation. Both of these items map to the <xref:System.UriTemplate> applied to the operation contract.  \n  \n    ```csharp  \n    HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(baseAddress + \"/UploadFile/Test.txt\");  \n  \n    ```  \n  \n2.  Set the <xref:System.Net.HttpWebRequest.Method%2A> property of the <xref:System.Net.HttpWebRequest> to `POST` and the <xref:System.Net.HttpWebRequest.ContentType%2A> property to `\"text/plain\"`. This tells the service that the code is sending data and that data is in plain text.  \n  \n    ```csharp  \n    req.Method = \"POST\";  \n    req.ContentType = \"text/plain\";  \n    ```  \n  \n3.  Call <xref:System.Net.HttpWebRequest.GetRequestStream%2A> to get the request stream, create the data to send, write that data to the request stream, and close the stream.  \n  \n    ```csharp  \n    Stream reqStream = req.GetRequestStream();  \n    byte[] fileToSend = new byte[12345];  \n    for (int i = 0; i < fileToSend.Length; i++)  \n       {  \n           fileToSend[i] = (byte)('a' + (i % 26));  \n       }  \n    reqStream.Write(fileToSend, 0, fileToSend.Length);  \n    reqStream.Close();  \n    ```  \n  \n4.  Get the response from the service by calling <xref:System.Net.HttpWebRequest.GetResponse%2A> and display the response data to the console.  \n  \n    ```csharp  \n    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();  \n    Console.WriteLine(\"Client: Receive Response HTTP/{0} {1} {2}\", resp.ProtocolVersion, (int)resp.StatusCode, resp.StatusDescription);  \n  \n    ```  \n  \n5.  Close the service host.  \n  \n    ```csharp  \n    host.Close();  \n    ```  \n  \n## Example  \n The following is a complete listing of the code for this example.  \n  \n```csharp  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Text;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Web;  \nusing System.ServiceModel.Description;  \nusing System.IO;  \nusing System.Net;  \n  \nnamespace ReceiveRawData  \n{  \n    [ServiceContract]  \n    public interface IReceiveData  \n    {  \n        [WebInvoke(UriTemplate = \"UploadFile/{fileName}\")]  \n        void UploadFile(string fileName, Stream fileContents);  \n    }  \n    public class RawDataService : IReceiveData  \n    {  \n        public void UploadFile(string fileName, Stream fileContents)  \n        {  \n            byte[] buffer = new byte[10000];  \n            int bytesRead, totalBytesRead = 0;  \n            do  \n            {  \n                bytesRead = fileContents.Read(buffer, 0, buffer.Length);  \n                totalBytesRead += bytesRead;  \n            } while (bytesRead > 0);  \n            Console.WriteLine(\"Service: Received file {0} with {1} bytes\", fileName, totalBytesRead);  \n        }  \n    }  \n  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            string baseAddress = \"http://\" + Environment.MachineName + \":8000/Service\";  \n            ServiceHost host = new ServiceHost(typeof(RawDataService), new Uri(baseAddress));  \n            host.AddServiceEndpoint(typeof(IReceiveData), new WebHttpBinding(), \"\").Behaviors.Add(new WebHttpBehavior());  \n            host.Open();  \n            Console.WriteLine(\"Host opened\");  \n  \n            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(baseAddress + \"/UploadFile/Test.txt\");  \n            req.Method = \"POST\";  \n            req.ContentType = \"text/plain\";  \n            Stream reqStream = req.GetRequestStream();  \n            byte[] fileToSend = new byte[12345];  \n            for (int i = 0; i < fileToSend.Length; i++)  \n            {  \n                fileToSend[i] = (byte)('a' + (i % 26));  \n            }  \n            reqStream.Write(fileToSend, 0, fileToSend.Length);  \n            reqStream.Close();  \n            HttpWebResponse resp = (HttpWebResponse)req.GetResponse();  \n            Console.WriteLine(\"Client: Receive Response HTTP/{0} {1} {2}\", resp.ProtocolVersion, (int)resp.StatusCode, resp.StatusDescription);  \n            host.Close();  \n  \n        }  \n    }  \n}  \n  \n```  \n  \n## Compiling the Code  \n  \n-   When compiling the code reference System.ServiceModel.dll and System.ServiceModel.Web.dll  \n  \n## See Also  \n [UriTemplate and UriTemplateTable](../../../../docs/framework/wcf/feature-details/uritemplate-and-uritemplatetable.md)   \n [WCF Web HTTP Programming Model](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)   \n [WCF Web HTTP Programming Model Overview](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model-overview.md)","nodes":[{"pos":[12,118],"content":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model | Microsoft Docs","pos":[0,106]}]},{"pos":[416,505],"content":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model","linkify":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model","nodes":[{"content":"How to: Create a Service That Accepts Arbitrary Data using the WCF REST Programming Model","pos":[0,89]}]},{"content":"Sometimes developers must have full control of how data is returned from a service operation.","pos":[506,599]},{"content":"This is the case when a service operation must return data in a format not supported by<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.","pos":[600,743],"source":" This is the case when a service operation must return data in a format not supported by[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]."},{"content":"This topic discusses using the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> REST Programming Model to create a service that receives arbitrary data.","pos":[744,903],"source":" This topic discusses using the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] REST Programming Model to create a service that receives arbitrary data."},{"pos":[913,946],"content":"To implement the service contract","linkify":"To implement the service contract","nodes":[{"content":"To implement the service contract","pos":[0,33]}]},{"content":"Define the service contract.","pos":[956,984]},{"content":"The operation that receives the arbitrary data must have a parameter of type <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph>.","pos":[985,1086],"source":" The operation that receives the arbitrary data must have a parameter of type <xref:System.IO.Stream>."},{"content":"In addition, this parameter must be the only parameter passed in the body of the request.","pos":[1087,1176]},{"content":"The operation described in this example also takes a filename parameter.","pos":[1177,1249]},{"content":"This parameter is passed within the URL of the request.","pos":[1250,1305]},{"content":"You can specify that a parameter is passed within the URL by specifying a <ph id=\"ph1\">&lt;xref:System.UriTemplate&gt;</ph> in the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph>.","pos":[1306,1463],"source":" You can specify that a parameter is passed within the URL by specifying a <xref:System.UriTemplate> in the <xref:System.ServiceModel.Web.WebInvokeAttribute>."},{"content":"In this case the URI used to call this method ends in \"UploadFile/Some-Filename\".","pos":[1464,1545]},{"content":"The \"{filename}\" portion of the URI template specifies that the filename parameter for the operation is passed within the URI used to call the operation.","pos":[1546,1699]},{"content":"Implement the service contract.","pos":[1941,1972]},{"content":"The contract has only one method, <ph id=\"ph1\">`UploadFile`</ph> that receives a file of arbitrary data in a stream.","pos":[1973,2071],"source":" The contract has only one method, `UploadFile` that receives a file of arbitrary data in a stream."},{"content":"The operation reads the stream counting the number of bytes read and then displays the filename and the number of bytes read.","pos":[2072,2197]},{"pos":[2790,2809],"content":"To host the service","linkify":"To host the service","nodes":[{"content":"To host the service","pos":[0,19]}]},{"content":"Create a console application to host the service.","pos":[2819,2868]},{"pos":[3009,3093],"content":"Create a variable to hold the base address for the service within the <ph id=\"ph1\">`Main`</ph> method.","source":"Create a variable to hold the base address for the service within the `Main` method."},{"content":"Create a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> instance for the service that specifies the service class and the base address.","pos":[3214,3341],"source":"Create a <xref:System.ServiceModel.ServiceHost> instance for the service that specifies the service class and the base address."},{"content":"Add an endpoint that specifies the contract, <ph id=\"ph1\">&lt;xref:System.ServiceModel.WebHttpBinding&gt;</ph>, and <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.WebHttpBehavior&gt;</ph>.","pos":[3468,3615],"source":"Add an endpoint that specifies the contract, <xref:System.ServiceModel.WebHttpBinding>, and <xref:System.ServiceModel.Description.WebHttpBehavior>."},{"content":"Open the service host.","pos":[3770,3792]},{"content":"The service is now ready to receive requests.","pos":[3793,3838]},{"pos":[3936,3972],"content":"To call the service programmatically","linkify":"To call the service programmatically","nodes":[{"content":"To call the service programmatically","pos":[0,36]}]},{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest&gt;</ph> with the URI used to call the service.","pos":[3982,4062],"source":"Create a <xref:System.Net.HttpWebRequest> with the URI used to call the service."},{"content":"In this code, the base address is combined with <ph id=\"ph1\">`\"/UploadFile/Text\"`</ph>.","pos":[4063,4132],"source":" In this code, the base address is combined with `\"/UploadFile/Text\"`."},{"content":"The <ph id=\"ph1\">`\"UploadFile\"`</ph> portion of the URI specifies the operation to call.","pos":[4133,4203],"source":" The `\"UploadFile\"` portion of the URI specifies the operation to call."},{"content":"The <ph id=\"ph1\">`\"Test.txt\"`</ph> portion of the URI specifies the filename parameter to pass to the <ph id=\"ph2\">`UploadFile`</ph> operation.","pos":[4204,4311],"source":" The `\"Test.txt\"` portion of the URI specifies the filename parameter to pass to the `UploadFile` operation."},{"content":"Both of these items map to the <ph id=\"ph1\">&lt;xref:System.UriTemplate&gt;</ph> applied to the operation contract.","pos":[4312,4403],"source":" Both of these items map to the <xref:System.UriTemplate> applied to the operation contract."},{"content":"Set the <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.Method%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Net.HttpWebRequest&gt;</ph> to <ph id=\"ph3\">`POST`</ph> and the <ph id=\"ph4\">&lt;xref:System.Net.HttpWebRequest.ContentType%2A&gt;</ph> property to <ph id=\"ph5\">`\"text/plain\"`</ph>.","pos":[4549,4742],"source":"Set the <xref:System.Net.HttpWebRequest.Method%2A> property of the <xref:System.Net.HttpWebRequest> to `POST` and the <xref:System.Net.HttpWebRequest.ContentType%2A> property to `\"text/plain\"`."},{"content":"This tells the service that the code is sending data and that data is in plain text.","pos":[4743,4827]},{"content":"Call <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.GetRequestStream%2A&gt;</ph> to get the request stream, create the data to send, write that data to the request stream, and close the stream.","pos":[4931,5101],"source":"Call <xref:System.Net.HttpWebRequest.GetRequestStream%2A> to get the request stream, create the data to send, write that data to the request stream, and close the stream."},{"content":"Get the response from the service by calling <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.GetResponse%2A&gt;</ph> and display the response data to the console.","pos":[5439,5577],"source":"Get the response from the service by calling <xref:System.Net.HttpWebRequest.GetResponse%2A> and display the response data to the console."},{"content":"Close the service host.","pos":[5822,5845]},{"pos":[5903,5910],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following is a complete listing of the code for this example.","pos":[5914,5979]},{"pos":[8311,8329],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"When compiling the code reference System.ServiceModel.dll and System.ServiceModel.Web.dll","pos":[8339,8428]},{"pos":[8437,8445],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>UriTemplate and UriTemplateTable<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/uritemplate-and-uritemplatetable.md)</ept><ph id=\"ph1\"> </ph>","pos":[8449,8568],"source":"[UriTemplate and UriTemplateTable](../../../../docs/framework/wcf/feature-details/uritemplate-and-uritemplatetable.md) "},{"content":"<bpt id=\"p1\"> [</bpt>WCF Web HTTP Programming Model<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)</ept><ph id=\"ph1\"> </ph>","pos":[8571,8687],"source":" [WCF Web HTTP Programming Model](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md) "},{"content":"<bpt id=\"p1\"> [</bpt>WCF Web HTTP Programming Model Overview<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model-overview.md)</ept>","pos":[8690,8823],"source":" [WCF Web HTTP Programming Model Overview](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model-overview.md)"}]}