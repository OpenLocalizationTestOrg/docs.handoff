{"content":"---\ntitle: \"How to: Extract a Protocol and Port Number from a URL | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"searching with regular expressions, examples\"\n  - \"parsing text with regular expressions, examples\"\n  - \"regular expressions, examples\"\n  - \".NET Framework regular expressions, examples\"\n  - \"regular expressions [.NET Framework], examples\"\n  - \"pattern-matching with regular expressions, examples\"\nms.assetid: ab7f62b3-6d2c-4efb-8ac6-28600df5fd5c\ncaps.latest.revision: 15\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Extract a Protocol and Port Number from a URL\nThe following example extracts a protocol and port number from a URL.  \n  \n## Example  \n The example uses the <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=fullName> method to return the protocol followed by a colon followed by the port number.  \n  \n [!code-csharp[RegularExpressions.Examples.Protocol#1](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/cs/Example.cs#1)]\n [!code-vb[RegularExpressions.Examples.Protocol#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/vb/Example.vb#1)]  \n  \n The regular expression pattern `^(?<proto>\\w+)://[^/]+?(?<port>:\\d+)?/` can be interpreted as shown in the following table.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`^`|Begin the match at the start of the string.|  \n|`(?<proto>\\w+)`|Match one or more word characters. Name this group `proto`.|  \n|`://`|Match a colon followed by two slash marks.|  \n|`[^/]+?`|Match one or more occurrences (but as few as possible) of any character other than a slash mark.|  \n|`(?<port>:\\d+)?`|Match zero or one occurrence of a colon followed by one or more digit characters. Name this group `port`.|  \n|`/`|Match a slash mark.|  \n  \n The <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=fullName> method expands the `${proto}${port}` replacement sequence, which concatenates the value of the two named groups captured in the regular expression pattern. It is a convenient alternative to explicitly concatenating the strings retrieved from the collection object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property.  \n  \n The example uses the <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=fullName> method with two substitutions, `${proto}` and `${port}`, to include the captured groups in the output string. You can retrieve the captured groups from the match's <xref:System.Text.RegularExpressions.GroupCollection> object instead, as the following code shows.  \n  \n [!code-csharp[RegularExpressions.Examples.Protocol#2](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/cs/example2.cs#2)]\n [!code-vb[RegularExpressions.Examples.Protocol#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/vb/example2.vb#2)]  \n  \n## See Also  \n [.NET Regular Expressions](../../../docs/standard/base-types/regular-expressions.md)","nodes":[{"pos":[12,82],"content":"How to: Extract a Protocol and Port Number from a URL | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Extract a Protocol and Port Number from a URL | Microsoft Docs","pos":[0,70]}]},{"pos":[699,752],"content":"How to: Extract a Protocol and Port Number from a URL","linkify":"How to: Extract a Protocol and Port Number from a URL","nodes":[{"content":"How to: Extract a Protocol and Port Number from a URL","pos":[0,53]}]},{"content":"The following example extracts a protocol and port number from a URL.","pos":[753,822]},{"pos":[831,838],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The example uses the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=fullName&gt;</ph> method to return the protocol followed by a colon followed by the port number.","pos":[842,1020],"source":"The example uses the <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=fullName> method to return the protocol followed by a colon followed by the port number."},{"pos":[1027,1344],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>RegularExpressions.Examples.Protocol#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/cs/Example.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>RegularExpressions.Examples.Protocol#1<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/vb/Example.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[RegularExpressions.Examples.Protocol#1](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/cs/Example.cs#1)]\n [!code-vb[RegularExpressions.Examples.Protocol#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/vb/Example.vb#1)]"},{"pos":[1351,1474],"content":"The regular expression pattern <ph id=\"ph1\">`^(?&lt;proto&gt;\\w+)://[^/]+?(?&lt;port&gt;:\\d+)?/`</ph> can be interpreted as shown in the following table.","source":"The regular expression pattern `^(?<proto>\\w+)://[^/]+?(?<port>:\\d+)?/` can be interpreted as shown in the following table."},{"content":"Pattern","pos":[1481,1488]},{"content":"Description","pos":[1489,1500]},{"content":"Begin the match at the start of the string.","pos":[1545,1588]},{"content":"Match one or more word characters.","pos":[1609,1643]},{"content":"Name this group <ph id=\"ph1\">`proto`</ph>.","pos":[1644,1668],"source":" Name this group `proto`."},{"content":"Match a colon followed by two slash marks.","pos":[1679,1721]},{"content":"Match one or more occurrences (but as few as possible) of any character other than a slash mark.","pos":[1735,1831]},{"content":"Match zero or one occurrence of a colon followed by one or more digit characters.","pos":[1853,1934]},{"content":"Name this group <ph id=\"ph1\">`port`</ph>.","pos":[1935,1958],"source":" Name this group `port`."},{"content":"Match a slash mark.","pos":[1967,1986]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=fullName&gt;</ph> method expands the <ph id=\"ph2\">`${proto}${port}`</ph> replacement sequence, which concatenates the value of the two named groups captured in the regular expression pattern.","pos":[1994,2232],"source":"The <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=fullName> method expands the `${proto}${port}` replacement sequence, which concatenates the value of the two named groups captured in the regular expression pattern."},{"content":"It is a convenient alternative to explicitly concatenating the strings retrieved from the collection object returned by the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName&gt;</ph> property.","pos":[2233,2445],"source":" It is a convenient alternative to explicitly concatenating the strings retrieved from the collection object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property."},{"content":"The example uses the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=fullName&gt;</ph> method with two substitutions, <ph id=\"ph2\">`${proto}`</ph> and <ph id=\"ph3\">`${port}`</ph>, to include the captured groups in the output string.","pos":[2452,2661],"source":"The example uses the <xref:System.Text.RegularExpressions.Match.Result%2A?displayProperty=fullName> method with two substitutions, `${proto}` and `${port}`, to include the captured groups in the output string."},{"content":"You can retrieve the captured groups from the match's <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object instead, as the following code shows.","pos":[2662,2814],"source":" You can retrieve the captured groups from the match's <xref:System.Text.RegularExpressions.GroupCollection> object instead, as the following code shows."},{"pos":[2821,3140],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>RegularExpressions.Examples.Protocol#2<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/cs/example2.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>RegularExpressions.Examples.Protocol#2<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/vb/example2.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[RegularExpressions.Examples.Protocol#2](../../../samples/snippets/csharp/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/cs/example2.cs#2)]\n [!code-vb[RegularExpressions.Examples.Protocol#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/RegularExpressions.Examples.Protocol/vb/example2.vb#2)]"},{"pos":[3149,3157],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3161,3245],"content":"<bpt id=\"p1\">[</bpt>.NET Regular Expressions<ept id=\"p1\">](../../../docs/standard/base-types/regular-expressions.md)</ept>","source":"[.NET Regular Expressions](../../../docs/standard/base-types/regular-expressions.md)"}]}