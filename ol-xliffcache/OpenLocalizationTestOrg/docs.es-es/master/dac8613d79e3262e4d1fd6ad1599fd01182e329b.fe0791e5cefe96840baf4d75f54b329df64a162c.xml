{"content":"---\ntitle: \"Operator declaration must be one of:  +,-,*,-,-,^, &amp;, Like, Mod, And, Or, Xor, Not, <<, >>, =, <>, <, <=, >, >=, CType, IsTrue, IsFalse\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc33000\"\n  - \"vbc33000\"\nhelpviewer_keywords: \n  - \"BC33000\"\nms.assetid: 15c5d8eb-3a8c-4141-8f41-33151afabf97\n---\n# Operator declaration must be one of:  +,-,*,\\,/,^, &amp;, Like, Mod, And, Or, Xor, Not, \\<\\<, >>...\nYou can declare only an operator that is eligible for overloading. The following table lists the operators you can declare.  \n  \n|Type|Operators|  \n|----------|---------------|  \n|Unary|`+`, `-`, `IsFalse`, `IsTrue`, `Not`|  \n|Binary|`+`, `-`, `*`, `/`, `\\`, `&`, `^`, `>>`, `<<`, `=`, `<>`, `>`, `>=`, `<`, `<=`, `And`, `Like`, `Mod`, `Or`, `Xor`|  \n|Conversion (unary)|`CType`|  \n  \n Note that the `=` operator in the binary list is the comparison operator, not the assignment operator.  \n  \n **Error ID:** BC33000  \n  \n## To correct this error  \n  \n1.  Select an operator from the set of overloadable operators.  \n  \n2.  If you need the functionality of overloading an operator that you cannot overload directly, create a `Function` procedure that takes the appropriate parameters and returns the appropriate value.  \n  \n## See also\n\n- [Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)\n- [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)\n- [How to: Define an Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)\n- [How to: Define a Conversion Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)\n- [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)\n","nodes":[{"pos":[4,300],"embed":true,"restype":"x-metadata","content":"title: \"Operator declaration must be one of:  +,-,*,-,-,^, &amp;, Like, Mod, And, Or, Xor, Not, <<, >>, =, <>, <, <=, >, >=, CType, IsTrue, IsFalse\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc33000\"\n  - \"vbc33000\"\nhelpviewer_keywords: \n  - \"BC33000\"\nms.assetid: 15c5d8eb-3a8c-4141-8f41-33151afabf97","nodes":[{"content":"Operator declaration must be one of:  +,-,*,-,-,^, &amp;, Like, Mod, And, Or, Xor, Not, <<, >>, =, <>, <, <=, >, >=, CType, IsTrue, IsFalse","nodes":[{"pos":[0,139],"content":"Operator declaration must be one of:  +,-,*,-,-,^, &amp;, Like, Mod, And, Or, Xor, Not, <<, >>, =, <>, <, <=, >, >=, CType, IsTrue, IsFalse","nodes":[{"content":"Operator declaration must be one of:  +,-,*,-,-,^, <ph id=\"ph1\">&amp;amp;</ph>, Like, Mod, And, Or, Xor, Not, &lt;&lt;, &gt;&gt;, =, &lt;&gt;, &lt;, &lt;=, &gt;, &gt;=, CType, IsTrue, IsFalse","pos":[0,139],"source":"Operator declaration must be one of:  +,-,*,-,-,^, &amp;, Like, Mod, And, Or, Xor, Not, <<, >>, =, <>, <, <=, >, >=, CType, IsTrue, IsFalse"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[307,406],"content":"Operator declaration must be one of:  +,-,*,\\,/,^, &amp;, Like, Mod, And, Or, Xor, Not, \\<\\<, >>...","linkify":"Operator declaration must be one of:  +,-,*,\\,/,^, &amp;, Like, Mod, And, Or, Xor, Not, \\<\\<, >>...","nodes":[{"content":"Operator declaration must be one of:  +,-,*,<ph id=\"ph1\">\\,</ph>/,^, <ph id=\"ph2\">&amp;amp;</ph>, Like, Mod, And, Or, Xor, Not, <ph id=\"ph3\">\\&lt;</ph><ph id=\"ph4\">\\&lt;</ph>, &gt;&gt;...","pos":[0,99],"source":"Operator declaration must be one of:  +,-,*,\\,/,^, &amp;, Like, Mod, And, Or, Xor, Not, \\<\\<, >>..."}]},{"content":"You can declare only an operator that is eligible for overloading.","pos":[407,473]},{"content":"The following table lists the operators you can declare.","pos":[474,530]},{"content":"Type","pos":[537,541]},{"content":"Operators","pos":[542,551]},{"content":"Unary","pos":[587,592]},{"pos":[593,629],"content":"<ph id=\"ph1\">`+`</ph>, <ph id=\"ph2\">`-`</ph>, <ph id=\"ph3\">`IsFalse`</ph>, <ph id=\"ph4\">`IsTrue`</ph>, <ph id=\"ph5\">`Not`</ph>","source":"`+`, `-`, `IsFalse`, `IsTrue`, `Not`"},{"content":"Binary","pos":[634,640]},{"pos":[641,754],"content":"<ph id=\"ph1\">`+`</ph>, <ph id=\"ph2\">`-`</ph>, <ph id=\"ph3\">`*`</ph>, <ph id=\"ph4\">`/`</ph>, <ph id=\"ph5\">`\\`</ph>, <ph id=\"ph6\">`&amp;`</ph>, <ph id=\"ph7\">`^`</ph>, <ph id=\"ph8\">`&gt;&gt;`</ph>, <ph id=\"ph9\">`&lt;&lt;`</ph>, <ph id=\"ph10\">`=`</ph>, <ph id=\"ph11\">`&lt;&gt;`</ph>, <ph id=\"ph12\">`&gt;`</ph>, <ph id=\"ph13\">`&gt;=`</ph>, <ph id=\"ph14\">`&lt;`</ph>, <ph id=\"ph15\">`&lt;=`</ph>, <ph id=\"ph16\">`And`</ph>, <ph id=\"ph17\">`Like`</ph>, <ph id=\"ph18\">`Mod`</ph>, <ph id=\"ph19\">`Or`</ph>, <ph id=\"ph20\">`Xor`</ph>","source":"`+`, `-`, `*`, `/`, `\\`, `&`, `^`, `>>`, `<<`, `=`, `<>`, `>`, `>=`, `<`, `<=`, `And`, `Like`, `Mod`, `Or`, `Xor`"},{"content":"Conversion (unary)","pos":[759,777]},{"pos":[793,895],"content":"Note that the <ph id=\"ph1\">`=`</ph> operator in the binary list is the comparison operator, not the assignment operator.","source":"Note that the `=` operator in the binary list is the comparison operator, not the assignment operator."},{"pos":[902,923],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC33000","source":"**Error ID:** BC33000"},{"pos":[932,953],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Select an operator from the set of overloadable operators.","pos":[963,1021]},{"pos":[1031,1225],"content":"If you need the functionality of overloading an operator that you cannot overload directly, create a <ph id=\"ph1\">`Function`</ph> procedure that takes the appropriate parameters and returns the appropriate value.","source":"If you need the functionality of overloading an operator that you cannot overload directly, create a `Function` procedure that takes the appropriate parameters and returns the appropriate value."},{"pos":[1234,1242],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1246,1341],"content":"<bpt id=\"p1\">[</bpt>Operator Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/operator-statement.md)</ept>","source":"[Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)"},{"pos":[1344,1458],"content":"<bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>","source":"[Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)"},{"pos":[1461,1588],"content":"<bpt id=\"p1\">[</bpt>How to: Define an Operator<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept>","source":"[How to: Define an Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)"},{"pos":[1591,1738],"content":"<bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>","source":"[How to: Define a Conversion Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)"},{"pos":[1741,1836],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"}]}