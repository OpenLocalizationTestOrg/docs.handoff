<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-activity-delegates.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b67c771b00b5aeb4705cdfa0beea3d46e5f65bab</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\using-activity-delegates.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57d8e5b83172c6cbf9b7ba897466c06e7178f7f2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2c0cc9d6381bfbbeba9d4a22cdbdc77795a3be3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using Activity Delegates | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Activity Delegates</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Activity delegates enable activity authors to expose callbacks with specific signatures, for which users of the activity can provide activity-based handlers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Two types of activity delegates are available: <ph id="ph1">&lt;xref:System.Activities.ActivityAction%601&gt;</ph> is used to define activity delegates that do not have a return value, and <ph id="ph2">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph> is used to define activity delegates that do have a return value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Activity delegates are useful in scenarios where a child activity must be constrained to having a certain signature.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">&lt;xref:System.Activities.Statements.While&gt;</ph> activity can contain any type of child activity with no constraints, but the body of a <ph id="ph2">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity is an <ph id="ph3">&lt;xref:System.Activities.ActivityAction%601&gt;</ph>, and the child activity that is ultimately executed by <ph id="ph4">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> must have an <ph id="ph5">&lt;xref:System.Activities.InArgument%601&gt;</ph> that is the same type of the members of the collection that the <ph id="ph6">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> enumerates.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using ActivityAction</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Several <ph id="ph1">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> activities use activity actions, such as the <ph id="ph2">&lt;xref:System.Activities.Statements.Catch&gt;</ph> activity and the <ph id="ph3">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In each case, the activity action represents a location where the workflow author specifies an activity to provide the desired behavior when composing a workflow using one of these activities.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity is used to display text to the console window.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The body of the <ph id="ph1">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> is specified by using an <ph id="ph2">&lt;xref:System.Activities.ActivityAction%601&gt;</ph> that matches the type of the <ph id="ph3">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> which is string.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity specified in the <ph id="ph2">&lt;xref:System.Activities.ActivityDelegate.Handler%2A&gt;</ph> has its <ph id="ph3">&lt;xref:System.Activities.Statements.WriteLine.Text%2A&gt;</ph> argument bound to the string values in the collection that the <ph id="ph4">&lt;xref:System.Activities.Statements.ForEach%601&gt;</ph> activity iterates.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The actionArgument is used to flow the individual items in the collection to the WriteLine.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When the workflow is invoked, the following output is displayed to the console.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The examples in this topic use object initialization syntax.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Object initialization syntax can be a useful way to create workflow definitions in code because it provides a hierarchical view of the activities in the workflow and shows the relationship between the activities.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There is no requirement to use object initialization syntax when you programmatically create workflows.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example is functionally equivalent to the previous example.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>object initializers, see <bpt id="p1">[</bpt>How to: Initialize Objects without Calling a Constructor (C# Programming Guide)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=161015)</ept> and <bpt id="p2">[</bpt>How to: Declare an Object by Using an Object Initializer<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=161016)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity is used in a workflow.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.ApplicationException&gt;</ph> is thrown by the workflow, and is handled by a <ph id="ph2">&lt;xref:System.Activities.Statements.Catch%601&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The handler for the <ph id="ph1">&lt;xref:System.Activities.Statements.Catch%601&gt;</ph> activity's activity action is a <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity, and the exception detail is flowed through to it using the <ph id="ph3">`ex`</ph> <ph id="ph4">&lt;xref:System.Activities.DelegateInArgument%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When creating a custom activity that defines an <ph id="ph1">&lt;xref:System.Activities.ActivityAction%601&gt;</ph>, use an <ph id="ph2">&lt;xref:System.Activities.Statements.InvokeAction%601&gt;</ph> to model the invocation of that <ph id="ph3">&lt;xref:System.Activities.ActivityAction%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this example, a custom <ph id="ph1">`WriteLineWithNotification`</ph> activity is defined.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This activity is composed of a <ph id="ph1">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> that contains a <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity followed by an <ph id="ph3">&lt;xref:System.Activities.Statements.InvokeAction%601&gt;</ph> that invokes an <ph id="ph4">&lt;xref:System.Activities.ActivityAction%601&gt;</ph> that takes one string argument.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When a workflow is created by using the <ph id="ph1">`WriteLineWithNotification`</ph> activity, the workflow author specifies the desired custom logic in the activity actionâ€™s <ph id="ph2">&lt;xref:System.Activities.ActivityDelegate.Handler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this example, a workflow is created that use the <ph id="ph1">`WriteLineWithNotification`</ph> activity, and a <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity is used as the <ph id="ph3">&lt;xref:System.Activities.ActivityDelegate.Handler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>There are multiple generic versions of <ph id="ph1">&lt;xref:System.Activities.Statements.InvokeAction%601&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.ActivityAction%601&gt;</ph> provided for passing one or more arguments.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Using ActivityFunc</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.ActivityAction%601&gt;</ph> is useful when there is no result value from the activity, and <ph id="ph2">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph> is used when a result value is returned.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When creating a custom activity that defines an <ph id="ph1">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph>, use an <ph id="ph2">&lt;xref:System.Activities.Expressions.InvokeFunc%601&gt;</ph>InvokeFunc to model the invocation of that <ph id="ph3">&lt;xref:System.Activities.ActivityFunc%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">`WriteFillerText`</ph> activity is defined.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To supply the filler text, an <ph id="ph1">&lt;xref:System.Activities.Expressions.InvokeFunc%601&gt;</ph> is specified that takes an integer argument and has a string result.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Once the filler text is retrieved, it is displayed to the console using a <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To supply the text, an activity must be used that takes one <ph id="ph1">`int`</ph> argument and has a string result.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This example shows a <ph id="ph1">`TextGenerator`</ph> activity that meets these requirements.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To use the <ph id="ph1">`TextGenerator`</ph> activity with the <ph id="ph2">`WriteRandomText`</ph> activity, specify it as the <ph id="ph3">&lt;xref:System.Activities.ActivityDelegate.Handler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exposing and Invoking ActivityActions<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/exposing-and-invoking-activityactions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>