{"content":"---\ntitle: .NET Framework technologies unavailable on .NET Core\ndescription: Learn about .NET Framework technologies that are unavailable on .NET Core\nauthor: cartermp\nms.author: mairaw\nms.date: 12/07/2018\n---\n\n# .NET Framework technologies unavailable on .NET Core\n\nSeveral technologies available to .NET Framework libraries aren't available for use with .NET Core, such as AppDomains, Remoting, Code Access Security (CAS), and Security Transparency. If your libraries rely on one or more of these technologies, consider the alternative approaches outlined below. For more information on API compatibility, the CoreFX team maintains a [List of behavioral changes/compat breaks and deprecated/legacy APIs](https://github.com/dotnet/corefx/wiki/ApiCompat) at GitHub.\n\nJust because an API or technology isn't currently implemented doesn't imply it's intentionally unsupported. You should first search the GitHub repositories for .NET Core to see if a particular issue you encounter is by design, but if you cannot find such an indicator, please file an issue in the [dotnet/corefx repository issues](https://github.com/dotnet/corefx/issues) at GitHub to ask for specific APIs and technologies. [Porting requests in the issues](https://github.com/dotnet/corefx/labels/port-to-core) are marked with the `port-to-core` label.\n\n## AppDomains\n\nApplication domains (AppDomains) isolate apps from one another. AppDomains require runtime support and are generally quite expensive. Creating additional app domains is not supported.. We don't plan on adding this capability in future. For code isolation, we recommend separate processes or using containers as an alternative. For the dynamic loading of assemblies, we recommend the new <xref:System.Runtime.Loader.AssemblyLoadContext> class.\n\nTo make code migration from .NET Framework easier, .NET Core exposes some of the <xref:System.AppDomain> API surface. Some of the APIs function normally (for example, <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>), some members do nothing (for example, <xref:System.AppDomain.SetCachePath%2A>), and some of them throw <xref:System.PlatformNotSupportedException> (for example, <xref:System.AppDomain.CreateDomain%2A>). Check the types you use against the [`System.AppDomain` reference source](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/AppDomain.cs) in the [dotnet/corefx GitHub repository](https://github.com/dotnet/corefx), making sure to select the branch that matches your implemented version.\n\n## Remoting\n\n.NET Remoting was identified as a problematic architecture. It's used for cross-AppDomain communication, which is no longer supported. Also, Remoting requires runtime support, which is expensive to maintain. For these reasons, .NET Remoting isn't supported on .NET Core, and we don't plan on adding support for it in the future.\n\nFor communication across processes, consider inter-process communication (IPC) mechanisms as an alternative to Remoting, such as the <xref:System.IO.Pipes> or the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> class.\n\nAcross machines, use a network-based solution as an alternative. Preferably, use a low-overhead plain text protocol, such as HTTP. The [Kestrel web server](https://docs.microsoft.com/aspnet/core/fundamentals/servers/kestrel), the web server used by ASP.NET Core, is an option here. Also consider using <xref:System.Net.Sockets> for network-based, cross-machine scenarios. For more options, see [.NET Open Source Developer Projects: Messaging](https://github.com/Microsoft/dotnet/blob/master/dotnet-developer-projects.md#messaging).\n\n## Code Access Security (CAS)\n\nSandboxing, which relies on the runtime or the framework to constrain which resources a managed application or library uses or runs, [isn't supported on .NET Framework](~/docs/framework/misc/code-access-security.md) and therefore is also not supported on .NET Core. There are too many cases in the .NET Framework and the runtime where an elevation of privileges occurs to continue treating CAS as a security boundary. In addition, CAS makes the implementation more complicated and often has correctness-performance implications for applications that don't intend to use it.\n\nUse security boundaries provided by the operating system, such as virtualization, containers, or user accounts for running processes with the minimum set of privileges.\n\n## Security Transparency\n\nSimilar to CAS, Security Transparency separates sandboxed code from security critical code in a declarative fashion but is [no longer supported as a security boundary](~/docs/framework/misc/security-transparent-code.md). This feature is heavily used by Silverlight. \n\nUse security boundaries provided by the operating system, such as virtualization, containers, or user accounts for running processes with the least set of privileges.\n\n>[!div class=\"step-by-step\"]\n>[Next](third-party-deps.md)\n","nodes":[{"pos":[4,205],"embed":true,"restype":"x-metadata","content":"title: .NET Framework technologies unavailable on .NET Core\ndescription: Learn about .NET Framework technologies that are unavailable on .NET Core\nauthor: cartermp\nms.author: mairaw\nms.date: 12/07/2018","nodes":[{"content":".NET Framework technologies unavailable on .NET Core","nodes":[{"pos":[0,52],"content":".NET Framework technologies unavailable on .NET Core","nodes":[{"content":".NET Framework technologies unavailable on .NET Core","pos":[0,52]}]}],"path":["title"],"nosxs":false},{"content":"Learn about .NET Framework technologies that are unavailable on .NET Core","nodes":[{"pos":[0,73],"content":"Learn about .NET Framework technologies that are unavailable on .NET Core","nodes":[{"content":"Learn about .NET Framework technologies that are unavailable on .NET Core","pos":[0,73]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[213,265],"content":".NET Framework technologies unavailable on .NET Core","linkify":".NET Framework technologies unavailable on .NET Core","nodes":[{"content":".NET Framework technologies unavailable on .NET Core","pos":[0,52]}]},{"content":"Several technologies available to .NET Framework libraries aren't available for use with .NET Core, such as AppDomains, Remoting, Code Access Security (CAS), and Security Transparency.","pos":[267,451]},{"content":"If your libraries rely on one or more of these technologies, consider the alternative approaches outlined below.","pos":[452,564]},{"content":"For more information on API compatibility, the CoreFX team maintains a <bpt id=\"p1\">[</bpt>List of behavioral changes/compat breaks and deprecated/legacy APIs<ept id=\"p1\">](https://github.com/dotnet/corefx/wiki/ApiCompat)</ept> at GitHub.","pos":[565,765],"source":" For more information on API compatibility, the CoreFX team maintains a [List of behavioral changes/compat breaks and deprecated/legacy APIs](https://github.com/dotnet/corefx/wiki/ApiCompat) at GitHub."},{"content":"Just because an API or technology isn't currently implemented doesn't imply it's intentionally unsupported.","pos":[767,874]},{"content":"You should first search the GitHub repositories for .NET Core to see if a particular issue you encounter is by design, but if you cannot find such an indicator, please file an issue in the <bpt id=\"p1\">[</bpt>dotnet/corefx repository issues<ept id=\"p1\">](https://github.com/dotnet/corefx/issues)</ept> at GitHub to ask for specific APIs and technologies.","pos":[875,1191],"source":" You should first search the GitHub repositories for .NET Core to see if a particular issue you encounter is by design, but if you cannot find such an indicator, please file an issue in the [dotnet/corefx repository issues](https://github.com/dotnet/corefx/issues) at GitHub to ask for specific APIs and technologies."},{"content":"<bpt id=\"p1\">[</bpt>Porting requests in the issues<ept id=\"p1\">](https://github.com/dotnet/corefx/labels/port-to-core)</ept> are marked with the <ph id=\"ph1\">`port-to-core`</ph> label.","pos":[1192,1320],"source":"[Porting requests in the issues](https://github.com/dotnet/corefx/labels/port-to-core) are marked with the `port-to-core` label."},{"pos":[1325,1335],"content":"AppDomains","linkify":"AppDomains","nodes":[{"content":"AppDomains","pos":[0,10]}]},{"content":"Application domains (AppDomains) isolate apps from one another.","pos":[1337,1400]},{"content":"AppDomains require runtime support and are generally quite expensive.","pos":[1401,1470]},{"content":"Creating additional app domains is not supported..","pos":[1471,1521]},{"content":"We don't plan on adding this capability in future.","pos":[1522,1572]},{"content":"For code isolation, we recommend separate processes or using containers as an alternative.","pos":[1573,1663]},{"content":"For the dynamic loading of assemblies, we recommend the new <ph id=\"ph1\">&lt;xref:System.Runtime.Loader.AssemblyLoadContext&gt;</ph> class.","pos":[1664,1779],"source":" For the dynamic loading of assemblies, we recommend the new <xref:System.Runtime.Loader.AssemblyLoadContext> class."},{"content":"To make code migration from .NET Framework easier, .NET Core exposes some of the <ph id=\"ph1\">&lt;xref:System.AppDomain&gt;</ph> API surface.","pos":[1781,1898],"source":"To make code migration from .NET Framework easier, .NET Core exposes some of the <xref:System.AppDomain> API surface."},{"content":"Some of the APIs function normally (for example, <ph id=\"ph1\">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph>), some members do nothing (for example, <ph id=\"ph2\">&lt;xref:System.AppDomain.SetCachePath%2A&gt;</ph>), and some of them throw <ph id=\"ph3\">&lt;xref:System.PlatformNotSupportedException&gt;</ph> (for example, <ph id=\"ph4\">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph>).","pos":[1899,2224],"source":" Some of the APIs function normally (for example, <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>), some members do nothing (for example, <xref:System.AppDomain.SetCachePath%2A>), and some of them throw <xref:System.PlatformNotSupportedException> (for example, <xref:System.AppDomain.CreateDomain%2A>)."},{"content":"Check the types you use against the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`System.AppDomain`</ph> reference source<ept id=\"p1\">](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/AppDomain.cs)</ept> in the <bpt id=\"p2\">[</bpt>dotnet/corefx GitHub repository<ept id=\"p2\">](https://github.com/dotnet/corefx)</ept>, making sure to select the branch that matches your implemented version.","pos":[2225,2535],"source":" Check the types you use against the [`System.AppDomain` reference source](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/AppDomain.cs) in the [dotnet/corefx GitHub repository](https://github.com/dotnet/corefx), making sure to select the branch that matches your implemented version."},{"pos":[2540,2548],"content":"Remoting","linkify":"Remoting","nodes":[{"content":"Remoting","pos":[0,8]}]},{"content":".NET Remoting was identified as a problematic architecture.","pos":[2550,2609]},{"content":"It's used for cross-AppDomain communication, which is no longer supported.","pos":[2610,2684]},{"content":"Also, Remoting requires runtime support, which is expensive to maintain.","pos":[2685,2757]},{"content":"For these reasons, .NET Remoting isn't supported on .NET Core, and we don't plan on adding support for it in the future.","pos":[2758,2878]},{"pos":[2880,3101],"content":"For communication across processes, consider inter-process communication (IPC) mechanisms as an alternative to Remoting, such as the <ph id=\"ph1\">&lt;xref:System.IO.Pipes&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.IO.MemoryMappedFiles.MemoryMappedFile&gt;</ph> class.","source":"For communication across processes, consider inter-process communication (IPC) mechanisms as an alternative to Remoting, such as the <xref:System.IO.Pipes> or the <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> class."},{"content":"Across machines, use a network-based solution as an alternative.","pos":[3103,3167]},{"content":"Preferably, use a low-overhead plain text protocol, such as HTTP.","pos":[3168,3233]},{"content":"The <bpt id=\"p1\">[</bpt>Kestrel web server<ept id=\"p1\">](https://docs.microsoft.com/aspnet/core/fundamentals/servers/kestrel)</ept>, the web server used by ASP.NET Core, is an option here.","pos":[3234,3384],"source":" The [Kestrel web server](https://docs.microsoft.com/aspnet/core/fundamentals/servers/kestrel), the web server used by ASP.NET Core, is an option here."},{"content":"Also consider using <ph id=\"ph1\">&lt;xref:System.Net.Sockets&gt;</ph> for network-based, cross-machine scenarios.","pos":[3385,3474],"source":" Also consider using <xref:System.Net.Sockets> for network-based, cross-machine scenarios."},{"content":"For more options, see <bpt id=\"p1\">[</bpt>.NET Open Source Developer Projects: Messaging<ept id=\"p1\">](https://github.com/Microsoft/dotnet/blob/master/dotnet-developer-projects.md#messaging)</ept>.","pos":[3475,3634],"source":" For more options, see [.NET Open Source Developer Projects: Messaging](https://github.com/Microsoft/dotnet/blob/master/dotnet-developer-projects.md#messaging)."},{"pos":[3639,3665],"content":"Code Access Security (CAS)","linkify":"Code Access Security (CAS)","nodes":[{"content":"Code Access Security (CAS)","pos":[0,26]}]},{"content":"Sandboxing, which relies on the runtime or the framework to constrain which resources a managed application or library uses or runs, <bpt id=\"p1\">[</bpt>isn't supported on .NET Framework<ept id=\"p1\">](~/docs/framework/misc/code-access-security.md)</ept> and therefore is also not supported on .NET Core.","pos":[3667,3932],"source":"Sandboxing, which relies on the runtime or the framework to constrain which resources a managed application or library uses or runs, [isn't supported on .NET Framework](~/docs/framework/misc/code-access-security.md) and therefore is also not supported on .NET Core."},{"content":"There are too many cases in the .NET Framework and the runtime where an elevation of privileges occurs to continue treating CAS as a security boundary.","pos":[3933,4084]},{"content":"In addition, CAS makes the implementation more complicated and often has correctness-performance implications for applications that don't intend to use it.","pos":[4085,4240]},{"content":"Use security boundaries provided by the operating system, such as virtualization, containers, or user accounts for running processes with the minimum set of privileges.","pos":[4242,4410]},{"pos":[4415,4436],"content":"Security Transparency","linkify":"Security Transparency","nodes":[{"content":"Security Transparency","pos":[0,21]}]},{"content":"Similar to CAS, Security Transparency separates sandboxed code from security critical code in a declarative fashion but is <bpt id=\"p1\">[</bpt>no longer supported as a security boundary<ept id=\"p1\">](~/docs/framework/misc/security-transparent-code.md)</ept>.","pos":[4438,4658],"source":"Similar to CAS, Security Transparency separates sandboxed code from security critical code in a declarative fashion but is [no longer supported as a security boundary](~/docs/framework/misc/security-transparent-code.md)."},{"content":"This feature is heavily used by Silverlight.","pos":[4659,4703]},{"content":"Use security boundaries provided by the operating system, such as virtualization, containers, or user accounts for running processes with the least set of privileges.","pos":[4706,4872]},{"pos":[4875,4931],"content":"[!div class=\"step-by-step\"]\n[Next](third-party-deps.md)","leadings":["",">"],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Next<ept id=\"p1\">](third-party-deps.md)</ept>","pos":[28,55],"source":"[Next](third-party-deps.md)"}]}]}