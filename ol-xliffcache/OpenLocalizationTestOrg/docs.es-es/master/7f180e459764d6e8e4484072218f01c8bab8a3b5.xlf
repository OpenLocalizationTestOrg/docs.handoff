<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="numerics.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f180e459764d6e8e4484072218f01c8bab8a3b5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\numerics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e272d3119922d4b5efacd0fae9647a89108ccd8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82cc32de5a5161348432f2de85d90301862a6a0b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Numerics in .NET</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Numerics in .NET</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET provides a range of numeric integer and floating-point primitives, as well as <ph id="ph1">&lt;xref:System.Numerics.BigInteger?displayProperty=nameWithType&gt;</ph>, which is an integral type with no theoretical upper or lower bound, <ph id="ph2">&lt;xref:System.Numerics.Complex?displayProperty=nameWithType&gt;</ph>, which represents complex numbers, and a set of SIMD-enabled types in the <ph id="ph3">&lt;xref:System.Numerics&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Integer types</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET supports both signed and unsigned 8-, 16-, 32-, and 64-bit integer types, which are listed in the following table:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Signed/Unsigned</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Size (in bytes)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Minimum value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Maximum value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Unsigned</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>255</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Signed</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>-32,768</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>32,767</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Signed</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>-2,147,483,648</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>2,147,483,647</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Signed</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>-9,223,372,036,854,775,808</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>9,223,372,036,854,775,807</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Signed</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>-128</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>127</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Unsigned</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>65,535</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Unsigned</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>4,294,967,295</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Unsigned</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>18,446,744,073,709,551,615</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Each integer type supports a set of standard arithmetic operators.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Math?displayProperty=nameWithType&gt;</ph> class provides methods for a broader set of mathematical functions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can also work with the individual bits in an integer value by using the <ph id="ph1">&lt;xref:System.BitConverter?displayProperty=nameWithType&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The unsigned integer types are not CLS-compliant.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Language Independence and Language-Independent Components<ept id="p1">](language-independence-and-language-independent-components.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>BigInteger</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.BigInteger?displayProperty=nameWithType&gt;</ph> structure is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The methods of the <ph id="ph1">&lt;xref:System.Numerics.BigInteger&gt;</ph> type closely parallel those of the other integral types.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Floating-point types</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>.NET includes three primitive floating-point types, which are listed in the following table:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Size (in bytes)</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Approximate range</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Precision</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>±1.5 x 10<bpt id="p1">&lt;sup&gt;</bpt>−45<ept id="p1">&lt;/sup&gt;</ept> to ±3.4 x 10<bpt id="p2">&lt;sup&gt;</bpt>38<ept id="p2">&lt;/sup&gt;</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>~6-9 digits</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>±5.0 × 10<bpt id="p1">&lt;sup&gt;</bpt>−324<ept id="p1">&lt;/sup&gt;</ept> to ±1.7 × 10<bpt id="p2">&lt;sup&gt;</bpt>308<ept id="p2">&lt;/sup&gt;</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>~15-17 digits</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>16</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>±1.0 x 10<bpt id="p1">&lt;sup&gt;</bpt>-28<ept id="p1">&lt;/sup&gt;</ept> to ±7.9228 x 10<bpt id="p2">&lt;sup&gt;</bpt>28<ept id="p2">&lt;/sup&gt;</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>28-29 digits</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">&lt;xref:System.Single&gt;</ph> and <ph id="ph2">&lt;xref:System.Double&gt;</ph> types support special values that represent not-a-number and infinity.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Double&gt;</ph> type provides the following values: <ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Double.NegativeInfinity?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Double.PositiveInfinity?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">&lt;xref:System.Double.IsNaN%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Double.IsInfinity%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Double.IsPositiveInfinity%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Double.IsNegativeInfinity%2A?displayProperty=nameWithType&gt;</ph> methods to test for these special values.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Each floating-point type supports a set of standard arithmetic operators.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Math?displayProperty=nameWithType&gt;</ph> class provides methods for a broader set of mathematical functions.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>.NET Core 2.0 and later includes the <ph id="ph1">&lt;xref:System.MathF?displayProperty=nameWithType&gt;</ph> class that provides methods which accept arguments of the <ph id="ph2">&lt;xref:System.Single&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can also work with the individual bits in <ph id="ph1">&lt;xref:System.Double&gt;</ph> and <ph id="ph2">&lt;xref:System.Single&gt;</ph> values by using the <ph id="ph3">&lt;xref:System.BitConverter?displayProperty=nameWithType&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Decimal?displayProperty=nameWithType&gt;</ph> structure has its own methods, <ph id="ph2">&lt;xref:System.Decimal.GetBits%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Decimal.%23ctor%28System.Int32%5B%5D%29?displayProperty=nameWithType&gt;</ph>, for working with a decimal value's individual bits, as well as its own set of methods for performing some additional mathematical operations.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Double&gt;</ph> and <ph id="ph2">&lt;xref:System.Single&gt;</ph> types are intended to be used for values that by their nature are imprecise (for example, the distance between two stars) and for applications in which a high degree of precision and small rounding error is not required.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You should use the <ph id="ph1">&lt;xref:System.Decimal?displayProperty=nameWithType&gt;</ph> type for cases in which greater precision is required and rounding errors should be minimized.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> type doesn't eliminate the need for rounding.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Rather, it minimizes errors due to rounding.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Complex</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Complex?displayProperty=nameWithType&gt;</ph> structure represents a complex number, that is, a number with a real number part and an imaginary number part.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>It supports a standard set of arithmetic, comparison, equality, explicit and implicit conversion operators, as well as mathematical, algebraic, and trigonometric methods.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>SIMD-enabled types</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics&gt;</ph> namespace includes a set of .NET SIMD-enabled types.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>SIMD (Single Instruction Multiple Data) operations can be parallelized at the hardware level.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>That increases the throughput of the vectorized computations, which are common in mathematical, scientific, and graphics apps.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The .NET SIMD-enabled types include the following:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector2&gt;</ph>, <ph id="ph2">&lt;xref:System.Numerics.Vector3&gt;</ph>, and <ph id="ph3">&lt;xref:System.Numerics.Vector4&gt;</ph> types, which represent vectors with 2, 3, and 4 <ph id="ph4">&lt;xref:System.Single&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Two matrix types, <ph id="ph1">&lt;xref:System.Numerics.Matrix3x2&gt;</ph>, which represents a 3x2 matrix, and <ph id="ph2">&lt;xref:System.Numerics.Matrix4x4&gt;</ph>, which represents a 4x4 matrix.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Plane&gt;</ph> type, which represents a plane in three-dimensional space.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Quaternion&gt;</ph> type, which represents a vector that is used to encode three-dimensional physical rotations.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601&gt;</ph> type, which represents a vector of a specified numeric type and provides a broad set of operators that benefit from SIMD support.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The count of a <ph id="ph1">&lt;xref:System.Numerics.Vector%601&gt;</ph> instance is fixed, but its value <ph id="ph2">&lt;xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType&gt;</ph> depends on the CPU of the machine, on which code is executed.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601&gt;</ph> type is not included into the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You must install the <bpt id="p1">[</bpt>System.Numerics.Vectors<ept id="p1">](https://www.nuget.org/packages/System.Numerics.Vectors)</ept> NuGet package to get access to this type.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The SIMD-enabled types are implemented in such a way that they can be used with non-SIMD-enabled hardware or JIT compilers.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To take advantage of SIMD instructions, your 64-bit apps must be run by the runtime that uses the RyuJIT compiler, which is included in .NET Core and in the .NET Framework 4.6 and later versions.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>It adds SIMD support when targeting 64-bit processors.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Essentials<ept id="p1">](application-essentials.md)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](base-types/standard-numeric-format-strings.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>