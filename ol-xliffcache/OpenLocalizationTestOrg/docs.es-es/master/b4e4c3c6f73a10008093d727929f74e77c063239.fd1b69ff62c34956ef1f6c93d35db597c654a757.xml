{"content":"---\ntitle: \"Overloadable operators - C# Programming Guide\"\nms.custom: seodec18\nms.date: 08/27/2018\nhelpviewer_keywords: \n  - \"C# language, operator overloading\"\n  - \"operator overloading [C#]\"\nms.assetid: 390d9d01-79fc-40ab-9ed3-0bf448da1b6a\n---\n# Overloadable operators (C# Programming Guide)\n\nC# allows user-defined types to overload operators by defining static member functions using the [operator](../../language-reference/keywords/operator.md) keyword. Not all operators can be overloaded, however, and others have restrictions, as listed in this table:\n\n| Operators | Overloadability |\n| --------- | --------------- |\n|[+](../../language-reference/operators/addition-operator.md), [-](../../language-reference/operators/subtraction-operator.md), [!](../../language-reference/operators/logical-negation-operator.md), [~](../../language-reference/operators/bitwise-complement-operator.md), [++](../../language-reference/operators/arithmetic-operators.md#increment-operator-), [--](../../language-reference/operators/arithmetic-operators.md#decrement-operator---), [true](../../language-reference/keywords/true-false-operators.md), [false](../../language-reference/keywords/true-false-operators.md)|These unary operators can be overloaded.|\n|[+](../../language-reference/operators/addition-operator.md), [-](../../language-reference/operators/subtraction-operator.md), [\\*](../../language-reference/operators/arithmetic-operators.md#multiplication-operator-), [/](../../language-reference/operators/arithmetic-operators.md#division-operator-), [%](../../language-reference/operators/arithmetic-operators.md#remainder-operator-), [&](../../language-reference/operators/and-operator.md), [&#124;](../../language-reference/operators/or-operator.md), [^](../../language-reference/operators/xor-operator.md), [\\<\\<](../../language-reference/operators/left-shift-operator.md), [>>](../../language-reference/operators/right-shift-operator.md)|These binary operators can be overloaded.|\n|[==](../../language-reference/operators/equality-operators.md#equality-operator-), [!=](../../language-reference/operators/equality-operators.md#inequality-operator-), [\\<](../../language-reference/operators/less-than-operator.md), [>](../../language-reference/operators/greater-than-operator.md), [\\<=](../../language-reference/operators/less-than-equal-operator.md), [>=](../../language-reference/operators/greater-than-equal-operator.md)|The comparison operators can be overloaded (but see the note that follows this table).|\n|[&&](../../language-reference/operators/conditional-and-operator.md), [&#124;&#124;](../../language-reference/operators/conditional-or-operator.md)|The conditional logical operators cannot be overloaded, but they are evaluated using `&` and <code>&#124;</code>, which can be overloaded.|\n|[&#91;&#93;](../../language-reference/operators/index-operator.md)|The array indexing operator cannot be overloaded, but you can define [indexers](../indexers/index.md).|\n|[(T)x](../../language-reference/operators/invocation-operator.md)|The cast operator cannot be overloaded, but you can define new conversion operators (see [explicit](../../language-reference/keywords/explicit.md) and [implicit](../../language-reference/keywords/implicit.md)).|\n|[+=](../../language-reference/operators/addition-assignment-operator.md), [-=](../../language-reference/operators/subtraction-assignment-operator.md), [\\*=](../../language-reference/operators/arithmetic-operators.md#compound-assignment), [/=](../../language-reference/operators/arithmetic-operators.md#compound-assignment), [%=](../../language-reference/operators/arithmetic-operators.md#compound-assignment), [&=](../../language-reference/operators/and-assignment-operator.md), [&#124;=](../../language-reference/operators/or-assignment-operator.md), [^=](../../language-reference/operators/xor-assignment-operator.md), [\\<\\<=](../../language-reference/operators/left-shift-assignment-operator.md), [>>=](../../language-reference/operators/right-shift-assignment-operator.md)|Assignment operators cannot be explicitly overloaded. However, when you overload a binary operator, the corresponding assignment operator, if any, is also implicitly overloaded. For example, `+=` is evaluated using `+`, which can be overloaded.|\n|[=](../../language-reference/operators/assignment-operator.md), [.](../../language-reference/operators/member-access-operator.md), [?:](../../language-reference/operators/conditional-operator.md), [??](../../language-reference/operators/null-coalescing-operator.md), [->](../../language-reference/operators/dereference-operator.md), [=>](../../language-reference/operators/lambda-operator.md), [f(x)](../../language-reference/operators/invocation-operator.md), [as](../../language-reference/keywords/as.md), [checked](../../language-reference/keywords/checked.md), [unchecked](../../language-reference/keywords/unchecked.md), [default](../../programming-guide/statements-expressions-operators/default-value-expressions.md), [delegate](../../programming-guide/statements-expressions-operators/anonymous-methods.md), [is](../../language-reference/keywords/is.md), [new](../../language-reference/keywords/new.md), [sizeof](../../language-reference/keywords/sizeof.md), [typeof](../../language-reference/keywords/typeof.md)|These operators cannot be overloaded.|\n\n> [!NOTE]\n> The comparison operators, if overloaded, must be overloaded in pairs; that is, if `==` is overloaded, `!=` must also be overloaded. The reverse is also true, where overloading `!=` requires an overload for `==`. The same is true for comparison operators `<` and `>` and for `<=` and `>=`.\n\nFor information about how to overload an operator, see the [operator](../../language-reference/keywords/operator.md) keyword article.\n\n## See also\n\n- [C# Programming Guide](../index.md)\n- [Statements, Expressions, and Operators](index.md)\n- [Operators](operators.md)\n- [C# Operators](../../language-reference/operators/index.md)\n- [Why are overloaded operators always static in C#?](https://blogs.msdn.microsoft.com/ericlippert/2007/05/14/why-are-overloaded-operators-always-static-in-c/)\n","nodes":[{"pos":[4,241],"embed":true,"restype":"x-metadata","content":"title: \"Overloadable operators - C# Programming Guide\"\nms.custom: seodec18\nms.date: 08/27/2018\nhelpviewer_keywords: \n  - \"C# language, operator overloading\"\n  - \"operator overloading [C#]\"\nms.assetid: 390d9d01-79fc-40ab-9ed3-0bf448da1b6a","nodes":[{"content":"Overloadable operators - C# Programming Guide","nodes":[{"pos":[0,45],"content":"Overloadable operators - C# Programming Guide","nodes":[{"content":"Overloadable operators - C# Programming Guide","pos":[0,45]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[248,293],"content":"Overloadable operators (C# Programming Guide)","linkify":"Overloadable operators (C# Programming Guide)","nodes":[{"content":"Overloadable operators (C# Programming Guide)","pos":[0,45]}]},{"content":"C# allows user-defined types to overload operators by defining static member functions using the <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../language-reference/keywords/operator.md)</ept> keyword.","pos":[295,458],"source":"C# allows user-defined types to overload operators by defining static member functions using the [operator](../../language-reference/keywords/operator.md) keyword."},{"content":"Not all operators can be overloaded, however, and others have restrictions, as listed in this table:","pos":[459,559]},{"content":"Operators","pos":[563,572]},{"content":"Overloadability","pos":[575,590]},{"pos":[626,1202],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">+</ph><ept id=\"p1\">](../../language-reference/operators/addition-operator.md)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph2\">-</ph><ept id=\"p2\">](../../language-reference/operators/subtraction-operator.md)</ept>, <bpt id=\"p3\">[</bpt>!<ept id=\"p3\">](../../language-reference/operators/logical-negation-operator.md)</ept>, <bpt id=\"p4\">[</bpt><ph id=\"ph3\">~</ph><ept id=\"p4\">](../../language-reference/operators/bitwise-complement-operator.md)</ept>, <bpt id=\"p5\">[</bpt><ph id=\"ph4\">++</ph><ept id=\"p5\">](../../language-reference/operators/arithmetic-operators.md#increment-operator-)</ept>, <bpt id=\"p6\">[</bpt><ph id=\"ph5\">--</ph><ept id=\"p6\">](../../language-reference/operators/arithmetic-operators.md#decrement-operator---)</ept>, <bpt id=\"p7\">[</bpt>true<ept id=\"p7\">](../../language-reference/keywords/true-false-operators.md)</ept>, <bpt id=\"p8\">[</bpt>false<ept id=\"p8\">](../../language-reference/keywords/true-false-operators.md)</ept>","source":"[+](../../language-reference/operators/addition-operator.md), [-](../../language-reference/operators/subtraction-operator.md), [!](../../language-reference/operators/logical-negation-operator.md), [~](../../language-reference/operators/bitwise-complement-operator.md), [++](../../language-reference/operators/arithmetic-operators.md#increment-operator-), [--](../../language-reference/operators/arithmetic-operators.md#decrement-operator---), [true](../../language-reference/keywords/true-false-operators.md), [false](../../language-reference/keywords/true-false-operators.md)"},{"content":"These unary operators can be overloaded.","pos":[1203,1243]},{"pos":[1246,1939],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">+</ph><ept id=\"p1\">](../../language-reference/operators/addition-operator.md)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph2\">-</ph><ept id=\"p2\">](../../language-reference/operators/subtraction-operator.md)</ept>, <bpt id=\"p3\">[</bpt><ph id=\"ph3\">\\*</ph><ept id=\"p3\">](../../language-reference/operators/arithmetic-operators.md#multiplication-operator-)</ept>, <bpt id=\"p4\">[</bpt><ph id=\"ph4\">/</ph><ept id=\"p4\">](../../language-reference/operators/arithmetic-operators.md#division-operator-)</ept>, <bpt id=\"p5\">[</bpt><ph id=\"ph5\">%</ph><ept id=\"p5\">](../../language-reference/operators/arithmetic-operators.md#remainder-operator-)</ept>, <bpt id=\"p6\">[</bpt><ph id=\"ph6\">&amp;</ph><ept id=\"p6\">](../../language-reference/operators/and-operator.md)</ept>, <bpt id=\"p7\">[</bpt>&amp;#124;<ept id=\"p7\">](../../language-reference/operators/or-operator.md)</ept>, <bpt id=\"p8\">[</bpt><ph id=\"ph7\">^</ph><ept id=\"p8\">](../../language-reference/operators/xor-operator.md)</ept>, <bpt id=\"p9\">[</bpt><ph id=\"ph8\">\\&lt;</ph><ph id=\"ph9\">\\&lt;</ph><ept id=\"p9\">](../../language-reference/operators/left-shift-operator.md)</ept>, <bpt id=\"p10\">[</bpt><ph id=\"ph10\">&gt;&gt;</ph><ept id=\"p10\">](../../language-reference/operators/right-shift-operator.md)</ept>","source":"[+](../../language-reference/operators/addition-operator.md), [-](../../language-reference/operators/subtraction-operator.md), [\\*](../../language-reference/operators/arithmetic-operators.md#multiplication-operator-), [/](../../language-reference/operators/arithmetic-operators.md#division-operator-), [%](../../language-reference/operators/arithmetic-operators.md#remainder-operator-), [&](../../language-reference/operators/and-operator.md), [&#124;](../../language-reference/operators/or-operator.md), [^](../../language-reference/operators/xor-operator.md), [\\<\\<](../../language-reference/operators/left-shift-operator.md), [>>](../../language-reference/operators/right-shift-operator.md)"},{"content":"These binary operators can be overloaded.","pos":[1940,1981]},{"pos":[1984,2424],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">==</ph><ept id=\"p1\">](../../language-reference/operators/equality-operators.md#equality-operator-)</ept>, <bpt id=\"p2\">[</bpt>!=<ept id=\"p2\">](../../language-reference/operators/equality-operators.md#inequality-operator-)</ept>, <bpt id=\"p3\">[</bpt><ph id=\"ph2\">\\&lt;</ph><ept id=\"p3\">](../../language-reference/operators/less-than-operator.md)</ept>, <bpt id=\"p4\">[</bpt><ph id=\"ph3\">&gt;</ph><ept id=\"p4\">](../../language-reference/operators/greater-than-operator.md)</ept>, <bpt id=\"p5\">[</bpt><ph id=\"ph4\">\\&lt;</ph><ph id=\"ph5\">=</ph><ept id=\"p5\">](../../language-reference/operators/less-than-equal-operator.md)</ept>, <bpt id=\"p6\">[</bpt><ph id=\"ph6\">&gt;=</ph><ept id=\"p6\">](../../language-reference/operators/greater-than-equal-operator.md)</ept>","source":"[==](../../language-reference/operators/equality-operators.md#equality-operator-), [!=](../../language-reference/operators/equality-operators.md#inequality-operator-), [\\<](../../language-reference/operators/less-than-operator.md), [>](../../language-reference/operators/greater-than-operator.md), [\\<=](../../language-reference/operators/less-than-equal-operator.md), [>=](../../language-reference/operators/greater-than-equal-operator.md)"},{"content":"The comparison operators can be overloaded (but see the note that follows this table).","pos":[2425,2511]},{"pos":[2514,2661],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">&amp;&amp;</ph><ept id=\"p1\">](../../language-reference/operators/conditional-and-operator.md)</ept>, <bpt id=\"p2\">[</bpt>&amp;#124;&amp;#124;<ept id=\"p2\">](../../language-reference/operators/conditional-or-operator.md)</ept>","source":"[&&](../../language-reference/operators/conditional-and-operator.md), [&#124;&#124;](../../language-reference/operators/conditional-or-operator.md)"},{"pos":[2662,2800],"content":"The conditional logical operators cannot be overloaded, but they are evaluated using <ph id=\"ph1\">`&amp;`</ph> and <ph id=\"ph2\">&lt;code&gt;&amp;#124;&lt;/code&gt;</ph>, which can be overloaded.","source":"The conditional logical operators cannot be overloaded, but they are evaluated using `&` and <code>&#124;</code>, which can be overloaded."},{"pos":[2803,2869],"content":"<bpt id=\"p1\">[</bpt>&amp;#91;&amp;#93;<ept id=\"p1\">](../../language-reference/operators/index-operator.md)</ept>","source":"[&#91;&#93;](../../language-reference/operators/index-operator.md)"},{"pos":[2870,2972],"content":"The array indexing operator cannot be overloaded, but you can define <bpt id=\"p1\">[</bpt>indexers<ept id=\"p1\">](../indexers/index.md)</ept>.","source":"The array indexing operator cannot be overloaded, but you can define [indexers](../indexers/index.md)."},{"pos":[2975,3040],"content":"<bpt id=\"p1\">[</bpt>(T)x<ept id=\"p1\">](../../language-reference/operators/invocation-operator.md)</ept>","source":"[(T)x](../../language-reference/operators/invocation-operator.md)"},{"pos":[3041,3251],"content":"The cast operator cannot be overloaded, but you can define new conversion operators (see <bpt id=\"p1\">[</bpt>explicit<ept id=\"p1\">](../../language-reference/keywords/explicit.md)</ept> and <bpt id=\"p2\">[</bpt>implicit<ept id=\"p2\">](../../language-reference/keywords/implicit.md)</ept>).","source":"The cast operator cannot be overloaded, but you can define new conversion operators (see [explicit](../../language-reference/keywords/explicit.md) and [implicit](../../language-reference/keywords/implicit.md))."},{"pos":[3254,4030],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">+=</ph><ept id=\"p1\">](../../language-reference/operators/addition-assignment-operator.md)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph2\">-=</ph><ept id=\"p2\">](../../language-reference/operators/subtraction-assignment-operator.md)</ept>, <bpt id=\"p3\">[</bpt><ph id=\"ph3\">\\*</ph><ph id=\"ph4\">=</ph><ept id=\"p3\">](../../language-reference/operators/arithmetic-operators.md#compound-assignment)</ept>, <bpt id=\"p4\">[</bpt><ph id=\"ph5\">/=</ph><ept id=\"p4\">](../../language-reference/operators/arithmetic-operators.md#compound-assignment)</ept>, <bpt id=\"p5\">[</bpt><ph id=\"ph6\">%=</ph><ept id=\"p5\">](../../language-reference/operators/arithmetic-operators.md#compound-assignment)</ept>, <bpt id=\"p6\">[</bpt><ph id=\"ph7\">&amp;=</ph><ept id=\"p6\">](../../language-reference/operators/and-assignment-operator.md)</ept>, <bpt id=\"p7\">[</bpt>&amp;#124;=<ept id=\"p7\">](../../language-reference/operators/or-assignment-operator.md)</ept>, <bpt id=\"p8\">[</bpt><ph id=\"ph8\">^=</ph><ept id=\"p8\">](../../language-reference/operators/xor-assignment-operator.md)</ept>, <bpt id=\"p9\">[</bpt><ph id=\"ph9\">\\&lt;</ph><ph id=\"ph10\">\\&lt;</ph><ph id=\"ph11\">=</ph><ept id=\"p9\">](../../language-reference/operators/left-shift-assignment-operator.md)</ept>, <bpt id=\"p10\">[</bpt><ph id=\"ph12\">&gt;&gt;=</ph><ept id=\"p10\">](../../language-reference/operators/right-shift-assignment-operator.md)</ept>","source":"[+=](../../language-reference/operators/addition-assignment-operator.md), [-=](../../language-reference/operators/subtraction-assignment-operator.md), [\\*=](../../language-reference/operators/arithmetic-operators.md#compound-assignment), [/=](../../language-reference/operators/arithmetic-operators.md#compound-assignment), [%=](../../language-reference/operators/arithmetic-operators.md#compound-assignment), [&=](../../language-reference/operators/and-assignment-operator.md), [&#124;=](../../language-reference/operators/or-assignment-operator.md), [^=](../../language-reference/operators/xor-assignment-operator.md), [\\<\\<=](../../language-reference/operators/left-shift-assignment-operator.md), [>>=](../../language-reference/operators/right-shift-assignment-operator.md)"},{"content":"Assignment operators cannot be explicitly overloaded.","pos":[4031,4084]},{"content":"However, when you overload a binary operator, the corresponding assignment operator, if any, is also implicitly overloaded.","pos":[4085,4208]},{"content":"For example, <ph id=\"ph1\">`+=`</ph> is evaluated using <ph id=\"ph2\">`+`</ph>, which can be overloaded.","pos":[4209,4275],"source":" For example, `+=` is evaluated using `+`, which can be overloaded."},{"pos":[4278,5297],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">=</ph><ept id=\"p1\">](../../language-reference/operators/assignment-operator.md)</ept>, <bpt id=\"p2\">[</bpt>.<ept id=\"p2\">](../../language-reference/operators/member-access-operator.md)</ept>, <bpt id=\"p3\">[</bpt>?:<ept id=\"p3\">](../../language-reference/operators/conditional-operator.md)</ept>, <bpt id=\"p4\">[</bpt>??<ept id=\"p4\">](../../language-reference/operators/null-coalescing-operator.md)</ept>, <bpt id=\"p5\">[</bpt><ph id=\"ph2\">-&gt;</ph><ept id=\"p5\">](../../language-reference/operators/dereference-operator.md)</ept>, <bpt id=\"p6\">[</bpt><ph id=\"ph3\">=&gt;</ph><ept id=\"p6\">](../../language-reference/operators/lambda-operator.md)</ept>, <bpt id=\"p7\">[</bpt>f(x)<ept id=\"p7\">](../../language-reference/operators/invocation-operator.md)</ept>, <bpt id=\"p8\">[</bpt>as<ept id=\"p8\">](../../language-reference/keywords/as.md)</ept>, <bpt id=\"p9\">[</bpt>checked<ept id=\"p9\">](../../language-reference/keywords/checked.md)</ept>, <bpt id=\"p10\">[</bpt>unchecked<ept id=\"p10\">](../../language-reference/keywords/unchecked.md)</ept>, <bpt id=\"p11\">[</bpt>default<ept id=\"p11\">](../../programming-guide/statements-expressions-operators/default-value-expressions.md)</ept>, <bpt id=\"p12\">[</bpt>delegate<ept id=\"p12\">](../../programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>, <bpt id=\"p13\">[</bpt>is<ept id=\"p13\">](../../language-reference/keywords/is.md)</ept>, <bpt id=\"p14\">[</bpt>new<ept id=\"p14\">](../../language-reference/keywords/new.md)</ept>, <bpt id=\"p15\">[</bpt>sizeof<ept id=\"p15\">](../../language-reference/keywords/sizeof.md)</ept>, <bpt id=\"p16\">[</bpt>typeof<ept id=\"p16\">](../../language-reference/keywords/typeof.md)</ept>","source":"[=](../../language-reference/operators/assignment-operator.md), [.](../../language-reference/operators/member-access-operator.md), [?:](../../language-reference/operators/conditional-operator.md), [??](../../language-reference/operators/null-coalescing-operator.md), [->](../../language-reference/operators/dereference-operator.md), [=>](../../language-reference/operators/lambda-operator.md), [f(x)](../../language-reference/operators/invocation-operator.md), [as](../../language-reference/keywords/as.md), [checked](../../language-reference/keywords/checked.md), [unchecked](../../language-reference/keywords/unchecked.md), [default](../../programming-guide/statements-expressions-operators/default-value-expressions.md), [delegate](../../programming-guide/statements-expressions-operators/anonymous-methods.md), [is](../../language-reference/keywords/is.md), [new](../../language-reference/keywords/new.md), [sizeof](../../language-reference/keywords/sizeof.md), [typeof](../../language-reference/keywords/typeof.md)"},{"content":"These operators cannot be overloaded.","pos":[5298,5335]},{"pos":[5340,5638],"content":"[!NOTE]\nThe comparison operators, if overloaded, must be overloaded in pairs; that is, if `==` is overloaded, `!=` must also be overloaded. The reverse is also true, where overloading `!=` requires an overload for `==`. The same is true for comparison operators `<` and `>` and for `<=` and `>=`.","leadings":["","> "],"nodes":[{"content":"The comparison operators, if overloaded, must be overloaded in pairs; that is, if `==` is overloaded, `!=` must also be overloaded. The reverse is also true, where overloading `!=` requires an overload for `==`. The same is true for comparison operators `<` and `>` and for `<=` and `>=`.","pos":[8,296],"nodes":[{"content":"The comparison operators, if overloaded, must be overloaded in pairs; that is, if <ph id=\"ph1\">`==`</ph> is overloaded, <ph id=\"ph2\">`!=`</ph> must also be overloaded.","pos":[0,131],"source":"The comparison operators, if overloaded, must be overloaded in pairs; that is, if `==` is overloaded, `!=` must also be overloaded."},{"content":"The reverse is also true, where overloading <ph id=\"ph1\">`!=`</ph> requires an overload for <ph id=\"ph2\">`==`</ph>.","pos":[132,211],"source":" The reverse is also true, where overloading `!=` requires an overload for `==`."},{"content":"The same is true for comparison operators <ph id=\"ph1\">`&lt;`</ph> and <ph id=\"ph2\">`&gt;`</ph> and for <ph id=\"ph3\">`&lt;=`</ph> and <ph id=\"ph4\">`&gt;=`</ph>.","pos":[212,288],"source":" The same is true for comparison operators `<` and `>` and for `<=` and `>=`."}]}]},{"pos":[5640,5773],"content":"For information about how to overload an operator, see the <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../language-reference/keywords/operator.md)</ept> keyword article.","source":"For information about how to overload an operator, see the [operator](../../language-reference/keywords/operator.md) keyword article."},{"pos":[5778,5786],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5790,5825],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../index.md)</ept>","source":"[C# Programming Guide](../index.md)"},{"pos":[5828,5878],"content":"<bpt id=\"p1\">[</bpt>Statements, Expressions, and Operators<ept id=\"p1\">](index.md)</ept>","source":"[Statements, Expressions, and Operators](index.md)"},{"pos":[5881,5906],"content":"<bpt id=\"p1\">[</bpt>Operators<ept id=\"p1\">](operators.md)</ept>","source":"[Operators](operators.md)"},{"pos":[5909,5968],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../language-reference/operators/index.md)</ept>","source":"[C# Operators](../../language-reference/operators/index.md)"},{"pos":[5971,6128],"content":"<bpt id=\"p1\">[</bpt>Why are overloaded operators always static in C#?<ept id=\"p1\">](https://blogs.msdn.microsoft.com/ericlippert/2007/05/14/why-are-overloaded-operators-always-static-in-c/)</ept>","source":"[Why are overloaded operators always static in C#?](https://blogs.msdn.microsoft.com/ericlippert/2007/05/14/why-are-overloaded-operators-always-static-in-c/)"}]}