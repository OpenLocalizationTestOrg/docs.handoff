<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7161c8605cca70cb44a9c9ead1bfd829f70572f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\tools\ngen-exe-native-image-generator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">905c6320caa9dba34be40be8104e5727213457f5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">189de5c94b671a990ba8827ffd8f284b1f8b541c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Ngen.exe (Native Image Generator) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Ngen.exe (Native Image Generator)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Native Image Generator (Ngen.exe) is a tool that improves the performance of managed applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Ngen.exe creates native images, which are files containing compiled processor-specific machine code, and installs them into the native image cache on the local computer.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The runtime can use native images from the cache instead of using the just-in-time (JIT) compiler to compile the original assembly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Changes to Ngen.exe in the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Ngen.exe now compiles assemblies with full trust, and code access security (CAS) policy is no longer evaluated.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Native images that are generated with Ngen.exe can no longer be loaded into applications that are running in partial trust.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Changes to Ngen.exe in the .NET Framework version 2.0:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Installing an assembly also installs its dependencies, simplifying the syntax of Ngen.exe.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Native images can now be shared across application domains.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A new action, <ph id="ph1">`update`</ph>, re-creates images that have been invalidated.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Actions can be deferred for execution by a service that uses idle time on the computer to generate and install images.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Some causes of image invalidation have been eliminated.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>On Windows 8, see <bpt id="p1">[</bpt>Native Image Task<ept id="p1">](http://msdn.microsoft.com/en-us/9b1f7590-4e0d-4737-90ef-eaf696932afb)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For additional information on using Ngen.exe and the native image service, see <bpt id="p1">[</bpt>Native Image Service<ept id="p1">](http://msdn.microsoft.com/en-us/b15e0e32-59cb-4ae4-967c-6c9527781309)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Ngen.exe syntax for versions 1.0 and 1.1 of the .NET Framework can be found in <bpt id="p1">[</bpt>Native Image Generator (Ngen.exe) Legacy Syntax<ept id="p1">](http://msdn.microsoft.com/en-us/5a69fc7a-103f-4afc-8ab4-606adcb46324)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This tool is automatically installed with Visual Studio.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>At the command prompt, type the following:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Actions</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following table shows the syntax of each <ph id="ph1">`action`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For descriptions of the individual parts of an <ph id="ph1">`action`</ph>, see the <bpt id="p1">[</bpt>Arguments<ept id="p1">](#ArgumentTable)</ept>, <bpt id="p2">[</bpt>Priority Levels<ept id="p2">](#PriorityTable)</ept>, <bpt id="p3">[</bpt>Scenarios<ept id="p3">](#ScenarioTable)</ept>, and <bpt id="p4">[</bpt>Config<ept id="p4">](#ConfigTable)</ept> tables.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Options<ept id="p1">](#OptionTable)</ept> table describes the <ph id="ph1">`options`</ph> and the help switches.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`install`</ph> [<ph id="ph2">`assemblyName`</ph> &amp;#124; <ph id="ph3">`assemblyPath`</ph>] [<ph id="ph4">`scenarios`</ph>] [<ph id="ph5">`config`</ph>] [<ph id="ph6">`/queue`</ph>[<ph id="ph7">`:`</ph>{<ph id="ph8">`1`</ph>&amp;#124;<ph id="ph9">`2`</ph>&amp;#124;<ph id="ph10">`3`</ph>}]]</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Generate native images for an assembly and its dependencies and install the images in the native image cache.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`/queue`</ph> is specified, the action is queued for the native image service.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The default priority is 3.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Priority Levels<ept id="p1">](#PriorityTable)</ept> table.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`uninstall`</ph> [<ph id="ph2">`assemblyName`</ph> &amp;#124; <ph id="ph3">`assemblyPath`</ph>] [<ph id="ph4">`scenarios`</ph>] [<ph id="ph5">`config`</ph>]</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Delete the native images of an assembly and its dependencies from the native image cache.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To uninstall a single image and its dependencies, use the same command-line arguments that were used to install the image.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, the action <ph id="ph2">`uninstall`</ph> * is no longer supported.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`update`</ph> [<ph id="ph2">`/queue`</ph>]</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Update native images that have become invalid.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`/queue`</ph> is specified, the updates are queued for the native image service.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Updates are always scheduled at priority 3, so they run when the computer is idle.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`display`</ph> [<ph id="ph2">`assemblyName`</ph> &amp;#124; <ph id="ph3">`assemblyPath`</ph>]</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Display the state of the native images for an assembly and its dependencies.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If no argument is supplied, everything in the native image cache is displayed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`executeQueuedItems`</ph> [<ph id="ph2">`1``&amp;#124;``2``&amp;#124;``3`</ph>]</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`eqi`</ph> [1&amp;#124;2&amp;#124;3]</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Execute queued compilation jobs.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If a priority is specified, compilation jobs with greater or equal priority are executed.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If no priority is specified, all queued compilation jobs are executed.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`queue`</ph> {<ph id="ph2">`pause`</ph> &amp;#124; <ph id="ph3">`continue`</ph> &amp;#124; <ph id="ph4">`status`</ph>}</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Pause the native image service, allow the paused service to continue, or query the status of the service.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The full display name of the assembly.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`"myAssembly, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0038abc9deabfle5"`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  You can supply a partial assembly name, such as <ph id="ph1">`myAssembly`</ph>, for the <ph id="ph2">`display`</ph> and <ph id="ph3">`uninstall`</ph> actions.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Only one assembly can be specified per Ngen.exe command line.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The explicit path of the assembly.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can specify a full or relative path.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you specify a file name without a path, the assembly must be located in the current directory.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Only one assembly can be specified per Ngen.exe command line.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Priority Levels</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Priority</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Native images are generated and installed immediately, without waiting for idle time.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Native images are generated and installed without waiting for idle time, but after all priority 1 actions (and their dependencies) have completed.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Native images are installed when the native image service detects that the computer is idle.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Native Image Service<ept id="p1">](http://msdn.microsoft.com/en-us/b15e0e32-59cb-4ae4-967c-6c9527781309)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Scenarios</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Scenario</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Generate native images that can be used under a debugger.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Generate native images that can be used under a profiler.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Generate the minimum number of native images required by the specified scenario options.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Config</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Configuration</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/ExeConfig:`</ph> <ph id="ph2">`exePath`</ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Use the configuration of the specified executable assembly.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Ngen.exe needs to make the same decisions as the loader when binding to dependencies.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When a shared component is loaded at run time, using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method, the application's configuration file determines the dependencies that are loaded for the shared component — for example, the version of a dependency that is loaded.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/ExeConfig`</ph> switch gives Ngen.exe guidance on which dependencies would be loaded at run time.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/AppBase:`</ph> <ph id="ph2">`directoryPath`</ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When locating dependencies, use the specified directory as the application base.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Options</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Suppress the Microsoft startup banner display.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Suppress the display of success messages.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Display detailed information for debugging.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  Due to operating system limitations, this option does not display as much additional information on Windows 98 and Windows Millennium Edition.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/help`</ph>, <ph id="ph2">`/?`</ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Display command syntax and options for the current release.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To run Ngen.exe, you must have administrative privileges.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Do not run Ngen.exe on assemblies that are not fully trusted.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, Ngen.exe compiles assemblies with full trust, and code access security (CAS) policy is no longer evaluated.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, the native images that are generated with Ngen.exe can no longer be loaded into applications that are running in partial trust.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Instead, the just-in-time (JIT) compiler is invoked.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Ngen.exe generates native images for the assembly specified by the <ph id="ph1">`assemblyname`</ph> argument to the <ph id="ph2">`install`</ph> action and all its dependencies.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Dependencies are determined from references in the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The only scenario in which you need to install a dependency separately is when the application loads it using reflection, for example by calling the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Do not use the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName&gt;</ph> method with native images.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>An image loaded with this method cannot be used by other assemblies in the execution context.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Ngen.exe maintains a count on dependencies.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, suppose <ph id="ph1">`MyAssembly.exe`</ph> and <ph id="ph2">`YourAssembly.exe`</ph> are both installed in the native image cache, and both have references to <ph id="ph3">`OurDependency.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`MyAssembly.exe`</ph> is uninstalled, <ph id="ph2">`OurDependency.dll`</ph> is not uninstalled.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It is only removed when <ph id="ph1">`YourAssembly.exe`</ph> is also uninstalled.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If you are generating a native image for an assembly in the global assembly cache, specify its display name.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The native images that Ngen.exe generates can be shared across application domains.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This means you can use Ngen.exe in application scenarios that require assemblies to be shared across application domains.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To specify domain neutrality:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">&lt;xref:System.LoaderOptimizationAttribute&gt;</ph> attribute to your application.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.AppDomainSetup.LoaderOptimization%2A?displayProperty=fullName&gt;</ph> property when you create setup information for a new application domain.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Always use domain-neutral code when loading the same assembly into multiple application domains.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If a native image is loaded into a nonshared application domain after having been loaded into a shared domain, it cannot be used.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Domain-neutral code cannot be unloaded, and performance may be slightly slower, particularly when accessing static members.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In this Remarks section:</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generating images for different scenarios<ept id="p1">](#Scenarios)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Determining when to Use native images<ept id="p1">](#WhenToUse)</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Improved memory use<ept id="p1">](#Memory)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Faster application startup<ept id="p1">](#Startup)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Summary of usage considerations<ept id="p1">](#UsageSummary)</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Importance of assembly base addresses<ept id="p1">](#BaseAddresses)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hard binding<ept id="p1">](#HardBinding)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying a binding hint for a dependency<ept id="p1">](#DependencyHint)</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying a default binding hint for an assembly<ept id="p1">](#AssemblyHint)</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deferred processing<ept id="p1">](#Deferred)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Native images and JIT compilation<ept id="p1">](#JITCompilation)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Invalid images<ept id="p1">](#InvalidImages)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](#Troubleshooting)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assembly Binding Log Viewer<ept id="p1">](#Fusion)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The JITCompilationStart managed debugging assistant<ept id="p1">](#MDA)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Opting out of native image generation<ept id="p1">](#OptOut)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Generating images for     different scenarios</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>After you have generated a native image for an assembly, the runtime automatically attempts to locate and use this native   image each time it runs the assembly.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Multiple images can be generated, depending on usage scenarios.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For example, if you run an assembly in a debugging or profiling scenario, the runtime looks for a native image that was generated with the <ph id="ph1">`/Debug`</ph> or <ph id="ph2">`/Profile`</ph> options.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If it is unable to find a matching native image, the runtime reverts to standard JIT compilation.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The only way to debug native images is to create a native image with the <ph id="ph1">`/Debug`</ph>option.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`uninstall`</ph> action also recognize scenarios, so you can uninstall all scenarios or only selected scenarios.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Determining when to Use native images</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Native images can provide performance improvements in two areas: improved memory use and reduced startup time.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Performance of native images depends on a number of factors that make analysis difficult, such as code and data access patterns, how many calls are made across module boundaries, and how many dependencies have already been loaded by other applications.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The only way to determine whether native images benefit your application is by careful performance measurements in your key deployment scenarios.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Improved memory use</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Native images can significantly improve memory use when code is shared between processes.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Native images are Windows PE files, so a single copy of a .dll file can be shared by multiple processes; by contrast, native code produced by the JIT compiler is stored in private memory and cannot be shared.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Applications that are run under terminal services can also benefit from shared code pages.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>In addition, not loading the JIT compiler saves a fixed amount of memory for each application instance.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Faster application startup</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Precompiling assemblies with Ngen.exe can improve the startup time for some applications.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>In general, gains can be made when applications share component assemblies because after the first application has been started the shared components are already loaded for subsequent applications.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Cold startup, in which all the assemblies in an application must be loaded from the hard disk, does not benefit as much from native images because the hard disk access time predominates.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Hard binding can affect startup time, because all images that are hard bound to the main application assembly must be loaded at the same time.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Before the <ph id="ph1">[!INCLUDE[net_v35SP1_long](../../../includes/net-v35sp1-long-md.md)]</ph>, you should put shared, strong-named components in the global assembly cache, because the loader performs extra validation on strong-named assemblies that are not in the global assembly cache, effectively eliminating any improvement in startup time gained by using native images.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Optimizations that were introduced in the <ph id="ph1">[!INCLUDE[net_v35SP1_short](../../../includes/net-v35sp1-short-md.md)]</ph> removed the extra validation.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Summary of usage considerations</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The following general considerations and application considerations may assist you in deciding whether to undertake the effort of evaluating native images for your application:</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Native images load faster than MSIL because they eliminate the need for many startup activities, such as JIT compilation and type-safety verification.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Native images require a smaller initial working set because there is no need for the JIT compiler.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Native images enable code sharing between processes.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Native images require more hard disk space than MSIL assemblies and may require considerable time to generate.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Native images must be maintained.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Images need to be regenerated when the original assembly or one of its dependencies is serviced.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A single assembly may need multiple native images for use in different applications or different scenarios.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For example, the configuration information in two applications might result in different binding decisions for the same dependent assembly.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Native images must be generated by an administrator; that is, from a Windows account in the Administrators group.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>In addition to these general considerations, the nature of your application must be considered when determining whether native images might provide a performance benefit:</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If your application runs in an environment that uses many shared components, native images allow the components to be shared by multiple processes.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If your application uses multiple application domains, native images allow code pages to be shared across domains.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>In the .NET Framework versions 1.0 and 1.1, native images cannot be shared across application domains.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This is not the case in version 2.0 or later.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If your application will be run under Terminal Server, native images allow sharing of code pages.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Large applications generally benefit from compilation to native images.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Small applications generally do not benefit.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For long-running applications, run-time JIT compilation performs slightly better than native images.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>(Hard binding can mitigate this performance difference to some degree.)</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Importance of assembly base addresses</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Because native images are Windows PE files, they are subject to the same rebasing issues as other executable files.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The performance cost of relocation is even more pronounced if hard binding is employed.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>To set the base address for a native image, use the appropriate option of your compiler to set the base address for the assembly.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Ngen.exe uses this base address for the native image.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Native images are larger than the managed assemblies from which they were created.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Base addresses must be calculated to allow for these larger sizes.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>You can use a tool such as dumpbin.exe to view the preferred base address of a native image.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Hard binding</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Hard binding increases throughput and reduces working set size for native images.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The disadvantage of hard binding is that all the images that are hard bound to an assembly must be loaded when the assembly is loaded.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This can significantly increase startup time for a large application.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Hard binding is appropriate for dependencies that are loaded in all your application's performance-critical scenarios.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>As with any aspect of native image use, careful performance measurements are the only way to determine whether hard binding improves your application's performance.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.DependencyAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.DefaultDependencyAttribute&gt;</ph> attributes allow you to provide hard binding hints to Ngen.exe.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>These attributes are hints to Ngen.exe, not commands.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Using them does not guarantee hard binding.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The meaning of these attributes may change in future releases.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Specifying a binding hint for a dependency</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.DependencyAttribute&gt;</ph> to an assembly to indicate the likelihood that a specified dependency will be loaded.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.LoadHint?displayProperty=fullName&gt;</ph> indicates that hard binding is appropriate, <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.LoadHint&gt;</ph> indicates that the default for the dependency should be used, and <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.LoadHint&gt;</ph> indicates that hard binding is not appropriate.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The following code shows the attributes for an assembly that has two dependencies.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The first dependency (Assembly1) is an appropriate candidate for hard binding, and the second (Assembly2) is not.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The assembly name does not include the file name extension.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Display names can be used.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Specifying a default binding hint for an assembly</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Default binding hints are only needed for assemblies that will be used immediately and frequently by any application that has a dependency on them.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.DefaultDependencyAttribute&gt;</ph> with <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.LoadHint?displayProperty=fullName&gt;</ph> to such assemblies to specify that hard binding should be used.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>There is no reason to apply <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.DefaultDependencyAttribute&gt;</ph> to .dll assemblies that do not fall into this category, because applying the attribute with any value other than <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.LoadHint?displayProperty=fullName&gt;</ph> has the same effect as not applying the attribute at all.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Microsoft uses the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.DefaultDependencyAttribute&gt;</ph> to specify that hard binding is the default for a very small number of assemblies in the .NET Framework, such as mscorlib.dll.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Deferred processing</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Generation of native images for a very large application can take considerable time.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Similarly, changes to a shared component or changes to computer settings might require many native images to be updated.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`install`</ph> and <ph id="ph2">`update`</ph> actions have a <ph id="ph3">`/queue`</ph> option that queues the operation for deferred execution by the native image service.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>In addition, Ngen.exe has <ph id="ph1">`queue`</ph> and <ph id="ph2">`executeQueuedItems`</ph> actions that provide some control over the service.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Native Image Service<ept id="p1">](http://msdn.microsoft.com/en-us/b15e0e32-59cb-4ae4-967c-6c9527781309)</ept>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Native images and JIT compilation</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>If Ngen.exe encounters any methods in an assembly that it cannot generate, it excludes them from the native image.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>When the runtime executes this assembly, it reverts to JIT compilation for the methods that were not included in the native image.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>In addition, native images are not used if the assembly has been upgraded, or if the image has been invalidated for any reason.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Invalid images</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>When you use Ngen.exe to create a native image of an assembly, the output depends upon the command-line options that you specify and certain settings on your computer.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>These settings include the following:</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The version of the operating system, if the change is from the Windows 9x family to the Windows NT family.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The exact identity of the assembly (recompilation changes identity).</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The exact identity of all assemblies that the assembly references (recompilation changes identity).</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Security factors.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Ngen.exe records this information when it generates a native image.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>When you execute an assembly, the runtime looks for the native image generated with options and settings that match the computer's current environment.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The runtime reverts to JIT compilation of an assembly if it cannot find a matching native image.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The following changes to a computer's settings and environment cause native images to become invalid:</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>If you apply an update to the .NET Framework, all native images that you have created using Ngen.exe become invalid.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>For this reason, all updates of the .NET Framework execute the <ph id="ph1">`Ngen Update`</ph> command, to ensure that all native images are regenerated.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The .NET Framework automatically creates new native images for the .NET Framework libraries that it installs.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The version of the operating system, if the change is from the Windows 9x family to the Windows NT family.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>For example, if the version of the operating system running on a computer changes from Windows 98 to Windows XP, all native images stored in the native image cache become invalid.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>However, if the operating system changes from Windows 2000 to Windows XP, the images are not invalidated.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The exact identity of the assembly.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>If you recompile an assembly, the assembly's corresponding native image becomes invalid.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The exact identity of any assemblies the assembly references.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If you update a managed assembly, all native images that directly or indirectly depend on that assembly become invalid and need to be regenerated.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This includes both ordinary references and hard-bound dependencies.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Whenever a software update is applied, the installation program should execute an <ph id="ph1">`Ngen Update`</ph> command to ensure that all dependent native images are regenerated.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Security factors.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Changing machine security policy to restrict permissions previously granted to an assembly can cause a previously compiled native image for that assembly to become invalid.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>For detailed information about how the common language runtime administers code access security and how to use permissions, see <bpt id="p1">[</bpt>Code Access Security<ept id="p1">](../../../docs/framework/misc/code-access-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The following troubleshooting topics allow you to see which native images are being used and which cannot be used by your application, to determine when the JIT compiler starts to compile a method, and shows how to opt out of native image compilation of specified methods.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Assembly Binding Log Viewer</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>To confirm that native images are being used by your application, you can use the <bpt id="p1">[</bpt>Fuslogvw.exe (Assembly Binding Log Viewer)<ept id="p1">](../../../docs/framework/tools/fuslogvw-exe-assembly-binding-log-viewer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Native Images<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Log Categories<ept id="p2">**</ept> box on the binding log viewer window.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Fuslogvw.exe provides information about why a native image was rejected.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The JITCompilationStart managed debugging assistant</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>jitCompilationStart<ept id="p1">](../../../docs/framework/debug-trace-profile/jitcompilationstart-mda.md)</ept> managed debugging assistant (MDA) to determine when the JIT compiler starts to compile a function.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Opting out of native image generation</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>In some cases, NGen.exe may have difficulty generating a native image for a specific method, or you may prefer that the method be JIT compiled rather then compiled to a native image.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>In this case, you can use the <ph id="ph1">`System.Runtime.BypassNGenAttribute`</ph> attribute to prevent NGen.exe from generating a native image for a particular method.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The attribute must be applied individually to each method whose code you do not want to include in the native image.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>NGen.exe recognizes the attribute and does not generate code in the native image for the corresponding method.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Note, however, that <ph id="ph1">`BypassNGenAttribute`</ph> is not defined as a type in the .NET Framework Class library.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In order to consume the attribute in your code, you must first define it as follows:</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Runtime.BypassNGenAttribute#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/System.Runtime.BypassNGenAttribute/cs/Optout1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.BypassNGenAttribute#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Runtime.BypassNGenAttribute/vb/Optout1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>You can then apply the attribute on a per-method basis.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The following example instructs the Native Image Generator that it should not generate a native image for the <ph id="ph1">`ExampleClass.ToJITCompile`</ph> method.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Runtime.BypassNGenAttribute#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/System.Runtime.BypassNGenAttribute/cs/Optout1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.BypassNGenAttribute#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Runtime.BypassNGenAttribute/vb/Optout1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The following command generates a native image for <ph id="ph1">`ClientApp.exe`</ph>, located in the current directory, and installs the image in the native image cache.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>If a configuration file exists for the assembly, Ngen.exe uses it.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>In addition, native images are generated for any .dll files that <ph id="ph1">`ClientApp.exe`</ph> references.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>An image installed with Ngen.exe is also called a root.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>A root can be an application or a shared component.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The following command generates a native image for <ph id="ph1">`MyAssembly.exe`</ph> with the specified path.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>When locating assemblies and their dependencies, Ngen.exe uses the same probing logic used by the common language runtime.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>By default, the directory that contains <ph id="ph1">`ClientApp.exe`</ph> is used as the application base directory, and all assembly probing begins in this directory.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>You can override this behavior by using the <ph id="ph1">`/AppBase`</ph> option.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>This is a change from Ngen.exe behavior in the .NET Framework versions 1.0 and 1.1, where the application base is set to the current directory.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>An assembly can have a dependency without a reference, for example if it loads a .dll file by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>You can create a native image for such a .dll file by using configuration information for the application assembly, with the <ph id="ph1">`/ExeConfig`</ph> option.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The following command generates a native image for <ph id="ph1">`MyLib.dll,`</ph> using the configuration information from <ph id="ph2">`MyApp.exe`</ph>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Assemblies installed in this way are not removed when the application is removed.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>To uninstall a dependency, use the same command-line options that were used to install it.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The following command uninstalls the <ph id="ph1">`MyLib.dll`</ph> from the previous example.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>To create a native image for an assembly in the global assembly cache, use the display name of the assembly.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>NGen.exe generates a separate set of images for each scenario you install.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>For example, the following commands install a complete set of native images for normal operation, another complete set for debugging, and a third for profiling:</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Displaying the Native Image Cache</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Once native images are installed in the cache, they can be displayed using Ngen.exe.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The following command displays all native images in the native image cache.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`display`</ph> action lists all the root assemblies first, followed by a list of all the native images on the computer.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Use the simple name of an assembly to display information only for that assembly.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The following command displays all native images in the native image cache that match the partial name <ph id="ph1">`MyAssembly`</ph>, their dependencies, and all roots that have a dependency on <ph id="ph2">`MyAssembly`</ph>:</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Knowing what roots depend on a shared component assembly is useful in gauging the impact of an <ph id="ph1">`update`</ph> action after the shared component is upgraded.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>If you specify an assembly's file extension, you must either specify the path or execute Ngen.exe from the directory containing the assembly:</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The following command displays all native images in the native image cache with the name <ph id="ph1">`MyAssembly`</ph> and the version 1.0.0.0.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Updating Images</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Images are typically updated after a shared component has been upgraded.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>To update all native images that have changed, or whose dependencies have changed, use the <ph id="ph1">`update`</ph> action with no arguments.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Updating all images can be a lengthy process.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>You can queue the updates for execution by the native image service by using the <ph id="ph1">`/queue`</ph> option.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>For more information on the <ph id="ph1">`/queue`</ph> option and installation priorities, see <bpt id="p1">[</bpt>Native Image Service<ept id="p1">](http://msdn.microsoft.com/en-us/b15e0e32-59cb-4ae4-967c-6c9527781309)</ept>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Uninstalling Images</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Ngen.exe maintains a list of dependencies, so that shared components are removed only when all assemblies that depend on them have been removed.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>In addition, a shared component is not removed if it has been installed as a root.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The following command uninstalls all scenarios for the root <ph id="ph1">`ClientApp.exe`</ph>:</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`uninstall`</ph> action can be used to remove specific scenarios.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The following command uninstalls all debug scenarios for <ph id="ph1">`ClientApp.exe`</ph>:</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Uninstalling <ph id="ph1">`/debug`</ph> scenarios does not uninstall a scenario that includes both <ph id="ph2">`/profile`</ph> and <ph id="ph3">`/debug.`</ph></source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The following command uninstalls all scenarios for a specific version of <ph id="ph1">`ClientApp.exe`</ph>:</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The following commands uninstall all scenarios for <ph id="ph1">`"ClientApp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3c7ba247adcd2081, processorArchitecture=MSIL",`</ph> or just the debug scenario for that assembly:</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>As with the <ph id="ph1">`install`</ph> action, supplying an extension requires either executing Ngen.exe from the directory containing the assembly or specifying a full path.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>For examples relating to the native image service, see <bpt id="p1">[</bpt>Native Image Service<ept id="p1">](http://msdn.microsoft.com/en-us/b15e0e32-59cb-4ae4-967c-6c9527781309)</ept>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Native Image Task</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The native image task is a Windows task that generates and maintains native images.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The native image task generates and reclaims native images automatically for supported scenarios.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Creating Native Images<ept id="p1">](http://msdn.microsoft.com/en-us/2bc8b678-dd8d-4742-ad82-319e9bf52418)</ept>.) It also enables installers to use <bpt id="p2">[</bpt>Ngen.exe (Native Image Generator)<ept id="p2">](../../../docs/framework/tools/ngen-exe-native-image-generator.md)</ept> to create and update native images at a deferred time.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The native image task is registered once for each CPU architecture supported on a computer, to allow compilation for applications that target each architecture:</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Task name</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>32-bit computer</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>64-bit computer</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>NET Framework NGEN v4.0.30319</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>NET Framework NGEN v4.0.30319 64</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The native image task is is available in the .NET Framework 4.5 and later versions, when running on Windows 8 or later.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>On earlier versions of Windows, the .NET Framework uses the <bpt id="p1">[</bpt>Native Image Service<ept id="p1">](http://msdn.microsoft.com/en-us/b15e0e32-59cb-4ae4-967c-6c9527781309)</ept>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Task Lifetime</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>In general, the Windows Task Scheduler starts the native image task every night when the computer is idle.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The task checks for any deferred work that is queued by application installers, any deferred native image update requests, and any automatic image creation.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The task completes outstanding work items and then shuts down.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>If the computer stops being idle while the task is running, the task stops.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>You can also start the native image task manually through the Task Scheduler UI or through manual calls to NGen.exe.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>If the task is started through either of these methods, it will continue running when the computer is no longer idle.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Images created manually by using NGen.exe are prioritized to enable predictable behavior for application installers.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Native Image Service</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The native image service is a Windows service that generates and maintains native images.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The native image service allows the developer to defer the installation and update of native images to periods when the computer is idle.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Normally, the native image service is initiated by the installation program (installer) for an application or update.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>For priority 3 actions, the service executes during idle time on the computer.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The service saves its state and is capable of continuing through multiple reboots if necessary.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Multiple image compilations can be queued.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The service also interacts with the manual Ngen.exe command.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Manual commands take precedence over background activity.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>On Windows Vista, the name displayed for the native image service is "Microsoft.NET Framework NGEN v2.0.50727_X86" or "Microsoft.NET Framework NGEN v2.0.50727_X64".</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>On all earlier versions of Microsoft Windows, the name is ".NET Runtime Optimization Service v2.0.50727_X86" or ".NET Runtime Optimization Service v2.0.50727_X64".</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Launching Deferred Operations</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Before beginning an installation or upgrade, pausing the service is recommended.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>This ensures that the service does not execute while the installer is copying files or putting assemblies in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The following Ngen.exe command line pauses the service:</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>When all deferred operations have been queued, the following command allows the service to resume:</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>To defer native image generation when installing a new application or when updating a shared component, use the <ph id="ph1">`/queue`</ph> option with the <ph id="ph2">`install`</ph> or <ph id="ph3">`update`</ph> actions.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The following Ngen.exe command lines install a native image for a shared component and perform an update of all roots that may have been affected:</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`update`</ph> action regenerates all native images that have been invalidated, not just those that use <ph id="ph2">`MyComponent`</ph>.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>If your application consists of many roots, you can control the priority of the deferred actions.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The following commands queue the installation of three roots.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Assembly1`</ph> is installed first, without waiting for idle time.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Assembly2`</ph> is also installed without waiting for idle time, but after all priority 1 actions have completed.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Assembly3`</ph> is installed when the service detects that the computer is idle.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>You can force queued actions to occur synchronously by using the <ph id="ph1">`executeQueuedItems`</ph> action.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>If you supply the optional priority, this action affects only the queued actions that have equal or lower priority.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The default priority is 3, so the following Ngen.exe command processes all queued actions immediately, and does not return until they are finished:</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Synchronous commands are executed by Ngen.exe and do not use the native image service.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>You can execute actions using Ngen.exe while the native image service is running.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Service Shutdown</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>After being initiated by the execution of an Ngen.exe command that includes the <ph id="ph1">`/queue`</ph> option, the service runs in the background until all actions have been completed.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The service saves its state so that it can continue through multiple reboots if necessary.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>When the service detects that there are no more actions queued, it resets its status so that it will not restart the next time the computer is booted, and then it shuts itself down.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Service Interaction with Clients</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>In the .NET Framework version 2.0, the only interaction with the native image service is through the command-line tool Ngen.exe.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Use the command-line tool in installation scripts to queue actions for the native image service and to interact with the service.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Native Image Service<ept id="p1">](http://msdn.microsoft.com/en-us/b15e0e32-59cb-4ae4-967c-6c9527781309)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Native Image Task<ept id="p1">](http://msdn.microsoft.com/en-us/9b1f7590-4e0d-4737-90ef-eaf696932afb)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tools<ept id="p1">](../../../docs/framework/tools/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managed Execution Process<ept id="p1">](../../../docs/standard/managed-execution-process.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How the Runtime Locates Assemblies<ept id="p1">](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>