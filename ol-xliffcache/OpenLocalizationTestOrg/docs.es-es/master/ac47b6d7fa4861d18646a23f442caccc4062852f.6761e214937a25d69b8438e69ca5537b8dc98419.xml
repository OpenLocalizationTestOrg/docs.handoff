{"content":"---\ntitle: \"Logical and Bitwise Operators in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"short-circuiting\"\n  - \"Boolean expressions\"\n  - \"logical operators [Visual Basic], Boolean expressions\"\n  - \"operators [Visual Basic], logical\"\n  - \"AndAlso operator [Visual Basic]\"\n  - \"Not operator [Visual Basic], Boolean expressions\"\n  - \"Xor operator [Visual Basic], Boolean expressions\"\n  - \"And operator [Visual Basic], logical operators\"\n  - \"logical operators [Visual Basic]\"\n  - \"expressions [Visual Basic], Boolean\"\n  - \"Or operator [Visual Basic], logical operators\"\n  - \"Visual Basic code, operators\"\n  - \"short-circuiting [Visual Basic], logical operators\"\n  - \"logical operators [Visual Basic], short-circuiting\"\n  - \"Visual Basic code, expressions\"\n  - \"logical operators [Visual Basic], binary\"\n  - \"OrElse operator [Visual Basic]\"\n  - \"logical operators [Visual Basic], unary\"\nms.assetid: ca474e13-567d-4b1d-a18b-301433705e57\n---\n# Logical and Bitwise Operators in Visual Basic\nLogical operators compare `Boolean` expressions and return a `Boolean` result. The `And`, `Or`, `AndAlso`, `OrElse`, and `Xor` operators are *binary* because they take two operands, while the `Not` operator is *unary* because it takes a single operand. Some of these operators can also perform bitwise logical operations on integral values.  \n  \n## Unary Logical Operator  \n The [Not Operator](../../../../visual-basic/language-reference/operators/not-operator.md) performs logical *negation* on a `Boolean` expression. It yields the logical opposite of its operand. If the expression evaluates to `True`, then `Not` returns `False`; if the expression evaluates to `False`, then `Not` returns `True`. The following example illustrates this.  \n  \n [!code-vb[VbVbalrOperators#77](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#77)]  \n  \n## Binary Logical Operators  \n The [And Operator](../../../../visual-basic/language-reference/operators/and-operator.md) performs logical *conjunction* on two `Boolean` expressions. If both expressions evaluate to `True`, then `And` returns `True`. If at least one of the expressions evaluates to `False`, then `And` returns `False`.  \n  \n The [Or Operator](../../../../visual-basic/language-reference/operators/or-operator.md) performs logical *disjunction* or *inclusion* on two `Boolean` expressions. If either expression evaluates to `True`, or both evaluate to `True`, then `Or` returns `True`. If neither expression evaluates to `True`, `Or` returns `False`.  \n  \n The [Xor Operator](../../../../visual-basic/language-reference/operators/xor-operator.md) performs logical *exclusion* on two `Boolean` expressions. If exactly one expression evaluates to `True`, but not both, `Xor` returns `True`. If both expressions evaluate to `True` or both evaluate to `False`, `Xor` returns `False`.  \n  \n The following example illustrates the `And`, `Or`, and `Xor` operators.  \n  \n [!code-vb[VbVbalrOperators#78](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#78)]  \n  \n## Short-Circuiting Logical Operations  \n The [AndAlso Operator](../../../../visual-basic/language-reference/operators/andalso-operator.md) is very similar to the `And` operator, in that it also performs logical conjunction on two `Boolean` expressions. The key difference between the two is that `AndAlso` exhibits *short-circuiting* behavior. If the first expression in an `AndAlso` expression evaluates to `False`, then the second expression is not evaluated because it cannot alter the final result, and `AndAlso` returns `False`.  \n  \n Similarly, the [OrElse Operator](../../../../visual-basic/language-reference/operators/orelse-operator.md) performs short-circuiting logical disjunction on two `Boolean` expressions. If the first expression in an `OrElse` expression evaluates to `True`, then the second expression is not evaluated because it cannot alter the final result, and `OrElse` returns `True`.  \n  \n### Short-Circuiting Trade-Offs  \n Short-circuiting can improve performance by not evaluating an expression that cannot alter the result of the logical operation. However, if that expression performs additional actions, short-circuiting skips those actions. For example, if the expression includes a call to a `Function` procedure, that procedure is not called if the expression is short-circuited, and any additional code contained in the `Function` does not run. Therefore, the function might run only occasionally, and might not be tested correctly. Or the program logic might depend on the code in the `Function`.  \n  \n The following example illustrates the difference between `And`, `Or`, and their short-circuiting counterparts.  \n  \n [!code-vb[VbVbalrOperators#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#81)]  \n  \n [!code-vb[VbVbalrOperators#80](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#80)]  \n  \n [!code-vb[VbVbalrOperators#79](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#79)]  \n  \n In the preceding example, note that some important code inside `checkIfValid()` does not run when the call is short-circuited. The first `If` statement calls `checkIfValid()` even though `12 > 45` returns `False`, because `And` does not short-circuit. The second `If` statement does not call `checkIfValid()`, because when `12 > 45` returns `False`, `AndAlso` short-circuits the second expression. The third `If` statement calls `checkIfValid()` even though `12 < 45` returns `True`, because `Or` does not short-circuit. The fourth `If` statement does not call `checkIfValid()`, because when `12 < 45` returns `True`, `OrElse` short-circuits the second expression.  \n  \n## Bitwise Operations  \n Bitwise operations evaluate two integral values in binary (base 2) form. They compare the bits at corresponding positions and then assign values based on the comparison. The following example illustrates the `And` operator.  \n  \n [!code-vb[VbVbalrConcepts#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrConcepts/VB/Class1.vb#2)]  \n  \n The preceding example sets the value of `x` to 1. This happens for the following reasons:  \n  \n-   The values are treated as binary:  \n  \n     3 in binary form = 011  \n  \n     5 in binary form = 101  \n  \n-   The `And` operator compares the binary representations, one binary position (bit) at a time. If both bits at a given position are 1, then a 1 is placed in that position in the result. If either bit is 0, then a 0 is placed in that position in the result. In the preceding example this works out as follows:  \n  \n     011 (3 in binary form)  \n  \n     101 (5 in binary form)  \n  \n     001 (The result, in binary form)  \n  \n-   The result is treated as decimal. The value 001 is the binary representation of 1, so `x` = 1.  \n  \n The bitwise `Or` operation is similar, except that a 1 is assigned to the result bit if either or both of the compared bits is 1. `Xor` assigns a 1 to the result bit if exactly one of the compared bits (not both) is 1. `Not` takes a single operand and inverts all the bits, including the sign bit, and assigns that value to the result. This means that for signed positive numbers, `Not` always returns a negative value, and for negative numbers, `Not` always returns a positive or zero value.  \n  \n The `AndAlso` and `OrElse` operators do not support bitwise operations.  \n  \n> [!NOTE]\n>  Bitwise operations can be performed on integral types only. Floating-point values must be converted to integral types before bitwise operation can proceed.  \n  \n## See also\n\n- [Logical/Bitwise Operators (Visual Basic)](../../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)\n- [Boolean Expressions](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)\n- [Arithmetic Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)\n- [Comparison Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)\n- [Concatenation Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)\n- [Efficient Combination of Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)\n","nodes":[{"pos":[4,948],"embed":true,"restype":"x-metadata","content":"title: \"Logical and Bitwise Operators in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"short-circuiting\"\n  - \"Boolean expressions\"\n  - \"logical operators [Visual Basic], Boolean expressions\"\n  - \"operators [Visual Basic], logical\"\n  - \"AndAlso operator [Visual Basic]\"\n  - \"Not operator [Visual Basic], Boolean expressions\"\n  - \"Xor operator [Visual Basic], Boolean expressions\"\n  - \"And operator [Visual Basic], logical operators\"\n  - \"logical operators [Visual Basic]\"\n  - \"expressions [Visual Basic], Boolean\"\n  - \"Or operator [Visual Basic], logical operators\"\n  - \"Visual Basic code, operators\"\n  - \"short-circuiting [Visual Basic], logical operators\"\n  - \"logical operators [Visual Basic], short-circuiting\"\n  - \"Visual Basic code, expressions\"\n  - \"logical operators [Visual Basic], binary\"\n  - \"OrElse operator [Visual Basic]\"\n  - \"logical operators [Visual Basic], unary\"\nms.assetid: ca474e13-567d-4b1d-a18b-301433705e57","nodes":[{"content":"Logical and Bitwise Operators in Visual Basic","nodes":[{"pos":[0,45],"content":"Logical and Bitwise Operators in Visual Basic","nodes":[{"content":"Logical and Bitwise Operators in Visual Basic","pos":[0,45]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[955,1000],"content":"Logical and Bitwise Operators in Visual Basic","linkify":"Logical and Bitwise Operators in Visual Basic","nodes":[{"content":"Logical and Bitwise Operators in Visual Basic","pos":[0,45]}]},{"content":"Logical operators compare <ph id=\"ph1\">`Boolean`</ph> expressions and return a <ph id=\"ph2\">`Boolean`</ph> result.","pos":[1001,1079],"source":"Logical operators compare `Boolean` expressions and return a `Boolean` result."},{"content":"The <ph id=\"ph1\">`And`</ph>, <ph id=\"ph2\">`Or`</ph>, <ph id=\"ph3\">`AndAlso`</ph>, <ph id=\"ph4\">`OrElse`</ph>, and <ph id=\"ph5\">`Xor`</ph> operators are <bpt id=\"p1\">*</bpt>binary<ept id=\"p1\">*</ept> because they take two operands, while the <ph id=\"ph6\">`Not`</ph> operator is <bpt id=\"p2\">*</bpt>unary<ept id=\"p2\">*</ept> because it takes a single operand.","pos":[1080,1253],"source":" The `And`, `Or`, `AndAlso`, `OrElse`, and `Xor` operators are *binary* because they take two operands, while the `Not` operator is *unary* because it takes a single operand."},{"content":"Some of these operators can also perform bitwise logical operations on integral values.","pos":[1254,1341]},{"pos":[1350,1372],"content":"Unary Logical Operator","linkify":"Unary Logical Operator","nodes":[{"content":"Unary Logical Operator","pos":[0,22]}]},{"content":"The <bpt id=\"p1\">[</bpt>Not Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/not-operator.md)</ept> performs logical <bpt id=\"p2\">*</bpt>negation<ept id=\"p2\">*</ept> on a <ph id=\"ph1\">`Boolean`</ph> expression.","pos":[1376,1520],"source":"The [Not Operator](../../../../visual-basic/language-reference/operators/not-operator.md) performs logical *negation* on a `Boolean` expression."},{"content":"It yields the logical opposite of its operand.","pos":[1521,1567]},{"content":"If the expression evaluates to <ph id=\"ph1\">`True`</ph>, then <ph id=\"ph2\">`Not`</ph> returns <ph id=\"ph3\">`False`</ph>; if the expression evaluates to <ph id=\"ph4\">`False`</ph>, then <ph id=\"ph5\">`Not`</ph> returns <ph id=\"ph6\">`True`</ph>.","pos":[1568,1701],"source":" If the expression evaluates to `True`, then `Not` returns `False`; if the expression evaluates to `False`, then `Not` returns `True`."},{"content":"The following example illustrates this.","pos":[1702,1741]},{"pos":[1874,1898],"content":"Binary Logical Operators","linkify":"Binary Logical Operators","nodes":[{"content":"Binary Logical Operators","pos":[0,24]}]},{"content":"The <bpt id=\"p1\">[</bpt>And Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/and-operator.md)</ept> performs logical <bpt id=\"p2\">*</bpt>conjunction<ept id=\"p2\">*</ept> on two <ph id=\"ph1\">`Boolean`</ph> expressions.","pos":[1902,2052],"source":"The [And Operator](../../../../visual-basic/language-reference/operators/and-operator.md) performs logical *conjunction* on two `Boolean` expressions."},{"content":"If both expressions evaluate to <ph id=\"ph1\">`True`</ph>, then <ph id=\"ph2\">`And`</ph> returns <ph id=\"ph3\">`True`</ph>.","pos":[2053,2119],"source":" If both expressions evaluate to `True`, then `And` returns `True`."},{"content":"If at least one of the expressions evaluates to <ph id=\"ph1\">`False`</ph>, then <ph id=\"ph2\">`And`</ph> returns <ph id=\"ph3\">`False`</ph>.","pos":[2120,2204],"source":" If at least one of the expressions evaluates to `False`, then `And` returns `False`."},{"content":"The <bpt id=\"p1\">[</bpt>Or Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/or-operator.md)</ept> performs logical <bpt id=\"p2\">*</bpt>disjunction<ept id=\"p2\">*</ept> or <bpt id=\"p3\">*</bpt>inclusion<ept id=\"p3\">*</ept> on two <ph id=\"ph1\">`Boolean`</ph> expressions.","pos":[2211,2374],"source":"The [Or Operator](../../../../visual-basic/language-reference/operators/or-operator.md) performs logical *disjunction* or *inclusion* on two `Boolean` expressions."},{"content":"If either expression evaluates to <ph id=\"ph1\">`True`</ph>, or both evaluate to <ph id=\"ph2\">`True`</ph>, then <ph id=\"ph3\">`Or`</ph> returns <ph id=\"ph4\">`True`</ph>.","pos":[2375,2470],"source":" If either expression evaluates to `True`, or both evaluate to `True`, then `Or` returns `True`."},{"content":"If neither expression evaluates to <ph id=\"ph1\">`True`</ph>, <ph id=\"ph2\">`Or`</ph> returns <ph id=\"ph3\">`False`</ph>.","pos":[2471,2535],"source":" If neither expression evaluates to `True`, `Or` returns `False`."},{"content":"The <bpt id=\"p1\">[</bpt>Xor Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/xor-operator.md)</ept> performs logical <bpt id=\"p2\">*</bpt>exclusion<ept id=\"p2\">*</ept> on two <ph id=\"ph1\">`Boolean`</ph> expressions.","pos":[2542,2690],"source":"The [Xor Operator](../../../../visual-basic/language-reference/operators/xor-operator.md) performs logical *exclusion* on two `Boolean` expressions."},{"content":"If exactly one expression evaluates to <ph id=\"ph1\">`True`</ph>, but not both, <ph id=\"ph2\">`Xor`</ph> returns <ph id=\"ph3\">`True`</ph>.","pos":[2691,2773],"source":" If exactly one expression evaluates to `True`, but not both, `Xor` returns `True`."},{"content":"If both expressions evaluate to <ph id=\"ph1\">`True`</ph> or both evaluate to <ph id=\"ph2\">`False`</ph>, <ph id=\"ph3\">`Xor`</ph> returns <ph id=\"ph4\">`False`</ph>.","pos":[2774,2864],"source":" If both expressions evaluate to `True` or both evaluate to `False`, `Xor` returns `False`."},{"pos":[2871,2942],"content":"The following example illustrates the <ph id=\"ph1\">`And`</ph>, <ph id=\"ph2\">`Or`</ph>, and <ph id=\"ph3\">`Xor`</ph> operators.","source":"The following example illustrates the `And`, `Or`, and `Xor` operators."},{"pos":[3075,3110],"content":"Short-Circuiting Logical Operations","linkify":"Short-Circuiting Logical Operations","nodes":[{"content":"Short-Circuiting Logical Operations","pos":[0,35]}]},{"content":"The <bpt id=\"p1\">[</bpt>AndAlso Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/andalso-operator.md)</ept> is very similar to the <ph id=\"ph1\">`And`</ph> operator, in that it also performs logical conjunction on two <ph id=\"ph2\">`Boolean`</ph> expressions.","pos":[3114,3325],"source":"The [AndAlso Operator](../../../../visual-basic/language-reference/operators/andalso-operator.md) is very similar to the `And` operator, in that it also performs logical conjunction on two `Boolean` expressions."},{"content":"The key difference between the two is that <ph id=\"ph1\">`AndAlso`</ph> exhibits <bpt id=\"p1\">*</bpt>short-circuiting<ept id=\"p1\">*</ept> behavior.","pos":[3326,3416],"source":" The key difference between the two is that `AndAlso` exhibits *short-circuiting* behavior."},{"content":"If the first expression in an <ph id=\"ph1\">`AndAlso`</ph> expression evaluates to <ph id=\"ph2\">`False`</ph>, then the second expression is not evaluated because it cannot alter the final result, and <ph id=\"ph3\">`AndAlso`</ph> returns <ph id=\"ph4\">`False`</ph>.","pos":[3417,3606],"source":" If the first expression in an `AndAlso` expression evaluates to `False`, then the second expression is not evaluated because it cannot alter the final result, and `AndAlso` returns `False`."},{"content":"Similarly, the <bpt id=\"p1\">[</bpt>OrElse Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/orelse-operator.md)</ept> performs short-circuiting logical disjunction on two <ph id=\"ph1\">`Boolean`</ph> expressions.","pos":[3613,3795],"source":"Similarly, the [OrElse Operator](../../../../visual-basic/language-reference/operators/orelse-operator.md) performs short-circuiting logical disjunction on two `Boolean` expressions."},{"content":"If the first expression in an <ph id=\"ph1\">`OrElse`</ph> expression evaluates to <ph id=\"ph2\">`True`</ph>, then the second expression is not evaluated because it cannot alter the final result, and <ph id=\"ph3\">`OrElse`</ph> returns <ph id=\"ph4\">`True`</ph>.","pos":[3796,3981],"source":" If the first expression in an `OrElse` expression evaluates to `True`, then the second expression is not evaluated because it cannot alter the final result, and `OrElse` returns `True`."},{"pos":[3991,4018],"content":"Short-Circuiting Trade-Offs","linkify":"Short-Circuiting Trade-Offs","nodes":[{"content":"Short-Circuiting Trade-Offs","pos":[0,27]}]},{"content":"Short-circuiting can improve performance by not evaluating an expression that cannot alter the result of the logical operation.","pos":[4022,4149]},{"content":"However, if that expression performs additional actions, short-circuiting skips those actions.","pos":[4150,4244]},{"content":"For example, if the expression includes a call to a <ph id=\"ph1\">`Function`</ph> procedure, that procedure is not called if the expression is short-circuited, and any additional code contained in the <ph id=\"ph2\">`Function`</ph> does not run.","pos":[4245,4451],"source":" For example, if the expression includes a call to a `Function` procedure, that procedure is not called if the expression is short-circuited, and any additional code contained in the `Function` does not run."},{"content":"Therefore, the function might run only occasionally, and might not be tested correctly.","pos":[4452,4539]},{"content":"Or the program logic might depend on the code in the <ph id=\"ph1\">`Function`</ph>.","pos":[4540,4604],"source":" Or the program logic might depend on the code in the `Function`."},{"pos":[4611,4721],"content":"The following example illustrates the difference between <ph id=\"ph1\">`And`</ph>, <ph id=\"ph2\">`Or`</ph>, and their short-circuiting counterparts.","source":"The following example illustrates the difference between `And`, `Or`, and their short-circuiting counterparts."},{"content":"In the preceding example, note that some important code inside <ph id=\"ph1\">`checkIfValid()`</ph> does not run when the call is short-circuited.","pos":[5100,5226],"source":"In the preceding example, note that some important code inside `checkIfValid()` does not run when the call is short-circuited."},{"content":"The first <ph id=\"ph1\">`If`</ph> statement calls <ph id=\"ph2\">`checkIfValid()`</ph> even though <ph id=\"ph3\">`12 &gt; 45`</ph> returns <ph id=\"ph4\">`False`</ph>, because <ph id=\"ph5\">`And`</ph> does not short-circuit.","pos":[5227,5351],"source":" The first `If` statement calls `checkIfValid()` even though `12 > 45` returns `False`, because `And` does not short-circuit."},{"content":"The second <ph id=\"ph1\">`If`</ph> statement does not call <ph id=\"ph2\">`checkIfValid()`</ph>, because when <ph id=\"ph3\">`12 &gt; 45`</ph> returns <ph id=\"ph4\">`False`</ph>, <ph id=\"ph5\">`AndAlso`</ph> short-circuits the second expression.","pos":[5352,5497],"source":" The second `If` statement does not call `checkIfValid()`, because when `12 > 45` returns `False`, `AndAlso` short-circuits the second expression."},{"content":"The third <ph id=\"ph1\">`If`</ph> statement calls <ph id=\"ph2\">`checkIfValid()`</ph> even though <ph id=\"ph3\">`12 &lt; 45`</ph> returns <ph id=\"ph4\">`True`</ph>, because <ph id=\"ph5\">`Or`</ph> does not short-circuit.","pos":[5498,5620],"source":" The third `If` statement calls `checkIfValid()` even though `12 < 45` returns `True`, because `Or` does not short-circuit."},{"content":"The fourth <ph id=\"ph1\">`If`</ph> statement does not call <ph id=\"ph2\">`checkIfValid()`</ph>, because when <ph id=\"ph3\">`12 &lt; 45`</ph> returns <ph id=\"ph4\">`True`</ph>, <ph id=\"ph5\">`OrElse`</ph> short-circuits the second expression.","pos":[5621,5764],"source":" The fourth `If` statement does not call `checkIfValid()`, because when `12 < 45` returns `True`, `OrElse` short-circuits the second expression."},{"pos":[5773,5791],"content":"Bitwise Operations","linkify":"Bitwise Operations","nodes":[{"content":"Bitwise Operations","pos":[0,18]}]},{"content":"Bitwise operations evaluate two integral values in binary (base 2) form.","pos":[5795,5867]},{"content":"They compare the bits at corresponding positions and then assign values based on the comparison.","pos":[5868,5964]},{"content":"The following example illustrates the <ph id=\"ph1\">`And`</ph> operator.","pos":[5965,6018],"source":" The following example illustrates the `And` operator."},{"content":"The preceding example sets the value of <ph id=\"ph1\">`x`</ph> to 1.","pos":[6145,6194],"source":"The preceding example sets the value of `x` to 1."},{"content":"This happens for the following reasons:","pos":[6195,6234]},{"content":"The values are treated as binary:","pos":[6244,6277]},{"content":"3 in binary form = 011","pos":[6288,6310]},{"content":"5 in binary form = 101","pos":[6321,6343]},{"content":"The <ph id=\"ph1\">`And`</ph> operator compares the binary representations, one binary position (bit) at a time.","pos":[6353,6445],"source":"The `And` operator compares the binary representations, one binary position (bit) at a time."},{"content":"If both bits at a given position are 1, then a 1 is placed in that position in the result.","pos":[6446,6536]},{"content":"If either bit is 0, then a 0 is placed in that position in the result.","pos":[6537,6607]},{"content":"In the preceding example this works out as follows:","pos":[6608,6659]},{"content":"011 (3 in binary form)","pos":[6670,6692]},{"content":"101 (5 in binary form)","pos":[6703,6725]},{"content":"001 (The result, in binary form)","pos":[6736,6768]},{"content":"The result is treated as decimal.","pos":[6778,6811]},{"content":"The value 001 is the binary representation of 1, so <ph id=\"ph1\">`x`</ph> = 1.","pos":[6812,6872],"source":" The value 001 is the binary representation of 1, so `x` = 1."},{"content":"The bitwise <ph id=\"ph1\">`Or`</ph> operation is similar, except that a 1 is assigned to the result bit if either or both of the compared bits is 1.","pos":[6879,7008],"source":"The bitwise `Or` operation is similar, except that a 1 is assigned to the result bit if either or both of the compared bits is 1."},{"content":"<ph id=\"ph1\">`Xor`</ph> assigns a 1 to the result bit if exactly one of the compared bits (not both) is 1.","pos":[7009,7097],"source":"`Xor` assigns a 1 to the result bit if exactly one of the compared bits (not both) is 1."},{"content":"<ph id=\"ph1\">`Not`</ph> takes a single operand and inverts all the bits, including the sign bit, and assigns that value to the result.","pos":[7098,7214],"source":"`Not` takes a single operand and inverts all the bits, including the sign bit, and assigns that value to the result."},{"content":"This means that for signed positive numbers, <ph id=\"ph1\">`Not`</ph> always returns a negative value, and for negative numbers, <ph id=\"ph2\">`Not`</ph> always returns a positive or zero value.","pos":[7215,7371],"source":" This means that for signed positive numbers, `Not` always returns a negative value, and for negative numbers, `Not` always returns a positive or zero value."},{"pos":[7378,7449],"content":"The <ph id=\"ph1\">`AndAlso`</ph> and <ph id=\"ph2\">`OrElse`</ph> operators do not support bitwise operations.","source":"The `AndAlso` and `OrElse` operators do not support bitwise operations."},{"pos":[7457,7623],"content":"[!NOTE]\n Bitwise operations can be performed on integral types only. Floating-point values must be converted to integral types before bitwise operation can proceed.","leadings":["","> "],"nodes":[{"content":"Bitwise operations can be performed on integral types only. Floating-point values must be converted to integral types before bitwise operation can proceed.","pos":[9,164],"nodes":[{"content":"Bitwise operations can be performed on integral types only.","pos":[0,59]},{"content":"Floating-point values must be converted to integral types before bitwise operation can proceed.","pos":[60,155]}]}]},{"pos":[7632,7640],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7644,7770],"content":"<bpt id=\"p1\">[</bpt>Logical/Bitwise Operators (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)</ept>","source":"[Logical/Bitwise Operators (Visual Basic)](../../../../visual-basic/language-reference/operators/logical-bitwise-operators.md)"},{"pos":[7773,7905],"content":"<bpt id=\"p1\">[</bpt>Boolean Expressions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)</ept>","source":"[Boolean Expressions](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)"},{"pos":[7908,8058],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"},{"pos":[8061,8211],"content":"<bpt id=\"p1\">[</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept>","source":"[Comparison Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)"},{"pos":[8214,8370],"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept>","source":"[Concatenation Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)"},{"pos":[8373,8535],"content":"<bpt id=\"p1\">[</bpt>Efficient Combination of Operators<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)</ept>","source":"[Efficient Combination of Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)"}]}