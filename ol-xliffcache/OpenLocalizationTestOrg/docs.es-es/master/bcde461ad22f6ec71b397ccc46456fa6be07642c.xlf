<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="inferring-schemas-from-xml-documents.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bcde461ad22f6ec71b397ccc46456fa6be07642c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\inferring-schemas-from-xml-documents.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df1e7162b1338fb52b08e4ab30fe939ca15208e3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc4d5c11b049b888e908866ee9b97b3974ad6574</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Inferring Schemas from XML Documents | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Inferring Schemas from XML Documents</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to use the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class to infer an XML Schema definition language (XSD) schema from the structure of an XML document.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Schema Inference Process</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class of the <ph id="ph2">&lt;xref:System.Xml.Schema?displayProperty=fullName&gt;</ph> namespace is used to generate one or more XML Schema definition language (XSD) schemas from the structure of an XML document.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The generated schemas may be used to validate the original XML document.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As an XML document is processed by the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class makes assumptions about the schema components that describe the elements and attributes in the XML document.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class also infers schema components in a constrained way by inferring the most restrictive type for a particular element or attribute.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As more information about the XML document is gathered, these constraints are loosened by inferring less restrictive types.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The least restrictive type that can be inferred is <ph id="ph1">`xs:string`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Take, for example, the following piece of an XML document.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the example above, when the <ph id="ph1">`attribute1`</ph> attribute is encountered with a value of <ph id="ph2">`6`</ph> by the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> process, it is assumed to be of type <ph id="ph4">`xs:unsignedByte`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When the second <ph id="ph1">`parent`</ph> element is encountered by the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> process, the constraint is loosened by modifying the type to <ph id="ph3">`xs:string`</ph> because the value of the <ph id="ph4">`attribute1`</ph> attribute is now <ph id="ph5">`A`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Similarly, the <ph id="ph1">`minOccurs`</ph> attribute for all the <ph id="ph2">`child`</ph> elements inferred in the schema are loosened to <ph id="ph3">`minOccurs="0"`</ph> because the second parent element has no child elements.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Inferring Schemas from XML Documents</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class uses two overloaded <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A&gt;</ph> methods to infer a schema from an XML document.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A?displayProperty=fullName&gt;</ph> method is used to create a schema based on an XML document.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A?displayProperty=fullName&gt;</ph> method is used to infer a schema that describes multiple XML documents.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, you can feed multiple XML documents to the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A?displayProperty=fullName&gt;</ph> method one at a time to produce a schema that describes the entire set of XML documents.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A?displayProperty=fullName&gt;</ph> method infers a schema from an XML document contained in an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> object, and returns an <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> object containing the inferred schema.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A?displayProperty=fullName&gt;</ph> method searches an <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> object for a schema with the same target namespace as the XML document contained in the <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> object, refines the existing schema, and returns an <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> object containing the inferred schema.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The changes made to the refined schema are based on new structure found in the XML document.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, as an XML document is traversed, assumptions are made about the data types found, and the schema is created based on those assumptions.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, if data is encountered on a second inference pass that differs from the original assumption, the schema is refined.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example illustrates the refinement process.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The example takes the following file, <ph id="ph1">`item1.xml`</ph>, as its first input.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The example then takes the <ph id="ph1">`item2.xml`</ph> file as its second input:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`productID`</ph> attribute is encountered in the first XML document, the value of <ph id="ph2">`123456789`</ph> is assumed to be an <ph id="ph3">`xs:unsignedInt`</ph> type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, when the second XML document is read and the value of <ph id="ph1">`A53-246`</ph> is found, the <ph id="ph2">`xs:unsignedInt`</ph> type can no longer be assumed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The schema is refined and the type of <ph id="ph1">`productID`</ph> is changed to <ph id="ph2">`xs:string`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`minOccurs`</ph> attribute for the <ph id="ph2">`supplierID`</ph> element is set to <ph id="ph3">`0`</ph>, because the second XML document contains no <ph id="ph4">`supplierID`</ph> element.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following is the schema inferred from the first XML document.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following is the schema inferred from the first XML document, refined by the second XML document.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Inline Schemas</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If an inline XML Schema definition language (XSD) schema is encountered during the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> process, an <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInferenceException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the following inline schema throws an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInferenceException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Schemas that Cannot be Refined</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>There are W3C XML Schema constructs that the XML Schema definition language (XSD) schema <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> process cannot handle if given a type to refine and cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Such as a complex type whose top-level compositor is anything other than a sequence.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the Schema Object Model (SOM), this corresponds to an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph> whose <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaComplexType.Particle%2A&gt;</ph> property is not an instance of <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaSequence&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Schema Object Model (SOM)<ept id="p1">](../../../../docs/standard/data/xml/xml-schema-object-model-som.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inferring an XML Schema<ept id="p1">](../../../../docs/standard/data/xml/inferring-an-xml-schema.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Rules for Inferring Schema Node Types and Structure<ept id="p1">](../../../../docs/standard/data/xml/rules-for-inferring-schema-node-types-and-structure.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Rules for Inferring Simple Types<ept id="p1">](../../../../docs/standard/data/xml/rules-for-inferring-simple-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>