{"content":"---\ntitle: \"Using objects that implement IDisposable | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"04/07/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Dispose method\"\n  - \"try/finally block\"\n  - \"garbage collection, encapsulating resources\"\nms.assetid: 81b2cdb5-c91a-4a31-9c83-eadc52da5cf0\ncaps.latest.revision: 15\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n\n# Using objects that implement IDisposable\n\nThe common language runtime's garbage collector reclaims the memory used by managed objects, but types that use unmanaged resources implement the <xref:System.IDisposable> interface to allow the memory allocated to these unmanaged resources to be reclaimed. When you finish using an object that implements <xref:System.IDisposable>, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> implementation. You can do this in one of two ways:  \n  \n* With the C# `using` statement or the Visual Basic `Using` statement.  \n  \n* By implementing a `try/finally` block.  \n  \n## The using statement\n\nThe `using` statement in C# and the `Using` statement in Visual Basic simplify the code that you must write to create and clean up an object. The `using` statement obtains one or more resources, executes the statements that you specify, and automatically disposes of the object. However, the `using` statement is useful only for objects that are used within the scope of the method in which they are constructed.  \n  \nThe following example uses the `using` statement to create and release a <xref:System.IO.StreamReader?displayProperty=fullName> object.  \n  \n[!code-csharp[Conceptual.Disposable#1](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.disposable/cs/using1.cs#1)]\n[!code-vb[Conceptual.Disposable#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.disposable/vb/using1.vb#1)]  \n  \nNote that although the <xref:System.IO.StreamReader> class implements the <xref:System.IDisposable> interface, which indicates that it uses an unmanaged resource, the example doesn't explicitly call the <xref:System.IO.StreamReader.Dispose%2A?displayProperty=fullName> method. When the C# or Visual Basic compiler encounters the `using` statement, it emits intermediate language (IL) that is equivalent to the following code that explicitly contains a `try/finally` block.  \n  \n[!code-csharp[Conceptual.Disposable#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.disposable/cs/using3.cs#3)]\n[!code-vb[Conceptual.Disposable#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.disposable/vb/using3.vb#3)]  \n  \nThe C# `using` statement also allows you to acquire multiple resources in a single statement, which is internally equivalent to nested `using` statements. The following example instantiates two <xref:System.IO.StreamReader> objects to read the contents of two different files.  \n  \n[!code-csharp[Conceptual.Disposable#4](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.disposable/cs/using4.cs#4)]\n\n## Try/finally block\n\nInstead of wrapping a `try/finally` block in a `using` statement, you may choose to implement the `try/finally` block directly. This may be your personal coding style, or you might want to do this for one of the following reasons:  \n  \n* To include a `catch` block to handle any exceptions thrown in the `try` block. Otherwise, any exceptions thrown by the `using` statement are unhandled, as are any exceptions thrown within the `using` block if a `try/catch` block isn't present.  \n  \n* To instantiate an object that implements <xref:System.IDisposable> whose scope is not local to the block within which it is declared.  \n  \nThe following example is similar to the previous example, except that it uses a `try/catch/finally` block to instantiate, use, and dispose of a <xref:System.IO.StreamReader> object, and to handle any exceptions thrown by the <xref:System.IO.StreamReader> constructor and its <xref:System.IO.StreamReader.ReadToEnd%2A> method. Note that the code in the `finally` block checks that the object that implements <xref:System.IDisposable> isn't `null` before it calls the <xref:System.IDisposable.Dispose%2A> method. Failure to do this can result in a <xref:System.NullReferenceException> exception at run time.  \n  \n[!code-csharp[Conceptual.Disposable#6](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.disposable/cs/using5.cs#6)]\n[!code-vb[Conceptual.Disposable#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.disposable/vb/using5.vb#6)]  \n  \nYou can follow this basic pattern if you choose to implement or must implement a `try/finally` block, because your programming language doesn't support a `using` statement but does allow direct calls to the <xref:System.IDisposable.Dispose%2A> method. \n  \n## See also\n\n[Cleaning Up Unmanaged Resources](../../../docs/standard/garbage-collection/unmanaged.md)\n[using Statement](~/docs/csharp/language-reference/keywords/using-statement.md)   \n[Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md)\n","nodes":[{"pos":[4,471],"embed":true,"restype":"x-metadata","content":"title: \"Using objects that implement IDisposable | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"04/07/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Dispose method\"\n  - \"try/finally block\"\n  - \"garbage collection, encapsulating resources\"\nms.assetid: 81b2cdb5-c91a-4a31-9c83-eadc52da5cf0\ncaps.latest.revision: 15\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"Using objects that implement IDisposable | Microsoft Docs","nodes":[{"pos":[0,57],"content":"Using objects that implement IDisposable | Microsoft Docs","nodes":[{"content":"Using objects that implement IDisposable | Microsoft Docs","pos":[0,57]}]}],"path":["title"]}],"yml":true},{"pos":[479,519],"content":"Using objects that implement IDisposable","linkify":"Using objects that implement IDisposable","nodes":[{"content":"Using objects that implement IDisposable","pos":[0,40]}]},{"content":"The common language runtime's garbage collector reclaims the memory used by managed objects, but types that use unmanaged resources implement the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface to allow the memory allocated to these unmanaged resources to be reclaimed.","pos":[521,778],"source":"The common language runtime's garbage collector reclaims the memory used by managed objects, but types that use unmanaged resources implement the <xref:System.IDisposable> interface to allow the memory allocated to these unmanaged resources to be reclaimed."},{"content":"When you finish using an object that implements <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph>, you should call the object's <ph id=\"ph2\">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;</ph> implementation.","pos":[779,960],"source":" When you finish using an object that implements <xref:System.IDisposable>, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> implementation."},{"content":"You can do this in one of two ways:","pos":[961,996]},{"pos":[1004,1072],"content":"With the C# <ph id=\"ph1\">`using`</ph> statement or the Visual Basic <ph id=\"ph2\">`Using`</ph> statement.","source":"With the C# `using` statement or the Visual Basic `Using` statement."},{"pos":[1080,1118],"content":"By implementing a <ph id=\"ph1\">`try/finally`</ph> block.","source":"By implementing a `try/finally` block."},{"pos":[1127,1146],"content":"The using statement","linkify":"The using statement","nodes":[{"content":"The using statement","pos":[0,19]}]},{"content":"The <ph id=\"ph1\">`using`</ph> statement in C# and the <ph id=\"ph2\">`Using`</ph> statement in Visual Basic simplify the code that you must write to create and clean up an object.","pos":[1148,1289],"source":"The `using` statement in C# and the `Using` statement in Visual Basic simplify the code that you must write to create and clean up an object."},{"content":"The <ph id=\"ph1\">`using`</ph> statement obtains one or more resources, executes the statements that you specify, and automatically disposes of the object.","pos":[1290,1426],"source":" The `using` statement obtains one or more resources, executes the statements that you specify, and automatically disposes of the object."},{"content":"However, the <ph id=\"ph1\">`using`</ph> statement is useful only for objects that are used within the scope of the method in which they are constructed.","pos":[1427,1560],"source":" However, the `using` statement is useful only for objects that are used within the scope of the method in which they are constructed."},{"pos":[1566,1701],"content":"The following example uses the <ph id=\"ph1\">`using`</ph> statement to create and release a <ph id=\"ph2\">&lt;xref:System.IO.StreamReader?displayProperty=fullName&gt;</ph> object.","source":"The following example uses the `using` statement to create and release a <xref:System.IO.StreamReader?displayProperty=fullName> object."},{"content":"Note that although the <ph id=\"ph1\">&lt;xref:System.IO.StreamReader&gt;</ph> class implements the <ph id=\"ph2\">&lt;xref:System.IDisposable&gt;</ph> interface, which indicates that it uses an unmanaged resource, the example doesn't explicitly call the <ph id=\"ph3\">&lt;xref:System.IO.StreamReader.Dispose%2A?displayProperty=fullName&gt;</ph> method.","pos":[1967,2243],"source":"Note that although the <xref:System.IO.StreamReader> class implements the <xref:System.IDisposable> interface, which indicates that it uses an unmanaged resource, the example doesn't explicitly call the <xref:System.IO.StreamReader.Dispose%2A?displayProperty=fullName> method."},{"content":"When the C# or Visual Basic compiler encounters the <ph id=\"ph1\">`using`</ph> statement, it emits intermediate language (IL) that is equivalent to the following code that explicitly contains a <ph id=\"ph2\">`try/finally`</ph> block.","pos":[2244,2439],"source":" When the C# or Visual Basic compiler encounters the `using` statement, it emits intermediate language (IL) that is equivalent to the following code that explicitly contains a `try/finally` block."},{"content":"The C# <ph id=\"ph1\">`using`</ph> statement also allows you to acquire multiple resources in a single statement, which is internally equivalent to nested <ph id=\"ph2\">`using`</ph> statements.","pos":[2705,2859],"source":"The C# `using` statement also allows you to acquire multiple resources in a single statement, which is internally equivalent to nested `using` statements."},{"content":"The following example instantiates two <ph id=\"ph1\">&lt;xref:System.IO.StreamReader&gt;</ph> objects to read the contents of two different files.","pos":[2860,2981],"source":" The following example instantiates two <xref:System.IO.StreamReader> objects to read the contents of two different files."},{"pos":[3118,3135],"content":"Try/finally block","linkify":"Try/finally block","nodes":[{"content":"Try/finally block","pos":[0,17]}]},{"content":"Instead of wrapping a <ph id=\"ph1\">`try/finally`</ph> block in a <ph id=\"ph2\">`using`</ph> statement, you may choose to implement the <ph id=\"ph3\">`try/finally`</ph> block directly.","pos":[3137,3264],"source":"Instead of wrapping a `try/finally` block in a `using` statement, you may choose to implement the `try/finally` block directly."},{"content":"This may be your personal coding style, or you might want to do this for one of the following reasons:","pos":[3265,3367]},{"content":"To include a <ph id=\"ph1\">`catch`</ph> block to handle any exceptions thrown in the <ph id=\"ph2\">`try`</ph> block.","pos":[3375,3453],"source":"To include a `catch` block to handle any exceptions thrown in the `try` block."},{"content":"Otherwise, any exceptions thrown by the <ph id=\"ph1\">`using`</ph> statement are unhandled, as are any exceptions thrown within the <ph id=\"ph2\">`using`</ph> block if a <ph id=\"ph3\">`try/catch`</ph> block isn't present.","pos":[3454,3618],"source":" Otherwise, any exceptions thrown by the `using` statement are unhandled, as are any exceptions thrown within the `using` block if a `try/catch` block isn't present."},{"content":"To instantiate an object that implements <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> whose scope is not local to the block within which it is declared.","pos":[3626,3759],"source":"To instantiate an object that implements <xref:System.IDisposable> whose scope is not local to the block within which it is declared."},{"content":"The following example is similar to the previous example, except that it uses a <ph id=\"ph1\">`try/catch/finally`</ph> block to instantiate, use, and dispose of a <ph id=\"ph2\">&lt;xref:System.IO.StreamReader&gt;</ph> object, and to handle any exceptions thrown by the <ph id=\"ph3\">&lt;xref:System.IO.StreamReader&gt;</ph> constructor and its <ph id=\"ph4\">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> method.","pos":[3765,4090],"source":"The following example is similar to the previous example, except that it uses a `try/catch/finally` block to instantiate, use, and dispose of a <xref:System.IO.StreamReader> object, and to handle any exceptions thrown by the <xref:System.IO.StreamReader> constructor and its <xref:System.IO.StreamReader.ReadToEnd%2A> method."},{"content":"Note that the code in the <ph id=\"ph1\">`finally`</ph> block checks that the object that implements <ph id=\"ph2\">&lt;xref:System.IDisposable&gt;</ph> isn't <ph id=\"ph3\">`null`</ph> before it calls the <ph id=\"ph4\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.","pos":[4091,4275],"source":" Note that the code in the `finally` block checks that the object that implements <xref:System.IDisposable> isn't `null` before it calls the <xref:System.IDisposable.Dispose%2A> method."},{"content":"Failure to do this can result in a <ph id=\"ph1\">&lt;xref:System.NullReferenceException&gt;</ph> exception at run time.","pos":[4276,4370],"source":" Failure to do this can result in a <xref:System.NullReferenceException> exception at run time."},{"pos":[4636,4887],"content":"You can follow this basic pattern if you choose to implement or must implement a <ph id=\"ph1\">`try/finally`</ph> block, because your programming language doesn't support a <ph id=\"ph2\">`using`</ph> statement but does allow direct calls to the <ph id=\"ph3\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.","source":"You can follow this basic pattern if you choose to implement or must implement a `try/finally` block, because your programming language doesn't support a `using` statement but does allow direct calls to the <xref:System.IDisposable.Dispose%2A> method."},{"pos":[4895,4903],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](../../../docs/standard/garbage-collection/unmanaged.md)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">[</bpt>using Statement<ept id=\"p2\">](~/docs/csharp/language-reference/keywords/using-statement.md)</ept><ph id=\"ph2\"> </ph>","pos":[4905,5075],"source":"[Cleaning Up Unmanaged Resources](../../../docs/standard/garbage-collection/unmanaged.md)\n[using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Using Statement<ept id=\"p1\">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept>","pos":[5078,5165],"source":"[Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md)"}]}