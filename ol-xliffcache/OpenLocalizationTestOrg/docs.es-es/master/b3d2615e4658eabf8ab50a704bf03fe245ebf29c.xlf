<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b3d2615e4658eabf8ab50a704bf03fe245ebf29c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-services\walkthrough-creating-a-windows-service-application-in-the-component-designer.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0725d73de0af5d9fcb614e77b86fa8bebca33d4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c32fac681e8579c84ad4aea50a09f88c12c6d6cf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Windows Service Application in the Component Designer | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a Windows Service Application in the Component Designer</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article demonstrates how to create a simple Windows Service application in Visual Studio that writes messages to an event log.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Here are the basic steps that you perform to create and use your service:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating a Service<ept id="p1">](#BK_CreateProject)</ept> by using the <bpt id="p2">**</bpt>Windows Service<ept id="p2">**</ept> project template, and configure it.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This template creates a class for you that inherits from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase?displayProperty=fullName&gt;</ph> and writes much of the basic service code, such as the code to start the service.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Adding Features to the Service<ept id="p1">](#BK_WriteCode)</ept> for the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> procedures, and override any other methods that you want to redefine.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Setting Service Status<ept id="p1">](#BK_SetStatus)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By default, services created with <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase?displayProperty=fullName&gt;</ph> implement only a subset of the available status flags.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If your service takes a long time to start up, pause, or stop, you can implement status values such as Start Pending or Stop Pending to indicate that it's working on an operation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Adding Installers to the Service<ept id="p1">](#BK_AddInstallers)</ept> for your service application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>(Optional) <bpt id="p1">[</bpt>Set Startup Parameters<ept id="p1">](#BK_StartupParameters)</ept>, specify default startup arguments, and enable users to override default settings when they start your service manually.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Building the Service<ept id="p1">](#BK_Build)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Installing the Service<ept id="p1">](#BK_Install)</ept> on the local machine.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Access the Windows Service Control Manager and <bpt id="p1">[</bpt>Starting and Running the Service<ept id="p1">](#BK_StartService)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Uninstalling a Windows Service<ept id="p1">](#BK_Uninstall)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Windows Services project template that is required for this walkthrough is not available in the Express edition of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creating a Service</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To begin, you create the project and set values that are required for the service to function correctly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To create and configure your service</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In Visual Studio, on the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box opens.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the list of Visual Basic or Visual C# project templates, choose <bpt id="p1">**</bpt>Windows Service<ept id="p1">**</ept>, and name the project <bpt id="p2">**</bpt>MyNewService<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The project template automatically adds a component class named <ph id="ph1">`Service1`</ph> that inherits from <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> menu, choose <bpt id="p2">**</bpt>Find and Replace<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Find in Files<ept id="p3">**</ept> (Keyboard: Ctrl+Shift+F).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Change all occurrences of <ph id="ph1">`Service1`</ph> to <ph id="ph2">`MyNewService`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Youâ€™ll find instances in Service1.cs, Program.cs, and Service1.Designer.cs (or their .vb equivalents).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window for <bpt id="p2">**</bpt>Service1.cs [Design]<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Service1.vb [Design]<ept id="p3">**</ept>, set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> and the <bpt id="p4">**</bpt>(Name)<ept id="p4">**</ept> property for <ph id="ph2">`Service1`</ph> to <bpt id="p5">**</bpt>MyNewService<ept id="p5">**</ept>, if it's not already set.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, rename <bpt id="p1">**</bpt>Service1.cs<ept id="p1">**</ept> to <bpt id="p2">**</bpt>MyNewService.cs<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>Service1.vb<ept id="p3">**</ept> to <bpt id="p4">**</bpt>MyNewService.vb<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Adding Features to the Service</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this section, you add a custom event log to the Windows service.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Event logs are not associated in any way with Windows services.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Here the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog&gt;</ph> component is used as an example of the type of component you could add to a Windows service.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To add custom event log functionality to your service</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the context menu for <bpt id="p2">**</bpt>MyNewService.cs<ept id="p2">**</ept> or <bpt id="p3">**</bpt>MyNewService.vb<ept id="p3">**</ept>, and then choose <bpt id="p4">**</bpt>View Designer<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>Toolbox<ept id="p2">**</ept>, drag an <ph id="ph1">&lt;xref:System.Diagnostics.EventLog&gt;</ph> component to the designer.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the context menu for <bpt id="p2">**</bpt>MyNewService.cs<ept id="p2">**</ept> or <bpt id="p3">**</bpt>MyNewService.vb<ept id="p3">**</ept>, and then choose <bpt id="p4">**</bpt>View Code<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Add a declaration for the <bpt id="p1">**</bpt>eventLog<ept id="p1">**</ept> object in the <ph id="ph1">`MyNewService`</ph> class, right after the line that declares the <ph id="ph2">`components`</ph> variable:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>VbRadconService#16<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_VBCSharp/VbRadconService/CS/MyNewService.cs#16)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbRadconService#16<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRadconService/VB/MyNewService.vb#16)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Add or edit the constructor to define a custom event log:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>VbRadconService#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_VBCSharp/VbRadconService/CS/MyNewService.cs#2)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbRadconService#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRadconService/VB/MyNewService.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To define what occurs when the service starts</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the Code Editor, locate the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method that was automatically overridden when you created the project, and replace the code with the following.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This adds an entry to the event log when the service starts running:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>VbRadconService#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_VBCSharp/VbRadconService/CS/MyNewService.cs#3)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbRadconService#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRadconService/VB/MyNewService.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A service application is designed to be long-running, so it usually polls or monitors something in the system.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The monitoring is set up in the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> doesnâ€™t actually do the monitoring.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method must return to the operating system after the service's operation has begun.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It must not loop forever or block.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To set up a simple polling mechanism, you can use the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph> component as follows: In the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method, set parameters on the component, and then set the <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The timer raises events in your code periodically, at which time your service could do its monitoring.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can use the following code to do this:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Add code to handle the timer event:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You might want to perform tasks by using background worker threads instead of running all your work on the main thread.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For an example of this, see the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase?displayProperty=fullName&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To define what occurs when the service is stopped</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Replace the code for the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method with the following.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This adds an entry to the event log when the service is stopped:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>VbRadconService#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_VBCSharp/VbRadconService/CS/MyNewService.cs#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbRadconService#4<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRadconService/VB/MyNewService.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the next section, you can override the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> methods to define additional processing for your component.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To define other actions for the service</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Locate the method that you want to handle, and override it to define what you want to occur.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following code shows how you can override the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> method:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>VbRadconService#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_VBCSharp/VbRadconService/CS/MyNewService.cs#5)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VbRadconService#5<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRadconService/VB/MyNewService.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Some custom actions have to occur when a Windows service is installed by the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Visual Studio can create these installers specifically for a Windows service and add them to your project.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Setting Service Status</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Services report their status to the Service Control Manager, so that users can tell whether a service is functioning correctly.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>By default, services that inherit from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> report a limited set of status settings, including Stopped, Paused, and Running.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If a service takes a little while to start up, it might be helpful to report a Start Pending status.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can also implement the Start Pending and Stop Pending status settings by adding code that calls into the Windows <bpt id="p1">[</bpt>SetServiceStatus function<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686241.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To implement service pending status</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`using`</ph> statement or <ph id="ph2">`Imports`</ph> declaration to the <ph id="ph3">&lt;xref:System.Runtime.InteropServices?displayProperty=fullName&gt;</ph> namespace in the MyNewService.cs or MyNewService.vb file:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Add the following code to MyNewService.cs to declare the <ph id="ph1">`ServiceState`</ph> values and to add a structure for the status, which you'll use in a platform invoke call:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Now, in the <ph id="ph1">`MyNewService`</ph> class, declare the <bpt id="p1">[</bpt>SetServiceStatus function<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686241.aspx)</ept> by using platform invoke:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To implement the Start Pending status, add the following code to the beginning of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Add code to set the status to Running at the end of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>(Optional) Repeat this procedure for the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Service Control Manager<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms685150.aspx)</ept> uses the <ph id="ph1">`dwWaitHint`</ph> and <ph id="ph2">`dwCheckpoint`</ph> members of the <bpt id="p2">[</bpt>SERVICE_STATUS structure<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms685996.aspx)</ept> to determine how much time to wait for a Windows Service to start or shut down.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> methods run long, your service can request more time by calling <bpt id="p1">[</bpt>SetServiceStatus<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686241.aspx)</ept> again with an incremented <ph id="ph3">`dwCheckPoint`</ph> value.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Adding Installers to the Service</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Before you can run a Windows Service, you need to install it, which registers it with the Service Control Manager.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can add installers to your project that handle the registration details.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To create the installers for your service</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the context menu for <bpt id="p2">**</bpt>MyNewService.cs<ept id="p2">**</ept> or <bpt id="p3">**</bpt>MyNewService.vb<ept id="p3">**</ept>, and then choose <bpt id="p4">**</bpt>View Designer<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Click the background of the designer to select the service itself, instead of any of its contents.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Open the context menu for the designer window (if youâ€™re using a pointing device, right-click inside the window), and then choose <bpt id="p1">**</bpt>Add Installer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>By default, a component class that contains two installers is added to your project.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The component is named <bpt id="p1">**</bpt>ProjectInstaller<ept id="p1">**</ept>, and the installers it contains are the installer for your service and the installer for the service's associated process.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> view for <bpt id="p2">**</bpt>ProjectInstaller<ept id="p2">**</ept>, choose <bpt id="p3">**</bpt>serviceInstaller1<ept id="p3">**</ept> for a Visual C# project, or <bpt id="p4">**</bpt>ServiceInstaller1<ept id="p4">**</ept> for a Visual Basic project.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, make sure the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property is set to <bpt id="p2">**</bpt>MyNewService<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>Description<ept id="p1">**</ept> property to some text, such as "A sample service".</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This text appears in the Services window and helps the user identify the service and understand what itâ€™s used for.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A&gt;</ph> property to the text that you want to appear in the Services window in the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> column.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For example, you can enter "MyNewService Display Name".</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This name can be different from the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property, which is the name used by the system (for example, when you use the <ph id="ph2">`net start`</ph> command to start your service).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceStartMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Installer Properties for a Windows Service<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-services/media/windowsservice-installerproperties.PNG "</bpt>WindowsService_InstallerProperties<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In the designer, choose <bpt id="p1">**</bpt>serviceProcessInstaller1<ept id="p1">**</ept> for a Visual C# project, or <bpt id="p2">**</bpt>ServiceProcessInstaller1<ept id="p2">**</ept> for a Visual Basic project.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceAccount&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This will cause the service to be installed and to run on a local service account.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceAccount&gt;</ph> account has broad permissions, including the ability to write to the event log.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Use this account with caution, because it might increase your risk of attacks from malicious software.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For other tasks, consider using the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceAccount&gt;</ph> account, which acts as a non-privileged user on the local computer and presents anonymous credentials to any remote server.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This example fails if you try to use the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceAccount&gt;</ph> account, because it needs permission to write to the event log.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For more information about installers, see <bpt id="p1">[</bpt>How to: Add Installers to Your Service Application<ept id="p1">](../../../docs/framework/windows-services/how-to-add-installers-to-your-service-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Set Startup Parameters</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A Windows Service, like any other executable, can accept command-line arguments, or startup parameters.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When you add code to process startup parameters, users can start your service with their own custom startup parameters by using the Services window in the Windows Control Panel.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>However, these startup parameters are not persisted the next time the service starts.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>To set startup parameters permanently, you can set them in the registry, as shown in this procedure.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Before you decide to add startup parameters, consider whether that is the best way to pass information to your service.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Although startup parameters are easy to use and to parse, and users can easily override them, they might be harder for users to discover and use without documentation.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Generally, if your service requires more than just a few startup parameters, you should consider using the registry or a configuration file instead.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Every Windows Service has an entry in the registry under HKLM\System\CurrentControlSet\services.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Under the service's key, you can use the <bpt id="p1">**</bpt>Parameters<ept id="p1">**</ept> subkey to store information that your service can access.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You can use application configuration files for a Windows Service the same way you do for other types of programs.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For example code, see <ph id="ph1">&lt;xref:System.Configuration.ConfigurationManager.AppSettings%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Adding startup parameters</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Main`</ph> method in Program.cs or in MyNewService.Designer.vb, add an argument for the command line:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Change the <ph id="ph1">`MyNewService`</ph> constructor as follows:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This code sets the event source and log name according to the supplied startup parameters, or uses default values if no arguments are supplied.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>To specify the command-line arguments, add the following code to the <ph id="ph1">`ProjectInstaller`</ph> class in ProjectInstaller.cs or ProjectInstaller.vb:</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This code modifies the <bpt id="p1">**</bpt>ImagePath<ept id="p1">**</ept> registry key, which typically contains the full path to the executable for the Windows Service, by adding the default parameter values.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The quotation marks around the path (and around each individual parameter) are required for the service to start up correctly.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To change the startup parameters for this Windows Service, users can change the parameters given in the <bpt id="p1">**</bpt>ImagePath<ept id="p1">**</ept> registry key, although the better way is to change it programmatically and expose the functionality to users in a friendly way (for example, in a management or configuration utility).</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Building the Service</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>To build your service project</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the context menu for your project, and then choose <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The property pages for your project  appear.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>On the Application tab, in the <bpt id="p1">**</bpt>Startup object<ept id="p1">**</ept> list, choose <bpt id="p2">**</bpt>MyNewService.Program<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the context menu for your project, and then choose <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> to build the project (Keyboard: Ctrl+Shift+B).</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Installing the Service</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Now that you've built the Windows service, you can install it.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To install a Windows service, you must have administrative credentials on the computer on which you're installing it.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>To install a Windows Service</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In Windows 7 and Windows Server, open the <bpt id="p1">**</bpt>Developer Command Prompt<ept id="p1">**</ept> under <bpt id="p2">**</bpt>Visual Studio Tools<ept id="p2">**</ept> in the <bpt id="p3">**</bpt>Start<ept id="p3">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In Windows 8 or Windows 8.1, choose the <bpt id="p1">**</bpt>Visual Studio Tools<ept id="p1">**</ept> tile on the <bpt id="p2">**</bpt>Start<ept id="p2">**</ept> screen, and then run Developer Command Prompt with administrative credentials.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>(If youâ€™re using a mouse, right-click on <bpt id="p1">**</bpt>Developer Command Prompt<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>Run as Administrator<ept id="p2">**</ept>.)</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In the Command Prompt window, navigate to the folder that contains your project's output.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For example, under your My Documents folder, navigate to Visual Studio 2013\Projects\MyNewService\bin\Debug.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Enter the following command:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If the service installs successfully, installutil.exe will report success.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If the system could not find InstallUtil.exe, make sure that it exists on your computer.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This tool is installed with the .NET Framework to the folder <ph id="ph1">`%WINDIR%\Microsoft.NET\Framework[64]\`</ph><bpt id="p1">*</bpt>framework_version<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For example, the default path for the 32-bit version of the .NET Framework 4, 4.5, 4.5.1, and 4.5.2 is <ph id="ph1">`C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If the installutil.exe process reports failure, check the install log to find out why.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>By default the log is in the same folder as the service executable.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The installation can fail if  the <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> Class is not present on the <ph id="ph2">`ProjectInstaller`</ph> class, or else the attribute is not set to <ph id="ph3">`true`</ph>, or else the <ph id="ph4">`ProjectInstaller`</ph> class is not <ph id="ph5">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Install and Uninstall Services<ept id="p1">](../../../docs/framework/windows-services/how-to-install-and-uninstall-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Starting and Running the Service</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To start and stop your service</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>In Windows, open the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> screen or <bpt id="p2">**</bpt>Start<ept id="p2">**</ept> menu, and type <ph id="ph1">`services.msc`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>You should now see <bpt id="p1">**</bpt>MyNewService<ept id="p1">**</ept> listed in the <bpt id="p2">**</bpt>Services<ept id="p2">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>MyNewService in the Services window.<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-services/media/windowsservices-serviceswindow.PNG "</bpt>WindowsServices_ServicesWindow<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Services<ept id="p1">**</ept> window, open the shortcut menu for your service, and then choose <bpt id="p2">**</bpt>Start<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Open the shortcut menu for the service, and then choose <bpt id="p1">**</bpt>Stop<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>(Optional) From the command line, you can use the commands <ph id="ph1">`net start``ServiceName`</ph> and <ph id="ph2">`net stop``ServiceName`</ph> to start and stop your service.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>To verify the event log output of your service</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In Visual Studio, open <bpt id="p1">**</bpt>Server Explorer<ept id="p1">**</ept> (Keyboard: Ctrl+Alt+S), and access the <bpt id="p2">**</bpt>Event Logs<ept id="p2">**</ept> node for the local computer.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Locate the listing for <bpt id="p1">**</bpt>MyNewLog<ept id="p1">**</ept> (or <bpt id="p2">**</bpt>MyLogFile1<ept id="p2">**</ept>, if you used the optional procedure to add command-line arguments) and expand it.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>You should see entries for the two actions (start and stop) your service has performed.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Use the Event Viewer to see the event log entries.<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-services/media/windowsservices-eventviewer.PNG "</bpt>WindowsServices_EventViewer<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Uninstalling a Windows Service</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>To uninstall your service</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Open a developer command prompt with administrative credentials.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>In the Command Prompt window, navigate to the folder that contains your project's output.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For example, under your My Documents folder, navigate to Visual Studio 2013\Projects\MyNewService\bin\Debug.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Enter the following command:</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If the service uninstalls successfully, installutil.exe will report that your service was successfully removed.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Install and Uninstall Services<ept id="p1">](../../../docs/framework/windows-services/how-to-install-and-uninstall-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>You can create a standalone setup program that others can use to install your Windows service, but it requires additional steps.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>ClickOnce doesn't support Windows services, so you can't use the Publish Wizard.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>You can use a full edition of InstallShield, which Microsoft doesn't provide.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For more information about InstallShield, see <bpt id="p1">[</bpt>InstallShield Limited Edition<ept id="p1">](/visualstudio/deployment/installshield-limited-edition)</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">[</bpt>Windows Installer XML Toolset<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=249067)</ept> to create an installer for a Windows service.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>You might explore the use of a <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component, which enables you to send commands to the service you have installed.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>You can use an installer to create an event log when the application is installed instead of creating the event log when the application runs.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Additionally, the event log will be deleted by the installer when the application is uninstalled.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Service Applications<ept id="p1">](../../../docs/framework/windows-services/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Windows Service Applications<ept id="p1">](../../../docs/framework/windows-services/introduction-to-windows-service-applications.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Debug Windows Service Applications<ept id="p1">](../../../docs/framework/windows-services/how-to-debug-windows-service-applications.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Services (Windows)<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms685141.aspx)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>