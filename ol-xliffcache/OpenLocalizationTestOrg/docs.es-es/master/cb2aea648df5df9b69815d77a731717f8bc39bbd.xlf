<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="consuming-unmanaged-dll-functions.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb2aea648df5df9b69815d77a731717f8bc39bbd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\consuming-unmanaged-dll-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5033354f2c2accbc31556b21c1fbaa4cc53c0804</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">793cc1daaff7f0484fb2596b193b2dd6a6fe2a36</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Consuming Unmanaged DLL Functions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Consuming Unmanaged DLL Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Platform invoke is a service that enables managed code to call unmanaged functions implemented in dynamic link libraries (DLLs), such as those in the Windows API.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It locates and invokes an exported function and marshals its arguments (integers, strings, arrays, structures, and so on) across the interoperation boundary as needed.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This section introduces tasks associated with consuming unmanaged DLL functions and provides more information about platform invoke.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In addition to the following tasks, there are general considerations and a link providing additional information and examples.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To consume exported DLL functions</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Identify functions in DLLs<ept id="p1">](../../../docs/framework/interop/identifying-functions-in-dlls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Minimally, you must specify the name of the function and name of the DLL that contains it.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a class to hold DLL functions<ept id="p1">](../../../docs/framework/interop/creating-a-class-to-hold-dll-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use an existing class, create an individual class for each unmanaged function, or create one class that contains a set of related unmanaged functions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create prototypes in managed code<ept id="p1">](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[Visual Basic] Use the <bpt id="p1">**</bpt>Declare<ept id="p1">**</ept> statement with the <bpt id="p2">**</bpt>Function<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Lib<ept id="p3">**</ept> keywords.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In some rare cases, you can use the <bpt id="p1">**</bpt>DllImportAttribute<ept id="p1">**</ept> with the <bpt id="p2">**</bpt>Shared Function<ept id="p2">**</ept> keywords.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These cases are explained later in this section.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>[C#] Use the <bpt id="p1">**</bpt>DllImportAttribute<ept id="p1">**</ept> to identify the DLL and function.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Mark the method with the <bpt id="p1">**</bpt>static<ept id="p1">**</ept> and <bpt id="p2">**</bpt>extern<ept id="p2">**</ept> modifiers.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>[C++] Use the <bpt id="p1">**</bpt>DllImportAttribute<ept id="p1">**</ept> to identify the DLL and function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Mark the wrapper method or function with <bpt id="p1">**</bpt>extern "C"<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Call a DLL function<ept id="p1">](../../../docs/framework/interop/calling-a-dll-function.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Call the method on your managed class as you would any other managed method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passing structures<ept id="p1">](../../../docs/framework/interop/passing-structures.md)</ept> and <bpt id="p2">[</bpt>implementing callback functions<ept id="p2">](../../../docs/framework/interop/callback-functions.md)</ept> are special cases.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For examples that demonstrate how to construct .NET-based declarations to be used with platform invoke, see <bpt id="p1">[</bpt>Marshaling Data with Platform Invoke<ept id="p1">](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A closer look at platform invoke</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Platform invoke relies on metadata to locate exported functions and marshal their arguments at run time.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following illustration shows this process.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Diagram that shows a platform invoke call.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When platform invoke calls an unmanaged function, it performs the following sequence of actions:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Locates the DLL containing the function.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Loads the DLL into memory.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Locates the address of the function in memory and pushes its arguments onto the stack, marshaling data as required.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Locating and loading the DLL, and locating the address of the function in memory occur only on the first call to the function.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Transfers control to the unmanaged function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Platform invoke throws exceptions generated by the unmanaged function to the managed caller.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interoperating with Unmanaged Code<ept id="p1">](../../../docs/framework/interop/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](../../../docs/framework/interop/platform-invoke-examples.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interop Marshaling<ept id="p1">](../../../docs/framework/interop/interop-marshaling.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>