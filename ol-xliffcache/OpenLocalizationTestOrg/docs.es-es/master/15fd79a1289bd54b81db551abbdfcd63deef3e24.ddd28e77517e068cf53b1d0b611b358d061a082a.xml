{"content":"---\ntitle: \"Cryptographic Signatures\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"digital signatures\"\n  - \"cryptography [.NET Framework], signatures\"\n  - \"digital signatures, XML signing\"\n  - \"signatures, cryptographic\"\n  - \"digital signatures, generating\"\n  - \"verifying signatures\"\n  - \"generating signatures\"\n  - \"digital signatures, about\"\n  - \"encryption [.NET Framework], signatures\"\n  - \"security [.NET Framework], signatures\"\n  - \"XML signing\"\n  - \"digital signatures, verifying\"\n  - \"signing XML\"\nms.assetid: aa87cb7f-e608-4a81-948b-c9b8a1225783\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n\n# Cryptographic Signatures\n\n<a name=\"top\"></a> Cryptographic digital signatures use public key algorithms to provide data integrity. When you sign data with a digital signature, someone else can verify the signature, and can prove that the data originated from you and was not altered after you signed it. For more information about digital signatures, see [Cryptographic Services](../../../docs/standard/security/cryptographic-services.md).\n\nThis topic explains how to generate and verify digital signatures using classes in the <xref:System.Security.Cryptography?displayProperty=nameWithType> namespace.\n\n- [Generating Signatures](#generate)\n\n- [Verifying Signatures](#verify)\n\n<a name=\"generate\"></a>\n\n## Generating Signatures\n\nDigital signatures are usually applied to hash values that represent larger data. The following example applies a digital signature to a hash value. First, a new instance of the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class is created to generate a public/private key pair. Next, the <xref:System.Security.Cryptography.RSACryptoServiceProvider> is passed to a new instance of the <xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter> class. This transfers the private key to the <xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter>, which actually performs the digital signing. Before you can sign the hash code, you must specify a hash algorithm to use. This example uses the SHA1 algorithm. Finally, the <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A> method is called to perform the signing.\n\n```vb\nImports System\nImports System.Security.Cryptography\n\nModule Module1\n    Sub Main()\n        'The hash value to sign.\n        Dim hashValue As Byte() = {59, 4, 248, 102, 77, 97, 142, 201, 210, 12, 224, 93, 25, 41, 100, 197, 213, 134, 130, 135}\n\n        'The value to hold the signed value.\n        Dim signedHashValue() As Byte\n\n        'Generate a public/private key pair.\n        Dim rsa As New RSACryptoServiceProvider()\n\n        'Create an RSAPKCS1SignatureFormatter object and pass it\n        'the RSACryptoServiceProvider to transfer the private key.\n        Dim rsaFormatter As New RSAPKCS1SignatureFormatter(rsa)\n\n        'Set the hash algorithm to SHA1.\n        rsaFormatter.SetHashAlgorithm(\"SHA1\")\n\n        'Create a signature for hashValue and assign it to\n        'signedHashValue.\n        signedHashValue = rsaFormatter.CreateSignature(hashValue)\n    End Sub\nEnd Module\n```\n\n```csharp\nusing System;\nusing System.Security.Cryptography;\n\nclass Class1\n{\n   static void Main()\n   {\n      //The hash value to sign.\n      byte[] hashValue = {59,4,248,102,77,97,142,201,210,12,224,93,25,41,100,197,213,134,130,135};\n\n      //The value to hold the signed value.\n      byte[] signedHashValue;\n\n      //Generate a public/private key pair.\n      RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();\n\n      //Create an RSAPKCS1SignatureFormatter object and pass it the\n      //RSACryptoServiceProvider to transfer the private key.\n      RSAPKCS1SignatureFormatter rsaFormatter = new RSAPKCS1SignatureFormatter(rsa);\n\n      //Set the hash algorithm to SHA1.\n      rsaFormatter.SetHashAlgorithm(\"SHA1\");\n\n      //Create a signature for hashValue and assign it to\n      //signedHashValue.\n      signedHashValue = rsaFormatter.CreateSignature(hashValue);\n   }\n}\n```\n\n### Signing XML Files\n\nThe .NET Framework provides the <xref:System.Security.Cryptography.Xml> namespace, which enables you sign XML. Signing XML is important when you want to verify that the XML originates from a certain source. For example, if you are using a stock quote service that uses XML, you can verify the source of the XML if it is signed.\n\nThe classes in this namespace follow the [XML-Signature Syntax and Processing recommendation](https://www.w3.org/TR/xmldsig-core/) from the World Wide Web Consortium.\n\n[Back to top](#top)\n\n<a name=\"verify\"></a>\n\n## Verifying Signatures\n\nTo verify that data was signed by a particular party, you must have the following information:\n\n- The public key of the party that signed the data.\n\n- The digital signature.\n\n- The data that was signed.\n\n- The hash algorithm used by the signer.\n\nTo verify a signature signed by the <xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter> class, use the <xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter> class. The <xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter> class must be supplied the public key of the signer. You will need the values of the modulus and the exponent to specify the public key. (The party that generated the public/private key pair should provide these values.) First create an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object to hold the public key that will verify the signature, and then initialize an <xref:System.Security.Cryptography.RSAParameters> structure to the modulus and exponent values that specify the public key.\n\nThe following code shows the creation of an <xref:System.Security.Cryptography.RSAParameters> structure. The `Modulus` property is set to the value of a byte array called `modulusData` and the `Exponent` property is set to the value of a byte array called `exponentData`.\n\n```vb\nDim rsaKeyInfo As RSAParameters\nrsaKeyInfo.Modulus = modulusData\nrsaKeyInfo.Exponent = exponentData\n```\n\n```csharp\nRSAParameters rsaKeyInfo;\nrsaKeyInfo.Modulus = modulusData;\nrsaKeyInfo.Exponent = exponentData;\n```\n\nAfter you have created the <xref:System.Security.Cryptography.RSAParameters> object, you can initialize a new instance of the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class to the values specified in <xref:System.Security.Cryptography.RSAParameters>. The <xref:System.Security.Cryptography.RSACryptoServiceProvider> is, in turn, passed to the constructor of an <xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter> to transfer the key.\n\nThe following example illustrates this process. In this example, `hashValue` and `signedHashValue` are arrays of bytes provided by a remote party. The remote party has signed the `hashValue` using the SHA1 algorithm, producing the digital signature `signedHashValue`. The <xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature%2A?displayProperty=nameWithType> method verifies that the digital signature is valid and was used to sign the `hashValue`.\n\n```vb\nDim rsa As New RSACryptoServiceProvider()\nrsa.ImportParameters(rsaKeyInfo)\nDim rsaDeformatter As New RSAPKCS1SignatureDeformatter(rsa)\nrsaDeformatter.SetHashAlgorithm(\"SHA1\")\nIf rsaDeformatter.VerifySignature(hashValue, signedHashValue) Then\n   Console.WriteLine(\"The signature is valid.\")\nElse\n   Console.WriteLine(\"The signature is not valid.\")\nEnd If\n```\n\n```csharp\nRSACryptoServiceProvider rsa = new RSACryptoServiceProvider();\nrsa.ImportParameters(rsaKeyInfo);\nRSAPKCS1SignatureDeformatter rsaDeformatter = new RSAPKCS1SignatureDeformatter(rsa);\nrsaDeformatter.SetHashAlgorithm(\"SHA1\");\nif(rsaDeformatter.VerifySignature(hashValue, signedHashValue))\n{\n   Console.WriteLine(\"The signature is valid.\");\n}\nelse\n{\n   Console.WriteLine(\"The signature is not valid.\");\n}\n```\n\nThis code fragment will display \"`The signature is valid`\" if the signature is valid and \"`The signature is not valid`\" if it is not.\n\n## See also\n\n- [Cryptographic Services](../../../docs/standard/security/cryptographic-services.md)\n","nodes":[{"pos":[4,659],"embed":true,"restype":"x-metadata","content":"title: \"Cryptographic Signatures\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"digital signatures\"\n  - \"cryptography [.NET Framework], signatures\"\n  - \"digital signatures, XML signing\"\n  - \"signatures, cryptographic\"\n  - \"digital signatures, generating\"\n  - \"verifying signatures\"\n  - \"generating signatures\"\n  - \"digital signatures, about\"\n  - \"encryption [.NET Framework], signatures\"\n  - \"security [.NET Framework], signatures\"\n  - \"XML signing\"\n  - \"digital signatures, verifying\"\n  - \"signing XML\"\nms.assetid: aa87cb7f-e608-4a81-948b-c9b8a1225783\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"Cryptographic Signatures","nodes":[{"pos":[0,24],"content":"Cryptographic Signatures","nodes":[{"content":"Cryptographic Signatures","pos":[0,24]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[667,691],"content":"Cryptographic Signatures","linkify":"Cryptographic Signatures","nodes":[{"content":"Cryptographic Signatures","pos":[0,24]}]},{"content":"<bpt id=\"p1\">&lt;a name=\"top\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Cryptographic digital signatures use public key algorithms to provide data integrity.","pos":[693,797],"source":"<a name=\"top\"></a> Cryptographic digital signatures use public key algorithms to provide data integrity."},{"content":"When you sign data with a digital signature, someone else can verify the signature, and can prove that the data originated from you and was not altered after you signed it.","pos":[798,970]},{"content":"For more information about digital signatures, see <bpt id=\"p1\">[</bpt>Cryptographic Services<ept id=\"p1\">](../../../docs/standard/security/cryptographic-services.md)</ept>.","pos":[971,1106],"source":" For more information about digital signatures, see [Cryptographic Services](../../../docs/standard/security/cryptographic-services.md)."},{"pos":[1108,1270],"content":"This topic explains how to generate and verify digital signatures using classes in the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography?displayProperty=nameWithType&gt;</ph> namespace.","source":"This topic explains how to generate and verify digital signatures using classes in the <xref:System.Security.Cryptography?displayProperty=nameWithType> namespace."},{"pos":[1274,1308],"content":"<bpt id=\"p1\">[</bpt>Generating Signatures<ept id=\"p1\">](#generate)</ept>","source":"[Generating Signatures](#generate)"},{"pos":[1312,1343],"content":"<bpt id=\"p1\">[</bpt>Verifying Signatures<ept id=\"p1\">](#verify)</ept>","source":"[Verifying Signatures](#verify)"},{"pos":[1373,1394],"content":"Generating Signatures","linkify":"Generating Signatures","nodes":[{"content":"Generating Signatures","pos":[0,21]}]},{"content":"Digital signatures are usually applied to hash values that represent larger data.","pos":[1396,1477]},{"content":"The following example applies a digital signature to a hash value.","pos":[1478,1544]},{"content":"First, a new instance of the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class is created to generate a public/private key pair.","pos":[1545,1690],"source":" First, a new instance of the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class is created to generate a public/private key pair."},{"content":"Next, the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> is passed to a new instance of the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter&gt;</ph> class.","pos":[1691,1866],"source":" Next, the <xref:System.Security.Cryptography.RSACryptoServiceProvider> is passed to a new instance of the <xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter> class."},{"content":"This transfers the private key to the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter&gt;</ph>, which actually performs the digital signing.","pos":[1867,2013],"source":" This transfers the private key to the <xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter>, which actually performs the digital signing."},{"content":"Before you can sign the hash code, you must specify a hash algorithm to use.","pos":[2014,2090]},{"content":"This example uses the SHA1 algorithm.","pos":[2091,2128]},{"content":"Finally, the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A&gt;</ph> method is called to perform the signing.","pos":[2129,2266],"source":" Finally, the <xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A> method is called to perform the signing."},{"pos":[4051,4068],"content":"Signing XML Files","linkify":"Signing XML Files","nodes":[{"content":"Signing XML Files","pos":[0,17]}]},{"content":"The .NET Framework provides the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.Xml&gt;</ph> namespace, which enables you sign XML.","pos":[4070,4180],"source":"The .NET Framework provides the <xref:System.Security.Cryptography.Xml> namespace, which enables you sign XML."},{"content":"Signing XML is important when you want to verify that the XML originates from a certain source.","pos":[4181,4276]},{"content":"For example, if you are using a stock quote service that uses XML, you can verify the source of the XML if it is signed.","pos":[4277,4397]},{"pos":[4399,4565],"content":"The classes in this namespace follow the <bpt id=\"p1\">[</bpt>XML-Signature Syntax and Processing recommendation<ept id=\"p1\">](https://www.w3.org/TR/xmldsig-core/)</ept> from the World Wide Web Consortium.","source":"The classes in this namespace follow the [XML-Signature Syntax and Processing recommendation](https://www.w3.org/TR/xmldsig-core/) from the World Wide Web Consortium."},{"pos":[4567,4586],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[4614,4634],"content":"Verifying Signatures","linkify":"Verifying Signatures","nodes":[{"content":"Verifying Signatures","pos":[0,20]}]},{"content":"To verify that data was signed by a particular party, you must have the following information:","pos":[4636,4730]},{"content":"The public key of the party that signed the data.","pos":[4734,4783]},{"content":"The digital signature.","pos":[4787,4809]},{"content":"The data that was signed.","pos":[4813,4838]},{"content":"The hash algorithm used by the signer.","pos":[4842,4880]},{"content":"To verify a signature signed by the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter&gt;</ph> class, use the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter&gt;</ph> class.","pos":[4882,5067],"source":"To verify a signature signed by the <xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter> class, use the <xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter&gt;</ph> class must be supplied the public key of the signer.","pos":[5068,5189],"source":" The <xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter> class must be supplied the public key of the signer."},{"content":"You will need the values of the modulus and the exponent to specify the public key.","pos":[5190,5273]},{"content":"(The party that generated the public/private key pair should provide these values.) First create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object to hold the public key that will verify the signature, and then initialize an <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph> structure to the modulus and exponent values that specify the public key.","pos":[5274,5643],"source":" (The party that generated the public/private key pair should provide these values.) First create an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object to hold the public key that will verify the signature, and then initialize an <xref:System.Security.Cryptography.RSAParameters> structure to the modulus and exponent values that specify the public key."},{"content":"The following code shows the creation of an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph> structure.","pos":[5645,5749],"source":"The following code shows the creation of an <xref:System.Security.Cryptography.RSAParameters> structure."},{"content":"The <ph id=\"ph1\">`Modulus`</ph> property is set to the value of a byte array called <ph id=\"ph2\">`modulusData`</ph> and the <ph id=\"ph3\">`Exponent`</ph> property is set to the value of a byte array called <ph id=\"ph4\">`exponentData`</ph>.","pos":[5750,5916],"source":" The `Modulus` property is set to the value of a byte array called `modulusData` and the `Exponent` property is set to the value of a byte array called `exponentData`."},{"content":"After you have created the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph> object, you can initialize a new instance of the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class to the values specified in <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph>.","pos":[6140,6410],"source":"After you have created the <xref:System.Security.Cryptography.RSAParameters> object, you can initialize a new instance of the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class to the values specified in <xref:System.Security.Cryptography.RSAParameters>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> is, in turn, passed to the constructor of an <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter&gt;</ph> to transfer the key.","pos":[6411,6606],"source":" The <xref:System.Security.Cryptography.RSACryptoServiceProvider> is, in turn, passed to the constructor of an <xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter> to transfer the key."},{"content":"The following example illustrates this process.","pos":[6608,6655]},{"content":"In this example, <ph id=\"ph1\">`hashValue`</ph> and <ph id=\"ph2\">`signedHashValue`</ph> are arrays of bytes provided by a remote party.","pos":[6656,6754],"source":" In this example, `hashValue` and `signedHashValue` are arrays of bytes provided by a remote party."},{"content":"The remote party has signed the <ph id=\"ph1\">`hashValue`</ph> using the SHA1 algorithm, producing the digital signature <ph id=\"ph2\">`signedHashValue`</ph>.","pos":[6755,6875],"source":" The remote party has signed the `hashValue` using the SHA1 algorithm, producing the digital signature `signedHashValue`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature%2A?displayProperty=nameWithType&gt;</ph> method verifies that the digital signature is valid and was used to sign the <ph id=\"ph2\">`hashValue`</ph>.","pos":[6876,7082],"source":" The <xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature%2A?displayProperty=nameWithType> method verifies that the digital signature is valid and was used to sign the `hashValue`."},{"pos":[7865,7998],"content":"This code fragment will display \"<ph id=\"ph1\">`The signature is valid`</ph>\" if the signature is valid and \"<ph id=\"ph2\">`The signature is not valid`</ph>\" if it is not.","source":"This code fragment will display \"`The signature is valid`\" if the signature is valid and \"`The signature is not valid`\" if it is not."},{"pos":[8003,8011],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8015,8098],"content":"<bpt id=\"p1\">[</bpt>Cryptographic Services<ept id=\"p1\">](../../../docs/standard/security/cryptographic-services.md)</ept>","source":"[Cryptographic Services](../../../docs/standard/security/cryptographic-services.md)"}]}