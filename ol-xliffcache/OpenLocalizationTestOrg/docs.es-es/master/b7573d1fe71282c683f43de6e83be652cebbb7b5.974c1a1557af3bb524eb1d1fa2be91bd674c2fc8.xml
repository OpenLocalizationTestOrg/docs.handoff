{"content":"---\ntitle: \"Boolean Data Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 57f7376b-4b11-4b35-98a9-780382053ceb\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Boolean Data Types\nBoolean operators work as expected in the common language runtime (CLR), except that short-circuiting behavior is not translated. For example, the Visual Basic `AndAlso` operator behaves like the `And` operator. The C# `&&` operator behaves like the `&` operator.  \n  \n [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] supports the following operators.  \n  \n|Visual Basic|C#|  \n|------------------|---------|  \n|[And Operator](~/docs/visual-basic/language-reference/operators/and-operator.md)|[& Operator](~/docs/csharp/language-reference/operators/and-operator.md)|  \n|[AndAlso Operator](~/docs/visual-basic/language-reference/operators/andalso-operator.md)|[&& Operator](~/docs/csharp/language-reference/operators/conditional-and-operator.md)|  \n|[Or Operator](~/docs/visual-basic/language-reference/operators/or-operator.md)|[&#124; Operator](~/docs/csharp/language-reference/operators/or-operator.md)|  \n|[OrElse Operator](~/docs/visual-basic/language-reference/operators/orelse-operator.md)|[&#124;&#124; Operator](~/docs/csharp/language-reference/operators/conditional-or-operator.md)|  \n|[Xor Operator](~/docs/visual-basic/language-reference/operators/xor-operator.md)|[^ Operator](~/docs/csharp/language-reference/operators/xor-operator.md)|  \n|[Not Operator](~/docs/visual-basic/language-reference/operators/not-operator.md)|[! Operator](~/docs/csharp/language-reference/operators/logical-negation-operator.md)|  \n  \n## See Also  \n [Data Types and Functions](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)","nodes":[{"pos":[4,349],"embed":true,"restype":"x-metadata","content":"title: \"Boolean Data Types | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 57f7376b-4b11-4b35-98a9-780382053ceb\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Boolean Data Types | Microsoft Docs","nodes":[{"pos":[0,35],"content":"Boolean Data Types | Microsoft Docs","nodes":[{"content":"Boolean Data Types | Microsoft Docs","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[356,374],"content":"Boolean Data Types","linkify":"Boolean Data Types","nodes":[{"content":"Boolean Data Types","pos":[0,18]}]},{"content":"Boolean operators work as expected in the common language runtime (CLR), except that short-circuiting behavior is not translated.","pos":[375,504]},{"content":"For example, the Visual Basic <ph id=\"ph1\">`AndAlso`</ph> operator behaves like the <ph id=\"ph2\">`And`</ph> operator.","pos":[505,586],"source":" For example, the Visual Basic `AndAlso` operator behaves like the `And` operator."},{"content":"The C# <ph id=\"ph1\">`&amp;&amp;`</ph> operator behaves like the <ph id=\"ph2\">`&amp;`</ph> operator.","pos":[587,638],"source":" The C# `&&` operator behaves like the `&` operator."},{"pos":[645,746],"content":"<ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> supports the following operators.","source":"[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] supports the following operators."},{"content":"Visual Basic","pos":[753,765]},{"content":"C#","pos":[766,768]},{"pos":[806,886],"content":"<bpt id=\"p1\">[</bpt>And Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/and-operator.md)</ept>","source":"[And Operator](~/docs/visual-basic/language-reference/operators/and-operator.md)"},{"pos":[887,959],"content":"<bpt id=\"p1\">[</bpt>&amp; Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/and-operator.md)</ept>","source":"[& Operator](~/docs/csharp/language-reference/operators/and-operator.md)"},{"pos":[964,1052],"content":"<bpt id=\"p1\">[</bpt>AndAlso Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/andalso-operator.md)</ept>","source":"[AndAlso Operator](~/docs/visual-basic/language-reference/operators/andalso-operator.md)"},{"pos":[1053,1138],"content":"<bpt id=\"p1\">[</bpt>&amp;&amp; Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/conditional-and-operator.md)</ept>","source":"[&& Operator](~/docs/csharp/language-reference/operators/conditional-and-operator.md)"},{"pos":[1143,1221],"content":"<bpt id=\"p1\">[</bpt>Or Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/or-operator.md)</ept>","source":"[Or Operator](~/docs/visual-basic/language-reference/operators/or-operator.md)"},{"pos":[1222,1298],"content":"<bpt id=\"p1\">[</bpt>&amp;#124; Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/or-operator.md)</ept>","source":"[&#124; Operator](~/docs/csharp/language-reference/operators/or-operator.md)"},{"pos":[1303,1389],"content":"<bpt id=\"p1\">[</bpt>OrElse Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/orelse-operator.md)</ept>","source":"[OrElse Operator](~/docs/visual-basic/language-reference/operators/orelse-operator.md)"},{"pos":[1390,1484],"content":"<bpt id=\"p1\">[</bpt>&amp;#124;&amp;#124; Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/conditional-or-operator.md)</ept>","source":"[&#124;&#124; Operator](~/docs/csharp/language-reference/operators/conditional-or-operator.md)"},{"pos":[1489,1569],"content":"<bpt id=\"p1\">[</bpt>Xor Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/xor-operator.md)</ept>","source":"[Xor Operator](~/docs/visual-basic/language-reference/operators/xor-operator.md)"},{"pos":[1570,1642],"content":"<bpt id=\"p1\">[</bpt>^ Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/xor-operator.md)</ept>","source":"[^ Operator](~/docs/csharp/language-reference/operators/xor-operator.md)"},{"pos":[1647,1727],"content":"<bpt id=\"p1\">[</bpt>Not Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/not-operator.md)</ept>","source":"[Not Operator](~/docs/visual-basic/language-reference/operators/not-operator.md)"},{"pos":[1728,1813],"content":"<bpt id=\"p1\">[</bpt>! Operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/logical-negation-operator.md)</ept>","source":"[! Operator](~/docs/csharp/language-reference/operators/logical-negation-operator.md)"},{"pos":[1823,1831],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1835,1944],"content":"<bpt id=\"p1\">[</bpt>Data Types and Functions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)</ept>","source":"[Data Types and Functions](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)"}]}