{"content":"---\ntitle: \"Static variable '<variablename>' declared without an 'As' clause; type of 'Object' assumed\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc42111\"\n  - \"bc42111\"\nhelpviewer_keywords: \n  - \"BC42111\"\nms.assetid: ca6b625c-21a5-45f7-ac67-282f6993a724\n---\n# Static variable '\\<variablename>' declared without an 'As' clause; type of 'Object' assumed\nThe compiler does not infer the data type of static local variables. In the following example, with `Option Strict` set to `Off`, the type of `m` will be `Object`, regardless of whether `Option Infer` is set to `On` or `Off`. Local type inference does not apply.  \n  \n```  \nSub Main()  \n    Static m = 10  \nEnd Sub  \n```  \n  \n By default, this message is a warning. For information about how to hide warnings or how to treat warnings as errors, see [Configuring Warnings in Visual Basic](/visualstudio/ide/configuring-warnings-in-visual-basic).  \n  \n **Error ID:** BC42111  \n  \n### To address this warning  \n  \n-   Specify the data type for static local variables.  \n  \n     For example, if you want `m` in the previous example to be of type `Integer`, specify the type in the declaration.  \n  \n    ```  \n    Sub Main()  \n        Static m As Integer = 10  \n    End Sub  \n    ```  \n  \n## See also\n\n- [Dim Statement](../../visual-basic/language-reference/statements/dim-statement.md)\n\n- [Local Type Inference](../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)\n- [Option Infer Statement](../../visual-basic/language-reference/statements/option-infer-statement.md)\n- [Static](../../visual-basic/language-reference/modifiers/static.md)\n","nodes":[{"pos":[4,251],"embed":true,"restype":"x-metadata","content":"title: \"Static variable '<variablename>' declared without an 'As' clause; type of 'Object' assumed\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc42111\"\n  - \"bc42111\"\nhelpviewer_keywords: \n  - \"BC42111\"\nms.assetid: ca6b625c-21a5-45f7-ac67-282f6993a724","nodes":[{"content":"Static variable '<variablename>' declared without an 'As' clause; type of 'Object' assumed","nodes":[{"pos":[0,90],"content":"Static variable '<ph id=\"ph1\">&lt;variablename&gt;</ph>' declared without an 'As' clause; type of 'Object' assumed","source":"Static variable '<variablename>' declared without an 'As' clause; type of 'Object' assumed"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[258,349],"content":"Static variable '\\<variablename>' declared without an 'As' clause; type of 'Object' assumed","linkify":"Static variable '\\<variablename>' declared without an 'As' clause; type of 'Object' assumed","nodes":[{"content":"Static variable '<ph id=\"ph1\">\\&lt;</ph>variablename&gt;' declared without an 'As' clause; type of 'Object' assumed","pos":[0,91],"source":"Static variable '\\<variablename>' declared without an 'As' clause; type of 'Object' assumed"}]},{"content":"The compiler does not infer the data type of static local variables.","pos":[350,418]},{"content":"In the following example, with <ph id=\"ph1\">`Option Strict`</ph> set to <ph id=\"ph2\">`Off`</ph>, the type of <ph id=\"ph3\">`m`</ph> will be <ph id=\"ph4\">`Object`</ph>, regardless of whether <ph id=\"ph5\">`Option Infer`</ph> is set to <ph id=\"ph6\">`On`</ph> or <ph id=\"ph7\">`Off`</ph>.","pos":[419,575],"source":" In the following example, with `Option Strict` set to `Off`, the type of `m` will be `Object`, regardless of whether `Option Infer` is set to `On` or `Off`."},{"content":"Local type inference does not apply.","pos":[576,612]},{"content":"By default, this message is a warning.","pos":[677,715]},{"content":"For information about how to hide warnings or how to treat warnings as errors, see <bpt id=\"p1\">[</bpt>Configuring Warnings in Visual Basic<ept id=\"p1\">](/visualstudio/ide/configuring-warnings-in-visual-basic)</ept>.","pos":[716,894],"source":" For information about how to hide warnings or how to treat warnings as errors, see [Configuring Warnings in Visual Basic](/visualstudio/ide/configuring-warnings-in-visual-basic)."},{"pos":[901,922],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC42111","source":"**Error ID:** BC42111"},{"pos":[932,955],"content":"To address this warning","linkify":"To address this warning","nodes":[{"content":"To address this warning","pos":[0,23]}]},{"content":"Specify the data type for static local variables.","pos":[965,1014]},{"pos":[1025,1139],"content":"For example, if you want <ph id=\"ph1\">`m`</ph> in the previous example to be of type <ph id=\"ph2\">`Integer`</ph>, specify the type in the declaration.","source":"For example, if you want `m` in the previous example to be of type `Integer`, specify the type in the declaration."},{"pos":[1237,1245],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1249,1331],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../visual-basic/language-reference/statements/dim-statement.md)"},{"pos":[1335,1447],"content":"<bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>","source":"[Local Type Inference](../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)"},{"pos":[1450,1550],"content":"<bpt id=\"p1\">[</bpt>Option Infer Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>","source":"[Option Infer Statement](../../visual-basic/language-reference/statements/option-infer-statement.md)"},{"pos":[1553,1620],"content":"<bpt id=\"p1\">[</bpt>Static<ept id=\"p1\">](../../visual-basic/language-reference/modifiers/static.md)</ept>","source":"[Static](../../visual-basic/language-reference/modifiers/static.md)"}]}