{"content":"---\ntitle: \"try-finally (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"finally\"\n  - \"finally_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"finally keyword [C#]\"\n  - \"try-finally statement [C#]\"\nms.assetid: c27623fb-7261-4464-862c-7a369d3c8f0a\ncaps.latest.revision: 25\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# try-finally (C# Reference)\nBy using a `finally` block, you can clean up any resources that are allocated in a [try](../../../csharp/language-reference/keywords/try-catch.md) block, and you can run code even if an exception occurs in the `try` block. Typically, the statements of a `finally` block run when control leaves a `try` statement. The transfer of control can occur as a result of normal execution, of execution of a `break`, `continue`, `goto`, or `return` statement, or of propagation of an exception out of the `try` statement.  \n  \n Within a handled exception, the associated `finally` block is guaranteed to be run. However, if the exception is unhandled, execution of the `finally` block is dependent on how the exception unwind operation is triggered. That, in turn, is dependent on how your computer is set up. For more information, see [Unhandled Exception Processing in the CLR](http://go.microsoft.com/fwlink/?LinkId=128371).  \n  \n Usually, when an unhandled exception ends an application, whether or not the `finally` block is run is not important. However, if you have statements in a `finally` block that must be run even in that situation, one solution is to add a `catch` block to the `try`-`finally` statement. Alternatively, you can catch the exception that might be thrown in the `try` block of a `try`-`finally` statement higher up the call stack. That is, you can catch the exception in the method that calls the method that contains the `try`-`finally` statement, or in the method that calls that method, or in any method in the call stack. If the exception is not caught, execution of the `finally` block depends on whether the operating system chooses to trigger an exception unwind operation.  \n  \n## Example  \n In the following example, an invalid conversion statement causes a `System.InvalidCastException` exception. The exception is unhandled.  \n  \n [!code-cs[csrefKeywordsExceptions#4](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-finally_1.cs)]  \n  \n In the following example, an exception from the `TryCast` method is caught in a method farther up the call stack.  \n  \n [!code-cs[csrefKeywordsExceptions#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-finally_2.cs)]  \n  \n For more information about `finally`, see [try-catch-finally](../../../csharp/language-reference/keywords/try-catch-finally.md).  \n  \n C# also contains the [using statement](../../../csharp/language-reference/keywords/using-statement.md), which provides similar functionality for <xref:System.IDisposable> objects in a convenient syntax.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [try, throw, and catch Statements (C++)](https://docs.microsoft.com/cpp/cpp/try-throw-and-catch-statements-cpp)   \n [Exception Handling Statements](../../../csharp/language-reference/keywords/exception-handling-statements.md)   \n [throw](../../../csharp/language-reference/keywords/throw.md)   \n [try-catch](../../../csharp/language-reference/keywords/try-catch.md)   \n [How to: Explicitly Throw Exceptions](https://msdn.microsoft.com/library/xhcbs8fz)","nodes":[{"pos":[4,609],"nodes":[{"content":"try-finally (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,43],"content":"try-finally (C# Reference) | Microsoft Docs","nodes":[{"content":"try-finally (C# Reference) | Microsoft Docs","pos":[0,43]}]}],"pos":[6,52],"yaml":true}],"content":"title: \"try-finally (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"finally\"\n  - \"finally_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"finally keyword [C#]\"\n  - \"try-finally statement [C#]\"\nms.assetid: c27623fb-7261-4464-862c-7a369d3c8f0a\ncaps.latest.revision: 25\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[616,642],"content":"try-finally (C# Reference)","linkify":"try-finally (C# Reference)","nodes":[{"content":"try-finally (C# Reference)","pos":[0,26]}]},{"content":"By using a <ph id=\"ph1\">`finally`</ph> block, you can clean up any resources that are allocated in a <bpt id=\"p1\">[</bpt>try<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept> block, and you can run code even if an exception occurs in the <ph id=\"ph2\">`try`</ph> block.","pos":[643,865],"source":"By using a `finally` block, you can clean up any resources that are allocated in a [try](../../../csharp/language-reference/keywords/try-catch.md) block, and you can run code even if an exception occurs in the `try` block."},{"content":"Typically, the statements of a <ph id=\"ph1\">`finally`</ph> block run when control leaves a <ph id=\"ph2\">`try`</ph> statement.","pos":[866,955],"source":" Typically, the statements of a `finally` block run when control leaves a `try` statement."},{"content":"The transfer of control can occur as a result of normal execution, of execution of a <ph id=\"ph1\">`break`</ph>, <ph id=\"ph2\">`continue`</ph>, <ph id=\"ph3\">`goto`</ph>, or <ph id=\"ph4\">`return`</ph> statement, or of propagation of an exception out of the <ph id=\"ph5\">`try`</ph> statement.","pos":[956,1154],"source":" The transfer of control can occur as a result of normal execution, of execution of a `break`, `continue`, `goto`, or `return` statement, or of propagation of an exception out of the `try` statement."},{"content":"Within a handled exception, the associated <ph id=\"ph1\">`finally`</ph> block is guaranteed to be run.","pos":[1161,1244],"source":"Within a handled exception, the associated `finally` block is guaranteed to be run."},{"content":"However, if the exception is unhandled, execution of the <ph id=\"ph1\">`finally`</ph> block is dependent on how the exception unwind operation is triggered.","pos":[1245,1382],"source":" However, if the exception is unhandled, execution of the `finally` block is dependent on how the exception unwind operation is triggered."},{"content":"That, in turn, is dependent on how your computer is set up.","pos":[1383,1442]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Unhandled Exception Processing in the CLR<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=128371)</ept>.","pos":[1443,1560],"source":" For more information, see [Unhandled Exception Processing in the CLR](http://go.microsoft.com/fwlink/?LinkId=128371)."},{"content":"Usually, when an unhandled exception ends an application, whether or not the <ph id=\"ph1\">`finally`</ph> block is run is not important.","pos":[1567,1684],"source":"Usually, when an unhandled exception ends an application, whether or not the `finally` block is run is not important."},{"content":"However, if you have statements in a <ph id=\"ph1\">`finally`</ph> block that must be run even in that situation, one solution is to add a <ph id=\"ph2\">`catch`</ph> block to the <ph id=\"ph3\">`try`</ph><ph id=\"ph4\">-</ph><ph id=\"ph5\">`finally`</ph> statement.","pos":[1685,1851],"source":" However, if you have statements in a `finally` block that must be run even in that situation, one solution is to add a `catch` block to the `try`-`finally` statement."},{"content":"Alternatively, you can catch the exception that might be thrown in the <ph id=\"ph1\">`try`</ph> block of a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">-</ph><ph id=\"ph4\">`finally`</ph> statement higher up the call stack.","pos":[1852,1991],"source":" Alternatively, you can catch the exception that might be thrown in the `try` block of a `try`-`finally` statement higher up the call stack."},{"content":"That is, you can catch the exception in the method that calls the method that contains the <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">-</ph><ph id=\"ph3\">`finally`</ph> statement, or in the method that calls that method, or in any method in the call stack.","pos":[1992,2186],"source":" That is, you can catch the exception in the method that calls the method that contains the `try`-`finally` statement, or in the method that calls that method, or in any method in the call stack."},{"content":"If the exception is not caught, execution of the <ph id=\"ph1\">`finally`</ph> block depends on whether the operating system chooses to trigger an exception unwind operation.","pos":[2187,2341],"source":" If the exception is not caught, execution of the `finally` block depends on whether the operating system chooses to trigger an exception unwind operation."},{"pos":[2350,2357],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, an invalid conversion statement causes a <ph id=\"ph1\">`System.InvalidCastException`</ph> exception.","pos":[2361,2468],"source":"In the following example, an invalid conversion statement causes a `System.InvalidCastException` exception."},{"content":"The exception is unhandled.","pos":[2469,2496]},{"pos":[2503,2621],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsExceptions#4<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-finally_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsExceptions#4](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-finally_1.cs)]"},{"pos":[2628,2741],"content":"In the following example, an exception from the <ph id=\"ph1\">`TryCast`</ph> method is caught in a method farther up the call stack.","source":"In the following example, an exception from the `TryCast` method is caught in a method farther up the call stack."},{"pos":[2748,2866],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsExceptions#6<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-finally_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsExceptions#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-finally_2.cs)]"},{"pos":[2873,3001],"content":"For more information about <ph id=\"ph1\">`finally`</ph>, see <bpt id=\"p1\">[</bpt>try-catch-finally<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch-finally.md)</ept>.","source":"For more information about `finally`, see [try-catch-finally](../../../csharp/language-reference/keywords/try-catch-finally.md)."},{"pos":[3008,3210],"content":"C# also contains the <bpt id=\"p1\">[</bpt>using statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/using-statement.md)</ept>, which provides similar functionality for <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> objects in a convenient syntax.","source":"C# also contains the [using statement](../../../csharp/language-reference/keywords/using-statement.md), which provides similar functionality for <xref:System.IDisposable> objects in a convenient syntax."},{"pos":[3219,3244],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3358,3366],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3370,3430],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3434,3501],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3505,3573],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>try, throw, and catch Statements (C++)<ept id=\"p1\">](https://docs.microsoft.com/cpp/cpp/try-throw-and-catch-statements-cpp)</ept><ph id=\"ph1\"> </ph>","pos":[3577,3689],"source":"[try, throw, and catch Statements (C++)](https://docs.microsoft.com/cpp/cpp/try-throw-and-catch-statements-cpp) "},{"content":"<bpt id=\"p1\">[</bpt>Exception Handling Statements<ept id=\"p1\">](../../../csharp/language-reference/keywords/exception-handling-statements.md)</ept><ph id=\"ph1\"> </ph>","pos":[3693,3803],"source":"[Exception Handling Statements](../../../csharp/language-reference/keywords/exception-handling-statements.md) "},{"content":"<bpt id=\"p1\">[</bpt>throw<ept id=\"p1\">](../../../csharp/language-reference/keywords/throw.md)</ept><ph id=\"ph1\"> </ph>","pos":[3807,3869],"source":"[throw](../../../csharp/language-reference/keywords/throw.md) "},{"content":"<bpt id=\"p1\">[</bpt>try-catch<ept id=\"p1\">](../../../csharp/language-reference/keywords/try-catch.md)</ept><ph id=\"ph1\"> </ph>","pos":[3873,3943],"source":"[try-catch](../../../csharp/language-reference/keywords/try-catch.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Explicitly Throw Exceptions<ept id=\"p1\">](https://msdn.microsoft.com/library/xhcbs8fz)</ept>","pos":[3947,4029],"source":"[How to: Explicitly Throw Exceptions](https://msdn.microsoft.com/library/xhcbs8fz)"}]}