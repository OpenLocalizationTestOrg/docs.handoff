<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="collections-and-collection-types-for-xaml.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4123b64545f7c47a96c4cae496046a89b7e576b0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\collections-and-collection-types-for-xaml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b953c5285d88313a9a1ad4ce32247a11edd94c90</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc5ff4377ea2cd4a56d098cc8fccce0f7e865b5c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Collections and Collection Types for XAML</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Collections and Collection Types for XAML</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to define properties of types that are intended to support a collection, and to support the XAML syntax for instantiating collection items as element children of a parent object element or property element.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XAML Collection Concepts</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Conceptually, any relationship in XAML where there are multiple child items within the scope of a XAML object element or XAML property element must be implemented as a collection.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>That collection must be associated with a particular XAML property of the XAML type that is the parent in that relationship.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The property must be a collection because a XAML processor expects to assign each item in markup to be a newly added item of the backing collection property.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>At the XAML language level, the exact requirements of collection support are not fully defined.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The concept that a collection can be either a list or a dictionary(but not both) is defined at the XAML language level, but which backing types represent either lists or dictionaries is not defined by the XAML language.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In .NET Framework XAML Services, the concept of XAML collection support is more clearly defined in terms of .NET Framework backing types.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Specifically, the XAML support for collections is based on several .NET Framework concepts and APIs that are used for lists and dictionaries in general .NET Framework programming.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph> interface indicates a list collection.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> interface indicates a dictionary collection.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Array&gt;</ph> represents an array, and an array supports <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In each of these collection concepts, a .NET Framework XAML Services XAML processor expects to call the <ph id="ph1">`Add`</ph> method on a specific instance of the collection property's type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Or, in a serialization scenario, a XAML processor produces discrete XAML-type instances for each item found in the list, dictionary or array based on each collection's specific concept of "Items".</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These are : <ph id="ph1">&lt;xref:System.Collections.IList.Item%2A&gt;</ph>; <ph id="ph2">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph>; the explicit <ph id="ph3">&lt;xref:System.Array.System%23Collections%23IList%23Item%2A&gt;</ph> for <ph id="ph4">&lt;xref:System.Array&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Generic Collections</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Generic collections can be useful for general .NET Framework programming, and can also be used for XAML collection properties.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, the generic interfaces <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> are not identified by .NET Framework XAML Services XAML processors as being equivalent to the non-generic <ph id="ph3">&lt;xref:System.Collections.IList&gt;</ph> or <ph id="ph4">&lt;xref:System.Collections.IDictionary&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Rather than implementing the interfaces, a recommended approach for generic collection property types is to derive from the classes <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These classes implement the non-generic interfaces and thus include the expected support for XAML collections in the base implementation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Read-Only Collections and Initialization Logic</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In .NET Framework programming, it is a common design pattern to make any property that holds a value of a collection as a read-only collection.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This pattern permits the instance that owns the collection property to better control what happens to the collection..</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Specifically, the pattern prevents accidental replacement of the entire pre-existing collection by setting the property.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this pattern, any access to the collection by callers should instead be made by calling methods or properties as supported by the collection type and/or the relevant collection interfaces such as <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using this pattern implies that any class that exposes a read-only collection property must first initialize that property to hold an empty collection.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Typically the initialization is performed as part of the construction behavior for the class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To be useful for XAML, it is important that such logic is always referenced by the default constructor, because XAML generally calls the default constructor prior to processing the properties (collection properties or otherwise).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>XAML Type System Support and Collections</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Beyond the basic mechanics of parsing XAML and populating or serializing collection properties, the XAML type system as implemented in .NET Framework XAML Services includes several design features that pertain to collections in XAML.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt;</ph> returns true if the XAML type is backed by a type that provides XAML collection support.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsArray%2A&gt;</ph> can further identify which collection mode the XAML type supports.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For custom XAML processors that are based on .NET Framework XAML Services and the XAML type system but not based on existing <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> implementations, knowing which collection mode is used might be necessary in order to know which method to invoke for collection processing.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each of the previous property values are potentially influenced by overrides of <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> on a XAML type.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>