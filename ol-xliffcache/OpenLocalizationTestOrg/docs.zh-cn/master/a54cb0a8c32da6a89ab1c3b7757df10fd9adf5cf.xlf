<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="global-tools-how-to-create.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a54cb0a8c32da6a89ab1c3b7757df10fd9adf5cf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\global-tools-how-to-create.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95e52176c5f313eaa064b3fa98f9b74b962b14d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f96fa031fac7946fad061730d4151a76cbcd949</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to create a .NET Core Global Tool</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Describes how to create a Global Tool.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>The Global Tool is a console application that is installed through the .NET Core CLI.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Create a .NET Core Global Tool using the .NET Core CLI</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article teaches you how to create and package a .NET Core Global Tool.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The .NET Core CLI allows you to create a console application as a Global Tool, which others can easily install and run.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.NET Core Global Tools are NuGet packages that are installed from the .NET Core CLI.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about Global Tools, see <bpt id="p1">[</bpt>.NET Core Global Tools overview<ept id="p1">](global-tools.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create a project</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This article uses the .NET Core CLI to create and manage a project.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Our example tool will be a console application that generates an ASCII bot and prints a message.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>First, create a new .NET Core Console Application.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Navigate to the <ph id="ph1">`botsay`</ph> directory created by the previous command.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add the code</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> file with your favorite text editor, such as <ph id="ph2">`vim`</ph> or <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://code.visualstudio.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`using`</ph> directive to the top of the file, this helps shorten the code to display the version information of the application.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Next, move down to the <ph id="ph1">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Replace the method with the following code to process the command-line arguments for your application.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If no arguments were passed, a short help message is displayed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Otherwise, all of those arguments are transformed into a string and printed with the bot.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create the bot</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Next, add a new method named <ph id="ph1">`ShowBot`</ph> that takes a string parameter.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This method prints out the message and the ASCII bot.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The ASCII bot code was taken from the <bpt id="p1">[</bpt>dotnetbot<ept id="p1">](https://github.com/dotnet/core/blob/master/samples/dotnetsay/Program.cs)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Test the tool</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Run the project and see the output.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Try these variations of the command-line to see different results:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>All arguments after the <ph id="ph1">`--`</ph> delimiter are passed to your application.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Setup the global tool</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Before you can pack and distribute the application as a Global Tool, you need to modify the project file.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`botsay.csproj`</ph> file and add three new XML nodes to the <ph id="ph2">`&lt;Project&gt;&lt;PropertyGroup&gt;`</ph> node:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>[REQUIRED] Indicates that the application will be packaged for install as a Global Tool.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>[OPTIONAL] An alternative name for the tool, otherwise the command name for the tool will be named after the project file.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can have multiple tools in a package, choosing a unique and friendly name helps differentiate from other tools in the same package.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>[OPTIONAL] Where the NuGet package will be produced.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The NuGet package is what the .NET Core CLI Global Tools uses to install your tool.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Even though <ph id="ph1">`&lt;PackageOutputPath&gt;`</ph> is optional, use it in this example.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Make sure you set it: <ph id="ph1">`&lt;PackageOutputPath&gt;./nupkg&lt;/PackageOutputPath&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Next, create a NuGet package for your application.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`botsay.1.0.0.nupkg`</ph> file is created in the folder identified by the <ph id="ph2">`&lt;PackageOutputPath&gt;`</ph> XML value from the <ph id="ph3">`botsay.csproj`</ph> file, which in this example is the <ph id="ph4">`./nupkg`</ph> folder.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This makes it easy to install and test.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When you want to release a tool publicly, upload it to <bpt id="p1">[</bpt><ph id="ph1">https://www.nuget.org</ph><ept id="p1">](https://www.nuget.org)</ept>. Once the tool is available on NuGet, developers can perform a user-wide installation of the tool using the <ph id="ph2">`--global`</ph> option of the <bpt id="p2">[</bpt>dotnet tool install<ept id="p2">](dotnet-tool-install.md)</ept> command.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Now that you have a package, install the tool from that package:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`--add-source`</ph> parameter tells the .NET Core CLI to temporarily use the <ph id="ph2">`./nupkg`</ph> folder (our <ph id="ph3">`&lt;PackageOutputPath&gt;`</ph> folder) as an additional source feed for NuGet packages.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information about installing Global Tools, see <bpt id="p1">[</bpt>.NET Core Global Tools overview<ept id="p1">](global-tools.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If installation is successful, a message is displayed showing the command used to call the tool and the version installed, similar to the following example:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You should now be able to type <ph id="ph1">`botsay`</ph> and get a response from the tool.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the install was successful, but you cannot use the <ph id="ph1">`botsay`</ph> command, you may need to open a new terminal to refresh the PATH.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remove the tool</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Once you're done experimenting with the tool, you can remove it with the following command:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>