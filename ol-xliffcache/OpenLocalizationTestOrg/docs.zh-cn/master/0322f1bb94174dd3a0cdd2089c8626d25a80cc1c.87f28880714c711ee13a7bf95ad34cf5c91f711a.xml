{"content":"---\ntitle: \"set keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/10/2017\nf1_keywords: \n  - \"set\"\n  - \"set_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"set keyword [C#]\"\nms.assetid: 30d7e4e5-cc2e-4635-a597-14a724879619\n---\n# set (C# Reference)\n\nThe `set` keyword defines an *accessor* method in a property or indexer that assigns a value to the property or the indexer element. For more information and examples, see [Properties](../../programming-guide/classes-and-structs/properties.md), [Auto-Implemented Properties](../../programming-guide/classes-and-structs/auto-implemented-properties.md), and [Indexers](../../programming-guide/indexers/index.md).\n\nThe following example defines both a `get` and a `set` accessor for a property named `Seconds`. It uses a private field named `_seconds` to back the property value.\n\n[!code-csharp[set#1](~/samples/snippets/csharp/language-reference/keywords/get/get-1.cs)]\n\nOften, the `set` accessor consists of a single statement that assigns a value, as it did in the previous example. Starting with C# 7.0, you can implement the `set` accessor as an expression-bodied member. The following example implements both the `get` and the `set` accessors as expression-bodied members.\n\n[!code-csharp[set#3](~/samples/snippets/csharp/language-reference/keywords/get/get-3.cs)]\n  \nFor simple cases in which a property's `get` and `set` accessors perform no other operation than setting or retrieving a value in a private backing field, you can take advantage of the C# compiler's support for auto-implemented properties. The following example implements `Hours` as an auto-implemented property. \n\n[!code-csharp[set#2](~/samples/snippets/csharp/language-reference/keywords/get/get-2.cs)]\n  \n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../language-reference/index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Properties](../../programming-guide/classes-and-structs/properties.md)\n","nodes":[{"pos":[4,222],"embed":true,"restype":"x-metadata","content":"title: \"set keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/10/2017\nf1_keywords: \n  - \"set\"\n  - \"set_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"set keyword [C#]\"\nms.assetid: 30d7e4e5-cc2e-4635-a597-14a724879619","nodes":[{"content":"set keyword - C# Reference","nodes":[{"pos":[0,26],"content":"set keyword - C# Reference","nodes":[{"content":"set keyword - C# Reference","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[229,247],"content":"set (C# Reference)","linkify":"set (C# Reference)","nodes":[{"content":"set (C# Reference)","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">`set`</ph> keyword defines an <bpt id=\"p1\">*</bpt>accessor<ept id=\"p1\">*</ept> method in a property or indexer that assigns a value to the property or the indexer element.","pos":[249,381],"source":"The `set` keyword defines an *accessor* method in a property or indexer that assigns a value to the property or the indexer element."},{"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../programming-guide/classes-and-structs/properties.md)</ept>, <bpt id=\"p2\">[</bpt>Auto-Implemented Properties<ept id=\"p2\">](../../programming-guide/classes-and-structs/auto-implemented-properties.md)</ept>, and <bpt id=\"p3\">[</bpt>Indexers<ept id=\"p3\">](../../programming-guide/indexers/index.md)</ept>.","pos":[382,659],"source":" For more information and examples, see [Properties](../../programming-guide/classes-and-structs/properties.md), [Auto-Implemented Properties](../../programming-guide/classes-and-structs/auto-implemented-properties.md), and [Indexers](../../programming-guide/indexers/index.md)."},{"content":"The following example defines both a <ph id=\"ph1\">`get`</ph> and a <ph id=\"ph2\">`set`</ph> accessor for a property named <ph id=\"ph3\">`Seconds`</ph>.","pos":[661,756],"source":"The following example defines both a `get` and a `set` accessor for a property named `Seconds`."},{"content":"It uses a private field named <ph id=\"ph1\">`_seconds`</ph> to back the property value.","pos":[757,825],"source":" It uses a private field named `_seconds` to back the property value."},{"content":"Often, the <ph id=\"ph1\">`set`</ph> accessor consists of a single statement that assigns a value, as it did in the previous example.","pos":[918,1031],"source":"Often, the `set` accessor consists of a single statement that assigns a value, as it did in the previous example."},{"content":"Starting with C# 7.0, you can implement the <ph id=\"ph1\">`set`</ph> accessor as an expression-bodied member.","pos":[1032,1122],"source":" Starting with C# 7.0, you can implement the `set` accessor as an expression-bodied member."},{"content":"The following example implements both the <ph id=\"ph1\">`get`</ph> and the <ph id=\"ph2\">`set`</ph> accessors as expression-bodied members.","pos":[1123,1224],"source":" The following example implements both the `get` and the `set` accessors as expression-bodied members."},{"content":"For simple cases in which a property's <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors perform no other operation than setting or retrieving a value in a private backing field, you can take advantage of the C# compiler's support for auto-implemented properties.","pos":[1319,1558],"source":"For simple cases in which a property's `get` and `set` accessors perform no other operation than setting or retrieving a value in a private backing field, you can take advantage of the C# compiler's support for auto-implemented properties."},{"content":"The following example implements <ph id=\"ph1\">`Hours`</ph> as an auto-implemented property.","pos":[1559,1632],"source":" The following example implements `Hours` as an auto-implemented property."},{"pos":[1731,1756],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1822,1830],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1834,1883],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../language-reference/index.md)</ept>","source":"[C# Reference](../../language-reference/index.md)"},{"pos":[1886,1942],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1945,1968],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[1971,2042],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../programming-guide/classes-and-structs/properties.md)</ept>","source":"[Properties](../../programming-guide/classes-and-structs/properties.md)"}]}