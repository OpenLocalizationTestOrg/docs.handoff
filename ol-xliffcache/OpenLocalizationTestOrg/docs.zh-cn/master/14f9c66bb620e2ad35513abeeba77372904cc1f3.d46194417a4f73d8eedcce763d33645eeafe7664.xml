{"content":"---\ntitle: \"short (C# Reference) | Microsoft Docs\"\nms.date: \"2017-03-14\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"short\"\n  - \"short_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"short keyword [C#]\"\nms.assetid: 04c10688-e51a-4a87-bfec-83f7fb42ff11\ncaps.latest.revision: 17\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# short (C# Reference)\n\n`short` denotes an integral data type that stores values according to the size and range shown in the following table.  \n  \n|Type|Range|Size|.NET Framework type|  \n|----------|-----------|----------|-------------------------|  \n|`short`|-32,768 to 32,767|Signed 16-bit integer|<xref:System.Int16?displayProperty=fullName>|  \n  \n## Literals  \n\nYou can declare and initialize a `short` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.  If the integer literal is outside the range of `short` (that is, if it is less than <xref:System.Int16.MinValue?displayProperty=fullName> or greater than <xref:System.Int16.MaxValue?displayProperty=fullName>, a compilation error occurs. \n\nIn the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](../../../csharp/language-reference/keywords/int.md) to `short` values.  \n  \n[!code-cs[Short](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Short)]  \n\n> [!NOTE] \n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.\n\nStarting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-cs[Short](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#ShortS)]  \n \n## Compiler overload resolution\n\n A cast must be used when calling overloaded methods. Consider, for example, the following overloaded methods that use `short` and [int](../../../csharp/language-reference/keywords/int.md) parameters:  \n  \n```csharp  \npublic static void SampleMethod(int i) {}  \npublic static void SampleMethod(short s) {}  \n```  \n  \n Using the `short` cast guarantees that the correct type is called, for example:  \n  \n```csharp  \nSampleMethod(5);         // Calling the method with the int parameter  \nSampleMethod((short)5);  // Calling the method with the short parameter  \n```  \n  \n## Conversions  \n\n There is a predefined implicit conversion from `short` to [int](../../../csharp/language-reference/keywords/int.md), [long](../../../csharp/language-reference/keywords/long.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md).  \n  \n You cannot implicitly convert nonliteral numeric types of larger storage size to `short` (see [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) for the storage sizes of integral types). Consider, for example, the following two `short` variables `x` and `y`:  \n  \n```csharp  \nshort x = 5, y = 12;  \n```  \n  \n The following assignment statement produces a compilation error because the arithmetic expression on the right-hand side of the assignment operator evaluates to [int](../../../csharp/language-reference/keywords/int.md) by default.  \n  \n```csharp\nshort z  = x + y;        // Compiler error CS0266: no conversion from int to short\n```\n\n To fix this problem, use a cast:  \n  \n```csharp\nshort z  = (short)(x + y);   // Explicit conversion\n```\n  \n It is also possible to use the following statements, where the destination variable has the same storage size or a larger storage size:  \n  \n```csharp  \nint m = x + y;  \nlong n = x + y;  \n```  \n  \n There is no implicit conversion from floating-point types to `short`. For example, the following statement generates a compiler error unless an explicit cast is used:  \n  \n```csharp  \nshort x = 3.0;          // Error: no implicit conversion from double  \nshort y = (short)3.0;   // OK: explicit conversion  \n```  \n  \n For information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md).  \n  \n For more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md).  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.Int16>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)","nodes":[{"pos":[4,564],"embed":true,"restype":"x-metadata","content":"title: \"short (C# Reference) | Microsoft Docs\"\nms.date: \"2017-03-14\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"short\"\n  - \"short_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"short keyword [C#]\"\nms.assetid: 04c10688-e51a-4a87-bfec-83f7fb42ff11\ncaps.latest.revision: 17\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"short (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,37],"content":"short (C# Reference) | Microsoft Docs","nodes":[{"content":"short (C# Reference) | Microsoft Docs","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[571,591],"content":"short (C# Reference)","linkify":"short (C# Reference)","nodes":[{"content":"short (C# Reference)","pos":[0,20]}]},{"pos":[593,711],"content":"<ph id=\"ph1\">`short`</ph> denotes an integral data type that stores values according to the size and range shown in the following table.","source":"`short` denotes an integral data type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[718,722]},{"content":"Range","pos":[723,728]},{"content":"Size","pos":[729,733]},{"content":".NET Framework type","pos":[734,753]},{"content":"-32,768 to 32,767","pos":[830,847]},{"content":"Signed 16-bit integer","pos":[848,869]},{"pos":[924,932],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`short`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.","pos":[936,1088],"source":"You can declare and initialize a `short` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`short`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Int16.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[1090,1326],"source":"  If the integer literal is outside the range of `short` (that is, if it is less than <xref:System.Int16.MinValue?displayProperty=fullName> or greater than <xref:System.Int16.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"pos":[1329,1551],"content":"In the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> to <ph id=\"ph1\">`short`</ph> values.","source":"In the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](../../../csharp/language-reference/keywords/int.md) to `short` values."},{"pos":[1671,1834],"content":"[!NOTE] \nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[9,161],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"pos":[1836,1980],"content":"Starting with C# 7, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"pos":[2099,2127],"content":"Compiler overload resolution","linkify":"Compiler overload resolution","nodes":[{"content":"Compiler overload resolution","pos":[0,28]}]},{"content":"A cast must be used when calling overloaded methods.","pos":[2130,2182]},{"content":"Consider, for example, the following overloaded methods that use <ph id=\"ph1\">`short`</ph> and <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> parameters:","pos":[2183,2329],"source":" Consider, for example, the following overloaded methods that use `short` and [int](../../../csharp/language-reference/keywords/int.md) parameters:"},{"pos":[2447,2526],"content":"Using the <ph id=\"ph1\">`short`</ph> cast guarantees that the correct type is called, for example:","source":"Using the `short` cast guarantees that the correct type is called, for example:"},{"pos":[2702,2713],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"pos":[2718,3093],"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`short`</ph> to <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id=\"p2\">[</bpt>long<ept id=\"p2\">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id=\"p3\">[</bpt>float<ept id=\"p3\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p4\">[</bpt>double<ept id=\"p4\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p5\">[</bpt>decimal<ept id=\"p5\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","source":"There is a predefined implicit conversion from `short` to [int](../../../csharp/language-reference/keywords/int.md), [long](../../../csharp/language-reference/keywords/long.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"You cannot implicitly convert nonliteral numeric types of larger storage size to <ph id=\"ph1\">`short`</ph> (see <bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept> for the storage sizes of integral types).","pos":[3100,3327],"source":"You cannot implicitly convert nonliteral numeric types of larger storage size to `short` (see [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) for the storage sizes of integral types)."},{"content":"Consider, for example, the following two <ph id=\"ph1\">`short`</ph> variables <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph>:","pos":[3328,3399],"source":" Consider, for example, the following two `short` variables `x` and `y`:"},{"pos":[3450,3680],"content":"The following assignment statement produces a compilation error because the arithmetic expression on the right-hand side of the assignment operator evaluates to <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> by default.","source":"The following assignment statement produces a compilation error because the arithmetic expression on the right-hand side of the assignment operator evaluates to [int](../../../csharp/language-reference/keywords/int.md) by default."},{"content":"To fix this problem, use a cast:","pos":[3785,3817]},{"content":"It is also possible to use the following statements, where the destination variable has the same storage size or a larger storage size:","pos":[3893,4028]},{"content":"There is no implicit conversion from floating-point types to <ph id=\"ph1\">`short`</ph>.","pos":[4091,4160],"source":"There is no implicit conversion from floating-point types to `short`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[4161,4257]},{"pos":[4409,4637],"content":"For information on arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../../csharp/language-reference/keywords/double.md)</ept>.","source":"For information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md)."},{"pos":[4644,4831],"content":"For more information on implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.","source":"For more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)."},{"pos":[4840,4865],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[4979,4987],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5015,5075],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5079,5146],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5150,5218],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5222,5314],"source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5318,5410],"source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5414,5534],"source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","pos":[5538,5657],"source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}