{"content":"---\ntitle: \"Microsoft XML Serializer Generator\"\ndescription: An overview of the Microsoft XML Serializer Generator. Use the XML Serializer Generator to generate an XML serialization assembly for the types contained in your project.\nauthor: mlacouture\nms.date: 01/19/2017\nms.topic: tutorial\nms.custom: \"mvc, seodec18\"\n---\n# Using Microsoft XML Serializer Generator on .NET Core\n\nThis tutorial teaches you how to use the Microsoft XML Serializer Generator in a C# .NET Core application. During the course of this tutorial, you learn:\n\n> [!div class=\"checklist\"]\n> * How to create a .NET Core app\n> * How to add a reference to the Microsoft.XmlSerializer.Generator package\n> * How to edit your MyApp.csproj to add dependencies\n> * How to add a class and an XmlSerializer\n> * How to build and run the application\n\nLike the [Xml Serializer Generator (sgen.exe)](../../standard/serialization/xml-serializer-generator-tool-sgen-exe.md) for the .NET Framework, the [Microsoft.XmlSerializer.Generator NuGet package](https://www.nuget.org/packages/Microsoft.XmlSerializer.Generator) is the equivalent for .NET Core and .NET Standard projects. It creates an XML serialization assembly for types contained in an assembly to improve the startup performance of XML serialization when serializing or de-serializing objects of those types using <xref:System.Xml.Serialization.XmlSerializer>.\n\n## Prerequisites\n\nTo complete this tutorial:\n\n* [.NET Core 2.1 SDK](https://www.microsoft.com/net/download) or later\n* Your favorite code editor.\n\n> [!TIP]\n> Need to install a code editor? Try [Visual Studio](https://aka.ms/vsdownload?utm_source=mscom&utm_campaign=msdocs)!\n\n## Use Microsoft XML Serializer Generator in a .NET Core console application\n\nThe following instructions show you how to use XML Serializer Generator in a .NET Core console application.\n\n### Create a .NET Core console application\n\nOpen a command prompt and create a folder named *MyApp*. Navigate to the folder you created and type the following command:\n\n```console\ndotnet new console\n```\n\n### Add a reference to the Microsoft.XmlSerializer.Generator package in the MyApp project\n\nUse the [`dotnet add package`](../tools//dotnet-add-package.md) command to add the reference in your project.\n\nType:\n\n```console\ndotnet add package Microsoft.XmlSerializer.Generator -v 1.0.0\n```\n\n### Verify changes to MyApp.csproj after adding the package\n\nOpen your code editor and let's get started! We're still working from the *MyApp* directory we built the app in.\n\nOpen *MyApp.csproj* in your text editor.\n\nAfter running the [`dotnet add package`](../tools//dotnet-add-package.md) command, the following lines are added to your *MyApp.csproj* project file:\n\n ```xml\n <ItemGroup>\n    <PackageReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"1.0.0\" />\n </ItemGroup>\n ```\n\n### Add another ItemGroup section for .NET Core CLI Tool support\n\nAdd the following lines after the `ItemGroup` section that we inspected:\n\n ```xml\n <ItemGroup>\n    <DotNetCliToolReference Include=\"Microsoft.XmlSerializer.Generator\" Version=\"1.0.0\" />\n </ItemGroup>\n ```\n\n### Add a class in the application\n\nOpen *Program.cs* in your text editor. Add the class named *MyClass* in *Program.cs*.\n\n```csharp\npublic class MyClass\n{\n   public int Value;\n}\n```\n\n### Create an `XmlSerializer` for MyClass\n\nAdd the following line inside *Main* to create an `XmlSerializer` for MyClass:\n\n```csharp\nvar serializer = new System.Xml.Serialization.XmlSerializer(typeof(MyClass));\n```\n\n### Build and run the application\n\nStill within the *MyApp* folder, run the application via [`dotnet run`](../tools/dotnet-run.md) and it automatically loads and uses the pre-generated serializers at runtime.\n\nType the following command in your console window:\n\n```console\ndotnet run\n```\n\n> [!NOTE]\n> [`dotnet run`](../tools/dotnet-run.md) calls [`dotnet build`](../tools/dotnet-build.md) to ensure that the build targets have been built, and then calls `dotnet <assembly.dll>` to run the target application.\n\n> [!IMPORTANT]\n> The commands and steps shown in this tutorial to run your application are used during development time only. Once you're ready to deploy your app, take a look at the different [deployment strategies](../deploying/index.md) for .NET Core apps and the [`dotnet publish`](../tools/dotnet-publish.md) command.\n\nIf everything succeeds, an assembly named *MyApp.XmlSerializers.dll* is generated in the output folder.\n\nCongratulations! You have just:\n> [!div class=\"checklist\"]\n> * Created a .NET Core app.\n> * Added a reference to the Microsoft.XmlSerializer.Generator package.\n> * Edited your MyApp.csproj to add dependencies.\n> * Added a class and an XmlSerializer.\n> * Built and ran the application.\n\n## Related resources\n\n* [Introducing XML Serialization](../../standard/serialization/introducing-xml-serialization.md)\n* [How to: Serialize Using XmlSerializer (C#)](../../csharp/programming-guide/concepts/linq/how-to-serialize-using-xmlserializer.md)\n* [How to: Serialize Using XmlSerializer (Visual Basic)](../../visual-basic/programming-guide/concepts/linq/how-to-serialize-using-xmlserializer.md)","nodes":[{"pos":[4,316],"embed":true,"restype":"x-metadata","content":"title: \"Microsoft XML Serializer Generator\"\ndescription: An overview of the Microsoft XML Serializer Generator. Use the XML Serializer Generator to generate an XML serialization assembly for the types contained in your project.\nauthor: mlacouture\nms.date: 01/19/2017\nms.topic: tutorial\nms.custom: \"mvc, seodec18\"","nodes":[{"content":"Microsoft XML Serializer Generator","nodes":[{"pos":[0,34],"content":"Microsoft XML Serializer Generator","nodes":[{"content":"Microsoft XML Serializer Generator","pos":[0,34]}]}],"path":["title"],"nosxs":false},{"content":"An overview of the Microsoft XML Serializer Generator. Use the XML Serializer Generator to generate an XML serialization assembly for the types contained in your project.","nodes":[{"pos":[0,170],"content":"An overview of the Microsoft XML Serializer Generator. Use the XML Serializer Generator to generate an XML serialization assembly for the types contained in your project.","nodes":[{"content":"An overview of the Microsoft XML Serializer Generator. Use the XML Serializer Generator to generate an XML serialization assembly for the types contained in your project.","pos":[0,170],"nodes":[{"content":"An overview of the Microsoft XML Serializer Generator.","pos":[0,54]},{"content":"Use the XML Serializer Generator to generate an XML serialization assembly for the types contained in your project.","pos":[55,170]}]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[323,376],"content":"Using Microsoft XML Serializer Generator on .NET Core","linkify":"Using Microsoft XML Serializer Generator on .NET Core","nodes":[{"content":"Using Microsoft XML Serializer Generator on .NET Core","pos":[0,53]}]},{"content":"This tutorial teaches you how to use the Microsoft XML Serializer Generator in a C# .NET Core application.","pos":[378,484]},{"content":"During the course of this tutorial, you learn:","pos":[485,531]},{"content":"How to create a .NET Core app","pos":[564,593]},{"content":"How to add a reference to the Microsoft.XmlSerializer.Generator package","pos":[598,669]},{"content":"How to edit your MyApp.csproj to add dependencies","pos":[674,723]},{"content":"How to add a class and an XmlSerializer","pos":[728,767]},{"content":"How to build and run the application","pos":[772,808]},{"content":"Like the <bpt id=\"p1\">[</bpt>Xml Serializer Generator (sgen.exe)<ept id=\"p1\">](../../standard/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept> for the .NET Framework, the <bpt id=\"p2\">[</bpt>Microsoft.XmlSerializer.Generator NuGet package<ept id=\"p2\">](https://www.nuget.org/packages/Microsoft.XmlSerializer.Generator)</ept> is the equivalent for .NET Core and .NET Standard projects.","pos":[810,1132],"source":"Like the [Xml Serializer Generator (sgen.exe)](../../standard/serialization/xml-serializer-generator-tool-sgen-exe.md) for the .NET Framework, the [Microsoft.XmlSerializer.Generator NuGet package](https://www.nuget.org/packages/Microsoft.XmlSerializer.Generator) is the equivalent for .NET Core and .NET Standard projects."},{"content":"It creates an XML serialization assembly for types contained in an assembly to improve the startup performance of XML serialization when serializing or de-serializing objects of those types using <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.","pos":[1133,1375],"source":" It creates an XML serialization assembly for types contained in an assembly to improve the startup performance of XML serialization when serializing or de-serializing objects of those types using <xref:System.Xml.Serialization.XmlSerializer>."},{"pos":[1380,1393],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"To complete this tutorial:","pos":[1395,1421]},{"pos":[1425,1493],"content":"<bpt id=\"p1\">[</bpt>.NET Core 2.1 SDK<ept id=\"p1\">](https://www.microsoft.com/net/download)</ept> or later","source":"[.NET Core 2.1 SDK](https://www.microsoft.com/net/download) or later"},{"content":"Your favorite code editor.","pos":[1496,1522]},{"pos":[1526,1650],"content":"[!TIP]\nNeed to install a code editor? Try [Visual Studio](https://aka.ms/vsdownload?utm_source=mscom&utm_campaign=msdocs)!","leadings":["","> "],"nodes":[{"content":"Need to install a code editor? Try [Visual Studio](https://aka.ms/vsdownload?utm_source=mscom&utm_campaign=msdocs)!","pos":[7,122],"nodes":[{"content":"Need to install a code editor?","pos":[0,30]},{"content":"Try <bpt id=\"p1\">[</bpt>Visual Studio<ept id=\"p1\">](https://aka.ms/vsdownload?utm_source=mscom&amp;utm_campaign=msdocs)</ept>!","pos":[31,115],"source":" Try [Visual Studio](https://aka.ms/vsdownload?utm_source=mscom&utm_campaign=msdocs)!"}]}]},{"pos":[1655,1728],"content":"Use Microsoft XML Serializer Generator in a .NET Core console application","linkify":"Use Microsoft XML Serializer Generator in a .NET Core console application","nodes":[{"content":"Use Microsoft XML Serializer Generator in a .NET Core console application","pos":[0,73]}]},{"content":"The following instructions show you how to use XML Serializer Generator in a .NET Core console application.","pos":[1730,1837]},{"pos":[1843,1881],"content":"Create a .NET Core console application","linkify":"Create a .NET Core console application","nodes":[{"content":"Create a .NET Core console application","pos":[0,38]}]},{"content":"Open a command prompt and create a folder named <bpt id=\"p1\">*</bpt>MyApp<ept id=\"p1\">*</ept>.","pos":[1883,1939],"source":"Open a command prompt and create a folder named *MyApp*."},{"content":"Navigate to the folder you created and type the following command:","pos":[1940,2006]},{"pos":[2047,2132],"content":"Add a reference to the Microsoft.XmlSerializer.Generator package in the MyApp project","linkify":"Add a reference to the Microsoft.XmlSerializer.Generator package in the MyApp project","nodes":[{"content":"Add a reference to the Microsoft.XmlSerializer.Generator package in the MyApp project","pos":[0,85]}]},{"pos":[2134,2243],"content":"Use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add package`</ph><ept id=\"p1\">](../tools//dotnet-add-package.md)</ept> command to add the reference in your project.","source":"Use the [`dotnet add package`](../tools//dotnet-add-package.md) command to add the reference in your project."},{"content":"Type:","pos":[2245,2250]},{"pos":[2334,2389],"content":"Verify changes to MyApp.csproj after adding the package","linkify":"Verify changes to MyApp.csproj after adding the package","nodes":[{"content":"Verify changes to MyApp.csproj after adding the package","pos":[0,55]}]},{"content":"Open your code editor and let's get started!","pos":[2391,2435]},{"content":"We're still working from the <bpt id=\"p1\">*</bpt>MyApp<ept id=\"p1\">*</ept> directory we built the app in.","pos":[2436,2503],"source":" We're still working from the *MyApp* directory we built the app in."},{"pos":[2505,2545],"content":"Open <bpt id=\"p1\">*</bpt>MyApp.csproj<ept id=\"p1\">*</ept> in your text editor.","source":"Open *MyApp.csproj* in your text editor."},{"pos":[2547,2696],"content":"After running the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add package`</ph><ept id=\"p1\">](../tools//dotnet-add-package.md)</ept> command, the following lines are added to your <bpt id=\"p2\">*</bpt>MyApp.csproj<ept id=\"p2\">*</ept> project file:","source":"After running the [`dotnet add package`](../tools//dotnet-add-package.md) command, the following lines are added to your *MyApp.csproj* project file:"},{"pos":[2828,2888],"content":"Add another ItemGroup section for .NET Core CLI Tool support","linkify":"Add another ItemGroup section for .NET Core CLI Tool support","nodes":[{"content":"Add another ItemGroup section for .NET Core CLI Tool support","pos":[0,60]}]},{"pos":[2890,2962],"content":"Add the following lines after the <ph id=\"ph1\">`ItemGroup`</ph> section that we inspected:","source":"Add the following lines after the `ItemGroup` section that we inspected:"},{"pos":[3100,3130],"content":"Add a class in the application","linkify":"Add a class in the application","nodes":[{"content":"Add a class in the application","pos":[0,30]}]},{"content":"Open <bpt id=\"p1\">*</bpt>Program.cs<ept id=\"p1\">*</ept> in your text editor.","pos":[3132,3170],"source":"Open *Program.cs* in your text editor."},{"content":"Add the class named <bpt id=\"p1\">*</bpt>MyClass<ept id=\"p1\">*</ept> in <bpt id=\"p2\">*</bpt>Program.cs<ept id=\"p2\">*</ept>.","pos":[3171,3217],"source":" Add the class named *MyClass* in *Program.cs*."},{"pos":[3284,3321],"content":"Create an <ph id=\"ph1\">`XmlSerializer`</ph> for MyClass","linkify":"Create an `XmlSerializer` for MyClass","source":"Create an `XmlSerializer` for MyClass"},{"pos":[3323,3401],"content":"Add the following line inside <bpt id=\"p1\">*</bpt>Main<ept id=\"p1\">*</ept> to create an <ph id=\"ph1\">`XmlSerializer`</ph> for MyClass:","source":"Add the following line inside *Main* to create an `XmlSerializer` for MyClass:"},{"pos":[3500,3529],"content":"Build and run the application","linkify":"Build and run the application","nodes":[{"content":"Build and run the application","pos":[0,29]}]},{"pos":[3531,3704],"content":"Still within the <bpt id=\"p1\">*</bpt>MyApp<ept id=\"p1\">*</ept> folder, run the application via <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet run`</ph><ept id=\"p2\">](../tools/dotnet-run.md)</ept> and it automatically loads and uses the pre-generated serializers at runtime.","source":"Still within the *MyApp* folder, run the application via [`dotnet run`](../tools/dotnet-run.md) and it automatically loads and uses the pre-generated serializers at runtime."},{"content":"Type the following command in your console window:","pos":[3706,3756]},{"pos":[3787,4004],"content":"[!NOTE]\n[`dotnet run`](../tools/dotnet-run.md) calls [`dotnet build`](../tools/dotnet-build.md) to ensure that the build targets have been built, and then calls `dotnet <assembly.dll>` to run the target application.","leadings":["","> "],"nodes":[{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet run`</ph><ept id=\"p1\">](../tools/dotnet-run.md)</ept> calls <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`dotnet build`</ph><ept id=\"p2\">](../tools/dotnet-build.md)</ept> to ensure that the build targets have been built, and then calls <ph id=\"ph3\">`dotnet &lt;assembly.dll&gt;`</ph> to run the target application.","pos":[8,215],"source":"[`dotnet run`](../tools/dotnet-run.md) calls [`dotnet build`](../tools/dotnet-build.md) to ensure that the build targets have been built, and then calls `dotnet <assembly.dll>` to run the target application."}]},{"pos":[4008,4328],"content":"[!IMPORTANT]\nThe commands and steps shown in this tutorial to run your application are used during development time only. Once you're ready to deploy your app, take a look at the different [deployment strategies](../deploying/index.md) for .NET Core apps and the [`dotnet publish`](../tools/dotnet-publish.md) command.","leadings":["","> "],"nodes":[{"content":"The commands and steps shown in this tutorial to run your application are used during development time only. Once you're ready to deploy your app, take a look at the different [deployment strategies](../deploying/index.md) for .NET Core apps and the [`dotnet publish`](../tools/dotnet-publish.md) command.","pos":[13,318],"nodes":[{"content":"The commands and steps shown in this tutorial to run your application are used during development time only.","pos":[0,108]},{"content":"Once you're ready to deploy your app, take a look at the different <bpt id=\"p1\">[</bpt>deployment strategies<ept id=\"p1\">](../deploying/index.md)</ept> for .NET Core apps and the <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet publish`</ph><ept id=\"p2\">](../tools/dotnet-publish.md)</ept> command.","pos":[109,305],"source":" Once you're ready to deploy your app, take a look at the different [deployment strategies](../deploying/index.md) for .NET Core apps and the [`dotnet publish`](../tools/dotnet-publish.md) command."}]}]},{"pos":[4330,4433],"content":"If everything succeeds, an assembly named <bpt id=\"p1\">*</bpt>MyApp.XmlSerializers.dll<ept id=\"p1\">*</ept> is generated in the output folder.","source":"If everything succeeds, an assembly named *MyApp.XmlSerializers.dll* is generated in the output folder."},{"content":"Congratulations!","pos":[4435,4451]},{"content":"You have just:","pos":[4452,4466]},{"content":"Created a .NET Core app.","pos":[4498,4522]},{"content":"Added a reference to the Microsoft.XmlSerializer.Generator package.","pos":[4527,4594]},{"content":"Edited your MyApp.csproj to add dependencies.","pos":[4599,4644]},{"content":"Added a class and an XmlSerializer.","pos":[4649,4684]},{"content":"Built and ran the application.","pos":[4689,4719]},{"pos":[4724,4741],"content":"Related resources","linkify":"Related resources","nodes":[{"content":"Related resources","pos":[0,17]}]},{"pos":[4745,4839],"content":"<bpt id=\"p1\">[</bpt>Introducing XML Serialization<ept id=\"p1\">](../../standard/serialization/introducing-xml-serialization.md)</ept>","source":"[Introducing XML Serialization](../../standard/serialization/introducing-xml-serialization.md)"},{"pos":[4842,4972],"content":"<bpt id=\"p1\">[</bpt>How to: Serialize Using XmlSerializer (C#)<ept id=\"p1\">](../../csharp/programming-guide/concepts/linq/how-to-serialize-using-xmlserializer.md)</ept>","source":"[How to: Serialize Using XmlSerializer (C#)](../../csharp/programming-guide/concepts/linq/how-to-serialize-using-xmlserializer.md)"},{"pos":[4975,5121],"content":"<bpt id=\"p1\">[</bpt>How to: Serialize Using XmlSerializer (Visual Basic)<ept id=\"p1\">](../../visual-basic/programming-guide/concepts/linq/how-to-serialize-using-xmlserializer.md)</ept>","source":"[How to: Serialize Using XmlSerializer (Visual Basic)](../../visual-basic/programming-guide/concepts/linq/how-to-serialize-using-xmlserializer.md)"}]}