{"content":"---\ntitle: \"char keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"char\"\n  - \"char_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"char data type [C#]\"\nms.assetid: b51cf4fb-124c-4067-af48-afbac122b228\n---\n# char (C# Reference)\n\nThe `char` keyword is used to declare an instance of the <xref:System.Char?displayProperty=nameWithType> structure that the .NET Framework uses to represent a Unicode character. The value of a `Char` object is a 16-bit numeric (ordinal) value.\n\n Unicode characters are used to represent most of the written languages throughout the world.\n\n|Type|Range|Size|.NET type|\n|----------|-----------|----------|-------------------------|\n|`char`|U+0000 to U+FFFF|Unicode 16-bit character|<xref:System.Char?displayProperty=nameWithType>|\n\n## Literals\n\nConstants of the `char` type can be written as character literals, hexadecimal escape sequence, or Unicode representation. You can also cast the integral character codes. In the following example four `char` variables are initialized with the same character `X`:\n\n[!code-csharp[csrefKeywordsTypes#19](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#19)]\n\n## Conversions\n\nA `char` can be implicitly converted to [ushort](../../../csharp/language-reference/keywords/ushort.md), [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md). However, there are no implicit conversions from other types to the `char` type.\n\nThe <xref:System.Char?displayProperty=nameWithType> type provides several static methods for working with `char` values.\n\n## C# language specification  \n\nFor more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- <xref:System.Char>\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)\n- [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)\n- [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)\n- [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md)\n- [Strings](../../../csharp/programming-guide/strings/index.md)\n","nodes":[{"pos":[4,228],"embed":true,"restype":"x-metadata","content":"title: \"char keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"char\"\n  - \"char_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"char data type [C#]\"\nms.assetid: b51cf4fb-124c-4067-af48-afbac122b228","nodes":[{"content":"char keyword - C# Reference","nodes":[{"pos":[0,27],"content":"char keyword - C# Reference","nodes":[{"content":"char keyword - C# Reference","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[235,254],"content":"char (C# Reference)","linkify":"char (C# Reference)","nodes":[{"content":"char (C# Reference)","pos":[0,19]}]},{"content":"The <ph id=\"ph1\">`char`</ph> keyword is used to declare an instance of the <ph id=\"ph2\">&lt;xref:System.Char?displayProperty=nameWithType&gt;</ph> structure that the .NET Framework uses to represent a Unicode character.","pos":[256,433],"source":"The `char` keyword is used to declare an instance of the <xref:System.Char?displayProperty=nameWithType> structure that the .NET Framework uses to represent a Unicode character."},{"content":"The value of a <ph id=\"ph1\">`Char`</ph> object is a 16-bit numeric (ordinal) value.","pos":[434,499],"source":" The value of a `Char` object is a 16-bit numeric (ordinal) value."},{"content":"Unicode characters are used to represent most of the written languages throughout the world.","pos":[502,594]},{"content":"Type","pos":[597,601]},{"content":"Range","pos":[602,607]},{"content":"Size","pos":[608,612]},{"content":".NET type","pos":[613,622]},{"content":"U+0000 to U+FFFF","pos":[694,710]},{"content":"Unicode 16-bit character","pos":[711,735]},{"pos":[789,797],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"Constants of the <ph id=\"ph1\">`char`</ph> type can be written as character literals, hexadecimal escape sequence, or Unicode representation.","pos":[799,921],"source":"Constants of the `char` type can be written as character literals, hexadecimal escape sequence, or Unicode representation."},{"content":"You can also cast the integral character codes.","pos":[922,969]},{"content":"In the following example four <ph id=\"ph1\">`char`</ph> variables are initialized with the same character <ph id=\"ph2\">`X`</ph>:","pos":[970,1061],"source":" In the following example four `char` variables are initialized with the same character `X`:"},{"pos":[1195,1206],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"A <ph id=\"ph1\">`char`</ph> can be implicitly converted to <bpt id=\"p1\">[</bpt>ushort<ept id=\"p1\">](../../../csharp/language-reference/keywords/ushort.md)</ept>, <bpt id=\"p2\">[</bpt>int<ept id=\"p2\">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id=\"p3\">[</bpt>uint<ept id=\"p3\">](../../../csharp/language-reference/keywords/uint.md)</ept>, <bpt id=\"p4\">[</bpt>long<ept id=\"p4\">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id=\"p5\">[</bpt>ulong<ept id=\"p5\">](../../../csharp/language-reference/keywords/ulong.md)</ept>, <bpt id=\"p6\">[</bpt>float<ept id=\"p6\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p7\">[</bpt>double<ept id=\"p7\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p8\">[</bpt>decimal<ept id=\"p8\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","pos":[1208,1754],"source":"A `char` can be implicitly converted to [ushort](../../../csharp/language-reference/keywords/ushort.md), [int](../../../csharp/language-reference/keywords/int.md), [uint](../../../csharp/language-reference/keywords/uint.md), [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"However, there are no implicit conversions from other types to the <ph id=\"ph1\">`char`</ph> type.","pos":[1755,1834],"source":" However, there are no implicit conversions from other types to the `char` type."},{"pos":[1836,1956],"content":"The <ph id=\"ph1\">&lt;xref:System.Char?displayProperty=nameWithType&gt;</ph> type provides several static methods for working with <ph id=\"ph2\">`char`</ph> values.","source":"The <xref:System.Char?displayProperty=nameWithType> type provides several static methods for working with `char` values."},{"pos":[1961,1986],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Integral types<ept id=\"p1\">](~/_csharplang/spec/types.md#integral-types)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[1990,2148],"source":"For more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[2149,2225]},{"pos":[2230,2238],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2263,2322],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[2325,2391],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2394,2461],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[2464,2555],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept>","source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)"},{"pos":[2558,2649],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept>","source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)"},{"pos":[2652,2771],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)"},{"pos":[2774,2893],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"},{"pos":[2896,2971],"content":"<bpt id=\"p1\">[</bpt>Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept>","source":"[Nullable Types](../../../csharp/programming-guide/nullable-types/index.md)"},{"pos":[2974,3035],"content":"<bpt id=\"p1\">[</bpt>Strings<ept id=\"p1\">](../../../csharp/programming-guide/strings/index.md)</ept>","source":"[Strings](../../../csharp/programming-guide/strings/index.md)"}]}