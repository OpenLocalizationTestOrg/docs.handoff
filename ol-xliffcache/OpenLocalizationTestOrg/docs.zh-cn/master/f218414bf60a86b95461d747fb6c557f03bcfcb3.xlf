<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="typeof.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f218414bf60a86b95461d747fb6c557f03bcfcb3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\typeof.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d17b723c423de0126205b812c5674d6c9c7f172</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9fe038ab7623d5bc60d296177403c7068fc842c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>typeof - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>typeof (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Used to obtain the <ph id="ph1">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> object for a type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`typeof`</ph> expression takes the following form:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To obtain the run-time type of an expression, you can use the .NET Framework method <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph>, as in the following example:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`typeof`</ph> operator cannot be overloaded.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`typeof`</ph> operator can also be used on open generic types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Types with more than one type parameter must have the appropriate number of commas in the specification.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWIthType&gt;</ph> has two type arguments, so you use one comma:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example shows how to determine whether the return type of a method is a generic <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Type.GetInterface%2A?displayProperty=nameWithType&gt;</ph> will return <ph id="ph2">`null`</ph> if the return type is not an <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> generic type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This sample uses the <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> method to determine the type that is used to contain the result of a numeric calculation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This depends on the storage requirements of the resulting number.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>The typeof operator<ept id="p1">](~/_csharplang/spec/expressions.md#the-typeof-operator)</ept> in the <bpt id="p2">[</bpt>C# Language Specification<ept id="p2">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The language specification is the definitive source for C# syntax and usage.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is<ept id="p1">](../../../csharp/language-reference/keywords/is.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Keywords<ept id="p1">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>