{"content":"---\ntitle: \"Sample XSD File: Customers and Orders1 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: ef9911a3-7ac4-44fd-b36e-a0c0ad0a157d\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Sample XSD File: Customers and Orders\nThe following XSD file is used in various examples in the [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] documentation. This file contains a schema definition for the [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md). The schema uses the `xs:key` and `xs:keyref` features of XSD to establish that the `CustomerID` attribute of the `Customer` element is a key, and to establish a relationship between the `CustomerID` element in each `Order` element and the `CustomerID` attribute in each `Customer` element.  \n  \n For an example of writing LINQ queries that take advantage of this relationship using the `Join` clause, see [How to: Join Two Collections (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml.md).  \n  \n## CustomersOrders.xsd  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">  \n  <xs:element name='Root'>  \n    <xs:complexType>  \n      <xs:sequence>  \n        <xs:element name='Customers'>  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name='Customer' type='CustomerType' minOccurs='0' maxOccurs='unbounded' />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n        <xs:element name='Orders'>  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name='Order' type='OrderType' minOccurs='0' maxOccurs='unbounded' />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:sequence>  \n    </xs:complexType>  \n    <xs:key name='CustomerIDKey'>  \n      <xs:selector xpath='Customers/Customer'/>  \n      <xs:field xpath='@CustomerID'/>  \n    </xs:key>  \n    <xs:keyref name='CustomerIDKeyRef' refer='CustomerIDKey'>  \n      <xs:selector xpath='Orders/Order'/>  \n      <xs:field xpath='CustomerID'/>  \n    </xs:keyref>  \n  </xs:element>  \n  <xs:complexType name='CustomerType'>  \n    <xs:sequence>  \n      <xs:element name='CompanyName' type='xs:string'/>  \n      <xs:element name='ContactName' type='xs:string'/>  \n      <xs:element name='ContactTitle' type='xs:string'/>  \n      <xs:element name='Phone' type='xs:string'/>  \n      <xs:element name='Fax' minOccurs='0' type='xs:string'/>  \n      <xs:element name='FullAddress' type='AddressType'/>  \n    </xs:sequence>  \n    <xs:attribute name='CustomerID' type='xs:token'/>  \n  </xs:complexType>  \n  <xs:complexType name='AddressType'>  \n    <xs:sequence>  \n      <xs:element name='Address' type='xs:string'/>  \n      <xs:element name='City' type='xs:string'/>  \n      <xs:element name='Region' type='xs:string'/>  \n      <xs:element name='PostalCode' type='xs:string' />  \n      <xs:element name='Country' type='xs:string'/>  \n    </xs:sequence>  \n    <xs:attribute name='CustomerID' type='xs:token'/>  \n  </xs:complexType>  \n  <xs:complexType name='OrderType'>  \n    <xs:sequence>  \n      <xs:element name='CustomerID' type='xs:token'/>  \n      <xs:element name='EmployeeID' type='xs:token'/>  \n      <xs:element name='OrderDate' type='xs:dateTime'/>  \n      <xs:element name='RequiredDate' type='xs:dateTime'/>  \n      <xs:element name='ShipInfo' type='ShipInfoType'/>  \n    </xs:sequence>  \n  </xs:complexType>  \n  <xs:complexType name='ShipInfoType'>  \n    <xs:sequence>  \n      <xs:element name='ShipVia' type='xs:integer'/>  \n      <xs:element name='Freight' type='xs:decimal'/>  \n      <xs:element name='ShipName' type='xs:string'/>  \n      <xs:element name='ShipAddress' type='xs:string'/>  \n      <xs:element name='ShipCity' type='xs:string'/>  \n      <xs:element name='ShipRegion' type='xs:string'/>  \n      <xs:element name='ShipPostalCode' type='xs:string'/>  \n      <xs:element name='ShipCountry' type='xs:string'/>  \n    </xs:sequence>  \n    <xs:attribute name='ShippedDate' type='xs:dateTime'/>  \n  </xs:complexType>  \n</xs:schema>  \n```  \n  \n## See Also  \n [Sample XML Documents (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-documents-linq-to-xml.md)","nodes":[{"pos":[12,67],"content":"Sample XSD File: Customers and Orders1 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Sample XSD File: Customers and Orders1 | Microsoft Docs","pos":[0,55]}]},{"pos":[426,463],"content":"Sample XSD File: Customers and Orders","linkify":"Sample XSD File: Customers and Orders","nodes":[{"content":"Sample XSD File: Customers and Orders","pos":[0,37]}]},{"content":"The following XSD file is used in various examples in the <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph> documentation.","pos":[464,639],"source":"The following XSD file is used in various examples in the [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)] documentation."},{"content":"This file contains a schema definition for the <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)</ept>.","pos":[640,847],"source":" This file contains a schema definition for the [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)."},{"content":"The schema uses the <ph id=\"ph1\">`xs:key`</ph> and <ph id=\"ph2\">`xs:keyref`</ph> features of XSD to establish that the <ph id=\"ph3\">`CustomerID`</ph> attribute of the <ph id=\"ph4\">`Customer`</ph> element is a key, and to establish a relationship between the <ph id=\"ph5\">`CustomerID`</ph> element in each <ph id=\"ph6\">`Order`</ph> element and the <ph id=\"ph7\">`CustomerID`</ph> attribute in each <ph id=\"ph8\">`Customer`</ph> element.","pos":[848,1137],"source":" The schema uses the `xs:key` and `xs:keyref` features of XSD to establish that the `CustomerID` attribute of the `Customer` element is a key, and to establish a relationship between the `CustomerID` element in each `Order` element and the `CustomerID` attribute in each `Customer` element."},{"pos":[1144,1398],"content":"For an example of writing LINQ queries that take advantage of this relationship using the <ph id=\"ph1\">`Join`</ph> clause, see <bpt id=\"p1\">[</bpt>How to: Join Two Collections (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml.md)</ept>.","source":"For an example of writing LINQ queries that take advantage of this relationship using the `Join` clause, see [How to: Join Two Collections (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml.md)."},{"pos":[1407,1426],"content":"CustomersOrders.xsd","linkify":"CustomersOrders.xsd","nodes":[{"content":"CustomersOrders.xsd","pos":[0,19]}]},{"pos":[4520,4528],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4532,4656],"content":"<bpt id=\"p1\">[</bpt>Sample XML Documents (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-documents-linq-to-xml.md)</ept>","source":"[Sample XML Documents (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-documents-linq-to-xml.md)"}]}