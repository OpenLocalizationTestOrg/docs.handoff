{"content":"---\ntitle: \"DataContractSerializer Sample\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"XML Formatter\"\nms.assetid: e0a2fe89-3534-48c8-aa3c-819862224571\n---\n# DataContractSerializer Sample\nThe DataContractSerializer sample demonstrates the <xref:System.Runtime.Serialization.DataContractSerializer>, which performs general serialization and deserialization services for the data contract classes. The sample creates a `Record` object, serializes it to a memory stream and deserializes the memory stream back to another `Record` object to demonstrate the use of the <xref:System.Runtime.Serialization.DataContractSerializer>. The sample then serializes the `Record` object using a binary writer to demonstrate how the writer affects serialization.  \n  \n> [!NOTE]\n>  The setup procedure and build instructions for this sample are located at the end of this topic.  \n  \n The data contract for `Record` is shown in the following sample code.  \n  \n```csharp  \n[DataContract(Namespace=\"http://Microsoft.ServiceModel.Samples\")]  \ninternal class Record  \n{  \n    private double n1;  \n    private double n2;  \n    private string operation;  \n    private double result;  \n  \n    internal Record(double n1, double n2, string operation, double result)  \n    {  \n        this.n1 = n1;  \n        this.n2 = n2;  \n        this.operation = operation;  \n        this.result = result;  \n    }  \n  \n    [DataMember]  \n    internal double OperandNumberOne  \n    {  \n        get { return n1; }  \n        set { n1 = value; }  \n    }  \n  \n    [DataMember]  \n    internal double OperandNumberTwo  \n    {  \n        get { return n2; }  \n        set { n2 = value; }  \n    }  \n  \n    [DataMember]  \n    internal string Operation  \n    {  \n        get { return operation; }  \n        set { operation = value; }  \n    }  \n  \n    [DataMember]  \n    internal double Result  \n    {  \n        get { return result; }  \n        set { result = value; }  \n    }  \n  \n    public override string ToString()  \n    {  \n        return $\"Record: {n1} {operation} {n2} = {result}\";\n    }  \n}  \n```  \n  \n The sample code creates a `Record` object named `record1` then displays the object.  \n  \n```csharp\nRecord record1 = new Record(1, 2, \"+\", 3);  \nConsole.WriteLine(\"Original record: {0}\", record1.ToString());  \n```  \n  \n The sample then uses the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize `record1` into a memory stream.  \n  \n```csharp  \nMemoryStream stream1 = new MemoryStream();  \n  \n//Serialize the Record object to a memory stream using DataContractSerializer.  \nDataContractSerializer serializer = new DataContractSerializer(typeof(Record));  \nserializer.WriteObject(stream1, record1);  \n```  \n  \n Next, the sample uses the <xref:System.Runtime.Serialization.DataContractSerializer> to deserialize the memory stream back into a new `Record` object and displays it.  \n  \n```csharp  \nstream1.Position = 0;  \n  \n//Deserialize the Record object back into a new record object.  \nRecord record2 = (Record)serializer.ReadObject(stream1);  \n  \nConsole.WriteLine(\"Deserialized record: {0}\", record2.ToString());  \n```  \n  \n By default, the `DataContractSerializer` encodes objects into a stream using a textual representation of XML. However, you can influence the encoding of the XML by passing in a different writer. The sample creates a binary writer by calling <xref:System.Xml.XmlDictionaryWriter.CreateBinaryWriter%2A>. It then passes the writer and the record object to the serializer when it calls <xref:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent%2A>. Finally, the sample flushes the writer and reports on the length of the streams.  \n  \n```csharp  \nMemoryStream stream2 = new MemoryStream();  \n  \nXmlDictionaryWriter binaryDictionaryWriter = XmlDictionaryWriter.CreateBinaryWriter(stream2);  \nserializer.WriteObject(binaryDictionaryWriter, record1);  \nbinaryDictionaryWriter.Flush();  \n  \n//report the length of the streams  \nConsole.WriteLine(\"Text Stream is {0} bytes long\", stream1.Length);  \nConsole.WriteLine(\"Binary Stream is {0} bytes long\", stream2.Length);  \n```  \n  \n When you run the sample, the original record and the deserialized record are displayed, followed by the comparison between the length of the text encoding and the binary encoding. Press ENTER in the client window to shut down the client.  \n  \n```console  \nOriginal record: Record: 1 + 2 = 3  \nDeserialized record: Record: 1 + 2 = 3  \nText Stream is 233 bytes long  \nBinary Stream is 156 bytes long  \n  \nPress <ENTER> to terminate client.  \n```  \n  \n### To set up, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n3.  To run the sample, start the client from the command prompt by typing client\\bin\\client.exe.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Basic\\Contract\\Data\\DataContractSerializer`  \n","nodes":[{"pos":[4,155],"embed":true,"restype":"x-metadata","content":"title: \"DataContractSerializer Sample\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"XML Formatter\"\nms.assetid: e0a2fe89-3534-48c8-aa3c-819862224571","nodes":[{"content":"DataContractSerializer Sample","nodes":[{"pos":[0,29],"content":"DataContractSerializer Sample","nodes":[{"content":"DataContractSerializer Sample","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[162,191],"content":"DataContractSerializer Sample","linkify":"DataContractSerializer Sample","nodes":[{"content":"DataContractSerializer Sample","pos":[0,29]}]},{"content":"The DataContractSerializer sample demonstrates the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, which performs general serialization and deserialization services for the data contract classes.","pos":[192,399],"source":"The DataContractSerializer sample demonstrates the <xref:System.Runtime.Serialization.DataContractSerializer>, which performs general serialization and deserialization services for the data contract classes."},{"content":"The sample creates a <ph id=\"ph1\">`Record`</ph> object, serializes it to a memory stream and deserializes the memory stream back to another <ph id=\"ph2\">`Record`</ph> object to demonstrate the use of the <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.","pos":[400,627],"source":" The sample creates a `Record` object, serializes it to a memory stream and deserializes the memory stream back to another `Record` object to demonstrate the use of the <xref:System.Runtime.Serialization.DataContractSerializer>."},{"content":"The sample then serializes the <ph id=\"ph1\">`Record`</ph> object using a binary writer to demonstrate how the writer affects serialization.","pos":[628,749],"source":" The sample then serializes the `Record` object using a binary writer to demonstrate how the writer affects serialization."},{"pos":[757,864],"content":"[!NOTE]\n The setup procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The setup procedure and build instructions for this sample are located at the end of this topic.","pos":[9,105]}]},{"pos":[871,940],"content":"The data contract for <ph id=\"ph1\">`Record`</ph> is shown in the following sample code.","source":"The data contract for `Record` is shown in the following sample code."},{"pos":[2061,2144],"content":"The sample code creates a <ph id=\"ph1\">`Record`</ph> object named <ph id=\"ph2\">`record1`</ph> then displays the object.","source":"The sample code creates a `Record` object named `record1` then displays the object."},{"pos":[2280,2408],"content":"The sample then uses the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> to serialize <ph id=\"ph2\">`record1`</ph> into a memory stream.","source":"The sample then uses the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize `record1` into a memory stream."},{"pos":[2691,2857],"content":"Next, the sample uses the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> to deserialize the memory stream back into a new <ph id=\"ph2\">`Record`</ph> object and displays it.","source":"Next, the sample uses the <xref:System.Runtime.Serialization.DataContractSerializer> to deserialize the memory stream back into a new `Record` object and displays it."},{"content":"By default, the <ph id=\"ph1\">`DataContractSerializer`</ph> encodes objects into a stream using a textual representation of XML.","pos":[3108,3217],"source":"By default, the `DataContractSerializer` encodes objects into a stream using a textual representation of XML."},{"content":"However, you can influence the encoding of the XML by passing in a different writer.","pos":[3218,3302]},{"content":"The sample creates a binary writer by calling <ph id=\"ph1\">&lt;xref:System.Xml.XmlDictionaryWriter.CreateBinaryWriter%2A&gt;</ph>.","pos":[3303,3409],"source":" The sample creates a binary writer by calling <xref:System.Xml.XmlDictionaryWriter.CreateBinaryWriter%2A>."},{"content":"It then passes the writer and the record object to the serializer when it calls <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent%2A&gt;</ph>.","pos":[3410,3571],"source":" It then passes the writer and the record object to the serializer when it calls <xref:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent%2A>."},{"content":"Finally, the sample flushes the writer and reports on the length of the streams.","pos":[3572,3652]},{"content":"When you run the sample, the original record and the deserialized record are displayed, followed by the comparison between the length of the text encoding and the binary encoding.","pos":[4099,4278]},{"content":"Press ENTER in the client window to shut down the client.","pos":[4279,4336]},{"pos":[4552,4588],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[4598,4797],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[4807,5016],"content":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"content":"To run the sample, start the client from the command prompt by typing client\\bin\\client.exe.","pos":[5026,5118]},{"pos":[5126,5258],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[14,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[0,53]},{"content":"Check for the following (default) directory before continuing.","pos":[54,116]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id=\"ph1\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[5312,5622],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[5623,5673]}]}