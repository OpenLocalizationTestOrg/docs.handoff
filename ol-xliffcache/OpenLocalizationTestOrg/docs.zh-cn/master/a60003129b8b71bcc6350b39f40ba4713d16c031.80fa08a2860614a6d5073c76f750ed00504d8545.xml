{"content":"---\ntitle: \"Reliable Messaging Protocol version 1.1 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0da47b82-f8eb-42da-8bfe-e56ce7ba6f59\ncaps.latest.revision: 13\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Reliable Messaging Protocol version 1.1\nThis topic covers [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] implementation details for the WS-ReliableMessaging February 2007 (version 1.1) protocol necessary for interoperation using the HTTP transport. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] follows the WS-ReliableMessaging specification with the constraints and clarifications explained in this topic. Note that the WS-ReliableMessaging version 1.1 protocol is implemented starting with the [!INCLUDE[netfx35_long](../../../../includes/netfx35-long-md.md)].  \n  \n The WS-ReliableMessaging February 2007 protocol is implemented in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] by the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>.  \n  \n For convenience, the topic uses the following roles:  \n  \n-   Initiator: The client that initiates WS-Reliable Message sequence creation.  \n  \n-   Responder: The service that receives the initiator's requests.  \n  \n This document uses the prefixes and namespaces in the following table.  \n  \n|Prefix|Namespace|  \n|-|-|  \n|wsrm|http://docs.oasis-open.org/ws-rx/wsrm/200702|  \n|netrm|http://schemas.microsoft.com/ws/2006/05/rm|  \n|s|http://www.w3.org/2003/05/soap-envelope|  \n|wsa|http://schemas.xmlsoap.org/ws/2005/08/addressing|  \n|wsse|http://docs.oasis-open.org/wss/2004/01/oasis-200401-wssecurity-secext-1.0.xsd|  \n|wsrmp|http://docs.oasis-open.org/ws-rx/wsrmp/200702|  \n|netrmp|http://schemas.microsoft.com/ws-rx/wsrmp/200702|  \n|wsp|(Either WS-Policy 1.2 or WS-Policy 1.5)|  \n  \n## Messaging  \n  \n### Sequence Creation  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] implements `CreateSequence` and `CreateSequenceResponse` messages to establish a reliable messaging sequence. The following constraints apply:  \n  \n-   B1101: The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator uses the same endpoint reference as the `CreateSequence` messageâ€™s `ReplyTo`, `AcksTo` and `Offer/Endpoint`.  \n  \n-   R1102: The `AcksTo`, `ReplyTo` and `Offer/Endpoint` endpoint references in the `CreateSequence` message must have address values with identical string representations such that they match the octet-wise.  \n  \n    -   The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder verifies that the URI portion of the `AcksTo`, `ReplyTo` and `Endpoint` endpoint references are identical before creating a sequence.  \n  \n-   R1103: The `AcksTo`, `ReplyTo` and `Offer/Endpoint` endpoint references in the `CreateSequence` message should have the same set of reference parameters.  \n  \n    -   [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not enforce, but assumes that reference parameters of the `AcksTo`, `ReplyTo` and `Offer/Endpoint` endpoint references on `CreateSequence` are identical and uses reference parameters from the `ReplyTo` endpoint reference for acknowledgements and converse sequence messages.  \n  \n-   B1104: The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator does not generate the optional `Expires` or `Offer/Expires` element in the `CreateSequence` message.  \n  \n-   B1105: When accessing the `CreateSequence` message, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder uses the `Expires` value in the `CreateSequence` element as the `Expires` value in the `CreateSequenceResponse` element. Otherwise, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder reads and ignores the `Expires` and `Offer/Expires` values.  \n  \n-   B1106: When accessing the `CreateSequenceResponse` message, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator reads the optional `Expires` value but does not use it.  \n  \n-   B1107: The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator and Responder always generate the optional `IncompleteSequenceBehavior` element in the `CreateSequence/Offer` and `CreateSequenceResponse` elements.  \n  \n-   B1108: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses only the `DiscardFollowingFirstGap` and `NoDiscard` values in the `IncompleteSequenceBehavior` element.  \n  \n    -   WS-ReliableMessaging utilizes the `Offer` mechanism to establish the two converse correlated sequences that form a session.  \n  \n-   B1109: If `CreateSequence` contains an `Offer` element, the one way [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder rejects the offered sequence by responding with a `CreateSequenceResponse` without an `Accept` element.  \n  \n-   B1110: If a Reliable Messaging Responder rejects the offered sequence, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator faults the newly established sequence.  \n  \n-   B1111: If `CreateSequence` does not contain an `Offer` element, the two-way [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder rejects the offered sequence by responding with a `CreateSequenceRefused` fault.  \n  \n-   R1112: When two converse sequences are established using the `Offer` mechanism, the `[address]` property of the `CreateSequenceResponse/Accept/AcksTo` endpoint reference must match the destination URI of the `CreateSequence` message byte for byte.  \n  \n-   R1113: When two converse sequences are established using the `Offer` mechanism, all messages on both sequences flowing from the Initiator to the Responder must be sent to the same endpoint reference.  \n  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses WS-ReliableMessaging to establish reliable sessions between the Initiator and the Responder. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] WS-ReliableMessaging implementation provides a reliable session for one-way, request-reply and full duplex messaging patterns. The WS-ReliableMessaging `Offer` mechanism on `CreateSequence` and `CreateSequenceResponse` lets you establish two correlated converse sequences and provides a session protocol that is suitable for all message endpoints. Because [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a security guarantee for such a session including end-to-end protection for session integrity, it is practical to ensure that messages intended for the same party arrive at the same destination. This also allows \"piggy-backing\" of sequence acknowledgements on application messages. Therefore, constraints R1102, R1112, and R1113 apply to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)].  \n  \n An example of a `CreateSequence` message.  \n  \n```  \n<s:Envelope>  \n  <s:Header>  \n    <wsa:Action s:mustUnderstand=\"1\">http://docs.oasis-open.org/ws-rx/wsrm/200702/CreateSequence</wsa:Action>  \n    <wsa:MessageID>urn:uuid:949cca61-8813-42ff-ab33-18d9e3fa82fa</wsa:MessageID>  \n    <wsa:ReplyTo>  \n        <wsa:Address>http://Business456.com/clientA</wsa:Address>   \n    </wsa:ReplyTo>  \n    <wsa:To s:mustUnderstand=\"1\">http://BusinessABC.com/serviceA</wsa:To>  \n  </s:Header>  \n  <s:Body>  \n    <wsrm:CreateSequence>  \n      <wsrm:AcksTo>  \n        <wsa:Address>http://Business456.com/clientA</wsa:Address>  \n      </wsrm:AcksTo>  \n      <wsrm:Offer>  \n        <wsrm:Identifier>urn:uuid:066b4730-fc82-458a-a5c1-210be4fb4e4e</wsrm:Identifier>  \n        <wsrm:Endpoint>  \n          <wsa:Address>http://Business456.com/clientA</wsa:Address>  \n        </wsrm:Endpoint>  \n        <wsrm:IncompleteSequenceBehavior>DiscardFollowingFirstGap</wsrm:IncompleteSequenceBehavior>  \n      </wsrm:Offer>  \n    </wsrm:CreateSequence>  \n  </s:Body>  \n</s:Envelope>  \n```  \n  \n An example of a `CreateSequenceResponse` message.  \n  \n```  \n<s:Envelope>  \n  <s:Header>  \n    <wsa:Action s:mustUnderstand=\"1\">http://docs.oasis-open.org/ws-rx/wsrm/200702/CreateSequenceResponse</wsa:Action>  \n    <wsa:RelatesTo>urn:uuid:949cca61-8813-42ff-ab33-18d9e3fa82fa</wsa:RelatesTo>  \n    <wsa:To s:mustUnderstand=\"1\">http://Business456.com/clientA</wsa:To>  \n  </s:Header>  \n  <s:Body>  \n    <wsrm:CreateSequenceResponse>  \n      <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n      <wsrm:IncompleteSequenceBehavior>DiscardFollowingFirstGap</wsrm:IncompleteSequenceBehavior>  \n      <wsrm:Accept>  \n        <wsrm:AcksTo>  \n          <wsa:Address>http://BusinessABC.com/serviceA</wsa:Address>  \n        </wsrm:AcksTo>  \n      </wsrm:Accept>  \n    </wsrm:CreateSequenceResponse>  \n  </s:Body>  \n</s:Envelope>  \n```  \n  \n### Closing a Sequence  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses the `CloseSequence` and `CloseSequenceResponse` messages for a Reliable Messaging source-initiated shutdown. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging destination does not initiate shutdown and the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging source does not support a Reliable Messaging destination-initiated shutdown. The following constraints apply:  \n  \n-   B1201: The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging source always sends a `CloseSequence` message to shut down the sequence.  \n  \n-   B1202: The Reliable Messaging source waits for acknowledgement of the full range of sequence messages before sending the `CloseSequence` message.  \n  \n-   B1203: The Reliable Messaging source always includes the optional `LastMsgNumber` element unless the sequence does not contain messages.  \n  \n-   R1204: The Reliable Messaging destination must not initiate shutdown by sending a `CloseSequence` message.  \n  \n-   B1205: Upon receiving a `CloseSequence` message, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging source considers the sequence incomplete and sends a fault.  \n  \n An example of a `CloseSequence` message.  \n  \n```  \n<s:Envelope>  \n  <s:Header>  \n    <wsa:Action s:mustUnderstand=\"1\">http://docs.oasis-open.org/ws-rx/wsrm/200702/CloseSequence</wsa:Action>  \n    <wsa:MessageID>urn:uuid:6ce1d4c3-e1c1-474f-a8c9-4210e37f7877</wsa:MessageID>  \n    <wsa:ReplyTo>  \n      <wsa:Address>http://Business456.com/clientA</wsa:Address>  \n    </wsa:ReplyTo>  \n    <wsa:To s:mustUnderstand=\"1\">http://BusinessABC.com/serviceA</wsa:To>  \n  </s:Header>  \n  <s:Body>  \n    <wsrm:CloseSequence>  \n      <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n      <wsrm:LastMsgNumber>30</wsrm:LastMsgNumber>  \n    </wsrm:CloseSequence>  \n  </s:Body>  \n</s:Envelope>  \nExample CloseSequenceResponse message:  \n<s:Envelope>  \n  <s:Header>  \n    <wsrm:SequenceAcknowledgement>  \n      <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n      <wsrm:AcknowledgementRange Lower=\"1\" Upper=\"30\"></wsrm:AcknowledgementRange>  \n      <wsrm:Final></wsrm:Final>  \n      <netrm:BufferRemaining>8</netrm:BufferRemaining>  \n    </wsrm:SequenceAcknowledgement>  \n    <wsa:Action s:mustUnderstand=\"1\">http://docs.oasis-open.org/ws-rx/wsrm/200702/CloseSequenceResponse</wsa:Action>  \n    <wsa:RelatesTo>urn:uuid:6ce1d4c3-e1c1-474f-a8c9-4210e37f7877</wsa:RelatesTo>  \n    <wsa:To s:mustUnderstand=\"1\">http://Business456.com/clientA</wsa:To>  \n  </s:Header>  \n  <s:Body>  \n    <wsrm:CloseSequenceResponse>  \n      <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n    </wsrm:CloseSequenceResponse>  \n  </s:Body>  \n</s:Envelope>  \n```  \n  \n### Sequence Termination  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] primarily uses the `TerminateSequence/TerminateSequenceResponse` handshake after completing the `CloseSequence/CloseSequenceResponse` handshake. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging destination does not initiate termination and the Reliable Messaging source does not support a Reliable Messaging destination-initiated termination. The following constraints apply:  \n  \n-   B1301: The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator only sends the `TerminateSequence` message after the successful completion of the `CloseSequence/CloseSequenceResponse` handshake.  \n  \n-   R1302: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] validates that the `LastMsgNumber` element is consistent across all `CloseSequence` and `TerminateSequence` messages for a given sequence. This means that `LastMsgNumber` is either not present on all `CloseSequence` and `TerminateSequence` messages, or it is present and identical on all `CloseSequence` and `TerminateSequence` messages.  \n  \n-   B1303: When receiving a `TerminateSequence` message after the `CloseSequence/CloseSequenceResponse` handshake, the Reliable Messaging destination responds with a `TerminateSequenceResponse` message. Because the Reliable Messaging source has the final acknowledgement before sending the `TerminateSequence` message, the Reliable Messaging destination knows without doubt that the sequence ends, and reclaims resources immediately.  \n  \n-   B1304: When receiving a `TerminateSequence` message prior to the `CloseSequence/CloseSequenceResponse` handshake, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging destination responds with a `TerminateSequenceResponse` message. If the Reliable Messaging destination determines that there are no inconsistencies in the sequence, the Reliable Messaging destination waits for an application destination-specified time before reclaiming resources, to allow the client the chance to receive the final acknowledgement. Otherwise, the Reliable Messaging destination reclaims resources immediately and indicates to the application destination that the sequence ends with doubt by raising the `Faulted` event.  \n  \n An example of a `TerminateSequence` message.  \n  \n```  \n<s:Envelope>  \n  <s:Header>  \n    <wsa:Action s:mustUnderstand=\"1\">http://docs.oasis-open.org/ws-rx/wsrm/200702/TerminateSequence</wsa:Action>  \n    <wsa:MessageID>urn:uuid:3597a398-4f3c-40f4-9335-8f1515572fdf</wsa:MessageID>  \n    <wsa:ReplyTo>  \n      <wsa:Address>http://Business456.com/clientA</wsa:Address>  \n    </wsa:ReplyTo>  \n    <wsa:To s:mustUnderstand=\"1\">http://BusinessABC.com/serviceA</wsa:To>  \n  </s:Header>  \n  <s:Body>  \n    <wsrm:TerminateSequence>  \n      <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n      <wsrm:LastMsgNumber>30</wsrm:LastMsgNumber>  \n      </wsrm:TerminateSequence>  \n  </s:Body>  \n</s:Envelope>  \nExample TerminateSequenceResponse message:  \n<s:Envelope>  \n  <s:Header>  \n    <wsrm:SequenceAcknowledgement>  \n      <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n      <wsrm:AcknowledgementRange Lower=\"1\" Upper=\"30\"></wsrm:AcknowledgementRange>  \n      <wsrm:Final></wsrm:Final>  \n      <netrm:BufferRemaining>8</netrm:BufferRemaining>  \n    </wsrm:SequenceAcknowledgement>  \n    <wsa:Action s:mustUnderstand=\"1\">http://docs.oasis-open.org/ws-rx/wsrm/200702/TerminateSequenceResponse</wsa:Action>  \n    <wsa:RelatesTo>urn:uuid:3597a398-4f3c-40f4-9335-8f1515572fdf</wsa:RelatesTo>  \n    <wsa:To s:mustUnderstand=\"1\">://Business456.com/clientA</wsa:To>  \n  </s:Header>  \n  <s:Body>  \n    <wsrm:TerminateSequenceResponse>  \n      <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n    </wsrm:TerminateSequenceResponse>  \n  </s:Body>  \n</s:Envelope>  \n```  \n  \n### Sequences  \n The following is a list of constraints that apply to sequences:  \n  \n-   B1401:[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates and accesses sequence numbers no higher than `xs:long`â€™s maximum inclusive value, 9223372036854775807.  \n  \n An example of a `Sequence` header.  \n  \n```  \n<wsrm:Sequence s:mustUnderstand=\"1\">  \n  <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n  <wsrm:MessageNumber>1</wsrm:MessageNumber>  \n</wsrm:Sequence>  \n```  \n  \n### Request Acknowledgement  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses the `AckRequested` header as a keep-alive mechanism.  \n  \n An example of an `AckRequested` header.  \n  \n```  \n<wsrm:AckRequested>  \n  <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n</wsrm:AckRequested>  \n```  \n  \n### SequenceAcknowledgement  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses a \"piggy-back\" mechanism for sequence acknowledgements provided in WS-Reliable Messaging. The following constraints apply:  \n  \n-   R1601: When two converse sequences are established using the `Offer` mechanism, the `SequenceAcknowledgement` header may be included in any application message transmitted to the intended recipient. The remote endpoint must be able to access a piggybacked `SequenceAcknowledgement` header.  \n  \n-   B1602: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not generate `SequenceAcknowledgement` headers that contain `Nack` elements. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] validates that each `Nack` element contains a sequence number, but otherwise ignores the `Nack` element and value.  \n  \n An example of a `SequenceAcknowledgement` header.  \n  \n```  \n<wsrm:SequenceAcknowledgement>  \n  <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n  <wsrm:AcknowledgementRange Lower=\"1\" Upper=\"1\"></wsrm:AcknowledgementRange>  \n</wsrm:SequenceAcknowledgement>  \n```  \n  \n### WS-ReliableMessaging Faults  \n The following is a list of constraints that apply to the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] implementation of WS-ReliableMessaging faults. The following constraints apply:  \n  \n-   B1701: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not generate `MessageNumberRollover` faults.  \n  \n-   B1702: Over SOAP 1.2, when the service endpoint reaches its connection limit and cannot process new connections, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates a nested `CreateSequenceRefused` fault subcode, `netrm:ConnectionLimitReached`, as shown in the following example.  \n  \n```  \n<s:Envelope>  \n  <s:Header>  \n    <wsa:Action>http://docs.oasis-open.org/ws-rx/wsrm/200702/fault</wsa:Action>  \n  </s:Header>  \n  <s:Body>  \n    <s:Fault>  \n      <s:Code>  \n        <s:Value>s:Receiver</s:Value>  \n        <s:Subcode>  \n          <s:Value>wsrm:CreateSequenceRefused</s:Value>  \n          <s:Subcode>  \n            <s:Value>netrm:ConnectionLimitReached</s:Value>  \n          </s:Subcode>  \n        </s:Subcode>  \n      </s:Code>  \n      <s:Reason>  \n        <s:Text xml:lang=\"en\">Server 'http://BusinessABC.com/serviceA' is too busy to process this request. Try again later.</s:Text>  \n      </s:Reason>  \n    </s:Fault>  \n  </s:Body>  \n</s:Envelope>  \n```  \n  \n### WS-Addressing Faults  \n Because WS-ReliableMessaging uses WS-Addressing, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] WS-ReliableMessaging implementation may generate and transmit WS-Addressing faults. This section covers the WS-Addressing faults that [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] explicitly generates and transmits at the WS-ReliableMessaging layer:  \n  \n-   B1801:[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates and transmits the `Message Addressing Header Required` fault when one of the following is true:  \n  \n    -   A `CreateSequence`, `CloseSequence` or `TerminateSequence` message is missing a `MessageId` header.  \n  \n    -   A `CreateSequence`, `CloseSequence` or `TerminateSequence` message is missing a `ReplyTo` header.  \n  \n    -   A `CreateSequenceResponse`, `CloseSequenceResponse`, or `TerminateSequenceResponse` message is missing a `RelatesTo` header.  \n  \n-   B1802:[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates and transmits the `Endpoint Unavailable` fault to indicate there is no endpoint listening that can process the sequence based on examination of the addressing headers in the `CreateSequence` message.  \n  \n## Protocol Composition  \n  \n### Composition with WS-Addressing  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] supports two versions of WS-Addressing: WS-Addressing 2004/08 [WS-ADDR] and W3C WS-Addressing 1.0 Recommendations [WS-ADDR-CORE] and [WS-ADDR-SOAP].  \n  \n While the WS-ReliableMessaging specification mentions only WS-Addressing 2004/08, it does not restrict the WS-Addressing version to be used. The following is a list of constraints that apply to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]:  \n  \n-   R2101: Both WS-Addressing 2004/08 and WS-Addressing 1.0 can be used with WS-Reliable Messaging.  \n  \n-   R2102: A single version of WS-Addressing must be used throughout a given WS-ReliableMessaging sequence or a pair of converse sequences correlated by using the `Offer` mechanism.  \n  \n### Composition with SOAP  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] supports the use of both SOAP 1.1 and SOAP 1.2 with WS-Reliable Messaging.  \n  \n### Composition with WS-Security and WS-SecureConversation  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides protection for WS-ReliableMessaging sequences by using secure Transport (HTTPS), composition with WS-Security, and composition with WS-Secure Conversation. The WS-ReliableMessaging 1.1 protocol, WS-Security 1.1 and WS-Secure Conversation 1.3 protocol should be used together. The following is a list of constraints that apply to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]:  \n  \n-   R2301: To protect the integrity of a WS-ReliableMessaging sequence in addition to the integrity and confidentiality of individual messages, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] requires that WS-Secure Conversation must be used.  \n  \n-   R2302:AWS-Secure Conversation session must be established prior to establishing WS-ReliableMessaging sequence(s).  \n  \n-   R2303: If the WS-ReliableMessaging sequence lifetime exceeds the WS-Secure Conversation sessionâ€™s lifetime, the `SecurityContextToken` established by using WS-Secure Conversation must be renewed by using the corresponding WS-Secure Conversation Renewal binding.  \n  \n-   B2304:WS-ReliableMessaging sequence or a pair of correlated converse sequences are always bound to a single WS-SecureConversation session.  \n  \n-   R2305: When composed with WS-Secure Conversation, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] responder requires that the `CreateSequence` message contain the `wsse:SecurityTokenReference` element and the `wsrm:UsesSequenceSTR` header.  \n  \n An example of a `UsesSequenceSTR` header.  \n  \n```  \n<wsrm:UsesSequenceSTR></wsrm:UsesSequenceSTR>  \n```  \n  \n### Composition with SSL/TLS sessions  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not support composition with SSL/TLS sessions:  \n  \n-   B2401: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not generate the `wsrm:UsesSequenceSSL` header.  \n  \n-   R2402: A Reliable Messaging Initiator must not send a `CreateSequence` message with a `wsrm:UsesSequenceSSL` header to a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder.  \n  \n### Composition with WS-Policy  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] supports two versions of WS-Policy: WS-Policy 1.2 and WS-Policy 1.5.  \n  \n## WS-ReliableMessaging WS-Policy Assertion  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses WS-ReliableMessaging WS-Policy Assertion `wsrm:RMAssertion` to describe endpoints capabilities. The following is a list of constraints that apply to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]:  \n  \n-   B3001: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] attaches `wsrmn:RMAssertion` WS-Policy Assertion to `wsdl:binding` elements. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] supports both attachments to `wsdl:binding` and `wsdl:port` elements.  \n  \n-   B3002: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] never generates the `wsp:Optional` tag.  \n  \n-   B3003: When accessing the `wsrmp:RMAssertion` WS-Policy Assertion, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ignores the `wsp:Optional` tag and treats the WS-RM policy as mandatory.  \n  \n-   R3004: Because [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not compose with SSL/TLS sessions, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not accept policy that specifies `wsrmp:SequenceTransportSecurity`.  \n  \n-   B3005: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] always generates the `wsrmp:DeliveryAssurance` element.  \n  \n-   B3006: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] always specifies the `wsrmp:ExactlyOnce` delivery assurance.  \n  \n-   B3007: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates and reads the following properties of the WS-ReliableMessaging assertion and provides control over them on the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]`ReliableSessionBindingElement`:  \n  \n    -   `netrmp:InactivityTimeout`  \n  \n    -   `netrmp:AcknowledgementInterval`  \n  \n     An example of a `RMAssertion`.  \n  \n    ```  \n    <wsrmp:RMAssertion>  \n      <wsp:Policy>  \n        <wsrmp:SequenceSTR/>  \n        <wsrmp:DeliveryAssurance>  \n          <wsp:Policy>  \n            <wsrmp:ExactlyOnce/>  \n            <wsrmp:InOrder/>  \n          </wsp:Policy>  \n        </wsrmp:DeliveryAssurance>  \n      </wsp:Policy>  \n      <netrmp:InactivityTimeout Milliseconds=\"600000\"/>  \n      <netrmp:AcknowledgementInterval Milliseconds=\"200\"/>  \n    </wsrmp:RMAssertion>  \n    ```  \n  \n## Flow Control WS-ReliableMessaging Extension  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses WS-ReliableMessaging extensibility to provide optional additional tighter control over sequence message flow.  \n  \n Flow control is enabled by setting the `ReliableSessionBindingElement`â€™s `FlowControlEnabled``boolean` property to `true`. The following is a list of constraints that apply to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]:  \n  \n-   B4001: When Reliable Messaging Flow Control is enabled, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates a `netrm:BufferRemaining` element in the element extensibility of the `SequenceAcknowledgement` header, as shown in the following example.  \n  \n    ```  \n    <wsrm:SequenceAcknowledgement>  \n      <wsrm:Identifier>urn:uuid:656652b8-9af2-4e94-9d07-2dc21c05ed27</wsrm:Identifier>  \n      <wsrm:AcknowledgementRange Upper=\"1\" Lower=\"1\"/>             \n      <netrm:BufferRemaining>8</netrm:BufferRemaining>  \n    </wsrm:SequenceAcknowledgement>  \n    ```  \n  \n-   B4002: Even when Reliable Messaging Flow Control is enabled, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not require a `netrm:BufferRemaining` element in the `SequenceAcknowledgement` header.  \n  \n-   B4003: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging Destination uses `netrm:BufferRemaining` to indicate how many new messages it can buffer.  \n  \n-   B4004:When Reliable Messaging Flow Control is enabled, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging Source uses the value of `netrm:BufferRemaining` to throttle message transmission.  \n  \n-   B4005: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates `netrm:BufferRemaining` integer values between 0 and 4096 inclusive, and reads integer values between 0 and `xs:int`â€™s `maxInclusive` value 214748364 inclusive.  \n  \n## Message Exchange Patterns  \n This section describes [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]'s behavior when WS-ReliableMessaging is used for different Message Exchange Patterns. For each Message Exchange Pattern the following two deployments scenarios are considered:  \n  \n-   Non-Addressable Initiator: Initiator is behind a firewall; Responder can deliver messages to the Initiator only on HTTP responses.  \n  \n-   Addressable Initiator: Initiator and Responder both can be sent HTTP requests; in other words, two converse HTTP connections can be established.  \n  \n### One-way, Non-addressable Initiator  \n  \n#### Binding  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a one-way message exchange pattern using one sequence over one HTTP channel. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses HTTP requests to transmit all messages from the Initiator to the Responder and HTTP responses to transmit all messages from the Responder to the Initiator.  \n  \n#### CreateSequence Exchange  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CreateSequence` message with no `Offer` element on an HTTP request and expects the `CreateSequenceResponse` message on the HTTP response. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder creates a sequence and transmits the `CreateSequenceResponse` message with no `Accept` element on the HTTP response.  \n  \n#### SequenceAcknowledgement  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator processes acknowledgements on the reply of all messages except the `CreateSequence` message and fault messages. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder always transmits a stand-alone acknowledgement on the HTTP response to all sequence and `AckRequested` messages.  \n  \n#### CloseSequence Exchange  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CloseSequence` message on an HTTP request and expects the `CreateSequenceResponse` message on the HTTP response. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder transmits the `CloseSequenceResponse` message on the HTTP response.  \n  \n#### TerminateSequence Exchange  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `TerminateSequence` message on an HTTP request and expects the `TerminateSequenceResponse` message on the HTTP response. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder transmits the `TerminateSequenceResponse` message on the HTTP response.  \n  \n### One Way, Addressable Initiator  \n  \n#### Binding  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a one-way message exchange pattern using one sequence over one inbound and one outbound HTTP channel. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses the HTTP requests to transmit all messages. All HTTP responses have an empty body and HTTP 202 status code.  \n  \n#### CreateSequence Exchange  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CreateSequence` message with no `Offer` element on an HTTP request. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder creates a sequence and transmits the `CreateSequenceResponse` message with no `Accept` element on an HTTP request.  \n  \n### Duplex, Addressable Initiator  \n  \n#### Binding  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a fully-asynchronous, two-way message exchange pattern using two sequences over one inbound and one outbound HTTP channel. This message exchange pattern can be mixed with the `Request/Reply`, `Addressable` Initiator message exchange pattern in a limited way. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses HTTP requests to transmit all messages. All HTTP responses have an empty body and HTTP 202 status code.  \n  \n#### CreateSequence Exchange  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CreateSequence` message with an `Offer` element on an HTTP request. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder ensures that the `CreateSequence` has an `Offer` element, then creates a sequence and transmits the `CreateSequenceResponse` message with an `Accept` element.  \n  \n#### Sequence Lifetime  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] treats the two sequences as one fully-duplex session.  \n  \n Upon generating a fault that faults one sequence, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] expects the remote endpoint to fault both sequences. Upon reading a fault that faults one sequence, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] faults both sequences.  \n  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] can close its outbound sequence and continue to process messages on its inbound sequence. Conversely, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] can process the close of the inbound sequence and continue to send messages on its outbound sequence.  \n  \n### Request-Reply and One-Way, Non-Addressable Initiator  \n  \n#### Binding  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a one-way and request-reply message exchange pattern using two sequences over one HTTP channel. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses HTTP requests to transmit all messages from the Initiator to the Responder and HTTP responses to transmit all messages from the Responder to the Initiator.  \n  \n#### CreateSequence Exchange  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CreateSequence` message with an `Offer` element on an HTTP request and expects the `CreateSequenceResponse` message on the HTTP response. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder creates a sequence and transmits the `CreateSequenceResponse` message with an `Accept` element on the HTTP response.  \n  \n#### One-way Message  \n To complete a one-way message exchange successfully, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a request sequence message on the HTTP request and receives a standalone `SequenceAcknowledgement` message on the HTTP response. The `SequenceAcknowledgement` must acknowledge the message transmitted.  \n  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder may reply to the request with an acknowledgement, a fault, or a response with an empty body and HTTP 202 status code.  \n  \n#### Two Way Messages  \n To complete a two way message exchange protocol successfully, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a request sequence message on the HTTP request and receives a reply sequence message on the HTTP response. The response must carry a `SequenceAcknowledgement` acknowledging the request sequence message transmitted.  \n  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder may reply to the request with an application reply, a fault or a response with an empty body and HTTP 202 status code.  \n  \n Because of the presence of one-way messages and the timing of application replies, the request sequence messageâ€™s sequence number and the response messageâ€™s sequence number have no correlation.  \n  \n#### Retrying Replies  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] relies on HTTP request-reply correlation for two-way message exchange protocol correlation. Because of this, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator does not stop retrying a request sequence message when the request sequence message is acknowledged but rather when the HTTP response carries a `SequenceAcknowledgement`, application reply, or fault. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder retries replies on the HTTP response of the request to which the reply is correlated.  \n  \n#### CloseSequence Exchange  \n After receiving all reply sequence messages and acknowledgements for all one way request sequence messages, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CloseSequence` message for the request sequence on an HTTP request and expects the `CloseSequenceResponse` on the HTTP response.  \n  \n Closing the request sequence implicitly closes the reply sequence. This means the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator includes the reply sequenceâ€™s Final `SequenceAcknowledgement` on the `CloseSequence` message and the reply sequence does not have a `CloseSequence` exchange.  \n  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder ensures all replies are acknowledged and transmits the `CloseSequenceResponse` message on the HTTP response.  \n  \n#### TerminateSequence Exchange  \n After receiving the `CloseSequenceResponse` message, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `TerminateSequence` message for the request sequence on an HTTP request and expects the `TerminateSequenceResponse` on the HTTP response.  \n  \n Like the `CloseSequence` exchange, terminating the request sequence implicitly terminates the reply sequence. This means the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator includes the reply sequenceâ€™s final `SequenceAcknowledgement` on the `TerminateSequence` message and the reply sequence does not have a `TerminateSequence` exchange.  \n  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder transmits the `TerminateSequenceResponse` message on the HTTP response.  \n  \n### Request/Reply, Addressable Initiator  \n  \n#### Binding  \n [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a request-reply message exchange pattern using two sequences over one inbound and one outbound HTTP channel. This message exchange pattern can be mixed with the `Duplex, Addressable` Initiator message exchange pattern in a limited way. [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses the HTTP requests to transmit all messages. All HTTP responses have an empty body and HTTP 202 status code.  \n  \n#### CreateSequence Exchange  \n The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CreateSequence` message with an `Offer` element on an HTTP request. The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder ensures that the `CreateSequence` has an `Offer` element then creates a sequence and transmits the `CreateSequenceResponse` message with an `Accept` element.  \n  \n#### Request/Reply Correlation  \n The following applies to all correlated requests and replies:  \n  \n-   [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ensures all application request messages bear a `ReplyTo` endpoint reference and a `MessageId`.  \n  \n-   [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] applies the local endpoint reference as each application request messageâ€™s `ReplyTo`. The local endpoint reference is the `CreateSequence` messageâ€™s `ReplyTo` for the Initiator and the `CreateSequence` messageâ€™s `To` for the Responder.  \n  \n-   [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ensures that incoming request messages bear a `MessageId` and a `ReplyTo`.  \n  \n-   [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ensures the `ReplyTo` endpoint referenceâ€™s URI of all application request messages match the local endpoint reference as defined earlier.  \n  \n-   [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ensures that all replies bear the correct `RelatesTo` and `To` headers following `wsa` request/reply correlation rules.","nodes":[{"pos":[4,360],"embed":true,"restype":"x-metadata","content":"title: \"Reliable Messaging Protocol version 1.1 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0da47b82-f8eb-42da-8bfe-e56ce7ba6f59\ncaps.latest.revision: 13\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"Reliable Messaging Protocol version 1.1 | Microsoft Docs","nodes":[{"pos":[0,56],"content":"Reliable Messaging Protocol version 1.1 | Microsoft Docs","nodes":[{"content":"Reliable Messaging Protocol version 1.1 | Microsoft Docs","pos":[0,56]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[367,406],"content":"Reliable Messaging Protocol version 1.1","linkify":"Reliable Messaging Protocol version 1.1","nodes":[{"content":"Reliable Messaging Protocol version 1.1","pos":[0,39]}]},{"content":"This topic covers <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> implementation details for the WS-ReliableMessaging February 2007 (version 1.1) protocol necessary for interoperation using the HTTP transport.","pos":[407,624],"source":"This topic covers [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] implementation details for the WS-ReliableMessaging February 2007 (version 1.1) protocol necessary for interoperation using the HTTP transport."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> follows the WS-ReliableMessaging specification with the constraints and clarifications explained in this topic.","pos":[625,792],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] follows the WS-ReliableMessaging specification with the constraints and clarifications explained in this topic."},{"content":"Note that the WS-ReliableMessaging version 1.1 protocol is implemented starting with the <ph id=\"ph1\">[!INCLUDE[netfx35_long](../../../../includes/netfx35-long-md.md)]</ph>.","pos":[793,948],"source":" Note that the WS-ReliableMessaging version 1.1 protocol is implemented starting with the [!INCLUDE[netfx35_long](../../../../includes/netfx35-long-md.md)]."},{"pos":[955,1150],"content":"The WS-ReliableMessaging February 2007 protocol is implemented in <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> by the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement&gt;</ph>.","source":"The WS-ReliableMessaging February 2007 protocol is implemented in [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] by the <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>."},{"content":"For convenience, the topic uses the following roles:","pos":[1157,1209]},{"content":"Initiator: The client that initiates WS-Reliable Message sequence creation.","pos":[1219,1294]},{"content":"Responder: The service that receives the initiator's requests.","pos":[1304,1366]},{"content":"This document uses the prefixes and namespaces in the following table.","pos":[1373,1443]},{"content":"Prefix","pos":[1450,1456]},{"content":"Namespace","pos":[1457,1466]},{"content":"wsrm","pos":[1479,1483]},{"content":"http://docs.oasis-open.org/ws-rx/wsrm/200702","pos":[1484,1528]},{"content":"netrm","pos":[1533,1538]},{"content":"http://schemas.microsoft.com/ws/2006/05/rm","pos":[1539,1581]},{"content":"s","pos":[1586,1587]},{"content":"http://www.w3.org/2003/05/soap-envelope","pos":[1588,1627]},{"content":"wsa","pos":[1632,1635]},{"content":"http://schemas.xmlsoap.org/ws/2005/08/addressing","pos":[1636,1684]},{"content":"wsse","pos":[1689,1693]},{"content":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wssecurity-secext-1.0.xsd","pos":[1694,1771]},{"content":"wsrmp","pos":[1776,1781]},{"content":"http://docs.oasis-open.org/ws-rx/wsrmp/200702","pos":[1782,1827]},{"content":"netrmp","pos":[1832,1838]},{"content":"http://schemas.microsoft.com/ws-rx/wsrmp/200702","pos":[1839,1886]},{"content":"wsp","pos":[1891,1894]},{"content":"(Either WS-Policy 1.2 or WS-Policy 1.5)","pos":[1895,1934]},{"pos":[1944,1953],"content":"Messaging","linkify":"Messaging","nodes":[{"content":"Messaging","pos":[0,9]}]},{"pos":[1963,1980],"content":"Sequence Creation","linkify":"Sequence Creation","nodes":[{"content":"Sequence Creation","pos":[0,17]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implements <ph id=\"ph2\">`CreateSequence`</ph> and <ph id=\"ph3\">`CreateSequenceResponse`</ph> messages to establish a reliable messaging sequence.","pos":[1984,2149],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] implements `CreateSequence` and `CreateSequenceResponse` messages to establish a reliable messaging sequence."},{"content":"The following constraints apply:","pos":[2150,2182]},{"pos":[2192,2377],"content":"B1101: The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator uses the same endpoint reference as the <ph id=\"ph2\">`CreateSequence`</ph> messageâ€™s <ph id=\"ph3\">`ReplyTo`</ph>, <ph id=\"ph4\">`AcksTo`</ph> and <ph id=\"ph5\">`Offer/Endpoint`</ph>.","source":"B1101: The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator uses the same endpoint reference as the `CreateSequence` messageâ€™s `ReplyTo`, `AcksTo` and `Offer/Endpoint`."},{"pos":[2387,2590],"content":"R1102: The <ph id=\"ph1\">`AcksTo`</ph>, <ph id=\"ph2\">`ReplyTo`</ph> and <ph id=\"ph3\">`Offer/Endpoint`</ph> endpoint references in the <ph id=\"ph4\">`CreateSequence`</ph> message must have address values with identical string representations such that they match the octet-wise.","source":"R1102: The `AcksTo`, `ReplyTo` and `Offer/Endpoint` endpoint references in the `CreateSequence` message must have address values with identical string representations such that they match the octet-wise."},{"pos":[2604,2807],"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder verifies that the URI portion of the <ph id=\"ph2\">`AcksTo`</ph>, <ph id=\"ph3\">`ReplyTo`</ph> and <ph id=\"ph4\">`Endpoint`</ph> endpoint references are identical before creating a sequence.","source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder verifies that the URI portion of the `AcksTo`, `ReplyTo` and `Endpoint` endpoint references are identical before creating a sequence."},{"pos":[2817,2970],"content":"R1103: The <ph id=\"ph1\">`AcksTo`</ph>, <ph id=\"ph2\">`ReplyTo`</ph> and <ph id=\"ph3\">`Offer/Endpoint`</ph> endpoint references in the <ph id=\"ph4\">`CreateSequence`</ph> message should have the same set of reference parameters.","source":"R1103: The `AcksTo`, `ReplyTo` and `Offer/Endpoint` endpoint references in the `CreateSequence` message should have the same set of reference parameters."},{"pos":[2984,3318],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not enforce, but assumes that reference parameters of the <ph id=\"ph2\">`AcksTo`</ph>, <ph id=\"ph3\">`ReplyTo`</ph> and <ph id=\"ph4\">`Offer/Endpoint`</ph> endpoint references on <ph id=\"ph5\">`CreateSequence`</ph> are identical and uses reference parameters from the <ph id=\"ph6\">`ReplyTo`</ph> endpoint reference for acknowledgements and converse sequence messages.","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not enforce, but assumes that reference parameters of the `AcksTo`, `ReplyTo` and `Offer/Endpoint` endpoint references on `CreateSequence` are identical and uses reference parameters from the `ReplyTo` endpoint reference for acknowledgements and converse sequence messages."},{"pos":[3328,3505],"content":"B1104: The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator does not generate the optional <ph id=\"ph2\">`Expires`</ph> or <ph id=\"ph3\">`Offer/Expires`</ph> element in the <ph id=\"ph4\">`CreateSequence`</ph> message.","source":"B1104: The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator does not generate the optional `Expires` or `Offer/Expires` element in the `CreateSequence` message."},{"content":"B1105: When accessing the <ph id=\"ph1\">`CreateSequence`</ph> message, the <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder uses the <ph id=\"ph3\">`Expires`</ph> value in the <ph id=\"ph4\">`CreateSequence`</ph> element as the <ph id=\"ph5\">`Expires`</ph> value in the <ph id=\"ph6\">`CreateSequenceResponse`</ph> element.","pos":[3515,3757],"source":"B1105: When accessing the `CreateSequence` message, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder uses the `Expires` value in the `CreateSequence` element as the `Expires` value in the `CreateSequenceResponse` element."},{"content":"Otherwise, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder reads and ignores the <ph id=\"ph2\">`Expires`</ph> and <ph id=\"ph3\">`Offer/Expires`</ph> values.","pos":[3758,3898],"source":" Otherwise, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder reads and ignores the `Expires` and `Offer/Expires` values."},{"pos":[3908,4093],"content":"B1106: When accessing the <ph id=\"ph1\">`CreateSequenceResponse`</ph> message, the <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator reads the optional <ph id=\"ph3\">`Expires`</ph> value but does not use it.","source":"B1106: When accessing the `CreateSequenceResponse` message, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator reads the optional `Expires` value but does not use it."},{"pos":[4103,4328],"content":"B1107: The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator and Responder always generate the optional <ph id=\"ph2\">`IncompleteSequenceBehavior`</ph> element in the <ph id=\"ph3\">`CreateSequence/Offer`</ph> and <ph id=\"ph4\">`CreateSequenceResponse`</ph> elements.","source":"B1107: The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator and Responder always generate the optional `IncompleteSequenceBehavior` element in the `CreateSequence/Offer` and `CreateSequenceResponse` elements."},{"pos":[4338,4509],"content":"B1108: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses only the <ph id=\"ph2\">`DiscardFollowingFirstGap`</ph> and <ph id=\"ph3\">`NoDiscard`</ph> values in the <ph id=\"ph4\">`IncompleteSequenceBehavior`</ph> element.","source":"B1108: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses only the `DiscardFollowingFirstGap` and `NoDiscard` values in the `IncompleteSequenceBehavior` element."},{"pos":[4523,4646],"content":"WS-ReliableMessaging utilizes the <ph id=\"ph1\">`Offer`</ph> mechanism to establish the two converse correlated sequences that form a session.","source":"WS-ReliableMessaging utilizes the `Offer` mechanism to establish the two converse correlated sequences that form a session."},{"pos":[4656,4893],"content":"B1109: If <ph id=\"ph1\">`CreateSequence`</ph> contains an <ph id=\"ph2\">`Offer`</ph> element, the one way <ph id=\"ph3\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder rejects the offered sequence by responding with a <ph id=\"ph4\">`CreateSequenceResponse`</ph> without an <ph id=\"ph5\">`Accept`</ph> element.","source":"B1109: If `CreateSequence` contains an `Offer` element, the one way [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder rejects the offered sequence by responding with a `CreateSequenceResponse` without an `Accept` element."},{"pos":[4903,5082],"content":"B1110: If a Reliable Messaging Responder rejects the offered sequence, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator faults the newly established sequence.","source":"B1110: If a Reliable Messaging Responder rejects the offered sequence, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator faults the newly established sequence."},{"pos":[5092,5314],"content":"B1111: If <ph id=\"ph1\">`CreateSequence`</ph> does not contain an <ph id=\"ph2\">`Offer`</ph> element, the two-way <ph id=\"ph3\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder rejects the offered sequence by responding with a <ph id=\"ph4\">`CreateSequenceRefused`</ph> fault.","source":"B1111: If `CreateSequence` does not contain an `Offer` element, the two-way [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder rejects the offered sequence by responding with a `CreateSequenceRefused` fault."},{"pos":[5324,5571],"content":"R1112: When two converse sequences are established using the <ph id=\"ph1\">`Offer`</ph> mechanism, the <ph id=\"ph2\">`[address]`</ph> property of the <ph id=\"ph3\">`CreateSequenceResponse/Accept/AcksTo`</ph> endpoint reference must match the destination URI of the <ph id=\"ph4\">`CreateSequence`</ph> message byte for byte.","source":"R1112: When two converse sequences are established using the `Offer` mechanism, the `[address]` property of the `CreateSequenceResponse/Accept/AcksTo` endpoint reference must match the destination URI of the `CreateSequence` message byte for byte."},{"pos":[5581,5780],"content":"R1113: When two converse sequences are established using the <ph id=\"ph1\">`Offer`</ph> mechanism, all messages on both sequences flowing from the Initiator to the Responder must be sent to the same endpoint reference.","source":"R1113: When two converse sequences are established using the `Offer` mechanism, all messages on both sequences flowing from the Initiator to the Responder must be sent to the same endpoint reference."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses WS-ReliableMessaging to establish reliable sessions between the Initiator and the Responder.","pos":[5787,5940],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses WS-ReliableMessaging to establish reliable sessions between the Initiator and the Responder."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WS-ReliableMessaging implementation provides a reliable session for one-way, request-reply and full duplex messaging patterns.","pos":[5941,6127],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] WS-ReliableMessaging implementation provides a reliable session for one-way, request-reply and full duplex messaging patterns."},{"content":"The WS-ReliableMessaging <ph id=\"ph1\">`Offer`</ph> mechanism on <ph id=\"ph2\">`CreateSequence`</ph> and <ph id=\"ph3\">`CreateSequenceResponse`</ph> lets you establish two correlated converse sequences and provides a session protocol that is suitable for all message endpoints.","pos":[6128,6348],"source":" The WS-ReliableMessaging `Offer` mechanism on `CreateSequence` and `CreateSequenceResponse` lets you establish two correlated converse sequences and provides a session protocol that is suitable for all message endpoints."},{"content":"Because <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a security guarantee for such a session including end-to-end protection for session integrity, it is practical to ensure that messages intended for the same party arrive at the same destination.","pos":[6349,6616],"source":" Because [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a security guarantee for such a session including end-to-end protection for session integrity, it is practical to ensure that messages intended for the same party arrive at the same destination."},{"content":"This also allows \"piggy-backing\" of sequence acknowledgements on application messages.","pos":[6617,6703]},{"content":"Therefore, constraints R1102, R1112, and R1113 apply to <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.","pos":[6704,6816],"source":" Therefore, constraints R1102, R1112, and R1113 apply to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]."},{"pos":[6823,6864],"content":"An example of a <ph id=\"ph1\">`CreateSequence`</ph> message.","source":"An example of a `CreateSequence` message."},{"pos":[7885,7934],"content":"An example of a <ph id=\"ph1\">`CreateSequenceResponse`</ph> message.","source":"An example of a `CreateSequenceResponse` message."},{"pos":[8753,8771],"content":"Closing a Sequence","linkify":"Closing a Sequence","nodes":[{"content":"Closing a Sequence","pos":[0,18]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the <ph id=\"ph2\">`CloseSequence`</ph> and <ph id=\"ph3\">`CloseSequenceResponse`</ph> messages for a Reliable Messaging source-initiated shutdown.","pos":[8775,8944],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses the `CloseSequence` and `CloseSequenceResponse` messages for a Reliable Messaging source-initiated shutdown."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging destination does not initiate shutdown and the <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging source does not support a Reliable Messaging destination-initiated shutdown.","pos":[8945,9222],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging destination does not initiate shutdown and the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging source does not support a Reliable Messaging destination-initiated shutdown."},{"content":"The following constraints apply:","pos":[9223,9255]},{"pos":[9265,9423],"content":"B1201: The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging source always sends a <ph id=\"ph2\">`CloseSequence`</ph> message to shut down the sequence.","source":"B1201: The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging source always sends a `CloseSequence` message to shut down the sequence."},{"pos":[9433,9578],"content":"B1202: The Reliable Messaging source waits for acknowledgement of the full range of sequence messages before sending the <ph id=\"ph1\">`CloseSequence`</ph> message.","source":"B1202: The Reliable Messaging source waits for acknowledgement of the full range of sequence messages before sending the `CloseSequence` message."},{"pos":[9588,9724],"content":"B1203: The Reliable Messaging source always includes the optional <ph id=\"ph1\">`LastMsgNumber`</ph> element unless the sequence does not contain messages.","source":"B1203: The Reliable Messaging source always includes the optional `LastMsgNumber` element unless the sequence does not contain messages."},{"pos":[9734,9840],"content":"R1204: The Reliable Messaging destination must not initiate shutdown by sending a <ph id=\"ph1\">`CloseSequence`</ph> message.","source":"R1204: The Reliable Messaging destination must not initiate shutdown by sending a `CloseSequence` message."},{"pos":[9850,10037],"content":"B1205: Upon receiving a <ph id=\"ph1\">`CloseSequence`</ph> message, the <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging source considers the sequence incomplete and sends a fault.","source":"B1205: Upon receiving a `CloseSequence` message, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging source considers the sequence incomplete and sends a fault."},{"pos":[10044,10084],"content":"An example of a <ph id=\"ph1\">`CloseSequence`</ph> message.","source":"An example of a `CloseSequence` message."},{"pos":[11678,11698],"content":"Sequence Termination","linkify":"Sequence Termination","nodes":[{"content":"Sequence Termination","pos":[0,20]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> primarily uses the <ph id=\"ph2\">`TerminateSequence/TerminateSequenceResponse`</ph> handshake after completing the <ph id=\"ph3\">`CloseSequence/CloseSequenceResponse`</ph> handshake.","pos":[11702,11902],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] primarily uses the `TerminateSequence/TerminateSequenceResponse` handshake after completing the `CloseSequence/CloseSequenceResponse` handshake."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging destination does not initiate termination and the Reliable Messaging source does not support a Reliable Messaging destination-initiated termination.","pos":[11903,12130],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging destination does not initiate termination and the Reliable Messaging source does not support a Reliable Messaging destination-initiated termination."},{"content":"The following constraints apply:","pos":[12131,12163]},{"pos":[12173,12380],"content":"B1301: The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator only sends the <ph id=\"ph2\">`TerminateSequence`</ph> message after the successful completion of the <ph id=\"ph3\">`CloseSequence/CloseSequenceResponse`</ph> handshake.","source":"B1301: The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator only sends the `TerminateSequence` message after the successful completion of the `CloseSequence/CloseSequenceResponse` handshake."},{"content":"R1302: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> validates that the <ph id=\"ph2\">`LastMsgNumber`</ph> element is consistent across all <ph id=\"ph3\">`CloseSequence`</ph> and <ph id=\"ph4\">`TerminateSequence`</ph> messages for a given sequence.","pos":[12390,12591],"source":"R1302: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] validates that the `LastMsgNumber` element is consistent across all `CloseSequence` and `TerminateSequence` messages for a given sequence."},{"content":"This means that <ph id=\"ph1\">`LastMsgNumber`</ph> is either not present on all <ph id=\"ph2\">`CloseSequence`</ph> and <ph id=\"ph3\">`TerminateSequence`</ph> messages, or it is present and identical on all <ph id=\"ph4\">`CloseSequence`</ph> and <ph id=\"ph5\">`TerminateSequence`</ph> messages.","pos":[12592,12790],"source":" This means that `LastMsgNumber` is either not present on all `CloseSequence` and `TerminateSequence` messages, or it is present and identical on all `CloseSequence` and `TerminateSequence` messages."},{"content":"B1303: When receiving a <ph id=\"ph1\">`TerminateSequence`</ph> message after the <ph id=\"ph2\">`CloseSequence/CloseSequenceResponse`</ph> handshake, the Reliable Messaging destination responds with a <ph id=\"ph3\">`TerminateSequenceResponse`</ph> message.","pos":[12800,12998],"source":"B1303: When receiving a `TerminateSequence` message after the `CloseSequence/CloseSequenceResponse` handshake, the Reliable Messaging destination responds with a `TerminateSequenceResponse` message."},{"content":"Because the Reliable Messaging source has the final acknowledgement before sending the <ph id=\"ph1\">`TerminateSequence`</ph> message, the Reliable Messaging destination knows without doubt that the sequence ends, and reclaims resources immediately.","pos":[12999,13229],"source":" Because the Reliable Messaging source has the final acknowledgement before sending the `TerminateSequence` message, the Reliable Messaging destination knows without doubt that the sequence ends, and reclaims resources immediately."},{"content":"B1304: When receiving a <ph id=\"ph1\">`TerminateSequence`</ph> message prior to the <ph id=\"ph2\">`CloseSequence/CloseSequenceResponse`</ph> handshake, the <ph id=\"ph3\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging destination responds with a <ph id=\"ph4\">`TerminateSequenceResponse`</ph> message.","pos":[13239,13496],"source":"B1304: When receiving a `TerminateSequence` message prior to the `CloseSequence/CloseSequenceResponse` handshake, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging destination responds with a `TerminateSequenceResponse` message."},{"content":"If the Reliable Messaging destination determines that there are no inconsistencies in the sequence, the Reliable Messaging destination waits for an application destination-specified time before reclaiming resources, to allow the client the chance to receive the final acknowledgement.","pos":[13497,13781]},{"content":"Otherwise, the Reliable Messaging destination reclaims resources immediately and indicates to the application destination that the sequence ends with doubt by raising the <ph id=\"ph1\">`Faulted`</ph> event.","pos":[13782,13969],"source":" Otherwise, the Reliable Messaging destination reclaims resources immediately and indicates to the application destination that the sequence ends with doubt by raising the `Faulted` event."},{"pos":[13976,14020],"content":"An example of a <ph id=\"ph1\">`TerminateSequence`</ph> message.","source":"An example of a `TerminateSequence` message."},{"pos":[15640,15649],"content":"Sequences","linkify":"Sequences","nodes":[{"content":"Sequences","pos":[0,9]}]},{"content":"The following is a list of constraints that apply to sequences:","pos":[15653,15716]},{"pos":[15726,15900],"content":"B1401:<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates and accesses sequence numbers no higher than <ph id=\"ph2\">`xs:long`</ph>â€™s maximum inclusive value, 9223372036854775807.","source":"B1401:[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates and accesses sequence numbers no higher than `xs:long`â€™s maximum inclusive value, 9223372036854775807."},{"pos":[15907,15941],"content":"An example of a <ph id=\"ph1\">`Sequence`</ph> header.","source":"An example of a `Sequence` header."},{"pos":[16156,16179],"content":"Request Acknowledgement","linkify":"Request Acknowledgement","nodes":[{"content":"Request Acknowledgement","pos":[0,23]}]},{"pos":[16183,16296],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the <ph id=\"ph2\">`AckRequested`</ph> header as a keep-alive mechanism.","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses the `AckRequested` header as a keep-alive mechanism."},{"pos":[16303,16342],"content":"An example of an <ph id=\"ph1\">`AckRequested`</ph> header.","source":"An example of an `AckRequested` header."},{"pos":[16497,16520],"content":"SequenceAcknowledgement","linkify":"SequenceAcknowledgement","nodes":[{"content":"SequenceAcknowledgement","pos":[0,23]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses a \"piggy-back\" mechanism for sequence acknowledgements provided in WS-Reliable Messaging.","pos":[16524,16674],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses a \"piggy-back\" mechanism for sequence acknowledgements provided in WS-Reliable Messaging."},{"content":"The following constraints apply:","pos":[16675,16707]},{"content":"R1601: When two converse sequences are established using the <ph id=\"ph1\">`Offer`</ph> mechanism, the <ph id=\"ph2\">`SequenceAcknowledgement`</ph> header may be included in any application message transmitted to the intended recipient.","pos":[16717,16915],"source":"R1601: When two converse sequences are established using the `Offer` mechanism, the `SequenceAcknowledgement` header may be included in any application message transmitted to the intended recipient."},{"content":"The remote endpoint must be able to access a piggybacked <ph id=\"ph1\">`SequenceAcknowledgement`</ph> header.","pos":[16916,17006],"source":" The remote endpoint must be able to access a piggybacked `SequenceAcknowledgement` header."},{"content":"B1602: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not generate <ph id=\"ph2\">`SequenceAcknowledgement`</ph> headers that contain <ph id=\"ph3\">`Nack`</ph> elements.","pos":[17016,17160],"source":"B1602: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not generate `SequenceAcknowledgement` headers that contain `Nack` elements."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> validates that each <ph id=\"ph2\">`Nack`</ph> element contains a sequence number, but otherwise ignores the <ph id=\"ph3\">`Nack`</ph> element and value.","pos":[17161,17331],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] validates that each `Nack` element contains a sequence number, but otherwise ignores the `Nack` element and value."},{"pos":[17338,17387],"content":"An example of a <ph id=\"ph1\">`SequenceAcknowledgement`</ph> header.","source":"An example of a `SequenceAcknowledgement` header."},{"pos":[17644,17671],"content":"WS-ReliableMessaging Faults","linkify":"WS-ReliableMessaging Faults","nodes":[{"content":"WS-ReliableMessaging Faults","pos":[0,27]}]},{"content":"The following is a list of constraints that apply to the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implementation of WS-ReliableMessaging faults.","pos":[17675,17834],"source":"The following is a list of constraints that apply to the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] implementation of WS-ReliableMessaging faults."},{"content":"The following constraints apply:","pos":[17835,17867]},{"pos":[17877,17989],"content":"B1701: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not generate <ph id=\"ph2\">`MessageNumberRollover`</ph> faults.","source":"B1701: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not generate `MessageNumberRollover` faults."},{"pos":[17999,18292],"content":"B1702: Over SOAP 1.2, when the service endpoint reaches its connection limit and cannot process new connections, <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates a nested <ph id=\"ph2\">`CreateSequenceRefused`</ph> fault subcode, <ph id=\"ph3\">`netrm:ConnectionLimitReached`</ph>, as shown in the following example.","source":"B1702: Over SOAP 1.2, when the service endpoint reaches its connection limit and cannot process new connections, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates a nested `CreateSequenceRefused` fault subcode, `netrm:ConnectionLimitReached`, as shown in the following example."},{"pos":[18985,19005],"content":"WS-Addressing Faults","linkify":"WS-Addressing Faults","nodes":[{"content":"WS-Addressing Faults","pos":[0,20]}]},{"content":"Because WS-ReliableMessaging uses WS-Addressing, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WS-ReliableMessaging implementation may generate and transmit WS-Addressing faults.","pos":[19009,19201],"source":"Because WS-ReliableMessaging uses WS-Addressing, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] WS-ReliableMessaging implementation may generate and transmit WS-Addressing faults."},{"content":"This section covers the WS-Addressing faults that <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> explicitly generates and transmits at the WS-ReliableMessaging layer:","pos":[19202,19377],"source":" This section covers the WS-Addressing faults that [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] explicitly generates and transmits at the WS-ReliableMessaging layer:"},{"pos":[19387,19554],"content":"B1801:<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates and transmits the <ph id=\"ph2\">`Message Addressing Header Required`</ph> fault when one of the following is true:","source":"B1801:[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates and transmits the `Message Addressing Header Required` fault when one of the following is true:"},{"pos":[19568,19667],"content":"A <ph id=\"ph1\">`CreateSequence`</ph>, <ph id=\"ph2\">`CloseSequence`</ph> or <ph id=\"ph3\">`TerminateSequence`</ph> message is missing a <ph id=\"ph4\">`MessageId`</ph> header.","source":"A `CreateSequence`, `CloseSequence` or `TerminateSequence` message is missing a `MessageId` header."},{"pos":[19681,19778],"content":"A <ph id=\"ph1\">`CreateSequence`</ph>, <ph id=\"ph2\">`CloseSequence`</ph> or <ph id=\"ph3\">`TerminateSequence`</ph> message is missing a <ph id=\"ph4\">`ReplyTo`</ph> header.","source":"A `CreateSequence`, `CloseSequence` or `TerminateSequence` message is missing a `ReplyTo` header."},{"pos":[19792,19916],"content":"A <ph id=\"ph1\">`CreateSequenceResponse`</ph>, <ph id=\"ph2\">`CloseSequenceResponse`</ph>, or <ph id=\"ph3\">`TerminateSequenceResponse`</ph> message is missing a <ph id=\"ph4\">`RelatesTo`</ph> header.","source":"A `CreateSequenceResponse`, `CloseSequenceResponse`, or `TerminateSequenceResponse` message is missing a `RelatesTo` header."},{"pos":[19926,20197],"content":"B1802:<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates and transmits the <ph id=\"ph2\">`Endpoint Unavailable`</ph> fault to indicate there is no endpoint listening that can process the sequence based on examination of the addressing headers in the <ph id=\"ph3\">`CreateSequence`</ph> message.","source":"B1802:[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates and transmits the `Endpoint Unavailable` fault to indicate there is no endpoint listening that can process the sequence based on examination of the addressing headers in the `CreateSequence` message."},{"pos":[20206,20226],"content":"Protocol Composition","linkify":"Protocol Composition","nodes":[{"content":"Protocol Composition","pos":[0,20]}]},{"pos":[20236,20266],"content":"Composition with WS-Addressing","linkify":"Composition with WS-Addressing","nodes":[{"content":"Composition with WS-Addressing","pos":[0,30]}]},{"pos":[20270,20474],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports two versions of WS-Addressing: WS-Addressing 2004/08 [WS-ADDR] and W3C WS-Addressing 1.0 Recommendations [WS-ADDR-CORE] and [WS-ADDR-SOAP].","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] supports two versions of WS-Addressing: WS-Addressing 2004/08 [WS-ADDR] and W3C WS-Addressing 1.0 Recommendations [WS-ADDR-CORE] and [WS-ADDR-SOAP]."},{"content":"While the WS-ReliableMessaging specification mentions only WS-Addressing 2004/08, it does not restrict the WS-Addressing version to be used.","pos":[20481,20621]},{"content":"The following is a list of constraints that apply to <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:","pos":[20622,20731],"source":" The following is a list of constraints that apply to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]:"},{"content":"R2101: Both WS-Addressing 2004/08 and WS-Addressing 1.0 can be used with WS-Reliable Messaging.","pos":[20741,20836]},{"pos":[20846,21023],"content":"R2102: A single version of WS-Addressing must be used throughout a given WS-ReliableMessaging sequence or a pair of converse sequences correlated by using the <ph id=\"ph1\">`Offer`</ph> mechanism.","source":"R2102: A single version of WS-Addressing must be used throughout a given WS-ReliableMessaging sequence or a pair of converse sequences correlated by using the `Offer` mechanism."},{"pos":[21033,21054],"content":"Composition with SOAP","linkify":"Composition with SOAP","nodes":[{"content":"Composition with SOAP","pos":[0,21]}]},{"pos":[21058,21188],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports the use of both SOAP 1.1 and SOAP 1.2 with WS-Reliable Messaging.","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] supports the use of both SOAP 1.1 and SOAP 1.2 with WS-Reliable Messaging."},{"pos":[21198,21252],"content":"Composition with WS-Security and WS-SecureConversation","linkify":"Composition with WS-Security and WS-SecureConversation","nodes":[{"content":"Composition with WS-Security and WS-SecureConversation","pos":[0,54]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides protection for WS-ReliableMessaging sequences by using secure Transport (HTTPS), composition with WS-Security, and composition with WS-Secure Conversation.","pos":[21256,21476],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides protection for WS-ReliableMessaging sequences by using secure Transport (HTTPS), composition with WS-Security, and composition with WS-Secure Conversation."},{"content":"The WS-ReliableMessaging 1.1 protocol, WS-Security 1.1 and WS-Secure Conversation 1.3 protocol should be used together.","pos":[21477,21596]},{"content":"The following is a list of constraints that apply to <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:","pos":[21597,21706],"source":" The following is a list of constraints that apply to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]:"},{"pos":[21716,21962],"content":"R2301: To protect the integrity of a WS-ReliableMessaging sequence in addition to the integrity and confidentiality of individual messages, <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> requires that WS-Secure Conversation must be used.","source":"R2301: To protect the integrity of a WS-ReliableMessaging sequence in addition to the integrity and confidentiality of individual messages, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] requires that WS-Secure Conversation must be used."},{"content":"R2302:AWS-Secure Conversation session must be established prior to establishing WS-ReliableMessaging sequence(s).","pos":[21972,22085]},{"pos":[22095,22356],"content":"R2303: If the WS-ReliableMessaging sequence lifetime exceeds the WS-Secure Conversation sessionâ€™s lifetime, the <ph id=\"ph1\">`SecurityContextToken`</ph> established by using WS-Secure Conversation must be renewed by using the corresponding WS-Secure Conversation Renewal binding.","source":"R2303: If the WS-ReliableMessaging sequence lifetime exceeds the WS-Secure Conversation sessionâ€™s lifetime, the `SecurityContextToken` established by using WS-Secure Conversation must be renewed by using the corresponding WS-Secure Conversation Renewal binding."},{"content":"B2304:WS-ReliableMessaging sequence or a pair of correlated converse sequences are always bound to a single WS-SecureConversation session.","pos":[22366,22504]},{"pos":[22514,22765],"content":"R2305: When composed with WS-Secure Conversation, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> responder requires that the <ph id=\"ph2\">`CreateSequence`</ph> message contain the <ph id=\"ph3\">`wsse:SecurityTokenReference`</ph> element and the <ph id=\"ph4\">`wsrm:UsesSequenceSTR`</ph> header.","source":"R2305: When composed with WS-Secure Conversation, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] responder requires that the `CreateSequence` message contain the `wsse:SecurityTokenReference` element and the `wsrm:UsesSequenceSTR` header."},{"pos":[22772,22813],"content":"An example of a <ph id=\"ph1\">`UsesSequenceSTR`</ph> header.","source":"An example of a `UsesSequenceSTR` header."},{"pos":[22886,22919],"content":"Composition with SSL/TLS sessions","linkify":"Composition with SSL/TLS sessions","nodes":[{"content":"Composition with SSL/TLS sessions","pos":[0,33]}]},{"pos":[22923,23030],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not support composition with SSL/TLS sessions:","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not support composition with SSL/TLS sessions:"},{"pos":[23040,23155],"content":"B2401: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not generate the <ph id=\"ph2\">`wsrm:UsesSequenceSSL`</ph> header.","source":"B2401: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not generate the `wsrm:UsesSequenceSSL` header."},{"pos":[23165,23352],"content":"R2402: A Reliable Messaging Initiator must not send a <ph id=\"ph1\">`CreateSequence`</ph> message with a <ph id=\"ph2\">`wsrm:UsesSequenceSSL`</ph> header to a <ph id=\"ph3\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder.","source":"R2402: A Reliable Messaging Initiator must not send a `CreateSequence` message with a `wsrm:UsesSequenceSSL` header to a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder."},{"pos":[23362,23388],"content":"Composition with WS-Policy","linkify":"Composition with WS-Policy","nodes":[{"content":"Composition with WS-Policy","pos":[0,26]}]},{"pos":[23392,23516],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports two versions of WS-Policy: WS-Policy 1.2 and WS-Policy 1.5.","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] supports two versions of WS-Policy: WS-Policy 1.2 and WS-Policy 1.5."},{"pos":[23525,23565],"content":"WS-ReliableMessaging WS-Policy Assertion","linkify":"WS-ReliableMessaging WS-Policy Assertion","nodes":[{"content":"WS-ReliableMessaging WS-Policy Assertion","pos":[0,40]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses WS-ReliableMessaging WS-Policy Assertion <ph id=\"ph2\">`wsrm:RMAssertion`</ph> to describe endpoints capabilities.","pos":[23569,23725],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses WS-ReliableMessaging WS-Policy Assertion `wsrm:RMAssertion` to describe endpoints capabilities."},{"content":"The following is a list of constraints that apply to <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:","pos":[23726,23835],"source":" The following is a list of constraints that apply to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]:"},{"content":"B3001: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> attaches <ph id=\"ph2\">`wsrmn:RMAssertion`</ph> WS-Policy Assertion to <ph id=\"ph3\">`wsdl:binding`</ph> elements.","pos":[23845,23984],"source":"B3001: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] attaches `wsrmn:RMAssertion` WS-Policy Assertion to `wsdl:binding` elements."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports both attachments to <ph id=\"ph2\">`wsdl:binding`</ph> and <ph id=\"ph3\">`wsdl:port`</ph> elements.","pos":[23985,24110],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] supports both attachments to `wsdl:binding` and `wsdl:port` elements."},{"pos":[24120,24222],"content":"B3002: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> never generates the <ph id=\"ph2\">`wsp:Optional`</ph> tag.","source":"B3002: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] never generates the `wsp:Optional` tag."},{"pos":[24232,24427],"content":"B3003: When accessing the <ph id=\"ph1\">`wsrmp:RMAssertion`</ph> WS-Policy Assertion, <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ignores the <ph id=\"ph3\">`wsp:Optional`</ph> tag and treats the WS-RM policy as mandatory.","source":"B3003: When accessing the `wsrmp:RMAssertion` WS-Policy Assertion, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ignores the `wsp:Optional` tag and treats the WS-RM policy as mandatory."},{"pos":[24437,24676],"content":"R3004: Because <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not compose with SSL/TLS sessions, <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not accept policy that specifies <ph id=\"ph3\">`wsrmp:SequenceTransportSecurity`</ph>.","source":"R3004: Because [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not compose with SSL/TLS sessions, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not accept policy that specifies `wsrmp:SequenceTransportSecurity`."},{"pos":[24686,24804],"content":"B3005: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> always generates the <ph id=\"ph2\">`wsrmp:DeliveryAssurance`</ph> element.","source":"B3005: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] always generates the `wsrmp:DeliveryAssurance` element."},{"pos":[24814,24937],"content":"B3006: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> always specifies the <ph id=\"ph2\">`wsrmp:ExactlyOnce`</ph> delivery assurance.","source":"B3006: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] always specifies the `wsrmp:ExactlyOnce` delivery assurance."},{"pos":[24947,25218],"content":"B3007: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates and reads the following properties of the WS-ReliableMessaging assertion and provides control over them on the <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph><ph id=\"ph3\">`ReliableSessionBindingElement`</ph>:","source":"B3007: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates and reads the following properties of the WS-ReliableMessaging assertion and provides control over them on the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]`ReliableSessionBindingElement`:"},{"pos":[25315,25345],"content":"An example of a <ph id=\"ph1\">`RMAssertion`</ph>.","source":"An example of a `RMAssertion`."},{"pos":[25813,25856],"content":"Flow Control WS-ReliableMessaging Extension","linkify":"Flow Control WS-ReliableMessaging Extension","nodes":[{"content":"Flow Control WS-ReliableMessaging Extension","pos":[0,43]}]},{"pos":[25860,26030],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses WS-ReliableMessaging extensibility to provide optional additional tighter control over sequence message flow.","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses WS-ReliableMessaging extensibility to provide optional additional tighter control over sequence message flow."},{"content":"Flow control is enabled by setting the <ph id=\"ph1\">`ReliableSessionBindingElement`</ph>â€™s <ph id=\"ph2\">`FlowControlEnabled``boolean`</ph> property to <ph id=\"ph3\">`true`</ph>.","pos":[26037,26159],"source":"Flow control is enabled by setting the `ReliableSessionBindingElement`â€™s `FlowControlEnabled``boolean` property to `true`."},{"content":"The following is a list of constraints that apply to <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:","pos":[26160,26269],"source":" The following is a list of constraints that apply to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]:"},{"pos":[26279,26539],"content":"B4001: When Reliable Messaging Flow Control is enabled, <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates a <ph id=\"ph2\">`netrm:BufferRemaining`</ph> element in the element extensibility of the <ph id=\"ph3\">`SequenceAcknowledgement`</ph> header, as shown in the following example.","source":"B4001: When Reliable Messaging Flow Control is enabled, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates a `netrm:BufferRemaining` element in the element extensibility of the `SequenceAcknowledgement` header, as shown in the following example."},{"pos":[26861,27069],"content":"B4002: Even when Reliable Messaging Flow Control is enabled, <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not require a <ph id=\"ph2\">`netrm:BufferRemaining`</ph> element in the <ph id=\"ph3\">`SequenceAcknowledgement`</ph> header.","source":"B4002: Even when Reliable Messaging Flow Control is enabled, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] does not require a `netrm:BufferRemaining` element in the `SequenceAcknowledgement` header."},{"pos":[27079,27250],"content":"B4003: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging Destination uses <ph id=\"ph2\">`netrm:BufferRemaining`</ph> to indicate how many new messages it can buffer.","source":"B4003: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging Destination uses `netrm:BufferRemaining` to indicate how many new messages it can buffer."},{"pos":[27260,27476],"content":"B4004:When Reliable Messaging Flow Control is enabled, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging Source uses the value of <ph id=\"ph2\">`netrm:BufferRemaining`</ph> to throttle message transmission.","source":"B4004:When Reliable Messaging Flow Control is enabled, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Reliable Messaging Source uses the value of `netrm:BufferRemaining` to throttle message transmission."},{"pos":[27486,27719],"content":"B4005: <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates <ph id=\"ph2\">`netrm:BufferRemaining`</ph> integer values between 0 and 4096 inclusive, and reads integer values between 0 and <ph id=\"ph3\">`xs:int`</ph>â€™s <ph id=\"ph4\">`maxInclusive`</ph> value 214748364 inclusive.","source":"B4005: [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] generates `netrm:BufferRemaining` integer values between 0 and 4096 inclusive, and reads integer values between 0 and `xs:int`â€™s `maxInclusive` value 214748364 inclusive."},{"pos":[27728,27753],"content":"Message Exchange Patterns","linkify":"Message Exchange Patterns","nodes":[{"content":"Message Exchange Patterns","pos":[0,25]}]},{"content":"This section describes <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>'s behavior when WS-ReliableMessaging is used for different Message Exchange Patterns.","pos":[27757,27921],"source":"This section describes [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]'s behavior when WS-ReliableMessaging is used for different Message Exchange Patterns."},{"content":"For each Message Exchange Pattern the following two deployments scenarios are considered:","pos":[27922,28011]},{"content":"Non-Addressable Initiator: Initiator is behind a firewall; Responder can deliver messages to the Initiator only on HTTP responses.","pos":[28021,28151]},{"content":"Addressable Initiator: Initiator and Responder both can be sent HTTP requests; in other words, two converse HTTP connections can be established.","pos":[28161,28305]},{"pos":[28315,28349],"content":"One-way, Non-addressable Initiator","linkify":"One-way, Non-addressable Initiator","nodes":[{"content":"One-way, Non-addressable Initiator","pos":[0,34]}]},{"pos":[28360,28367],"content":"Binding","linkify":"Binding","nodes":[{"content":"Binding","pos":[0,7]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a one-way message exchange pattern using one sequence over one HTTP channel.","pos":[28371,28512],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a one-way message exchange pattern using one sequence over one HTTP channel."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses HTTP requests to transmit all messages from the Initiator to the Responder and HTTP responses to transmit all messages from the Responder to the Initiator.","pos":[28513,28729],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses HTTP requests to transmit all messages from the Initiator to the Responder and HTTP responses to transmit all messages from the Responder to the Initiator."},{"pos":[28740,28763],"content":"CreateSequence Exchange","linkify":"CreateSequence Exchange","nodes":[{"content":"CreateSequence Exchange","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id=\"ph2\">`CreateSequence`</ph> message with no <ph id=\"ph3\">`Offer`</ph> element on an HTTP request and expects the <ph id=\"ph4\">`CreateSequenceResponse`</ph> message on the HTTP response.","pos":[28767,28987],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CreateSequence` message with no `Offer` element on an HTTP request and expects the `CreateSequenceResponse` message on the HTTP response."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder creates a sequence and transmits the <ph id=\"ph2\">`CreateSequenceResponse`</ph> message with no <ph id=\"ph3\">`Accept`</ph> element on the HTTP response.","pos":[28988,29174],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder creates a sequence and transmits the `CreateSequenceResponse` message with no `Accept` element on the HTTP response."},{"pos":[29185,29208],"content":"SequenceAcknowledgement","linkify":"SequenceAcknowledgement","nodes":[{"content":"SequenceAcknowledgement","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator processes acknowledgements on the reply of all messages except the <ph id=\"ph2\">`CreateSequence`</ph> message and fault messages.","pos":[29212,29393],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator processes acknowledgements on the reply of all messages except the `CreateSequence` message and fault messages."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder always transmits a stand-alone acknowledgement on the HTTP response to all sequence and <ph id=\"ph2\">`AckRequested`</ph> messages.","pos":[29394,29576],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder always transmits a stand-alone acknowledgement on the HTTP response to all sequence and `AckRequested` messages."},{"pos":[29587,29609],"content":"CloseSequence Exchange","linkify":"CloseSequence Exchange","nodes":[{"content":"CloseSequence Exchange","pos":[0,22]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id=\"ph2\">`CloseSequence`</ph> message on an HTTP request and expects the <ph id=\"ph3\">`CreateSequenceResponse`</ph> message on the HTTP response.","pos":[29613,29808],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CloseSequence` message on an HTTP request and expects the `CreateSequenceResponse` message on the HTTP response."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder transmits the <ph id=\"ph2\">`CloseSequenceResponse`</ph> message on the HTTP response.","pos":[29809,29946],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder transmits the `CloseSequenceResponse` message on the HTTP response."},{"pos":[29957,29983],"content":"TerminateSequence Exchange","linkify":"TerminateSequence Exchange","nodes":[{"content":"TerminateSequence Exchange","pos":[0,26]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id=\"ph2\">`TerminateSequence`</ph> message on an HTTP request and expects the <ph id=\"ph3\">`TerminateSequenceResponse`</ph> message on the HTTP response.","pos":[29987,30189],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `TerminateSequence` message on an HTTP request and expects the `TerminateSequenceResponse` message on the HTTP response."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder transmits the <ph id=\"ph2\">`TerminateSequenceResponse`</ph> message on the HTTP response.","pos":[30190,30331],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder transmits the `TerminateSequenceResponse` message on the HTTP response."},{"pos":[30341,30371],"content":"One Way, Addressable Initiator","linkify":"One Way, Addressable Initiator","nodes":[{"content":"One Way, Addressable Initiator","pos":[0,30]}]},{"pos":[30382,30389],"content":"Binding","linkify":"Binding","nodes":[{"content":"Binding","pos":[0,7]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a one-way message exchange pattern using one sequence over one inbound and one outbound HTTP channel.","pos":[30393,30559],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a one-way message exchange pattern using one sequence over one inbound and one outbound HTTP channel."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the HTTP requests to transmit all messages.","pos":[30560,30664],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses the HTTP requests to transmit all messages."},{"content":"All HTTP responses have an empty body and HTTP 202 status code.","pos":[30665,30728]},{"pos":[30739,30762],"content":"CreateSequence Exchange","linkify":"CreateSequence Exchange","nodes":[{"content":"CreateSequence Exchange","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id=\"ph2\">`CreateSequence`</ph> message with no <ph id=\"ph3\">`Offer`</ph> element on an HTTP request.","pos":[30766,30916],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CreateSequence` message with no `Offer` element on an HTTP request."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder creates a sequence and transmits the <ph id=\"ph2\">`CreateSequenceResponse`</ph> message with no <ph id=\"ph3\">`Accept`</ph> element on an HTTP request.","pos":[30917,31101],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder creates a sequence and transmits the `CreateSequenceResponse` message with no `Accept` element on an HTTP request."},{"pos":[31111,31140],"content":"Duplex, Addressable Initiator","linkify":"Duplex, Addressable Initiator","nodes":[{"content":"Duplex, Addressable Initiator","pos":[0,29]}]},{"pos":[31151,31158],"content":"Binding","linkify":"Binding","nodes":[{"content":"Binding","pos":[0,7]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a fully-asynchronous, two-way message exchange pattern using two sequences over one inbound and one outbound HTTP channel.","pos":[31162,31349],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a fully-asynchronous, two-way message exchange pattern using two sequences over one inbound and one outbound HTTP channel."},{"content":"This message exchange pattern can be mixed with the <ph id=\"ph1\">`Request/Reply`</ph>, <ph id=\"ph2\">`Addressable`</ph> Initiator message exchange pattern in a limited way.","pos":[31350,31485],"source":" This message exchange pattern can be mixed with the `Request/Reply`, `Addressable` Initiator message exchange pattern in a limited way."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses HTTP requests to transmit all messages.","pos":[31486,31586],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses HTTP requests to transmit all messages."},{"content":"All HTTP responses have an empty body and HTTP 202 status code.","pos":[31587,31650]},{"pos":[31661,31684],"content":"CreateSequence Exchange","linkify":"CreateSequence Exchange","nodes":[{"content":"CreateSequence Exchange","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id=\"ph2\">`CreateSequence`</ph> message with an <ph id=\"ph3\">`Offer`</ph> element on an HTTP request.","pos":[31688,31838],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CreateSequence` message with an `Offer` element on an HTTP request."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder ensures that the <ph id=\"ph2\">`CreateSequence`</ph> has an <ph id=\"ph3\">`Offer`</ph> element, then creates a sequence and transmits the <ph id=\"ph4\">`CreateSequenceResponse`</ph> message with an <ph id=\"ph5\">`Accept`</ph> element.","pos":[31839,32067],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder ensures that the `CreateSequence` has an `Offer` element, then creates a sequence and transmits the `CreateSequenceResponse` message with an `Accept` element."},{"pos":[32078,32095],"content":"Sequence Lifetime","linkify":"Sequence Lifetime","nodes":[{"content":"Sequence Lifetime","pos":[0,17]}]},{"pos":[32099,32208],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> treats the two sequences as one fully-duplex session.","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] treats the two sequences as one fully-duplex session."},{"content":"Upon generating a fault that faults one sequence, <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> expects the remote endpoint to fault both sequences.","pos":[32215,32373],"source":"Upon generating a fault that faults one sequence, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] expects the remote endpoint to fault both sequences."},{"content":"Upon reading a fault that faults one sequence, <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> faults both sequences.","pos":[32374,32499],"source":" Upon reading a fault that faults one sequence, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] faults both sequences."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> can close its outbound sequence and continue to process messages on its inbound sequence.","pos":[32506,32651],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] can close its outbound sequence and continue to process messages on its inbound sequence."},{"content":"Conversely, <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> can process the close of the inbound sequence and continue to send messages on its outbound sequence.","pos":[32652,32821],"source":" Conversely, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] can process the close of the inbound sequence and continue to send messages on its outbound sequence."},{"pos":[32831,32883],"content":"Request-Reply and One-Way, Non-Addressable Initiator","linkify":"Request-Reply and One-Way, Non-Addressable Initiator","nodes":[{"content":"Request-Reply and One-Way, Non-Addressable Initiator","pos":[0,52]}]},{"pos":[32894,32901],"content":"Binding","linkify":"Binding","nodes":[{"content":"Binding","pos":[0,7]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a one-way and request-reply message exchange pattern using two sequences over one HTTP channel.","pos":[32905,33065],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a one-way and request-reply message exchange pattern using two sequences over one HTTP channel."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses HTTP requests to transmit all messages from the Initiator to the Responder and HTTP responses to transmit all messages from the Responder to the Initiator.","pos":[33066,33282],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses HTTP requests to transmit all messages from the Initiator to the Responder and HTTP responses to transmit all messages from the Responder to the Initiator."},{"pos":[33293,33316],"content":"CreateSequence Exchange","linkify":"CreateSequence Exchange","nodes":[{"content":"CreateSequence Exchange","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id=\"ph2\">`CreateSequence`</ph> message with an <ph id=\"ph3\">`Offer`</ph> element on an HTTP request and expects the <ph id=\"ph4\">`CreateSequenceResponse`</ph> message on the HTTP response.","pos":[33320,33540],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CreateSequence` message with an `Offer` element on an HTTP request and expects the `CreateSequenceResponse` message on the HTTP response."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder creates a sequence and transmits the <ph id=\"ph2\">`CreateSequenceResponse`</ph> message with an <ph id=\"ph3\">`Accept`</ph> element on the HTTP response.","pos":[33541,33727],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder creates a sequence and transmits the `CreateSequenceResponse` message with an `Accept` element on the HTTP response."},{"pos":[33738,33753],"content":"One-way Message","linkify":"One-way Message","nodes":[{"content":"One-way Message","pos":[0,15]}]},{"content":"To complete a one-way message exchange successfully, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a request sequence message on the HTTP request and receives a standalone <ph id=\"ph2\">`SequenceAcknowledgement`</ph> message on the HTTP response.","pos":[33757,34018],"source":"To complete a one-way message exchange successfully, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a request sequence message on the HTTP request and receives a standalone `SequenceAcknowledgement` message on the HTTP response."},{"content":"The <ph id=\"ph1\">`SequenceAcknowledgement`</ph> must acknowledge the message transmitted.","pos":[34019,34090],"source":" The `SequenceAcknowledgement` must acknowledge the message transmitted."},{"pos":[34097,34284],"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder may reply to the request with an acknowledgement, a fault, or a response with an empty body and HTTP 202 status code.","source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder may reply to the request with an acknowledgement, a fault, or a response with an empty body and HTTP 202 status code."},{"pos":[34295,34311],"content":"Two Way Messages","linkify":"Two Way Messages","nodes":[{"content":"Two Way Messages","pos":[0,16]}]},{"content":"To complete a two way message exchange protocol successfully, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a request sequence message on the HTTP request and receives a reply sequence message on the HTTP response.","pos":[34315,34563],"source":"To complete a two way message exchange protocol successfully, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a request sequence message on the HTTP request and receives a reply sequence message on the HTTP response."},{"content":"The response must carry a <ph id=\"ph1\">`SequenceAcknowledgement`</ph> acknowledging the request sequence message transmitted.","pos":[34564,34671],"source":" The response must carry a `SequenceAcknowledgement` acknowledging the request sequence message transmitted."},{"pos":[34678,34866],"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder may reply to the request with an application reply, a fault or a response with an empty body and HTTP 202 status code.","source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder may reply to the request with an application reply, a fault or a response with an empty body and HTTP 202 status code."},{"content":"Because of the presence of one-way messages and the timing of application replies, the request sequence messageâ€™s sequence number and the response messageâ€™s sequence number have no correlation.","pos":[34873,35066]},{"pos":[35077,35093],"content":"Retrying Replies","linkify":"Retrying Replies","nodes":[{"content":"Retrying Replies","pos":[0,16]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> relies on HTTP request-reply correlation for two-way message exchange protocol correlation.","pos":[35097,35244],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] relies on HTTP request-reply correlation for two-way message exchange protocol correlation."},{"content":"Because of this, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator does not stop retrying a request sequence message when the request sequence message is acknowledged but rather when the HTTP response carries a <ph id=\"ph2\">`SequenceAcknowledgement`</ph>, application reply, or fault.","pos":[35245,35531],"source":" Because of this, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator does not stop retrying a request sequence message when the request sequence message is acknowledged but rather when the HTTP response carries a `SequenceAcknowledgement`, application reply, or fault."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder retries replies on the HTTP response of the request to which the reply is correlated.","pos":[35532,35687],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder retries replies on the HTTP response of the request to which the reply is correlated."},{"pos":[35698,35720],"content":"CloseSequence Exchange","linkify":"CloseSequence Exchange","nodes":[{"content":"CloseSequence Exchange","pos":[0,22]}]},{"pos":[35724,36043],"content":"After receiving all reply sequence messages and acknowledgements for all one way request sequence messages, the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id=\"ph2\">`CloseSequence`</ph> message for the request sequence on an HTTP request and expects the <ph id=\"ph3\">`CloseSequenceResponse`</ph> on the HTTP response.","source":"After receiving all reply sequence messages and acknowledgements for all one way request sequence messages, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CloseSequence` message for the request sequence on an HTTP request and expects the `CloseSequenceResponse` on the HTTP response."},{"content":"Closing the request sequence implicitly closes the reply sequence.","pos":[36050,36116]},{"content":"This means the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator includes the reply sequenceâ€™s Final <ph id=\"ph2\">`SequenceAcknowledgement`</ph> on the <ph id=\"ph3\">`CloseSequence`</ph> message and the reply sequence does not have a <ph id=\"ph4\">`CloseSequence`</ph> exchange.","pos":[36117,36355],"source":" This means the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator includes the reply sequenceâ€™s Final `SequenceAcknowledgement` on the `CloseSequence` message and the reply sequence does not have a `CloseSequence` exchange."},{"pos":[36362,36540],"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder ensures all replies are acknowledged and transmits the <ph id=\"ph2\">`CloseSequenceResponse`</ph> message on the HTTP response.","source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder ensures all replies are acknowledged and transmits the `CloseSequenceResponse` message on the HTTP response."},{"pos":[36551,36577],"content":"TerminateSequence Exchange","linkify":"TerminateSequence Exchange","nodes":[{"content":"TerminateSequence Exchange","pos":[0,26]}]},{"pos":[36581,36853],"content":"After receiving the <ph id=\"ph1\">`CloseSequenceResponse`</ph> message, the <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id=\"ph3\">`TerminateSequence`</ph> message for the request sequence on an HTTP request and expects the <ph id=\"ph4\">`TerminateSequenceResponse`</ph> on the HTTP response.","source":"After receiving the `CloseSequenceResponse` message, the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `TerminateSequence` message for the request sequence on an HTTP request and expects the `TerminateSequenceResponse` on the HTTP response."},{"content":"Like the <ph id=\"ph1\">`CloseSequence`</ph> exchange, terminating the request sequence implicitly terminates the reply sequence.","pos":[36860,36969],"source":"Like the `CloseSequence` exchange, terminating the request sequence implicitly terminates the reply sequence."},{"content":"This means the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator includes the reply sequenceâ€™s final <ph id=\"ph2\">`SequenceAcknowledgement`</ph> on the <ph id=\"ph3\">`TerminateSequence`</ph> message and the reply sequence does not have a <ph id=\"ph4\">`TerminateSequence`</ph> exchange.","pos":[36970,37216],"source":" This means the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator includes the reply sequenceâ€™s final `SequenceAcknowledgement` on the `TerminateSequence` message and the reply sequence does not have a `TerminateSequence` exchange."},{"pos":[37223,37364],"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder transmits the <ph id=\"ph2\">`TerminateSequenceResponse`</ph> message on the HTTP response.","source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder transmits the `TerminateSequenceResponse` message on the HTTP response."},{"pos":[37374,37410],"content":"Request/Reply, Addressable Initiator","linkify":"Request/Reply, Addressable Initiator","nodes":[{"content":"Request/Reply, Addressable Initiator","pos":[0,36]}]},{"pos":[37421,37428],"content":"Binding","linkify":"Binding","nodes":[{"content":"Binding","pos":[0,7]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a request-reply message exchange pattern using two sequences over one inbound and one outbound HTTP channel.","pos":[37432,37605],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] provides a request-reply message exchange pattern using two sequences over one inbound and one outbound HTTP channel."},{"content":"This message exchange pattern can be mixed with the <ph id=\"ph1\">`Duplex, Addressable`</ph> Initiator message exchange pattern in a limited way.","pos":[37606,37732],"source":" This message exchange pattern can be mixed with the `Duplex, Addressable` Initiator message exchange pattern in a limited way."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the HTTP requests to transmit all messages.","pos":[37733,37837],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] uses the HTTP requests to transmit all messages."},{"content":"All HTTP responses have an empty body and HTTP 202 status code.","pos":[37838,37901]},{"pos":[37912,37935],"content":"CreateSequence Exchange","linkify":"CreateSequence Exchange","nodes":[{"content":"CreateSequence Exchange","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id=\"ph2\">`CreateSequence`</ph> message with an <ph id=\"ph3\">`Offer`</ph> element on an HTTP request.","pos":[37939,38089],"source":"The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Initiator transmits a `CreateSequence` message with an `Offer` element on an HTTP request."},{"content":"The <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder ensures that the <ph id=\"ph2\">`CreateSequence`</ph> has an <ph id=\"ph3\">`Offer`</ph> element then creates a sequence and transmits the <ph id=\"ph4\">`CreateSequenceResponse`</ph> message with an <ph id=\"ph5\">`Accept`</ph> element.","pos":[38090,38317],"source":" The [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] Responder ensures that the `CreateSequence` has an `Offer` element then creates a sequence and transmits the `CreateSequenceResponse` message with an `Accept` element."},{"pos":[38328,38353],"content":"Request/Reply Correlation","linkify":"Request/Reply Correlation","nodes":[{"content":"Request/Reply Correlation","pos":[0,25]}]},{"content":"The following applies to all correlated requests and replies:","pos":[38357,38418]},{"pos":[38428,38579],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures all application request messages bear a <ph id=\"ph2\">`ReplyTo`</ph> endpoint reference and a <ph id=\"ph3\">`MessageId`</ph>.","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ensures all application request messages bear a `ReplyTo` endpoint reference and a `MessageId`."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> applies the local endpoint reference as each application request messageâ€™s <ph id=\"ph2\">`ReplyTo`</ph>.","pos":[38589,38730],"source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] applies the local endpoint reference as each application request messageâ€™s `ReplyTo`."},{"content":"The local endpoint reference is the <ph id=\"ph1\">`CreateSequence`</ph> messageâ€™s <ph id=\"ph2\">`ReplyTo`</ph> for the Initiator and the <ph id=\"ph3\">`CreateSequence`</ph> messageâ€™s <ph id=\"ph4\">`To`</ph> for the Responder.","pos":[38731,38880],"source":" The local endpoint reference is the `CreateSequence` messageâ€™s `ReplyTo` for the Initiator and the `CreateSequence` messageâ€™s `To` for the Responder."},{"pos":[38890,39020],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures that incoming request messages bear a <ph id=\"ph2\">`MessageId`</ph> and a <ph id=\"ph3\">`ReplyTo`</ph>.","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ensures that incoming request messages bear a `MessageId` and a `ReplyTo`."},{"pos":[39030,39223],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures the <ph id=\"ph2\">`ReplyTo`</ph> endpoint referenceâ€™s URI of all application request messages match the local endpoint reference as defined earlier.","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ensures the `ReplyTo` endpoint referenceâ€™s URI of all application request messages match the local endpoint reference as defined earlier."},{"pos":[39233,39408],"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures that all replies bear the correct <ph id=\"ph2\">`RelatesTo`</ph> and <ph id=\"ph3\">`To`</ph> headers following <ph id=\"ph4\">`wsa`</ph> request/reply correlation rules.","source":"[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] ensures that all replies bear the correct `RelatesTo` and `To` headers following `wsa` request/reply correlation rules."}]}