{"content":"---\ntitle: \"Class Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Class\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"class modules\"\n  - \"Class statement\"\n  - \"classes [Visual Basic], fields\"\n  - \"fields, of classes\"\n  - \"class types, class statements\"\n  - \"classes [Visual Basic], creating\"\n  - \"classes [Visual Basic], data members\"\n  - \"data members, of classes\"\nms.assetid: f2664f38-eb5a-4d4b-a374-1d041521fb6c\ncaps.latest.revision: 29\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Class Statement (Visual Basic)\nDeclares the name of a class and introduces the definition of the variables, properties, events, and procedures that the class comprises.  \n  \n## Syntax  \n  \n```  \n[ <attributelist> ] [ accessmodifier ] [ Shadows ] [ MustInherit | NotInheritable ] [ Partial ] _  \nClass name [ ( Of typelist ) ]  \n    [ Inherits classname ]  \n    [ Implements interfacenames ]  \n    [ statements ]  \nEnd Class  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`attributelist`|Optional. See [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md).|  \n|`accessmodifier`|Optional. Can be one of the following:<br /><br /> -   [Public](../../../visual-basic/language-reference/modifiers/public.md)<br />-   [Protected](../../../visual-basic/language-reference/modifiers/protected.md)<br />-   [Friend](../../../visual-basic/language-reference/modifiers/friend.md)<br />-   [Private](../../../visual-basic/language-reference/modifiers/private.md)<br />-   `Protected Friend`<br /><br /> See [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).|  \n|`Shadows`|Optional. See [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md).|  \n|`MustInherit`|Optional. See [MustInherit](../../../visual-basic/language-reference/modifiers/mustinherit.md).|  \n|`NotInheritable`|Optional. See [NotInheritable](../../../visual-basic/language-reference/modifiers/notinheritable.md).|  \n|`Partial`|Optional. Indicates a partial definition of the class. See [Partial](../../../visual-basic/language-reference/modifiers/partial.md).|  \n|`name`|Required. Name of this class. See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md).|  \n|`Of`|Optional. Specifies that this is a generic class.|  \n|`typelist`|Required if you use the [Of](../../../visual-basic/language-reference/statements/of-clause.md) keyword. List of type parameters for this class. See [Type List](../../../visual-basic/language-reference/statements/type-list.md).|  \n|`Inherits`|Optional. Indicates that this class inherits the members of another class. See [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md).|  \n|`classname`|Required if you use the `Inherits` statement. The name of the class from which this class derives.|  \n|`Implements`|Optional. Indicates that this class implements the members of one or more interfaces. See [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md).|  \n|`interfacenames`|Required if you use the `Implements` statement. The names of the interfaces this class implements.|  \n|`statements`|Optional. Statements which define the members of this class.|  \n|`End Class`|Required. Terminates the `Class` definition.|  \n  \n## Remarks  \n A `Class` statement defines a new data type. A *class* is a fundamental building block of object-oriented programming (OOP). For more information, see [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md).  \n  \n You can use `Class` only at namespace or module level. This means the *declaration context* for a class must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure or block. For more information, see [Declaration Contexts and Default Access Levels](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md).  \n  \n Each instance of a class has a lifetime independent of all other instances. This lifetime begins when it is created by a [New Operator](../../../visual-basic/language-reference/operators/new-operator.md) clause or by a function such as <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A>. It ends when all variables pointing to the instance have been set to [Nothing](../../../visual-basic/language-reference/nothing.md) or to instances of other classes.  \n  \n Classes default to [Friend](../../../visual-basic/language-reference/modifiers/friend.md) access. You can adjust their access levels with the access modifiers. For more information, see [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n## Rules  \n  \n-   **Nesting.** You can define one class within another. The outer class is called the *containing class*, and the inner class is called a *nested class*.  \n  \n-   **Inheritance.** If the class uses the [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md), you can specify only one base class or interface. A class cannot inherit from more than one element.  \n  \n     A class cannot inherit from another class with a more restrictive access level. For example, a `Public` class cannot inherit from a `Friend` class.  \n  \n     A class cannot inherit from a class nested within it.  \n  \n-   **Implementation.** If the class uses the [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md), you must implement every member defined by every interface you specify in `interfacenames`. An exception to this is reimplementation of a base class member. For more information, see \"Reimplementation\" in [Implements](../../../visual-basic/language-reference/statements/implements-clause.md).  \n  \n-   **Default Property.** A class can specify at most one property as its *default property*. For more information, see [Default](../../../visual-basic/language-reference/modifiers/default.md).  \n  \n## Behavior  \n  \n-   **Access Level.** Within a class, you can declare each member with its own access level. Class members default to [Public](../../../visual-basic/language-reference/modifiers/public.md) access, except variables and constants, which default to [Private](../../../visual-basic/language-reference/modifiers/private.md) access. When a class has more restricted access than one of its members, the class access level takes precedence.  \n  \n-   **Scope.** A class is in scope throughout its containing namespace, class, structure, or module.  \n  \n     The scope of every class member is the entire class.  \n  \n     **Lifetime.** Visual Basic does not support static classes. The functional equivalent of a static class is provided by a module. For more information, see [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md).  \n  \n     Class members have lifetimes depending on how and where they are declared. For more information, see [Lifetime in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md).  \n  \n-   **Qualification.** Code outside a class must qualify a member's name with the name of that class.  \n  \n     If code inside a nested class makes an unqualified reference to a programming element, Visual Basic searches for the element first in the nested class, then in its containing class, and so on out to the outermost containing element.  \n  \n## Classes and Modules  \n These elements have many similarities, but there are some important differences as well.  \n  \n-   **Terminology.** Previous versions of Visual Basic recognize two types of modules: *class modules* (.cls files) and *standard modules* (.bas files). The current version calls these *classes* and *modules*, respectively.  \n  \n-   **Shared Members.** You can control whether a member of a class is a shared or instance member.  \n  \n-   **Object Orientation.** Classes are object-oriented, but modules are not. You can create one or more instances of a class. For more information, see [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md).  \n  \n## Example  \n The following example uses a `Class` statement to define a class and several members.  \n  \n [!code-vb[VbVbalrStatements#62](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/class-statement_1.vb)]  \n  \n## See Also  \n [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)   \n [Structures and Classes](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)   \n [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)   \n [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)   \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)   \n [Object Lifetime: How Objects Are Created and Destroyed](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)   \n [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [How to: Use a Generic Class](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)\n","nodes":[{"pos":[4,816],"embed":true,"restype":"x-metadata","content":"title: \"Class Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Class\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"class modules\"\n  - \"Class statement\"\n  - \"classes [Visual Basic], fields\"\n  - \"fields, of classes\"\n  - \"class types, class statements\"\n  - \"classes [Visual Basic], creating\"\n  - \"classes [Visual Basic], data members\"\n  - \"data members, of classes\"\nms.assetid: f2664f38-eb5a-4d4b-a374-1d041521fb6c\ncaps.latest.revision: 29\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Class Statement (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,47],"content":"Class Statement (Visual Basic) | Microsoft Docs","nodes":[{"content":"Class Statement (Visual Basic) | Microsoft Docs","pos":[0,47]}]}],"path":["title"]}],"yml":true},{"pos":[823,853],"content":"Class Statement (Visual Basic)","linkify":"Class Statement (Visual Basic)","nodes":[{"content":"Class Statement (Visual Basic)","pos":[0,30]}]},{"content":"Declares the name of a class and introduces the definition of the variables, properties, events, and procedures that the class comprises.","pos":[854,991]},{"pos":[1000,1006],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1261,1266],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[1273,1277]},{"content":"Definition","pos":[1278,1288]},{"content":"Optional.","pos":[1321,1330]},{"content":"See <bpt id=\"p1\">[</bpt>Attribute List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept>.","pos":[1331,1423],"source":" See [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md)."},{"content":"Optional.","pos":[1445,1454]},{"content":"Can be one of the following:","pos":[1455,1483]},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept>","pos":[1496,1570],"source":"-   [Public](../../../visual-basic/language-reference/modifiers/public.md)"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Protected<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/protected.md)</ept>","pos":[1576,1656],"source":"-   [Protected](../../../visual-basic/language-reference/modifiers/protected.md)"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept>","pos":[1662,1736],"source":"-   [Friend](../../../visual-basic/language-reference/modifiers/friend.md)"},{"content":"<ph id=\"ph1\">-   </ph><bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/private.md)</ept>","pos":[1742,1818],"source":"-   [Private](../../../visual-basic/language-reference/modifiers/private.md)"},{"content":"See <bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","pos":[1859,1989],"source":"See [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"content":"Optional.","pos":[2004,2013]},{"content":"See <bpt id=\"p1\">[</bpt>Shadows<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>.","pos":[2014,2091],"source":" See [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md)."},{"content":"Optional.","pos":[2110,2119]},{"content":"See <bpt id=\"p1\">[</bpt>MustInherit<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/mustinherit.md)</ept>.","pos":[2120,2205],"source":" See [MustInherit](../../../visual-basic/language-reference/modifiers/mustinherit.md)."},{"content":"Optional.","pos":[2227,2236]},{"content":"See <bpt id=\"p1\">[</bpt>NotInheritable<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/notinheritable.md)</ept>.","pos":[2237,2328],"source":" See [NotInheritable](../../../visual-basic/language-reference/modifiers/notinheritable.md)."},{"content":"Optional.","pos":[2343,2352]},{"content":"Indicates a partial definition of the class.","pos":[2353,2397]},{"content":"See <bpt id=\"p1\">[</bpt>Partial<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/partial.md)</ept>.","pos":[2398,2475],"source":" See [Partial](../../../visual-basic/language-reference/modifiers/partial.md)."},{"content":"Required.","pos":[2487,2496]},{"content":"Name of this class.","pos":[2497,2516]},{"content":"See <bpt id=\"p1\">[</bpt>Declared Element Names<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.","pos":[2517,2649],"source":" See [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)."},{"content":"Optional.","pos":[2659,2668]},{"content":"Specifies that this is a generic class.","pos":[2669,2708]},{"content":"Required if you use the <bpt id=\"p1\">[</bpt>Of<ept id=\"p1\">](../../../visual-basic/language-reference/statements/of-clause.md)</ept> keyword.","pos":[2724,2827],"source":"Required if you use the [Of](../../../visual-basic/language-reference/statements/of-clause.md) keyword."},{"content":"List of type parameters for this class.","pos":[2828,2867]},{"content":"See <bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/type-list.md)</ept>.","pos":[2868,2950],"source":" See [Type List](../../../visual-basic/language-reference/statements/type-list.md)."},{"content":"Optional.","pos":[2966,2975]},{"content":"Indicates that this class inherits the members of another class.","pos":[2976,3040]},{"content":"See <bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept>.","pos":[3041,3141],"source":" See [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md)."},{"content":"Required if you use the <ph id=\"ph1\">`Inherits`</ph> statement.","pos":[3158,3203],"source":"Required if you use the `Inherits` statement."},{"content":"The name of the class from which this class derives.","pos":[3204,3256]},{"content":"Optional.","pos":[3274,3283]},{"content":"Indicates that this class implements the members of one or more interfaces.","pos":[3284,3359]},{"content":"See <bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept>.","pos":[3360,3464],"source":" See [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md)."},{"content":"Required if you use the <ph id=\"ph1\">`Implements`</ph> statement.","pos":[3486,3533],"source":"Required if you use the `Implements` statement."},{"content":"The names of the interfaces this class implements.","pos":[3534,3584]},{"content":"Optional.","pos":[3602,3611]},{"content":"Statements which define the members of this class.","pos":[3612,3662]},{"content":"Required.","pos":[3679,3688]},{"content":"Terminates the <ph id=\"ph1\">`Class`</ph> definition.","pos":[3689,3723],"source":" Terminates the `Class` definition."},{"pos":[3733,3740],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <ph id=\"ph1\">`Class`</ph> statement defines a new data type.","pos":[3744,3788],"source":"A `Class` statement defines a new data type."},{"content":"A <bpt id=\"p1\">*</bpt>class<ept id=\"p1\">*</ept> is a fundamental building block of object-oriented programming (OOP).","pos":[3789,3868],"source":" A *class* is a fundamental building block of object-oriented programming (OOP)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>.","pos":[3869,4005],"source":" For more information, see [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)."},{"content":"You can use <ph id=\"ph1\">`Class`</ph> only at namespace or module level.","pos":[4012,4066],"source":"You can use `Class` only at namespace or module level."},{"content":"This means the <bpt id=\"p1\">*</bpt>declaration context<ept id=\"p1\">*</ept> for a class must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure or block.","pos":[4067,4225],"source":" This means the *declaration context* for a class must be a source file, namespace, class, structure, module, or interface, and cannot be a procedure or block."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Declaration Contexts and Default Access Levels<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.","pos":[4226,4404],"source":" For more information, see [Declaration Contexts and Default Access Levels](../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)."},{"content":"Each instance of a class has a lifetime independent of all other instances.","pos":[4411,4486]},{"content":"This lifetime begins when it is created by a <bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/new-operator.md)</ept> clause or by a function such as <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Interaction.CreateObject%2A&gt;</ph>.","pos":[4487,4704],"source":" This lifetime begins when it is created by a [New Operator](../../../visual-basic/language-reference/operators/new-operator.md) clause or by a function such as <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A>."},{"content":"It ends when all variables pointing to the instance have been set to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept> or to instances of other classes.","pos":[4705,4870],"source":" It ends when all variables pointing to the instance have been set to [Nothing](../../../visual-basic/language-reference/nothing.md) or to instances of other classes."},{"content":"Classes default to <bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/friend.md)</ept> access.","pos":[4877,4974],"source":"Classes default to [Friend](../../../visual-basic/language-reference/modifiers/friend.md) access."},{"content":"You can adjust their access levels with the access modifiers.","pos":[4975,5036]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","pos":[5037,5189],"source":" For more information, see [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[5198,5203],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Nesting.<ept id=\"p1\">**</ept>","pos":[5213,5225],"source":"**Nesting.**"},{"content":"You can define one class within another.","pos":[5226,5266]},{"content":"The outer class is called the <bpt id=\"p1\">*</bpt>containing class<ept id=\"p1\">*</ept>, and the inner class is called a <bpt id=\"p2\">*</bpt>nested class<ept id=\"p2\">*</ept>.","pos":[5267,5364],"source":" The outer class is called the *containing class*, and the inner class is called a *nested class*."},{"content":"<bpt id=\"p1\">**</bpt>Inheritance.<ept id=\"p1\">**</ept>","pos":[5374,5390],"source":"**Inheritance.**"},{"content":"If the class uses the <bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept>, you can specify only one base class or interface.","pos":[5391,5559],"source":" If the class uses the [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md), you can specify only one base class or interface."},{"content":"A class cannot inherit from more than one element.","pos":[5560,5610]},{"content":"A class cannot inherit from another class with a more restrictive access level.","pos":[5621,5700]},{"content":"For example, a <ph id=\"ph1\">`Public`</ph> class cannot inherit from a <ph id=\"ph2\">`Friend`</ph> class.","pos":[5701,5768],"source":" For example, a `Public` class cannot inherit from a `Friend` class."},{"content":"A class cannot inherit from a class nested within it.","pos":[5779,5832]},{"content":"<bpt id=\"p1\">**</bpt>Implementation.<ept id=\"p1\">**</ept>","pos":[5842,5861],"source":"**Implementation.**"},{"content":"If the class uses the <bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept>, you must implement every member defined by every interface you specify in <ph id=\"ph1\">`interfacenames`</ph>.","pos":[5862,6076],"source":" If the class uses the [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md), you must implement every member defined by every interface you specify in `interfacenames`."},{"content":"An exception to this is reimplementation of a base class member.","pos":[6077,6141]},{"content":"For more information, see \"Reimplementation\" in <bpt id=\"p1\">[</bpt>Implements<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-clause.md)</ept>.","pos":[6142,6277],"source":" For more information, see \"Reimplementation\" in [Implements](../../../visual-basic/language-reference/statements/implements-clause.md)."},{"content":"<bpt id=\"p1\">**</bpt>Default Property.<ept id=\"p1\">**</ept>","pos":[6287,6308],"source":"**Default Property.**"},{"content":"A class can specify at most one property as its <bpt id=\"p1\">*</bpt>default property<ept id=\"p1\">*</ept>.","pos":[6309,6376],"source":" A class can specify at most one property as its *default property*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Default<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/default.md)</ept>.","pos":[6377,6476],"source":" For more information, see [Default](../../../visual-basic/language-reference/modifiers/default.md)."},{"pos":[6485,6493],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"<bpt id=\"p1\">**</bpt>Access Level.<ept id=\"p1\">**</ept>","pos":[6503,6520],"source":"**Access Level.**"},{"content":"Within a class, you can declare each member with its own access level.","pos":[6521,6591]},{"content":"Class members default to <bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept> access, except variables and constants, which default to <bpt id=\"p2\">[</bpt>Private<ept id=\"p2\">](../../../visual-basic/language-reference/modifiers/private.md)</ept> access.","pos":[6592,6825],"source":" Class members default to [Public](../../../visual-basic/language-reference/modifiers/public.md) access, except variables and constants, which default to [Private](../../../visual-basic/language-reference/modifiers/private.md) access."},{"content":"When a class has more restricted access than one of its members, the class access level takes precedence.","pos":[6826,6931]},{"content":"<bpt id=\"p1\">**</bpt>Scope.<ept id=\"p1\">**</ept>","pos":[6941,6951],"source":"**Scope.**"},{"content":"A class is in scope throughout its containing namespace, class, structure, or module.","pos":[6952,7037]},{"content":"The scope of every class member is the entire class.","pos":[7048,7100]},{"content":"<bpt id=\"p1\">**</bpt>Lifetime.<ept id=\"p1\">**</ept>","pos":[7111,7124],"source":"**Lifetime.**"},{"content":"Visual Basic does not support static classes.","pos":[7125,7170]},{"content":"The functional equivalent of a static class is provided by a module.","pos":[7171,7239]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Module Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/module-statement.md)</ept>.","pos":[7240,7358],"source":" For more information, see [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)."},{"content":"Class members have lifetimes depending on how and where they are declared.","pos":[7369,7443]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Lifetime in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)</ept>.","pos":[7444,7586],"source":" For more information, see [Lifetime in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)."},{"content":"<bpt id=\"p1\">**</bpt>Qualification.<ept id=\"p1\">**</ept>","pos":[7596,7614],"source":"**Qualification.**"},{"content":"Code outside a class must qualify a member's name with the name of that class.","pos":[7615,7693]},{"content":"If code inside a nested class makes an unqualified reference to a programming element, Visual Basic searches for the element first in the nested class, then in its containing class, and so on out to the outermost containing element.","pos":[7704,7936]},{"pos":[7945,7964],"content":"Classes and Modules","linkify":"Classes and Modules","nodes":[{"content":"Classes and Modules","pos":[0,19]}]},{"content":"These elements have many similarities, but there are some important differences as well.","pos":[7968,8056]},{"content":"<bpt id=\"p1\">**</bpt>Terminology.<ept id=\"p1\">**</ept>","pos":[8066,8082],"source":"**Terminology.**"},{"content":"Previous versions of Visual Basic recognize two types of modules: <bpt id=\"p1\">*</bpt>class modules<ept id=\"p1\">*</ept> (.cls files) and <bpt id=\"p2\">*</bpt>standard modules<ept id=\"p2\">*</ept> (.bas files).","pos":[8083,8214],"source":" Previous versions of Visual Basic recognize two types of modules: *class modules* (.cls files) and *standard modules* (.bas files)."},{"content":"The current version calls these <bpt id=\"p1\">*</bpt>classes<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>modules<ept id=\"p2\">*</ept>, respectively.","pos":[8215,8285],"source":" The current version calls these *classes* and *modules*, respectively."},{"content":"<bpt id=\"p1\">**</bpt>Shared Members.<ept id=\"p1\">**</ept>","pos":[8295,8314],"source":"**Shared Members.**"},{"content":"You can control whether a member of a class is a shared or instance member.","pos":[8315,8390]},{"content":"<bpt id=\"p1\">**</bpt>Object Orientation.<ept id=\"p1\">**</ept>","pos":[8400,8423],"source":"**Object Orientation.**"},{"content":"Classes are object-oriented, but modules are not.","pos":[8424,8473]},{"content":"You can create one or more instances of a class.","pos":[8474,8522]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>.","pos":[8523,8659],"source":" For more information, see [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)."},{"pos":[8668,8675],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8679,8764],"content":"The following example uses a <ph id=\"ph1\">`Class`</ph> statement to define a class and several members.","source":"The following example uses a `Class` statement to define a class and several members."},{"pos":[8914,8922],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[8926,9036],"source":"[Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Structures and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md)</ept><ph id=\"ph1\"> </ph>","pos":[9040,9161],"source":"[Structures and Classes](../../../visual-basic/programming-guide/language-features/data-types/structures-and-classes.md) "},{"content":"<bpt id=\"p1\">[</bpt>Interface Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[9165,9263],"source":"[Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Module Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/module-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[9267,9359],"source":"[Module Statement](../../../visual-basic/language-reference/statements/module-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[9363,9459],"source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Object Lifetime: How Objects Are Created and Destroyed<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)</ept><ph id=\"ph1\"> </ph>","pos":[9463,9656],"source":"[Object Lifetime: How Objects Are Created and Destroyed](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md) "},{"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[9660,9779],"source":"[Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Use a Generic Class<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept>","pos":[9783,9912],"source":"[How to: Use a Generic Class](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)"}]}