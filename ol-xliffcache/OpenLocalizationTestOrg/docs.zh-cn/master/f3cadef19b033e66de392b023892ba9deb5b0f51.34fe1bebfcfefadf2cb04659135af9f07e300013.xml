{"content":"---\ntitle: \"ICorProfilerInfo2::GetNotifiedExceptionClauseInfo Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerInfo2.GetNotifiedExceptionClauseInfo\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo2::GetNotifiedExceptionClauseInfo\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICorProfilerInfo2::GetNotifiedExceptionCaluseInfo method [.NET Framework profiling]\"\n  - \"GetNotifiedExceptionCaluseInfo method [.NET Framework profiling]\"\nms.assetid: f9594a7e-cb0c-4c48-accb-29f762aa0c21\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 12\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ICorProfilerInfo2::GetNotifiedExceptionClauseInfo Method\nGets the native address and frame information for the exception clause (`catch`/`finally`/`filter`) that is about to be run or has just been run.  \n  \n## Syntax  \n  \n```  \nHRESULT GetNotifiedExceptionClauseInfo(  \n    [out] COR_PRF_EX_CLAUSE_INFO *pinfo);  \n```  \n  \n#### Parameters  \n `pinfo`  \n [out] A pointer to a [COR_PRF_EX_CLAUSE_INFO](../../../../docs/framework/unmanaged-api/profiling/cor-prf-ex-clause-info-structure.md) structure that describes the current exception clause instance and its associated frame.  \n  \n## Remarks  \n When an exception notification is received, `GetNotifiedExceptionClauseInfo` can be used to get the native address and frame information for the exception clause (`catch`/`finally`/`filter`) that is about to be run ([ICorProfilerCallback::ExceptionCatcherEnter](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptioncatcherenter-method.md), [ICorProfilerCallback::ExceptionUnwindFinallyEnter](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionunwindfinallyenter-method.md), or [ICorProfilerCallback::ExceptionSearchFilterEnter](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionsearchfilterenter-method.md) callback is received by the profiler) or has just been run ([ICorProfilerCallback::ExceptionCatcherLeave](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptioncatcherleave-method.md), [ICorProfilerCallback::ExceptionUnwindFinallyLeave](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionunwindfinallyleave-method.md), or [ICorProfilerCallback::ExceptionSearchFilterLeave](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionsearchfilterleave-method.md) callback is received by the profiler).  \n  \n This call can be made at any time after one of the Enter callbacks above until either the matching Leave callback is received or a nested exception is thrown in the current clause, in which case there is no Leave notification for that clause. Note that it is not possible for a thrown exception to escape a `filter` exception clause, so there is always a Leave notification in that case.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See Also  \n [ICorProfilerInfo Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)   \n [ICorProfilerInfo2 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)","nodes":[{"pos":[12,85],"content":"ICorProfilerInfo2::GetNotifiedExceptionClauseInfo Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ICorProfilerInfo2::GetNotifiedExceptionClauseInfo Method | Microsoft Docs","pos":[0,73]}]},{"pos":[810,866],"content":"ICorProfilerInfo2::GetNotifiedExceptionClauseInfo Method","linkify":"ICorProfilerInfo2::GetNotifiedExceptionClauseInfo Method","nodes":[{"content":"ICorProfilerInfo2::GetNotifiedExceptionClauseInfo Method","pos":[0,56]}]},{"pos":[867,1012],"content":"Gets the native address and frame information for the exception clause (<ph id=\"ph1\">`catch`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`finally`</ph><ph id=\"ph4\">/</ph><ph id=\"ph5\">`filter`</ph>) that is about to be run or has just been run.","source":"Gets the native address and frame information for the exception clause (`catch`/`finally`/`filter`) that is about to be run or has just been run."},{"pos":[1021,1027],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1139,1149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] A pointer to a <bpt id=\"p1\">[</bpt>COR_PRF_EX_CLAUSE_INFO<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/cor-prf-ex-clause-info-structure.md)</ept> structure that describes the current exception clause instance and its associated frame.","pos":[1164,1386],"source":" [out] A pointer to a [COR_PRF_EX_CLAUSE_INFO](../../../../docs/framework/unmanaged-api/profiling/cor-prf-ex-clause-info-structure.md) structure that describes the current exception clause instance and its associated frame."},{"pos":[1395,1402],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1406,2680],"content":"When an exception notification is received, <ph id=\"ph1\">`GetNotifiedExceptionClauseInfo`</ph> can be used to get the native address and frame information for the exception clause (<ph id=\"ph2\">`catch`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`finally`</ph><ph id=\"ph5\">/</ph><ph id=\"ph6\">`filter`</ph>) that is about to be run (<bpt id=\"p1\">[</bpt>ICorProfilerCallback::ExceptionCatcherEnter<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptioncatcherenter-method.md)</ept>, <bpt id=\"p2\">[</bpt>ICorProfilerCallback::ExceptionUnwindFinallyEnter<ept id=\"p2\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionunwindfinallyenter-method.md)</ept>, or <bpt id=\"p3\">[</bpt>ICorProfilerCallback::ExceptionSearchFilterEnter<ept id=\"p3\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionsearchfilterenter-method.md)</ept> callback is received by the profiler) or has just been run (<bpt id=\"p4\">[</bpt>ICorProfilerCallback::ExceptionCatcherLeave<ept id=\"p4\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptioncatcherleave-method.md)</ept>, <bpt id=\"p5\">[</bpt>ICorProfilerCallback::ExceptionUnwindFinallyLeave<ept id=\"p5\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionunwindfinallyleave-method.md)</ept>, or <bpt id=\"p6\">[</bpt>ICorProfilerCallback::ExceptionSearchFilterLeave<ept id=\"p6\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionsearchfilterleave-method.md)</ept> callback is received by the profiler).","source":"When an exception notification is received, `GetNotifiedExceptionClauseInfo` can be used to get the native address and frame information for the exception clause (`catch`/`finally`/`filter`) that is about to be run ([ICorProfilerCallback::ExceptionCatcherEnter](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptioncatcherenter-method.md), [ICorProfilerCallback::ExceptionUnwindFinallyEnter](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionunwindfinallyenter-method.md), or [ICorProfilerCallback::ExceptionSearchFilterEnter](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionsearchfilterenter-method.md) callback is received by the profiler) or has just been run ([ICorProfilerCallback::ExceptionCatcherLeave](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptioncatcherleave-method.md), [ICorProfilerCallback::ExceptionUnwindFinallyLeave](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionunwindfinallyleave-method.md), or [ICorProfilerCallback::ExceptionSearchFilterLeave](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-exceptionsearchfilterleave-method.md) callback is received by the profiler)."},{"content":"This call can be made at any time after one of the Enter callbacks above until either the matching Leave callback is received or a nested exception is thrown in the current clause, in which case there is no Leave notification for that clause.","pos":[2687,2929]},{"content":"Note that it is not possible for a thrown exception to escape a <ph id=\"ph1\">`filter`</ph> exception clause, so there is always a Leave notification in that case.","pos":[2930,3074],"source":" Note that it is not possible for a thrown exception to escape a `filter` exception clause, so there is always a Leave notification in that case."},{"pos":[3083,3095],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3099,3203],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3210,3244],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[3251,3276],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[3283,3391],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[3400,3408],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>ICorProfilerInfo Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[3412,3523],"source":"[ICorProfilerInfo Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ICorProfilerInfo2 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)</ept>","pos":[3526,3639],"source":" [ICorProfilerInfo2 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)"}]}