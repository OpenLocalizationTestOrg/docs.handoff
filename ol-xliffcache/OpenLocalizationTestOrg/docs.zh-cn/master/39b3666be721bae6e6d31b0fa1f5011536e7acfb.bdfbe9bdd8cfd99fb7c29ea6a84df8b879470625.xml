{"content":"---\ntitle: Language independence and language-independent components\ndescription: Language independence and language-independent components\nkeywords: .NET, .NET Core\nauthor: dotnet-bot\nms.author: dotnetcontent\nms.date: 07/22/2016\nms.topic: article\nms.prod: .net\nms.technology: dotnet-standard\nms.devlang: dotnet\nms.assetid: 2dbed1bc-86f5-43cd-9a57-adbb1c5efba4\n---\n\n# Language independence and language-independent components\n\nThe .NET platform is language independent. This means that, as a developer, you can develop in one of the many languages that target the .NET platform, such as C#, F#, and Visual Basic. You can access the types and members of class libraries developed for the .NET platform without having to know the language in which they were originally written and without having to follow any of the original language's conventions. If you are a component developer, your component can be accessed by any .NET app regardless of its language.\n\n> [!NOTE]\n> This first part of this article discusses creating language-independent components - that is, components that can be consumed by apps that are written in any language. You can also create a single component or app from source code written in multiple languages; see [Cross-Language Interoperability](#cross-language-interoperability) in the second part of this article. \n\nTo fully interact with other objects written in any language, objects must expose to callers only those features that are common to all languages. This common set of features is defined by the Common Language Specification (CLS), which is a set of rules that apply to generated assemblies. The Common Language Specification is defined in Partition I, Clauses 7 through 11 of the [ECMA-335 Standard: Common Language Infrastructure](http://www.ecma-international.org/publications/standards/Ecma-335.htm). \n\nIf your component conforms to the Common Language Specification, it is guaranteed to be CLS-compliant and can be accessed from code in assemblies written in any programming language that supports the CLS. You can determine whether your component conforms to the Common Language Specification at compile time by applying the [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute to your source code. For more information, see The [CLSCompliantAttribute attribute](#the-clscompliantattribute-attribute).\n\nIn this article:\n\n* [CLS compliance rules](#cls-compliance-rules)\n\n    * [Types and type member signatures](#types-and-type-member-signatures)\n\n    * [Naming conventions](#naming-conventions)\n    \n    * [Type conversion](#type-conversion)\n    \n    * [Arrays](#arrays)\n    \n    * [Interfaces](#interfaces)\n    \n    * [Enumerations](#enumerations)\n    \n    * [Type members in general](#type-members-in-general)\n    \n    * [Member accessibility](#member-accessibility)\n    \n    * [Generic types and members](#generic-types-and-members)\n    \n    * [Constructors](#constructors)\n    \n    * [Properties](#properties)\n    \n    * [Events](#events)\n    \n    * [Overloads](#overloads)\n    \n    * [Exceptions](#exceptions)\n    \n    * [Attributes](#attributes)\n    \n* [CLSCompliantAttribute attribute](#the-clscompliantattribute-attribute)\n\n* [Cross-Language Interoperability](#cross-language-interoperability)\n\n## CLS compliance rules\n\nThis section discusses the rules for creating a CLS-compliant component. For a complete list of rules, see Partition I, Clause 11 of the [ECMA-335 Standard: Common Language Infrastructure](http://www.ecma-international.org/publications/standards/Ecma-335.htm).\n\n> [!NOTE]\n> The Common Language Specification discusses each rule for CLS compliance as it applies to consumers (developers who are programmatically accessing a component that is CLS-compliant), frameworks (developers who are using a language compiler to create CLS-compliant libraries), and extenders (developers who are creating a tool such as a language compiler or a code parser that creates CLS-compliant components). This article focuses on the rules as they apply to frameworks. Note, though, that some of the rules that apply to extenders may also apply to assemblies that are created using [Reflection.Emit](xref:System.Reflection.Emit). \n\nTo design a component that is language independent, you only need to apply the rules for CLS compliance to your component's public interface. Your private implementation does not have to conform to the specification. \n\n> [!IMPORTANT]\n> The rules for CLS compliance apply only to a component's public interface, not to its private implementation. \n\nFor example, unsigned integers other than [Byte](xref:System.Byte) are not CLS-compliant. Because the `Person` class in the following example exposes an `Age` property of type [UInt16](xref:System.UInt16), the following code displays a compiler warning.\n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class Person\n{\n   private UInt16 personAge = 0;\n\n   public UInt16 Age \n   { get { return personAge; } }\n}\n// The attempt to compile the example displays the following compiler warning:\n//    Public1.cs(10,18): warning CS3003: Type of 'Person.Age' is not CLS-compliant\n```\n\n```vb\n<Assembly: CLSCompliant(True)> \n\nPublic Class Person\n   Private personAge As UInt16\n\n   Public ReadOnly Property Age As UInt16\n      Get\n         Return personAge      \n      End Get   \n   End Property\nEnd Class\n' The attempt to compile the example displays the following compiler warning:\n'    Public1.vb(9) : warning BC40027: Return type of function 'Age' is not CLS-compliant.\n'    \n'       Public ReadOnly Property Age As UInt16\n'                                ~~~\n```\n\nYou can make the Person class CLS-compliant by changing the type of `Age` property from `UInt16` to [Int16](xref:System.Int16), which is a CLS-compliant, 16-bit signed integer. You do not have to change the type of the private `personAge` field. \n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class Person\n{\n   private Int16 personAge = 0;\n\n   public Int16 Age \n   { get { return personAge; } }\n}\n```\n\n```vb\n<Assembly: CLSCompliant(True)> \n\nPublic Class Person\n   Private personAge As UInt16\n\n   Public ReadOnly Property Age As Int16\n      Get\n         Return CType(personAge, Int16)      \n      End Get   \n   End Property\nEnd Class\n```\n\nA library's public interface consists of the following:\n\n* Definitions of public classes.\n\n* Definitions of the public members of public classes, and definitions of members accessible to derived classes (that is, protected members). \n\n* Parameters and return types of public methods of public classes, and parameters and return types of methods accessible to derived classes. \n\nThe rules for CLS compliance are listed in the following table. The text of the rules is taken verbatim from the [ECMA-335 Standard: Common Language Infrastructure](http://www.ecma-international.org/publications/standards/Ecma-335.htm), which is Copyright 2012 by Ecma International. More detailed information about these rules is found in the following sections. \n\nCategory | See | Rule | Rule Number\n-------- | --- | ---- | -----------\nAccessibility | [Member accessibility](#member-accessibility) | Accessibility shall not be changed when overriding inherited methods, except when overriding a method inherited from a different assembly with accessibility `family-or-assembly`. In this case, the override shall have accessibility `family`. | 10\nAccessibility | [Member accessibility](#member-accessibility) | The visibility and accessibility of types and members shall be such that types in the signature of any member shall be visible and accessible whenever the member itself is visible and accessible. For example, a public method that is visible outside its assembly shall not have an argument whose type is visible only within the assembly. The visibility and accessibility of types composing an instantiated generic type used in the signature of any member shall be visible and accessible whenever the member itself is visible and accessible. For example, an instantiated generic type present in the signature of a member that is visible outside its assembly shall not have a generic argument whose type is visible only within the assembly. | 12\nArrays | [Arrays](#arrays) | Arrays shall have elements with a CLS-compliant type, and all dimensions of the array shall have lower bounds of zero. Only the fact that an item is an array and the element type of the array shall be required to distinguish between overloads. When overloading is based on two or more array types the element types shall be named types. | 16\nAttributes | [Attributes](#attributes) | Attributes shall be of type [System.Attribute](xref:System.Attribute), or a type inheriting from it. | 41\nAttributes | [Attributes](#attributes) | The CLS only allows a subset of the encodings of custom attributes. The only types that shall appear in these encodings are (see Partition IV): [System.Type](xref:System.Type), [System.String](xref:System.String), [System.Char](xref:System.Char), [System.Boolean](xref:System.Boolean), [System.Byte](xref:System.Byte), [System.Int16](xref:System.Int16), [System.Int32](xref:System.Int32), [System.Int64](xref:System.Int64), [System.Single](xref:System.Single), [System.Double](xref:System.Double), and any enumeration type based on a CLS-compliant base integer type. | 34\nAttributes | [Attributes](#attributes) | The CLS does not allow publicly visible required modifiers (`modreq`, see Partition II), but does allow optional modifiers (`modopt`, see Partition II) it does not understand. | 35\nConstructors | [Constructors](#constructors) | An object constructor shall call some instance constructor of its base class before any access occurs to inherited instance data. (This does not apply to value types, which need not have constructors.)  | 21\nConstructors | [Constructors](#constructors) | An object constructor shall not be called except as part of the creation of an object, and an object shall not be initialized twice. | 22\nEnumerations | [Enumerations](#enumerations) | The underlying type of an enum shall be a built-in CLS integer type, the name of the field shall be \"value__\", and that field shall be marked `RTSpecialName`. |  7\nEnumerations | [Enumerations](#enumerations) | There are two distinct kinds of enums, indicated by the presence or absence of the [System.FlagsAttribute](xref:System.FlagsAttribute) (see Partition IV Library) custom attribute. One represents named integer values; the other represents named bit flags that can be combined to generate an unnamed value. The value of an `enum` is not limited to the specified values. |  8\nEnumerations | [Enumerations](#enumerations) | Literal static fields of an enum shall have the type of the enum itself. |  9\nEvents | [Events](#events) | The methods that implement an event shall be marked `SpecialName` in the metadata. |29\nEvents | [Events](#events) | The accessibility of an event and of its accessors shall be identical. |30\nEvents | [Events](#events) | The `add` and `remove` methods for an event shall both either be present or absent. |31\nEvents | [Events](#events) | The `add`and `remove` methods for an event shall each take one parameter whose type defines the type of the event and that shall be derived from [System.Delegate](xref:System.Delegate). |32\nEvents | [Events](#events) | Events shall adhere to a specific naming pattern. The SpecialName attribute referred to in CLS rule 29 shall be ignored in appropriate name comparisons and shall adhere to identifier rules.  |33\nExceptions | [Exceptions](#exceptions) | Objects that are thrown shall be of type [System.Exception](xref:System.Exception) or a type inheriting from it. Nonetheless, CLS-compliant methods are not required to block the propagation of other types of exceptions. | 40\nGeneral | [CLS compliance rules](#cls-compliance-rules) | CLS rules apply only to those parts of a type that are accessible or visible outsideof the defining assembly. | 1\nGeneral | [CLS compliance rules](#cls-compliance-rules) | Members of non-CLS compliant types shall not be marked CLS-compliant. | 2\nGenerics | [Generic types and members](#generic-types-and-members) | Nested types shall have at least as many generic parameters as the enclosing type. Generic parameters in a nested type correspond by position to the generic parameters in its enclosing type.  | 42\nGenerics | [Generic types and members](#generic-types-and-members) | The name of a generic type shall encode the number of type parameters declared on the non-nested type, or newly introduced to the type if nested, according to the rules defined above. | 43\nGenerics | [Generic types and members](#generic-types-and-members) | A generic type shall redeclare sufficient constraints to guarantee that any constraints on the base type, or interfaces would be satisfied by the generic type constraints. | 44\nGenerics | [Generic types and members](#generic-types-and-members) | Types used as constraints on generic parameters shall themselves be CLS-compliant. | 45\nGenerics | [Generic types and members](#generic-types-and-members) | The visibility and accessibility of members (including nested types) in an instantiated generic type shall be considered to be scoped to the specific instantiation rather than the generic type declaration as a whole. Assuming this, the visibility and accessibility rules of CLS rule 12 still apply. | 46\nGenerics | [Generic types and members](#generic-types-and-members) | For each abstract or virtual generic method, there shall be a default concrete (nonabstract) implementation | 47\nInterfaces | [Interfaces](#interfaces) | CLS-compliant interfaces shall not require the definition of non-CLS compliantmethods in order to implement them. | 18\nInterfaces | [Interfaces](#interfaces) | CLS-compliant interfaces shall not define static methods, nor shall they define fields. | 19\nMembers | [Type members in general](#type-members-in-general) | Global static fields and methods are not CLS-compliant. | 36\nMembers | -- | The value of a literal static is specified through the use of field initialization metadata. A CLS-compliant literal must have a value specified in field initialization metadata that is of exactly the same type as the literal (or of the underlying type, if that literal is an `enum`). | 13\nMembers | [Type members in general](#type-members-in-general) | The vararg constraint is not part of the CLS, and the only calling convention supported by the CLS is the standard managed calling convention. | 15\nNaming conventions | [Naming conventions](#naming-conventions) | Assemblies shall follow Annex 7 of Technical Report 15 of the Unicode Standard3.0 governing the set of characters permitted to start and be included in identifiers, available online at [Unicode Normalization Forms](http://www.unicode.org/unicode/reports/tr15/tr15-18.html). Identifiers shall be in the canonical format defined by Unicode Normalization Form C. For CLS purposes, two identifiersare the same if their lowercase mappings (as specified by the Unicode locale-insensitive, one-to-one lowercase mappings) are the same. That is, for two identifiers to be considered different under the CLS they shall differ in more than simply their case. However, in order to override an inherited definition the CLI requires the precise encoding of the original declaration be used. | 4\nOverloading | [Naming conventions](#naming-conventions) | All names introduced in a CLS-compliant scope shall be distinct independent of kind, except where the names are identical and resolved via overloading. That is, while the CTS allows a single type to use the same name for a method and a field, the CLS does not. | 5\nOverloading | [Naming conventions](#naming-conventions) | Fields and nested types shall be distinct by identifier comparison alone, eventhough the CTS allows distinct signatures to be distinguished. Methods, properties, and events that have the same name (by identifier comparison) shall differ by more than just the return type,except as specified in CLS Rule 39 | 6\nOverloading | [Overloads](#overloads) | Only properties and methods can be overloaded. | 37\nOverloading | [Overloads](#overloads) |Properties and methods can be overloaded based only on the number and types of their parameters, except the conversion operators named `op_Implicit` and `op_Explicit`, which can also be overloaded based on their return type. | 38\nOverloading | -- | If two or more CLS-compliant methods declared in a type have the same nameand, for a specific set of type instantiations, they have the same parameter and return types, then all these methods shall be semantically equivalent at those type instantiations. | 48\nProperties | [Properties](#properties) | The methods that implement the getter and setter methods of a property shall be marked `SpecialName` in the metadata. | 24\nProperties | [Properties](#properties) | A property’s accessors shall all be static, all be virtual, or all be instance. | 26\nProperties | [Properties](#properties) | The type of a property shall be the return type of the getter and the type of the last argument of the setter. The types of the parameters of the property shall be the types of the parameters to the getter and the types of all but the final parameter of the setter. All of these types shall be CLS-compliant, and shall not be managed pointers (that is, shall not be passed by reference). | 27\nProperties | [Properties](#properties) | Properties shall adhere to a specific naming pattern. The `SpecialName` attribute referred to in CLS rule 24 shall be ignored in appropriate name comparisons and shall adhere to identifier rules. A property shall have a getter method, a setter method, or both. | 28\nType conversion | [Type conversion](#type-conversion) | If either op_Implicit or op_Explicit is provided, an alternate means of providing the coercion shall be provided. | 39\nTypes | [Types and type member signatures](#types-and-type-member-signatures) | Boxed value types are not CLS-compliant. | 3\nTypes | [Types and type member signatures](#types-and-type-member-signatures) | All types appearing in a signature shall be CLS-compliant. All types composing an instantiated generic type shall be CLS-compliant. | 11\nTypes | [Types and type member signatures](#types-and-type-member-signatures) | Typed references are not CLS-compliant. | 14\nTypes | [Types and type member signatures](#types-and-type-member-signatures) | Unmanaged pointer types are not CLS-compliant. | 17\nTypes | [Types and type member signatures](#types-and-type-member-signatures) | CLS-compliant classes, value types, and interfaces shall not require the implementation of non-CLS-compliant members | 20\nTypes | [Types and type member signatures](#types-and-type-member-signatures) | [System.Object](xref:System.Object) is CLS-compliant. Any other CLS-compliant class shall inherit from a CLS-compliant class. | 23\n\n### Types and type member signatures\n\nThe [System.Object](xref:System.Object) type is CLS-compliant and is the base type of all object types in the .NET Framework type system. Inheritance in the .NET Framework is either implicit (for example, the [String](xref:System.String) class implicitly inherits from the `Object` class) or explicit (for example, the [CultureNotFoundException](xref:System.Globalization.CultureNotFoundException) class explicitly inherits from the [ArgumentException](xref:System.ArgumentException) class, which explicitly inherits from the [Exception](xref:System.Exception) class. For a derived type to be CLS compliant, its base type must also be CLS-compliant. \n\nThe following example shows a derived type whose base type is not CLS-compliant. It defines a base `Counter` class that uses an unsigned 32-bit integer as a counter. Because the class provides counter functionality by wrapping an unsigned integer, the class is marked as non-CLS-compliant. As a result, a derived class, `NonZeroCounter`, is also not CLS-compliant. \n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\n[CLSCompliant(false)] \npublic class Counter\n{\n   UInt32 ctr;\n\n   public Counter()\n   {\n      ctr = 0;\n   }\n\n   protected Counter(UInt32 ctr)\n   {\n      this.ctr = ctr;\n   }\n\n   public override string ToString()\n   {\n      return String.Format(\"{0}). \", ctr);\n   }\n\n   public UInt32 Value\n   {\n      get { return ctr; }\n   }\n\n   public void Increment() \n   {\n      ctr += (uint) 1;\n   }\n}\n\npublic class NonZeroCounter : Counter\n{\n   public NonZeroCounter(int startIndex) : this((uint) startIndex)\n   {\n   }\n\n   private NonZeroCounter(UInt32 startIndex) : base(startIndex)\n   {\n   }\n}\n// Compilation produces a compiler warning like the following:\n//    Type3.cs(37,14): warning CS3009: 'NonZeroCounter': base type 'Counter' is not\n//            CLS-compliant\n//    Type3.cs(7,14): (Location of symbol related to previous warning)\n```\n\n```vb\n<Assembly: CLSCompliant(True)>\n\n<CLSCompliant(False)> _ \nPublic Class Counter\n   Dim ctr As UInt32\n\n   Public Sub New\n      ctr = 0\n   End Sub\n\n   Protected Sub New(ctr As UInt32)\n      ctr = ctr\n   End Sub\n\n   Public Overrides Function ToString() As String\n      Return String.Format(\"{0}). \", ctr)\n   End Function\n\n   Public ReadOnly Property Value As UInt32\n      Get\n         Return ctr\n      End Get\n   End Property\n\n   Public Sub Increment()\n      ctr += CType(1, UInt32)\n   End Sub\nEnd Class\n\nPublic Class NonZeroCounter : Inherits Counter\n   Public Sub New(startIndex As Integer)\n      MyClass.New(CType(startIndex, UInt32))\n   End Sub\n\n   Private Sub New(startIndex As UInt32)\n      MyBase.New(CType(startIndex, UInt32))\n   End Sub\nEnd Class\n' Compilation produces a compiler warning like the following:\n'    Type3.vb(34) : warning BC40026: 'NonZeroCounter' is not CLS-compliant \n'    because it derives from 'Counter', which is not CLS-compliant.\n'    \n'    Public Class NonZeroCounter : Inherits Counter\n'                 ~~~~~~~~~~~~~~\n```\n\nAll types that appear in member signatures, including a method's return type or a property type, must be CLS-compliant. In addition, for generic types: \n\n* All types that compose an instantiated generic type must be CLS-compliant.\n\n* All types used as constraints on generic parameters must be CLS-compliant. \n\nThe .NET [common type system](common-type-system.md) includes a number of built-in types that are supported directly by the common language runtime and are specially encoded in an assembly's metadata. Of these intrinsic types, the types listed in the following table are CLS-compliant. \n\n\nCLS-compliant type | Description\n------------------ | -----------\n[Byte](xref:System.Byte) | 8-bit unsigned integer \n[Int16](xref:System.Int16) | 16-bit signed integer \n[Int32](xref:System.Int32) | 32-bit signed integer \n[Int64](xref:System.Int64) | 64-bit signed integer\n[Single](xref:System.Single) | Single-precision floating-point value\n[Double](xref:System.Double) | Double-precision floating-point value\n[Boolean](xref:System.Boolean) | true or false value type \n[Char](xref:System.Char) | UTF-16 encoded code unit\n[Decimal](xref:System.Decimal) | Non-floating-point decimal number\n[IntPtr](xref:System.IntPtr) | Pointer or handle of a platform-defined size\n[String](xref:System.String) | Collection of zero, one, or more Char objects \n \nThe intrinsic types listed in the following table are not CLS-Compliant.\n\n\nNon-compliant type | Description | CLS-compliant alternative\n------------------ | ----------- | -------------------------\n[SByte](xref:System.SByte) | 8-bit signed integer data type | [Int16](xref:System.Int16)\n[UInt16](xref:System.UInt16) | 16-bit unsigned integer | [Int32](xref:System.Int32)\n[UInt32](xref:System.UInt32) | 32-bit unsigned integer | [Int64](xref:System.Int64)\n[UInt64](xref:System.UInt64) | 64-bit unsigned integer | [Int64](xref:System.Int64) (may overflow), [BigInteger](xref:System.Numerics.BigInteger), or [Double](xref:System.Double)\n[UIntPtr](xref:System.UIntPtr) | Unsigned pointer or handle | [IntPtr](xref:System.IntPtr)\n \n The .NET Framework Class Library or any other class library may include other types that aren't CLS-compliant; for example: \n \n * Boxed value types. The following C# example creates a class that has a public property of type `int`* named `Value`. Because an `int`* is a boxed value type, the compiler flags it as non-CLS-compliant.\n\n  ```csharp\n  using System;\n\n  [assembly:CLSCompliant(true)]\n\n  public unsafe class TestClass\n  {\n     private int* val;\n\n     public TestClass(int number)\n     {\n        val = (int*) number;\n     }\n\n     public int* Value {\n        get { return val; }        \n     }\n  }\n  // The compiler generates the following output when compiling this example:\n  //        warning CS3003: Type of 'TestClass.Value' is not CLS-compliant\n  ```\n\n* Typed references, which are special constructs that contain a reference to an object and a reference to a type.\n\nIf a type is not CLS-compliant, you should apply the [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute with an *isCompliant* parameter with a value of `false` to it. For more information, see the [CLSCompliantAttribute attribute](#the-clscompliantattribute-attribute) section.  \n\nThe following example illustrates the problem of CLS compliance in a method signature and in generic type instantiation. It defines an `InvoiceItem` class with a property of type [UInt32](xref:System.UInt32), a property of type [Nullable(Of UInt32)](xref:System.Nullable%601), and a constructor with parameters of type `UInt32` and `Nullable(Of UInt32)`. You get four compiler warnings when you try to compile this example.\n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class InvoiceItem\n{\n   private uint invId = 0;\n   private uint itemId = 0;\n   private Nullable<uint> qty;\n\n   public InvoiceItem(uint sku, Nullable<uint> quantity)\n   {\n      itemId = sku;\n      qty = quantity;\n   }\n\n   public Nullable<uint> Quantity\n   {\n      get { return qty; }\n      set { qty = value; }\n   }\n\n   public uint InvoiceId\n   {\n      get { return invId; }\n      set { invId = value; }\n   }\n}\n// The attempt to compile the example displays the following output:\n//    Type1.cs(13,23): warning CS3001: Argument type 'uint' is not CLS-compliant\n//    Type1.cs(13,33): warning CS3001: Argument type 'uint?' is not CLS-compliant\n//    Type1.cs(19,26): warning CS3003: Type of 'InvoiceItem.Quantity' is not CLS-compliant\n//    Type1.cs(25,16): warning CS3003: Type of 'InvoiceItem.InvoiceId' is not CLS-compliant\n```\n\n```vb\n<Assembly: CLSCompliant(True)>\n\nPublic Class InvoiceItem\n\n   Private invId As UInteger = 0\n   Private itemId As UInteger = 0\n   Private qty AS Nullable(Of UInteger)\n\n   Public Sub New(sku As UInteger, quantity As Nullable(Of UInteger))\n      itemId = sku\n      qty = quantity\n   End Sub\n\n   Public Property Quantity As Nullable(Of UInteger)\n      Get\n         Return qty\n      End Get   \n      Set \n         qty = value\n      End Set   \n   End Property\n\n   Public Property InvoiceId As UInteger\n      Get   \n         Return invId\n      End Get\n      Set \n         invId = value\n      End Set   \n   End Property\nEnd Class\n' The attempt to compile the example displays output similar to the following:\n'    Type1.vb(13) : warning BC40028: Type of parameter 'sku' is not CLS-compliant.\n'    \n'       Public Sub New(sku As UInteger, quantity As Nullable(Of UInteger))\n'                      ~~~\n'    Type1.vb(13) : warning BC40041: Type 'UInteger' is not CLS-compliant.\n'    \n'       Public Sub New(sku As UInteger, quantity As Nullable(Of UInteger))\n'                                                               ~~~~~~~~\n'    Type1.vb(18) : warning BC40041: Type 'UInteger' is not CLS-compliant.\n'    \n'       Public Property Quantity As Nullable(Of UInteger)\n'                                               ~~~~~~~~\n'    Type1.vb(27) : warning BC40027: Return type of function 'InvoiceId' is not CLS-compliant.\n'    \n'       Public Property InvoiceId As UInteger\n```\n\nTo eliminate the compiler warnings, replace the non-CLS-compliant types in the `InvoiceItem` public interface with compliant types:\n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class InvoiceItem\n{\n   private uint invId = 0;\n   private uint itemId = 0;\n   private Nullable<int> qty;\n\n   public InvoiceItem(int sku, Nullable<int> quantity)\n   {\n      if (sku <= 0)\n         throw new ArgumentOutOfRangeException(\"The item number is zero or negative.\");\n      itemId = (uint) sku;\n\n      qty = quantity;\n   }\n\n   public Nullable<int> Quantity\n   {\n      get { return qty; }\n      set { qty = value; }\n   }\n\n   public int InvoiceId\n   {\n      get { return (int) invId; }\n      set { \n         if (value <= 0)\n            throw new ArgumentOutOfRangeException(\"The invoice number is zero or negative.\");\n         invId = (uint) value; }\n   }\n}\n```\n\n```vb\nAssembly: CLSCompliant(True)>\n\nPublic Class InvoiceItem\n\n   Private invId As UInteger = 0\n   Private itemId As UInteger = 0\n   Private qty AS Nullable(Of Integer)\n\n   Public Sub New(sku As Integer, quantity As Nullable(Of Integer))\n      If sku <= 0 Then\n         Throw New ArgumentOutOfRangeException(\"The item number is zero or negative.\")\n      End If\n      itemId = CUInt(sku)\n      qty = quantity\n   End Sub\n\n   Public Property Quantity As Nullable(Of Integer)\n      Get\n         Return qty\n      End Get   \n      Set \n         qty = value\n      End Set   \n   End Property\n\n   Public Property InvoiceId As Integer\n      Get   \n         Return CInt(invId)\n      End Get\n      Set \n         invId = CUInt(value)\n      End Set   \n   End Property\nEnd Class\n```\n\nIn addition to the specific types listed, some categories of types are not CLS compliant. These include unmanaged pointer types and function pointer types. The following example generates a compiler warning because it uses a pointer to an integer to create an array of integers. \n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class ArrayHelper\n{\n   unsafe public static Array CreateInstance(Type type, int* ptr, int items)\n   {\n      Array arr = Array.CreateInstance(type, items);\n      int* addr = ptr;\n      for (int ctr = 0; ctr < items; ctr++) {\n          int value = *addr;\n          arr.SetValue(value, ctr);\n          addr++;\n      }\n      return arr;\n   }\n}   \n// The attempt to compile this example displays the following output:\n//    UnmanagedPtr1.cs(8,57): warning CS3001: Argument type 'int*' is not CLS-compliant\n```\n\n```vb\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class ArrayHelper\n{\n   unsafe public static Array CreateInstance(Type type, int* ptr, int items)\n   {\n      Array arr = Array.CreateInstance(type, items);\n      int* addr = ptr;\n      for (int ctr = 0; ctr < items; ctr++) {\n          int value = *addr;\n          arr.SetValue(value, ctr);\n          addr++;\n      }\n      return arr;\n   }\n}   \n// The attempt to compile this example displays the following output:\n//    UnmanagedPtr1.cs(8,57): warning CS3001: Argument type 'int*' is not CLS-compliant\n```\n\nFor CLS-compliant abstract classes (that is, classes marked as `abstract` in C#), all members of the class must also be CLS-compliant. \n\n### Naming conventions\n\nBecause some programming languages are case-insensitive, identifiers (such as the names of namespaces, types, and members) must differ by more than case. Two identifiers are considered equivalent if their lowercase mappings are the same. The following C# example defines two public classes, `Person` and `person`. Because they differ only by case, the C# compiler flags them as not CLS-compliant. \n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class Person : person\n{\n\n}\n\npublic class person\n{\n\n}\n// Compilation produces a compiler warning like the following:\n//    Naming1.cs(11,14): warning CS3005: Identifier 'person' differing \n//                       only in case is not CLS-compliant\n//    Naming1.cs(6,14): (Location of symbol related to previous warning)\n```\n\nProgramming language identifiers, such as the names of namespaces, types, and members, must conform to the [Unicode Standard 3.0, Technical Report 15, Annex 7](http://www.unicode.org/reports/tr15/tr15-18.html). This means that:\n\n* The first character of an identifier can be any Unicode uppercase letter, lowercase letter, title case letter, modifier letter, other letter, or letter number. For information on Unicode character categories, see the [System.Globalization.UnicodeCategory](xref:System.Globalization.UnicodeCategory) enumeration. \n\n* Subsequent characters can be from any of the categories as the first character, and can also include non-spacing marks, spacing combining marks, decimal numbers, connector punctuations, and formatting codes. \n\nBefore you compare identifiers, you should filter out formatting codes and convert the identifiers to Unicode Normalization Form C, because a single character can be represented by multiple UTF-16-encoded code units. Character sequences that produce the same code units in Unicode Normalization Form C are not CLS-compliant. The following example defines a property named `Å`, which consists of the character ANGSTROM SIGN (U+212B), and a second property named `Å` which consists of the character LATIN CAPITAL LETTER A WITH RING ABOVE (U+00C5). The C# compiler flags the source code as non-CLS-compliant.\n\n```csharp\npublic class Size\n{\n   private double a1;\n   private double a2;\n\n   public double Å\n   {\n       get { return a1; }\n       set { a1 = value; }\n   }         \n\n   public double Å\n   {\n       get { return a2; }\n       set { a2 = value; }\n   }\n}\n// Compilation produces a compiler warning like the following:\n//    Naming2a.cs(16,18): warning CS3005: Identifier 'Size.Å' differing only in case is not\n//            CLS-compliant\n//    Naming2a.cs(10,18): (Location of symbol related to previous warning)\n//    Naming2a.cs(18,8): warning CS3005: Identifier 'Size.Å.get' differing only in case is not\n//            CLS-compliant\n//    Naming2a.cs(12,8): (Location of symbol related to previous warning)\n//    Naming2a.cs(19,8): warning CS3005: Identifier 'Size.Å.set' differing only in case is not\n//            CLS-compliant\n//    Naming2a.cs(13,8): (Location of symbol related to previous warning)\n```\n\n```vb\n<Assembly: CLSCompliant(True)>\nPublic Class Size\n   Private a1 As Double\n   Private a2 As Double\n\n   Public Property Å As Double\n       Get\n          Return a1\n       End Get\n       Set \n          a1 = value\n       End Set\n   End Property         \n\n   Public Property Å As Double\n       Get\n          Return a2\n       End Get\n       Set\n          a2 = value\n       End Set   \n   End Property\nEnd Class\n' Compilation produces a compiler warning like the following:\n'    Naming1.vb(9) : error BC30269: 'Public Property Å As Double' has multiple definitions\n'     with identical signatures.\n'    \n'       Public Property Å As Double\n'                       ~\n```\n\nMember names within a particular scope (such as the namespaces within an assembly, the types within a namespace, or the members within a type) must be unique except for names that are resolved through overloading. This requirement is more stringent than that of the common type system, which allows multiple members within a scope to have identical names as long as they are different kinds of members (for example, one is a method and one is a field). In particular, for type members: \n\n* Fields and nested types are distinguished by name alone. \n\n* Methods, properties, and events that have the same name must differ by more than just return type. \n\nThe following example illustrates the requirement that member names must be unique within their scope. It defines a class named `Converter` that includes four members named `Conversion`. Three are methods, and one is a property. The method that includes an `Int64` parameter is uniquely named, but the two methods with an `Int32` parameter are not, because return value is not considered a part of a member's signature. The `Conversion` property also violates this requirement, because properties cannot have the same name as overloaded methods. \n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class Converter\n{\n   public double Conversion(int number)\n   {\n      return (double) number;\n   }\n\n   public float Conversion(int number)\n   {\n      return (float) number;\n   }\n\n   public double Conversion(long number)\n   {\n      return (double) number;\n   }\n\n   public bool Conversion\n   {\n      get { return true; }\n   }     \n}  \n// Compilation produces a compiler error like the following:\n//    Naming3.cs(13,17): error CS0111: Type 'Converter' already defines a member called\n//            'Conversion' with the same parameter types\n//    Naming3.cs(8,18): (Location of symbol related to previous error)\n//    Naming3.cs(23,16): error CS0102: The type 'Converter' already contains a definition for\n//            'Conversion'\n//    Naming3.cs(8,18): (Location of symbol related to previous error)\n```\n\n```vb\n<Assembly: CLSCompliant(True)>\n\nPublic Class Converter\n   Public Function Conversion(number As Integer) As Double\n      Return CDbl(number)\n   End Function\n\n   Public Function Conversion(number As Integer) As Single\n      Return CSng(number)\n   End Function\n\n   Public Function Conversion(number As Long) As Double\n      Return CDbl(number)\n   End Function\n\n   Public ReadOnly Property Conversion As Boolean\n      Get\n         Return True\n      End Get   \n   End Property     \nEnd Class\n' Compilation produces a compiler error like the following:\n'    Naming3.vb(8) : error BC30301: 'Public Function Conversion(number As Integer) As Double' \n'                    and 'Public Function Conversion(number As Integer) As Single' cannot \n'                    overload each other because they differ only by return types.\n'    \n'       Public Function Conversion(number As Integer) As Double\n'                       ~~~~~~~~~~\n'    Naming3.vb(20) : error BC30260: 'Conversion' is already declared as 'Public Function \n'                     Conversion(number As Integer) As Single' in this class.\n'    \n'       Public ReadOnly Property Conversion As Boolean\n'                                ~~~~~~~~~~\n```\n\nIndividual languages include unique keywords, so languages that target the common language runtime must also provide some mechanism for referencing identifiers (such as type names) that coincide with keywords. For example, `case` is a keyword in both C# and Visual Basic. However, the following Visual Basic example is able to disambiguate a class named `case` from the `case` keyword by using opening and closing braces. Otherwise, the example would produce the error message, \"Keyword is not valid as an identifier,\" and fail to compile. \n\n```vb\nPublic Class [case]\n   Private _id As Guid\n   Private name As String  \n\n   Public Sub New(name As String)\n      _id = Guid.NewGuid()\n      Me.name = name \n   End Sub   \n\n   Public ReadOnly Property ClientName As String\n      Get\n         Return name\n      End Get\n   End Property\nEnd Class\n```\n\nThe following C# example is able to instantiate the `case` class by using the @ symbol to disambiguate the identifier from the language keyword. Without it, the C# compiler would display two error messages, \"Type expected\" and \"Invalid expression term 'case'.\" \n\n```csharp\nusing System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      @case c = new @case(\"John\");\n      Console.WriteLine(c.ClientName);\n   }\n}\n```\n\n### Type conversion\n\nThe Common Language Specification defines two conversion operators:\n\n* `op_Implicit`, which is used for widening conversions that do not result in loss of data or precision. For example, the [Decimal](xref:System.Decimal) structure includes an overloaded `op_Implicit` operator to convert values of integral types and [Char](xref:System.Char) values to `Decimal` values. \n\n* `op_Explicit`, which is used for narrowing conversions that can result in loss of magnitude (a value is converted to a value that has a smaller range) or precision. For example, the `Decimal` structure includes an overloaded `op_Explicit` operator to convert [Double](xref:System.Double) and [Single](xref:System.Single) values to `Decimal` and to convert `Decimal` values to integral values, `Double`, `Single`, and `Char`. \n\nHowever, not all languages support operator overloading or the definition of custom operators. If you choose to implement these conversion operators, you should also provide an alternate way to perform the conversion. We recommend that you provide `From`Xxx and `To`Xxx methods. \n\nThe following example defines CLS-compliant implicit and explicit conversions. It creates a `UDouble`class that represents an signed double-precision, floating-point number. It provides for implicit conversions from `UDouble` to `Double` and for explicit conversions from `UDouble` to `Single`, `Double` to `UDouble`, and `Single` to `UDouble`. It also defines a `ToDouble` method as an alternative to the implicit conversion operator and the `ToSingle`, `FromDouble`, and `FromSingle` methods as alternatives to the explicit conversion operators. \n\n```csharp\nusing System;\n\npublic struct UDouble\n{\n   private double number;\n\n   public UDouble(double value)\n   {\n      if (value < 0)\n         throw new InvalidCastException(\"A negative value cannot be converted to a UDouble.\");\n\n      number = value;\n   }\n\n   public UDouble(float value)\n   {\n      if (value < 0)\n         throw new InvalidCastException(\"A negative value cannot be converted to a UDouble.\");\n\n      number = value;\n   }\n\n   public static readonly UDouble MinValue = (UDouble) 0.0;\n   public static readonly UDouble MaxValue = (UDouble) Double.MaxValue;\n\n   public static explicit operator Double(UDouble value)\n   {\n      return value.number;\n   }\n\n   public static implicit operator Single(UDouble value)\n   {\n      if (value.number > (double) Single.MaxValue) \n         throw new InvalidCastException(\"A UDouble value is out of range of the Single type.\");\n\n      return (float) value.number;         \n   }\n\n   public static explicit operator UDouble(double value)\n   {\n      if (value < 0)\n         throw new InvalidCastException(\"A negative value cannot be converted to a UDouble.\");\n\n      return new UDouble(value);\n   } \n\n   public static implicit operator UDouble(float value)\n   {\n      if (value < 0)\n         throw new InvalidCastException(\"A negative value cannot be converted to a UDouble.\");\n\n      return new UDouble(value);\n   } \n\n   public static Double ToDouble(UDouble value)\n   {\n      return (Double) value;\n   }   \n\n   public static float ToSingle(UDouble value)\n   {\n      return (float) value;\n   }   \n\n   public static UDouble FromDouble(double value)\n   {\n      return new UDouble(value);\n   }\n\n   public static UDouble FromSingle(float value)\n   {\n      return new UDouble(value);\n   }   \n}\n```\n\n```vb\nPublic Structure UDouble\n   Private number As Double\n\n   Public Sub New(value As Double)\n      If value < 0 Then\n         Throw New InvalidCastException(\"A negative value cannot be converted to a UDouble.\")\n      End If\n      number = value\n   End Sub\n\n   Public Sub New(value As Single)\n      If value < 0 Then\n         Throw New InvalidCastException(\"A negative value cannot be converted to a UDouble.\")\n      End If\n      number = value\n   End Sub\n\n   Public Shared ReadOnly MinValue As UDouble = CType(0.0, UDouble)\n   Public Shared ReadOnly MaxValue As UDouble = Double.MaxValue\n\n   Public Shared Widening Operator CType(value As UDouble) As Double\n      Return value.number\n   End Operator\n\n   Public Shared Narrowing Operator CType(value As UDouble) As Single\n      If value.number > CDbl(Single.MaxValue) Then\n         Throw New InvalidCastException(\"A UDouble value is out of range of the Single type.\")\n      End If\n      Return CSng(value.number)         \n   End Operator\n\n   Public Shared Narrowing Operator CType(value As Double) As UDouble\n      If value < 0 Then\n         Throw New InvalidCastException(\"A negative value cannot be converted to a UDouble.\")\n      End If\n      Return New UDouble(value)\n   End Operator \n\n   Public Shared Narrowing Operator CType(value As Single) As UDouble\n      If value < 0 Then\n         Throw New InvalidCastException(\"A negative value cannot be converted to a UDouble.\")\n      End If\n      Return New UDouble(value)\n   End Operator \n\n   Public Shared Function ToDouble(value As UDouble) As Double\n      Return CType(value, Double)\n   End Function   \n\n   Public Shared Function ToSingle(value As UDouble) As Single\n      Return CType(value, Single)\n   End Function   \n\n   Public Shared Function FromDouble(value As Double) As UDouble\n      Return New UDouble(value)\n   End Function\n\n   Public Shared Function FromSingle(value As Single) As UDouble\n      Return New UDouble(value)\n   End Function   \nEnd Structure\n```\n\n### Arrays\n\nCLS-compliant arrays conform to the following rules: \n\n* All dimensions of an array must have a lower bound of zero. The following example creates a non-CLS-compliant array with a lower bound of one. Note that, despite the presence of the [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute, the compiler does not detect that the array returned by the `Numbers.GetTenPrimes` method is not CLS-compliant. \n\n  ```csharp\n  [assembly: CLSCompliant(true)]\n\n  public class Numbers\n  {\n    public static Array GetTenPrimes()\n    {\n        Array arr = Array.CreateInstance(typeof(Int32), new int[] {10}, new int[] {1});\n        arr.SetValue(1, 1);\n        arr.SetValue(2, 2);\n        arr.SetValue(3, 3);\n        arr.SetValue(5, 4);\n        arr.SetValue(7, 5);\n        arr.SetValue(11, 6); \n        arr.SetValue(13, 7);\n        arr.SetValue(17, 8);\n        arr.SetValue(19, 9);\n        arr.SetValue(23, 10);\n\n        return arr; \n    }\n  }\n  ```\n\n  ```vb\n  <Assembly: CLSCompliant(True)>\n\n  Public Class Numbers\n     Public Shared Function GetTenPrimes() As Array\n        Dim arr As Array = Array.CreateInstance(GetType(Int32), {10}, {1})\n        arr.SetValue(1, 1)\n        arr.SetValue(2, 2)\n        arr.SetValue(3, 3)\n        arr.SetValue(5, 4)\n        arr.SetValue(7, 5)\n        arr.SetValue(11, 6)\n        arr.SetValue(13, 7)\n        arr.SetValue(17, 8)\n        arr.SetValue(19, 9)\n        arr.SetValue(23, 10)\n        Return arr\n     End Function\n  End Class\n  ```\n\n* All array elements must consist of CLS-compliant types. The following example defines two methods that return non-CLS-compliant arrays. The first returns an array of [UInt32](xref:System.UInt32) values. The second returns an [Object](xref:System.Object) array that includes [Int32](xref:System.Int32) and `UInt32` values. Although the compiler identifies the first array as non-compliant because of its `UInt32` type, it fails to recognize that the second array includes non-CLS-compliant elements. \n\n  ```csharp\n  using System;\n\n  [assembly: CLSCompliant(true)]\n\n  public class Numbers\n  {\n    public static UInt32[] GetTenPrimes()\n    {\n        uint[] arr = { 1u, 2u, 3u, 5u, 7u, 11u, 13u, 17u, 19u };\n        return arr;\n    }\n\n    public static Object[] GetFivePrimes()\n    {\n        Object[] arr = { 1, 2, 3, 5u, 7u };\n        return arr;\n    }\n  }\n  // Compilation produces a compiler warning like the following:\n  //    Array2.cs(8,27): warning CS3002: Return type of 'Numbers.GetTenPrimes()' is not\n  //            CLS-compliant\n  ```\n\n  ```vb\n  <Assembly: CLSCompliant(True)>\n\n  Public Class Numbers\n     Public Shared Function GetTenPrimes() As UInt32()\n        Return { 1ui, 2ui, 3ui, 5ui, 7ui, 11ui, 13ui, 17ui, 19ui }\n     End Function\n     Public Shared Function GetFivePrimes() As Object()\n        Dim arr() As Object = { 1, 2, 3, 5ui, 7ui }\n        Return arr\n     End Function\n  End Class\n  ' Compilation produces a compiler warning like the following:\n  '    warning BC40027: Return type of function 'GetTenPrimes' is not CLS-compliant.\n  ```                             \n\n* Overload resolution for methods that have array parameters is based on the fact that they are arrays and on their element type. For this reason, the following definition of an overloaded `GetSquares` method is CLS-compliant. \n\n  ```csharp\n  using System;\n  using System.Numerics;\n\n  [assembly: CLSCompliant(true)]\n\n  public class Numbers\n  {\n    public static byte[] GetSquares(byte[] numbers)\n    {\n        byte[] numbersOut = new byte[numbers.Length];\n        for (int ctr = 0; ctr < numbers.Length; ctr++) {\n            int square = ((int) numbers[ctr]) * ((int) numbers[ctr]); \n            if (square <= Byte.MaxValue)\n                numbersOut[ctr] = (byte) square;\n            // If there's an overflow, assign MaxValue to the corresponding \n            // element.\n            else\n                numbersOut[ctr] = Byte.MaxValue;\n\n        }\n        return numbersOut;\n    }\n\n    public static BigInteger[] GetSquares(BigInteger[] numbers)\n  {\n        BigInteger[] numbersOut = new BigInteger[numbers.Length];\n        for (int ctr = 0; ctr < numbers.Length; ctr++)\n            numbersOut[ctr] = numbers[ctr] * numbers[ctr]; \n\n       return numbersOut;\n    }\n  }\n  ```\n\n  ```vb\n  Imports System.Numerics\n\n  <Assembly: CLSCompliant(True)>\n\n  Public Module Numbers\n     Public Function GetSquares(numbers As Byte()) As Byte()\n        Dim numbersOut(numbers.Length - 1) As Byte\n        For ctr As Integer = 0 To numbers.Length - 1\n           Dim square As Integer = (CInt(numbers(ctr)) * CInt(numbers(ctr))) \n           If square <= Byte.MaxValue Then\n              numbersOut(ctr) = CByte(square)\n           ' If there's an overflow, assign MaxValue to the corresponding \n           ' element.\n           Else\n              numbersOut(ctr) = Byte.MaxValue\n           End If   \n        Next\n        Return numbersOut\n     End Function\n\n     Public Function GetSquares(numbers As BigInteger()) As BigInteger()\n         Dim numbersOut(numbers.Length - 1) As BigInteger\n         For ctr As Integer = 0 To numbers.Length - 1\n            numbersOut(ctr) = numbers(ctr) * numbers(ctr) \n         Next\n         Return numbersOut\n     End Function\n  End Module\n```\n\n### Interfaces\n\nCLS-compliant interfaces can define properties, events, and virtual methods (methods with no implementation). A CLS-compliant interface cannot have any of the following: \n\n* Static methods or static fields. The C# compiler generatse compiler errors if you define a static member in an interface. \n\n* Fields. The C# acompiler generates compiler errors if you define a field in an interface.\n\n* Methods that are not CLS-compliant. For example, the following interface definition includes a method, `INumber.GetUnsigned`, that is marked as non-CLS-compliant. This example generates a compiler warning. \n\n  ```csharp\n  using System;\n\n  [assembly:CLSCompliant(true)]\n\n  public interface INumber\n  {\n      int Length();\n      [CLSCompliant(false)] ulong GetUnsigned();\n  }\n  // Attempting to compile the example displays output like the following:\n  //    Interface2.cs(8,32): warning CS3010: 'INumber.GetUnsigned()': CLS-compliant interfaces\n  //            must have only CLS-compliant members\n  ```\n\n  ```vb\n  <Assembly: CLSCompliant(True)>\n\n  Public Interface INumber\n    Function Length As Integer\n      <CLSCompliant(False)> Function GetUnsigned As ULong   \n    End Interface\n    ' Attempting to compile the example displays output like the following:\n    '    Interface2.vb(9) : warning BC40033: Non CLS-compliant 'function' is not allowed in a \n    '    CLS-compliant interface.\n    '    \n    '       <CLSCompliant(False)> Function GetUnsigned As ULong\n    '                                      ~~~~~~~~~~~\n  ```\n\n  Because of this rule, CLS-compliant types are not required to implement non-CLS-compliant members. If a CLS-compliant framework does expose a class that implements a non-CLS compliant interface, it should also provide concrete implementations of all non-CLS-compliant members. \n\nCLS-compliant language compilers must also allow a class to provide separate implementations of members that have the same name and signature in multiple interfaces. C# supports explicit interface implementations to provide different implementations of identically named methods. The following example illustrates this scenario by defining a `Temperature` class that implements the `ICelsius` and `IFahrenheit` interfaces as explicit interface implementations. \n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic interface IFahrenheit\n{\n   decimal GetTemperature();\n}\n\npublic interface ICelsius\n{\n   decimal GetTemperature();\n}\n\npublic class Temperature : ICelsius, IFahrenheit\n{\n   private decimal _value;\n\n   public Temperature(decimal value)\n   {\n      // We assume that this is the Celsius value.\n      _value = value;\n   } \n\n   decimal IFahrenheit.GetTemperature()\n   {\n      return _value * 9 / 5 + 32;\n   }\n\n   decimal ICelsius.GetTemperature()\n   {\n      return _value;\n   } \n}\npublic class Example\n{\n   public static void Main()\n   {\n      Temperature temp = new Temperature(100.0m);\n      ICelsius cTemp = temp;\n      IFahrenheit fTemp = temp;\n      Console.WriteLine(\"Temperature in Celsius: {0} degrees\", \n                        cTemp.GetTemperature());\n      Console.WriteLine(\"Temperature in Fahrenheit: {0} degrees\", \n                        fTemp.GetTemperature());\n   }\n}\n// The example displays the following output:\n//       Temperature in Celsius: 100.0 degrees\n//       Temperature in Fahrenheit: 212.0 degrees\n```\n\n```vb\nAssembly: CLSCompliant(True)>\n\nPublic Interface IFahrenheit\n   Function GetTemperature() As Decimal\nEnd Interface\n\nPublic Interface ICelsius\n   Function GetTemperature() As Decimal\nEnd Interface\n\nPublic Class Temperature : Implements ICelsius, IFahrenheit\n   Private _value As Decimal\n\n   Public Sub New(value As Decimal)\n      ' We assume that this is the Celsius value.\n      _value = value\n   End Sub \n\n   Public Function GetFahrenheit() As Decimal _\n          Implements IFahrenheit.GetTemperature\n      Return _value * 9 / 5 + 32\n   End Function\n\n   Public Function GetCelsius() As Decimal _\n          Implements ICelsius.GetTemperature\n      Return _value\n   End Function \nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim temp As New Temperature(100.0d)\n      Console.WriteLine(\"Temperature in Celsius: {0} degrees\", \n                        temp.GetCelsius())\n      Console.WriteLine(\"Temperature in Fahrenheit: {0} degrees\", \n                        temp.GetFahrenheit())\n   End Sub\nEnd Module\n' The example displays the following output:\n'       Temperature in Celsius: 100.0 degrees\n'       Temperature in Fahrenheit: 212.0 degrees\n```\n\n### Enumerations\n\nCLS-compliant enumerations must follow these rules: \n\n* The underlying type of the enumeration must be an intrinsic CLS-compliant integer ([Byte](xref:System.Byte), [Int16](xref:System.Int16), [Int32](xref:System.Int32), or [Int64](xref:System.Int64)). For example, the following code tries to define an enumeration whose underlying type is [UInt32](xref:System.UInt32) and generates a compiler warning. \n\n    ```csharp\n    using System;\n\n    [assembly: CLSCompliant(true)]\n\n    public enum Size : uint { \n        Unspecified = 0, \n        XSmall = 1, \n        Small = 2, \n        Medium = 3, \n        Large = 4, \n        XLarge = 5 \n    };\n\n    public class Clothing\n    {\n        public string Name; \n        public string Type;\n        public string Size;\n    }\n    // The attempt to compile the example displays a compiler warning like the following:\n    //    Enum3.cs(6,13): warning CS3009: 'Size': base type 'uint' is not CLS-compliant\n    ```\n\n    ```vb\n    <Assembly: CLSCompliant(True)>\n\n    Public Enum Size As UInt32\n       Unspecified = 0\n       XSmall = 1\n       Small = 2\n       Medium = 3\n       Large = 4\n       XLarge = 5\n    End Enum\n\n    Public Class Clothing\n       Public Name As String\n       Public Type As String\n       Public Size As Size\n    End Class\n    ' The attempt to compile the example displays a compiler warning like the following:\n    '    Enum3.vb(6) : warning BC40032: Underlying type 'UInt32' of Enum is not CLS-compliant.\n    '    \n    '    Public Enum Size As UInt32\n    '                ~~~~\n    ```\n\n* An enumeration type must have a single instance field named `Value__` that is marked with the `FieldAttributes.RTSpecialName` attribute. This enables you to reference the field value implicitly. \n\n* An enumeration includes literal static fields whose types match the type of the enumeration itself. For example, if you define a `State` enumeration with values of `State.On` and `State.Off`, `State.On` and `State.Off` are both literal static fields whose type is `State`. \n\n* There are two kinds of enumerations: \n    \n    * An enumeration that represents a set of mutually exclusive, named integer values. This type of enumeration is indicated by the absence of the [System.FlagsAttribute](xref:System.FlagsAttribute) custom attribute.\n    \n    * An enumeration that represents a set of bit flags that can combine to generate an unnamed value. This type of enumeration is indicated by the presence of the [System.FlagsAttribute](xref:System.FlagsAttribute) custom attribute.\n    \n For more information, see the documentation for the [Enum](xref:System.Enum) structure. \n\n* The value of an enumeration is not limited to the range of its specified values. In other words, the range of values in an enumeration is the range of its underlying value. You can use the `Enum.IsDefined` method to determine whether a specified value is a member of an enumeration. \n\n### Type members in general\n\nThe Common Language Specification requires all fields and methods to be accessed as members of a particular class. Therefore, global static fields and methods (that is, static fields or methods that are defined apart from a type) are not CLS-compliant. If you try to include a global field or method in your source code, the C# compiler generates a compiler error. \n\nThe Common Language Specification supports only the standard managed calling convention. It doesn't support unmanaged calling conventions and methods with variable argument lists marked with the `varargs` keyword. For variable argument lists that are compatible with the standard managed calling convention, use the [ParamArrayAttribute](xref:System.ParamArrayAttribute) attribute or the individual language's implementation, such as the `params` keyword in C# and the `ParamArray` keyword in Visual Basic. \n\n### Member accessibility\n\nOverriding an inherited member cannot change the accessibility of that member. For example, a public method in a base class cannot be overridden by a private method in a derived class. There is one exception: a `protected internal` (in C#) or `Protected Friend` (in Visual Basic) member in one assembly that is overridden by a type in a different assembly.  In that case, the accessibility of the override is `Protected`. \n\nThe following example illustrates the error that is generated when the [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute is set to `true`, and `Person`, which is a class derived from `Animal`, tries to change the accessibility of the `Species` property from public to private. The example compiles successfully if its accessibility is changed to public. \n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class Animal\n{\n   private string _species;\n\n   public Animal(string species)\n   {\n      _species = species;\n   }\n\n   public virtual string Species \n   {    \n      get { return _species; }\n   }\n\n   public override string ToString()\n   {\n      return _species;   \n   } \n}\n\npublic class Human : Animal\n{\n   private string _name;\n\n   public Human(string name) : base(\"Homo Sapiens\")\n   {\n      _name = name;\n   }\n\n   public string Name\n   {\n      get { return _name; }\n   }\n\n   private override string Species \n   {\n      get { return base.Species; }\n   }\n\n   public override string ToString() \n   {\n      return _name;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Human p = new Human(\"John\");\n      Console.WriteLine(p.Species);\n      Console.WriteLine(p.ToString());\n   }\n}\n// The example displays the following output:\n//    error CS0621: 'Human.Species': virtual or abstract members cannot be private\n```\n\n```vb\n<Assembly: CLSCompliant(True)>\n\nPublic Class Animal\n   Private _species As String\n\n   Public Sub New(species As String)\n      _species = species\n   End Sub\n\n   Public Overridable ReadOnly Property Species As String\n      Get\n         Return _species\n      End Get\n   End Property\n\n   Public Overrides Function ToString() As String\n      Return _species   \n   End Function \nEnd Class\n\nPublic Class Human : Inherits Animal\n   Private _name As String\n\n   Public Sub New(name As String)\n      MyBase.New(\"Homo Sapiens\")\n      _name = name\n   End Sub\n\n   Public ReadOnly Property Name As String\n      Get\n         Return _name\n      End Get\n   End Property\n\n   Private Overrides ReadOnly Property Species As String\n      Get\n         Return MyBase.Species\n      End Get   \n   End Property\n\n   Public Overrides Function ToString() As String\n      Return _name\n   End Function\nEnd Class\n\nPublic Module Example\n   Public Sub Main()\n      Dim p As New Human(\"John\")\n      Console.WriteLine(p.Species)\n      Console.WriteLine(p.ToString())\n   End Sub\nEnd Module\n' The example displays the following output:\n'     'Private Overrides ReadOnly Property Species As String' cannot override \n'     'Public Overridable ReadOnly Property Species As String' because\n'      they have different access levels.\n' \n'         Private Overrides ReadOnly Property Species As String\n```\n\nTypes in the signature of a member must be accessible whenever that member is accessible. For example, this means that a public member cannot include a parameter whose type is private, protected, or internal. The following example illustrates the compiler error that results when a `StringWrapper` class constructor exposes an internal `StringOperationType` enumeration value that determines how a string value should be wrapped. \n\n```csharp\nusing System;\nusing System.Text;\n\npublic class StringWrapper\n{\n   string internalString;\n   StringBuilder internalSB = null;\n   bool useSB = false;\n\n   public StringWrapper(StringOperationType type)\n   {   \n      if (type == StringOperationType.Normal) {\n         useSB = false;\n      }   \n      else {\n         useSB = true;\n         internalSB = new StringBuilder();\n      }    \n   }\n\n   // The remaining source code...\n}\n\ninternal enum StringOperationType { Normal, Dynamic }\n// The attempt to compile the example displays the following output:\n//    error CS0051: Inconsistent accessibility: parameter type\n//            'StringOperationType' is less accessible than method\n//            'StringWrapper.StringWrapper(StringOperationType)'\n```\n\n```vb\nImports System.Text\n\n<Assembly:CLSCompliant(True)>\n\nPublic Class StringWrapper\n\n   Dim internalString As String\n   Dim internalSB As StringBuilder = Nothing\n   Dim useSB As Boolean = False\n\n   Public Sub New(type As StringOperationType)   \n      If type = StringOperationType.Normal Then\n         useSB = False\n      Else\n         internalSB = New StringBuilder() \n         useSB = True\n      End If    \n   End Sub\n\n   ' The remaining source code...\nEnd Class\n\nFriend Enum StringOperationType As Integer\n   Normal = 0\n   Dynamic = 1\nEnd Enum\n' The attempt to compile the example displays the following output:\n'    error BC30909: 'type' cannot expose type 'StringOperationType'\n'     outside the project through class 'StringWrapper'.\n'    \n'       Public Sub New(type As StringOperationType)\n'                              ~~~~~~~~~~~~~~~~~~~\n```\n\n### Generic types and members\n\nNested types always have at least as many generic parameters as their enclosing type. These correspond by position to the generic parameters in the enclosing type. The generic type can also include new generic parameters. \n\nThe relationship between the generic type parameters of a containing type and its nested types may be hidden by the syntax of individual languages. In the following example, a generic type `Outer<T>` contains two nested classes, `Inner1A` and `Inner1B<U>`. The calls to the `ToString` method, which each class inherits from `Object.ToString`, show that each nested class includes the type parameters of its containing class. \n\n```csharp\nusing System;\n\n[assembly:CLSCompliant(true)]\n\npublic class Outer<T>\n{\n   T value;\n\n   public Outer(T value)\n   {\n      this.value = value;\n   }\n\n   public class Inner1A : Outer<T>\n   {\n      public Inner1A(T value) : base(value)\n      {  }\n   }\n\n   public class Inner1B<U> : Outer<T>\n   {\n      U value2;\n\n      public Inner1B(T value1, U value2) : base(value1)\n      {\n         this.value2 = value2;\n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var inst1 = new Outer<String>(\"This\");\n      Console.WriteLine(inst1);\n\n      var inst2 = new Outer<String>.Inner1A(\"Another\");\n      Console.WriteLine(inst2);\n\n      var inst3 = new Outer<String>.Inner1B<int>(\"That\", 2);\n      Console.WriteLine(inst3);\n   }\n}\n// The example displays the following output:\n//       Outer`1[System.String]\n//       Outer`1+Inner1A[System.String]\n//       Outer`1+Inner1B`1[System.String,System.Int32]\n```\n\n```vb\n<Assembly:CLSCompliant(True)>\n\nPublic Class Outer(Of T)\n   Dim value As T\n\n   Public Sub New(value As T)\n      Me.value = value\n   End Sub\n\n   Public Class Inner1A : Inherits Outer(Of T)\n      Public Sub New(value As T)\n         MyBase.New(value)\n      End Sub\n   End Class\n\n   Public Class Inner1B(Of U) : Inherits Outer(Of T)\n      Dim value2 As U\n\n      Public Sub New(value1 As T, value2 As U)\n         MyBase.New(value1)\n         Me.value2 = value2\n      End Sub\n   End Class\nEnd Class\n\nPublic Module Example\n   Public Sub Main()\n      Dim inst1 As New Outer(Of String)(\"This\")\n      Console.WriteLine(inst1)\n\n      Dim inst2 As New Outer(Of String).Inner1A(\"Another\")\n      Console.WriteLine(inst2)\n\n      Dim inst3 As New Outer(Of String).Inner1B(Of Integer)(\"That\", 2)\n      Console.WriteLine(inst3)\n   End Sub\nEnd Module\n' The example displays the following output:\n'       Outer`1[System.String]\n'       Outer`1+Inner1A[System.String]\n'       Outer`1+Inner1B`1[System.String,System.Int32]\n```\n\nGeneric type names are encoded in the form *name*'*n*, where *name* is the type name, *`* is a character literal, and *n* is the number of parameters declared on the type, or, for nested generic types, the number of newly introduced type parameters. This encoding of generic type names is primarily of interest to developers who use reflection to access CLS-complaint generic types in a library. \n\nIf constraints are applied to a generic type, any types used as constraints must also be CLS-compliant. The following example defines a class named `BaseClass` that is not CLS-compliant and a generic class named `BaseCollection` whose type parameter must derive from `BaseClass`. But because `BaseClass`is not CLS-compliant, the compiler emits a warning. \n\n```csharp\nusing System;\n\n[assembly:CLSCompliant(true)]\n\n[CLSCompliant(false)] public class BaseClass\n{}\n\n\npublic class BaseCollection<T> where T : BaseClass\n{}\n// Attempting to compile the example displays the following output:\n//    warning CS3024: Constraint type 'BaseClass' is not CLS-compliant\n```\n\n```vb\nAssembly: CLSCompliant(True)>\n\n<CLSCompliant(False)> Public Class BaseClass\nEnd Class\n\n\nPublic Class BaseCollection(Of T As BaseClass)\nEnd Class\n' Attempting to compile the example displays the following output:\n'    warning BC40040: Generic parameter constraint type 'BaseClass' is not \n'    CLS-compliant.\n'    \n'    Public Class BaseCollection(Of T As BaseClass)\n'                                        ~~~~~~~~~\n\n```\n\nIf a generic type is derived from a generic base type, it must redeclare any constraints so that it can guarantee that constraints on the base type are also satisfied. The following example defines a `Number<T>` that can represent any numeric type. It also defines a `FloatingPoint<T>` class that represents a floating point value. However, the source code fails to compile, because it does not apply the constraint on `Number<T>` (that T must be a value type) to `FloatingPoint<T>`.\n\n```csharp\nusing System;\n\n[assembly:CLSCompliant(true)]\n\npublic class Number<T> where T : struct\n{\n   // use Double as the underlying type, since its range is a superset of\n   // the ranges of all numeric types except BigInteger.\n   protected double number;\n\n   public Number(T value)\n   {\n      try {\n         this.number = Convert.ToDouble(value);\n      }  \n      catch (OverflowException e) {\n         throw new ArgumentException(\"value is too large.\", e);\n      }\n      catch (InvalidCastException e) {\n         throw new ArgumentException(\"The value parameter is not numeric.\", e);\n      }\n   }\n\n   public T Add(T value)\n   {\n      return (T) Convert.ChangeType(number + Convert.ToDouble(value), typeof(T));\n   }\n\n   public T Subtract(T value)\n   {\n      return (T) Convert.ChangeType(number - Convert.ToDouble(value), typeof(T));\n   }\n}\n\npublic class FloatingPoint<T> : Number<T> \n{\n   public FloatingPoint(T number) : base(number) \n   {\n      if (typeof(float) == number.GetType() ||\n          typeof(double) == number.GetType() || \n          typeof(decimal) == number.GetType())\n         this.number = Convert.ToDouble(number);\n      else   \n         throw new ArgumentException(\"The number parameter is not a floating-point number.\");\n   }       \n}           \n// The attempt to comple the example displays the following output:\n//       error CS0453: The type 'T' must be a non-nullable value type in\n//               order to use it as parameter 'T' in the generic type or method 'Number<T>'\n```\n\n```vb\n<Assembly:CLSCompliant(True)>\n\nPublic Class Number(Of T As Structure)\n   ' Use Double as the underlying type, since its range is a superset of\n   ' the ranges of all numeric types except BigInteger.\n   Protected number As Double\n\n   Public Sub New(value As T)\n      Try\n         Me.number = Convert.ToDouble(value)\n      Catch e As OverflowException\n         Throw New ArgumentException(\"value is too large.\", e)\n      Catch e As InvalidCastException\n         Throw New ArgumentException(\"The value parameter is not numeric.\", e)\n      End Try\n   End Sub\n\n   Public Function Add(value As T) As T\n      Return CType(Convert.ChangeType(number + Convert.ToDouble(value), GetType(T)), T)\n   End Function\n\n   Public Function Subtract(value As T) As T\n      Return CType(Convert.ChangeType(number - Convert.ToDouble(value), GetType(T)), T)\n   End Function\nEnd Class\n\nPublic Class FloatingPoint(Of T) : Inherits Number(Of T) \n   Public Sub New(number As T)\n      MyBase.New(number) \n      If TypeOf number Is Single Or\n               TypeOf number Is Double Or\n               TypeOf number Is Decimal Then \n         Me.number = Convert.ToDouble(number)\n      Else   \n         throw new ArgumentException(\"The number parameter is not a floating-point number.\")\n      End If   \n   End Sub       \nEnd Class           \n' The attempt to comple the example displays the following output:\n'    error BC32105: Type argument 'T' does not satisfy the 'Structure'\n'    constraint for type parameter 'T'.\n'    \n'    Public Class FloatingPoint(Of T) : Inherits Number(Of T)\n'                                                          ~\n```\n\nThe example compiles successfully if the constraint is added to the `FloatingPoint<T>` class.\n\n```csharp\nusing System;\n\n[assembly:CLSCompliant(true)]\n\n\npublic class Number<T> where T : struct\n{\n   // use Double as the underlying type, since its range is a superset of\n   // the ranges of all numeric types except BigInteger.\n   protected double number;\n\n   public Number(T value)\n   {\n      try {\n         this.number = Convert.ToDouble(value);\n      }  \n      catch (OverflowException e) {\n         throw new ArgumentException(\"value is too large.\", e);\n      }\n      catch (InvalidCastException e) {\n         throw new ArgumentException(\"The value parameter is not numeric.\", e);\n      }\n   }\n\n   public T Add(T value)\n   {\n      return (T) Convert.ChangeType(number + Convert.ToDouble(value), typeof(T));\n   }\n\n   public T Subtract(T value)\n   {\n      return (T) Convert.ChangeType(number - Convert.ToDouble(value), typeof(T));\n   }\n}\n\npublic class FloatingPoint<T> : Number<T> where T : struct \n{\n   public FloatingPoint(T number) : base(number) \n   {\n      if (typeof(float) == number.GetType() ||\n          typeof(double) == number.GetType() || \n          typeof(decimal) == number.GetType())\n         this.number = Convert.ToDouble(number);\n      else   \n         throw new ArgumentException(\"The number parameter is not a floating-point number.\");\n   }       \n}      \n```\n\n```vb\n<Assembly:CLSCompliant(True)>\n\nPublic Class Number(Of T As Structure)\n   ' Use Double as the underlying type, since its range is a superset of\n   ' the ranges of all numeric types except BigInteger.\n   Protected number As Double\n\n   Public Sub New(value As T)\n      Try\n         Me.number = Convert.ToDouble(value)\n      Catch e As OverflowException\n         Throw New ArgumentException(\"value is too large.\", e)\n      Catch e As InvalidCastException\n         Throw New ArgumentException(\"The value parameter is not numeric.\", e)\n      End Try\n   End Sub\n\n   Public Function Add(value As T) As T\n      Return CType(Convert.ChangeType(number + Convert.ToDouble(value), GetType(T)), T)\n   End Function\n\n   Public Function Subtract(value As T) As T\n      Return CType(Convert.ChangeType(number - Convert.ToDouble(value), GetType(T)), T)\n   End Function\nEnd Class\n\nPublic Class FloatingPoint(Of T As Structure) : Inherits Number(Of T) \n   Public Sub New(number As T)\n      MyBase.New(number) \n      If TypeOf number Is Single Or\n               TypeOf number Is Double Or\n               TypeOf number Is Decimal Then \n         Me.number = Convert.ToDouble(number)\n      Else   \n         throw new ArgumentException(\"The number parameter is not a floating-point number.\")\n      End If   \n   End Sub       \nEnd Class\n```\n\nThe Common Language Specification imposes a conservative per-instantiation model for nested types and protected members. Open generic types cannot expose fields or members with signatures that contain a specific instantiation of a nested, protected generic type. Non-generic types that extend a specific instantiation of a generic base class or interface cannot expose fields or members with signatures that contain a different instantiation of a nested, protected generic type.\n\nThe following example defines a generic type, `C1<T>`, and a protected class, `C1<T>.N`. `C1<T>` has two methods, `M1` and `M2`. However, `M1` is not CLS-compliant because it tries to return a `C1<int>.N` object from `C1<T>`. A second class, `C2`, is derived from `C1<long>`. It has two methods, `M3` and `M4`. `M3` is not CLS-compliant because it tries to return a `C1<int>.N` object from a subclass of `C1<long>`. Note that language compilers can be even more restrictive. In this example, Visual Basic displays an error when it tries to compile `M4`. \n\n```csharp\nusing System;\n\n[assembly:CLSCompliant(true)]\n\npublic class C1<T> \n{\n   protected class N { }\n\n   protected void M1(C1<int>.N n) { } // Not CLS-compliant - C1<int>.N not\n                                      // accessible from within C1<T> in all\n                                      // languages\n   protected void M2(C1<T>.N n) { }   // CLS-compliant – C1<T>.N accessible\n                                      // inside C1<T>\n}\n\npublic class C2 : C1<long> \n{\n   protected void M3(C1<int>.N n) { }  // Not CLS-compliant – C1<int>.N is not\n                                       // accessible in C2 (extends C1<long>)\n\n   protected void M4(C1<long>.N n) { } // CLS-compliant, C1<long>.N is\n                                       // accessible in C2 (extends C1<long>)\n}\n// Attempting to compile the example displays output like the following:\n//       Generics4.cs(9,22): warning CS3001: Argument type 'C1<int>.N' is not CLS-compliant\n//       Generics4.cs(18,22): warning CS3001: Argument type 'C1<int>.N' is not CLS-compliant\n```\n\n```vb\n<Assembly:CLSCompliant(True)>\n\nPublic Class C1(Of T) \n   Protected Class N\n   End Class\n\n   Protected Sub M1(n As C1(Of Integer).N)   ' Not CLS-compliant - C1<int>.N not\n                                             ' accessible from within C1(Of T) in all\n   End Sub                                   ' languages\n\n\n   Protected Sub M2(n As C1(Of T).N)     ' CLS-compliant – C1(Of T).N accessible\n   End Sub                               ' inside C1(Of T)\nEnd Class\n\nPublic Class C2 : Inherits C1(Of Long) \n   Protected Sub M3(n As C1(Of Integer).N)   ' Not CLS-compliant – C1(Of Integer).N is not\n   End Sub                                   ' accessible in C2 (extends C1(Of Long))\n\n   Protected Sub M4(n As C1(Of Long).N)   \n   End Sub                                \nEnd Class\n' Attempting to compile the example displays output like the following:\n'    error BC30508: 'n' cannot expose type 'C1(Of Integer).N' in namespace \n'    '<Default>' through class 'C1'.\n'    \n'       Protected Sub M1(n As C1(Of Integer).N)   ' Not CLS-compliant - C1<int>.N not\n'                             ~~~~~~~~~~~~~~~~\n'    error BC30389: 'C1(Of T).N' is not accessible in this context because \n'    it is 'Protected'.\n'    \n'       Protected Sub M3(n As C1(Of Integer).N)   ' Not CLS-compliant - C1(Of Integer).N is not\n'    \n'                             ~~~~~~~~~~~~~~~~\n'    \n'    error BC30389: 'C1(Of T).N' is not accessible in this context because it is 'Protected'.\n'    \n'       Protected Sub M4(n As C1(Of Long).N)  \n'                             ~~~~~~~~~~~~~\n```\n\n### Constructors\n\nConstructors in CLS-compliant classes and structures must follow these rules: \n\n* A constructor of a derived class must call the instance constructor of its base class before it accesses inherited instance data. This requirement is due to the fact that base class constructors are not inherited by their derived classes. This rule does not apply to structures, which do not support direct inheritance. \n\n  Typically, compilers enforce this rule independently of CLS compliance, as the following example shows. It creates a `Doctor` class that is derived from a `Person` class, but the `Doctor`class fails to call the `Person` class constructor to initialize inherited instance fields. \n\n    ```csharp\n    using System;\n\n    [assembly: CLSCompliant(true)]\n\n    public class Person\n    {\n    private string fName, lName, _id;\n\n    public Person(string firstName, string lastName, string id)\n    {\n        if (String.IsNullOrEmpty(firstName + lastName))\n            throw new ArgumentNullException(\"Either a first name or a last name must be provided.\");    \n\n        fName = firstName;\n        lName = lastName;\n        _id = id;\n    }\n\n    public string FirstName \n    {\n        get { return fName; }\n    }\n\n    public string LastName \n    {\n        get { return lName; }\n    }\n\n    public string Id \n    {\n        get { return _id; }\n    }\n\n    public override string ToString()\n    {\n        return String.Format(\"{0}{1}{2}\", fName, \n                            String.IsNullOrEmpty(fName) ?  \"\" : \" \",\n                            lName);\n    }\n    }\n\n    public class Doctor : Person\n    {\n    public Doctor(string firstName, string lastName, string id)\n    {\n    }\n\n    public override string ToString()\n    {\n        return \"Dr. \" + base.ToString();\n    }\n    }\n    // Attempting to compile the example displays output like the following:\n    //    ctor1.cs(45,11): error CS1729: 'Person' does not contain a constructor that takes 0\n    //            arguments\n    //    ctor1.cs(10,11): (Location of symbol related to previous error)\n    ```\n\n    ```vb\n    <Assembly: CLSCompliant(True)> \n\n    Public Class Person\n       Private fName, lName, _id As String\n\n       Public Sub New(firstName As String, lastName As String, id As String)\n          If String.IsNullOrEmpty(firstName + lastName) Then\n             Throw New ArgumentNullException(\"Either a first name or a last name must be provided.\")    \n          End If\n\n          fName = firstName\n          lName = lastName\n          _id = id\n       End Sub\n\n       Public ReadOnly Property FirstName As String\n          Get\n             Return fName\n          End Get\n       End Property\n\n       Public ReadOnly Property LastName As String\n          Get\n             Return lName\n          End Get\n       End Property\n\n       Public ReadOnly Property Id As String\n          Get\n             Return _id\n          End Get\n       End Property\n\n       Public Overrides Function ToString() As String\n          Return String.Format(\"{0}{1}{2}\", fName, \n                               If(String.IsNullOrEmpty(fName), \"\", \" \"),\n                               lName)\n       End Function\n    End Class\n\n    Public Class Doctor : Inherits Person\n       Public Sub New(firstName As String, lastName As String, id As String)\n       End Sub\n\n       Public Overrides Function ToString() As String\n          Return \"Dr. \" + MyBase.ToString()\n       End Function\n    End Class\n    ' Attempting to compile the example displays output like the following:\n    '    Ctor1.vb(46) : error BC30148: First statement of this 'Sub New' must be a call \n    '    to 'MyBase.New' or 'MyClass.New' because base class 'Person' of 'Doctor' does \n    '    not have an accessible 'Sub New' that can be called with no arguments.\n    '    \n    '       Public Sub New()\n    '                  ~~~\n    ````\n    \n* An object constructor cannot be called except to create an object. In addition, an object cannot be initialized twice. For example, this means that `Object.MemberwiseClone` must not call constructors.  \n\n### Properties\n\nProperties in CLS-compliant types must follow these rules:\n\n* A property must have a setter, a getter, or both. In an assembly, these are implemented as special methods, which means that they will appear as separate methods (the getter is named `get`\\_*propertyname* and the setter is `set*\\_*propertyname*) marked as `SpecialName` in the assembly's metadata. The C# compiler enforces this rule automatically without the need to apply the [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute. \n\n* A property's type is the return type of the property getter and the last argument of the setter. These types must be CLS compliant, and arguments cannot be assigned to the property by reference (that is, they cannot be managed pointers). \n\n* If a property has both a getter and a setter, they must both be virtual, both static, or both instance. The C# compiler automatically enforces this rule through property definition syntax. \n\n### Events\n\nAn event is defined by its name and its type. The event type is a delegate that is used to indicate the event. For example, the `DbConnection.StateChange` event is of type `StateChangeEventHandler`. In addition to the event itself, three methods with names based on the event name provide the event's implementation and are marked as `SpecialName` in the assembly's metadata: \n\n* A method for adding an event handler, named `add`_*EventName*. For example, the event subscription method for the `DbConnection.StateChange` event is named `add_StateChange`. \n\n* A method for removing an event handler, named `remove`_*EventName*. For example, the removal method for the `DbConnection.StateChange` event is named `remove_StateChange`.\n\n* A method for indicating that the event has occurred, named `raise`_*EventName*. \n\n> [!NOTE]\n> Most of the Common Language Specification's rules regarding events are implemented by language compilers and are transparent to component developers. \n\nThe methods for adding, removing, and raising the event must have the same accessibility. They must also all be static, instance, or virtual. The methods for adding and removing an event have one parameter whose type is the event delegate type. The add and remove methods must both be present or both be absent. \n\nThe following example defines a CLS-compliant class named `Temperature` that raises a `TemperatureChanged` event if the change in temperature between two readings equals or exceeds a threshold value. The `Temperature` class explicitly defines a `raise_TemperatureChanged` method so that it can selectively execute event handlers.\n\n```csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\n\n[assembly: CLSCompliant(true)]\n\npublic class TemperatureChangedEventArgs : EventArgs\n{\n   private Decimal originalTemp;\n   private Decimal newTemp; \n   private DateTimeOffset when;\n\n   public TemperatureChangedEventArgs(Decimal original, Decimal @new, DateTimeOffset time)\n   {\n      originalTemp = original;\n      newTemp = @new;\n      when = time;\n   }   \n\n   public Decimal OldTemperature\n   {\n      get { return originalTemp; }\n   } \n\n   public Decimal CurrentTemperature\n   {\n      get { return newTemp; }\n   } \n\n   public DateTimeOffset Time\n   {\n      get { return when; }\n   }\n}\n\npublic delegate void TemperatureChanged(Object sender, TemperatureChangedEventArgs e);\n\npublic class Temperature\n{\n   private struct TemperatureInfo\n   {\n      public Decimal Temperature;\n      public DateTimeOffset Recorded;\n   }\n\n   public event TemperatureChanged TemperatureChanged;\n\n   private Decimal previous;\n   private Decimal current;\n   private Decimal tolerance;\n   private List<TemperatureInfo> tis = new List<TemperatureInfo>();\n\n   public Temperature(Decimal temperature, Decimal tolerance)\n   {\n      current = temperature;\n      TemperatureInfo ti = new TemperatureInfo();\n      ti.Temperature = temperature;\n      tis.Add(ti);\n      ti.Recorded = DateTimeOffset.UtcNow;\n      this.tolerance = tolerance;\n   }\n\n   public Decimal CurrentTemperature\n   {\n      get { return current; }\n      set {\n         TemperatureInfo ti = new TemperatureInfo();\n         ti.Temperature = value;\n         ti.Recorded = DateTimeOffset.UtcNow;\n         previous = current;\n         current = value;\n         if (Math.Abs(current - previous) >= tolerance) \n            raise_TemperatureChanged(new TemperatureChangedEventArgs(previous, current, ti.Recorded));\n      }\n   }\n\n   public void raise_TemperatureChanged(TemperatureChangedEventArgs eventArgs)\n   {\n      if (TemperatureChanged == null)\n         return; \n\n      foreach (TemperatureChanged d in TemperatureChanged.GetInvocationList()) {\n         if (d.Method.Name.Contains(\"Duplicate\"))\n            Console.WriteLine(\"Duplicate event handler; event handler not executed.\");\n         else\n            d.Invoke(this, eventArgs);\n      }\n   }\n}\n\npublic class Example\n{\n   public Temperature temp;\n\n   public static void Main()\n   {\n      Example ex = new Example();\n   }\n\n   public Example()\n   {\n      temp = new Temperature(65, 3);\n      temp.TemperatureChanged += this.TemperatureNotification;\n      RecordTemperatures();\n      Example ex = new Example(temp);\n      ex.RecordTemperatures();\n   }\n\n   public Example(Temperature t)\n   {\n      temp = t;\n      RecordTemperatures();\n   }\n\n   public void RecordTemperatures()\n   {\n      temp.TemperatureChanged += this.DuplicateTemperatureNotification;\n      temp.CurrentTemperature = 66;\n      temp.CurrentTemperature = 63;\n   }\n\n   internal void TemperatureNotification(Object sender, TemperatureChangedEventArgs e) \n   {\n      Console.WriteLine(\"Notification 1: The temperature changed from {0} to {1}\", e.OldTemperature, e.CurrentTemperature);   \n   }\n\n   public void DuplicateTemperatureNotification(Object sender, TemperatureChangedEventArgs e)\n   { \n      Console.WriteLine(\"Notification 2: The temperature changed from {0} to {1}\", e.OldTemperature, e.CurrentTemperature);   \n   }\n}\n```\n\n```vb\nImports System.Collections\nImports System.Collections.Generic\n\n<Assembly: CLSCompliant(True)>\n\nPublic Class TemperatureChangedEventArgs   : Inherits EventArgs\n   Private originalTemp As Decimal\n   Private newTemp As Decimal \n   Private [when] As DateTimeOffset\n\n   Public Sub New(original As Decimal, [new] As Decimal, [time] As DateTimeOffset)\n      originalTemp = original\n      newTemp = [new]\n      [when] = [time]\n   End Sub   \n\n   Public ReadOnly Property OldTemperature As Decimal\n      Get\n         Return originalTemp\n      End Get\n   End Property \n\n   Public ReadOnly Property CurrentTemperature As Decimal\n      Get\n         Return newTemp\n      End Get\n   End Property \n\n   Public ReadOnly Property [Time] As DateTimeOffset\n      Get\n         Return [when]\n      End Get\n   End Property\nEnd Class\n\nPublic Delegate Sub TemperatureChanged(sender As Object, e As TemperatureChangedEventArgs)\n\nPublic Class Temperature\n   Private Structure TemperatureInfo\n      Dim Temperature As Decimal\n      Dim Recorded As DateTimeOffset\n   End Structure\n\n   Public Event TemperatureChanged As TemperatureChanged\n\n   Private previous As Decimal\n   Private current As Decimal\n   Private tolerance As Decimal\n   Private tis As New List(Of TemperatureInfo)\n\n   Public Sub New(temperature As Decimal, tolerance As Decimal)\n      current = temperature\n      Dim ti As New TemperatureInfo()\n      ti.Temperature = temperature\n      ti.Recorded = DateTimeOffset.UtcNow\n      tis.Add(ti)\n      Me.tolerance = tolerance\n   End Sub\n\n   Public Property CurrentTemperature As Decimal\n      Get\n         Return current\n      End Get\n      Set\n         Dim ti As New TemperatureInfo\n         ti.Temperature = value\n         ti.Recorded = DateTimeOffset.UtcNow\n         previous = current\n         current = value\n         If Math.Abs(current - previous) >= tolerance Then\n            raise_TemperatureChanged(New TemperatureChangedEventArgs(previous, current, ti.Recorded))\n         End If\n      End Set\n   End Property\n\n   Public Sub raise_TemperatureChanged(eventArgs As TemperatureChangedEventArgs)\n      If TemperatureChangedEvent Is Nothing Then Exit Sub\n\n      Dim ListenerList() As System.Delegate = TemperatureChangedEvent.GetInvocationList()\n      For Each d As TemperatureChanged In TemperatureChangedEvent.GetInvocationList()\n         If d.Method.Name.Contains(\"Duplicate\") Then\n            Console.WriteLine(\"Duplicate event handler; event handler not executed.\")\n         Else\n            d.Invoke(Me, eventArgs)\n         End If\n      Next\n   End Sub\nEnd Class\n\nPublic Class Example\n   Public WithEvents temp As Temperature\n\n   Public Shared Sub Main()\n      Dim ex As New Example()\n   End Sub\n\n   Public Sub New()\n      temp = New Temperature(65, 3)\n      RecordTemperatures()\n      Dim ex As New Example(temp)\n      ex.RecordTemperatures()\n   End Sub\n\n   Public Sub New(t As Temperature)\n      temp = t\n      RecordTemperatures()\n   End Sub\n\n   Public Sub RecordTemperatures()\n      temp.CurrentTemperature = 66\n      temp.CurrentTemperature = 63\n\n   End Sub\n\n   Friend Shared Sub TemperatureNotification(sender As Object, e As TemperatureChangedEventArgs) _\n          Handles temp.TemperatureChanged\n      Console.WriteLine(\"Notification 1: The temperature changed from {0} to {1}\", e.OldTemperature, e.CurrentTemperature)   \n   End Sub\n\n   Friend Shared Sub DuplicateTemperatureNotification(sender As Object, e As TemperatureChangedEventArgs) _\n          Handles temp.TemperatureChanged\n      Console.WriteLine(\"Notification 2: The temperature changed from {0} to {1}\", e.OldTemperature, e.CurrentTemperature)   \n   End Sub\nEnd Class\n```\n\n### Overloads\n\nThe Common Language Specification imposes the following requirements on overloaded members: \n\n* Members can be overloaded based on the number of parameters and the type of any parameter. Calling convention, return type, custom modifiers applied to the method or its parameter, and whether parameters are passed by value or by reference are not considered when differentiating between overloads. For an example, see the code for the requirement that names must be unique within a scope in the [Naming conventions](#naming-conventions) section. \n\n* Only properties and methods can be overloaded. Fields and events cannot be overloaded. \n\n* Generic methods can be overloaded based on the number of their generic parameters. \n\n> [!NOTE]\n>The `op_Explicit` and `op_Implicit` operators are exceptions to the rule that return value is not considered part of a method signature for overload resolution. These two operators can be overloaded based on both their parameters and their return value. \n\n### Exceptions\n\nException objects must derive from [System.Exception](xref:System.Exception) or from another type derived from `System.Exception`. The following example illustrates the compiler error that results when a custom class named `ErrorClass` is used for exception handling.\n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class ErrorClass\n{ \n   string msg;\n\n   public ErrorClass(string errorMessage)\n   {\n      msg = errorMessage;\n   }\n\n   public string Message\n   {\n      get { return msg; }\n   }\n}\n\npublic static class StringUtilities\n{\n   public static string[] SplitString(this string value, int index)\n   {\n      if (index < 0 | index > value.Length) {\n         ErrorClass badIndex = new ErrorClass(\"The index is not within the string.\");\n         throw badIndex;\n      }\n      string[] retVal = { value.Substring(0, index - 1), \n                          value.Substring(index) };\n      return retVal;\n   }\n}\n// Compilation produces a compiler error like the following:\n//    Exceptions1.cs(26,16): error CS0155: The type caught or thrown must be derived from\n//            System.Exception\n```\n\n```vb\nImports System.Runtime.CompilerServices\n\n<Assembly: CLSCompliant(True)>\n\nPublic Class ErrorClass \n   Dim msg As String\n\n   Public Sub New(errorMessage As String)\n      msg = errorMessage\n   End Sub\n\n   Public ReadOnly Property Message As String\n      Get\n         Return msg\n      End Get   \n   End Property\nEnd Class\n\nPublic Module StringUtilities\n   <Extension()> Public Function SplitString(value As String, index As Integer) As String()\n      If index < 0 Or index > value.Length Then\n         Dim BadIndex As New ErrorClass(\"The index is not within the string.\")\n         Throw BadIndex\n      End If\n      Dim retVal() As String = { value.Substring(0, index - 1), \n                                 value.Substring(index) }\n      Return retVal\n   End Function\nEnd Module\n' Compilation produces a compiler error like the following:\n'    Exceptions1.vb(27) : error BC30665: 'Throw' operand must derive from 'System.Exception'.\n'    \n'             Throw BadIndex\n'             ~~~~~~~~~~~~~~\n```\n\nTo correct this error, the `ErrorClass` class must inherit from `System.Exception`. In addition, the Message property must be overridden. The following example corrects these errors to define an `ErrorClass` class that is CLS-compliant.  \n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\npublic class ErrorClass : Exception\n{ \n   string msg;\n\n   public ErrorClass(string errorMessage)\n   {\n      msg = errorMessage;\n   }\n\n   public override string Message\n   {\n      get { return msg; }\n   }\n}\n\npublic static class StringUtilities\n{\n   public static string[] SplitString(this string value, int index)\n   {\n      if (index < 0 | index > value.Length) {\n         ErrorClass badIndex = new ErrorClass(\"The index is not within the string.\");\n         throw badIndex;\n      }\n      string[] retVal = { value.Substring(0, index - 1), \n                          value.Substring(index) };\n      return retVal;\n   }\n}\n```\n\n```vb\nImports System.Runtime.CompilerServices\n\n<Assembly: CLSCompliant(True)>\n\nPublic Class ErrorClass : Inherits Exception\n   Dim msg As String\n\n   Public Sub New(errorMessage As String)\n      msg = errorMessage\n   End Sub\n\n   Public Overrides ReadOnly Property Message As String\n      Get\n         Return msg\n      End Get   \n   End Property\nEnd Class\n\nPublic Module StringUtilities\n   <Extension()> Public Function SplitString(value As String, index As Integer) As String()\n      If index < 0 Or index > value.Length Then\n         Dim BadIndex As New ErrorClass(\"The index is not within the string.\")\n         Throw BadIndex\n      End If\n      Dim retVal() As String = { value.Substring(0, index - 1), \n                                 value.Substring(index) }\n      Return retVal\n   End Function\nEnd Module\n```\n\n### Attributes\n\nIn.NET Framework assemblies, custom attributes provide an extensible mechanism for storing custom attributes and retrieving metadata about programming objects, such as assemblies, types, members, and method parameters. Custom attributes must derive from [System.Attribute](xref:System.Attribute) or from a type derived from `System.Attribute`.\n\nThe following example violates this rule. It defines a `NumericAttribute` class that does not derive from `System.Attribute`. Note that a compiler error results only when the non-CLS-compliant attribute is applied, not when the class is defined. \n\n```csharp\nusing System;\n\n[assembly: CLSCompliant(true)]\n\n[AttributeUsageAttribute(AttributeTargets.Class | AttributeTargets.Struct)] \npublic class NumericAttribute\n{\n   private bool _isNumeric;\n\n   public NumericAttribute(bool isNumeric)\n   {\n      _isNumeric = isNumeric;\n   }\n\n   public bool IsNumeric \n   {\n      get { return _isNumeric; }\n   }\n}\n\n[Numeric(true)] public struct UDouble\n{\n   double Value;\n}\n// Compilation produces a compiler error like the following:\n//    Attribute1.cs(22,2): error CS0616: 'NumericAttribute' is not an attribute class\n//    Attribute1.cs(7,14): (Location of symbol related to previous error)\n```\n\n```vb\n<Assembly: CLSCompliant(True)>\n\n<AttributeUsageAttribute(AttributeTargets.Class Or AttributeTargets.Struct)> _\nPublic Class NumericAttribute\n   Private _isNumeric As Boolean\n\n   Public Sub New(isNumeric As Boolean)\n      _isNumeric = isNumeric\n   End Sub\n\n   Public ReadOnly Property IsNumeric As Boolean\n      Get\n         Return _isNumeric\n      End Get\n   End Property\nEnd Class\n\n<Numeric(True)> Public Structure UDouble\n   Dim Value As Double\nEnd Structure\n' Compilation produces a compiler error like the following:\n'    error BC31504: 'NumericAttribute' cannot be used as an attribute because it \n'    does not inherit from 'System.Attribute'.\n'    \n'    <Numeric(True)> Public Structure UDouble\n'     ~~~~~~~~~~~~~\n```\n\nThe constructor or the properties of a CLS-compliant attribute can expose only the following types:\n\n* [Boolean](xref:System.Boolean)\n\n* [Byte](xref:System.Byte)\n\n* [Char](xref:System.Char)\n\n* [Double](xref:System.Double)\n\n* [Int16](xref:System.Int16)\n\n* [Int32](xref:System.Int32)\n\n* [Int64](xref:System.Int64)\n\n* [Single](xref:System.Single)\n\n* [String](xref:System.String)\n\n* [Type](xref:System.Type)\n\n* Any enumeration type whose underlying type is `Byte`, `Int16`, `Int32`, or `Int64`. \n\nThe following example defines a `DescriptionAttribute` class that derives from [Attribute](xref:System.Attribute). The class constructor has a parameter of type `Descriptor`, so the class is not CLS-compliant. Note that the C# compiler emits a warning but compiles successfully. \n\n```csharp\nusing System;\n\n[assembly:CLSCompliantAttribute(true)]\n\npublic enum DescriptorType { type, member };\n\npublic class Descriptor\n{\n   public DescriptorType Type;\n   public String Description; \n}\n\n[AttributeUsage(AttributeTargets.All)]\npublic class DescriptionAttribute : Attribute\n{\n   private Descriptor desc;\n\n   public DescriptionAttribute(Descriptor d)\n   {\n      desc = d; \n   }\n\n   public Descriptor Descriptor\n   { get { return desc; } } \n}\n// Attempting to compile the example displays output like the following:\n//       warning CS3015: 'DescriptionAttribute' has no accessible\n//               constructors which use only CLS-compliant types\n```\n\n```vb\n<Assembly:CLSCompliantAttribute(True)>\n\nPublic Enum DescriptorType As Integer\n   Type = 0\n   Member = 1\nEnd Enum\n\nPublic Class Descriptor\n   Public Type As DescriptorType \n   Public Description As String \nEnd Class\n\n<AttributeUsage(AttributeTargets.All)> _\nPublic Class DescriptionAttribute : Inherits Attribute\n   Private desc As Descriptor\n\n   Public Sub New(d As Descriptor)\n      desc = d \n   End Sub\n\n   Public ReadOnly Property Descriptor As Descriptor\n      Get \n         Return desc\n      End Get    \n   End Property\nEnd Class\n```\n\n## The CLSCompliantAttribute attribute\n\nThe [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute is used to indicate whether a program element complies with the Common Language Specification. The `CLSCompliantAttribute.CLSCompliantAttribute(Boolean)` constructor includes a single required parameter, *isCompliant*, that indicates whether the program element is CLS-compliant. \n\nAt compile time, the compiler detects non-compliant elements that are presumed to be CLS-compliant and emits a warning. The compiler does not emit warnings for types or members that are explicitly declared to be non-compliant. \n\nComponent developers can use the `CLSCompliantAttribute` attribute in two ways: \n\n* To define the parts of the public interface exposed by a component that are CLS-compliant and the parts that are not CLS-compliant. When the attribute is used to mark particular program elements as CLS-compliant, its use guarantees that those elements are accessible from all languages and tools that target the .NET Framework. \n\n* To ensure that the component library's public interface exposes only program elements that are CLS-compliant. If elements are not CLS-compliant, compilers will generally issue a warning.\n\n> [!WARNING]\n> In some cases, language compilers enforce CLS-compliant rules regardless of whether the `CLSCompliantAttribute` attribute is used. For example, defining a `*static` member in an interface violates a CLS rule. However, if you define a `*static` member in an interface, the C# compiler displays an error message and fails to compile the app.\n\nThe `CLSCompliantAttribute` attribute is marked with an [AttributeUsageAttribute](xref:System.AttributeUsageAttribute) attribute that has a value of `AttributeTargets.All`. This value allows you to apply the `CLSCompliantAttribute` attribute to any program element, including assemblies, modules, types (classes, structures, enumerations, interfaces, and delegates), type members (constructors, methods, properties, fields, and events), parameters, generic parameters, and return values. However, in practice, you should apply the attribute only to assemblies, types, and type members. Otherwise, compilers ignore the attribute and continue to generate compiler warnings whenever they encounter a non-compliant parameter, generic parameter, or return value in your library's public interface.  \n\nThe value of the `CLSCompliantAttribute` attribute is inherited by contained program elements. For example, if an assembly is marked as CLS-compliant, its types are also CLS-compliant. If a type is marked as CLS-compliant, its nested types and members are also CLS-compliant. \n\nYou can explicitly override the inherited compliance by applying the `CLSCompliantAttribute` attribute to a contained program element. For example, you can use the `CLSCompliantAttribute` attribute with an *isCompliant* value of `false` to define a non-compliant type in a compliant assembly, and you can use the attribute with an *isComplian* value of `true` to define a compliant type in a non-compliant assembly. You can also define non-compliant members in a compliant type. However, a non-compliant type cannot have compliant members, so you cannot use the attribute with an *isCompliant* value of `true` to override inheritance from a non-compliant type. \n\nWhen you are developing components, you should always use the `CLSCompliantAttribute` attribute to indicate whether your assembly, its types, and its members are CLS-compliant. \n\nTo create CLS-compliant components: \n\n1. Use the `CLSCompliantAttribute` to mark you assembly as CLS-compliant.\n\n2. Mark any publicly exposed types in the assembly that are not CLS-compliant as non-compliant. \n\n3. Mark any publicly exposed members in CLS-compliant types as non-compliant. \n\n4. Provide a CLS-compliant alternative for non-CLS-compliant members. \n\nIf you've successfully marked all your non-compliant types and members, your compiler should not emit any non-compliance warnings. However, you should indicate which members are not CLS-compliant and list their CLS-compliant alternatives in your product documentation. \n\nThe following example uses the `CLSCompliantAttribute` attribute to define a CLS-compliant assembly and a type, `CharacterUtilities`, that has two non-CLS-compliant members. Because both members are tagged with the `CLSCompliant(false)` attribute, the compiler produces no warnings. The class also provides a CLS-compliant alternative for both methods. Ordinarily, we would just add two overloads to the `ToUTF16` method to provide CLS-compliant alternatives. However, because methods cannot be overloaded based on return value, the names of the CLS-compliant methods are different from the names of the non-compliant methods.  \n\n```csharp\nusing System;\nusing System.Text;\n\n[assembly:CLSCompliant(true)]\n\npublic class CharacterUtilities\n{\n   [CLSCompliant(false)] public static ushort ToUTF16(String s)\n   {\n      s = s.Normalize(NormalizationForm.FormC);\n      return Convert.ToUInt16(s[0]);\n   }\n\n   [CLSCompliant(false)] public static ushort ToUTF16(Char ch)\n   {\n      return Convert.ToUInt16(ch); \n   }\n\n   // CLS-compliant alternative for ToUTF16(String).\n   public static int ToUTF16CodeUnit(String s)\n   {\n      s = s.Normalize(NormalizationForm.FormC);\n      return (int) Convert.ToUInt16(s[0]);\n   }\n\n   // CLS-compliant alternative for ToUTF16(Char).\n   public static int ToUTF16CodeUnit(Char ch)\n   {\n      return Convert.ToInt32(ch);\n   }\n\n   public bool HasMultipleRepresentations(String s)\n   {\n      String s1 = s.Normalize(NormalizationForm.FormC);\n      return s.Equals(s1);   \n   }\n\n   public int GetUnicodeCodePoint(Char ch)\n   {\n      if (Char.IsSurrogate(ch))\n         throw new ArgumentException(\"ch cannot be a high or low surrogate.\");\n\n      return Char.ConvertToUtf32(ch.ToString(), 0);   \n   }\n\n   public int GetUnicodeCodePoint(Char[] chars)\n   {\n      if (chars.Length > 2)\n         throw new ArgumentException(\"The array has too many characters.\");\n\n      if (chars.Length == 2) {\n         if (! Char.IsSurrogatePair(chars[0], chars[1]))\n            throw new ArgumentException(\"The array must contain a low and a high surrogate.\");\n         else\n            return Char.ConvertToUtf32(chars[0], chars[1]);\n      }\n      else {\n         return Char.ConvertToUtf32(chars.ToString(), 0);\n      } \n   }\n}\n```\n\n```vb\nImports System.Text\n\n<Assembly:CLSCompliant(True)>\n\nPublic Class CharacterUtilities\n   <CLSCompliant(False)> Public Shared Function ToUTF16(s As String) As UShort\n      s = s.Normalize(NormalizationForm.FormC)\n      Return Convert.ToUInt16(s(0))\n   End Function\n\n   <CLSCompliant(False)> Public Shared Function ToUTF16(ch As Char) As UShort\n      Return Convert.ToUInt16(ch) \n   End Function\n\n   ' CLS-compliant alternative for ToUTF16(String).\n   Public Shared Function ToUTF16CodeUnit(s As String) As Integer\n      s = s.Normalize(NormalizationForm.FormC)\n      Return CInt(Convert.ToInt16(s(0)))\n   End Function\n\n   ' CLS-compliant alternative for ToUTF16(Char).\n   Public Shared Function ToUTF16CodeUnit(ch As Char) As Integer\n      Return Convert.ToInt32(ch)\n   End Function\n\n   Public Function HasMultipleRepresentations(s As String) As Boolean\n      Dim s1 As String = s.Normalize(NormalizationForm.FormC)\n      Return s.Equals(s1)   \n   End Function\n\n   Public Function GetUnicodeCodePoint(ch As Char) As Integer\n      If Char.IsSurrogate(ch) Then\n         Throw New ArgumentException(\"ch cannot be a high or low surrogate.\")\n      End If\n      Return Char.ConvertToUtf32(ch.ToString(), 0)   \n   End Function\n\n   Public Function GetUnicodeCodePoint(chars() As Char) As Integer\n      If chars.Length > 2 Then\n         Throw New ArgumentException(\"The array has too many characters.\")\n      End If\n      If chars.Length = 2 Then\n         If Not Char.IsSurrogatePair(chars(0), chars(1)) Then\n            Throw New ArgumentException(\"The array must contain a low and a high surrogate.\")\n         Else\n            Return Char.ConvertToUtf32(chars(0), chars(1))\n         End If\n      Else\n         Return Char.ConvertToUtf32(chars.ToString(), 0)\n      End If \n   End Function            \nEnd Class\n```\n\nIf you are developing an app rather than a library (that is, if you aren't exposing types or members that can be consumed by other app developers), the CLS compliance of the program elements that your app consumes are of interest only if your language does not support them. In that case, your language compiler will generate an error when you try to use a non-CLS-compliant element. \n\n## Cross-Language Interoperability\n\nLanguage independence has a number of possible meanings. One meaning involves seamlessly consuming types written in one language from an app written in another language. A second meaning, which is the focus of this article, involves combining code written in multiple languages into a single .NET Framework assembly. \n\nThe following example illustrates cross-language interoperability by creating a class library named Utilities.dll that includes two classes, `NumericLib` and `StringLib`. The `NumericLib` class is written in C#, and the `StringLib` class is written in Visual Basic. Here's the source code for `StringUtil.vb`, which includes a single member, `ToTitleCase`, in its `StringLib` class.\n\n```vb\nImports System.Collections.Generic\nImports System.Runtime.CompilerServices\n\nPublic Module StringLib\n   Private exclusions As List(Of String) \n\n   Sub New()\n      Dim words() As String = { \"a\", \"an\", \"and\", \"of\", \"the\" }\n      exclusions = New List(Of String)\n      exclusions.AddRange(words)\n   End Sub\n\n   <Extension()> _\n   Public Function ToTitleCase(title As String) As String\n      Dim words() As String = title.Split() \n      Dim result As String = String.Empty\n\n      For ctr As Integer = 0 To words.Length - 1\n         Dim word As String = words(ctr)\n         If ctr = 0 OrElse Not exclusions.Contains(word.ToLower()) Then\n            result += word.Substring(0, 1).ToUpper() + _\n                      word.Substring(1).ToLower()\n         Else\n            result += word.ToLower()\n         End If\n         If ctr <= words.Length - 1 Then\n            result += \" \"             \n         End If   \n      Next \n      Return result \n   End Function\nEnd Module\n```\n\nHere's the source code for NumberUtil.cs, which defines a `NumericLib` class that has two members, `IsEven` and `NearZero`.\n\n```csharp\nusing System;\n\npublic static class NumericLib \n{\n   public static bool IsEven(this IConvertible number)\n   {\n      if (number is Byte ||\n          number is SByte ||\n          number is Int16 ||\n          number is UInt16 || \n          number is Int32 || \n          number is UInt32 ||\n          number is Int64)\n         return ((long) number) % 2 == 0;\n      else if (number is UInt64)\n         return ((ulong) number) %2 == 0;\n      else\n         throw new NotSupportedException(\"IsEven called for a non-integer value.\");\n   }\n\n   public static bool NearZero(double number)\n   {\n      return number < .00001; \n   }\n}\n```\n\nTo package the two classes in a single assembly, you must compile them into modules. To compile the Visual Basic source code file into a module, use this command: \n\n```\nvbc /t:module StringUtil.vb \n```\n\nTo compile the C# source code file into a module, use this command:\n\n```\ncsc /t:module NumberUtil.cs\n```\n\nYou then use the Link tool (Link.exe) to compile the two modules into an assembly: \n\n```\nlink numberutil.netmodule stringutil.netmodule /out:UtilityLib.dll /dll\n```\n\nThe following example then calls the `NumericLib.NearZero` and `StringLib.ToTitleCase` methods. Note that both the Visual Basic code and the C# code are able to access the methods in both classes.\n\n```csharp\nusing System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Double dbl = 0.0 - Double.Epsilon;\n      Console.WriteLine(NumericLib.NearZero(dbl));\n\n      string s = \"war and peace\";\n      Console.WriteLine(s.ToTitleCase());\n   }\n}\n// The example displays the following output:\n//       True\n//       War and Peace\n```\n\n```vb\nModule Example\n   Public Sub Main()\n      Dim dbl As Double = 0.0 - Double.Epsilon\n      Console.WriteLine(NumericLib.NearZero(dbl))\n\n      Dim s As String = \"war and peace\"\n      Console.WriteLine(s.ToTitleCase())\n   End Sub\nEnd Module\n' The example displays the following output:\n'       True\n'       War and Peace\n```\n\nTo compile the Visual Basic code, use this command:\n\n```\nvbc example.vb /r:UtilityLib.dll\n```\n\nTo compile with C#, change the name of the compiler from vbc to csc, and change the file extension from .vb to .cs:\n\n```\ncsc example.cs /r:UtilityLib.dll\n```\n\n","nodes":[{"pos":[11,68],"content":"Language independence and language-independent components","needQuote":true,"needEscape":true,"nodes":[{"content":"Language independence and language-independent components","pos":[0,57]}]},{"pos":[82,139],"content":"Language independence and language-independent components","needQuote":true,"needEscape":true,"nodes":[{"content":"Language independence and language-independent components","pos":[0,57]}]},{"pos":[150,165],"content":".NET, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"pos":[368,425],"content":"Language independence and language-independent components","linkify":"Language independence and language-independent components","nodes":[{"content":"Language independence and language-independent components","pos":[0,57]}]},{"content":"The .NET platform is language independent.","pos":[427,469]},{"content":"This means that, as a developer, you can develop in one of the many languages that target the .NET platform, such as C#, F#, and Visual Basic.","pos":[470,612]},{"content":"You can access the types and members of class libraries developed for the .NET platform without having to know the language in which they were originally written and without having to follow any of the original language's conventions.","pos":[613,847]},{"content":"If you are a component developer, your component can be accessed by any .NET app regardless of its language.","pos":[848,956]},{"pos":[960,1339],"content":"[!NOTE]\nThis first part of this article discusses creating language-independent components - that is, components that can be consumed by apps that are written in any language. You can also create a single component or app from source code written in multiple languages; see [Cross-Language Interoperability](#cross-language-interoperability) in the second part of this article.","leadings":["","> "],"nodes":[{"content":"This first part of this article discusses creating language-independent components - that is, components that can be consumed by apps that are written in any language. You can also create a single component or app from source code written in multiple languages; see [Cross-Language Interoperability](#cross-language-interoperability) in the second part of this article.","pos":[8,377],"nodes":[{"content":"This first part of this article discusses creating language-independent components - that is, components that can be consumed by apps that are written in any language.","pos":[0,167]},{"content":"You can also create a single component or app from source code written in multiple languages; see <bpt id=\"p1\">[</bpt>Cross-Language Interoperability<ept id=\"p1\">](#cross-language-interoperability)</ept> in the second part of this article.","pos":[168,369],"source":" You can also create a single component or app from source code written in multiple languages; see [Cross-Language Interoperability](#cross-language-interoperability) in the second part of this article."}]}]},{"content":"To fully interact with other objects written in any language, objects must expose to callers only those features that are common to all languages.","pos":[1342,1488]},{"content":"This common set of features is defined by the Common Language Specification (CLS), which is a set of rules that apply to generated assemblies.","pos":[1489,1631]},{"content":"The Common Language Specification is defined in Partition I, Clauses 7 through 11 of the <bpt id=\"p1\">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id=\"p1\">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>.","pos":[1632,1844],"source":" The Common Language Specification is defined in Partition I, Clauses 7 through 11 of the [ECMA-335 Standard: Common Language Infrastructure](http://www.ecma-international.org/publications/standards/Ecma-335.htm)."},{"content":"If your component conforms to the Common Language Specification, it is guaranteed to be CLS-compliant and can be accessed from code in assemblies written in any programming language that supports the CLS.","pos":[1847,2051]},{"content":"You can determine whether your component conforms to the Common Language Specification at compile time by applying the <bpt id=\"p1\">[</bpt>CLSCompliantAttribute<ept id=\"p1\">](xref:System.CLSCompliantAttribute)</ept> attribute to your source code.","pos":[2052,2260],"source":" You can determine whether your component conforms to the Common Language Specification at compile time by applying the [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute to your source code."},{"content":"For more information, see The <bpt id=\"p1\">[</bpt>CLSCompliantAttribute attribute<ept id=\"p1\">](#the-clscompliantattribute-attribute)</ept>.","pos":[2261,2363],"source":" For more information, see The [CLSCompliantAttribute attribute](#the-clscompliantattribute-attribute)."},{"content":"In this article:","pos":[2365,2381]},{"pos":[2385,2430],"content":"<bpt id=\"p1\">[</bpt>CLS compliance rules<ept id=\"p1\">](#cls-compliance-rules)</ept>","source":"[CLS compliance rules](#cls-compliance-rules)"},{"pos":[2438,2507],"content":"<bpt id=\"p1\">[</bpt>Types and type member signatures<ept id=\"p1\">](#types-and-type-member-signatures)</ept>","source":"[Types and type member signatures](#types-and-type-member-signatures)"},{"pos":[2515,2556],"content":"<bpt id=\"p1\">[</bpt>Naming conventions<ept id=\"p1\">](#naming-conventions)</ept>","source":"[Naming conventions](#naming-conventions)"},{"pos":[2568,2603],"content":"<bpt id=\"p1\">[</bpt>Type conversion<ept id=\"p1\">](#type-conversion)</ept>","source":"[Type conversion](#type-conversion)"},{"pos":[2615,2632],"content":"<bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](#arrays)</ept>","source":"[Arrays](#arrays)"},{"pos":[2644,2669],"content":"<bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](#interfaces)</ept>","source":"[Interfaces](#interfaces)"},{"pos":[2681,2710],"content":"<bpt id=\"p1\">[</bpt>Enumerations<ept id=\"p1\">](#enumerations)</ept>","source":"[Enumerations](#enumerations)"},{"pos":[2722,2773],"content":"<bpt id=\"p1\">[</bpt>Type members in general<ept id=\"p1\">](#type-members-in-general)</ept>","source":"[Type members in general](#type-members-in-general)"},{"pos":[2785,2830],"content":"<bpt id=\"p1\">[</bpt>Member accessibility<ept id=\"p1\">](#member-accessibility)</ept>","source":"[Member accessibility](#member-accessibility)"},{"pos":[2842,2897],"content":"<bpt id=\"p1\">[</bpt>Generic types and members<ept id=\"p1\">](#generic-types-and-members)</ept>","source":"[Generic types and members](#generic-types-and-members)"},{"pos":[2909,2938],"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](#constructors)</ept>","source":"[Constructors](#constructors)"},{"pos":[2950,2975],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](#properties)</ept>","source":"[Properties](#properties)"},{"pos":[2987,3004],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](#events)</ept>","source":"[Events](#events)"},{"pos":[3016,3039],"content":"<bpt id=\"p1\">[</bpt>Overloads<ept id=\"p1\">](#overloads)</ept>","source":"[Overloads](#overloads)"},{"pos":[3051,3076],"content":"<bpt id=\"p1\">[</bpt>Exceptions<ept id=\"p1\">](#exceptions)</ept>","source":"[Exceptions](#exceptions)"},{"pos":[3088,3113],"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](#attributes)</ept>","source":"[Attributes](#attributes)"},{"pos":[3121,3192],"content":"<bpt id=\"p1\">[</bpt>CLSCompliantAttribute attribute<ept id=\"p1\">](#the-clscompliantattribute-attribute)</ept>","source":"[CLSCompliantAttribute attribute](#the-clscompliantattribute-attribute)"},{"pos":[3196,3263],"content":"<bpt id=\"p1\">[</bpt>Cross-Language Interoperability<ept id=\"p1\">](#cross-language-interoperability)</ept>","source":"[Cross-Language Interoperability](#cross-language-interoperability)"},{"pos":[3268,3288],"content":"CLS compliance rules","linkify":"CLS compliance rules","nodes":[{"content":"CLS compliance rules","pos":[0,20]}]},{"content":"This section discusses the rules for creating a CLS-compliant component.","pos":[3290,3362]},{"content":"For a complete list of rules, see Partition I, Clause 11 of the <bpt id=\"p1\">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id=\"p1\">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>.","pos":[3363,3550],"source":" For a complete list of rules, see Partition I, Clause 11 of the [ECMA-335 Standard: Common Language Infrastructure](http://www.ecma-international.org/publications/standards/Ecma-335.htm)."},{"pos":[3554,4198],"content":"[!NOTE]\nThe Common Language Specification discusses each rule for CLS compliance as it applies to consumers (developers who are programmatically accessing a component that is CLS-compliant), frameworks (developers who are using a language compiler to create CLS-compliant libraries), and extenders (developers who are creating a tool such as a language compiler or a code parser that creates CLS-compliant components). This article focuses on the rules as they apply to frameworks. Note, though, that some of the rules that apply to extenders may also apply to assemblies that are created using [Reflection.Emit](xref:System.Reflection.Emit).","leadings":["","> "],"nodes":[{"content":"The Common Language Specification discusses each rule for CLS compliance as it applies to consumers (developers who are programmatically accessing a component that is CLS-compliant), frameworks (developers who are using a language compiler to create CLS-compliant libraries), and extenders (developers who are creating a tool such as a language compiler or a code parser that creates CLS-compliant components). This article focuses on the rules as they apply to frameworks. Note, though, that some of the rules that apply to extenders may also apply to assemblies that are created using [Reflection.Emit](xref:System.Reflection.Emit).","pos":[8,642],"nodes":[{"content":"The Common Language Specification discusses each rule for CLS compliance as it applies to consumers (developers who are programmatically accessing a component that is CLS-compliant), frameworks (developers who are using a language compiler to create CLS-compliant libraries), and extenders (developers who are creating a tool such as a language compiler or a code parser that creates CLS-compliant components).","pos":[0,410]},{"content":"This article focuses on the rules as they apply to frameworks.","pos":[411,473]},{"content":"Note, though, that some of the rules that apply to extenders may also apply to assemblies that are created using <bpt id=\"p1\">[</bpt>Reflection.Emit<ept id=\"p1\">](xref:System.Reflection.Emit)</ept>.","pos":[474,634],"source":" Note, though, that some of the rules that apply to extenders may also apply to assemblies that are created using [Reflection.Emit](xref:System.Reflection.Emit)."}]}]},{"content":"To design a component that is language independent, you only need to apply the rules for CLS compliance to your component's public interface.","pos":[4201,4342]},{"content":"Your private implementation does not have to conform to the specification.","pos":[4343,4417]},{"pos":[4422,4546],"content":"[!IMPORTANT]\nThe rules for CLS compliance apply only to a component's public interface, not to its private implementation.","leadings":["","> "],"nodes":[{"content":"The rules for CLS compliance apply only to a component's public interface, not to its private implementation.","pos":[13,122]}]},{"content":"For example, unsigned integers other than <bpt id=\"p1\">[</bpt>Byte<ept id=\"p1\">](xref:System.Byte)</ept> are not CLS-compliant.","pos":[4549,4638],"source":"For example, unsigned integers other than [Byte](xref:System.Byte) are not CLS-compliant."},{"content":"Because the <ph id=\"ph1\">`Person`</ph> class in the following example exposes an <ph id=\"ph2\">`Age`</ph> property of type <bpt id=\"p1\">[</bpt>UInt16<ept id=\"p1\">](xref:System.UInt16)</ept>, the following code displays a compiler warning.","pos":[4639,4802],"source":" Because the `Person` class in the following example exposes an `Age` property of type [UInt16](xref:System.UInt16), the following code displays a compiler warning."},{"content":"You can make the Person class CLS-compliant by changing the type of <ph id=\"ph1\">`Age`</ph> property from <ph id=\"ph2\">`UInt16`</ph> to <bpt id=\"p1\">[</bpt>Int16<ept id=\"p1\">](xref:System.Int16)</ept>, which is a CLS-compliant, 16-bit signed integer.","pos":[5622,5798],"source":"You can make the Person class CLS-compliant by changing the type of `Age` property from `UInt16` to [Int16](xref:System.Int16), which is a CLS-compliant, 16-bit signed integer."},{"content":"You do not have to change the type of the private <ph id=\"ph1\">`personAge`</ph> field.","pos":[5799,5867],"source":" You do not have to change the type of the private `personAge` field."},{"content":"A library's public interface consists of the following:","pos":[6279,6334]},{"content":"Definitions of public classes.","pos":[6338,6368]},{"content":"Definitions of the public members of public classes, and definitions of members accessible to derived classes (that is, protected members).","pos":[6372,6511]},{"content":"Parameters and return types of public methods of public classes, and parameters and return types of methods accessible to derived classes.","pos":[6516,6654]},{"content":"The rules for CLS compliance are listed in the following table.","pos":[6657,6720]},{"content":"The text of the rules is taken verbatim from the <bpt id=\"p1\">[</bpt>ECMA-335 Standard: Common Language Infrastructure<ept id=\"p1\">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept>, which is Copyright 2012 by Ecma International.","pos":[6721,6940],"source":" The text of the rules is taken verbatim from the [ECMA-335 Standard: Common Language Infrastructure](http://www.ecma-international.org/publications/standards/Ecma-335.htm), which is Copyright 2012 by Ecma International."},{"content":"More detailed information about these rules is found in the following sections.","pos":[6941,7020]},{"content":"Category","pos":[7023,7031]},{"content":"See","pos":[7034,7037]},{"content":"Rule","pos":[7040,7044]},{"content":"Rule Number","pos":[7047,7058]},{"content":"Accessibility","pos":[7095,7108]},{"pos":[7111,7156],"content":"<bpt id=\"p1\">[</bpt>Member accessibility<ept id=\"p1\">](#member-accessibility)</ept>","source":"[Member accessibility](#member-accessibility)"},{"content":"Accessibility shall not be changed when overriding inherited methods, except when overriding a method inherited from a different assembly with accessibility <ph id=\"ph1\">`family-or-assembly`</ph>.","pos":[7159,7337],"source":"Accessibility shall not be changed when overriding inherited methods, except when overriding a method inherited from a different assembly with accessibility `family-or-assembly`."},{"content":"In this case, the override shall have accessibility <ph id=\"ph1\">`family`</ph>.","pos":[7338,7399],"source":" In this case, the override shall have accessibility `family`."},{"content":"10","pos":[7402,7404]},{"content":"Accessibility","pos":[7405,7418]},{"pos":[7421,7466],"content":"<bpt id=\"p1\">[</bpt>Member accessibility<ept id=\"p1\">](#member-accessibility)</ept>","source":"[Member accessibility](#member-accessibility)"},{"content":"The visibility and accessibility of types and members shall be such that types in the signature of any member shall be visible and accessible whenever the member itself is visible and accessible.","pos":[7469,7664]},{"content":"For example, a public method that is visible outside its assembly shall not have an argument whose type is visible only within the assembly.","pos":[7665,7805]},{"content":"The visibility and accessibility of types composing an instantiated generic type used in the signature of any member shall be visible and accessible whenever the member itself is visible and accessible.","pos":[7806,8008]},{"content":"For example, an instantiated generic type present in the signature of a member that is visible outside its assembly shall not have a generic argument whose type is visible only within the assembly.","pos":[8009,8206]},{"content":"12","pos":[8209,8211]},{"content":"Arrays","pos":[8212,8218]},{"pos":[8221,8238],"content":"<bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](#arrays)</ept>","source":"[Arrays](#arrays)"},{"content":"Arrays shall have elements with a CLS-compliant type, and all dimensions of the array shall have lower bounds of zero.","pos":[8241,8359]},{"content":"Only the fact that an item is an array and the element type of the array shall be required to distinguish between overloads.","pos":[8360,8484]},{"content":"When overloading is based on two or more array types the element types shall be named types.","pos":[8485,8577]},{"content":"16","pos":[8580,8582]},{"content":"Attributes","pos":[8583,8593]},{"pos":[8596,8621],"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](#attributes)</ept>","source":"[Attributes](#attributes)"},{"pos":[8624,8724],"content":"Attributes shall be of type <bpt id=\"p1\">[</bpt>System.Attribute<ept id=\"p1\">](xref:System.Attribute)</ept>, or a type inheriting from it.","source":"Attributes shall be of type [System.Attribute](xref:System.Attribute), or a type inheriting from it."},{"content":"41","pos":[8727,8729]},{"content":"Attributes","pos":[8730,8740]},{"pos":[8743,8768],"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](#attributes)</ept>","source":"[Attributes](#attributes)"},{"content":"The CLS only allows a subset of the encodings of custom attributes.","pos":[8771,8838]},{"content":"The only types that shall appear in these encodings are (see Partition IV): <bpt id=\"p1\">[</bpt>System.Type<ept id=\"p1\">](xref:System.Type)</ept>, <bpt id=\"p2\">[</bpt>System.String<ept id=\"p2\">](xref:System.String)</ept>, <bpt id=\"p3\">[</bpt>System.Char<ept id=\"p3\">](xref:System.Char)</ept>, <bpt id=\"p4\">[</bpt>System.Boolean<ept id=\"p4\">](xref:System.Boolean)</ept>, <bpt id=\"p5\">[</bpt>System.Byte<ept id=\"p5\">](xref:System.Byte)</ept>, <bpt id=\"p6\">[</bpt>System.Int16<ept id=\"p6\">](xref:System.Int16)</ept>, <bpt id=\"p7\">[</bpt>System.Int32<ept id=\"p7\">](xref:System.Int32)</ept>, <bpt id=\"p8\">[</bpt>System.Int64<ept id=\"p8\">](xref:System.Int64)</ept>, <bpt id=\"p9\">[</bpt>System.Single<ept id=\"p9\">](xref:System.Single)</ept>, <bpt id=\"p10\">[</bpt>System.Double<ept id=\"p10\">](xref:System.Double)</ept>, and any enumeration type based on a CLS-compliant base integer type.","pos":[8839,9337],"source":" The only types that shall appear in these encodings are (see Partition IV): [System.Type](xref:System.Type), [System.String](xref:System.String), [System.Char](xref:System.Char), [System.Boolean](xref:System.Boolean), [System.Byte](xref:System.Byte), [System.Int16](xref:System.Int16), [System.Int32](xref:System.Int32), [System.Int64](xref:System.Int64), [System.Single](xref:System.Single), [System.Double](xref:System.Double), and any enumeration type based on a CLS-compliant base integer type."},{"content":"34","pos":[9340,9342]},{"content":"Attributes","pos":[9343,9353]},{"pos":[9356,9381],"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](#attributes)</ept>","source":"[Attributes](#attributes)"},{"pos":[9384,9559],"content":"The CLS does not allow publicly visible required modifiers (<ph id=\"ph1\">`modreq`</ph>, see Partition II), but does allow optional modifiers (<ph id=\"ph2\">`modopt`</ph>, see Partition II) it does not understand.","source":"The CLS does not allow publicly visible required modifiers (`modreq`, see Partition II), but does allow optional modifiers (`modopt`, see Partition II) it does not understand."},{"content":"35","pos":[9562,9564]},{"content":"Constructors","pos":[9565,9577]},{"pos":[9580,9609],"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](#constructors)</ept>","source":"[Constructors](#constructors)"},{"content":"An object constructor shall call some instance constructor of its base class before any access occurs to inherited instance data.","pos":[9612,9741]},{"content":"(This does not apply to value types, which need not have constructors.)","pos":[9742,9813]},{"content":"21","pos":[9817,9819]},{"content":"Constructors","pos":[9820,9832]},{"pos":[9835,9864],"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](#constructors)</ept>","source":"[Constructors](#constructors)"},{"content":"An object constructor shall not be called except as part of the creation of an object, and an object shall not be initialized twice.","pos":[9867,9999]},{"content":"22","pos":[10002,10004]},{"content":"Enumerations","pos":[10005,10017]},{"pos":[10020,10049],"content":"<bpt id=\"p1\">[</bpt>Enumerations<ept id=\"p1\">](#enumerations)</ept>","source":"[Enumerations](#enumerations)"},{"pos":[10052,10210],"content":"The underlying type of an enum shall be a built-in CLS integer type, the name of the field shall be \"value__\", and that field shall be marked <ph id=\"ph1\">`RTSpecialName`</ph>.","source":"The underlying type of an enum shall be a built-in CLS integer type, the name of the field shall be \"value__\", and that field shall be marked `RTSpecialName`."},{"content":"7","pos":[10214,10215]},{"content":"Enumerations","pos":[10216,10228]},{"pos":[10231,10260],"content":"<bpt id=\"p1\">[</bpt>Enumerations<ept id=\"p1\">](#enumerations)</ept>","source":"[Enumerations](#enumerations)"},{"content":"There are two distinct kinds of enums, indicated by the presence or absence of the <bpt id=\"p1\">[</bpt>System.FlagsAttribute<ept id=\"p1\">](xref:System.FlagsAttribute)</ept> (see Partition IV Library) custom attribute.","pos":[10263,10442],"source":"There are two distinct kinds of enums, indicated by the presence or absence of the [System.FlagsAttribute](xref:System.FlagsAttribute) (see Partition IV Library) custom attribute."},{"content":"One represents named integer values; the other represents named bit flags that can be combined to generate an unnamed value.","pos":[10443,10567]},{"content":"The value of an <ph id=\"ph1\">`enum`</ph> is not limited to the specified values.","pos":[10568,10630],"source":" The value of an `enum` is not limited to the specified values."},{"content":"8","pos":[10634,10635]},{"content":"Enumerations","pos":[10636,10648]},{"pos":[10651,10680],"content":"<bpt id=\"p1\">[</bpt>Enumerations<ept id=\"p1\">](#enumerations)</ept>","source":"[Enumerations](#enumerations)"},{"content":"Literal static fields of an enum shall have the type of the enum itself.","pos":[10683,10755]},{"content":"9","pos":[10759,10760]},{"content":"Events","pos":[10761,10767]},{"pos":[10770,10787],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](#events)</ept>","source":"[Events](#events)"},{"pos":[10790,10872],"content":"The methods that implement an event shall be marked <ph id=\"ph1\">`SpecialName`</ph> in the metadata.","source":"The methods that implement an event shall be marked `SpecialName` in the metadata."},{"content":"29","pos":[10874,10876]},{"content":"Events","pos":[10877,10883]},{"pos":[10886,10903],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](#events)</ept>","source":"[Events](#events)"},{"content":"The accessibility of an event and of its accessors shall be identical.","pos":[10906,10976]},{"content":"30","pos":[10978,10980]},{"content":"Events","pos":[10981,10987]},{"pos":[10990,11007],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](#events)</ept>","source":"[Events](#events)"},{"pos":[11010,11093],"content":"The <ph id=\"ph1\">`add`</ph> and <ph id=\"ph2\">`remove`</ph> methods for an event shall both either be present or absent.","source":"The `add` and `remove` methods for an event shall both either be present or absent."},{"content":"31","pos":[11095,11097]},{"content":"Events","pos":[11098,11104]},{"pos":[11107,11124],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](#events)</ept>","source":"[Events](#events)"},{"pos":[11127,11312],"content":"The <ph id=\"ph1\">`add`</ph>and <ph id=\"ph2\">`remove`</ph> methods for an event shall each take one parameter whose type defines the type of the event and that shall be derived from <bpt id=\"p1\">[</bpt>System.Delegate<ept id=\"p1\">](xref:System.Delegate)</ept>.","source":"The `add`and `remove` methods for an event shall each take one parameter whose type defines the type of the event and that shall be derived from [System.Delegate](xref:System.Delegate)."},{"content":"32","pos":[11314,11316]},{"content":"Events","pos":[11317,11323]},{"pos":[11326,11343],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](#events)</ept>","source":"[Events](#events)"},{"content":"Events shall adhere to a specific naming pattern.","pos":[11346,11395]},{"content":"The SpecialName attribute referred to in CLS rule 29 shall be ignored in appropriate name comparisons and shall adhere to identifier rules.","pos":[11396,11535]},{"content":"33","pos":[11538,11540]},{"content":"Exceptions","pos":[11541,11551]},{"pos":[11554,11579],"content":"<bpt id=\"p1\">[</bpt>Exceptions<ept id=\"p1\">](#exceptions)</ept>","source":"[Exceptions](#exceptions)"},{"content":"Objects that are thrown shall be of type <bpt id=\"p1\">[</bpt>System.Exception<ept id=\"p1\">](xref:System.Exception)</ept> or a type inheriting from it.","pos":[11582,11694],"source":"Objects that are thrown shall be of type [System.Exception](xref:System.Exception) or a type inheriting from it."},{"content":"Nonetheless, CLS-compliant methods are not required to block the propagation of other types of exceptions.","pos":[11695,11801]},{"content":"40","pos":[11804,11806]},{"content":"General","pos":[11807,11814]},{"pos":[11817,11862],"content":"<bpt id=\"p1\">[</bpt>CLS compliance rules<ept id=\"p1\">](#cls-compliance-rules)</ept>","source":"[CLS compliance rules](#cls-compliance-rules)"},{"content":"CLS rules apply only to those parts of a type that are accessible or visible outsideof the defining assembly.","pos":[11865,11974]},{"content":"1","pos":[11977,11978]},{"content":"General","pos":[11979,11986]},{"pos":[11989,12034],"content":"<bpt id=\"p1\">[</bpt>CLS compliance rules<ept id=\"p1\">](#cls-compliance-rules)</ept>","source":"[CLS compliance rules](#cls-compliance-rules)"},{"content":"Members of non-CLS compliant types shall not be marked CLS-compliant.","pos":[12037,12106]},{"content":"2","pos":[12109,12110]},{"content":"Generics","pos":[12111,12119]},{"pos":[12122,12177],"content":"<bpt id=\"p1\">[</bpt>Generic types and members<ept id=\"p1\">](#generic-types-and-members)</ept>","source":"[Generic types and members](#generic-types-and-members)"},{"content":"Nested types shall have at least as many generic parameters as the enclosing type.","pos":[12180,12262]},{"content":"Generic parameters in a nested type correspond by position to the generic parameters in its enclosing type.","pos":[12263,12370]},{"content":"42","pos":[12374,12376]},{"content":"Generics","pos":[12377,12385]},{"pos":[12388,12443],"content":"<bpt id=\"p1\">[</bpt>Generic types and members<ept id=\"p1\">](#generic-types-and-members)</ept>","source":"[Generic types and members](#generic-types-and-members)"},{"content":"The name of a generic type shall encode the number of type parameters declared on the non-nested type, or newly introduced to the type if nested, according to the rules defined above.","pos":[12446,12629]},{"content":"43","pos":[12632,12634]},{"content":"Generics","pos":[12635,12643]},{"pos":[12646,12701],"content":"<bpt id=\"p1\">[</bpt>Generic types and members<ept id=\"p1\">](#generic-types-and-members)</ept>","source":"[Generic types and members](#generic-types-and-members)"},{"content":"A generic type shall redeclare sufficient constraints to guarantee that any constraints on the base type, or interfaces would be satisfied by the generic type constraints.","pos":[12704,12875]},{"content":"44","pos":[12878,12880]},{"content":"Generics","pos":[12881,12889]},{"pos":[12892,12947],"content":"<bpt id=\"p1\">[</bpt>Generic types and members<ept id=\"p1\">](#generic-types-and-members)</ept>","source":"[Generic types and members](#generic-types-and-members)"},{"content":"Types used as constraints on generic parameters shall themselves be CLS-compliant.","pos":[12950,13032]},{"content":"45","pos":[13035,13037]},{"content":"Generics","pos":[13038,13046]},{"pos":[13049,13104],"content":"<bpt id=\"p1\">[</bpt>Generic types and members<ept id=\"p1\">](#generic-types-and-members)</ept>","source":"[Generic types and members](#generic-types-and-members)"},{"content":"The visibility and accessibility of members (including nested types) in an instantiated generic type shall be considered to be scoped to the specific instantiation rather than the generic type declaration as a whole.","pos":[13107,13323]},{"content":"Assuming this, the visibility and accessibility rules of CLS rule 12 still apply.","pos":[13324,13405]},{"content":"46","pos":[13408,13410]},{"content":"Generics","pos":[13411,13419]},{"pos":[13422,13477],"content":"<bpt id=\"p1\">[</bpt>Generic types and members<ept id=\"p1\">](#generic-types-and-members)</ept>","source":"[Generic types and members](#generic-types-and-members)"},{"content":"For each abstract or virtual generic method, there shall be a default concrete (nonabstract) implementation","pos":[13480,13587]},{"content":"47","pos":[13590,13592]},{"content":"Interfaces","pos":[13593,13603]},{"pos":[13606,13631],"content":"<bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](#interfaces)</ept>","source":"[Interfaces](#interfaces)"},{"content":"CLS-compliant interfaces shall not require the definition of non-CLS compliantmethods in order to implement them.","pos":[13634,13747]},{"content":"18","pos":[13750,13752]},{"content":"Interfaces","pos":[13753,13763]},{"pos":[13766,13791],"content":"<bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](#interfaces)</ept>","source":"[Interfaces](#interfaces)"},{"content":"CLS-compliant interfaces shall not define static methods, nor shall they define fields.","pos":[13794,13881]},{"content":"19","pos":[13884,13886]},{"content":"Members","pos":[13887,13894]},{"pos":[13897,13948],"content":"<bpt id=\"p1\">[</bpt>Type members in general<ept id=\"p1\">](#type-members-in-general)</ept>","source":"[Type members in general](#type-members-in-general)"},{"content":"Global static fields and methods are not CLS-compliant.","pos":[13951,14006]},{"content":"36","pos":[14009,14011]},{"content":"Members","pos":[14012,14019]},{"content":"The value of a literal static is specified through the use of field initialization metadata.","pos":[14027,14119]},{"content":"A CLS-compliant literal must have a value specified in field initialization metadata that is of exactly the same type as the literal (or of the underlying type, if that literal is an <ph id=\"ph1\">`enum`</ph>).","pos":[14120,14311],"source":" A CLS-compliant literal must have a value specified in field initialization metadata that is of exactly the same type as the literal (or of the underlying type, if that literal is an `enum`)."},{"content":"13","pos":[14314,14316]},{"content":"Members","pos":[14317,14324]},{"pos":[14327,14378],"content":"<bpt id=\"p1\">[</bpt>Type members in general<ept id=\"p1\">](#type-members-in-general)</ept>","source":"[Type members in general](#type-members-in-general)"},{"content":"The vararg constraint is not part of the CLS, and the only calling convention supported by the CLS is the standard managed calling convention.","pos":[14381,14523]},{"content":"15","pos":[14526,14528]},{"content":"Naming conventions","pos":[14529,14547]},{"pos":[14550,14591],"content":"<bpt id=\"p1\">[</bpt>Naming conventions<ept id=\"p1\">](#naming-conventions)</ept>","source":"[Naming conventions](#naming-conventions)"},{"content":"Assemblies shall follow Annex 7 of Technical Report 15 of the Unicode Standard3.0 governing the set of characters permitted to start and be included in identifiers, available online at <bpt id=\"p1\">[</bpt>Unicode Normalization Forms<ept id=\"p1\">](http://www.unicode.org/unicode/reports/tr15/tr15-18.html)</ept>.","pos":[14594,14867],"source":"Assemblies shall follow Annex 7 of Technical Report 15 of the Unicode Standard3.0 governing the set of characters permitted to start and be included in identifiers, available online at [Unicode Normalization Forms](http://www.unicode.org/unicode/reports/tr15/tr15-18.html)."},{"content":"Identifiers shall be in the canonical format defined by Unicode Normalization Form C. For CLS purposes, two identifiersare the same if their lowercase mappings (as specified by the Unicode locale-insensitive, one-to-one lowercase mappings) are the same.","pos":[14868,15121]},{"content":"That is, for two identifiers to be considered different under the CLS they shall differ in more than simply their case.","pos":[15122,15241]},{"content":"However, in order to override an inherited definition the CLI requires the precise encoding of the original declaration be used.","pos":[15242,15370]},{"content":"4","pos":[15373,15374]},{"content":"Overloading","pos":[15375,15386]},{"pos":[15389,15430],"content":"<bpt id=\"p1\">[</bpt>Naming conventions<ept id=\"p1\">](#naming-conventions)</ept>","source":"[Naming conventions](#naming-conventions)"},{"content":"All names introduced in a CLS-compliant scope shall be distinct independent of kind, except where the names are identical and resolved via overloading.","pos":[15433,15584]},{"content":"That is, while the CTS allows a single type to use the same name for a method and a field, the CLS does not.","pos":[15585,15693]},{"content":"5","pos":[15696,15697]},{"content":"Overloading","pos":[15698,15709]},{"pos":[15712,15753],"content":"<bpt id=\"p1\">[</bpt>Naming conventions<ept id=\"p1\">](#naming-conventions)</ept>","source":"[Naming conventions](#naming-conventions)"},{"content":"Fields and nested types shall be distinct by identifier comparison alone, eventhough the CTS allows distinct signatures to be distinguished.","pos":[15756,15896]},{"content":"Methods, properties, and events that have the same name (by identifier comparison) shall differ by more than just the return type,except as specified in CLS Rule 39","pos":[15897,16061]},{"content":"6","pos":[16064,16065]},{"content":"Overloading","pos":[16066,16077]},{"pos":[16080,16103],"content":"<bpt id=\"p1\">[</bpt>Overloads<ept id=\"p1\">](#overloads)</ept>","source":"[Overloads](#overloads)"},{"content":"Only properties and methods can be overloaded.","pos":[16106,16152]},{"content":"37","pos":[16155,16157]},{"content":"Overloading","pos":[16158,16169]},{"pos":[16172,16195],"content":"<bpt id=\"p1\">[</bpt>Overloads<ept id=\"p1\">](#overloads)</ept>","source":"[Overloads](#overloads)"},{"pos":[16197,16421],"content":"Properties and methods can be overloaded based only on the number and types of their parameters, except the conversion operators named <ph id=\"ph1\">`op_Implicit`</ph> and <ph id=\"ph2\">`op_Explicit`</ph>, which can also be overloaded based on their return type.","source":"Properties and methods can be overloaded based only on the number and types of their parameters, except the conversion operators named `op_Implicit` and `op_Explicit`, which can also be overloaded based on their return type."},{"content":"38","pos":[16424,16426]},{"content":"Overloading","pos":[16427,16438]},{"content":"If two or more CLS-compliant methods declared in a type have the same nameand, for a specific set of type instantiations, they have the same parameter and return types, then all these methods shall be semantically equivalent at those type instantiations.","pos":[16446,16700]},{"content":"48","pos":[16703,16705]},{"content":"Properties","pos":[16706,16716]},{"pos":[16719,16744],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](#properties)</ept>","source":"[Properties](#properties)"},{"pos":[16747,16864],"content":"The methods that implement the getter and setter methods of a property shall be marked <ph id=\"ph1\">`SpecialName`</ph> in the metadata.","source":"The methods that implement the getter and setter methods of a property shall be marked `SpecialName` in the metadata."},{"content":"24","pos":[16867,16869]},{"content":"Properties","pos":[16870,16880]},{"pos":[16883,16908],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](#properties)</ept>","source":"[Properties](#properties)"},{"content":"A property’s accessors shall all be static, all be virtual, or all be instance.","pos":[16911,16990]},{"content":"26","pos":[16993,16995]},{"content":"Properties","pos":[16996,17006]},{"pos":[17009,17034],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](#properties)</ept>","source":"[Properties](#properties)"},{"content":"The type of a property shall be the return type of the getter and the type of the last argument of the setter.","pos":[17037,17147]},{"content":"The types of the parameters of the property shall be the types of the parameters to the getter and the types of all but the final parameter of the setter.","pos":[17148,17302]},{"content":"All of these types shall be CLS-compliant, and shall not be managed pointers (that is, shall not be passed by reference).","pos":[17303,17424]},{"content":"27","pos":[17427,17429]},{"content":"Properties","pos":[17430,17440]},{"pos":[17443,17468],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](#properties)</ept>","source":"[Properties](#properties)"},{"content":"Properties shall adhere to a specific naming pattern.","pos":[17471,17524]},{"content":"The <ph id=\"ph1\">`SpecialName`</ph> attribute referred to in CLS rule 24 shall be ignored in appropriate name comparisons and shall adhere to identifier rules.","pos":[17525,17666],"source":" The `SpecialName` attribute referred to in CLS rule 24 shall be ignored in appropriate name comparisons and shall adhere to identifier rules."},{"content":"A property shall have a getter method, a setter method, or both.","pos":[17667,17731]},{"content":"28","pos":[17734,17736]},{"content":"Type conversion","pos":[17737,17752]},{"pos":[17755,17790],"content":"<bpt id=\"p1\">[</bpt>Type conversion<ept id=\"p1\">](#type-conversion)</ept>","source":"[Type conversion](#type-conversion)"},{"content":"If either op_Implicit or op_Explicit is provided, an alternate means of providing the coercion shall be provided.","pos":[17793,17906]},{"content":"39","pos":[17909,17911]},{"content":"Types","pos":[17912,17917]},{"pos":[17920,17989],"content":"<bpt id=\"p1\">[</bpt>Types and type member signatures<ept id=\"p1\">](#types-and-type-member-signatures)</ept>","source":"[Types and type member signatures](#types-and-type-member-signatures)"},{"content":"Boxed value types are not CLS-compliant.","pos":[17992,18032]},{"content":"3","pos":[18035,18036]},{"content":"Types","pos":[18037,18042]},{"pos":[18045,18114],"content":"<bpt id=\"p1\">[</bpt>Types and type member signatures<ept id=\"p1\">](#types-and-type-member-signatures)</ept>","source":"[Types and type member signatures](#types-and-type-member-signatures)"},{"content":"All types appearing in a signature shall be CLS-compliant.","pos":[18117,18175]},{"content":"All types composing an instantiated generic type shall be CLS-compliant.","pos":[18176,18248]},{"content":"11","pos":[18251,18253]},{"content":"Types","pos":[18254,18259]},{"pos":[18262,18331],"content":"<bpt id=\"p1\">[</bpt>Types and type member signatures<ept id=\"p1\">](#types-and-type-member-signatures)</ept>","source":"[Types and type member signatures](#types-and-type-member-signatures)"},{"content":"Typed references are not CLS-compliant.","pos":[18334,18373]},{"content":"14","pos":[18376,18378]},{"content":"Types","pos":[18379,18384]},{"pos":[18387,18456],"content":"<bpt id=\"p1\">[</bpt>Types and type member signatures<ept id=\"p1\">](#types-and-type-member-signatures)</ept>","source":"[Types and type member signatures](#types-and-type-member-signatures)"},{"content":"Unmanaged pointer types are not CLS-compliant.","pos":[18459,18505]},{"content":"17","pos":[18508,18510]},{"content":"Types","pos":[18511,18516]},{"pos":[18519,18588],"content":"<bpt id=\"p1\">[</bpt>Types and type member signatures<ept id=\"p1\">](#types-and-type-member-signatures)</ept>","source":"[Types and type member signatures](#types-and-type-member-signatures)"},{"content":"CLS-compliant classes, value types, and interfaces shall not require the implementation of non-CLS-compliant members","pos":[18591,18707]},{"content":"20","pos":[18710,18712]},{"content":"Types","pos":[18713,18718]},{"pos":[18721,18790],"content":"<bpt id=\"p1\">[</bpt>Types and type member signatures<ept id=\"p1\">](#types-and-type-member-signatures)</ept>","source":"[Types and type member signatures](#types-and-type-member-signatures)"},{"content":"<bpt id=\"p1\">[</bpt>System.Object<ept id=\"p1\">](xref:System.Object)</ept> is CLS-compliant.","pos":[18793,18846],"source":"[System.Object](xref:System.Object) is CLS-compliant."},{"content":"Any other CLS-compliant class shall inherit from a CLS-compliant class.","pos":[18847,18918]},{"content":"23","pos":[18921,18923]},{"pos":[18929,18961],"content":"Types and type member signatures","linkify":"Types and type member signatures","nodes":[{"content":"Types and type member signatures","pos":[0,32]}]},{"content":"The <bpt id=\"p1\">[</bpt>System.Object<ept id=\"p1\">](xref:System.Object)</ept> type is CLS-compliant and is the base type of all object types in the .NET Framework type system.","pos":[18963,19100],"source":"The [System.Object](xref:System.Object) type is CLS-compliant and is the base type of all object types in the .NET Framework type system."},{"content":"Inheritance in the .NET Framework is either implicit (for example, the <bpt id=\"p1\">[</bpt>String<ept id=\"p1\">](xref:System.String)</ept> class implicitly inherits from the <ph id=\"ph1\">`Object`</ph> class) or explicit (for example, the <bpt id=\"p2\">[</bpt>CultureNotFoundException<ept id=\"p2\">](xref:System.Globalization.CultureNotFoundException)</ept> class explicitly inherits from the <bpt id=\"p3\">[</bpt>ArgumentException<ept id=\"p3\">](xref:System.ArgumentException)</ept> class, which explicitly inherits from the <bpt id=\"p4\">[</bpt>Exception<ept id=\"p4\">](xref:System.Exception)</ept> class.","pos":[19101,19530],"source":" Inheritance in the .NET Framework is either implicit (for example, the [String](xref:System.String) class implicitly inherits from the `Object` class) or explicit (for example, the [CultureNotFoundException](xref:System.Globalization.CultureNotFoundException) class explicitly inherits from the [ArgumentException](xref:System.ArgumentException) class, which explicitly inherits from the [Exception](xref:System.Exception) class."},{"content":"For a derived type to be CLS compliant, its base type must also be CLS-compliant.","pos":[19531,19612]},{"content":"The following example shows a derived type whose base type is not CLS-compliant.","pos":[19615,19695]},{"content":"It defines a base <ph id=\"ph1\">`Counter`</ph> class that uses an unsigned 32-bit integer as a counter.","pos":[19696,19780],"source":" It defines a base `Counter` class that uses an unsigned 32-bit integer as a counter."},{"content":"Because the class provides counter functionality by wrapping an unsigned integer, the class is marked as non-CLS-compliant.","pos":[19781,19904]},{"content":"As a result, a derived class, <ph id=\"ph1\">`NonZeroCounter`</ph>, is also not CLS-compliant.","pos":[19905,19979],"source":" As a result, a derived class, `NonZeroCounter`, is also not CLS-compliant."},{"content":"All types that appear in member signatures, including a method's return type or a property type, must be CLS-compliant.","pos":[21932,22051]},{"content":"In addition, for generic types:","pos":[22052,22083]},{"content":"All types that compose an instantiated generic type must be CLS-compliant.","pos":[22088,22162]},{"content":"All types used as constraints on generic parameters must be CLS-compliant.","pos":[22166,22240]},{"content":"The .NET <bpt id=\"p1\">[</bpt>common type system<ept id=\"p1\">](common-type-system.md)</ept> includes a number of built-in types that are supported directly by the common language runtime and are specially encoded in an assembly's metadata.","pos":[22243,22443],"source":"The .NET [common type system](common-type-system.md) includes a number of built-in types that are supported directly by the common language runtime and are specially encoded in an assembly's metadata."},{"content":"Of these intrinsic types, the types listed in the following table are CLS-compliant.","pos":[22444,22528]},{"content":"CLS-compliant type","pos":[22532,22550]},{"content":"Description","pos":[22553,22564]},{"pos":[22598,22622],"content":"<bpt id=\"p1\">[</bpt>Byte<ept id=\"p1\">](xref:System.Byte)</ept>","source":"[Byte](xref:System.Byte)"},{"content":"8-bit unsigned integer","pos":[22625,22647]},{"pos":[22649,22675],"content":"<bpt id=\"p1\">[</bpt>Int16<ept id=\"p1\">](xref:System.Int16)</ept>","source":"[Int16](xref:System.Int16)"},{"content":"16-bit signed integer","pos":[22678,22699]},{"pos":[22701,22727],"content":"<bpt id=\"p1\">[</bpt>Int32<ept id=\"p1\">](xref:System.Int32)</ept>","source":"[Int32](xref:System.Int32)"},{"content":"32-bit signed integer","pos":[22730,22751]},{"pos":[22753,22779],"content":"<bpt id=\"p1\">[</bpt>Int64<ept id=\"p1\">](xref:System.Int64)</ept>","source":"[Int64](xref:System.Int64)"},{"content":"64-bit signed integer","pos":[22782,22803]},{"pos":[22804,22832],"content":"<bpt id=\"p1\">[</bpt>Single<ept id=\"p1\">](xref:System.Single)</ept>","source":"[Single](xref:System.Single)"},{"content":"Single-precision floating-point value","pos":[22835,22872]},{"pos":[22873,22901],"content":"<bpt id=\"p1\">[</bpt>Double<ept id=\"p1\">](xref:System.Double)</ept>","source":"[Double](xref:System.Double)"},{"content":"Double-precision floating-point value","pos":[22904,22941]},{"pos":[22942,22972],"content":"<bpt id=\"p1\">[</bpt>Boolean<ept id=\"p1\">](xref:System.Boolean)</ept>","source":"[Boolean](xref:System.Boolean)"},{"content":"true or false value type","pos":[22975,22999]},{"pos":[23001,23025],"content":"<bpt id=\"p1\">[</bpt>Char<ept id=\"p1\">](xref:System.Char)</ept>","source":"[Char](xref:System.Char)"},{"content":"UTF-16 encoded code unit","pos":[23028,23052]},{"pos":[23053,23083],"content":"<bpt id=\"p1\">[</bpt>Decimal<ept id=\"p1\">](xref:System.Decimal)</ept>","source":"[Decimal](xref:System.Decimal)"},{"content":"Non-floating-point decimal number","pos":[23086,23119]},{"pos":[23120,23148],"content":"<bpt id=\"p1\">[</bpt>IntPtr<ept id=\"p1\">](xref:System.IntPtr)</ept>","source":"[IntPtr](xref:System.IntPtr)"},{"content":"Pointer or handle of a platform-defined size","pos":[23151,23195]},{"pos":[23196,23224],"content":"<bpt id=\"p1\">[</bpt>String<ept id=\"p1\">](xref:System.String)</ept>","source":"[String](xref:System.String)"},{"content":"Collection of zero, one, or more Char objects","pos":[23227,23272]},{"content":"The intrinsic types listed in the following table are not CLS-Compliant.","pos":[23276,23348]},{"content":"Non-compliant type","pos":[23351,23369]},{"content":"Description","pos":[23372,23383]},{"content":"CLS-compliant alternative","pos":[23386,23411]},{"pos":[23473,23499],"content":"<bpt id=\"p1\">[</bpt>SByte<ept id=\"p1\">](xref:System.SByte)</ept>","source":"[SByte](xref:System.SByte)"},{"content":"8-bit signed integer data type","pos":[23502,23532]},{"pos":[23535,23561],"content":"<bpt id=\"p1\">[</bpt>Int16<ept id=\"p1\">](xref:System.Int16)</ept>","source":"[Int16](xref:System.Int16)"},{"pos":[23562,23590],"content":"<bpt id=\"p1\">[</bpt>UInt16<ept id=\"p1\">](xref:System.UInt16)</ept>","source":"[UInt16](xref:System.UInt16)"},{"content":"16-bit unsigned integer","pos":[23593,23616]},{"pos":[23619,23645],"content":"<bpt id=\"p1\">[</bpt>Int32<ept id=\"p1\">](xref:System.Int32)</ept>","source":"[Int32](xref:System.Int32)"},{"pos":[23646,23674],"content":"<bpt id=\"p1\">[</bpt>UInt32<ept id=\"p1\">](xref:System.UInt32)</ept>","source":"[UInt32](xref:System.UInt32)"},{"content":"32-bit unsigned integer","pos":[23677,23700]},{"pos":[23703,23729],"content":"<bpt id=\"p1\">[</bpt>Int64<ept id=\"p1\">](xref:System.Int64)</ept>","source":"[Int64](xref:System.Int64)"},{"pos":[23730,23758],"content":"<bpt id=\"p1\">[</bpt>UInt64<ept id=\"p1\">](xref:System.UInt64)</ept>","source":"[UInt64](xref:System.UInt64)"},{"content":"64-bit unsigned integer","pos":[23761,23784]},{"pos":[23787,23908],"content":"<bpt id=\"p1\">[</bpt>Int64<ept id=\"p1\">](xref:System.Int64)</ept> (may overflow), <bpt id=\"p2\">[</bpt>BigInteger<ept id=\"p2\">](xref:System.Numerics.BigInteger)</ept>, or <bpt id=\"p3\">[</bpt>Double<ept id=\"p3\">](xref:System.Double)</ept>","source":"[Int64](xref:System.Int64) (may overflow), [BigInteger](xref:System.Numerics.BigInteger), or [Double](xref:System.Double)"},{"pos":[23909,23939],"content":"<bpt id=\"p1\">[</bpt>UIntPtr<ept id=\"p1\">](xref:System.UIntPtr)</ept>","source":"[UIntPtr](xref:System.UIntPtr)"},{"content":"Unsigned pointer or handle","pos":[23942,23968]},{"pos":[23971,23999],"content":"<bpt id=\"p1\">[</bpt>IntPtr<ept id=\"p1\">](xref:System.IntPtr)</ept>","source":"[IntPtr](xref:System.IntPtr)"},{"content":"The .NET Framework Class Library or any other class library may include other types that aren't CLS-compliant; for example:","pos":[24003,24126]},{"content":"Boxed value types.","pos":[24133,24151]},{"content":"The following C# example creates a class that has a public property of type <ph id=\"ph1\">`int`</ph>* named <ph id=\"ph2\">`Value`</ph>.","pos":[24152,24249],"source":" The following C# example creates a class that has a public property of type `int`* named `Value`."},{"content":"Because an <ph id=\"ph1\">`int`</ph>* is a boxed value type, the compiler flags it as non-CLS-compliant.","pos":[24250,24334],"source":" Because an `int`* is a boxed value type, the compiler flags it as non-CLS-compliant."},{"content":"Typed references, which are special constructs that contain a reference to an object and a reference to a type.","pos":[24770,24881]},{"content":"If a type is not CLS-compliant, you should apply the <bpt id=\"p1\">[</bpt>CLSCompliantAttribute<ept id=\"p1\">](xref:System.CLSCompliantAttribute)</ept> attribute with an <bpt id=\"p2\">*</bpt>isCompliant<ept id=\"p2\">*</ept> parameter with a value of <ph id=\"ph1\">`false`</ph> to it.","pos":[24883,25067],"source":"If a type is not CLS-compliant, you should apply the [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute with an *isCompliant* parameter with a value of `false` to it."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>CLSCompliantAttribute attribute<ept id=\"p1\">](#the-clscompliantattribute-attribute)</ept> section.","pos":[25068,25178],"source":" For more information, see the [CLSCompliantAttribute attribute](#the-clscompliantattribute-attribute) section."},{"content":"The following example illustrates the problem of CLS compliance in a method signature and in generic type instantiation.","pos":[25182,25302]},{"content":"It defines an <ph id=\"ph1\">`InvoiceItem`</ph> class with a property of type <bpt id=\"p1\">[</bpt>UInt32<ept id=\"p1\">](xref:System.UInt32)</ept>, a property of type <bpt id=\"p2\">[</bpt>Nullable(Of UInt32)<ept id=\"p2\">](xref:System.Nullable%601)</ept>, and a constructor with parameters of type <ph id=\"ph2\">`UInt32`</ph> and <ph id=\"ph3\">`Nullable(Of UInt32)`</ph>.","pos":[25303,25536],"source":" It defines an `InvoiceItem` class with a property of type [UInt32](xref:System.UInt32), a property of type [Nullable(Of UInt32)](xref:System.Nullable%601), and a constructor with parameters of type `UInt32` and `Nullable(Of UInt32)`."},{"content":"You get four compiler warnings when you try to compile this example.","pos":[25537,25605]},{"pos":[27974,28105],"content":"To eliminate the compiler warnings, replace the non-CLS-compliant types in the <ph id=\"ph1\">`InvoiceItem`</ph> public interface with compliant types:","source":"To eliminate the compiler warnings, replace the non-CLS-compliant types in the `InvoiceItem` public interface with compliant types:"},{"content":"In addition to the specific types listed, some categories of types are not CLS compliant.","pos":[29607,29696]},{"content":"These include unmanaged pointer types and function pointer types.","pos":[29697,29762]},{"content":"The following example generates a compiler warning because it uses a pointer to an integer to create an array of integers.","pos":[29763,29885]},{"pos":[31024,31158],"content":"For CLS-compliant abstract classes (that is, classes marked as <ph id=\"ph1\">`abstract`</ph> in C#), all members of the class must also be CLS-compliant.","source":"For CLS-compliant abstract classes (that is, classes marked as `abstract` in C#), all members of the class must also be CLS-compliant."},{"pos":[31165,31183],"content":"Naming conventions","linkify":"Naming conventions","nodes":[{"content":"Naming conventions","pos":[0,18]}]},{"content":"Because some programming languages are case-insensitive, identifiers (such as the names of namespaces, types, and members) must differ by more than case.","pos":[31185,31338]},{"content":"Two identifiers are considered equivalent if their lowercase mappings are the same.","pos":[31339,31422]},{"content":"The following C# example defines two public classes, <ph id=\"ph1\">`Person`</ph> and <ph id=\"ph2\">`person`</ph>.","pos":[31423,31498],"source":" The following C# example defines two public classes, `Person` and `person`."},{"content":"Because they differ only by case, the C# compiler flags them as not CLS-compliant.","pos":[31499,31581]},{"content":"Programming language identifiers, such as the names of namespaces, types, and members, must conform to the <bpt id=\"p1\">[</bpt>Unicode Standard 3.0, Technical Report 15, Annex 7<ept id=\"p1\">](http://www.unicode.org/reports/tr15/tr15-18.html)</ept>.","pos":[31973,32183],"source":"Programming language identifiers, such as the names of namespaces, types, and members, must conform to the [Unicode Standard 3.0, Technical Report 15, Annex 7](http://www.unicode.org/reports/tr15/tr15-18.html)."},{"content":"This means that:","pos":[32184,32200]},{"content":"The first character of an identifier can be any Unicode uppercase letter, lowercase letter, title case letter, modifier letter, other letter, or letter number.","pos":[32204,32363]},{"content":"For information on Unicode character categories, see the <bpt id=\"p1\">[</bpt>System.Globalization.UnicodeCategory<ept id=\"p1\">](xref:System.Globalization.UnicodeCategory)</ept> enumeration.","pos":[32364,32515],"source":" For information on Unicode character categories, see the [System.Globalization.UnicodeCategory](xref:System.Globalization.UnicodeCategory) enumeration."},{"content":"Subsequent characters can be from any of the categories as the first character, and can also include non-spacing marks, spacing combining marks, decimal numbers, connector punctuations, and formatting codes.","pos":[32520,32727]},{"content":"Before you compare identifiers, you should filter out formatting codes and convert the identifiers to Unicode Normalization Form C, because a single character can be represented by multiple UTF-16-encoded code units.","pos":[32730,32946]},{"content":"Character sequences that produce the same code units in Unicode Normalization Form C are not CLS-compliant.","pos":[32947,33054]},{"content":"The following example defines a property named <ph id=\"ph1\">`Å`</ph>, which consists of the character ANGSTROM SIGN (U+212B), and a second property named <ph id=\"ph2\">`Å`</ph> which consists of the character LATIN CAPITAL LETTER A WITH RING ABOVE (U+00C5).","pos":[33055,33275],"source":" The following example defines a property named `Å`, which consists of the character ANGSTROM SIGN (U+212B), and a second property named `Å` which consists of the character LATIN CAPITAL LETTER A WITH RING ABOVE (U+00C5)."},{"content":"The C# compiler flags the source code as non-CLS-compliant.","pos":[33276,33335]},{"content":"Member names within a particular scope (such as the namespaces within an assembly, the types within a namespace, or the members within a type) must be unique except for names that are resolved through overloading.","pos":[34912,35125]},{"content":"This requirement is more stringent than that of the common type system, which allows multiple members within a scope to have identical names as long as they are different kinds of members (for example, one is a method and one is a field).","pos":[35126,35364]},{"content":"In particular, for type members:","pos":[35365,35397]},{"content":"Fields and nested types are distinguished by name alone.","pos":[35402,35458]},{"content":"Methods, properties, and events that have the same name must differ by more than just return type.","pos":[35463,35561]},{"content":"The following example illustrates the requirement that member names must be unique within their scope.","pos":[35564,35666]},{"content":"It defines a class named <ph id=\"ph1\">`Converter`</ph> that includes four members named <ph id=\"ph2\">`Conversion`</ph>.","pos":[35667,35750],"source":" It defines a class named `Converter` that includes four members named `Conversion`."},{"content":"Three are methods, and one is a property.","pos":[35751,35792]},{"content":"The method that includes an <ph id=\"ph1\">`Int64`</ph> parameter is uniquely named, but the two methods with an <ph id=\"ph2\">`Int32`</ph> parameter are not, because return value is not considered a part of a member's signature.","pos":[35793,35983],"source":" The method that includes an `Int64` parameter is uniquely named, but the two methods with an `Int32` parameter are not, because return value is not considered a part of a member's signature."},{"content":"The <ph id=\"ph1\">`Conversion`</ph> property also violates this requirement, because properties cannot have the same name as overloaded methods.","pos":[35984,36109],"source":" The `Conversion` property also violates this requirement, because properties cannot have the same name as overloaded methods."},{"content":"Individual languages include unique keywords, so languages that target the common language runtime must also provide some mechanism for referencing identifiers (such as type names) that coincide with keywords.","pos":[38188,38397]},{"content":"For example, <ph id=\"ph1\">`case`</ph> is a keyword in both C# and Visual Basic.","pos":[38398,38459],"source":" For example, `case` is a keyword in both C# and Visual Basic."},{"content":"However, the following Visual Basic example is able to disambiguate a class named <ph id=\"ph1\">`case`</ph> from the <ph id=\"ph2\">`case`</ph> keyword by using opening and closing braces.","pos":[38460,38609],"source":" However, the following Visual Basic example is able to disambiguate a class named `case` from the `case` keyword by using opening and closing braces."},{"content":"Otherwise, the example would produce the error message, \"Keyword is not valid as an identifier,\" and fail to compile.","pos":[38610,38727]},{"content":"The following C# example is able to instantiate the <ph id=\"ph1\">`case`</ph> class by using the @ symbol to disambiguate the identifier from the language keyword.","pos":[39031,39175],"source":"The following C# example is able to instantiate the `case` class by using the @ symbol to disambiguate the identifier from the language keyword."},{"content":"Without it, the C# compiler would display two error messages, \"Type expected\" and \"Invalid expression term 'case'.\"","pos":[39176,39291]},{"pos":[39466,39481],"content":"Type conversion","linkify":"Type conversion","nodes":[{"content":"Type conversion","pos":[0,15]}]},{"content":"The Common Language Specification defines two conversion operators:","pos":[39483,39550]},{"content":"<ph id=\"ph1\">`op_Implicit`</ph>, which is used for widening conversions that do not result in loss of data or precision.","pos":[39554,39656],"source":"`op_Implicit`, which is used for widening conversions that do not result in loss of data or precision."},{"content":"For example, the <bpt id=\"p1\">[</bpt>Decimal<ept id=\"p1\">](xref:System.Decimal)</ept> structure includes an overloaded <ph id=\"ph1\">`op_Implicit`</ph> operator to convert values of integral types and <bpt id=\"p2\">[</bpt>Char<ept id=\"p2\">](xref:System.Char)</ept> values to <ph id=\"ph2\">`Decimal`</ph> values.","pos":[39657,39853],"source":" For example, the [Decimal](xref:System.Decimal) structure includes an overloaded `op_Implicit` operator to convert values of integral types and [Char](xref:System.Char) values to `Decimal` values."},{"content":"<ph id=\"ph1\">`op_Explicit`</ph>, which is used for narrowing conversions that can result in loss of magnitude (a value is converted to a value that has a smaller range) or precision.","pos":[39858,40022],"source":"`op_Explicit`, which is used for narrowing conversions that can result in loss of magnitude (a value is converted to a value that has a smaller range) or precision."},{"content":"For example, the <ph id=\"ph1\">`Decimal`</ph> structure includes an overloaded <ph id=\"ph2\">`op_Explicit`</ph> operator to convert <bpt id=\"p1\">[</bpt>Double<ept id=\"p1\">](xref:System.Double)</ept> and <bpt id=\"p2\">[</bpt>Single<ept id=\"p2\">](xref:System.Single)</ept> values to <ph id=\"ph3\">`Decimal`</ph> and to convert <ph id=\"ph4\">`Decimal`</ph> values to integral values, <ph id=\"ph5\">`Double`</ph>, <ph id=\"ph6\">`Single`</ph>, and <ph id=\"ph7\">`Char`</ph>.","pos":[40023,40282],"source":" For example, the `Decimal` structure includes an overloaded `op_Explicit` operator to convert [Double](xref:System.Double) and [Single](xref:System.Single) values to `Decimal` and to convert `Decimal` values to integral values, `Double`, `Single`, and `Char`."},{"content":"However, not all languages support operator overloading or the definition of custom operators.","pos":[40285,40379]},{"content":"If you choose to implement these conversion operators, you should also provide an alternate way to perform the conversion.","pos":[40380,40502]},{"content":"We recommend that you provide <ph id=\"ph1\">`From`</ph>Xxx and <ph id=\"ph2\">`To`</ph>Xxx methods.","pos":[40503,40563],"source":" We recommend that you provide `From`Xxx and `To`Xxx methods."},{"content":"The following example defines CLS-compliant implicit and explicit conversions.","pos":[40566,40644]},{"content":"It creates a <ph id=\"ph1\">`UDouble`</ph>class that represents an signed double-precision, floating-point number.","pos":[40645,40739],"source":" It creates a `UDouble`class that represents an signed double-precision, floating-point number."},{"content":"It provides for implicit conversions from <ph id=\"ph1\">`UDouble`</ph> to <ph id=\"ph2\">`Double`</ph> and for explicit conversions from <ph id=\"ph3\">`UDouble`</ph> to <ph id=\"ph4\">`Single`</ph>, <ph id=\"ph5\">`Double`</ph> to <ph id=\"ph6\">`UDouble`</ph>, and <ph id=\"ph7\">`Single`</ph> to <ph id=\"ph8\">`UDouble`</ph>.","pos":[40740,40910],"source":" It provides for implicit conversions from `UDouble` to `Double` and for explicit conversions from `UDouble` to `Single`, `Double` to `UDouble`, and `Single` to `UDouble`."},{"content":"It also defines a <ph id=\"ph1\">`ToDouble`</ph> method as an alternative to the implicit conversion operator and the <ph id=\"ph2\">`ToSingle`</ph>, <ph id=\"ph3\">`FromDouble`</ph>, and <ph id=\"ph4\">`FromSingle`</ph> methods as alternatives to the explicit conversion operators.","pos":[40911,41113],"source":" It also defines a `ToDouble` method as an alternative to the implicit conversion operator and the `ToSingle`, `FromDouble`, and `FromSingle` methods as alternatives to the explicit conversion operators."},{"pos":[44836,44842],"content":"Arrays","linkify":"Arrays","nodes":[{"content":"Arrays","pos":[0,6]}]},{"content":"CLS-compliant arrays conform to the following rules:","pos":[44844,44896]},{"content":"All dimensions of an array must have a lower bound of zero.","pos":[44901,44960]},{"content":"The following example creates a non-CLS-compliant array with a lower bound of one.","pos":[44961,45043]},{"content":"Note that, despite the presence of the <bpt id=\"p1\">[</bpt>CLSCompliantAttribute<ept id=\"p1\">](xref:System.CLSCompliantAttribute)</ept> attribute, the compiler does not detect that the array returned by the <ph id=\"ph1\">`Numbers.GetTenPrimes`</ph> method is not CLS-compliant.","pos":[45044,45264],"source":" Note that, despite the presence of the [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute, the compiler does not detect that the array returned by the `Numbers.GetTenPrimes` method is not CLS-compliant."},{"content":"All array elements must consist of CLS-compliant types.","pos":[46325,46380]},{"content":"The following example defines two methods that return non-CLS-compliant arrays.","pos":[46381,46460]},{"content":"The first returns an array of <bpt id=\"p1\">[</bpt>UInt32<ept id=\"p1\">](xref:System.UInt32)</ept> values.","pos":[46461,46527],"source":" The first returns an array of [UInt32](xref:System.UInt32) values."},{"content":"The second returns an <bpt id=\"p1\">[</bpt>Object<ept id=\"p1\">](xref:System.Object)</ept> array that includes <bpt id=\"p2\">[</bpt>Int32<ept id=\"p2\">](xref:System.Int32)</ept> and <ph id=\"ph1\">`UInt32`</ph> values.","pos":[46528,46646],"source":" The second returns an [Object](xref:System.Object) array that includes [Int32](xref:System.Int32) and `UInt32` values."},{"content":"Although the compiler identifies the first array as non-compliant because of its <ph id=\"ph1\">`UInt32`</ph> type, it fails to recognize that the second array includes non-CLS-compliant elements.","pos":[46647,46823],"source":" Although the compiler identifies the first array as non-compliant because of its `UInt32` type, it fails to recognize that the second array includes non-CLS-compliant elements."},{"content":"Overload resolution for methods that have array parameters is based on the fact that they are arrays and on their element type.","pos":[47918,48045]},{"content":"For this reason, the following definition of an overloaded <ph id=\"ph1\">`GetSquares`</ph> method is CLS-compliant.","pos":[48046,48142],"source":" For this reason, the following definition of an overloaded `GetSquares` method is CLS-compliant."},{"pos":[50083,50093],"content":"Interfaces","linkify":"Interfaces","nodes":[{"content":"Interfaces","pos":[0,10]}]},{"content":"CLS-compliant interfaces can define properties, events, and virtual methods (methods with no implementation).","pos":[50095,50204]},{"content":"A CLS-compliant interface cannot have any of the following:","pos":[50205,50264]},{"content":"Static methods or static fields.","pos":[50269,50301]},{"content":"The C# compiler generatse compiler errors if you define a static member in an interface.","pos":[50302,50390]},{"content":"Fields.","pos":[50395,50402]},{"content":"The C# acompiler generates compiler errors if you define a field in an interface.","pos":[50403,50484]},{"content":"Methods that are not CLS-compliant.","pos":[50488,50523]},{"content":"For example, the following interface definition includes a method, <ph id=\"ph1\">`INumber.GetUnsigned`</ph>, that is marked as non-CLS-compliant.","pos":[50524,50650],"source":" For example, the following interface definition includes a method, `INumber.GetUnsigned`, that is marked as non-CLS-compliant."},{"content":"This example generates a compiler warning.","pos":[50651,50693]},{"content":"Because of this rule, CLS-compliant types are not required to implement non-CLS-compliant members.","pos":[51614,51712]},{"content":"If a CLS-compliant framework does expose a class that implements a non-CLS compliant interface, it should also provide concrete implementations of all non-CLS-compliant members.","pos":[51713,51890]},{"content":"CLS-compliant language compilers must also allow a class to provide separate implementations of members that have the same name and signature in multiple interfaces.","pos":[51893,52058]},{"content":"C# supports explicit interface implementations to provide different implementations of identically named methods.","pos":[52059,52172]},{"content":"The following example illustrates this scenario by defining a <ph id=\"ph1\">`Temperature`</ph> class that implements the <ph id=\"ph2\">`ICelsius`</ph> and <ph id=\"ph3\">`IFahrenheit`</ph> interfaces as explicit interface implementations.","pos":[52173,52353],"source":" The following example illustrates this scenario by defining a `Temperature` class that implements the `ICelsius` and `IFahrenheit` interfaces as explicit interface implementations."},{"pos":[54610,54622],"content":"Enumerations","linkify":"Enumerations","nodes":[{"content":"Enumerations","pos":[0,12]}]},{"content":"CLS-compliant enumerations must follow these rules:","pos":[54624,54675]},{"content":"The underlying type of the enumeration must be an intrinsic CLS-compliant integer (<bpt id=\"p1\">[</bpt>Byte<ept id=\"p1\">](xref:System.Byte)</ept>, <bpt id=\"p2\">[</bpt>Int16<ept id=\"p2\">](xref:System.Int16)</ept>, <bpt id=\"p3\">[</bpt>Int32<ept id=\"p3\">](xref:System.Int32)</ept>, or <bpt id=\"p4\">[</bpt>Int64<ept id=\"p4\">](xref:System.Int64)</ept>).","pos":[54680,54876],"source":"The underlying type of the enumeration must be an intrinsic CLS-compliant integer ([Byte](xref:System.Byte), [Int16](xref:System.Int16), [Int32](xref:System.Int32), or [Int64](xref:System.Int64))."},{"content":"For example, the following code tries to define an enumeration whose underlying type is <bpt id=\"p1\">[</bpt>UInt32<ept id=\"p1\">](xref:System.UInt32)</ept> and generates a compiler warning.","pos":[54877,55027],"source":" For example, the following code tries to define an enumeration whose underlying type is [UInt32](xref:System.UInt32) and generates a compiler warning."},{"content":"An enumeration type must have a single instance field named <ph id=\"ph1\">`Value__`</ph> that is marked with the <ph id=\"ph2\">`FieldAttributes.RTSpecialName`</ph> attribute.","pos":[56170,56306],"source":"An enumeration type must have a single instance field named `Value__` that is marked with the `FieldAttributes.RTSpecialName` attribute."},{"content":"This enables you to reference the field value implicitly.","pos":[56307,56364]},{"content":"An enumeration includes literal static fields whose types match the type of the enumeration itself.","pos":[56369,56468]},{"content":"For example, if you define a <ph id=\"ph1\">`State`</ph> enumeration with values of <ph id=\"ph2\">`State.On`</ph> and <ph id=\"ph3\">`State.Off`</ph>, <ph id=\"ph4\">`State.On`</ph> and <ph id=\"ph5\">`State.Off`</ph> are both literal static fields whose type is <ph id=\"ph6\">`State`</ph>.","pos":[56469,56641],"source":" For example, if you define a `State` enumeration with values of `State.On` and `State.Off`, `State.On` and `State.Off` are both literal static fields whose type is `State`."},{"content":"There are two kinds of enumerations:","pos":[56646,56682]},{"content":"An enumeration that represents a set of mutually exclusive, named integer values.","pos":[56695,56776]},{"content":"This type of enumeration is indicated by the absence of the <bpt id=\"p1\">[</bpt>System.FlagsAttribute<ept id=\"p1\">](xref:System.FlagsAttribute)</ept> custom attribute.","pos":[56777,56906],"source":" This type of enumeration is indicated by the absence of the [System.FlagsAttribute](xref:System.FlagsAttribute) custom attribute."},{"content":"An enumeration that represents a set of bit flags that can combine to generate an unnamed value.","pos":[56918,57014]},{"content":"This type of enumeration is indicated by the presence of the <bpt id=\"p1\">[</bpt>System.FlagsAttribute<ept id=\"p1\">](xref:System.FlagsAttribute)</ept> custom attribute.","pos":[57015,57145],"source":" This type of enumeration is indicated by the presence of the [System.FlagsAttribute](xref:System.FlagsAttribute) custom attribute."},{"pos":[57152,57239],"content":"For more information, see the documentation for the <bpt id=\"p1\">[</bpt>Enum<ept id=\"p1\">](xref:System.Enum)</ept> structure.","source":"For more information, see the documentation for the [Enum](xref:System.Enum) structure."},{"content":"The value of an enumeration is not limited to the range of its specified values.","pos":[57244,57324]},{"content":"In other words, the range of values in an enumeration is the range of its underlying value.","pos":[57325,57416]},{"content":"You can use the <ph id=\"ph1\">`Enum.IsDefined`</ph> method to determine whether a specified value is a member of an enumeration.","pos":[57417,57526],"source":" You can use the `Enum.IsDefined` method to determine whether a specified value is a member of an enumeration."},{"pos":[57533,57556],"content":"Type members in general","linkify":"Type members in general","nodes":[{"content":"Type members in general","pos":[0,23]}]},{"content":"The Common Language Specification requires all fields and methods to be accessed as members of a particular class.","pos":[57558,57672]},{"content":"Therefore, global static fields and methods (that is, static fields or methods that are defined apart from a type) are not CLS-compliant.","pos":[57673,57810]},{"content":"If you try to include a global field or method in your source code, the C# compiler generates a compiler error.","pos":[57811,57922]},{"content":"The Common Language Specification supports only the standard managed calling convention.","pos":[57925,58013]},{"content":"It doesn't support unmanaged calling conventions and methods with variable argument lists marked with the <ph id=\"ph1\">`varargs`</ph> keyword.","pos":[58014,58138],"source":" It doesn't support unmanaged calling conventions and methods with variable argument lists marked with the `varargs` keyword."},{"content":"For variable argument lists that are compatible with the standard managed calling convention, use the <bpt id=\"p1\">[</bpt>ParamArrayAttribute<ept id=\"p1\">](xref:System.ParamArrayAttribute)</ept> attribute or the individual language's implementation, such as the <ph id=\"ph1\">`params`</ph> keyword in C# and the <ph id=\"ph2\">`ParamArray`</ph> keyword in Visual Basic.","pos":[58139,58431],"source":" For variable argument lists that are compatible with the standard managed calling convention, use the [ParamArrayAttribute](xref:System.ParamArrayAttribute) attribute or the individual language's implementation, such as the `params` keyword in C# and the `ParamArray` keyword in Visual Basic."},{"pos":[58438,58458],"content":"Member accessibility","linkify":"Member accessibility","nodes":[{"content":"Member accessibility","pos":[0,20]}]},{"content":"Overriding an inherited member cannot change the accessibility of that member.","pos":[58460,58538]},{"content":"For example, a public method in a base class cannot be overridden by a private method in a derived class.","pos":[58539,58644]},{"content":"There is one exception: a <ph id=\"ph1\">`protected internal`</ph> (in C#) or <ph id=\"ph2\">`Protected Friend`</ph> (in Visual Basic) member in one assembly that is overridden by a type in a different assembly.","pos":[58645,58816],"source":" There is one exception: a `protected internal` (in C#) or `Protected Friend` (in Visual Basic) member in one assembly that is overridden by a type in a different assembly."},{"content":"In that case, the accessibility of the override is <ph id=\"ph1\">`Protected`</ph>.","pos":[58818,58881],"source":"  In that case, the accessibility of the override is `Protected`."},{"content":"The following example illustrates the error that is generated when the <bpt id=\"p1\">[</bpt>CLSCompliantAttribute<ept id=\"p1\">](xref:System.CLSCompliantAttribute)</ept> attribute is set to <ph id=\"ph1\">`true`</ph>, and <ph id=\"ph2\">`Person`</ph>, which is a class derived from <ph id=\"ph3\">`Animal`</ph>, tries to change the accessibility of the <ph id=\"ph4\">`Species`</ph> property from public to private.","pos":[58884,59179],"source":"The following example illustrates the error that is generated when the [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute is set to `true`, and `Person`, which is a class derived from `Animal`, tries to change the accessibility of the `Species` property from public to private."},{"content":"The example compiles successfully if its accessibility is changed to public.","pos":[59180,59256]},{"content":"Types in the signature of a member must be accessible whenever that member is accessible.","pos":[61622,61711]},{"content":"For example, this means that a public member cannot include a parameter whose type is private, protected, or internal.","pos":[61712,61830]},{"content":"The following example illustrates the compiler error that results when a <ph id=\"ph1\">`StringWrapper`</ph> class constructor exposes an internal <ph id=\"ph2\">`StringOperationType`</ph> enumeration value that determines how a string value should be wrapped.","pos":[61831,62051],"source":" The following example illustrates the compiler error that results when a `StringWrapper` class constructor exposes an internal `StringOperationType` enumeration value that determines how a string value should be wrapped."},{"pos":[63671,63696],"content":"Generic types and members","linkify":"Generic types and members","nodes":[{"content":"Generic types and members","pos":[0,25]}]},{"content":"Nested types always have at least as many generic parameters as their enclosing type.","pos":[63698,63783]},{"content":"These correspond by position to the generic parameters in the enclosing type.","pos":[63784,63861]},{"content":"The generic type can also include new generic parameters.","pos":[63862,63919]},{"content":"The relationship between the generic type parameters of a containing type and its nested types may be hidden by the syntax of individual languages.","pos":[63922,64069]},{"content":"In the following example, a generic type <ph id=\"ph1\">`Outer&lt;T&gt;`</ph> contains two nested classes, <ph id=\"ph2\">`Inner1A`</ph> and <ph id=\"ph3\">`Inner1B&lt;U&gt;`</ph>.","pos":[64070,64178],"source":" In the following example, a generic type `Outer<T>` contains two nested classes, `Inner1A` and `Inner1B<U>`."},{"content":"The calls to the <ph id=\"ph1\">`ToString`</ph> method, which each class inherits from <ph id=\"ph2\">`Object.ToString`</ph>, show that each nested class includes the type parameters of its containing class.","pos":[64179,64346],"source":" The calls to the `ToString` method, which each class inherits from `Object.ToString`, show that each nested class includes the type parameters of its containing class."},{"content":"Generic type names are encoded in the form <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept>'<bpt id=\"p2\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p2\">*</ept>, where <bpt id=\"p3\">*</bpt>name<ept id=\"p3\">*</ept> is the type name, <bpt id=\"p4\">*</bpt><ph id=\"ph2\">`</ph><ept id=\"p4\">*</ept> is a character literal, and <bpt id=\"p5\">*</bpt><ph id=\"ph3\">n</ph><ept id=\"p5\">*</ept> is the number of parameters declared on the type, or, for nested generic types, the number of newly introduced type parameters.","pos":[66288,66537],"source":"Generic type names are encoded in the form *name*'*n*, where *name* is the type name, *`* is a character literal, and *n* is the number of parameters declared on the type, or, for nested generic types, the number of newly introduced type parameters."},{"content":"This encoding of generic type names is primarily of interest to developers who use reflection to access CLS-complaint generic types in a library.","pos":[66538,66683]},{"content":"If constraints are applied to a generic type, any types used as constraints must also be CLS-compliant.","pos":[66686,66789]},{"content":"The following example defines a class named <ph id=\"ph1\">`BaseClass`</ph> that is not CLS-compliant and a generic class named <ph id=\"ph2\">`BaseCollection`</ph> whose type parameter must derive from <ph id=\"ph3\">`BaseClass`</ph>.","pos":[66790,66965],"source":" The following example defines a class named `BaseClass` that is not CLS-compliant and a generic class named `BaseCollection` whose type parameter must derive from `BaseClass`."},{"content":"But because <ph id=\"ph1\">`BaseClass`</ph>is not CLS-compliant, the compiler emits a warning.","pos":[66966,67040],"source":" But because `BaseClass`is not CLS-compliant, the compiler emits a warning."},{"content":"If a generic type is derived from a generic base type, it must redeclare any constraints so that it can guarantee that constraints on the base type are also satisfied.","pos":[67776,67943]},{"content":"The following example defines a <ph id=\"ph1\">`Number&lt;T&gt;`</ph> that can represent any numeric type.","pos":[67944,68024],"source":" The following example defines a `Number<T>` that can represent any numeric type."},{"content":"It also defines a <ph id=\"ph1\">`FloatingPoint&lt;T&gt;`</ph> class that represents a floating point value.","pos":[68025,68107],"source":" It also defines a `FloatingPoint<T>` class that represents a floating point value."},{"content":"However, the source code fails to compile, because it does not apply the constraint on <ph id=\"ph1\">`Number&lt;T&gt;`</ph> (that T must be a value type) to <ph id=\"ph2\">`FloatingPoint&lt;T&gt;`</ph>.","pos":[68108,68259],"source":" However, the source code fails to compile, because it does not apply the constraint on `Number<T>` (that T must be a value type) to `FloatingPoint<T>`."},{"pos":[71393,71486],"content":"The example compiles successfully if the constraint is added to the <ph id=\"ph1\">`FloatingPoint&lt;T&gt;`</ph> class.","source":"The example compiles successfully if the constraint is added to the `FloatingPoint<T>` class."},{"content":"The Common Language Specification imposes a conservative per-instantiation model for nested types and protected members.","pos":[74095,74215]},{"content":"Open generic types cannot expose fields or members with signatures that contain a specific instantiation of a nested, protected generic type.","pos":[74216,74357]},{"content":"Non-generic types that extend a specific instantiation of a generic base class or interface cannot expose fields or members with signatures that contain a different instantiation of a nested, protected generic type.","pos":[74358,74573]},{"content":"The following example defines a generic type, <ph id=\"ph1\">`C1&lt;T&gt;`</ph>, and a protected class, <ph id=\"ph2\">`C1&lt;T&gt;.N`</ph>.","pos":[74575,74663],"source":"The following example defines a generic type, `C1<T>`, and a protected class, `C1<T>.N`."},{"content":"<ph id=\"ph1\">`C1&lt;T&gt;`</ph> has two methods, <ph id=\"ph2\">`M1`</ph> and <ph id=\"ph3\">`M2`</ph>.","pos":[74664,74703],"source":"`C1<T>` has two methods, `M1` and `M2`."},{"content":"However, <ph id=\"ph1\">`M1`</ph> is not CLS-compliant because it tries to return a <ph id=\"ph2\">`C1&lt;int&gt;.N`</ph> object from <ph id=\"ph3\">`C1&lt;T&gt;`</ph>.","pos":[74704,74800],"source":" However, `M1` is not CLS-compliant because it tries to return a `C1<int>.N` object from `C1<T>`."},{"content":"A second class, <ph id=\"ph1\">`C2`</ph>, is derived from <ph id=\"ph2\">`C1&lt;long&gt;`</ph>.","pos":[74801,74850],"source":" A second class, `C2`, is derived from `C1<long>`."},{"content":"It has two methods, <ph id=\"ph1\">`M3`</ph> and <ph id=\"ph2\">`M4`</ph>.","pos":[74851,74885],"source":" It has two methods, `M3` and `M4`."},{"content":"<ph id=\"ph1\">`M3`</ph> is not CLS-compliant because it tries to return a <ph id=\"ph2\">`C1&lt;int&gt;.N`</ph> object from a subclass of <ph id=\"ph3\">`C1&lt;long&gt;`</ph>.","pos":[74886,74990],"source":"`M3` is not CLS-compliant because it tries to return a `C1<int>.N` object from a subclass of `C1<long>`."},{"content":"Note that language compilers can be even more restrictive.","pos":[74991,75049]},{"content":"In this example, Visual Basic displays an error when it tries to compile <ph id=\"ph1\">`M4`</ph>.","pos":[75050,75128],"source":" In this example, Visual Basic displays an error when it tries to compile `M4`."},{"pos":[77744,77756],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"content":"Constructors in CLS-compliant classes and structures must follow these rules:","pos":[77758,77835]},{"content":"A constructor of a derived class must call the instance constructor of its base class before it accesses inherited instance data.","pos":[77840,77969]},{"content":"This requirement is due to the fact that base class constructors are not inherited by their derived classes.","pos":[77970,78078]},{"content":"This rule does not apply to structures, which do not support direct inheritance.","pos":[78079,78159]},{"content":"Typically, compilers enforce this rule independently of CLS compliance, as the following example shows.","pos":[78164,78267]},{"content":"It creates a <ph id=\"ph1\">`Doctor`</ph> class that is derived from a <ph id=\"ph2\">`Person`</ph> class, but the <ph id=\"ph3\">`Doctor`</ph>class fails to call the <ph id=\"ph4\">`Person`</ph> class constructor to initialize inherited instance fields.","pos":[78268,78442],"source":" It creates a `Doctor` class that is derived from a `Person` class, but the `Doctor`class fails to call the `Person` class constructor to initialize inherited instance fields."},{"content":"An object constructor cannot be called except to create an object.","pos":[81589,81655]},{"content":"In addition, an object cannot be initialized twice.","pos":[81656,81707]},{"content":"For example, this means that <ph id=\"ph1\">`Object.MemberwiseClone`</ph> must not call constructors.","pos":[81708,81789],"source":" For example, this means that `Object.MemberwiseClone` must not call constructors."},{"pos":[81797,81807],"content":"Properties","linkify":"Properties","nodes":[{"content":"Properties","pos":[0,10]}]},{"content":"Properties in CLS-compliant types must follow these rules:","pos":[81809,81867]},{"content":"A property must have a setter, a getter, or both.","pos":[81871,81920]},{"content":"In an assembly, these are implemented as special methods, which means that they will appear as separate methods (the getter is named <ph id=\"ph1\">`get`</ph><ph id=\"ph2\">\\_</ph><bpt id=\"p1\">*</bpt>propertyname<ept id=\"p1\">*</ept> and the setter is <ph id=\"ph3\">`set*\\_*propertyname*) marked as `</ph>SpecialName` in the assembly's metadata.","pos":[81921,82168],"source":" In an assembly, these are implemented as special methods, which means that they will appear as separate methods (the getter is named `get`\\_*propertyname* and the setter is `set*\\_*propertyname*) marked as `SpecialName` in the assembly's metadata."},{"content":"The C# compiler enforces this rule automatically without the need to apply the <bpt id=\"p1\">[</bpt>CLSCompliantAttribute<ept id=\"p1\">](xref:System.CLSCompliantAttribute)</ept> attribute.","pos":[82169,82317],"source":" The C# compiler enforces this rule automatically without the need to apply the [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute."},{"content":"A property's type is the return type of the property getter and the last argument of the setter.","pos":[82322,82418]},{"content":"These types must be CLS compliant, and arguments cannot be assigned to the property by reference (that is, they cannot be managed pointers).","pos":[82419,82559]},{"content":"If a property has both a getter and a setter, they must both be virtual, both static, or both instance.","pos":[82564,82667]},{"content":"The C# compiler automatically enforces this rule through property definition syntax.","pos":[82668,82752]},{"pos":[82759,82765],"content":"Events","linkify":"Events","nodes":[{"content":"Events","pos":[0,6]}]},{"content":"An event is defined by its name and its type.","pos":[82767,82812]},{"content":"The event type is a delegate that is used to indicate the event.","pos":[82813,82877]},{"content":"For example, the <ph id=\"ph1\">`DbConnection.StateChange`</ph> event is of type <ph id=\"ph2\">`StateChangeEventHandler`</ph>.","pos":[82878,82965],"source":" For example, the `DbConnection.StateChange` event is of type `StateChangeEventHandler`."},{"content":"In addition to the event itself, three methods with names based on the event name provide the event's implementation and are marked as <ph id=\"ph1\">`SpecialName`</ph> in the assembly's metadata:","pos":[82966,83142],"source":" In addition to the event itself, three methods with names based on the event name provide the event's implementation and are marked as `SpecialName` in the assembly's metadata:"},{"content":"A method for adding an event handler, named <ph id=\"ph1\">`add`</ph>_<bpt id=\"p1\">*</bpt>EventName<ept id=\"p1\">*</ept>.","pos":[83147,83209],"source":"A method for adding an event handler, named `add`_*EventName*."},{"content":"For example, the event subscription method for the <ph id=\"ph1\">`DbConnection.StateChange`</ph> event is named <ph id=\"ph2\">`add_StateChange`</ph>.","pos":[83210,83321],"source":" For example, the event subscription method for the `DbConnection.StateChange` event is named `add_StateChange`."},{"content":"A method for removing an event handler, named <ph id=\"ph1\">`remove`</ph>_<bpt id=\"p1\">*</bpt>EventName<ept id=\"p1\">*</ept>.","pos":[83326,83393],"source":"A method for removing an event handler, named `remove`_*EventName*."},{"content":"For example, the removal method for the <ph id=\"ph1\">`DbConnection.StateChange`</ph> event is named <ph id=\"ph2\">`remove_StateChange`</ph>.","pos":[83394,83497],"source":" For example, the removal method for the `DbConnection.StateChange` event is named `remove_StateChange`."},{"pos":[83501,83580],"content":"A method for indicating that the event has occurred, named <ph id=\"ph1\">`raise`</ph>_<bpt id=\"p1\">*</bpt>EventName<ept id=\"p1\">*</ept>.","source":"A method for indicating that the event has occurred, named `raise`_*EventName*."},{"pos":[83585,83744],"content":"[!NOTE]\nMost of the Common Language Specification's rules regarding events are implemented by language compilers and are transparent to component developers.","leadings":["","> "],"nodes":[{"content":"Most of the Common Language Specification's rules regarding events are implemented by language compilers and are transparent to component developers.","pos":[8,157]}]},{"content":"The methods for adding, removing, and raising the event must have the same accessibility.","pos":[83747,83836]},{"content":"They must also all be static, instance, or virtual.","pos":[83837,83888]},{"content":"The methods for adding and removing an event have one parameter whose type is the event delegate type.","pos":[83889,83991]},{"content":"The add and remove methods must both be present or both be absent.","pos":[83992,84058]},{"content":"The following example defines a CLS-compliant class named <ph id=\"ph1\">`Temperature`</ph> that raises a <ph id=\"ph2\">`TemperatureChanged`</ph> event if the change in temperature between two readings equals or exceeds a threshold value.","pos":[84061,84260],"source":"The following example defines a CLS-compliant class named `Temperature` that raises a `TemperatureChanged` event if the change in temperature between two readings equals or exceeds a threshold value."},{"content":"The <ph id=\"ph1\">`Temperature`</ph> class explicitly defines a <ph id=\"ph2\">`raise_TemperatureChanged`</ph> method so that it can selectively execute event handlers.","pos":[84261,84390],"source":" The `Temperature` class explicitly defines a `raise_TemperatureChanged` method so that it can selectively execute event handlers."},{"pos":[91412,91421],"content":"Overloads","linkify":"Overloads","nodes":[{"content":"Overloads","pos":[0,9]}]},{"content":"The Common Language Specification imposes the following requirements on overloaded members:","pos":[91423,91514]},{"content":"Members can be overloaded based on the number of parameters and the type of any parameter.","pos":[91519,91609]},{"content":"Calling convention, return type, custom modifiers applied to the method or its parameter, and whether parameters are passed by value or by reference are not considered when differentiating between overloads.","pos":[91610,91817]},{"content":"For an example, see the code for the requirement that names must be unique within a scope in the <bpt id=\"p1\">[</bpt>Naming conventions<ept id=\"p1\">](#naming-conventions)</ept> section.","pos":[91818,91965],"source":" For an example, see the code for the requirement that names must be unique within a scope in the [Naming conventions](#naming-conventions) section."},{"content":"Only properties and methods can be overloaded.","pos":[91970,92016]},{"content":"Fields and events cannot be overloaded.","pos":[92017,92056]},{"content":"Generic methods can be overloaded based on the number of their generic parameters.","pos":[92061,92143]},{"pos":[92148,92410],"content":"[!NOTE]\nThe `op_Explicit` and `op_Implicit` operators are exceptions to the rule that return value is not considered part of a method signature for overload resolution. These two operators can be overloaded based on both their parameters and their return value.","leadings":["",">"],"nodes":[{"content":"The `op_Explicit` and `op_Implicit` operators are exceptions to the rule that return value is not considered part of a method signature for overload resolution. These two operators can be overloaded based on both their parameters and their return value.","pos":[8,261],"nodes":[{"content":"The <ph id=\"ph1\">`op_Explicit`</ph> and <ph id=\"ph2\">`op_Implicit`</ph> operators are exceptions to the rule that return value is not considered part of a method signature for overload resolution.","pos":[0,160],"source":"The `op_Explicit` and `op_Implicit` operators are exceptions to the rule that return value is not considered part of a method signature for overload resolution."},{"content":"These two operators can be overloaded based on both their parameters and their return value.","pos":[161,253]}]}]},{"pos":[92417,92427],"content":"Exceptions","linkify":"Exceptions","nodes":[{"content":"Exceptions","pos":[0,10]}]},{"content":"Exception objects must derive from <bpt id=\"p1\">[</bpt>System.Exception<ept id=\"p1\">](xref:System.Exception)</ept> or from another type derived from <ph id=\"ph1\">`System.Exception`</ph>.","pos":[92429,92559],"source":"Exception objects must derive from [System.Exception](xref:System.Exception) or from another type derived from `System.Exception`."},{"content":"The following example illustrates the compiler error that results when a custom class named <ph id=\"ph1\">`ErrorClass`</ph> is used for exception handling.","pos":[92560,92696],"source":" The following example illustrates the compiler error that results when a custom class named `ErrorClass` is used for exception handling."},{"content":"To correct this error, the <ph id=\"ph1\">`ErrorClass`</ph> class must inherit from <ph id=\"ph2\">`System.Exception`</ph>.","pos":[94546,94629],"source":"To correct this error, the `ErrorClass` class must inherit from `System.Exception`."},{"content":"In addition, the Message property must be overridden.","pos":[94630,94683]},{"content":"The following example corrects these errors to define an <ph id=\"ph1\">`ErrorClass`</ph> class that is CLS-compliant.","pos":[94684,94782],"source":" The following example corrects these errors to define an `ErrorClass` class that is CLS-compliant."},{"pos":[96289,96299],"content":"Attributes","linkify":"Attributes","nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"In.NET Framework assemblies, custom attributes provide an extensible mechanism for storing custom attributes and retrieving metadata about programming objects, such as assemblies, types, members, and method parameters.","pos":[96301,96519]},{"content":"Custom attributes must derive from <bpt id=\"p1\">[</bpt>System.Attribute<ept id=\"p1\">](xref:System.Attribute)</ept> or from a type derived from <ph id=\"ph1\">`System.Attribute`</ph>.","pos":[96520,96644],"source":" Custom attributes must derive from [System.Attribute](xref:System.Attribute) or from a type derived from `System.Attribute`."},{"content":"The following example violates this rule.","pos":[96646,96687]},{"content":"It defines a <ph id=\"ph1\">`NumericAttribute`</ph> class that does not derive from <ph id=\"ph2\">`System.Attribute`</ph>.","pos":[96688,96771],"source":" It defines a `NumericAttribute` class that does not derive from `System.Attribute`."},{"content":"Note that a compiler error results only when the non-CLS-compliant attribute is applied, not when the class is defined.","pos":[96772,96891]},{"content":"The constructor or the properties of a CLS-compliant attribute can expose only the following types:","pos":[98263,98362]},{"pos":[98366,98396],"content":"<bpt id=\"p1\">[</bpt>Boolean<ept id=\"p1\">](xref:System.Boolean)</ept>","source":"[Boolean](xref:System.Boolean)"},{"pos":[98400,98424],"content":"<bpt id=\"p1\">[</bpt>Byte<ept id=\"p1\">](xref:System.Byte)</ept>","source":"[Byte](xref:System.Byte)"},{"pos":[98428,98452],"content":"<bpt id=\"p1\">[</bpt>Char<ept id=\"p1\">](xref:System.Char)</ept>","source":"[Char](xref:System.Char)"},{"pos":[98456,98484],"content":"<bpt id=\"p1\">[</bpt>Double<ept id=\"p1\">](xref:System.Double)</ept>","source":"[Double](xref:System.Double)"},{"pos":[98488,98514],"content":"<bpt id=\"p1\">[</bpt>Int16<ept id=\"p1\">](xref:System.Int16)</ept>","source":"[Int16](xref:System.Int16)"},{"pos":[98518,98544],"content":"<bpt id=\"p1\">[</bpt>Int32<ept id=\"p1\">](xref:System.Int32)</ept>","source":"[Int32](xref:System.Int32)"},{"pos":[98548,98574],"content":"<bpt id=\"p1\">[</bpt>Int64<ept id=\"p1\">](xref:System.Int64)</ept>","source":"[Int64](xref:System.Int64)"},{"pos":[98578,98606],"content":"<bpt id=\"p1\">[</bpt>Single<ept id=\"p1\">](xref:System.Single)</ept>","source":"[Single](xref:System.Single)"},{"pos":[98610,98638],"content":"<bpt id=\"p1\">[</bpt>String<ept id=\"p1\">](xref:System.String)</ept>","source":"[String](xref:System.String)"},{"pos":[98642,98666],"content":"<bpt id=\"p1\">[</bpt>Type<ept id=\"p1\">](xref:System.Type)</ept>","source":"[Type](xref:System.Type)"},{"pos":[98670,98753],"content":"Any enumeration type whose underlying type is <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, or <ph id=\"ph4\">`Int64`</ph>.","source":"Any enumeration type whose underlying type is `Byte`, `Int16`, `Int32`, or `Int64`."},{"content":"The following example defines a <ph id=\"ph1\">`DescriptionAttribute`</ph> class that derives from <bpt id=\"p1\">[</bpt>Attribute<ept id=\"p1\">](xref:System.Attribute)</ept>.","pos":[98756,98870],"source":"The following example defines a `DescriptionAttribute` class that derives from [Attribute](xref:System.Attribute)."},{"content":"The class constructor has a parameter of type <ph id=\"ph1\">`Descriptor`</ph>, so the class is not CLS-compliant.","pos":[98871,98965],"source":" The class constructor has a parameter of type `Descriptor`, so the class is not CLS-compliant."},{"content":"Note that the C# compiler emits a warning but compiles successfully.","pos":[98966,99034]},{"pos":[100249,100284],"content":"The CLSCompliantAttribute attribute","linkify":"The CLSCompliantAttribute attribute","nodes":[{"content":"The CLSCompliantAttribute attribute","pos":[0,35]}]},{"content":"The <bpt id=\"p1\">[</bpt>CLSCompliantAttribute<ept id=\"p1\">](xref:System.CLSCompliantAttribute)</ept> attribute is used to indicate whether a program element complies with the Common Language Specification.","pos":[100286,100453],"source":"The [CLSCompliantAttribute](xref:System.CLSCompliantAttribute) attribute is used to indicate whether a program element complies with the Common Language Specification."},{"content":"The <ph id=\"ph1\">`CLSCompliantAttribute.CLSCompliantAttribute(Boolean)`</ph> constructor includes a single required parameter, <bpt id=\"p1\">*</bpt>isCompliant<ept id=\"p1\">*</ept>, that indicates whether the program element is CLS-compliant.","pos":[100454,100638],"source":" The `CLSCompliantAttribute.CLSCompliantAttribute(Boolean)` constructor includes a single required parameter, *isCompliant*, that indicates whether the program element is CLS-compliant."},{"content":"At compile time, the compiler detects non-compliant elements that are presumed to be CLS-compliant and emits a warning.","pos":[100641,100760]},{"content":"The compiler does not emit warnings for types or members that are explicitly declared to be non-compliant.","pos":[100761,100867]},{"pos":[100870,100949],"content":"Component developers can use the <ph id=\"ph1\">`CLSCompliantAttribute`</ph> attribute in two ways:","source":"Component developers can use the `CLSCompliantAttribute` attribute in two ways:"},{"content":"To define the parts of the public interface exposed by a component that are CLS-compliant and the parts that are not CLS-compliant.","pos":[100954,101085]},{"content":"When the attribute is used to mark particular program elements as CLS-compliant, its use guarantees that those elements are accessible from all languages and tools that target the .NET Framework.","pos":[101086,101281]},{"content":"To ensure that the component library's public interface exposes only program elements that are CLS-compliant.","pos":[101286,101395]},{"content":"If elements are not CLS-compliant, compilers will generally issue a warning.","pos":[101396,101472]},{"pos":[101476,101828],"content":"[!WARNING]\nIn some cases, language compilers enforce CLS-compliant rules regardless of whether the `CLSCompliantAttribute` attribute is used. For example, defining a `*static` member in an interface violates a CLS rule. However, if you define a `*static` member in an interface, the C# compiler displays an error message and fails to compile the app.","leadings":["","> "],"nodes":[{"content":"In some cases, language compilers enforce CLS-compliant rules regardless of whether the `CLSCompliantAttribute` attribute is used. For example, defining a `*static` member in an interface violates a CLS rule. However, if you define a `*static` member in an interface, the C# compiler displays an error message and fails to compile the app.","pos":[11,350],"nodes":[{"content":"In some cases, language compilers enforce CLS-compliant rules regardless of whether the <ph id=\"ph1\">`CLSCompliantAttribute`</ph> attribute is used.","pos":[0,130],"source":"In some cases, language compilers enforce CLS-compliant rules regardless of whether the `CLSCompliantAttribute` attribute is used."},{"content":"For example, defining a <ph id=\"ph1\">`*static`</ph> member in an interface violates a CLS rule.","pos":[131,208],"source":" For example, defining a `*static` member in an interface violates a CLS rule."},{"content":"However, if you define a <ph id=\"ph1\">`*static`</ph> member in an interface, the C# compiler displays an error message and fails to compile the app.","pos":[209,339],"source":" However, if you define a `*static` member in an interface, the C# compiler displays an error message and fails to compile the app."}]}]},{"content":"The <ph id=\"ph1\">`CLSCompliantAttribute`</ph> attribute is marked with an <bpt id=\"p1\">[</bpt>AttributeUsageAttribute<ept id=\"p1\">](xref:System.AttributeUsageAttribute)</ept> attribute that has a value of <ph id=\"ph2\">`AttributeTargets.All`</ph>.","pos":[101830,102002],"source":"The `CLSCompliantAttribute` attribute is marked with an [AttributeUsageAttribute](xref:System.AttributeUsageAttribute) attribute that has a value of `AttributeTargets.All`."},{"content":"This value allows you to apply the <ph id=\"ph1\">`CLSCompliantAttribute`</ph> attribute to any program element, including assemblies, modules, types (classes, structures, enumerations, interfaces, and delegates), type members (constructors, methods, properties, fields, and events), parameters, generic parameters, and return values.","pos":[102003,102317],"source":" This value allows you to apply the `CLSCompliantAttribute` attribute to any program element, including assemblies, modules, types (classes, structures, enumerations, interfaces, and delegates), type members (constructors, methods, properties, fields, and events), parameters, generic parameters, and return values."},{"content":"However, in practice, you should apply the attribute only to assemblies, types, and type members.","pos":[102318,102415]},{"content":"Otherwise, compilers ignore the attribute and continue to generate compiler warnings whenever they encounter a non-compliant parameter, generic parameter, or return value in your library's public interface.","pos":[102416,102622]},{"content":"The value of the <ph id=\"ph1\">`CLSCompliantAttribute`</ph> attribute is inherited by contained program elements.","pos":[102626,102720],"source":"The value of the `CLSCompliantAttribute` attribute is inherited by contained program elements."},{"content":"For example, if an assembly is marked as CLS-compliant, its types are also CLS-compliant.","pos":[102721,102810]},{"content":"If a type is marked as CLS-compliant, its nested types and members are also CLS-compliant.","pos":[102811,102901]},{"content":"You can explicitly override the inherited compliance by applying the <ph id=\"ph1\">`CLSCompliantAttribute`</ph> attribute to a contained program element.","pos":[102904,103038],"source":"You can explicitly override the inherited compliance by applying the `CLSCompliantAttribute` attribute to a contained program element."},{"content":"For example, you can use the <ph id=\"ph1\">`CLSCompliantAttribute`</ph> attribute with an <bpt id=\"p1\">*</bpt>isCompliant<ept id=\"p1\">*</ept> value of <ph id=\"ph2\">`false`</ph> to define a non-compliant type in a compliant assembly, and you can use the attribute with an <bpt id=\"p2\">*</bpt>isComplian<ept id=\"p2\">*</ept> value of <ph id=\"ph3\">`true`</ph> to define a compliant type in a non-compliant assembly.","pos":[103039,103319],"source":" For example, you can use the `CLSCompliantAttribute` attribute with an *isCompliant* value of `false` to define a non-compliant type in a compliant assembly, and you can use the attribute with an *isComplian* value of `true` to define a compliant type in a non-compliant assembly."},{"content":"You can also define non-compliant members in a compliant type.","pos":[103320,103382]},{"content":"However, a non-compliant type cannot have compliant members, so you cannot use the attribute with an <bpt id=\"p1\">*</bpt>isCompliant<ept id=\"p1\">*</ept> value of <ph id=\"ph1\">`true`</ph> to override inheritance from a non-compliant type.","pos":[103383,103564],"source":" However, a non-compliant type cannot have compliant members, so you cannot use the attribute with an *isCompliant* value of `true` to override inheritance from a non-compliant type."},{"pos":[103567,103743],"content":"When you are developing components, you should always use the <ph id=\"ph1\">`CLSCompliantAttribute`</ph> attribute to indicate whether your assembly, its types, and its members are CLS-compliant.","source":"When you are developing components, you should always use the `CLSCompliantAttribute` attribute to indicate whether your assembly, its types, and its members are CLS-compliant."},{"content":"To create CLS-compliant components:","pos":[103746,103781]},{"pos":[103787,103857],"content":"Use the <ph id=\"ph1\">`CLSCompliantAttribute`</ph> to mark you assembly as CLS-compliant.","source":"Use the `CLSCompliantAttribute` to mark you assembly as CLS-compliant."},{"content":"Mark any publicly exposed types in the assembly that are not CLS-compliant as non-compliant.","pos":[103862,103954]},{"content":"Mark any publicly exposed members in CLS-compliant types as non-compliant.","pos":[103960,104034]},{"content":"Provide a CLS-compliant alternative for non-CLS-compliant members.","pos":[104040,104106]},{"content":"If you've successfully marked all your non-compliant types and members, your compiler should not emit any non-compliance warnings.","pos":[104109,104239]},{"content":"However, you should indicate which members are not CLS-compliant and list their CLS-compliant alternatives in your product documentation.","pos":[104240,104377]},{"content":"The following example uses the <ph id=\"ph1\">`CLSCompliantAttribute`</ph> attribute to define a CLS-compliant assembly and a type, <ph id=\"ph2\">`CharacterUtilities`</ph>, that has two non-CLS-compliant members.","pos":[104380,104553],"source":"The following example uses the `CLSCompliantAttribute` attribute to define a CLS-compliant assembly and a type, `CharacterUtilities`, that has two non-CLS-compliant members."},{"content":"Because both members are tagged with the <ph id=\"ph1\">`CLSCompliant(false)`</ph> attribute, the compiler produces no warnings.","pos":[104554,104662],"source":" Because both members are tagged with the `CLSCompliant(false)` attribute, the compiler produces no warnings."},{"content":"The class also provides a CLS-compliant alternative for both methods.","pos":[104663,104732]},{"content":"Ordinarily, we would just add two overloads to the <ph id=\"ph1\">`ToUTF16`</ph> method to provide CLS-compliant alternatives.","pos":[104733,104839],"source":" Ordinarily, we would just add two overloads to the `ToUTF16` method to provide CLS-compliant alternatives."},{"content":"However, because methods cannot be overloaded based on return value, the names of the CLS-compliant methods are different from the names of the non-compliant methods.","pos":[104840,105006]},{"content":"If you are developing an app rather than a library (that is, if you aren't exposing types or members that can be consumed by other app developers), the CLS compliance of the program elements that your app consumes are of interest only if your language does not support them.","pos":[108429,108703]},{"content":"In that case, your language compiler will generate an error when you try to use a non-CLS-compliant element.","pos":[108704,108812]},{"pos":[108818,108849],"content":"Cross-Language Interoperability","linkify":"Cross-Language Interoperability","nodes":[{"content":"Cross-Language Interoperability","pos":[0,31]}]},{"content":"Language independence has a number of possible meanings.","pos":[108851,108907]},{"content":"One meaning involves seamlessly consuming types written in one language from an app written in another language.","pos":[108908,109020]},{"content":"A second meaning, which is the focus of this article, involves combining code written in multiple languages into a single .NET Framework assembly.","pos":[109021,109167]},{"content":"The following example illustrates cross-language interoperability by creating a class library named Utilities.dll that includes two classes, <ph id=\"ph1\">`NumericLib`</ph> and <ph id=\"ph2\">`StringLib`</ph>.","pos":[109170,109340],"source":"The following example illustrates cross-language interoperability by creating a class library named Utilities.dll that includes two classes, `NumericLib` and `StringLib`."},{"content":"The <ph id=\"ph1\">`NumericLib`</ph> class is written in C#, and the <ph id=\"ph2\">`StringLib`</ph> class is written in Visual Basic.","pos":[109341,109435],"source":" The `NumericLib` class is written in C#, and the `StringLib` class is written in Visual Basic."},{"content":"Here's the source code for <ph id=\"ph1\">`StringUtil.vb`</ph>, which includes a single member, <ph id=\"ph2\">`ToTitleCase`</ph>, in its <ph id=\"ph3\">`StringLib`</ph> class.","pos":[109436,109552],"source":" Here's the source code for `StringUtil.vb`, which includes a single member, `ToTitleCase`, in its `StringLib` class."},{"pos":[110529,110652],"content":"Here's the source code for NumberUtil.cs, which defines a <ph id=\"ph1\">`NumericLib`</ph> class that has two members, <ph id=\"ph2\">`IsEven`</ph> and <ph id=\"ph3\">`NearZero`</ph>.","source":"Here's the source code for NumberUtil.cs, which defines a `NumericLib` class that has two members, `IsEven` and `NearZero`."},{"content":"To package the two classes in a single assembly, you must compile them into modules.","pos":[111289,111373]},{"content":"To compile the Visual Basic source code file into a module, use this command:","pos":[111374,111451]},{"content":"To compile the C# source code file into a module, use this command:","pos":[111492,111559]},{"content":"You then use the Link tool (Link.exe) to compile the two modules into an assembly:","pos":[111598,111680]},{"content":"The following example then calls the <ph id=\"ph1\">`NumericLib.NearZero`</ph> and <ph id=\"ph2\">`StringLib.ToTitleCase`</ph> methods.","pos":[111764,111859],"source":"The following example then calls the `NumericLib.NearZero` and `StringLib.ToTitleCase` methods."},{"content":"Note that both the Visual Basic code and the C# code are able to access the methods in both classes.","pos":[111860,111960]},{"content":"To compile the Visual Basic code, use this command:","pos":[112636,112687]},{"content":"To compile with C#, change the name of the compiler from vbc to csc, and change the file extension from .vb to .cs:","pos":[112731,112846]}]}