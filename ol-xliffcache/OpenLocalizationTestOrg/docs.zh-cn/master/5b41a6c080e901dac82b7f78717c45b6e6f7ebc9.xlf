<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b41a6c080e901dac82b7f78717c45b6e6f7ebc9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\x-subclass-directive.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0318bd908a4c20e8910cdc5c0a2cbcb75336a8a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e3d58802f257195aec4555ee10852b63a0e1e97</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>x:Subclass Directive | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>x:Subclass Directive</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Modifies XAML markup compile behavior when <ph id="ph1">`x:Class`</ph> is also provided.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Instead of creating a partial class that is based on <ph id="ph1">`x:Class`</ph>, the provided <ph id="ph2">`x:Class`</ph> is created as an intermediate class, and then your provided derived class is expected to be based on <ph id="ph3">`x:Class`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Specifies a CLR namespace that contains <ph id="ph1">`classname`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`namespace`</ph> is specified, a dot (.) separates <ph id="ph2">`namespace`</ph> and <ph id="ph3">`classname`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Specifies the CLR name of the partial class that connects the loaded XAML and your code-behind for that XAML.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Can be different from <ph id="ph1">`namespace`</ph> if each namespace can resolve the other.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Specifies a CLR namespace that contains <ph id="ph1">`subclassName`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`subclassName`</ph> is specified, a dot (.) separates <ph id="ph2">`subclassNamespace`</ph> and <ph id="ph3">`subclassName`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Specifies the CLR name of the subclass.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Class Directive<ept id="p1">](../../../docs/framework/xaml-services/x-class-directive.md)</ept> must also be provided on the same object, and that object must be the root element of the XAML production.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Subclass`</ph> usage is primarily intended for languages that do not support partial class declarations.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The class used as the <ph id="ph1">`x:Subclass`</ph> cannot be a nested class, and <ph id="ph2">`x:Subclass`</ph> must refer to the root object as explained in the "Dependencies" section.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Otherwise, the conceptual meaning of <ph id="ph1">`x:Subclass`</ph> is undefined by a .NET Framework XAML Services implementation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is because .NET Framework XAML Services behavior does not specify the overall programming model by which XAML markup and backing code are connected.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Implementations of further concepts related to <ph id="ph1">`x:Class`</ph> and <ph id="ph2">`x:Subclass`</ph> are performed by specific frameworks that use programming models or application models to define how to connect XAML markup, compiled markup, and CLR-based code-behind.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each framework might have its own build actions that enable some of the behavior, or specific components that must be included in the build environment.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Within a framework, build actions can also vary based on the specific CLR language that is used for the code-behind.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Subclass`</ph> can be on a page root or on the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> root in the application definition, which already has <ph id="ph3">`x:Class`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Declaring <ph id="ph1">`x:Subclass`</ph> on any element other than a page or application root, or specifying it where no <ph id="ph2">`x:Class`</ph> exists, causes a compile-time error.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Creating derived classes that work correctly for the <ph id="ph1">`x:Subclass`</ph> scenario is fairly complex.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You might need to examine the intermediate files (the .g files produced in the obj folder of your project by markup compile, with names that incorporate the .xaml file names).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These intermediate files can help you determine the origin of certain programming constructs in the joined partial classes in the compiled application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Event handlers in the derived class must be <ph id="ph1">`internal override`</ph> (<ph id="ph2">`Friend Overrides`</ph>in <ph id="ph3">[!INCLUDE[TLA#tla_visualb](../../../includes/tlasharptla-visualb-md.md)]</ph>) in order to override the stubs for the handlers as created in the intermediate class during compilation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Otherwise, the derived class implementations hide (shadow) the intermediate class implementation and the intermediate class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you define both <ph id="ph1">`x:Class`</ph> and <ph id="ph2">`x:Subclass`</ph>, you do not need to provide any implementation for the class that is referenced by <ph id="ph3">`x:Class`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You only need to give it a name via the <ph id="ph1">`x:Class`</ph> attribute so that the compiler has some guidance for the class that it creates in the intermediate files (the compiler does not select a default name in this case).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can give the <ph id="ph1">`x:Class`</ph> class an implementation; however, this is not the typical scenario for using both <ph id="ph2">`x:Class`</ph> and <ph id="ph3">`x:Subclass`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Class Directive<ept id="p1">](../../../docs/framework/xaml-services/x-class-directive.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML and Custom Classes for WPF<ept id="p1">](../../../docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>