{"content":"---\ntitle: \"Exit Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Exit\"\nhelpviewer_keywords: \n  - \"execution [Visual Basic], ending\"\n  - \"files [Visual Basic], closing\"\n  - \"programs [Visual Basic], quitting\"\n  - \"code, exiting\"\n  - \"Exit statement [Visual Basic]\"\n  - \"program termination\"\n  - \"execution [Visual Basic], stopping\"\nms.assetid: 760bfb32-5c3f-4bdb-a432-9a6001c92db7\n---\n# Exit Statement (Visual Basic)\nExits a procedure or block and transfers control immediately to the statement following the procedure call or the block definition.  \n  \n## Syntax  \n  \n```  \nExit { Do | For | Function | Property | Select | Sub | Try | While }  \n```  \n  \n## Statements  \n `Exit Do`  \n Immediately exits the `Do` loop in which it appears. Execution continues with the statement following the `Loop` statement. `Exit Do` can be used only inside a `Do` loop. When used within nested `Do` loops, `Exit Do` exits the innermost loop and transfers control to the next higher level of nesting.  \n  \n `Exit For`  \n Immediately exits the `For` loop in which it appears. Execution continues with the statement following the `Next` statement. `Exit For` can be used only inside a `For`...`Next` or `For Each`...`Next` loop. When used within nested `For` loops, `Exit For` exits the innermost loop and transfers control to the next higher level of nesting.  \n  \n `Exit Function`  \n Immediately exits the `Function` procedure in which it appears. Execution continues with the statement following the statement that called the `Function` procedure. `Exit Function` can be used only inside a `Function` procedure.  \n  \n To specify a return value, you can assign the value to the function name on a line before the `Exit Function` statement. To assign the return value and exit the function in one statement, you can instead use the [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md).  \n  \n `Exit Property`  \n Immediately exits the `Property` procedure in which it appears. Execution continues with the statement that called the `Property` procedure, that is, with the statement requesting or setting the property's value. `Exit Property` can be used only inside a property's `Get` or `Set` procedure.  \n  \n To specify a return value in a `Get` procedure, you can assign the value to the function name on a line before the `Exit Property` statement. To assign the return value and exit the `Get` procedure in one statement, you can instead use the `Return` statement.  \n  \n In a `Set` procedure, the `Exit Property` statement is equivalent to the `Return` statement.  \n  \n `Exit Select`  \n Immediately exits the `Select Case` block in which it appears. Execution continues with the statement following the `End Select` statement. `Exit Select` can be used only inside a `Select Case` statement.  \n  \n `Exit Sub`  \n Immediately exits the `Sub` procedure in which it appears. Execution continues with the statement following the statement that called the `Sub` procedure. `Exit Sub` can be used only inside a `Sub` procedure.  \n  \n In a `Sub` procedure, the `Exit Sub` statement is equivalent to the `Return` statement.  \n  \n `Exit Try`  \n Immediately exits the `Try` or `Catch` block in which it appears. Execution continues with the `Finally` block if there is one, or with the statement following the `End Try` statement otherwise. `Exit Try` can be used only inside a `Try` or `Catch` block, and not inside a `Finally` block.  \n  \n `Exit While`  \n Immediately exits the `While` loop in which it appears. Execution continues with the statement following the `End While` statement. `Exit While` can be used only inside a `While` loop. When used within nested `While` loops, `Exit While` transfers control to the loop that is one nested level above the loop where `Exit While` occurs.  \n  \n## Remarks  \n Do not confuse `Exit` statements with `End` statements. `Exit` does not define the end of a statement.  \n  \n## Example  \n In the following example, the loop condition stops the loop when the `index` variable is greater than 100. The `If` statement in the loop, however, causes the `Exit Do` statement to stop the loop when the index variable is greater than 10.  \n  \n [!code-vb[VbVbalrStatements#133](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/class10.vb#133)]  \n  \n## Example  \n The following example assigns the return value to the function name `myFunction`, and then uses `Exit Function` to return from the function.  \n  \n [!code-vb[VbVbalrStatements#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#23)]  \n  \n## Example  \n The following example uses the [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md) to assign the return value and exit the function.  \n  \n [!code-vb[VbVbalrStatements#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#24)]  \n  \n## See also\n\n- [Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md)\n- [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)\n- [End Statement](../../../visual-basic/language-reference/statements/end-statement.md)\n- [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md)\n- [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)\n- [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)\n- [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md)\n- [Stop Statement](../../../visual-basic/language-reference/statements/stop-statement.md)\n- [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)\n- [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)\n","nodes":[{"pos":[4,399],"embed":true,"restype":"x-metadata","content":"title: \"Exit Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Exit\"\nhelpviewer_keywords: \n  - \"execution [Visual Basic], ending\"\n  - \"files [Visual Basic], closing\"\n  - \"programs [Visual Basic], quitting\"\n  - \"code, exiting\"\n  - \"Exit statement [Visual Basic]\"\n  - \"program termination\"\n  - \"execution [Visual Basic], stopping\"\nms.assetid: 760bfb32-5c3f-4bdb-a432-9a6001c92db7","nodes":[{"content":"Exit Statement (Visual Basic)","nodes":[{"pos":[0,29],"content":"Exit Statement (Visual Basic)","nodes":[{"content":"Exit Statement (Visual Basic)","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[406,435],"content":"Exit Statement (Visual Basic)","linkify":"Exit Statement (Visual Basic)","nodes":[{"content":"Exit Statement (Visual Basic)","pos":[0,29]}]},{"content":"Exits a procedure or block and transfers control immediately to the statement following the procedure call or the block definition.","pos":[436,567]},{"pos":[576,582],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[677,687],"content":"Statements","linkify":"Statements","nodes":[{"content":"Statements","pos":[0,10]}]},{"content":"Immediately exits the <ph id=\"ph1\">`Do`</ph> loop in which it appears.","pos":[704,756],"source":"Immediately exits the `Do` loop in which it appears."},{"content":"Execution continues with the statement following the <ph id=\"ph1\">`Loop`</ph> statement.","pos":[757,827],"source":" Execution continues with the statement following the `Loop` statement."},{"content":"<ph id=\"ph1\">`Exit Do`</ph> can be used only inside a <ph id=\"ph2\">`Do`</ph> loop.","pos":[828,874],"source":"`Exit Do` can be used only inside a `Do` loop."},{"content":"When used within nested <ph id=\"ph1\">`Do`</ph> loops, <ph id=\"ph2\">`Exit Do`</ph> exits the innermost loop and transfers control to the next higher level of nesting.","pos":[875,1004],"source":" When used within nested `Do` loops, `Exit Do` exits the innermost loop and transfers control to the next higher level of nesting."},{"content":"Immediately exits the <ph id=\"ph1\">`For`</ph> loop in which it appears.","pos":[1025,1078],"source":"Immediately exits the `For` loop in which it appears."},{"content":"Execution continues with the statement following the <ph id=\"ph1\">`Next`</ph> statement.","pos":[1079,1149],"source":" Execution continues with the statement following the `Next` statement."},{"content":"<ph id=\"ph1\">`Exit For`</ph> can be used only inside a <ph id=\"ph2\">`For`</ph>...<ph id=\"ph3\">`Next`</ph> or <ph id=\"ph4\">`For Each`</ph>...<ph id=\"ph5\">`Next`</ph> loop.","pos":[1150,1230],"source":"`Exit For` can be used only inside a `For`...`Next` or `For Each`...`Next` loop."},{"content":"When used within nested <ph id=\"ph1\">`For`</ph> loops, <ph id=\"ph2\">`Exit For`</ph> exits the innermost loop and transfers control to the next higher level of nesting.","pos":[1231,1362],"source":" When used within nested `For` loops, `Exit For` exits the innermost loop and transfers control to the next higher level of nesting."},{"content":"Immediately exits the <ph id=\"ph1\">`Function`</ph> procedure in which it appears.","pos":[1388,1451],"source":"Immediately exits the `Function` procedure in which it appears."},{"content":"Execution continues with the statement following the statement that called the <ph id=\"ph1\">`Function`</ph> procedure.","pos":[1452,1552],"source":" Execution continues with the statement following the statement that called the `Function` procedure."},{"content":"<ph id=\"ph1\">`Exit Function`</ph> can be used only inside a <ph id=\"ph2\">`Function`</ph> procedure.","pos":[1553,1616],"source":"`Exit Function` can be used only inside a `Function` procedure."},{"content":"To specify a return value, you can assign the value to the function name on a line before the <ph id=\"ph1\">`Exit Function`</ph> statement.","pos":[1623,1743],"source":"To specify a return value, you can assign the value to the function name on a line before the `Exit Function` statement."},{"content":"To assign the return value and exit the function in one statement, you can instead use the <bpt id=\"p1\">[</bpt>Return Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/return-statement.md)</ept>.","pos":[1744,1927],"source":" To assign the return value and exit the function in one statement, you can instead use the [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md)."},{"content":"Immediately exits the <ph id=\"ph1\">`Property`</ph> procedure in which it appears.","pos":[1953,2016],"source":"Immediately exits the `Property` procedure in which it appears."},{"content":"Execution continues with the statement that called the <ph id=\"ph1\">`Property`</ph> procedure, that is, with the statement requesting or setting the property's value.","pos":[2017,2165],"source":" Execution continues with the statement that called the `Property` procedure, that is, with the statement requesting or setting the property's value."},{"content":"<ph id=\"ph1\">`Exit Property`</ph> can be used only inside a property's <ph id=\"ph2\">`Get`</ph> or <ph id=\"ph3\">`Set`</ph> procedure.","pos":[2166,2244],"source":"`Exit Property` can be used only inside a property's `Get` or `Set` procedure."},{"content":"To specify a return value in a <ph id=\"ph1\">`Get`</ph> procedure, you can assign the value to the function name on a line before the <ph id=\"ph2\">`Exit Property`</ph> statement.","pos":[2251,2392],"source":"To specify a return value in a `Get` procedure, you can assign the value to the function name on a line before the `Exit Property` statement."},{"content":"To assign the return value and exit the <ph id=\"ph1\">`Get`</ph> procedure in one statement, you can instead use the <ph id=\"ph2\">`Return`</ph> statement.","pos":[2393,2510],"source":" To assign the return value and exit the `Get` procedure in one statement, you can instead use the `Return` statement."},{"pos":[2517,2609],"content":"In a <ph id=\"ph1\">`Set`</ph> procedure, the <ph id=\"ph2\">`Exit Property`</ph> statement is equivalent to the <ph id=\"ph3\">`Return`</ph> statement.","source":"In a `Set` procedure, the `Exit Property` statement is equivalent to the `Return` statement."},{"content":"Immediately exits the <ph id=\"ph1\">`Select Case`</ph> block in which it appears.","pos":[2633,2695],"source":"Immediately exits the `Select Case` block in which it appears."},{"content":"Execution continues with the statement following the <ph id=\"ph1\">`End Select`</ph> statement.","pos":[2696,2772],"source":" Execution continues with the statement following the `End Select` statement."},{"content":"<ph id=\"ph1\">`Exit Select`</ph> can be used only inside a <ph id=\"ph2\">`Select Case`</ph> statement.","pos":[2773,2837],"source":"`Exit Select` can be used only inside a `Select Case` statement."},{"content":"Immediately exits the <ph id=\"ph1\">`Sub`</ph> procedure in which it appears.","pos":[2858,2916],"source":"Immediately exits the `Sub` procedure in which it appears."},{"content":"Execution continues with the statement following the statement that called the <ph id=\"ph1\">`Sub`</ph> procedure.","pos":[2917,3012],"source":" Execution continues with the statement following the statement that called the `Sub` procedure."},{"content":"<ph id=\"ph1\">`Exit Sub`</ph> can be used only inside a <ph id=\"ph2\">`Sub`</ph> procedure.","pos":[3013,3066],"source":"`Exit Sub` can be used only inside a `Sub` procedure."},{"pos":[3073,3160],"content":"In a <ph id=\"ph1\">`Sub`</ph> procedure, the <ph id=\"ph2\">`Exit Sub`</ph> statement is equivalent to the <ph id=\"ph3\">`Return`</ph> statement.","source":"In a `Sub` procedure, the `Exit Sub` statement is equivalent to the `Return` statement."},{"content":"Immediately exits the <ph id=\"ph1\">`Try`</ph> or <ph id=\"ph2\">`Catch`</ph> block in which it appears.","pos":[3181,3246],"source":"Immediately exits the `Try` or `Catch` block in which it appears."},{"content":"Execution continues with the <ph id=\"ph1\">`Finally`</ph> block if there is one, or with the statement following the <ph id=\"ph2\">`End Try`</ph> statement otherwise.","pos":[3247,3375],"source":" Execution continues with the `Finally` block if there is one, or with the statement following the `End Try` statement otherwise."},{"content":"<ph id=\"ph1\">`Exit Try`</ph> can be used only inside a <ph id=\"ph2\">`Try`</ph> or <ph id=\"ph3\">`Catch`</ph> block, and not inside a <ph id=\"ph4\">`Finally`</ph> block.","pos":[3376,3470],"source":"`Exit Try` can be used only inside a `Try` or `Catch` block, and not inside a `Finally` block."},{"content":"Immediately exits the <ph id=\"ph1\">`While`</ph> loop in which it appears.","pos":[3493,3548],"source":"Immediately exits the `While` loop in which it appears."},{"content":"Execution continues with the statement following the <ph id=\"ph1\">`End While`</ph> statement.","pos":[3549,3624],"source":" Execution continues with the statement following the `End While` statement."},{"content":"<ph id=\"ph1\">`Exit While`</ph> can be used only inside a <ph id=\"ph2\">`While`</ph> loop.","pos":[3625,3677],"source":"`Exit While` can be used only inside a `While` loop."},{"content":"When used within nested <ph id=\"ph1\">`While`</ph> loops, <ph id=\"ph2\">`Exit While`</ph> transfers control to the loop that is one nested level above the loop where <ph id=\"ph3\">`Exit While`</ph> occurs.","pos":[3678,3826],"source":" When used within nested `While` loops, `Exit While` transfers control to the loop that is one nested level above the loop where `Exit While` occurs."},{"pos":[3835,3842],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Do not confuse <ph id=\"ph1\">`Exit`</ph> statements with <ph id=\"ph2\">`End`</ph> statements.","pos":[3846,3901],"source":"Do not confuse `Exit` statements with `End` statements."},{"content":"<ph id=\"ph1\">`Exit`</ph> does not define the end of a statement.","pos":[3902,3948],"source":"`Exit` does not define the end of a statement."},{"pos":[3957,3964],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, the loop condition stops the loop when the <ph id=\"ph1\">`index`</ph> variable is greater than 100.","pos":[3968,4074],"source":"In the following example, the loop condition stops the loop when the `index` variable is greater than 100."},{"content":"The <ph id=\"ph1\">`If`</ph> statement in the loop, however, causes the <ph id=\"ph2\">`Exit Do`</ph> statement to stop the loop when the index variable is greater than 10.","pos":[4075,4207],"source":" The `If` statement in the loop, however, causes the `Exit Do` statement to stop the loop when the index variable is greater than 10."},{"pos":[4345,4352],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4356,4496],"content":"The following example assigns the return value to the function name <ph id=\"ph1\">`myFunction`</ph>, and then uses <ph id=\"ph2\">`Exit Function`</ph> to return from the function.","source":"The following example assigns the return value to the function name `myFunction`, and then uses `Exit Function` to return from the function."},{"pos":[4631,4638],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4642,4814],"content":"The following example uses the <bpt id=\"p1\">[</bpt>Return Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/return-statement.md)</ept> to assign the return value and exit the function.","source":"The following example uses the [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md) to assign the return value and exit the function."},{"pos":[4949,4957],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4961,5056],"content":"<bpt id=\"p1\">[</bpt>Continue Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>","source":"[Continue Statement](../../../visual-basic/language-reference/statements/continue-statement.md)"},{"pos":[5059,5154],"content":"<bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>","source":"[Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)"},{"pos":[5157,5242],"content":"<bpt id=\"p1\">[</bpt>End Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/end-statement.md)</ept>","source":"[End Statement](../../../visual-basic/language-reference/statements/end-statement.md)"},{"pos":[5245,5352],"content":"<bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>","source":"[For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md)"},{"pos":[5355,5452],"content":"<bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept>","source":"[For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)"},{"pos":[5455,5550],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[5553,5644],"content":"<bpt id=\"p1\">[</bpt>Return Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/return-statement.md)</ept>","source":"[Return Statement](../../../visual-basic/language-reference/statements/return-statement.md)"},{"pos":[5647,5734],"content":"<bpt id=\"p1\">[</bpt>Stop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/stop-statement.md)</ept>","source":"[Stop Statement](../../../visual-basic/language-reference/statements/stop-statement.md)"},{"pos":[5737,5822],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[5825,5942],"content":"<bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>","source":"[Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)"}]}