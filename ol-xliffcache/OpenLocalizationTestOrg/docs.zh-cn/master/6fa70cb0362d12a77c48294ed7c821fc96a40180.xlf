<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fa70cb0362d12a77c48294ed7c821fc96a40180</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\garbage-collection\weak-references.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54542abaac157484532eb00dcac95e7482ca8302</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f6129bd926a22f0cda04d2a1418863271be6a61</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Weak References | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Weak References</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The garbage collector cannot collect an object in use by an application while the application's code can reach that object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The application is said to have a strong reference to the object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A weak reference permits the garbage collector to collect the object while still allowing the application to access the object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A weak reference is valid only during the indeterminate amount of time until the object is collected when no strong references exist.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you use a weak reference, the application can still obtain a strong reference to the object, which prevents it from being collected.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, there is always the risk that the garbage collector will get to the object first before a strong reference is reestablished.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Weak references are useful for objects that use a lot of memory, but can be recreated easily if they are reclaimed by garbage collection.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Suppose a tree view in a Windows Forms application displays a complex hierarchical choice of options to the user.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the underlying data is large, keeping the tree in memory is inefficient when the user is involved with something else in the application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When the user switches away to another part of the application, you can use the <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> class to create a weak reference to the tree and destroy all strong references.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When the user switches back to the tree, the application attempts to obtain a strong reference to the tree and, if successful, avoids reconstructing the tree.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To establish a weak reference with an object, you create a <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> using the instance of the object to be tracked.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You then set the <ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph> property to that object and set the original reference to the object to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> in the class library.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Short and Long Weak References</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can create a short weak reference or a long weak reference:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Short</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The target of a short weak reference becomes <ph id="ph1">`null`</ph> when the object is reclaimed by garbage collection.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The weak reference is itself a managed object, and is subject to garbage collection just like any other managed object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A short weak reference is the default constructor for <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Long</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A long weak reference is retained after the object's <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> method has been called.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This allows the object to be recreated, but the state of the object remains unpredictable.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To use a long reference, specify <ph id="ph1">`true`</ph> in the <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the object's type does not have a <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> method, the short weak reference functionality applies and the weak reference is valid only until the target is collected, which can occur anytime after the finalizer is run.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To establish a strong reference and use the object again, cast the <ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> to the type of the object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph> property returns <ph id="ph2">`null`</ph>, the object was collected; otherwise, you can continue to use the object because the application has regained a strong reference to it.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Guidelines for Using Weak References</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use long weak references only when necessary as the state of the object is unpredictable after finalization.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Avoid using weak references to small objects because the pointer itself may be as large or larger.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Avoid using weak references as an automatic solution to memory management problems.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Instead, develop an effective caching policy for handling your application's objects.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](../../../docs/standard/garbage-collection/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>