{"content":"---\ntitle: \"&lt;TypeInstantiation&gt; Element (.NET Native) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: a5eada64-075b-4162-9655-ded84e4681f2\ncaps.latest.revision: 21\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# &lt;TypeInstantiation&gt; Element (.NET Native)\nApplies runtime reflection policy to a constructed generic type.  \n  \n## Syntax  \n  \n```xml  \n  \n<TypeInstantiation Name=\"type_name\"  \n                   Arguments=\"type_arguments\"  \n                   Activate=\"policy_type\"  \n                   Browse=\"policy_type\"  \n                   Dynamic=\"policy_type\"  \n                   Serialize=\"policy_type\"  \n                   DataContractSerializer=\"policy_setting\"  \n                   DataContractJsonSerializer=\"policy_setting\"  \n                   XmlSerializer=\"policy_setting\"  \n                   MarshalObject=\"policy_setting\"  \n                   MarshalDelegate=\"policy_setting\"  \n                   MarshalStructure=\"policy_setting\" />  \n  \n```  \n  \n## Attributes and Elements  \n The following sections describe attributes, child elements, and parent elements.  \n  \n### Attributes  \n  \n|Attribute|Attribute type|Description|  \n|---------------|--------------------|-----------------|  \n|`Name`|General|Required attribute. Specifies the type name.|  \n|`Arguments`|General|Required attribute. Specifies the generic type arguments. If multiple arguments are present, they are separated by commas.|  \n|`Activate`|Reflection|Optional attribute. Controls runtime access to constructors to enable activation of instances.|  \n|`Browse`|Reflection|Optional attribute. Controls querying for information about program elements, but does not enable any runtime access.|  \n|`Dynamic`|Reflection|Optional attribute. Controls runtime access to all type members, including constructors, methods, fields, properties, and events, to enable dynamic programming.|  \n|`Serialize`|Serialization|Optional attribute. Controls runtime access to constructors, fields, and properties, to enable type instances to be serialized and deserialized by libraries such as the Newtonsoft JSON serializer.|  \n|`DataContractSerializer`|Serialization|Optional attribute. Controls policy for serialization that uses the <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=fullName> class.|  \n|`DataContractJsonSerializer`|Serialization|Optional attribute. Controls policy for JSON serialization that uses the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer?displayProperty=fullName> class.|  \n|`XmlSerializer`|Serialization|Optional attribute. Controls policy for XML serialization that uses the <xref:System.Xml.Serialization.XmlSerializer?displayProperty=fullName> class.|  \n|`MarshalObject`|Interop|Optional attribute. Controls policy for marshaling reference types to Windows Runtime and COM.|  \n|`MarshalDelegate`|Interop|Optional attribute. Controls policy for marshaling delegate types as function pointers to native code.|  \n|`MarshalStructure`|Interop|Optional attribute. Controls policy for marshaling structures to native code.|  \n  \n## Name attribute  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|*type_name*|The type name. If this `<TypeInstantiation>` element is the child of a [\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md) element, a [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md) element, or another `<TypeInstantiation>` element, *type_name* can specify the name of the type without its namespace. Otherwise, *type_name* must include the fully qualified type name. The type name isn't decorated. For example, for a <xref:System.Collections.Generic.List%601?displayProperty=fullName> object, the `<TypeInstantiation>` element might appear as follows:<br /><br /> `\\<TypeInstantiation Name=System.Collections.Generic.List Dynamic=\"Required Public\" />`|  \n  \n## Arguments attribute  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|*type_argument*|Specifies the generic type arguments. If multiple arguments are present, they are separated by commas. Each argument must consist of the fully qualified type name.|  \n  \n## All other attributes  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|*policy_setting*|The setting to apply to this policy type for the constructed generic type. Possible values are `All`, `Auto`, `Excluded`, `Public`, `PublicAndInternal`, `Required Public`, `Required PublicAndInternal`, and `Required All`. For more information, see [Runtime Directive Policy Settings](../../../docs/framework/net-native/runtime-directive-policy-settings.md).|  \n  \n### Child Elements  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|[\\<Event>](../../../docs/framework/net-native/event-element-net-native.md)|Applies reflection policy to an event belonging to this type.|  \n|[\\<Field>](../../../docs/framework/net-native/field-element-net-native.md)|Applies reflection policy to a field belonging to this type.|  \n|[\\<ImpliesType>](../../../docs/framework/net-native/impliestype-element-net-native.md)|Applies policy to a type, if that policy has been applied to the type represented by the containing `<TypeInstantiation>` element.|  \n|[\\<Method>](../../../docs/framework/net-native/method-element-net-native.md)|Applies reflection policy to a method belonging to this type.|  \n|[\\<MethodInstantiation>](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)|Applies reflection policy to a constructed generic method belonging to this type.|  \n|[\\<Property>](../../../docs/framework/net-native/property-element-net-native.md)|Applies reflection policy to a property belonging to this type.|  \n|[\\<Type>](../../../docs/framework/net-native/type-element-net-native.md)|Applies reflection policy to a nested type.|  \n|`<TypeInstantiation>`|Applies reflection policy to a nested constructed generic type.|  \n  \n### Parent Elements  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|[\\<Application>](../../../docs/framework/net-native/application-element-net-native.md)|Serves as a container for application-wide types and type members whose metadata is available for reflection at run time.|  \n|[\\<Assembly>](../../../docs/framework/net-native/assembly-element-net-native.md)|Applies reflection policy to all the types in a specified assembly.|  \n|[\\<Library>](../../../docs/framework/net-native/library-element-net-native.md)|Defines the assembly that contains types and type members whose metadata is available for reflection at run time.|  \n|[\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md)|Applies reflection policy to all the types in a namespace.|  \n|[\\<Type>](../../../docs/framework/net-native/type-element-net-native.md)|Applies reflection policy to a type and all its members.|  \n|`<TypeInstantiation>`|Applies reflection policy to a constructed generic type and all its members.|  \n  \n## Remarks  \n The reflection, serialization, and interop attributes are all optional. However, at least one must be present.  \n  \n If a `<TypeInstantiation>` element is the child of an [\\<Assembly>](../../../docs/framework/net-native/assembly-element-net-native.md), [\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md), or [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md), element, it overrides the policy settings defined by the parent element. If a [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md) element defines a corresponding generic type definition, the `<TypeInstantiation>` element overrides runtime reflection policy only for instantiations of the specified constructed generic type.  \n  \n## Example  \n The following example uses reflection to retrieve the generic type definition from a constructed <xref:System.Collections.Generic.Dictionary%602> object. It also uses reflection to display information about <xref:System.Type> objects that represent constructed generic types and generic type definitions. The variable `b` in the example is a [TextBlock](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx) control.  \n  \n [!code-csharp[ProjectN_Reflection#2](../../../samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/cs/makegenerictype1.cs#2)]  \n  \n After compilation with the [!INCLUDE[net_native](../../../includes/net-native-md.md)] tool chain, the example throws a [MissingMetadataException](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md) exception on the line that calls the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=fullName> method. You can eliminate the exception and provide the necessary metadata by adding the following `<TypeInstantiation>` element to the runtime directives file:  \n  \n```xml  \n  \n<Directives xmlns=\"http://schemas.microsoft.com/netfx/2013/01/metadata\">  \n  <Application>  \n    <Assembly Name=\"*Application*\" Dynamic=\"Required All\" />  \n     <TypeInstantiation Name=\"System.Collections.Generic.Dictionary\"  \n                        Arguments=\"System.String,GenericType.Example\"  \n                        Dynamic=\"Required Public\" />  \n  </Application>  \n</Directives>  \n  \n```  \n  \n## See Also  \n [Runtime Directives (rd.xml) Configuration File Reference](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)   \n [Runtime Directive Elements](../../../docs/framework/net-native/runtime-directive-elements.md)   \n [Runtime Directive Policy Settings](../../../docs/framework/net-native/runtime-directive-policy-settings.md)","nodes":[{"pos":[4,373],"embed":true,"restype":"x-metadata","content":"title: \"&lt;TypeInstantiation&gt; Element (.NET Native) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: a5eada64-075b-4162-9655-ded84e4681f2\ncaps.latest.revision: 21\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"&lt;TypeInstantiation&gt; Element (.NET Native) | Microsoft Docs","nodes":[{"pos":[0,64],"content":"&lt;TypeInstantiation&gt; Element (.NET Native) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>TypeInstantiation<ph id=\"ph2\">&amp;gt;</ph> Element (.NET Native) | Microsoft Docs","pos":[0,64],"source":"&lt;TypeInstantiation&gt; Element (.NET Native) | Microsoft Docs"}]}],"path":["title"]}],"yml":true},{"pos":[380,427],"content":"&lt;TypeInstantiation&gt; Element (.NET Native)","linkify":"&lt;TypeInstantiation&gt; Element (.NET Native)","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph>TypeInstantiation<ph id=\"ph2\">&amp;gt;</ph> Element (.NET Native)","pos":[0,47],"source":"&lt;TypeInstantiation&gt; Element (.NET Native)"}]},{"content":"Applies runtime reflection policy to a constructed generic type.","pos":[428,492]},{"pos":[501,507],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1142,1165],"content":"Attributes and Elements","linkify":"Attributes and Elements","nodes":[{"content":"Attributes and Elements","pos":[0,23]}]},{"content":"The following sections describe attributes, child elements, and parent elements.","pos":[1169,1249]},{"pos":[1259,1269],"content":"Attributes","linkify":"Attributes","nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"Attribute","pos":[1276,1285]},{"content":"Attribute type","pos":[1286,1300]},{"content":"Description","pos":[1301,1312]},{"content":"General","pos":[1383,1390]},{"content":"Required attribute.","pos":[1391,1410]},{"content":"Specifies the type name.","pos":[1411,1435]},{"content":"General","pos":[1452,1459]},{"content":"Required attribute.","pos":[1460,1479]},{"content":"Specifies the generic type arguments.","pos":[1480,1517]},{"content":"If multiple arguments are present, they are separated by commas.","pos":[1518,1582]},{"content":"Reflection","pos":[1598,1608]},{"content":"Optional attribute.","pos":[1609,1628]},{"content":"Controls runtime access to constructors to enable activation of instances.","pos":[1629,1703]},{"content":"Reflection","pos":[1717,1727]},{"content":"Optional attribute.","pos":[1728,1747]},{"content":"Controls querying for information about program elements, but does not enable any runtime access.","pos":[1748,1845]},{"content":"Reflection","pos":[1860,1870]},{"content":"Optional attribute.","pos":[1871,1890]},{"content":"Controls runtime access to all type members, including constructors, methods, fields, properties, and events, to enable dynamic programming.","pos":[1891,2031]},{"content":"Serialization","pos":[2048,2061]},{"content":"Optional attribute.","pos":[2062,2081]},{"content":"Controls runtime access to constructors, fields, and properties, to enable type instances to be serialized and deserialized by libraries such as the Newtonsoft JSON serializer.","pos":[2082,2258]},{"content":"Serialization","pos":[2288,2301]},{"content":"Optional attribute.","pos":[2302,2321]},{"content":"Controls policy for serialization that uses the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=fullName&gt;</ph> class.","pos":[2322,2460],"source":" Controls policy for serialization that uses the <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=fullName> class."},{"content":"Serialization","pos":[2494,2507]},{"content":"Optional attribute.","pos":[2508,2527]},{"content":"Controls policy for JSON serialization that uses the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer?displayProperty=fullName&gt;</ph> class.","pos":[2528,2680],"source":" Controls policy for JSON serialization that uses the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer?displayProperty=fullName> class."},{"content":"Serialization","pos":[2701,2714]},{"content":"Optional attribute.","pos":[2715,2734]},{"content":"Controls policy for XML serialization that uses the <ph id=\"ph1\">&lt;xref:System.Xml.Serialization.XmlSerializer?displayProperty=fullName&gt;</ph> class.","pos":[2735,2864],"source":" Controls policy for XML serialization that uses the <xref:System.Xml.Serialization.XmlSerializer?displayProperty=fullName> class."},{"content":"Interop","pos":[2885,2892]},{"content":"Optional attribute.","pos":[2893,2912]},{"content":"Controls policy for marshaling reference types to Windows Runtime and COM.","pos":[2913,2987]},{"content":"Interop","pos":[3010,3017]},{"content":"Optional attribute.","pos":[3018,3037]},{"content":"Controls policy for marshaling delegate types as function pointers to native code.","pos":[3038,3120]},{"content":"Interop","pos":[3144,3151]},{"content":"Optional attribute.","pos":[3152,3171]},{"content":"Controls policy for marshaling structures to native code.","pos":[3172,3229]},{"pos":[3239,3253],"content":"Name attribute","linkify":"Name attribute","nodes":[{"content":"Name attribute","pos":[0,14]}]},{"content":"Value","pos":[3260,3265]},{"content":"Description","pos":[3266,3277]},{"pos":[3316,3327],"content":"<bpt id=\"p1\">*</bpt>type_name<ept id=\"p1\">*</ept>","source":"*type_name*"},{"content":"The type name.","pos":[3328,3342]},{"content":"If this <ph id=\"ph1\">`&lt;TypeInstantiation&gt;`</ph> element is the child of a <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>Namespace&gt;<ept id=\"p1\">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept> element, a <bpt id=\"p2\">[</bpt><ph id=\"ph3\">\\&lt;</ph>Type&gt;<ept id=\"p2\">](../../../docs/framework/net-native/type-element-net-native.md)</ept> element, or another <ph id=\"ph4\">`&lt;TypeInstantiation&gt;`</ph> element, <bpt id=\"p3\">*</bpt>type_name<ept id=\"p3\">*</ept> can specify the name of the type without its namespace.","pos":[3343,3684],"source":" If this `<TypeInstantiation>` element is the child of a [\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md) element, a [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md) element, or another `<TypeInstantiation>` element, *type_name* can specify the name of the type without its namespace."},{"content":"Otherwise, <bpt id=\"p1\">*</bpt>type_name<ept id=\"p1\">*</ept> must include the fully qualified type name.","pos":[3685,3751],"source":" Otherwise, *type_name* must include the fully qualified type name."},{"content":"The type name isn't decorated.","pos":[3752,3782]},{"content":"For example, for a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601?displayProperty=fullName&gt;</ph> object, the <ph id=\"ph2\">`&lt;TypeInstantiation&gt;`</ph> element might appear as follows:","pos":[3783,3936],"source":" For example, for a <xref:System.Collections.Generic.List%601?displayProperty=fullName> object, the `<TypeInstantiation>` element might appear as follows:"},{"pos":[4046,4065],"content":"Arguments attribute","linkify":"Arguments attribute","nodes":[{"content":"Arguments attribute","pos":[0,19]}]},{"content":"Value","pos":[4072,4077]},{"content":"Description","pos":[4078,4089]},{"pos":[4128,4143],"content":"<bpt id=\"p1\">*</bpt>type_argument<ept id=\"p1\">*</ept>","source":"*type_argument*"},{"content":"Specifies the generic type arguments.","pos":[4144,4181]},{"content":"If multiple arguments are present, they are separated by commas.","pos":[4182,4246]},{"content":"Each argument must consist of the fully qualified type name.","pos":[4247,4307]},{"pos":[4317,4337],"content":"All other attributes","linkify":"All other attributes","nodes":[{"content":"All other attributes","pos":[0,20]}]},{"content":"Value","pos":[4344,4349]},{"content":"Description","pos":[4350,4361]},{"pos":[4400,4416],"content":"<bpt id=\"p1\">*</bpt>policy_setting<ept id=\"p1\">*</ept>","source":"*policy_setting*"},{"content":"The setting to apply to this policy type for the constructed generic type.","pos":[4417,4491]},{"content":"Possible values are <ph id=\"ph1\">`All`</ph>, <ph id=\"ph2\">`Auto`</ph>, <ph id=\"ph3\">`Excluded`</ph>, <ph id=\"ph4\">`Public`</ph>, <ph id=\"ph5\">`PublicAndInternal`</ph>, <ph id=\"ph6\">`Required Public`</ph>, <ph id=\"ph7\">`Required PublicAndInternal`</ph>, and <ph id=\"ph8\">`Required All`</ph>.","pos":[4492,4638],"source":" Possible values are `All`, `Auto`, `Excluded`, `Public`, `PublicAndInternal`, `Required Public`, `Required PublicAndInternal`, and `Required All`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Runtime Directive Policy Settings<ept id=\"p1\">](../../../docs/framework/net-native/runtime-directive-policy-settings.md)</ept>.","pos":[4639,4774],"source":" For more information, see [Runtime Directive Policy Settings](../../../docs/framework/net-native/runtime-directive-policy-settings.md)."},{"pos":[4785,4799],"content":"Child Elements","linkify":"Child Elements","nodes":[{"content":"Child Elements","pos":[0,14]}]},{"content":"Element","pos":[4806,4813]},{"content":"Description","pos":[4814,4825]},{"pos":[4866,4940],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Event&gt;<ept id=\"p1\">](../../../docs/framework/net-native/event-element-net-native.md)</ept>","source":"[\\<Event>](../../../docs/framework/net-native/event-element-net-native.md)"},{"content":"Applies reflection policy to an event belonging to this type.","pos":[4941,5002]},{"pos":[5007,5081],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Field&gt;<ept id=\"p1\">](../../../docs/framework/net-native/field-element-net-native.md)</ept>","source":"[\\<Field>](../../../docs/framework/net-native/field-element-net-native.md)"},{"content":"Applies reflection policy to a field belonging to this type.","pos":[5082,5142]},{"pos":[5147,5233],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>ImpliesType&gt;<ept id=\"p1\">](../../../docs/framework/net-native/impliestype-element-net-native.md)</ept>","source":"[\\<ImpliesType>](../../../docs/framework/net-native/impliestype-element-net-native.md)"},{"pos":[5234,5364],"content":"Applies policy to a type, if that policy has been applied to the type represented by the containing <ph id=\"ph1\">`&lt;TypeInstantiation&gt;`</ph> element.","source":"Applies policy to a type, if that policy has been applied to the type represented by the containing `<TypeInstantiation>` element."},{"pos":[5369,5445],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Method&gt;<ept id=\"p1\">](../../../docs/framework/net-native/method-element-net-native.md)</ept>","source":"[\\<Method>](../../../docs/framework/net-native/method-element-net-native.md)"},{"content":"Applies reflection policy to a method belonging to this type.","pos":[5446,5507]},{"pos":[5512,5614],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>MethodInstantiation&gt;<ept id=\"p1\">](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)</ept>","source":"[\\<MethodInstantiation>](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)"},{"content":"Applies reflection policy to a constructed generic method belonging to this type.","pos":[5615,5696]},{"pos":[5701,5781],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Property&gt;<ept id=\"p1\">](../../../docs/framework/net-native/property-element-net-native.md)</ept>","source":"[\\<Property>](../../../docs/framework/net-native/property-element-net-native.md)"},{"content":"Applies reflection policy to a property belonging to this type.","pos":[5782,5845]},{"pos":[5850,5922],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Type&gt;<ept id=\"p1\">](../../../docs/framework/net-native/type-element-net-native.md)</ept>","source":"[\\<Type>](../../../docs/framework/net-native/type-element-net-native.md)"},{"content":"Applies reflection policy to a nested type.","pos":[5923,5966]},{"content":"Applies reflection policy to a nested constructed generic type.","pos":[5993,6056]},{"pos":[6067,6082],"content":"Parent Elements","linkify":"Parent Elements","nodes":[{"content":"Parent Elements","pos":[0,15]}]},{"content":"Element","pos":[6089,6096]},{"content":"Description","pos":[6097,6108]},{"pos":[6149,6235],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Application&gt;<ept id=\"p1\">](../../../docs/framework/net-native/application-element-net-native.md)</ept>","source":"[\\<Application>](../../../docs/framework/net-native/application-element-net-native.md)"},{"content":"Serves as a container for application-wide types and type members whose metadata is available for reflection at run time.","pos":[6236,6357]},{"pos":[6362,6442],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Assembly&gt;<ept id=\"p1\">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept>","source":"[\\<Assembly>](../../../docs/framework/net-native/assembly-element-net-native.md)"},{"content":"Applies reflection policy to all the types in a specified assembly.","pos":[6443,6510]},{"pos":[6515,6593],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Library&gt;<ept id=\"p1\">](../../../docs/framework/net-native/library-element-net-native.md)</ept>","source":"[\\<Library>](../../../docs/framework/net-native/library-element-net-native.md)"},{"content":"Defines the assembly that contains types and type members whose metadata is available for reflection at run time.","pos":[6594,6707]},{"pos":[6712,6794],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Namespace&gt;<ept id=\"p1\">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept>","source":"[\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md)"},{"content":"Applies reflection policy to all the types in a namespace.","pos":[6795,6853]},{"pos":[6858,6930],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Type&gt;<ept id=\"p1\">](../../../docs/framework/net-native/type-element-net-native.md)</ept>","source":"[\\<Type>](../../../docs/framework/net-native/type-element-net-native.md)"},{"content":"Applies reflection policy to a type and all its members.","pos":[6931,6987]},{"content":"Applies reflection policy to a constructed generic type and all its members.","pos":[7014,7090]},{"pos":[7100,7107],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The reflection, serialization, and interop attributes are all optional.","pos":[7111,7182]},{"content":"However, at least one must be present.","pos":[7183,7221]},{"content":"If a <ph id=\"ph1\">`&lt;TypeInstantiation&gt;`</ph> element is the child of an <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>Assembly&gt;<ept id=\"p1\">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph3\">\\&lt;</ph>Namespace&gt;<ept id=\"p2\">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept>, or <bpt id=\"p3\">[</bpt><ph id=\"ph4\">\\&lt;</ph>Type&gt;<ept id=\"p3\">](../../../docs/framework/net-native/type-element-net-native.md)</ept>, element, it overrides the policy settings defined by the parent element.","pos":[7228,7597],"source":"If a `<TypeInstantiation>` element is the child of an [\\<Assembly>](../../../docs/framework/net-native/assembly-element-net-native.md), [\\<Namespace>](../../../docs/framework/net-native/namespace-element-net-native.md), or [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md), element, it overrides the policy settings defined by the parent element."},{"content":"If a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>Type&gt;<ept id=\"p1\">](../../../docs/framework/net-native/type-element-net-native.md)</ept> element defines a corresponding generic type definition, the <ph id=\"ph2\">`&lt;TypeInstantiation&gt;`</ph> element overrides runtime reflection policy only for instantiations of the specified constructed generic type.","pos":[7598,7869],"source":" If a [\\<Type>](../../../docs/framework/net-native/type-element-net-native.md) element defines a corresponding generic type definition, the `<TypeInstantiation>` element overrides runtime reflection policy only for instantiations of the specified constructed generic type."},{"pos":[7878,7885],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses reflection to retrieve the generic type definition from a constructed <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> object.","pos":[7889,8042],"source":"The following example uses reflection to retrieve the generic type definition from a constructed <xref:System.Collections.Generic.Dictionary%602> object."},{"content":"It also uses reflection to display information about <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> objects that represent constructed generic types and generic type definitions.","pos":[8043,8193],"source":" It also uses reflection to display information about <xref:System.Type> objects that represent constructed generic types and generic type definitions."},{"content":"The variable <ph id=\"ph1\">`b`</ph> in the example is a <bpt id=\"p1\">[</bpt>TextBlock<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</ept> control.","pos":[8194,8339],"source":" The variable `b` in the example is a [TextBlock](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx) control."},{"content":"After compilation with the <ph id=\"ph1\">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> tool chain, the example throws a <bpt id=\"p1\">[</bpt>MissingMetadataException<ept id=\"p1\">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept> exception on the line that calls the <ph id=\"ph2\">&lt;xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=fullName&gt;</ph> method.","pos":[8485,8828],"source":"After compilation with the [!INCLUDE[net_native](../../../includes/net-native-md.md)] tool chain, the example throws a [MissingMetadataException](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md) exception on the line that calls the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=fullName> method."},{"content":"You can eliminate the exception and provide the necessary metadata by adding the following <ph id=\"ph1\">`&lt;TypeInstantiation&gt;`</ph> element to the runtime directives file:","pos":[8829,8981],"source":" You can eliminate the exception and provide the necessary metadata by adding the following `<TypeInstantiation>` element to the runtime directives file:"},{"pos":[9403,9411],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Runtime Directives (rd.xml) Configuration File Reference<ept id=\"p1\">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept><ph id=\"ph1\"> </ph>","pos":[9415,9568],"source":"[Runtime Directives (rd.xml) Configuration File Reference](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md) "},{"content":"<bpt id=\"p1\">[</bpt>Runtime Directive Elements<ept id=\"p1\">](../../../docs/framework/net-native/runtime-directive-elements.md)</ept><ph id=\"ph1\"> </ph>","pos":[9572,9667],"source":"[Runtime Directive Elements](../../../docs/framework/net-native/runtime-directive-elements.md) "},{"content":"<bpt id=\"p1\">[</bpt>Runtime Directive Policy Settings<ept id=\"p1\">](../../../docs/framework/net-native/runtime-directive-policy-settings.md)</ept>","pos":[9671,9779],"source":"[Runtime Directive Policy Settings](../../../docs/framework/net-native/runtime-directive-policy-settings.md)"}]}