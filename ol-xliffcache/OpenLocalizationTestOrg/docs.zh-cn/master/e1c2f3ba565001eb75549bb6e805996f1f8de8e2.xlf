<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1c2f3ba565001eb75549bb6e805996f1f8de8e2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\invoking-activity-validation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38551313a3adcfdeab4547386c1e3712ececa723</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">605825da860df72450ed2359089c26a35a6b47bb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Invoking Activity Validation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Invoking Activity Validation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Activity validation provides a method to identify and report errors in any activity’s configuration prior to its execution.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Validation occurs when a workflow is modified in the workflow designer and any validation errors or warnings are displayed in the workflow designer.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Validation also occurs at run time when a workflow is invoked and if any validation errors occur, an <ph id="ph1">&lt;xref:System.Activities.InvalidWorkflowException&gt;</ph> is thrown by the default validation logic.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph> provides the <ph id="ph2">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> class that can be used by workflow application and tooling developers to explicitly validate an activity.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic describes how to use <ph id="ph1">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> to perform activity validation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using ActivityValidationServices</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> has two <ph id="ph2">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> overloads that are used to invoke an activity’s validation logic.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first overload takes the root activity to be validated and returns a collection of validation errors and warnings.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the following example, a custom <ph id="ph1">`Add`</ph> activity is used that has two required arguments.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Add`</ph> activity is used inside a <ph id="ph2">&lt;xref:System.Activities.Statements.Sequence&gt;</ph>, but its two required arguments are not bound, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This workflow can be validated by calling <ph id="ph1">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> returns a collection of any validation errors or warnings contained by the activity and any children, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> is called on this sample workflow, two validation errors are returned.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Error: Value for a required activity argument 'Operand2' was not supplied.<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Error: Value for a required activity argument 'Operand1' was not supplied.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If this workflow was invoked, an <ph id="ph1">&lt;xref:System.Activities.InvalidWorkflowException&gt;</ph> would be thrown, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>System.Activities.InvalidWorkflowException:<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The following errors were encountered while processing the workflow tree:<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>'Add': Value for a required activity argument 'Operand2' was not supplied.<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>'Add': Value for a required activity argument 'Operand1' was not supplied.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For this example workflow to be valid, the two required arguments of the <ph id="ph1">`Add`</ph> activity must be bound.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the following example, the two required arguments are bound to workflow variables along with the result value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this example the <ph id="ph1">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> argument is bound along with the two required arguments.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> argument is not required to be bound and does not cause a validation error if it is not.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the workflow author to bind <ph id="ph1">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> if its value is used elsewhere in the workflow.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Validating Required Arguments on the Root Activity</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the root activity of a workflow has arguments, these are not bound until the workflow is invoked and parameters are passed to the workflow.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following workflow passes validation, but an exception is thrown if the workflow is invoked without passing in the required arguments, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>System.ArgumentException: The root activity's argument settings are incorrect.<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Either fix the workflow definition or supply input values to fix these errors:<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>'Add': Value for a required activity argument 'Operand2' was not supplied.<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>'Add': Value for a required activity argument 'Operand1' was not supplied.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>After the correct arguments are passed, the workflow completes successfully, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example, the root activity was declared as <ph id="ph1">`Add`</ph> instead of <ph id="ph2">`Activity`</ph> as in the previous example.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This allows the <ph id="ph1">`WorkflowInvoker.Invoke`</ph> method to return a single integer that represents the results of the <ph id="ph2">`Add`</ph> activity instead of a dictionary of <ph id="ph3">`out`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`wf`</ph> could also have been declared as <ph id="ph2">`Activity&lt;int&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When validating root arguments, it is the responsibility of the host application to ensure that all required arguments are passed when the workflow is invoked.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Invoking Imperative Code-Based Validation</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Imperative code-based validation provides a simple way for an activity to provide validation about itself, and is available for activities that derive from <ph id="ph1">&lt;xref:System.Activities.CodeActivity&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>, and <ph id="ph3">&lt;xref:System.Activities.NativeActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Validation code that determines any validation errors or warnings is added to the activity.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When validation is invoked on the activity, these warnings or errors are contained in the collection returned by the call to <ph id="ph1">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the following example, taken from the <bpt id="p1">[</bpt>Basic Validation<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/basic-validation.md)</ept> sample, a <ph id="ph1">`CreateProduct`</ph> activity is defined.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Cost`</ph> is greater than the <ph id="ph2">`Price`</ph>, a validation error is added to the metadata in the <ph id="ph3">&lt;xref:System.Activities.CodeActivity.CacheMetadata%2A&gt;</ph> override.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this example, a workflow is configured using the <ph id="ph1">`CreateProduct`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this workflow, the <ph id="ph1">`Cost`</ph> is greater than the <ph id="ph2">`Price`</ph>, and the required <ph id="ph3">`Description`</ph> argument is not set.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When validation is invoked, the following errors are returned.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Error: The Cost must be less than or equal to the Price.<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Error: Value for a required activity argument 'Description' was not supplied.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Custom activity authors can provide validation logic in an activity's <ph id="ph1">&lt;xref:System.Activities.CodeActivity.CacheMetadata%2A&gt;</ph> override.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Any exceptions that are thrown from <ph id="ph1">&lt;xref:System.Activities.CodeActivity.CacheMetadata%2A&gt;</ph> are not treated as validation errors.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>These exceptions will escape from the call to <ph id="ph1">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> and must be handled by the caller.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Using ValidationSettings</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>By default, all activities in the activity tree are evaluated when validation is invoked by <ph id="ph1">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Validation.ValidationSettings&gt;</ph> allows the validation to be customized in several different ways by configuring its three properties.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Validation.ValidationSettings.SingleLevel%2A&gt;</ph> specifies whether the validator should walk the entire activity tree or only apply validation logic to the supplied activity.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The default for this value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A&gt;</ph> specifies additional constraint mapping from a type to a list of constraints.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For the base type of each activity in the activity tree being validated there is a lookup into <ph id="ph1">&lt;xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If a matching constraint list is found, all constraints in the list are evaluated for the activity.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints%2A&gt;</ph> specifies whether the validator should evaluate all constraints or only those specified in <ph id="ph2">&lt;xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Validation.ValidationSettings.AdditionalConstraints%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.Validation.ValidationSettings.OnlyUseAdditionalConstraints%2A&gt;</ph> are useful for workflow host authors to add additional validation for workflows, such as policy constraints for tools such as FxCop.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> constraints, see <bpt id="p1">[</bpt>Declarative Constraints<ept id="p1">](../../../docs/framework/windows-workflow-foundation/declarative-constraints.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">&lt;xref:System.Activities.Validation.ValidationSettings&gt;</ph>, configure the desired properties, and then pass it in the call to <ph id="ph2">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this example, a workflow that consists of a <ph id="ph1">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> with a custom <ph id="ph2">`Add`</ph> activity is validated.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Add`</ph> activity has two required arguments.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Add`</ph> activity is used in a <ph id="ph2">&lt;xref:System.Activities.Statements.Sequence&gt;</ph>, but its two required arguments are not bound.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For the following example, validation is performed with <ph id="ph1">&lt;xref:System.Activities.Validation.ValidationSettings.SingleLevel%2A&gt;</ph> set to <ph id="ph2">`true`</ph>, so only the root <ph id="ph3">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity is validated.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This code displays the following output:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>No warnings or errors<ept id="p1">**</ept> Even though the <ph id="ph1">`Add`</ph> activity has required arguments that are not bound, validation is successful because only the root activity is evaluated.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This type of validation is useful for validating only specific elements in an activity tree, such as validation of a property change of a single activity in a designer.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Note that if this workflow is invoked, the full validation configured in the workflow is evaluated and an <ph id="ph1">&lt;xref:System.Activities.InvalidWorkflowException&gt;</ph> would be thrown.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Validation.ActivityValidationServices&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.Validation.ValidationSettings&gt;</ph> configure only validation explicitly invoked by the host, and not the validation that occurs when a workflow is invoked.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>