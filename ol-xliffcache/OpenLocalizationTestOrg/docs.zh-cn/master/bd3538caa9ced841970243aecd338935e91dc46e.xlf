<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd3538caa9ced841970243aecd338935e91dc46e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\binding-a-custom-activity-property-to-a-designer-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1431475c1d712a6274fc67bbe45703dde337c616</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79a95495ee2c16bf175b6b8dfe15e8491a3efb6c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Binding a custom activity property to a designer control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Binding a custom activity property to a designer control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Binding a text box designer control to an activity argument is fairly straightforward; binding a complex designer control (such as a combo box) to an activity argument may present challenges, however.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic discusses how to bind an activity argument to a combo box control on a custom activity designer.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creating the combo box item converter</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Create a new empty solution in Visual Studio called CustomProperty.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Create a new class called ComboBoxItemConverter.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Add a reference to System.Windows.Data, and have the class derive from <ph id="ph1">&lt;xref:System.Windows.Data.IValueConverter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Have Visual Studio implement the interface to generate stubs for <ph id="ph1">`Convert`</ph> and <ph id="ph2">`ConvertBack`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`Convert`</ph> method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This code converts the activity's <ph id="ph1">&lt;xref:System.Activities.InArgument%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.String&gt;</ph> to the value to be placed in the designer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The expression in the above code snippet can also be created using <ph id="ph1">&lt;xref:Microsoft.CSharp.Activities.CSharpValue%601&gt;</ph> instead of <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`ConvertBack`</ph> method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This code converts the incoming combo box item back to an <ph id="ph1">&lt;xref:System.Activities.InArgument%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The expression in the above code snippet can also be created using <ph id="ph1">&lt;xref:Microsoft.CSharp.Activities.CSharpValue%601&gt;</ph> instead of <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Adding the ComboBoxItemConverter to the custom designer of an activity</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Add a new item to the project.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the New Item dialog, select the Workflow node and select Activity Designer as the type of the new item.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name the item CustomPropertyDesigner.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add a Combo Box to the new designer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the Items property, add a couple of items to the combo box, with Content values of "Item1" and 'Item2".</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Modify the XAML of the combo box to add the new item converter as the item converter to be used for the combo box.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The converter is added as a resource in the ActivityDesigner.Resources segment, and specifies the converter in the Converter attribute for the <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that the namespace of the project is specified in the namespaces attributes for the activity designer; if the designer is to be used in a different project, this namespace will need to be changed.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Create a new item of type <ph id="ph1">&lt;xref:System.Activities.CodeActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default code created by the IDE for the activity will be sufficient for this example.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add the following attribute to the class definition:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This line associates the new designer with the new class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The new activity should now be associated with the designer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To test the new activity, add it to a workflow, and set the combo box to the two values.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The properties window should update to reflect the combo box value.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>