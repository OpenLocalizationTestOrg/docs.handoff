<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="overview-of-synchronization-primitives.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24df4140e515483adb94fa542a7063bd2ae2120b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\overview-of-synchronization-primitives.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d2f3630a9ca9c5d0a280f4e21e6b1f7a9d927f0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">636c32228a2bc5f9a0fa2ffb0736a72271780ba9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Overview of synchronization primitives</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about .NET thread synchronization primitives used to synchronize access to a shared resource or control thread interaction</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Overview of synchronization primitives</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET provides a range of types that you can use to synchronize access to a shared resource or coordinate thread interaction.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use the same synchronization primitive instance to protect every access to a shared resource.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Multiple threads can access a resource concurrently if you use different synchronization primitive instances to protect access to a resource or some parts of code access a resource directly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>WaitHandle class and lightweight synchronization types</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Multiple .NET synchronization primitives derive from the <ph id="ph1">&lt;xref:System.Threading.WaitHandle?displayProperty=nameWithType&gt;</ph> class, which encapsulates a native operating system synchronization handle and uses a signaling mechanism for thread interaction.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Those classes include:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Mutex?displayProperty=nameWithType&gt;</ph>, which grants exclusive access to a shared resource.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The state of a mutex is signaled if no thread owns it.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Semaphore?displayProperty=nameWithType&gt;</ph>, which limits the number of threads that can access a shared resource or a pool of resources concurrently.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The state of a semaphore is set to signaled when its count is greater than zero, and nonsignaled when its count is zero.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle?displayProperty=nameWithType&gt;</ph>, which represents a thread synchronization event and can be either in a signaled or unsignaled state.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent?displayProperty=nameWithType&gt;</ph>, which derives from <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> and, when signaled, resets automatically to an unsignaled state after releasing a single waiting thread.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEvent?displayProperty=nameWithType&gt;</ph>, which derives from <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> and, when signaled, stays in a signaled state until the <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the .NET Framework, because <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> derives from <ph id="ph2">&lt;xref:System.MarshalByRefObject?displayProperty=nameWithType&gt;</ph>, these types can be used to synchronize the activities of threads across application domain boundaries.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the .NET Framework and .NET Core, some of these types can represent named system synchronization handles, which are visible throughout the operating system and can be used for the inter-process synchronization:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> (.NET Framework and .NET Core),</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> (.NET Framework and .NET Core on Windows),</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> (.NET Framework and .NET Core on Windows).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Lightweight synchronization types don't rely on underlying operating system handles and typically provide better performance.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, they cannot be used for the inter-process synchronization.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use those types for thread synchronization within one application.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Some of those types are alternatives to the types derived from <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> is a lightweight alternative to <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Synchronization of access to a shared resource</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>.NET provides a range of synchronization primitives to control access to a shared resource by multiple threads.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Monitor class</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor?displayProperty=nameWithType&gt;</ph> class grants mutually exclusive access to a shared resource by acquiring or releasing a lock on the object that identifies the resource.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>While a lock is held, the thread that holds the lock can again acquire and release the lock.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Any other thread is blocked from acquiring the lock and the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> method waits until the lock is released.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> method acquires a released lock.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType&gt;</ph> method to specify the amount of time during which a thread attempts to acquire a lock.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class has thread affinity, the thread that acquired a lock must release the lock by calling the <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can coordinate the interaction of threads that acquire a lock on the same object by using the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>lock<ept id="p1">](../../csharp/language-reference/keywords/lock-statement.md)</ept> statement in C# and the <bpt id="p2">[</bpt>SyncLock<ept id="p2">](../../visual-basic/language-reference/statements/synclock-statement.md)</ept> statement in Visual Basic to synchronize access to a shared resource instead of using the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class directly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Those statements are implemented by using the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> methods and a <ph id="ph3">`try…finally`</ph> block to ensure that the acquired lock is always released.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Mutex class</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Mutex?displayProperty=nameWithType&gt;</ph> class, like <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>, grants exclusive access to a shared resource.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Use one of the <bpt id="p1">[</bpt>Mutex.WaitOne<ept id="p1">](&lt;xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType&gt;)</ept> method overloads to request the ownership of a mutex.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Like <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Mutex&gt;</ph> has thread affinity and the thread that acquired a mutex must release it by calling the <ph id="ph3">&lt;xref:System.Threading.Mutex.ReleaseMutex%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Unlike <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>, the <ph id="ph2">&lt;xref:System.Threading.Mutex&gt;</ph> class can be used for inter-process synchronization.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To do that, use a named mutex, which is visible throughout the operating system.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To create a named mutex instance, use a <bpt id="p1">[</bpt>Mutex constructor<ept id="p1">](&lt;xref:System.Threading.Mutex.%23ctor%2A&gt;)</ept> that specifies a name.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You also can call the <ph id="ph1">&lt;xref:System.Threading.Mutex.OpenExisting%2A?displayProperty=nameWithType&gt;</ph> method to open an existing named system mutex.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Mutexes<ept id="p1">](mutexes.md)</ept> article and the <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>SpinLock structure</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SpinLock?displayProperty=nameWithType&gt;</ph> structure, like <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>, grants exclusive access to a shared resource based on the availability of a lock.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> attempts to acquire a lock that is unavailable, it waits in a loop, repeatedly checking until the lock becomes available.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information about the benefits and drawbacks of using spin lock, see the <bpt id="p1">[</bpt>SpinLock<ept id="p1">](spinlock.md)</ept> article and the <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>ReaderWriterLockSlim class</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim?displayProperty=nameWithType&gt;</ph> class grants exclusive access to a shared resource for writing and allows multiple threads to access the resource simultaneously for reading.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You might want to use <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> to synchronize access to a shared data structure that supports thread-safe read operations, but requires exclusive access to perform write operation.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When a thread requests exclusive access (for example, by calling the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A?displayProperty=nameWithType&gt;</ph> method), subsequent reader and writer requests block until all existing readers have exited the lock, and the writer has entered and exited the lock.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Semaphore and SemaphoreSlim classes</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Semaphore?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim?displayProperty=nameWithType&gt;</ph> classes limit the number of threads that can access a shared resource or a pool of resources concurrently.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Additional threads that request the resource wait until any thread releases the semaphore.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Because the semaphore doesn't have thread affinity, a thread can acquire the semaphore and another one can release it.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> is a lightweight alternative to <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> and can be used only for synchronization within a single process boundary.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>On Windows, you can use <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> for the inter-process synchronization.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To do that, create a <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> instance that represents a named system semaphore by using one of the <bpt id="p1">[</bpt>Semaphore constructors<ept id="p1">](&lt;xref:System.Threading.Semaphore.%23ctor%2A&gt;)</ept> that specifies a name or the <ph id="ph2">&lt;xref:System.Threading.Semaphore.OpenExisting%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> doesn't support named system semaphores.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Semaphore and SemaphoreSlim<ept id="p1">](semaphore-and-semaphoreslim.md)</ept> article and the <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Thread interaction, or signaling</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Thread interaction (or thread signaling) means that a thread must wait for notification, or a signal, from one or more threads in order to proceed.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, if thread A calls the <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType&gt;</ph> method of thread B, thread A is blocked until thread B completes.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The synchronization primitives described in the preceding section provide a different mechanism for signaling: by releasing a lock, a thread notifies another thread that it can proceed by acquiring the lock.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This section describes additional signaling constructs provided by .NET.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>EventWaitHandle, AutoResetEvent, ManualResetEvent, and ManualResetEventSlim classes</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle?displayProperty=nameWithType&gt;</ph> class represents a thread synchronization event.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A synchronization event can be either in an unsignaled or signaled state.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When the state of an event is unsignaled, a thread that calls the event's <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A?&gt;</ph> overload is blocked until an event is signaled.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType&gt;</ph> method sets the state of an event to signaled.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The behavior of an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> that has been signaled depends on its reset mode:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph> flag resets automatically after releasing a single waiting thread.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>It's like a turnstile that allows only one thread through each time it's signaled.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent?displayProperty=nameWithType&gt;</ph> class, which derives from <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, represents that behavior.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph> flag remains signaled until its <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It's like a gate that is closed until signaled and then stays open until someone closes it.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent?displayProperty=nameWithType&gt;</ph> class, which derives from <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, represents that behavior.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType&gt;</ph> class is a lightweight alternative to <ph id="ph2">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>On Windows, you can use <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> for the inter-process synchronization.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To do that, create a <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> instance that represents a named system synchronization event by using one of the <bpt id="p1">[</bpt>EventWaitHandle constructors<ept id="p1">](&lt;xref:System.Threading.EventWaitHandle.%23ctor%2A&gt;)</ept> that specifies a name or the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>EventWaitHandle<ept id="p1">](eventwaithandle.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For the API reference, see <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CountdownEvent class</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.CountdownEvent?displayProperty=nameWithType&gt;</ph> class represents an event that becomes set when its count is zero.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>While <ph id="ph1">&lt;xref:System.Threading.CountdownEvent.CurrentCount?displayProperty=nameWithType&gt;</ph> is greater than zero, a thread that calls <ph id="ph2">&lt;xref:System.Threading.CountdownEvent.Wait%2A?displayProperty=nameWithType&gt;</ph> is blocked.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.CountdownEvent.Signal%2A?displayProperty=nameWithType&gt;</ph> to decrement an event's count.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In contrast to <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, which you can use to unblock multiple threads with a signal from one thread, you can use <ph id="ph3">&lt;xref:System.Threading.CountdownEvent&gt;</ph> to unblock one or more threads with signals from multiple threads.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>CountdownEvent<ept id="p1">](countdownevent.md)</ept> article and the <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Barrier class</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Barrier?displayProperty=nameWithType&gt;</ph> class represents a thread execution barrier.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A thread that calls the <ph id="ph1">&lt;xref:System.Threading.Barrier.SignalAndWait%2A?displayProperty=nameWithType&gt;</ph> method signals that it reached the barrier and waits until other participant threads reach the barrier.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When all participant threads reach the barrier, they proceed and the barrier is reset and can be used again.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You might use <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> when one or more threads require the results of other threads before proceeding to the next computation phase.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Barrier<ept id="p1">](barrier.md)</ept> article and the <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Interlocked class</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked?displayProperty=nameWithType&gt;</ph> class provides static methods that perform simple atomic operations on a variable.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Those atomic operations include addition, increment and decrement, exchange and conditional exchange that depends on a comparison, and read operation of a 64-bit integer value.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>SpinWait structure</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SpinWait?displayProperty=nameWithType&gt;</ph> structure provides support for spin-based waiting.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You might want to use it when a thread has to wait for an event to be signaled or a condition to be met, but when the actual wait time is expected to be less than the waiting time required by using a wait handle or by otherwise blocking the thread.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>By using <ph id="ph1">&lt;xref:System.Threading.SpinWait&gt;</ph>, you can specify a short period of time to spin while waiting, and then yield (for example, by waiting or sleeping) only if the condition was not met in the specified time.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>SpinWait<ept id="p1">](spinwait.md)</ept> article and the <ph id="ph1">&lt;xref:System.Threading.SpinWait&gt;</ph> API reference.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread-safe collections<ept id="p1">](../collections/thread-safe/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading objects and features<ept id="p1">](threading-objects-and-features.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>