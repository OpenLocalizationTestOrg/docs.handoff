<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9925ddb58be5a9cdd696d6648f3b53c06c0db046</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\exceptions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cb661baf83fa97a033bbff0860a23706fda729c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">939d803f5ceb31d06da7fc0adbd040561dab0b11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exceptions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Workflows can use the <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity to handle exceptions that are raised during the execution of a workflow.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These exceptions can be handled or they can be re-thrown using the <ph id="ph1">&lt;xref:System.Activities.Statements.Rethrow&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Activities in the <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch.Finally%2A&gt;</ph> section are executed when either the <ph id="ph2">&lt;xref:System.Activities.Statements.TryCatch.Try%2A&gt;</ph> section or the <ph id="ph3">&lt;xref:System.Activities.Statements.TryCatch.Catches%2A&gt;</ph> section completes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Workflows hosted by a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance can also use the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> event handler to handle exceptions that are not handled by a <ph id="ph3">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Causes of Exceptions</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In a workflow, exceptions can be generated in the following ways:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A time-out of transactions in <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An explicit exception thrown by the workflow using the <ph id="ph1">&lt;xref:System.Activities.Statements.Throw&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> exception thrown from an activity.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An exception thrown from external code, such as libraries, components, or services that are used in the workflow.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Handling Exceptions</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If an exception is thrown by an activity and is unhandled, the default behavior is to terminate the workflow instance.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If a custom <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> handler is present, it can override this default behavior.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This handler gives the workflow host author an opportunity to provide the appropriate handling, such as custom logging, aborting the workflow, canceling the workflow, or terminating the workflow.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If a workflow raises an exception that is not handled, the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> handler is invoked.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There are three possible actions returned from <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> which determine the final outcome of the workflow.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> - A cancelled workflow instance is a graceful exit of a branch execution.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can model cancelation behavior (for example, by using a CancellationScope activity).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The Completed handler is invoked when the cancellation process completes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A cancelled workflow is in the Cancelled state.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Terminate<ept id="p1">**</ept> - A terminated workflow instance cannot be resumed or restarted.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This triggers the Completed event in which you can provide an exception as the reason it was terminated.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The Terminated handler is invoked when the termination process completes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A terminated workflow is in the Faulted state.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Abort<ept id="p1">**</ept> - An aborted workflow instances can be resumed only if it has been configured to be persistent.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Without persistence, a workflow cannot be resumed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>At the point a workflow is aborted, any work done (in memory) since the last persistence point will be lost.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For an aborted workflow, the Aborted handler is invoked using the exception as the reason when the abort process completes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, unlike Cancelled and Terminated, the Completed handler is not invoked.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An aborted workflow is in an Aborted state.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example invokes a workflow that throws an exception.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The exception is unhandled by the workflow and the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> handler is invoked.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs&gt;</ph> are inspected to provide information about the exception, and the workflow is terminated.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CFX_WorkflowApplicationExample#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Handling Exceptions with the TryCatch Activity</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Handling exceptions inside a workflow is performed with the <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity has a <ph id="ph2">&lt;xref:System.Activities.Statements.TryCatch.Catches%2A&gt;</ph> collection of <ph id="ph3">&lt;xref:System.Activities.Statements.Catch&gt;</ph> activities that are each associated with a specific <ph id="ph4">&lt;xref:System.Exception&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the exception thrown by an activity that is contained in the <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch.Try%2A&gt;</ph> section of a <ph id="ph2">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity matches the exception of a <ph id="ph3">&lt;xref:System.Activities.Statements.Catch%601&gt;</ph> activity in the <ph id="ph4">&lt;xref:System.Activities.Statements.TryCatch.Catches%2A&gt;</ph> collection, then the exception is handled.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the exception is explicitly re-thrown or a new exception is thrown then this exception passes up to the parent activity.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following code example shows a <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity that handles an <ph id="ph2">&lt;xref:System.ApplicationException&gt;</ph> that is thrown in the <ph id="ph3">&lt;xref:System.Activities.Statements.TryCatch.Try%2A&gt;</ph> section by a <ph id="ph4">&lt;xref:System.Activities.Statements.Throw&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The exception's message is written to the console by the <ph id="ph1">&lt;xref:System.Activities.Statements.Catch%601&gt;</ph> activity, and then a message is written to the console in the <ph id="ph2">&lt;xref:System.Activities.Statements.TryCatch.Finally%2A&gt;</ph> section.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CFX_WorkflowApplicationExample#33<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#33)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The activities in the <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch.Finally%2A&gt;</ph> section are executed when either the <ph id="ph2">&lt;xref:System.Activities.Statements.TryCatch.Try%2A&gt;</ph> section or the <ph id="ph3">&lt;xref:System.Activities.Statements.TryCatch.Catches%2A&gt;</ph> section successfully completes.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch.Try%2A&gt;</ph> section successfully completes if no exceptions are thrown from it, and the <ph id="ph2">&lt;xref:System.Activities.Statements.TryCatch.Catches%2A&gt;</ph> section successfully completes if no exceptions are thrown or rethrown from it.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If an exception is thrown in the <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch.Try%2A&gt;</ph> section of a <ph id="ph2">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> and is either not handled by a <ph id="ph3">&lt;xref:System.Activities.Statements.Catch%601&gt;</ph> in the <ph id="ph4">&lt;xref:System.Activities.Statements.TryCatch.Catches%2A&gt;</ph> section, or is rethrown from the <ph id="ph5">&lt;xref:System.Activities.Statements.TryCatch.Catches%2A&gt;</ph>, the activities in the <ph id="ph6">&lt;xref:System.Activities.Statements.TryCatch.Finally%2A&gt;</ph> will not be executed unless the one of the following occurs.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The exception is caught by a higher level <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity in the workflow, regardless of whether it is rethrown from that higher level <ph id="ph2">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The exception is not handled by a higher level <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph>, escapes the root of the workflow, and the workflow is configured to cancel instead of terminate or abort.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Workflows hosted using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> can configure this by handling <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> and returning <ph id="ph3">&lt;xref:System.Activities.UnhandledExceptionAction&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An example of handling <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> is provided previously in this topic.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Workflow services can configure this by using <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior&gt;</ph> and specifying <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionAction&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For an example of configuring <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior&gt;</ph>, see <bpt id="p1">[</bpt>Workflow Service Host Extensibility<ept id="p1">](../../../docs/framework/wcf/feature-details/workflow-service-host-extensibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Exception Handling versus Compensation</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The difference between exception handling and compensation is that exception handling occurs during the execution of an activity.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Compensation occurs after an activity has successfully completed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Exception handling provides an opportunity to clean up after the activity raises the exception, whereas compensation provides a mechanism by which the successfully completed work of a previously completed activity can be undone.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Compensation<ept id="p1">](../../../docs/framework/windows-workflow-foundation/compensation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>