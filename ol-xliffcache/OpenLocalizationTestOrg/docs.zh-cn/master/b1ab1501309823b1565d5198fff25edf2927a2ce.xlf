<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1ab1501309823b1565d5198fff25edf2927a2ce</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\constants-enums\user-defined-constants.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d1ae0328108229d0a35cd12d793cf7734f34421</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3003a5d816e29b3cfb2dc6f8470d1f00b213fb74</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>User-Defined Constants (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>User-Defined Constants (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A constant is a meaningful name that takes the place of a number or string that does not change.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Constants store values that, as the name implies, remain constant throughout the execution of an application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use constants that are defined by the controls or components you work with, or you can create your own.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Constants you create yourself are described as <bpt id="p1">*</bpt>user-defined<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You declare a constant with the <ph id="ph1">`Const`</ph> statement, using the same guidelines you would for creating a variable name.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`On`</ph>, you must explicitly declare the constant type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Const Statement Usage</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Const`</ph> statement can represent a mathematical or date/time quantity:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#10<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/user-defined-constants_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It also can define <ph id="ph1">`String`</ph> constants:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#13<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/user-defined-constants_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The expression on the right side of the equal sign ( <ph id="ph1">`=`</ph> ) is often a number or literal string, but it also can be an expression that results in a number or string (although that expression cannot contain calls to functions).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can even define constants in terms of previously defined constants:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#15<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/user-defined-constants_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Scope of User-Defined Constants</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Const`</ph> statement's scope is the same as that of a variable declared in the same location.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can specify scope in any of the following ways:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To create a constant that exists only within a procedure, declare it within that procedure.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To create a constant available to all procedures within a class, but not to any code outside that module, declare it in the declarations section of the class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To create a constant that is available to all members of an assembly, but not to outside clients of the assembly, declare it using the <ph id="ph1">`Friend`</ph> keyword in the declarations section of the class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To create a constant available throughout the application, declare it using the <ph id="ph1">`Public`</ph> keyword in the declarations section the class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Declare A Constant<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-a-constant.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Avoiding Circular References</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because constants can be defined in terms of other constants, it is possible to inadvertently create a <bpt id="p1">*</bpt>cycle<ept id="p1">*</ept>, or circular reference, between two or more constants.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A cycle occurs when you have two or more public constants, each of which is defined in terms of the other, as in the following example:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#16<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/user-defined-constants_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbEnumsTask#17<ept id="p2">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/user-defined-constants_5.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If a cycle occurs, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> generates a compiler error.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Const Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/const-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constant and Literal Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constants and Enumerations<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constants and Enumerations<ept id="p1">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations Overview<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constants Overview<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Declare an Enumeration<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations and Name Qualification<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Option Strict Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>