{"content":"---\ntitle: \"Marshaling a Delegate as a Callback Method\"\nms.date: \"03/30/2017\"\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords:\n  - \"data marshaling, Callback sample\"\n  - \"marshaling, Callback sample\"\nms.assetid: 6ddd7866-9804-4571-84de-83f5cc017a5a\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Marshaling a Delegate as a Callback Method\nThis sample demonstrates how to pass delegates to an unmanaged function expecting function pointers. A delegate is a class that can hold a reference to a method and is equivalent to a type-safe function pointer or a callback function.\n\n> [!NOTE]\n>  When you use a delegate inside a call, the common language runtime protects the delegate from being garbage collected for the duration of that call. However, if the unmanaged function stores the delegate to use after the call completes, you must manually prevent garbage collection until the unmanaged function finishes with the delegate. For more information, see the [HandleRef Sample](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hc662t8k(v=vs.100)) and [GCHandle Sample](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/44ey4b32(v=vs.100)).\n\nThe Callback sample uses the following unmanaged functions, shown with their original function declaration:\n\n-   `TestCallBack` exported from PinvokeLib.dll.\n\n    ```cpp\n    void TestCallBack(FPTR pf, int value);\n    ```\n\n-   `TestCallBack2` exported from PinvokeLib.dll.\n\n    ```cpp\n    void TestCallBack2(FPTR2 pf2, char* value);\n    ```\n\n[PinvokeLib.dll](marshaling-data-with-platform-invoke.md#pinvokelibdll) is a custom unmanaged library that contains an implementation for the previously listed functions.\n\nIn this sample, the `LibWrap` class contains managed prototypes for the `TestCallBack` and `TestCallBack2` methods. Both methods pass a delegate to a callback function as a parameter. The signature of the delegate must match the signature of the method it references. For example, the `FPtr` and `FPtr2` delegates have signatures that are identical to the `DoSomething` and `DoSomething2` methods.\n\n## Declaring Prototypes\n[!code-cpp[Conceptual.Interop.Marshaling#37](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/callback.cpp#37)]\n[!code-csharp[Conceptual.Interop.Marshaling#37](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/callback.cs#37)]\n[!code-vb[Conceptual.Interop.Marshaling#37](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/callback.vb#37)]\n\n## Calling Functions\n[!code-cpp[Conceptual.Interop.Marshaling#38](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/callback.cpp#38)]\n[!code-csharp[Conceptual.Interop.Marshaling#38](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/callback.cs#38)]\n[!code-vb[Conceptual.Interop.Marshaling#38](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/callback.vb#38)]\n\n## See also\n\n- [Miscellaneous Marshaling Samples](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ss9sb93t(v=vs.100))\n- [Platform Invoke Data Types](marshaling-data-with-platform-invoke.md#platform-invoke-data-types)\n- [Creating Prototypes in Managed Code](creating-prototypes-in-managed-code.md)\n","nodes":[{"pos":[4,303],"embed":true,"restype":"x-metadata","content":"title: \"Marshaling a Delegate as a Callback Method\"\nms.date: \"03/30/2017\"\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords:\n  - \"data marshaling, Callback sample\"\n  - \"marshaling, Callback sample\"\nms.assetid: 6ddd7866-9804-4571-84de-83f5cc017a5a\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Marshaling a Delegate as a Callback Method","nodes":[{"pos":[0,42],"content":"Marshaling a Delegate as a Callback Method","nodes":[{"content":"Marshaling a Delegate as a Callback Method","pos":[0,42]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[310,352],"content":"Marshaling a Delegate as a Callback Method","linkify":"Marshaling a Delegate as a Callback Method","nodes":[{"content":"Marshaling a Delegate as a Callback Method","pos":[0,42]}]},{"content":"This sample demonstrates how to pass delegates to an unmanaged function expecting function pointers.","pos":[353,453]},{"content":"A delegate is a class that can hold a reference to a method and is equivalent to a type-safe function pointer or a callback function.","pos":[454,587]},{"pos":[591,1190],"content":"[!NOTE]\n When you use a delegate inside a call, the common language runtime protects the delegate from being garbage collected for the duration of that call. However, if the unmanaged function stores the delegate to use after the call completes, you must manually prevent garbage collection until the unmanaged function finishes with the delegate. For more information, see the [HandleRef Sample](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hc662t8k(v=vs.100)) and [GCHandle Sample](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/44ey4b32(v=vs.100)).","leadings":["","> "],"nodes":[{"content":"When you use a delegate inside a call, the common language runtime protects the delegate from being garbage collected for the duration of that call. However, if the unmanaged function stores the delegate to use after the call completes, you must manually prevent garbage collection until the unmanaged function finishes with the delegate. For more information, see the [HandleRef Sample](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hc662t8k(v=vs.100)) and [GCHandle Sample](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/44ey4b32(v=vs.100)).","pos":[9,597],"nodes":[{"content":"When you use a delegate inside a call, the common language runtime protects the delegate from being garbage collected for the duration of that call.","pos":[0,148]},{"content":"However, if the unmanaged function stores the delegate to use after the call completes, you must manually prevent garbage collection until the unmanaged function finishes with the delegate.","pos":[149,338]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>HandleRef Sample<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hc662t8k(v=vs.100))</ept> and <bpt id=\"p2\">[</bpt>GCHandle Sample<ept id=\"p2\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/44ey4b32(v=vs.100))</ept>.","pos":[339,588],"source":" For more information, see the [HandleRef Sample](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hc662t8k(v=vs.100)) and [GCHandle Sample](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/44ey4b32(v=vs.100))."}]}]},{"content":"The Callback sample uses the following unmanaged functions, shown with their original function declaration:","pos":[1192,1299]},{"pos":[1305,1349],"content":"<ph id=\"ph1\">`TestCallBack`</ph> exported from PinvokeLib.dll.","source":"`TestCallBack` exported from PinvokeLib.dll."},{"pos":[1418,1463],"content":"<ph id=\"ph1\">`TestCallBack2`</ph> exported from PinvokeLib.dll.","source":"`TestCallBack2` exported from PinvokeLib.dll."},{"pos":[1533,1703],"content":"<bpt id=\"p1\">[</bpt>PinvokeLib.dll<ept id=\"p1\">](marshaling-data-with-platform-invoke.md#pinvokelibdll)</ept> is a custom unmanaged library that contains an implementation for the previously listed functions.","source":"[PinvokeLib.dll](marshaling-data-with-platform-invoke.md#pinvokelibdll) is a custom unmanaged library that contains an implementation for the previously listed functions."},{"content":"In this sample, the <ph id=\"ph1\">`LibWrap`</ph> class contains managed prototypes for the <ph id=\"ph2\">`TestCallBack`</ph> and <ph id=\"ph3\">`TestCallBack2`</ph> methods.","pos":[1705,1820],"source":"In this sample, the `LibWrap` class contains managed prototypes for the `TestCallBack` and `TestCallBack2` methods."},{"content":"Both methods pass a delegate to a callback function as a parameter.","pos":[1821,1888]},{"content":"The signature of the delegate must match the signature of the method it references.","pos":[1889,1972]},{"content":"For example, the <ph id=\"ph1\">`FPtr`</ph> and <ph id=\"ph2\">`FPtr2`</ph> delegates have signatures that are identical to the <ph id=\"ph3\">`DoSomething`</ph> and <ph id=\"ph4\">`DoSomething2`</ph> methods.","pos":[1973,2102],"source":" For example, the `FPtr` and `FPtr2` delegates have signatures that are identical to the `DoSomething` and `DoSomething2` methods."},{"pos":[2107,2127],"content":"Declaring Prototypes","linkify":"Declaring Prototypes","nodes":[{"content":"Declaring Prototypes","pos":[0,20]}]},{"pos":[2570,2587],"content":"Calling Functions","linkify":"Calling Functions","nodes":[{"content":"Calling Functions","pos":[0,17]}]},{"pos":[3030,3038],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3042,3165],"content":"<bpt id=\"p1\">[</bpt>Miscellaneous Marshaling Samples<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ss9sb93t(v=vs.100))</ept>","source":"[Miscellaneous Marshaling Samples](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ss9sb93t(v=vs.100))"},{"pos":[3168,3264],"content":"<bpt id=\"p1\">[</bpt>Platform Invoke Data Types<ept id=\"p1\">](marshaling-data-with-platform-invoke.md#platform-invoke-data-types)</ept>","source":"[Platform Invoke Data Types](marshaling-data-with-platform-invoke.md#platform-invoke-data-types)"},{"pos":[3267,3344],"content":"<bpt id=\"p1\">[</bpt>Creating Prototypes in Managed Code<ept id=\"p1\">](creating-prototypes-in-managed-code.md)</ept>","source":"[Creating Prototypes in Managed Code](creating-prototypes-in-managed-code.md)"}]}