{"content":"---\ntitle: \"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerInfo2.GetFunctionFromTokenAndTypeArgs\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs method [.NET Framework profiling]\"\n  - \"GetFunctionFromTokenAndTypeArgs method [.NET Framework profiling]\"\nms.assetid: ce8f6aa6-4ebf-4a86-b429-4bbc8af41a8f\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 14\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs Method\nGets the `FunctionID` of a function by using the specified metadata token, containing class, and `ClassID` values of any type arguments.  \n  \n## Syntax  \n  \n```  \nHRESULT GetFunctionFromTokenAndTypeArgs(  \n    [in] ModuleID moduleID,  \n    [in] mdMethodDef funcDef,  \n    [in] ClassID classId,  \n    [in] ULONG32 cTypeArgs,  \n    [in, size_is(cTypeArgs)] ClassID typeArgs[],  \n    [out] FunctionID* pFunctionID);  \n```  \n  \n#### Parameters  \n `moduleID`  \n [in] The ID of the module in which the function resides.  \n  \n `funcDef`  \n [in] An `mdMethodDef` metadata token that references the function.  \n  \n `classId`  \n [in] The ID of the function's containing class.  \n  \n `cTypeArgs`  \n [in] The number of type parameters for the given function. This value must be zero for non-generic functions.  \n  \n `typeArgs`  \n [in] An array of `ClassID` values, each of which is an argument of the function. The value of `typeArgs` can be NULL if `cTypeArgs` is set to zero.  \n  \n `pFunctionID`  \n [out] A pointer to the `FunctionID` of the specified function.  \n  \n## Remarks  \n Calling the `GetFunctionFromTokenAndTypeArgs` method with an `mdMethodRef` metadata instead of an `mdMethodDef` metadata token can have unpredictable results. Callers should resolve the `mdMethodRef` to an `mdMethodDef` when passing it.  \n  \n If the function is not already loaded, calling `GetFunctionFromTokenAndTypeArgs` will cause loading to occur, which is a dangerous operation in many contexts. For example, calling this method during loading of modules or types could lead to an infinite loop as the runtime attempts to circularly load things.  \n  \n In general, use of `GetFunctionFromTokenAndTypeArgs` is discouraged. If profilers are interested in events for a particular function, they should store the `ModuleID` and `mdMethodDef` of that function, and use [ICorProfilerInfo2::GetFunctionInfo2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getfunctioninfo2-method.md) to check whether a given `FunctionID` is that of the desired function.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See Also  \n [ICorProfilerInfo Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)   \n [ICorProfilerInfo2 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)","nodes":[{"pos":[4,808],"nodes":[{"content":"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs Method | Microsoft Docs","nodes":[{"pos":[0,74],"content":"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs Method | Microsoft Docs","nodes":[{"content":"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs Method | Microsoft Docs","pos":[0,74]}]}],"pos":[6,83],"yaml":true}],"content":"title: \"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerInfo2.GetFunctionFromTokenAndTypeArgs\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs method [.NET Framework profiling]\"\n  - \"GetFunctionFromTokenAndTypeArgs method [.NET Framework profiling]\"\nms.assetid: ce8f6aa6-4ebf-4a86-b429-4bbc8af41a8f\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 14\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[815,872],"content":"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs Method","linkify":"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs Method","nodes":[{"content":"ICorProfilerInfo2::GetFunctionFromTokenAndTypeArgs Method","pos":[0,57]}]},{"pos":[873,1009],"content":"Gets the <ph id=\"ph1\">`FunctionID`</ph> of a function by using the specified metadata token, containing class, and <ph id=\"ph2\">`ClassID`</ph> values of any type arguments.","source":"Gets the `FunctionID` of a function by using the specified metadata token, containing class, and `ClassID` values of any type arguments."},{"pos":[1018,1024],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1302,1312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The ID of the module in which the function resides.","pos":[1330,1386]},{"content":"[in] An <ph id=\"ph1\">`mdMethodDef`</ph> metadata token that references the function.","pos":[1406,1472],"source":"[in] An `mdMethodDef` metadata token that references the function."},{"content":"[in] The ID of the function's containing class.","pos":[1492,1539]},{"content":"[in] The number of type parameters for the given function.","pos":[1561,1619]},{"content":"This value must be zero for non-generic functions.","pos":[1620,1670]},{"content":"[in] An array of <ph id=\"ph1\">`ClassID`</ph> values, each of which is an argument of the function.","pos":[1691,1771],"source":"[in] An array of `ClassID` values, each of which is an argument of the function."},{"content":"The value of <ph id=\"ph1\">`typeArgs`</ph> can be NULL if <ph id=\"ph2\">`cTypeArgs`</ph> is set to zero.","pos":[1772,1838],"source":" The value of `typeArgs` can be NULL if `cTypeArgs` is set to zero."},{"content":"[out] A pointer to the <ph id=\"ph1\">`FunctionID`</ph> of the specified function.","pos":[1862,1924],"source":"[out] A pointer to the `FunctionID` of the specified function."},{"pos":[1933,1940],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calling the <ph id=\"ph1\">`GetFunctionFromTokenAndTypeArgs`</ph> method with an <ph id=\"ph2\">`mdMethodRef`</ph> metadata instead of an <ph id=\"ph3\">`mdMethodDef`</ph> metadata token can have unpredictable results.","pos":[1944,2102],"source":"Calling the `GetFunctionFromTokenAndTypeArgs` method with an `mdMethodRef` metadata instead of an `mdMethodDef` metadata token can have unpredictable results."},{"content":"Callers should resolve the <ph id=\"ph1\">`mdMethodRef`</ph> to an <ph id=\"ph2\">`mdMethodDef`</ph> when passing it.","pos":[2103,2180],"source":" Callers should resolve the `mdMethodRef` to an `mdMethodDef` when passing it."},{"content":"If the function is not already loaded, calling <ph id=\"ph1\">`GetFunctionFromTokenAndTypeArgs`</ph> will cause loading to occur, which is a dangerous operation in many contexts.","pos":[2187,2345],"source":"If the function is not already loaded, calling `GetFunctionFromTokenAndTypeArgs` will cause loading to occur, which is a dangerous operation in many contexts."},{"content":"For example, calling this method during loading of modules or types could lead to an infinite loop as the runtime attempts to circularly load things.","pos":[2346,2495]},{"content":"In general, use of <ph id=\"ph1\">`GetFunctionFromTokenAndTypeArgs`</ph> is discouraged.","pos":[2502,2570],"source":"In general, use of `GetFunctionFromTokenAndTypeArgs` is discouraged."},{"content":"If profilers are interested in events for a particular function, they should store the <ph id=\"ph1\">`ModuleID`</ph> and <ph id=\"ph2\">`mdMethodDef`</ph> of that function, and use <bpt id=\"p1\">[</bpt>ICorProfilerInfo2::GetFunctionInfo2<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getfunctioninfo2-method.md)</ept> to check whether a given <ph id=\"ph3\">`FunctionID`</ph> is that of the desired function.","pos":[2571,2918],"source":" If profilers are interested in events for a particular function, they should store the `ModuleID` and `mdMethodDef` of that function, and use [ICorProfilerInfo2::GetFunctionInfo2](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-getfunctioninfo2-method.md) to check whether a given `FunctionID` is that of the desired function."},{"pos":[2927,2939],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2943,3047],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3054,3088],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[3095,3120],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[3127,3235],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]"},{"pos":[3244,3252],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>ICorProfilerInfo Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[3256,3367],"source":"[ICorProfilerInfo Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md) "},{"content":"<bpt id=\"p1\">[</bpt>ICorProfilerInfo2 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)</ept>","pos":[3371,3483],"source":"[ICorProfilerInfo2 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)"}]}