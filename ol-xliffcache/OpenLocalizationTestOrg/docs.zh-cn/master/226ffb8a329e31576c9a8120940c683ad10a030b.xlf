<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="nullable-value-types.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">226ffb8a329e31576c9a8120940c683ad10a030b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\nullable-value-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f59bbdf7c159912fab0ccf629bf61e78ed22a4fa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ebbd7c7a7f03e4e63c79d53ed9168bd624b6147</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Nullable Value Types (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Nullable Value Types (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Sometimes you work with a value type that does not have a defined value in certain circumstances.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, a field in a database might have to distinguish between having an assigned value that is meaningful and not having an assigned value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Value types can be extended to take either their normal values or a null value.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Such an extension is called a <bpt id="p1">*</bpt>nullable type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each nullable type is constructed from the generic <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Consider a database that tracks work-related activities.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example constructs a nullable <ph id="ph1">`Boolean`</ph> type and declares a variable of that type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can write the declaration in three ways:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`ridesBusToWork`</ph> can hold a value of <ph id="ph2">`True`</ph>, a value of <ph id="ph3">`False`</ph>, or no value at all.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Its initial default value is no value at all, which in this case could mean that the information has not yet been obtained for this person.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In contrast, <ph id="ph1">`False`</ph> could mean that the information has been obtained and the person does not ride the bus to work.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can declare variables and properties with nullable types, and you can declare an array with elements of a nullable type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can declare procedures with nullable types as parameters, and you can return a nullable type from a <ph id="ph1">`Function`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You cannot construct a nullable type on a reference type such as an array, a <ph id="ph1">`String`</ph>, or a class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The underlying type must be a value type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using a Nullable Type Variable</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The most important members of a nullable type are its <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For a variable of a nullable type, <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> tells you whether the variable contains a defined value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> is <ph id="ph2">`True`</ph>, you can read the value from <ph id="ph3">&lt;xref:System.Nullable%601.Value%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that both <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> are <ph id="ph3">`ReadOnly`</ph> properties.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Default Values</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you declare a variable with a nullable type, its <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property has a default value of <ph id="ph2">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This means that by default the variable has no defined value, instead of the default value of its underlying value type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the following example, the variable <ph id="ph1">`numberOfChildren`</ph> initially has no defined value, even though the default value of the <ph id="ph2">`Integer`</ph> type is 0.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A null value is useful to indicate an undefined or unknown value.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`numberOfChildren`</ph> had been declared as <ph id="ph2">`Integer`</ph>, there would be no value that could indicate that the information is not currently available.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Storing Values</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You store a value in a variable or property of a nullable type in the typical way.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example assigns a value to the variable <ph id="ph1">`numberOfChildren`</ph> declared in the previous example.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If a variable or property of a nullable type contains a defined value, you can cause it to revert to its initial state of not having a value assigned.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You do this by setting the variable or property to <ph id="ph1">`Nothing`</ph>, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Although you can assign <ph id="ph1">`Nothing`</ph> to a variable of a nullable type, you cannot test it for <ph id="ph2">`Nothing`</ph> by using the equal sign.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Comparison that uses the equal sign, <ph id="ph1">`someVar = Nothing`</ph>, always evaluates to <ph id="ph2">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can test the variable's <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property for <ph id="ph2">`False`</ph>, or test by using the <ph id="ph3">`Is`</ph> or <ph id="ph4">`IsNot`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Retrieving Values</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To retrieve the value of a variable of a nullable type, you should first test its <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property to confirm that it has a value.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you try to read the value when <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> is <ph id="ph2">`False`</ph>, <ph id="ph3">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> throws an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example shows the recommended way to read the variable <ph id="ph1">`numberOfChildren`</ph> of the previous examples.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Comparing Nullable Types</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When nullable <ph id="ph1">`Boolean`</ph> variables are used in Boolean expressions, the result can be <ph id="ph2">`True`</ph>, <ph id="ph3">`False`</ph>, or <ph id="ph4">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following is the truth table for <ph id="ph1">`And`</ph> and <ph id="ph2">`Or`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`b1`</ph> and <ph id="ph2">`b2`</ph> now have three possible values, there are nine combinations to evaluate.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>b1</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>b2</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>b1 And b2</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>b1 Or b2</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When the value of a Boolean variable or expression is <ph id="ph1">`Nothing`</ph>, it is neither <ph id="ph2">`true`</ph> nor <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Consider the following example.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`b1 And b2`</ph> evaluates to <ph id="ph2">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As a result, the <ph id="ph1">`Else`</ph> clause is executed in each <ph id="ph2">`If`</ph> statement, and the output is as follows:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AndAlso`</ph> and <ph id="ph2">`OrElse`</ph>, which use short-circuit evaluation, must evaluate their second operands when the first evaluates to <ph id="ph3">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Propagation</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If one or both of the operands of an arithmetic, comparison, shift, or type operation is nullable, the result of the operation is also nullable.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If both operands have values that are not <ph id="ph1">`Nothing`</ph>, the operation is performed on the underlying values of the operands, as if neither were a nullable type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the following example, variables <ph id="ph1">`compare1`</ph> and <ph id="ph2">`sum1`</ph> are implicitly typed.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you rest the mouse pointer over them, you will see that the compiler infers nullable types for both of them.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If one or both operands have a value of <ph id="ph1">`Nothing`</ph>, the result will be <ph id="ph2">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Using Nullable Types with Data</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A database is one of the most important places to use nullable types.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Not all database objects currently support nullable types, but the designer-generated table adapters do.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See "TableAdapter Support for Nullable Types" in <bpt id="p1">[</bpt>TableAdapter Overview<ept id="p1">](https://docs.microsoft.com/visualstudio/data-tools/tableadapter-overview)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Nullable Types<ept id="p1">](../../../../csharp/programming-guide/nullable-types/using-nullable-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Value Types and Reference Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/troubleshooting-data-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>TableAdapter Overview<ept id="p1">](https://docs.microsoft.com/visualstudio/data-tools/tableadapter-overview)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>If Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/if-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Is Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/is-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IsNot Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/isnot-operator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>