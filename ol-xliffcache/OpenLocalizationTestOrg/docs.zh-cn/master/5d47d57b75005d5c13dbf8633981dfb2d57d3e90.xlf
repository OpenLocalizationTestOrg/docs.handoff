<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="for-next-statement.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d47d57b75005d5c13dbf8633981dfb2d57d3e90</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\for-next-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83065f210345c52883a8056abb753b3a65e02981</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a57427fa45a203cf6203c111c81f3f79110dd10</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>For...Next Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For...Next Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Repeats a group of statements a specified number of times.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Part</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required in the <ph id="ph1">`For`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Numeric variable.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The control variable for the loop.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Counter Argument<ept id="p1">](#BKMK_Counter)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Data type of <ph id="ph1">`counter`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Counter Argument<ept id="p1">](#BKMK_Counter)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Numeric expression.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The initial value of <ph id="ph1">`counter`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Numeric expression.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The final value of <ph id="ph1">`counter`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Numeric expression.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The amount by which <ph id="ph1">`counter`</ph> is incremented each time through the loop.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>One or more statements between <ph id="ph1">`For`</ph> and <ph id="ph2">`Next`</ph> that run the specified number of times.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Transfers control to the next loop iteration.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Transfers control out of the <ph id="ph1">`For`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Terminates the definition of the <ph id="ph1">`For`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`To`</ph> keyword is used in this statement to specify the range for the counter.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can also use this keyword in the <bpt id="p1">[</bpt>Select...Case Statement<ept id="p1">](../../../visual-basic/language-reference/statements/select-case-statement.md)</ept> and in array declarations.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about array declarations, see <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Simple Examples</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You use a <ph id="ph1">`For`</ph>...<ph id="ph2">`Next`</ph> structure when you want to repeat a set of statements a set number of times.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`index`</ph> variable starts with a value of 1 and is incremented with each iteration of the loop, ending after the value of <ph id="ph2">`index`</ph> reaches 5.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`number`</ph> variable starts at 2 and is reduced by 0.25 on each iteration of the loop, ending after the value of <ph id="ph2">`number`</ph> reaches 0.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Step`</ph> argument of <ph id="ph2">`-.25`</ph> reduces the value by 0.25 on each iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>While...End While Statement<ept id="p1">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept> or <bpt id="p2">[</bpt>Do...Loop Statement<ept id="p2">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept> works well when you don't know in advance how many times to run the statements in the loop.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, when you expect to run the loop a specific number of times, a <ph id="ph1">`For`</ph>...<ph id="ph2">`Next`</ph> loop is a better choice.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You determine the number of iterations when you first enter the loop.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Nesting Loops</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can nest <ph id="ph1">`For`</ph> loops by putting one loop within another.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example demonstrates nested <ph id="ph1">`For`</ph>...<ph id="ph2">`Next`</ph> structures that have different step values.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The outer loop creates a string for every iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The inner loop decrements a loop counter variable for every iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When nesting loops, each loop must have a unique <ph id="ph1">`counter`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can also nest different kinds control structures within each other.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Nested Control Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Exit For and Continue For</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Exit For`</ph> statement immediately exits the <ph id="ph2">`For`</ph>…<ph id="ph3">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>loop and transfers control to the statement that follows the <ph id="ph1">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Continue For`</ph> statement transfers control immediately to the next iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Continue Statement<ept id="p1">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of the <ph id="ph1">`Continue For`</ph> and <ph id="ph2">`Exit For`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can put any number of <ph id="ph1">`Exit For`</ph> statements in a <ph id="ph2">`For`</ph>…<ph id="ph3">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>loop.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When used within nested <ph id="ph1">`For`</ph>…<ph id="ph2">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>loops, <ph id="ph1">`Exit For`</ph> exits the innermost loop and transfers control to the next higher level of nesting.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit For`</ph> is often used after you evaluate some condition (for example, in an <ph id="ph2">`If`</ph>...<ph id="ph3">`Then`</ph>...<ph id="ph4">`Else`</ph> structure).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You might want to use <ph id="ph1">`Exit For`</ph> for the following conditions:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Continuing to iterate is unnecessary or impossible.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An erroneous value or a termination request might create this condition.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Try`</ph>...<ph id="ph2">`Catch`</ph>...<ph id="ph3">`Finally`</ph> statement catches an exception.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You might use <ph id="ph1">`Exit For`</ph> at the end of the <ph id="ph2">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You have an endless loop, which is a loop that could run a large or even infinite number of times.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you detect such a condition, you can use <ph id="ph1">`Exit For`</ph> to escape the loop.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Technical Implementation</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`For`</ph>...<ph id="ph2">`Next`</ph> loop starts, Visual Basic evaluates <ph id="ph3">`start`</ph>, <ph id="ph4">`end`</ph>, and <ph id="ph5">`step`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Visual Basic evaluates these values only at this time and then assigns <ph id="ph1">`start`</ph> to <ph id="ph2">`counter`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Before the statement block runs, Visual Basic compares <ph id="ph1">`counter`</ph> to <ph id="ph2">`end`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`counter`</ph> is already larger than the <ph id="ph2">`end`</ph> value (or smaller if <ph id="ph3">`step`</ph> is negative), the <ph id="ph4">`For`</ph> loop ends and control passes to the statement that follows the <ph id="ph5">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Otherwise, the statement block runs.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Each time Visual Basic encounters the <ph id="ph1">`Next`</ph> statement, it increments <ph id="ph2">`counter`</ph> by <ph id="ph3">`step`</ph> and returns to the <ph id="ph4">`For`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Again it compares <ph id="ph1">`counter`</ph> to <ph id="ph2">`end`</ph>, and again it either runs the block or exits the loop, depending on the result.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This process continues until <ph id="ph1">`counter`</ph> passes <ph id="ph2">`end`</ph> or an <ph id="ph3">`Exit For`</ph> statement is encountered.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The loop doesn't stop until <ph id="ph1">`counter`</ph> has passed <ph id="ph2">`end`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`counter`</ph> is equal to <ph id="ph2">`end`</ph>, the loop continues.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The comparison that determines whether to run the block is <ph id="ph1">`counter`</ph><ph id="ph2"> &lt;= </ph><ph id="ph3">`end`</ph> if <ph id="ph4">`step`</ph> is positive and <ph id="ph5">`counter`</ph><ph id="ph6"> &gt;= </ph><ph id="ph7">`end`</ph> if <ph id="ph8">`step`</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you change the value of <ph id="ph1">`counter`</ph> while inside a loop, your code might be more difficult to read and debug.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Changing the value of <ph id="ph1">`start`</ph>, <ph id="ph2">`end`</ph>, or <ph id="ph3">`step`</ph> doesn't affect the iteration values that were determined when the loop was first entered.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you nest loops, the compiler signals an error if it encounters the <ph id="ph1">`Next`</ph> statement of an outer nesting level before the <ph id="ph2">`Next`</ph> statement of an inner level.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>However, the compiler can detect this overlapping error only if you specify <ph id="ph1">`counter`</ph> in every <ph id="ph2">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Step Argument</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`step`</ph> can be either positive or negative.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This parameter determines loop processing according to the following table:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Step value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Loop executes if<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Positive or zero</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Negative</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The default value of <ph id="ph1">`step`</ph> is 1.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_Counter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Counter Argument</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following table indicates whether <ph id="ph1">`counter`</ph> defines a new local variable that’s scoped to the entire <ph id="ph2">`For…Next`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This determination depends on whether <ph id="ph1">`datatype`</ph> is present and whether <ph id="ph2">`counter`</ph> is already defined.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Is <ph id="ph1">`datatype`</ph> present?</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Is <ph id="ph1">`counter`</ph> already defined?</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Result (whether <ph id="ph1">`counter`</ph> defines a new local variable that’s scoped to the entire <ph id="ph2">`For...Next`</ph> loop)</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>No, because <ph id="ph1">`counter`</ph> is already defined.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If the scope of <ph id="ph1">`counter`</ph> isn't local to the procedure, a compile-time warning occurs.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Yes.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The data type is inferred from the <ph id="ph1">`start`</ph>, <ph id="ph2">`end`</ph>, and <ph id="ph3">`step`</ph> expressions.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For information about type inference, see <bpt id="p1">[</bpt>Option Infer Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> and <bpt id="p2">[</bpt>Local Type Inference<ept id="p2">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Yes, but only if the existing <ph id="ph1">`counter`</ph> variable is defined outside the procedure.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>That variable remains separate.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If the scope of the existing <ph id="ph1">`counter`</ph> variable is local to the procedure, a compile-time error occurs.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Yes.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The data type of <ph id="ph1">`counter`</ph> determines the type of the iteration, which must be one of the following types:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Byte`</ph>, <ph id="ph2">`SByte`</ph>, <ph id="ph3">`UShort`</ph>, <ph id="ph4">`Short`</ph>, <ph id="ph5">`UInteger`</ph>, <ph id="ph6">`Integer`</ph>, <ph id="ph7">`ULong`</ph>, <ph id="ph8">`Long`</ph>, <ph id="ph9">`Decimal`</ph>, <ph id="ph10">`Single`</ph>, or <ph id="ph11">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An enumeration that you declare by using an <bpt id="p1">[</bpt>Enum Statement<ept id="p1">](../../../visual-basic/language-reference/statements/enum-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`T`</ph> that has the following operators, where <ph id="ph2">`B`</ph> is a type that can be used in a <ph id="ph3">`Boolean`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can optionally specify the <ph id="ph1">`counter`</ph> variable in the <ph id="ph2">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This syntax improves the readability of your program, especially if you have nested <ph id="ph1">`For`</ph> loops.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You must specify the variable that appears in the corresponding <ph id="ph1">`For`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`start`</ph>, <ph id="ph2">`end`</ph>, and <ph id="ph3">`step`</ph> expressions can evaluate to any data type that widens to the type of <ph id="ph4">`counter`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If you use a user-defined type for <ph id="ph1">`counter`</ph>, you might have to define the <ph id="ph2">`CType`</ph> conversion operator to convert the types of <ph id="ph3">`start`</ph>, <ph id="ph4">`end`</ph>, or <ph id="ph5">`step`</ph> to the type of <ph id="ph6">`counter`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The following example removes all elements from a generic list.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Instead of a <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>, the example shows a <ph id="ph1">`For`</ph>...<ph id="ph2">`Next`</ph> statement that iterates in descending order.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The example uses this technique because the <ph id="ph1">`removeAt`</ph> method causes elements after the removed element to have a lower index value.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The following example iterates through an enumeration that's declared by using an <bpt id="p1">[</bpt>Enum Statement<ept id="p1">](../../../visual-basic/language-reference/statements/enum-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In the following example, the statement parameters use a class that has operator overloads for the <ph id="ph1">`+`</ph>, <ph id="ph2">`-`</ph>, <ph id="ph3">`&gt;=`</ph>, and <ph id="ph4">`&lt;=`</ph> operators.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Loop Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>While...End While Statement<ept id="p1">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nested Control Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Collections<ept id="p1">](../../programming-guide/concepts/collections.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>