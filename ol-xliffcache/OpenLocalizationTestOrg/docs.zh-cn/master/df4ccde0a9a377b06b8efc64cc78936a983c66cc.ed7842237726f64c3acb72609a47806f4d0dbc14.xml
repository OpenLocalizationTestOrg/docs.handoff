{"content":"---\ntitle: \"try-catch - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"try\"\n  - \"try_CSharpKeyword\"\n  - \"catch\"\n  - \"catch_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"catch keyword [C#]\"\n  - \"try-catch statement [C#]\"\nms.assetid: cb5503c7-bfa1-4610-8fc2-ddcd2e84c438\n---\n# try-catch (C# Reference)\n\nThe try-catch statement consists of a `try` block followed by one or more `catch` clauses, which specify handlers for different exceptions.\n\n## Remarks\n\nWhen an exception is thrown, the common language runtime (CLR) looks for the `catch` statement that handles this exception. If the currently executing method does not contain such a `catch` block, the CLR looks at the method that called the current method, and so on up the call stack. If no `catch` block is found, then the CLR displays an unhandled exception message to the user and stops execution of the program.\n\nThe `try` block contains the guarded code that may cause the exception. The block is executed until an exception is thrown or it is completed successfully. For example, the following attempt to cast a `null` object raises the <xref:System.NullReferenceException> exception:\n\n```csharp\nobject o2 = null;\ntry\n{\n    int i2 = (int)o2;   // Error\n}\n```\n\nAlthough the `catch` clause can be used without arguments to catch any type of exception, this usage is not recommended. In general, you should only catch those exceptions that you know how to recover from. Therefore, you should always specify an object argument derived from <xref:System.Exception?displayProperty=nameWithType> For example:\n\n```csharp\ncatch (InvalidCastException e)\n{\n}\n```\n\nIt is possible to use more than one specific `catch` clause in the same try-catch statement. In this case, the order of the `catch` clauses is important because the `catch` clauses are examined in order. Catch the more specific exceptions before the less specific ones. The compiler produces an error if you order your catch blocks so that a later block can never be reached.\n\nUsing `catch` arguments is one way to filter for the exceptions you want to handle.  You can also use an exception filter that further examines the exception to decide whether to handle it.  If the exception filter returns false, then the search for a handler continues.\n\n```csharp\ncatch (ArgumentException e) when (e.ParamName == \"…\")\n{\n}\n```\n\nException filters are preferable to catching and rethrowing (explained below) because filters leave the stack unharmed.  If a later handler dumps the stack, you can see where the exception originally came from, rather than just the last place it was rethrown.  A common use of exception filter expressions is logging.  You can create a filter that always returns false that also outputs to a log, you can log exceptions as they go by without having to handle them and rethrow.\n\nA [throw](throw.md) statement can be used in a `catch` block to re-throw the exception that is caught by the `catch` statement. The following example extracts source information from an <xref:System.IO.IOException> exception, and then throws the exception to the parent method.\n\n```csharp\ncatch (FileNotFoundException e)\n{\n    // FileNotFoundExceptions are handled here.\n}\ncatch (IOException e)\n{\n    // Extract some information from this exception, and then \n    // throw it to the parent method.\n    if (e.Source != null)\n        Console.WriteLine(\"IOException source: {0}\", e.Source);\n    throw;\n}\n```\n\nYou can catch one exception and throw a different exception. When you do this, specify the exception that you caught as the inner exception, as shown in the following example.\n\n```csharp\ncatch (InvalidCastException e) \n{\n    // Perform some action here, and then throw a new exception.\n    throw new YourCustomException(\"Put your error message here.\", e);\n}\n```\n\nYou can also re-throw an exception when a specified condition is true, as shown in the following example.\n\n```csharp\ncatch (InvalidCastException e)\n{\n    if (e.Data == null)\n    {\n        throw;\n    }\n    else\n    {\n        // Take some action.\n    }\n}\n```\n\n> [!NOTE]\n> It is also possible to use an exception filter to get a similar result in an often cleaner fashion (as well as not modifying the stack, as explained earlier in this document). The following example has a similar behavior for callers as the previous example. The function throws the `InvalidCastException` back to the caller when `e.Data` is `null`.\n> \n> ```csharp\n> catch (InvalidCastException e) when (e.Data != null) \n> {\n>     // Take some action.\n> }\n> ``` \n\nFrom inside a `try` block, initialize only variables that are declared therein. Otherwise, an exception can occur before the execution of the block is completed. For example, in the following code example, the variable `n` is initialized inside the `try` block. An attempt to use this variable outside the `try` block in the `Write(n)` statement will generate a compiler error.\n\n```csharp\nstatic void Main() \n{\n    int n;\n    try \n    {\n        // Do not initialize this variable here.\n        n = 123;\n    }\n    catch\n    {\n    }\n    // Error: Use of unassigned local variable 'n'.\n    Console.Write(n);\n}\n```\n\nFor more information about catch, see [try-catch-finally](try-catch-finally.md).\n\n## Exceptions in Async Methods\nAn async method is marked  by an  [async](async.md) modifier and usually contains one or more await expressions or statements. An await expression applies the [await](await.md) operator to a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>.\n\nWhen control reaches an `await` in the async method, progress in the method is suspended until the awaited task completes. When the task  is complete, execution can resume in the method. For more information, see [Asynchronous Programming with async and await](../../programming-guide/concepts/async/index.md) and [Control Flow in Async Programs](../../programming-guide/concepts/async/control-flow-in-async-programs.md).\n\nThe completed task to which `await` is applied might be in a faulted state because of an unhandled exception in the method that returns the task. Awaiting the task throws an exception. A task can also end up in a canceled state if the asynchronous process that returns it is canceled. Awaiting a canceled task throws  an `OperationCanceledException`. For more information about how to cancel an asynchronous process, see [Fine-Tuning Your Async Application](../../programming-guide/concepts/async/fine-tuning-your-async-application.md).\n\nTo catch the exception, await the task in a `try` block, and catch the exception in the associated `catch` block. For an example, see the \"Example\" section.\n\nA task can be in a faulted state because multiple exceptions occurred in the awaited async method. For example, the task might be the result of a call to <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType>. When you await such a task, only one of the exceptions is caught, and you can't predict which exception will be caught. For an example, see the \"Example\" section.\n\n## Example\n\nIn the following example, the `try` block contains a call to the `ProcessString` method that may cause an exception. The `catch` clause contains the exception handler that just displays a message on the screen. When the `throw` statement is called from inside `MyMethod`, the system looks for the `catch` statement and displays the message `Exception caught`.\n\n[!code-csharp[csrefKeywordsExceptions#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsExceptions/CS/csrefKeywordsExceptions.cs#2)]\n\n## Example\n\nIn the following example, two catch blocks are used, and the most specific exception, which comes first, is caught.\n\nTo catch the least specific exception, you can replace the throw statement in `ProcessString` with the following statement: `throw new Exception()`.\n\nIf you place the least-specific catch block first in the example, the following  error message appears: `A previous catch clause already catches all exceptions of this or a super type ('System.Exception')`.\n\n[!code-csharp[csrefKeywordsExceptions#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsExceptions/CS/csrefKeywordsExceptions.cs#3)]\n\n## Example\n\nThe following example illustrates exception handling for async methods. To catch an exception that an async task throws, place the `await` expression in a `try` block, and catch the exception in a `catch` block.\n\nUncomment the `throw new Exception` line in the example to demonstrate exception handling. The task's `IsFaulted` property is set to `True`, the task's `Exception.InnerException` property is set to the exception, and the exception is caught in the `catch` block.\n\nUncomment the `throw new OperationCanceledException` line to demonstrate what happens when you cancel an asynchronous process. The task's `IsCanceled` property is set to `true`, and the exception is caught in the `catch` block. Under some conditions that don't apply to this example, the task's `IsFaulted` property is set to `true` and `IsCanceled` is set to `false`.\n\n[!code-csharp[csAsyncExceptions#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csasyncexceptions/cs/class1.cs#2)]  \n\n## Example\n\nThe following example illustrates exception handling where multiple tasks can result in multiple exceptions. The `try` block awaits the task that's returned by a call to <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType>. The task is complete when the three tasks to which WhenAll is applied are complete.\n\nEach of the three tasks causes an exception. The `catch` block iterates through the exceptions, which are found in the `Exception.InnerExceptions` property of the task that was returned by <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType>.\n\n[!code-csharp[csAsyncExceptions#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csasyncexceptions/cs/class1.cs#4)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [try, throw, and catch Statements (C++)](/cpp/cpp/try-throw-and-catch-statements-cpp)\n- [Exception Handling Statements](exception-handling-statements.md)\n- [throw](throw.md)\n- [try-finally](try-finally.md)\n- [How to: Explicitly Throw Exceptions](../../../standard/exceptions/how-to-explicitly-throw-exceptions.md)\n","nodes":[{"pos":[4,291],"embed":true,"restype":"x-metadata","content":"title: \"try-catch - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"try\"\n  - \"try_CSharpKeyword\"\n  - \"catch\"\n  - \"catch_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"catch keyword [C#]\"\n  - \"try-catch statement [C#]\"\nms.assetid: cb5503c7-bfa1-4610-8fc2-ddcd2e84c438","nodes":[{"content":"try-catch - C# Reference","nodes":[{"pos":[0,24],"content":"try-catch - C# Reference","nodes":[{"content":"try-catch - C# Reference","pos":[0,24]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[298,322],"content":"try-catch (C# Reference)","linkify":"try-catch (C# Reference)","nodes":[{"content":"try-catch (C# Reference)","pos":[0,24]}]},{"pos":[324,463],"content":"The try-catch statement consists of a <ph id=\"ph1\">`try`</ph> block followed by one or more <ph id=\"ph2\">`catch`</ph> clauses, which specify handlers for different exceptions.","source":"The try-catch statement consists of a `try` block followed by one or more `catch` clauses, which specify handlers for different exceptions."},{"pos":[468,475],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When an exception is thrown, the common language runtime (CLR) looks for the <ph id=\"ph1\">`catch`</ph> statement that handles this exception.","pos":[477,600],"source":"When an exception is thrown, the common language runtime (CLR) looks for the `catch` statement that handles this exception."},{"content":"If the currently executing method does not contain such a <ph id=\"ph1\">`catch`</ph> block, the CLR looks at the method that called the current method, and so on up the call stack.","pos":[601,762],"source":" If the currently executing method does not contain such a `catch` block, the CLR looks at the method that called the current method, and so on up the call stack."},{"content":"If no <ph id=\"ph1\">`catch`</ph> block is found, then the CLR displays an unhandled exception message to the user and stops execution of the program.","pos":[763,893],"source":" If no `catch` block is found, then the CLR displays an unhandled exception message to the user and stops execution of the program."},{"content":"The <ph id=\"ph1\">`try`</ph> block contains the guarded code that may cause the exception.","pos":[895,966],"source":"The `try` block contains the guarded code that may cause the exception."},{"content":"The block is executed until an exception is thrown or it is completed successfully.","pos":[967,1050]},{"content":"For example, the following attempt to cast a <ph id=\"ph1\">`null`</ph> object raises the <ph id=\"ph2\">&lt;xref:System.NullReferenceException&gt;</ph> exception:","pos":[1051,1168],"source":" For example, the following attempt to cast a `null` object raises the <xref:System.NullReferenceException> exception:"},{"content":"Although the <ph id=\"ph1\">`catch`</ph> clause can be used without arguments to catch any type of exception, this usage is not recommended.","pos":[1244,1364],"source":"Although the `catch` clause can be used without arguments to catch any type of exception, this usage is not recommended."},{"content":"In general, you should only catch those exceptions that you know how to recover from.","pos":[1365,1450]},{"content":"Therefore, you should always specify an object argument derived from <ph id=\"ph1\">&lt;xref:System.Exception?displayProperty=nameWithType&gt;</ph> For example:","pos":[1451,1585],"source":" Therefore, you should always specify an object argument derived from <xref:System.Exception?displayProperty=nameWithType> For example:"},{"content":"It is possible to use more than one specific <ph id=\"ph1\">`catch`</ph> clause in the same try-catch statement.","pos":[1637,1729],"source":"It is possible to use more than one specific `catch` clause in the same try-catch statement."},{"content":"In this case, the order of the <ph id=\"ph1\">`catch`</ph> clauses is important because the <ph id=\"ph2\">`catch`</ph> clauses are examined in order.","pos":[1730,1840],"source":" In this case, the order of the `catch` clauses is important because the `catch` clauses are examined in order."},{"content":"Catch the more specific exceptions before the less specific ones.","pos":[1841,1906]},{"content":"The compiler produces an error if you order your catch blocks so that a later block can never be reached.","pos":[1907,2012]},{"content":"Using <ph id=\"ph1\">`catch`</ph> arguments is one way to filter for the exceptions you want to handle.","pos":[2014,2097],"source":"Using `catch` arguments is one way to filter for the exceptions you want to handle."},{"content":"You can also use an exception filter that further examines the exception to decide whether to handle it.","pos":[2099,2203]},{"content":"If the exception filter returns false, then the search for a handler continues.","pos":[2205,2284]},{"content":"Exception filters are preferable to catching and rethrowing (explained below) because filters leave the stack unharmed.","pos":[2359,2478]},{"content":"If a later handler dumps the stack, you can see where the exception originally came from, rather than just the last place it was rethrown.","pos":[2480,2618]},{"content":"A common use of exception filter expressions is logging.","pos":[2620,2676]},{"content":"You can create a filter that always returns false that also outputs to a log, you can log exceptions as they go by without having to handle them and rethrow.","pos":[2678,2835]},{"content":"A <bpt id=\"p1\">[</bpt>throw<ept id=\"p1\">](throw.md)</ept> statement can be used in a <ph id=\"ph1\">`catch`</ph> block to re-throw the exception that is caught by the <ph id=\"ph2\">`catch`</ph> statement.","pos":[2837,2964],"source":"A [throw](throw.md) statement can be used in a `catch` block to re-throw the exception that is caught by the `catch` statement."},{"content":"The following example extracts source information from an <ph id=\"ph1\">&lt;xref:System.IO.IOException&gt;</ph> exception, and then throws the exception to the parent method.","pos":[2965,3114],"source":" The following example extracts source information from an <xref:System.IO.IOException> exception, and then throws the exception to the parent method."},{"content":"You can catch one exception and throw a different exception.","pos":[3443,3503]},{"content":"When you do this, specify the exception that you caught as the inner exception, as shown in the following example.","pos":[3504,3618]},{"content":"You can also re-throw an exception when a specified condition is true, as shown in the following example.","pos":[3806,3911]},{"pos":[4066,4424],"content":"[!NOTE]\nIt is also possible to use an exception filter to get a similar result in an often cleaner fashion (as well as not modifying the stack, as explained earlier in this document). The following example has a similar behavior for callers as the previous example. The function throws the `InvalidCastException` back to the caller when `e.Data` is `null`.","leadings":["","> "],"nodes":[{"content":"It is also possible to use an exception filter to get a similar result in an often cleaner fashion (as well as not modifying the stack, as explained earlier in this document). The following example has a similar behavior for callers as the previous example. The function throws the `InvalidCastException` back to the caller when `e.Data` is `null`.","pos":[8,356],"nodes":[{"content":"It is also possible to use an exception filter to get a similar result in an often cleaner fashion (as well as not modifying the stack, as explained earlier in this document).","pos":[0,175]},{"content":"The following example has a similar behavior for callers as the previous example.","pos":[176,257]},{"content":"The function throws the <ph id=\"ph1\">`InvalidCastException`</ph> back to the caller when <ph id=\"ph2\">`e.Data`</ph> is <ph id=\"ph3\">`null`</ph>.","pos":[258,348],"source":" The function throws the `InvalidCastException` back to the caller when `e.Data` is `null`."}]}]},{"content":"From inside a <ph id=\"ph1\">`try`</ph> block, initialize only variables that are declared therein.","pos":[4539,4618],"source":"From inside a `try` block, initialize only variables that are declared therein."},{"content":"Otherwise, an exception can occur before the execution of the block is completed.","pos":[4619,4700]},{"content":"For example, in the following code example, the variable <ph id=\"ph1\">`n`</ph> is initialized inside the <ph id=\"ph2\">`try`</ph> block.","pos":[4701,4800],"source":" For example, in the following code example, the variable `n` is initialized inside the `try` block."},{"content":"An attempt to use this variable outside the <ph id=\"ph1\">`try`</ph> block in the <ph id=\"ph2\">`Write(n)`</ph> statement will generate a compiler error.","pos":[4801,4916],"source":" An attempt to use this variable outside the `try` block in the `Write(n)` statement will generate a compiler error."},{"pos":[5151,5231],"content":"For more information about catch, see <bpt id=\"p1\">[</bpt>try-catch-finally<ept id=\"p1\">](try-catch-finally.md)</ept>.","source":"For more information about catch, see [try-catch-finally](try-catch-finally.md)."},{"pos":[5236,5263],"content":"Exceptions in Async Methods","linkify":"Exceptions in Async Methods","nodes":[{"content":"Exceptions in Async Methods","pos":[0,27]}]},{"content":"An async method is marked  by an  <bpt id=\"p1\">[</bpt>async<ept id=\"p1\">](async.md)</ept> modifier and usually contains one or more await expressions or statements.","pos":[5264,5390],"source":"An async method is marked  by an  [async](async.md) modifier and usually contains one or more await expressions or statements."},{"content":"An await expression applies the <bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](await.md)</ept> operator to a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","pos":[5391,5532],"source":" An await expression applies the [await](await.md) operator to a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>."},{"content":"When control reaches an <ph id=\"ph1\">`await`</ph> in the async method, progress in the method is suspended until the awaited task completes.","pos":[5534,5656],"source":"When control reaches an `await` in the async method, progress in the method is suspended until the awaited task completes."},{"content":"When the task  is complete, execution can resume in the method.","pos":[5657,5720]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await<ept id=\"p1\">](../../programming-guide/concepts/async/index.md)</ept> and <bpt id=\"p2\">[</bpt>Control Flow in Async Programs<ept id=\"p2\">](../../programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.","pos":[5721,5955],"source":" For more information, see [Asynchronous Programming with async and await](../../programming-guide/concepts/async/index.md) and [Control Flow in Async Programs](../../programming-guide/concepts/async/control-flow-in-async-programs.md)."},{"content":"The completed task to which <ph id=\"ph1\">`await`</ph> is applied might be in a faulted state because of an unhandled exception in the method that returns the task.","pos":[5957,6102],"source":"The completed task to which `await` is applied might be in a faulted state because of an unhandled exception in the method that returns the task."},{"content":"Awaiting the task throws an exception.","pos":[6103,6141]},{"content":"A task can also end up in a canceled state if the asynchronous process that returns it is canceled.","pos":[6142,6241]},{"content":"Awaiting a canceled task throws  an <ph id=\"ph1\">`OperationCanceledException`</ph>.","pos":[6242,6307],"source":" Awaiting a canceled task throws  an `OperationCanceledException`."},{"content":"For more information about how to cancel an asynchronous process, see <bpt id=\"p1\">[</bpt>Fine-Tuning Your Async Application<ept id=\"p1\">](../../programming-guide/concepts/async/fine-tuning-your-async-application.md)</ept>.","pos":[6308,6493],"source":" For more information about how to cancel an asynchronous process, see [Fine-Tuning Your Async Application](../../programming-guide/concepts/async/fine-tuning-your-async-application.md)."},{"content":"To catch the exception, await the task in a <ph id=\"ph1\">`try`</ph> block, and catch the exception in the associated <ph id=\"ph2\">`catch`</ph> block.","pos":[6495,6608],"source":"To catch the exception, await the task in a `try` block, and catch the exception in the associated `catch` block."},{"content":"For an example, see the \"Example\" section.","pos":[6609,6651]},{"content":"A task can be in a faulted state because multiple exceptions occurred in the awaited async method.","pos":[6653,6751]},{"content":"For example, the task might be the result of a call to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType&gt;</ph>.","pos":[6752,6882],"source":" For example, the task might be the result of a call to <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType>."},{"content":"When you await such a task, only one of the exceptions is caught, and you can't predict which exception will be caught.","pos":[6883,7002]},{"content":"For an example, see the \"Example\" section.","pos":[7003,7045]},{"pos":[7050,7057],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, the <ph id=\"ph1\">`try`</ph> block contains a call to the <ph id=\"ph2\">`ProcessString`</ph> method that may cause an exception.","pos":[7059,7175],"source":"In the following example, the `try` block contains a call to the `ProcessString` method that may cause an exception."},{"content":"The <ph id=\"ph1\">`catch`</ph> clause contains the exception handler that just displays a message on the screen.","pos":[7176,7269],"source":" The `catch` clause contains the exception handler that just displays a message on the screen."},{"content":"When the <ph id=\"ph1\">`throw`</ph> statement is called from inside <ph id=\"ph2\">`MyMethod`</ph>, the system looks for the <ph id=\"ph3\">`catch`</ph> statement and displays the message <ph id=\"ph4\">`Exception caught`</ph>.","pos":[7270,7418],"source":" When the `throw` statement is called from inside `MyMethod`, the system looks for the `catch` statement and displays the message `Exception caught`."},{"pos":[7570,7577],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, two catch blocks are used, and the most specific exception, which comes first, is caught.","pos":[7579,7694]},{"pos":[7696,7844],"content":"To catch the least specific exception, you can replace the throw statement in <ph id=\"ph1\">`ProcessString`</ph> with the following statement: <ph id=\"ph2\">`throw new Exception()`</ph>.","source":"To catch the least specific exception, you can replace the throw statement in `ProcessString` with the following statement: `throw new Exception()`."},{"pos":[7846,8052],"content":"If you place the least-specific catch block first in the example, the following  error message appears: <ph id=\"ph1\">`A previous catch clause already catches all exceptions of this or a super type ('System.Exception')`</ph>.","source":"If you place the least-specific catch block first in the example, the following  error message appears: `A previous catch clause already catches all exceptions of this or a super type ('System.Exception')`."},{"pos":[8204,8211],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example illustrates exception handling for async methods.","pos":[8213,8284]},{"content":"To catch an exception that an async task throws, place the <ph id=\"ph1\">`await`</ph> expression in a <ph id=\"ph2\">`try`</ph> block, and catch the exception in a <ph id=\"ph3\">`catch`</ph> block.","pos":[8285,8424],"source":" To catch an exception that an async task throws, place the `await` expression in a `try` block, and catch the exception in a `catch` block."},{"content":"Uncomment the <ph id=\"ph1\">`throw new Exception`</ph> line in the example to demonstrate exception handling.","pos":[8426,8516],"source":"Uncomment the `throw new Exception` line in the example to demonstrate exception handling."},{"content":"The task's <ph id=\"ph1\">`IsFaulted`</ph> property is set to <ph id=\"ph2\">`True`</ph>, the task's <ph id=\"ph3\">`Exception.InnerException`</ph> property is set to the exception, and the exception is caught in the <ph id=\"ph4\">`catch`</ph> block.","pos":[8517,8688],"source":" The task's `IsFaulted` property is set to `True`, the task's `Exception.InnerException` property is set to the exception, and the exception is caught in the `catch` block."},{"content":"Uncomment the <ph id=\"ph1\">`throw new OperationCanceledException`</ph> line to demonstrate what happens when you cancel an asynchronous process.","pos":[8690,8816],"source":"Uncomment the `throw new OperationCanceledException` line to demonstrate what happens when you cancel an asynchronous process."},{"content":"The task's <ph id=\"ph1\">`IsCanceled`</ph> property is set to <ph id=\"ph2\">`true`</ph>, and the exception is caught in the <ph id=\"ph3\">`catch`</ph> block.","pos":[8817,8917],"source":" The task's `IsCanceled` property is set to `true`, and the exception is caught in the `catch` block."},{"content":"Under some conditions that don't apply to this example, the task's <ph id=\"ph1\">`IsFaulted`</ph> property is set to <ph id=\"ph2\">`true`</ph> and <ph id=\"ph3\">`IsCanceled`</ph> is set to <ph id=\"ph4\">`false`</ph>.","pos":[8918,9058],"source":" Under some conditions that don't apply to this example, the task's `IsFaulted` property is set to `true` and `IsCanceled` is set to `false`."},{"pos":[9183,9190],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example illustrates exception handling where multiple tasks can result in multiple exceptions.","pos":[9192,9300]},{"content":"The <ph id=\"ph1\">`try`</ph> block awaits the task that's returned by a call to <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType&gt;</ph>.","pos":[9301,9437],"source":" The `try` block awaits the task that's returned by a call to <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType>."},{"content":"The task is complete when the three tasks to which WhenAll is applied are complete.","pos":[9438,9521]},{"content":"Each of the three tasks causes an exception.","pos":[9523,9567]},{"content":"The <ph id=\"ph1\">`catch`</ph> block iterates through the exceptions, which are found in the <ph id=\"ph2\">`Exception.InnerExceptions`</ph> property of the task that was returned by <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType&gt;</ph>.","pos":[9568,9787],"source":" The `catch` block iterates through the exceptions, which are found in the `Exception.InnerExceptions` property of the task that was returned by <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=nameWithType>."},{"pos":[9910,9935],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[10001,10009],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[10013,10040],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[10043,10099],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[10102,10125],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[10128,10213],"content":"<bpt id=\"p1\">[</bpt>try, throw, and catch Statements (C++)<ept id=\"p1\">](/cpp/cpp/try-throw-and-catch-statements-cpp)</ept>","source":"[try, throw, and catch Statements (C++)](/cpp/cpp/try-throw-and-catch-statements-cpp)"},{"pos":[10216,10281],"content":"<bpt id=\"p1\">[</bpt>Exception Handling Statements<ept id=\"p1\">](exception-handling-statements.md)</ept>","source":"[Exception Handling Statements](exception-handling-statements.md)"},{"pos":[10284,10301],"content":"<bpt id=\"p1\">[</bpt>throw<ept id=\"p1\">](throw.md)</ept>","source":"[throw](throw.md)"},{"pos":[10304,10333],"content":"<bpt id=\"p1\">[</bpt>try-finally<ept id=\"p1\">](try-finally.md)</ept>","source":"[try-finally](try-finally.md)"},{"pos":[10336,10441],"content":"<bpt id=\"p1\">[</bpt>How to: Explicitly Throw Exceptions<ept id=\"p1\">](../../../standard/exceptions/how-to-explicitly-throw-exceptions.md)</ept>","source":"[How to: Explicitly Throw Exceptions](../../../standard/exceptions/how-to-explicitly-throw-exceptions.md)"}]}