<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">553813c103b6dc149605bc6ce32d831ec2c790c6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\walkthrough-authoring-a-composite-control-with-visual-csharp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea71f5e05f40251f312865addee86d015481d7bb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1284141fff87e49b2f98980195e87fcb4312d8fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Authoring a Composite Control with Visual C# | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Authoring a Composite Control with Visual C#</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Composite controls provide a means by which custom graphical interfaces can be created and reused.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A composite control is essentially a component with a visual representation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>As such, it might consist of one or more Windows Forms controls, components, or blocks of code that can extend functionality by validating user input, modifying display properties, or performing other tasks required by the author.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Composite controls can be placed on Windows Forms in the same manner as other controls.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the first part of this walkthrough, you create a simple composite control called <ph id="ph1">`ctlClock`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the second part of the walkthrough, you extend the functionality of <ph id="ph1">`ctlClock`</ph> through inheritance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To change your settings, choose <bpt id="p1">**</bpt>Import and Export Settings<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>Tools<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Customizing Development Settings in Visual Studio<ept id="p1">](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creating the Project</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you create a new project, you specify its name to set the root namespace, assembly name, and project name, and ensure that the default component will be in the correct namespace.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create the ctlClockLib control library and the ctlClock control</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, point to <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Project<ept id="p3">**</ept> to open the <bpt id="p4">**</bpt>New Project<ept id="p4">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>From the list of <ph id="ph1">[!INCLUDE[csprcs](../../../../includes/csprcs-md.md)]</ph> projects, select the <bpt id="p1">**</bpt>Windows Forms Control Library<ept id="p1">**</ept> project template, type <ph id="ph2">`ctlClockLib`</ph> in the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> box, and then click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The project name, <ph id="ph1">`ctlClockLib`</ph>, is also assigned to the root namespace by default.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The root namespace is used to qualify the names of components in the assembly.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, if two assemblies provide components named <ph id="ph1">`ctlClock`</ph>, you can specify your <ph id="ph2">`ctlClock`</ph> component using <ph id="ph3">`ctlClockLib.ctlClock.`</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>UserControl1.cs<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Rename<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Change the file name to <ph id="ph1">`ctlClock.cs`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Yes<ept id="p1">**</ept> button when you are asked if you want to rename all references to the code element "UserControl1".</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By default, a composite control inherits from the <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> class provided by the system.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> class provides functionality required by all composite controls, and implements standard methods and properties.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Save All<ept id="p2">**</ept> to save the project.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Adding Windows Controls and Components to the Composite Control</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A visual interface is an essential part of your composite control.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This visual interface is implemented by the addition of one or more Windows controls to the designer surface.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the following demonstration, you will incorporate Windows controls into your composite control and write code to implement functionality.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To add a Label and a Timer to your composite control</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>ctlClock.cs<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>View Designer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>, expand the <bpt id="p2">**</bpt>Common Controls<ept id="p2">**</ept> node, and then double-click <bpt id="p3">**</bpt>Label<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control named <ph id="ph2">`label1`</ph> is added to your control on the designer surface.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the designer, click <bpt id="p1">**</bpt>label1<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the Properties window, set the following properties.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Change to</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Text<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TextAlign<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Font.Size<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>, expand the <bpt id="p2">**</bpt>Components<ept id="p2">**</ept> node, and then double-click <bpt id="p3">**</bpt>Timer<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because a <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> is a component, it has no visual representation at run time.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Therefore, it does not appear with the controls on the designer surface, but rather in the <bpt id="p1">**</bpt>Component Designer<ept id="p1">**</ept> (a tray at the bottom of the designer surface).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Component Designer<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>timer1<ept id="p2">**</ept>, and then set the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> property to <ph id="ph2">`1000`</ph> and the <ph id="ph3">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> property controls the frequency with which the <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component ticks.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Each time <ph id="ph1">`timer1`</ph> ticks, it runs the code in the <ph id="ph2">`timer1_Tick`</ph> event.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The interval represents the number of milliseconds between ticks.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Component Designer<ept id="p1">**</ept>, double-click <bpt id="p2">**</bpt>timer1<ept id="p2">**</ept> to go to the <ph id="ph1">`timer1_Tick`</ph> event for <ph id="ph2">`ctlClock`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Modify the code so that it resembles the following code sample.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Be sure to change the access modifier from <ph id="ph1">`private`</ph> to <ph id="ph2">`protected`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This code will cause the current time to be shown in <ph id="ph1">`lblDisplay`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because the interval of <ph id="ph1">`timer1`</ph> was set to <ph id="ph2">`1000`</ph>, this event will occur every thousand milliseconds, thus updating the current time every second.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Modify the method to be overridable with the <ph id="ph1">`virtual`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see the  "Inheriting from a User Control" section below.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Save All<ept id="p2">**</ept> to save the project.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Adding Properties to the Composite Control</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Your clock control now encapsulates a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control and a <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component, each with its own set of inherent properties.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>While the individual properties of these controls will not be accessible to subsequent users of your control, you can create and expose custom properties by writing the appropriate blocks of code.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the following procedure, you will add properties to your control that enable the user to change the color of the background and text.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To add a property to your composite control</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>ctlClock.cs<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept> for your control opens.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`public partial class ctlClock`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Beneath the opening brace (<ph id="ph1">`{)`</ph>, type the following code.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>These statements create the private variables that you will use to store the values for the properties you are about to create.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Type the following code beneath the variable declarations from step 2.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The preceding code makes two custom properties, <ph id="ph1">`ClockForeColor`</ph> and <ph id="ph2">`ClockBackColor`</ph>, available to subsequent users of this control.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> statements provide for storage and retrieval of the property value, as well as code to implement functionality appropriate to the property.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Save All<ept id="p2">**</ept> to save the project.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Testing the Control</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Controls are not stand-alone applications; they must be hosted in a container.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Test your control's run-time behavior and exercise its properties with the <bpt id="p1">**</bpt>UserControl Test Container<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Test the Run-Time Behavior of a UserControl<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-test-the-run-time-behavior-of-a-usercontrol.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To test your control</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Press F5 to build the project and run your control in the <bpt id="p1">**</bpt>UserControl Test Container<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the test container's property grid, locate the <ph id="ph1">`ClockBackColor`</ph> property, and then select the property to display the color palette.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Choose a color by clicking it.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The background color of your control changes to the color you selected.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Use a similar sequence of events to verify that the <ph id="ph1">`ClockForeColor`</ph> property is functioning as expected.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In this section and the preceding sections, you have seen how components and Windows controls can be combined with code and packaging to provide custom functionality in the form of a composite control.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You have learned to expose properties in your composite control, and how to test your control after it is complete.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In the next section you will learn how to construct an inherited composite control using <ph id="ph1">`ctlClock`</ph> as a base.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Inheriting from a Composite Control</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In the previous sections, you learned how to combine Windows controls, components, and code into reusable composite controls.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Your composite control can now be used as a base upon which other controls can be built.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The process of deriving a class from a base class is called <bpt id="p1">*</bpt>inheritance<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In this section, you will create a composite control called <ph id="ph1">`ctlAlarmClock`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This control will be derived from its parent control, <ph id="ph1">`ctlClock`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You will learn to extend the functionality of <ph id="ph1">`ctlClock`</ph> by overriding parent methods and adding new methods and properties.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The first step in creating an inherited control is to derive it from its parent.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This action creates a new control that has all of the properties, methods, and graphical characteristics of the parent control, but can also act as a base for the addition of new or modified functionality.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To create the inherited control</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>ctlClockLib<ept id="p1">**</ept>, point to <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>User Control<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box opens.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Inherited User Control<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, type <ph id="ph1">`ctlAlarmClock.cs`</ph>, and then click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Inheritance Picker<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Component Name<ept id="p1">**</ept>, double-click <bpt id="p2">**</bpt>ctlClock<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, browse through the current projects.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A file called <bpt id="p1">**</bpt>ctlAlarmClock.cs<ept id="p1">**</ept> has been added to the current project.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Adding the Alarm Properties</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Properties are added to an inherited control in the same way they are added to a composite control.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You will now use the property declaration syntax to add two properties to your control: <ph id="ph1">`AlarmTime`</ph>, which will store the value of the date and time the alarm is to go off, and <ph id="ph2">`AlarmSet`</ph>, which will indicate whether the alarm is set.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To add properties to your composite control</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>ctlAlarmClock<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`public class`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Note that your control inherits from <ph id="ph1">`ctlClockLib.ctlClock`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Beneath the opening brace (<ph id="ph1">`{)`</ph> statement, type the following code.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Adding to the Graphical Interface of the Control</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Your inherited control has a visual interface that is identical to the control it inherits from.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>It possesses the same constituent controls as its parent control, but the properties of the constituent controls will not be available unless they were specifically exposed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You may add to the graphical interface of an inherited composite control in the same manner as you would add to any composite control.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To continue adding to your alarm clock's visual interface, you will add a label control that will flash when the alarm is sounding.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To add the label control</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>ctlAlarmClock<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>View Designer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The designer for <ph id="ph1">`ctlAlarmClock`</ph> opens in the main window.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Click the display portion of the control, and view the Properties window.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>While all the properties are displayed, they are dimmed.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This indicates that these properties are native to <ph id="ph1">`lblDisplay`</ph> and cannot be modified or accessed in the Properties window.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>By default, controls contained in a composite control are <ph id="ph1">`private`</ph>, and their properties are not accessible by any means.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If you want subsequent users of your composite control to have access to its internal controls, declare them as <ph id="ph1">`public`</ph> or <ph id="ph2">`protected`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This will allow you to set and modify properties of controls contained within your composite control by using the appropriate code.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control to your composite control.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Using the mouse, drag the <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control immediately beneath the display box.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In the Properties window, set the following properties.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Setting</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Text<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Alarm!<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TextAlign<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Visible<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Adding the Alarm Functionality</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In the previous procedures, you added properties and a control that will enable alarm functionality in your composite control.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In this procedure, you will add code to compare the current time to the alarm time and, if they are the same, to flash an alarm.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>By overriding the <ph id="ph1">`timer1_Tick`</ph> method of <ph id="ph2">`ctlClock`</ph> and adding additional code to it, you will extend the capability of <ph id="ph3">`ctlAlarmClock`</ph> while retaining all of the inherent functionality of <ph id="ph4">`ctlClock`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>To override the timer1_Tick method of ctlClock</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept>, locate the <ph id="ph1">`private bool blnAlarmSet;`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Immediately beneath it, add the following statement.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept>, locate the closing brace (<ph id="ph1">`})`</ph> at the end of the class.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Just before the brace, add the following code.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The addition of this code accomplishes several tasks.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`override`</ph> statement directs the control to use this method in place of the method that was inherited from the base control.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>When this method is called, it calls the method it overrides by invoking the <ph id="ph1">`base.timer1_Tick`</ph> statement, ensuring that all of the functionality incorporated in the original control is reproduced in this control.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>It then runs additional code to incorporate the alarm functionality.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A flashing label control will appear when the alarm occurs.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Your alarm clock control is almost complete.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The only thing that remains is to implement a way to turn it off.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>To do this, you will add code to the <ph id="ph1">`lblAlarm_Click`</ph> method.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>To implement the shutoff method</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>ctlAlarmClock.cs<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>View Designer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The designer opens.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Add a button to the control.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Set the properties of the button as follows.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Text<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Disable Alarm<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>In the designer, double-click <bpt id="p1">**</bpt>btnAlarmOff<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept> opens to the <ph id="ph1">`private void btnAlarmOff_Click`</ph> line.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Modify this method so that it resembles the following code.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Save All<ept id="p2">**</ept> to save the project.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Using the Inherited Control on a Form</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>You can test your inherited control the same way you tested the base class control, <ph id="ph1">`ctlClock`</ph>: Press F5 to build the project and run your control in the <bpt id="p1">**</bpt>UserControl Test Container<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Test the Run-Time Behavior of a UserControl<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-test-the-run-time-behavior-of-a-usercontrol.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>To put your control to use, you will need to host it on a form.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>As with a standard composite control, an inherited composite control cannot stand alone and must be hosted in a form or other container.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">`ctlAlarmClock`</ph> has a greater depth of functionality, additional code is required to test it.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>In this procedure, you will write a simple program to test the functionality of <ph id="ph1">`ctlAlarmClock`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>You will write code to set and display the <ph id="ph1">`AlarmTime`</ph> property of <ph id="ph2">`ctlAlarmClock`</ph>, and will test its inherent functions.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>To build and add your control to a test form</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>ctlClockLib<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Build<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Add a new <bpt id="p1">**</bpt>Windows Application<ept id="p1">**</ept> project to the solution, and name it <ph id="ph1">`Test`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node for your test project.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> to display the <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Click the tab labeled <bpt id="p1">**</bpt>Projects<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">`ctlClockLib`</ph> project will be listed under <bpt id="p1">**</bpt>Project Name<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Double-click the project to add the reference to the test project.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>Test<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Build<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>, expand the <bpt id="p2">**</bpt>ctlClockLib Components<ept id="p2">**</ept> node.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Double-click <bpt id="p1">**</bpt>ctlAlarmClock<ept id="p1">**</ept> to add a copy of <ph id="ph1">`ctlAlarmClock`</ph> to your form.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>, locate and double-click <bpt id="p2">**</bpt>DateTimePicker<ept id="p2">**</ept> to add a <ph id="ph1">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> control to your form, and then add a <ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph> control by double-clicking <bpt id="p3">**</bpt>Label<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Use the mouse to position the controls in a convenient place on the form.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Set the properties of these controls in the following manner.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Control</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Text<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Format<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>In the designer, double-click <bpt id="p1">**</bpt>dtpTest<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept> opens to <ph id="ph1">`private void dtpTest_ValueChanged`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Modify the code so that it resembles the following.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>Test<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Set as StartUp Project<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Start Debugging<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The test program starts.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Note that the current time is updated in the <ph id="ph1">`ctlAlarmClock`</ph> control, and that the starting time is shown in the <ph id="ph2">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Click the <ph id="ph1">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> where the minutes of the hour are displayed.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Using the keyboard, set a value for minutes that is one minute greater than the current time shown by <ph id="ph1">`ctlAlarmClock`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The time for the alarm setting is shown in <ph id="ph1">`lblTest`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Wait for the displayed time to reach the alarm setting time.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>When the displayed time reaches the time to which the alarm is set, the <ph id="ph1">`lblAlarm`</ph> will flash.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Turn off the alarm by clicking <ph id="ph1">`btnAlarmOff`</ph>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>You may now reset the alarm.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>This walkthrough has covered a number of key concepts.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>You have learned to create a composite control by combining controls and components into a composite control container.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>You have learned to add properties to your control, and to write code to implement custom functionality.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>In the last section, you learned to extend the functionality of a given composite control through inheritance, and to alter the functionality of host methods by overriding those methods.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Varieties of Custom Controls<ept id="p1">](../../../../docs/framework/winforms/controls/varieties-of-custom-controls.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming with Components<ept id="p1">](http://msdn.microsoft.com/library/d4d4fcb4-e0b8-46b3-b679-7ee0026eb9e3)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Component Authoring Walkthroughs<ept id="p1">](http://msdn.microsoft.com/library/c414cca9-2489-4208-8b38-954586d91c13)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Display a Control in the Choose Toolbox Items Dialog Box<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-display-a-control-in-the-choose-toolbox-items-dialog-box.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual C#<ept id="p1">](../../../../docs/framework/winforms/controls/walkthrough-inheriting-from-a-windows-forms-control-with-visual-csharp.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>