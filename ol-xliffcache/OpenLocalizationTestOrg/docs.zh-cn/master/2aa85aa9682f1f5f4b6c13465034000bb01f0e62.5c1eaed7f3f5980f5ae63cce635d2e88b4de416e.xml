{"content":"---\ntitle: \"How to: Publish Metadata for a Service Using a Configuration File\"\nms.date: \"03/30/2017\"\nms.assetid: f061443f-92df-4824-b36a-609c4cd14a17\n---\n# How to: Publish Metadata for a Service Using a Configuration File\nThis is one of two how-to topics that demonstrate publishing metadata for a Windows Communication Foundation (WCF) service. There are two ways to specify how a service should publish metadata, using a configuration file and using code. This topic shows how to publish metadata for a service using a configuration file.  \n  \n> [!CAUTION]\n>  This topic shows how to publish metadata in an unsecure manner. Any client can retrieve the metadata from the service. If you require your service to publish metadata in a secure manner, see [Custom Secure Metadata Endpoint](../../../../docs/framework/wcf/samples/custom-secure-metadata-endpoint.md).  \n  \n For more information about publishing metadata in code, see [How to: Publish Metadata for a Service Using Code](../../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-code.md). Publishing metadata allows clients to retrieve the metadata using a WS-Transfer GET request or an HTTP/GET request using the `?wsdl` query string. To be sure that the code is working, create a basic WCF service. For simplicity, a basic self-hosted service is provided in the following code.  \n  \n```csharp  \nusing System;  \nusing System.Runtime.Serialization;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Description;  \n  \nnamespace Metadata.Samples  \n{  \n    [ServiceContract]  \n    public interface ISimpleService  \n    {  \n        [OperationContract]  \n        string SimpleMethod(string msg);  \n    }  \n  \n    class SimpleService : ISimpleService  \n    {  \n        public string SimpleMethod(string msg)  \n        {  \n            Console.WriteLine(\"The caller passed in \" + msg);  \n            return \"Hello \" + msg;  \n        }  \n    }  \n  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ServiceHost host = new ServiceHost(typeof(SimpleService),  \n                new Uri(\"http://localhost:8001/MetadataSample\"));   \n            try  \n            {  \n                // Open the service host to accept incoming calls  \n                host.Open();  \n  \n                // The service can now be accessed.  \n                Console.WriteLine(\"The service is ready.\");  \n                Console.WriteLine(\"Press <ENTER> to terminate service.\");  \n                Console.WriteLine();  \n                Console.ReadLine();  \n  \n                // Close the ServiceHostBase to shutdown the service.  \n                host.Close();  \n            }  \n            catch (CommunicationException commProblem)  \n            {  \n                Console.WriteLine(\"There was a communication problem. \" + commProblem.Message);  \n                Console.Read();  \n            }  \n        }  \n    }  \n}  \n```  \n  \n This service is a self-hosted service, which is configured using a configuration file. The following configuration file serves as a starting point.  \n  \n```xml  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service name=\"Metadata.Example.SimpleService\">  \n        <endpoint address=\"\"  \n                  binding=\"basicHttpBinding\"  \n                  contract=\"Metadata.Example.ISimpleService\" />  \n      </service>  \n    </services>  \n    <behaviors>  \n  \n    </behaviors>  \n  </system.serviceModel>  \n</configuration>  \n```  \n  \n### To publish metadata for a WCF service using an application configuration file  \n  \n1.  Within the App.config file, after the closing `</services>` element, create a `<behaviors>` element.  \n\n2.  Within the `<behaviors>` element, add a `<serviceBehaviors>` element.  \n\n3.  Add a `<behavior>` element to the `<serviceBehaviors>` element and specify a value for the `name` attribute of the `<behavior>` element.  \n\n4.  Add a `<serviceMetadata>` element to the `<behavior>` element. Set the `httpGetEnabled` attribute to `true` and the `policyVersion` attribute to Policy15. `httpGetEnabled` allows the service to respond to metadata requests made by an HTTP GET request. `policyVersion` tells the service to conform to WS-Policy 1.5 when generating metadata.  \n\n5.  Add a `behaviorConfiguration` attribute to the `<service>` element and specify the `name` attribute of the `<behavior>` element added in step 1, as shown in the following code example.  \n  \n    ```xml  \n    <services>  \n      <service  \n          name=\"Metadata.Example.SimpleService\"  \n          behaviorConfiguration=\"SimpleServiceBehavior\">  \n        ...  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"SimpleServiceBehavior\">  \n          <serviceMetadata httpGetEnabled=\"True\" policyVersion=\"Policy15\" />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    ```  \n  \n6.  Add one or more `<endpoint>` elements with the contract set to `IMetadataExchange`, as shown in the following code example.  \n  \n    ```xml  \n    <services>  \n      <service  \n          name=\"Metadata.Example.SimpleService\"  \n          behaviorConfiguration=\"SimpleServiceBehavior\">  \n  \n        <endpoint address=\"\"  \n                  binding=\"wsHttpBinding\"  \n                  contract=\"Metadata.Example.ISimpleService\" />  \n  \n        <endpoint address=\"mex\"  \n                  binding=\"mexHttpBinding\"  \n                  contract=\"IMetadataExchange\" />  \n      </service>  \n    </services>  \n    ```  \n  \n7.  For the metadata endpoints added in the previous step, set the `binding` attribute to one of the following:  \n  \n    -   `mexHttpBinding` for HTTP publication.  \n  \n    -   `mexHttpsBinding` for HTTPS publication.  \n  \n    -   `mexNamedPipeBinding` for named pipe publication.  \n  \n    -   `mexTcpBinding` for TCP publication.  \n  \n8.  For the metadata endpoints added in a previous step, set the address equal to:  \n  \n    -   An empty string to use the host application's base address as the publication point if the base address is the same as the metadata binding.  \n  \n    -   A relative address if the host application has a base address.  \n  \n    -   An absolute address.  \n  \n9. Build and run the console application.  \n  \n10. Use Internet Explorer to browse to the base address of the service (http://localhost:8001/MetadataSample in this sample) and verify that the metadata publishing is turned on. If not, a message at the top of the resulting page displays: \"Metadata publishing for this service is currently disabled.\"  \n  \n### To use default endpoints  \n  \n1.  To configure metadata on a service that uses default endpoints, specify the <xref:System.ServiceModel.Description.ServiceMetadataBehavior> in the configuration file as in the previous example, but do not specify any endpoints. The configuration file would then look like this.  \n  \n    ```xml  \n    <configuration>  \n      <system.serviceModel>  \n        <behaviors>  \n          <serviceBehaviors>  \n            <behavior name=\"SimpleServiceBehavior\">  \n              <serviceMetadata httpGetEnabled=\"True\" policyVersion=\"Policy12\" />  \n            </behavior>  \n          </serviceBehaviors>  \n        </behaviors>  \n  \n      </system.serviceModel>  \n    </configuration>  \n    ```  \n  \n     Because the service has a <xref:System.ServiceModel.Description.ServiceMetadataBehavior> with the `httpGetEnabled` set to `true`, the service has publishing metadata enabled, and because no endpoints were explicitly added, the runtime adds the default endpoints. For more information about default endpoints, bindings, and behaviors, see [Simplified Configuration](../../../../docs/framework/wcf/simplified-configuration.md) and [Simplified Configuration for WCF Services](../../../../docs/framework/wcf/samples/simplified-configuration-for-wcf-services.md).  \n  \n## Example  \n The following code example shows the implementation of a basic WCF service and the configuration file that publishes metadata for the service.  \n  \n```csharp  \nusing System;  \nusing System.Runtime.Serialization;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Description;  \n  \nnamespace Metadata.Samples  \n{  \n    [ServiceContract]  \n    public interface ISimpleService  \n    {  \n        [OperationContract]  \n        string SimpleMethod(string msg);  \n    }  \n  \n    class SimpleService : ISimpleService  \n    {  \n        public string SimpleMethod(string msg)  \n        {  \n            Console.WriteLine(\"The caller passed in \" + msg);  \n            return \"Hello \" + msg;  \n        }  \n    }  \n  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ServiceHost host = new ServiceHost(typeof(SimpleService),  \n                new Uri(\"http://localhost:8001/MetadataSample\"));   \n            try  \n            {  \n                // Open the service host to accept incoming calls  \n                host.Open();  \n  \n                // The service can now be accessed.  \n                Console.WriteLine(\"The service is ready.\");  \n                Console.WriteLine(\"Press <ENTER> to terminate service.\");  \n                Console.WriteLine();  \n                Console.ReadLine();  \n  \n                // Close the ServiceHostBase to shutdown the service.  \n                host.Close();  \n            }  \n            catch (CommunicationException commProblem)  \n            {  \n                Console.WriteLine(\"There was a communication problem. \" + commProblem.Message);  \n                Console.Read();  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```xml  \n<configuration>  \n  <system.serviceModel>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"SimpleServiceBehavior\">  \n          <serviceMetadata httpGetEnabled=\"True\" policyVersion=\"Policy12\" />  \n          <serviceDebug includeExceptionDetailInFaults=\"False\" />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n  </system.serviceModel>  \n</configuration>  \n```  \n  \n## See also\n\n- <xref:System.ServiceModel.Description.ServiceMetadataBehavior>\n- [How to: Host a WCF Service in a Managed Application](../../../../docs/framework/wcf/how-to-host-a-wcf-service-in-a-managed-application.md)\n- [Self-Host](../../../../docs/framework/wcf/samples/self-host.md)\n- [Metadata Architecture Overview](../../../../docs/framework/wcf/feature-details/metadata-architecture-overview.md)\n- [Using Metadata](../../../../docs/framework/wcf/feature-details/using-metadata.md)\n- [How to: Publish Metadata for a Service Using Code](../../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-code.md)\n","nodes":[{"pos":[4,149],"embed":true,"restype":"x-metadata","content":"title: \"How to: Publish Metadata for a Service Using a Configuration File\"\nms.date: \"03/30/2017\"\nms.assetid: f061443f-92df-4824-b36a-609c4cd14a17","nodes":[{"content":"How to: Publish Metadata for a Service Using a Configuration File","nodes":[{"pos":[0,65],"content":"How to: Publish Metadata for a Service Using a Configuration File","nodes":[{"content":"How to: Publish Metadata for a Service Using a Configuration File","pos":[0,65]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[156,221],"content":"How to: Publish Metadata for a Service Using a Configuration File","linkify":"How to: Publish Metadata for a Service Using a Configuration File","nodes":[{"content":"How to: Publish Metadata for a Service Using a Configuration File","pos":[0,65]}]},{"content":"This is one of two how-to topics that demonstrate publishing metadata for a Windows Communication Foundation (WCF) service.","pos":[222,345]},{"content":"There are two ways to specify how a service should publish metadata, using a configuration file and using code.","pos":[346,457]},{"content":"This topic shows how to publish metadata for a service using a configuration file.","pos":[458,540]},{"pos":[548,862],"content":"[!CAUTION]\n This topic shows how to publish metadata in an unsecure manner. Any client can retrieve the metadata from the service. If you require your service to publish metadata in a secure manner, see [Custom Secure Metadata Endpoint](../../../../docs/framework/wcf/samples/custom-secure-metadata-endpoint.md).","leadings":["","> "],"nodes":[{"content":"This topic shows how to publish metadata in an unsecure manner. Any client can retrieve the metadata from the service. If you require your service to publish metadata in a secure manner, see [Custom Secure Metadata Endpoint](../../../../docs/framework/wcf/samples/custom-secure-metadata-endpoint.md).","pos":[12,312],"nodes":[{"content":"This topic shows how to publish metadata in an unsecure manner.","pos":[0,63]},{"content":"Any client can retrieve the metadata from the service.","pos":[64,118]},{"content":"If you require your service to publish metadata in a secure manner, see <bpt id=\"p1\">[</bpt>Custom Secure Metadata Endpoint<ept id=\"p1\">](../../../../docs/framework/wcf/samples/custom-secure-metadata-endpoint.md)</ept>.","pos":[119,300],"source":" If you require your service to publish metadata in a secure manner, see [Custom Secure Metadata Endpoint](../../../../docs/framework/wcf/samples/custom-secure-metadata-endpoint.md)."}]}]},{"content":"For more information about publishing metadata in code, see <bpt id=\"p1\">[</bpt>How to: Publish Metadata for a Service Using Code<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-code.md)</ept>.","pos":[869,1081],"source":"For more information about publishing metadata in code, see [How to: Publish Metadata for a Service Using Code](../../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-code.md)."},{"content":"Publishing metadata allows clients to retrieve the metadata using a WS-Transfer GET request or an HTTP/GET request using the <ph id=\"ph1\">`?wsdl`</ph> query string.","pos":[1082,1228],"source":" Publishing metadata allows clients to retrieve the metadata using a WS-Transfer GET request or an HTTP/GET request using the `?wsdl` query string."},{"content":"To be sure that the code is working, create a basic WCF service.","pos":[1229,1293]},{"content":"For simplicity, a basic self-hosted service is provided in the following code.","pos":[1294,1372]},{"content":"This service is a self-hosted service, which is configured using a configuration file.","pos":[2946,3032]},{"content":"The following configuration file serves as a starting point.","pos":[3033,3093]},{"pos":[3505,3582],"content":"To publish metadata for a WCF service using an application configuration file","linkify":"To publish metadata for a WCF service using an application configuration file","nodes":[{"content":"To publish metadata for a WCF service using an application configuration file","pos":[0,77]}]},{"pos":[3592,3692],"content":"Within the App.config file, after the closing <ph id=\"ph1\">`&lt;/services&gt;`</ph> element, create a <ph id=\"ph2\">`&lt;behaviors&gt;`</ph> element.","source":"Within the App.config file, after the closing `</services>` element, create a `<behaviors>` element."},{"pos":[3700,3769],"content":"Within the <ph id=\"ph1\">`&lt;behaviors&gt;`</ph> element, add a <ph id=\"ph2\">`&lt;serviceBehaviors&gt;`</ph> element.","source":"Within the `<behaviors>` element, add a `<serviceBehaviors>` element."},{"pos":[3777,3913],"content":"Add a <ph id=\"ph1\">`&lt;behavior&gt;`</ph> element to the <ph id=\"ph2\">`&lt;serviceBehaviors&gt;`</ph> element and specify a value for the <ph id=\"ph3\">`name`</ph> attribute of the <ph id=\"ph4\">`&lt;behavior&gt;`</ph> element.","source":"Add a `<behavior>` element to the `<serviceBehaviors>` element and specify a value for the `name` attribute of the `<behavior>` element."},{"content":"Add a <ph id=\"ph1\">`&lt;serviceMetadata&gt;`</ph> element to the <ph id=\"ph2\">`&lt;behavior&gt;`</ph> element.","pos":[3921,3983],"source":"Add a `<serviceMetadata>` element to the `<behavior>` element."},{"content":"Set the <ph id=\"ph1\">`httpGetEnabled`</ph> attribute to <ph id=\"ph2\">`true`</ph> and the <ph id=\"ph3\">`policyVersion`</ph> attribute to Policy15.","pos":[3984,4075],"source":" Set the `httpGetEnabled` attribute to `true` and the `policyVersion` attribute to Policy15."},{"content":"<ph id=\"ph1\">`httpGetEnabled`</ph> allows the service to respond to metadata requests made by an HTTP GET request.","pos":[4076,4172],"source":"`httpGetEnabled` allows the service to respond to metadata requests made by an HTTP GET request."},{"content":"<ph id=\"ph1\">`policyVersion`</ph> tells the service to conform to WS-Policy 1.5 when generating metadata.","pos":[4173,4260],"source":"`policyVersion` tells the service to conform to WS-Policy 1.5 when generating metadata."},{"pos":[4268,4452],"content":"Add a <ph id=\"ph1\">`behaviorConfiguration`</ph> attribute to the <ph id=\"ph2\">`&lt;service&gt;`</ph> element and specify the <ph id=\"ph3\">`name`</ph> attribute of the <ph id=\"ph4\">`&lt;behavior&gt;`</ph> element added in step 1, as shown in the following code example.","source":"Add a `behaviorConfiguration` attribute to the `<service>` element and specify the `name` attribute of the `<behavior>` element added in step 1, as shown in the following code example."},{"pos":[4925,5048],"content":"Add one or more <ph id=\"ph1\">`&lt;endpoint&gt;`</ph> elements with the contract set to <ph id=\"ph2\">`IMetadataExchange`</ph>, as shown in the following code example.","source":"Add one or more `<endpoint>` elements with the contract set to `IMetadataExchange`, as shown in the following code example."},{"pos":[5542,5649],"content":"For the metadata endpoints added in the previous step, set the <ph id=\"ph1\">`binding`</ph> attribute to one of the following:","source":"For the metadata endpoints added in the previous step, set the `binding` attribute to one of the following:"},{"pos":[5663,5701],"content":"<ph id=\"ph1\">`mexHttpBinding`</ph> for HTTP publication.","source":"`mexHttpBinding` for HTTP publication."},{"pos":[5715,5755],"content":"<ph id=\"ph1\">`mexHttpsBinding`</ph> for HTTPS publication.","source":"`mexHttpsBinding` for HTTPS publication."},{"pos":[5769,5818],"content":"<ph id=\"ph1\">`mexNamedPipeBinding`</ph> for named pipe publication.","source":"`mexNamedPipeBinding` for named pipe publication."},{"pos":[5832,5868],"content":"<ph id=\"ph1\">`mexTcpBinding`</ph> for TCP publication.","source":"`mexTcpBinding` for TCP publication."},{"content":"For the metadata endpoints added in a previous step, set the address equal to:","pos":[5878,5956]},{"content":"An empty string to use the host application's base address as the publication point if the base address is the same as the metadata binding.","pos":[5970,6110]},{"content":"A relative address if the host application has a base address.","pos":[6124,6186]},{"content":"An absolute address.","pos":[6200,6220]},{"content":"Build and run the console application.","pos":[6229,6267]},{"content":"Use Internet Explorer to browse to the base address of the service (<ph id=\"ph1\">http://localhost:8001/MetadataSample</ph> in this sample) and verify that the metadata publishing is turned on.","pos":[6277,6451],"source":"Use Internet Explorer to browse to the base address of the service (http://localhost:8001/MetadataSample in this sample) and verify that the metadata publishing is turned on."},{"content":"If not, a message at the top of the resulting page displays: \"Metadata publishing for this service is currently disabled.\"","pos":[6452,6574]},{"pos":[6584,6608],"content":"To use default endpoints","linkify":"To use default endpoints","nodes":[{"content":"To use default endpoints","pos":[0,24]}]},{"content":"To configure metadata on a service that uses default endpoints, specify the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> in the configuration file as in the previous example, but do not specify any endpoints.","pos":[6618,6844],"source":"To configure metadata on a service that uses default endpoints, specify the <xref:System.ServiceModel.Description.ServiceMetadataBehavior> in the configuration file as in the previous example, but do not specify any endpoints."},{"content":"The configuration file would then look like this.","pos":[6845,6894]},{"content":"Because the service has a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> with the <ph id=\"ph2\">`httpGetEnabled`</ph> set to <ph id=\"ph3\">`true`</ph>, the service has publishing metadata enabled, and because no endpoints were explicitly added, the runtime adds the default endpoints.","pos":[7311,7573],"source":"Because the service has a <xref:System.ServiceModel.Description.ServiceMetadataBehavior> with the `httpGetEnabled` set to `true`, the service has publishing metadata enabled, and because no endpoints were explicitly added, the runtime adds the default endpoints."},{"content":"For more information about default endpoints, bindings, and behaviors, see <bpt id=\"p1\">[</bpt>Simplified Configuration<ept id=\"p1\">](../../../../docs/framework/wcf/simplified-configuration.md)</ept> and <bpt id=\"p2\">[</bpt>Simplified Configuration for WCF Services<ept id=\"p2\">](../../../../docs/framework/wcf/samples/simplified-configuration-for-wcf-services.md)</ept>.","pos":[7574,7869],"source":" For more information about default endpoints, bindings, and behaviors, see [Simplified Configuration](../../../../docs/framework/wcf/simplified-configuration.md) and [Simplified Configuration for WCF Services](../../../../docs/framework/wcf/samples/simplified-configuration-for-wcf-services.md)."},{"pos":[7878,7885],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example shows the implementation of a basic WCF service and the configuration file that publishes metadata for the service.","pos":[7889,8031]},{"pos":[10026,10034],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[10103,10242],"content":"<bpt id=\"p1\">[</bpt>How to: Host a WCF Service in a Managed Application<ept id=\"p1\">](../../../../docs/framework/wcf/how-to-host-a-wcf-service-in-a-managed-application.md)</ept>","source":"[How to: Host a WCF Service in a Managed Application](../../../../docs/framework/wcf/how-to-host-a-wcf-service-in-a-managed-application.md)"},{"pos":[10245,10309],"content":"<bpt id=\"p1\">[</bpt>Self-Host<ept id=\"p1\">](../../../../docs/framework/wcf/samples/self-host.md)</ept>","source":"[Self-Host](../../../../docs/framework/wcf/samples/self-host.md)"},{"pos":[10312,10426],"content":"<bpt id=\"p1\">[</bpt>Metadata Architecture Overview<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/metadata-architecture-overview.md)</ept>","source":"[Metadata Architecture Overview](../../../../docs/framework/wcf/feature-details/metadata-architecture-overview.md)"},{"pos":[10429,10511],"content":"<bpt id=\"p1\">[</bpt>Using Metadata<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/using-metadata.md)</ept>","source":"[Using Metadata](../../../../docs/framework/wcf/feature-details/using-metadata.md)"},{"pos":[10514,10665],"content":"<bpt id=\"p1\">[</bpt>How to: Publish Metadata for a Service Using Code<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-code.md)</ept>","source":"[How to: Publish Metadata for a Service Using Code](../../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-code.md)"}]}