{"content":"---\ntitle: \"Paging Through a Query Result | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: fa360c46-e5f8-411e-a711-46997771133d\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Paging Through a Query Result\nPaging through a query result is the process of returning the results of a query in smaller subsets of data, or pages. This is a common practice for displaying results to a user in small, easy-to-manage chunks.  \n  \n The **DataAdapter** provides a facility for returning only a page of data, through overloads of the **Fill** method. However, this might not be the best choice for paging through large query results because, although the **DataAdapter** fills the target <xref:System.Data.DataTable> or <xref:System.Data.DataSet> with only the requested records, the resources to return the entire query are still used. To return a page of data from a data source without using the resources to return the entire query, specify additional criteria for your query that reduce the rows returned to only those required.  \n  \n To use the **Fill** method to return a page of data, specify a **startRecord** parameter, for the first record in the page of data, and a **maxRecords** parameter, for the number of records in the page of data.  \n  \n The following code example shows how to use the **Fill** method to return the first page of a query result where the page size is five records.  \n  \n```vb  \nDim currentIndex As Integer = 0  \nDim pageSize As Integer = 5  \n  \nDim orderSQL As String = \"SELECT * FROM dbo.Orders ORDER BY OrderID\"  \n' Assumes that connection is a valid SqlConnection object.  \nDim adapter As SqlDataAdapter = _  \n  New SqlDataAdapter(orderSQL, connection)  \n  \nDim dataSet As DataSet = New DataSet()  \nadapter.Fill(dataSet, currentIndex, pageSize, \"Orders\")  \n```  \n  \n```csharp  \nint currentIndex = 0;  \nint pageSize = 5;  \n  \nstring orderSQL = \"SELECT * FROM Orders ORDER BY OrderID\";  \n// Assumes that connection is a valid SqlConnection object.  \nSqlDataAdapter adapter = new SqlDataAdapter(orderSQL, connection);  \n  \nDataSet dataSet = new DataSet();  \nadapter.Fill(dataSet, currentIndex, pageSize, \"Orders\");  \n```  \n  \n In the previous example, the **DataSet** is only filled with five records, but the entire **Orders** table is returned. To fill the **DataSet** with those same five records, but only return five records, use the TOP and WHERE clauses in your SQL statement, as in the following code example.  \n  \n```vb  \nDim pageSize As Integer = 5  \n  \nDim orderSQL As String = \"SELECT TOP \" & pageSize & _  \n  \" * FROM Orders ORDER BY OrderID\"  \nDim adapter As SqlDataAdapter = _  \n  New SqlDataAdapter(orderSQL, connection)  \n  \nDim dataSet As DataSet = New DataSet()  \nadapter.Fill(dataSet, \"Orders\")   \n```  \n  \n```csharp  \nint pageSize = 5;  \n  \nstring orderSQL = \"SELECT TOP \" + pageSize +   \n  \" * FROM Orders ORDER BY OrderID\";  \nSqlDataAdapter adapter = new SqlDataAdapter(orderSQL, connection);  \n  \nDataSet dataSet = new DataSet();  \nadapter.Fill(dataSet, \"Orders\");  \n```  \n  \n Note that, when paging through the query results in this way, you must preserve the unique identifier that orders the rows, in order to pass the unique ID to the command to return the next page of records, as shown in the following code example.  \n  \n```vb  \nDim lastRecord As String = _  \n  dataSet.Tables(\"Orders\").Rows(pageSize - 1)(\"OrderID\").ToString()  \n```  \n  \n```csharp  \nstring lastRecord =   \n  dataSet.Tables[\"Orders\"].Rows[pageSize - 1][\"OrderID\"].ToString();  \n```  \n  \n To return the next page of records using the overload of the **Fill** method that takes the **startRecord** and **maxRecords** parameters, increment the current record index by the page size and fill the table. Remember that the database server returns the entire query results even though only one page of records is added to the **DataSet**. In the following code example, the table rows are cleared before they are filled with the next page of data. You might want to preserve a certain number of returned rows in a local cache to reduce trips to the database server.  \n  \n```vb  \ncurrentIndex = currentIndex + pageSize  \n  \ndataSet.Tables(\"Orders\").Rows.Clear()  \n  \nadapter.Fill(dataSet, currentIndex, pageSize, \"Orders\")  \n```  \n  \n```csharp  \ncurrentIndex += pageSize;  \n  \ndataSet.Tables[\"Orders\"].Rows.Clear();  \n  \nadapter.Fill(dataSet, currentIndex, pageSize, \"Orders\");  \n```  \n  \n To return the next page of records without having the database server return the entire query, specify restrictive criteria to the SELECT statement. Because the preceding example preserved the last record returned, you can use it in the WHERE clause to specify a starting point for the query, as shown in the following code example.  \n  \n```vb  \norderSQL = \"SELECT TOP \" & pageSize & _  \n  \" * FROM Orders WHERE OrderID > \" & lastRecord & \" ORDER BY OrderID\"  \nadapter.SelectCommand.CommandText = orderSQL  \n  \ndataSet.Tables(\"Orders\").Rows.Clear()  \n  \nadapter.Fill(dataSet, \"Orders\")  \n```  \n  \n```csharp  \norderSQL = \"SELECT TOP \" + pageSize +   \n  \" * FROM Orders WHERE OrderID > \" + lastRecord + \" ORDER BY OrderID\";  \nadapter.SelectCommand.CommandText = orderSQL;  \n  \ndataSet.Tables[\"Orders\"].Rows.Clear();  \n  \nadapter.Fill(dataSet, \"Orders\");  \n```  \n  \n## See Also  \n [DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[12,58],"content":"Paging Through a Query Result | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Paging Through a Query Result | Microsoft Docs","pos":[0,46]}]},{"pos":[367,396],"content":"Paging Through a Query Result","linkify":"Paging Through a Query Result","nodes":[{"content":"Paging Through a Query Result","pos":[0,29]}]},{"content":"Paging through a query result is the process of returning the results of a query in smaller subsets of data, or pages.","pos":[397,515]},{"content":"This is a common practice for displaying results to a user in small, easy-to-manage chunks.","pos":[516,607]},{"content":"The <bpt id=\"p1\">**</bpt>DataAdapter<ept id=\"p1\">**</ept> provides a facility for returning only a page of data, through overloads of the <bpt id=\"p2\">**</bpt>Fill<ept id=\"p2\">**</ept> method.","pos":[614,730],"source":"The **DataAdapter** provides a facility for returning only a page of data, through overloads of the **Fill** method."},{"content":"However, this might not be the best choice for paging through large query results because, although the <bpt id=\"p1\">**</bpt>DataAdapter<ept id=\"p1\">**</ept> fills the target <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> with only the requested records, the resources to return the entire query are still used.","pos":[731,1016],"source":" However, this might not be the best choice for paging through large query results because, although the **DataAdapter** fills the target <xref:System.Data.DataTable> or <xref:System.Data.DataSet> with only the requested records, the resources to return the entire query are still used."},{"content":"To return a page of data from a data source without using the resources to return the entire query, specify additional criteria for your query that reduce the rows returned to only those required.","pos":[1017,1213]},{"pos":[1220,1430],"content":"To use the <bpt id=\"p1\">**</bpt>Fill<ept id=\"p1\">**</ept> method to return a page of data, specify a <bpt id=\"p2\">**</bpt>startRecord<ept id=\"p2\">**</ept> parameter, for the first record in the page of data, and a <bpt id=\"p3\">**</bpt>maxRecords<ept id=\"p3\">**</ept> parameter, for the number of records in the page of data.","source":"To use the **Fill** method to return a page of data, specify a **startRecord** parameter, for the first record in the page of data, and a **maxRecords** parameter, for the number of records in the page of data."},{"pos":[1437,1580],"content":"The following code example shows how to use the <bpt id=\"p1\">**</bpt>Fill<ept id=\"p1\">**</ept> method to return the first page of a query result where the page size is five records.","source":"The following code example shows how to use the **Fill** method to return the first page of a query result where the page size is five records."},{"content":"In the previous example, the <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> is only filled with five records, but the entire <bpt id=\"p2\">**</bpt>Orders<ept id=\"p2\">**</ept> table is returned.","pos":[2343,2462],"source":"In the previous example, the **DataSet** is only filled with five records, but the entire **Orders** table is returned."},{"content":"To fill the <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept> with those same five records, but only return five records, use the TOP and WHERE clauses in your SQL statement, as in the following code example.","pos":[2463,2633],"source":" To fill the **DataSet** with those same five records, but only return five records, use the TOP and WHERE clauses in your SQL statement, as in the following code example."},{"content":"Note that, when paging through the query results in this way, you must preserve the unique identifier that orders the rows, in order to pass the unique ID to the command to return the next page of records, as shown in the following code example.","pos":[3217,3462]},{"content":"To return the next page of records using the overload of the <bpt id=\"p1\">**</bpt>Fill<ept id=\"p1\">**</ept> method that takes the <bpt id=\"p2\">**</bpt>startRecord<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>maxRecords<ept id=\"p3\">**</ept> parameters, increment the current record index by the page size and fill the table.","pos":[3702,3912],"source":"To return the next page of records using the overload of the **Fill** method that takes the **startRecord** and **maxRecords** parameters, increment the current record index by the page size and fill the table."},{"content":"Remember that the database server returns the entire query results even though only one page of records is added to the <bpt id=\"p1\">**</bpt>DataSet<ept id=\"p1\">**</ept>.","pos":[3913,4045],"source":" Remember that the database server returns the entire query results even though only one page of records is added to the **DataSet**."},{"content":"In the following code example, the table rows are cleared before they are filled with the next page of data.","pos":[4046,4154]},{"content":"You might want to preserve a certain number of returned rows in a local cache to reduce trips to the database server.","pos":[4155,4272]},{"content":"To return the next page of records without having the database server return the entire query, specify restrictive criteria to the SELECT statement.","pos":[4596,4744]},{"content":"Because the preceding example preserved the last record returned, you can use it in the WHERE clause to specify a starting point for the query, as shown in the following code example.","pos":[4745,4928]},{"pos":[5462,5470],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>DataAdapters and DataReaders<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept><ph id=\"ph1\"> </ph>","pos":[5474,5577],"source":"[DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[5580,5684],"source":" [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}