<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="enhancing-debugging-with-the-debugger-display-attributes.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b61387e921aa8de1d06e9298ab12e172df7a7bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\debug-trace-profile\enhancing-debugging-with-the-debugger-display-attributes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ff17d83ba00f70de1ca4f4686eec97ae283e92c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bccd2649457aba33044559133ef7d8103b711fb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Enhancing Debugging with the Debugger Display Attributes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Enhancing Debugging with the Debugger Display Attributes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Debugger display attributes allow the developer of the type, who specifies and best understands the runtime behavior of that type, to also specify what that type will look like when it is displayed in a debugger.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In addition, debugger display attributes that provide a <ph id="ph1">`Target`</ph> property can be applied at the assembly level by users without knowledge of the source code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph> attribute controls how a type or member is displayed in the debugger variable windows.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerBrowsableAttribute&gt;</ph> attribute determines if and how a field or property is displayed in the debugger variable windows.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerTypeProxyAttribute&gt;</ph> attribute specifies a substitute type, or a proxy, for a type and changes the way the type is displayed in debugger windows.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When you view a variable that has a proxy, or substitute type, the proxy stands in for the original type in the debugger display window<bpt id="p1">**</bpt>.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The debugger variable windowdisplays only the public members of the proxy type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Private members are not displayed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Using the DebuggerDisplayAttribute</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute.%23ctor%2A&gt;</ph> constructor has a single argument: a string to be displayed in the value column for instances of the type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This string can contain braces ({ and }).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The text within a pair of braces is evaluated as an expression.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, the following C# code causes "Count = 4" to be displayed when the plus sign (+) is selected to expand the debugger display for an instance of <ph id="ph1">`MyHashtable`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Attributes applied to properties referenced in the expression are not processed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For the C# compiler, a general expression is allowed that has only implicit access to this reference for the current instance of the target type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The expression is limited; there is no access to aliases, locals, or pointers.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In C# code, you can use a general expression between the braces that has implicit access to the <ph id="ph1">`this`</ph> pointer for the current instance of the target type only.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, if a C# object has an overridden <ph id="ph1">`ToString()`</ph>, the debugger will call the override and show its result instead of the standard <ph id="ph2">`{&lt;typeName&gt;}.`</ph> Thus, if you have overridden <ph id="ph3">`ToString()`</ph>, you do not need to use <ph id="ph4">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you use both, the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph> attribute takes precedence over the <ph id="ph2">`ToString()`</ph> override.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Using the DebuggerBrowsableAttribute</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerBrowsableAttribute&gt;</ph> to a field or property to specify how the field or property is to be displayed in the debugger window.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The constructor for this attribute takes one of the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerBrowsableState&gt;</ph> enumeration values, which specifies one of the following states:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.DebuggerBrowsableState&gt;</ph> indicates that the member is not displayed in the data window.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, using this value for the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerBrowsableAttribute&gt;</ph> on a field removes the field from the hierarchy; the field is not displayed when you expand the enclosing type by clicking the plus sign (+) for the type instance.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.DebuggerBrowsableState&gt;</ph> indicates that the member is displayed but not expanded by default.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is the default behavior.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.DebuggerBrowsableState&gt;</ph> indicates that the member itself is not shown, but its constituent objects are displayed if it is an array or collection.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerBrowsableAttribute&gt;</ph> is not supported by Visual Basic in the .NET Framework version 2.0.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following code example shows the use of the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerBrowsableAttribute&gt;</ph> to prevent the property following it from appearing in the debug window for the class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Using the DebuggerTypeProxy</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerTypeProxyAttribute&gt;</ph> attribute when you need to significantly and fundamentally change the debugging view of a type, but not change the type itself.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerTypeProxyAttribute&gt;</ph> attribute is used to specify a display proxy for a type, allowing a developer to tailor the view for the type.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This attribute, like the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph>, can be used at the assembly level, in which case the <ph id="ph2">&lt;xref:System.Diagnostics.DebuggerTypeProxyAttribute.Target%2A&gt;</ph> property specifies the type for which the proxy will be used.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The recommended usage is that this attribute specifies a private nested type that occurs within the type to which the attribute is applied.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An expression evaluator that supports type viewers checks for this attribute when a type is displayed.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the attribute is found, the expression evaluator substitutes the display proxy type for the type the attribute is applied to.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerTypeProxyAttribute&gt;</ph> is present, the debugger variable window displays only the public members of the proxy type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Private members are not displayed.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The behavior of the data window is not changed by attribute-enhanced views.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To avoid unnecessary performance penalties, attributes of the display proxy are not processed until the object is expanded, either through the user clicking the plus sign (+) next to the type in a data window, or through the application of the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerBrowsableAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Therefore, it is recommended that no attributes be applied to the display type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Attributes can and should be applied within the body of the display type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following code example shows the use of the <ph id="ph1">&lt;xref:System.Diagnostics.DebuggerTypeProxyAttribute&gt;</ph> to specify a type to be used as a debugger display proxy.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following code example can be viewed in <ph id="ph1">[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]</ph> to see the results of applying the <ph id="ph2">&lt;xref:System.Diagnostics.DebuggerDisplayAttribute&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.DebuggerBrowsableAttribute&gt;</ph>, and <ph id="ph4">&lt;xref:System.Diagnostics.DebuggerTypeProxyAttribute&gt;</ph> attributes.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Diagnostics.DebuggerBrowsableAttribute#1<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.DebuggerBrowsableAttribute/cpp/program.cpp#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Diagnostics.DebuggerBrowsableAttribute#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DebuggerBrowsableAttribute/CS/program.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Diagnostics.DebuggerBrowsableAttribute#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DebuggerBrowsableAttribute/VB/module1.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>