<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="project-structure.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab484ccc2c5b51b2ee1dca57df51669d288f3e6b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\porting\project-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8be5a227396177aa7c9429091ac5fc7f551200fd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">455624674fc7e42026320f5f4d9458f51c8e6d11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Organize projects for .NET Framework and .NET Core</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Help for project owners who want to compile their solution against .NET Framework and .NET Core side-by-side.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Organize your project to support both .NET Framework and .NET Core</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Learn how to create a solution that compiles for both .NET Framework and .NET Core side-by-side.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>See several options to organize projects to help you achieve this goal.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here are some typical scenarios to consider when you're deciding how to setup your project layout with .NET Core.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The list may not cover everything you want; prioritize based on your project's needs.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Combine existing projects and .NET Core projects into single projects<ept id="p2">**</ept><ept id="p1">](#replace-existing-projects-with-a-multi-targeted-net-core-project)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>What this is good for:<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Simplifying your build process by compiling a single project rather than compiling multiple projects, each targeting a different .NET Framework version or platform.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Simplifying source file management for multi-targeted projects because you must manage a single project file.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When adding/removing source files, the alternatives require you to manually sync these with your other projects.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Easily generating a NuGet package for consumption.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Allows you to write code for a specific .NET Framework version in your libraries through the use of compiler directives.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Unsupported scenarios:<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Requires developers to use Visual Studio 2017 to open existing projects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To support older versions of Visual Studio, <bpt id="p1">[</bpt>keeping your project files in different folders<ept id="p1">](#support-vs)</ept> is a better option.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="support-vs"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept><bpt id="p2">[</bpt><bpt id="p3">**</bpt>Keep existing projects and new .NET Core projects separate<ept id="p3">**</ept><ept id="p2">](#keep-existing-projects-and-create-a-net-core-project)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>What this is good for:<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Continuing to support development on existing projects without having to upgrade for developers/contributors who may not have Visual Studio 2017.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Decreasing the possibility of creating new bugs in existing projects because no code churn is required in those projects.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Consider the repository below:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Existing project</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Source Code<ept id="p2">**</ept><ept id="p1">](https://github.com/dotnet/samples/tree/master/framework/libraries/migrate-library/)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following describes several ways to add support for .NET Core for this repository depending on the constraints and complexity of the existing projects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Replace existing projects with a multi-targeted .NET Core project</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Reorganize the repository so that any existing <bpt id="p1">*</bpt><ph id="ph1">\*</ph>.csproj<ept id="p1">*</ept> files are removed and a single <bpt id="p2">*</bpt><ph id="ph2">\*</ph>.csproj<ept id="p2">*</ept> file is created that targets multiple frameworks.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is a great option because a single project is able to compile for different frameworks.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It also has the power to handle different compilation options and dependencies per targeted framework.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Create an csproj that targets multiple frameworks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Source Code<ept id="p2">**</ept><ept id="p1">](https://github.com/dotnet/samples/tree/master/framework/libraries/migrate-library-csproj/)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Changes to note are:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Replacement of <bpt id="p1">*</bpt>packages.config<ept id="p1">*</ept> and <bpt id="p2">*</bpt><ph id="ph1">\*</ph>.csproj<ept id="p2">*</ept> with a new <bpt id="p3">[</bpt>.NET Core <bpt id="p4">*</bpt><ph id="ph2">\*</ph>.csproj<ept id="p4">*</ept><ept id="p3">](https://github.com/dotnet/samples/tree/master/framework/libraries/migrate-library-csproj/src/Car/Car.csproj)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>NuGet packages are specified with <ph id="ph1">`&lt;PackageReference&gt; ItemGroup`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Keep existing projects and create a .NET Core project</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If there are existing projects that target older frameworks, you may want to leave these projects untouched and use a .NET Core project to target future frameworks.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>.NET Core project with existing project in different folder</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Source Code<ept id="p2">**</ept><ept id="p1">](https://github.com/dotnet/samples/tree/master/framework/libraries/migrate-library-csproj-keep-existing/)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Changes to note are:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The .NET Core and existing projects are kept in separate folders.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Keeping projects in separate folders avoids forcing you to have Visual Studio 2017.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can create a separate solution that only opens the old projects.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Please see the <bpt id="p1">[</bpt>.NET Core porting documentation<ept id="p1">](index.md)</ept> for more guidance on migrating to .NET Core.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>