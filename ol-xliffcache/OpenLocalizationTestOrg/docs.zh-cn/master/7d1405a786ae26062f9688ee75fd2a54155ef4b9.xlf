<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="anticipating-adopting-wcf-migration.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d1405a786ae26062f9688ee75fd2a54155ef4b9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\anticipating-adopting-wcf-migration.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b26212b8773132a46435605dd30c92e12278292</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">267866c7ba30842cac51aab2bd6d0275deb4a031</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Anticipating Adopting the Windows Communication Foundation: Easing Future Migration | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Anticipating Adopting the Windows Communication Foundation: Easing Future Migration</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To ensure an easier future migration of new ASP.NET applications to <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, follow the preceding recommendations as well as the following recommendations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Protocols</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Disable ASP.NET 2.0’s support for SOAP 1.2:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Doing so is advisable because <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> requires messages conforming to different protocols, like SOAP 1.1 and SOAP 1.2, to go by using different endpoints.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If an ASP.NET 2.0 Web service is configured to support both SOAP 1.1 and SOAP 1.2, which is the default configuration, then it cannot be migrated forward to a single <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint at the original address that would be certainly be compatible with all of the ASP.NET Web service’s existing clients.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Also choosing SOAP 1.2 instead of 1.1 will more severely restrict the clientele of the service.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Service Development</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>allows you to define service contracts by applying the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> either to interfaces or to classes.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It is recommended to apply the attribute to an interface rather than to a class, because doing so creates a definition of a contract that can be variously implemented by any number of classes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>ASP.NET 2.0 supports the option of applying the <ph id="ph1">&lt;xref:System.Web.Services.WebService&gt;</ph> attribute to interfaces as well as classes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, as mentioned already, there is a defect in ASP.NET 2.0, by which the Namespace parameter of the <ph id="ph1">&lt;xref:System.Web.Services.WebService&gt;</ph> attribute has no effect when that attribute is applied to an interface rather than a class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Since it is generally advisable to modify the namespace of a service from the default value, http://tempuri.org, using the Namespace parameter of the <ph id="ph1">&lt;xref:System.Web.Services.WebService&gt;</ph> attribute, one should continue defining ASP.NET Web Services by applying the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> attribute either to interfaces or to classes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Have as little code as possible in the methods by which those interfaces are defined.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Have them delegate their work to other classes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>New <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service types could then also delegate their substantive work to those classes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Provide explicit names for the operations of a service using the <ph id="ph1">`MessageName`</ph> parameter of the <ph id="ph2">&lt;xref:System.Web.Services.WebMethodAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Doing so is important, because the default names for operations in ASP.NET are different from the default names supplied by <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By providing explicit names, you avoid relying on the default ones.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Do not implement ASP.NET Web service operations with polymorphic methods, because <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not support implementing operations with polymorphic methods.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute&gt;</ph> to provide explicit values for the SOAPAction HTTP headers by which HTTP requests will be routed to methods.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Taking this approach will circumvent having to rely on the default SOAPAction values used by ASP.NET and <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> being the same.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Avoid using SOAP extensions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If SOAP extensions are required, then determine whether the purpose for which they are being considered is a feature that is already provided by <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If that is indeed the case, then reconsider the choice to not adopt <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> right away.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>State Management</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Avoid having to maintain state in services.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Not only does maintaining state tend to compromise the scalability of an application, but the state management mechanisms of ASP.NET and <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> are very different, although <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does support the ASP.NET mechanisms in ASP.NET compatibility mode.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In designing the structures of the data types to be sent and received by a service, also design structures to represent the various types of exceptions that might occur within a service that one might wish to convey to a client.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Give such classes the ability to serialize themselves to XML:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The classes can then be used to provide the details for explicitly thrown <ph id="ph1">&lt;xref:System.Web.Services.Protocols.SoapException&gt;</ph> instances:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These exception classes will be readily reusable with the<ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph><ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> class to throw a new <ph id="ph3">`FaultException&lt;AnticipatedException&gt;(anticipatedException);`</ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Security</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following are some security recommendations.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Avoid using ASP.NET 2.0 Profiles, as using them would restrict the use of ASP.NET Integration Mode if the service was migrated to <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Avoid using ACLs to control access to services, as ASP.NET Web services supports ACLs using Internet Information Services (IIS), <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not—because ASP.NET Web services depend on IIS for hosting, and WCF does not necessarily have to be hosted in IIS.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Do consider using ASP.NET 2.0 Role Providers for authorizing access to the resources of a service.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anticipating Adopting the Windows Communication Foundation: Easing Future Integration<ept id="p1">](../../../../docs/framework/wcf/feature-details/anticipating-adopting-the-wcf-easing-future-integration.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>