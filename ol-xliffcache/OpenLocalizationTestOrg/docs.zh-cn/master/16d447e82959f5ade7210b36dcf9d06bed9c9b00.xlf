<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="clr-method-to-canonical-function-mapping.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16d447e82959f5ade7210b36dcf9d06bed9c9b00</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\language-reference\clr-method-to-canonical-function-mapping.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c25bafd6e8037f276d1bae39a265d885f319d8e1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a7322e3f9afcd162ad415d3396a1918b0bc8a9a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>CLR Method to Canonical Function Mapping</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CLR Method to Canonical Function Mapping</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Entity Framework provides a set of canonical functions that implement functionality that is common across many database systems, such as string manipulation and mathematical functions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This enables developers to target a broad range of database systems.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When called from a querying technology, such as LINQ to Entities, these canonical functions are translated to the correct corresponding store function for the provider being used.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This allows function invocations to be expressed in a common form across data sources, providing a consistent query experience across data sources.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The bitwise AND, OR, NOT, and XOR operators are also mapped to canonical functions when the operand is a numeric type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For Boolean operands, the bitwise AND, OR, NOT, and XOR operators compute the logical AND, OR, NOT, and XOR operations of their operands.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Canonical Functions<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For LINQ scenarios, queries against the Entity Framework involve mapping certain CLR methods to methods on the underlying data source through canonical functions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Any method calls in a LINQ to Entities query that are not explicitly mapped to a canonical function will result in a runtime <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> exception being thrown.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>System.String Method (Static) Mapping</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>System.String method (static)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Canonical function</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>System.String Concat(String <ph id="ph1">`str0`</ph>, String <ph id="ph2">`str1`</ph>)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Concat(<ph id="ph1">`str0`</ph>, <ph id="ph2">`str1`</ph>)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>System.String Concat(String <ph id="ph1">`str0`</ph>, String <ph id="ph2">`str1`</ph>, String <ph id="ph3">`str2`</ph>)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Concat(Concat(<ph id="ph1">`str0`</ph>, <ph id="ph2">`str1`</ph>), <ph id="ph3">`str2`</ph>)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>System.String Concat(String <ph id="ph1">`str0`</ph>, String <ph id="ph2">`str1`</ph>, String <ph id="ph3">`str2`</ph>, String <ph id="ph4">`str03`</ph>)</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Concat(Concat(Concat(<ph id="ph1">`str0`</ph>, <ph id="ph2">`str1`</ph>), <ph id="ph3">`str2`</ph>), <ph id="ph4">`str3`</ph>)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Boolean Equals(String <ph id="ph1">`a`</ph>, String <ph id="ph2">`b`</ph>)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>= operator</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Boolean IsNullOrEmpty(String <ph id="ph1">`value`</ph>)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>(IsNull(<ph id="ph1">`value`</ph>)) OR Length(<ph id="ph2">`value`</ph>) = 0</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Boolean op_Equality(String <ph id="ph1">`a`</ph>, String <ph id="ph2">`b`</ph>)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>= operator</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Boolean op_Inequality(String <ph id="ph1">`a`</ph> , String <ph id="ph2">`b`</ph>)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>!= operator</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.Strings.Trim(String <ph id="ph1">`str`</ph>)</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Trim(<ph id="ph1">`str`</ph>)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.Strings.LTrim(String <ph id="ph1">`str`</ph>)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Ltrim(<ph id="ph1">`str`</ph>)</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.Strings.RTrim(String <ph id="ph1">`str`</ph>)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Rtrim(<ph id="ph1">`str`</ph>)</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.Strings.Len(String <ph id="ph1">`expression`</ph>)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Length(<ph id="ph1">`expression`</ph>)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.Strings.Left(String <ph id="ph1">`str`</ph>, Int32 <ph id="ph2">`Length`</ph>)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Left(<ph id="ph1">`str`</ph>, <ph id="ph2">`Length`</ph>)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.Strings.Mid(String <ph id="ph1">`str`</ph>, Int32 <ph id="ph2">`Start`</ph>, Int32 <ph id="ph3">`Length`</ph>)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Substring(<ph id="ph1">`str`</ph>, <ph id="ph2">`Start`</ph>, <ph id="ph3">`Length`</ph>)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.Strings.Right(String <ph id="ph1">`str`</ph>, Int32 <ph id="ph2">`Length`</ph>)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Right(<ph id="ph1">`str`</ph>, <ph id="ph2">`Length`</ph>)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.Strings.UCase(String <ph id="ph1">`Value`</ph>)</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>ToUpper(<ph id="ph1">`Value`</ph>)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.Strings.LCase(String Value)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ToLower(<ph id="ph1">`Value`</ph>)</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>System.String Method (Instance) Mapping</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>System.String method (instance)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Canonical function</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Boolean Contains(String <ph id="ph1">`value`</ph>)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`this`</ph> LIKE '%<ph id="ph2">`value`</ph>%'</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`value`</ph> is not a constant, then this maps to IndexOf(<ph id="ph2">`this`</ph>, <ph id="ph3">`value`</ph>) &gt; 0</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Boolean EndsWith(String <ph id="ph1">`value`</ph>)</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`this`</ph> LIKE <ph id="ph2">`'`</ph><ph id="ph3">%</ph><ph id="ph4">`value`</ph>'</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`value`</ph> is not a constant, then this maps to Right(<ph id="ph2">`this`</ph>, length(<ph id="ph3">`value`</ph>)) = <ph id="ph4">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Boolean StartsWith(String <ph id="ph1">`value`</ph>)</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`this`</ph> LIKE '<ph id="ph2">`value`</ph>%'</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`value`</ph> is not a constant, then this maps to IndexOf(<ph id="ph2">`this`</ph>, <ph id="ph3">`value`</ph>) = 1.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Length</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Length(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Int32 IndexOf(String <ph id="ph1">`value`</ph>)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>IndexOf(<ph id="ph1">`this`</ph>, <ph id="ph2">`value`</ph>) - 1</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>System.String Insert(Int32 <ph id="ph1">`startIndex`</ph>, String <ph id="ph2">`value`</ph>)</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Concat(Concat(Substring(<ph id="ph1">`this`</ph>, 1, <ph id="ph2">`startIndex`</ph>), <ph id="ph3">`value`</ph>), Substring(<ph id="ph4">`this`</ph>, <ph id="ph5">`startIndex`</ph>+1, Length(<ph id="ph6">`this`</ph>) - <ph id="ph7">`startIndex`</ph>))</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>System.String Remove(Int32 <ph id="ph1">`startIndex`</ph>)</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Substring(<ph id="ph1">`this`</ph>, 1, <ph id="ph2">`startIndex`</ph>)</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>System.String Remove(Int32 <ph id="ph1">`startIndex`</ph>, Int32 <ph id="ph2">`count`</ph>)</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Concat(Substring(<ph id="ph1">`this`</ph>, 1, <ph id="ph2">`startIndex`</ph>) , Substring(<ph id="ph3">`this`</ph>, <ph id="ph4">`startIndex`</ph><ph id="ph5"> + </ph><ph id="ph6">`count`</ph> +1, Length(<ph id="ph7">`this`</ph>) - (<ph id="ph8">`startIndex`</ph><ph id="ph9"> + </ph><ph id="ph10">`count`</ph>)))</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remove(<ph id="ph1">`startIndex`</ph>, <ph id="ph2">`count`</ph>) is only supported if <ph id="ph3">`count`</ph> is an integer greater than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>System.String Replace(String <ph id="ph1">`oldValue`</ph>, String <ph id="ph2">`newValue`</ph>)</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Replace(<ph id="ph1">`this`</ph>, <ph id="ph2">`oldValue`</ph>, <ph id="ph3">`newValue`</ph>)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>System.String Substring(Int32 <ph id="ph1">`startIndex`</ph>)</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Substring(<ph id="ph1">`this`</ph>, <ph id="ph2">`startIndex`</ph> +1, Length(<ph id="ph3">`this`</ph>) - <ph id="ph4">`startIndex`</ph>)</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>System.String Substring(Int32 <ph id="ph1">`startIndex`</ph>, Int32 <ph id="ph2">`length`</ph>)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Substring(<ph id="ph1">`this`</ph>, <ph id="ph2">`startIndex`</ph> +1, <ph id="ph3">`length`</ph>)</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>System.String ToLower()</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>ToLower(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>System.String ToUpper()</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ToUpper(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>System.String Trim()</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Trim(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>System.String TrimEnd(Char[] <ph id="ph1">`trimChars`</ph>)</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>RTrim(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>System.String TrimStart(Char[]<ph id="ph1">`trimChars`</ph>)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>LTrim(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Boolean Equals(String <ph id="ph1">`value`</ph>)</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>= operator</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>System.DateTime Method (Static) Mapping</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>System.DateTime method (static)</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Canonical function</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Boolean Equals(DateTime <ph id="ph1">`t1`</ph>, DateTime <ph id="ph2">`t2`</ph>)</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>= operator</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>System.DateTime.Now</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CurrentDateTime()</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>System.DateTime.UtcNow</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CurrentUtcDateTime()</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Boolean op_Equality(DateTime <ph id="ph1">`d1`</ph>, DateTime <ph id="ph2">`d2`</ph>)</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>= operator</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Boolean op_GreaterThan(DateTime <ph id="ph1">`t1`</ph>, DateTime <ph id="ph2">`t2`</ph>)</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>&gt; operator</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Boolean op_GreaterThanOrEqual(DateTime <ph id="ph1">`t1`</ph>, DateTime <ph id="ph2">`t2`</ph>)</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>&gt;= operator</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Boolean op_Inequality(DateTime <ph id="ph1">`t1`</ph>, DateTime <ph id="ph2">`t2`</ph>)</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>!= operator</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Boolean op_LessThan(DateTime <ph id="ph1">`t1`</ph>, DateTime <ph id="ph2">`t2`</ph>)</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>&lt; operator</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Boolean op_LessThanOrEqual(DateTime <ph id="ph1">`t1`</ph>, DateTime <ph id="ph2">`t2`</ph>)</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>&lt;= operator</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.DateAndTime.DatePart( _</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>ByVal <ph id="ph1">`Interval`</ph> As DateInterval, <ph id="ph2">\_</ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>ByVal <ph id="ph1">`DateValue`</ph> As DateTime, <ph id="ph2">\_</ph></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Optional ByVal <ph id="ph1">`FirstDayOfWeekValue`</ph> As FirstDayOfWeek = VbSunday, <ph id="ph2">\_</ph></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Optional ByVal <ph id="ph1">`FirstWeekOfYearValue`</ph> As FirstWeekOfYear = VbFirstJan1 <ph id="ph2">\_</ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>) As Integer</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>See the DatePart Function section for more information.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.DateAndTime.Now</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>CurrentDateTime()</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.DateAndTime.Year(DateTime <ph id="ph1">`TimeValue`</ph>)</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Year()</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.DateAndTime.Month(DateTime <ph id="ph1">`TimeValue`</ph>)</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Month()</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.DateAndTime.Day(DateTime <ph id="ph1">`TimeValue`</ph>)</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Day()</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.DateAndTime.Hour(DateTime <ph id="ph1">`TimeValue`</ph>)</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Hour()</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.DateAndTime.Minute(DateTime <ph id="ph1">`TimeValue`</ph>)</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Minute()</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic.DateAndTime.Second(DateTime <ph id="ph1">`TimeValue`</ph>)</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Second()</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>System.DateTime Method (Instance) Mapping</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>System.DateTime method (instance)</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Canonical function</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Boolean Equals(DateTime <ph id="ph1">`value`</ph>)</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>= operator</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Day</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Day(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Hour</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Hour(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Millisecond</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Millisecond(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Minute</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Minute(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Month</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Month(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Second</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Second(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Year</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Year(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>System.DateTimeOffset Method (Instance) Mapping</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The mapping shown for the <ph id="ph1">`get`</ph> methods on the listed properties.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>System.DateTimeOffset method (instance)</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Canonical function</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Day</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Day(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Hour</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Hour(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Millisecond</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Millisecond(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Minute</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Minute(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Month</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Month(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Second</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Second(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Year</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Year(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.DateTimeOffset.Equals%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> if the compared <ph id="ph3">&lt;xref:System.DateTimeOffset&gt;</ph> objects are equal; <ph id="ph4">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.DateTimeOffset.CompareTo%2A&gt;</ph> method returns 0, 1, or -1 depending on whether the compared <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> object is equal, greater than, or less than, respectively.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>System.DateTimeOffset Method (Static) Mapping</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The mapping shown for the <ph id="ph1">`get`</ph> methods on the listed properties.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>System.DateTimeOffset method (static)</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Canonical function</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>System.DateTimeOffset.Now()</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>CurrentDateTimeOffset()</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>System.TimeSpan Method (Instance) Mapping</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The mapping shown for the <ph id="ph1">`get`</ph> methods on the listed properties.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>System.TimeSpan method (instance)</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Canonical function</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Hours</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Hour(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Milliseconds</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Millisecond(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Minutes</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Minute(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Seconds</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Second(<ph id="ph1">`this`</ph>)</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Not supported against SQL Server 2005.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.TimeSpan.Equals%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> if the compared <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph> objects are equal; <ph id="ph4">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.TimeSpan.CompareTo%2A&gt;</ph> method returns 0, 1, or -1 depending on whether the compared <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> object is equal, greater than, or less than, respectively.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>DatePart Function</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DatePart`</ph> Function is mapped to one of several different canonical functions, depending on the value of <ph id="ph2">`Interval`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The following table displays the canonical function mapping for the supported values of <ph id="ph1">`Interval`</ph>:</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Interval value</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Canonical function</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>DateInterval.Year</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Year()</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>DateInterval.Month</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Month()</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>DateInterval.Day</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Day()</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>DateInterval.Hour</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Hour()</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>DateInterval.Minute</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Minute()</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>DateInterval.Second</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Second()</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Mathematical Function Mapping</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>CLR method</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Canonical function</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>System.Decimal.Ceiling(Decimal <ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Ceiling(<ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>System.Decimal.Floor(Decimal <ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Floor(<ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>System.Decimal.Round(Decimal <ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Round(<ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>System.Math.Ceiling(Decimal <ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Ceiling(<ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>System.Math.Floor(Decimal <ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Floor(<ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>System.Math.Round(Decimal <ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Round(<ph id="ph1">`d`</ph>)</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>System.Math.Ceiling(Double <ph id="ph1">`a`</ph>)</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Ceiling(<ph id="ph1">`a`</ph>)</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>System.Math.Floor(Double <ph id="ph1">`a`</ph>)</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Floor(<ph id="ph1">`a`</ph>)</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>System.Math.Round(Double <ph id="ph1">`a`</ph>)</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Round(<ph id="ph1">`a`</ph>)</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>System.Math.Round(Double value, Int16 digits)</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Round(value, digits)</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>System.Math.Round(Double value, Int32 digits)</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Round(value, digits)</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>System.Math.Round(Decimal value, Int16 digits)</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Round(value, digits)</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>System.Math.Round(Decimal value, Int32, digits)</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Round(value, digits)</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>System.Math.Abs(Int16 value)</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Abs(value)</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>System.Math.Abs(Int32 value)</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Abs(value)</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>System.Math.Abs(Int64 value)</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Abs(value)</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>System.Math.Abs(Byte value)</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Abs(value)</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>System.Math.Abs(Single value)</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Abs(value)</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>System.Math.Abs(Double value)</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Abs(value)</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>System.Math.Abs(Decimal value)</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Abs(value)</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>System.Math.Truncate(Double value, Int16 digits)</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Truncate(value, digits)</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>System.Math.Truncate(Double value, Int32 digits)</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Truncate(value, digits)</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>System.Math.Truncate(Decimal value, Int16 digits)</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Truncate(value, digits)</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>System.Math.Truncate(Decimal value, Int32 digits)</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Truncate(value, digits)</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Int32 value, Int64 exponent)</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Int32 value, Double exponent)</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Int32 value, Decimal exponent)</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Int64 value, Int64 exponent)</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Int64 value, Double exponent)</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Int64 value, Decimal exponent)</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Double value, Int64 exponent)</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Double value, Double exponent)</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Double value, Decimal exponent)</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Decimal value, Int64 exponent)</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Decimal value, Double exponent)</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>System.Math.Power(Decimal value, Decimal exponent)</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Power(value, exponent)</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Bitwise Operator Mapping</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Bitwise operator</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Canonical function for non-Boolean operands</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Canonical function for Boolean operands</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Bitwise AND operator</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>BitWiseAnd</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>op1 AND op2</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Bitwise OR operator</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>BitWiseOr</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>op1 OR op2</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Bitwise NOT operator</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>BitWiseNot</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>NOT(op)</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Bitwise XOR operator</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>BitWiseXor</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>((op1 AND NOT(op2)) OR (NOT(op1) AND op2))</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Other Mapping</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Canonical function</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Guid.NewGuid()</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>NewGuid()</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to Entities<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>