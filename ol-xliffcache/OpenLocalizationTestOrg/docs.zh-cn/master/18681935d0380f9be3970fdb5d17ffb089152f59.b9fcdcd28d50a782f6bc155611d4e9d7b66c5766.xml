{"content":"---\ntitle: \"Friend (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Friend\"\nhelpviewer_keywords: \n  - \"Friend keyword [Visual Basic]\"\n  - \"Friend access modifier\"\n  - \"Friend keyword [Visual Basic], syntax\"\n  - \"Protected Friend keyword combination\"\n  - \"Friend keyword [Visual Basic], and Protected\"\nms.assetid: b664605e-1c79-4728-b996-aa59c50846bc\n---\n# Friend (Visual Basic)\nSpecifies that one or more declared programming elements are accessible only from within the assembly that contains their declaration.  \n  \n## Remarks  \n In many cases, you want programming elements such as classes and structures to be used by the entire assembly, not only by the component that declares them. However, you might not want them to be accessible by code outside the assembly (for example, if the application is proprietary). If you want to limit access to an element in this way, you can declare it by using the `Friend` modifier.  \n  \n Code in other classes, structures, and modules that are compiled to the same assembly can access all the `Friend` elements in that assembly.  \n  \n `Friend` access is often the preferred level for an application's programming elements, and `Friend` is the default access level of an interface, a module, a class, or a structure.  \n  \n You can use `Friend` only at the module, interface, or namespace level. Therefore, the declaration context for a `Friend` element must be a source file, a namespace, an interface, a module, a class, or a structure; it can't be a procedure.  \n\n> [!NOTE]\n> You can also use the [Protected Friend](protected-friend.md) access modifier, which makes a class member accessible from within that class, from derived classes, and from the same assembly in which the class is defined. To restrict access to a member from within its class and from derived classes in the same assembly, you use the [Private Protected](private-protected.md) access modifier.\n\n For a comparison of `Friend` and the other access modifiers, see [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).  \n  \n> [!NOTE]\n>  You can specify that another assembly is a friend assembly, which allows it to access all types and members that are marked as `Friend`. For more information, see [Friend Assemblies](../../../standard/assembly/friend-assemblies.md).  \n  \n## Example  \n The following class uses the `Friend` modifier to allow other programming elements within the same assembly to access certain members.  \n  \n [!code-vb[VbVbalrAccessModifiers#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/vbvbalraccessmodifiers/vb/class1.vb#1)]  \n  \n## Usage  \n You can use the `Friend` modifier in these contexts:  \n  \n [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)  \n  \n [Const Statement](../../../visual-basic/language-reference/statements/const-statement.md)  \n  \n [Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)  \n  \n [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)  \n  \n [Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)  \n  \n [Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md)  \n  \n [Event Statement](../../../visual-basic/language-reference/statements/event-statement.md)  \n  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n [Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)  \n  \n [Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)  \n  \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)  \n  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)  \n  \n## See also\n\n- <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>\n- [Public](../../../visual-basic/language-reference/modifiers/public.md)\n- [Protected](../../../visual-basic/language-reference/modifiers/protected.md)\n- [Private](../../../visual-basic/language-reference/modifiers/private.md)\n- [Private Protected](./private-protected.md)\n- [Protected Friend](./protected-friend.md)\n- [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)\n- [Procedures](../../../visual-basic/programming-guide/language-features/procedures/index.md)\n- [Structures](../../../visual-basic/programming-guide/language-features/data-types/structures.md)\n- [Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)\n","nodes":[{"pos":[4,358],"embed":true,"restype":"x-metadata","content":"title: \"Friend (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Friend\"\nhelpviewer_keywords: \n  - \"Friend keyword [Visual Basic]\"\n  - \"Friend access modifier\"\n  - \"Friend keyword [Visual Basic], syntax\"\n  - \"Protected Friend keyword combination\"\n  - \"Friend keyword [Visual Basic], and Protected\"\nms.assetid: b664605e-1c79-4728-b996-aa59c50846bc","nodes":[{"content":"Friend (Visual Basic)","nodes":[{"pos":[0,21],"content":"Friend (Visual Basic)","nodes":[{"content":"Friend (Visual Basic)","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[365,386],"content":"Friend (Visual Basic)","linkify":"Friend (Visual Basic)","nodes":[{"content":"Friend (Visual Basic)","pos":[0,21]}]},{"content":"Specifies that one or more declared programming elements are accessible only from within the assembly that contains their declaration.","pos":[387,521]},{"pos":[530,537],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In many cases, you want programming elements such as classes and structures to be used by the entire assembly, not only by the component that declares them.","pos":[541,697]},{"content":"However, you might not want them to be accessible by code outside the assembly (for example, if the application is proprietary).","pos":[698,826]},{"content":"If you want to limit access to an element in this way, you can declare it by using the <ph id=\"ph1\">`Friend`</ph> modifier.","pos":[827,932],"source":" If you want to limit access to an element in this way, you can declare it by using the `Friend` modifier."},{"pos":[939,1079],"content":"Code in other classes, structures, and modules that are compiled to the same assembly can access all the <ph id=\"ph1\">`Friend`</ph> elements in that assembly.","source":"Code in other classes, structures, and modules that are compiled to the same assembly can access all the `Friend` elements in that assembly."},{"pos":[1086,1266],"content":"<ph id=\"ph1\">`Friend`</ph> access is often the preferred level for an application's programming elements, and <ph id=\"ph2\">`Friend`</ph> is the default access level of an interface, a module, a class, or a structure.","source":"`Friend` access is often the preferred level for an application's programming elements, and `Friend` is the default access level of an interface, a module, a class, or a structure."},{"content":"You can use <ph id=\"ph1\">`Friend`</ph> only at the module, interface, or namespace level.","pos":[1273,1344],"source":"You can use `Friend` only at the module, interface, or namespace level."},{"content":"Therefore, the declaration context for a <ph id=\"ph1\">`Friend`</ph> element must be a source file, a namespace, an interface, a module, a class, or a structure; it can't be a procedure.","pos":[1345,1512],"source":" Therefore, the declaration context for a `Friend` element must be a source file, a namespace, an interface, a module, a class, or a structure; it can't be a procedure."},{"pos":[1518,1918],"content":"[!NOTE]\nYou can also use the [Protected Friend](protected-friend.md) access modifier, which makes a class member accessible from within that class, from derived classes, and from the same assembly in which the class is defined. To restrict access to a member from within its class and from derived classes in the same assembly, you use the [Private Protected](private-protected.md) access modifier.","leadings":["","> "],"nodes":[{"content":"You can also use the [Protected Friend](protected-friend.md) access modifier, which makes a class member accessible from within that class, from derived classes, and from the same assembly in which the class is defined. To restrict access to a member from within its class and from derived classes in the same assembly, you use the [Private Protected](private-protected.md) access modifier.","pos":[8,398],"nodes":[{"content":"You can also use the <bpt id=\"p1\">[</bpt>Protected Friend<ept id=\"p1\">](protected-friend.md)</ept> access modifier, which makes a class member accessible from within that class, from derived classes, and from the same assembly in which the class is defined.","pos":[0,219],"source":"You can also use the [Protected Friend](protected-friend.md) access modifier, which makes a class member accessible from within that class, from derived classes, and from the same assembly in which the class is defined."},{"content":"To restrict access to a member from within its class and from derived classes in the same assembly, you use the <bpt id=\"p1\">[</bpt>Private Protected<ept id=\"p1\">](private-protected.md)</ept> access modifier.","pos":[220,390],"source":" To restrict access to a member from within its class and from derived classes in the same assembly, you use the [Private Protected](private-protected.md) access modifier."}]}]},{"pos":[1921,2112],"content":"For a comparison of <ph id=\"ph1\">`Friend`</ph> and the other access modifiers, see <bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","source":"For a comparison of `Friend` and the other access modifiers, see [Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"pos":[2120,2363],"content":"[!NOTE]\n You can specify that another assembly is a friend assembly, which allows it to access all types and members that are marked as `Friend`. For more information, see [Friend Assemblies](../../../standard/assembly/friend-assemblies.md).","leadings":["","> "],"nodes":[{"content":"You can specify that another assembly is a friend assembly, which allows it to access all types and members that are marked as `Friend`. For more information, see [Friend Assemblies](../../../standard/assembly/friend-assemblies.md).","pos":[9,241],"nodes":[{"content":"You can specify that another assembly is a friend assembly, which allows it to access all types and members that are marked as <ph id=\"ph1\">`Friend`</ph>.","pos":[0,136],"source":"You can specify that another assembly is a friend assembly, which allows it to access all types and members that are marked as `Friend`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Friend Assemblies<ept id=\"p1\">](../../../standard/assembly/friend-assemblies.md)</ept>.","pos":[137,232],"source":" For more information, see [Friend Assemblies](../../../standard/assembly/friend-assemblies.md)."}]}]},{"pos":[2372,2379],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2383,2517],"content":"The following class uses the <ph id=\"ph1\">`Friend`</ph> modifier to allow other programming elements within the same assembly to access certain members.","source":"The following class uses the `Friend` modifier to allow other programming elements within the same assembly to access certain members."},{"pos":[2660,2665],"content":"Usage","linkify":"Usage","nodes":[{"content":"Usage","pos":[0,5]}]},{"pos":[2669,2721],"content":"You can use the <ph id=\"ph1\">`Friend`</ph> modifier in these contexts:","source":"You can use the `Friend` modifier in these contexts:"},{"pos":[2728,2817],"content":"<bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept>","source":"[Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)"},{"pos":[2824,2913],"content":"<bpt id=\"p1\">[</bpt>Const Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/const-statement.md)</ept>","source":"[Const Statement](../../../visual-basic/language-reference/statements/const-statement.md)"},{"pos":[2920,3013],"content":"<bpt id=\"p1\">[</bpt>Declare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declare-statement.md)</ept>","source":"[Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)"},{"pos":[3020,3115],"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept>","source":"[Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md)"},{"pos":[3122,3207],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../../visual-basic/language-reference/statements/dim-statement.md)"},{"pos":[3214,3301],"content":"<bpt id=\"p1\">[</bpt>Enum Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/enum-statement.md)</ept>","source":"[Enum Statement](../../../visual-basic/language-reference/statements/enum-statement.md)"},{"pos":[3308,3397],"content":"<bpt id=\"p1\">[</bpt>Event Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/event-statement.md)</ept>","source":"[Event Statement](../../../visual-basic/language-reference/statements/event-statement.md)"},{"pos":[3404,3499],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[3506,3603],"content":"<bpt id=\"p1\">[</bpt>Interface Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept>","source":"[Interface Statement](../../../visual-basic/language-reference/statements/interface-statement.md)"},{"pos":[3610,3701],"content":"<bpt id=\"p1\">[</bpt>Module Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/module-statement.md)</ept>","source":"[Module Statement](../../../visual-basic/language-reference/statements/module-statement.md)"},{"pos":[3708,3803],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[3810,3907],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[3914,3999],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[4008,4016],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4089,4159],"content":"<bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/public.md)</ept>","source":"[Public](../../../visual-basic/language-reference/modifiers/public.md)"},{"pos":[4162,4238],"content":"<bpt id=\"p1\">[</bpt>Protected<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/protected.md)</ept>","source":"[Protected](../../../visual-basic/language-reference/modifiers/protected.md)"},{"pos":[4241,4313],"content":"<bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/private.md)</ept>","source":"[Private](../../../visual-basic/language-reference/modifiers/private.md)"},{"pos":[4316,4359],"content":"<bpt id=\"p1\">[</bpt>Private Protected<ept id=\"p1\">](./private-protected.md)</ept>","source":"[Private Protected](./private-protected.md)"},{"pos":[4362,4403],"content":"<bpt id=\"p1\">[</bpt>Protected Friend<ept id=\"p1\">](./protected-friend.md)</ept>","source":"[Protected Friend](./protected-friend.md)"},{"pos":[4406,4531],"content":"<bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>","source":"[Access levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)"},{"pos":[4534,4625],"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/index.md)</ept>","source":"[Procedures](../../../visual-basic/programming-guide/language-features/procedures/index.md)"},{"pos":[4628,4724],"content":"<bpt id=\"p1\">[</bpt>Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/structures.md)</ept>","source":"[Structures](../../../visual-basic/programming-guide/language-features/data-types/structures.md)"},{"pos":[4727,4836],"content":"<bpt id=\"p1\">[</bpt>Objects and Classes<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept>","source":"[Objects and Classes](../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)"}]}