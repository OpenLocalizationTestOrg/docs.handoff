{"content":"---\ntitle: \"{} Escape Sequence - Markup Extension | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords: \n  - \"{}\"\nhelpviewer_keywords: \n  - \"XAML [XAML Services], quotation mark (\")\"\n  - \"{} escape sequence [XAML Services]\"\n  - \"XAML [XAML Services], {} escape sequence\"\n  - \"XAML [XAML Services], escape sequence\"\n  - \"quotation mark (\") [XAML Services]\"\n  - \"escape sequence [XAML Services]\"\nms.assetid: 3ce3e2ad-a868-43f9-9c98-b29561cb146e\ncaps.latest.revision: 21\nauthor: \"wadepickett\"\nms.author: \"wpickett\"\nmanager: \"wpickett\"\n---\n# {} Escape Sequence / Markup Extension\nProvides the XAML escape sequence for attribute values. The escape sequence allows the subsequent values in the attribute to be interpreted as a literal.  \n  \n## XAML Attribute Usage  \n  \n```  \n<object property=\"{} literalValue\" .../>  \n```  \n  \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.property>  \n    {} literalValue  \n  </object.property>  \n</object>  \n```  \n  \n## XAML Values  \n  \n|||  \n|-|-|  \n|*literalValue*|The literal string that follows the escape sequence. Typically this string contains an open or close brace ({ or }).|  \n  \n## Remarks  \n The escape sequence ({}) is used so that an open brace ({)can be used as a literal character in XAML.  \n  \n XAML readers typically use the open brace ({) to denote the entry point of a markup extension; however, they first check the next character to determine whether it is a closing brace (}). Only when the two braces ({}) are adjacent, are they considered an escape sequence.  \n  \n If the escape sequence is encountered, the XAML reader should process the remainder of the string as a string. However, if the escape sequence is applied to a member that has a type converter, the string might undergo type conversion when it is interpreted by a XAML writer.  \n  \n The escape sequence is not a markup extension and is not backed by a class. However, it is a convention that XAML readers (including custom XAML readers) should respect.  \n  \n A quotation mark (\") cannot be used as an escape sequence in this manner. If you need to set a quotation mark as a property value for a noncontent property, use property element syntax and place the quotation mark as a string inside the property element, or use an XML character entity. For a content property, the quotation mark can be the entire content.  \n  \n The escape sequence ({}) is frequently required when specifying an XML type that must include a namespace qualifier in a location where a XAML markup extension might appear. This includes the start of a XAML attribute value, and in a markup extension, immediately after an equal sign (=). The following example shows escape sequences for an XML namespace that appears at the start of a XAML attribute value.  \n  \n [!code-xml[XLINQExample#StackPanelResources](../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml#stackpanelresources)]  \n  \n## See Also  \n [Type Converters and Markup Extensions for XAML](../../../docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)   \n [XML Character Entities and XAML](../../../docs/framework/xaml-services/xml-character-entities-and-xaml.md)\n","nodes":[{"pos":[4,173],"content":"title: \"{} Escape Sequence - Markup Extension | Microsoft Docs\" ms.custom: \"\" ms.date: \"03/30/2017\" ms.prod: \".net-framework\" ms.reviewer: \"\" ms.suite: \"\" ms.technology:","source":"title: \"{} Escape Sequence - Markup Extension | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology:"},{"pos":[179,242],"content":"\"dotnet-wpf\" ms.tgt_pltfrm: \"\" ms.topic: \"article\" f1_keywords:","source":"\"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nf1_keywords:"},{"pos":[248,273],"content":"\"{}\" helpviewer_keywords:","source":"\"{}\"\nhelpviewer_keywords:"},{"content":"\"XAML [XAML Services], quotation mark (\")\"","pos":[279,321]},{"content":"\"{} escape sequence [XAML Services]\"","pos":[326,362]},{"content":"\"XAML [XAML Services], {} escape sequence\"","pos":[367,409]},{"content":"\"XAML [XAML Services], escape sequence\"","pos":[414,453]},{"content":"\"quotation mark (\") [XAML Services]\"","pos":[458,494]},{"pos":[499,670],"content":"\"escape sequence [XAML Services]\" ms.assetid: 3ce3e2ad-a868-43f9-9c98-b29561cb146e caps.latest.revision: 21 author: \"wadepickett\" ms.author: \"wpickett\" manager: \"wpickett\"","source":"\"escape sequence [XAML Services]\"\nms.assetid: 3ce3e2ad-a868-43f9-9c98-b29561cb146e\ncaps.latest.revision: 21\nauthor: \"wadepickett\"\nms.author: \"wpickett\"\nmanager: \"wpickett\""},{"pos":[677,714],"content":"{} Escape Sequence / Markup Extension","linkify":"{} Escape Sequence / Markup Extension","nodes":[{"content":"{} Escape Sequence / Markup Extension","pos":[0,37]}]},{"content":"Provides the XAML escape sequence for attribute values.","pos":[715,770]},{"content":"The escape sequence allows the subsequent values in the attribute to be interpreted as a literal.","pos":[771,868]},{"pos":[877,897],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[964,991],"content":"XAML Property Element Usage","linkify":"XAML Property Element Usage","nodes":[{"content":"XAML Property Element Usage","pos":[0,27]}]},{"pos":[1105,1116],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[1137,1151],"content":"<bpt id=\"p1\">*</bpt>literalValue<ept id=\"p1\">*</ept>","source":"*literalValue*"},{"content":"The literal string that follows the escape sequence.","pos":[1152,1204]},{"content":"Typically this string contains an open or close brace ({ or }).","pos":[1205,1268]},{"pos":[1278,1285],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The escape sequence ({}) is used so that an open brace ({)can be used as a literal character in XAML.","pos":[1289,1390]},{"content":"XAML readers typically use the open brace ({) to denote the entry point of a markup extension; however, they first check the next character to determine whether it is a closing brace (}).","pos":[1397,1584]},{"content":"Only when the two braces ({}) are adjacent, are they considered an escape sequence.","pos":[1585,1668]},{"content":"If the escape sequence is encountered, the XAML reader should process the remainder of the string as a string.","pos":[1675,1785]},{"content":"However, if the escape sequence is applied to a member that has a type converter, the string might undergo type conversion when it is interpreted by a XAML writer.","pos":[1786,1949]},{"content":"The escape sequence is not a markup extension and is not backed by a class.","pos":[1956,2031]},{"content":"However, it is a convention that XAML readers (including custom XAML readers) should respect.","pos":[2032,2125]},{"content":"A quotation mark (\") cannot be used as an escape sequence in this manner.","pos":[2132,2205]},{"content":"If you need to set a quotation mark as a property value for a noncontent property, use property element syntax and place the quotation mark as a string inside the property element, or use an XML character entity.","pos":[2206,2418]},{"content":"For a content property, the quotation mark can be the entire content.","pos":[2419,2488]},{"content":"The escape sequence ({}) is frequently required when specifying an XML type that must include a namespace qualifier in a location where a XAML markup extension might appear.","pos":[2495,2668]},{"content":"This includes the start of a XAML attribute value, and in a markup extension, immediately after an equal sign (=).","pos":[2669,2783]},{"content":"The following example shows escape sequences for an XML namespace that appears at the start of a XAML attribute value.","pos":[2784,2902]},{"pos":[2909,3057],"content":"<bpt id=\"p1\">[!code-xml</bpt><bpt id=\"p2\">[</bpt>XLINQExample#StackPanelResources<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml#stackpanelresources)</ept><ept id=\"p1\">]</ept>","source":"[!code-xml[XLINQExample#StackPanelResources](../../../samples/snippets/csharp/VS_Snippets_Wpf/XLinqExample/CSharp/Window1.xaml#stackpanelresources)]"},{"pos":[3066,3074],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Type Converters and Markup Extensions for XAML<ept id=\"p1\">](../../../docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept><ph id=\"ph1\"> </ph>","pos":[3078,3216],"source":"[Type Converters and Markup Extensions for XAML](../../../docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) "},{"content":"<bpt id=\"p1\"> [</bpt>XML Character Entities and XAML<ept id=\"p1\">](../../../docs/framework/xaml-services/xml-character-entities-and-xaml.md)</ept>","pos":[3219,3327],"source":" [XML Character Entities and XAML](../../../docs/framework/xaml-services/xml-character-entities-and-xaml.md)"}]}