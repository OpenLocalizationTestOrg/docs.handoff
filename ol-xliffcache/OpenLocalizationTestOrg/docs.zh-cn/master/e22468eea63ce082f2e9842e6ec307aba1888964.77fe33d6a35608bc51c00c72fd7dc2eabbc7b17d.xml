{"content":"---\ntitle: \"uint keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/14/2017\nf1_keywords: \n  - \"uint\"\n  - \"uint_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"uint keyword [C#]\"\n---\n# uint (C# Reference)\n\nThe `uint` keyword signifies an integral type that stores values according to the size and range shown in the following table.\n\n|Type|Range|Size|.NET type|\n|----------|-----------|----------|-------------------------|\n|`uint`|0 to 4,294,967,295|Unsigned 32-bit integer|<xref:System.UInt32?displayProperty=nameWithType>|\n\n**Note** The `uint` type is not CLS-compliant. Use `int` whenever possible.\n\n## Literals\n\nYou can declare and initialize a `uint` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it. If the integer literal is outside the range of `uint` (that is, if it is less than <xref:System.UInt32.MinValue?displayProperty=nameWithType> or greater than <xref:System.UInt32.MaxValue?displayProperty=nameWithType>), a compilation error occurs.\n\nIn the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to `uint` values.\n\n[!code-csharp[uint](~/samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UInt)]\n\n> [!NOTE]\n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.\n\nStarting with C# 7.0, a couple of features have been added to enhance readability:\n\n- C# 7.0 allows the usage of the underscore character, `_`, as a digit separator.\n- C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix. A decimal literal isn't permitted to have a leading underscore.\n\nSome examples are shown below.\n\n[!code-csharp[uint](~/samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UIntS)]\n\nInteger literals can also include a suffix that denotes the type. The suffix `U` or 'u' denotes either a `uint` or a `ulong`, depending on the numeric value of the literal. The following example uses the `u` suffix to denote an unsigned integer of both types. Note that the first literal is a `uint` because its value is less than <xref:System.UInt32.MaxValue?displayProperty=nameWithType>, while the second is a `ulong` because its value is greater than <xref:System.UInt32.MaxValue?displayProperty=nameWithType>.\n\n[!code-csharp[usuffix](~/samples/snippets/csharp/language-reference/keywords/numeric-suffixes.cs#1)]\n\nIf an integer literal has no suffix, its type is the first of the following types in which its value can be represented:\n\n1. [int](int.md)\n2. `uint`\n3. [long](long.md)\n4. [ulong](ulong.md)\n\n## Conversions\n\nThere is a predefined implicit conversion from `uint` to [long](long.md), [ulong](ulong.md), [float](float.md), [double](double.md), or [decimal](decimal.md). For example:\n\n```csharp\nfloat myFloat = 4294967290;   // OK: implicit conversion to float\n```\n\nThere is a predefined implicit conversion from [byte](byte.md), [ushort](ushort.md), or [char](char.md) to `uint`. Otherwise you must use a cast. For example, the following assignment statement will produce a compilation error without a cast:\n\n```csharp\nlong aLong = 22;\n// Error -- no implicit conversion from long:\nuint uInt1 = aLong;\n// OK -- explicit conversion:\nuint uInt2 = (uint)aLong;\n```\n\nNotice also that there is no implicit conversion from floating-point types to `uint`. For example, the following statement generates a compiler error unless an explicit cast is used:\n\n```csharp\n// Error -- no implicit conversion from double:\nuint x = 3.0;\n// OK -- explicit conversion:\nuint y = (uint)3.0;\n```\n\nFor information about arithmetic expressions with mixed floating-point types and integral types, see [float](float.md) and [double](double.md).\n\nFor more information about implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md).\n\n## C# language specification\n\nFor more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- <xref:System.UInt32>\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Integral Types Table](integral-types-table.md)\n- [Built-In Types Table](built-in-types-table.md)\n- [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)","nodes":[{"pos":[4,177],"embed":true,"restype":"x-metadata","content":"title: \"uint keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/14/2017\nf1_keywords: \n  - \"uint\"\n  - \"uint_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"uint keyword [C#]\"","nodes":[{"content":"uint keyword - C# Reference","nodes":[{"pos":[0,27],"content":"uint keyword - C# Reference","nodes":[{"content":"uint keyword - C# Reference","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[184,203],"content":"uint (C# Reference)","linkify":"uint (C# Reference)","nodes":[{"content":"uint (C# Reference)","pos":[0,19]}]},{"pos":[205,331],"content":"The <ph id=\"ph1\">`uint`</ph> keyword signifies an integral type that stores values according to the size and range shown in the following table.","source":"The `uint` keyword signifies an integral type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[334,338]},{"content":"Range","pos":[339,344]},{"content":"Size","pos":[345,349]},{"content":".NET type","pos":[350,359]},{"content":"0 to 4,294,967,295","pos":[431,449]},{"content":"Unsigned 32-bit integer","pos":[450,473]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> The <ph id=\"ph1\">`uint`</ph> type is not CLS-compliant.","pos":[526,572],"source":"**Note** The `uint` type is not CLS-compliant."},{"content":"Use <ph id=\"ph1\">`int`</ph> whenever possible.","pos":[573,601],"source":" Use `int` whenever possible."},{"pos":[606,614],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`uint`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.","pos":[616,769],"source":"You can declare and initialize a `uint` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`uint`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.UInt32.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.UInt32.MaxValue?displayProperty=nameWithType&gt;</ph>), a compilation error occurs.","pos":[770,1016],"source":" If the integer literal is outside the range of `uint` (that is, if it is less than <xref:System.UInt32.MinValue?displayProperty=nameWithType> or greater than <xref:System.UInt32.MaxValue?displayProperty=nameWithType>), a compilation error occurs."},{"pos":[1018,1172],"content":"In the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`uint`</ph> values.","source":"In the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to `uint` values."},{"pos":[1278,1440],"content":"[!NOTE]\nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[8,160],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"content":"Starting with C# 7.0, a couple of features have been added to enhance readability:","pos":[1442,1524]},{"pos":[1528,1607],"content":"C# 7.0 allows the usage of the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator.","source":"C# 7.0 allows the usage of the underscore character, `_`, as a digit separator."},{"content":"C# 7.2 allows <ph id=\"ph1\">`_`</ph> to be used as a digit separator for a binary or hexadecimal literal, after the prefix.","pos":[1610,1714],"source":"C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix."},{"content":"A decimal literal isn't permitted to have a leading underscore.","pos":[1715,1778]},{"content":"Some examples are shown below.","pos":[1780,1810]},{"content":"Integer literals can also include a suffix that denotes the type.","pos":[1915,1980]},{"content":"The suffix <ph id=\"ph1\">`U`</ph> or 'u' denotes either a <ph id=\"ph2\">`uint`</ph> or a <ph id=\"ph3\">`ulong`</ph>, depending on the numeric value of the literal.","pos":[1981,2087],"source":" The suffix `U` or 'u' denotes either a `uint` or a `ulong`, depending on the numeric value of the literal."},{"content":"The following example uses the <ph id=\"ph1\">`u`</ph> suffix to denote an unsigned integer of both types.","pos":[2088,2174],"source":" The following example uses the `u` suffix to denote an unsigned integer of both types."},{"content":"Note that the first literal is a <ph id=\"ph1\">`uint`</ph> because its value is less than <ph id=\"ph2\">&lt;xref:System.UInt32.MaxValue?displayProperty=nameWithType&gt;</ph>, while the second is a <ph id=\"ph3\">`ulong`</ph> because its value is greater than <ph id=\"ph4\">&lt;xref:System.UInt32.MaxValue?displayProperty=nameWithType&gt;</ph>.","pos":[2175,2429],"source":" Note that the first literal is a `uint` because its value is less than <xref:System.UInt32.MaxValue?displayProperty=nameWithType>, while the second is a `ulong` because its value is greater than <xref:System.UInt32.MaxValue?displayProperty=nameWithType>."},{"content":"If an integer literal has no suffix, its type is the first of the following types in which its value can be represented:","pos":[2533,2653]},{"pos":[2658,2671],"content":"<bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>","source":"[int](int.md)"},{"pos":[2685,2700],"content":"<bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](long.md)</ept>","source":"[long](long.md)"},{"pos":[2704,2721],"content":"<bpt id=\"p1\">[</bpt>ulong<ept id=\"p1\">](ulong.md)</ept>","source":"[ulong](ulong.md)"},{"pos":[2726,2737],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`uint`</ph> to <bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](long.md)</ept>, <bpt id=\"p2\">[</bpt>ulong<ept id=\"p2\">](ulong.md)</ept>, <bpt id=\"p3\">[</bpt>float<ept id=\"p3\">](float.md)</ept>, <bpt id=\"p4\">[</bpt>double<ept id=\"p4\">](double.md)</ept>, or <bpt id=\"p5\">[</bpt>decimal<ept id=\"p5\">](decimal.md)</ept>.","pos":[2739,2897],"source":"There is a predefined implicit conversion from `uint` to [long](long.md), [ulong](ulong.md), [float](float.md), [double](double.md), or [decimal](decimal.md)."},{"content":"For example:","pos":[2898,2910]},{"content":"There is a predefined implicit conversion from <bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](byte.md)</ept>, <bpt id=\"p2\">[</bpt>ushort<ept id=\"p2\">](ushort.md)</ept>, or <bpt id=\"p3\">[</bpt>char<ept id=\"p3\">](char.md)</ept> to <ph id=\"ph1\">`uint`</ph>.","pos":[2993,3107],"source":"There is a predefined implicit conversion from [byte](byte.md), [ushort](ushort.md), or [char](char.md) to `uint`."},{"content":"Otherwise you must use a cast.","pos":[3108,3138]},{"content":"For example, the following assignment statement will produce a compilation error without a cast:","pos":[3139,3235]},{"content":"Notice also that there is no implicit conversion from floating-point types to <ph id=\"ph1\">`uint`</ph>.","pos":[3391,3476],"source":"Notice also that there is no implicit conversion from floating-point types to `uint`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[3477,3573]},{"pos":[3702,3845],"content":"For information about arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](double.md)</ept>.","source":"For information about arithmetic expressions with mixed floating-point types and integral types, see [float](float.md) and [double](double.md)."},{"pos":[3847,3993],"content":"For more information about implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](implicit-numeric-conversions-table.md)</ept>.","source":"For more information about implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)."},{"pos":[3998,4023],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Integral types<ept id=\"p1\">](~/_csharplang/spec/types.md#integral-types)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[4025,4183],"source":"For more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[4184,4260]},{"pos":[4265,4273],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4300,4327],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[4330,4386],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[4389,4412],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[4415,4462],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](integral-types-table.md)</ept>","source":"[Integral Types Table](integral-types-table.md)"},{"pos":[4465,4512],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](built-in-types-table.md)</ept>","source":"[Built-In Types Table](built-in-types-table.md)"},{"pos":[4515,4590],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)"},{"pos":[4593,4668],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)"}]}