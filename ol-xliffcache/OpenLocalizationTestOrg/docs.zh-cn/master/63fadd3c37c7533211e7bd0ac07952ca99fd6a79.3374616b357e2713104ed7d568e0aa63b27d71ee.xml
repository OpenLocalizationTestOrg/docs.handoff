{"content":"---\ntitle: \"lock statement - C# Reference\"\nms.custom: seodec18\n\ndescription: \"Use the C# lock statement to synchronize thread access to a shared resource\"\nms.date: 10/01/2018\nf1_keywords: \n  - \"lock_CSharpKeyword\"\n  - \"lock\"\nhelpviewer_keywords: \n  - \"lock keyword [C#]\"\nms.assetid: 656da1a4-707e-4ef6-9c6e-6d13b646af42\n---\n# lock statement (C# Reference)\n\nThe `lock` statement acquires the mutual-exclusion lock for a given object, executes a statement block, and then releases the lock. While a lock is held, the thread that holds the lock can again acquire and release the lock. Any other thread is blocked from acquiring the lock and waits until the lock is released.\n\nThe `lock` statement is of the form\n\n```csharp\nlock (x)\n{\n    // Your code...\n}\n```\n\nwhere `x` is an expression of a [reference type](reference-types.md). It's precisely equivalent to\n\n```csharp\nobject __lockObj = x;\nbool __lockWasTaken = false;\ntry\n{\n    System.Threading.Monitor.Enter(__lockObj, ref __lockWasTaken);\n    // Your code...\n}\nfinally\n{\n    if (__lockWasTaken) System.Threading.Monitor.Exit(__lockObj);\n}\n```\n\nSince the code uses a [try...finally](try-finally.md) block, the lock is released even if an exception is thrown within the body of a `lock` statement.\n\nYou can't use the [await](await.md) keyword in the body of a `lock` statement.\n\n## Remarks\n\nWhen you synchronize thread access to a shared resource, lock on a dedicated object instance (for example, `private readonly object balanceLock = new object();`) or another instance that is unlikely to be used as a lock object by unrelated parts of the code. Avoid using the same lock object instance for different shared resources, as it might result in deadlock or lock contention. In particular, avoid using the following as lock objects:\n\n- `this`, as it might be used by the callers as a lock.\n- <xref:System.Type> instances, as those might be obtained by the [typeof](typeof.md) operator or reflection.\n- string instances, including string literals, as those might be [interned](/dotnet/api/system.string.intern#remarks).\n\n## Example\n\nThe following example defines an `Account` class that synchronizes access to its private `balance` field by locking on a dedicated `balanceLock` instance. Using the same instance for locking ensures that the `balance` field cannot be updated simultaneously by two threads attempting to call the `Debit` or `Credit` methods simultaneously.\n\n[!code-csharp[lock-statement-example](~/samples/snippets/csharp/keywords/LockStatementExample.cs)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- <xref:System.Threading.Monitor?displayProperty=nameWithType>\n- <xref:System.Threading.SpinLock?displayProperty=nameWithType>\n- <xref:System.Threading.Interlocked?displayProperty=nameWithType>\n- [C# Reference](../index.md)\n- [C# Keywords](index.md)\n- [Statement Keywords](statement-keywords.md)\n- [Overview of synchronization primitives](../../../standard/threading/overview-of-synchronization-primitives.md)","nodes":[{"pos":[4,319],"embed":true,"restype":"x-metadata","content":"title: \"lock statement - C# Reference\"\nms.custom: seodec18\n\ndescription: \"Use the C# lock statement to synchronize thread access to a shared resource\"\nms.date: 10/01/2018\nf1_keywords: \n  - \"lock_CSharpKeyword\"\n  - \"lock\"\nhelpviewer_keywords: \n  - \"lock keyword [C#]\"\nms.assetid: 656da1a4-707e-4ef6-9c6e-6d13b646af42","nodes":[{"content":"lock statement - C# Reference","nodes":[{"pos":[0,29],"content":"lock statement - C# Reference","nodes":[{"content":"lock statement - C# Reference","pos":[0,29]}]}],"path":["title"],"nosxs":false},{"content":"Use the C# lock statement to synchronize thread access to a shared resource","nodes":[{"pos":[0,75],"content":"Use the C# lock statement to synchronize thread access to a shared resource","nodes":[{"content":"Use the C# lock statement to synchronize thread access to a shared resource","pos":[0,75]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[326,355],"content":"lock statement (C# Reference)","linkify":"lock statement (C# Reference)","nodes":[{"content":"lock statement (C# Reference)","pos":[0,29]}]},{"content":"The <ph id=\"ph1\">`lock`</ph> statement acquires the mutual-exclusion lock for a given object, executes a statement block, and then releases the lock.","pos":[357,488],"source":"The `lock` statement acquires the mutual-exclusion lock for a given object, executes a statement block, and then releases the lock."},{"content":"While a lock is held, the thread that holds the lock can again acquire and release the lock.","pos":[489,581]},{"content":"Any other thread is blocked from acquiring the lock and waits until the lock is released.","pos":[582,671]},{"pos":[673,708],"content":"The <ph id=\"ph1\">`lock`</ph> statement is of the form","source":"The `lock` statement is of the form"},{"content":"where <ph id=\"ph1\">`x`</ph> is an expression of a <bpt id=\"p1\">[</bpt>reference type<ept id=\"p1\">](reference-types.md)</ept>.","pos":[758,827],"source":"where `x` is an expression of a [reference type](reference-types.md)."},{"content":"It's precisely equivalent to","pos":[828,856]},{"pos":[1097,1248],"content":"Since the code uses a <bpt id=\"p1\">[</bpt>try...finally<ept id=\"p1\">](try-finally.md)</ept> block, the lock is released even if an exception is thrown within the body of a <ph id=\"ph1\">`lock`</ph> statement.","source":"Since the code uses a [try...finally](try-finally.md) block, the lock is released even if an exception is thrown within the body of a `lock` statement."},{"pos":[1250,1328],"content":"You can't use the <bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](await.md)</ept> keyword in the body of a <ph id=\"ph1\">`lock`</ph> statement.","source":"You can't use the [await](await.md) keyword in the body of a `lock` statement."},{"pos":[1333,1340],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When you synchronize thread access to a shared resource, lock on a dedicated object instance (for example, <ph id=\"ph1\">`private readonly object balanceLock = new object();`</ph>) or another instance that is unlikely to be used as a lock object by unrelated parts of the code.","pos":[1342,1600],"source":"When you synchronize thread access to a shared resource, lock on a dedicated object instance (for example, `private readonly object balanceLock = new object();`) or another instance that is unlikely to be used as a lock object by unrelated parts of the code."},{"content":"Avoid using the same lock object instance for different shared resources, as it might result in deadlock or lock contention.","pos":[1601,1725]},{"content":"In particular, avoid using the following as lock objects:","pos":[1726,1783]},{"pos":[1787,1840],"content":"<ph id=\"ph1\">`this`</ph>, as it might be used by the callers as a lock.","source":"`this`, as it might be used by the callers as a lock."},{"pos":[1843,1950],"content":"<ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> instances, as those might be obtained by the <bpt id=\"p1\">[</bpt>typeof<ept id=\"p1\">](typeof.md)</ept> operator or reflection.","source":"<xref:System.Type> instances, as those might be obtained by the [typeof](typeof.md) operator or reflection."},{"pos":[1953,2069],"content":"string instances, including string literals, as those might be <bpt id=\"p1\">[</bpt>interned<ept id=\"p1\">](/dotnet/api/system.string.intern#remarks)</ept>.","source":"string instances, including string literals, as those might be [interned](/dotnet/api/system.string.intern#remarks)."},{"pos":[2074,2081],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example defines an <ph id=\"ph1\">`Account`</ph> class that synchronizes access to its private <ph id=\"ph2\">`balance`</ph> field by locking on a dedicated <ph id=\"ph3\">`balanceLock`</ph> instance.","pos":[2083,2237],"source":"The following example defines an `Account` class that synchronizes access to its private `balance` field by locking on a dedicated `balanceLock` instance."},{"content":"Using the same instance for locking ensures that the <ph id=\"ph1\">`balance`</ph> field cannot be updated simultaneously by two threads attempting to call the <ph id=\"ph2\">`Debit`</ph> or <ph id=\"ph3\">`Credit`</ph> methods simultaneously.","pos":[2238,2421],"source":" Using the same instance for locking ensures that the `balance` field cannot be updated simultaneously by two threads attempting to call the `Debit` or `Credit` methods simultaneously."},{"pos":[2526,2551],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2617,2625],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2823,2850],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2853,2876],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[2879,2922],"content":"<bpt id=\"p1\">[</bpt>Statement Keywords<ept id=\"p1\">](statement-keywords.md)</ept>","source":"[Statement Keywords](statement-keywords.md)"},{"pos":[2925,3036],"content":"<bpt id=\"p1\">[</bpt>Overview of synchronization primitives<ept id=\"p1\">](../../../standard/threading/overview-of-synchronization-primitives.md)</ept>","source":"[Overview of synchronization primitives](../../../standard/threading/overview-of-synchronization-primitives.md)"}]}