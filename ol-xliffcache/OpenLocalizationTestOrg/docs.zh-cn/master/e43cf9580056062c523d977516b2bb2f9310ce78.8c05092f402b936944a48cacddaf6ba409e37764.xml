{"content":"---\ntitle: \"GoTo Statement | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.GoTo\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"GoTo statement\"\n  - \"control flow, branching\"\n  - \"unconditional branching\"\n  - \"branching\"\n  - \"branching, unconditional\"\n  - \"branching, conditional\"\n  - \"conditional statements, GoTo statement\"\n  - \"GoTo statement, syntax\"\nms.assetid: 313274c2-8ab3-4b9c-9ba3-0fd6798e4f6d\ncaps.latest.revision: 19\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# GoTo Statement\nBranches unconditionally to a specified line in a procedure.  \n  \n## Syntax  \n  \n```  \nGoTo line  \n```  \n  \n## Part  \n `line`  \n Required. Any line label.  \n  \n## Remarks  \n The `GoTo` statement can branch only to lines in the procedure in which it appears. The line must have a line label that `GoTo` can refer to. For more information, see [How to: Label Statements](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md).  \n  \n> [!NOTE]\n>  `GoTo` statements can make code difficult to read and maintain. Whenever possible, use a control structure instead. For more information, see [Control Flow](../../../visual-basic/programming-guide/language-features/control-flow/index.md).  \n  \n You cannot use a `GoTo` statement to branch from outside a `For`...`Next`, `For Each`...`Next`, `SyncLock`...`End SyncLock`, `Try`...`Catch`...`Finally`, `With`...`End With`, or `Using`...`End Using` construction to a label inside.  \n  \n## Branching and Try Constructions  \n Within a `Try`...`Catch`...`Finally` construction, the following rules apply to branching with the `GoTo` statement.  \n  \n|Block or region|Branching in from outside|Branching out from inside|  \n|---------------------|-------------------------------|-------------------------------|  \n|`Try` block|Only from a `Catch` block of the same construction <sup>1</sup>|Only to outside the whole construction|  \n|`Catch` block|Never allowed|Only to outside the whole construction, or to the `Try` block of the same construction <sup>1</sup>|  \n|`Finally` block|Never allowed|Never allowed|  \n  \n <sup>1</sup> If one `Try`...`Catch`...`Finally` construction is nested within another, a `Catch` block can branch into the `Try` block at its own nesting level, but not into any other `Try` block. A nested `Try`...`Catch`...`Finally` construction must be contained completely in a `Try` or `Catch` block of the construction within which it is nested.  \n  \n The following illustration shows one `Try` construction nested within another. Various branches among the blocks of the two constructions are indicated as valid or invalid.  \n  \n ![Graphic diagram of branching in Try constructions](../../../visual-basic/language-reference/statements/media/trybranching.gif \"TryBranching\")  \nValid and invalid branches in Try constructions  \n  \n## Example  \n The following example uses the `GoTo` statement to branch to line labels in a procedure.  \n  \n [!code-vb[VbVbalrStatements#31](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/goto-statement_1.vb)]  \n  \n## See Also  \n [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)   \n [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)   \n [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md)   \n [If...Then...Else Statement](../../../visual-basic/language-reference/statements/if-then-else-statement.md)   \n [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md)   \n [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)   \n [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md)   \n [With...End With Statement](../../../visual-basic/language-reference/statements/with-end-with-statement.md)","nodes":[{"pos":[12,43],"content":"GoTo Statement | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"GoTo Statement | Microsoft Docs","pos":[0,31]}]},{"pos":[784,798],"content":"GoTo Statement","linkify":"GoTo Statement","nodes":[{"content":"GoTo Statement","pos":[0,14]}]},{"content":"Branches unconditionally to a specified line in a procedure.","pos":[799,859]},{"pos":[868,874],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[910,914],"content":"Part","linkify":"Part","nodes":[{"content":"Part","pos":[0,4]}]},{"content":"Required.","pos":[928,937]},{"content":"Any line label.","pos":[938,953]},{"pos":[962,969],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`GoTo`</ph> statement can branch only to lines in the procedure in which it appears.","pos":[973,1056],"source":"The `GoTo` statement can branch only to lines in the procedure in which it appears."},{"content":"The line must have a line label that <ph id=\"ph1\">`GoTo`</ph> can refer to.","pos":[1057,1114],"source":" The line must have a line label that `GoTo` can refer to."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Label Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept>.","pos":[1115,1254],"source":" For more information, see [How to: Label Statements](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)."},{"pos":[1262,1511],"content":"[!NOTE]\n `GoTo` statements can make code difficult to read and maintain. Whenever possible, use a control structure instead. For more information, see [Control Flow](../../../visual-basic/programming-guide/language-features/control-flow/index.md).","leadings":["","> "],"nodes":[{"content":" `GoTo` statements can make code difficult to read and maintain. Whenever possible, use a control structure instead. For more information, see [Control Flow](../../../visual-basic/programming-guide/language-features/control-flow/index.md).","pos":[8,247],"nodes":[{"content":"<ph id=\"ph1\"> `GoTo`</ph> statements can make code difficult to read and maintain.","pos":[0,64],"source":" `GoTo` statements can make code difficult to read and maintain."},{"content":"Whenever possible, use a control structure instead.","pos":[65,116]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Control Flow<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/index.md)</ept>.","pos":[117,239],"source":" For more information, see [Control Flow](../../../visual-basic/programming-guide/language-features/control-flow/index.md)."}]}]},{"pos":[1518,1749],"content":"You cannot use a <ph id=\"ph1\">`GoTo`</ph> statement to branch from outside a <ph id=\"ph2\">`For`</ph>...<ph id=\"ph3\">`Next`</ph>, <ph id=\"ph4\">`For Each`</ph>...<ph id=\"ph5\">`Next`</ph>, <ph id=\"ph6\">`SyncLock`</ph>...<ph id=\"ph7\">`End SyncLock`</ph>, <ph id=\"ph8\">`Try`</ph>...<ph id=\"ph9\">`Catch`</ph>...<ph id=\"ph10\">`Finally`</ph>, <ph id=\"ph11\">`With`</ph>...<ph id=\"ph12\">`End With`</ph>, or <ph id=\"ph13\">`Using`</ph>...<ph id=\"ph14\">`End Using`</ph> construction to a label inside.","source":"You cannot use a `GoTo` statement to branch from outside a `For`...`Next`, `For Each`...`Next`, `SyncLock`...`End SyncLock`, `Try`...`Catch`...`Finally`, `With`...`End With`, or `Using`...`End Using` construction to a label inside."},{"pos":[1758,1789],"content":"Branching and Try Constructions","linkify":"Branching and Try Constructions","nodes":[{"content":"Branching and Try Constructions","pos":[0,31]}]},{"pos":[1793,1909],"content":"Within a <ph id=\"ph1\">`Try`</ph>...<ph id=\"ph2\">`Catch`</ph>...<ph id=\"ph3\">`Finally`</ph> construction, the following rules apply to branching with the <ph id=\"ph4\">`GoTo`</ph> statement.","source":"Within a `Try`...`Catch`...`Finally` construction, the following rules apply to branching with the `GoTo` statement."},{"content":"Block or region","pos":[1916,1931]},{"content":"Branching in from outside","pos":[1932,1957]},{"content":"Branching out from inside","pos":[1958,1983]},{"pos":[2078,2089],"content":"<ph id=\"ph1\">`Try`</ph> block","source":"`Try` block"},{"pos":[2090,2153],"content":"Only from a <ph id=\"ph1\">`Catch`</ph> block of the same construction <bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept>","source":"Only from a `Catch` block of the same construction <sup>1</sup>"},{"content":"Only to outside the whole construction","pos":[2154,2192]},{"pos":[2197,2210],"content":"<ph id=\"ph1\">`Catch`</ph> block","source":"`Catch` block"},{"content":"Never allowed","pos":[2211,2224]},{"pos":[2225,2324],"content":"Only to outside the whole construction, or to the <ph id=\"ph1\">`Try`</ph> block of the same construction <bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept>","source":"Only to outside the whole construction, or to the `Try` block of the same construction <sup>1</sup>"},{"pos":[2329,2344],"content":"<ph id=\"ph1\">`Finally`</ph> block","source":"`Finally` block"},{"content":"Never allowed","pos":[2345,2358]},{"content":"Never allowed","pos":[2359,2372]},{"content":"<bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept> If one <ph id=\"ph1\">`Try`</ph>...<ph id=\"ph2\">`Catch`</ph>...<ph id=\"ph3\">`Finally`</ph> construction is nested within another, a <ph id=\"ph4\">`Catch`</ph> block can branch into the <ph id=\"ph5\">`Try`</ph> block at its own nesting level, but not into any other <ph id=\"ph6\">`Try`</ph> block.","pos":[2380,2576],"source":"<sup>1</sup> If one `Try`...`Catch`...`Finally` construction is nested within another, a `Catch` block can branch into the `Try` block at its own nesting level, but not into any other `Try` block."},{"content":"A nested <ph id=\"ph1\">`Try`</ph>...<ph id=\"ph2\">`Catch`</ph>...<ph id=\"ph3\">`Finally`</ph> construction must be contained completely in a <ph id=\"ph4\">`Try`</ph> or <ph id=\"ph5\">`Catch`</ph> block of the construction within which it is nested.","pos":[2577,2730],"source":" A nested `Try`...`Catch`...`Finally` construction must be contained completely in a `Try` or `Catch` block of the construction within which it is nested."},{"content":"The following illustration shows one <ph id=\"ph1\">`Try`</ph> construction nested within another.","pos":[2737,2815],"source":"The following illustration shows one `Try` construction nested within another."},{"content":"Various branches among the blocks of the two constructions are indicated as valid or invalid.","pos":[2816,2909]},{"content":"<bpt id=\"p1\">![</bpt>Graphic diagram of branching in Try constructions<ept id=\"p1\">](../../../visual-basic/language-reference/statements/media/trybranching.gif \"TryBranching\")</ept>","pos":[2916,3059],"source":"![Graphic diagram of branching in Try constructions](../../../visual-basic/language-reference/statements/media/trybranching.gif \"TryBranching\")"},{"content":"Valid and invalid branches in Try constructions","pos":[3062,3109]},{"pos":[3118,3125],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3129,3217],"content":"The following example uses the <ph id=\"ph1\">`GoTo`</ph> statement to branch to line labels in a procedure.","source":"The following example uses the `GoTo` statement to branch to line labels in a procedure."},{"pos":[3224,3357],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#31<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/goto-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#31](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/goto-statement_1.vb)]"},{"pos":[3366,3374],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3378,3474],"source":"[Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3477,3576],"source":" [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>For Each...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3579,3688],"source":" [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>If...Then...Else Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/if-then-else-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3691,3800],"source":" [If...Then...Else Statement](../../../visual-basic/language-reference/statements/if-then-else-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Select...Case Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/select-case-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3803,3908],"source":" [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3911,4030],"source":" [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>While...End While Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[4033,4146],"source":" [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>With...End With Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/with-end-with-statement.md)</ept>","pos":[4149,4257],"source":" [With...End With Statement](../../../visual-basic/language-reference/statements/with-end-with-statement.md)"}]}