{"content":"---\ntitle: \"No accessible non-generic &#39;&lt;procedurename&gt;&#39; found | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc32117\"\n  - \"bc32117\"\nhelpviewer_keywords: \n  - \"BC32117\"\nms.assetid: a7bf8b67-8a0a-499e-9992-dc00e09b7ff4\ncaps.latest.revision: 4\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# No accessible non-generic &#39;&lt;procedurename&gt;&#39; found\nA statement calls a procedure that has more than one overloaded version, but all the overloaded versions are generic and the call does not supply type arguments.  \n  \n If there is only one generic version and you call it without type arguments, the compiler can attempt *type inference*. For more information, see \"Type Inference\" in [Generic Procedures in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md). However, if there is more than one generic version, the compiler is not able to choose among them unless you supply type arguments. If you supply one type argument, you must supply a type argument for every type parameter that one of the overloaded versions defines.  \n  \n **Error ID:** BC32117  \n  \n## To correct this error  \n  \n-   Call the procedure with a type argument list.  \n  \n## See Also  \n [Overloads](../../visual-basic/language-reference/modifiers/overloads.md)   \n [Procedure Overloading](../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md)   \n [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [Generic Procedures in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)","nodes":[{"pos":[12,92],"content":"No accessible non-generic &#39;&lt;procedurename&gt;&#39; found | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"No accessible non-generic &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>procedurename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; found | Microsoft Docs","pos":[0,80],"source":"No accessible non-generic &#39;&lt;procedurename&gt;&#39; found | Microsoft Docs"}]},{"pos":[608,671],"content":"No accessible non-generic &#39;&lt;procedurename&gt;&#39; found","linkify":"No accessible non-generic &#39;&lt;procedurename&gt;&#39; found","nodes":[{"content":"No accessible non-generic &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>procedurename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; found","pos":[0,63],"source":"No accessible non-generic &#39;&lt;procedurename&gt;&#39; found"}]},{"content":"A statement calls a procedure that has more than one overloaded version, but all the overloaded versions are generic and the call does not supply type arguments.","pos":[672,833]},{"content":"If there is only one generic version and you call it without type arguments, the compiler can attempt <bpt id=\"p1\">*</bpt>type inference<ept id=\"p1\">*</ept>.","pos":[840,959],"source":"If there is only one generic version and you call it without type arguments, the compiler can attempt *type inference*."},{"content":"For more information, see \"Type Inference\" in <bpt id=\"p1\">[</bpt>Generic Procedures in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)</ept>.","pos":[960,1132],"source":" For more information, see \"Type Inference\" in [Generic Procedures in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)."},{"content":"However, if there is more than one generic version, the compiler is not able to choose among them unless you supply type arguments.","pos":[1133,1264]},{"content":"If you supply one type argument, you must supply a type argument for every type parameter that one of the overloaded versions defines.","pos":[1265,1399]},{"pos":[1406,1427],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32117","source":"**Error ID:** BC32117"},{"pos":[1436,1457],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Call the procedure with a type argument list.","pos":[1467,1512]},{"pos":[1521,1529],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Overloads<ept id=\"p1\">](../../visual-basic/language-reference/modifiers/overloads.md)</ept><ph id=\"ph1\"> </ph>","pos":[1533,1607],"source":"[Overloads](../../visual-basic/language-reference/modifiers/overloads.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Procedure Overloading<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md)</ept><ph id=\"ph1\"> </ph>","pos":[1610,1727],"source":" [Procedure Overloading](../../visual-basic/programming-guide/language-features/procedures/procedure-overloading.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[1730,1847],"source":" [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Generic Procedures in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)</ept>","pos":[1850,1976],"source":" [Generic Procedures in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-procedures.md)"}]}