<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-migrate-ajax-enabled-aspnet-web-services-to-wcf.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55dd12015bddc770c49a71d49d3060dddeb71ca2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\how-to-migrate-ajax-enabled-aspnet-web-services-to-wcf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b81fa03ecec86663199002fcae5bce4194d3413</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">156e5ee17b4061c1b753eebf755cfa2f64803f97</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic outlines procedures to migrate a basic ASP.NET AJAX service to an equivalent AJAX-enabled <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> service.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It shows how to create a functionally equivalent <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> version of an ASP.NET AJAX service.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The two services can then be used side by side, or the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service can be used to replace the ASP.NET AJAX service.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Migrating an existing ASP.NET AJAX service to a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> AJAX service gives you the following benefits:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can expose your AJAX service as a SOAP service with minimal extra configuration.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can benefit from <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> features such as tracing, and so on.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following procedures assume that you are using <ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The code that results from the procedures outlined in this topic is provided in the example following the procedures.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> exposing a <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service through an AJAX-enabled endpoint, see the <bpt id="p1">[</bpt>How to: Use Configuration to Add an ASP.NET AJAX Endpoint<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-use-configuration-to-add-an-aspnet-ajax-endpoint.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To create and test the ASP.NET Web service application</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>, then <bpt id="p4">**</bpt>Web<ept id="p4">**</ept>, and then select <bpt id="p5">**</bpt>ASP.NET Web Service Application<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name the project <ph id="ph1">`ASPHello`</ph> and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Uncomment the line in the Service1.asmx.cs file that contains <ph id="ph1">`System.Web.Script.Services.ScriptService]`</ph> to enable AJAX for this service.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>Start Without Debugging<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>On the Web page generated, select the <ph id="ph1">`HelloWorld`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept> button on the <ph id="ph1">`HelloWorld`</ph> test page.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You should receive the following XML response.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This response confirms that you now have a functioning ASP.NET AJAX service and, in particular, that the service has now exposed an endpoint at Service1.asmx/HelloWorld that responds to HTTP POST requests and returns XML.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Now you are ready to convert this service to use a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> AJAX service.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To create an equivalent WCF AJAX service application</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>ASPHello<ept id="p1">**</ept> project and select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>New Item<ept id="p3">**</ept>, and then <bpt id="p4">**</bpt>AJAX-enabled WCF Service<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Name the service <ph id="ph1">`WCFHello`</ph> and click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Open the WCFHello.svc.cs file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>From Service1.asmx.cs, copy the following implementation of the <ph id="ph1">`HelloWorld`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Paste to copied implementation of the <ph id="ph1">`HelloWorld`</ph> operation into the WCFHello.svc.cs file in place of the following code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Specify the <ph id="ph1">`Namespace`</ph> attribute for <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> as <ph id="ph3">`WCFHello`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph> to the <ph id="ph2">`HelloWorld`</ph> operation and set the <ph id="ph3">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute.ResponseFormat%2A&gt;</ph> property to return <ph id="ph4">&lt;xref:System.ServiceModel.Web.WebMessageFormat&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Note that, if not set, the default return type is <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebMessageFormat&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Open the WCFHello.svc file and from the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>Start Without Debugging<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The service now exposes an endpoint at <ph id="ph1">`WCFHello.svc/HelloWorld`</ph>, which responds to HTTP POST requests.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>HTTP POST requests cannot be tested from the browser, but the endpoint returns XML following XML.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WCFHello.svc/HelloWorld`</ph> and the <ph id="ph2">`Service1.aspx/HelloWorld`</ph> endpoints are now functionally equivalent.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The code that results from the procedures outlined in this topic is provided in the following example.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> type is not supported by the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> because it is not serializable by the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can use either an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> type, or serialize the <ph id="ph2">&lt;xref:System.Xml.XmlDocument.DocumentElement%2A&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If ASMX Web services are being upgraded and migrated side-by-side to <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services, avoid mapping two types to the same name on the client.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This causes an exception in serializers if the same type is used in a <ph id="ph1">&lt;xref:System.Web.Services.WebMethodAttribute&gt;</ph> and a <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service is added first, invoking the method on ASMX Web Service causes exception in <ph id="ph2">&lt;xref:System.Web.UI.ObjectConverter.ConvertValue%28System.Object%2CSystem.Type%2CSystem.String%29&gt;</ph> because the <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> style definition of the order in the proxy takes precedence.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If ASMX Web Service is added first, invoking method on <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service causes exception in <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> because the Web Service style definition of the order in the proxy takes precedence.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>There are significant differences in behavior between the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> and the ASP.NET AJAX <ph id="ph2">&lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> represents a dictionary as an array of key/value pairs, whereas the ASP.NET AJAX <ph id="ph2">&lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt;</ph> represents a dictionary as actual JSON objects.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>So the following is the dictionary represented in ASP.NET AJAX.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This dictionary is represented in JSON objects as shown in the following list:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>[{"Key":"one","Value":1},{"Key":"two","Value":2}] by the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>{"one":1,"two":2} by the ASP.NET AJAX <ph id="ph1">&lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt;</ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> is more powerful in the sense that it can handle dictionaries where the key type is not string, while the <ph id="ph2">&lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt;</ph> cannot.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>But the latter is more JSON-friendly.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The significant differences between these serializers are summarized in the following table.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Category of Differences</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>DataContractJsonSerializer</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>ASP.NET AJAX JavaScriptSerializer</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Deserializing the empty buffer (new byte[0]) into <ph id="ph1">&lt;xref:System.Object&gt;</ph> (or <ph id="ph2">&lt;xref:System.Uri&gt;</ph>, or some other classes).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>SerializationException</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Serialization of <ph id="ph1">&lt;xref:System.DBNull.Value&gt;</ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>{} (or {"__type":"#System"})</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Null</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Serialization of the private members of [Serializable] types.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>serialized</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>not serialized</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Serialization of the public properties of <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> types.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>not serialized</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>serialized</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>"Extensions" of JSON</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Adheres to the JSON specification, which requires quotes on object member names ({"a":"hello"}).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Supports the names of object members without quotes ({a:"hello"}).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.DateTime&gt;</ph> Coordinated Universal Time (UTC)</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Does not support format "<ph id="ph1">\\</ph>/Date(123456789U)<ph id="ph2">\\</ph>/" or "<ph id="ph3">\\</ph>/Date<ph id="ph4">\\</ph>(\d+(U&amp;#124;(<ph id="ph5">\\</ph><ph id="ph6">+</ph><ph id="ph7">\\</ph>-[\d{4}]))?<ph id="ph8">\\</ph>)<ph id="ph9">\\</ph><ph id="ph10">\\</ph>/)".</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Supports format "<ph id="ph1">\\</ph>/Date(123456789U)<ph id="ph2">\\</ph>/" and "<ph id="ph3">\\</ph>/Date<ph id="ph4">\\</ph>(\d+(U&amp;#124;(<ph id="ph5">\\</ph><ph id="ph6">+</ph><ph id="ph7">\\</ph>-[\d{4}]))?<ph id="ph8">\\</ph>)<ph id="ph9">\\</ph><ph id="ph10">\\</ph>/)" as DateTime values.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Representation of dictionaries</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>An array of KeyValuePair<ph id="ph1">\&lt;</ph>K,V&gt;, handles key types that are not strings.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>As actual JSON objects - but only handles key types that are strings.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Escaped characters</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Always with an escape forward slash (/); never allows un-escaped invalid JSON characters, such as "\n".</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>With an escape forward slash (/) for DateTime values.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use Configuration to Add an ASP.NET AJAX Endpoint<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-use-configuration-to-add-an-aspnet-ajax-endpoint.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>