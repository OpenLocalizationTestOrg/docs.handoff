{"content":"---\ntitle: \"How to: Control the Scope of a Variable (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"variables [Visual Basic], scope\"\n  - \"declared elements [Visual Basic], scope\"\n  - \"visibility [Visual Basic], declared elements\"\n  - \"variables [Visual Basic], visibility\"\n  - \"scope [Visual Basic], declared elements\"\n  - \"scope [Visual Basic], variables\"\n  - \"scope [Visual Basic], Visual Basic\"\n  - \"declared elements [Visual Basic], visibility\"\n  - \"visibility [Visual Basic], variables\"\nms.assetid: 44b7f62a-cb5c-4d50-bce9-60ae68f87072\n---\n# How to: Control the Scope of a Variable (Visual Basic)\nNormally, a variable is in *scope*, or visible for reference, throughout the region in which you declare it. In some cases, the variable's *access level* can influence its scope.  \n  \n For more information, see [Scope in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md).  \n  \n## Scope at Block or Procedure Level  \n  \n#### To make a variable visible only within a block  \n  \n-   Place the [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md) for the variable between the initiating and terminating declaration statements of that block, for example between the `For` and `Next` statements of a `For` loop.  \n  \n     You can refer to the variable only from within the block.  \n  \n#### To make a variable visible only within a procedure  \n  \n-   Place the `Dim` statement for the variable inside the procedure but outside any block (such as a `With`...`End With` block).  \n  \n     You can refer to the variable only from within the procedure, including inside any block contained in the procedure.  \n  \n## Scope at Module or Namespace Level  \n For convenience, the single term *module level* applies equally to modules, classes, and structures. The access level of a module level variable determines its scope. The namespace that contains the module, class, or structure also influences the scope.  \n  \n#### To make a variable visible throughout a module, class, or structure  \n  \n1.  Place the `Dim` statement for the variable inside the module, class, or structure, but outside any procedure.  \n  \n2.  Include the [Private](../../../../visual-basic/language-reference/modifiers/private.md) keyword in the `Dim` statement.  \n  \n3.  You can refer to the variable from anywhere within the module, class, or structure, but not from outside it.  \n  \n#### To make a variable visible throughout a namespace  \n  \n1.  Place the `Dim` statement for the variable inside the module, class, or structure, but outside any procedure.  \n  \n2.  Include the [Friend](../../../../visual-basic/language-reference/modifiers/friend.md) or [Public](../../../../visual-basic/language-reference/modifiers/public.md) keyword in the `Dim` statement.  \n  \n3.  You can refer to the variable from anywhere within the namespace containing the module, class, or structure.  \n  \n## Example  \n The following example declares a variable at module level and limits its visibility to code within the module.  \n  \n```  \nModule demonstrateScope  \n    Private strMsg As String  \n    Sub initializePrivateVariable()  \n        strMsg = \"This variable cannot be used outside this module.\"  \n    End Sub  \n    Sub usePrivateVariable()  \n        MsgBox(strMsg)  \n    End Sub  \nEnd Module  \n```  \n  \n In the preceding example, all the procedures defined in module `demonstrateScope` can refer to the `String` variable `strMsg`. When the `usePrivateVariable` procedure is called, it displays the contents of the string variable `strMsg` in a dialog box.  \n  \n With the following alteration to the preceding example, the string variable `strMsg` can be referred to by code anywhere in the namespace of its declaration.  \n  \n```  \nPublic strMsg As String  \n```  \n  \n## Robust Programming  \n The narrower the scope of a variable, the fewer opportunities you have for accidentally referring to it in place of another variable with the same name. You can also minimize problems of reference matching.  \n  \n## .NET Framework Security  \n The narrower the scope of a variable, the smaller the chances that malicious code can make improper use of it.  \n  \n## See also\n\n- [Scope in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)\n- [Lifetime in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)\n- [Access levels in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)\n- [Variables](../../../../visual-basic/programming-guide/language-features/variables/index.md)\n- [Variable Declaration](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)\n- [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md)\n","nodes":[{"pos":[4,555],"embed":true,"restype":"x-metadata","content":"title: \"How to: Control the Scope of a Variable (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"variables [Visual Basic], scope\"\n  - \"declared elements [Visual Basic], scope\"\n  - \"visibility [Visual Basic], declared elements\"\n  - \"variables [Visual Basic], visibility\"\n  - \"scope [Visual Basic], declared elements\"\n  - \"scope [Visual Basic], variables\"\n  - \"scope [Visual Basic], Visual Basic\"\n  - \"declared elements [Visual Basic], visibility\"\n  - \"visibility [Visual Basic], variables\"\nms.assetid: 44b7f62a-cb5c-4d50-bce9-60ae68f87072","nodes":[{"content":"How to: Control the Scope of a Variable (Visual Basic)","nodes":[{"pos":[0,54],"content":"How to: Control the Scope of a Variable (Visual Basic)","nodes":[{"content":"How to: Control the Scope of a Variable (Visual Basic)","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[562,616],"content":"How to: Control the Scope of a Variable (Visual Basic)","linkify":"How to: Control the Scope of a Variable (Visual Basic)","nodes":[{"content":"How to: Control the Scope of a Variable (Visual Basic)","pos":[0,54]}]},{"content":"Normally, a variable is in <bpt id=\"p1\">*</bpt>scope<ept id=\"p1\">*</ept>, or visible for reference, throughout the region in which you declare it.","pos":[617,725],"source":"Normally, a variable is in *scope*, or visible for reference, throughout the region in which you declare it."},{"content":"In some cases, the variable's <bpt id=\"p1\">*</bpt>access level<ept id=\"p1\">*</ept> can influence its scope.","pos":[726,795],"source":" In some cases, the variable's *access level* can influence its scope."},{"pos":[802,941],"content":"For more information, see <bpt id=\"p1\">[</bpt>Scope in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept>.","source":"For more information, see [Scope in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)."},{"pos":[950,983],"content":"Scope at Block or Procedure Level","linkify":"Scope at Block or Procedure Level","nodes":[{"content":"Scope at Block or Procedure Level","pos":[0,33]}]},{"pos":[994,1040],"content":"To make a variable visible only within a block","linkify":"To make a variable visible only within a block","nodes":[{"content":"To make a variable visible only within a block","pos":[0,46]}]},{"pos":[1050,1311],"content":"Place the <bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept> for the variable between the initiating and terminating declaration statements of that block, for example between the <ph id=\"ph1\">`For`</ph> and <ph id=\"ph2\">`Next`</ph> statements of a <ph id=\"ph3\">`For`</ph> loop.","source":"Place the [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md) for the variable between the initiating and terminating declaration statements of that block, for example between the `For` and `Next` statements of a `For` loop."},{"content":"You can refer to the variable only from within the block.","pos":[1322,1379]},{"pos":[1390,1440],"content":"To make a variable visible only within a procedure","linkify":"To make a variable visible only within a procedure","nodes":[{"content":"To make a variable visible only within a procedure","pos":[0,50]}]},{"pos":[1450,1574],"content":"Place the <ph id=\"ph1\">`Dim`</ph> statement for the variable inside the procedure but outside any block (such as a <ph id=\"ph2\">`With`</ph>...<ph id=\"ph3\">`End With`</ph> block).","source":"Place the `Dim` statement for the variable inside the procedure but outside any block (such as a `With`...`End With` block)."},{"content":"You can refer to the variable only from within the procedure, including inside any block contained in the procedure.","pos":[1585,1701]},{"pos":[1710,1744],"content":"Scope at Module or Namespace Level","linkify":"Scope at Module or Namespace Level","nodes":[{"content":"Scope at Module or Namespace Level","pos":[0,34]}]},{"content":"For convenience, the single term <bpt id=\"p1\">*</bpt>module level<ept id=\"p1\">*</ept> applies equally to modules, classes, and structures.","pos":[1748,1848],"source":"For convenience, the single term *module level* applies equally to modules, classes, and structures."},{"content":"The access level of a module level variable determines its scope.","pos":[1849,1914]},{"content":"The namespace that contains the module, class, or structure also influences the scope.","pos":[1915,2001]},{"pos":[2012,2079],"content":"To make a variable visible throughout a module, class, or structure","linkify":"To make a variable visible throughout a module, class, or structure","nodes":[{"content":"To make a variable visible throughout a module, class, or structure","pos":[0,67]}]},{"pos":[2089,2198],"content":"Place the <ph id=\"ph1\">`Dim`</ph> statement for the variable inside the module, class, or structure, but outside any procedure.","source":"Place the `Dim` statement for the variable inside the module, class, or structure, but outside any procedure."},{"pos":[2208,2327],"content":"Include the <bpt id=\"p1\">[</bpt>Private<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/private.md)</ept> keyword in the <ph id=\"ph1\">`Dim`</ph> statement.","source":"Include the [Private](../../../../visual-basic/language-reference/modifiers/private.md) keyword in the `Dim` statement."},{"content":"You can refer to the variable from anywhere within the module, class, or structure, but not from outside it.","pos":[2337,2445]},{"pos":[2456,2505],"content":"To make a variable visible throughout a namespace","linkify":"To make a variable visible throughout a namespace","nodes":[{"content":"To make a variable visible throughout a namespace","pos":[0,49]}]},{"pos":[2515,2624],"content":"Place the <ph id=\"ph1\">`Dim`</ph> statement for the variable inside the module, class, or structure, but outside any procedure.","source":"Place the `Dim` statement for the variable inside the module, class, or structure, but outside any procedure."},{"pos":[2634,2828],"content":"Include the <bpt id=\"p1\">[</bpt>Friend<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/friend.md)</ept> or <bpt id=\"p2\">[</bpt>Public<ept id=\"p2\">](../../../../visual-basic/language-reference/modifiers/public.md)</ept> keyword in the <ph id=\"ph1\">`Dim`</ph> statement.","source":"Include the [Friend](../../../../visual-basic/language-reference/modifiers/friend.md) or [Public](../../../../visual-basic/language-reference/modifiers/public.md) keyword in the `Dim` statement."},{"content":"You can refer to the variable from anywhere within the namespace containing the module, class, or structure.","pos":[2838,2946]},{"pos":[2955,2962],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example declares a variable at module level and limits its visibility to code within the module.","pos":[2966,3076]},{"content":"In the preceding example, all the procedures defined in module <ph id=\"ph1\">`demonstrateScope`</ph> can refer to the <ph id=\"ph2\">`String`</ph> variable <ph id=\"ph3\">`strMsg`</ph>.","pos":[3361,3487],"source":"In the preceding example, all the procedures defined in module `demonstrateScope` can refer to the `String` variable `strMsg`."},{"content":"When the <ph id=\"ph1\">`usePrivateVariable`</ph> procedure is called, it displays the contents of the string variable <ph id=\"ph2\">`strMsg`</ph> in a dialog box.","pos":[3488,3612],"source":" When the `usePrivateVariable` procedure is called, it displays the contents of the string variable `strMsg` in a dialog box."},{"pos":[3619,3776],"content":"With the following alteration to the preceding example, the string variable <ph id=\"ph1\">`strMsg`</ph> can be referred to by code anywhere in the namespace of its declaration.","source":"With the following alteration to the preceding example, the string variable `strMsg` can be referred to by code anywhere in the namespace of its declaration."},{"pos":[3826,3844],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"The narrower the scope of a variable, the fewer opportunities you have for accidentally referring to it in place of another variable with the same name.","pos":[3848,4000]},{"content":"You can also minimize problems of reference matching.","pos":[4001,4054]},{"pos":[4063,4086],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"content":"The narrower the scope of a variable, the smaller the chances that malicious code can make improper use of it.","pos":[4090,4200]},{"pos":[4209,4217],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4221,4333],"content":"<bpt id=\"p1\">[</bpt>Scope in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)</ept>","source":"[Scope in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/scope.md)"},{"pos":[4336,4454],"content":"<bpt id=\"p1\">[</bpt>Lifetime in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)</ept>","source":"[Lifetime in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)"},{"pos":[4457,4585],"content":"<bpt id=\"p1\">[</bpt>Access levels in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>","source":"[Access levels in Visual Basic](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)"},{"pos":[4588,4680],"content":"<bpt id=\"p1\">[</bpt>Variables<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/index.md)</ept>","source":"[Variables](../../../../visual-basic/programming-guide/language-features/variables/index.md)"},{"pos":[4683,4801],"content":"<bpt id=\"p1\">[</bpt>Variable Declaration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept>","source":"[Variable Declaration](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)"},{"pos":[4804,4892],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md)"}]}