{"content":"---\ntitle: String interpolation in C#\ndescription: Learn how to include formatted expression results in a result string in C# with string interpolation.\nauthor: pkulikov\nms.date: 05/09/2018\n---\n# String interpolation in C\\#\n\nThis tutorial shows you how to use [string interpolation](../language-reference/tokens/interpolated.md) to format and include expression results in a result string. The examples assume that you are familiar with basic C# concepts and .NET type formatting. If you are new to string interpolation or .NET type formatting, check out the [interactive string interpolation tutorial](exploration/interpolated-strings.yml) first. For more information about formatting types in .NET, see the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) topic.\n\n[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]\n\n## Introduction\n\nThe [string interpolation](../language-reference/tokens/interpolated.md) feature is built on top of the [composite formatting](../../standard/base-types/composite-formatting.md) feature and provides a more readable and convenient syntax to include formatted expression results in a result string.\n\nTo identify a string literal as an interpolated string, prepend it with the `$` symbol. You can embed any valid C# expression that returns a value in an interpolated string. In the following example, as soon as an expression is evaluated, its result is converted into a string and included in a result string:\n\n[!code-csharp-interactive[string interpolation example](~/samples/snippets/csharp/tutorials/string-interpolation/Program.cs#1)]\n\nAs the example shows, you include an expression in an interpolated string by enclosing it with braces:\n\n```\n{<interpolatedExpression>}\n```\n\nAt compile time, an interpolated string is typically transformed into a <xref:System.String.Format%2A?displayProperty=nameWithType> method call. That makes all the capabilities of the [string composite formatting](../../standard/base-types/composite-formatting.md) feature available to you to use with interpolated strings as well.\n\nThe compiler may substitute a <xref:System.String.Format%2A?displayProperty=nameWithType> for <xref:System.String.Concat%2A?displayProperty=nameWithType> if the analyzed behavior would be equivalent to concatenation.\n\n## How to specify a format string for an interpolated expression\n\nYou specify a format string that is supported by the type of the expression result by following the interpolated expression with a colon (\":\") and the format string:\n\n```\n{<interpolatedExpression>:<formatString>}\n```\n\nThe following example shows how to specify standard and custom format strings for expressions that produce date and time or numeric results:\n\n[!code-csharp-interactive[format string example](~/samples/snippets/csharp/tutorials/string-interpolation/Program.cs#2)]\n\nFor more information, see the [Format String Component](../../standard/base-types/composite-formatting.md#format-string-component) section of the [Composite Formatting](../../standard/base-types/composite-formatting.md) topic. That section provides links to the topics that describe standard and custom format strings supported by .NET base types.\n\n## How to control the field width and alignment of the formatted interpolated expression\n\nYou specify the minimum field width and the alignment of the formatted expression result by following the interpolated expression with a comma (\",\") and the constant expression:\n\n```\n{<interpolatedExpression>,<alignment>}\n```\n\nIf the *alignment* value is positive, the formatted expression result is right-aligned; if negative, it's left-aligned.\n\nIf you need to specify both alignment and a format string, start with the alignment component:\n\n```\n{<interpolatedExpression>,<alignment>:<formatString>}\n```\n\nThe following example shows how to specify alignment and uses pipe characters (\"|\") to delimit text fields:\n\n[!code-csharp-interactive[alignment example](~/samples/snippets/csharp/tutorials/string-interpolation/Program.cs#3)]\n\nAs the example output shows, if the length of the formatted expression result exceeds specified field width, the *alignment* value is ignored.\n\nFor more information, see the [Alignment Component](../../standard/base-types/composite-formatting.md#alignment-component) section of the [Composite Formatting](../../standard/base-types/composite-formatting.md) topic.\n\n## How to use escape sequences in an interpolated string\n\nInterpolated strings support all escape sequences that can be used in ordinary string literals. For more information, see [String escape sequences](../programming-guide/strings/index.md#string-escape-sequences).\n\nTo interpret escape sequences literally, use a [verbatim](../language-reference/tokens/verbatim.md) string literal. A verbatim interpolated string starts with the `$` character followed by the `@` character.\n\nTo include a brace, \"{\" or \"}\", in a result string, use two braces, \"{{\" or \"}}\". For more information, see the [Escaping Braces](../../standard/base-types/composite-formatting.md#escaping-braces) section of the [Composite Formatting](../../standard/base-types/composite-formatting.md) topic.\n\nThe following example shows how to include braces in a result string and construct a verbatim interpolated string:\n\n[!code-csharp-interactive[escape sequence example](~/samples/snippets/csharp/tutorials/string-interpolation/Program.cs#4)]\n\n## How to use a ternary conditional operator `?:` in an interpolated expression\n\nAs the colon (\":\") has special meaning in an item with an interpolated expression, in order to use a [conditional operator](../language-reference/operators/conditional-operator.md) in an expression, enclose it in parentheses, as the following example shows:\n\n[!code-csharp-interactive[conditional operator example](~/samples/snippets/csharp/tutorials/string-interpolation/Program.cs#5)]\n\n## How to create a culture-specific result string with string interpolation\n\nBy default, an interpolated string uses the current culture defined by the <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> property for all formatting operations. Use implicit conversion of an interpolated string to a <xref:System.FormattableString?displayProperty=nameWithType> instance and call its <xref:System.FormattableString.ToString(System.IFormatProvider)> method to create a culture-specific result string. The following example shows how to do that:\n\n[!code-csharp-interactive[specify different cultures](~/samples/snippets/csharp/tutorials/string-interpolation/Program.cs#6)]\n\nAs the example shows, you can use one <xref:System.FormattableString> instance to generate multiple result strings for various cultures.\n\n## How to create a result string using the invariant culture\n\nAlong with the <xref:System.FormattableString.ToString(System.IFormatProvider)?displayProperty=nameWithType> method, you can use the static <xref:System.FormattableString.Invariant%2A?displayProperty=nameWithType> method to resolve an interpolated string to a result string for the <xref:System.Globalization.CultureInfo.InvariantCulture>. The following example shows how to do that:\n\n[!code-csharp-interactive[format with invariant culture](~/samples/snippets/csharp/tutorials/string-interpolation/Program.cs#7)]\n\n## Conclusion\n\nThis tutorial describes common scenarios of string interpolation usage. For more information about string interpolation, see the [String interpolation](../language-reference/tokens/interpolated.md) topic. For more information about formatting types in .NET, see the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) and [Composite formatting](../../standard/base-types/composite-formatting.md) topics.\n\n## See also\n\n- <xref:System.String.Format%2A?displayProperty=nameWithType>\n- <xref:System.FormattableString?displayProperty=nameWithType>\n- <xref:System.IFormattable?displayProperty=nameWithType>\n- [Strings](../programming-guide/strings/index.md)\n","nodes":[{"pos":[4,189],"embed":true,"restype":"x-metadata","content":"title: String interpolation in C#\ndescription: Learn how to include formatted expression results in a result string in C# with string interpolation.\nauthor: pkulikov\nms.date: 05/09/2018","nodes":[{"content":"String interpolation in C#","nodes":[{"pos":[0,26],"content":"String interpolation in C#","nodes":[{"content":"String interpolation in C#","pos":[0,26]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to include formatted expression results in a result string in C# with string interpolation.","nodes":[{"pos":[0,101],"content":"Learn how to include formatted expression results in a result string in C# with string interpolation.","nodes":[{"content":"Learn how to include formatted expression results in a result string in C# with string interpolation.","pos":[0,101]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[196,223],"content":"String interpolation in C\\#","linkify":"String interpolation in C\\#","nodes":[{"content":"String interpolation in C<ph id=\"ph1\">\\#</ph>","pos":[0,27],"source":"String interpolation in C\\#"}]},{"content":"This tutorial shows you how to use <bpt id=\"p1\">[</bpt>string interpolation<ept id=\"p1\">](../language-reference/tokens/interpolated.md)</ept> to format and include expression results in a result string.","pos":[225,389],"source":"This tutorial shows you how to use [string interpolation](../language-reference/tokens/interpolated.md) to format and include expression results in a result string."},{"content":"The examples assume that you are familiar with basic C# concepts and .NET type formatting.","pos":[390,480]},{"content":"If you are new to string interpolation or .NET type formatting, check out the <bpt id=\"p1\">[</bpt>interactive string interpolation tutorial<ept id=\"p1\">](exploration/interpolated-strings.yml)</ept> first.","pos":[481,647],"source":" If you are new to string interpolation or .NET type formatting, check out the [interactive string interpolation tutorial](exploration/interpolated-strings.yml) first."},{"content":"For more information about formatting types in .NET, see the <bpt id=\"p1\">[</bpt>Formatting Types in .NET<ept id=\"p1\">](../../standard/base-types/formatting-types.md)</ept> topic.","pos":[648,789],"source":" For more information about formatting types in .NET, see the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) topic."},{"pos":[863,875],"content":"Introduction","linkify":"Introduction","nodes":[{"content":"Introduction","pos":[0,12]}]},{"pos":[877,1173],"content":"The <bpt id=\"p1\">[</bpt>string interpolation<ept id=\"p1\">](../language-reference/tokens/interpolated.md)</ept> feature is built on top of the <bpt id=\"p2\">[</bpt>composite formatting<ept id=\"p2\">](../../standard/base-types/composite-formatting.md)</ept> feature and provides a more readable and convenient syntax to include formatted expression results in a result string.","source":"The [string interpolation](../language-reference/tokens/interpolated.md) feature is built on top of the [composite formatting](../../standard/base-types/composite-formatting.md) feature and provides a more readable and convenient syntax to include formatted expression results in a result string."},{"content":"To identify a string literal as an interpolated string, prepend it with the <ph id=\"ph1\">`$`</ph> symbol.","pos":[1175,1262],"source":"To identify a string literal as an interpolated string, prepend it with the `$` symbol."},{"content":"You can embed any valid C# expression that returns a value in an interpolated string.","pos":[1263,1348]},{"content":"In the following example, as soon as an expression is evaluated, its result is converted into a string and included in a result string:","pos":[1349,1484]},{"content":"As the example shows, you include an expression in an interpolated string by enclosing it with braces:","pos":[1615,1717]},{"content":"At compile time, an interpolated string is typically transformed into a <ph id=\"ph1\">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> method call.","pos":[1755,1899],"source":"At compile time, an interpolated string is typically transformed into a <xref:System.String.Format%2A?displayProperty=nameWithType> method call."},{"content":"That makes all the capabilities of the <bpt id=\"p1\">[</bpt>string composite formatting<ept id=\"p1\">](../../standard/base-types/composite-formatting.md)</ept> feature available to you to use with interpolated strings as well.","pos":[1900,2086],"source":" That makes all the capabilities of the [string composite formatting](../../standard/base-types/composite-formatting.md) feature available to you to use with interpolated strings as well."},{"pos":[2088,2304],"content":"The compiler may substitute a <ph id=\"ph1\">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph> for <ph id=\"ph2\">&lt;xref:System.String.Concat%2A?displayProperty=nameWithType&gt;</ph> if the analyzed behavior would be equivalent to concatenation.","source":"The compiler may substitute a <xref:System.String.Format%2A?displayProperty=nameWithType> for <xref:System.String.Concat%2A?displayProperty=nameWithType> if the analyzed behavior would be equivalent to concatenation."},{"pos":[2309,2370],"content":"How to specify a format string for an interpolated expression","linkify":"How to specify a format string for an interpolated expression","nodes":[{"content":"How to specify a format string for an interpolated expression","pos":[0,61]}]},{"content":"You specify a format string that is supported by the type of the expression result by following the interpolated expression with a colon (\":\") and the format string:","pos":[2372,2537]},{"content":"The following example shows how to specify standard and custom format strings for expressions that produce date and time or numeric results:","pos":[2590,2730]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Format String Component<ept id=\"p1\">](../../standard/base-types/composite-formatting.md#format-string-component)</ept> section of the <bpt id=\"p2\">[</bpt>Composite Formatting<ept id=\"p2\">](../../standard/base-types/composite-formatting.md)</ept> topic.","pos":[2854,3080],"source":"For more information, see the [Format String Component](../../standard/base-types/composite-formatting.md#format-string-component) section of the [Composite Formatting](../../standard/base-types/composite-formatting.md) topic."},{"content":"That section provides links to the topics that describe standard and custom format strings supported by .NET base types.","pos":[3081,3201]},{"pos":[3206,3291],"content":"How to control the field width and alignment of the formatted interpolated expression","linkify":"How to control the field width and alignment of the formatted interpolated expression","nodes":[{"content":"How to control the field width and alignment of the formatted interpolated expression","pos":[0,85]}]},{"content":"You specify the minimum field width and the alignment of the formatted expression result by following the interpolated expression with a comma (\",\") and the constant expression:","pos":[3293,3470]},{"pos":[3520,3639],"content":"If the <bpt id=\"p1\">*</bpt>alignment<ept id=\"p1\">*</ept> value is positive, the formatted expression result is right-aligned; if negative, it's left-aligned.","source":"If the *alignment* value is positive, the formatted expression result is right-aligned; if negative, it's left-aligned."},{"content":"If you need to specify both alignment and a format string, start with the alignment component:","pos":[3641,3735]},{"content":"The following example shows how to specify alignment and uses pipe characters (\"|\") to delimit text fields:","pos":[3800,3907]},{"pos":[4027,4169],"content":"As the example output shows, if the length of the formatted expression result exceeds specified field width, the <bpt id=\"p1\">*</bpt>alignment<ept id=\"p1\">*</ept> value is ignored.","source":"As the example output shows, if the length of the formatted expression result exceeds specified field width, the *alignment* value is ignored."},{"pos":[4171,4389],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Alignment Component<ept id=\"p1\">](../../standard/base-types/composite-formatting.md#alignment-component)</ept> section of the <bpt id=\"p2\">[</bpt>Composite Formatting<ept id=\"p2\">](../../standard/base-types/composite-formatting.md)</ept> topic.","source":"For more information, see the [Alignment Component](../../standard/base-types/composite-formatting.md#alignment-component) section of the [Composite Formatting](../../standard/base-types/composite-formatting.md) topic."},{"pos":[4394,4447],"content":"How to use escape sequences in an interpolated string","linkify":"How to use escape sequences in an interpolated string","nodes":[{"content":"How to use escape sequences in an interpolated string","pos":[0,53]}]},{"content":"Interpolated strings support all escape sequences that can be used in ordinary string literals.","pos":[4449,4544]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>String escape sequences<ept id=\"p1\">](../programming-guide/strings/index.md#string-escape-sequences)</ept>.","pos":[4545,4660],"source":" For more information, see [String escape sequences](../programming-guide/strings/index.md#string-escape-sequences)."},{"content":"To interpret escape sequences literally, use a <bpt id=\"p1\">[</bpt>verbatim<ept id=\"p1\">](../language-reference/tokens/verbatim.md)</ept> string literal.","pos":[4662,4777],"source":"To interpret escape sequences literally, use a [verbatim](../language-reference/tokens/verbatim.md) string literal."},{"content":"A verbatim interpolated string starts with the <ph id=\"ph1\">`$`</ph> character followed by the <ph id=\"ph2\">`@`</ph> character.","pos":[4778,4869],"source":" A verbatim interpolated string starts with the `$` character followed by the `@` character."},{"content":"To include a brace, \"{\" or \"}\", in a result string, use two braces, \"{{\" or \"}}\".","pos":[4871,4952]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Escaping Braces<ept id=\"p1\">](../../standard/base-types/composite-formatting.md#escaping-braces)</ept> section of the <bpt id=\"p2\">[</bpt>Composite Formatting<ept id=\"p2\">](../../standard/base-types/composite-formatting.md)</ept> topic.","pos":[4953,5163],"source":" For more information, see the [Escaping Braces](../../standard/base-types/composite-formatting.md#escaping-braces) section of the [Composite Formatting](../../standard/base-types/composite-formatting.md) topic."},{"content":"The following example shows how to include braces in a result string and construct a verbatim interpolated string:","pos":[5165,5279]},{"pos":[5408,5484],"content":"How to use a ternary conditional operator <ph id=\"ph1\">`?:`</ph> in an interpolated expression","linkify":"How to use a ternary conditional operator `?:` in an interpolated expression","source":"How to use a ternary conditional operator `?:` in an interpolated expression"},{"pos":[5486,5743],"content":"As the colon (\":\") has special meaning in an item with an interpolated expression, in order to use a <bpt id=\"p1\">[</bpt>conditional operator<ept id=\"p1\">](../language-reference/operators/conditional-operator.md)</ept> in an expression, enclose it in parentheses, as the following example shows:","source":"As the colon (\":\") has special meaning in an item with an interpolated expression, in order to use a [conditional operator](../language-reference/operators/conditional-operator.md) in an expression, enclose it in parentheses, as the following example shows:"},{"pos":[5877,5949],"content":"How to create a culture-specific result string with string interpolation","linkify":"How to create a culture-specific result string with string interpolation","nodes":[{"content":"How to create a culture-specific result string with string interpolation","pos":[0,72]}]},{"content":"By default, an interpolated string uses the current culture defined by the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType&gt;</ph> property for all formatting operations.","pos":[5951,6149],"source":"By default, an interpolated string uses the current culture defined by the <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> property for all formatting operations."},{"content":"Use implicit conversion of an interpolated string to a <ph id=\"ph1\">&lt;xref:System.FormattableString?displayProperty=nameWithType&gt;</ph> instance and call its <ph id=\"ph2\">&lt;xref:System.FormattableString.ToString(System.IFormatProvider)&gt;</ph> method to create a culture-specific result string.","pos":[6150,6403],"source":" Use implicit conversion of an interpolated string to a <xref:System.FormattableString?displayProperty=nameWithType> instance and call its <xref:System.FormattableString.ToString(System.IFormatProvider)> method to create a culture-specific result string."},{"content":"The following example shows how to do that:","pos":[6404,6447]},{"pos":[6576,6712],"content":"As the example shows, you can use one <ph id=\"ph1\">&lt;xref:System.FormattableString&gt;</ph> instance to generate multiple result strings for various cultures.","source":"As the example shows, you can use one <xref:System.FormattableString> instance to generate multiple result strings for various cultures."},{"pos":[6717,6774],"content":"How to create a result string using the invariant culture","linkify":"How to create a result string using the invariant culture","nodes":[{"content":"How to create a result string using the invariant culture","pos":[0,57]}]},{"content":"Along with the <ph id=\"ph1\">&lt;xref:System.FormattableString.ToString(System.IFormatProvider)?displayProperty=nameWithType&gt;</ph> method, you can use the static <ph id=\"ph2\">&lt;xref:System.FormattableString.Invariant%2A?displayProperty=nameWithType&gt;</ph> method to resolve an interpolated string to a result string for the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture&gt;</ph>.","pos":[6776,7115],"source":"Along with the <xref:System.FormattableString.ToString(System.IFormatProvider)?displayProperty=nameWithType> method, you can use the static <xref:System.FormattableString.Invariant%2A?displayProperty=nameWithType> method to resolve an interpolated string to a result string for the <xref:System.Globalization.CultureInfo.InvariantCulture>."},{"content":"The following example shows how to do that:","pos":[7116,7159]},{"pos":[7294,7304],"content":"Conclusion","linkify":"Conclusion","nodes":[{"content":"Conclusion","pos":[0,10]}]},{"content":"This tutorial describes common scenarios of string interpolation usage.","pos":[7306,7377]},{"content":"For more information about string interpolation, see the <bpt id=\"p1\">[</bpt>String interpolation<ept id=\"p1\">](../language-reference/tokens/interpolated.md)</ept> topic.","pos":[7378,7510],"source":" For more information about string interpolation, see the [String interpolation](../language-reference/tokens/interpolated.md) topic."},{"content":"For more information about formatting types in .NET, see the <bpt id=\"p1\">[</bpt>Formatting Types in .NET<ept id=\"p1\">](../../standard/base-types/formatting-types.md)</ept> and <bpt id=\"p2\">[</bpt>Composite formatting<ept id=\"p2\">](../../standard/base-types/composite-formatting.md)</ept> topics.","pos":[7511,7731],"source":" For more information about formatting types in .NET, see the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) and [Composite formatting](../../standard/base-types/composite-formatting.md) topics."},{"pos":[7736,7744],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7931,7979],"content":"<bpt id=\"p1\">[</bpt>Strings<ept id=\"p1\">](../programming-guide/strings/index.md)</ept>","source":"[Strings](../programming-guide/strings/index.md)"}]}