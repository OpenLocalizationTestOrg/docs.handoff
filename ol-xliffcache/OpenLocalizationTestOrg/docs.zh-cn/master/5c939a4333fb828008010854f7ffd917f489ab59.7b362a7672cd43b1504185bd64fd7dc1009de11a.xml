{"content":"---\ntitle: \"Group query results\"\ndescription: How to group results.\nkeywords: .NET, .NET Core, C#\nauthor: BillWagner\nmanager: wpickett\nms.author: wiwagn\nms.date: 12/1/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 2e4ec27f-06fb-4de7-8973-0189906d4520\n---\n# Group query results\n\nGrouping is one of the most powerful capabilities of LINQ. The following examples show how to group data in various ways:  \n  \n-   By a single property.  \n  \n-   By the first letter of a string property.  \n  \n-   By a computed numeric range.  \n  \n-   By Boolean predicate or other expression.  \n  \n-   By a compound key.  \n  \n In addition, the last two queries project their results into a new anonymous type that contains only the student's first and last name. For more information, see the [group clause](../language-reference/keywords/group-clause.md).  \n  \n## Example  \n All the examples in this topic use the following helper classes and data sources.  \n  \n [!code-cs[csProgGuideLINQ#15](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_1.cs)]  \n  \n## Example  \n The following example shows how to group source elements by using a single property of the element as the group key. In this case the key is a `string`, the student's last name. It is also possible to use a substring for the key. The grouping operation uses the default equality comparer for the type.  \n  \n Paste the following method into the `StudentClass` class. Change the calling statement in the `Main` method to `sc.GroupBySingleProperty()`.  \n  \n [!code-cs[csProgGuideLINQ#17](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_2.cs)]  \n  \n## Example  \n The following example shows how to group source elements by using something other than a property of the object for the group key. In this example, the key is the first letter of the student's last name.  \n  \n Paste the following method into the `StudentClass` class. Change the calling statement in the `Main` method to `sc.GroupBySubstring()`.  \n  \n [!code-cs[csProgGuideLINQ#18](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_3.cs)]  \n  \n## Example  \n The following example shows how to group source elements by using a numeric range as a group key. The query then projects the results into an anonymous type that contains only the first and last name and the percentile range to which the student belongs. An anonymous type is used because it is not necessary to use the complete `Student` object to display the results. `GetPercentile` is a helper function that calculates a percentile based on the student's average score. The method returns an integer between 0 and 10.  \n  \n [!code-cs[csProgGuideLINQ#50](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_4.cs)]  \n  \n Paste the following method into the `StudentClass` class. Change the calling statement in the `Main` method to `sc.GroupByRange()`.  \n  \n [!code-cs[csProgGuideLINQ#19](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_5.cs)]  \n  \n## Example  \n The following example shows how to group source elements by using a Boolean comparison expression. In this example, the Boolean expression tests whether a student's average exam score is greater than 75. As in previous examples, the results are projected into an anonymous type because the complete source element is not needed. Note that the properties in the anonymous type become properties on the `Key` member and can be accessed by name when the query is executed.  \n  \n Paste the following method into the `StudentClass` class. Change the calling statement in the `Main` method to `sc.GroupByBoolean()`.  \n  \n [!code-cs[csProgGuideLINQ#20](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_6.cs)]  \n  \n## Example  \n The following example shows how to use an anonymous type to encapsulate a key that contains multiple values. In this example, the first key value is the first letter of the student's last name. The second key value is a Boolean that specifies whether the student scored over 85 on the first exam. You can order the groups by any property in the key.  \n  \n Paste the following method into the `StudentClass` class. Change the calling statement in the `Main` method to `sc.GroupByCompositeKey()`.  \n  \n [!code-cs[csProgGuideLINQ#21](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_7.cs)]  \n  \n## See also  \n <xref:System.Linq.Enumerable.GroupBy%2A>   \n <xref:System.Linq.IGrouping%602>   \n [LINQ Query Expressions](index.md)   \n [group clause](../language-reference/keywords/group-clause.md)   \n [Anonymous Types](../programming-guide/classes-and-structs/anonymous-types.md)   \n [Perform a Subquery on a Grouping Operation](perform-a-subquery-on-a-grouping-operation.md)   \n [Create a Nested Group](create-a-nested-group.md)   \n [Grouping Data](../programming-guide/concepts/linq/grouping-data.md)","nodes":[{"pos":[12,31],"content":"Group query results","needQuote":false,"needEscape":true,"nodes":[{"content":"Group query results","pos":[0,19]}]},{"pos":[46,67],"content":"How to group results.","needQuote":true,"needEscape":true,"nodes":[{"content":"How to group results.","pos":[0,21]}]},{"pos":[78,97],"content":".NET, .NET Core, C#","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core, C#","pos":[0,19]}]},{"pos":[321,340],"content":"Group query results","linkify":"Group query results","nodes":[{"content":"Group query results","pos":[0,19]}]},{"content":"Grouping is one of the most powerful capabilities of LINQ.","pos":[342,400]},{"content":"The following examples show how to group data in various ways:","pos":[401,463]},{"content":"By a single property.","pos":[473,494]},{"content":"By the first letter of a string property.","pos":[504,545]},{"content":"By a computed numeric range.","pos":[555,583]},{"content":"By Boolean predicate or other expression.","pos":[593,634]},{"content":"By a compound key.","pos":[644,662]},{"content":"In addition, the last two queries project their results into a new anonymous type that contains only the student's first and last name.","pos":[669,804]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>group clause<ept id=\"p1\">](../language-reference/keywords/group-clause.md)</ept>.","pos":[805,898],"source":" For more information, see the [group clause](../language-reference/keywords/group-clause.md)."},{"pos":[907,914],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"All the examples in this topic use the following helper classes and data sources.","pos":[918,999]},{"pos":[1006,1116],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideLINQ#15<ept id=\"p2\">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideLINQ#15](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_1.cs)]"},{"pos":[1125,1132],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to group source elements by using a single property of the element as the group key.","pos":[1136,1252]},{"content":"In this case the key is a <ph id=\"ph1\">`string`</ph>, the student's last name.","pos":[1253,1313],"source":" In this case the key is a `string`, the student's last name."},{"content":"It is also possible to use a substring for the key.","pos":[1314,1365]},{"content":"The grouping operation uses the default equality comparer for the type.","pos":[1366,1437]},{"content":"Paste the following method into the <ph id=\"ph1\">`StudentClass`</ph> class.","pos":[1444,1501],"source":"Paste the following method into the `StudentClass` class."},{"content":"Change the calling statement in the <ph id=\"ph1\">`Main`</ph> method to <ph id=\"ph2\">`sc.GroupBySingleProperty()`</ph>.","pos":[1502,1584],"source":" Change the calling statement in the `Main` method to `sc.GroupBySingleProperty()`."},{"pos":[1591,1701],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideLINQ#17<ept id=\"p2\">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideLINQ#17](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_2.cs)]"},{"pos":[1710,1717],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to group source elements by using something other than a property of the object for the group key.","pos":[1721,1851]},{"content":"In this example, the key is the first letter of the student's last name.","pos":[1852,1924]},{"content":"Paste the following method into the <ph id=\"ph1\">`StudentClass`</ph> class.","pos":[1931,1988],"source":"Paste the following method into the `StudentClass` class."},{"content":"Change the calling statement in the <ph id=\"ph1\">`Main`</ph> method to <ph id=\"ph2\">`sc.GroupBySubstring()`</ph>.","pos":[1989,2066],"source":" Change the calling statement in the `Main` method to `sc.GroupBySubstring()`."},{"pos":[2073,2183],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideLINQ#18<ept id=\"p2\">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideLINQ#18](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_3.cs)]"},{"pos":[2192,2199],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to group source elements by using a numeric range as a group key.","pos":[2203,2300]},{"content":"The query then projects the results into an anonymous type that contains only the first and last name and the percentile range to which the student belongs.","pos":[2301,2457]},{"content":"An anonymous type is used because it is not necessary to use the complete <ph id=\"ph1\">`Student`</ph> object to display the results.","pos":[2458,2572],"source":" An anonymous type is used because it is not necessary to use the complete `Student` object to display the results."},{"content":"<ph id=\"ph1\">`GetPercentile`</ph> is a helper function that calculates a percentile based on the student's average score.","pos":[2573,2676],"source":"`GetPercentile` is a helper function that calculates a percentile based on the student's average score."},{"content":"The method returns an integer between 0 and 10.","pos":[2677,2724]},{"pos":[2731,2841],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideLINQ#50<ept id=\"p2\">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideLINQ#50](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_4.cs)]"},{"content":"Paste the following method into the <ph id=\"ph1\">`StudentClass`</ph> class.","pos":[2848,2905],"source":"Paste the following method into the `StudentClass` class."},{"content":"Change the calling statement in the <ph id=\"ph1\">`Main`</ph> method to <ph id=\"ph2\">`sc.GroupByRange()`</ph>.","pos":[2906,2979],"source":" Change the calling statement in the `Main` method to `sc.GroupByRange()`."},{"pos":[2986,3096],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideLINQ#19<ept id=\"p2\">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_5.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideLINQ#19](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_5.cs)]"},{"pos":[3105,3112],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to group source elements by using a Boolean comparison expression.","pos":[3116,3214]},{"content":"In this example, the Boolean expression tests whether a student's average exam score is greater than 75.","pos":[3215,3319]},{"content":"As in previous examples, the results are projected into an anonymous type because the complete source element is not needed.","pos":[3320,3444]},{"content":"Note that the properties in the anonymous type become properties on the <ph id=\"ph1\">`Key`</ph> member and can be accessed by name when the query is executed.","pos":[3445,3585],"source":" Note that the properties in the anonymous type become properties on the `Key` member and can be accessed by name when the query is executed."},{"content":"Paste the following method into the <ph id=\"ph1\">`StudentClass`</ph> class.","pos":[3592,3649],"source":"Paste the following method into the `StudentClass` class."},{"content":"Change the calling statement in the <ph id=\"ph1\">`Main`</ph> method to <ph id=\"ph2\">`sc.GroupByBoolean()`</ph>.","pos":[3650,3725],"source":" Change the calling statement in the `Main` method to `sc.GroupByBoolean()`."},{"pos":[3732,3842],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideLINQ#20<ept id=\"p2\">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_6.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideLINQ#20](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_6.cs)]"},{"pos":[3851,3858],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to use an anonymous type to encapsulate a key that contains multiple values.","pos":[3862,3970]},{"content":"In this example, the first key value is the first letter of the student's last name.","pos":[3971,4055]},{"content":"The second key value is a Boolean that specifies whether the student scored over 85 on the first exam.","pos":[4056,4158]},{"content":"You can order the groups by any property in the key.","pos":[4159,4211]},{"content":"Paste the following method into the <ph id=\"ph1\">`StudentClass`</ph> class.","pos":[4218,4275],"source":"Paste the following method into the `StudentClass` class."},{"content":"Change the calling statement in the <ph id=\"ph1\">`Main`</ph> method to <ph id=\"ph2\">`sc.GroupByCompositeKey()`</ph>.","pos":[4276,4356],"source":" Change the calling statement in the `Main` method to `sc.GroupByCompositeKey()`."},{"pos":[4363,4473],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideLINQ#21<ept id=\"p2\">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_7.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideLINQ#21](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_7.cs)]"},{"pos":[4482,4490],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>LINQ Query Expressions<ept id=\"p1\">](index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4575,4611],"source":" [LINQ Query Expressions](index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>group clause<ept id=\"p1\">](../language-reference/keywords/group-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[4614,4678],"source":" [group clause](../language-reference/keywords/group-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Anonymous Types<ept id=\"p1\">](../programming-guide/classes-and-structs/anonymous-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[4681,4761],"source":" [Anonymous Types](../programming-guide/classes-and-structs/anonymous-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Perform a Subquery on a Grouping Operation<ept id=\"p1\">](perform-a-subquery-on-a-grouping-operation.md)</ept><ph id=\"ph1\"> </ph>","pos":[4764,4857],"source":" [Perform a Subquery on a Grouping Operation](perform-a-subquery-on-a-grouping-operation.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Create a Nested Group<ept id=\"p1\">](create-a-nested-group.md)</ept><ph id=\"ph1\"> </ph>","pos":[4860,4911],"source":" [Create a Nested Group](create-a-nested-group.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Grouping Data<ept id=\"p1\">](../programming-guide/concepts/linq/grouping-data.md)</ept>","pos":[4914,4983],"source":" [Grouping Data](../programming-guide/concepts/linq/grouping-data.md)"}]}