{"content":"---\ntitle: \"SyncLock Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.SyncLock\"\n  - \"SyncLock\"\nhelpviewer_keywords: \n  - \"threading [Visual Basic], locks\"\n  - \"SyncLock statement [Visual Basic]\"\n  - \"locks, threads\"\nms.assetid: 14501703-298f-4d43-b139-c4b6366af176\n---\n# SyncLock Statement\nAcquires an exclusive lock for a statement block before executing the block.  \n  \n## Syntax  \n  \n```  \nSyncLock lockobject  \n    [ block ]  \nEnd SyncLock  \n```  \n  \n## Parts  \n `lockobject`  \n Required. Expression that evaluates to an object reference.  \n  \n `block`  \n Optional. Block of statements that are to execute when the lock is acquired.  \n  \n `End SyncLock`  \n Terminates a `SyncLock` block.  \n  \n## Remarks  \n The `SyncLock` statement ensures that multiple threads do not execute the statement block at the same time. `SyncLock` prevents each thread from entering the block until no other thread is executing it.  \n  \n The most common use of `SyncLock` is to protect data from being updated by more than one thread simultaneously. If the statements that manipulate the data must go to completion without interruption, put them inside a `SyncLock` block.  \n  \n A statement block protected by an exclusive lock is sometimes called a *critical section*.  \n  \n## Rules  \n  \n-   Branching. You cannot branch into a `SyncLock` block from outside the block.  \n  \n-   Lock Object Value. The value of `lockobject` cannot be `Nothing`. You must create the lock object before you use it in a `SyncLock` statement.  \n  \n     You cannot change the value of `lockobject` while executing a `SyncLock` block. The mechanism requires that the lock object remain unchanged.  \n  \n-   You can't use the [Await](../../../visual-basic/language-reference/operators/await-operator.md) operator in a `SyncLock` block.  \n  \n## Behavior  \n  \n-   Mechanism. When a thread reaches the `SyncLock` statement, it evaluates the `lockobject` expression and suspends execution until it acquires an exclusive lock on the object returned by the expression. When another thread reaches the `SyncLock` statement, it does not acquire a lock until the first thread executes the `End SyncLock` statement.  \n  \n-   Protected Data. If `lockobject` is a `Shared` variable, the exclusive lock prevents a thread in any instance of the class from executing the `SyncLock` block while any other thread is executing it. This protects data that is shared among all the instances.  \n  \n     If `lockobject` is an instance variable (not `Shared`), the lock prevents a thread running in the current instance from executing the `SyncLock` block at the same time as another thread in the same instance. This protects data maintained by the individual instance.  \n  \n-   Acquisition and Release. A `SyncLock` block behaves like a `Try...Finally` construction in which the `Try` block acquires an exclusive lock on `lockobject` and the `Finally` block releases it. Because of this, the `SyncLock` block guarantees release of the lock, no matter how you exit the block. This is true even in the case of an unhandled exception.  \n  \n-   Framework Calls. The `SyncLock` block acquires and releases the exclusive lock by calling the `Enter` and `Exit` methods of the `Monitor` class in the <xref:System.Threading> namespace.  \n  \n## Programming Practices  \n The `lockobject` expression should always evaluate to an object that belongs exclusively to your class. You should declare a `Private` object variable to protect data belonging to the current instance, or a `Private Shared` object variable to protect data common to all instances.  \n  \n You should not use the `Me` keyword to provide a lock object for instance data. If code external to your class has a reference to an instance of your class, it could use that reference as a lock object for a `SyncLock` block completely different from yours, protecting different data. In this way, your class and the other class could block each other from executing their unrelated `SyncLock` blocks. Similarly locking on a string can be problematic since any other code in the process using the same string will share the same lock.  \n  \n You should also not use the `Me.GetType` method to provide a lock object for shared data. This is because `GetType` always returns the same `Type` object for a given class name. External code could call `GetType` on your class and obtain the same lock object you are using. This would result in the two classes blocking each other from their `SyncLock` blocks.  \n  \n## Examples  \n  \n### Description  \n The following example shows a class that maintains a simple list of messages. It holds the messages in an array and the last used element of that array in a variable. The `addAnotherMessage` procedure increments the last element and stores the new message. Those two operations are protected by the `SyncLock` and `End SyncLock` statements, because once the last element has been incremented, the new message must be stored before any other thread can increment the last element again.  \n  \n If the `simpleMessageList` class shared one list of messages among all its instances, the variables `messagesList` and `messagesLast` would be declared as `Shared`. In this case, the variable `messagesLock` should also be `Shared`, so that there would be a single lock object used by every instance.  \n  \n### Code  \n [!code-vb[VbVbalrThreading#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrThreading/VB/Class1.vb#1)]  \n  \n### Description  \n The following example uses threads and `SyncLock`. As long as the `SyncLock` statement is present, the statement block is a critical section and `balance` never becomes a negative number. You can comment out the `SyncLock` and `End SyncLock` statements to see the effect of leaving out the `SyncLock` keyword.  \n  \n### Code  \n [!code-vb[VbVbalrThreading#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrThreading/VB/class2.vb#21)]  \n  \n### Comments  \n  \n## See also\n\n- <xref:System.Threading.Monitor?displayProperty=nameWithType>\n- <xref:System.Threading.Interlocked?displayProperty=nameWithType>\n- [Overview of synchronization primitives](../../../standard/threading/overview-of-synchronization-primitives.md)\n","nodes":[{"pos":[4,283],"embed":true,"restype":"x-metadata","content":"title: \"SyncLock Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.SyncLock\"\n  - \"SyncLock\"\nhelpviewer_keywords: \n  - \"threading [Visual Basic], locks\"\n  - \"SyncLock statement [Visual Basic]\"\n  - \"locks, threads\"\nms.assetid: 14501703-298f-4d43-b139-c4b6366af176","nodes":[{"content":"SyncLock Statement (Visual Basic)","nodes":[{"pos":[0,33],"content":"SyncLock Statement (Visual Basic)","nodes":[{"content":"SyncLock Statement (Visual Basic)","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[290,308],"content":"SyncLock Statement","linkify":"SyncLock Statement","nodes":[{"content":"SyncLock Statement","pos":[0,18]}]},{"content":"Acquires an exclusive lock for a statement block before executing the block.","pos":[309,385]},{"pos":[394,400],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[477,482],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[502,511]},{"content":"Expression that evaluates to an object reference.","pos":[512,561]},{"content":"Optional.","pos":[579,588]},{"content":"Block of statements that are to execute when the lock is acquired.","pos":[589,655]},{"content":"Terminates a <ph id=\"ph1\">`SyncLock`</ph> block.","pos":[680,710],"source":"Terminates a `SyncLock` block."},{"pos":[719,726],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`SyncLock`</ph> statement ensures that multiple threads do not execute the statement block at the same time.","pos":[730,837],"source":"The `SyncLock` statement ensures that multiple threads do not execute the statement block at the same time."},{"content":"<ph id=\"ph1\">`SyncLock`</ph> prevents each thread from entering the block until no other thread is executing it.","pos":[838,932],"source":"`SyncLock` prevents each thread from entering the block until no other thread is executing it."},{"content":"The most common use of <ph id=\"ph1\">`SyncLock`</ph> is to protect data from being updated by more than one thread simultaneously.","pos":[939,1050],"source":"The most common use of `SyncLock` is to protect data from being updated by more than one thread simultaneously."},{"content":"If the statements that manipulate the data must go to completion without interruption, put them inside a <ph id=\"ph1\">`SyncLock`</ph> block.","pos":[1051,1173],"source":" If the statements that manipulate the data must go to completion without interruption, put them inside a `SyncLock` block."},{"pos":[1180,1270],"content":"A statement block protected by an exclusive lock is sometimes called a <bpt id=\"p1\">*</bpt>critical section<ept id=\"p1\">*</ept>.","source":"A statement block protected by an exclusive lock is sometimes called a *critical section*."},{"pos":[1279,1284],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"Branching.","pos":[1294,1304]},{"content":"You cannot branch into a <ph id=\"ph1\">`SyncLock`</ph> block from outside the block.","pos":[1305,1370],"source":" You cannot branch into a `SyncLock` block from outside the block."},{"content":"Lock Object Value.","pos":[1380,1398]},{"content":"The value of <ph id=\"ph1\">`lockobject`</ph> cannot be <ph id=\"ph2\">`Nothing`</ph>.","pos":[1399,1445],"source":" The value of `lockobject` cannot be `Nothing`."},{"content":"You must create the lock object before you use it in a <ph id=\"ph1\">`SyncLock`</ph> statement.","pos":[1446,1522],"source":" You must create the lock object before you use it in a `SyncLock` statement."},{"content":"You cannot change the value of <ph id=\"ph1\">`lockobject`</ph> while executing a <ph id=\"ph2\">`SyncLock`</ph> block.","pos":[1533,1612],"source":"You cannot change the value of `lockobject` while executing a `SyncLock` block."},{"content":"The mechanism requires that the lock object remain unchanged.","pos":[1613,1674]},{"pos":[1684,1811],"content":"You can't use the <bpt id=\"p1\">[</bpt>Await<ept id=\"p1\">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator in a <ph id=\"ph1\">`SyncLock`</ph> block.","source":"You can't use the [Await](../../../visual-basic/language-reference/operators/await-operator.md) operator in a `SyncLock` block."},{"pos":[1820,1828],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"Mechanism.","pos":[1838,1848]},{"content":"When a thread reaches the <ph id=\"ph1\">`SyncLock`</ph> statement, it evaluates the <ph id=\"ph2\">`lockobject`</ph> expression and suspends execution until it acquires an exclusive lock on the object returned by the expression.","pos":[1849,2038],"source":" When a thread reaches the `SyncLock` statement, it evaluates the `lockobject` expression and suspends execution until it acquires an exclusive lock on the object returned by the expression."},{"content":"When another thread reaches the <ph id=\"ph1\">`SyncLock`</ph> statement, it does not acquire a lock until the first thread executes the <ph id=\"ph2\">`End SyncLock`</ph> statement.","pos":[2039,2181],"source":" When another thread reaches the `SyncLock` statement, it does not acquire a lock until the first thread executes the `End SyncLock` statement."},{"content":"Protected Data.","pos":[2191,2206]},{"content":"If <ph id=\"ph1\">`lockobject`</ph> is a <ph id=\"ph2\">`Shared`</ph> variable, the exclusive lock prevents a thread in any instance of the class from executing the <ph id=\"ph3\">`SyncLock`</ph> block while any other thread is executing it.","pos":[2207,2388],"source":" If `lockobject` is a `Shared` variable, the exclusive lock prevents a thread in any instance of the class from executing the `SyncLock` block while any other thread is executing it."},{"content":"This protects data that is shared among all the instances.","pos":[2389,2447]},{"content":"If <ph id=\"ph1\">`lockobject`</ph> is an instance variable (not <ph id=\"ph2\">`Shared`</ph>), the lock prevents a thread running in the current instance from executing the <ph id=\"ph3\">`SyncLock`</ph> block at the same time as another thread in the same instance.","pos":[2458,2665],"source":"If `lockobject` is an instance variable (not `Shared`), the lock prevents a thread running in the current instance from executing the `SyncLock` block at the same time as another thread in the same instance."},{"content":"This protects data maintained by the individual instance.","pos":[2666,2723]},{"content":"Acquisition and Release.","pos":[2733,2757]},{"content":"A <ph id=\"ph1\">`SyncLock`</ph> block behaves like a <ph id=\"ph2\">`Try...Finally`</ph> construction in which the <ph id=\"ph3\">`Try`</ph> block acquires an exclusive lock on <ph id=\"ph4\">`lockobject`</ph> and the <ph id=\"ph5\">`Finally`</ph> block releases it.","pos":[2758,2925],"source":" A `SyncLock` block behaves like a `Try...Finally` construction in which the `Try` block acquires an exclusive lock on `lockobject` and the `Finally` block releases it."},{"content":"Because of this, the <ph id=\"ph1\">`SyncLock`</ph> block guarantees release of the lock, no matter how you exit the block.","pos":[2926,3029],"source":" Because of this, the `SyncLock` block guarantees release of the lock, no matter how you exit the block."},{"content":"This is true even in the case of an unhandled exception.","pos":[3030,3086]},{"content":"Framework Calls.","pos":[3096,3112]},{"content":"The <ph id=\"ph1\">`SyncLock`</ph> block acquires and releases the exclusive lock by calling the <ph id=\"ph2\">`Enter`</ph> and <ph id=\"ph3\">`Exit`</ph> methods of the <ph id=\"ph4\">`Monitor`</ph> class in the <ph id=\"ph5\">&lt;xref:System.Threading&gt;</ph> namespace.","pos":[3113,3281],"source":" The `SyncLock` block acquires and releases the exclusive lock by calling the `Enter` and `Exit` methods of the `Monitor` class in the <xref:System.Threading> namespace."},{"pos":[3290,3311],"content":"Programming Practices","linkify":"Programming Practices","nodes":[{"content":"Programming Practices","pos":[0,21]}]},{"content":"The <ph id=\"ph1\">`lockobject`</ph> expression should always evaluate to an object that belongs exclusively to your class.","pos":[3315,3418],"source":"The `lockobject` expression should always evaluate to an object that belongs exclusively to your class."},{"content":"You should declare a <ph id=\"ph1\">`Private`</ph> object variable to protect data belonging to the current instance, or a <ph id=\"ph2\">`Private Shared`</ph> object variable to protect data common to all instances.","pos":[3419,3595],"source":" You should declare a `Private` object variable to protect data belonging to the current instance, or a `Private Shared` object variable to protect data common to all instances."},{"content":"You should not use the <ph id=\"ph1\">`Me`</ph> keyword to provide a lock object for instance data.","pos":[3602,3681],"source":"You should not use the `Me` keyword to provide a lock object for instance data."},{"content":"If code external to your class has a reference to an instance of your class, it could use that reference as a lock object for a <ph id=\"ph1\">`SyncLock`</ph> block completely different from yours, protecting different data.","pos":[3682,3886],"source":" If code external to your class has a reference to an instance of your class, it could use that reference as a lock object for a `SyncLock` block completely different from yours, protecting different data."},{"content":"In this way, your class and the other class could block each other from executing their unrelated <ph id=\"ph1\">`SyncLock`</ph> blocks.","pos":[3887,4003],"source":" In this way, your class and the other class could block each other from executing their unrelated `SyncLock` blocks."},{"content":"Similarly locking on a string can be problematic since any other code in the process using the same string will share the same lock.","pos":[4004,4136]},{"content":"You should also not use the <ph id=\"ph1\">`Me.GetType`</ph> method to provide a lock object for shared data.","pos":[4143,4232],"source":"You should also not use the `Me.GetType` method to provide a lock object for shared data."},{"content":"This is because <ph id=\"ph1\">`GetType`</ph> always returns the same <ph id=\"ph2\">`Type`</ph> object for a given class name.","pos":[4233,4320],"source":" This is because `GetType` always returns the same `Type` object for a given class name."},{"content":"External code could call <ph id=\"ph1\">`GetType`</ph> on your class and obtain the same lock object you are using.","pos":[4321,4416],"source":" External code could call `GetType` on your class and obtain the same lock object you are using."},{"content":"This would result in the two classes blocking each other from their <ph id=\"ph1\">`SyncLock`</ph> blocks.","pos":[4417,4503],"source":" This would result in the two classes blocking each other from their `SyncLock` blocks."},{"pos":[4512,4520],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[4530,4541],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"The following example shows a class that maintains a simple list of messages.","pos":[4545,4622]},{"content":"It holds the messages in an array and the last used element of that array in a variable.","pos":[4623,4711]},{"content":"The <ph id=\"ph1\">`addAnotherMessage`</ph> procedure increments the last element and stores the new message.","pos":[4712,4801],"source":" The `addAnotherMessage` procedure increments the last element and stores the new message."},{"content":"Those two operations are protected by the <ph id=\"ph1\">`SyncLock`</ph> and <ph id=\"ph2\">`End SyncLock`</ph> statements, because once the last element has been incremented, the new message must be stored before any other thread can increment the last element again.","pos":[4802,5030],"source":" Those two operations are protected by the `SyncLock` and `End SyncLock` statements, because once the last element has been incremented, the new message must be stored before any other thread can increment the last element again."},{"content":"If the <ph id=\"ph1\">`simpleMessageList`</ph> class shared one list of messages among all its instances, the variables <ph id=\"ph2\">`messagesList`</ph> and <ph id=\"ph3\">`messagesLast`</ph> would be declared as <ph id=\"ph4\">`Shared`</ph>.","pos":[5037,5201],"source":"If the `simpleMessageList` class shared one list of messages among all its instances, the variables `messagesList` and `messagesLast` would be declared as `Shared`."},{"content":"In this case, the variable <ph id=\"ph1\">`messagesLock`</ph> should also be <ph id=\"ph2\">`Shared`</ph>, so that there would be a single lock object used by every instance.","pos":[5202,5336],"source":" In this case, the variable `messagesLock` should also be `Shared`, so that there would be a single lock object used by every instance."},{"pos":[5346,5350],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[5479,5490],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"The following example uses threads and <ph id=\"ph1\">`SyncLock`</ph>.","pos":[5494,5544],"source":"The following example uses threads and `SyncLock`."},{"content":"As long as the <ph id=\"ph1\">`SyncLock`</ph> statement is present, the statement block is a critical section and <ph id=\"ph2\">`balance`</ph> never becomes a negative number.","pos":[5545,5681],"source":" As long as the `SyncLock` statement is present, the statement block is a critical section and `balance` never becomes a negative number."},{"content":"You can comment out the <ph id=\"ph1\">`SyncLock`</ph> and <ph id=\"ph2\">`End SyncLock`</ph> statements to see the effect of leaving out the <ph id=\"ph3\">`SyncLock`</ph> keyword.","pos":[5682,5803],"source":" You can comment out the `SyncLock` and `End SyncLock` statements to see the effect of leaving out the `SyncLock` keyword."},{"pos":[5813,5817],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[5948,5956],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"pos":[5965,5973],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6107,6218],"content":"<bpt id=\"p1\">[</bpt>Overview of synchronization primitives<ept id=\"p1\">](../../../standard/threading/overview-of-synchronization-primitives.md)</ept>","source":"[Overview of synchronization primitives](../../../standard/threading/overview-of-synchronization-primitives.md)"}]}