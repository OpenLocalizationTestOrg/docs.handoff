{"content":"---\ntitle: \"Passing Reference-Type Parameters (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"method parameters [C#], reference types\"\n  - \"parameters [C#], reference\"\nms.assetid: 9e6eb65c-942e-48ab-920a-b7ba9df4ea20\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Passing Reference-Type Parameters (C# Programming Guide)\nA variable of a [reference type](../../../csharp/language-reference/keywords/reference-types.md) does not contain its data directly; it contains a reference to its data. When you pass a reference-type parameter by value, it is possible to change the data pointed to by the reference, such as the value of a class member. However, you cannot change the value of the reference itself; that is, you cannot use the same reference to allocate memory for a new class and have it persist outside the block. To do that, pass the parameter using the [ref](../../../csharp/language-reference/keywords/ref.md) or [out](../../../csharp/language-reference/keywords/out.md) keyword. For simplicity, the following examples use `ref`.  \n  \n## Passing Reference Types by Value  \n The following example demonstrates passing a reference-type parameter, `arr`, by value, to a method, `Change`. Because the parameter is a reference to `arr`, it is possible to change the values of the array elements. However, the attempt to reassign the parameter to a different memory location only works inside the method and does not affect the original variable, `arr`.  \n  \n [!code-cs[csProgGuideParameters#7](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/passing-reference-type-parameters_1.cs)]  \n  \n In the preceding example, the array, `arr`, which is a reference type, is passed to the method without the `ref` parameter. In such a case, a copy of the reference, which points to `arr`, is passed to the method. The output shows that it is possible for the method to change the contents of an array element, in this case from `1` to `888`. However, allocating a new portion of memory by using the [new](../../../csharp/language-reference/keywords/new.md) operator inside the `Change` method makes the variable `pArray` reference a new array. Thus, any changes after that will not affect the original array, `arr`, which is created inside `Main`. In fact, two arrays are created in this example, one inside `Main` and one inside the `Change` method.  \n  \n## Passing Reference Types by Reference  \n The following example is the same as the previous example, except that the `ref` keyword is added to the method header and call. Any changes that take place in the method affect the original variable in the calling program.  \n  \n [!code-cs[csProgGuideParameters#8](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/passing-reference-type-parameters_2.cs)]  \n  \n All of the changes that take place inside the method affect the original array in `Main`. In fact, the original array is reallocated using the `new` operator. Thus, after calling the `Change` method, any reference to `arr` points to the five-element array, which is created in the `Change` method.  \n  \n## Swapping Two Strings  \n Swapping strings is a good example of passing reference-type parameters by reference. In the example, two strings, `str1` and `str2`, are initialized in `Main` and passed to the `SwapStrings` method as parameters modified by the `ref` keyword. The two strings are swapped inside the method and inside `Main` as well.  \n  \n [!code-cs[csProgGuideParameters#9](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/passing-reference-type-parameters_3.cs)]  \n  \n In this example, the parameters need to be passed by reference to affect the variables in the calling program. If you remove the `ref` keyword from both the method header and the method call, no changes will take place in the calling program.  \n  \n For more information about strings, see [string](../../../csharp/language-reference/keywords/string.md).  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Passing Parameters](../../../csharp/programming-guide/classes-and-structs/passing-parameters.md)   \n [Passing Arrays Using ref and out](../../../csharp/programming-guide/arrays/passing-arrays-using-ref-and-out.md)   \n [ref](../../../csharp/language-reference/keywords/ref.md)   \n [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)","nodes":[{"pos":[4,607],"embed":true,"restype":"x-metadata","content":"title: \"Passing Reference-Type Parameters (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"method parameters [C#], reference types\"\n  - \"parameters [C#], reference\"\nms.assetid: 9e6eb65c-942e-48ab-920a-b7ba9df4ea20\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Passing Reference-Type Parameters (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,73],"content":"Passing Reference-Type Parameters (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Passing Reference-Type Parameters (C# Programming Guide) | Microsoft Docs","pos":[0,73]}]}],"path":["title"]}],"yml":true},{"pos":[614,670],"content":"Passing Reference-Type Parameters (C# Programming Guide)","linkify":"Passing Reference-Type Parameters (C# Programming Guide)","nodes":[{"content":"Passing Reference-Type Parameters (C# Programming Guide)","pos":[0,56]}]},{"content":"A variable of a <bpt id=\"p1\">[</bpt>reference type<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept> does not contain its data directly; it contains a reference to its data.","pos":[671,840],"source":"A variable of a [reference type](../../../csharp/language-reference/keywords/reference-types.md) does not contain its data directly; it contains a reference to its data."},{"content":"When you pass a reference-type parameter by value, it is possible to change the data pointed to by the reference, such as the value of a class member.","pos":[841,991]},{"content":"However, you cannot change the value of the reference itself; that is, you cannot use the same reference to allocate memory for a new class and have it persist outside the block.","pos":[992,1170]},{"content":"To do that, pass the parameter using the <bpt id=\"p1\">[</bpt>ref<ept id=\"p1\">](../../../csharp/language-reference/keywords/ref.md)</ept> or <bpt id=\"p2\">[</bpt>out<ept id=\"p2\">](../../../csharp/language-reference/keywords/out.md)</ept> keyword.","pos":[1171,1339],"source":" To do that, pass the parameter using the [ref](../../../csharp/language-reference/keywords/ref.md) or [out](../../../csharp/language-reference/keywords/out.md) keyword."},{"content":"For simplicity, the following examples use <ph id=\"ph1\">`ref`</ph>.","pos":[1340,1389],"source":" For simplicity, the following examples use `ref`."},{"pos":[1398,1430],"content":"Passing Reference Types by Value","linkify":"Passing Reference Types by Value","nodes":[{"content":"Passing Reference Types by Value","pos":[0,32]}]},{"content":"The following example demonstrates passing a reference-type parameter, <ph id=\"ph1\">`arr`</ph>, by value, to a method, <ph id=\"ph2\">`Change`</ph>.","pos":[1434,1544],"source":"The following example demonstrates passing a reference-type parameter, `arr`, by value, to a method, `Change`."},{"content":"Because the parameter is a reference to <ph id=\"ph1\">`arr`</ph>, it is possible to change the values of the array elements.","pos":[1545,1650],"source":" Because the parameter is a reference to `arr`, it is possible to change the values of the array elements."},{"content":"However, the attempt to reassign the parameter to a different memory location only works inside the method and does not affect the original variable, <ph id=\"ph1\">`arr`</ph>.","pos":[1651,1807],"source":" However, the attempt to reassign the parameter to a different memory location only works inside the method and does not affect the original variable, `arr`."},{"content":"In the preceding example, the array, <ph id=\"ph1\">`arr`</ph>, which is a reference type, is passed to the method without the <ph id=\"ph2\">`ref`</ph> parameter.","pos":[1969,2092],"source":"In the preceding example, the array, `arr`, which is a reference type, is passed to the method without the `ref` parameter."},{"content":"In such a case, a copy of the reference, which points to <ph id=\"ph1\">`arr`</ph>, is passed to the method.","pos":[2093,2181],"source":" In such a case, a copy of the reference, which points to `arr`, is passed to the method."},{"content":"The output shows that it is possible for the method to change the contents of an array element, in this case from <ph id=\"ph1\">`1`</ph> to <ph id=\"ph2\">`888`</ph>.","pos":[2182,2309],"source":" The output shows that it is possible for the method to change the contents of an array element, in this case from `1` to `888`."},{"content":"However, allocating a new portion of memory by using the <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](../../../csharp/language-reference/keywords/new.md)</ept> operator inside the <ph id=\"ph1\">`Change`</ph> method makes the variable <ph id=\"ph2\">`pArray`</ph> reference a new array.","pos":[2310,2511],"source":" However, allocating a new portion of memory by using the [new](../../../csharp/language-reference/keywords/new.md) operator inside the `Change` method makes the variable `pArray` reference a new array."},{"content":"Thus, any changes after that will not affect the original array, <ph id=\"ph1\">`arr`</ph>, which is created inside <ph id=\"ph2\">`Main`</ph>.","pos":[2512,2615],"source":" Thus, any changes after that will not affect the original array, `arr`, which is created inside `Main`."},{"content":"In fact, two arrays are created in this example, one inside <ph id=\"ph1\">`Main`</ph> and one inside the <ph id=\"ph2\">`Change`</ph> method.","pos":[2616,2718],"source":" In fact, two arrays are created in this example, one inside `Main` and one inside the `Change` method."},{"pos":[2727,2763],"content":"Passing Reference Types by Reference","linkify":"Passing Reference Types by Reference","nodes":[{"content":"Passing Reference Types by Reference","pos":[0,36]}]},{"content":"The following example is the same as the previous example, except that the <ph id=\"ph1\">`ref`</ph> keyword is added to the method header and call.","pos":[2767,2895],"source":"The following example is the same as the previous example, except that the `ref` keyword is added to the method header and call."},{"content":"Any changes that take place in the method affect the original variable in the calling program.","pos":[2896,2990]},{"content":"All of the changes that take place inside the method affect the original array in <ph id=\"ph1\">`Main`</ph>.","pos":[3152,3241],"source":"All of the changes that take place inside the method affect the original array in `Main`."},{"content":"In fact, the original array is reallocated using the <ph id=\"ph1\">`new`</ph> operator.","pos":[3242,3310],"source":" In fact, the original array is reallocated using the `new` operator."},{"content":"Thus, after calling the <ph id=\"ph1\">`Change`</ph> method, any reference to <ph id=\"ph2\">`arr`</ph> points to the five-element array, which is created in the <ph id=\"ph3\">`Change`</ph> method.","pos":[3311,3449],"source":" Thus, after calling the `Change` method, any reference to `arr` points to the five-element array, which is created in the `Change` method."},{"pos":[3458,3478],"content":"Swapping Two Strings","linkify":"Swapping Two Strings","nodes":[{"content":"Swapping Two Strings","pos":[0,20]}]},{"content":"Swapping strings is a good example of passing reference-type parameters by reference.","pos":[3482,3567]},{"content":"In the example, two strings, <ph id=\"ph1\">`str1`</ph> and <ph id=\"ph2\">`str2`</ph>, are initialized in <ph id=\"ph3\">`Main`</ph> and passed to the <ph id=\"ph4\">`SwapStrings`</ph> method as parameters modified by the <ph id=\"ph5\">`ref`</ph> keyword.","pos":[3568,3725],"source":" In the example, two strings, `str1` and `str2`, are initialized in `Main` and passed to the `SwapStrings` method as parameters modified by the `ref` keyword."},{"content":"The two strings are swapped inside the method and inside <ph id=\"ph1\">`Main`</ph> as well.","pos":[3726,3798],"source":" The two strings are swapped inside the method and inside `Main` as well."},{"content":"In this example, the parameters need to be passed by reference to affect the variables in the calling program.","pos":[3960,4070]},{"content":"If you remove the <ph id=\"ph1\">`ref`</ph> keyword from both the method header and the method call, no changes will take place in the calling program.","pos":[4071,4202],"source":" If you remove the `ref` keyword from both the method header and the method call, no changes will take place in the calling program."},{"pos":[4209,4313],"content":"For more information about strings, see <bpt id=\"p1\">[</bpt>string<ept id=\"p1\">](../../../csharp/language-reference/keywords/string.md)</ept>.","source":"For more information about strings, see [string](../../../csharp/language-reference/keywords/string.md)."},{"pos":[4322,4330],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4334,4401],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Passing Parameters<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/passing-parameters.md)</ept><ph id=\"ph1\"> </ph>","pos":[4405,4503],"source":"[Passing Parameters](../../../csharp/programming-guide/classes-and-structs/passing-parameters.md) "},{"content":"<bpt id=\"p1\">[</bpt>Passing Arrays Using ref and out<ept id=\"p1\">](../../../csharp/programming-guide/arrays/passing-arrays-using-ref-and-out.md)</ept><ph id=\"ph1\"> </ph>","pos":[4507,4620],"source":"[Passing Arrays Using ref and out](../../../csharp/programming-guide/arrays/passing-arrays-using-ref-and-out.md) "},{"content":"<bpt id=\"p1\">[</bpt>ref<ept id=\"p1\">](../../../csharp/language-reference/keywords/ref.md)</ept><ph id=\"ph1\"> </ph>","pos":[4624,4682],"source":"[ref](../../../csharp/language-reference/keywords/ref.md) "},{"content":"<bpt id=\"p1\">[</bpt>Reference Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept>","pos":[4686,4767],"source":"[Reference Types](../../../csharp/language-reference/keywords/reference-types.md)"}]}