{"content":"---\ntitle: \"Let Clause (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.QueryLet\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"queries [Visual Basic], Let\"\n  - \"Let clause\"\n  - \"Let statement\"\nms.assetid: 981aa516-16eb-4c53-b1f1-5aa3e82f316e\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Let Clause (Visual Basic)\nComputes a value and assigns it to a new variable within the query.  \n  \n## Syntax  \n  \n```  \nLet variable = expression [, ...]  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`variable`|Required. An alias that can be used to reference the results of the supplied expression.|  \n|`expression`|Required. An expression that will be evaluated and assigned to the specified variable.|  \n  \n## Remarks  \n The `Let` clause enables you to compute values for each query result and reference them by using an alias. The alias can be used in other clauses, such as the `Where` clause. The `Let` clause enables you to create a query statement that is easier to read because you can specify an alias for an expression clause included in the query and substitute the alias each time the expression clause is used.  \n  \n You can include any number of `variable` and `expression` assignments in the `Let` clause. Separate each assignment with a comma (,).  \n  \n## Example  \n The following code example uses the `Let` clause to compute a 10 percent discount on products.  \n  \n [!code-vb[VbSimpleQuerySamples#16](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/let-clause_1.vb)]  \n  \n## See Also  \n [Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)   \n [Queries](../../../visual-basic/language-reference/queries/queries.md)   \n [Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)   \n [From Clause](../../../visual-basic/language-reference/queries/from-clause.md)   \n [Where Clause](../../../visual-basic/language-reference/queries/where-clause.md)","nodes":[{"pos":[4,632],"nodes":[{"content":"Let Clause (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,42],"content":"Let Clause (Visual Basic) | Microsoft Docs","nodes":[{"content":"Let Clause (Visual Basic) | Microsoft Docs","pos":[0,42]}]}],"pos":[6,51],"yaml":true}],"content":"title: \"Let Clause (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.QueryLet\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"queries [Visual Basic], Let\"\n  - \"Let clause\"\n  - \"Let statement\"\nms.assetid: 981aa516-16eb-4c53-b1f1-5aa3e82f316e\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[639,664],"content":"Let Clause (Visual Basic)","linkify":"Let Clause (Visual Basic)","nodes":[{"content":"Let Clause (Visual Basic)","pos":[0,25]}]},{"content":"Computes a value and assigns it to a new variable within the query.","pos":[665,732]},{"pos":[741,747],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[807,812],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[819,823]},{"content":"Definition","pos":[824,834]},{"content":"Required.","pos":[862,871]},{"content":"An alias that can be used to reference the results of the supplied expression.","pos":[872,950]},{"content":"Required.","pos":[968,977]},{"content":"An expression that will be evaluated and assigned to the specified variable.","pos":[978,1054]},{"pos":[1064,1071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Let`</ph> clause enables you to compute values for each query result and reference them by using an alias.","pos":[1075,1181],"source":"The `Let` clause enables you to compute values for each query result and reference them by using an alias."},{"content":"The alias can be used in other clauses, such as the <ph id=\"ph1\">`Where`</ph> clause.","pos":[1182,1249],"source":" The alias can be used in other clauses, such as the `Where` clause."},{"content":"The <ph id=\"ph1\">`Let`</ph> clause enables you to create a query statement that is easier to read because you can specify an alias for an expression clause included in the query and substitute the alias each time the expression clause is used.","pos":[1250,1475],"source":" The `Let` clause enables you to create a query statement that is easier to read because you can specify an alias for an expression clause included in the query and substitute the alias each time the expression clause is used."},{"content":"You can include any number of <ph id=\"ph1\">`variable`</ph> and <ph id=\"ph2\">`expression`</ph> assignments in the <ph id=\"ph3\">`Let`</ph> clause.","pos":[1482,1572],"source":"You can include any number of `variable` and `expression` assignments in the `Let` clause."},{"content":"Separate each assignment with a comma (,).","pos":[1573,1615]},{"pos":[1624,1631],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1635,1729],"content":"The following code example uses the <ph id=\"ph1\">`Let`</ph> clause to compute a 10 percent discount on products.","source":"The following code example uses the `Let` clause to compute a 10 percent discount on products."},{"pos":[1736,1861],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbSimpleQuerySamples#16<ept id=\"p2\">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/let-clause_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbSimpleQuerySamples#16](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/let-clause_1.vb)]"},{"pos":[1870,1878],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[1882,2009],"source":"[Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md) "},{"content":"<bpt id=\"p1\">[</bpt>Queries<ept id=\"p1\">](../../../visual-basic/language-reference/queries/queries.md)</ept><ph id=\"ph1\"> </ph>","pos":[2013,2084],"source":"[Queries](../../../visual-basic/language-reference/queries/queries.md) "},{"content":"<bpt id=\"p1\">[</bpt>Select Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/select-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2088,2171],"source":"[Select Clause](../../../visual-basic/language-reference/queries/select-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>From Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/from-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2175,2254],"source":"[From Clause](../../../visual-basic/language-reference/queries/from-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>Where Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/where-clause.md)</ept>","pos":[2258,2338],"source":"[Where Clause](../../../visual-basic/language-reference/queries/where-clause.md)"}]}