{"content":"---\ntitle: dotnet-build command - .NET Core CLI | Microsoft Docs\ndescription: The dotnet-build command builds a project and all of its dependencies. \nkeywords: dotnet-build, CLI, CLI command, .NET Core\nauthor: blackdwarf\nms.author: mairaw\nms.date: 03/15/2017\nms.topic: article\nms.prod: .net-core\nms.technology: dotnet-cli\nms.devlang: dotnet\nms.assetid: 5e1a2bc4-a919-4a86-8f33-a9b218b1fcb3\n---\n\n# dotnet-build\n\n## Name\n\n`dotnet-build` - Builds a project and all of its dependencies.\n\n## Synopsis\n\n`dotnet build [<PROJECT>] [-o|--output] [-f|--framework] [-c|--configuration] [-r|--runtime] [--version-suffix] [--no-incremental] [--no-dependencies] [-v|--verbosity] [-h|--help]`\n\n## Description\n\nThe `dotnet build` command builds the project and its dependencies into a set of binaries. The binaries include the project's code in Intermediate Language (IL) files with a *.dll* extension and symbol files used for debugging with a *.pdb* extension. A dependencies JSON file (*\\*.deps.json*) is produced that lists the dependencies of the application. A *\\*.runtimeconfig.json* file is produced, which specifies the shared runtime and its version for the application.\n\nIf the project has third-party dependencies, such as libraries from NuGet, they're resolved from the NuGet cache and aren't available with the project's built output. With that in mind, the product of `dotnet build` isn't ready to be transferred to another machine to run. This is in contrast to the behavior of the .NET Framework in which building an executable project (an application) produces output that's runnable on any machine where the .NET Framework is installed. To have a similar experience with .NET Core, you use the [dotnet publish](dotnet-publish.md) command. For more information, see [.NET Core Application Deployment](../deploying/index.md). \n\nBuilding requires the *project.assets.json* file, which lists the dependencies of your application. The file is created when you execute [`dotnet restore`](dotnet-restore.md) before building the project. Without the assets file in place, the tooling cannot resolve reference assemblies, which will result in errors.\n\n`dotnet build` uses MSBuild to build the project; thus, it supports both parallel and incremental builds. Refer to [Incremental Builds](https://docs.microsoft.com/visualstudio/msbuild/incremental-builds) for more information. \n\nIn addition to its options, the `dotnet build` command accepts MSBuild options, such as `/p` for setting properties or `/l` to define a logger. Learn more about these options in the [MSBuild Command-Line Reference](https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference). \n\nWhether the project is executable or not is determined by the `<OutputType>` property in the project file. The following example shows a project that will produce executable code:\n\n```xml\n<PropertyGroup>\n  <OutputType>Exe</OutputType>\n</PropertyGroup>\n```\n\nIn order to produce a library, omit the `<OutputType>` property. The main difference in built output is that the IL DLL for a library doesn't contain entry points and can't be executed. \n\n## Arguments\n\n`PROJECT`\n\nThe project file to build. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in *proj* and uses that file.\n\n## Options\n\n`-h|--help`\n\nPrints out a short help for the command.\n\n`-o|--output <OUTPUT_DIRECTORY>`\n\nDirectory in which to place the built binaries. You also need to define `--framework` when you specify this option.\n\n`-f|--framework <FRAMEWORK>`\n\nCompiles for a specific [framework](../../standard/frameworks.md). The framework must be defined in the [project file](csproj.md).\n\n`-c|--configuration <CONFIGURATION>`\n\nDefines the build configuration. If omitted, the build configuration defaults to `Debug`. Use `Release` build a Release configuration.\n\n`-r|--runtime <RUNTIME_IDENTIFIER>`\n\nSpecifies the target runtime. For a list of Runtime Identifiers (RIDs), see the [RID catalog](../rid-catalog.md).\n\n`--version-suffix <VERSION_SUFFIX>`\n\nDefines the version suffix for an asterisk (`*`) in the version field of the project file. The format follows NuGet's version guidelines.\n\n`--no-incremental`\n\nMarks the build as unsafe for incremental build. This turns off incremental compilation and forces a clean rebuild of the project's dependency graph.\n\n`--no-dependencies`\n\nIgnores project-to-project (P2P) references and only builds the root project specified to build.\n\n`-v|--verbosity <LEVEL>`\n\nSets the verbosity level of the command. Allowed values are `q[uiet]`, `m[inimal]`, `n[ormal]`, `d[etailed]`, and `diag[nostic]`.\n\n## Examples\n\nBuild a project and its dependencies:\n\n`dotnet build`\n\nBuild a project and its dependencies using Release configuration:\n\n`dotnet build --configuration Release`\n\nBuild a project and its dependencies for a specific runtime (in this example, Ubuntu 16.04):\n\n`dotnet build --runtime ubuntu.16.04-x64`\n","nodes":[{"pos":[11,64],"content":"dotnet-build command - .NET Core CLI | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"dotnet-build command - .NET Core CLI | Microsoft Docs","pos":[0,53]}]},{"pos":[78,148],"content":"The dotnet-build command builds a project and all of its dependencies.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dotnet-build command builds a project and all of its dependencies.","pos":[0,70]}]},{"pos":[160,201],"content":"dotnet-build, CLI, CLI command, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":"dotnet-build, CLI, CLI command, .NET Core","pos":[0,41]}]},{"pos":[397,409],"content":"dotnet-build","linkify":"dotnet-build","nodes":[{"content":"dotnet-build","pos":[0,12]}]},{"pos":[414,418],"content":"Name","linkify":"Name","nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[420,482],"content":"<ph id=\"ph1\">`dotnet-build`</ph> - Builds a project and all of its dependencies.","source":"`dotnet-build` - Builds a project and all of its dependencies."},{"pos":[487,495],"content":"Synopsis","linkify":"Synopsis","nodes":[{"content":"Synopsis","pos":[0,8]}]},{"pos":[682,693],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`dotnet build`</ph> command builds the project and its dependencies into a set of binaries.","pos":[695,785],"source":"The `dotnet build` command builds the project and its dependencies into a set of binaries."},{"content":"The binaries include the project's code in Intermediate Language (IL) files with a <bpt id=\"p1\">*</bpt>.dll<ept id=\"p1\">*</ept> extension and symbol files used for debugging with a <bpt id=\"p2\">*</bpt>.pdb<ept id=\"p2\">*</ept> extension.","pos":[786,946],"source":" The binaries include the project's code in Intermediate Language (IL) files with a *.dll* extension and symbol files used for debugging with a *.pdb* extension."},{"content":"A dependencies JSON file (<bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph>.deps.json<ept id=\"p1\">*</ept>) is produced that lists the dependencies of the application.","pos":[947,1048],"source":" A dependencies JSON file (*\\*.deps.json*) is produced that lists the dependencies of the application."},{"content":"A <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph>.runtimeconfig.json<ept id=\"p1\">*</ept> file is produced, which specifies the shared runtime and its version for the application.","pos":[1049,1164],"source":" A *\\*.runtimeconfig.json* file is produced, which specifies the shared runtime and its version for the application."},{"content":"If the project has third-party dependencies, such as libraries from NuGet, they're resolved from the NuGet cache and aren't available with the project's built output.","pos":[1166,1332]},{"content":"With that in mind, the product of <ph id=\"ph1\">`dotnet build`</ph> isn't ready to be transferred to another machine to run.","pos":[1333,1438],"source":" With that in mind, the product of `dotnet build` isn't ready to be transferred to another machine to run."},{"content":"This is in contrast to the behavior of the .NET Framework in which building an executable project (an application) produces output that's runnable on any machine where the .NET Framework is installed.","pos":[1439,1639]},{"content":"To have a similar experience with .NET Core, you use the <bpt id=\"p1\">[</bpt>dotnet publish<ept id=\"p1\">](dotnet-publish.md)</ept> command.","pos":[1640,1741],"source":" To have a similar experience with .NET Core, you use the [dotnet publish](dotnet-publish.md) command."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>.NET Core Application Deployment<ept id=\"p1\">](../deploying/index.md)</ept>.","pos":[1742,1826],"source":" For more information, see [.NET Core Application Deployment](../deploying/index.md)."},{"content":"Building requires the <bpt id=\"p1\">*</bpt>project.assets.json<ept id=\"p1\">*</ept> file, which lists the dependencies of your application.","pos":[1829,1928],"source":"Building requires the *project.assets.json* file, which lists the dependencies of your application."},{"content":"The file is created when you execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet restore`</ph><ept id=\"p1\">](dotnet-restore.md)</ept> before building the project.","pos":[1929,2032],"source":" The file is created when you execute [`dotnet restore`](dotnet-restore.md) before building the project."},{"content":"Without the assets file in place, the tooling cannot resolve reference assemblies, which will result in errors.","pos":[2033,2144]},{"content":"<ph id=\"ph1\">`dotnet build`</ph> uses MSBuild to build the project; thus, it supports both parallel and incremental builds.","pos":[2146,2251],"source":"`dotnet build` uses MSBuild to build the project; thus, it supports both parallel and incremental builds."},{"content":"Refer to <bpt id=\"p1\">[</bpt>Incremental Builds<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/msbuild/incremental-builds)</ept> for more information.","pos":[2252,2371],"source":" Refer to [Incremental Builds](https://docs.microsoft.com/visualstudio/msbuild/incremental-builds) for more information."},{"content":"In addition to its options, the <ph id=\"ph1\">`dotnet build`</ph> command accepts MSBuild options, such as <ph id=\"ph2\">`/p`</ph> for setting properties or <ph id=\"ph3\">`/l`</ph> to define a logger.","pos":[2374,2517],"source":"In addition to its options, the `dotnet build` command accepts MSBuild options, such as `/p` for setting properties or `/l` to define a logger."},{"content":"Learn more about these options in the <bpt id=\"p1\">[</bpt>MSBuild Command-Line Reference<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference)</ept>.","pos":[2518,2669],"source":" Learn more about these options in the [MSBuild Command-Line Reference](https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference)."},{"content":"Whether the project is executable or not is determined by the <ph id=\"ph1\">`&lt;OutputType&gt;`</ph> property in the project file.","pos":[2672,2778],"source":"Whether the project is executable or not is determined by the `<OutputType>` property in the project file."},{"content":"The following example shows a project that will produce executable code:","pos":[2779,2851]},{"content":"In order to produce a library, omit the <ph id=\"ph1\">`&lt;OutputType&gt;`</ph> property.","pos":[2929,2993],"source":"In order to produce a library, omit the `<OutputType>` property."},{"content":"The main difference in built output is that the IL DLL for a library doesn't contain entry points and can't be executed.","pos":[2994,3114]},{"pos":[3120,3129],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"The project file to build.","pos":[3142,3168]},{"content":"If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in <bpt id=\"p1\">*</bpt>proj<ept id=\"p1\">*</ept> and uses that file.","pos":[3169,3328],"source":" If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in *proj* and uses that file."},{"pos":[3333,3340],"content":"Options","linkify":"Options","nodes":[{"content":"Options","pos":[0,7]}]},{"content":"Prints out a short help for the command.","pos":[3355,3395]},{"content":"Directory in which to place the built binaries.","pos":[3431,3478]},{"content":"You also need to define <ph id=\"ph1\">`--framework`</ph> when you specify this option.","pos":[3479,3546],"source":" You also need to define `--framework` when you specify this option."},{"content":"Compiles for a specific <bpt id=\"p1\">[</bpt>framework<ept id=\"p1\">](../../standard/frameworks.md)</ept>.","pos":[3578,3644],"source":"Compiles for a specific [framework](../../standard/frameworks.md)."},{"content":"The framework must be defined in the <bpt id=\"p1\">[</bpt>project file<ept id=\"p1\">](csproj.md)</ept>.","pos":[3645,3708],"source":" The framework must be defined in the [project file](csproj.md)."},{"content":"Defines the build configuration.","pos":[3748,3780]},{"content":"If omitted, the build configuration defaults to <ph id=\"ph1\">`Debug`</ph>.","pos":[3781,3837],"source":" If omitted, the build configuration defaults to `Debug`."},{"content":"Use <ph id=\"ph1\">`Release`</ph> build a Release configuration.","pos":[3838,3882],"source":" Use `Release` build a Release configuration."},{"content":"Specifies the target runtime.","pos":[3921,3950]},{"content":"For a list of Runtime Identifiers (RIDs), see the <bpt id=\"p1\">[</bpt>RID catalog<ept id=\"p1\">](../rid-catalog.md)</ept>.","pos":[3951,4034],"source":" For a list of Runtime Identifiers (RIDs), see the [RID catalog](../rid-catalog.md)."},{"content":"Defines the version suffix for an asterisk (<ph id=\"ph1\">`*`</ph>) in the version field of the project file.","pos":[4073,4163],"source":"Defines the version suffix for an asterisk (`*`) in the version field of the project file."},{"content":"The format follows NuGet's version guidelines.","pos":[4164,4210]},{"content":"Marks the build as unsafe for incremental build.","pos":[4232,4280]},{"content":"This turns off incremental compilation and forces a clean rebuild of the project's dependency graph.","pos":[4281,4381]},{"content":"Ignores project-to-project (P2P) references and only builds the root project specified to build.","pos":[4404,4500]},{"content":"Sets the verbosity level of the command.","pos":[4528,4568]},{"content":"Allowed values are <ph id=\"ph1\">`q[uiet]`</ph>, <ph id=\"ph2\">`m[inimal]`</ph>, <ph id=\"ph3\">`n[ormal]`</ph>, <ph id=\"ph4\">`d[etailed]`</ph>, and <ph id=\"ph5\">`diag[nostic]`</ph>.","pos":[4569,4657],"source":" Allowed values are `q[uiet]`, `m[inimal]`, `n[ormal]`, `d[etailed]`, and `diag[nostic]`."},{"pos":[4662,4670],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Build a project and its dependencies:","pos":[4672,4709]},{"content":"Build a project and its dependencies using Release configuration:","pos":[4727,4792]},{"content":"Build a project and its dependencies for a specific runtime (in this example, Ubuntu 16.04):","pos":[4834,4926]}]}