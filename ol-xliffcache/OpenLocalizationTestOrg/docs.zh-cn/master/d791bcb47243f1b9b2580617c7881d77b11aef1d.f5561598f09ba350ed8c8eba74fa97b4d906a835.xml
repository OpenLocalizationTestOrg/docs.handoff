{"content":"---\ntitle: \"How to: Validate Using XSD (LINQ to XML) (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: a0fe88d4-4e77-49e7-90de-8953feeccc21\ncaps.latest.revision: 4\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Validate Using XSD (LINQ to XML) (Visual Basic)\nThe <xref:System.Xml.Schema> namespace contains extension methods that make it easy to validate an XML tree against an XML Schema Definition Language (XSD) file. For more information, see the <xref:System.Xml.Schema.Extensions.Validate%2A> method documentation.  \n  \n## Example  \n The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set. One of the documents is valid, the other is not.  \n  \n```vb  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XElement = _  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:sequence>  \n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n                        <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  \n                    </xsd:sequence>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>content1</Child1>  \n            <Child2>content1</Child2>  \n        </Root>  \n  \n    Dim doc2 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>content1</Child1>  \n            <Child3>content1</Child3>  \n        </Root>  \n  \n    Console.WriteLine(\"Validating doc1\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors = True, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating doc2\")  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"doc2 {0}\", IIf(errors = True, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n```  \n  \n## Example  \n The following example validates that the XML document from [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md) is valid per the schema from [Sample XSD File: Customers and Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md). It then modifies the source XML document. It changes the `CustomerID` attribute on the first customer. After the change, orders will then refer to a customer that does not exist, so the XML document will no longer validate.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md).  \n  \n This example uses the following XSD schema: [Sample XSD File: Customers and Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md).  \n  \n```vb  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", \"CustomersOrders.xsd\")  \n  \n    Console.WriteLine(\"Attempting to validate\")  \n    Dim custOrdDoc As XDocument = XDocument.Load(\"CustomersOrders.xml\")  \n    errors = False  \n    custOrdDoc.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"custOrdDoc {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    ' Modify the source document so that it will not validate.  \n    custOrdDoc.<Root>.<Orders>.<Order>.<CustomerID>(0).Value = \"AAAAA\"  \n    Console.WriteLine(\"Attempting to validate after modification\")  \n    errors = False  \n    custOrdDoc.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"custOrdDoc {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nAttempting to validate  \ncustOrdDoc validated  \n  \nAttempting to validate after modification  \nThe key sequence 'AAAAA' in Keyref fails to refer to some key.  \ncustOrdDoc did not validate  \n```  \n  \n## See Also  \n <xref:System.Xml.Schema.Extensions.Validate%2A>   \n [Creating XML Trees (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)","nodes":[{"pos":[12,84],"content":"How to: Validate Using XSD (LINQ to XML) (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Validate Using XSD (LINQ to XML) (Visual Basic) | Microsoft Docs","pos":[0,72]}]},{"pos":[465,520],"content":"How to: Validate Using XSD (LINQ to XML) (Visual Basic)","linkify":"How to: Validate Using XSD (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Validate Using XSD (LINQ to XML) (Visual Basic)","pos":[0,55]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Schema&gt;</ph> namespace contains extension methods that make it easy to validate an XML tree against an XML Schema Definition Language (XSD) file.","pos":[521,682],"source":"The <xref:System.Xml.Schema> namespace contains extension methods that make it easy to validate an XML tree against an XML Schema Definition Language (XSD) file."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.Validate%2A&gt;</ph> method documentation.","pos":[683,782],"source":" For more information, see the <xref:System.Xml.Schema.Extensions.Validate%2A> method documentation."},{"pos":[791,798],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph>, then validates two <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> objects against the schema set.","pos":[802,957],"source":"The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set."},{"content":"One of the documents is valid, the other is not.","pos":[958,1006]},{"content":"This example produces the following output:","pos":[2652,2695]},{"pos":[2902,2909],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example validates that the XML document from <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept> is valid per the schema from <bpt id=\"p2\">[</bpt>Sample XSD File: Customers and Orders<ept id=\"p2\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md)</ept>.","pos":[2913,3303],"source":"The following example validates that the XML document from [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md) is valid per the schema from [Sample XSD File: Customers and Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md)."},{"content":"It then modifies the source XML document.","pos":[3304,3345]},{"content":"It changes the <ph id=\"ph1\">`CustomerID`</ph> attribute on the first customer.","pos":[3346,3406],"source":" It changes the `CustomerID` attribute on the first customer."},{"content":"After the change, orders will then refer to a customer that does not exist, so the XML document will no longer validate.","pos":[3407,3527]},{"pos":[3534,3744],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)."},{"pos":[3751,3933],"content":"This example uses the following XSD schema: <bpt id=\"p1\">[</bpt>Sample XSD File: Customers and Orders<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md)</ept>.","source":"This example uses the following XSD schema: [Sample XSD File: Customers and Orders](../../../../visual-basic/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders.md)."},{"content":"This example produces the following output:","pos":[4958,5001]},{"pos":[5215,5223],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Creating XML Trees (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)</ept>","pos":[5278,5394],"source":" [Creating XML Trees (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)"}]}