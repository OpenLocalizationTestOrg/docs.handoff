{"content":"---\ntitle: \"String Data Type (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.String\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"strings [Visual Basic], character\"\n  - \"strings [Visual Basic], fixed-length\"\n  - \"string keyword [Visual Basic]\"\n  - \"fixed-length strings, string data type\"\n  - \"literals, string\"\n  - \"text [Visual Basic], String data type\"\n  - \"$ identifier type character\"\n  - \"String data type\"\n  - \"fixed-length strings\"\n  - \"string literals\"\n  - \"data types [Visual Basic], assigning\"\n  - \"String literals\"\n  - \"identifier type characters, $\"\nms.assetid: 15ac03f5-cabd-42cc-a754-1df3893c25d9\ncaps.latest.revision: 19\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# String Data Type (Visual Basic)\nHolds sequences of unsigned 16-bit (2-byte) code points that range in value from 0 through 65535. Each *code point*, or character code, represents a single Unicode character. A string can contain from 0 to approximately two billion (2 ^ 31) Unicode characters.  \n  \n## Remarks  \n Use the `String` data type to hold multiple characters without the array management overhead of `Char()`, an array of `Char` elements.  \n  \n The default value of `String` is `Nothing` (a null reference). Note that this is not the same as the empty string (value `\"\"`).  \n  \n## Unicode Characters  \n The first 128 code points (0–127) of Unicode correspond to the letters and symbols on a standard U.S. keyboard. These first 128 code points are the same as those the ASCII character set defines. The second 128 code points (128–255) represent special characters, such as Latin-based alphabet letters, accents, currency symbols, and fractions. Unicode uses the remaining code points (256-65535) for a wide variety of symbols. This includes worldwide textual characters, diacritics, and mathematical and technical symbols.  \n  \n You can use methods such as <xref:System.Char.IsDigit%2A> and <xref:System.Char.IsPunctuation%2A> on an individual character in a `String` variable to determine its Unicode classification.  \n  \n## Format Requirements  \n You must enclose a `String` literal within quotation marks (`\" \"`). If you must include a quotation mark as one of the characters in the string, you use two contiguous quotation marks (`\"\"`). The following example illustrates this.  \n  \n```  \nDim j As String = \"Joe said \"\"Hello\"\" to me.\"  \nDim h As String = \"Hello\"  \n' The following messages all display the same thing:  \n' \"Joe said \"Hello\" to me.\"  \nMsgBox(j)  \nMsgBox(\"Joe said \" & \"\"\"\" & h & \"\"\"\" & \" to me.\")  \nMsgBox(\"Joe said \"\"\" & h & \"\"\" to me.\")  \n```  \n  \n Note that the contiguous quotation marks that represent a quotation mark in the string are independent of the quotation marks that begin and end the `String` literal.  \n  \n## String Manipulations  \n Once you assign a string to a `String` variable, that string is *immutable*, which means you cannot change its length or contents. When you alter a string in any way, Visual Basic creates a new string and abandons the previous one. The `String` variable then points to the new string.  \n  \n You can manipulate the contents of a `String` variable by using a variety of string functions. The following example illustrates the <xref:Microsoft.VisualBasic.Strings.Left%2A> function  \n  \n```  \nDim S As String = \"Database\"  \n' The following statement sets S to a new string containing \"Data\".  \nS = Microsoft.VisualBasic.Left(S, 4)  \n```  \n  \n A string created by another component might be padded with leading or trailing spaces. If you receive such a string, you can use the <xref:Microsoft.VisualBasic.Strings.Trim%2A>, <xref:Microsoft.VisualBasic.Strings.LTrim%2A>, and <xref:Microsoft.VisualBasic.Strings.RTrim%2A> functions to remove these spaces.  \n  \n For more information about string manipulations, see [Strings](../../../visual-basic/programming-guide/language-features/strings/index.md).  \n  \n## Programming Tips  \n  \n-   **Negative Numbers.** Remember that the characters held by `String` are unsigned and cannot represent negative values. In any case, you should not use `String` to hold numeric values.  \n  \n-   **Interop Considerations.** If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, remember that string characters have a different data width (8 bits) in other environments. If you are passing a string argument of 8-bit characters to such a component, declare it as `Byte()`, an array of `Byte` elements, instead of `String` in your new Visual Basic code.  \n  \n-   **Type Characters.** Appending the identifier type character `$` to any identifier forces it to the `String` data type. `String` has no literal type character. However, the compiler treats literals enclosed in quotation marks (`\" \"`) as `String`.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.String?displayProperty=fullName> class.  \n  \n## See Also  \n <xref:System.String?displayProperty=fullName>   \n [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [Char Data Type](../../../visual-basic/language-reference/data-types/char-data-type.md)   \n [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)   \n [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)   \n [How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)   \n [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n","nodes":[{"pos":[12,60],"content":"String Data Type (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"String Data Type (Visual Basic) | Microsoft Docs","pos":[0,48]}]},{"pos":[995,1026],"content":"String Data Type (Visual Basic)","linkify":"String Data Type (Visual Basic)","nodes":[{"content":"String Data Type (Visual Basic)","pos":[0,31]}]},{"content":"Holds sequences of unsigned 16-bit (2-byte) code points that range in value from 0 through 65535.","pos":[1027,1124]},{"content":"Each <bpt id=\"p1\">*</bpt>code point<ept id=\"p1\">*</ept>, or character code, represents a single Unicode character.","pos":[1125,1201],"source":" Each *code point*, or character code, represents a single Unicode character."},{"content":"A string can contain from 0 to approximately two billion (2 ^ 31) Unicode characters.","pos":[1202,1287]},{"pos":[1296,1303],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1307,1441],"content":"Use the <ph id=\"ph1\">`String`</ph> data type to hold multiple characters without the array management overhead of <ph id=\"ph2\">`Char()`</ph>, an array of <ph id=\"ph3\">`Char`</ph> elements.","source":"Use the `String` data type to hold multiple characters without the array management overhead of `Char()`, an array of `Char` elements."},{"content":"The default value of <ph id=\"ph1\">`String`</ph> is <ph id=\"ph2\">`Nothing`</ph> (a null reference).","pos":[1448,1510],"source":"The default value of `String` is `Nothing` (a null reference)."},{"content":"Note that this is not the same as the empty string (value <ph id=\"ph1\">`\"\"`</ph>).","pos":[1511,1575],"source":" Note that this is not the same as the empty string (value `\"\"`)."},{"pos":[1584,1602],"content":"Unicode Characters","linkify":"Unicode Characters","nodes":[{"content":"Unicode Characters","pos":[0,18]}]},{"content":"The first 128 code points (0–127) of Unicode correspond to the letters and symbols on a standard U.S. keyboard.","pos":[1606,1717]},{"content":"These first 128 code points are the same as those the ASCII character set defines.","pos":[1718,1800]},{"content":"The second 128 code points (128–255) represent special characters, such as Latin-based alphabet letters, accents, currency symbols, and fractions.","pos":[1801,1947]},{"content":"Unicode uses the remaining code points (256-65535) for a wide variety of symbols.","pos":[1948,2029]},{"content":"This includes worldwide textual characters, diacritics, and mathematical and technical symbols.","pos":[2030,2125]},{"pos":[2132,2320],"content":"You can use methods such as <ph id=\"ph1\">&lt;xref:System.Char.IsDigit%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Char.IsPunctuation%2A&gt;</ph> on an individual character in a <ph id=\"ph3\">`String`</ph> variable to determine its Unicode classification.","source":"You can use methods such as <xref:System.Char.IsDigit%2A> and <xref:System.Char.IsPunctuation%2A> on an individual character in a `String` variable to determine its Unicode classification."},{"pos":[2329,2348],"content":"Format Requirements","linkify":"Format Requirements","nodes":[{"content":"Format Requirements","pos":[0,19]}]},{"content":"You must enclose a <ph id=\"ph1\">`String`</ph> literal within quotation marks (<ph id=\"ph2\">`\" \"`</ph>).","pos":[2352,2419],"source":"You must enclose a `String` literal within quotation marks (`\" \"`)."},{"content":"If you must include a quotation mark as one of the characters in the string, you use two contiguous quotation marks (<ph id=\"ph1\">`\"\"`</ph>).","pos":[2420,2543],"source":" If you must include a quotation mark as one of the characters in the string, you use two contiguous quotation marks (`\"\"`)."},{"content":"The following example illustrates this.","pos":[2544,2583]},{"pos":[2872,3038],"content":"Note that the contiguous quotation marks that represent a quotation mark in the string are independent of the quotation marks that begin and end the <ph id=\"ph1\">`String`</ph> literal.","source":"Note that the contiguous quotation marks that represent a quotation mark in the string are independent of the quotation marks that begin and end the `String` literal."},{"pos":[3047,3067],"content":"String Manipulations","linkify":"String Manipulations","nodes":[{"content":"String Manipulations","pos":[0,20]}]},{"content":"Once you assign a string to a <ph id=\"ph1\">`String`</ph> variable, that string is <bpt id=\"p1\">*</bpt>immutable<ept id=\"p1\">*</ept>, which means you cannot change its length or contents.","pos":[3071,3201],"source":"Once you assign a string to a `String` variable, that string is *immutable*, which means you cannot change its length or contents."},{"content":"When you alter a string in any way, Visual Basic creates a new string and abandons the previous one.","pos":[3202,3302]},{"content":"The <ph id=\"ph1\">`String`</ph> variable then points to the new string.","pos":[3303,3355],"source":" The `String` variable then points to the new string."},{"content":"You can manipulate the contents of a <ph id=\"ph1\">`String`</ph> variable by using a variety of string functions.","pos":[3362,3456],"source":"You can manipulate the contents of a `String` variable by using a variety of string functions."},{"content":"The following example illustrates the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Left%2A&gt;</ph> function","pos":[3457,3548],"source":" The following example illustrates the <xref:Microsoft.VisualBasic.Strings.Left%2A> function"},{"content":"A string created by another component might be padded with leading or trailing spaces.","pos":[3710,3796]},{"content":"If you receive such a string, you can use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Trim%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Strings.LTrim%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Strings.RTrim%2A&gt;</ph> functions to remove these spaces.","pos":[3797,4019],"source":" If you receive such a string, you can use the <xref:Microsoft.VisualBasic.Strings.Trim%2A>, <xref:Microsoft.VisualBasic.Strings.LTrim%2A>, and <xref:Microsoft.VisualBasic.Strings.RTrim%2A> functions to remove these spaces."},{"pos":[4026,4165],"content":"For more information about string manipulations, see <bpt id=\"p1\">[</bpt>Strings<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/strings/index.md)</ept>.","source":"For more information about string manipulations, see [Strings](../../../visual-basic/programming-guide/language-features/strings/index.md)."},{"pos":[4174,4190],"content":"Programming Tips","linkify":"Programming Tips","nodes":[{"content":"Programming Tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Negative Numbers.<ept id=\"p1\">**</ept>","pos":[4200,4221],"source":"**Negative Numbers.**"},{"content":"Remember that the characters held by <ph id=\"ph1\">`String`</ph> are unsigned and cannot represent negative values.","pos":[4222,4318],"source":" Remember that the characters held by `String` are unsigned and cannot represent negative values."},{"content":"In any case, you should not use <ph id=\"ph1\">`String`</ph> to hold numeric values.","pos":[4319,4383],"source":" In any case, you should not use `String` to hold numeric values."},{"content":"<bpt id=\"p1\">**</bpt>Interop Considerations.<ept id=\"p1\">**</ept>","pos":[4393,4420],"source":"**Interop Considerations.**"},{"content":"If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, remember that string characters have a different data width (8 bits) in other environments.","pos":[4421,4626]},{"content":"If you are passing a string argument of 8-bit characters to such a component, declare it as <ph id=\"ph1\">`Byte()`</ph>, an array of <ph id=\"ph2\">`Byte`</ph> elements, instead of <ph id=\"ph3\">`String`</ph> in your new Visual Basic code.","pos":[4627,4808],"source":" If you are passing a string argument of 8-bit characters to such a component, declare it as `Byte()`, an array of `Byte` elements, instead of `String` in your new Visual Basic code."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[4818,4838],"source":"**Type Characters.**"},{"content":"Appending the identifier type character <ph id=\"ph1\">`$`</ph> to any identifier forces it to the <ph id=\"ph2\">`String`</ph> data type.","pos":[4839,4937],"source":" Appending the identifier type character `$` to any identifier forces it to the `String` data type."},{"content":"<ph id=\"ph1\">`String`</ph> has no literal type character.","pos":[4938,4977],"source":"`String` has no literal type character."},{"content":"However, the compiler treats literals enclosed in quotation marks (<ph id=\"ph1\">`\" \"`</ph>) as <ph id=\"ph2\">`String`</ph>.","pos":[4978,5064],"source":" However, the compiler treats literals enclosed in quotation marks (`\" \"`) as `String`."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[5074,5093],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> class.","pos":[5094,5198],"source":" The corresponding type in the .NET Framework is the <xref:System.String?displayProperty=fullName> class."},{"pos":[5207,5215],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[5268,5356],"source":" [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Char Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/char-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[5359,5448],"source":" [Char Data Type](../../../visual-basic/language-reference/data-types/char-data-type.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[5451,5561],"source":" [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[5564,5659],"source":" [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id=\"p1\">](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[5662,5836],"source":" [How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","pos":[5839,5970],"source":" [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}