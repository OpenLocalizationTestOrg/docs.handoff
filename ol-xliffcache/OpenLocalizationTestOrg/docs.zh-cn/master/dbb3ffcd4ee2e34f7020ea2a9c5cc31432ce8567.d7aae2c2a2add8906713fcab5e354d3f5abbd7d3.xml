{"content":"---\ntitle: \"How to: Bind Data to the MaskedTextBox Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"MaskedTextBox control [Windows Forms]\"\n  - \"data binding, MaskedTextBox control [Windows Forms]\"\n  - \"MaskedTextBox control [Windows Forms], binding data\"\nms.assetid: 34b29f07-e8df-48d4-b08b-53fcca524708\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Bind Data to the MaskedTextBox Control\nYou can bind data to a <xref:System.Windows.Forms.MaskedTextBox> control just as you can to any other Windows Forms control. However, if the format of your data in the database does not match the format expected by your mask definition, you will need to reformat the data. The following procedure demonstrates how to do this using the <xref:System.Windows.Forms.Binding.Format> and <xref:System.Windows.Forms.Binding.Parse> events of the <xref:System.Windows.Forms.Binding> class to display separate phone number and phone extension database fields as a single editable field.  \n  \n The following procedure requires that you have access to a SQL Server database with the Northwind sample database installed.  \n  \n### To bind data to a MaskedTextBox control  \n  \n1.  Create a new Windows Forms project.  \n  \n2.  Drag two <xref:System.Windows.Forms.TextBox> controls onto your form; name them `FirstName` and `LastName`.  \n  \n3.  Drag a <xref:System.Windows.Forms.MaskedTextBox> control onto your form; name it `PhoneMask`.  \n  \n4.  Set the <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> property of `PhoneMask` to `(000) 000-0000 x9999`.  \n  \n5.  Add the following namespace imports to the form.  \n  \n    ```csharp  \n    using System.Data.SqlClient;  \n    ```  \n  \n    ```vb  \n    Imports System.Data.SqlClient  \n    ```  \n  \n6.  Right-click the form and choose **View Code**. Place this code anywhere in your form class.  \n  \n    ```csharp  \n    Binding currentBinding, phoneBinding;  \n    DataSet employeesTable = new DataSet();  \n    SqlConnection sc;  \n    SqlDataAdapter dataConnect;  \n  \n    private void Form1_Load(object sender, EventArgs e)  \n    {  \n        DoMaskBinding();  \n    }  \n  \n    private void DoMaskBinding()  \n    {  \n        try  \n        {  \n            sc = new SqlConnection(\"Data Source=CLIENTUE;Initial Catalog=NORTHWIND;Integrated Security=SSPI\");  \n            sc.Open();  \n        }  \n        catch (Exception ex)  \n        {  \n            MessageBox.Show(ex.Message);  \n            return;  \n        }  \n  \n        dataConnect = new SqlDataAdapter(\"SELECT * FROM Employees\", sc);  \n        dataConnect.Fill(employeesTable, \"Employees\");  \n  \n        // Now bind MaskedTextBox to appropriate field. Note that we must create the Binding objects  \n        // before adding them to the control - otherwise, we won't get a Format event on the   \n        // initial load.   \n        try  \n        {  \n            currentBinding = new Binding(\"Text\", employeesTable, \"Employees.FirstName\");  \n            firstName.DataBindings.Add(currentBinding);  \n  \n            currentBinding = new Binding(\"Text\", employeesTable, \"Employees.LastName\");  \n            lastName.DataBindings.Add(currentBinding);  \n  \n            phoneBinding =new Binding(\"Text\", employeesTable, \"Employees.HomePhone\");  \n            // We must add the event handlers before we bind, or the Format event will not get called  \n            // for the first record.  \n            phoneBinding.Format += new ConvertEventHandler(phoneBinding_Format);  \n            phoneBinding.Parse += new ConvertEventHandler(phoneBinding_Parse);  \n            phoneMask.DataBindings.Add(phoneBinding);  \n        }  \n        catch (Exception ex)  \n        {  \n            MessageBox.Show(ex.Message);  \n            return;  \n        }  \n    }  \n    ```  \n  \n    ```vb  \n    Dim WithEvents CurrentBinding, PhoneBinding As Binding  \n    Dim EmployeesTable As New DataSet()  \n    Dim sc As SqlConnection  \n    Dim DataConnect As SqlDataAdapter  \n  \n    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load  \n        DoMaskedBinding()  \n    End Sub  \n  \n    Private Sub DoMaskedBinding()  \n        Try  \n            sc = New SqlConnection(\"Data Source=SERVERNAME;Initial Catalog=NORTHWIND;Integrated Security=SSPI\")  \n            sc.Open()  \n        Catch ex As Exception  \n            MessageBox.Show(ex.Message)  \n            Exit Sub  \n        End Try  \n  \n        DataConnect = New SqlDataAdapter(\"SELECT * FROM Employees\", sc)  \n        DataConnect.Fill(EmployeesTable, \"Employees\")  \n  \n        ' Now bind MaskedTextBox to appropriate field. Note that we must create the Binding objects  \n        ' before adding them to the control - otherwise, we won't get a Format event on the   \n        ' initial load.  \n        Try  \n            CurrentBinding = New Binding(\"Text\", EmployeesTable, \"Employees.FirstName\")  \n            firstName.DataBindings.Add(CurrentBinding)  \n            CurrentBinding = New Binding(\"Text\", EmployeesTable, \"Employees.LastName\")  \n            lastName.DataBindings.Add(CurrentBinding)  \n            PhoneBinding = New Binding(\"Text\", EmployeesTable, \"Employees.HomePhone\")  \n            PhoneMask.DataBindings.Add(PhoneBinding)  \n        Catch ex As Exception  \n            MessageBox.Show(ex.Message)  \n            Application.Exit()  \n        End Try  \n    End Sub  \n    ```  \n  \n7.  Add event handlers for the <xref:System.Windows.Forms.Binding.Format> and <xref:System.Windows.Forms.Binding.Parse> events to combine and separate the `PhoneNumber` and `Extension` fields from the bound <xref:System.Data.DataSet>.  \n  \n    ```csharp  \n    private void phoneBinding_Format(Object sender, ConvertEventArgs e)  \n    {  \n        String ext;  \n  \n        DataRowView currentRow = (DataRowView)BindingContext[employeesTable, \"Employees\"].Current;  \n        if (currentRow[\"Extension\"] == null)   \n        {  \n            ext = \"\";  \n        } else   \n        {  \n            ext = currentRow[\"Extension\"].ToString();  \n        }  \n  \n        e.Value = e.Value.ToString().Trim() + \" x\" + ext;  \n    }  \n  \n    private void phoneBinding_Parse(Object sender, ConvertEventArgs e)  \n    {  \n        String phoneNumberAndExt = e.Value.ToString();  \n  \n        int extIndex = phoneNumberAndExt.IndexOf(\"x\");  \n        String ext = phoneNumberAndExt.Substring(extIndex).Trim();  \n        String phoneNumber = phoneNumberAndExt.Substring(0, extIndex).Trim();  \n  \n        //Get the current binding object, and set the new extension manually.   \n        DataRowView currentRow = (DataRowView)BindingContext[employeesTable, \"Employees\"].Current;  \n        // Remove the \"x\" from the extension.  \n        currentRow[\"Extension\"] = ext.Substring(1);  \n  \n        //Return the phone number.  \n        e.Value = phoneNumber;  \n    }  \n    ```  \n  \n    ```vb  \n    Private Sub PhoneBinding_Format(ByVal sender As Object, ByVal e As ConvertEventArgs) Handles PhoneBinding.Format  \n        Dim Ext As String  \n  \n        Dim CurrentRow As DataRowView = CType(Me.BindingContext(EmployeesTable, \"Employees\").Current, DataRowView)  \n        If (CurrentRow(\"Extension\") Is Nothing) Then  \n            Ext = \"\"  \n        Else  \n            Ext = CurrentRow(\"Extension\").ToString()  \n        End If  \n  \n        e.Value = e.Value.ToString().Trim() & \" x\" & Ext  \n    End Sub  \n  \n    Private Sub PhoneBinding_Parse(ByVal sender As Object, ByVal e As ConvertEventArgs) Handles PhoneBinding.Parse  \n        Dim PhoneNumberAndExt As String = e.Value.ToString()  \n  \n        Dim ExtIndex As Integer = PhoneNumberAndExt.IndexOf(\"x\")  \n        Dim Ext As String = PhoneNumberAndExt.Substring(ExtIndex).Trim()  \n        Dim PhoneNumber As String = PhoneNumberAndExt.Substring(0, ExtIndex).Trim()  \n  \n        ' Get the current binding object, and set the new extension manually.   \n        Dim CurrentRow As DataRowView = CType(Me.BindingContext(EmployeesTable, \"Employees\").Current, DataRowView)  \n        ' Remove the \"x\" from the extension.  \n        CurrentRow(\"Extension\") = CObj(Ext.Substring(1))  \n  \n        ' Return the phone number.  \n        e.Value = PhoneNumber  \n    End Sub  \n    ```  \n  \n8.  Add two <xref:System.Windows.Forms.Button> controls to the form. Name them `previousButton` and `nextButton`. Double-click each button to add a <xref:System.Windows.Forms.Control.Click> event handler, and fill in the event handlers as shown in the following code example.  \n  \n    ```csharp  \n    private void previousButton_Click(object sender, EventArgs e)  \n    {  \n        BindingContext[employeesTable, \"Employees\"].Position = BindingContext[employeesTable, \"Employees\"].Position - 1;  \n    }  \n  \n    private void nextButton_Click(object sender, EventArgs e)  \n    {  \n        BindingContext[employeesTable, \"Employees\"].Position = BindingContext[employeesTable, \"Employees\"].Position + 1;  \n    }  \n    ```  \n  \n    ```vb  \n    Private Sub PreviousButton_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PreviousButton.Click  \n        Me.BindingContext(EmployeesTable, \"Employees\").Position = Me.BindingContext(EmployeesTable, \"Employees\").Position - 1  \n    End Sub  \n  \n    Private Sub NextButton_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NextButton.Click  \n        Me.BindingContext(EmployeesTable, \"Employees\").Position = Me.BindingContext(EmployeesTable, \"Employees\").Position + 1  \n    End Sub  \n    ```  \n  \n9. Run the sample. Edit the data, and use the **Previous** and **Next** buttons to see that the data is properly persisted to the <xref:System.Data.DataSet>.  \n  \n## Example  \n The following code example is the full code listing that results from completing the previous procedure.  \n  \n [!code-cpp[MaskedTextBoxData#1](../../../../samples/snippets/cpp/VS_Snippets_Winforms/MaskedTextBoxData/cpp/form1.cpp#1)]\n [!code-csharp[MaskedTextBoxData#1](../../../../samples/snippets/csharp/VS_Snippets_Winforms/MaskedTextBoxData/CS/form1.cs#1)]\n [!code-vb[MaskedTextBoxData#1](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/MaskedTextBoxData/VB/form1.vb#1)]  \n  \n## Compiling the Code  \n  \n-   Create a [!INCLUDE[csprcs](../../../../includes/csprcs-md.md)] or [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)] project.  \n  \n-   Add the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.MaskedTextBox> controls to the form, as described in the previous procedure.  \n  \n-   Open the source code file for the project's default form.  \n  \n-   Replace the source code in this file with the code listed in the previous \"Code\" section.  \n  \n-   Compile the application.  \n  \n## See Also  \n [Walkthrough: Working with the MaskedTextBox Control](../../../../docs/framework/winforms/controls/walkthrough-working-with-the-maskedtextbox-control.md)","nodes":[{"pos":[4,588],"embed":true,"restype":"x-metadata","content":"title: \"How to: Bind Data to the MaskedTextBox Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"MaskedTextBox control [Windows Forms]\"\n  - \"data binding, MaskedTextBox control [Windows Forms]\"\n  - \"MaskedTextBox control [Windows Forms], binding data\"\nms.assetid: 34b29f07-e8df-48d4-b08b-53fcca524708\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","nodes":[{"content":"How to: Bind Data to the MaskedTextBox Control | Microsoft Docs","nodes":[{"pos":[0,63],"content":"How to: Bind Data to the MaskedTextBox Control | Microsoft Docs","nodes":[{"content":"How to: Bind Data to the MaskedTextBox Control | Microsoft Docs","pos":[0,63]}]}],"path":["title"]}],"yml":true},{"pos":[595,641],"content":"How to: Bind Data to the MaskedTextBox Control","linkify":"How to: Bind Data to the MaskedTextBox Control","nodes":[{"content":"How to: Bind Data to the MaskedTextBox Control","pos":[0,46]}]},{"content":"You can bind data to a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.MaskedTextBox&gt;</ph> control just as you can to any other Windows Forms control.","pos":[642,766],"source":"You can bind data to a <xref:System.Windows.Forms.MaskedTextBox> control just as you can to any other Windows Forms control."},{"content":"However, if the format of your data in the database does not match the format expected by your mask definition, you will need to reformat the data.","pos":[767,914]},{"content":"The following procedure demonstrates how to do this using the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Binding.Format&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Binding.Parse&gt;</ph> events of the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Binding&gt;</ph> class to display separate phone number and phone extension database fields as a single editable field.","pos":[915,1218],"source":" The following procedure demonstrates how to do this using the <xref:System.Windows.Forms.Binding.Format> and <xref:System.Windows.Forms.Binding.Parse> events of the <xref:System.Windows.Forms.Binding> class to display separate phone number and phone extension database fields as a single editable field."},{"content":"The following procedure requires that you have access to a SQL Server database with the Northwind sample database installed.","pos":[1225,1349]},{"pos":[1359,1398],"content":"To bind data to a MaskedTextBox control","linkify":"To bind data to a MaskedTextBox control","nodes":[{"content":"To bind data to a MaskedTextBox control","pos":[0,39]}]},{"content":"Create a new Windows Forms project.","pos":[1408,1443]},{"pos":[1453,1560],"content":"Drag two <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> controls onto your form; name them <ph id=\"ph2\">`FirstName`</ph> and <ph id=\"ph3\">`LastName`</ph>.","source":"Drag two <xref:System.Windows.Forms.TextBox> controls onto your form; name them `FirstName` and `LastName`."},{"pos":[1570,1663],"content":"Drag a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.MaskedTextBox&gt;</ph> control onto your form; name it <ph id=\"ph2\">`PhoneMask`</ph>.","source":"Drag a <xref:System.Windows.Forms.MaskedTextBox> control onto your form; name it `PhoneMask`."},{"pos":[1673,1781],"content":"Set the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.MaskedTextBox.Mask%2A&gt;</ph> property of <ph id=\"ph2\">`PhoneMask`</ph> to <ph id=\"ph3\">`(000) 000-0000 x9999`</ph>.","source":"Set the <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> property of `PhoneMask` to `(000) 000-0000 x9999`."},{"content":"Add the following namespace imports to the form.","pos":[1791,1839]},{"content":"Right-click the form and choose <bpt id=\"p1\">**</bpt>View Code<ept id=\"p1\">**</ept>.","pos":[1974,2020],"source":"Right-click the form and choose **View Code**."},{"content":"Place this code anywhere in your form class.","pos":[2021,2065]},{"pos":[5587,5817],"content":"Add event handlers for the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Binding.Format&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Binding.Parse&gt;</ph> events to combine and separate the <ph id=\"ph3\">`PhoneNumber`</ph> and <ph id=\"ph4\">`Extension`</ph> fields from the bound <ph id=\"ph5\">&lt;xref:System.Data.DataSet&gt;</ph>.","source":"Add event handlers for the <xref:System.Windows.Forms.Binding.Format> and <xref:System.Windows.Forms.Binding.Parse> events to combine and separate the `PhoneNumber` and `Extension` fields from the bound <xref:System.Data.DataSet>."},{"content":"Add two <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls to the form.","pos":[8375,8439],"source":"Add two <xref:System.Windows.Forms.Button> controls to the form."},{"content":"Name them <ph id=\"ph1\">`previousButton`</ph> and <ph id=\"ph2\">`nextButton`</ph>.","pos":[8440,8484],"source":" Name them `previousButton` and `nextButton`."},{"content":"Double-click each button to add a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler, and fill in the event handlers as shown in the following code example.","pos":[8485,8646],"source":" Double-click each button to add a <xref:System.Windows.Forms.Control.Click> event handler, and fill in the event handlers as shown in the following code example."},{"content":"Run the sample.","pos":[9657,9672]},{"content":"Edit the data, and use the <bpt id=\"p1\">**</bpt>Previous<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Next<ept id=\"p2\">**</ept> buttons to see that the data is properly persisted to the <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>.","pos":[9673,9811],"source":" Edit the data, and use the **Previous** and **Next** buttons to see that the data is properly persisted to the <xref:System.Data.DataSet>."},{"pos":[9820,9827],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example is the full code listing that results from completing the previous procedure.","pos":[9831,9935]},{"pos":[10327,10345],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[10355,10483],"content":"Create a <ph id=\"ph1\">[!INCLUDE[csprcs](../../../../includes/csprcs-md.md)]</ph> or <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]</ph> project.","source":"Create a [!INCLUDE[csprcs](../../../../includes/csprcs-md.md)] or [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)] project."},{"content":"Add the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Forms.MaskedTextBox&gt;</ph> controls to the form, as described in the previous procedure.","pos":[10493,10644],"source":"Add the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.MaskedTextBox> controls to the form, as described in the previous procedure."},{"content":"Open the source code file for the project's default form.","pos":[10654,10711]},{"content":"Replace the source code in this file with the code listed in the previous \"Code\" section.","pos":[10721,10810]},{"content":"Compile the application.","pos":[10820,10844]},{"pos":[10853,10861],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[10865,11018],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Working with the MaskedTextBox Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/walkthrough-working-with-the-maskedtextbox-control.md)</ept>","source":"[Walkthrough: Working with the MaskedTextBox Control](../../../../docs/framework/winforms/controls/walkthrough-working-with-the-maskedtextbox-control.md)"}]}