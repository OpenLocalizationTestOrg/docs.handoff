<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a060754dc522d78761f58c6bf4e58b3b3a585137</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\refactoring-using-a-pure-function.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd403e9790a9ee3a6648e104ddb8662b8e9d131a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">125f2dd3afdf8b0fd408a3819bcd1017449317e6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Refactoring Using a Pure Function (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Refactoring Using a Pure Function (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following example refactors the previous example, <bpt id="p1">[</bpt>Refactoring Using an Extension Method (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/refactoring-using-an-extension-method.md)</ept>, to use a pure function In this example, the code to find the text of a paragraph is moved to the pure static method <ph id="ph1">`ParagraphText`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This example processes a WordprocessingML document, retrieving the paragraph nodes from a WordprocessingML document.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It also identifies the style of each paragraph.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example builds on the previous examples in this tutorial.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The refactored code is called out in comments in the code below.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For instructions for creating the source document for this example, see <bpt id="p1">[</bpt>Creating the Source Office Open XML Document (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example uses classes from the WindowsBase assembly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It uses types in the <ph id="ph1">&lt;xref:System.IO.Packaging?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This example produces the same output as before the refactoring:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The next example shows how to project XML into a different shape:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Projecting XML in a Different Shape (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/projecting-xml-in-a-different-shape.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Refactoring Using an Extension Method (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/refactoring-using-an-extension-method.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Refactoring Into Pure Functions (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/refactoring-into-pure-functions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>