{"content":"---\ntitle: \"Passing Arrays Using ref and out (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"arrays [C#], passing using ref and out\"\nms.assetid: 6a2b261e-a1cc-49a6-b4f0-6cacae385a1e\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Passing Arrays Using ref and out (C# Programming Guide)\nLike all [out](../../../csharp/language-reference/keywords/out.md) parameters, an `out` parameter of an array type must be assigned before it is used; that is, it must be assigned by the callee. For example:  \n  \n [!code-cs[csProgGuideArrays#39](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_1.cs)]  \n  \n Like all [ref](../../../csharp/language-reference/keywords/ref.md) parameters, a `ref` parameter of an array type must be definitely assigned by the caller. Therefore, there is no need to be definitely assigned by the callee. A `ref` parameter of an array type may be altered as a result of the call. For example, the array can be assigned the [null](../../../csharp/language-reference/keywords/null.md) value or can be initialized to a different array. For example:  \n  \n [!code-cs[csProgGuideArrays#40](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_2.cs)]  \n  \n The following two examples demonstrate the difference between `out` and `ref` when used in passing arrays to methods.  \n  \n## Example  \n In this example, the array `theArray` is declared in the caller (the `Main` method), and initialized in the `FillArray` method. Then, the array elements are returned to the caller and displayed.  \n  \n [!code-cs[csProgGuideArrays#37](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_3.cs)]  \n  \n## Example  \n In this example, the array `theArray` is initialized in the caller (the `Main` method), and passed to the `FillArray` method by using the `ref` parameter. Some of the array elements are updated in the `FillArray` method. Then, the array elements are returned to the caller and displayed.  \n  \n [!code-cs[csProgGuideArrays#38](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_4.cs)]  \n  \n## See Also  \n [ref](../../../csharp/language-reference/keywords/ref.md)   \n [out parameter modifier](../../../csharp/language-reference/keywords/out-parameter-modifier.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Arrays](../../../csharp/programming-guide/arrays/index.md)   \n [Single-Dimensional Arrays](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)   \n [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)   \n [Jagged Arrays](../../../csharp/programming-guide/arrays/jagged-arrays.md)","nodes":[{"pos":[4,572],"nodes":[{"content":"Passing Arrays Using ref and out (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,72],"content":"Passing Arrays Using ref and out (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Passing Arrays Using ref and out (C# Programming Guide) | Microsoft Docs","pos":[0,72]}]}],"pos":[6,81],"yaml":true}],"content":"title: \"Passing Arrays Using ref and out (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"arrays [C#], passing using ref and out\"\nms.assetid: 6a2b261e-a1cc-49a6-b4f0-6cacae385a1e\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[579,634],"content":"Passing Arrays Using ref and out (C# Programming Guide)","linkify":"Passing Arrays Using ref and out (C# Programming Guide)","nodes":[{"content":"Passing Arrays Using ref and out (C# Programming Guide)","pos":[0,55]}]},{"content":"Like all <bpt id=\"p1\">[</bpt>out<ept id=\"p1\">](../../../csharp/language-reference/keywords/out.md)</ept> parameters, an <ph id=\"ph1\">`out`</ph> parameter of an array type must be assigned before it is used; that is, it must be assigned by the callee.","pos":[635,829],"source":"Like all [out](../../../csharp/language-reference/keywords/out.md) parameters, an `out` parameter of an array type must be assigned before it is used; that is, it must be assigned by the callee."},{"content":"For example:","pos":[830,842]},{"pos":[849,980],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#39<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#39](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_1.cs)]"},{"content":"Like all <bpt id=\"p1\">[</bpt>ref<ept id=\"p1\">](../../../csharp/language-reference/keywords/ref.md)</ept> parameters, a <ph id=\"ph1\">`ref`</ph> parameter of an array type must be definitely assigned by the caller.","pos":[987,1143],"source":"Like all [ref](../../../csharp/language-reference/keywords/ref.md) parameters, a `ref` parameter of an array type must be definitely assigned by the caller."},{"content":"Therefore, there is no need to be definitely assigned by the callee.","pos":[1144,1212]},{"content":"A <ph id=\"ph1\">`ref`</ph> parameter of an array type may be altered as a result of the call.","pos":[1213,1287],"source":" A `ref` parameter of an array type may be altered as a result of the call."},{"content":"For example, the array can be assigned the <bpt id=\"p1\">[</bpt>null<ept id=\"p1\">](../../../csharp/language-reference/keywords/null.md)</ept> value or can be initialized to a different array.","pos":[1288,1440],"source":" For example, the array can be assigned the [null](../../../csharp/language-reference/keywords/null.md) value or can be initialized to a different array."},{"content":"For example:","pos":[1441,1453]},{"pos":[1460,1591],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#40<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#40](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_2.cs)]"},{"pos":[1598,1715],"content":"The following two examples demonstrate the difference between <ph id=\"ph1\">`out`</ph> and <ph id=\"ph2\">`ref`</ph> when used in passing arrays to methods.","source":"The following two examples demonstrate the difference between `out` and `ref` when used in passing arrays to methods."},{"pos":[1724,1731],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the array <ph id=\"ph1\">`theArray`</ph> is declared in the caller (the <ph id=\"ph2\">`Main`</ph> method), and initialized in the <ph id=\"ph3\">`FillArray`</ph> method.","pos":[1735,1862],"source":"In this example, the array `theArray` is declared in the caller (the `Main` method), and initialized in the `FillArray` method."},{"content":"Then, the array elements are returned to the caller and displayed.","pos":[1863,1929]},{"pos":[1936,2067],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#37<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#37](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_3.cs)]"},{"pos":[2076,2083],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the array <ph id=\"ph1\">`theArray`</ph> is initialized in the caller (the <ph id=\"ph2\">`Main`</ph> method), and passed to the <ph id=\"ph3\">`FillArray`</ph> method by using the <ph id=\"ph4\">`ref`</ph> parameter.","pos":[2087,2241],"source":"In this example, the array `theArray` is initialized in the caller (the `Main` method), and passed to the `FillArray` method by using the `ref` parameter."},{"content":"Some of the array elements are updated in the <ph id=\"ph1\">`FillArray`</ph> method.","pos":[2242,2307],"source":" Some of the array elements are updated in the `FillArray` method."},{"content":"Then, the array elements are returned to the caller and displayed.","pos":[2308,2374]},{"pos":[2381,2512],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#38<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#38](../../../csharp/programming-guide/arrays/codesnippet/CSharp/passing-arrays-using-ref-and-out_4.cs)]"},{"pos":[2521,2529],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>ref<ept id=\"p1\">](../../../csharp/language-reference/keywords/ref.md)</ept><ph id=\"ph1\"> </ph>","pos":[2533,2591],"source":"[ref](../../../csharp/language-reference/keywords/ref.md) "},{"content":"<bpt id=\"p1\">[</bpt>out parameter modifier<ept id=\"p1\">](../../../csharp/language-reference/keywords/out-parameter-modifier.md)</ept><ph id=\"ph1\"> </ph>","pos":[2595,2691],"source":"[out parameter modifier](../../../csharp/language-reference/keywords/out-parameter-modifier.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2695,2762],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2766,2826],"source":"[Arrays](../../../csharp/programming-guide/arrays/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Single-Dimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)</ept><ph id=\"ph1\"> </ph>","pos":[2830,2929],"source":"[Single-Dimensional Arrays](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md) "},{"content":"<bpt id=\"p1\">[</bpt>Multidimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)</ept><ph id=\"ph1\"> </ph>","pos":[2933,3028],"source":"[Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md) "},{"content":"<bpt id=\"p1\">[</bpt>Jagged Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/jagged-arrays.md)</ept>","pos":[3032,3106],"source":"[Jagged Arrays](../../../csharp/programming-guide/arrays/jagged-arrays.md)"}]}