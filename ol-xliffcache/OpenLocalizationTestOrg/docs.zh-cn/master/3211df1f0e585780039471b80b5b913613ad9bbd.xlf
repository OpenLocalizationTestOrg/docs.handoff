<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-make-thread-safe-calls-to-windows-forms-controls.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3211df1f0e585780039471b80b5b913613ad9bbd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\how-to-make-thread-safe-calls-to-windows-forms-controls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab0357f04e85bd95bdee30426327d7114e7ca341</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8ca5be495e7b8189ccd83247de3351ea13a6718</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Make thread-safe calls to Windows Forms controls</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Make thread-safe calls to Windows Forms controls</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Multithreading can improve the performance of Windows Forms apps, but access to Windows Forms controls isn't inherently thread-safe.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Multithreading can expose your code to very serious and complex bugs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Two or more threads manipulating a control can force the control into an inconsistent state and lead to race conditions, deadlocks, and freezes or hangs.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you implement multithreading in your app, be sure to call cross-thread controls in a thread-safe way.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Managed threading best practices<ept id="p1">](../../../standard/threading/managed-threading-best-practices.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are two ways to safely call a Windows Forms control from a thread that didn't create that control.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=fullName&gt;</ph> method to call a delegate created in the main thread, which in turn calls the control.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Or, you can implement a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker?displayProperty=nameWithType&gt;</ph>, which uses an event-driven model to separate work done in the background thread from reporting on the results.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Unsafe cross-thread calls</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It's unsafe to call a control directly from a thread that didn't create it.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code snippet illustrates an unsafe call to the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox?displayProperty=nameWithType&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Button1_Click`</ph> event handler creates a new <ph id="ph2">`WriteTextUnsafe`</ph> thread, which sets the main thread's <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox.Text%2A?displayProperty=nameWithType&gt;</ph> property directly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Visual Studio debugger detects these unsafe thread calls by raising an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> with the message, <bpt id="p1">**</bpt>Cross-thread operation not valid. Control "" accessed from a thread other than the thread it was created on.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> always occurs for unsafe cross-thread calls during Visual Studio debugging, and may occur at app runtime.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You should fix the issue, but you can disable the exception by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A?displayProperty=nameWithType&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Safe cross-thread calls</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following code examples demonstrate two ways to safely call a Windows Forms control from a thread that didn't create it:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=fullName&gt;</ph> method, which calls a delegate from the main thread to call the control.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker?displayProperty=nameWithType&gt;</ph> component, which offers an event-driven model.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In both examples, the background thread sleeps for one second to simulate work being done in that thread.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can build and run these examples as .NET Framework apps from the C# or Visual Basic command line.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Command-line building with csc.exe<ept id="p1">](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept> or <bpt id="p2">[</bpt>Build from the command line (Visual Basic)<ept id="p2">](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Starting with .NET Core 3.0, you can also build and run the examples as Windows .NET Core apps from a folder that has a .NET Core Windows Forms <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>folder name&gt;.csproj<ept id="p1">*</ept> project file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example: Use the Invoke method with a delegate</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a pattern for ensuring thread-safe calls to a Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It queries the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=fullName&gt;</ph> property, which compares the control's creating thread ID to the calling thread ID.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the thread IDs are the same, it calls the control directly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the thread IDs are different, it calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType&gt;</ph> method with a delegate from the main thread, which makes the actual call to the control.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SafeCallDelegate`</ph> enables setting the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control's <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox.Text%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteTextSafe`</ph> method queries <ph id="ph2">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">`WriteTextSafe`</ph> passes the <ph id="ph4">`SafeCallDelegate`</ph> to the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method to make the actual call to the control.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, <ph id="ph3">`WriteTextSafe`</ph> sets the <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox.Text%2A?displayProperty=nameWithType&gt;</ph> directly.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Button1_Click`</ph> event handler creates the new thread and runs the <ph id="ph2">`WriteTextSafe`</ph> method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example: Use a BackgroundWorker event handler</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An easy way to implement multithreading is with the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker?displayProperty=nameWithType&gt;</ph> component, which uses an event-driven model.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The background thread runs the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork?displayProperty=nameWithType&gt;</ph> event, which doesn't interact with the main thread.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The main thread runs the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted?displayProperty=nameWithType&gt;</ph> event handlers, which can call the main thread's controls.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To make a thread-safe call by using <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, create a method in the background thread to do the work, and bind it to the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Create another method in the main thread to report the results of the background work, and bind it to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> or <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To start the background thread, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The example uses the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler to set the <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control's <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox.Text%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For an example using the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event, see <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Run an operation in the background<ept id="p1">](how-to-run-an-operation-in-the-background.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement a form that uses a background operation<ept id="p1">](how-to-implement-a-form-that-uses-a-background-operation.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Develop custom Windows Forms controls with the .NET Framework<ept id="p1">](developing-custom-windows-forms-controls.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>