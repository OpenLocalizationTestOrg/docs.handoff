{"content":"---\ntitle: \"How to: Write Event Information to a Text File (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"event logs [Visual Studio], writing event information\"\n  - \"text files, writing event information to a text file\"\n  - \"events [Visual Basic], writing event information to a text file\"\nms.assetid: 9ca7cc03-bf99-4933-9e5e-61ee28e9a6b4\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Write Event Information to a Text File (Visual Basic)\nYou can use the `My.Application.Log` and `My.Log` objects to log information about events that occur in your application. This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information to a log file.  \n  \n### To add and configure the file log listener  \n  \n1.  Right-click app.config in **Solution Explorer** and choose **Open**.  \n  \n     \\- or -  \n  \n     If there is no app.config file:  \n  \n    1.  On the **Project** menu, choose **Add New Item**.  \n  \n    2.  From the **Add New Item** dialog box, choose **Application Configuration File**.  \n  \n    3.  Click **Add**.  \n  \n2.  Locate the `<listeners>` section in the application configuration file.  \n  \n     You will find the \\<listeners> section in the \\<source> section with the name attribute \"DefaultSource\", which is nested under the \\<system.diagnostics> section, which is nested under the top-level \\<configuration> section.  \n  \n3.  Add this element to that `<listeners>` section:  \n  \n    ```  \n    <add name=\"FileLogListener\" />  \n    ```  \n  \n4.  Locate the `<sharedListeners>` section in the `<system.diagnostics>` section, nested under the top-level `<configuration>` section.  \n  \n5.  Add this element to that `<sharedListeners>` section:  \n  \n    ```  \n    <add name=\"FileLogListener\"   \n        type=\"Microsoft.VisualBasic.Logging.FileLogTraceListener,   \n              Microsoft.VisualBasic, Version=8.0.0.0, Culture=neutral,   \n              PublicKeyToken=b03f5f7f11d50a3a\"  \n        initializeData=\"FileLogListenerWriter\"  \n        location=\"Custom\"  \n        customlocation=\"c:\\temp\\\" />  \n    ```  \n  \n     Change the value of the `customlocation` attribute to the log directory.  \n  \n    > [!NOTE]\n    >  To set the value of a listener property, use an attribute that has the same name as the property, with all letters in the name lowercase. For example, the `location` and `customlocation` attributes set the values of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> properties.  \n  \n### To write event information to the file log  \n  \n-   Use the `My.Application.Log.WriteEntry` or `My.Application.Log.WriteException` method to write information to the file log. For more information, see [How to: Write Log Messages](../../../../visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md) and [How to: Log Exceptions](../../../../visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  \n  \n     After you configure the file log listener for an assembly, it receives all messages that `My.Application.Log` writes from that assembly.  \n  \n## See Also  \n <xref:Microsoft.VisualBasic.Logging.Log?displayProperty=fullName>   \n <xref:Microsoft.VisualBasic.Logging.Log.WriteEntry%2A>   \n <xref:Microsoft.VisualBasic.Logging.Log.WriteException%2A>   \n [Working with Application Logs](../../../../visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)   \n [How to: Log Exceptions](../../../../visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)","nodes":[{"pos":[4,767],"nodes":[{"content":"How to: Write Event Information to a Text File (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,78],"content":"How to: Write Event Information to a Text File (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Write Event Information to a Text File (Visual Basic) | Microsoft Docs","pos":[0,78]}]}],"pos":[6,87],"yaml":true}],"content":"title: \"How to: Write Event Information to a Text File (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"event logs [Visual Studio], writing event information\"\n  - \"text files, writing event information to a text file\"\n  - \"events [Visual Basic], writing event information to a text file\"\nms.assetid: 9ca7cc03-bf99-4933-9e5e-61ee28e9a6b4\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[774,835],"content":"How to: Write Event Information to a Text File (Visual Basic)","linkify":"How to: Write Event Information to a Text File (Visual Basic)","nodes":[{"content":"How to: Write Event Information to a Text File (Visual Basic)","pos":[0,61]}]},{"content":"You can use the <ph id=\"ph1\">`My.Application.Log`</ph> and <ph id=\"ph2\">`My.Log`</ph> objects to log information about events that occur in your application.","pos":[836,957],"source":"You can use the `My.Application.Log` and `My.Log` objects to log information about events that occur in your application."},{"content":"This example shows how to use the <ph id=\"ph1\">`My.Application.Log.WriteEntry`</ph> method to log tracing information to a log file.","pos":[958,1072],"source":" This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information to a log file."},{"pos":[1082,1124],"content":"To add and configure the file log listener","linkify":"To add and configure the file log listener","nodes":[{"content":"To add and configure the file log listener","pos":[0,42]}]},{"pos":[1134,1202],"content":"Right-click app.config in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> and choose <bpt id=\"p2\">**</bpt>Open<ept id=\"p2\">**</ept>.","source":"Right-click app.config in **Solution Explorer** and choose **Open**."},{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[1213,1220],"source":"\\- or -"},{"content":"If there is no app.config file:","pos":[1231,1262]},{"pos":[1276,1325],"content":"On the <bpt id=\"p1\">**</bpt>Project<ept id=\"p1\">**</ept> menu, choose <bpt id=\"p2\">**</bpt>Add New Item<ept id=\"p2\">**</ept>.","source":"On the **Project** menu, choose **Add New Item**."},{"pos":[1339,1419],"content":"From the <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialog box, choose <bpt id=\"p2\">**</bpt>Application Configuration File<ept id=\"p2\">**</ept>.","source":"From the **Add New Item** dialog box, choose **Application Configuration File**."},{"pos":[1433,1447],"content":"Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>.","source":"Click **Add**."},{"pos":[1457,1528],"content":"Locate the <ph id=\"ph1\">`&lt;listeners&gt;`</ph> section in the application configuration file.","source":"Locate the `<listeners>` section in the application configuration file."},{"content":"You will find the <ph id=\"ph1\">\\&lt;</ph>listeners&gt; section in the <ph id=\"ph2\">\\&lt;</ph>source&gt; section with the name attribute \"DefaultSource\", which is nested under the <ph id=\"ph3\">\\&lt;</ph>system.diagnostics&gt; section, which is nested under the top-level <ph id=\"ph4\">\\&lt;</ph>configuration&gt; section.","pos":[1539,1762],"source":"You will find the \\<listeners> section in the \\<source> section with the name attribute \"DefaultSource\", which is nested under the \\<system.diagnostics> section, which is nested under the top-level \\<configuration> section."},{"pos":[1772,1819],"content":"Add this element to that <ph id=\"ph1\">`&lt;listeners&gt;`</ph> section:","source":"Add this element to that `<listeners>` section:"},{"pos":[1889,2020],"content":"Locate the <ph id=\"ph1\">`&lt;sharedListeners&gt;`</ph> section in the <ph id=\"ph2\">`&lt;system.diagnostics&gt;`</ph> section, nested under the top-level <ph id=\"ph3\">`&lt;configuration&gt;`</ph> section.","source":"Locate the `<sharedListeners>` section in the `<system.diagnostics>` section, nested under the top-level `<configuration>` section."},{"pos":[2030,2083],"content":"Add this element to that <ph id=\"ph1\">`&lt;sharedListeners&gt;`</ph> section:","source":"Add this element to that `<sharedListeners>` section:"},{"pos":[2460,2532],"content":"Change the value of the <ph id=\"ph1\">`customlocation`</ph> attribute to the log directory.","source":"Change the value of the `customlocation` attribute to the log directory."},{"pos":[2544,2940],"content":"[!NOTE]\nTo set the value of a listener property, use an attribute that has the same name as the property, with all letters in the name lowercase. For example, the `location` and `customlocation` attributes set the values of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> properties.","leadings":["","    >  "],"nodes":[{"content":"To set the value of a listener property, use an attribute that has the same name as the property, with all letters in the name lowercase. For example, the `location` and `customlocation` attributes set the values of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> properties.","pos":[8,389],"nodes":[{"content":"To set the value of a listener property, use an attribute that has the same name as the property, with all letters in the name lowercase.","pos":[0,137]},{"content":"For example, the <ph id=\"ph1\">`location`</ph> and <ph id=\"ph2\">`customlocation`</ph> attributes set the values of the <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A&gt;</ph> properties.","pos":[138,381],"source":" For example, the `location` and `customlocation` attributes set the values of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> properties."}]}]},{"pos":[2950,2992],"content":"To write event information to the file log","linkify":"To write event information to the file log","nodes":[{"content":"To write event information to the file log","pos":[0,42]}]},{"content":"Use the <ph id=\"ph1\">`My.Application.Log.WriteEntry`</ph> or <ph id=\"ph2\">`My.Application.Log.WriteException`</ph> method to write information to the file log.","pos":[3002,3125],"source":"Use the `My.Application.Log.WriteEntry` or `My.Application.Log.WriteException` method to write information to the file log."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Write Log Messages<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Log Exceptions<ept id=\"p2\">](../../../../visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)</ept>.","pos":[3126,3390],"source":" For more information, see [How to: Write Log Messages](../../../../visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md) and [How to: Log Exceptions](../../../../visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)."},{"pos":[3401,3537],"content":"After you configure the file log listener for an assembly, it receives all messages that <ph id=\"ph1\">`My.Application.Log`</ph> writes from that assembly.","source":"After you configure the file log listener for an assembly, it receives all messages that `My.Application.Log` writes from that assembly."},{"pos":[3546,3554],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.Log?displayProperty=fullName&gt;</ph>","pos":[3558,3623],"source":"<xref:Microsoft.VisualBasic.Logging.Log?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.Log.WriteEntry%2A&gt;</ph>","pos":[3628,3682],"source":"<xref:Microsoft.VisualBasic.Logging.Log.WriteEntry%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.Log.WriteException%2A&gt;</ph>","pos":[3687,3745],"source":"<xref:Microsoft.VisualBasic.Logging.Log.WriteException%2A> "},{"content":"<bpt id=\"p1\">[</bpt>Working with Application Logs<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)</ept><ph id=\"ph1\"> </ph>","pos":[3750,3878],"source":"[Working with Application Logs](../../../../visual-basic/developing-apps/programming/log-info/working-with-application-logs.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Log Exceptions<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)</ept>","pos":[3882,3994],"source":"[How to: Log Exceptions](../../../../visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)"}]}