<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">427bdf63a9f6e4ae2c32a6cbd3fec82165caba17</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\how-to-remotely-survey-the-status-of-printers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fde94d4c76aeda36a127d000a531dc9ce576154f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d44fea302c392a808bc809eb4f34381a7c024dc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Remotely Survey the Status of Printers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Remotely Survey the Status of Printers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>At any given time at medium and large companies there may be multiple printers that are not working due to a paper jam or being out of paper or some other problematic situation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The rich set of printer properties exposed in the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](../../../../includes/tlasharptla-apisharpplural-md.md)]</ph> of <ph id="ph2">[!INCLUDE[TLA#tla_winfx](../../../../includes/tlasharptla-winfx-md.md)]</ph> provide a means for performing a rapid survey of the states of printers.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The major steps for creating this kind of utility are as follows.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Obtain a list of all print servers.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Loop through the servers to query their print queues.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Within each pass of the server loop, loop through all the server's queues and read each property that might indicate that the queue is not currently working.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The code below is a series of snippets.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For simplicity, this example assumes that there is a CRLF-delimited list of print servers.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`fileOfPrintServers`</ph> is a <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> object for this file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Since each server name is on its own line, any call of <ph id="ph1">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> gets the name of the next server and moves the <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph>'s cursor to the beginning of the next line.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Within the outer loop, the code creates a <ph id="ph1">&lt;xref:System.Printing.PrintServer&gt;</ph> object for the latest print server and specifies that the application is to have administrative rights to the server.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If there are a lot of servers, you can improve performance by using the <ph id="ph1">&lt;xref:System.Printing.PrintServer.%23ctor%28System.String%2CSystem.String%5B%5D%2CSystem.Printing.PrintSystemDesiredAccess%29&gt;</ph> constructors that only initialize the properties you are going to need.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The example then uses <ph id="ph1">&lt;xref:System.Printing.PrintServer.GetPrintQueues%2A&gt;</ph> to create a collection of all of the server's queues and begins to loop through them.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This inner loop contains a branching structure corresponding to the two ways of checking a printer's status:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can read the flags of the <ph id="ph1">&lt;xref:System.Printing.PrintQueue.QueueStatus%2A&gt;</ph> property which is of type <ph id="ph2">&lt;xref:System.Printing.PrintQueueStatus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can read each relevant property such as <ph id="ph1">&lt;xref:System.Printing.PrintQueue.IsOutOfPaper%2A&gt;</ph>, and <ph id="ph2">&lt;xref:System.Printing.PrintQueue.IsPaperJammed%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example demonstrates both methods, so the user was previously prompted as to which method to use and responded with "y" if he or she wanted to use the flags of the <ph id="ph1">&lt;xref:System.Printing.PrintQueue.QueueStatus%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See below for the details of the two methods.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Finally, the results are presented to the user.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>PrinterStatusSurvey#SurveyQueues<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#surveyqueues)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>PrinterStatusSurvey#SurveyQueues<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#surveyqueues)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>PrinterStatusSurvey#SurveyQueues<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#surveyqueues)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To check printer status using the flags of the <ph id="ph1">&lt;xref:System.Printing.PrintQueue.QueueStatus%2A&gt;</ph> property, you check each relevant flag to see if it is set.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The standard way to see if one bit is set in a set of bit flags is to perform a logical AND operation with the set of flags as one operand and the flag itself as the other.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Since the flag itself has only one bit set, the result of the logical AND is that, at most, that same bit is set.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To find out whether it is or not, just compare the result of the logical AND with the flag itself.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Printing.PrintQueueStatus&gt;</ph>, the <bpt id="p1">[</bpt>&amp; Operator (C# Reference)<ept id="p1">](~/docs/csharp/language-reference/operators/and-operator.md)</ept>, and <ph id="ph2">&lt;xref:System.FlagsAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For each attribute whose bit is set, the code adds a notice to the final report that will be presented to the user.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>(The <bpt id="p1">**</bpt>ReportAvailabilityAtThisTime<ept id="p1">**</ept> method that is called at the end of the code is discussed below.)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>PrinterStatusSurvey#SpotTroubleUsingQueueAttributes<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueattributes)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>PrinterStatusSurvey#SpotTroubleUsingQueueAttributes<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueattributes)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>PrinterStatusSurvey#SpotTroubleUsingQueueAttributes<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueattributes)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To check printer status using each property, you simply read each property and add a note to the final report that will be presented to the user if the property is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>(The <bpt id="p1">**</bpt>ReportAvailabilityAtThisTime<ept id="p1">**</ept> method that is called at the end of the code is discussed below.)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>PrinterStatusSurvey#SpotTroubleUsingQueueProperties<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>PrinterStatusSurvey#SpotTroubleUsingQueueProperties<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>PrinterStatusSurvey#SpotTroubleUsingQueueProperties<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ReportAvailabilityAtThisTime<ept id="p1">**</ept> method was created in case you need to determine if the queue is available at the current time of day.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The method will do nothing if the <ph id="ph1">&lt;xref:System.Printing.PrintQueue.StartTimeOfDay%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Printing.PrintQueue.UntilTimeOfDay%2A&gt;</ph> properties are equal; because in that case the printer is available at all times.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If they are different, the method gets the current time which then has to be converted into total minutes past midnight because the <ph id="ph1">&lt;xref:System.Printing.PrintQueue.StartTimeOfDay%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Printing.PrintQueue.UntilTimeOfDay%2A&gt;</ph> properties are <ph id="ph3">&lt;xref:System.Int32&gt;</ph>s representing minutes-after-midnight, not <ph id="ph4">&lt;xref:System.DateTime&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Finally, the method checks to see if the current time is between the start and "until" times.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>PrinterStatusSurvey#UsingStartAndUntilTimes<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>PrinterStatusSurvey#UsingStartAndUntilTimes<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>PrinterStatusSurvey#UsingStartAndUntilTimes<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Printing.PrintQueue.StartTimeOfDay%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Printing.PrintQueue.UntilTimeOfDay%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.DateTime&gt;</ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Printing.PrintQueueStatus&gt;</ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Printing.PrintServer.GetPrintQueues%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Printing.PrintServer&gt;</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Printing.LocalPrintServer&gt;</ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Printing.EnumeratedPrintQueueTypes&gt;</ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Printing.PrintQueue&gt;</ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>&amp; Operator (C# Reference)<ept id="p1">](~/docs/csharp/language-reference/operators/and-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Documents in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/documents-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Printing Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/printing-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>