{"content":"---\ntitle: \".NET class library overview\"\nms.date: \"02/08/2018\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"classes [.NET Framework], library overview\"\n  - \"classes [.NET Core], library overview\"\n  - \".NET, library overview\"\n  - \"class objects value type\"\n  - \"naming conventions [.NET Framework]\"\n  - \"types, .NET Framework\"\n  - \"user-defined types\"\n  - \"Visual Basic, data types\"\n  - \"data types [.NET Framework], C++\"\n  - \"Visual C#, data types\"\n  - \"libraries, .NET Framework class library\"\n  - \"data types [.NET Framework], F#\"\n  - \"System namespace\"\n  - \"F#, data types\"\n  - \".NET Framework, class library\"\n  - \"type system [.NET Framework]\"\n  - \"data types [.NET Framework]\"\n  - \"value types\"\n  - \"data types [.NET Framework], Visual Basic\"\n  - \"Common Language Specification\"\n  - \"namespaces [.NET Framework]\"\n  - \"floating point value type\"\n  - \"class library [.NET Framework]\"\n  - \"CLS\"\n  - \"logical value type\"\n  - \".NET Framework class library, about\"\n  - \"built-in types\"\n  - \"namespaces [.NET Framework], about namespaces\"\n  - \"Visual C++, data types\"\n  - \"members [.NET Framework], type\"\n  - \"data types [.NET Framework], C#\"\n  - \"integer value type\"\n  - \"base types, class library\"\nms.assetid: 7e4c5921-955d-4b06-8709-101873acf157\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# .NET class library overview\n\n.NET implementations include classes, interfaces, delegates, and value types that expedite and optimize the development process and provide access to system functionality. To facilitate interoperability between languages, most .NET types are CLS-compliant and can therefore be used from any programming language whose compiler conforms to the common language specification (CLS).  \n  \n .NET types are the foundation on which .NET applications, components, and controls are built. .NET implementations include types that perform the following functions:  \n  \n-   Represent base data types and exceptions.  \n  \n-   Encapsulate data structures.  \n  \n-   Perform I/O.  \n  \n-   Access information about loaded types.  \n  \n-   Invoke .NET Framework security checks.  \n  \n-   Provide data access, rich client-side GUI, and server-controlled, client-side GUI.  \n  \n .NET provides a rich set of interfaces, as well as abstract and concrete (non-abstract) classes. You can use the concrete classes as is or, in many cases, derive your own classes from them. To use the functionality of an interface, you can either create a class that implements the interface or derive a class from one of the .NET classes that implements the interface.  \n  \n## Naming conventions\n\n .NET types use a dot syntax naming scheme that connotes a hierarchy. This technique groups related types into namespaces so they can be searched and referenced more easily. The first part of the full name — up to the rightmost dot — is the namespace name. The last part of the name is the type name. For example, `System.Collections.Generic.List<T>` represents the `List<T>` type, which belongs to the `System.Collections.Generic` namespace. The types in <xref:System.Collections.Generic> can be used to work with generic collections.  \n  \n This naming scheme makes it easy for library developers extending the [!INCLUDE[dnprdnshort](../../includes/dnprdnshort-md.md)] to create hierarchical groups of types and name them in a consistent, informative manner. It also allows types to be unambiguously identified by their full name (that is, by their namespace and type name), which prevents type name collisions. Library developers are expected to use the following convention when creating names for their namespaces:  \n  \n *CompanyName*.*TechnologyName*  \n  \n For example, the namespace `Microsoft.Word` conforms to this guideline.  \n  \n The use of naming patterns to group related types into namespaces is a very useful way to build and document class libraries. However, this naming scheme has no effect on visibility, member access, inheritance, security, or binding. A namespace can be partitioned across multiple assemblies and a single assembly can contain types from multiple namespaces. The assembly provides the formal structure for versioning, deployment, security, loading, and visibility in the common language runtime.  \n  \n For more information on namespaces and type names, see [Common Type System](../../docs/standard/base-types/common-type-system.md).  \n  \n## System namespace\n\n The <xref:System> namespace is the root namespace for fundamental types in .NET. This namespace includes classes that represent the base data types used by all applications: <xref:System.Object> (the root of the inheritance hierarchy), <xref:System.Byte>, <xref:System.Char>, <xref:System.Array>, <xref:System.Int32>, <xref:System.String>, and so on. Many of these types correspond to the primitive data types that your programming language uses. When you write code using .NET Framework types, you can use your language's corresponding keyword when a .NET Framework base data type is expected.  \n  \n The following table lists the base types that .NET supplies, briefly describes each type, and indicates the corresponding type in Visual Basic, C#, C++, and F#.  \n  \n|Category|Class name|Description|Visual Basic data type|C# data type|C++/CLI data type|F# data type|  \n|--------------|----------------|-----------------|----------------------------|-------------------|---------------------|-----------------------|  \n|Integer|<xref:System.Byte>|An 8-bit unsigned integer.|**Byte**|**byte**|**unsigned char**|**byte**|  \n||<xref:System.SByte>|An 8-bit signed integer.<br /><br /> Not CLS-compliant.|**SByte**|**sbyte**|**char**<br /> -or-<br /> **signed** **char**|**sbyte**|  \n||<xref:System.Int16>|A 16-bit signed integer.|**Short**|**short**|**short**|**int16**|  \n||<xref:System.Int32>|A 32-bit signed integer.|**Integer**|**int**|**int**<br /><br /> -or-<br /><br /> **long**|**int**|  \n||<xref:System.Int64>|A 64-bit signed integer.|**Long**|**long**|**__int64**|**int64**|  \n||<xref:System.UInt16>|A 16-bit unsigned integer.<br /><br /> Not CLS-compliant.|**UShort**|**ushort**|**unsigned short**|**uint16**|  \n||<xref:System.UInt32>|A 32-bit unsigned integer.<br /><br /> Not CLS-compliant.|**UInteger**|**uint**|**unsigned int**<br /> -or-<br /> **unsigned long**|**uint32**|  \n||<xref:System.UInt64>|A 64-bit unsigned integer.<br /><br /> Not CLS-compliant.|**ULong**|**ulong**|**unsigned __int64**|**uint64**|  \n|Floating point|<xref:System.Single>|A single-precision (32-bit) floating-point number.|**Single**|**float**|**float**|**float32**<br> or<br>**single**|  \n||<xref:System.Double>|A double-precision (64-bit) floating-point number.|**Double**|**double**|**double**|**float**<br> or <br> **double**|  \n|Logical|<xref:System.Boolean>|A Boolean value (true or false).|**Boolean**|**bool**|**bool**|**bool**|  \n|Other|<xref:System.Char>|A Unicode (16-bit) character.|**Char**|**char**|**wchar_t**|**char**|  \n||<xref:System.Decimal>|A decimal  (128-bit) value.|**Decimal**|**decimal**|**Decimal**|**decimal**|  \n||<xref:System.IntPtr>|A signed integer whose size depends on the underlying platform (a 32-bit value on a 32-bit platform and a 64-bit value on a 64-bit platform).|**IntPtr**<br /><br /> No built-in type.|**IntPtr**<br /><br /> No built-in type.|**IntPtr**<br /><br /> No built-in type.|**unativeint**|  \n||<xref:System.UIntPtr>|An unsigned integer whose size depends on the underlying platform (a 32- bit value on a 32-bit platform and a 64-bit value on a 64-bit platform).<br /><br /> Not CLS-compliant.|**UIntPtr**<br /><br /> No built-in type.|**UIntPtr**<br /><br /> No built-in type.|**UIntPtr**<br /><br /> No built-in type.|**unativeint**|  \n||<xref:System.Object>|The root of the object hierarchy.|**Object**|**object**|**Object^**|**obj**|  \n||<xref:System.String>|An immutable, fixed-length string of Unicode characters.|**String**|**string**|**String^**|**string**|  \n  \n In addition to the base data types, the <xref:System> namespace contains over 100 classes, ranging from classes that handle exceptions to classes that deal with core runtime concepts, such as application domains and the garbage collector. The <xref:System> namespace also contains many second-level namespaces.  \n  \n For more information about namespaces, use the [.NET API Browser](https://docs.microsoft.com/dotnet/api) to browse the .NET Class Library. The API reference documentation provides documentation on each namespace, its types, and each of their members.  \n  \n## See also\n\n- [Common Type System](../../docs/standard/base-types/common-type-system.md)\n- [.NET API Browser](../../api/index.md)\n- [Overview](../../docs/framework/get-started/overview.md)\n","nodes":[{"pos":[4,1299],"embed":true,"restype":"x-metadata","content":"title: \".NET class library overview\"\nms.date: \"02/08/2018\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"classes [.NET Framework], library overview\"\n  - \"classes [.NET Core], library overview\"\n  - \".NET, library overview\"\n  - \"class objects value type\"\n  - \"naming conventions [.NET Framework]\"\n  - \"types, .NET Framework\"\n  - \"user-defined types\"\n  - \"Visual Basic, data types\"\n  - \"data types [.NET Framework], C++\"\n  - \"Visual C#, data types\"\n  - \"libraries, .NET Framework class library\"\n  - \"data types [.NET Framework], F#\"\n  - \"System namespace\"\n  - \"F#, data types\"\n  - \".NET Framework, class library\"\n  - \"type system [.NET Framework]\"\n  - \"data types [.NET Framework]\"\n  - \"value types\"\n  - \"data types [.NET Framework], Visual Basic\"\n  - \"Common Language Specification\"\n  - \"namespaces [.NET Framework]\"\n  - \"floating point value type\"\n  - \"class library [.NET Framework]\"\n  - \"CLS\"\n  - \"logical value type\"\n  - \".NET Framework class library, about\"\n  - \"built-in types\"\n  - \"namespaces [.NET Framework], about namespaces\"\n  - \"Visual C++, data types\"\n  - \"members [.NET Framework], type\"\n  - \"data types [.NET Framework], C#\"\n  - \"integer value type\"\n  - \"base types, class library\"\nms.assetid: 7e4c5921-955d-4b06-8709-101873acf157\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":".NET class library overview","nodes":[{"pos":[0,27],"content":".NET class library overview","nodes":[{"content":".NET class library overview","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[1306,1333],"content":".NET class library overview","linkify":".NET class library overview","nodes":[{"content":".NET class library overview","pos":[0,27]}]},{"content":".NET implementations include classes, interfaces, delegates, and value types that expedite and optimize the development process and provide access to system functionality.","pos":[1335,1506]},{"content":"To facilitate interoperability between languages, most .NET types are CLS-compliant and can therefore be used from any programming language whose compiler conforms to the common language specification (CLS).","pos":[1507,1714]},{"content":".NET types are the foundation on which .NET applications, components, and controls are built.","pos":[1721,1814]},{"content":".NET implementations include types that perform the following functions:","pos":[1815,1887]},{"content":"Represent base data types and exceptions.","pos":[1897,1938]},{"content":"Encapsulate data structures.","pos":[1948,1976]},{"content":"Perform I/O.","pos":[1986,1998]},{"content":"Access information about loaded types.","pos":[2008,2046]},{"content":"Invoke .NET Framework security checks.","pos":[2056,2094]},{"content":"Provide data access, rich client-side GUI, and server-controlled, client-side GUI.","pos":[2104,2186]},{"content":".NET provides a rich set of interfaces, as well as abstract and concrete (non-abstract) classes.","pos":[2193,2289]},{"content":"You can use the concrete classes as is or, in many cases, derive your own classes from them.","pos":[2290,2382]},{"content":"To use the functionality of an interface, you can either create a class that implements the interface or derive a class from one of the .NET classes that implements the interface.","pos":[2383,2562]},{"pos":[2571,2589],"content":"Naming conventions","linkify":"Naming conventions","nodes":[{"content":"Naming conventions","pos":[0,18]}]},{"content":".NET types use a dot syntax naming scheme that connotes a hierarchy.","pos":[2592,2660]},{"content":"This technique groups related types into namespaces so they can be searched and referenced more easily.","pos":[2661,2764]},{"content":"The first part of the full name — up to the rightmost dot — is the namespace name.","pos":[2765,2847]},{"content":"The last part of the name is the type name.","pos":[2848,2891]},{"content":"For example, <ph id=\"ph1\">`System.Collections.Generic.List&lt;T&gt;`</ph> represents the <ph id=\"ph2\">`List&lt;T&gt;`</ph> type, which belongs to the <ph id=\"ph3\">`System.Collections.Generic`</ph> namespace.","pos":[2892,3033],"source":" For example, `System.Collections.Generic.List<T>` represents the `List<T>` type, which belongs to the `System.Collections.Generic` namespace."},{"content":"The types in <ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph> can be used to work with generic collections.","pos":[3034,3126],"source":" The types in <xref:System.Collections.Generic> can be used to work with generic collections."},{"content":"This naming scheme makes it easy for library developers extending the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../includes/dnprdnshort-md.md)]</ph> to create hierarchical groups of types and name them in a consistent, informative manner.","pos":[3133,3350],"source":"This naming scheme makes it easy for library developers extending the [!INCLUDE[dnprdnshort](../../includes/dnprdnshort-md.md)] to create hierarchical groups of types and name them in a consistent, informative manner."},{"content":"It also allows types to be unambiguously identified by their full name (that is, by their namespace and type name), which prevents type name collisions.","pos":[3351,3503]},{"content":"Library developers are expected to use the following convention when creating names for their namespaces:","pos":[3504,3609]},{"pos":[3616,3646],"content":"<bpt id=\"p1\">*</bpt>CompanyName<ept id=\"p1\">*</ept>.<bpt id=\"p2\">*</bpt>TechnologyName<ept id=\"p2\">*</ept>","source":"*CompanyName*.*TechnologyName*"},{"pos":[3653,3724],"content":"For example, the namespace <ph id=\"ph1\">`Microsoft.Word`</ph> conforms to this guideline.","source":"For example, the namespace `Microsoft.Word` conforms to this guideline."},{"content":"The use of naming patterns to group related types into namespaces is a very useful way to build and document class libraries.","pos":[3731,3856]},{"content":"However, this naming scheme has no effect on visibility, member access, inheritance, security, or binding.","pos":[3857,3963]},{"content":"A namespace can be partitioned across multiple assemblies and a single assembly can contain types from multiple namespaces.","pos":[3964,4087]},{"content":"The assembly provides the formal structure for versioning, deployment, security, loading, and visibility in the common language runtime.","pos":[4088,4224]},{"pos":[4231,4361],"content":"For more information on namespaces and type names, see <bpt id=\"p1\">[</bpt>Common Type System<ept id=\"p1\">](../../docs/standard/base-types/common-type-system.md)</ept>.","source":"For more information on namespaces and type names, see [Common Type System](../../docs/standard/base-types/common-type-system.md)."},{"pos":[4370,4386],"content":"System namespace","linkify":"System namespace","nodes":[{"content":"System namespace","pos":[0,16]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System&gt;</ph> namespace is the root namespace for fundamental types in .NET.","pos":[4389,4469],"source":"The <xref:System> namespace is the root namespace for fundamental types in .NET."},{"content":"This namespace includes classes that represent the base data types used by all applications: <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> (the root of the inheritance hierarchy), <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Char&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Array&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.String&gt;</ph>, and so on.","pos":[4470,4739],"source":" This namespace includes classes that represent the base data types used by all applications: <xref:System.Object> (the root of the inheritance hierarchy), <xref:System.Byte>, <xref:System.Char>, <xref:System.Array>, <xref:System.Int32>, <xref:System.String>, and so on."},{"content":"Many of these types correspond to the primitive data types that your programming language uses.","pos":[4740,4835]},{"content":"When you write code using .NET Framework types, you can use your language's corresponding keyword when a .NET Framework base data type is expected.","pos":[4836,4983]},{"content":"The following table lists the base types that .NET supplies, briefly describes each type, and indicates the corresponding type in Visual Basic, C#, C++, and F#.","pos":[4990,5150]},{"content":"Category","pos":[5157,5165]},{"content":"Class name","pos":[5166,5176]},{"content":"Description","pos":[5177,5188]},{"content":"Visual Basic data type","pos":[5189,5211]},{"content":"C# data type","pos":[5212,5224]},{"content":"C++/CLI data type","pos":[5225,5242]},{"content":"F# data type","pos":[5243,5255]},{"content":"Integer","pos":[5409,5416]},{"content":"An 8-bit unsigned integer.","pos":[5436,5462]},{"pos":[5463,5471],"content":"<bpt id=\"p1\">**</bpt>Byte<ept id=\"p1\">**</ept>","source":"**Byte**"},{"pos":[5472,5480],"content":"<bpt id=\"p1\">**</bpt>byte<ept id=\"p1\">**</ept>","source":"**byte**"},{"pos":[5481,5498],"content":"<bpt id=\"p1\">**</bpt>unsigned char<ept id=\"p1\">**</ept>","source":"**unsigned char**"},{"pos":[5499,5507],"content":"<bpt id=\"p1\">**</bpt>byte<ept id=\"p1\">**</ept>","source":"**byte**"},{"content":"An 8-bit signed integer.","pos":[5533,5557]},{"content":"Not CLS-compliant.","pos":[5570,5588]},{"pos":[5589,5598],"content":"<bpt id=\"p1\">**</bpt>SByte<ept id=\"p1\">**</ept>","source":"**SByte**"},{"pos":[5599,5608],"content":"<bpt id=\"p1\">**</bpt>sbyte<ept id=\"p1\">**</ept>","source":"**sbyte**"},{"content":"<bpt id=\"p1\">**</bpt>char<ept id=\"p1\">**</ept>","pos":[5609,5617],"source":"**char**"},{"content":"-or-","pos":[5624,5628]},{"content":"<bpt id=\"p1\">**</bpt>signed<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>char<ept id=\"p2\">**</ept>","pos":[5635,5654],"source":"**signed** **char**"},{"pos":[5655,5664],"content":"<bpt id=\"p1\">**</bpt>sbyte<ept id=\"p1\">**</ept>","source":"**sbyte**"},{"content":"A 16-bit signed integer.","pos":[5690,5714]},{"pos":[5715,5724],"content":"<bpt id=\"p1\">**</bpt>Short<ept id=\"p1\">**</ept>","source":"**Short**"},{"pos":[5725,5734],"content":"<bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept>","source":"**short**"},{"pos":[5735,5744],"content":"<bpt id=\"p1\">**</bpt>short<ept id=\"p1\">**</ept>","source":"**short**"},{"pos":[5745,5754],"content":"<bpt id=\"p1\">**</bpt>int16<ept id=\"p1\">**</ept>","source":"**int16**"},{"content":"A 32-bit signed integer.","pos":[5780,5804]},{"pos":[5805,5816],"content":"<bpt id=\"p1\">**</bpt>Integer<ept id=\"p1\">**</ept>","source":"**Integer**"},{"pos":[5817,5824],"content":"<bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept>","source":"**int**"},{"content":"<bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept>","pos":[5825,5832],"source":"**int**"},{"content":"-or-","pos":[5845,5849]},{"content":"<bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>","pos":[5862,5870],"source":"**long**"},{"pos":[5871,5878],"content":"<bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept>","source":"**int**"},{"content":"A 64-bit signed integer.","pos":[5904,5928]},{"pos":[5929,5937],"content":"<bpt id=\"p1\">**</bpt>Long<ept id=\"p1\">**</ept>","source":"**Long**"},{"pos":[5938,5946],"content":"<bpt id=\"p1\">**</bpt>long<ept id=\"p1\">**</ept>","source":"**long**"},{"pos":[5947,5958],"content":"<bpt id=\"p1\">**</bpt>__int64<ept id=\"p1\">**</ept>","source":"**__int64**"},{"pos":[5959,5968],"content":"<bpt id=\"p1\">**</bpt>int64<ept id=\"p1\">**</ept>","source":"**int64**"},{"content":"A 16-bit unsigned integer.","pos":[5995,6021]},{"content":"Not CLS-compliant.","pos":[6034,6052]},{"pos":[6053,6063],"content":"<bpt id=\"p1\">**</bpt>UShort<ept id=\"p1\">**</ept>","source":"**UShort**"},{"pos":[6064,6074],"content":"<bpt id=\"p1\">**</bpt>ushort<ept id=\"p1\">**</ept>","source":"**ushort**"},{"pos":[6075,6093],"content":"<bpt id=\"p1\">**</bpt>unsigned short<ept id=\"p1\">**</ept>","source":"**unsigned short**"},{"pos":[6094,6104],"content":"<bpt id=\"p1\">**</bpt>uint16<ept id=\"p1\">**</ept>","source":"**uint16**"},{"content":"A 32-bit unsigned integer.","pos":[6131,6157]},{"content":"Not CLS-compliant.","pos":[6170,6188]},{"pos":[6189,6201],"content":"<bpt id=\"p1\">**</bpt>UInteger<ept id=\"p1\">**</ept>","source":"**UInteger**"},{"pos":[6202,6210],"content":"<bpt id=\"p1\">**</bpt>uint<ept id=\"p1\">**</ept>","source":"**uint**"},{"content":"<bpt id=\"p1\">**</bpt>unsigned int<ept id=\"p1\">**</ept>","pos":[6211,6227],"source":"**unsigned int**"},{"content":"-or-","pos":[6234,6238]},{"content":"<bpt id=\"p1\">**</bpt>unsigned long<ept id=\"p1\">**</ept>","pos":[6245,6262],"source":"**unsigned long**"},{"pos":[6263,6273],"content":"<bpt id=\"p1\">**</bpt>uint32<ept id=\"p1\">**</ept>","source":"**uint32**"},{"content":"A 64-bit unsigned integer.","pos":[6300,6326]},{"content":"Not CLS-compliant.","pos":[6339,6357]},{"pos":[6358,6367],"content":"<bpt id=\"p1\">**</bpt>ULong<ept id=\"p1\">**</ept>","source":"**ULong**"},{"pos":[6368,6377],"content":"<bpt id=\"p1\">**</bpt>ulong<ept id=\"p1\">**</ept>","source":"**ulong**"},{"pos":[6378,6398],"content":"<bpt id=\"p1\">**</bpt>unsigned __int64<ept id=\"p1\">**</ept>","source":"**unsigned __int64**"},{"pos":[6399,6409],"content":"<bpt id=\"p1\">**</bpt>uint64<ept id=\"p1\">**</ept>","source":"**uint64**"},{"content":"Floating point","pos":[6414,6428]},{"content":"A single-precision (32-bit) floating-point number.","pos":[6450,6500]},{"pos":[6501,6511],"content":"<bpt id=\"p1\">**</bpt>Single<ept id=\"p1\">**</ept>","source":"**Single**"},{"pos":[6512,6521],"content":"<bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>","source":"**float**"},{"pos":[6522,6531],"content":"<bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>","source":"**float**"},{"content":"<bpt id=\"p1\">**</bpt>float32<ept id=\"p1\">**</ept>","pos":[6532,6543],"source":"**float32**"},{"content":"or","pos":[6548,6550]},{"content":"<bpt id=\"p1\">**</bpt>single<ept id=\"p1\">**</ept>","pos":[6554,6564],"source":"**single**"},{"content":"A double-precision (64-bit) floating-point number.","pos":[6591,6641]},{"pos":[6642,6652],"content":"<bpt id=\"p1\">**</bpt>Double<ept id=\"p1\">**</ept>","source":"**Double**"},{"pos":[6653,6663],"content":"<bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>","source":"**double**"},{"pos":[6664,6674],"content":"<bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>","source":"**double**"},{"content":"<bpt id=\"p1\">**</bpt>float<ept id=\"p1\">**</ept>","pos":[6675,6684],"source":"**float**"},{"content":"or","pos":[6689,6691]},{"content":"<bpt id=\"p1\">**</bpt>double<ept id=\"p1\">**</ept>","pos":[6697,6707],"source":"**double**"},{"content":"Logical","pos":[6712,6719]},{"content":"A Boolean value (true or false).","pos":[6742,6774]},{"pos":[6775,6786],"content":"<bpt id=\"p1\">**</bpt>Boolean<ept id=\"p1\">**</ept>","source":"**Boolean**"},{"pos":[6787,6795],"content":"<bpt id=\"p1\">**</bpt>bool<ept id=\"p1\">**</ept>","source":"**bool**"},{"pos":[6796,6804],"content":"<bpt id=\"p1\">**</bpt>bool<ept id=\"p1\">**</ept>","source":"**bool**"},{"pos":[6805,6813],"content":"<bpt id=\"p1\">**</bpt>bool<ept id=\"p1\">**</ept>","source":"**bool**"},{"content":"Other","pos":[6818,6823]},{"content":"A Unicode (16-bit) character.","pos":[6843,6872]},{"pos":[6873,6881],"content":"<bpt id=\"p1\">**</bpt>Char<ept id=\"p1\">**</ept>","source":"**Char**"},{"pos":[6882,6890],"content":"<bpt id=\"p1\">**</bpt>char<ept id=\"p1\">**</ept>","source":"**char**"},{"pos":[6891,6902],"content":"<bpt id=\"p1\">**</bpt>wchar_t<ept id=\"p1\">**</ept>","source":"**wchar_t**"},{"pos":[6903,6911],"content":"<bpt id=\"p1\">**</bpt>char<ept id=\"p1\">**</ept>","source":"**char**"},{"content":"A decimal  (128-bit) value.","pos":[6939,6966]},{"pos":[6967,6978],"content":"<bpt id=\"p1\">**</bpt>Decimal<ept id=\"p1\">**</ept>","source":"**Decimal**"},{"pos":[6979,6990],"content":"<bpt id=\"p1\">**</bpt>decimal<ept id=\"p1\">**</ept>","source":"**decimal**"},{"pos":[6991,7002],"content":"<bpt id=\"p1\">**</bpt>Decimal<ept id=\"p1\">**</ept>","source":"**Decimal**"},{"pos":[7003,7014],"content":"<bpt id=\"p1\">**</bpt>decimal<ept id=\"p1\">**</ept>","source":"**decimal**"},{"content":"A signed integer whose size depends on the underlying platform (a 32-bit value on a 32-bit platform and a 64-bit value on a 64-bit platform).","pos":[7041,7182]},{"content":"<bpt id=\"p1\">**</bpt>IntPtr<ept id=\"p1\">**</ept>","pos":[7183,7193],"source":"**IntPtr**"},{"content":"No built-in type.","pos":[7206,7223]},{"content":"<bpt id=\"p1\">**</bpt>IntPtr<ept id=\"p1\">**</ept>","pos":[7224,7234],"source":"**IntPtr**"},{"content":"No built-in type.","pos":[7247,7264]},{"content":"<bpt id=\"p1\">**</bpt>IntPtr<ept id=\"p1\">**</ept>","pos":[7265,7275],"source":"**IntPtr**"},{"content":"No built-in type.","pos":[7288,7305]},{"pos":[7306,7320],"content":"<bpt id=\"p1\">**</bpt>unativeint<ept id=\"p1\">**</ept>","source":"**unativeint**"},{"content":"An unsigned integer whose size depends on the underlying platform (a 32- bit value on a 32-bit platform and a 64-bit value on a 64-bit platform).","pos":[7348,7493]},{"content":"Not CLS-compliant.","pos":[7506,7524]},{"content":"<bpt id=\"p1\">**</bpt>UIntPtr<ept id=\"p1\">**</ept>","pos":[7525,7536],"source":"**UIntPtr**"},{"content":"No built-in type.","pos":[7549,7566]},{"content":"<bpt id=\"p1\">**</bpt>UIntPtr<ept id=\"p1\">**</ept>","pos":[7567,7578],"source":"**UIntPtr**"},{"content":"No built-in type.","pos":[7591,7608]},{"content":"<bpt id=\"p1\">**</bpt>UIntPtr<ept id=\"p1\">**</ept>","pos":[7609,7620],"source":"**UIntPtr**"},{"content":"No built-in type.","pos":[7633,7650]},{"pos":[7651,7665],"content":"<bpt id=\"p1\">**</bpt>unativeint<ept id=\"p1\">**</ept>","source":"**unativeint**"},{"content":"The root of the object hierarchy.","pos":[7692,7725]},{"pos":[7726,7736],"content":"<bpt id=\"p1\">**</bpt>Object<ept id=\"p1\">**</ept>","source":"**Object**"},{"pos":[7737,7747],"content":"<bpt id=\"p1\">**</bpt>object<ept id=\"p1\">**</ept>","source":"**object**"},{"pos":[7748,7759],"content":"<bpt id=\"p1\">**</bpt>Object^<ept id=\"p1\">**</ept>","source":"**Object^**"},{"pos":[7760,7767],"content":"<bpt id=\"p1\">**</bpt>obj<ept id=\"p1\">**</ept>","source":"**obj**"},{"content":"An immutable, fixed-length string of Unicode characters.","pos":[7794,7850]},{"pos":[7851,7861],"content":"<bpt id=\"p1\">**</bpt>String<ept id=\"p1\">**</ept>","source":"**String**"},{"pos":[7862,7872],"content":"<bpt id=\"p1\">**</bpt>string<ept id=\"p1\">**</ept>","source":"**string**"},{"pos":[7873,7884],"content":"<bpt id=\"p1\">**</bpt>String^<ept id=\"p1\">**</ept>","source":"**String^**"},{"pos":[7885,7895],"content":"<bpt id=\"p1\">**</bpt>string<ept id=\"p1\">**</ept>","source":"**string**"},{"content":"In addition to the base data types, the <ph id=\"ph1\">&lt;xref:System&gt;</ph> namespace contains over 100 classes, ranging from classes that handle exceptions to classes that deal with core runtime concepts, such as application domains and the garbage collector.","pos":[7903,8141],"source":"In addition to the base data types, the <xref:System> namespace contains over 100 classes, ranging from classes that handle exceptions to classes that deal with core runtime concepts, such as application domains and the garbage collector."},{"content":"The <ph id=\"ph1\">&lt;xref:System&gt;</ph> namespace also contains many second-level namespaces.","pos":[8142,8213],"source":" The <xref:System> namespace also contains many second-level namespaces."},{"content":"For more information about namespaces, use the <bpt id=\"p1\">[</bpt>.NET API Browser<ept id=\"p1\">](https://docs.microsoft.com/dotnet/api)</ept> to browse the .NET Class Library.","pos":[8220,8358],"source":"For more information about namespaces, use the [.NET API Browser](https://docs.microsoft.com/dotnet/api) to browse the .NET Class Library."},{"content":"The API reference documentation provides documentation on each namespace, its types, and each of their members.","pos":[8359,8470]},{"pos":[8479,8487],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8491,8565],"content":"<bpt id=\"p1\">[</bpt>Common Type System<ept id=\"p1\">](../../docs/standard/base-types/common-type-system.md)</ept>","source":"[Common Type System](../../docs/standard/base-types/common-type-system.md)"},{"pos":[8568,8606],"content":"<bpt id=\"p1\">[</bpt>.NET API Browser<ept id=\"p1\">](../../api/index.md)</ept>","source":"[.NET API Browser](../../api/index.md)"},{"pos":[8609,8665],"content":"<bpt id=\"p1\">[</bpt>Overview<ept id=\"p1\">](../../docs/framework/get-started/overview.md)</ept>","source":"[Overview](../../docs/framework/get-started/overview.md)"}]}