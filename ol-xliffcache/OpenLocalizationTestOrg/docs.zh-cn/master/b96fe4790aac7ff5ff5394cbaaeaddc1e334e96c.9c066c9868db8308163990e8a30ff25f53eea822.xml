{"content":"---\ntitle: \"?? operator - C# Reference\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"??_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"coalesce operator [C#]\"\n  - \"?? operator [C#]\"\n  - \"conditional-AND operator (&&) [C#]\"\nms.assetid: 088b1f0d-c1af-4fe1-b4b8-196fd5ea9132\n---\n# ?? operator (C# Reference)\n\nThe `??` operator is called the null-coalescing operator.  It returns the left-hand operand if the operand is not null; otherwise it returns the right hand operand.\n\n## Remarks\n\nA nullable type can represent a value from the type’s domain, or the value can be undefined (in which case the value is null). You can use the `??` operator’s syntactic expressiveness to return an appropriate value (the right hand operand) when the left operand has a nullable type whose value is null. If you try to assign a nullable value type to a non-nullable value type without using the `??` operator, you will generate a compile-time error. If you use a cast, and the nullable value type is currently undefined, an `InvalidOperationException` exception will be thrown.\n\nFor more information, see [Nullable Types](../../programming-guide/nullable-types/index.md).\n\nThe result of a ?? operator is not considered to be a constant even if both its arguments are constants.\n\n## Example\n\n[!code-csharp[csRefOperators#53](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefOperators/CS/csrefOperators.cs#53)]\n\n## C# language specification\n\nFor more information, see [The null coalescing operator](~/_csharplang/spec/expressions.md#the-null-coalescing-operator) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# operators](index.md)\n- [Nullable Types](../../programming-guide/nullable-types/index.md)\n- [What Exactly Does 'Lifted' mean?](https://blogs.msdn.microsoft.com/ericlippert/2007/06/27/what-exactly-does-lifted-mean/)","nodes":[{"pos":[4,280],"embed":true,"restype":"x-metadata","content":"title: \"?? operator - C# Reference\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"??_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"coalesce operator [C#]\"\n  - \"?? operator [C#]\"\n  - \"conditional-AND operator (&&) [C#]\"\nms.assetid: 088b1f0d-c1af-4fe1-b4b8-196fd5ea9132","nodes":[{"content":"?? operator - C# Reference","nodes":[{"pos":[0,26],"content":"?? operator - C# Reference","nodes":[{"content":"?? operator - C# Reference","pos":[0,26],"nodes":[{"content":"??","pos":[0,2]},{"content":"operator - C# Reference","pos":[3,26]}]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[287,313],"content":"?? operator (C# Reference)","linkify":"?? operator (C# Reference)","nodes":[{"content":"?? operator (C# Reference)","pos":[0,26],"nodes":[{"content":"??","pos":[0,2]},{"content":"operator (C# Reference)","pos":[3,26]}]}]},{"content":"The <ph id=\"ph1\">`??`</ph> operator is called the null-coalescing operator.","pos":[315,372],"source":"The `??` operator is called the null-coalescing operator."},{"content":"It returns the left-hand operand if the operand is not null; otherwise it returns the right hand operand.","pos":[374,479]},{"pos":[484,491],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A nullable type can represent a value from the type’s domain, or the value can be undefined (in which case the value is null).","pos":[493,619]},{"content":"You can use the <ph id=\"ph1\">`??`</ph> operator’s syntactic expressiveness to return an appropriate value (the right hand operand) when the left operand has a nullable type whose value is null.","pos":[620,795],"source":" You can use the `??` operator’s syntactic expressiveness to return an appropriate value (the right hand operand) when the left operand has a nullable type whose value is null."},{"content":"If you try to assign a nullable value type to a non-nullable value type without using the <ph id=\"ph1\">`??`</ph> operator, you will generate a compile-time error.","pos":[796,940],"source":" If you try to assign a nullable value type to a non-nullable value type without using the `??` operator, you will generate a compile-time error."},{"content":"If you use a cast, and the nullable value type is currently undefined, an <ph id=\"ph1\">`InvalidOperationException`</ph> exception will be thrown.","pos":[941,1068],"source":" If you use a cast, and the nullable value type is currently undefined, an `InvalidOperationException` exception will be thrown."},{"pos":[1070,1162],"content":"For more information, see <bpt id=\"p1\">[</bpt>Nullable Types<ept id=\"p1\">](../../programming-guide/nullable-types/index.md)</ept>.","source":"For more information, see [Nullable Types](../../programming-guide/nullable-types/index.md)."},{"content":"The result of a ??","pos":[1164,1182]},{"content":"operator is not considered to be a constant even if both its arguments are constants.","pos":[1183,1268]},{"pos":[1273,1280],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1407,1432],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>The null coalescing operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#the-null-coalescing-operator)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[1434,1626],"source":"For more information, see [The null coalescing operator](~/_csharplang/spec/expressions.md#the-null-coalescing-operator) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[1627,1703]},{"pos":[1708,1716],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1720,1747],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1750,1806],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1809,1833],"content":"<bpt id=\"p1\">[</bpt>C# operators<ept id=\"p1\">](index.md)</ept>","source":"[C# operators](index.md)"},{"pos":[1836,1901],"content":"<bpt id=\"p1\">[</bpt>Nullable Types<ept id=\"p1\">](../../programming-guide/nullable-types/index.md)</ept>","source":"[Nullable Types](../../programming-guide/nullable-types/index.md)"},{"pos":[1904,2026],"content":"<bpt id=\"p1\">[</bpt>What Exactly Does 'Lifted' mean?<ept id=\"p1\">](https://blogs.msdn.microsoft.com/ericlippert/2007/06/27/what-exactly-does-lifted-mean/)</ept>","source":"[What Exactly Does 'Lifted' mean?](https://blogs.msdn.microsoft.com/ericlippert/2007/06/27/what-exactly-does-lifted-mean/)"}]}