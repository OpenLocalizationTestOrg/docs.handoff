{"content":"---\ntitle: \"Jagged Arrays - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"jagged arrays [C#]\"\n  - \"arrays [C#], jagged\"\nms.assetid: 537c65a6-0e0a-4a00-a2b8-086f38519c70\n---\n# Jagged Arrays (C# Programming Guide)\n\nA jagged array is an array whose elements are arrays. The elements of a jagged array can be of different dimensions and sizes. A jagged array is sometimes called an \"array of arrays.\" The following examples show how to declare, initialize, and access jagged arrays.  \n  \n The following is a declaration of a single-dimensional array that has three elements, each of which is a single-dimensional array of integers:  \n  \n [!code-csharp[csProgGuideArrays#19](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#19)]  \n  \n Before you can use `jaggedArray`, its elements must be initialized. You can initialize the elements like this:  \n  \n [!code-csharp[csProgGuideArrays#20](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#20)]  \n  \n Each of the elements is a single-dimensional array of integers. The first element is an array of 5 integers, the second is an array of 4 integers, and the third is an array of 2 integers.  \n  \n It is also possible to use initializers to fill the array elements with values, in which case you do not need the array size. For example:  \n  \n [!code-csharp[csProgGuideArrays#21](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#21)]  \n  \n You can also initialize the array upon declaration like this:  \n  \n [!code-csharp[csProgGuideArrays#22](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#22)]  \n  \n You can use the following shorthand form. Notice that you cannot omit the `new` operator from the elements initialization because there is no default initialization for the elements:  \n  \n [!code-csharp[csProgGuideArrays#23](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#23)]  \n  \n A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to `null`.  \n  \n You can access individual array elements like these examples:  \n  \n [!code-csharp[csProgGuideArrays#24](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#24)]  \n  \n It is possible to mix jagged and multidimensional arrays. The following is a declaration and initialization of a single-dimensional jagged array that contains three two-dimensional array elements of different sizes. For more information about two-dimensional arrays, see [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md).  \n  \n [!code-csharp[csProgGuideArrays#25](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#25)]  \n  \n You can access individual elements as shown in this example, which displays the value of the element `[1,0]` of the first array (value `5`):  \n  \n [!code-csharp[csProgGuideArrays#26](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#26)]  \n  \n The method `Length` returns the number of arrays contained in the jagged array. For example, assuming you have declared the previous array, this line:  \n  \n [!code-csharp[csProgGuideArrays#27](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#27)]  \n  \n returns a value of 3.  \n  \n## Example\n\n This example builds an array whose elements are themselves arrays. Each one of the array elements has a different size.  \n  \n [!code-csharp[csProgGuideArrays#18](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideArrays/CS/Arrays.cs#18)]  \n  \n## See also\n\n- <xref:System.Array>\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Arrays](../../../csharp/programming-guide/arrays/index.md)\n- [Single-Dimensional Arrays](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)\n- [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)\n","nodes":[{"pos":[4,211],"embed":true,"restype":"x-metadata","content":"title: \"Jagged Arrays - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"jagged arrays [C#]\"\n  - \"arrays [C#], jagged\"\nms.assetid: 537c65a6-0e0a-4a00-a2b8-086f38519c70","nodes":[{"content":"Jagged Arrays - C# Programming Guide","nodes":[{"pos":[0,36],"content":"Jagged Arrays - C# Programming Guide","nodes":[{"content":"Jagged Arrays - C# Programming Guide","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[218,254],"content":"Jagged Arrays (C# Programming Guide)","linkify":"Jagged Arrays (C# Programming Guide)","nodes":[{"content":"Jagged Arrays (C# Programming Guide)","pos":[0,36]}]},{"content":"A jagged array is an array whose elements are arrays.","pos":[256,309]},{"content":"The elements of a jagged array can be of different dimensions and sizes.","pos":[310,382]},{"content":"A jagged array is sometimes called an \"array of arrays.\"","pos":[383,439]},{"content":"The following examples show how to declare, initialize, and access jagged arrays.","pos":[440,521]},{"content":"The following is a declaration of a single-dimensional array that has three elements, each of which is a single-dimensional array of integers:","pos":[528,670]},{"content":"Before you can use <ph id=\"ph1\">`jaggedArray`</ph>, its elements must be initialized.","pos":[802,869],"source":"Before you can use `jaggedArray`, its elements must be initialized."},{"content":"You can initialize the elements like this:","pos":[870,912]},{"content":"Each of the elements is a single-dimensional array of integers.","pos":[1044,1107]},{"content":"The first element is an array of 5 integers, the second is an array of 4 integers, and the third is an array of 2 integers.","pos":[1108,1231]},{"content":"It is also possible to use initializers to fill the array elements with values, in which case you do not need the array size.","pos":[1238,1363]},{"content":"For example:","pos":[1364,1376]},{"content":"You can also initialize the array upon declaration like this:","pos":[1508,1569]},{"content":"You can use the following shorthand form.","pos":[1701,1742]},{"content":"Notice that you cannot omit the <ph id=\"ph1\">`new`</ph> operator from the elements initialization because there is no default initialization for the elements:","pos":[1743,1883],"source":" Notice that you cannot omit the `new` operator from the elements initialization because there is no default initialization for the elements:"},{"pos":[2015,2130],"content":"A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to <ph id=\"ph1\">`null`</ph>.","source":"A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to `null`."},{"content":"You can access individual array elements like these examples:","pos":[2137,2198]},{"content":"It is possible to mix jagged and multidimensional arrays.","pos":[2330,2387]},{"content":"The following is a declaration and initialization of a single-dimensional jagged array that contains three two-dimensional array elements of different sizes.","pos":[2388,2545]},{"content":"For more information about two-dimensional arrays, see <bpt id=\"p1\">[</bpt>Multidimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)</ept>.","pos":[2546,2696],"source":" For more information about two-dimensional arrays, see [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)."},{"pos":[2828,2968],"content":"You can access individual elements as shown in this example, which displays the value of the element <ph id=\"ph1\">`[1,0]`</ph> of the first array (value <ph id=\"ph2\">`5`</ph>):","source":"You can access individual elements as shown in this example, which displays the value of the element `[1,0]` of the first array (value `5`):"},{"content":"The method <ph id=\"ph1\">`Length`</ph> returns the number of arrays contained in the jagged array.","pos":[3100,3179],"source":"The method `Length` returns the number of arrays contained in the jagged array."},{"content":"For example, assuming you have declared the previous array, this line:","pos":[3180,3250]},{"content":"returns a value of 3.","pos":[3382,3403]},{"pos":[3412,3419],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example builds an array whose elements are themselves arrays.","pos":[3422,3488]},{"content":"Each one of the array elements has a different size.","pos":[3489,3541]},{"pos":[3675,3683],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3709,3775],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[3778,3837],"content":"<bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/index.md)</ept>","source":"[Arrays](../../../csharp/programming-guide/arrays/index.md)"},{"pos":[3840,3938],"content":"<bpt id=\"p1\">[</bpt>Single-Dimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)</ept>","source":"[Single-Dimensional Arrays](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)"},{"pos":[3941,4035],"content":"<bpt id=\"p1\">[</bpt>Multidimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)</ept>","source":"[Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)"}]}