{"content":"---\ntitle: \"Type &#39;&lt;typename&gt;&#39; has no type parameters and so cannot have type arguments | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"bc32045\"\n  - \"vbc32045\"\nhelpviewer_keywords: \n  - \"BC32045\"\nms.assetid: b86e784c-6718-4585-bd39-2f0982068828\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Type &#39;&lt;typename&gt;&#39; has no type parameters and so cannot have type arguments\nA declaration or assignment statement includes an [Of](../../visual-basic/language-reference/statements/of-clause.md) clause when invoking a non-generic type.  \n  \n By its definition, a *generic type* is a class, structure, interface, procedure, or delegate that operates on data types you can specify through one or more *type parameters*. When the using code creates a type from this generic type, it supplies a *type argument* to each type parameter. As part of the creation of the type, each type argument replaces every occurrence of its corresponding type parameter in the generated code.  \n  \n Type parameters are defined with an `Of` clause inside parentheses, and type arguments are supplied using an `Of` clause inside parentheses. The `Of` clause is used only when dealing with generic types.  \n  \n Non-generic types do not accept type parameters, and you cannot specify any type arguments when you invoke such a type.  \n  \n **Error ID:** BC32045  \n  \n## To correct this error  \n  \n1.  Check the spelling of the type you are using in the declaration or assignment statement.  \n  \n2.  If you are invoking a non-generic type, remove the `Of` clause and its parentheses, if any. Do not remove parentheses surrounding a standard argument list for a procedure, delegate, or class constructor.  \n  \n## See Also  \n [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [Type List](../../visual-basic/language-reference/statements/type-list.md)   \n [How to: Use a Generic Class](../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)","nodes":[{"pos":[12,117],"content":"Type &#39;&lt;typename&gt;&#39; has no type parameters and so cannot have type arguments | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Type &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>typename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; has no type parameters and so cannot have type arguments | Microsoft Docs","pos":[0,105],"source":"Type &#39;&lt;typename&gt;&#39; has no type parameters and so cannot have type arguments | Microsoft Docs"}]},{"pos":[633,721],"content":"Type &#39;&lt;typename&gt;&#39; has no type parameters and so cannot have type arguments","linkify":"Type &#39;&lt;typename&gt;&#39; has no type parameters and so cannot have type arguments","nodes":[{"content":"Type &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>typename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; has no type parameters and so cannot have type arguments","pos":[0,88],"source":"Type &#39;&lt;typename&gt;&#39; has no type parameters and so cannot have type arguments"}]},{"pos":[722,880],"content":"A declaration or assignment statement includes an <bpt id=\"p1\">[</bpt>Of<ept id=\"p1\">](../../visual-basic/language-reference/statements/of-clause.md)</ept> clause when invoking a non-generic type.","source":"A declaration or assignment statement includes an [Of](../../visual-basic/language-reference/statements/of-clause.md) clause when invoking a non-generic type."},{"content":"By its definition, a <bpt id=\"p1\">*</bpt>generic type<ept id=\"p1\">*</ept> is a class, structure, interface, procedure, or delegate that operates on data types you can specify through one or more <bpt id=\"p2\">*</bpt>type parameters<ept id=\"p2\">*</ept>.","pos":[887,1062],"source":"By its definition, a *generic type* is a class, structure, interface, procedure, or delegate that operates on data types you can specify through one or more *type parameters*."},{"content":"When the using code creates a type from this generic type, it supplies a <bpt id=\"p1\">*</bpt>type argument<ept id=\"p1\">*</ept> to each type parameter.","pos":[1063,1175],"source":" When the using code creates a type from this generic type, it supplies a *type argument* to each type parameter."},{"content":"As part of the creation of the type, each type argument replaces every occurrence of its corresponding type parameter in the generated code.","pos":[1176,1316]},{"content":"Type parameters are defined with an <ph id=\"ph1\">`Of`</ph> clause inside parentheses, and type arguments are supplied using an <ph id=\"ph2\">`Of`</ph> clause inside parentheses.","pos":[1323,1463],"source":"Type parameters are defined with an `Of` clause inside parentheses, and type arguments are supplied using an `Of` clause inside parentheses."},{"content":"The <ph id=\"ph1\">`Of`</ph> clause is used only when dealing with generic types.","pos":[1464,1525],"source":" The `Of` clause is used only when dealing with generic types."},{"content":"Non-generic types do not accept type parameters, and you cannot specify any type arguments when you invoke such a type.","pos":[1532,1651]},{"pos":[1658,1679],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32045","source":"**Error ID:** BC32045"},{"pos":[1688,1709],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Check the spelling of the type you are using in the declaration or assignment statement.","pos":[1719,1807]},{"content":"If you are invoking a non-generic type, remove the <ph id=\"ph1\">`Of`</ph> clause and its parentheses, if any.","pos":[1817,1908],"source":"If you are invoking a non-generic type, remove the `Of` clause and its parentheses, if any."},{"content":"Do not remove parentheses surrounding a standard argument list for a procedure, delegate, or class constructor.","pos":[1909,2020]},{"pos":[2029,2037],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2041,2157],"source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type List<ept id=\"p1\">](../../visual-basic/language-reference/statements/type-list.md)</ept><ph id=\"ph1\"> </ph>","pos":[2160,2236],"source":" [Type List](../../visual-basic/language-reference/statements/type-list.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Use a Generic Class<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept>","pos":[2239,2366],"source":" [How to: Use a Generic Class](../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)"}]}