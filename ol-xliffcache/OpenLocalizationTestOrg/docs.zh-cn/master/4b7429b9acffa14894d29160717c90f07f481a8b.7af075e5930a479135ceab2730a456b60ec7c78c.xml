{"content":"---\ntitle: \"Compiler Error CS0019 | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"CS0019\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"CS0019\"\nms.assetid: 5a25be41-535b-4850-a230-9a385e01fd20\ncaps.latest.revision: 15\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error CS0019\nOperator 'operator' cannot be applied to operands of type 'type' and 'type'  \n  \n A binary operator is applied to data types that do not support it. For example, you cannot use the [&#124;&#124;](../../../csharp/language-reference/operators/conditional-or-operator.md) operator on strings, you cannot use [+](../../../csharp/language-reference/operators/addition-operator.md) , [-](../../../csharp/language-reference/operators/subtraction-operator.md) , [\\<](../../../csharp/language-reference/operators/less-than-operator.md) , or [>](../../../csharp/language-reference/operators/greater-than-operator.md) operators on [bool](../../../csharp/language-reference/keywords/bool.md) variables, and you cannot use the [==](../../../csharp/language-reference/operators/equality-comparison-operator.md) operator with a `struct` type unless the type explicitly overloads that operator.  \n  \n If you encounter this error with a class type, it is because the class does not overload the operator. For more information, see [Overloadable Operators](../../../csharp/programming-guide/statements-expressions-operators/overloadable-operators.md).  \n  \n## Example  \n In the following example, CS0019 is generated in two places because [bool](../../../csharp/language-reference/keywords/bool.md) in C# is not convertible to [int](../../../csharp/language-reference/keywords/int.md). CS0019 also is generated when the subtraction operator is applied to a string. The addition operator (+) can be used with string operands because that operator is overloaded by the `String` class to perform string concatenation.  \n  \n```  \nstatic void Main()  \n{  \n    bool result = true;  \n    if (result > 0) //CS0019  \n    {  \n        // Do something.  \n    }  \n  \n    int i = 1;  \n    // You cannot compare an integer and a boolean value.  \n    if (i == true) //CS0019  \n    {  \n        //Do something...  \n    }  \n  \n    // The following use of == causes no error. It is the comparison of  \n    // an integer and a boolean value that causes the error in the   \n    // previous if statement.  \n    if (result == true)  \n    {  \n        //Do something...  \n    }  \n  \n    string s = \"Just try to subtract me.\";  \n    float f = 100 - s; // CS0019  \n}  \n  \n```  \n  \n## Example  \n In the following example, conditional logic must be specified outside the <xref:System.Diagnostics.ConditionalAttribute>. You can pass only one predefined symbol to the <xref:System.Diagnostics.ConditionalAttribute>.  \n  \n The following sample generates CS0019.  \n  \n```  \n// CS0019_a.cs  \n// compile with: /target:library  \nusing System.Diagnostics;  \npublic class MyClass  \n{  \n   [ConditionalAttribute(\"DEBUG\" || \"TRACE\")]   // CS0019  \n   public void TestMethod() {}  \n  \n   // OK  \n   [ConditionalAttribute(\"DEBUG\"), ConditionalAttribute(\"TRACE\")]  \n   public void TestMethod2() {}  \n}  \n  \n```  \n  \n## See Also  \n [Operators](../../../csharp/programming-guide/statements-expressions-operators/operators.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)","nodes":[{"pos":[12,50],"content":"Compiler Error CS0019 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error CS0019 | Microsoft Docs","pos":[0,38]}]},{"pos":[543,564],"content":"Compiler Error CS0019","linkify":"Compiler Error CS0019","nodes":[{"content":"Compiler Error CS0019","pos":[0,21]}]},{"content":"Operator 'operator' cannot be applied to operands of type 'type' and 'type'","pos":[565,640]},{"content":"A binary operator is applied to data types that do not support it.","pos":[647,713]},{"content":"For example, you cannot use the <bpt id=\"p1\">[</bpt>&amp;#124;&amp;#124;<ept id=\"p1\">](../../../csharp/language-reference/operators/conditional-or-operator.md)</ept> operator on strings, you cannot use <bpt id=\"p2\">[</bpt><ph id=\"ph1\">+</ph><ept id=\"p2\">](../../../csharp/language-reference/operators/addition-operator.md)</ept> , <bpt id=\"p3\">[</bpt><ph id=\"ph2\">-</ph><ept id=\"p3\">](../../../csharp/language-reference/operators/subtraction-operator.md)</ept> , <bpt id=\"p4\">[</bpt><ph id=\"ph3\">\\&lt;</ph><ept id=\"p4\">](../../../csharp/language-reference/operators/less-than-operator.md)</ept> , or <bpt id=\"p5\">[</bpt><ph id=\"ph4\">&gt;</ph><ept id=\"p5\">](../../../csharp/language-reference/operators/greater-than-operator.md)</ept> operators on <bpt id=\"p6\">[</bpt>bool<ept id=\"p6\">](../../../csharp/language-reference/keywords/bool.md)</ept> variables, and you cannot use the <bpt id=\"p7\">[</bpt><ph id=\"ph5\">==</ph><ept id=\"p7\">](../../../csharp/language-reference/operators/equality-comparison-operator.md)</ept> operator with a <ph id=\"ph6\">`struct`</ph> type unless the type explicitly overloads that operator.","pos":[714,1443],"source":" For example, you cannot use the [&#124;&#124;](../../../csharp/language-reference/operators/conditional-or-operator.md) operator on strings, you cannot use [+](../../../csharp/language-reference/operators/addition-operator.md) , [-](../../../csharp/language-reference/operators/subtraction-operator.md) , [\\<](../../../csharp/language-reference/operators/less-than-operator.md) , or [>](../../../csharp/language-reference/operators/greater-than-operator.md) operators on [bool](../../../csharp/language-reference/keywords/bool.md) variables, and you cannot use the [==](../../../csharp/language-reference/operators/equality-comparison-operator.md) operator with a `struct` type unless the type explicitly overloads that operator."},{"content":"If you encounter this error with a class type, it is because the class does not overload the operator.","pos":[1450,1552]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Overloadable Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/overloadable-operators.md)</ept>.","pos":[1553,1698],"source":" For more information, see [Overloadable Operators](../../../csharp/programming-guide/statements-expressions-operators/overloadable-operators.md)."},{"pos":[1707,1714],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, CS0019 is generated in two places because <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../../../csharp/language-reference/keywords/bool.md)</ept> in C# is not convertible to <bpt id=\"p2\">[</bpt>int<ept id=\"p2\">](../../../csharp/language-reference/keywords/int.md)</ept>.","pos":[1718,1932],"source":"In the following example, CS0019 is generated in two places because [bool](../../../csharp/language-reference/keywords/bool.md) in C# is not convertible to [int](../../../csharp/language-reference/keywords/int.md)."},{"content":"CS0019 also is generated when the subtraction operator is applied to a string.","pos":[1933,2011]},{"content":"The addition operator (+) can be used with string operands because that operator is overloaded by the <ph id=\"ph1\">`String`</ph> class to perform string concatenation.","pos":[2012,2161],"source":" The addition operator (+) can be used with string operands because that operator is overloaded by the `String` class to perform string concatenation."},{"pos":[2803,2810],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, conditional logic must be specified outside the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConditionalAttribute&gt;</ph>.","pos":[2814,2935],"source":"In the following example, conditional logic must be specified outside the <xref:System.Diagnostics.ConditionalAttribute>."},{"content":"You can pass only one predefined symbol to the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConditionalAttribute&gt;</ph>.","pos":[2936,3030],"source":" You can pass only one predefined symbol to the <xref:System.Diagnostics.ConditionalAttribute>."},{"content":"The following sample generates CS0019.","pos":[3037,3075]},{"pos":[3422,3430],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3434,3527],"source":"[Operators](../../../csharp/programming-guide/statements-expressions-operators/operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>","pos":[3530,3650],"source":" [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)"}]}