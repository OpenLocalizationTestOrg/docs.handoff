<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">763a76a8ea0e48fd6935c951ce584efad50dabb9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\properties.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd62070e5eb86d1c2b70573f892100352020f6f0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">393c686250c71bcc3b107df7798f5f0d55e7bf6c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Properties</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Properties</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Properties</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Properties are first class citizens in C#.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The language defines syntax that enables developers to write code that accurately expresses their design intent.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Properties behave like fields when they are accessed.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, unlike fields, properties are implemented with accessors that define the statements executed when a property is accessed or assigned.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Property Syntax</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The syntax for properties is a natural extension to fields.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A field defines a storage location:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A property definition contains declarations for a <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessor that retrieves and assigns the value of that property:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The syntax shown above is the <bpt id="p1">*</bpt>auto property<ept id="p1">*</ept> syntax.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The compiler generates the storage location for the field that backs up the property.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The compiler also implements the body of the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Sometimes, you need to initialize a property to a value other than the default for its type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>C# enables that by setting a value after the closing brace for the property.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You may prefer the initial value for the <ph id="ph1">`FirstName`</ph> property to be the empty string rather than <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You would specify that as shown below:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is most useful for read-only properties, as you'll see later in this topic.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also define the storage yourself, as shown below:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When a property implementation is a single expression, you can use <bpt id="p1">*</bpt>expression bodied members<ept id="p1">*</ept> for the getter or setter:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This simplified syntax will be used where applicable throughout this topic.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The property definition shown above is a read-write property.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Notice the keyword <ph id="ph1">`value`</ph> in the set accessor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`set`</ph> accessor always has a single parameter named <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`get`</ph> accessor must return a value that is convertible to the type of the property (<ph id="ph2">`string`</ph> in this example).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>That's the basics of the syntax.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There are many different variations that support a variety of different design idioms.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Let's explore those, and learn the syntax options for each.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Scenarios</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The examples above showed one of the simplest cases of property definition: a read-write property with no validation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>By writing the code you want in the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors, you can create many different scenarios.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Validation</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can write code in the <ph id="ph1">`set`</ph> accessor to ensure that the values represented by a property are always valid.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, suppose one rule for the <ph id="ph1">`Person`</ph> class is that the name cannot be blank, or whitespace.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You would write that as follows:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The example above enforces the rule that the first name must not be blank, or whitespace.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If a developer writes</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>That assignment throws an <ph id="ph1">`ArgumentException`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Because a property set accessor must have a void return type, you report errors in the set accessor by throwing an exception.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>That is a simple case of validation.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can extend this same syntax to anything needed in your scenario.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can check the relationships between different properties, or validate against any external conditions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Any valid C# statements are valid in a property accessor.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Read-only</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Up to this point, all the property definitions you have seen are read/write properties with public accessors.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>That's not the only valid accessibility for properties.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can create read-only properties, or give different accessibility to the set and get accessors.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Suppose that your <ph id="ph1">`Person`</ph> class should only enable changing the value of the <ph id="ph2">`FirstName`</ph> property from other methods in that class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You could give the set accessor <ph id="ph1">`private`</ph> accessibility instead of <ph id="ph2">`public`</ph>:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Now, the <ph id="ph1">`FirstName`</ph> property can be accessed from any code, but it can only be assigned from other code in the <ph id="ph2">`Person`</ph> class.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can add any restrictive access modifier to either the set or get accessors.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Any access modifier you place on the individual accessor must be more limited than the access modifier on the property definition.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The above is legal because the <ph id="ph1">`FirstName`</ph> property is <ph id="ph2">`public`</ph>, but the set accessor is <ph id="ph3">`private`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You could not declare a <ph id="ph1">`private`</ph> property with a <ph id="ph2">`public`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Property declarations can also be declared <ph id="ph1">`protected`</ph>, <ph id="ph2">`internal`</ph>, <ph id="ph3">`protected internal`</ph> or even <ph id="ph4">`private`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It is also legal to place the more restrictive modifier on the <ph id="ph1">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, you could have a <ph id="ph1">`public`</ph> property, but restrict the <ph id="ph2">`get`</ph> accessor to <ph id="ph3">`private`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>That scenario is rarely done in practice.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can also restrict modifications to a property so that it can only be set in a constructor or a property initializer.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can modify the <ph id="ph1">`Person`</ph> class so as follows:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This feature is most commonly used for initializing collections that are exposed as read-only properties:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Computed Properties</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A property does not need to simply return the value of a member field.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can create properties that return a computed value.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Let's expand the <ph id="ph1">`Person`</ph> object to return the full name, computed by concatenating the first and last names:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The example above uses the <bpt id="p1">*</bpt>String Interpolation<ept id="p1">*</ept> syntax to create the formatted string for the full name.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can also use <bpt id="p1">*</bpt>Expression-bodied Members<ept id="p1">*</ept>, which provides a more succinct way to create the computed <ph id="ph1">`FullName`</ph> property:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Expression-bodied Members<ept id="p1">*</ept> use the <bpt id="p2">*</bpt>lambda expression<ept id="p2">*</ept> syntax to define a method that contain a single expression.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Here, that expression returns the full name for the person object.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Lazy Evaluated Properties</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can mix the concept of a computed property with storage and create a <bpt id="p1">*</bpt>lazy evaluated property<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, you could update the <ph id="ph1">`FullName`</ph> property so that the string formatting only happened the first time it was accessed:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The above code contains a bug though.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If code updates the value of either the <ph id="ph1">`FirstName`</ph> or <ph id="ph2">`LastName`</ph> property, the previously evaluated <ph id="ph3">`fullName`</ph> field is invalid.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You need to update the <ph id="ph1">`set`</ph> accessors of the <ph id="ph2">`FirstName`</ph> and <ph id="ph3">`LastName`</ph> property so that the <ph id="ph4">`fullName`</ph> field is calculated again:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This final version evaluates the <ph id="ph1">`FullName`</ph> property only when needed.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the previously calculated version is valid, it's used.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If another state change invalidates the previously calculated version, it will be recalculated.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Developers that use this class do not need to know the details of the implementation.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>None of these internal changes affect the use of the Person object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>That's the key reason for using Properties to expose data members of an object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>INotifyPropertyChanged</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A final scenario where you need to write code in a property accessor is to support the <ph id="ph1">`INotifyPropertyChanged`</ph> interface used to notify data binding clients that a value has changed.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When the value of a property changes, the object raises the <ph id="ph1">`PropertyChanged`</ph> event to indicate the change.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The data binding libraries, in turn, update display elements based on that change.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The code below shows how you would implement <ph id="ph1">`INotifyPropertyChanged`</ph> for the <ph id="ph2">`FirstName`</ph> property of this person class.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`?.`</ph> operator is called the <bpt id="p1">*</bpt>null conditional operator<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>It checks for a null reference before evaluating the right side of the operator.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The end result is that if there are no subscribers to the <ph id="ph1">`PropertyChanged`</ph> event, the code to raise the event doesn't execute.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>It would throw a <ph id="ph1">`NullReferenceException`</ph> without this check in that case.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See the page on <bpt id="p1">[</bpt><ph id="ph1">`events`</ph><ept id="p1">](delegates-events.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This example also uses the new <ph id="ph1">`nameof`</ph> operator to convert from the property name symbol to its text representation.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`nameof`</ph> can reduce errors where you have mistyped the name of the property.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Again, this is an example of a case where you can write code in your accessors to support the scenarios you need.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Summing up</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Properties are a form of smart fields in a class or object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>From outside the object, they appear like fields in the object.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>However, properties can be implemented using the full palette of C# functionality.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can provide validation, different accessibility, lazy evaluation, or any requirements your scenarios need.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>