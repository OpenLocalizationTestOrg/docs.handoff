{"content":"---\ntitle: \"Generic Type Parameters - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"generics [C#], type parameters\"\n  - \"type parameters [C#]\"\nms.assetid: a03b0ab2-0606-4b41-b7bf-e64d5bb4d18f\n---\n# Generic type parameters (C# Programming Guide)\n\nIn a generic type or method definition, a type parameter is a placeholder for a specific type that a client specifies when they create an instance of the generic type. A generic class, such as `GenericList<T>` listed in [Introduction to Generics](../../../csharp/programming-guide/generics/introduction-to-generics.md), cannot be used as-is because it is not really a type; it is more like a blueprint for a type. To use `GenericList<T>`, client code must declare and instantiate a constructed type by specifying a type argument inside the angle brackets. The type argument for this particular class can be any type recognized by the compiler. Any number of constructed type instances can be created, each one using a different type argument, as follows:  \n  \n[!code-csharp[csProgGuideGenerics#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideGenerics/CS/Generics.cs#7)]  \n  \nIn each of these instances of `GenericList<T>`, every occurrence of `T` in the class is substituted at run time with the type argument. By means of this substitution, we have created three separate type-safe and efficient objects using a single class definition. For more information on how this substitution is performed by the CLR, see [Generics in the Run Time](../../../csharp/programming-guide/generics/generics-in-the-run-time.md).  \n  \n## Type parameter naming guidelines  \n  \n- **Do** name generic type parameters with descriptive names, unless a single letter name is completely self explanatory and a descriptive name would not add value.  \n  \n   [!code-csharp[csProgGuideGenerics#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideGenerics/CS/Generics.cs#8)]  \n  \n- **Consider** using T as the type parameter name for types with one single letter type parameter.  \n  \n   [!code-csharp[csProgGuideGenerics#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideGenerics/CS/Generics.cs#9)]  \n  \n- **Do** prefix descriptive type parameter names with \"T\".  \n  \n   [!code-csharp[csProgGuideGenerics#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideGenerics/CS/Generics.cs#10)]  \n  \n- **Consider** indicating constraints placed on a type parameter in the name of parameter. For example, a parameter constrained to `ISession` may be called `TSession`.\n\nThe code analysis rule [CA1715](/visualstudio/code-quality/ca1715-identifiers-should-have-correct-prefix) can be used to ensure that type parameters are named appropriately.\n  \n## See also\n\n- <xref:System.Collections.Generic>\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Generics](../../../csharp/programming-guide/generics/index.md)\n- [Differences Between C++ Templates and C# Generics](../../../csharp/programming-guide/generics/differences-between-cpp-templates-and-csharp-generics.md)\n","nodes":[{"pos":[4,234],"embed":true,"restype":"x-metadata","content":"title: \"Generic Type Parameters - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"generics [C#], type parameters\"\n  - \"type parameters [C#]\"\nms.assetid: a03b0ab2-0606-4b41-b7bf-e64d5bb4d18f","nodes":[{"content":"Generic Type Parameters - C# Programming Guide","nodes":[{"pos":[0,46],"content":"Generic Type Parameters - C# Programming Guide","nodes":[{"content":"Generic Type Parameters - C# Programming Guide","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[241,287],"content":"Generic type parameters (C# Programming Guide)","linkify":"Generic type parameters (C# Programming Guide)","nodes":[{"content":"Generic type parameters (C# Programming Guide)","pos":[0,46]}]},{"content":"In a generic type or method definition, a type parameter is a placeholder for a specific type that a client specifies when they create an instance of the generic type.","pos":[289,456]},{"content":"A generic class, such as <ph id=\"ph1\">`GenericList&lt;T&gt;`</ph> listed in <bpt id=\"p1\">[</bpt>Introduction to Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/introduction-to-generics.md)</ept>, cannot be used as-is because it is not really a type; it is more like a blueprint for a type.","pos":[457,702],"source":" A generic class, such as `GenericList<T>` listed in [Introduction to Generics](../../../csharp/programming-guide/generics/introduction-to-generics.md), cannot be used as-is because it is not really a type; it is more like a blueprint for a type."},{"content":"To use <ph id=\"ph1\">`GenericList&lt;T&gt;`</ph>, client code must declare and instantiate a constructed type by specifying a type argument inside the angle brackets.","pos":[703,844],"source":" To use `GenericList<T>`, client code must declare and instantiate a constructed type by specifying a type argument inside the angle brackets."},{"content":"The type argument for this particular class can be any type recognized by the compiler.","pos":[845,932]},{"content":"Any number of constructed type instances can be created, each one using a different type argument, as follows:","pos":[933,1043]},{"content":"In each of these instances of <ph id=\"ph1\">`GenericList&lt;T&gt;`</ph>, every occurrence of <ph id=\"ph2\">`T`</ph> in the class is substituted at run time with the type argument.","pos":[1177,1312],"source":"In each of these instances of `GenericList<T>`, every occurrence of `T` in the class is substituted at run time with the type argument."},{"content":"By means of this substitution, we have created three separate type-safe and efficient objects using a single class definition.","pos":[1313,1439]},{"content":"For more information on how this substitution is performed by the CLR, see <bpt id=\"p1\">[</bpt>Generics in the Run Time<ept id=\"p1\">](../../../csharp/programming-guide/generics/generics-in-the-run-time.md)</ept>.","pos":[1440,1614],"source":" For more information on how this substitution is performed by the CLR, see [Generics in the Run Time](../../../csharp/programming-guide/generics/generics-in-the-run-time.md)."},{"pos":[1623,1655],"content":"Type parameter naming guidelines","linkify":"Type parameter naming guidelines","nodes":[{"content":"Type parameter naming guidelines","pos":[0,32]}]},{"pos":[1663,1825],"content":"<bpt id=\"p1\">**</bpt>Do<ept id=\"p1\">**</ept> name generic type parameters with descriptive names, unless a single letter name is completely self explanatory and a descriptive name would not add value.","source":"**Do** name generic type parameters with descriptive names, unless a single letter name is completely self explanatory and a descriptive name would not add value."},{"pos":[1964,2060],"content":"<bpt id=\"p1\">**</bpt>Consider<ept id=\"p1\">**</ept> using T as the type parameter name for types with one single letter type parameter.","source":"**Consider** using T as the type parameter name for types with one single letter type parameter."},{"pos":[2199,2255],"content":"<bpt id=\"p1\">**</bpt>Do<ept id=\"p1\">**</ept> prefix descriptive type parameter names with \"T\".","source":"**Do** prefix descriptive type parameter names with \"T\"."},{"content":"<bpt id=\"p1\">**</bpt>Consider<ept id=\"p1\">**</ept> indicating constraints placed on a type parameter in the name of parameter.","pos":[2396,2484],"source":"**Consider** indicating constraints placed on a type parameter in the name of parameter."},{"content":"For example, a parameter constrained to <ph id=\"ph1\">`ISession`</ph> may be called <ph id=\"ph2\">`TSession`</ph>.","pos":[2485,2561],"source":" For example, a parameter constrained to `ISession` may be called `TSession`."},{"pos":[2563,2736],"content":"The code analysis rule <bpt id=\"p1\">[</bpt>CA1715<ept id=\"p1\">](/visualstudio/code-quality/ca1715-identifiers-should-have-correct-prefix)</ept> can be used to ensure that type parameters are named appropriately.","source":"The code analysis rule [CA1715](/visualstudio/code-quality/ca1715-identifiers-should-have-correct-prefix) can be used to ensure that type parameters are named appropriately."},{"pos":[2743,2751],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2791,2857],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2860,2923],"content":"<bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/index.md)</ept>","source":"[Generics](../../../csharp/programming-guide/generics/index.md)"},{"pos":[2926,3078],"content":"<bpt id=\"p1\">[</bpt>Differences Between C++ Templates and C# Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/differences-between-cpp-templates-and-csharp-generics.md)</ept>","source":"[Differences Between C++ Templates and C# Generics](../../../csharp/programming-guide/generics/differences-between-cpp-templates-and-csharp-generics.md)"}]}