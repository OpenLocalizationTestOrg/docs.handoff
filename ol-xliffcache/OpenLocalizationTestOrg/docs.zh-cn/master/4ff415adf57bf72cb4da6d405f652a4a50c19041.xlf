<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="system-transactions-integration-with-sql-server.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ff415adf57bf72cb4da6d405f652a4a50c19041</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\system-transactions-integration-with-sql-server.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b1c4495a7e039102d4add0adf37df5ce94a9a52</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">604d7a155b5ee4d82e0f5764558d0c255e4034a0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>System.Transactions Integration with SQL Server</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>System.Transactions Integration with SQL Server</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> version 2.0 introduced a transaction framework that can be accessed through the <ph id="ph2">&lt;xref:System.Transactions&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This framework exposes transactions in a way that is fully integrated in the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph>, including <ph id="ph2">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition to the programmability enhancements, <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> and <ph id="ph2">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph> can work together to coordinate optimizations when you work with transactions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A promotable transaction is a lightweight (local) transaction that can be automatically promoted to a fully distributed transaction on an as-needed basis.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph> 2.0, <ph id="ph2">&lt;xref:System.Data.SqlClient&gt;</ph> supports promotable transactions when you work with SQL Server.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A promotable transaction does not invoke the added overhead of a distributed transaction unless the added overhead is required.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Promotable transactions are automatic and require no intervention from the developer.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Promotable transactions are only available when you use the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> Data Provider for SQL Server (<ph id="ph2">`SqlClient`</ph>) with SQL Server.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creating Promotable Transactions</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> Provider for SQL Server provides support for promotable transactions, which are handled through the classes in the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> <ph id="ph3">&lt;xref:System.Transactions&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Promotable transactions optimize distributed transactions by deferring creating a distributed transaction until it is needed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If only one resource manager is required, no distributed transaction occurs.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In a partially trusted scenario, the <ph id="ph1">&lt;xref:System.Transactions.DistributedTransactionPermission&gt;</ph> is required when a transaction is promoted to a distributed transaction.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Promotable Transaction Scenarios</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Distributed transactions typically consume significant system resources, being managed by Microsoft Distributed Transaction Coordinator (MS DTC), which integrates all the resource managers accessed in the transaction.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A promotable transaction is a special form of a <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> transaction that effectively delegates the work to a simple SQL Server transaction.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Transactions&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.SqlClient&gt;</ph>, and SQL Server coordinate the work involved in handling the transaction, promoting it to a full distributed transaction as needed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The benefit of using promotable transactions is that when a connection is opened by using an active <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> transaction, and no other connections are opened, the transaction commits as a lightweight transaction, instead of incurring the additional overhead of a full distributed transaction.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Connection String Keywords</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A&gt;</ph> property supports a keyword, <ph id="ph2">`Enlist`</ph>, which indicates whether <ph id="ph3">&lt;xref:System.Data.SqlClient&gt;</ph> will detect transactional contexts and automatically enlist the connection in a distributed transaction.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Enlist=true`</ph>, the connection is automatically enlisted in the opening thread's current transaction context.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Enlist=false`</ph>, the <ph id="ph2">`SqlClient`</ph> connection does not interact with a distributed transaction.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The default value for <ph id="ph1">`Enlist`</ph> is true.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Enlist`</ph> is not specified in the connection string, the connection is automatically enlisted in a distributed transaction if one is detected when the connection is opened.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Transaction Binding`</ph> keywords in a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> connection string control the connection's association with an enlisted <ph id="ph3">`System.Transactions`</ph> transaction.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is also available through the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following table describes the possible values.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Keyword</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Implicit Unbind</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The default.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The connection detaches from the transaction when it ends, switching back to autocommit mode.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Explicit Unbind</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The connection remains attached to the transaction until the transaction is closed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The connection will fail if the associated transaction is not active or does not match <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Using TransactionScope</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class makes a code block transactional by implicitly enlisting connections in a distributed transaction.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You must call the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> method at the end of the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> block before leaving it.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Leaving the block invokes the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If an exception has been thrown that causes the code to leave scope, the transaction is considered aborted.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We recommend that you use a <ph id="ph1">`using`</ph> block to make sure that <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> is called on the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object when the using block is exited.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Failure to commit or roll back pending transactions can significantly damage performance because the default time-out for the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> is one minute.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you do not use a <ph id="ph1">`using`</ph> statement, you must perform all work in a <ph id="ph2">`Try`</ph> block and explicitly call the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> method in the <ph id="ph4">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If an exception occurs in the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>, the transaction is marked as inconsistent and is abandoned.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It will be rolled back when the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> is disposed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If no exception occurs, participating transactions commit.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TransactionScope`</ph> class creates a transaction with a <ph id="ph2">&lt;xref:System.Transactions.Transaction.IsolationLevel%2A&gt;</ph> of <ph id="ph3">`Serializable`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Depending on your application, you might want to consider lowering the isolation level to avoid high contention in your application.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>We recommend that you perform only updates, inserts, and deletes within distributed transactions because they consume significant database resources.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Select statements may lock database resources unnecessarily, and in some scenarios, you may have to use transactions for selects.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Any non-database work should be done outside the scope of the transaction, unless it involves other transacted resource managers.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Although an exception in the scope of the transaction prevents the transaction from committing, the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class has no provision for rolling back any changes your code has made outside the scope of the transaction itself.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you have to take some action when the transaction is rolled back, you must write your own implementation of the <ph id="ph1">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> interface and explicitly enlist in the transaction.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Working with <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> requires that you have a reference to System.Transactions.dll.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following function demonstrates how to create a promotable transaction against two different SQL Server instances, represented by two different <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> objects, which are wrapped in a <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> block.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The code creates the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> block with a <ph id="ph2">`using`</ph> statement and opens the first connection, which automatically enlists it in the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The transaction is initially enlisted as a lightweight transaction, not a full distributed transaction.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second connection is enlisted in the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> only if the command in the first connection does not throw an exception.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When the second connection is opened, the transaction is automatically promoted to a full distributed transaction.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> method is invoked, which commits the transaction only if no exceptions have been thrown.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If an exception has been thrown at any point in the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> block, <ph id="ph2">`Complete`</ph> will not be called, and the distributed transaction will roll back when the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> is disposed at the end of its <ph id="ph4">`using`</ph> block.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Transactions and Concurrency<ept id="p1">](../../../../docs/framework/data/adonet/transactions-and-concurrency.md)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>