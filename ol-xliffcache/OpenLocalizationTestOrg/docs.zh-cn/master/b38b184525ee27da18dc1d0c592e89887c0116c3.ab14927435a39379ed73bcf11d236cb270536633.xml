{"content":"---\ntitle: \"Object Variable Declaration (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"early binding\"\n  - \"declarations, class\"\n  - \"classes [Visual Basic], declaring\"\n  - \"binding, late and early\"\n  - \"object variables, declaring\"\n  - \"variables [Visual Basic], object\"\n  - \"declaring variables, object variables\"\n  - \"declaring classes\"\n  - \"late binding\"\nms.assetid: 2a5a41a3-1aa8-4236-b1f0-2382af7bf715\ncaps.latest.revision: 33\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Object Variable Declaration (Visual Basic)\nYou use a normal declaration statement to declare an object variable. For the data type, you specify either `Object` (that is, the [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)) or a more specific class from which the object is to be created.  \n  \n Declaring a variable as `Object` is the same as declaring it as <xref:System.Object?displayProperty=fullName>.  \n  \n When you declare a variable with a specific object class, it can access all the methods and properties exposed by that class and the classes from which it inherits. If you declare the variable with <xref:System.Object>, it can access only the members of the <xref:System.Object> class, unless you turn `Option Strict Off` to allow late binding.  \n  \n## Declaration Syntax  \n Use the following syntax to declare an object variable:  \n  \n```vb  \nDim variablename As [New] { objectclass | Object }  \n```  \n  \n You can also specify [Public](../../../../visual-basic/language-reference/modifiers/public.md), [Protected](../../../../visual-basic/language-reference/modifiers/protected.md), [Friend](../../../../visual-basic/language-reference/modifiers/friend.md), `Protected Friend`, [Private](../../../../visual-basic/language-reference/modifiers/private.md), [Shared](../../../../visual-basic/language-reference/modifiers/shared.md), or [Static](../../../../visual-basic/language-reference/modifiers/static.md) in the declaration. The following example declarations are valid:  \n  \n```vb  \nPrivate objA As Object  \nStatic objB As System.Windows.Forms.Label  \nDim objC As System.OperatingSystem  \n```  \n  \n## Late Binding and Early Binding  \n Sometimes the specific class is unknown until your code runs. In this case, you must declare the object variable with the `Object` data type. This creates a general reference to any type of object, and the specific class is assigned at run time. This is called *late binding*. Late binding requires additional execution time. It also limits your code to the methods and properties of the class you have most recently assigned to it. This can cause run-time errors if your code attempts to access members of a different class.  \n  \n When you know the specific class at compile time, you should declare the object variable to be of that class. This is called *early binding*. Early binding improves performance and guarantees your code access to all the methods and properties of the specific class. In the preceding example declarations, if variable `objA` uses only objects of class <xref:System.Windows.Forms.Label?displayProperty=fullName>, you should specify `As System.Windows.Forms.Label` in its declaration.  \n  \n### Advantages of Early Binding  \n Declaring an object variable as a specific class gives you several advantages:  \n  \n-   Automatic type checking  \n  \n-   Guaranteed access to all members of the specific class  \n  \n-   Microsoft IntelliSense support in the Code Editor  \n  \n-   Improved readability of your code  \n  \n-   Fewer errors in your code  \n  \n-   Errors caught at compile time rather than run time  \n  \n-   Faster code execution  \n  \n## Access to Object Variable Members  \n When `Option Strict` is turned `On`, an object variable can access only the methods and properties of the class with which you declare it. The following example illustrates this.  \n  \n```vb  \n' Option statements must precede all other source file lines.  \nOption Strict On  \n' Imports statement must precede all declarations in the source file.  \nImports System.Windows.Forms  \nPublic Sub accessMembers()  \n    Dim p As Object  \n    Dim q As System.Windows.Forms.Label  \n    p = New System.Windows.Forms.Label  \n    q = New System.Windows.Forms.Label  \n    Dim j, k As Integer  \n    ' The following statement generates a compiler ERROR.  \n    j = p.Left  \n    ' The following statement retrieves the left edge of the label in pixels.  \n    k = q.Left  \nEnd Sub  \n```  \n  \n In this example, `p` can use only the members of the <xref:System.Object> class itself, which do not include the `Left` property. On the other hand, `q` was declared to be of type <xref:System.Windows.Forms.Label>, so it can use all the methods and properties of the <xref:System.Windows.Forms.Label> class in the <xref:System.Windows.Forms> namespace.  \n  \n## Flexibility of Object Variables  \n When working with objects in an inheritance hierarchy, you have a choice of which class to use for declaring your object variables. In making this choice, you must balance flexibility of object assignment against access to members of a class. For example, consider the inheritance hierarchy that leads to the <xref:System.Windows.Forms.Form?displayProperty=fullName> class:  \n  \n <xref:System.Object>  \n  \n &nbsp;&nbsp;<xref:System.MarshalByRefObject>  \n  \n &nbsp;&nbsp;&nbsp;&nbsp;<xref:System.ComponentModel.Component>  \n  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xref:System.Windows.Forms.Control>  \n  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xref:System.Windows.Forms.ScrollableControl>  \n  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xref:System.Windows.Forms.ContainerControl>  \n  \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xref:System.Windows.Forms.Form>  \n  \n Suppose your application defines a form class called `specialForm`, which inherits from class <xref:System.Windows.Forms.Form>. You can declare an object variable that refers specifically to `specialForm`, as the following example shows.  \n  \n```vb  \nPublic Class specialForm  \n    Inherits System.Windows.Forms.Form  \n    ' Insert code defining methods and properties of specialForm.  \nEnd Class  \nDim nextForm As New specialForm  \n```  \n  \n The declaration in the preceding example limits the variable `nextForm` to objects of class `specialForm`, but it also makes all the methods and properties of `specialForm` available to `nextForm`, as well as all the members of all the classes from which `specialForm` inherits.  \n  \n You can make an object variable more general by declaring it to be of type <xref:System.Windows.Forms.Form>, as the following example shows.  \n  \n```vb  \nDim anyForm As System.Windows.Forms.Form  \n```  \n  \n The declaration in the preceding example lets you assign any form in your application to `anyForm`. However, although `anyForm` can access all the members of class <xref:System.Windows.Forms.Form>, it cannot use any of the additional methods or properties defined for specific forms such as `specialForm`.  \n  \n All the members of a base class are available to derived classes, but the additional members of a derived class are unavailable to the base class.  \n  \n## See Also  \n [Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)   \n [Object Variable Assignment](../../../../visual-basic/programming-guide/language-features/variables/object-variable-assignment.md)   \n [Object Variable Values](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md)   \n [How to: Declare an Object Variable and Assign an Object to It in Visual Basic](../../../../visual-basic/programming-guide/language-features/variables/how-to-declare-an-object-variable-and-assign-an-object-to-it.md)   \n [How to: Access Members of an Object](../../../../visual-basic/programming-guide/language-features/variables/how-to-access-members-of-an-object.md)   \n [New Operator](../../../../visual-basic/language-reference/operators/new-operator.md)   \n [Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md)   \n [Local Type Inference](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)","nodes":[{"pos":[12,71],"content":"Object Variable Declaration (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Object Variable Declaration (Visual Basic) | Microsoft Docs","pos":[0,59]}]},{"pos":[859,901],"content":"Object Variable Declaration (Visual Basic)","linkify":"Object Variable Declaration (Visual Basic)","nodes":[{"content":"Object Variable Declaration (Visual Basic)","pos":[0,42]}]},{"content":"You use a normal declaration statement to declare an object variable.","pos":[902,971]},{"content":"For the data type, you specify either <ph id=\"ph1\">`Object`</ph> (that is, the <bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>) or a more specific class from which the object is to be created.","pos":[972,1193],"source":" For the data type, you specify either `Object` (that is, the [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)) or a more specific class from which the object is to be created."},{"pos":[1200,1310],"content":"Declaring a variable as <ph id=\"ph1\">`Object`</ph> is the same as declaring it as <ph id=\"ph2\">&lt;xref:System.Object?displayProperty=fullName&gt;</ph>.","source":"Declaring a variable as `Object` is the same as declaring it as <xref:System.Object?displayProperty=fullName>."},{"content":"When you declare a variable with a specific object class, it can access all the methods and properties exposed by that class and the classes from which it inherits.","pos":[1317,1481]},{"content":"If you declare the variable with <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph>, it can access only the members of the <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph> class, unless you turn <ph id=\"ph3\">`Option Strict Off`</ph> to allow late binding.","pos":[1482,1661],"source":" If you declare the variable with <xref:System.Object>, it can access only the members of the <xref:System.Object> class, unless you turn `Option Strict Off` to allow late binding."},{"pos":[1670,1688],"content":"Declaration Syntax","linkify":"Declaration Syntax","nodes":[{"content":"Declaration Syntax","pos":[0,18]}]},{"content":"Use the following syntax to declare an object variable:","pos":[1692,1747]},{"content":"You can also specify <bpt id=\"p1\">[</bpt>Public<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/public.md)</ept>, <bpt id=\"p2\">[</bpt>Protected<ept id=\"p2\">](../../../../visual-basic/language-reference/modifiers/protected.md)</ept>, <bpt id=\"p3\">[</bpt>Friend<ept id=\"p3\">](../../../../visual-basic/language-reference/modifiers/friend.md)</ept>, <ph id=\"ph1\">`Protected Friend`</ph>, <bpt id=\"p4\">[</bpt>Private<ept id=\"p4\">](../../../../visual-basic/language-reference/modifiers/private.md)</ept>, <bpt id=\"p5\">[</bpt>Shared<ept id=\"p5\">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept>, or <bpt id=\"p6\">[</bpt>Static<ept id=\"p6\">](../../../../visual-basic/language-reference/modifiers/static.md)</ept> in the declaration.","pos":[1824,2344],"source":"You can also specify [Public](../../../../visual-basic/language-reference/modifiers/public.md), [Protected](../../../../visual-basic/language-reference/modifiers/protected.md), [Friend](../../../../visual-basic/language-reference/modifiers/friend.md), `Protected Friend`, [Private](../../../../visual-basic/language-reference/modifiers/private.md), [Shared](../../../../visual-basic/language-reference/modifiers/shared.md), or [Static](../../../../visual-basic/language-reference/modifiers/static.md) in the declaration."},{"content":"The following example declarations are valid:","pos":[2345,2390]},{"pos":[2522,2552],"content":"Late Binding and Early Binding","linkify":"Late Binding and Early Binding","nodes":[{"content":"Late Binding and Early Binding","pos":[0,30]}]},{"content":"Sometimes the specific class is unknown until your code runs.","pos":[2556,2617]},{"content":"In this case, you must declare the object variable with the <ph id=\"ph1\">`Object`</ph> data type.","pos":[2618,2697],"source":" In this case, you must declare the object variable with the `Object` data type."},{"content":"This creates a general reference to any type of object, and the specific class is assigned at run time.","pos":[2698,2801]},{"content":"This is called <bpt id=\"p1\">*</bpt>late binding<ept id=\"p1\">*</ept>.","pos":[2802,2832],"source":" This is called *late binding*."},{"content":"Late binding requires additional execution time.","pos":[2833,2881]},{"content":"It also limits your code to the methods and properties of the class you have most recently assigned to it.","pos":[2882,2988]},{"content":"This can cause run-time errors if your code attempts to access members of a different class.","pos":[2989,3081]},{"content":"When you know the specific class at compile time, you should declare the object variable to be of that class.","pos":[3088,3197]},{"content":"This is called <bpt id=\"p1\">*</bpt>early binding<ept id=\"p1\">*</ept>.","pos":[3198,3229],"source":" This is called *early binding*."},{"content":"Early binding improves performance and guarantees your code access to all the methods and properties of the specific class.","pos":[3230,3353]},{"content":"In the preceding example declarations, if variable <ph id=\"ph1\">`objA`</ph> uses only objects of class <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Label?displayProperty=fullName&gt;</ph>, you should specify <ph id=\"ph3\">`As System.Windows.Forms.Label`</ph> in its declaration.","pos":[3354,3569],"source":" In the preceding example declarations, if variable `objA` uses only objects of class <xref:System.Windows.Forms.Label?displayProperty=fullName>, you should specify `As System.Windows.Forms.Label` in its declaration."},{"pos":[3579,3606],"content":"Advantages of Early Binding","linkify":"Advantages of Early Binding","nodes":[{"content":"Advantages of Early Binding","pos":[0,27]}]},{"content":"Declaring an object variable as a specific class gives you several advantages:","pos":[3610,3688]},{"content":"Automatic type checking","pos":[3698,3721]},{"content":"Guaranteed access to all members of the specific class","pos":[3731,3785]},{"content":"Microsoft IntelliSense support in the Code Editor","pos":[3795,3844]},{"content":"Improved readability of your code","pos":[3854,3887]},{"content":"Fewer errors in your code","pos":[3897,3922]},{"content":"Errors caught at compile time rather than run time","pos":[3932,3982]},{"content":"Faster code execution","pos":[3992,4013]},{"pos":[4022,4055],"content":"Access to Object Variable Members","linkify":"Access to Object Variable Members","nodes":[{"content":"Access to Object Variable Members","pos":[0,33]}]},{"content":"When <ph id=\"ph1\">`Option Strict`</ph> is turned <ph id=\"ph2\">`On`</ph>, an object variable can access only the methods and properties of the class with which you declare it.","pos":[4059,4197],"source":"When `Option Strict` is turned `On`, an object variable can access only the methods and properties of the class with which you declare it."},{"content":"The following example illustrates this.","pos":[4198,4237]},{"content":"In this example, <ph id=\"ph1\">`p`</ph> can use only the members of the <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph> class itself, which do not include the <ph id=\"ph3\">`Left`</ph> property.","pos":[4832,4961],"source":"In this example, `p` can use only the members of the <xref:System.Object> class itself, which do not include the `Left` property."},{"content":"On the other hand, <ph id=\"ph1\">`q`</ph> was declared to be of type <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Label&gt;</ph>, so it can use all the methods and properties of the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Label&gt;</ph> class in the <ph id=\"ph4\">&lt;xref:System.Windows.Forms&gt;</ph> namespace.","pos":[4962,5184],"source":" On the other hand, `q` was declared to be of type <xref:System.Windows.Forms.Label>, so it can use all the methods and properties of the <xref:System.Windows.Forms.Label> class in the <xref:System.Windows.Forms> namespace."},{"pos":[5193,5224],"content":"Flexibility of Object Variables","linkify":"Flexibility of Object Variables","nodes":[{"content":"Flexibility of Object Variables","pos":[0,31]}]},{"content":"When working with objects in an inheritance hierarchy, you have a choice of which class to use for declaring your object variables.","pos":[5228,5359]},{"content":"In making this choice, you must balance flexibility of object assignment against access to members of a class.","pos":[5360,5470]},{"content":"For example, consider the inheritance hierarchy that leads to the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form?displayProperty=fullName&gt;</ph> class:","pos":[5471,5601],"source":" For example, consider the inheritance hierarchy that leads to the <xref:System.Windows.Forms.Form?displayProperty=fullName> class:"},{"content":"Suppose your application defines a form class called <ph id=\"ph1\">`specialForm`</ph>, which inherits from class <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form&gt;</ph>.","pos":[6155,6282],"source":"Suppose your application defines a form class called `specialForm`, which inherits from class <xref:System.Windows.Forms.Form>."},{"content":"You can declare an object variable that refers specifically to <ph id=\"ph1\">`specialForm`</ph>, as the following example shows.","pos":[6283,6392],"source":" You can declare an object variable that refers specifically to `specialForm`, as the following example shows."},{"pos":[6598,6876],"content":"The declaration in the preceding example limits the variable <ph id=\"ph1\">`nextForm`</ph> to objects of class <ph id=\"ph2\">`specialForm`</ph>, but it also makes all the methods and properties of <ph id=\"ph3\">`specialForm`</ph> available to <ph id=\"ph4\">`nextForm`</ph>, as well as all the members of all the classes from which <ph id=\"ph5\">`specialForm`</ph> inherits.","source":"The declaration in the preceding example limits the variable `nextForm` to objects of class `specialForm`, but it also makes all the methods and properties of `specialForm` available to `nextForm`, as well as all the members of all the classes from which `specialForm` inherits."},{"content":"You can make an object variable more general by declaring it to be of type <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form&gt;</ph>, as the following example shows.","pos":[6883,7023],"source":"You can make an object variable more general by declaring it to be of type <xref:System.Windows.Forms.Form>, as the following example shows."},{"content":"The declaration in the preceding example lets you assign any form in your application to <ph id=\"ph1\">`anyForm`</ph>.","pos":[7090,7189],"source":"The declaration in the preceding example lets you assign any form in your application to `anyForm`."},{"content":"However, although <ph id=\"ph1\">`anyForm`</ph> can access all the members of class <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form&gt;</ph>, it cannot use any of the additional methods or properties defined for specific forms such as <ph id=\"ph3\">`specialForm`</ph>.","pos":[7190,7395],"source":" However, although `anyForm` can access all the members of class <xref:System.Windows.Forms.Form>, it cannot use any of the additional methods or properties defined for specific forms such as `specialForm`."},{"content":"All the members of a base class are available to derived classes, but the additional members of a derived class are unavailable to the base class.","pos":[7402,7548]},{"pos":[7557,7565],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Object Variables<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)</ept><ph id=\"ph1\"> </ph>","pos":[7569,7680],"source":"[Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Object Variable Assignment<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-assignment.md)</ept><ph id=\"ph1\"> </ph>","pos":[7683,7815],"source":" [Object Variable Assignment](../../../../visual-basic/programming-guide/language-features/variables/object-variable-assignment.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Object Variable Values<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md)</ept><ph id=\"ph1\"> </ph>","pos":[7818,7942],"source":" [Object Variable Values](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Declare an Object Variable and Assign an Object to It in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/how-to-declare-an-object-variable-and-assign-an-object-to-it.md)</ept><ph id=\"ph1\"> </ph>","pos":[7945,8162],"source":" [How to: Declare an Object Variable and Assign an Object to It in Visual Basic](../../../../visual-basic/programming-guide/language-features/variables/how-to-declare-an-object-variable-and-assign-an-object-to-it.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Access Members of an Object<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/how-to-access-members-of-an-object.md)</ept><ph id=\"ph1\"> </ph>","pos":[8165,8314],"source":" [How to: Access Members of an Object](../../../../visual-basic/programming-guide/language-features/variables/how-to-access-members-of-an-object.md) "},{"content":"<bpt id=\"p1\"> [</bpt>New Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[8317,8404],"source":" [New Operator](../../../../visual-basic/language-reference/operators/new-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Option Strict Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[8407,8517],"source":" [Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Local Type Inference<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>","pos":[8520,8639],"source":" [Local Type Inference](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)"}]}