{"content":"---\ntitle: \"GoTo Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.GoTo\"\nhelpviewer_keywords: \n  - \"GoTo statement [Visual Basic]\"\n  - \"control flow [Visual Basic], branching\"\n  - \"unconditional branching [Visual Basic]\"\n  - \"branching [Visual Basic]\"\n  - \"branching [Visual Basic], unconditional\"\n  - \"branching [Visual Basic], conditional\"\n  - \"conditional statements [Visual Basic], GoTo statement\"\n  - \"GoTo statement [Visual Basic], syntax\"\nms.assetid: 313274c2-8ab3-4b9c-9ba3-0fd6798e4f6d\n---\n# GoTo Statement\nBranches unconditionally to a specified line in a procedure.  \n  \n## Syntax  \n  \n```  \nGoTo line  \n```  \n  \n## Part  \n `line`  \n Required. Any line label.  \n  \n## Remarks  \n The `GoTo` statement can branch only to lines in the procedure in which it appears. The line must have a line label that `GoTo` can refer to. For more information, see [How to: Label Statements](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md).  \n  \n> [!NOTE]\n>  `GoTo` statements can make code difficult to read and maintain. Whenever possible, use a control structure instead. For more information, see [Control Flow](../../../visual-basic/programming-guide/language-features/control-flow/index.md).  \n  \n You cannot use a `GoTo` statement to branch from outside a `For`...`Next`, `For Each`...`Next`, `SyncLock`...`End SyncLock`, `Try`...`Catch`...`Finally`, `With`...`End With`, or `Using`...`End Using` construction to a label inside.  \n  \n## Branching and Try Constructions  \n Within a `Try`...`Catch`...`Finally` construction, the following rules apply to branching with the `GoTo` statement.  \n  \n|Block or region|Branching in from outside|Branching out from inside|  \n|---------------------|-------------------------------|-------------------------------|  \n|`Try` block|Only from a `Catch` block of the same construction <sup>1</sup>|Only to outside the whole construction|  \n|`Catch` block|Never allowed|Only to outside the whole construction, or to the `Try` block of the same construction <sup>1</sup>|  \n|`Finally` block|Never allowed|Never allowed|  \n  \n <sup>1</sup> If one `Try`...`Catch`...`Finally` construction is nested within another, a `Catch` block can branch into the `Try` block at its own nesting level, but not into any other `Try` block. A nested `Try`...`Catch`...`Finally` construction must be contained completely in a `Try` or `Catch` block of the construction within which it is nested.  \n  \n The following illustration shows one `Try` construction nested within another. Various branches among the blocks of the two constructions are indicated as valid or invalid.  \n  \n ![Graphic diagram of branching in Try constructions](./media/goto-statement/try-construction-branching.gif)  \n  \n## Example  \n The following example uses the `GoTo` statement to branch to line labels in a procedure.  \n  \n [!code-vb[VbVbalrStatements#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStatements/VB/Class1.vb#31)]  \n  \n## See also\n\n- [Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)\n- [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)\n- [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md)\n- [If...Then...Else Statement](../../../visual-basic/language-reference/statements/if-then-else-statement.md)\n- [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md)\n- [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)\n- [While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md)\n- [With...End With Statement](../../../visual-basic/language-reference/statements/with-end-with-statement.md)\n","nodes":[{"pos":[4,512],"embed":true,"restype":"x-metadata","content":"title: \"GoTo Statement (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.GoTo\"\nhelpviewer_keywords: \n  - \"GoTo statement [Visual Basic]\"\n  - \"control flow [Visual Basic], branching\"\n  - \"unconditional branching [Visual Basic]\"\n  - \"branching [Visual Basic]\"\n  - \"branching [Visual Basic], unconditional\"\n  - \"branching [Visual Basic], conditional\"\n  - \"conditional statements [Visual Basic], GoTo statement\"\n  - \"GoTo statement [Visual Basic], syntax\"\nms.assetid: 313274c2-8ab3-4b9c-9ba3-0fd6798e4f6d","nodes":[{"content":"GoTo Statement (Visual Basic)","nodes":[{"pos":[0,29],"content":"GoTo Statement (Visual Basic)","nodes":[{"content":"GoTo Statement (Visual Basic)","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[519,533],"content":"GoTo Statement","linkify":"GoTo Statement","nodes":[{"content":"GoTo Statement","pos":[0,14]}]},{"content":"Branches unconditionally to a specified line in a procedure.","pos":[534,594]},{"pos":[603,609],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[645,649],"content":"Part","linkify":"Part","nodes":[{"content":"Part","pos":[0,4]}]},{"content":"Required.","pos":[663,672]},{"content":"Any line label.","pos":[673,688]},{"pos":[697,704],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`GoTo`</ph> statement can branch only to lines in the procedure in which it appears.","pos":[708,791],"source":"The `GoTo` statement can branch only to lines in the procedure in which it appears."},{"content":"The line must have a line label that <ph id=\"ph1\">`GoTo`</ph> can refer to.","pos":[792,849],"source":" The line must have a line label that `GoTo` can refer to."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Label Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)</ept>.","pos":[850,989],"source":" For more information, see [How to: Label Statements](../../../visual-basic/programming-guide/program-structure/how-to-label-statements.md)."},{"pos":[997,1246],"content":"[!NOTE]\n `GoTo` statements can make code difficult to read and maintain. Whenever possible, use a control structure instead. For more information, see [Control Flow](../../../visual-basic/programming-guide/language-features/control-flow/index.md).","leadings":["","> "],"nodes":[{"content":"`GoTo` statements can make code difficult to read and maintain. Whenever possible, use a control structure instead. For more information, see [Control Flow](../../../visual-basic/programming-guide/language-features/control-flow/index.md).","pos":[9,247],"nodes":[{"content":"<ph id=\"ph1\">`GoTo`</ph> statements can make code difficult to read and maintain.","pos":[0,63],"source":"`GoTo` statements can make code difficult to read and maintain."},{"content":"Whenever possible, use a control structure instead.","pos":[64,115]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Control Flow<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/index.md)</ept>.","pos":[116,238],"source":" For more information, see [Control Flow](../../../visual-basic/programming-guide/language-features/control-flow/index.md)."}]}]},{"pos":[1253,1484],"content":"You cannot use a <ph id=\"ph1\">`GoTo`</ph> statement to branch from outside a <ph id=\"ph2\">`For`</ph>...<ph id=\"ph3\">`Next`</ph>, <ph id=\"ph4\">`For Each`</ph>...<ph id=\"ph5\">`Next`</ph>, <ph id=\"ph6\">`SyncLock`</ph>...<ph id=\"ph7\">`End SyncLock`</ph>, <ph id=\"ph8\">`Try`</ph>...<ph id=\"ph9\">`Catch`</ph>...<ph id=\"ph10\">`Finally`</ph>, <ph id=\"ph11\">`With`</ph>...<ph id=\"ph12\">`End With`</ph>, or <ph id=\"ph13\">`Using`</ph>...<ph id=\"ph14\">`End Using`</ph> construction to a label inside.","source":"You cannot use a `GoTo` statement to branch from outside a `For`...`Next`, `For Each`...`Next`, `SyncLock`...`End SyncLock`, `Try`...`Catch`...`Finally`, `With`...`End With`, or `Using`...`End Using` construction to a label inside."},{"pos":[1493,1524],"content":"Branching and Try Constructions","linkify":"Branching and Try Constructions","nodes":[{"content":"Branching and Try Constructions","pos":[0,31]}]},{"pos":[1528,1644],"content":"Within a <ph id=\"ph1\">`Try`</ph>...<ph id=\"ph2\">`Catch`</ph>...<ph id=\"ph3\">`Finally`</ph> construction, the following rules apply to branching with the <ph id=\"ph4\">`GoTo`</ph> statement.","source":"Within a `Try`...`Catch`...`Finally` construction, the following rules apply to branching with the `GoTo` statement."},{"content":"Block or region","pos":[1651,1666]},{"content":"Branching in from outside","pos":[1667,1692]},{"content":"Branching out from inside","pos":[1693,1718]},{"pos":[1813,1824],"content":"<ph id=\"ph1\">`Try`</ph> block","source":"`Try` block"},{"pos":[1825,1888],"content":"Only from a <ph id=\"ph1\">`Catch`</ph> block of the same construction <bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept>","source":"Only from a `Catch` block of the same construction <sup>1</sup>"},{"content":"Only to outside the whole construction","pos":[1889,1927]},{"pos":[1932,1945],"content":"<ph id=\"ph1\">`Catch`</ph> block","source":"`Catch` block"},{"content":"Never allowed","pos":[1946,1959]},{"pos":[1960,2059],"content":"Only to outside the whole construction, or to the <ph id=\"ph1\">`Try`</ph> block of the same construction <bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept>","source":"Only to outside the whole construction, or to the `Try` block of the same construction <sup>1</sup>"},{"pos":[2064,2079],"content":"<ph id=\"ph1\">`Finally`</ph> block","source":"`Finally` block"},{"content":"Never allowed","pos":[2080,2093]},{"content":"Never allowed","pos":[2094,2107]},{"content":"<bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept> If one <ph id=\"ph1\">`Try`</ph>...<ph id=\"ph2\">`Catch`</ph>...<ph id=\"ph3\">`Finally`</ph> construction is nested within another, a <ph id=\"ph4\">`Catch`</ph> block can branch into the <ph id=\"ph5\">`Try`</ph> block at its own nesting level, but not into any other <ph id=\"ph6\">`Try`</ph> block.","pos":[2115,2311],"source":"<sup>1</sup> If one `Try`...`Catch`...`Finally` construction is nested within another, a `Catch` block can branch into the `Try` block at its own nesting level, but not into any other `Try` block."},{"content":"A nested <ph id=\"ph1\">`Try`</ph>...<ph id=\"ph2\">`Catch`</ph>...<ph id=\"ph3\">`Finally`</ph> construction must be contained completely in a <ph id=\"ph4\">`Try`</ph> or <ph id=\"ph5\">`Catch`</ph> block of the construction within which it is nested.","pos":[2312,2465],"source":" A nested `Try`...`Catch`...`Finally` construction must be contained completely in a `Try` or `Catch` block of the construction within which it is nested."},{"content":"The following illustration shows one <ph id=\"ph1\">`Try`</ph> construction nested within another.","pos":[2472,2550],"source":"The following illustration shows one `Try` construction nested within another."},{"content":"Various branches among the blocks of the two constructions are indicated as valid or invalid.","pos":[2551,2644]},{"content":"Graphic diagram of branching in Try constructions","pos":[2653,2702]},{"pos":[2767,2774],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2778,2866],"content":"The following example uses the <ph id=\"ph1\">`GoTo`</ph> statement to branch to line labels in a procedure.","source":"The following example uses the `GoTo` statement to branch to line labels in a procedure."},{"pos":[3001,3009],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3013,3108],"content":"<bpt id=\"p1\">[</bpt>Do...Loop Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>","source":"[Do...Loop Statement](../../../visual-basic/language-reference/statements/do-loop-statement.md)"},{"pos":[3111,3208],"content":"<bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept>","source":"[For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)"},{"pos":[3211,3318],"content":"<bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>","source":"[For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md)"},{"pos":[3321,3428],"content":"<bpt id=\"p1\">[</bpt>If...Then...Else Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/if-then-else-statement.md)</ept>","source":"[If...Then...Else Statement](../../../visual-basic/language-reference/statements/if-then-else-statement.md)"},{"pos":[3431,3534],"content":"<bpt id=\"p1\">[</bpt>Select...Case Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/select-case-statement.md)</ept>","source":"[Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md)"},{"pos":[3537,3654],"content":"<bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>","source":"[Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)"},{"pos":[3657,3768],"content":"<bpt id=\"p1\">[</bpt>While...End While Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept>","source":"[While...End While Statement](../../../visual-basic/language-reference/statements/while-end-while-statement.md)"},{"pos":[3771,3878],"content":"<bpt id=\"p1\">[</bpt>With...End With Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/with-end-with-statement.md)</ept>","source":"[With...End With Statement](../../../visual-basic/language-reference/statements/with-end-with-statement.md)"}]}