{"content":"---\ntitle: \"How to: Use the Try-Catch Block to Catch Exceptions\"\nms.date: \"02/06/2019\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"exceptions, try/catch blocks\"\n  - \"try blocks\"\n  - \"try/catch blocks\"\n  - \"catch blocks\"\nms.assetid: a3ce6dfd-1f64-471b-8ad8-8cfaf406275d\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# How to use the try/catch block to catch exceptions\n\nPlace any code statements that might raise or throw an exception in a `try` block, and place statements used to handle the exception or exceptions in one or more `catch` blocks below the `try` block. Each `catch` block includes the exception type and can contain additional statements needed to handle that exception type.\n\nIn the following example, a <xref:System.IO.StreamReader> opens a file called *data.txt* and retrieves a line from the file. Since the code might throw any of three exceptions, it's placed in a `try` block. Three `catch` blocks catch the exceptions and handle them by displaying the results to the console.\n\n[!code-csharp[CatchException#3](~/samples/snippets/csharp/VS_Snippets_CLR/CatchException/CS/catchexception2.cs#3)]\n[!code-vb[CatchException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CatchException/VB/catchexception2.vb#3)]  \n\nThe Common Language Runtime (CLR) catches exceptions not handled by `catch` blocks. If an exception is caught by the CLR, one of the following results may occur depending on your CLR configuration:\n\n- A **Debug** dialog box appears.\n- The program stops execution and a dialog box with exception information appears.\n- An error prints out to the [standard error output stream](xref:System.Console.Error).\n\n> [!NOTE]\n> Most code can throw an exception, and some exceptions, like <xref:System.OutOfMemoryException>, can be thrown by the CLR itself at any time. While applications aren't required to deal with these exceptions, be aware of the possibility when writing libraries to be used by others. For suggestions on when to set code in a `try` block, see [Best Practices for Exceptions](best-practices-for-exceptions.md).\n\n## See also\n\n[Exceptions](index.md)  \n[Handling I/O errors in .NET](../io/handling-io-errors.md)\n","nodes":[{"pos":[4,353],"embed":true,"restype":"x-metadata","content":"title: \"How to: Use the Try-Catch Block to Catch Exceptions\"\nms.date: \"02/06/2019\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"exceptions, try/catch blocks\"\n  - \"try blocks\"\n  - \"try/catch blocks\"\n  - \"catch blocks\"\nms.assetid: a3ce6dfd-1f64-471b-8ad8-8cfaf406275d\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"How to: Use the Try-Catch Block to Catch Exceptions","nodes":[{"pos":[0,51],"content":"How to: Use the Try-Catch Block to Catch Exceptions","nodes":[{"content":"How to: Use the Try-Catch Block to Catch Exceptions","pos":[0,51]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[360,410],"content":"How to use the try/catch block to catch exceptions","linkify":"How to use the try/catch block to catch exceptions","nodes":[{"content":"How to use the try/catch block to catch exceptions","pos":[0,50]}]},{"content":"Place any code statements that might raise or throw an exception in a <ph id=\"ph1\">`try`</ph> block, and place statements used to handle the exception or exceptions in one or more <ph id=\"ph2\">`catch`</ph> blocks below the <ph id=\"ph3\">`try`</ph> block.","pos":[412,611],"source":"Place any code statements that might raise or throw an exception in a `try` block, and place statements used to handle the exception or exceptions in one or more `catch` blocks below the `try` block."},{"content":"Each <ph id=\"ph1\">`catch`</ph> block includes the exception type and can contain additional statements needed to handle that exception type.","pos":[612,734],"source":" Each `catch` block includes the exception type and can contain additional statements needed to handle that exception type."},{"content":"In the following example, a <ph id=\"ph1\">&lt;xref:System.IO.StreamReader&gt;</ph> opens a file called <bpt id=\"p1\">*</bpt>data.txt<ept id=\"p1\">*</ept> and retrieves a line from the file.","pos":[736,860],"source":"In the following example, a <xref:System.IO.StreamReader> opens a file called *data.txt* and retrieves a line from the file."},{"content":"Since the code might throw any of three exceptions, it's placed in a <ph id=\"ph1\">`try`</ph> block.","pos":[861,942],"source":" Since the code might throw any of three exceptions, it's placed in a `try` block."},{"content":"Three <ph id=\"ph1\">`catch`</ph> blocks catch the exceptions and handle them by displaying the results to the console.","pos":[943,1042],"source":" Three `catch` blocks catch the exceptions and handle them by displaying the results to the console."},{"content":"The Common Language Runtime (CLR) catches exceptions not handled by <ph id=\"ph1\">`catch`</ph> blocks.","pos":[1278,1361],"source":"The Common Language Runtime (CLR) catches exceptions not handled by `catch` blocks."},{"content":"If an exception is caught by the CLR, one of the following results may occur depending on your CLR configuration:","pos":[1362,1475]},{"pos":[1479,1510],"content":"A <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> dialog box appears.","source":"A **Debug** dialog box appears."},{"content":"The program stops execution and a dialog box with exception information appears.","pos":[1513,1593]},{"pos":[1596,1681],"content":"An error prints out to the <bpt id=\"p1\">[</bpt>standard error output stream<ept id=\"p1\">](xref:System.Console.Error)</ept>.","source":"An error prints out to the [standard error output stream](xref:System.Console.Error)."},{"pos":[1685,2099],"content":"[!NOTE]\nMost code can throw an exception, and some exceptions, like <xref:System.OutOfMemoryException>, can be thrown by the CLR itself at any time. While applications aren't required to deal with these exceptions, be aware of the possibility when writing libraries to be used by others. For suggestions on when to set code in a `try` block, see [Best Practices for Exceptions](best-practices-for-exceptions.md).","leadings":["","> "],"nodes":[{"content":"Most code can throw an exception, and some exceptions, like <xref:System.OutOfMemoryException>, can be thrown by the CLR itself at any time. While applications aren't required to deal with these exceptions, be aware of the possibility when writing libraries to be used by others. For suggestions on when to set code in a `try` block, see [Best Practices for Exceptions](best-practices-for-exceptions.md).","pos":[8,412],"nodes":[{"content":"Most code can throw an exception, and some exceptions, like <ph id=\"ph1\">&lt;xref:System.OutOfMemoryException&gt;</ph>, can be thrown by the CLR itself at any time.","pos":[0,140],"source":"Most code can throw an exception, and some exceptions, like <xref:System.OutOfMemoryException>, can be thrown by the CLR itself at any time."},{"content":"While applications aren't required to deal with these exceptions, be aware of the possibility when writing libraries to be used by others.","pos":[141,279]},{"content":"For suggestions on when to set code in a <ph id=\"ph1\">`try`</ph> block, see <bpt id=\"p1\">[</bpt>Best Practices for Exceptions<ept id=\"p1\">](best-practices-for-exceptions.md)</ept>.","pos":[280,404],"source":" For suggestions on when to set code in a `try` block, see [Best Practices for Exceptions](best-practices-for-exceptions.md)."}]}]},{"pos":[2104,2112],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Exceptions<ept id=\"p1\">](index.md)</ept>","pos":[2114,2136],"source":"[Exceptions](index.md)"},{"content":"<bpt id=\"p1\">[</bpt>Handling I/O errors in .NET<ept id=\"p1\">](../io/handling-io-errors.md)</ept>","pos":[2139,2197],"source":"[Handling I/O errors in .NET](../io/handling-io-errors.md)"}]}