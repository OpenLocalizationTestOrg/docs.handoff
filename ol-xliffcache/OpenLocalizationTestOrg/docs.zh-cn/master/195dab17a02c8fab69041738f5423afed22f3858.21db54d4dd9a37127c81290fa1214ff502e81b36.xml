{"content":"---\ntitle: \"Handling DataAdapter Events | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 11515b25-ee49-4b1d-9294-a142147c1ec5\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Handling DataAdapter Events\nThe ADO.NET <xref:System.Data.Common.DataAdapter> exposes three events that you can use to respond to changes made to data at the data source. The following table shows the `DataAdapter` events.  \n  \n|Event|Description|  \n|-----------|-----------------|  \n|`RowUpdating`|An UPDATE, INSERT, or DELETE operation on a row (by a call to one of the `Update` methods) is about to begin.|  \n|`RowUpdated`|An UPDATE, INSERT, or DELETE operation on a row (by a call to one of the `Update` methods) is complete.|  \n|`FillError`|An error has occurred during a `Fill` operation.|  \n  \n## RowUpdating and RowUpdated  \n `RowUpdating` is raised before any update to a row from the <xref:System.Data.DataSet> has been processed at the data source. `RowUpdated` is raised after any update to a row from the `DataSet` has been processed at the data source. As a result, you can use `RowUpdating` to modify update behavior before it happens, to provide additional handling when an update will occur, to retain a reference to an updated row, to cancel the current update and schedule it for a batch process to be processed later, and so on. `RowUpdated` is useful for responding to errors and exceptions that occur during the update. You can add error information to the `DataSet`, as well as retry logic, and so on.  \n  \n The <xref:System.Data.Common.RowUpdatingEventArgs> and <xref:System.Data.Common.RowUpdatedEventArgs> arguments passed to the `RowUpdating` and `RowUpdated` events include the following: a `Command` property that references the `Command` object being used to perform the update; a `Row` property that references the `DataRow` object containing the updated information; a `StatementType` property for what type of update is being performed; the `TableMapping`, if applicable; and the `Status` of the operation.  \n  \n You can use the `Status` property to determine if an error has occurred during the operation and, if desired, to control the actions against the current and resulting rows. When the event occurs, the `Status` property equals either `Continue` or `ErrorsOccurred`. The following table shows the values to which you can set the `Status` property in order to control later actions during the update.  \n  \n|Status|Description|  \n|------------|-----------------|  \n|`Continue`|Continue the update operation.|  \n|`ErrorsOccurred`|Abort the update operation and throw an exception.|  \n|`SkipCurrentRow`|Ignore the current row and continue the update operation.|  \n|`SkipAllRemainingRows`|Abort the update operation but do not throw an exception.|  \n  \n Setting the `Status` property to `ErrorsOccurred` causes an exception to be thrown. You can control which exception is thrown by setting the `Errors` property to the desired exception. Using one of the other values for `Status` prevents an exception from being thrown.  \n  \n You can also use the `ContinueUpdateOnError` property to handle errors for updated rows. If `DataAdapter.ContinueUpdateOnError` is `true`, when an update to a row results in an exception being thrown, the text of the exception is placed into the `RowError` information of the particular row, and processing continues without throwing an exception. This enables you to respond to errors when the `Update` is complete, in contrast to the `RowUpdated` event, which enables you to respond to errors when the error is encountered.  \n  \n The following code sample shows how to both add and remove event handlers. The `RowUpdating` event handler writes a log of all deleted records with a time stamp. The `RowUpdated` event handler adds error information to the `RowError` property of the row in the `DataSet`, suppresses the exception, and continues processing (mirroring the behavior of `ContinueUpdateOnError` = `true`).  \n  \n```vb  \n' Assumes that connection is a valid SqlConnection object.  \nDim custAdapter As SqlDataAdapter = New SqlDataAdapter( _  \n  \"SELECT CustomerID, CompanyName FROM Customers\", connection)  \n  \n' Add handlers.  \nAddHandler custAdapter.RowUpdating, New SqlRowUpdatingEventHandler( _  \n  AddressOf OnRowUpdating)  \nAddHandler custAdapter.RowUpdated, New SqlRowUpdatedEventHandler(  \n  AddressOf OnRowUpdated)  \n  \n' Set DataAdapter command properties, fill DataSet, and modify DataSet.  \n  \ncustAdapter.Update(custDS, \"Customers\")  \n  \n' Remove handlers.  \nRemoveHandler custAdapter.RowUpdating, _  \n  New SqlRowUpdatingEventHandler(AddressOf OnRowUpdating)  \nRemoveHandler custAdapter.RowUpdated, _  \n  New SqlRowUpdatedEventHandler(AddressOf OnRowUpdated)  \n  \nPrivate Shared Sub OnRowUpdating(sender As Object, _  \n  args As SqlRowUpdatingEventArgs)  \n  If args.StatementType = StatementType.Delete Then  \n    Dim tw As System.IO.TextWriter = _  \n  System.IO.File.AppendText(\"Deletes.log\")  \n    tw.WriteLine( _  \n      \"{0}: Customer {1} Deleted.\", DateTime.Now, args.Row(_  \n      \"CustomerID\", DataRowVersion.Original))  \n    tw.Close()  \n  End If  \nEnd Sub  \n  \nPrivate Shared Sub OnRowUpdated( _  \n  sender As Object, args As SqlRowUpdatedEventArgs)  \n  If args.Status = UpdateStatus.ErrorsOccurred  \n    args.Status = UpdateStatus.SkipCurrentRow  \n    args.Row.RowError = args.Errors.Message  \n  End If  \nEnd Sub  \n```  \n  \n```csharp  \n// Assumes that connection is a valid SqlConnection object.  \nSqlDataAdapter custAdapter = new SqlDataAdapter(  \n  \"SELECT CustomerID, CompanyName FROM Customers\", connection);  \n  \n// Add handlers.  \ncustAdapter.RowUpdating += new SqlRowUpdatingEventHandler(OnRowUpdating);  \ncustAdapter.RowUpdated += new SqlRowUpdatedEventHandler(OnRowUpdated);  \n  \n// Set DataAdapter command properties, fill DataSet, modify DataSet.  \n  \ncustAdapter.Update(custDS, \"Customers\");  \n  \n// Remove handlers.  \ncustAdapter.RowUpdating -= new SqlRowUpdatingEventHandler(OnRowUpdating);  \ncustAdapter.RowUpdated -= new SqlRowUpdatedEventHandler(OnRowUpdated);  \n  \nprotected static void OnRowUpdating(  \n  object sender, SqlRowUpdatingEventArgs args)  \n{  \n  if (args.StatementType == StatementType.Delete)  \n  {  \n    System.IO.TextWriter tw = System.IO.File.AppendText(\"Deletes.log\");  \n    tw.WriteLine(  \n      \"{0}: Customer {1} Deleted.\", DateTime.Now,   \n       args.Row[\"CustomerID\", DataRowVersion.Original]);  \n    tw.Close();  \n  }  \n}  \n  \nprotected static void OnRowUpdated(  \n  object sender, SqlRowUpdatedEventArgs args)  \n{  \n  if (args.Status == UpdateStatus.ErrorsOccurred)  \n  {  \n    args.Row.RowError = args.Errors.Message;  \n    args.Status = UpdateStatus.SkipCurrentRow;  \n  }  \n}  \n```  \n  \n## FillError  \n The `DataAdapter` issues the `FillError` event when an error occurs during a `Fill` operation. This type of error commonly occurs when the data in the row being added could not be converted to a .NET Framework type without some loss of precision.  \n  \n If an error occurs during a `Fill` operation, the current row is not added to the `DataTable`. The `FillError` event enables you to resolve the error and add the row, or to ignore the excluded row and continue the `Fill` operation.  \n  \n The `FillErrorEventArgs` passed to the `FillError` event can contain several properties that enable you to respond to and resolve errors. The following table shows the properties of the `FillErrorEventArgs` object.  \n  \n|Property|Description|  \n|--------------|-----------------|  \n|`Errors`|The `Exception` that occurred.|  \n|`DataTable`|The `DataTable` object being filled when the error occurred.|  \n|`Values`|An array of objects that contains the values of the row being added when the error occurred. The ordinal references of the `Values` array correspond to the ordinal references of the columns of the row being added. For example, `Values[0]` is the value that was being added as the first column of the row.|  \n|`Continue`|Allows you to choose whether or not to throw an exception. Setting the `Continue` property to `false` will halt the current `Fill` operation, and an exception will be thrown. Setting `Continue` to `true` continues the `Fill` operation despite the error.|  \n  \n The following code example adds an event handler for the `FillError` event of the `DataAdapter`. In the `FillError` event code, the example determines if there is the potential for precision loss, providing the opportunity to respond to the exception.  \n  \n```vb  \nAddHandler adapter.FillError, New FillErrorEventHandler( _  \n  AddressOf FillError)  \n  \nDim dataSet As DataSet = New DataSet  \nadapter.Fill(dataSet, \"ThisTable\")  \n  \nPrivate Shared Sub FillError(sender As Object, _  \n  args As FillErrorEventArgs)  \n  If args.Errors.GetType() Is Type.GetType(\"System.OverflowException\") Then  \n    ' Code to handle precision loss.  \n    ' Add a row to table using the values from the first two columns.  \n    DataRow myRow = args.DataTable.Rows.Add(New Object() _  \n      {args.Values(0), args.Values(1), DBNull.Value})  \n    ' Set the RowError containing the value for the third column.  \n    args.RowError = _  \n      \"OverflowException encountered. Value from data source: \" & _  \n      args.Values(2)  \n    args.Continue = True  \n  End If  \nEnd Sub  \n```  \n  \n```csharp  \nadapter.FillError += new FillErrorEventHandler(FillError);  \n  \nDataSet dataSet = new DataSet();  \nadapter.Fill(dataSet, \"ThisTable\");  \n  \nprotected static void FillError(object sender, FillErrorEventArgs args)  \n{  \n  if (args.Errors.GetType() == typeof(System.OverflowException))  \n  {  \n    // Code to handle precision loss.  \n    //Add a row to table using the values from the first two columns.  \n    DataRow myRow = args.DataTable.Rows.Add(new object[]  \n       {args.Values[0], args.Values[1], DBNull.Value});  \n    //Set the RowError containing the value for the third column.  \n    args.RowError =   \n       \"OverflowException Encountered. Value from data source: \" +  \n       args.Values[2];  \n    args.Continue = true;  \n  }  \n}  \n```  \n  \n## See Also  \n [DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)   \n [Handling DataSet Events](../../../../docs/framework/data/adonet/dataset-datatable-dataview/handling-dataset-events.md)   \n [Handling DataTable Events](../../../../docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)   \n [Events](../../../../docs/standard/events/index.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[12,56],"content":"Handling DataAdapter Events | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Handling DataAdapter Events | Microsoft Docs","pos":[0,44]}]},{"pos":[365,392],"content":"Handling DataAdapter Events","linkify":"Handling DataAdapter Events","nodes":[{"content":"Handling DataAdapter Events","pos":[0,27]}]},{"content":"The ADO.NET <ph id=\"ph1\">&lt;xref:System.Data.Common.DataAdapter&gt;</ph> exposes three events that you can use to respond to changes made to data at the data source.","pos":[393,535],"source":"The ADO.NET <xref:System.Data.Common.DataAdapter> exposes three events that you can use to respond to changes made to data at the data source."},{"content":"The following table shows the <ph id=\"ph1\">`DataAdapter`</ph> events.","pos":[536,587],"source":" The following table shows the `DataAdapter` events."},{"content":"Event","pos":[594,599]},{"content":"Description","pos":[600,611]},{"pos":[664,773],"content":"An UPDATE, INSERT, or DELETE operation on a row (by a call to one of the <ph id=\"ph1\">`Update`</ph> methods) is about to begin.","source":"An UPDATE, INSERT, or DELETE operation on a row (by a call to one of the `Update` methods) is about to begin."},{"pos":[791,894],"content":"An UPDATE, INSERT, or DELETE operation on a row (by a call to one of the <ph id=\"ph1\">`Update`</ph> methods) is complete.","source":"An UPDATE, INSERT, or DELETE operation on a row (by a call to one of the `Update` methods) is complete."},{"pos":[911,959],"content":"An error has occurred during a <ph id=\"ph1\">`Fill`</ph> operation.","source":"An error has occurred during a `Fill` operation."},{"pos":[969,995],"content":"RowUpdating and RowUpdated","linkify":"RowUpdating and RowUpdated","nodes":[{"content":"RowUpdating and RowUpdated","pos":[0,26]}]},{"content":"<ph id=\"ph1\">`RowUpdating`</ph> is raised before any update to a row from the <ph id=\"ph2\">&lt;xref:System.Data.DataSet&gt;</ph> has been processed at the data source.","pos":[999,1124],"source":"`RowUpdating` is raised before any update to a row from the <xref:System.Data.DataSet> has been processed at the data source."},{"content":"<ph id=\"ph1\">`RowUpdated`</ph> is raised after any update to a row from the <ph id=\"ph2\">`DataSet`</ph> has been processed at the data source.","pos":[1125,1231],"source":"`RowUpdated` is raised after any update to a row from the `DataSet` has been processed at the data source."},{"content":"As a result, you can use <ph id=\"ph1\">`RowUpdating`</ph> to modify update behavior before it happens, to provide additional handling when an update will occur, to retain a reference to an updated row, to cancel the current update and schedule it for a batch process to be processed later, and so on.","pos":[1232,1513],"source":" As a result, you can use `RowUpdating` to modify update behavior before it happens, to provide additional handling when an update will occur, to retain a reference to an updated row, to cancel the current update and schedule it for a batch process to be processed later, and so on."},{"content":"<ph id=\"ph1\">`RowUpdated`</ph> is useful for responding to errors and exceptions that occur during the update.","pos":[1514,1606],"source":"`RowUpdated` is useful for responding to errors and exceptions that occur during the update."},{"content":"You can add error information to the <ph id=\"ph1\">`DataSet`</ph>, as well as retry logic, and so on.","pos":[1607,1689],"source":" You can add error information to the `DataSet`, as well as retry logic, and so on."},{"pos":[1696,2204],"content":"The <ph id=\"ph1\">&lt;xref:System.Data.Common.RowUpdatingEventArgs&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.Common.RowUpdatedEventArgs&gt;</ph> arguments passed to the <ph id=\"ph3\">`RowUpdating`</ph> and <ph id=\"ph4\">`RowUpdated`</ph> events include the following: a <ph id=\"ph5\">`Command`</ph> property that references the <ph id=\"ph6\">`Command`</ph> object being used to perform the update; a <ph id=\"ph7\">`Row`</ph> property that references the <ph id=\"ph8\">`DataRow`</ph> object containing the updated information; a <ph id=\"ph9\">`StatementType`</ph> property for what type of update is being performed; the <ph id=\"ph10\">`TableMapping`</ph>, if applicable; and the <ph id=\"ph11\">`Status`</ph> of the operation.","source":"The <xref:System.Data.Common.RowUpdatingEventArgs> and <xref:System.Data.Common.RowUpdatedEventArgs> arguments passed to the `RowUpdating` and `RowUpdated` events include the following: a `Command` property that references the `Command` object being used to perform the update; a `Row` property that references the `DataRow` object containing the updated information; a `StatementType` property for what type of update is being performed; the `TableMapping`, if applicable; and the `Status` of the operation."},{"content":"You can use the <ph id=\"ph1\">`Status`</ph> property to determine if an error has occurred during the operation and, if desired, to control the actions against the current and resulting rows.","pos":[2211,2383],"source":"You can use the `Status` property to determine if an error has occurred during the operation and, if desired, to control the actions against the current and resulting rows."},{"content":"When the event occurs, the <ph id=\"ph1\">`Status`</ph> property equals either <ph id=\"ph2\">`Continue`</ph> or <ph id=\"ph3\">`ErrorsOccurred`</ph>.","pos":[2384,2474],"source":" When the event occurs, the `Status` property equals either `Continue` or `ErrorsOccurred`."},{"content":"The following table shows the values to which you can set the <ph id=\"ph1\">`Status`</ph> property in order to control later actions during the update.","pos":[2475,2607],"source":" The following table shows the values to which you can set the `Status` property in order to control later actions during the update."},{"content":"Status","pos":[2614,2620]},{"content":"Description","pos":[2621,2632]},{"content":"Continue the update operation.","pos":[2683,2713]},{"content":"Abort the update operation and throw an exception.","pos":[2735,2785]},{"content":"Ignore the current row and continue the update operation.","pos":[2807,2864]},{"content":"Abort the update operation but do not throw an exception.","pos":[2892,2949]},{"content":"Setting the <ph id=\"ph1\">`Status`</ph> property to <ph id=\"ph2\">`ErrorsOccurred`</ph> causes an exception to be thrown.","pos":[2957,3040],"source":"Setting the `Status` property to `ErrorsOccurred` causes an exception to be thrown."},{"content":"You can control which exception is thrown by setting the <ph id=\"ph1\">`Errors`</ph> property to the desired exception.","pos":[3041,3141],"source":" You can control which exception is thrown by setting the `Errors` property to the desired exception."},{"content":"Using one of the other values for <ph id=\"ph1\">`Status`</ph> prevents an exception from being thrown.","pos":[3142,3225],"source":" Using one of the other values for `Status` prevents an exception from being thrown."},{"content":"You can also use the <ph id=\"ph1\">`ContinueUpdateOnError`</ph> property to handle errors for updated rows.","pos":[3232,3320],"source":"You can also use the `ContinueUpdateOnError` property to handle errors for updated rows."},{"content":"If <ph id=\"ph1\">`DataAdapter.ContinueUpdateOnError`</ph> is <ph id=\"ph2\">`true`</ph>, when an update to a row results in an exception being thrown, the text of the exception is placed into the <ph id=\"ph3\">`RowError`</ph> information of the particular row, and processing continues without throwing an exception.","pos":[3321,3579],"source":" If `DataAdapter.ContinueUpdateOnError` is `true`, when an update to a row results in an exception being thrown, the text of the exception is placed into the `RowError` information of the particular row, and processing continues without throwing an exception."},{"content":"This enables you to respond to errors when the <ph id=\"ph1\">`Update`</ph> is complete, in contrast to the <ph id=\"ph2\">`RowUpdated`</ph> event, which enables you to respond to errors when the error is encountered.","pos":[3580,3757],"source":" This enables you to respond to errors when the `Update` is complete, in contrast to the `RowUpdated` event, which enables you to respond to errors when the error is encountered."},{"content":"The following code sample shows how to both add and remove event handlers.","pos":[3764,3838]},{"content":"The <ph id=\"ph1\">`RowUpdating`</ph> event handler writes a log of all deleted records with a time stamp.","pos":[3839,3925],"source":" The `RowUpdating` event handler writes a log of all deleted records with a time stamp."},{"content":"The <ph id=\"ph1\">`RowUpdated`</ph> event handler adds error information to the <ph id=\"ph2\">`RowError`</ph> property of the row in the <ph id=\"ph3\">`DataSet`</ph>, suppresses the exception, and continues processing (mirroring the behavior of <ph id=\"ph4\">`ContinueUpdateOnError`</ph><ph id=\"ph5\"> = </ph><ph id=\"ph6\">`true`</ph>).","pos":[3926,4148],"source":" The `RowUpdated` event handler adds error information to the `RowError` property of the row in the `DataSet`, suppresses the exception, and continues processing (mirroring the behavior of `ContinueUpdateOnError` = `true`)."},{"pos":[6900,6909],"content":"FillError","linkify":"FillError","nodes":[{"content":"FillError","pos":[0,9]}]},{"content":"The <ph id=\"ph1\">`DataAdapter`</ph> issues the <ph id=\"ph2\">`FillError`</ph> event when an error occurs during a <ph id=\"ph3\">`Fill`</ph> operation.","pos":[6913,7007],"source":"The `DataAdapter` issues the `FillError` event when an error occurs during a `Fill` operation."},{"content":"This type of error commonly occurs when the data in the row being added could not be converted to a .NET Framework type without some loss of precision.","pos":[7008,7159]},{"content":"If an error occurs during a <ph id=\"ph1\">`Fill`</ph> operation, the current row is not added to the <ph id=\"ph2\">`DataTable`</ph>.","pos":[7166,7260],"source":"If an error occurs during a `Fill` operation, the current row is not added to the `DataTable`."},{"content":"The <ph id=\"ph1\">`FillError`</ph> event enables you to resolve the error and add the row, or to ignore the excluded row and continue the <ph id=\"ph2\">`Fill`</ph> operation.","pos":[7261,7397],"source":" The `FillError` event enables you to resolve the error and add the row, or to ignore the excluded row and continue the `Fill` operation."},{"content":"The <ph id=\"ph1\">`FillErrorEventArgs`</ph> passed to the <ph id=\"ph2\">`FillError`</ph> event can contain several properties that enable you to respond to and resolve errors.","pos":[7404,7541],"source":"The `FillErrorEventArgs` passed to the `FillError` event can contain several properties that enable you to respond to and resolve errors."},{"content":"The following table shows the properties of the <ph id=\"ph1\">`FillErrorEventArgs`</ph> object.","pos":[7542,7618],"source":" The following table shows the properties of the `FillErrorEventArgs` object."},{"content":"Property","pos":[7625,7633]},{"content":"Description","pos":[7634,7645]},{"pos":[7696,7726],"content":"The <ph id=\"ph1\">`Exception`</ph> that occurred.","source":"The `Exception` that occurred."},{"pos":[7743,7803],"content":"The <ph id=\"ph1\">`DataTable`</ph> object being filled when the error occurred.","source":"The `DataTable` object being filled when the error occurred."},{"content":"An array of objects that contains the values of the row being added when the error occurred.","pos":[7817,7909]},{"content":"The ordinal references of the <ph id=\"ph1\">`Values`</ph> array correspond to the ordinal references of the columns of the row being added.","pos":[7910,8030],"source":" The ordinal references of the `Values` array correspond to the ordinal references of the columns of the row being added."},{"content":"For example, <ph id=\"ph1\">`Values[0]`</ph> is the value that was being added as the first column of the row.","pos":[8031,8121],"source":" For example, `Values[0]` is the value that was being added as the first column of the row."},{"content":"Allows you to choose whether or not to throw an exception.","pos":[8137,8195]},{"content":"Setting the <ph id=\"ph1\">`Continue`</ph> property to <ph id=\"ph2\">`false`</ph> will halt the current <ph id=\"ph3\">`Fill`</ph> operation, and an exception will be thrown.","pos":[8196,8311],"source":" Setting the `Continue` property to `false` will halt the current `Fill` operation, and an exception will be thrown."},{"content":"Setting <ph id=\"ph1\">`Continue`</ph> to <ph id=\"ph2\">`true`</ph> continues the <ph id=\"ph3\">`Fill`</ph> operation despite the error.","pos":[8312,8390],"source":" Setting `Continue` to `true` continues the `Fill` operation despite the error."},{"content":"The following code example adds an event handler for the <ph id=\"ph1\">`FillError`</ph> event of the <ph id=\"ph2\">`DataAdapter`</ph>.","pos":[8398,8494],"source":"The following code example adds an event handler for the `FillError` event of the `DataAdapter`."},{"content":"In the <ph id=\"ph1\">`FillError`</ph> event code, the example determines if there is the potential for precision loss, providing the opportunity to respond to the exception.","pos":[8495,8649],"source":" In the `FillError` event code, the example determines if there is the potential for precision loss, providing the opportunity to respond to the exception."},{"pos":[10229,10237],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>DataAdapters and DataReaders<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept><ph id=\"ph1\"> </ph>","pos":[10241,10344],"source":"[DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Handling DataSet Events<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/handling-dataset-events.md)</ept><ph id=\"ph1\"> </ph>","pos":[10347,10468],"source":" [Handling DataSet Events](../../../../docs/framework/data/adonet/dataset-datatable-dataview/handling-dataset-events.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Handling DataTable Events<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept><ph id=\"ph1\"> </ph>","pos":[10471,10596],"source":" [Handling DataTable Events](../../../../docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Events<ept id=\"p1\">](../../../../docs/standard/events/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[10599,10652],"source":" [Events](../../../../docs/standard/events/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[10655,10759],"source":" [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}