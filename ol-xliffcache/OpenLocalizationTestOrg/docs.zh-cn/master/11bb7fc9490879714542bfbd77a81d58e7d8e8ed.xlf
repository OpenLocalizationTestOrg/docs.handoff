<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11bb7fc9490879714542bfbd77a81d58e7d8e8ed</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\compiler-options\reference-compiler-option.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16874a9d95a01824912016112e6d535b4cc4feb6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">afaf8f090ff890d8088246e2943ee4a07604094a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>-reference (C# Compiler Options) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>/reference (C# Compiler Options)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/reference<ept id="p1">**</ept> option causes the compiler to import <bpt id="p2">[</bpt>public<ept id="p2">](../../../csharp/language-reference/keywords/public.md)</ept> type information in the specified file into the current project, thus enabling you to reference metadata from the specified assembly files.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The name of a file that contains an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To import more than one file, include a separate <bpt id="p1">**</bpt>/reference<ept id="p1">**</ept> option for each file.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A valid C# identifier that will represent a root namespace that will contain all namespaces in the assembly.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To import from more than one file, include a <bpt id="p1">**</bpt>/reference<ept id="p1">**</ept> option for each file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The files you import must contain a manifest; the output file must have been compiled with one of the <bpt id="p1">[</bpt>/target<ept id="p1">](../../../csharp/language-reference/compiler-options/target-compiler-option.md)</ept> options other than <bpt id="p2">[</bpt>/target:module<ept id="p2">](../../../csharp/language-reference/compiler-options/target-module-compiler-option.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/r<ept id="p1">**</ept> is the short form of <bpt id="p2">**</bpt>/reference<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>/addmodule<ept id="p1">](../../../csharp/language-reference/compiler-options/addmodule-compiler-option.md)</ept> to import metadata from an output file that does not contain an assembly manifest.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you reference an assembly (Assembly A) that references another assembly (Assembly B), you will need to reference Assembly B if:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A type you use from Assembly A inherits from a type or implements an interface from Assembly B.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You invoke a field, property, event, or method that has a return type or parameter type from Assembly B.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>/lib<ept id="p1">](../../../csharp/language-reference/compiler-options/lib-compiler-option.md)</ept> to specify the directory in which one or more of your assembly references is located.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/lib<ept id="p1">**</ept> topic also discusses the directories in which the compiler searches for assemblies.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In order for the compiler to recognize a type in an assembly, and not in a module, it needs to be forced to resolve the type, which you can do by defining an instance of the type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There are other ways to resolve type names in an assembly for the compiler: for example, if you inherit from a type in an assembly, the type name will then be recognized by the compiler.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary to reference two different versions of the same component from within one assembly.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To do this, use the alias suboption on the <bpt id="p1">**</bpt>/reference<ept id="p1">**</ept> switch for each file to distinguish between the two files.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This alias will be used as a qualifier for the component name, and will resolve to the component in one of the files.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The csc response (.rsp) file, which references commonly used .NET Framework assemblies, is used by default.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>/noconfig<ept id="p1">](../../../csharp/language-reference/compiler-options/noconfig-compiler-option.md)</ept> if you do not want the compiler to use csc.rsp.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In Visual Studio, use the <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove References By Using the Reference Manager<ept id="p1">](https://docs.microsoft.com/en-us/visualstudio/ide/how-to-add-or-remove-references-by-using-the-reference-manager)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To ensure equivalent behavior between adding references by using <ph id="ph1">`/reference`</ph> and adding references by using the <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> dialog box, set the <bpt id="p2">**</bpt>Embed Interop Types<ept id="p2">**</ept> property to <bpt id="p3">**</bpt>False<ept id="p3">**</ept> for the assembly that you're adding.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>True<ept id="p1">**</ept> is the default value for the property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">[</bpt>extern alias<ept id="p1">](../../../csharp/language-reference/keywords/extern-alias.md)</ept> feature.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You compile the source file and import metadata from <ph id="ph1">`grid.dll`</ph> and <ph id="ph2">`grid20.dll`</ph>,which have been compiled previously.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The two DLLs contain separate versions of the same component, and you use two <bpt id="p1">**</bpt>/reference<ept id="p1">**</ept> with alias options to compile the source file.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The options look like this:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>/reference:GridV1=grid.dll and /reference:GridV2=grid20.dll</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This sets up the external aliases "GridV1" and "GridV2," which you use in your program by means of an extern statement:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Once this is done, you can refer to the grid control from grid.dll by prefixing the control name with GridV1, like this:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In addition, you can refer to the grid control from grid20.dll by prefixing the control name with GridV2 like this:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Compiler Options<ept id="p1">](../../../csharp/language-reference/compiler-options/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>NIB How to: Modify Project Properties and Configuration Settings<ept id="p1">](http://msdn.microsoft.com/en-us/e7184bc5-2f2b-4b4f-aa9a-3ecfcbc48b67)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>