<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="interfaces.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfc6b59a411ff2ddb3331a8bdf24c0ae3d611273</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tour-of-csharp\interfaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c423b15618349e845500f1680838b23bfc11128c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82f31ae88d36529dd7067b416a15ec325a6a4255</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>C# Interfaces - A tour of the C# language</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Interfaces define contracts implemented by types in C#</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">***</bpt>interface<ept id="p1">***</ept> defines a contract that can be implemented by classes and structs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An interface can contain methods, properties, events, and indexers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An interface does not provide implementations of the members it defines—it merely specifies the members that must be supplied by classes or structs that implement the interface.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Interfaces may employ <bpt id="p1">***</bpt>multiple inheritance<ept id="p1">***</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the following example, the interface <ph id="ph1">`IComboBox`</ph> inherits from both <ph id="ph2">`ITextBox`</ph> and <ph id="ph3">`IListBox`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Classes and structs can implement multiple interfaces.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following example, the class <ph id="ph1">`EditBox`</ph> implements both <ph id="ph2">`IControl`</ph> and <ph id="ph3">`IDataBound`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When a class or struct implements a particular interface, instances of that class or struct can be implicitly converted to that interface type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In cases where an instance is not statically known to implement a particular interface, dynamic type casts can be used.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, the following statements use dynamic type casts to obtain an object’s <ph id="ph1">`IControl`</ph> and <ph id="ph2">`IDataBound`</ph> interface implementations.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Because the run-time actual type of the object is <ph id="ph1">`EditBox`</ph>, the casts succeed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the previous <ph id="ph1">`EditBox`</ph> class, the <ph id="ph2">`Paint`</ph> method from the <ph id="ph3">`IControl`</ph> interface and the <ph id="ph4">`Bind`</ph> method from the <ph id="ph5">`IDataBound`</ph> interface are implemented using public members.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>C# also supports explicit <bpt id="p1">***</bpt>interface member implementations<ept id="p1">***</ept>, enabling the class or struct to avoid making the members public.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An explicit interface member implementation is written using the fully qualified interface member name.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`EditBox`</ph> class could implement the <ph id="ph2">`IControl.Paint`</ph> and <ph id="ph3">`IDataBound.Bind`</ph> methods using explicit interface member implementations as follows.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Explicit interface members can only be accessed via the interface type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, the implementation of <ph id="ph1">`IControl.Paint`</ph> provided by the previous EditBox class can only be invoked by first converting the <ph id="ph2">`EditBox`</ph> reference to the <ph id="ph3">`IControl`</ph> interface type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous<ept id="p1">](arrays.md)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>Next<ept id="p2">](enums.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>