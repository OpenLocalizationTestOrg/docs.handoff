{"content":"---\ntitle: \"ICorDebugHeapValue3::GetThreadOwningMonitorLock Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorDebugHeapValue3.GetThreadOwningMonitorLock\"\napi_location: \n  - \"mscordbi.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorDebugHeapValue3::GetThreadOwningMonitorLock\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"GetThreadOwningMonitorLock method [.NET Framework debugging]\"\n  - \"ICorDebugHeapValue3::GetThreadOwningMonitorLock method [.NET Framework debugging]\"\nms.assetid: e06fc19d-2cf4-4cad-81a3-137a68af8969\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 6\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# ICorDebugHeapValue3::GetThreadOwningMonitorLock Method\nReturns the managed thread that owns the monitor lock on this object.  \n  \n## Syntax  \n  \n```  \nHRESULT GetThreadOwningMonitorLock (  \n    [out] ICorDebugThread   **ppThread,  \n    [out] DWORD              *pAcquisitionCount  \n);  \n```  \n  \n#### Parameters  \n `ppThread`  \n [out] The managed thread that owns the monitor lock on this object.  \n  \n `pAcquisitionCount`  \n [out] The number of times this thread would have to release the lock before it returns to being unowned.  \n  \n## Return Value  \n This method returns the following specific HRESULTs as well as HRESULT errors that indicate method failure.  \n  \n|HRESULT|Description|  \n|-------------|-----------------|  \n|S_OK|The method completed successfully.|  \n|S_FALSE|No managed thread owns the monitor lock on this object.|  \n  \n## Exceptions  \n  \n## Remarks  \n If a managed thread owns the monitor lock on this object:  \n  \n-   The method returns S_OK.  \n  \n-   The thread object is valid until the thread exits.  \n  \n If no managed thread owns the monitor lock on this object, `ppThread` and `pAcquisitionCount` are unchanged, and the method returns S_FALSE.  \n  \n If `ppThread` or `pAcquisitionCount` is not a valid pointer, the result is undefined.  \n  \n If an error occurs such that it cannot be determined which, if any, thread owns the monitor lock on this object, the method returns an HRESULT that indicates failure.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorDebug.idl, CorDebug.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v40plus](../../../../includes/net-current-v40plus-md.md)]  \n  \n## See Also  \n [Debugging Interfaces](../../../../docs/framework/unmanaged-api/debugging/debugging-interfaces.md)   \n [Debugging](../../../../docs/framework/unmanaged-api/debugging/index.md)","nodes":[{"pos":[4,793],"embed":true,"restype":"x-metadata","content":"title: \"ICorDebugHeapValue3::GetThreadOwningMonitorLock Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorDebugHeapValue3.GetThreadOwningMonitorLock\"\napi_location: \n  - \"mscordbi.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorDebugHeapValue3::GetThreadOwningMonitorLock\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"GetThreadOwningMonitorLock method [.NET Framework debugging]\"\n  - \"ICorDebugHeapValue3::GetThreadOwningMonitorLock method [.NET Framework debugging]\"\nms.assetid: e06fc19d-2cf4-4cad-81a3-137a68af8969\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 6\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"ICorDebugHeapValue3::GetThreadOwningMonitorLock Method | Microsoft Docs","nodes":[{"pos":[0,71],"content":"ICorDebugHeapValue3::GetThreadOwningMonitorLock Method | Microsoft Docs","nodes":[{"content":"ICorDebugHeapValue3::GetThreadOwningMonitorLock Method | Microsoft Docs","pos":[0,71]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[800,854],"content":"ICorDebugHeapValue3::GetThreadOwningMonitorLock Method","linkify":"ICorDebugHeapValue3::GetThreadOwningMonitorLock Method","nodes":[{"content":"ICorDebugHeapValue3::GetThreadOwningMonitorLock Method","pos":[0,54]}]},{"content":"Returns the managed thread that owns the monitor lock on this object.","pos":[855,924]},{"pos":[933,939],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1101,1111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] The managed thread that owns the monitor lock on this object.","pos":[1129,1196]},{"content":"[out] The number of times this thread would have to release the lock before it returns to being unowned.","pos":[1226,1330]},{"pos":[1339,1351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"This method returns the following specific HRESULTs as well as HRESULT errors that indicate method failure.","pos":[1355,1462]},{"content":"HRESULT","pos":[1469,1476]},{"content":"Description","pos":[1477,1488]},{"content":"S_OK","pos":[1529,1533]},{"content":"The method completed successfully.","pos":[1534,1568]},{"content":"S_FALSE","pos":[1573,1580]},{"content":"No managed thread owns the monitor lock on this object.","pos":[1581,1636]},{"pos":[1646,1656],"content":"Exceptions","linkify":"Exceptions","nodes":[{"content":"Exceptions","pos":[0,10]}]},{"pos":[1665,1672],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If a managed thread owns the monitor lock on this object:","pos":[1676,1733]},{"content":"The method returns S_OK.","pos":[1743,1767]},{"content":"The thread object is valid until the thread exits.","pos":[1777,1827]},{"pos":[1834,1974],"content":"If no managed thread owns the monitor lock on this object, <ph id=\"ph1\">`ppThread`</ph> and <ph id=\"ph2\">`pAcquisitionCount`</ph> are unchanged, and the method returns S_FALSE.","source":"If no managed thread owns the monitor lock on this object, `ppThread` and `pAcquisitionCount` are unchanged, and the method returns S_FALSE."},{"pos":[1981,2066],"content":"If <ph id=\"ph1\">`ppThread`</ph> or <ph id=\"ph2\">`pAcquisitionCount`</ph> is not a valid pointer, the result is undefined.","source":"If `ppThread` or `pAcquisitionCount` is not a valid pointer, the result is undefined."},{"content":"If an error occurs such that it cannot be determined which, if any, thread owns the monitor lock on this object, the method returns an HRESULT that indicates failure.","pos":[2073,2239]},{"pos":[2248,2260],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2264,2368],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[2375,2411],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorDebug.idl, CorDebug.h","source":"**Header:** CorDebug.idl, CorDebug.h"},{"pos":[2418,2443],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[2450,2558],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v40plus](../../../../includes/net-current-v40plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v40plus](../../../../includes/net-current-v40plus-md.md)]"},{"pos":[2567,2575],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Debugging Interfaces<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/debugging-interfaces.md)</ept><ph id=\"ph1\"> </ph>","pos":[2579,2678],"source":"[Debugging Interfaces](../../../../docs/framework/unmanaged-api/debugging/debugging-interfaces.md) "},{"content":"<bpt id=\"p1\">[</bpt>Debugging<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/debugging/index.md)</ept>","pos":[2682,2754],"source":"[Debugging](../../../../docs/framework/unmanaged-api/debugging/index.md)"}]}