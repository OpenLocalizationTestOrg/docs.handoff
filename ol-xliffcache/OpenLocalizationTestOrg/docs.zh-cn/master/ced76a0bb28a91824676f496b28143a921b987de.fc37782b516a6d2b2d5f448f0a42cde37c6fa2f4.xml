{"content":"---\ntitle: \"Extending the DOM\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: b5489c96-4afd-439a-a25d-fc82eb4a148d\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# Extending the DOM\n\nThe Microsoft .NET Framework includes a base set of classes that provides an implementation of the XML Document Object Model (DOM). The <xref:System.Xml.XmlNode>, and its derived classes, provides methods and properties that allow you to navigate, query, and modify the content and structure of an XML document.\n\nWhen XML content is loaded into memory using the DOM, the nodes created contain information such as node name, node type, and so on. There may be occasions where you require specific node information that the base classes do not provide. For example, you may want to see the line number and position of the node. In this case, you can derive new classes from the existing DOM classes and add additional functionality.\n\nThere are two general guidelines when deriving new classes:\n\n- It is recommended that you never derive from the <xref:System.Xml.XmlNode> class. Instead, it is recommended that you derive classes from the class corresponding to the node type that you are interested in. For example, if you want to return additional information on attribute nodes, you can derive from the <xref:System.Xml.XmlAttribute> class.\n\n- Except for the node creation methods, it is recommended that when overriding a function, you should always call the base version of the function and then add any additional processing.\n\n## Creating Your Own Node Instances\n\nThe <xref:System.Xml.XmlDocument> class contains node creation methods. When an XML file is loaded, these methods are called to create the nodes. You can override these methods so that your node instances are created when a document is loaded. For example, if you have extended the <xref:System.Xml.XmlElement> class, you would inherit the <xref:System.Xml.XmlDocument> class and override the <xref:System.Xml.XmlDocument.CreateElement%2A> method.\n\nThe following example shows how to override the <xref:System.Xml.XmlDocument.CreateElement%2A> method to return your implementation of the <xref:System.Xml.XmlElement> class.\n\n```vb\nClass LineInfoDocument\n    Inherits XmlDocument\n        Public Overrides Function CreateElement(prefix As String, localname As String, nsURI As String) As XmlElement\n        Dim elem As New LineInfoElement(prefix, localname, nsURI, Me)\n        Return elem\n    End Function 'CreateElement\nEnd Class 'LineInfoDocument\n```\n\n```csharp\nclass LineInfoDocument : XmlDocument \n{\n    public override XmlElement CreateElement(string prefix, string localname, string nsURI) \n    {\n        LineInfoElement elem = new LineInfoElement(prefix, localname, nsURI, this);\n        return elem;\n    }\n}\n```\n\n## Extending a Class\n\nTo extend a class, derive your class from one of the existing DOM classes. You can then override any of the virtual methods or properties in the base class, or add your own.\n\nIn the following example, a new class is created, which implements the <xref:System.Xml.XmlElement> class and the <xref:System.Xml.IXmlLineInfo> interface. Additional methods and properties are defined which allows users to gather line information.\n\n```vb\nClass LineInfoElement\n   Inherits XmlElement\n   Implements IXmlLineInfo\n   Private lineNumber As Integer = 0\n   Private linePosition As Integer = 0\n\n   Friend Sub New(prefix As String, localname As String, nsURI As String, doc As XmlDocument)\n      MyBase.New(prefix, localname, nsURI, doc)\n      CType(doc, LineInfoDocument).IncrementElementCount()\n   End Sub\n\n   Public Sub SetLineInfo(linenum As Integer, linepos As Integer)\n      lineNumber = linenum\n      linePosition = linepos\n   End Sub\n\n   Public ReadOnly Property LineNumber() As Integer\n      Get\n         Return lineNumber\n      End Get\n   End Property\n\n   Public ReadOnly Property LinePosition() As Integer\n      Get\n         Return linePosition\n      End Get\n   End Property\n\n   Public Function HasLineInfo() As Boolean\n      Return True\n   End Function\nEnd Class ' End LineInfoElement class.\n```\n\n```csharp\nclass LineInfoElement : XmlElement, IXmlLineInfo {\n   int lineNumber = 0;\n   int linePosition = 0;\n   internal LineInfoElement( string prefix, string localname, string nsURI, XmlDocument doc ) : base( prefix, localname, nsURI, doc ) {\n       ( (LineInfoDocument)doc ).IncrementElementCount();\n  }\n  public void SetLineInfo( int linenum, int linepos ) {\n      lineNumber = linenum;\n      linePosition = linepos;\n  }\n  public int LineNumber {\n     get {\n       return lineNumber;\n     }\n  }\n  public int LinePosition {\n      get {\n        return linePosition;\n      }\n  }\n  public bool HasLineInfo() {\n    return true;\n  }\n} // End LineInfoElement class.\n```\n\n### Example\n\nThe following example counts the number of elements in an XML document:\n\n```vb\nImports System\nImports System.Xml\nImports System.IO\n\nClass LineInfoDocument\n   Inherits XmlDocument\n\n   Private elementCount As Integer\n\n   Friend Sub New()\n      elementCount = 0\n   End Sub\n\n   Public Overrides Function CreateElement(prefix As String, localname As String, nsURI As String) As XmlElement\n      Dim elem As New LineInfoElement(prefix, localname, nsURI, Me)\n      Return elem\n   End Function\n\n   Public Sub IncrementElementCount()\n      elementCount += 1\n   End Sub\n\n   Public Function GetCount() As Integer\n      Return elementCount\n   End Function\nEnd Class 'End LineInfoDocument class.\n\nClass LineInfoElement\n   Inherits XmlElement\n\n   Friend Sub New(prefix As String, localname As String, nsURI As String, doc As XmlDocument)\n      MyBase.New(prefix, localname, nsURI, doc)\n      CType(doc, LineInfoDocument).IncrementElementCount()\n   End Sub 'New\nEnd Class 'LineInfoElement\n _ 'End LineInfoElement class.\n\nPublic Class Test\n\n   Private filename As [String] = \"book.xml\"\n\n   Public Shared Sub Main()\n\n      Dim doc As New LineInfoDocument()\n      doc.Load(filename)\n      Console.WriteLine(\"Number of elements in {0}: {1}\", filename, doc.GetCount())\n   End Sub\nEnd Class\n```\n\n```csharp\nusing System;\nusing System.Xml;\nusing System.IO;\n\nclass LineInfoDocument : XmlDocument {\n\n  int elementCount;\n  internal LineInfoDocument():base() {\n    elementCount = 0;\n  }\n\n  public override XmlElement CreateElement( string prefix, string localname, string nsURI) {\n    LineInfoElement elem = new LineInfoElement(prefix, localname, nsURI, this );\n    return elem;\n  }\n\n  public void IncrementElementCount() {\n     elementCount++;\n  }\n\n  public int GetCount() {\n     return elementCount;\n  }\n} // End LineInfoDocument class.\n\nclass LineInfoElement:XmlElement {\n\n    internal LineInfoElement( string prefix, string localname, string nsURI, XmlDocument doc ):base( prefix,localname,nsURI, doc ){\n      ((LineInfoDocument)doc).IncrementElementCount();\n    }\n} // End LineInfoElement class.\n\npublic class Test {\n\n  const String filename = \"book.xml\";\n  public static void Main() {\n\n     LineInfoDocument doc =new LineInfoDocument();\n     doc.Load(filename);\n     Console.WriteLine(\"Number of elements in {0}: {1}\", filename, doc.GetCount());\n\n  }\n}\n```\n\n#### Input\n\nbook.xml\n\n```xml\n<!--sample XML fragment-->\n<book genre='novel' ISBN='1-861001-57-5' misc='sale-item'>\n  <title>The Handmaid's Tale</title>\n  <price>14.95</price>\n</book>\n```\n\n#### Output\n\n```console\nNumber of elements in book.xml: 3\n```\n\n## Node Event Handler\n\nThe .NET Framework implementation of the DOM also includes an event system that enables you to receive and handle events when nodes in an XML document change. Using the <xref:System.Xml.XmlNodeChangedEventHandler> and <xref:System.Xml.XmlNodeChangedEventArgs> classes, you can capture `NodeChanged`, `NodeChanging`, `NodeInserted`, `NodeInserting`, `NodeRemoved`, and `NodeRemoving` events.\n\nThe event-handling process works exactly the same in derived classes as it would in the original DOM classes.\n\nFor more information regarding node event handling, see [Events](../../../../docs/standard/events/index.md) and <xref:System.Xml.XmlNodeChangedEventHandler>.\n\n## Default Attributes and the CreateElement Method\n\nIf you are overriding the <xref:System.Xml.XmlDocument.CreateElement%2A> method in a derived class, default attributes are not added when you are creating new elements while editing the document. This is only an issue while editing. Because the <xref:System.Xml.XmlDocument.CreateElement%2A> method is responsible for adding default attributes to an <xref:System.Xml.XmlDocument>, you must code this functionality in the <xref:System.Xml.XmlDocument.CreateElement%2A> method. If you are loading an <xref:System.Xml.XmlDocument> that includes default attributes, they will be handled correctly. For more information on default attributes, see [Creating New Attributes for Elements in the DOM](creating-new-attributes-for-elements-in-the-dom.md).\n\n## See also\n\n- [XML Document Object Model (DOM)](xml-document-object-model-dom.md)\n","nodes":[{"pos":[4,203],"embed":true,"restype":"x-metadata","content":"title: \"Extending the DOM\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: b5489c96-4afd-439a-a25d-fc82eb4a148d\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"Extending the DOM","nodes":[{"pos":[0,17],"content":"Extending the DOM","nodes":[{"content":"Extending the DOM","pos":[0,17]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[210,227],"content":"Extending the DOM","linkify":"Extending the DOM","nodes":[{"content":"Extending the DOM","pos":[0,17]}]},{"content":"The Microsoft .NET Framework includes a base set of classes that provides an implementation of the XML Document Object Model (DOM).","pos":[229,360]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlNode&gt;</ph>, and its derived classes, provides methods and properties that allow you to navigate, query, and modify the content and structure of an XML document.","pos":[361,540],"source":" The <xref:System.Xml.XmlNode>, and its derived classes, provides methods and properties that allow you to navigate, query, and modify the content and structure of an XML document."},{"content":"When XML content is loaded into memory using the DOM, the nodes created contain information such as node name, node type, and so on.","pos":[542,674]},{"content":"There may be occasions where you require specific node information that the base classes do not provide.","pos":[675,779]},{"content":"For example, you may want to see the line number and position of the node.","pos":[780,854]},{"content":"In this case, you can derive new classes from the existing DOM classes and add additional functionality.","pos":[855,959]},{"content":"There are two general guidelines when deriving new classes:","pos":[961,1020]},{"content":"It is recommended that you never derive from the <ph id=\"ph1\">&lt;xref:System.Xml.XmlNode&gt;</ph> class.","pos":[1024,1105],"source":"It is recommended that you never derive from the <xref:System.Xml.XmlNode> class."},{"content":"Instead, it is recommended that you derive classes from the class corresponding to the node type that you are interested in.","pos":[1106,1230]},{"content":"For example, if you want to return additional information on attribute nodes, you can derive from the <ph id=\"ph1\">&lt;xref:System.Xml.XmlAttribute&gt;</ph> class.","pos":[1231,1370],"source":" For example, if you want to return additional information on attribute nodes, you can derive from the <xref:System.Xml.XmlAttribute> class."},{"content":"Except for the node creation methods, it is recommended that when overriding a function, you should always call the base version of the function and then add any additional processing.","pos":[1374,1558]},{"pos":[1563,1595],"content":"Creating Your Own Node Instances","linkify":"Creating Your Own Node Instances","nodes":[{"content":"Creating Your Own Node Instances","pos":[0,32]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlDocument&gt;</ph> class contains node creation methods.","pos":[1597,1668],"source":"The <xref:System.Xml.XmlDocument> class contains node creation methods."},{"content":"When an XML file is loaded, these methods are called to create the nodes.","pos":[1669,1742]},{"content":"You can override these methods so that your node instances are created when a document is loaded.","pos":[1743,1840]},{"content":"For example, if you have extended the <ph id=\"ph1\">&lt;xref:System.Xml.XmlElement&gt;</ph> class, you would inherit the <ph id=\"ph2\">&lt;xref:System.Xml.XmlDocument&gt;</ph> class and override the <ph id=\"ph3\">&lt;xref:System.Xml.XmlDocument.CreateElement%2A&gt;</ph> method.","pos":[1841,2044],"source":" For example, if you have extended the <xref:System.Xml.XmlElement> class, you would inherit the <xref:System.Xml.XmlDocument> class and override the <xref:System.Xml.XmlDocument.CreateElement%2A> method."},{"pos":[2046,2220],"content":"The following example shows how to override the <ph id=\"ph1\">&lt;xref:System.Xml.XmlDocument.CreateElement%2A&gt;</ph> method to return your implementation of the <ph id=\"ph2\">&lt;xref:System.Xml.XmlElement&gt;</ph> class.","source":"The following example shows how to override the <xref:System.Xml.XmlDocument.CreateElement%2A> method to return your implementation of the <xref:System.Xml.XmlElement> class."},{"pos":[2819,2836],"content":"Extending a Class","linkify":"Extending a Class","nodes":[{"content":"Extending a Class","pos":[0,17]}]},{"content":"To extend a class, derive your class from one of the existing DOM classes.","pos":[2838,2912]},{"content":"You can then override any of the virtual methods or properties in the base class, or add your own.","pos":[2913,3011]},{"content":"In the following example, a new class is created, which implements the <ph id=\"ph1\">&lt;xref:System.Xml.XmlElement&gt;</ph> class and the <ph id=\"ph2\">&lt;xref:System.Xml.IXmlLineInfo&gt;</ph> interface.","pos":[3013,3168],"source":"In the following example, a new class is created, which implements the <xref:System.Xml.XmlElement> class and the <xref:System.Xml.IXmlLineInfo> interface."},{"content":"Additional methods and properties are defined which allows users to gather line information.","pos":[3169,3261]},{"pos":[4803,4810],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example counts the number of elements in an XML document:","pos":[4812,4883]},{"pos":[7154,7159],"content":"Input","linkify":"Input","nodes":[{"content":"Input","pos":[0,5]}]},{"content":"book.xml","pos":[7161,7169]},{"pos":[7342,7348],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[7403,7421],"content":"Node Event Handler","linkify":"Node Event Handler","nodes":[{"content":"Node Event Handler","pos":[0,18]}]},{"content":"The .NET Framework implementation of the DOM also includes an event system that enables you to receive and handle events when nodes in an XML document change.","pos":[7423,7581]},{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Xml.XmlNodeChangedEventHandler&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.XmlNodeChangedEventArgs&gt;</ph> classes, you can capture <ph id=\"ph3\">`NodeChanged`</ph>, <ph id=\"ph4\">`NodeChanging`</ph>, <ph id=\"ph5\">`NodeInserted`</ph>, <ph id=\"ph6\">`NodeInserting`</ph>, <ph id=\"ph7\">`NodeRemoved`</ph>, and <ph id=\"ph8\">`NodeRemoving`</ph> events.","pos":[7582,7813],"source":" Using the <xref:System.Xml.XmlNodeChangedEventHandler> and <xref:System.Xml.XmlNodeChangedEventArgs> classes, you can capture `NodeChanged`, `NodeChanging`, `NodeInserted`, `NodeInserting`, `NodeRemoved`, and `NodeRemoving` events."},{"content":"The event-handling process works exactly the same in derived classes as it would in the original DOM classes.","pos":[7815,7924]},{"pos":[7926,8083],"content":"For more information regarding node event handling, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../../docs/standard/events/index.md)</ept> and <ph id=\"ph1\">&lt;xref:System.Xml.XmlNodeChangedEventHandler&gt;</ph>.","source":"For more information regarding node event handling, see [Events](../../../../docs/standard/events/index.md) and <xref:System.Xml.XmlNodeChangedEventHandler>."},{"pos":[8088,8135],"content":"Default Attributes and the CreateElement Method","linkify":"Default Attributes and the CreateElement Method","nodes":[{"content":"Default Attributes and the CreateElement Method","pos":[0,47]}]},{"content":"If you are overriding the <ph id=\"ph1\">&lt;xref:System.Xml.XmlDocument.CreateElement%2A&gt;</ph> method in a derived class, default attributes are not added when you are creating new elements while editing the document.","pos":[8137,8332],"source":"If you are overriding the <xref:System.Xml.XmlDocument.CreateElement%2A> method in a derived class, default attributes are not added when you are creating new elements while editing the document."},{"content":"This is only an issue while editing.","pos":[8333,8369]},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Xml.XmlDocument.CreateElement%2A&gt;</ph> method is responsible for adding default attributes to an <ph id=\"ph2\">&lt;xref:System.Xml.XmlDocument&gt;</ph>, you must code this functionality in the <ph id=\"ph3\">&lt;xref:System.Xml.XmlDocument.CreateElement%2A&gt;</ph> method.","pos":[8370,8612],"source":" Because the <xref:System.Xml.XmlDocument.CreateElement%2A> method is responsible for adding default attributes to an <xref:System.Xml.XmlDocument>, you must code this functionality in the <xref:System.Xml.XmlDocument.CreateElement%2A> method."},{"content":"If you are loading an <ph id=\"ph1\">&lt;xref:System.Xml.XmlDocument&gt;</ph> that includes default attributes, they will be handled correctly.","pos":[8613,8730],"source":" If you are loading an <xref:System.Xml.XmlDocument> that includes default attributes, they will be handled correctly."},{"content":"For more information on default attributes, see <bpt id=\"p1\">[</bpt>Creating New Attributes for Elements in the DOM<ept id=\"p1\">](creating-new-attributes-for-elements-in-the-dom.md)</ept>.","pos":[8731,8881],"source":" For more information on default attributes, see [Creating New Attributes for Elements in the DOM](creating-new-attributes-for-elements-in-the-dom.md)."},{"pos":[8886,8894],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8898,8965],"content":"<bpt id=\"p1\">[</bpt>XML Document Object Model (DOM)<ept id=\"p1\">](xml-document-object-model-dom.md)</ept>","source":"[XML Document Object Model (DOM)](xml-document-object-model-dom.md)"}]}