<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">965ceb0f0436b302801377a2fe9acc5b59b8ef29</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\x-array-markup-extension.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">671302c9cd2c044897a3f1654f87983491b34748</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6de131da884829fba033f31e1b52989b405b9a64</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>x:Array Markup Extension | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>x:Array Markup Extension</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides general support for arrays of objects in XAML through a markup extension.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This corresponds to the <ph id="ph1">`x:ArrayExtension`</ph> XAML type in [MS-XAML].</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML Object Element Usage</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The name of the type that your <ph id="ph1">`x:Array`</ph> will contain.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`typeName`</ph> may be (and often is) prefixed for a XAML namespace that contains the XAML type definitions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The items content that is assigned to the intrinsic <ph id="ph1">`ArrayExtension.Items`</ph> property.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Typically, these items are specified as one or more object elements contained within the <ph id="ph1">`x:Array`</ph> opening and closing tags.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Objects specified here are expected to be assignable to the XAML type specified in <ph id="ph1">`typeName`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Type`</ph> is a required attribute for all <ph id="ph2">`x:Array`</ph> object elements.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Type`</ph> parameter value does not need to use an <ph id="ph2">`x:Type`</ph> markup extension; the short name of the type is   a XAML type, which can be specified as a string.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the .NET Framework XAML Services implementation, the relationship between the input XAML type and the output CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the created array is influenced by service context for markup extensions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The output <ph id="ph1">&lt;xref:System.Type&gt;</ph> is the <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> of the input XAML type, after looking up the necessary <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> based on XAML schema context and the <ph id="ph4">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> service the context provides.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When processed, the array contents are assigned to the <ph id="ph1">`ArrayExtension.Items`</ph> intrinsic property.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.Markup.ArrayExtension&gt;</ph> implementation, this is represented by <ph id="ph2">&lt;xref:System.Windows.Markup.ArrayExtension.Items%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the .NET Framework XAML Services implementation, the handling for this markup extension is defined by the <ph id="ph1">&lt;xref:System.Windows.Markup.ArrayExtension&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.ArrayExtension&gt;</ph> is not sealed, and could be used as the basis for a markup extension implementation for a custom array type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Array`</ph> is more intended for general language extensibility in XAML.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>But <ph id="ph1">`x:Array`</ph> can also be useful for specifying XAML values of certain properties that take XAML-supported collections as their structured property content.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, you could specify the contents of an <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> property with an <ph id="ph2">`x:Array`</ph>usage.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Array`</ph> is a markup extension.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Array`</ph> is partially an exception to that rule because instead of providing alternative attribute value handling, <ph id="ph2">`x:Array`</ph> provides alternative handling of its inner text content.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This behavior enables types that might not be supported by an existing content model to be grouped into an array and referenced later in code-behind by accessing the named array; you can call <ph id="ph1">&lt;xref:System.Array&gt;</ph> methods to get individual array items.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>All markup extensions in XAML use the braces ({,}<ph id="ph1">`)`</ph> in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute value.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about markup extensions in general, see <bpt id="p1">[</bpt>Type Converters and Markup Extensions for XAML<ept id="p1">](../../../docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In XAML 2009, <ph id="ph1">`x:Array`</ph> is defined as a language primitive instead of a markup extension.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Built-in Types for Common XAML Language Primitives<ept id="p1">](../../../docs/framework/xaml-services/built-in-types-for-common-xaml-language-primitives.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Typically, the object elements that populate an <ph id="ph1">`x:Array`</ph> are not elements that exist in the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../includes/tla2sharptla-winclient-md.md)]</ph> XAML namespace, and require a prefix mapping to a non-default XAML namespace.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the following is a simple array of two strings, with the <ph id="ph1">`sys`</ph> prefix (and also <ph id="ph2">`x`</ph>) defined at the level of the array.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>[xaml]</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For custom types that are used as array elements, the class must also support the requirements for being instantiated in XAML as object elements.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML and Custom Classes for WPF<ept id="p1">](../../../docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](../../../docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](../../../docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>