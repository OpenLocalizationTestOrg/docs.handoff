{"content":"---\ntitle: \"Walkthrough: Creating an Extensible Application | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"views [.NET Framework], add-in pipeline\"\n  - \"host-side adapters for add-ins [.NET Framework]\"\n  - \"add-in pipeline [.NET Framework], creating\"\n  - \"add-in-side adapter [.NET Framework]\"\n  - \"contracts for add-in pipelines [.NET Framework]\"\nms.assetid: 694a33c5-a040-450d-aed5-ac49fc88ce61\ncaps.latest.revision: 32\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Walkthrough: Creating an Extensible Application\nThis walkthrough describes how to create a pipeline for an add-in that performs simple calculator functions. It does not demonstrate a real-world scenario; rather, it demonstrates the basic functionality of a pipeline and how an add-in can provide services for a host.  \n  \n This walkthrough describes the following tasks:  \n  \n-   Creating a Visual Studio solution.  \n  \n-   Creating the pipeline directory structure.  \n  \n-   Creating the contract and views.  \n  \n-   Creating the add-in-side adapter.  \n  \n-   Creating the host-side adapter.  \n  \n-   Creating the host.  \n  \n-   Creating the add-in.  \n  \n-   Deploying the pipeline.  \n  \n-   Running the host application.  \n  \n This pipeline passes only serializable types (<xref:System.Double> and <xref:System.String>), between the host and the add-in. For an example that shows how to pass collections of complex data types, see [Walkthrough: Passing Collections Between Hosts and Add-Ins](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5).  \n  \n The contract for this pipeline defines an object model of four arithmetic operations: add, subtract, multiply, and divide. The host provides the add-in with an equation to calculate, such as 2 + 2, and the add-in returns the result to the host.  \n  \n Version 2 of the calculator add-in provides more calculating possibilities and demonstrates versioning. It is described in [Walkthrough: Enabling Backward Compatibility as Your Host Changes](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848).  \n  \n> [!NOTE]\n>  You can find additional sample code, and customer technology previews of tools for building add-in pipelines, at the [Managed Extensibility and Add-In Framework site on CodePlex](http://go.microsoft.com/fwlink/?LinkId=121190).  \n  \n## Prerequisites  \n You need the following to complete this walkthrough:  \n  \n-   [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)].  \n  \n## Creating a Visual Studio Solution  \n Use a solution in [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)] to contain the projects of your pipeline segments.  \n  \n#### To create the pipeline solution  \n  \n1.  In [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)], create a new project named `Calc1Contract`. Base it on the **Class Library** template.  \n  \n2.  Name the solution `CalculatorV1`.  \n  \n## Creating the Pipeline Directory Structure  \n The add-in model requires the pipeline segment assemblies to be placed in a specified directory structure. For more information about the pipeline structure, see [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5).  \n  \n#### To create the pipeline directory structure  \n  \n1.  Create an application folder anywhere on your computer.  \n  \n2.  In that folder, create the following structure:  \n  \n    ```  \n    Pipeline  \n      AddIns  \n        CalcV1  \n        CalcV2  \n      AddInSideAdapters  \n      AddInViews  \n      Contracts  \n      HostSideAdapters  \n    ```  \n  \n     It is not necessary to put the pipeline folder structure in your application folder; it is done here only for convenience. At the appropriate step, the walkthrough explains how to change the code if the pipeline folder structure is in a different location. See the discussion of pipeline directory requirements in [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5).  \n  \n    > [!NOTE]\n    >  The `CalcV2` folder is not used in this walkthrough; it is a placeholder for [Walkthrough: Enabling Backward Compatibility as Your Host Changes](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848).  \n  \n## Creating the Contract and Views  \n The contract segment for this pipeline defines the `ICalc1Contract` interface, which defines four methods: `add`, `subtract`, `multiply`, and `divide`.  \n  \n#### To create the contract  \n  \n1.  In the Visual Studio solution named `CalculatorV1`, open the `Calc1Contract` project.  \n  \n2.  In **Solution Explorer**, add references to the following assemblies to the `Calc1Contract` project:  \n  \n     System.AddIn.Contract.dll  \n  \n     System.AddIn.dll  \n  \n3.  In **Solution Explorer**, exclude the default class that is added to new **Class Library** projects.  \n  \n4.  In **Solution Explorer**, add a new item to the project, using the **Interface** template. In the **Add New Item** dialog box, name the interface `ICalc1Contract`.  \n  \n5.  In the interface file, add namespace references to <xref:System.AddIn.Contract> and <xref:System.AddIn.Pipeline>.  \n  \n6.  Use the following code to complete this contract segment. Note that this interface must have the <xref:System.AddIn.Pipeline.AddInContractAttribute> attribute.  \n  \n     [!code-csharp[AddInP1Contract#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1Contract/cs/ICalc1Contract.cs#1)]\n     [!code-vb[AddInP1Contract#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1Contract/vb/ICalc1Contract.vb#1)]  \n  \n7.  Optionally, build the Visual Studio solution. The solution cannot be run until the final procedure, but building it after each procedure ensures that each project is correct.  \n  \n Because the add-in view and the host view of the add-in usually have the same code, especially in the first version of an add-in, you can easily create the views at the same time. They differ by only one factor: the add-in view requires the <xref:System.AddIn.Pipeline.AddInBaseAttribute> attribute, while the host view of the add-in does not require any attributes.  \n  \n#### To create the add-in view  \n  \n1.  Add a new project named `Calc1AddInView` to the `CalculatorV1` solution. Base it on the **Class Library** template.  \n  \n2.  In **Solution Explorer**, add a reference to System.AddIn.dll to the `Calc1AddInView` project.  \n  \n3.  In **Solution Explorer**, exclude the default class that is added to new **Class Library** projects, and add a new item to the project, using the **Interface** template. In the **Add New Item** dialog box, name the interface `ICalculator`.  \n  \n4.  In the interface file, add a namespace reference to <xref:System.AddIn.Pipeline>.  \n  \n5.  Use the following code to complete this add-in view. Note that this interface must have the <xref:System.AddIn.Pipeline.AddInBaseAttribute> attribute.  \n  \n     [!code-csharp[AddInP1AddInViews#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInViews/cs/Calc1AddInView.cs#1)]\n     [!code-vb[AddInP1AddInViews#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInViews/vb/Calc1AddInView.vb#1)]  \n  \n6.  Optionally, build the Visual Studio solution.  \n  \n#### To create the host view of the add-in  \n  \n1.  Add a new project named `Calc1HVA` to the `CalculatorV1` solution. Base it on the **Class Library** template.  \n  \n2.  In **Solution Explorer**, exclude the default class that is added to new **Class Library** projects, and add a new item to the project, using the **Interface** template. In the **Add New Item** dialog box, name the interface `ICalculator`.  \n  \n3.  In the interface file, use the following code to complete the host view of the add-in.  \n  \n     [!code-csharp[AddInP1HVA#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1HVA/cs/calc1hva.cs#1)]\n     [!code-vb[AddInP1HVA#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1HVA/vb/Calc1HVA.vb#1)]  \n  \n4.  Optionally, build the Visual Studio solution.  \n  \n## Creating the Add-in-side Adapter  \n This add-in-side adapter consists of one view-to-contract adapter. This pipeline segment converts the types from the add-in view to the contract.  \n  \n In this pipeline, the add-in provides a service to the host, and the types flow from the add-in to the host. Because no types flow from the host to the add-in, you do not have to include a contract-to-view adapter on the add-in side of this pipeline.  \n  \n#### To create the add-in-side adapter  \n  \n1.  Add a new project named `Calc1AddInSideAdapter` to the `CalculatorV1` solution. Base it on the **Class Library** template.  \n  \n2.  In **Solution Explorer**, add references to the following assemblies to the `Calc1AddInSideAdapter` project:  \n  \n     System.AddIn.dll  \n  \n     System.AddIn.Contract.dll  \n  \n3.  Add project references to the projects for the adjacent pipeline segments:  \n  \n     `Calc1AddInView`  \n  \n     `Calc1Contract`  \n  \n4.  Select each project reference, and in **Properties** set **Copy Local** to **False**. In Visual Basic, use the **References** tab of **Project Properties** to set **Copy Local** to **False** for the two project references.  \n  \n5.  Rename the project's default class `CalculatorViewToContractAddInSideAdapter`.  \n  \n6.  In the class file, add namespace references to <xref:System.AddIn.Pipeline>.  \n  \n7.  In the class file, add namespace references for the adjacent segments: `CalcAddInViews` and `CalculatorContracts`. (In Visual Basic, these namespace references are `Calc1AddInView.CalcAddInViews` and `Calc1Contract.CalculatorContracts`, unless you have turned off the default namespaces in your Visual Basic projects.)  \n  \n8.  Apply the <xref:System.AddIn.Pipeline.AddInAdapterAttribute> attribute to the `CalculatorViewToContractAddInSideAdapter` class, to identify it as the add-in-side adapter.  \n  \n9. Make the `CalculatorViewToContractAddInSideAdapter` class inherit <xref:System.AddIn.Pipeline.ContractBase>, which provides a default implementation of the <xref:System.AddIn.Contract.IContract> interface, and implement the contract interface for the pipeline, `ICalc1Contract`.  \n  \n10. Add a public constructor that accepts an `ICalculator`, caches it in a private field, and calls the base class constructor.  \n  \n11. To implement the members of `ICalc1Contract`, simply call the corresponding members of the `ICalculator` instance that is passed to the constructor, and return the results. This adapts the view (`ICalculator`) to the contract (`ICalc1Contract`).  \n  \n     The following code shows the completed add-in-side adapter.  \n  \n     [!code-csharp[AddInP1AddInSideAdapters#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInSideAdapters/cs/Calc1ViewToContractAddInSideAdapter.cs#1)]\n     [!code-vb[AddInP1AddInSideAdapters#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInSideAdapters/vb/Calc1ViewToContractAddInSideAdapter.vb#1)]  \n  \n12. Optionally, build the Visual Studio solution.  \n  \n## Creating the Host-side Adapter  \n This host-side adapter consists of one contract-to-view adapter. This segment adapts the contract to the host view of the add-in.  \n  \n In this pipeline, the add-in provides a service to the host and the types flow from the add-in to the host. Because no types flow from the host to the add-in, you do not have to include a view-to-contract adapter.  \n  \n To implement lifetime management, use a <xref:System.AddIn.Pipeline.ContractHandle> object to attach a lifetime token to the contract. You must keep a reference to this handle in order for lifetime management to work. After the token is applied, no additional programming is required because the add-in system can dispose of objects when they are no longer being used and make them available for garbage collection. For more information, see [Lifetime Management](http://msdn.microsoft.com/en-us/57a9c87e-394c-4fef-89f2-aa4223a2aeb5).  \n  \n#### To create the host-side adapter  \n  \n1.  Add a new project named `Calc1HostSideAdapter` to the `CalculatorV1` solution. Base it on the **Class Library** template.  \n  \n2.  In **Solution Explorer**, add references to the following assemblies to the `Calc1HostSideAdapter` project:  \n  \n     System.AddIn.dll  \n  \n     System.AddIn.Contract.dll  \n  \n3.  Add project references to the projects for the adjacent segments:  \n  \n     `Calc1Contract`  \n  \n     `Calc1HVA`  \n  \n4.  Select each project reference, and in **Properties** set **Copy Local** to **False**. In Visual Basic, use the **References** tab of **Project Properties** to set **Copy Local** to **False** for the two project references.  \n  \n5.  Rename the project's default class `CalculatorContractToViewHostSideAdapter`.  \n  \n6.  In the class file, add namespace references to <xref:System.AddIn.Pipeline>.  \n  \n7.  In the class file, add namespace references for the adjacent segments: `CalcHVAs` and `CalculatorContracts`. (In Visual Basic, these namespace references are `Calc1HVA.CalcHVAs` and `Calc1Contract.CalculatorContracts`, unless you have turned off the default namespaces in your Visual Basic projects.)  \n  \n8.  Apply the <xref:System.AddIn.Pipeline.HostAdapterAttribute> attribute to the `CalculatorContractToViewHostSideAdapter` class, to identify it as the host-side adapter segment.  \n  \n9. Make the `CalculatorContractToViewHostSideAdapter` class implement the interface that represents the host view of the add-in: `Calc1HVAs.ICalculator` (`Calc1HVA.CalcHVAs.ICalculator` in Visual Basic).  \n  \n10. Add a public constructor that accepts the pipeline contract type, `ICalc1Contract`. The constructor must cache the reference to the contract. It must also create and cache a new <xref:System.AddIn.Pipeline.ContractHandle> for the contract, to manage the lifetime of the add-in.  \n  \n    > [!IMPORTANT]\n    >  The <xref:System.AddIn.Pipeline.ContractHandle> is critical to lifetime management. If you fail to keep a reference to the <xref:System.AddIn.Pipeline.ContractHandle> object, garbage collection will reclaim it, and the pipeline will shut down when your program does not expect it. This can lead to errors that are difficult to diagnose, such as <xref:System.AppDomainUnloadedException>. Shutdown is a normal stage in the life of a pipeline, so there is no way for the lifetime management code to detect that this condition is an error.  \n  \n11. To implement the members of `ICalculator`, simply call the corresponding members of the `ICalc1Contract` instance that is passed to the constructor, and return the results. This adapts the contract (`ICalc1Contract`) to the view (`ICalculator`).  \n  \n     The following code shows the completed host-side adapter.  \n  \n     [!code-csharp[AddInP1HostSideAdapters#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1HostSideAdapters/cs/Calc1ContractToViewHostSideAdapter.cs#1)]\n     [!code-vb[AddInP1HostSideAdapters#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1HostSideAdapters/vb/Calc1ContractToViewHostSideAdapter.vb#1)]  \n  \n12. Optionally, build the Visual Studio solution.  \n  \n## Creating the Host  \n A host application interacts with the add-in through the host view of the add-in. It uses add-in discovery and activation methods provided by the <xref:System.AddIn.Hosting.AddInStore> and <xref:System.AddIn.Hosting.AddInToken> classes to do the following:  \n  \n-   Update the cache of pipeline and add-in information.  \n  \n-   Find add-ins of the host view type, `ICalculator`, under the specified pipeline root directory.  \n  \n-   Prompt the user to specify which add-in to use.  \n  \n-   Activate the selected add-in in a new application domain with a specified security trust level.  \n  \n-   Run the custom `RunCalculator` method, which calls the add-in's methods as specified by the host view of the add-in.  \n  \n#### To create the host  \n  \n1.  Add a new project named `Calc1Host` to the `CalculatorV1` solution. Base it on the **Console Application** template.  \n  \n2.  In **Solution Explorer**, add a reference to the System.AddIn.dll assembly to the `Calc1Host` project.  \n  \n3.  Add a project reference to the `Calc1HVA` project. Select the project reference, and in **Properties** set **Copy Local** to **False**. In Visual Basic, use the **References** tab of **Project Properties** to set **Copy Local** to **False**.  \n  \n4.  Rename the class file (module in Visual Basic) `MathHost1`.  \n  \n5.  In Visual Basic, use the **Application** tab of the **Project Properties** dialog box to set **Startup object** to **Sub Main**.  \n  \n6.  In the class or module file, add a namespace reference to <xref:System.AddIn.Hosting>.  \n  \n7.  In the class or module file, add a namespace reference for the host view of the add-in: `CalcHVAs`. (In Visual Basic, this namespace reference is `Calc1HVA.CalcHVAs`, unless you have turned off the default namespaces in your Visual Basic projects.)  \n  \n8.  In **Solution Explorer**, select the solution and from the **Project** menu choose **Properties**. In the **Solution Property Pages** dialog box, set the **Single Startup Project** to be this host application project.  \n  \n9. In the class or module file, use the <xref:System.AddIn.Hosting.AddInStore.Update%2A?displayProperty=fullName> method to update the cache. Use the <xref:System.AddIn.Hosting.AddInStore.FindAddIn%2A?displayProperty=fullName> method to get a collection of tokens, and use the <xref:System.AddIn.Hosting.AddInToken.Activate%2A?displayProperty=fullName> method to activate an add-in.  \n  \n     The following code shows the completed host application.  \n  \n     [!code-csharp[AddInP1Host#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1Host/cs/MathHost1.cs#1)]\n     [!code-vb[AddInP1Host#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1Host/vb/MathHost1.vb#1)]  \n  \n    > [!NOTE]\n    >  This code assumes that the pipeline folder structure is located in the application folder. If you located it elsewhere, change the line of code that sets the `addInRoot` variable, so that the variable contains the path to your pipeline directory structure.  \n  \n     The code uses a `ChooseCalculator` method to list the tokens and to prompt the user to choose an add-in. The `RunCalculator` method prompts the user for simple math expressions, parses the expressions using the `Parser` class, and displays the results returned by the add-in.  \n  \n10. Optionally, build the Visual Studio solution.  \n  \n## Creating the Add-In  \n An add-in implements the methods specified by the add-in view. This add-in implements the `Add`, `Subtract`, `Multiply`, and `Divide` operations and returns the results to the host.  \n  \n#### To create the add-in  \n  \n1.  Add a new project named `AddInCalcV1` to the `CalculatorV1` solution. Base it on the **Class Library** template.  \n  \n2.  In **Solution Explorer**, add a reference to the System.AddIn.dll assembly to the project.  \n  \n3.  Add a project reference to the `Calc1AddInView` project. Select the project reference, and in **Properties**, set **Copy Local** to **False**. In Visual Basic, use the **References** tab of **Project Properties** to set **Copy Local** to **False** for the project reference.  \n  \n4.  Rename the class `AddInCalcV1`.  \n  \n5.  In the class file, add a namespace reference to <xref:System.AddIn> and the add-in view segment: `CalcAddInViews` (`Calc1AddInView.CalcAddInViews` in Visual Basic).  \n  \n6.  Apply the <xref:System.AddIn.AddInAttribute> attribute to the `AddInCalcV1` class, to identify the class as an add-in.  \n  \n7.  Make the `AddInCalcV1` class implement the interface that represents the add-in view: `CalcAddInViews.ICalculator` (`Calc1AddInView.CalcAddInViews.ICalculator` in Visual Basic).  \n  \n8.  Implement the members of `ICalculator` by returning the results of the appropriate calculations.  \n  \n     The following code shows the completed add-in.  \n  \n     [!code-csharp[AddInP1AddInCalcV1#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInCalcV1/cs/AddInCalcV1.cs#1)]\n     [!code-vb[AddInP1AddInCalcV1#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInCalcV1/vb/AddInCalcV1.vb#1)]  \n  \n9. Optionally, build the Visual Studio solution.  \n  \n## Deploying the Pipeline  \n You are now ready to build and deploy the add-in segments to the required pipeline directory structure.  \n  \n#### To deploy the segments to the pipeline  \n  \n1.  For each project in the solution, use the **Build** tab of **Project Properties** (the **Compile** tab in Visual Basic) to set the value of the **Output path** (the **Build output path** in Visual Basic). If you named your application folder `MyApp`, for example, your projects would build into the following folders:  \n  \n    |Project|Path|  \n    |-------------|----------|  \n    |AddInCalcV1|MyApp\\Pipeline\\AddIns\\CalcV1|  \n    |Calc1AddInSideAdapter|MyApp\\Pipeline\\AddInSideAdapters|  \n    |Calc1AddInView|MyApp\\Pipeline\\AddInViews|  \n    |Calc1Contract|MyApp\\Pipeline\\Contracts|  \n    |Calc1Host|MyApp|  \n    |Calc1HostSideAdapter|MyApp\\Pipeline\\HostSideAdapters|  \n    |Calc1HVA|MyApp|  \n  \n    > [!NOTE]\n    >  If you decided to put your pipeline folder structure in a location other than your application folder, you must modify the paths shown in the table accordingly. See the discussion of pipeline directory requirements in [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5).  \n  \n2.  Build the Visual Studio solution.  \n  \n3.  Check the application and pipeline directories to ensure that the assemblies were copied to the correct directories and that no extra copies of assemblies were installed in the wrong folders.  \n  \n    > [!NOTE]\n    >  If you did not change **Copy Local** to **False** for the `Calc1AddInView` project reference in the `AddInCalcV1` project, loader context problems will prevent the add-in from being located.  \n  \n     For information about deploying to the pipeline, see [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5).  \n  \n## Running the Host Application  \n You are now ready to run the host and interact with the add-in.  \n  \n#### To run the host application  \n  \n1.  At the command prompt, go to the application directory and run the host application, `Calc1Host.exe`.  \n  \n2.  The host finds all available add-ins of its type and prompts you to select an add-in. Enter **1** for the only available add-in.  \n  \n3.  Enter an equation for the calculator, such as **2 + 2**. There must be spaces between the numbers and the operator.  \n  \n4.  Type **exit** and press the **Enter** key to close the application.  \n  \n## See Also  \n [Walkthrough: Enabling Backward Compatibility as Your Host Changes](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848)   \n [Walkthrough: Passing Collections Between Hosts and Add-Ins](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5)   \n [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)   \n [Contracts, Views, and Adapters](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c)   \n [Pipeline Development](../../../docs/framework/add-ins/pipeline-development.md)","nodes":[{"pos":[4,641],"embed":true,"restype":"x-metadata","content":"title: \"Walkthrough: Creating an Extensible Application | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"views [.NET Framework], add-in pipeline\"\n  - \"host-side adapters for add-ins [.NET Framework]\"\n  - \"add-in pipeline [.NET Framework], creating\"\n  - \"add-in-side adapter [.NET Framework]\"\n  - \"contracts for add-in pipelines [.NET Framework]\"\nms.assetid: 694a33c5-a040-450d-aed5-ac49fc88ce61\ncaps.latest.revision: 32\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"Walkthrough: Creating an Extensible Application | Microsoft Docs","nodes":[{"pos":[0,64],"content":"Walkthrough: Creating an Extensible Application | Microsoft Docs","nodes":[{"content":"Walkthrough: Creating an Extensible Application | Microsoft Docs","pos":[0,64]}]}],"path":["title"]}],"yml":true},{"pos":[648,695],"content":"Walkthrough: Creating an Extensible Application","linkify":"Walkthrough: Creating an Extensible Application","nodes":[{"content":"Walkthrough: Creating an Extensible Application","pos":[0,47]}]},{"content":"This walkthrough describes how to create a pipeline for an add-in that performs simple calculator functions.","pos":[696,804]},{"content":"It does not demonstrate a real-world scenario; rather, it demonstrates the basic functionality of a pipeline and how an add-in can provide services for a host.","pos":[805,964]},{"content":"This walkthrough describes the following tasks:","pos":[971,1018]},{"content":"Creating a Visual Studio solution.","pos":[1028,1062]},{"content":"Creating the pipeline directory structure.","pos":[1072,1114]},{"content":"Creating the contract and views.","pos":[1124,1156]},{"content":"Creating the add-in-side adapter.","pos":[1166,1199]},{"content":"Creating the host-side adapter.","pos":[1209,1240]},{"content":"Creating the host.","pos":[1250,1268]},{"content":"Creating the add-in.","pos":[1278,1298]},{"content":"Deploying the pipeline.","pos":[1308,1331]},{"content":"Running the host application.","pos":[1341,1370]},{"content":"This pipeline passes only serializable types (<ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>), between the host and the add-in.","pos":[1377,1503],"source":"This pipeline passes only serializable types (<xref:System.Double> and <xref:System.String>), between the host and the add-in."},{"content":"For an example that shows how to pass collections of complex data types, see <bpt id=\"p1\">[</bpt>Walkthrough: Passing Collections Between Hosts and Add-Ins<ept id=\"p1\">](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5)</ept>.","pos":[1504,1712],"source":" For an example that shows how to pass collections of complex data types, see [Walkthrough: Passing Collections Between Hosts and Add-Ins](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5)."},{"content":"The contract for this pipeline defines an object model of four arithmetic operations: add, subtract, multiply, and divide.","pos":[1719,1841]},{"content":"The host provides the add-in with an equation to calculate, such as 2 + 2, and the add-in returns the result to the host.","pos":[1842,1963]},{"content":"Version 2 of the calculator add-in provides more calculating possibilities and demonstrates versioning.","pos":[1970,2073]},{"content":"It is described in <bpt id=\"p1\">[</bpt>Walkthrough: Enabling Backward Compatibility as Your Host Changes<ept id=\"p1\">](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848)</ept>.","pos":[2074,2231],"source":" It is described in [Walkthrough: Enabling Backward Compatibility as Your Host Changes](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848)."},{"pos":[2239,2476],"content":"[!NOTE]\n You can find additional sample code, and customer technology previews of tools for building add-in pipelines, at the [Managed Extensibility and Add-In Framework site on CodePlex](http://go.microsoft.com/fwlink/?LinkId=121190).","leadings":["","> "],"nodes":[{"content":"You can find additional sample code, and customer technology previews of tools for building add-in pipelines, at the <bpt id=\"p1\">[</bpt>Managed Extensibility and Add-In Framework site on CodePlex<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=121190)</ept>.","pos":[9,235],"source":"You can find additional sample code, and customer technology previews of tools for building add-in pipelines, at the [Managed Extensibility and Add-In Framework site on CodePlex](http://go.microsoft.com/fwlink/?LinkId=121190)."}]},{"pos":[2485,2498],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"You need the following to complete this walkthrough:","pos":[2502,2554]},{"pos":[2564,2615],"content":"<ph id=\"ph1\">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph>.","source":"[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]."},{"pos":[2624,2657],"content":"Creating a Visual Studio Solution","linkify":"Creating a Visual Studio Solution","nodes":[{"content":"Creating a Visual Studio Solution","pos":[0,33]}]},{"pos":[2661,2780],"content":"Use a solution in <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> to contain the projects of your pipeline segments.","source":"Use a solution in [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)] to contain the projects of your pipeline segments."},{"pos":[2791,2822],"content":"To create the pipeline solution","linkify":"To create the pipeline solution","nodes":[{"content":"To create the pipeline solution","pos":[0,31]}]},{"content":"In <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph>, create a new project named <ph id=\"ph2\">`Calc1Contract`</ph>.","pos":[2832,2930],"source":"In [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)], create a new project named `Calc1Contract`."},{"content":"Base it on the <bpt id=\"p1\">**</bpt>Class Library<ept id=\"p1\">**</ept> template.","pos":[2931,2973],"source":" Base it on the **Class Library** template."},{"pos":[2983,3016],"content":"Name the solution <ph id=\"ph1\">`CalculatorV1`</ph>.","source":"Name the solution `CalculatorV1`."},{"pos":[3025,3066],"content":"Creating the Pipeline Directory Structure","linkify":"Creating the Pipeline Directory Structure","nodes":[{"content":"Creating the Pipeline Directory Structure","pos":[0,41]}]},{"content":"The add-in model requires the pipeline segment assemblies to be placed in a specified directory structure.","pos":[3070,3176]},{"content":"For more information about the pipeline structure, see <bpt id=\"p1\">[</bpt>Pipeline Development Requirements<ept id=\"p1\">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept>.","pos":[3177,3338],"source":" For more information about the pipeline structure, see [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)."},{"pos":[3349,3391],"content":"To create the pipeline directory structure","linkify":"To create the pipeline directory structure","nodes":[{"content":"To create the pipeline directory structure","pos":[0,42]}]},{"content":"Create an application folder anywhere on your computer.","pos":[3401,3456]},{"content":"In that folder, create the following structure:","pos":[3466,3513]},{"content":"It is not necessary to put the pipeline folder structure in your application folder; it is done here only for convenience.","pos":[3699,3821]},{"content":"At the appropriate step, the walkthrough explains how to change the code if the pipeline folder structure is in a different location.","pos":[3822,3955]},{"content":"See the discussion of pipeline directory requirements in <bpt id=\"p1\">[</bpt>Pipeline Development Requirements<ept id=\"p1\">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept>.","pos":[3956,4119],"source":" See the discussion of pipeline directory requirements in [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)."},{"pos":[4131,4361],"content":"[!NOTE]\nThe `CalcV2` folder is not used in this walkthrough; it is a placeholder for [Walkthrough: Enabling Backward Compatibility as Your Host Changes](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848).","leadings":["","    >  "],"nodes":[{"content":"The <ph id=\"ph1\">`CalcV2`</ph> folder is not used in this walkthrough; it is a placeholder for <bpt id=\"p1\">[</bpt>Walkthrough: Enabling Backward Compatibility as Your Host Changes<ept id=\"p1\">](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848)</ept>.","pos":[8,223],"source":"The `CalcV2` folder is not used in this walkthrough; it is a placeholder for [Walkthrough: Enabling Backward Compatibility as Your Host Changes](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848)."}]},{"pos":[4370,4401],"content":"Creating the Contract and Views","linkify":"Creating the Contract and Views","nodes":[{"content":"Creating the Contract and Views","pos":[0,31]}]},{"pos":[4405,4556],"content":"The contract segment for this pipeline defines the <ph id=\"ph1\">`ICalc1Contract`</ph> interface, which defines four methods: <ph id=\"ph2\">`add`</ph>, <ph id=\"ph3\">`subtract`</ph>, <ph id=\"ph4\">`multiply`</ph>, and <ph id=\"ph5\">`divide`</ph>.","source":"The contract segment for this pipeline defines the `ICalc1Contract` interface, which defines four methods: `add`, `subtract`, `multiply`, and `divide`."},{"pos":[4567,4589],"content":"To create the contract","linkify":"To create the contract","nodes":[{"content":"To create the contract","pos":[0,22]}]},{"pos":[4599,4684],"content":"In the Visual Studio solution named <ph id=\"ph1\">`CalculatorV1`</ph>, open the <ph id=\"ph2\">`Calc1Contract`</ph> project.","source":"In the Visual Studio solution named `CalculatorV1`, open the `Calc1Contract` project."},{"pos":[4694,4794],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, add references to the following assemblies to the <ph id=\"ph1\">`Calc1Contract`</ph> project:","source":"In **Solution Explorer**, add references to the following assemblies to the `Calc1Contract` project:"},{"content":"System.AddIn.Contract.dll","pos":[4805,4830]},{"content":"System.AddIn.dll","pos":[4841,4857]},{"pos":[4867,4967],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, exclude the default class that is added to new <bpt id=\"p2\">**</bpt>Class Library<ept id=\"p2\">**</ept> projects.","source":"In **Solution Explorer**, exclude the default class that is added to new **Class Library** projects."},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, add a new item to the project, using the <bpt id=\"p2\">**</bpt>Interface<ept id=\"p2\">**</ept> template.","pos":[4977,5067],"source":"In **Solution Explorer**, add a new item to the project, using the **Interface** template."},{"content":"In the <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialog box, name the interface <ph id=\"ph1\">`ICalc1Contract`</ph>.","pos":[5068,5140],"source":" In the **Add New Item** dialog box, name the interface `ICalc1Contract`."},{"content":"In the interface file, add namespace references to <ph id=\"ph1\">&lt;xref:System.AddIn.Contract&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AddIn.Pipeline&gt;</ph>.","pos":[5150,5263],"source":"In the interface file, add namespace references to <xref:System.AddIn.Contract> and <xref:System.AddIn.Pipeline>."},{"content":"Use the following code to complete this contract segment.","pos":[5273,5330]},{"content":"Note that this interface must have the <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.AddInContractAttribute&gt;</ph> attribute.","pos":[5331,5432],"source":" Note that this interface must have the <xref:System.AddIn.Pipeline.AddInContractAttribute> attribute."},{"pos":[5443,5694],"content":"[!code-csharp[AddInP1Contract#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1Contract/cs/ICalc1Contract.cs#1)]\n [!code-vb[AddInP1Contract#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1Contract/vb/ICalc1Contract.vb#1)]","leadings":["","    "],"nodes":[{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>AddInP1Contract#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1Contract/cs/ICalc1Contract.cs#1)</ept><ept id=\"p1\">]</ept>","pos":[0,122],"source":"[!code-csharp[AddInP1Contract#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1Contract/cs/ICalc1Contract.cs#1)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>AddInP1Contract#1<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1Contract/vb/ICalc1Contract.vb#1)</ept><ept id=\"p1\">]</ept>","pos":[124,247],"source":"[!code-vb[AddInP1Contract#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1Contract/vb/ICalc1Contract.vb#1)]"}]},{"content":"Optionally, build the Visual Studio solution.","pos":[5704,5749]},{"content":"The solution cannot be run until the final procedure, but building it after each procedure ensures that each project is correct.","pos":[5750,5878]},{"content":"Because the add-in view and the host view of the add-in usually have the same code, especially in the first version of an add-in, you can easily create the views at the same time.","pos":[5885,6064]},{"content":"They differ by only one factor: the add-in view requires the <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.AddInBaseAttribute&gt;</ph> attribute, while the host view of the add-in does not require any attributes.","pos":[6065,6251],"source":" They differ by only one factor: the add-in view requires the <xref:System.AddIn.Pipeline.AddInBaseAttribute> attribute, while the host view of the add-in does not require any attributes."},{"pos":[6262,6287],"content":"To create the add-in view","linkify":"To create the add-in view","nodes":[{"content":"To create the add-in view","pos":[0,25]}]},{"content":"Add a new project named <ph id=\"ph1\">`Calc1AddInView`</ph> to the <ph id=\"ph2\">`CalculatorV1`</ph> solution.","pos":[6297,6369],"source":"Add a new project named `Calc1AddInView` to the `CalculatorV1` solution."},{"content":"Base it on the <bpt id=\"p1\">**</bpt>Class Library<ept id=\"p1\">**</ept> template.","pos":[6370,6412],"source":" Base it on the **Class Library** template."},{"pos":[6422,6516],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, add a reference to System.AddIn.dll to the <ph id=\"ph1\">`Calc1AddInView`</ph> project.","source":"In **Solution Explorer**, add a reference to System.AddIn.dll to the `Calc1AddInView` project."},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, exclude the default class that is added to new <bpt id=\"p2\">**</bpt>Class Library<ept id=\"p2\">**</ept> projects, and add a new item to the project, using the <bpt id=\"p3\">**</bpt>Interface<ept id=\"p3\">**</ept> template.","pos":[6526,6695],"source":"In **Solution Explorer**, exclude the default class that is added to new **Class Library** projects, and add a new item to the project, using the **Interface** template."},{"content":"In the <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialog box, name the interface <ph id=\"ph1\">`ICalculator`</ph>.","pos":[6696,6765],"source":" In the **Add New Item** dialog box, name the interface `ICalculator`."},{"content":"In the interface file, add a namespace reference to <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline&gt;</ph>.","pos":[6775,6856],"source":"In the interface file, add a namespace reference to <xref:System.AddIn.Pipeline>."},{"content":"Use the following code to complete this add-in view.","pos":[6866,6918]},{"content":"Note that this interface must have the <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.AddInBaseAttribute&gt;</ph> attribute.","pos":[6919,7016],"source":" Note that this interface must have the <xref:System.AddIn.Pipeline.AddInBaseAttribute> attribute."},{"pos":[7027,7286],"content":"[!code-csharp[AddInP1AddInViews#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInViews/cs/Calc1AddInView.cs#1)]\n [!code-vb[AddInP1AddInViews#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInViews/vb/Calc1AddInView.vb#1)]","leadings":["","    "],"nodes":[{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>AddInP1AddInViews#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInViews/cs/Calc1AddInView.cs#1)</ept><ept id=\"p1\">]</ept>","pos":[0,126],"source":"[!code-csharp[AddInP1AddInViews#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInViews/cs/Calc1AddInView.cs#1)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>AddInP1AddInViews#1<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInViews/vb/Calc1AddInView.vb#1)</ept><ept id=\"p1\">]</ept>","pos":[128,255],"source":"[!code-vb[AddInP1AddInViews#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInViews/vb/Calc1AddInView.vb#1)]"}]},{"content":"Optionally, build the Visual Studio solution.","pos":[7296,7341]},{"pos":[7352,7389],"content":"To create the host view of the add-in","linkify":"To create the host view of the add-in","nodes":[{"content":"To create the host view of the add-in","pos":[0,37]}]},{"content":"Add a new project named <ph id=\"ph1\">`Calc1HVA`</ph> to the <ph id=\"ph2\">`CalculatorV1`</ph> solution.","pos":[7399,7465],"source":"Add a new project named `Calc1HVA` to the `CalculatorV1` solution."},{"content":"Base it on the <bpt id=\"p1\">**</bpt>Class Library<ept id=\"p1\">**</ept> template.","pos":[7466,7508],"source":" Base it on the **Class Library** template."},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, exclude the default class that is added to new <bpt id=\"p2\">**</bpt>Class Library<ept id=\"p2\">**</ept> projects, and add a new item to the project, using the <bpt id=\"p3\">**</bpt>Interface<ept id=\"p3\">**</ept> template.","pos":[7518,7687],"source":"In **Solution Explorer**, exclude the default class that is added to new **Class Library** projects, and add a new item to the project, using the **Interface** template."},{"content":"In the <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialog box, name the interface <ph id=\"ph1\">`ICalculator`</ph>.","pos":[7688,7757],"source":" In the **Add New Item** dialog box, name the interface `ICalculator`."},{"content":"In the interface file, use the following code to complete the host view of the add-in.","pos":[7767,7853]},{"pos":[7864,8083],"content":"[!code-csharp[AddInP1HVA#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1HVA/cs/calc1hva.cs#1)]\n [!code-vb[AddInP1HVA#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1HVA/vb/Calc1HVA.vb#1)]","leadings":["","    "],"nodes":[{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>AddInP1HVA#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1HVA/cs/calc1hva.cs#1)</ept><ept id=\"p1\">]</ept>","pos":[0,106],"source":"[!code-csharp[AddInP1HVA#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1HVA/cs/calc1hva.cs#1)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>AddInP1HVA#1<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1HVA/vb/Calc1HVA.vb#1)</ept><ept id=\"p1\">]</ept>","pos":[108,215],"source":"[!code-vb[AddInP1HVA#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1HVA/vb/Calc1HVA.vb#1)]"}]},{"content":"Optionally, build the Visual Studio solution.","pos":[8093,8138]},{"pos":[8147,8179],"content":"Creating the Add-in-side Adapter","linkify":"Creating the Add-in-side Adapter","nodes":[{"content":"Creating the Add-in-side Adapter","pos":[0,32]}]},{"content":"This add-in-side adapter consists of one view-to-contract adapter.","pos":[8183,8249]},{"content":"This pipeline segment converts the types from the add-in view to the contract.","pos":[8250,8328]},{"content":"In this pipeline, the add-in provides a service to the host, and the types flow from the add-in to the host.","pos":[8335,8443]},{"content":"Because no types flow from the host to the add-in, you do not have to include a contract-to-view adapter on the add-in side of this pipeline.","pos":[8444,8585]},{"pos":[8596,8629],"content":"To create the add-in-side adapter","linkify":"To create the add-in-side adapter","nodes":[{"content":"To create the add-in-side adapter","pos":[0,33]}]},{"content":"Add a new project named <ph id=\"ph1\">`Calc1AddInSideAdapter`</ph> to the <ph id=\"ph2\">`CalculatorV1`</ph> solution.","pos":[8639,8718],"source":"Add a new project named `Calc1AddInSideAdapter` to the `CalculatorV1` solution."},{"content":"Base it on the <bpt id=\"p1\">**</bpt>Class Library<ept id=\"p1\">**</ept> template.","pos":[8719,8761],"source":" Base it on the **Class Library** template."},{"pos":[8771,8879],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, add references to the following assemblies to the <ph id=\"ph1\">`Calc1AddInSideAdapter`</ph> project:","source":"In **Solution Explorer**, add references to the following assemblies to the `Calc1AddInSideAdapter` project:"},{"content":"System.AddIn.dll","pos":[8890,8906]},{"content":"System.AddIn.Contract.dll","pos":[8917,8942]},{"content":"Add project references to the projects for the adjacent pipeline segments:","pos":[8952,9026]},{"content":"Select each project reference, and in <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> set <bpt id=\"p2\">**</bpt>Copy Local<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>False<ept id=\"p3\">**</ept>.","pos":[9089,9174],"source":"Select each project reference, and in **Properties** set **Copy Local** to **False**."},{"content":"In Visual Basic, use the <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept> tab of <bpt id=\"p2\">**</bpt>Project Properties<ept id=\"p2\">**</ept> to set <bpt id=\"p3\">**</bpt>Copy Local<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>False<ept id=\"p4\">**</ept> for the two project references.","pos":[9175,9311],"source":" In Visual Basic, use the **References** tab of **Project Properties** to set **Copy Local** to **False** for the two project references."},{"pos":[9321,9399],"content":"Rename the project's default class <ph id=\"ph1\">`CalculatorViewToContractAddInSideAdapter`</ph>.","source":"Rename the project's default class `CalculatorViewToContractAddInSideAdapter`."},{"content":"In the class file, add namespace references to <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline&gt;</ph>.","pos":[9409,9485],"source":"In the class file, add namespace references to <xref:System.AddIn.Pipeline>."},{"content":"In the class file, add namespace references for the adjacent segments: <ph id=\"ph1\">`CalcAddInViews`</ph> and <ph id=\"ph2\">`CalculatorContracts`</ph>.","pos":[9495,9609],"source":"In the class file, add namespace references for the adjacent segments: `CalcAddInViews` and `CalculatorContracts`."},{"content":"(In Visual Basic, these namespace references are <ph id=\"ph1\">`Calc1AddInView.CalcAddInViews`</ph> and <ph id=\"ph2\">`Calc1Contract.CalculatorContracts`</ph>, unless you have turned off the default namespaces in your Visual Basic projects.)","pos":[9610,9813],"source":" (In Visual Basic, these namespace references are `Calc1AddInView.CalcAddInViews` and `Calc1Contract.CalculatorContracts`, unless you have turned off the default namespaces in your Visual Basic projects.)"},{"pos":[9823,9993],"content":"Apply the <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.AddInAdapterAttribute&gt;</ph> attribute to the <ph id=\"ph2\">`CalculatorViewToContractAddInSideAdapter`</ph> class, to identify it as the add-in-side adapter.","source":"Apply the <xref:System.AddIn.Pipeline.AddInAdapterAttribute> attribute to the `CalculatorViewToContractAddInSideAdapter` class, to identify it as the add-in-side adapter."},{"pos":[10002,10280],"content":"Make the <ph id=\"ph1\">`CalculatorViewToContractAddInSideAdapter`</ph> class inherit <ph id=\"ph2\">&lt;xref:System.AddIn.Pipeline.ContractBase&gt;</ph>, which provides a default implementation of the <ph id=\"ph3\">&lt;xref:System.AddIn.Contract.IContract&gt;</ph> interface, and implement the contract interface for the pipeline, <ph id=\"ph4\">`ICalc1Contract`</ph>.","source":"Make the `CalculatorViewToContractAddInSideAdapter` class inherit <xref:System.AddIn.Pipeline.ContractBase>, which provides a default implementation of the <xref:System.AddIn.Contract.IContract> interface, and implement the contract interface for the pipeline, `ICalc1Contract`."},{"pos":[10290,10413],"content":"Add a public constructor that accepts an <ph id=\"ph1\">`ICalculator`</ph>, caches it in a private field, and calls the base class constructor.","source":"Add a public constructor that accepts an `ICalculator`, caches it in a private field, and calls the base class constructor."},{"content":"To implement the members of <ph id=\"ph1\">`ICalc1Contract`</ph>, simply call the corresponding members of the <ph id=\"ph2\">`ICalculator`</ph> instance that is passed to the constructor, and return the results.","pos":[10423,10595],"source":"To implement the members of `ICalc1Contract`, simply call the corresponding members of the `ICalculator` instance that is passed to the constructor, and return the results."},{"content":"This adapts the view (<ph id=\"ph1\">`ICalculator`</ph>) to the contract (<ph id=\"ph2\">`ICalc1Contract`</ph>).","pos":[10596,10668],"source":" This adapts the view (`ICalculator`) to the contract (`ICalc1Contract`)."},{"content":"The following code shows the completed add-in-side adapter.","pos":[10679,10738]},{"pos":[10749,11078],"content":"[!code-csharp[AddInP1AddInSideAdapters#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInSideAdapters/cs/Calc1ViewToContractAddInSideAdapter.cs#1)]\n [!code-vb[AddInP1AddInSideAdapters#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInSideAdapters/vb/Calc1ViewToContractAddInSideAdapter.vb#1)]","leadings":["","    "],"nodes":[{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>AddInP1AddInSideAdapters#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInSideAdapters/cs/Calc1ViewToContractAddInSideAdapter.cs#1)</ept><ept id=\"p1\">]</ept>","pos":[0,161],"source":"[!code-csharp[AddInP1AddInSideAdapters#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInSideAdapters/cs/Calc1ViewToContractAddInSideAdapter.cs#1)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>AddInP1AddInSideAdapters#1<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInSideAdapters/vb/Calc1ViewToContractAddInSideAdapter.vb#1)</ept><ept id=\"p1\">]</ept>","pos":[163,325],"source":"[!code-vb[AddInP1AddInSideAdapters#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInSideAdapters/vb/Calc1ViewToContractAddInSideAdapter.vb#1)]"}]},{"content":"Optionally, build the Visual Studio solution.","pos":[11088,11133]},{"pos":[11142,11172],"content":"Creating the Host-side Adapter","linkify":"Creating the Host-side Adapter","nodes":[{"content":"Creating the Host-side Adapter","pos":[0,30]}]},{"content":"This host-side adapter consists of one contract-to-view adapter.","pos":[11176,11240]},{"content":"This segment adapts the contract to the host view of the add-in.","pos":[11241,11305]},{"content":"In this pipeline, the add-in provides a service to the host and the types flow from the add-in to the host.","pos":[11312,11419]},{"content":"Because no types flow from the host to the add-in, you do not have to include a view-to-contract adapter.","pos":[11420,11525]},{"content":"To implement lifetime management, use a <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object to attach a lifetime token to the contract.","pos":[11532,11666],"source":"To implement lifetime management, use a <xref:System.AddIn.Pipeline.ContractHandle> object to attach a lifetime token to the contract."},{"content":"You must keep a reference to this handle in order for lifetime management to work.","pos":[11667,11749]},{"content":"After the token is applied, no additional programming is required because the add-in system can dispose of objects when they are no longer being used and make them available for garbage collection.","pos":[11750,11947]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Lifetime Management<ept id=\"p1\">](http://msdn.microsoft.com/en-us/57a9c87e-394c-4fef-89f2-aa4223a2aeb5)</ept>.","pos":[11948,12066],"source":" For more information, see [Lifetime Management](http://msdn.microsoft.com/en-us/57a9c87e-394c-4fef-89f2-aa4223a2aeb5)."},{"pos":[12077,12108],"content":"To create the host-side adapter","linkify":"To create the host-side adapter","nodes":[{"content":"To create the host-side adapter","pos":[0,31]}]},{"content":"Add a new project named <ph id=\"ph1\">`Calc1HostSideAdapter`</ph> to the <ph id=\"ph2\">`CalculatorV1`</ph> solution.","pos":[12118,12196],"source":"Add a new project named `Calc1HostSideAdapter` to the `CalculatorV1` solution."},{"content":"Base it on the <bpt id=\"p1\">**</bpt>Class Library<ept id=\"p1\">**</ept> template.","pos":[12197,12239],"source":" Base it on the **Class Library** template."},{"pos":[12249,12356],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, add references to the following assemblies to the <ph id=\"ph1\">`Calc1HostSideAdapter`</ph> project:","source":"In **Solution Explorer**, add references to the following assemblies to the `Calc1HostSideAdapter` project:"},{"content":"System.AddIn.dll","pos":[12367,12383]},{"content":"System.AddIn.Contract.dll","pos":[12394,12419]},{"content":"Add project references to the projects for the adjacent segments:","pos":[12429,12494]},{"content":"Select each project reference, and in <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> set <bpt id=\"p2\">**</bpt>Copy Local<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>False<ept id=\"p3\">**</ept>.","pos":[12551,12636],"source":"Select each project reference, and in **Properties** set **Copy Local** to **False**."},{"content":"In Visual Basic, use the <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept> tab of <bpt id=\"p2\">**</bpt>Project Properties<ept id=\"p2\">**</ept> to set <bpt id=\"p3\">**</bpt>Copy Local<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>False<ept id=\"p4\">**</ept> for the two project references.","pos":[12637,12773],"source":" In Visual Basic, use the **References** tab of **Project Properties** to set **Copy Local** to **False** for the two project references."},{"pos":[12783,12860],"content":"Rename the project's default class <ph id=\"ph1\">`CalculatorContractToViewHostSideAdapter`</ph>.","source":"Rename the project's default class `CalculatorContractToViewHostSideAdapter`."},{"content":"In the class file, add namespace references to <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline&gt;</ph>.","pos":[12870,12946],"source":"In the class file, add namespace references to <xref:System.AddIn.Pipeline>."},{"content":"In the class file, add namespace references for the adjacent segments: <ph id=\"ph1\">`CalcHVAs`</ph> and <ph id=\"ph2\">`CalculatorContracts`</ph>.","pos":[12956,13064],"source":"In the class file, add namespace references for the adjacent segments: `CalcHVAs` and `CalculatorContracts`."},{"content":"(In Visual Basic, these namespace references are <ph id=\"ph1\">`Calc1HVA.CalcHVAs`</ph> and <ph id=\"ph2\">`Calc1Contract.CalculatorContracts`</ph>, unless you have turned off the default namespaces in your Visual Basic projects.)","pos":[13065,13256],"source":" (In Visual Basic, these namespace references are `Calc1HVA.CalcHVAs` and `Calc1Contract.CalculatorContracts`, unless you have turned off the default namespaces in your Visual Basic projects.)"},{"pos":[13266,13440],"content":"Apply the <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.HostAdapterAttribute&gt;</ph> attribute to the <ph id=\"ph2\">`CalculatorContractToViewHostSideAdapter`</ph> class, to identify it as the host-side adapter segment.","source":"Apply the <xref:System.AddIn.Pipeline.HostAdapterAttribute> attribute to the `CalculatorContractToViewHostSideAdapter` class, to identify it as the host-side adapter segment."},{"pos":[13449,13649],"content":"Make the <ph id=\"ph1\">`CalculatorContractToViewHostSideAdapter`</ph> class implement the interface that represents the host view of the add-in: <ph id=\"ph2\">`Calc1HVAs.ICalculator`</ph> (<ph id=\"ph3\">`Calc1HVA.CalcHVAs.ICalculator`</ph> in Visual Basic).","source":"Make the `CalculatorContractToViewHostSideAdapter` class implement the interface that represents the host view of the add-in: `Calc1HVAs.ICalculator` (`Calc1HVA.CalcHVAs.ICalculator` in Visual Basic)."},{"content":"Add a public constructor that accepts the pipeline contract type, <ph id=\"ph1\">`ICalc1Contract`</ph>.","pos":[13659,13742],"source":"Add a public constructor that accepts the pipeline contract type, `ICalc1Contract`."},{"content":"The constructor must cache the reference to the contract.","pos":[13743,13800]},{"content":"It must also create and cache a new <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> for the contract, to manage the lifetime of the add-in.","pos":[13801,13936],"source":" It must also create and cache a new <xref:System.AddIn.Pipeline.ContractHandle> for the contract, to manage the lifetime of the add-in."},{"pos":[13948,14503],"content":"[!IMPORTANT]\nThe <xref:System.AddIn.Pipeline.ContractHandle> is critical to lifetime management. If you fail to keep a reference to the <xref:System.AddIn.Pipeline.ContractHandle> object, garbage collection will reclaim it, and the pipeline will shut down when your program does not expect it. This can lead to errors that are difficult to diagnose, such as <xref:System.AppDomainUnloadedException>. Shutdown is a normal stage in the life of a pipeline, so there is no way for the lifetime management code to detect that this condition is an error.","leadings":["","    >  "],"nodes":[{"content":"The <xref:System.AddIn.Pipeline.ContractHandle> is critical to lifetime management. If you fail to keep a reference to the <xref:System.AddIn.Pipeline.ContractHandle> object, garbage collection will reclaim it, and the pipeline will shut down when your program does not expect it. This can lead to errors that are difficult to diagnose, such as <xref:System.AppDomainUnloadedException>. Shutdown is a normal stage in the life of a pipeline, so there is no way for the lifetime management code to detect that this condition is an error.","pos":[13,548],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> is critical to lifetime management.","pos":[0,83],"source":"The <xref:System.AddIn.Pipeline.ContractHandle> is critical to lifetime management."},{"content":"If you fail to keep a reference to the <ph id=\"ph1\">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object, garbage collection will reclaim it, and the pipeline will shut down when your program does not expect it.","pos":[84,280],"source":" If you fail to keep a reference to the <xref:System.AddIn.Pipeline.ContractHandle> object, garbage collection will reclaim it, and the pipeline will shut down when your program does not expect it."},{"content":"This can lead to errors that are difficult to diagnose, such as <ph id=\"ph1\">&lt;xref:System.AppDomainUnloadedException&gt;</ph>.","pos":[281,386],"source":" This can lead to errors that are difficult to diagnose, such as <xref:System.AppDomainUnloadedException>."},{"content":"Shutdown is a normal stage in the life of a pipeline, so there is no way for the lifetime management code to detect that this condition is an error.","pos":[387,535]}]}]},{"content":"To implement the members of <ph id=\"ph1\">`ICalculator`</ph>, simply call the corresponding members of the <ph id=\"ph2\">`ICalc1Contract`</ph> instance that is passed to the constructor, and return the results.","pos":[14513,14685],"source":"To implement the members of `ICalculator`, simply call the corresponding members of the `ICalc1Contract` instance that is passed to the constructor, and return the results."},{"content":"This adapts the contract (<ph id=\"ph1\">`ICalc1Contract`</ph>) to the view (<ph id=\"ph2\">`ICalculator`</ph>).","pos":[14686,14758],"source":" This adapts the contract (`ICalc1Contract`) to the view (`ICalculator`)."},{"content":"The following code shows the completed host-side adapter.","pos":[14769,14826]},{"pos":[14837,15160],"content":"[!code-csharp[AddInP1HostSideAdapters#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1HostSideAdapters/cs/Calc1ContractToViewHostSideAdapter.cs#1)]\n [!code-vb[AddInP1HostSideAdapters#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1HostSideAdapters/vb/Calc1ContractToViewHostSideAdapter.vb#1)]","leadings":["","    "],"nodes":[{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>AddInP1HostSideAdapters#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1HostSideAdapters/cs/Calc1ContractToViewHostSideAdapter.cs#1)</ept><ept id=\"p1\">]</ept>","pos":[0,158],"source":"[!code-csharp[AddInP1HostSideAdapters#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1HostSideAdapters/cs/Calc1ContractToViewHostSideAdapter.cs#1)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>AddInP1HostSideAdapters#1<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1HostSideAdapters/vb/Calc1ContractToViewHostSideAdapter.vb#1)</ept><ept id=\"p1\">]</ept>","pos":[160,319],"source":"[!code-vb[AddInP1HostSideAdapters#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1HostSideAdapters/vb/Calc1ContractToViewHostSideAdapter.vb#1)]"}]},{"content":"Optionally, build the Visual Studio solution.","pos":[15170,15215]},{"pos":[15224,15241],"content":"Creating the Host","linkify":"Creating the Host","nodes":[{"content":"Creating the Host","pos":[0,17]}]},{"content":"A host application interacts with the add-in through the host view of the add-in.","pos":[15245,15326]},{"content":"It uses add-in discovery and activation methods provided by the <ph id=\"ph1\">&lt;xref:System.AddIn.Hosting.AddInStore&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AddIn.Hosting.AddInToken&gt;</ph> classes to do the following:","pos":[15327,15501],"source":" It uses add-in discovery and activation methods provided by the <xref:System.AddIn.Hosting.AddInStore> and <xref:System.AddIn.Hosting.AddInToken> classes to do the following:"},{"content":"Update the cache of pipeline and add-in information.","pos":[15511,15563]},{"pos":[15573,15668],"content":"Find add-ins of the host view type, <ph id=\"ph1\">`ICalculator`</ph>, under the specified pipeline root directory.","source":"Find add-ins of the host view type, `ICalculator`, under the specified pipeline root directory."},{"content":"Prompt the user to specify which add-in to use.","pos":[15678,15725]},{"content":"Activate the selected add-in in a new application domain with a specified security trust level.","pos":[15735,15830]},{"pos":[15840,15956],"content":"Run the custom <ph id=\"ph1\">`RunCalculator`</ph> method, which calls the add-in's methods as specified by the host view of the add-in.","source":"Run the custom `RunCalculator` method, which calls the add-in's methods as specified by the host view of the add-in."},{"pos":[15967,15985],"content":"To create the host","linkify":"To create the host","nodes":[{"content":"To create the host","pos":[0,18]}]},{"content":"Add a new project named <ph id=\"ph1\">`Calc1Host`</ph> to the <ph id=\"ph2\">`CalculatorV1`</ph> solution.","pos":[15995,16062],"source":"Add a new project named `Calc1Host` to the `CalculatorV1` solution."},{"content":"Base it on the <bpt id=\"p1\">**</bpt>Console Application<ept id=\"p1\">**</ept> template.","pos":[16063,16111],"source":" Base it on the **Console Application** template."},{"pos":[16121,16223],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, add a reference to the System.AddIn.dll assembly to the <ph id=\"ph1\">`Calc1Host`</ph> project.","source":"In **Solution Explorer**, add a reference to the System.AddIn.dll assembly to the `Calc1Host` project."},{"content":"Add a project reference to the <ph id=\"ph1\">`Calc1HVA`</ph> project.","pos":[16233,16283],"source":"Add a project reference to the `Calc1HVA` project."},{"content":"Select the project reference, and in <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> set <bpt id=\"p2\">**</bpt>Copy Local<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>False<ept id=\"p3\">**</ept>.","pos":[16284,16368],"source":" Select the project reference, and in **Properties** set **Copy Local** to **False**."},{"content":"In Visual Basic, use the <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept> tab of <bpt id=\"p2\">**</bpt>Project Properties<ept id=\"p2\">**</ept> to set <bpt id=\"p3\">**</bpt>Copy Local<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>False<ept id=\"p4\">**</ept>.","pos":[16369,16474],"source":" In Visual Basic, use the **References** tab of **Project Properties** to set **Copy Local** to **False**."},{"pos":[16484,16543],"content":"Rename the class file (module in Visual Basic) <ph id=\"ph1\">`MathHost1`</ph>.","source":"Rename the class file (module in Visual Basic) `MathHost1`."},{"pos":[16553,16681],"content":"In Visual Basic, use the <bpt id=\"p1\">**</bpt>Application<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Project Properties<ept id=\"p2\">**</ept> dialog box to set <bpt id=\"p3\">**</bpt>Startup object<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>Sub Main<ept id=\"p4\">**</ept>.","source":"In Visual Basic, use the **Application** tab of the **Project Properties** dialog box to set **Startup object** to **Sub Main**."},{"content":"In the class or module file, add a namespace reference to <ph id=\"ph1\">&lt;xref:System.AddIn.Hosting&gt;</ph>.","pos":[16691,16777],"source":"In the class or module file, add a namespace reference to <xref:System.AddIn.Hosting>."},{"content":"In the class or module file, add a namespace reference for the host view of the add-in: <ph id=\"ph1\">`CalcHVAs`</ph>.","pos":[16787,16886],"source":"In the class or module file, add a namespace reference for the host view of the add-in: `CalcHVAs`."},{"content":"(In Visual Basic, this namespace reference is <ph id=\"ph1\">`Calc1HVA.CalcHVAs`</ph>, unless you have turned off the default namespaces in your Visual Basic projects.)","pos":[16887,17035],"source":" (In Visual Basic, this namespace reference is `Calc1HVA.CalcHVAs`, unless you have turned off the default namespaces in your Visual Basic projects.)"},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, select the solution and from the <bpt id=\"p2\">**</bpt>Project<ept id=\"p2\">**</ept> menu choose <bpt id=\"p3\">**</bpt>Properties<ept id=\"p3\">**</ept>.","pos":[17045,17143],"source":"In **Solution Explorer**, select the solution and from the **Project** menu choose **Properties**."},{"content":"In the <bpt id=\"p1\">**</bpt>Solution Property Pages<ept id=\"p1\">**</ept> dialog box, set the <bpt id=\"p2\">**</bpt>Single Startup Project<ept id=\"p2\">**</ept> to be this host application project.","pos":[17144,17262],"source":" In the **Solution Property Pages** dialog box, set the **Single Startup Project** to be this host application project."},{"content":"In the class or module file, use the <ph id=\"ph1\">&lt;xref:System.AddIn.Hosting.AddInStore.Update%2A?displayProperty=fullName&gt;</ph> method to update the cache.","pos":[17271,17409],"source":"In the class or module file, use the <xref:System.AddIn.Hosting.AddInStore.Update%2A?displayProperty=fullName> method to update the cache."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.AddIn.Hosting.AddInStore.FindAddIn%2A?displayProperty=fullName&gt;</ph> method to get a collection of tokens, and use the <ph id=\"ph2\">&lt;xref:System.AddIn.Hosting.AddInToken.Activate%2A?displayProperty=fullName&gt;</ph> method to activate an add-in.","pos":[17410,17650],"source":" Use the <xref:System.AddIn.Hosting.AddInStore.FindAddIn%2A?displayProperty=fullName> method to get a collection of tokens, and use the <xref:System.AddIn.Hosting.AddInToken.Activate%2A?displayProperty=fullName> method to activate an add-in."},{"content":"The following code shows the completed host application.","pos":[17661,17717]},{"pos":[17728,17953],"content":"[!code-csharp[AddInP1Host#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1Host/cs/MathHost1.cs#1)]\n  [!code-vb[AddInP1Host#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1Host/vb/MathHost1.vb#1)]","leadings":["","   "],"nodes":[{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>AddInP1Host#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1Host/cs/MathHost1.cs#1)</ept><ept id=\"p1\">]</ept>","pos":[0,109],"source":"[!code-csharp[AddInP1Host#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1Host/cs/MathHost1.cs#1)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>AddInP1Host#1<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1Host/vb/MathHost1.vb#1)</ept><ept id=\"p1\">]</ept>","pos":[112,222],"source":"[!code-vb[AddInP1Host#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1Host/vb/MathHost1.vb#1)]"}]},{"pos":[17965,18236],"content":"[!NOTE]\nThis code assumes that the pipeline folder structure is located in the application folder. If you located it elsewhere, change the line of code that sets the `addInRoot` variable, so that the variable contains the path to your pipeline directory structure.","leadings":["","    >  "],"nodes":[{"content":"This code assumes that the pipeline folder structure is located in the application folder. If you located it elsewhere, change the line of code that sets the `addInRoot` variable, so that the variable contains the path to your pipeline directory structure.","pos":[8,264],"nodes":[{"content":"This code assumes that the pipeline folder structure is located in the application folder.","pos":[0,90]},{"content":"If you located it elsewhere, change the line of code that sets the <ph id=\"ph1\">`addInRoot`</ph> variable, so that the variable contains the path to your pipeline directory structure.","pos":[91,256],"source":" If you located it elsewhere, change the line of code that sets the `addInRoot` variable, so that the variable contains the path to your pipeline directory structure."}]}]},{"content":"The code uses a <ph id=\"ph1\">`ChooseCalculator`</ph> method to list the tokens and to prompt the user to choose an add-in.","pos":[18247,18351],"source":"The code uses a `ChooseCalculator` method to list the tokens and to prompt the user to choose an add-in."},{"content":"The <ph id=\"ph1\">`RunCalculator`</ph> method prompts the user for simple math expressions, parses the expressions using the <ph id=\"ph2\">`Parser`</ph> class, and displays the results returned by the add-in.","pos":[18352,18522],"source":" The `RunCalculator` method prompts the user for simple math expressions, parses the expressions using the `Parser` class, and displays the results returned by the add-in."},{"content":"Optionally, build the Visual Studio solution.","pos":[18532,18577]},{"pos":[18586,18605],"content":"Creating the Add-In","linkify":"Creating the Add-In","nodes":[{"content":"Creating the Add-In","pos":[0,19]}]},{"content":"An add-in implements the methods specified by the add-in view.","pos":[18609,18671]},{"content":"This add-in implements the <ph id=\"ph1\">`Add`</ph>, <ph id=\"ph2\">`Subtract`</ph>, <ph id=\"ph3\">`Multiply`</ph>, and <ph id=\"ph4\">`Divide`</ph> operations and returns the results to the host.","pos":[18672,18790],"source":" This add-in implements the `Add`, `Subtract`, `Multiply`, and `Divide` operations and returns the results to the host."},{"pos":[18801,18821],"content":"To create the add-in","linkify":"To create the add-in","nodes":[{"content":"To create the add-in","pos":[0,20]}]},{"content":"Add a new project named <ph id=\"ph1\">`AddInCalcV1`</ph> to the <ph id=\"ph2\">`CalculatorV1`</ph> solution.","pos":[18831,18900],"source":"Add a new project named `AddInCalcV1` to the `CalculatorV1` solution."},{"content":"Base it on the <bpt id=\"p1\">**</bpt>Class Library<ept id=\"p1\">**</ept> template.","pos":[18901,18943],"source":" Base it on the **Class Library** template."},{"pos":[18953,19043],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, add a reference to the System.AddIn.dll assembly to the project.","source":"In **Solution Explorer**, add a reference to the System.AddIn.dll assembly to the project."},{"content":"Add a project reference to the <ph id=\"ph1\">`Calc1AddInView`</ph> project.","pos":[19053,19109],"source":"Add a project reference to the `Calc1AddInView` project."},{"content":"Select the project reference, and in <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>, set <bpt id=\"p2\">**</bpt>Copy Local<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>False<ept id=\"p3\">**</ept>.","pos":[19110,19195],"source":" Select the project reference, and in **Properties**, set **Copy Local** to **False**."},{"content":"In Visual Basic, use the <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept> tab of <bpt id=\"p2\">**</bpt>Project Properties<ept id=\"p2\">**</ept> to set <bpt id=\"p3\">**</bpt>Copy Local<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>False<ept id=\"p4\">**</ept> for the project reference.","pos":[19196,19327],"source":" In Visual Basic, use the **References** tab of **Project Properties** to set **Copy Local** to **False** for the project reference."},{"pos":[19337,19368],"content":"Rename the class <ph id=\"ph1\">`AddInCalcV1`</ph>.","source":"Rename the class `AddInCalcV1`."},{"pos":[19378,19542],"content":"In the class file, add a namespace reference to <ph id=\"ph1\">&lt;xref:System.AddIn&gt;</ph> and the add-in view segment: <ph id=\"ph2\">`CalcAddInViews`</ph> (<ph id=\"ph3\">`Calc1AddInView.CalcAddInViews`</ph> in Visual Basic).","source":"In the class file, add a namespace reference to <xref:System.AddIn> and the add-in view segment: `CalcAddInViews` (`Calc1AddInView.CalcAddInViews` in Visual Basic)."},{"pos":[19552,19670],"content":"Apply the <ph id=\"ph1\">&lt;xref:System.AddIn.AddInAttribute&gt;</ph> attribute to the <ph id=\"ph2\">`AddInCalcV1`</ph> class, to identify the class as an add-in.","source":"Apply the <xref:System.AddIn.AddInAttribute> attribute to the `AddInCalcV1` class, to identify the class as an add-in."},{"pos":[19680,19857],"content":"Make the <ph id=\"ph1\">`AddInCalcV1`</ph> class implement the interface that represents the add-in view: <ph id=\"ph2\">`CalcAddInViews.ICalculator`</ph> (<ph id=\"ph3\">`Calc1AddInView.CalcAddInViews.ICalculator`</ph> in Visual Basic).","source":"Make the `AddInCalcV1` class implement the interface that represents the add-in view: `CalcAddInViews.ICalculator` (`Calc1AddInView.CalcAddInViews.ICalculator` in Visual Basic)."},{"pos":[19867,19963],"content":"Implement the members of <ph id=\"ph1\">`ICalculator`</ph> by returning the results of the appropriate calculations.","source":"Implement the members of `ICalculator` by returning the results of the appropriate calculations."},{"content":"The following code shows the completed add-in.","pos":[19974,20020]},{"pos":[20031,20288],"content":"[!code-csharp[AddInP1AddInCalcV1#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInCalcV1/cs/AddInCalcV1.cs#1)]\n [!code-vb[AddInP1AddInCalcV1#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInCalcV1/vb/AddInCalcV1.vb#1)]","leadings":["","    "],"nodes":[{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>AddInP1AddInCalcV1#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInCalcV1/cs/AddInCalcV1.cs#1)</ept><ept id=\"p1\">]</ept>","pos":[0,125],"source":"[!code-csharp[AddInP1AddInCalcV1#1](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInCalcV1/cs/AddInCalcV1.cs#1)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>AddInP1AddInCalcV1#1<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInCalcV1/vb/AddInCalcV1.vb#1)</ept><ept id=\"p1\">]</ept>","pos":[127,253],"source":"[!code-vb[AddInP1AddInCalcV1#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInCalcV1/vb/AddInCalcV1.vb#1)]"}]},{"content":"Optionally, build the Visual Studio solution.","pos":[20297,20342]},{"pos":[20351,20373],"content":"Deploying the Pipeline","linkify":"Deploying the Pipeline","nodes":[{"content":"Deploying the Pipeline","pos":[0,22]}]},{"content":"You are now ready to build and deploy the add-in segments to the required pipeline directory structure.","pos":[20377,20480]},{"pos":[20491,20529],"content":"To deploy the segments to the pipeline","linkify":"To deploy the segments to the pipeline","nodes":[{"content":"To deploy the segments to the pipeline","pos":[0,38]}]},{"content":"For each project in the solution, use the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> tab of <bpt id=\"p2\">**</bpt>Project Properties<ept id=\"p2\">**</ept> (the <bpt id=\"p3\">**</bpt>Compile<ept id=\"p3\">**</ept> tab in Visual Basic) to set the value of the <bpt id=\"p4\">**</bpt>Output path<ept id=\"p4\">**</ept> (the <bpt id=\"p5\">**</bpt>Build output path<ept id=\"p5\">**</ept> in Visual Basic).","pos":[20539,20743],"source":"For each project in the solution, use the **Build** tab of **Project Properties** (the **Compile** tab in Visual Basic) to set the value of the **Output path** (the **Build output path** in Visual Basic)."},{"content":"If you named your application folder <ph id=\"ph1\">`MyApp`</ph>, for example, your projects would build into the following folders:","pos":[20744,20856],"source":" If you named your application folder `MyApp`, for example, your projects would build into the following folders:"},{"content":"Project","pos":[20867,20874]},{"content":"Path","pos":[20875,20879]},{"content":"AddInCalcV1","pos":[20921,20932]},{"content":"MyApp\\Pipeline\\AddIns\\CalcV1","pos":[20933,20961]},{"content":"Calc1AddInSideAdapter","pos":[20970,20991]},{"content":"MyApp\\Pipeline\\AddInSideAdapters","pos":[20992,21024]},{"content":"Calc1AddInView","pos":[21033,21047]},{"content":"MyApp\\Pipeline\\AddInViews","pos":[21048,21073]},{"content":"Calc1Contract","pos":[21082,21095]},{"content":"MyApp\\Pipeline\\Contracts","pos":[21096,21120]},{"content":"Calc1Host","pos":[21129,21138]},{"content":"MyApp","pos":[21139,21144]},{"content":"Calc1HostSideAdapter","pos":[21153,21173]},{"content":"MyApp\\Pipeline\\HostSideAdapters","pos":[21174,21205]},{"content":"Calc1HVA","pos":[21214,21222]},{"content":"MyApp","pos":[21223,21228]},{"pos":[21241,21580],"content":"[!NOTE]\nIf you decided to put your pipeline folder structure in a location other than your application folder, you must modify the paths shown in the table accordingly. See the discussion of pipeline directory requirements in [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5).","leadings":["","    >  "],"nodes":[{"content":"If you decided to put your pipeline folder structure in a location other than your application folder, you must modify the paths shown in the table accordingly. See the discussion of pipeline directory requirements in [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5).","pos":[8,332],"nodes":[{"content":"If you decided to put your pipeline folder structure in a location other than your application folder, you must modify the paths shown in the table accordingly.","pos":[0,160]},{"content":"See the discussion of pipeline directory requirements in <bpt id=\"p1\">[</bpt>Pipeline Development Requirements<ept id=\"p1\">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept>.","pos":[161,324],"source":" See the discussion of pipeline directory requirements in [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)."}]}]},{"content":"Build the Visual Studio solution.","pos":[21590,21623]},{"content":"Check the application and pipeline directories to ensure that the assemblies were copied to the correct directories and that no extra copies of assemblies were installed in the wrong folders.","pos":[21633,21824]},{"pos":[21836,22041],"content":"[!NOTE]\nIf you did not change **Copy Local** to **False** for the `Calc1AddInView` project reference in the `AddInCalcV1` project, loader context problems will prevent the add-in from being located.","leadings":["","    >  "],"nodes":[{"content":"If you did not change <bpt id=\"p1\">**</bpt>Copy Local<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>False<ept id=\"p2\">**</ept> for the <ph id=\"ph1\">`Calc1AddInView`</ph> project reference in the <ph id=\"ph2\">`AddInCalcV1`</ph> project, loader context problems will prevent the add-in from being located.","pos":[8,198],"source":"If you did not change **Copy Local** to **False** for the `Calc1AddInView` project reference in the `AddInCalcV1` project, loader context problems will prevent the add-in from being located."}]},{"pos":[22052,22211],"content":"For information about deploying to the pipeline, see <bpt id=\"p1\">[</bpt>Pipeline Development Requirements<ept id=\"p1\">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept>.","source":"For information about deploying to the pipeline, see [Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)."},{"pos":[22220,22248],"content":"Running the Host Application","linkify":"Running the Host Application","nodes":[{"content":"Running the Host Application","pos":[0,28]}]},{"content":"You are now ready to run the host and interact with the add-in.","pos":[22252,22315]},{"pos":[22326,22353],"content":"To run the host application","linkify":"To run the host application","nodes":[{"content":"To run the host application","pos":[0,27]}]},{"pos":[22363,22464],"content":"At the command prompt, go to the application directory and run the host application, <ph id=\"ph1\">`Calc1Host.exe`</ph>.","source":"At the command prompt, go to the application directory and run the host application, `Calc1Host.exe`."},{"content":"The host finds all available add-ins of its type and prompts you to select an add-in.","pos":[22474,22559]},{"content":"Enter <bpt id=\"p1\">**</bpt>1<ept id=\"p1\">**</ept> for the only available add-in.","pos":[22560,22602],"source":" Enter **1** for the only available add-in."},{"content":"Enter an equation for the calculator, such as <bpt id=\"p1\">**</bpt>2 + 2<ept id=\"p1\">**</ept>.","pos":[22612,22668],"source":"Enter an equation for the calculator, such as **2 + 2**."},{"content":"There must be spaces between the numbers and the operator.","pos":[22669,22727]},{"pos":[22737,22804],"content":"Type <bpt id=\"p1\">**</bpt>exit<ept id=\"p1\">**</ept> and press the <bpt id=\"p2\">**</bpt>Enter<ept id=\"p2\">**</ept> key to close the application.","source":"Type **exit** and press the **Enter** key to close the application."},{"pos":[22813,22821],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Enabling Backward Compatibility as Your Host Changes<ept id=\"p1\">](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848)</ept><ph id=\"ph1\"> </ph>","pos":[22825,22963],"source":"[Walkthrough: Enabling Backward Compatibility as Your Host Changes](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848) "},{"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Passing Collections Between Hosts and Add-Ins<ept id=\"p1\">](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5)</ept><ph id=\"ph1\"> </ph>","pos":[22967,23098],"source":"[Walkthrough: Passing Collections Between Hosts and Add-Ins](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5) "},{"content":"<bpt id=\"p1\">[</bpt>Pipeline Development Requirements<ept id=\"p1\">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept><ph id=\"ph1\"> </ph>","pos":[23102,23208],"source":"[Pipeline Development Requirements](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5) "},{"content":"<bpt id=\"p1\">[</bpt>Contracts, Views, and Adapters<ept id=\"p1\">](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c)</ept><ph id=\"ph1\"> </ph>","pos":[23212,23315],"source":"[Contracts, Views, and Adapters](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c) "},{"content":"<bpt id=\"p1\">[</bpt>Pipeline Development<ept id=\"p1\">](../../../docs/framework/add-ins/pipeline-development.md)</ept>","pos":[23319,23398],"source":"[Pipeline Development](../../../docs/framework/add-ins/pipeline-development.md)"}]}