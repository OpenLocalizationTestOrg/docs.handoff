<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="bc33037.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c16675958a46ceed85329826daf4a531890e39f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\misc\bc33037.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f4f4fb8c22ff71648a5e7c78b43db853a2ec6a6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cccee9216d43fbd12a78fb958466251a945537d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Cannot copy the value of 'ByRef' parameter '<ph id="ph1">&lt;parametername&gt;</ph>' back to the matching argument because type '<ph id="ph2">&lt;typename1&gt;</ph>' cannot be converted to type '<ph id="ph3">&lt;typename2&gt;</ph>'</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Cannot copy the value of 'ByRef' parameter '<ph id="ph1">\&lt;</ph>parametername&gt;' back to the matching argument because type '<ph id="ph2">\&lt;</ph>typename1&gt;' cannot be converted to type '<ph id="ph3">\&lt;</ph>typename2&gt;'</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A procedure is declared with a parameter type which cannot be converted back to the calling argument type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you define a class or structure, you can define one or more conversion operators to convert that class or structure type to other types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also define reverse conversion operators to convert those other types back to your class or structure type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you use your class or structure type in a procedure call, Visual Basic can use these conversion operators to convert the type of an argument to the type of its corresponding parameter.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you pass the argument <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../visual-basic/language-reference/modifiers/byref.md)</ept>, Visual Basic sometimes copies the argument value into a local variable in the procedure instead of passing a reference.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In such a case, when the procedure returns, Visual Basic must then copy the local variable value back into the argument in the calling code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`ByRef`</ph> argument value is copied into the procedure and the argument and parameter are of the same type, no conversion is necessary.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>But if the types are different, Visual Basic must convert in both directions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If one of the types is your class or structure type, Visual Basic must convert it both to and from the other type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This means you must define conversion operators in both directions.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Error ID:<ept id="p1">**</ept> BC33037</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To correct this error</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If possible, use a calling argument of the same type as the procedure parameter, so Visual Basic does not need to do any conversion.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you need to call the procedure with an argument type different from the parameter type but do not need to return a value into the calling argument, define the parameter to be <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../visual-basic/language-reference/modifiers/byval.md)</ept> instead of <ph id="ph1">`ByRef`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you need to return a value into the calling argument, define the reverse conversion operator so Visual Basic can convert back to the calling argument type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedure Parameters and Arguments<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passing Arguments by Value and by Reference<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Statement<ept id="p1">](../../visual-basic/language-reference/statements/operator-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define an Operator<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define a Conversion Operator<ept id="p1">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>