{"content":"---\ntitle: \"continue statement - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"continue_CSharpKeyword\"\n  - \"continue\"\nhelpviewer_keywords: \n  - \"continue keyword [C#]\"\nms.assetid: 8a5ac96f-f98a-4519-b32d-345847ed7be0\n---\n# continue (C# Reference)\n\nThe `continue` statement passes control to the next iteration of the enclosing [while](../../../csharp/language-reference/keywords/while.md), [do](../../../csharp/language-reference/keywords/do.md), [for](../../../csharp/language-reference/keywords/for.md), or [foreach](../../../csharp/language-reference/keywords/foreach-in.md) statement in which it appears.\n\n## Example\n\nIn this example, a counter is initialized to count from 1 to 10. By using the `continue` statement in conjunction with the expression `(i < 9)`, the statements between `continue` and the end of the `for` body are skipped.\n\n[!code-csharp[csrefKeywordsJump#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsJump/CS/csrefKeywordsJump.cs#3)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [break Statement](/cpp/cpp/break-statement-cpp)\n- [Jump Statements](../../../csharp/language-reference/keywords/jump-statements.md)\n","nodes":[{"pos":[4,244],"embed":true,"restype":"x-metadata","content":"title: \"continue statement - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"continue_CSharpKeyword\"\n  - \"continue\"\nhelpviewer_keywords: \n  - \"continue keyword [C#]\"\nms.assetid: 8a5ac96f-f98a-4519-b32d-345847ed7be0","nodes":[{"content":"continue statement - C# Reference","nodes":[{"pos":[0,33],"content":"continue statement - C# Reference","nodes":[{"content":"continue statement - C# Reference","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[251,274],"content":"continue (C# Reference)","linkify":"continue (C# Reference)","nodes":[{"content":"continue (C# Reference)","pos":[0,23]}]},{"pos":[276,636],"content":"The <ph id=\"ph1\">`continue`</ph> statement passes control to the next iteration of the enclosing <bpt id=\"p1\">[</bpt>while<ept id=\"p1\">](../../../csharp/language-reference/keywords/while.md)</ept>, <bpt id=\"p2\">[</bpt>do<ept id=\"p2\">](../../../csharp/language-reference/keywords/do.md)</ept>, <bpt id=\"p3\">[</bpt>for<ept id=\"p3\">](../../../csharp/language-reference/keywords/for.md)</ept>, or <bpt id=\"p4\">[</bpt>foreach<ept id=\"p4\">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> statement in which it appears.","source":"The `continue` statement passes control to the next iteration of the enclosing [while](../../../csharp/language-reference/keywords/while.md), [do](../../../csharp/language-reference/keywords/do.md), [for](../../../csharp/language-reference/keywords/for.md), or [foreach](../../../csharp/language-reference/keywords/foreach-in.md) statement in which it appears."},{"pos":[641,648],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, a counter is initialized to count from 1 to 10.","pos":[650,714]},{"content":"By using the <ph id=\"ph1\">`continue`</ph> statement in conjunction with the expression <ph id=\"ph2\">`(i &lt; 9)`</ph>, the statements between <ph id=\"ph3\">`continue`</ph> and the end of the <ph id=\"ph4\">`for`</ph> body are skipped.","pos":[715,871],"source":" By using the `continue` statement in conjunction with the expression `(i < 9)`, the statements between `continue` and the end of the `for` body are skipped."},{"pos":[1005,1030],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1096,1104],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1108,1167],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[1170,1236],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1239,1306],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[1309,1356],"content":"<bpt id=\"p1\">[</bpt>break Statement<ept id=\"p1\">](/cpp/cpp/break-statement-cpp)</ept>","source":"[break Statement](/cpp/cpp/break-statement-cpp)"},{"pos":[1359,1440],"content":"<bpt id=\"p1\">[</bpt>Jump Statements<ept id=\"p1\">](../../../csharp/language-reference/keywords/jump-statements.md)</ept>","source":"[Jump Statements](../../../csharp/language-reference/keywords/jump-statements.md)"}]}