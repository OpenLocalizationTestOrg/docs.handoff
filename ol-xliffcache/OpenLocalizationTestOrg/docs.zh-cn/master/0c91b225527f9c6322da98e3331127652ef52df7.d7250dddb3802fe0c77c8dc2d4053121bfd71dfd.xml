{"content":"---\ntitle: \"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: 0724b429-4b87-4d26-a7b1-409358f3fc20\n---\n# How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)\nThis example shows how to find sentences in a text file that contain matches for each of a specified set of words. Although the array of search terms is hard-coded in this example, it could also be populated dynamically at runtime. In this example, the query returns the sentences that contain the words \"Historically,\" \"data,\" and \"integrated.\"  \n  \n## Example  \n  \n```csharp  \nclass FindSentences  \n{  \n    static void Main()  \n    {  \n        string text = @\"Historically, the world of data and the world of objects \" +  \n        @\"have not been well integrated. Programmers work in C# or Visual Basic \" +  \n        @\"and also in SQL or XQuery. On the one side are concepts such as classes, \" +  \n        @\"objects, fields, inheritance, and .NET Framework APIs. On the other side \" +  \n        @\"are tables, columns, rows, nodes, and separate languages for dealing with \" +  \n        @\"them. Data types often require translation between the two worlds; there are \" +  \n        @\"different standard functions. Because the object world has no notion of query, a \" +  \n        @\"query can only be represented as a string without compile-time type checking or \" +  \n        @\"IntelliSense support in the IDE. Transferring data from SQL tables or XML trees to \" +  \n        @\"objects in memory is often tedious and error-prone.\";  \n  \n        // Split the text block into an array of sentences.  \n        string[] sentences = text.Split(new char[] { '.', '?', '!' });  \n  \n        // Define the search terms. This list could also be dynamically populated at runtime.  \n        string[] wordsToMatch = { \"Historically\", \"data\", \"integrated\" };  \n  \n        // Find sentences that contain all the terms in the wordsToMatch array.  \n        // Note that the number of terms to match is not specified at compile time.  \n        var sentenceQuery = from sentence in sentences  \n                            let w = sentence.Split(new char[] { '.', '?', '!', ' ', ';', ':', ',' },  \n                                                    StringSplitOptions.RemoveEmptyEntries)  \n                            where w.Distinct().Intersect(wordsToMatch).Count() == wordsToMatch.Count()  \n                            select sentence;  \n  \n        // Execute the query. Note that you can explicitly type  \n        // the iteration variable here even though sentenceQuery  \n        // was implicitly typed.   \n        foreach (string str in sentenceQuery)  \n        {  \n            Console.WriteLine(str);  \n        }  \n  \n        // Keep the console window open in debug mode.  \n        Console.WriteLine(\"Press any key to exit\");  \n        Console.ReadKey();  \n    }  \n}  \n/* Output:  \nHistorically, the world of data and the world of objects have not been well integrated  \n*/  \n```  \n  \n The query works by first splitting the text into sentences, and then splitting the sentences into an array of strings that hold each word. For each of these arrays, the <xref:System.Linq.Enumerable.Distinct%2A> method removes all duplicate words, and then the query performs an <xref:System.Linq.Enumerable.Intersect%2A> operation on the word array and the `wordsToMatch` array. If the count of the intersection is the same as the count of the `wordsToMatch` array, all words were found in the words and the original sentence is returned.  \n  \n In the call to <xref:System.String.Split%2A>, the punctuation marks are used as separators in order to remove them from the string. If you did not do this, for example you could have a string \"Historically,\" that would not match \"Historically\" in the `wordsToMatch` array. You may have to use additional separators, depending on the types of punctuation found in the source text.  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces.  \n  \n## See also\n\n- [LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)\n","nodes":[{"pos":[4,159],"embed":true,"restype":"x-metadata","content":"title: \"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: 0724b429-4b87-4d26-a7b1-409358f3fc20","nodes":[{"content":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)","nodes":[{"pos":[0,77],"content":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)","nodes":[{"content":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)","pos":[0,77]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[166,243],"content":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)","linkify":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)","nodes":[{"content":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)","pos":[0,77]}]},{"content":"This example shows how to find sentences in a text file that contain matches for each of a specified set of words.","pos":[244,358]},{"content":"Although the array of search terms is hard-coded in this example, it could also be populated dynamically at runtime.","pos":[359,475]},{"content":"In this example, the query returns the sentences that contain the words \"Historically,\" \"data,\" and \"integrated.\"","pos":[476,589]},{"pos":[598,605],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The query works by first splitting the text into sentences, and then splitting the sentences into an array of strings that hold each word.","pos":[3017,3155]},{"content":"For each of these arrays, the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method removes all duplicate words, and then the query performs an <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> operation on the word array and the <ph id=\"ph3\">`wordsToMatch`</ph> array.","pos":[3156,3395],"source":" For each of these arrays, the <xref:System.Linq.Enumerable.Distinct%2A> method removes all duplicate words, and then the query performs an <xref:System.Linq.Enumerable.Intersect%2A> operation on the word array and the `wordsToMatch` array."},{"content":"If the count of the intersection is the same as the count of the <ph id=\"ph1\">`wordsToMatch`</ph> array, all words were found in the words and the original sentence is returned.","pos":[3396,3555],"source":" If the count of the intersection is the same as the count of the `wordsToMatch` array, all words were found in the words and the original sentence is returned."},{"content":"In the call to <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph>, the punctuation marks are used as separators in order to remove them from the string.","pos":[3562,3693],"source":"In the call to <xref:System.String.Split%2A>, the punctuation marks are used as separators in order to remove them from the string."},{"content":"If you did not do this, for example you could have a string \"Historically,\" that would not match \"Historically\" in the <ph id=\"ph1\">`wordsToMatch`</ph> array.","pos":[3694,3834],"source":" If you did not do this, for example you could have a string \"Historically,\" that would not match \"Historically\" in the `wordsToMatch` array."},{"content":"You may have to use additional separators, depending on the types of punctuation found in the source text.","pos":[3835,3941]},{"pos":[3950,3968],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[3972,4149],"content":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <ph id=\"ph1\">`using`</ph> directives for the System.Linq and System.IO namespaces.","source":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces."},{"pos":[4158,4166],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4170,4265],"content":"<bpt id=\"p1\">[</bpt>LINQ and Strings (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)</ept>","source":"[LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)"}]}