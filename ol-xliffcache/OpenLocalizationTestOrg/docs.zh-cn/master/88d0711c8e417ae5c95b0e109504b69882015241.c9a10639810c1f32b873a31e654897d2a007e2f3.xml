{"content":"---\ntitle: \"Multithreading with the BackgroundWorker Component (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: e4cd9b2a-f924-470e-a16e-50274709b40e\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Walkthrough: Multithreading with the BackgroundWorker Component (Visual Basic)\nThis walkthrough demonstrates how to create a multithreaded Windows Forms application that searches a text file for occurrences of a word. It demonstrates:  \n  \n-   Defining a class with a method that can be called by the <xref:System.ComponentModel.BackgroundWorker> component.  \n  \n-   Handling events raised by the <xref:System.ComponentModel.BackgroundWorker> component.  \n  \n-   Starting a <xref:System.ComponentModel.BackgroundWorker> component to run a method.  \n  \n-   Implementing a `Cancel` button that stops the <xref:System.ComponentModel.BackgroundWorker> component.  \n  \n### To create the user interface  \n  \n1.  Open a new Visual Basic Windows Forms Application project, and create a form named `Form1`.  \n  \n2.  Add two buttons and four text boxes to `Form1`.  \n  \n3.  Name the objects as shown in the following table.  \n  \n    |Object|Property|Setting|  \n    |------------|--------------|-------------|  \n    |First button|`Name`, `Text`|Start, Start|  \n    |Second button|`Name`, `Text`|Cancel, Cancel|  \n    |First text box|`Name`, `Text`|SourceFile, \"\"|  \n    |Second text box|`Name`, `Text`|CompareString, \"\"|  \n    |Third text box|`Name`, `Text`|WordsCounted, \"0\"|  \n    |Fourth text box|`Name`, `Text`|LinesCounted, \"0\"|  \n  \n4.  Add a label next to each text box. Set the `Text` property for each label as shown in the following table.  \n  \n    |Object|Property|Setting|  \n    |------------|--------------|-------------|  \n    |First label|`Text`|Source File|  \n    |Second label|`Text`|Compare String|  \n    |Third label|`Text`|Matching Words|  \n    |Fourth label|`Text`|Lines Counted|  \n  \n### To create a BackgroundWorker component and subscribe to its events  \n  \n1.  Add a <xref:System.ComponentModel.BackgroundWorker> component from the **Components** section of the **ToolBox** to the form. It will appear in the form's component tray.  \n  \n2.  Set the following properties for the BackgroundWorker1 object.  \n  \n    |Property|Setting|  \n    |--------------|-------------|  \n    |`WorkerReportsProgress`|True|  \n    |`WorkerSupportsCancellation`|True|  \n  \n### To define the method that will run on a separate thread  \n  \n1.  From the **Project** menu, choose **Add Class** to add a class to the project. The **Add New Item** dialog box is displayed.  \n  \n2.  Select **Class** from the templates window and enter `Words.vb` in the name field.  \n  \n3.  Click **Add**. The `Words` class is displayed.  \n  \n4.  Add the following code to the `Words` class:  \n  \n    ```vb  \n    Public Class Words  \n        ' Object to store the current state, for passing to the caller.  \n        Public Class CurrentState  \n            Public LinesCounted As Integer  \n            Public WordsMatched As Integer  \n        End Class  \n  \n        Public SourceFile As String  \n        Public CompareString As String  \n        Private WordCount As Integer = 0  \n        Private LinesCounted As Integer = 0  \n  \n        Public Sub CountWords(  \n            ByVal worker As System.ComponentModel.BackgroundWorker,  \n            ByVal e As System.ComponentModel.DoWorkEventArgs  \n        )  \n            ' Initialize the variables.  \n            Dim state As New CurrentState  \n            Dim line = \"\"  \n            Dim elapsedTime = 20  \n            Dim lastReportDateTime = Now  \n  \n            If CompareString Is Nothing OrElse  \n               CompareString = System.String.Empty Then  \n  \n               Throw New Exception(\"CompareString not specified.\")  \n            End If  \n  \n            Using myStream As New System.IO.StreamReader(SourceFile)  \n  \n                ' Process lines while there are lines remaining in the file.  \n                Do While Not myStream.EndOfStream  \n                    If worker.CancellationPending Then  \n                        e.Cancel = True  \n                        Exit Do  \n                    Else  \n                        line = myStream.ReadLine  \n                        WordCount += CountInString(line, CompareString)  \n                        LinesCounted += 1  \n  \n                        ' Raise an event so the form can monitor progress.  \n                        If Now > lastReportDateTime.AddMilliseconds(elapsedTime) Then  \n                            state.LinesCounted = LinesCounted  \n                            state.WordsMatched = WordCount  \n                            worker.ReportProgress(0, state)  \n                            lastReportDateTime = Now  \n                        End If  \n  \n                        ' Uncomment for testing.  \n                        'System.Threading.Thread.Sleep(5)  \n                    End If  \n                Loop  \n  \n                ' Report the final count values.  \n                state.LinesCounted = LinesCounted  \n                state.WordsMatched = WordCount  \n                worker.ReportProgress(0, state)  \n            End Using  \n        End Sub  \n  \n        Private Function CountInString(  \n            ByVal SourceString As String,  \n            ByVal CompareString As String  \n        ) As Integer  \n            ' This function counts the number of times  \n            ' a word is found in a line.  \n            If SourceString Is Nothing Then  \n                Return 0  \n            End If  \n  \n            Dim EscapedCompareString =  \n                System.Text.RegularExpressions.Regex.Escape(CompareString)  \n  \n            ' To count all occurrences of the string, even within words, remove  \n            ' both instances of \"\\b\".  \n            Dim regex As New System.Text.RegularExpressions.Regex(  \n                \"\\b\" + EscapedCompareString + \"\\b\",  \n                System.Text.RegularExpressions.RegexOptions.IgnoreCase)  \n  \n            Dim matches As System.Text.RegularExpressions.MatchCollection  \n            matches = regex.Matches(SourceString)  \n            Return matches.Count  \n        End Function  \n    End Class  \n    ```  \n  \n### To handle events from the thread  \n  \n-   Add the following event handlers to your main form:  \n  \n    ```vb  \n    Private Sub BackgroundWorker1_RunWorkerCompleted(   \n        ByVal sender As Object,   \n        ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs  \n      ) Handles BackgroundWorker1.RunWorkerCompleted  \n  \n        ' This event handler is called when the background thread finishes.  \n        ' This method runs on the main thread.  \n        If e.Error IsNot Nothing Then  \n            MessageBox.Show(\"Error: \" & e.Error.Message)  \n        ElseIf e.Cancelled Then  \n            MessageBox.Show(\"Word counting canceled.\")  \n        Else  \n            MessageBox.Show(\"Finished counting words.\")  \n        End If  \n    End Sub  \n  \n    Private Sub BackgroundWorker1_ProgressChanged(   \n        ByVal sender As Object,   \n        ByVal e As System.ComponentModel.ProgressChangedEventArgs  \n      ) Handles BackgroundWorker1.ProgressChanged  \n  \n        ' This method runs on the main thread.  \n        Dim state As Words.CurrentState =   \n            CType(e.UserState, Words.CurrentState)  \n        Me.LinesCounted.Text = state.LinesCounted.ToString  \n        Me.WordsCounted.Text = state.WordsMatched.ToString  \n    End Sub  \n    ```  \n  \n### To start and call a new thread that runs the WordCount method  \n  \n1.  Add the following procedures to your program:  \n  \n    ```vb  \n    Private Sub BackgroundWorker1_DoWork(   \n        ByVal sender As Object,   \n        ByVal e As System.ComponentModel.DoWorkEventArgs  \n      ) Handles BackgroundWorker1.DoWork  \n  \n        ' This event handler is where the actual work is done.  \n        ' This method runs on the background thread.  \n  \n        ' Get the BackgroundWorker object that raised this event.  \n        Dim worker As System.ComponentModel.BackgroundWorker  \n        worker = CType(sender, System.ComponentModel.BackgroundWorker)  \n  \n        ' Get the Words object and call the main method.  \n        Dim WC As Words = CType(e.Argument, Words)  \n        WC.CountWords(worker, e)  \n    End Sub  \n  \n    Sub StartThread()  \n        ' This method runs on the main thread.  \n        Me.WordsCounted.Text = \"0\"  \n  \n        ' Initialize the object that the background worker calls.  \n        Dim WC As New Words  \n        WC.CompareString = Me.CompareString.Text  \n        WC.SourceFile = Me.SourceFile.Text  \n  \n        ' Start the asynchronous operation.  \n        BackgroundWorker1.RunWorkerAsync(WC)  \n    End Sub  \n    ```  \n  \n2.  Call the `StartThread` method from the `Start` button on your form:  \n  \n    ```vb  \n    Private Sub Start_Click() Handles Start.Click  \n        StartThread()  \n    End Sub  \n    ```  \n  \n### To implement a Cancel button that stops the thread  \n  \n-   Call the `StopThread` procedure from the `Click` event handler for the `Cancel` button.  \n  \n    ```vb  \n    Private Sub Cancel_Click() Handles Cancel.Click  \n        ' Cancel the asynchronous operation.  \n        Me.BackgroundWorker1.CancelAsync()  \n    End Sub  \n    ```  \n  \n## Testing  \n You can now test the application to make sure it works correctly.  \n  \n#### To test the application  \n  \n1.  Press F5 to run the application.  \n  \n2.  When the form is displayed, enter the file path for the file you want to test in the `sourceFile` box. For example, assuming your test file is named Test.txt, enter C:\\Test.txt.  \n  \n3.  In the second text box, enter a word or phrase for the application to search for in the text file.  \n  \n4.  Click the `Start` button. The `LinesCounted` button should begin incrementing immediately. The application displays the message \"Finished Counting\" when it is done.  \n  \n#### To test the Cancel button  \n  \n1.  Press F5 to start the application, and enter the file name and search word as described in the previous procedure. Make sure that the file you choose is large enough to ensure you will have time to cancel the procedure before it is finished.  \n  \n2.  Click the `Start` button to start the application.  \n  \n3.  Click the `Cancel` button. The application should stop counting immediately.  \n  \n## Next Steps  \n This application contains some basic error handling. It detects blank search strings. You can make this program more robust by handling other errors, such as exceeding the maximum number of words or lines that can be counted.  \n  \n## See Also  \n [Threading (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/index.md)   \n [Walkthrough: Authoring a Simple Multithreaded Component with Visual Basic](http://msdn.microsoft.com/library/05693b70-3566-4d91-9f2c-c9bc4ccb3001)   \n [How to: Subscribe to and Unsubscribe from Events](../../../../csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md)","nodes":[{"pos":[4,468],"nodes":[{"content":"Multithreading with the BackgroundWorker Component (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,82],"content":"Multithreading with the BackgroundWorker Component (Visual Basic) | Microsoft Docs","nodes":[{"content":"Multithreading with the BackgroundWorker Component (Visual Basic) | Microsoft Docs","pos":[0,82]}]}],"pos":[6,91],"yaml":true}],"content":"title: \"Multithreading with the BackgroundWorker Component (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: e4cd9b2a-f924-470e-a16e-50274709b40e\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[475,553],"content":"Walkthrough: Multithreading with the BackgroundWorker Component (Visual Basic)","linkify":"Walkthrough: Multithreading with the BackgroundWorker Component (Visual Basic)","nodes":[{"content":"Walkthrough: Multithreading with the BackgroundWorker Component (Visual Basic)","pos":[0,78]}]},{"content":"This walkthrough demonstrates how to create a multithreaded Windows Forms application that searches a text file for occurrences of a word.","pos":[554,692]},{"content":"It demonstrates:","pos":[693,709]},{"content":"Defining a class with a method that can be called by the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component.","pos":[719,832],"source":"Defining a class with a method that can be called by the <xref:System.ComponentModel.BackgroundWorker> component."},{"content":"Handling events raised by the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component.","pos":[842,928],"source":"Handling events raised by the <xref:System.ComponentModel.BackgroundWorker> component."},{"content":"Starting a <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to run a method.","pos":[938,1021],"source":"Starting a <xref:System.ComponentModel.BackgroundWorker> component to run a method."},{"pos":[1031,1133],"content":"Implementing a <ph id=\"ph1\">`Cancel`</ph> button that stops the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component.","source":"Implementing a `Cancel` button that stops the <xref:System.ComponentModel.BackgroundWorker> component."},{"pos":[1143,1171],"content":"To create the user interface","linkify":"To create the user interface","nodes":[{"content":"To create the user interface","pos":[0,28]}]},{"pos":[1181,1272],"content":"Open a new Visual Basic Windows Forms Application project, and create a form named <ph id=\"ph1\">`Form1`</ph>.","source":"Open a new Visual Basic Windows Forms Application project, and create a form named `Form1`."},{"pos":[1282,1329],"content":"Add two buttons and four text boxes to <ph id=\"ph1\">`Form1`</ph>.","source":"Add two buttons and four text boxes to `Form1`."},{"content":"Name the objects as shown in the following table.","pos":[1339,1388]},{"content":"Object","pos":[1399,1405]},{"content":"Property","pos":[1406,1414]},{"content":"Setting","pos":[1415,1422]},{"content":"First button","pos":[1481,1493]},{"pos":[1494,1508],"content":"<ph id=\"ph1\">`Name`</ph>, <ph id=\"ph2\">`Text`</ph>","source":"`Name`, `Text`"},{"content":"Start, Start","pos":[1509,1521]},{"content":"Second button","pos":[1530,1543]},{"pos":[1544,1558],"content":"<ph id=\"ph1\">`Name`</ph>, <ph id=\"ph2\">`Text`</ph>","source":"`Name`, `Text`"},{"content":"Cancel, Cancel","pos":[1559,1573]},{"content":"First text box","pos":[1582,1596]},{"pos":[1597,1611],"content":"<ph id=\"ph1\">`Name`</ph>, <ph id=\"ph2\">`Text`</ph>","source":"`Name`, `Text`"},{"content":"SourceFile, \"\"","pos":[1612,1626]},{"content":"Second text box","pos":[1635,1650]},{"pos":[1651,1665],"content":"<ph id=\"ph1\">`Name`</ph>, <ph id=\"ph2\">`Text`</ph>","source":"`Name`, `Text`"},{"content":"CompareString, \"\"","pos":[1666,1683]},{"content":"Third text box","pos":[1692,1706]},{"pos":[1707,1721],"content":"<ph id=\"ph1\">`Name`</ph>, <ph id=\"ph2\">`Text`</ph>","source":"`Name`, `Text`"},{"content":"WordsCounted, \"0\"","pos":[1722,1739]},{"content":"Fourth text box","pos":[1748,1763]},{"pos":[1764,1778],"content":"<ph id=\"ph1\">`Name`</ph>, <ph id=\"ph2\">`Text`</ph>","source":"`Name`, `Text`"},{"content":"LinesCounted, \"0\"","pos":[1779,1796]},{"content":"Add a label next to each text box.","pos":[1807,1841]},{"content":"Set the <ph id=\"ph1\">`Text`</ph> property for each label as shown in the following table.","pos":[1842,1913],"source":" Set the `Text` property for each label as shown in the following table."},{"content":"Object","pos":[1924,1930]},{"content":"Property","pos":[1931,1939]},{"content":"Setting","pos":[1940,1947]},{"content":"First label","pos":[2006,2017]},{"content":"Source File","pos":[2025,2036]},{"content":"Second label","pos":[2045,2057]},{"content":"Compare String","pos":[2065,2079]},{"content":"Third label","pos":[2088,2099]},{"content":"Matching Words","pos":[2107,2121]},{"content":"Fourth label","pos":[2130,2142]},{"content":"Lines Counted","pos":[2150,2163]},{"pos":[2174,2240],"content":"To create a BackgroundWorker component and subscribe to its events","linkify":"To create a BackgroundWorker component and subscribe to its events","nodes":[{"content":"To create a BackgroundWorker component and subscribe to its events","pos":[0,66]}]},{"content":"Add a <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component from the <bpt id=\"p1\">**</bpt>Components<ept id=\"p1\">**</ept> section of the <bpt id=\"p2\">**</bpt>ToolBox<ept id=\"p2\">**</ept> to the form.","pos":[2250,2375],"source":"Add a <xref:System.ComponentModel.BackgroundWorker> component from the **Components** section of the **ToolBox** to the form."},{"content":"It will appear in the form's component tray.","pos":[2376,2420]},{"content":"Set the following properties for the BackgroundWorker1 object.","pos":[2430,2492]},{"content":"Property","pos":[2503,2511]},{"content":"Setting","pos":[2512,2519]},{"content":"True","pos":[2589,2593]},{"content":"True","pos":[2631,2635]},{"pos":[2646,2701],"content":"To define the method that will run on a separate thread","linkify":"To define the method that will run on a separate thread","nodes":[{"content":"To define the method that will run on a separate thread","pos":[0,55]}]},{"content":"From the <bpt id=\"p1\">**</bpt>Project<ept id=\"p1\">**</ept> menu, choose <bpt id=\"p2\">**</bpt>Add Class<ept id=\"p2\">**</ept> to add a class to the project.","pos":[2711,2789],"source":"From the **Project** menu, choose **Add Class** to add a class to the project."},{"content":"The <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialog box is displayed.","pos":[2790,2835],"source":" The **Add New Item** dialog box is displayed."},{"pos":[2845,2927],"content":"Select <bpt id=\"p1\">**</bpt>Class<ept id=\"p1\">**</ept> from the templates window and enter <ph id=\"ph1\">`Words.vb`</ph> in the name field.","source":"Select **Class** from the templates window and enter `Words.vb` in the name field."},{"content":"Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>.","pos":[2937,2951],"source":"Click **Add**."},{"content":"The <ph id=\"ph1\">`Words`</ph> class is displayed.","pos":[2952,2983],"source":" The `Words` class is displayed."},{"pos":[2993,3037],"content":"Add the following code to the <ph id=\"ph1\">`Words`</ph> class:","source":"Add the following code to the `Words` class:"},{"pos":[6455,6487],"content":"To handle events from the thread","linkify":"To handle events from the thread","nodes":[{"content":"To handle events from the thread","pos":[0,32]}]},{"content":"Add the following event handlers to your main form:","pos":[6497,6548]},{"pos":[7723,7784],"content":"To start and call a new thread that runs the WordCount method","linkify":"To start and call a new thread that runs the WordCount method","nodes":[{"content":"To start and call a new thread that runs the WordCount method","pos":[0,61]}]},{"content":"Add the following procedures to your program:","pos":[7794,7839]},{"pos":[8970,9037],"content":"Call the <ph id=\"ph1\">`StartThread`</ph> method from the <ph id=\"ph2\">`Start`</ph> button on your form:","source":"Call the `StartThread` method from the `Start` button on your form:"},{"pos":[9162,9212],"content":"To implement a Cancel button that stops the thread","linkify":"To implement a Cancel button that stops the thread","nodes":[{"content":"To implement a Cancel button that stops the thread","pos":[0,50]}]},{"pos":[9222,9309],"content":"Call the <ph id=\"ph1\">`StopThread`</ph> procedure from the <ph id=\"ph2\">`Click`</ph> event handler for the <ph id=\"ph3\">`Cancel`</ph> button.","source":"Call the `StopThread` procedure from the `Click` event handler for the `Cancel` button."},{"pos":[9503,9510],"content":"Testing","linkify":"Testing","nodes":[{"content":"Testing","pos":[0,7]}]},{"content":"You can now test the application to make sure it works correctly.","pos":[9514,9579]},{"pos":[9590,9613],"content":"To test the application","linkify":"To test the application","nodes":[{"content":"To test the application","pos":[0,23]}]},{"content":"Press F5 to run the application.","pos":[9623,9655]},{"content":"When the form is displayed, enter the file path for the file you want to test in the <ph id=\"ph1\">`sourceFile`</ph> box.","pos":[9665,9767],"source":"When the form is displayed, enter the file path for the file you want to test in the `sourceFile` box."},{"content":"For example, assuming your test file is named Test.txt, enter C:\\Test.txt.","pos":[9768,9842]},{"content":"In the second text box, enter a word or phrase for the application to search for in the text file.","pos":[9852,9950]},{"content":"Click the <ph id=\"ph1\">`Start`</ph> button.","pos":[9960,9985],"source":"Click the `Start` button."},{"content":"The <ph id=\"ph1\">`LinesCounted`</ph> button should begin incrementing immediately.","pos":[9986,10050],"source":" The `LinesCounted` button should begin incrementing immediately."},{"content":"The application displays the message \"Finished Counting\" when it is done.","pos":[10051,10124]},{"pos":[10135,10160],"content":"To test the Cancel button","linkify":"To test the Cancel button","nodes":[{"content":"To test the Cancel button","pos":[0,25]}]},{"content":"Press F5 to start the application, and enter the file name and search word as described in the previous procedure.","pos":[10170,10284]},{"content":"Make sure that the file you choose is large enough to ensure you will have time to cancel the procedure before it is finished.","pos":[10285,10411]},{"pos":[10421,10471],"content":"Click the <ph id=\"ph1\">`Start`</ph> button to start the application.","source":"Click the `Start` button to start the application."},{"content":"Click the <ph id=\"ph1\">`Cancel`</ph> button.","pos":[10481,10507],"source":"Click the `Cancel` button."},{"content":"The application should stop counting immediately.","pos":[10508,10557]},{"pos":[10566,10576],"content":"Next Steps","linkify":"Next Steps","nodes":[{"content":"Next Steps","pos":[0,10]}]},{"content":"This application contains some basic error handling.","pos":[10580,10632]},{"content":"It detects blank search strings.","pos":[10633,10665]},{"content":"You can make this program more robust by handling other errors, such as exceeding the maximum number of words or lines that can be counted.","pos":[10666,10805]},{"pos":[10814,10822],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Threading (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/threading/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[10826,10925],"source":"[Threading (Visual Basic)](../../../../visual-basic/programming-guide/concepts/threading/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Authoring a Simple Multithreaded Component with Visual Basic<ept id=\"p1\">](http://msdn.microsoft.com/library/05693b70-3566-4d91-9f2c-c9bc4ccb3001)</ept><ph id=\"ph1\"> </ph>","pos":[10929,11077],"source":"[Walkthrough: Authoring a Simple Multithreaded Component with Visual Basic](http://msdn.microsoft.com/library/05693b70-3566-4d91-9f2c-c9bc4ccb3001) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Subscribe to and Unsubscribe from Events<ept id=\"p1\">](../../../../csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md)</ept>","pos":[11081,11227],"source":"[How to: Subscribe to and Unsubscribe from Events](../../../../csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md)"}]}