{"content":"---\ntitle: \"User Name Password Validator | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 42f03841-286b-42d8-ba58-18c75422bc8e\ncaps.latest.revision: 18\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# User Name Password Validator\nThis sample demonstrates how to implement a custom UserNamePassword Validator. This is useful in cases where none of the built-in UserNamePassword Validation modes is appropriate for the requirements of the application; for example, when username/password pairs are stored in some external store, such as a database. This sample shows a service that has a custom validator that checks for two particular username/password pairs. The client uses such a username/password pair to authenticate to the service.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your computer. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Extensibility\\Security\\UserNamePasswordValidator`  \n  \n> [!NOTE]\n>  Because anyone can construct a Username credential that uses the username/password pairs that the custom validator accepts, the service is less secure than the default behavior provided by the standard UserNamePassword Validator. The standard UserNamePassword Validator attempts to map the provided username/password pair to a Windows account and fails authentication if this mapping fails. The custom UserNamePassword Validator in this sample MUST NOT be used in production code, it is for illustration purposes only.  \n  \n In summary this sample demonstrates how:  \n  \n-   The client can be authenticated using a Username Token.  \n  \n-   The server validates the client credentials against a custom UserNamePasswordValidator and how to propagate custom faults from the username and password validation logic to the client.  \n  \n-   The server is authenticated using the server's X.509 certificate.  \n  \n The service exposes a single endpoint for communicating with the service, defined using the configuration file, App.config. The endpoint consists of an address, a binding, and a contract. The binding is configured with a standard `wsHttpBinding` that defaults to using WS-Securityand username authentication. The service behavior specifies the `Custom` mode for validating client username/password pairs along with the type of the validator class. The behavior also specifies the server certificate using the `serviceCertificate` element. The server certificate has to contain the same value for the `SubjectName` as the `findValue` in the [\\<serviceCertificate>](../../../../docs/framework/configure-apps/file-schema/wcf/servicecertificate-of-servicecredentials.md).  \n  \n```  \n<system.serviceModel>  \n  <services>  \n    <service name=\"Microsoft.ServiceModel.Samples.CalculatorService\"  \n             behaviorConfiguration=\"CalculatorServiceBehavior\">  \n      <!-- use host/baseAddresses to configure base address provided by host -->  \n      <host>  \n        <baseAddresses>  \n          <add baseAddress =\"http://localhost:8001/servicemodelsamples/service\" />  \n        </baseAddresses>  \n      </host>  \n      <!-- use base address specified above, provide one endpoint -->  \n      <endpoint address=\"username\"  \n                binding=\"wsHttpBinding\"  \n                bindingConfiguration=\"Binding\"   \n                contract=\"Microsoft.ServiceModel.Samples.ICalculator\" />  \n    </service>  \n  </services>  \n  \n  <bindings>  \n    <wsHttpBinding>  \n      <!-- username binding -->  \n      <binding name=\"Binding\">  \n        <security mode=\"Message\">  \n          <message clientCredentialType=\"UserName\" />  \n        </security>  \n      </binding>  \n    </wsHttpBinding>  \n  </bindings>  \n  \n  <behaviors>  \n    <serviceBehaviors>  \n      <behavior name=\"CalculatorServiceBehavior\">  \n        <serviceDebug includeExceptionDetailInFaults =\"true\"/>  \n        <serviceCredentials>  \n          <!--   \n          The serviceCredentials behavior allows one to   \n          specify a custom validator for username/password  \n          combinations.  \n          -->  \n          <userNameAuthentication userNamePasswordValidationMode=\"Custom\"  \n                                  customUserNamePasswordValidatorType=\"Microsoft.ServiceModel.Samples.CalculatorService+MyCustomUserNameValidator, service\" />  \n          <!--   \n          The serviceCredentials behavior allows one to define a service certificate. A service certificate is used by a client to authenticate the service and provide message protection. You must specify a server certificate when passing username/passwords to encrypt the information as it is sent on the wire. Otherwise the username and password information would be sent as clear text. This configuration references the \"localhost\" certificate installed during the setup instructions.  \n          -->  \n          <serviceCertificate findValue=\"localhost\" storeLocation=\"LocalMachine\" storeName=\"My\" x509FindType=\"FindBySubjectName\" />  \n        </serviceCredentials>  \n      </behavior>  \n    </serviceBehaviors>  \n  </behaviors>  \n  \n</system.serviceModel>  \n  \n```  \n  \n The client endpoint configuration consists of a configuration name, an absolute address for the service endpoint, the binding, and the contract. The client binding is configured with the appropriate mode and message `clientCredentialType`.  \n  \n```  \n<system.serviceModel>  \n  \n    <client>  \n      <!-- Username based endpoint -->  \n      <endpoint name=\"Username\"  \naddress=\"http://localhost:8001/servicemodelsamples/service/username\"   \n                binding=\"wsHttpBinding\"   \n                bindingConfiguration=\"Binding\"   \n                behaviorConfiguration=\"ClientCertificateBehavior\"  \n                contract=\"Microsoft.ServiceModel.Samples.ICalculator\">  \n      </endpoint>  \n    </client>  \n  \n    <bindings>  \n      <wsHttpBinding>  \n        <!-- Username binding -->  \n        <binding name=\"Binding\">  \n          <security mode=\"Message\">  \n            <message clientCredentialType=\"UserName\" />  \n          </security>  \n        </binding>  \n      </wsHttpBinding>  \n    </bindings>  \n    <behaviors>  \n      <endpointBehaviors>  \n        <behavior name=\"ClientCertificateBehavior\">  \n          <clientCredentials>  \n            <serviceCertificate>  \n              <!--   \n            Setting the certificateValidationMode to PeerOrChainTrust means that if the certificate   \n            is in the user's Trusted People store, then it will be trusted without performing a  \n            validation of the certificate's issuer chain. This setting is used here for convenience so that the   \n            sample can be run without having to have certificates issued by a certification authority (CA).  \n            This setting is less secure than the default, ChainTrust. The security implications of this   \n            setting should be carefully considered before using PeerOrChainTrust in production code.   \n            -->  \n              <authentication certificateValidationMode=\"PeerOrChainTrust\" />  \n            </serviceCertificate>  \n          </clientCredentials>  \n        </behavior>  \n      </endpointBehaviors>  \n    </behaviors>  \n  \n  </system.serviceModel>  \n  \n```  \n  \n The client implementation prompts the user to enter a username and password.  \n  \n```  \n// Get the username and password  \nConsole.WriteLine(\"Username authentication required.\");  \nConsole.WriteLine(\"Provide a username.\");  \nConsole.WriteLine(\"   Enter username: (test1)\");  \nstring username = Console.ReadLine();  \nConsole.WriteLine(\"   Enter password:\");  \nstring password = \"\";  \nConsoleKeyInfo info = Console.ReadKey(true);  \nwhile (info.Key != ConsoleKey.Enter)  \n{  \n    if (info.Key != ConsoleKey.Backspace)  \n    {  \n        if (info.KeyChar != '\\0')  \n        {  \n            password += info.KeyChar;  \n        }  \n        info = Console.ReadKey(true);  \n    }  \n    else if (info.Key == ConsoleKey.Backspace)  \n    {  \n        if (password != \"\")  \n        {  \n            password = password.Substring(0, password.Length - 1);  \n        }  \n        info = Console.ReadKey(true);  \n    }  \n}  \nfor (int i = 0; i < password.Length; i++)  \n{  \n    Console.Write(\"*\");  \n}  \nConsole.WriteLine();  \n// Create a proxy with Certificate endpoint configuration  \nCalculatorProxy proxy = new CalculatorProxy(\"Username\")  \ntry  \n{  \n  proxy.ClientCredentials.Username.Username = username;  \n  proxy.ClientCredentials.Username.Password = password;  \n    // Call the Add service operation.  \n    double value1 = 100.00D;  \n    double value2 = 15.99D;  \n    double result = proxy.Add(value1, value2);  \n    Console.WriteLine(\"Add({0},{1}) = {2}\", value1, value2, result);  \n  }  \n  catch (Exception e)  \n  {  \n      Console.WriteLine(\"Call failed:\");  \n      while (e != null)  \n      {  \n          Console.WriteLine(\"\\t{0}\", e.Message);  \n          e = e.InnerException;  \n      }  \n      proxy.Abort();  \n  }  \n}  \n  \n```  \n  \n This sample uses a custom UserNamePasswordValidator to validate username/password pairs. The sample implements `CustomUserNamePasswordValidator`, derived from <xref:System.IdentityModel.Selectors.UserNamePasswordValidator>. See the documentation for <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> for more information. This particular custom validator sample implements the `Validate` method to accept two particular username/password pairs as shown in the following code.  \n  \n```  \npublic class CustomUserNameValidator : UserNamePasswordValidator  \n{  \n // This method validates users. It allows in two users,   \n // test1 and test2 with passwords 1tset and 2tset respectively.  \n // This code is for illustration purposes only and   \n // MUST NOT be used in a production environment because it   \n // is NOT secure.  \n public override void Validate(string userName, string password)  \n {  \n  if (null == userName || null == password)  \n  {  \n   throw new ArgumentNullException();  \n  }  \n  \n  if (!(userName == \"test1\" && password == \"1tset\") && !(userName == \"test2\" && password == \"2tset\"))  \n  {  \n   throw new FaultException(\"Unknown Username or Incorrect Password\");  \n   }  \n  }  \n }  \n```  \n  \n Once the validator is implemented in service code, the service host must be informed about the validator instance to use. This is done using the following code.  \n  \n```  \nserviceHost.Credentials.UserNameAuthentication.UserNamePasswordValidationMode = UserNamePasswordValidationMode.Custom;  \nserviceHost.Credentials. UserNameAuthentication.CustomUserNamePasswordValidator = new CustomUserNamePasswordValidator();  \n```  \n  \n Or you can do the same thing in configuration as follows.  \n  \n```  \n<behaviors>  \n <serviceBehaviors>  \n  <behavior name=\"CalculatorServiceBehavior\">  \n  ...  \n   <serviceCredentials>  \n    <!--   \n    The serviceCredentials behavior allows one to specify authentication constraints on username / password combinations.  \n    -->  \n    <userNameAuthentication userNamePasswordValidationMode=\"Custom\" customUserNamePasswordValidatorType=\"Microsoft.ServiceModel.Samples.CalculatorService+CustomUserNameValidator, service\" />  \n   ...  \n  </behavior>  \n </serviceBehaviors>  \n</behaviors>  \n  \n```  \n  \n When you run the sample, the operation requests and responses are displayed in the client console window. The client should successfully call all the methods. Press ENTER in the client window to shut down the client.  \n  \n## Setup Batch File  \n The Setup.bat batch file included with this sample allows you to configure the server with relevant certificates to run a self-hosted application that requires server certificate-based security. This batch file must be modified to work across machines or to work in a non-self-hosted case.  \n  \n The following provides a brief overview of the different sections of the batch files so that they can be modified to run in the appropriate configuration.  \n  \n-   Creating the server certificate:  \n  \n     The following lines from the Setup.bat batch file create the server certificate to be used. The %SERVER_NAME% variable specifies the server name. Change this variable to specify your own server name. The default value is localhost.  \n  \n    ```  \n    echo ************  \n    echo Server cert setup starting  \n    echo %SERVER_NAME%  \n    echo ************  \n    echo making server cert  \n    echo ************  \n    makecert.exe -sr LocalMachine -ss MY -a sha1 -n CN=%SERVER_NAME% -sky exchange -pe  \n  \n    ```  \n  \n-   Installing the server certificate into client's trusted certificate store:  \n  \n     The following lines in the Setup.bat batch file copy the server certificate into the client trusted people store. This step is required because certificates generated by Makecert.exe are not implicitly trusted by the client system. If you already have a certificate that is rooted in a client trusted root certificate—for example, a Microsoft issued certificate—this step of populating the client certificate store with the server certificate is not required.  \n  \n    ```  \n    certmgr.exe -add -r LocalMachine -s My -c -n %SERVER_NAME% -r CurrentUser -s TrustedPeople  \n    ```  \n  \n#### To set up and build the sample  \n  \n1.  To build the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n2.  To run the sample in a single- or cross-machine configuration, use the following instructions.  \n  \n#### To run the sample on the same machine  \n  \n1.  Run Setup.bat from the sample install folder inside a [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] command prompt. This installs all the certificates required for running the sample.  \n  \n    > [!NOTE]\n    >  The Setup.bat batch file is designed to be run from a [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] Command Prompt. The PATH environment variable set within the [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] Command Prompt points to the directory that contains executables required by the Setup.bat script.  \n  \n2.  Launch Service.exe from service\\bin.  \n  \n3.  Launch Client.exe from \\client\\bin. Client activity is displayed on the client console application.  \n  \n4.  If the client and service are not able to communicate, see [Troubleshooting Tips](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b).  \n  \n#### To run the sample across machines  \n  \n1.  Create a directory on the service machine for the service binaries.  \n  \n2.  Copy the service program files the service directory on the service machine. Also copy the Setup.bat and Cleanup.bat files to the service machine.  \n  \n3.  You need a server certificate with the subject name that contains the fully-qualified domain name of the machine. The configuration file for the server must be updated to reflect this new certificate name.  \n  \n4.  Copy the server certificate into the CurrentUser-TrustedPeople store of the client. You need to do this only if the server certificate is not issued by a trusted issuer.  \n  \n5.  In the App.config file on the service machine, change the value of the base address to specify a fully-qualified machine name instead of localhost.  \n  \n6.  On the service machine, launch Service.exe from a command prompt window.  \n  \n7.  Copy the client program files from the \\client\\bin\\ folder, under the language-specific folder, to the client machine.  \n  \n8.  In the Client.exe.config file on the client machine, change the address value of the endpoint to match the new address of your service.  \n  \n9. On the client machine, launch Client.exe from a command prompt window.  \n  \n10. If the client and service are not able to communicate, see [Troubleshooting Tips](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b).  \n  \n#### To clean up after the sample  \n  \n1.  Run Cleanup.bat in the samples folder once you have finished running the sample. This removes the server certificate from the certificate store.  \n  \n## See Also","nodes":[{"pos":[4,349],"embed":true,"restype":"x-metadata","content":"title: \"User Name Password Validator | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 42f03841-286b-42d8-ba58-18c75422bc8e\ncaps.latest.revision: 18\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"User Name Password Validator | Microsoft Docs","nodes":[{"pos":[0,45],"content":"User Name Password Validator | Microsoft Docs","nodes":[{"content":"User Name Password Validator | Microsoft Docs","pos":[0,45]}]}],"path":["title"]}],"yml":true},{"pos":[356,384],"content":"User Name Password Validator","linkify":"User Name Password Validator","nodes":[{"content":"User Name Password Validator","pos":[0,28]}]},{"content":"This sample demonstrates how to implement a custom UserNamePassword Validator.","pos":[385,463]},{"content":"This is useful in cases where none of the built-in UserNamePassword Validation modes is appropriate for the requirements of the application; for example, when username/password pairs are stored in some external store, such as a database.","pos":[464,701]},{"content":"This sample shows a service that has a custom validator that checks for two particular username/password pairs.","pos":[702,813]},{"content":"The client uses such a username/password pair to authenticate to the service.","pos":[814,891]},{"pos":[899,1032],"content":"[!IMPORTANT]\n The samples may already be installed on your computer. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your computer. Check for the following (default) directory before continuing.","pos":[14,131],"nodes":[{"content":"The samples may already be installed on your computer.","pos":[0,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[1086,1412],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[1413,1463]},{"pos":[1567,2096],"content":"[!NOTE]\n Because anyone can construct a Username credential that uses the username/password pairs that the custom validator accepts, the service is less secure than the default behavior provided by the standard UserNamePassword Validator. The standard UserNamePassword Validator attempts to map the provided username/password pair to a Windows account and fails authentication if this mapping fails. The custom UserNamePassword Validator in this sample MUST NOT be used in production code, it is for illustration purposes only.","leadings":["","> "],"nodes":[{"content":"Because anyone can construct a Username credential that uses the username/password pairs that the custom validator accepts, the service is less secure than the default behavior provided by the standard UserNamePassword Validator. The standard UserNamePassword Validator attempts to map the provided username/password pair to a Windows account and fails authentication if this mapping fails. The custom UserNamePassword Validator in this sample MUST NOT be used in production code, it is for illustration purposes only.","pos":[9,527],"nodes":[{"content":"Because anyone can construct a Username credential that uses the username/password pairs that the custom validator accepts, the service is less secure than the default behavior provided by the standard UserNamePassword Validator.","pos":[0,229]},{"content":"The standard UserNamePassword Validator attempts to map the provided username/password pair to a Windows account and fails authentication if this mapping fails.","pos":[230,390]},{"content":"The custom UserNamePassword Validator in this sample MUST NOT be used in production code, it is for illustration purposes only.","pos":[391,518]}]}]},{"content":"In summary this sample demonstrates how:","pos":[2103,2143]},{"content":"The client can be authenticated using a Username Token.","pos":[2153,2208]},{"content":"The server validates the client credentials against a custom UserNamePasswordValidator and how to propagate custom faults from the username and password validation logic to the client.","pos":[2218,2402]},{"content":"The server is authenticated using the server's X.509 certificate.","pos":[2412,2477]},{"content":"The service exposes a single endpoint for communicating with the service, defined using the configuration file, App.config. The endpoint consists of an address, a binding, and a contract.","pos":[2484,2671]},{"content":"The binding is configured with a standard <ph id=\"ph1\">`wsHttpBinding`</ph> that defaults to using WS-Securityand username authentication.","pos":[2672,2792],"source":" The binding is configured with a standard `wsHttpBinding` that defaults to using WS-Securityand username authentication."},{"content":"The service behavior specifies the <ph id=\"ph1\">`Custom`</ph> mode for validating client username/password pairs along with the type of the validator class.","pos":[2793,2931],"source":" The service behavior specifies the `Custom` mode for validating client username/password pairs along with the type of the validator class."},{"content":"The behavior also specifies the server certificate using the <ph id=\"ph1\">`serviceCertificate`</ph> element.","pos":[2932,3022],"source":" The behavior also specifies the server certificate using the `serviceCertificate` element."},{"content":"The server certificate has to contain the same value for the <ph id=\"ph1\">`SubjectName`</ph> as the <ph id=\"ph2\">`findValue`</ph> in the <bpt id=\"p1\">[</bpt><ph id=\"ph3\">\\&lt;</ph>serviceCertificate&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/servicecertificate-of-servicecredentials.md)</ept>.","pos":[3023,3251],"source":" The server certificate has to contain the same value for the `SubjectName` as the `findValue` in the [\\<serviceCertificate>](../../../../docs/framework/configure-apps/file-schema/wcf/servicecertificate-of-servicecredentials.md)."},{"content":"The client endpoint configuration consists of a configuration name, an absolute address for the service endpoint, the binding, and the contract.","pos":[5682,5826]},{"content":"The client binding is configured with the appropriate mode and message <ph id=\"ph1\">`clientCredentialType`</ph>.","pos":[5827,5921],"source":" The client binding is configured with the appropriate mode and message `clientCredentialType`."},{"content":"The client implementation prompts the user to enter a username and password.","pos":[7797,7873]},{"content":"This sample uses a custom UserNamePasswordValidator to validate username/password pairs.","pos":[9525,9613]},{"content":"The sample implements <ph id=\"ph1\">`CustomUserNamePasswordValidator`</ph>, derived from <ph id=\"ph2\">&lt;xref:System.IdentityModel.Selectors.UserNamePasswordValidator&gt;</ph>.","pos":[9614,9748],"source":" The sample implements `CustomUserNamePasswordValidator`, derived from <xref:System.IdentityModel.Selectors.UserNamePasswordValidator>."},{"content":"See the documentation for <ph id=\"ph1\">&lt;xref:System.IdentityModel.Selectors.UserNamePasswordValidator&gt;</ph> for more information.","pos":[9749,9860],"source":" See the documentation for <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> for more information."},{"content":"This particular custom validator sample implements the <ph id=\"ph1\">`Validate`</ph> method to accept two particular username/password pairs as shown in the following code.","pos":[9861,10014],"source":" This particular custom validator sample implements the `Validate` method to accept two particular username/password pairs as shown in the following code."},{"content":"Once the validator is implemented in service code, the service host must be informed about the validator instance to use.","pos":[10747,10868]},{"content":"This is done using the following code.","pos":[10869,10907]},{"content":"Or you can do the same thing in configuration as follows.","pos":[11173,11230]},{"content":"When you run the sample, the operation requests and responses are displayed in the client console window.","pos":[11775,11880]},{"content":"The client should successfully call all the methods.","pos":[11881,11933]},{"content":"Press ENTER in the client window to shut down the client.","pos":[11934,11991]},{"pos":[12000,12016],"content":"Setup Batch File","linkify":"Setup Batch File","nodes":[{"content":"Setup Batch File","pos":[0,16]}]},{"content":"The Setup.bat batch file included with this sample allows you to configure the server with relevant certificates to run a self-hosted application that requires server certificate-based security.","pos":[12020,12214]},{"content":"This batch file must be modified to work across machines or to work in a non-self-hosted case.","pos":[12215,12309]},{"content":"The following provides a brief overview of the different sections of the batch files so that they can be modified to run in the appropriate configuration.","pos":[12316,12470]},{"content":"Creating the server certificate:","pos":[12480,12512]},{"content":"The following lines from the Setup.bat batch file create the server certificate to be used.","pos":[12523,12614]},{"content":"The %SERVER_NAME% variable specifies the server name.","pos":[12615,12668]},{"content":"Change this variable to specify your own server name.","pos":[12669,12722]},{"content":"The default value is localhost.","pos":[12723,12754]},{"content":"Installing the server certificate into client's trusted certificate store:","pos":[13044,13118]},{"content":"The following lines in the Setup.bat batch file copy the server certificate into the client trusted people store.","pos":[13129,13242]},{"content":"This step is required because certificates generated by Makecert.exe are not implicitly trusted by the client system.","pos":[13243,13360]},{"content":"If you already have a certificate that is rooted in a client trusted root certificate—for example, a Microsoft issued certificate—this step of populating the client certificate store with the server certificate is not required.","pos":[13361,13588]},{"pos":[13719,13749],"content":"To set up and build the sample","linkify":"To set up and build the sample","nodes":[{"content":"To set up and build the sample","pos":[0,30]}]},{"pos":[13759,13929],"content":"To build the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"content":"To run the sample in a single- or cross-machine configuration, use the following instructions.","pos":[13939,14033]},{"pos":[14044,14081],"content":"To run the sample on the same machine","linkify":"To run the sample on the same machine","nodes":[{"content":"To run the sample on the same machine","pos":[0,37]}]},{"content":"Run Setup.bat from the sample install folder inside a <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> command prompt.","pos":[14091,14232],"source":"Run Setup.bat from the sample install folder inside a [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] command prompt."},{"content":"This installs all the certificates required for running the sample.","pos":[14233,14300]},{"pos":[14312,14684],"content":"[!NOTE]\nThe Setup.bat batch file is designed to be run from a [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] Command Prompt. The PATH environment variable set within the [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] Command Prompt points to the directory that contains executables required by the Setup.bat script.","leadings":["","    >  "],"nodes":[{"content":"The Setup.bat batch file is designed to be run from a [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] Command Prompt. The PATH environment variable set within the [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] Command Prompt points to the directory that contains executables required by the Setup.bat script.","pos":[8,365],"nodes":[{"content":"The Setup.bat batch file is designed to be run from a <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> Command Prompt.","pos":[0,141],"source":"The Setup.bat batch file is designed to be run from a [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] Command Prompt."},{"content":"The PATH environment variable set within the <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> Command Prompt points to the directory that contains executables required by the Setup.bat script.","pos":[142,357],"source":" The PATH environment variable set within the [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)] Command Prompt points to the directory that contains executables required by the Setup.bat script."}]}]},{"content":"Launch Service.exe from service\\bin.","pos":[14694,14730]},{"content":"Launch Client.exe from \\client\\bin.","pos":[14740,14775]},{"content":"Client activity is displayed on the client console application.","pos":[14776,14839]},{"pos":[14849,15001],"content":"If the client and service are not able to communicate, see <bpt id=\"p1\">[</bpt>Troubleshooting Tips<ept id=\"p1\">](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)</ept>.","source":"If the client and service are not able to communicate, see [Troubleshooting Tips](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)."},{"pos":[15012,15045],"content":"To run the sample across machines","linkify":"To run the sample across machines","nodes":[{"content":"To run the sample across machines","pos":[0,33]}]},{"content":"Create a directory on the service machine for the service binaries.","pos":[15055,15122]},{"content":"Copy the service program files the service directory on the service machine.","pos":[15132,15208]},{"content":"Also copy the Setup.bat and Cleanup.bat files to the service machine.","pos":[15209,15278]},{"content":"You need a server certificate with the subject name that contains the fully-qualified domain name of the machine.","pos":[15288,15401]},{"content":"The configuration file for the server must be updated to reflect this new certificate name.","pos":[15402,15493]},{"content":"Copy the server certificate into the CurrentUser-TrustedPeople store of the client.","pos":[15503,15586]},{"content":"You need to do this only if the server certificate is not issued by a trusted issuer.","pos":[15587,15672]},{"content":"In the App.config file on the service machine, change the value of the base address to specify a fully-qualified machine name instead of localhost.","pos":[15682,15829]},{"content":"On the service machine, launch Service.exe from a command prompt window.","pos":[15839,15911]},{"content":"Copy the client program files from the \\client\\bin\\ folder, under the language-specific folder, to the client machine.","pos":[15921,16039]},{"content":"In the Client.exe.config file on the client machine, change the address value of the endpoint to match the new address of your service.","pos":[16049,16184]},{"content":"On the client machine, launch Client.exe from a command prompt window.","pos":[16193,16263]},{"pos":[16273,16425],"content":"If the client and service are not able to communicate, see <bpt id=\"p1\">[</bpt>Troubleshooting Tips<ept id=\"p1\">](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)</ept>.","source":"If the client and service are not able to communicate, see [Troubleshooting Tips](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)."},{"pos":[16436,16464],"content":"To clean up after the sample","linkify":"To clean up after the sample","nodes":[{"content":"To clean up after the sample","pos":[0,28]}]},{"content":"Run Cleanup.bat in the samples folder once you have finished running the sample.","pos":[16474,16554]},{"content":"This removes the server certificate from the certificate store.","pos":[16555,16618]},{"pos":[16627,16635],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}