<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a5244583d87e6a6746cb4a9e56387a59e712229</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\walkthrough-enabling-drag-and-drop-on-a-user-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55e0992601766d0600b297a90a3d9e1a52753387</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">206167cc0149a813779aba1e958b2382bfe2350e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Enabling Drag and Drop on a User Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Enabling Drag and Drop on a User Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This walkthrough demonstrates how to create a custom user control that can participate in drag-and-drop data transfer in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this walkthrough, you will create a custom WPF <ph id="ph1">&lt;xref:System.Windows.Controls.UserControl&gt;</ph> that represents a circle shape.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You will implement functionality on the control to enable data transfer through drag-and-drop.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, if you drag from one Circle control to another, the Fill color data is copied from the source Circle to the target.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you drag from a Circle control to a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, the string representation of the Fill color is copied to the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You will also create a small application that contains two panel controls and a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> to test the drag-and-drop functionality.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You will write code that enables the panels to process dropped Circle data, which will enable you to move or copy Circles from the Children collection of one panel to the other.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This walkthrough illustrates the following tasks:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create a custom user control.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Enable the user control to be a drag source.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Enable the user control to be a drop target.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Enable a panel to receive data dropped from the user control.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You need the following components to complete this walkthrough:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Visual Studio 2010</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creating the Application Project</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this section, you will create the application infrastructure, which includes a main page with two panels and a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To create the project</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create a new WPF Application project in Visual Basic or Visual C# named <ph id="ph1">`DragDropExample`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create a New WPF Application Project<ept id="p1">](http://msdn.microsoft.com/en-us/1f6aea7a-33e1-4d3f-8555-1daa42e95d82)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Open MainWindow.xaml.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add the following markup between the opening and closing <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> tags.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This markup creates the user interface for the test application.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#PanelsStep1XAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/SnippetWindow.xaml#panelsstep1xaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Adding a New User Control to the Project</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this section, you will add a new user control to the project.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To add a new user control</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>On the Project menu, select <bpt id="p1">**</bpt>Add User Control<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the Add New Item dialog box, change the name to <ph id="ph1">`Circle.xaml`</ph>, and click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Circle.xaml and its code-behind is added to the project.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Open Circle.xaml.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This file will contain the user interface elements of the user control.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add the following markup to the root <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> to create a simple user control that has a blue circle as its UI.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#EllipseXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/Circle.xaml#ellipsexaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Open Circle.xaml.cs or Circle.xaml.vb.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In C#, add the following code after the default constructor to create a copy constructor.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In Visual Basic, add the following code to create both a default constructor and a copy constructor.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In order to allow the user control to be copied, you add a copy constructor method in the code-behind file.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the simplified Circle user control, you will only copy the Fill and the size of the of the user control.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#CopyCtor<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/Circle.xaml.cs#copyctor)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropWalkthrough#CopyCtor<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDropWalkthrough/VB/Circle.xaml.vb#copyctor)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To add the user control to the main window</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Open MainWindow.xaml.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Add the following XAML to the opening <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> tag to create an XML namespace reference to the current application.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the first <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>, add the following XAML to create two instances of the Circle user control in the first panel.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#CirclesXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/SnippetWindow.xaml#circlesxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The full XAML for the panel looks like the following.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#PanelsStep2XAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/SnippetWindow.xaml#panelsstep2xaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Implementing Drag Source Events in the User Control</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In this section, you will override the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseMove%2A&gt;</ph> method and initiate the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If a drag is started (a mouse button is pressed and the mouse is moved), you will package the data to be transferred into a <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In this case, the Circle control will package three data items; a string representation of its Fill color, a double representation of its height, and a copy of itself.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To initiate a drag-and-drop operation</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Open Circle.xaml.cs or Circle.xaml.vb.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseMove%2A&gt;</ph> override to provide class handling for the <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#OnMouseMove<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/Circle.xaml.cs#onmousemove)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropWalkthrough#OnMouseMove<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDropWalkthrough/VB/Circle.xaml.vb#onmousemove)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseMove%2A&gt;</ph> override performs the following tasks:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Checks whether the left mouse button is pressed while the mouse is moving.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Packages the Circle data into a <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In this case, the Circle control packages three data items; a string representation of its Fill color, a double representation of its height, and a copy of itself.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Calls the static <ph id="ph1">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A?displayProperty=fullName&gt;</ph> method to initiate the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You pass the following three parameters to the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dragSource`</ph> – A reference to this control.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`data`</ph> – The <ph id="ph2">&lt;xref:System.Windows.DataObject&gt;</ph> created in the previous code.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`allowedEffects`</ph> – The allowed drag-and-drop operations, which are <ph id="ph2">&lt;xref:System.Windows.DragDropEffects&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.DragDropEffects&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Press F5 to build and run the application.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Click one of the Circle controls and drag it over the panels, the other Circle, and the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When dragging over the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, the cursor changes to indicate a move.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>While dragging a Circle over the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, press the CTRL key.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Notice how the cursor changes to indicate a copy.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Drag and drop a Circle onto the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The string representation of the Circle’s fill color is appended to the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>String representation of Circle's fill color<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/dragdrop-colorstring.png "</bpt>DragDrop_ColorString<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>By default, the cursor will change during a drag-and-drop operation to indicate what effect dropping the data will have.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can customize the feedback given to the user by handling the <ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> event and setting a different cursor.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To give feedback to the user</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Open Circle.xaml.cs or Circle.xaml.vb.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGiveFeedback%2A&gt;</ph> override to provide class handling for the <ph id="ph2">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#OnGiveFeedback<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/Circle.xaml.cs#ongivefeedback)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropWalkthrough#OnGiveFeedback<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDropWalkthrough/VB/Circle.xaml.vb#ongivefeedback)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGiveFeedback%2A&gt;</ph> override performs the following tasks:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Checks the <ph id="ph1">&lt;xref:System.Windows.GiveFeedbackEventArgs.Effects%2A&gt;</ph> values that are set in the drop target's <ph id="ph2">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Sets a custom cursor based on the <ph id="ph1">&lt;xref:System.Windows.GiveFeedbackEventArgs.Effects%2A&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The cursor is intended to give visual feedback to the user about what effect dropping the data will have.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Press F5 to build and run the application.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Drag one of the Circle controls over the panels, the other Circle, and the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Notice that the cursors are now the custom cursors that you specified in the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGiveFeedback%2A&gt;</ph> override.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Drag and drop with custom cursors<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/dragdrop-customcursor.png "</bpt>DragDrop_CustomCursor<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Select the text <ph id="ph1">`green`</ph> from the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Drag the <ph id="ph1">`green`</ph> text to a Circle control.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Notice that the default cursors are shown to indicate the effects of the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The feedback cursor is always set by the drag source.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Implementing Drop Target Events in the User Control</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In this section, you will specify that the user control is a drop target, override the methods that enable the user control to be a drop target, and process the data that is dropped on it.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To enable the user control to be a drop target</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Open Circle.xaml.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In the opening <ph id="ph1">&lt;xref:System.Windows.Controls.UserControl&gt;</ph> tag, add the <ph id="ph2">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> property and set it to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#UCTagXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/Circle.xaml#uctagxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;</ph> method is called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph> and data from the drag source is dropped on the Circle user control.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In this method, you will process the data that was dropped and apply the data to the Circle.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>To process the dropped data</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Open Circle.xaml.cs or Circle.xaml.vb.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;</ph> override to provide class handling for the <ph id="ph2">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#OnDrop<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/Circle.xaml.cs#ondrop)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropWalkthrough#OnDrop<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDropWalkthrough/VB/Circle.xaml.vb#ondrop)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;</ph> override performs the following tasks:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Uses the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetDataPresent%2A&gt;</ph> method to check if the dragged data contains a string object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Uses the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetData%2A&gt;</ph> method to extract the string data if it is present.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Uses a <ph id="ph1">&lt;xref:System.Windows.Media.BrushConverter&gt;</ph> to try to convert the string to a <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If the conversion is successful, applies the brush to the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> that provides the UI of the Circle control.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Marks the <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event as handled.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You should mark the drop event as handled so that other elements that receive this event know that the Circle user control handled it.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Press F5 to build and run the application.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Select the text <ph id="ph1">`green`</ph> in the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Drag the text to a Circle control and drop it.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The Circle changes from blue to green.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Convert a string to a brush<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/dragdrop-dropgreentext.png "</bpt>DragDrop_DropGreenText<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Type the text <ph id="ph1">`green`</ph> in the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Select the text <ph id="ph1">`gre`</ph> in the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Drag it to a Circle control and drop it.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Notice that the cursor changes to indicate that the drop is allowed, but the color of the Circle does not change because <ph id="ph1">`gre`</ph> is not a valid color.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Drag from the green Circle control and drop on the blue Circle control.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The Circle changes from blue to green.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Notice that which cursor is shown depends on whether the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> or the Circle is the drag source.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> property to <ph id="ph2">`true`</ph> and processing the dropped data is all that is required to enable an element to be a drop target.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>However, to provide a better user experience, you should also handle the <ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In these events, you can perform checks and provide additional feedback to the user before the data is dropped.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>When data is dragged over the Circle user control, the control should notify the drag source whether it can process the data that is being dragged.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If the control does not know how to process the data, it should refuse the drop.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To do this, you will handle the <ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> event and set the <ph id="ph2">&lt;xref:System.Windows.DragEventArgs.Effects%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>To verify that the data drop is allowed</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Open Circle.xaml.cs or Circle.xaml.vb.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragOver%2A&gt;</ph> override to provide class handling for the <ph id="ph2">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#OnDragOver<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/Circle.xaml.cs#ondragover)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropWalkthrough#OnDragOver<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDropWalkthrough/VB/Circle.xaml.vb#ondragover)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragOver%2A&gt;</ph> override performs the following tasks:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.Effects%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.DragDropEffects&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Performs the same checks that are performed in the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;</ph> method to determine whether the Circle user control can process the dragged data.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If the user control can process the data, sets the <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.Effects%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.DragDropEffects&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.DragDropEffects&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Press F5 to build and run the application.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Select the text <ph id="ph1">`gre`</ph> in the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Drag the text to a Circle control.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Notice that the cursor now changes to indicate that the drop is not allowed because <ph id="ph1">`gre`</ph> is not a valid color.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>You can further enhance the user experience by applying a preview of the drop operation.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For the Circle user control, you will override the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragEnter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.OnDragLeave%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>When the data is dragged over the control, the current background <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> is saved in a placeholder variable.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The string is then converted to a brush and applied to the <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> that provides the Circle's UI.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If the data is dragged out of the Circle without being dropped, the original <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> value is re-applied to the Circle.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>To preview the effects of the drag-and-drop operation</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Open Circle.xaml.cs or Circle.xaml.vb.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>In the Circle class, declare a private <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> variable named <ph id="ph2">`_previousFill`</ph> and initialize it to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#Brush<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/Circle.xaml.cs#brush)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropWalkthrough#Brush<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDropWalkthrough/VB/Circle.xaml.vb#brush)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragEnter%2A&gt;</ph> override to provide class handling for the <ph id="ph2">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#OnDragEnter<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/Circle.xaml.cs#ondragenter)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropWalkthrough#OnDragEnter<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDropWalkthrough/VB/Circle.xaml.vb#ondragenter)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragEnter%2A&gt;</ph> override performs the following tasks:</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Saves the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> in the <ph id="ph3">`_previousFill`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Performs the same checks that are performed in the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;</ph> method to determine whether the data can be converted to a <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If the data is converted to a valid <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>, applies it to the <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> of the <ph id="ph3">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragLeave%2A&gt;</ph> override to provide class handling for the <ph id="ph2">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#OnDragLeave<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/Circle.xaml.cs#ondragleave)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropWalkthrough#OnDragLeave<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDropWalkthrough/VB/Circle.xaml.vb#ondragleave)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragLeave%2A&gt;</ph> override performs the following tasks:</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Applies the <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> saved in the <ph id="ph2">`_previousFill`</ph> variable to the <ph id="ph3">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> of the <ph id="ph4">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> that provides the UI of the Circle user control.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Press F5 to build and run the application.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Select the text <ph id="ph1">`green`</ph> in the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Drag the text over a Circle control without dropping it.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The Circle changes from blue to green.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Preview the effects of a drag&amp;#45;and&amp;#45;drop operation<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/dragdrop-previeweffects.png "</bpt>DragDrop_PreviewEffects<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Drag the text away from the Circle control.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The Circle changes from green back to blue.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Enabling a Panel to Receive Dropped Data</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>In this section, you will enable the panels that host the Circle user controls to act as drop targets for dragged Circle data.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>You will implement code that enables you to move a Circle from one panel to another, or to make a copy of a Circle control by holding down the CTRL key while dragging and dropping a Circle.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>To enable the panel to be a drop target</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Open MainWindow.xaml.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>As shown in the following XAML, in each of the <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> controls, add handlers for the <ph id="ph2">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Name the <ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> event handler, <ph id="ph2">`panel_DragOver`</ph>, and name the <ph id="ph3">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event handler, <ph id="ph4">`panel_Drop`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#PanelsXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/MainWindow.xaml#panelsxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Open MainWindows.xaml.cs or MainWindow.xaml.vb.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Add the following code for the <ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#PanelDragOver<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/MainWindow.xaml.cs#paneldragover)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropWalkthrough#PanelDragOver<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDropWalkthrough/VB/MainWindow.xaml.vb#paneldragover)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> event handler performs the following tasks:</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Checks that the dragged data contains the "Object" data that was packaged in the <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph> by the Circle user control and passed in the call to <ph id="ph2">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>If the "Object" data is present, checks whether the CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If the CTRL key is pressed, sets the <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.Effects%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.DragDropEffects&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Otherwise, set the <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.Effects%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.DragDropEffects&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Add the following code for the <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropWalkthrough#PanelDrop<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDropWalkthrough/CS/MainWindow.xaml.cs#paneldrop)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropWalkthrough#PanelDrop<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDropWalkthrough/VB/MainWindow.xaml.vb#paneldrop)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event handler performs the following tasks:</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Checks whether the <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event has already been handled.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For instance, if a Circle is dropped on another Circle which handles the <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event, you do not want the panel that contains the Circle to also handle it.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event is not handled, checks whether the CTRL key is pressed.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If the CTRL key is pressed when the <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> happens, makes a copy of the Circle control and add it to the <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection of the <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If the CTRL key is not pressed, moves the Circle from the <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection of its parent panel to the <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection of the panel that it was dropped on.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.Effects%2A&gt;</ph> property to notify the <ph id="ph2">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method whether a move or copy operation was performed.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Press F5 to build and run the application.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Select the text <ph id="ph1">`green`</ph> from the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Drag the text over a Circle control and drop it.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Drag a Circle control from the left panel to the right panel and drop it.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The Circle is removed from the <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection of the left panel and added to the Children collection of the right panel.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Drag a Circle control from the panel it is in to the other panel and drop it while pressing the CTRL key.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The Circle is copied and the copy is added to the <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection of the receiving panel.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Dragging a Circle while pressing the CTRL key<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/dragdrop-paneldrop.png "</bpt>DragDrop_PanelDrop<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Drag and Drop Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>