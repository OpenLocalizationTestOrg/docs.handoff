{"content":"---\ntitle: \"pInvokeStackImbalance MDA | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"signatures, platform invoke\"\n  - \"stack depth\"\n  - \"platform invoke stack imbalance\"\n  - \"MDAs (managed debugging assistants), platform invoke\"\n  - \"platform invoke, run-time errors\"\n  - \"PInvokeStackImbalance MDA\"\n  - \"managed debugging assistants (MDAs), platform invoke\"\nms.assetid: 34ddc6bd-1675-4f35-86aa-de1645d5c631\ncaps.latest.revision: 16\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# pInvokeStackImbalance MDA\nThe `pInvokeStackImbalance` managed debugging assistant (MDA) is activated when the CLR detects that the stack depth after a platform invoke call does not match the expected stack depth, given the calling convention specified in the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute as well as the declaration of the parameters in the managed signature.  \n  \n> [!NOTE]\n>  The `pInvokeStackImbalance` MDA is implemented only for 32-bit x86 platforms.  \n  \n> [!NOTE]\n>  In the .NET Framework version 3.5, the `pInvokeStackImbalance` MDA is disabled by default. When you use the .NET Framework version 3.5 with Visual Studio 2005, the `pInvokeStackImbalance` MDA will appear in the **Managed Debugging Assistants** list in the **Exceptions** dialog box (which is displayed when you click **Exceptions** on the **Debug** menu). However, selecting or clearing the **Thrown** check box for `pInvokeStackImbalance` does not enable or disable the MDA; it only controls whether Visual Studio throws an exception when the MDA is activated.  \n  \n## Symptoms  \n An application encounters an access violation or memory corruption when making or following a platform invoke call.  \n  \n## Cause  \n The managed signature of the platform invoke call might not match the unmanaged signature of the method being called.  This mismatch can be caused by the managed signature not declaring the correct number of parameters or not specifying the appropriate size for the parameters.  The MDA can also activate because the calling convention, possibly specified by the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute, does not match the unmanaged calling convention.  \n  \n## Resolution  \n Review the managed platform invoke signature and calling convention to confirm it matches the signature and calling convention of the native target.  Try explicitly specifying the calling convention on both the managed and unmanaged sides. It is also possible, although not as likely, that the unmanaged function unbalanced the stack for some other reason, such as a bug in the unmanaged compiler.  \n  \n## Effect on the Runtime  \n Forces all platform invoke calls to take the nonoptimized path in the CLR.  \n  \n## Output  \n The MDA message gives the name of the platform invoke method call that is causing the stack imbalance.  A sample message of a platform invoke call on method `SampleMethod` is:  \n  \n```  \nA call to PInvoke function 'SampleMethod' has unbalanced the stack.   \nThis is likely because the managed PInvoke signature does not match   \nthe unmanaged target signature. Check that the calling convention and   \nparameters of the PInvoke signature match the target unmanaged signature.  \n```  \n  \n## Configuration  \n  \n```  \n<mdaConfig>  \n  <assistants>  \n    <pInvokeStackImbalance />  \n  </assistants>  \n</mdaConfig>  \n```  \n  \n## See Also  \n <xref:System.Runtime.InteropServices.MarshalAsAttribute>   \n [Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)   \n [Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)","nodes":[{"pos":[4,706],"nodes":[{"content":"pInvokeStackImbalance MDA | Microsoft Docs","nodes":[{"pos":[0,42],"content":"pInvokeStackImbalance MDA | Microsoft Docs","nodes":[{"content":"pInvokeStackImbalance MDA | Microsoft Docs","pos":[0,42]}]}],"pos":[6,51],"yaml":true}],"content":"title: \"pInvokeStackImbalance MDA | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"signatures, platform invoke\"\n  - \"stack depth\"\n  - \"platform invoke stack imbalance\"\n  - \"MDAs (managed debugging assistants), platform invoke\"\n  - \"platform invoke, run-time errors\"\n  - \"PInvokeStackImbalance MDA\"\n  - \"managed debugging assistants (MDAs), platform invoke\"\nms.assetid: 34ddc6bd-1675-4f35-86aa-de1645d5c631\ncaps.latest.revision: 16\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[713,738],"content":"pInvokeStackImbalance MDA","linkify":"pInvokeStackImbalance MDA","nodes":[{"content":"pInvokeStackImbalance MDA","pos":[0,25]}]},{"pos":[739,1109],"content":"The <ph id=\"ph1\">`pInvokeStackImbalance`</ph> managed debugging assistant (MDA) is activated when the CLR detects that the stack depth after a platform invoke call does not match the expected stack depth, given the calling convention specified in the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute as well as the declaration of the parameters in the managed signature.","source":"The `pInvokeStackImbalance` managed debugging assistant (MDA) is activated when the CLR detects that the stack depth after a platform invoke call does not match the expected stack depth, given the calling convention specified in the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute as well as the declaration of the parameters in the managed signature."},{"pos":[1117,1205],"content":"[!NOTE]\n The `pInvokeStackImbalance` MDA is implemented only for 32-bit x86 platforms.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">`pInvokeStackImbalance`</ph> MDA is implemented only for 32-bit x86 platforms.","pos":[9,86],"source":"The `pInvokeStackImbalance` MDA is implemented only for 32-bit x86 platforms."}]},{"pos":[1213,1785],"content":"[!NOTE]\n In the .NET Framework version 3.5, the `pInvokeStackImbalance` MDA is disabled by default. When you use the .NET Framework version 3.5 with Visual Studio 2005, the `pInvokeStackImbalance` MDA will appear in the **Managed Debugging Assistants** list in the **Exceptions** dialog box (which is displayed when you click **Exceptions** on the **Debug** menu). However, selecting or clearing the **Thrown** check box for `pInvokeStackImbalance` does not enable or disable the MDA; it only controls whether Visual Studio throws an exception when the MDA is activated.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework version 3.5, the `pInvokeStackImbalance` MDA is disabled by default. When you use the .NET Framework version 3.5 with Visual Studio 2005, the `pInvokeStackImbalance` MDA will appear in the **Managed Debugging Assistants** list in the **Exceptions** dialog box (which is displayed when you click **Exceptions** on the **Debug** menu). However, selecting or clearing the **Thrown** check box for `pInvokeStackImbalance` does not enable or disable the MDA; it only controls whether Visual Studio throws an exception when the MDA is activated.","pos":[9,570],"nodes":[{"content":"In the .NET Framework version 3.5, the <ph id=\"ph1\">`pInvokeStackImbalance`</ph> MDA is disabled by default.","pos":[0,90],"source":"In the .NET Framework version 3.5, the `pInvokeStackImbalance` MDA is disabled by default."},{"content":"When you use the .NET Framework version 3.5 with Visual Studio 2005, the <ph id=\"ph1\">`pInvokeStackImbalance`</ph> MDA will appear in the <bpt id=\"p1\">**</bpt>Managed Debugging Assistants<ept id=\"p1\">**</ept> list in the <bpt id=\"p2\">**</bpt>Exceptions<ept id=\"p2\">**</ept> dialog box (which is displayed when you click <bpt id=\"p3\">**</bpt>Exceptions<ept id=\"p3\">**</ept> on the <bpt id=\"p4\">**</bpt>Debug<ept id=\"p4\">**</ept> menu).","pos":[91,355],"source":" When you use the .NET Framework version 3.5 with Visual Studio 2005, the `pInvokeStackImbalance` MDA will appear in the **Managed Debugging Assistants** list in the **Exceptions** dialog box (which is displayed when you click **Exceptions** on the **Debug** menu)."},{"content":"However, selecting or clearing the <bpt id=\"p1\">**</bpt>Thrown<ept id=\"p1\">**</ept> check box for <ph id=\"ph1\">`pInvokeStackImbalance`</ph> does not enable or disable the MDA; it only controls whether Visual Studio throws an exception when the MDA is activated.","pos":[356,561],"source":" However, selecting or clearing the **Thrown** check box for `pInvokeStackImbalance` does not enable or disable the MDA; it only controls whether Visual Studio throws an exception when the MDA is activated."}]}]},{"pos":[1794,1802],"content":"Symptoms","linkify":"Symptoms","nodes":[{"content":"Symptoms","pos":[0,8]}]},{"content":"An application encounters an access violation or memory corruption when making or following a platform invoke call.","pos":[1806,1921]},{"pos":[1930,1935],"content":"Cause","linkify":"Cause","nodes":[{"content":"Cause","pos":[0,5]}]},{"content":"The managed signature of the platform invoke call might not match the unmanaged signature of the method being called.","pos":[1939,2056]},{"content":"This mismatch can be caused by the managed signature not declaring the correct number of parameters or not specifying the appropriate size for the parameters.","pos":[2058,2216]},{"content":"The MDA can also activate because the calling convention, possibly specified by the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute, does not match the unmanaged calling convention.","pos":[2218,2418],"source":"  The MDA can also activate because the calling convention, possibly specified by the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute, does not match the unmanaged calling convention."},{"pos":[2427,2437],"content":"Resolution","linkify":"Resolution","nodes":[{"content":"Resolution","pos":[0,10]}]},{"content":"Review the managed platform invoke signature and calling convention to confirm it matches the signature and calling convention of the native target.","pos":[2441,2589]},{"content":"Try explicitly specifying the calling convention on both the managed and unmanaged sides.","pos":[2591,2680]},{"content":"It is also possible, although not as likely, that the unmanaged function unbalanced the stack for some other reason, such as a bug in the unmanaged compiler.","pos":[2681,2838]},{"pos":[2847,2868],"content":"Effect on the Runtime","linkify":"Effect on the Runtime","nodes":[{"content":"Effect on the Runtime","pos":[0,21]}]},{"content":"Forces all platform invoke calls to take the nonoptimized path in the CLR.","pos":[2872,2946]},{"pos":[2955,2961],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"The MDA message gives the name of the platform invoke method call that is causing the stack imbalance.","pos":[2965,3067]},{"content":"A sample message of a platform invoke call on method <ph id=\"ph1\">`SampleMethod`</ph> is:","pos":[3069,3140],"source":"  A sample message of a platform invoke call on method `SampleMethod` is:"},{"pos":[3455,3468],"content":"Configuration","linkify":"Configuration","nodes":[{"content":"Configuration","pos":[0,13]}]},{"pos":[3588,3596],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph>","pos":[3600,3656],"source":"<xref:System.Runtime.InteropServices.MarshalAsAttribute> "},{"content":"<bpt id=\"p1\">[</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept><ph id=\"ph1\"> </ph>","pos":[3661,3815],"source":"[Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md) "},{"content":"<bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](../../../docs/framework/interop/interop-marshaling.md)</ept>","pos":[3819,3894],"source":"[Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)"}]}