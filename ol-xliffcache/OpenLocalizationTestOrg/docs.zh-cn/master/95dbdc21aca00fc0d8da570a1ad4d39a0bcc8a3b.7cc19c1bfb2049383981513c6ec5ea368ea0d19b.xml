{"content":"---\ntitle: \"Compiler Error CS1656 | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"CS1656\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"CS1656\"\nms.assetid: b5463a12-d685-4dae-9f88-08383e271b7a\ncaps.latest.revision: 11\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error CS1656\nCannot assign to 'variable' because it is a 'read-only variable type'  \n  \n This error occurs when an assignment to variable occurs in a read-only context. Read-only contexts include [foreach](../../../csharp/language-reference/keywords/foreach-in.md) iteration variables, [using](../../../csharp/language-reference/keywords/using-statement.md) variables, and [fixed](../../../csharp/language-reference/keywords/fixed-statement.md) variables. To resolve this error, avoid assignments to a statement variable in `using` blocks, `foreach` statements, and `fixed` statements.  \n  \n## Example  \n The following example generates error CS1656 because it tries to replace complete elements of a collection inside a `foreach` loop. One way to work around the error is to change the `foreach` loop to a [for](../../../csharp/language-reference/keywords/for.md) loop. Another way, not shown here, is to modify the members of the existing element; this is possible with classes, but not with structs.  \n  \n```  \nusing System;  \nusing System.Collections;  \nusing System.Collections.Generic;  \nusing System.Text;  \n  \nnamespace CS1656_2  \n{  \n  \n    class Book  \n    {  \n        public string Title;  \n        public string Author;  \n        public double Price;  \n        public Book(string t, string a, double p)  \n        {  \n            Title=t;  \n            Author=a;  \n            Price=p;  \n  \n        }  \n    }  \n  \n    class Program  \n    {  \n        private List<Book> list;  \n        static void Main(string[] args)  \n        {  \n            Program prog = new Program();  \n            prog.list = new List<Book>();  \n            prog.list.Add(new Book (\"The C# Programming Language\",  \n                                    \"Hejlsberg, Wiltamuth, Golde\",  \n                                     29.95));  \n            prog.list.Add(new Book (\"The C++ Programming Language\",  \n                                    \"Stroustrup\",  \n                                     29.95));  \n            prog.list.Add(new Book (\"The C Programming Language\",  \n                                    \"Kernighan, Ritchie\",  \n                                    29.95));  \n            foreach(Book b in prog.list)  \n            {  \n                // Cannot modify an entire element in a foreach loop   \n                // even with reference types.  \n                // Use a for or while loop instead  \n                if (b.Title == \"The C Programming Language\")  \n                    // Cannot assign to 'b' because it is a 'foreach   \n                    // iteration variable'  \n                    b = new Book(\"Programming Windows, 5th Ed.\", \"Petzold\", 29.95); //CS1656  \n            }  \n  \n            //With a for loop you can modify elements  \n            //for(int x = 0; x < prog.list.Count; x++)  \n            //{  \n            //    if(prog.list[x].Title== \"The C Programming Language\")  \n            //        prog.list[x] = new Book(\"Programming Windows, 5th Ed.\", \"Petzold\", 29.95);  \n            //}  \n            //foreach(Book b in prog.list)  \n            //    Console.WriteLine(b.Title);  \n  \n        }  \n    }  \n}  \n```  \n  \n## Example  \n The following sample demonstrates how CS1656 can be generated in other contexts besides a `foreach` loop:  \n  \n```  \n// CS1656.cs  \n// compile with: /unsafe  \nusing System;  \n  \nclass C : IDisposable  \n{  \n    public void Dispose() { }  \n}  \n  \nclass CMain  \n{  \n    unsafe public static void Main()  \n    {  \n        using (C c = new C())  \n        {  \n            // Cannot assign to 'c' because it is a 'using variable'  \n            c = new C(); // CS1656  \n        }  \n  \n        int[] ary = new int[] { 1, 2, 3, 4 };  \n        fixed (int* p = ary)  \n        {  \n            // Cannot assign to 'p' because it is a 'fixed variable'  \n            p = null; // CS1656  \n        }  \n    }  \n}  \n```","nodes":[{"pos":[12,50],"content":"Compiler Error CS1656 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error CS1656 | Microsoft Docs","pos":[0,38]}]},{"pos":[543,564],"content":"Compiler Error CS1656","linkify":"Compiler Error CS1656","nodes":[{"content":"Compiler Error CS1656","pos":[0,21]}]},{"content":"Cannot assign to 'variable' because it is a 'read-only variable type'","pos":[565,634]},{"content":"This error occurs when an assignment to variable occurs in a read-only context.","pos":[641,720]},{"content":"Read-only contexts include <bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> iteration variables, <bpt id=\"p2\">[</bpt>using<ept id=\"p2\">](../../../csharp/language-reference/keywords/using-statement.md)</ept> variables, and <bpt id=\"p3\">[</bpt>fixed<ept id=\"p3\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept> variables.","pos":[721,1007],"source":" Read-only contexts include [foreach](../../../csharp/language-reference/keywords/foreach-in.md) iteration variables, [using](../../../csharp/language-reference/keywords/using-statement.md) variables, and [fixed](../../../csharp/language-reference/keywords/fixed-statement.md) variables."},{"content":"To resolve this error, avoid assignments to a statement variable in <ph id=\"ph1\">`using`</ph> blocks, <ph id=\"ph2\">`foreach`</ph> statements, and <ph id=\"ph3\">`fixed`</ph> statements.","pos":[1008,1137],"source":" To resolve this error, avoid assignments to a statement variable in `using` blocks, `foreach` statements, and `fixed` statements."},{"pos":[1146,1153],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example generates error CS1656 because it tries to replace complete elements of a collection inside a <ph id=\"ph1\">`foreach`</ph> loop.","pos":[1157,1288],"source":"The following example generates error CS1656 because it tries to replace complete elements of a collection inside a `foreach` loop."},{"content":"One way to work around the error is to change the <ph id=\"ph1\">`foreach`</ph> loop to a <bpt id=\"p1\">[</bpt>for<ept id=\"p1\">](../../../csharp/language-reference/keywords/for.md)</ept> loop.","pos":[1289,1422],"source":" One way to work around the error is to change the `foreach` loop to a [for](../../../csharp/language-reference/keywords/for.md) loop."},{"content":"Another way, not shown here, is to modify the members of the existing element; this is possible with classes, but not with structs.","pos":[1423,1554]},{"pos":[3693,3700],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3704,3809],"content":"The following sample demonstrates how CS1656 can be generated in other contexts besides a <ph id=\"ph1\">`foreach`</ph> loop:","source":"The following sample demonstrates how CS1656 can be generated in other contexts besides a `foreach` loop:"}]}