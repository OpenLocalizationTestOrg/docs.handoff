<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="comparison-operators.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a958481fa04cb1a9abde69c5215dccd6dbbe4a14</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\operators-and-expressions\comparison-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1aca848324d86bb3db0a97366fbe84f8f3cae40a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b22b6c7d093f3e1f97dd38dc62d719ba51130c0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Comparison Operators in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Comparison Operators in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Comparison operators compare two expressions and return a <ph id="ph1">`Boolean`</ph> value that represents the relationship of their values.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are operators for comparing numeric values, operators for comparing strings, and operators for comparing objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>All three types of operators are discussed herein.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Comparing Numeric Values</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compares numeric values using six numeric comparison operators.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each operator takes as operands two expressions that evaluate to numeric values.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following table lists the operators and shows examples of each.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Condition tested</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`=`</ph> (Equality)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression equal to the value of the second?</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`=`</ph>   <ph id="ph3">`33    ' False`</ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`=`</ph>   <ph id="ph3">`23    ' True`</ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`=`</ph>   <ph id="ph3">`12    ' False`</ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;&gt;`</ph> (Inequality)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression unequal to the value of the second?</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;&gt;`</ph>   <ph id="ph3">`33    ' True`</ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;&gt;`</ph>   <ph id="ph3">`23    ' False`</ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;&gt;`</ph>   <ph id="ph3">`12    ' True`</ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;`</ph> (Less than)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression less than the value of the second?</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;`</ph>   <ph id="ph3">`33    ' True`</ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;`</ph>   <ph id="ph3">`23    ' False`</ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;`</ph>   <ph id="ph3">`12    ' False`</ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&gt;`</ph> (Greater than)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression greater than the value of the second?</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;`</ph>   <ph id="ph3">`33    ' False`</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;`</ph>   <ph id="ph3">`23    ' False`</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;`</ph>   <ph id="ph3">`12    ' True`</ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;=`</ph> (Less than or equal to)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression less than or equal to the value of the second?</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;=`</ph>   <ph id="ph3">`33    ' True`</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;=`</ph>   <ph id="ph3">`23    ' True`</ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&lt;=`</ph>   <ph id="ph3">`12    ' False`</ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&gt;=`</ph> (Greater than or equal to)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Is the value of the first expression greater than or equal to the value of the second?</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;=`</ph>   <ph id="ph3">`33    ' False`</ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;=`</ph>   <ph id="ph3">`23    ' True`</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`23`</ph>   <ph id="ph2">`&gt;=`</ph>   <ph id="ph3">`12    ' True`</ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Comparing Strings</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compares strings using the <bpt id="p1">[</bpt>Like Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept> as well as the numeric comparison operators.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Like`</ph> operator allows you to specify a pattern.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The string is then compared against the pattern, and if it matches, the result is <ph id="ph1">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Otherwise, the result is <ph id="ph1">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The numeric operators allow you to compare <ph id="ph1">`String`</ph> values based on their sort order, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The result in the preceding example is <ph id="ph1">`True`</ph> because the first character in the first string sorts before the first character in the second string.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the first characters were equal, the comparison would continue to the next character in both strings, and so on.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can also test equality of strings using the equality operator, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If one string is a prefix of another, such as "aa" and "aaa", the longer string is considered to be greater than the shorter string.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The sort order is based on either a binary comparison or a textual comparison depending on the setting of <ph id="ph1">`Option Compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>Option Compare Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Comparing Objects</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compares two object reference variables with the <bpt id="p1">[</bpt>Is Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/is-operator.md)</ept> and the <bpt id="p2">[</bpt>IsNot Operator<ept id="p2">](../../../../visual-basic/language-reference/operators/isnot-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can use either of these operators to determine if two reference variables refer to the same object instance.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the preceding example, <ph id="ph1">`x Is y`</ph> evaluates to <ph id="ph2">`True`</ph>, because both variables refer to the same instance.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Contrast this result with the following example.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the preceding example, <ph id="ph1">`x Is y`</ph> evaluates to <ph id="ph2">`False`</ph>, because although the variables refer to objects of the same type, they refer to different instances of that type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When you want to test for two objects not pointing to the same instance, the <ph id="ph1">`IsNot`</ph> operator lets you avoid a grammatically clumsy combination of <ph id="ph2">`Not`</ph> and <ph id="ph3">`Is`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the preceding example, <ph id="ph1">`If a IsNot b`</ph> is equivalent to <ph id="ph2">`If Not a Is b`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Comparing Object Type</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can test whether an object is of a particular type with the <ph id="ph1">`TypeOf`</ph>...<ph id="ph2">`Is`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The syntax is as follows:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`typename`</ph> specifies an interface type, then the <ph id="ph2">`TypeOf`</ph>...<ph id="ph3">`Is`</ph> expression returns <ph id="ph4">`True`</ph> if the object implements the interface type.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`typename`</ph> is a class type, then the expression returns <ph id="ph2">`True`</ph> if the object is an instance of the specified class or of a class that derives from the specified class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In the preceding example, the <ph id="ph1">`TypeOf x Is Control`</ph> expression evaluates to <ph id="ph2">`True`</ph> because the type of <ph id="ph3">`x`</ph> is <ph id="ph4">`Button`</ph>, which inherits from <ph id="ph5">`Control`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>TypeOf Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/typeof-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Value Comparisons<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Comparison Operators<ept id="p1">](../../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators<ept id="p1">](../../../../visual-basic/language-reference/operators/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arithmetic Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concatenation Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Logical and Bitwise Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>