{"content":"---\ntitle: \"How to: Enable a Command\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"CommandBindings [WPF]\"\n  - \"commanding [WPF]\"\nms.assetid: d8016266-58d9-48f7-8298-a86b7ed49fbd\n---\n# How to: Enable a Command\nThe following example demonstrates how to use commanding in [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)].  The example shows how to associate a <xref:System.Windows.Input.RoutedCommand> to a <xref:System.Windows.Controls.Button>, create a <xref:System.Windows.Input.CommandBinding>, and create the event handlers which implement the <xref:System.Windows.Input.RoutedCommand>.  For more information on commanding, see the [Commanding Overview](commanding-overview.md).  \n  \n## Example  \n The first section of code creates the [!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)], which consists of a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.StackPanel>, and creates a <xref:System.Windows.Input.CommandBinding> that associates the command handlers with the <xref:System.Windows.Input.RoutedCommand>.  \n  \n The <xref:System.Windows.Input.ICommandSource.Command%2A> property of the <xref:System.Windows.Controls.Button> is associated with the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command.  \n  \n The <xref:System.Windows.Input.CommandBinding> is added to the <xref:System.Windows.Input.CommandBindingCollection> of the root <xref:System.Windows.Window>. The <xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.CanExecute> event handlers are attached to this binding and associated with the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command.  \n  \n Without the <xref:System.Windows.Input.CommandBinding> there is no command logic, only a mechanism to invoke the command.  When the <xref:System.Windows.Controls.Button> is clicked, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> <xref:System.Windows.RoutedEvent> is raised on the command target followed by the <xref:System.Windows.Input.CommandManager.Executed> <xref:System.Windows.RoutedEvent>.  These events traverse the element tree looking for a <xref:System.Windows.Input.CommandBinding> for that particular command.  It is worth noting that because <xref:System.Windows.RoutedEvent> tunnel and bubble through the element tree, care must be taken in where the <xref:System.Windows.Input.CommandBinding> is put.   If the <xref:System.Windows.Input.CommandBinding> is on a sibling of the command target or another node that is not on the route of the <xref:System.Windows.RoutedEvent>, the <xref:System.Windows.Input.CommandBinding> will not be accessed.  \n  \n [!code-xaml[EnableCloseCommand#CloseCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/EnableCloseCommand/CSharp/Window1.xaml#closecommandbinding)]  \n  \n [!code-csharp[EnableCloseCommand#CloseCommandBindingCodeBehind](~/samples/snippets/csharp/VS_Snippets_Wpf/EnableCloseCommand/CSharp/Window1.xaml.cs#closecommandbindingcodebehind)]\n [!code-vb[EnableCloseCommand#CloseCommandBindingCodeBehind](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnableCloseCommand/VisualBasic/Window1.xaml.vb#closecommandbindingcodebehind)]  \n  \n The next section of code implements the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandBinding.CanExecute> event handlers.  \n  \n The <xref:System.Windows.Input.CommandManager.Executed> handler calls a method to close the open file.  The <xref:System.Windows.Input.CommandBinding.CanExecute> handler calls a method to determine whether a file is open.  If a file is open, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.  \n  \n [!code-csharp[EnableCloseCommand#CloseCommandHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/EnableCloseCommand/CSharp/Window1.xaml.cs#closecommandhandler)]\n [!code-vb[EnableCloseCommand#CloseCommandHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnableCloseCommand/VisualBasic/Window1.xaml.vb#closecommandhandler)]  \n  \n## See also\n\n- [Commanding Overview](commanding-overview.md)\n","nodes":[{"pos":[4,215],"embed":true,"restype":"x-metadata","content":"title: \"How to: Enable a Command\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"CommandBindings [WPF]\"\n  - \"commanding [WPF]\"\nms.assetid: d8016266-58d9-48f7-8298-a86b7ed49fbd","nodes":[{"content":"How to: Enable a Command","nodes":[{"pos":[0,24],"content":"How to: Enable a Command","nodes":[{"content":"How to: Enable a Command","pos":[0,24]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[222,246],"content":"How to: Enable a Command","linkify":"How to: Enable a Command","nodes":[{"content":"How to: Enable a Command","pos":[0,24]}]},{"content":"The following example demonstrates how to use commanding in <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>.","pos":[247,387],"source":"The following example demonstrates how to use commanding in [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]."},{"content":"The example shows how to associate a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, create a <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>, and create the event handlers which implement the <ph id=\"ph4\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.","pos":[389,657],"source":"  The example shows how to associate a <xref:System.Windows.Input.RoutedCommand> to a <xref:System.Windows.Controls.Button>, create a <xref:System.Windows.Input.CommandBinding>, and create the event handlers which implement the <xref:System.Windows.Input.RoutedCommand>."},{"content":"For more information on commanding, see the <bpt id=\"p1\">[</bpt>Commanding Overview<ept id=\"p1\">](commanding-overview.md)</ept>.","pos":[659,749],"source":"  For more information on commanding, see the [Commanding Overview](commanding-overview.md)."},{"pos":[758,765],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[769,1126],"content":"The first section of code creates the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph>, which consists of a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> and a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>, and creates a <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> that associates the command handlers with the <ph id=\"ph5\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.","source":"The first section of code creates the [!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)], which consists of a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.StackPanel>, and creates a <xref:System.Windows.Input.CommandBinding> that associates the command handlers with the <xref:System.Windows.Input.RoutedCommand>."},{"pos":[1133,1333],"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> is associated with the <ph id=\"ph3\">&lt;xref:System.Windows.Input.ApplicationCommands.Close%2A&gt;</ph> command.","source":"The <xref:System.Windows.Input.ICommandSource.Command%2A> property of the <xref:System.Windows.Controls.Button> is associated with the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is added to the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBindingCollection&gt;</ph> of the root <ph id=\"ph3\">&lt;xref:System.Windows.Window&gt;</ph>.","pos":[1340,1497],"source":"The <xref:System.Windows.Input.CommandBinding> is added to the <xref:System.Windows.Input.CommandBindingCollection> of the root <xref:System.Windows.Window>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> event handlers are attached to this binding and associated with the <ph id=\"ph3\">&lt;xref:System.Windows.Input.ApplicationCommands.Close%2A&gt;</ph> command.","pos":[1498,1745],"source":" The <xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.CanExecute> event handlers are attached to this binding and associated with the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command."},{"content":"Without the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> there is no command logic, only a mechanism to invoke the command.","pos":[1752,1873],"source":"Without the <xref:System.Windows.Input.CommandBinding> there is no command logic, only a mechanism to invoke the command."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> is clicked, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> <ph id=\"ph3\">&lt;xref:System.Windows.RoutedEvent&gt;</ph> is raised on the command target followed by the <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> <ph id=\"ph5\">&lt;xref:System.Windows.RoutedEvent&gt;</ph>.","pos":[1875,2165],"source":"  When the <xref:System.Windows.Controls.Button> is clicked, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> <xref:System.Windows.RoutedEvent> is raised on the command target followed by the <xref:System.Windows.Input.CommandManager.Executed> <xref:System.Windows.RoutedEvent>."},{"content":"These events traverse the element tree looking for a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for that particular command.","pos":[2167,2291],"source":"  These events traverse the element tree looking for a <xref:System.Windows.Input.CommandBinding> for that particular command."},{"content":"It is worth noting that because <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEvent&gt;</ph> tunnel and bubble through the element tree, care must be taken in where the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is put.","pos":[2293,2485],"source":"  It is worth noting that because <xref:System.Windows.RoutedEvent> tunnel and bubble through the element tree, care must be taken in where the <xref:System.Windows.Input.CommandBinding> is put."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is on a sibling of the command target or another node that is not on the route of the <ph id=\"ph2\">&lt;xref:System.Windows.RoutedEvent&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> will not be accessed.","pos":[2488,2727],"source":"   If the <xref:System.Windows.Input.CommandBinding> is on a sibling of the command target or another node that is not on the route of the <xref:System.Windows.RoutedEvent>, the <xref:System.Windows.Input.CommandBinding> will not be accessed."},{"pos":[3268,3433],"content":"The next section of code implements the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> event handlers.","source":"The next section of code implements the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandBinding.CanExecute> event handlers."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> handler calls a method to close the open file.","pos":[3440,3542],"source":"The <xref:System.Windows.Input.CommandManager.Executed> handler calls a method to close the open file."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> handler calls a method to determine whether a file is open.","pos":[3544,3661],"source":"  The <xref:System.Windows.Input.CommandBinding.CanExecute> handler calls a method to determine whether a file is open."},{"content":"If a file is open, <ph id=\"ph1\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is set to <ph id=\"ph2\">`true`</ph>; otherwise, it is set to <ph id=\"ph3\">`false`</ph>.","pos":[3663,3800],"source":"  If a file is open, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`."},{"pos":[4142,4150],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4154,4199],"content":"<bpt id=\"p1\">[</bpt>Commanding Overview<ept id=\"p1\">](commanding-overview.md)</ept>","source":"[Commanding Overview](commanding-overview.md)"}]}