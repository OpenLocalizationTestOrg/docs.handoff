{"content":"---\ntitle: \"/ Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb./\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"division operator, floating point\"\n  - \"floating-point numbers, division operator\"\n  - \"slash (/) operator\"\n  - \"zero, division by zero\"\n  - \"operators [Visual Basic], arithmetic\"\n  - \"arithmetic operators, division\"\n  - \"division, by zero\"\n  - \"operators [Visual Basic], division\"\n  - \"division operator, syntax\"\n  - \"/ operator [Visual Basic]\"\n  - \"math operators\"\nms.assetid: 335e97f2-c434-439e-9064-76973a051101\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# / Operator (Visual Basic)\nDivides two numbers and returns a floating-point result.  \n  \n## Syntax  \n  \n```  \n  \nexpression1 / expression2  \n```  \n  \n## Parts  \n `expression1`  \n Required. Any numeric expression.  \n  \n `expression2`  \n Required. Any numeric expression.  \n  \n## Supported Types  \n All numeric types, including the unsigned and floating-point types and `Decimal`.  \n  \n## Result  \n The result is the full quotient of `expression1` divided by `expression2`, including any remainder.  \n  \n The [\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md) returns the integer quotient, which drops the remainder.  \n  \n## Remarks  \n The data type of the result depends on the types of the operands. The following table shows how the data type of the result is determined.  \n  \n|Operand data types|Result data type|  \n|------------------------|----------------------|  \n|Both expressions are integral data types ([SByte](../../../visual-basic/language-reference/data-types/sbyte-data-type.md), [Byte](../../../visual-basic/language-reference/data-types/byte-data-type.md), [Short](../../../visual-basic/language-reference/data-types/short-data-type.md), [UShort](../../../visual-basic/language-reference/data-types/ushort-data-type.md), [Integer](../../../visual-basic/language-reference/data-types/integer-data-type.md), [UInteger](../../../visual-basic/language-reference/data-types/uinteger-data-type.md), [Long](../../../visual-basic/language-reference/data-types/long-data-type.md), [ULong](../../../visual-basic/language-reference/data-types/ulong-data-type.md))|`Double`|  \n|One expression is a [Single](../../../visual-basic/language-reference/data-types/single-data-type.md) data type and the other is not a [Double](../../../visual-basic/language-reference/data-types/double-data-type.md)|`Single`|  \n|One expression is a [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md) data type and the other is not a [Single](../../../visual-basic/language-reference/data-types/single-data-type.md) or a [Double](../../../visual-basic/language-reference/data-types/double-data-type.md)|`Decimal`|  \n|Either expression is a [Double](../../../visual-basic/language-reference/data-types/double-data-type.md) data type|`Double`|  \n  \n Before division is performed, any integral numeric expressions are widened to `Double`. If you assign the result to an integral data type, Visual Basic attempts to convert the result from `Double` to that type. This can throw an exception if the result does not fit in that type. In particular, see \"Attempted Division by Zero\" on this Help page.  \n  \n If `expression1` or `expression2` evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), it is treated as zero.  \n  \n## Attempted Division by Zero  \n If `expression2` evaluates to zero, the `/` operator behaves differently for different operand data types. The following table shows the possible behaviors.  \n  \n|Operand data types|Behavior if `expression2` is zero|  \n|------------------------|---------------------------------------|  \n|Floating-point (`Single` or `Double`)|Returns infinity (<xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>), or <xref:System.Double.NaN> (not a number) if `expression1` is also zero|  \n|`Decimal`|Throws <xref:System.DivideByZeroException>|  \n|Integral (signed or unsigned)|Attempted conversion back to integral type throws <xref:System.OverflowException> because integral types cannot accept <xref:System.Double.PositiveInfinity>, <xref:System.Double.NegativeInfinity>, or <xref:System.Double.NaN>|  \n  \n> [!NOTE]\n>  The `/` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n This example uses the `/` operator to perform floating-point division. The result is the quotient of the two operands.  \n  \n [!code-vb[VbVbalrOperators#16](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/floating-point-division-operator_1.vb)]  \n  \n The expressions in the preceding example return values of 2.5 and 3.333333. Note that the result is always floating-point (`Double`), even though both operands are integer constants.  \n  \n## See Also  \n [/= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)   \n [\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md)   \n [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)   \n [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)\n","nodes":[{"pos":[12,54],"content":"/ Operator (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"/ Operator (Visual Basic) | Microsoft Docs","pos":[0,42]}]},{"pos":[933,958],"content":"/ Operator (Visual Basic)","linkify":"/ Operator (Visual Basic)","nodes":[{"content":"/ Operator (Visual Basic)","pos":[0,25]}]},{"content":"Divides two numbers and returns a floating-point result.","pos":[959,1015]},{"pos":[1024,1030],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1085,1090],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1111,1120]},{"content":"Any numeric expression.","pos":[1121,1144]},{"content":"Required.","pos":[1168,1177]},{"content":"Any numeric expression.","pos":[1178,1201]},{"pos":[1210,1225],"content":"Supported Types","linkify":"Supported Types","nodes":[{"content":"Supported Types","pos":[0,15]}]},{"pos":[1229,1310],"content":"All numeric types, including the unsigned and floating-point types and <ph id=\"ph1\">`Decimal`</ph>.","source":"All numeric types, including the unsigned and floating-point types and `Decimal`."},{"pos":[1319,1325],"content":"Result","linkify":"Result","nodes":[{"content":"Result","pos":[0,6]}]},{"pos":[1329,1428],"content":"The result is the full quotient of <ph id=\"ph1\">`expression1`</ph> divided by <ph id=\"ph2\">`expression2`</ph>, including any remainder.","source":"The result is the full quotient of `expression1` divided by `expression2`, including any remainder."},{"pos":[1435,1604],"content":"The <bpt id=\"p1\">[</bpt>\\ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept> returns the integer quotient, which drops the remainder.","source":"The [\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md) returns the integer quotient, which drops the remainder."},{"pos":[1613,1620],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The data type of the result depends on the types of the operands.","pos":[1624,1689]},{"content":"The following table shows how the data type of the result is determined.","pos":[1690,1762]},{"content":"Operand data types","pos":[1769,1787]},{"content":"Result data type","pos":[1788,1804]},{"pos":[1861,2558],"content":"Both expressions are integral data types (<bpt id=\"p1\">[</bpt>SByte<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>, <bpt id=\"p2\">[</bpt>Byte<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept>, <bpt id=\"p3\">[</bpt>Short<ept id=\"p3\">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>, <bpt id=\"p4\">[</bpt>UShort<ept id=\"p4\">](../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept>, <bpt id=\"p5\">[</bpt>Integer<ept id=\"p5\">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>, <bpt id=\"p6\">[</bpt>UInteger<ept id=\"p6\">](../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept>, <bpt id=\"p7\">[</bpt>Long<ept id=\"p7\">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>, <bpt id=\"p8\">[</bpt>ULong<ept id=\"p8\">](../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept>)","source":"Both expressions are integral data types ([SByte](../../../visual-basic/language-reference/data-types/sbyte-data-type.md), [Byte](../../../visual-basic/language-reference/data-types/byte-data-type.md), [Short](../../../visual-basic/language-reference/data-types/short-data-type.md), [UShort](../../../visual-basic/language-reference/data-types/ushort-data-type.md), [Integer](../../../visual-basic/language-reference/data-types/integer-data-type.md), [UInteger](../../../visual-basic/language-reference/data-types/uinteger-data-type.md), [Long](../../../visual-basic/language-reference/data-types/long-data-type.md), [ULong](../../../visual-basic/language-reference/data-types/ulong-data-type.md))"},{"pos":[2572,2788],"content":"One expression is a <bpt id=\"p1\">[</bpt>Single<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> data type and the other is not a <bpt id=\"p2\">[</bpt>Double<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>","source":"One expression is a [Single](../../../visual-basic/language-reference/data-types/single-data-type.md) data type and the other is not a [Double](../../../visual-basic/language-reference/data-types/double-data-type.md)"},{"pos":[2802,3107],"content":"One expression is a <bpt id=\"p1\">[</bpt>Decimal<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept> data type and the other is not a <bpt id=\"p2\">[</bpt>Single<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept> or a <bpt id=\"p3\">[</bpt>Double<ept id=\"p3\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>","source":"One expression is a [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md) data type and the other is not a [Single](../../../visual-basic/language-reference/data-types/single-data-type.md) or a [Double](../../../visual-basic/language-reference/data-types/double-data-type.md)"},{"pos":[3122,3236],"content":"Either expression is a <bpt id=\"p1\">[</bpt>Double<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept> data type","source":"Either expression is a [Double](../../../visual-basic/language-reference/data-types/double-data-type.md) data type"},{"content":"Before division is performed, any integral numeric expressions are widened to <ph id=\"ph1\">`Double`</ph>.","pos":[3253,3340],"source":"Before division is performed, any integral numeric expressions are widened to `Double`."},{"content":"If you assign the result to an integral data type, Visual Basic attempts to convert the result from <ph id=\"ph1\">`Double`</ph> to that type.","pos":[3341,3463],"source":" If you assign the result to an integral data type, Visual Basic attempts to convert the result from `Double` to that type."},{"content":"This can throw an exception if the result does not fit in that type.","pos":[3464,3532]},{"content":"In particular, see \"Attempted Division by Zero\" on this Help page.","pos":[3533,3599]},{"pos":[3606,3739],"content":"If <ph id=\"ph1\">`expression1`</ph> or <ph id=\"ph2\">`expression2`</ph> evaluates to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept>, it is treated as zero.","source":"If `expression1` or `expression2` evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), it is treated as zero."},{"pos":[3748,3774],"content":"Attempted Division by Zero","linkify":"Attempted Division by Zero","nodes":[{"content":"Attempted Division by Zero","pos":[0,26]}]},{"content":"If <ph id=\"ph1\">`expression2`</ph> evaluates to zero, the <ph id=\"ph2\">`/`</ph> operator behaves differently for different operand data types.","pos":[3778,3884],"source":"If `expression2` evaluates to zero, the `/` operator behaves differently for different operand data types."},{"content":"The following table shows the possible behaviors.","pos":[3885,3934]},{"content":"Operand data types","pos":[3941,3959]},{"pos":[3960,3993],"content":"Behavior if <ph id=\"ph1\">`expression2`</ph> is zero","source":"Behavior if `expression2` is zero"},{"pos":[4067,4104],"content":"Floating-point (<ph id=\"ph1\">`Single`</ph> or <ph id=\"ph2\">`Double`</ph>)","source":"Floating-point (`Single` or `Double`)"},{"pos":[4105,4276],"content":"Returns infinity (<ph id=\"ph1\">&lt;xref:System.Double.PositiveInfinity&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Double.NegativeInfinity&gt;</ph>), or <ph id=\"ph3\">&lt;xref:System.Double.NaN&gt;</ph> (not a number) if <ph id=\"ph4\">`expression1`</ph> is also zero","source":"Returns infinity (<xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>), or <xref:System.Double.NaN> (not a number) if `expression1` is also zero"},{"content":"Throws <ph id=\"ph1\">&lt;xref:System.DivideByZeroException&gt;</ph>","pos":[4291,4333],"source":"Throws <xref:System.DivideByZeroException>"},{"content":"Integral (signed or unsigned)","pos":[4338,4367]},{"content":"Attempted conversion back to integral type throws <ph id=\"ph1\">&lt;xref:System.OverflowException&gt;</ph> because integral types cannot accept <ph id=\"ph2\">&lt;xref:System.Double.PositiveInfinity&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Double.NegativeInfinity&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Double.NaN&gt;</ph>","pos":[4368,4592],"source":"Attempted conversion back to integral type throws <xref:System.OverflowException> because integral types cannot accept <xref:System.Double.PositiveInfinity>, <xref:System.Double.NegativeInfinity>, or <xref:System.Double.NaN>"},{"pos":[4601,5021],"content":"[!NOTE]\n The `/` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":" The `/` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[8,418],"nodes":[{"content":"The <ph id=\"ph1\">`/`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1,159],"source":" The `/` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[160,268]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[269,410],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[5030,5037],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses the <ph id=\"ph1\">`/`</ph> operator to perform floating-point division.","pos":[5041,5111],"source":"This example uses the `/` operator to perform floating-point division."},{"content":"The result is the quotient of the two operands.","pos":[5112,5159]},{"pos":[5166,5311],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#16<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/floating-point-division-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#16](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/floating-point-division-operator_1.vb)]"},{"content":"The expressions in the preceding example return values of 2.5 and 3.333333.","pos":[5318,5393]},{"content":"Note that the result is always floating-point (<ph id=\"ph1\">`Double`</ph>), even though both operands are integer constants.","pos":[5394,5500],"source":" Note that the result is always floating-point (`Double`), even though both operands are integer constants."},{"pos":[5509,5517],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>/= Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[5521,5649],"source":"[/= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>\\ Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[5652,5762],"source":" [\\ Operator (Visual Basic)](../../../visual-basic/language-reference/operators/integer-division-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Data Types of Operator Results<ept id=\"p1\">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept><ph id=\"ph1\"> </ph>","pos":[5765,5885],"source":" [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[5888,5988],"source":" [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[5991,6105],"source":" [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[6108,6234],"source":" [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","pos":[6237,6385],"source":" [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"}]}