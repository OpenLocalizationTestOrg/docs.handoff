<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="right-shift-operator.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">809cd2cab29d3378892ea224cf846e9d0909b073</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\operators\right-shift-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c970c60ab2cf9a864d60dd2517126c713a6e193</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d2575024d9bb7a8a47645d9c8953bcd72bf168c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>operator - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>&gt;&gt; operator (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The right-shift operator <ph id="ph1">`&gt;&gt;`</ph> shifts its first operand right by the number of bits defined by its second operand.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All integer types support the <ph id="ph1">`&gt;&gt;`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, the type of the second operand must be <bpt id="p1">[</bpt>int<ept id="p1">](../keywords/int.md)</ept> or a type that has a <bpt id="p2">[</bpt>predefined implicit numeric conversion<ept id="p2">](../keywords/implicit-numeric-conversions-table.md)</ept> to <ph id="ph1">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The right-shift operation discards the low-order bits.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The high-order empty bit positions are set based on the type of the first operand as follows:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the first operand is of type <bpt id="p1">[</bpt>int<ept id="p1">](../keywords/int.md)</ept> or <bpt id="p2">[</bpt>long<ept id="p2">](../keywords/long.md)</ept>, the right-shift operator performs an <bpt id="p3">**</bpt>arithmetic<ept id="p3">**</ept> shift: the value of the most significant bit (the sign bit) of the first operand is propagated to the high-order empty bit positions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>That is, the high-order empty bit positions are set to zero if the first operand is non-negative and set to one if it's negative.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the first operand is of type <bpt id="p1">[</bpt>uint<ept id="p1">](../keywords/uint.md)</ept> or <bpt id="p2">[</bpt>ulong<ept id="p2">](../keywords/ulong.md)</ept>, the right-shift operator performs a <bpt id="p3">**</bpt>logical<ept id="p3">**</ept> shift: the high-order empty bit positions are always set to zero.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example demonstrates that behavior:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Shift count</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For the expression <ph id="ph1">`x &gt;&gt; count`</ph>, the actual shift count depends on the type of <ph id="ph2">`x`</ph> as follows:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the type of <ph id="ph1">`x`</ph> is <bpt id="p1">[</bpt>int<ept id="p1">](../keywords/int.md)</ept> or <bpt id="p2">[</bpt>uint<ept id="p2">](../keywords/uint.md)</ept>, the shift count is given by the low-order <bpt id="p3">*</bpt>five<ept id="p3">*</ept> bits of the second operand.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>That is, the shift count is computed from <ph id="ph1">`count &amp; 0x1F`</ph> (or <ph id="ph2">`count &amp; 0b_1_1111`</ph>).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the type of <ph id="ph1">`x`</ph> is <bpt id="p1">[</bpt>long<ept id="p1">](../keywords/long.md)</ept> or <bpt id="p2">[</bpt>ulong<ept id="p2">](../keywords/ulong.md)</ept>, the shift count is given by the low-order <bpt id="p3">*</bpt>six<ept id="p3">*</ept> bits of the second operand.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>That is, the shift count is computed from <ph id="ph1">`count &amp; 0x3F`</ph> (or <ph id="ph2">`count &amp; 0b_11_1111`</ph>).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example demonstrates that behavior:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Shift operations never cause overflows and produce the same results in <bpt id="p1">[</bpt>checked and unchecked<ept id="p1">](../keywords/checked-and-unchecked.md)</ept> contexts.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Operator overloadability</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>User-defined types can <bpt id="p1">[</bpt>overload<ept id="p1">](../keywords/operator.md)</ept> the <ph id="ph1">`&gt;&gt;`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a user-defined type <ph id="ph1">`T`</ph> overloads the <ph id="ph2">`&gt;&gt;`</ph> operator, the type of the first operand must be <ph id="ph3">`T`</ph> and the type of the second operand must be <ph id="ph4">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`&gt;&gt;`</ph> operator is overloaded, the <bpt id="p1">[</bpt>right-shift assignment operator<ept id="p1">](right-shift-assignment-operator.md)</ept> <ph id="ph2">`&gt;&gt;=`</ph> is also implicitly overloaded.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Shift operators<ept id="p1">](~/_csharplang/spec/expressions.md#shift-operators)</ept> section of the <bpt id="p2">[</bpt>C# language specification<ept id="p2">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# operators<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&lt;&lt; operator<ept id="p1">](left-shift-operator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>