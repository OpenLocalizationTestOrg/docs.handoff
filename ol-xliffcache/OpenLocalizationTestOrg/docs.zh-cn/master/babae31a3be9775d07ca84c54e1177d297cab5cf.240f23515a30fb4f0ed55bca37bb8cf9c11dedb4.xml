{"content":"---\ntitle: \"Considerations When Hosting an ActiveX Control on a Windows Form\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"Windows Forms controls, ActiveX controls\"\n  - \"ActiveX controls [Windows Forms], hosting\"\n  - \"Windows Forms, ActiveX controls\"\n  - \"Windows Forms, hosting ActiveX controls\"\n  - \"ActiveX controls [Windows Forms], adding\"\nms.assetid: 2509302d-a74e-484f-9890-2acdbfa67a68\n---\n# Considerations When Hosting an ActiveX Control on a Windows Form\nAlthough Windows Forms have been optimized to host Windows Forms controls, you can still use ActiveX controls. Keep the following considerations in mind when planning an application that uses ActiveX controls:  \n  \n-   **Security** The common language runtime has been enhanced with regard to code access security. Applications featuring Windows Forms can run in a fully trusted environment without issue and in a semi-trusted environment with most of the functionality accessible. Windows Forms controls can be hosted in a browser with no complications. However, ActiveX controls on Windows Forms cannot take advantage of these security enhancements. Running an ActiveX control requires unmanaged code permission, which is set with the <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=nameWithType> property. For more information about security and unmanaged code permission, see <xref:System.Security.Permissions.SecurityPermissionAttribute>.  \n  \n-   **Total Cost of Ownership** ActiveX controls added to a Windows Form are deployed with that Windows Form in their entirety, which can add significantly to the size of the file(s) created. Additionally, using ActiveX controls on Windows Forms requires writing to the registry. This is more invasive to a user's computer than Windows Forms controls, which do not require this.  \n  \n    > [!NOTE]\n    >  Working with an ActiveX control requires the use of a COM interop wrapper. For more information, see [COM Interoperability in Visual Basic and Visual C#](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md).  \n  \n    > [!NOTE]\n    >  If the name of a member of the ActiveX control matches a name defined in the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)], then the ActiveX Control Importer will prefix the member name with **Ctl** when it creates the <xref:System.Windows.Forms.AxHost> derived class. For example, if your ActiveX control has a member named **Layout**, it is renamed **CtlLayout** in the AxHost-derived class because the **Layout** event is defined within the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)].  \n  \n## See also\n\n- [How to: Add ActiveX Controls to Windows Forms](how-to-add-activex-controls-to-windows-forms.md)\n- [Code Access Security](../../misc/code-access-security.md)\n- [Controls and Programmable Objects Compared in Various Languages and Libraries](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2010/0061wezk(v=vs.100))\n- [Putting Controls on Windows Forms](putting-controls-on-windows-forms.md)\n- [Windows Forms Controls](index.md)\n","nodes":[{"pos":[4,396],"embed":true,"restype":"x-metadata","content":"title: \"Considerations When Hosting an ActiveX Control on a Windows Form\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"Windows Forms controls, ActiveX controls\"\n  - \"ActiveX controls [Windows Forms], hosting\"\n  - \"Windows Forms, ActiveX controls\"\n  - \"Windows Forms, hosting ActiveX controls\"\n  - \"ActiveX controls [Windows Forms], adding\"\nms.assetid: 2509302d-a74e-484f-9890-2acdbfa67a68","nodes":[{"content":"Considerations When Hosting an ActiveX Control on a Windows Form","nodes":[{"pos":[0,64],"content":"Considerations When Hosting an ActiveX Control on a Windows Form","nodes":[{"content":"Considerations When Hosting an ActiveX Control on a Windows Form","pos":[0,64]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[403,467],"content":"Considerations When Hosting an ActiveX Control on a Windows Form","linkify":"Considerations When Hosting an ActiveX Control on a Windows Form","nodes":[{"content":"Considerations When Hosting an ActiveX Control on a Windows Form","pos":[0,64]}]},{"content":"Although Windows Forms have been optimized to host Windows Forms controls, you can still use ActiveX controls.","pos":[468,578]},{"content":"Keep the following considerations in mind when planning an application that uses ActiveX controls:","pos":[579,677]},{"content":"<bpt id=\"p1\">**</bpt>Security<ept id=\"p1\">**</ept> The common language runtime has been enhanced with regard to code access security.","pos":[687,782],"source":"**Security** The common language runtime has been enhanced with regard to code access security."},{"content":"Applications featuring Windows Forms can run in a fully trusted environment without issue and in a semi-trusted environment with most of the functionality accessible.","pos":[783,949]},{"content":"Windows Forms controls can be hosted in a browser with no complications.","pos":[950,1022]},{"content":"However, ActiveX controls on Windows Forms cannot take advantage of these security enhancements.","pos":[1023,1119]},{"content":"Running an ActiveX control requires unmanaged code permission, which is set with the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=nameWithType&gt;</ph> property.","pos":[1120,1323],"source":" Running an ActiveX control requires unmanaged code permission, which is set with the <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=nameWithType> property."},{"content":"For more information about security and unmanaged code permission, see <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermissionAttribute&gt;</ph>.","pos":[1324,1458],"source":" For more information about security and unmanaged code permission, see <xref:System.Security.Permissions.SecurityPermissionAttribute>."},{"content":"<bpt id=\"p1\">**</bpt>Total Cost of Ownership<ept id=\"p1\">**</ept> ActiveX controls added to a Windows Form are deployed with that Windows Form in their entirety, which can add significantly to the size of the file(s) created.","pos":[1468,1655],"source":"**Total Cost of Ownership** ActiveX controls added to a Windows Form are deployed with that Windows Form in their entirety, which can add significantly to the size of the file(s) created."},{"content":"Additionally, using ActiveX controls on Windows Forms requires writing to the registry.","pos":[1656,1743]},{"content":"This is more invasive to a user's computer than Windows Forms controls, which do not require this.","pos":[1744,1842]},{"pos":[1854,2128],"content":"[!NOTE]\nWorking with an ActiveX control requires the use of a COM interop wrapper. For more information, see [COM Interoperability in Visual Basic and Visual C#](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md).","leadings":["","    >  "],"nodes":[{"content":"Working with an ActiveX control requires the use of a COM interop wrapper. For more information, see [COM Interoperability in Visual Basic and Visual C#](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md).","pos":[8,267],"nodes":[{"content":"Working with an ActiveX control requires the use of a COM interop wrapper.","pos":[0,74]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>COM Interoperability in Visual Basic and Visual C#<ept id=\"p1\">](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)</ept>.","pos":[75,259],"source":" For more information, see [COM Interoperability in Visual Basic and Visual C#](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)."}]}]},{"pos":[2140,2681],"content":"[!NOTE]\nIf the name of a member of the ActiveX control matches a name defined in the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)], then the ActiveX Control Importer will prefix the member name with **Ctl** when it creates the <xref:System.Windows.Forms.AxHost> derived class. For example, if your ActiveX control has a member named **Layout**, it is renamed **CtlLayout** in the AxHost-derived class because the **Layout** event is defined within the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)].","leadings":["","    >  "],"nodes":[{"content":"If the name of a member of the ActiveX control matches a name defined in the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)], then the ActiveX Control Importer will prefix the member name with **Ctl** when it creates the <xref:System.Windows.Forms.AxHost> derived class. For example, if your ActiveX control has a member named **Layout**, it is renamed **CtlLayout** in the AxHost-derived class because the **Layout** event is defined within the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)].","pos":[8,534],"nodes":[{"content":"If the name of a member of the ActiveX control matches a name defined in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph>, then the ActiveX Control Importer will prefix the member name with <bpt id=\"p1\">**</bpt>Ctl<ept id=\"p1\">**</ept> when it creates the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.AxHost&gt;</ph> derived class.","pos":[0,286],"source":"If the name of a member of the ActiveX control matches a name defined in the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)], then the ActiveX Control Importer will prefix the member name with **Ctl** when it creates the <xref:System.Windows.Forms.AxHost> derived class."},{"content":"For example, if your ActiveX control has a member named <bpt id=\"p1\">**</bpt>Layout<ept id=\"p1\">**</ept>, it is renamed <bpt id=\"p2\">**</bpt>CtlLayout<ept id=\"p2\">**</ept> in the AxHost-derived class because the <bpt id=\"p3\">**</bpt>Layout<ept id=\"p3\">**</ept> event is defined within the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph>.","pos":[287,526],"source":" For example, if your ActiveX control has a member named **Layout**, it is renamed **CtlLayout** in the AxHost-derived class because the **Layout** event is defined within the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]."}]}]},{"pos":[2690,2698],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2702,2798],"content":"<bpt id=\"p1\">[</bpt>How to: Add ActiveX Controls to Windows Forms<ept id=\"p1\">](how-to-add-activex-controls-to-windows-forms.md)</ept>","source":"[How to: Add ActiveX Controls to Windows Forms](how-to-add-activex-controls-to-windows-forms.md)"},{"pos":[2801,2859],"content":"<bpt id=\"p1\">[</bpt>Code Access Security<ept id=\"p1\">](../../misc/code-access-security.md)</ept>","source":"[Code Access Security](../../misc/code-access-security.md)"},{"pos":[2862,3038],"content":"<bpt id=\"p1\">[</bpt>Controls and Programmable Objects Compared in Various Languages and Libraries<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2010/0061wezk(v=vs.100))</ept>","source":"[Controls and Programmable Objects Compared in Various Languages and Libraries](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2010/0061wezk(v=vs.100))"},{"pos":[3041,3114],"content":"<bpt id=\"p1\">[</bpt>Putting Controls on Windows Forms<ept id=\"p1\">](putting-controls-on-windows-forms.md)</ept>","source":"[Putting Controls on Windows Forms](putting-controls-on-windows-forms.md)"},{"pos":[3117,3151],"content":"<bpt id=\"p1\">[</bpt>Windows Forms Controls<ept id=\"p1\">](index.md)</ept>","source":"[Windows Forms Controls](index.md)"}]}