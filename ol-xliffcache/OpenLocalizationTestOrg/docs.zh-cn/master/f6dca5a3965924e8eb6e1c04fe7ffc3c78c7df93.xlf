<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="expression-trees-execution.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6dca5a3965924e8eb6e1c04fe7ffc3c78c7df93</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\expression-trees-execution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a6c85efbcd1343b5248ada94c6a8e6fdf889753</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff276155fcb5a850aba9ef70c10eebaf6d426024</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Executing Expression Trees</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about executing expression trees by converting them into executable Intermediate Language (IL) instructions.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Executing Expression Trees</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous -- Framework Types Supporting Expression Trees<ept id="p1">](expression-classes.md)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>expression tree<ept id="p1">*</ept> is a data structure that represents some code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is not compiled and executable code.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you want to execute the .NET code that is represented by an expression tree, you must convert it into executable IL instructions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Lambda Expressions to Functions</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can convert any LambdaExpression, or any type derived from LambdaExpression into executable IL.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Other expression types cannot be directly converted into code.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This restriction has little effect in practice.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Lambda expressions are the only types of expressions that you would want to execute by converting to executable intermediate language (IL).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(Think about what it would mean to directly execute a <ph id="ph1">`ConstantExpression`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Would it mean anything useful?) Any expression tree that is a <ph id="ph1">`LambdaExpression`</ph>, or a type derived from <ph id="ph2">`LambdaExpression`</ph> can be converted to IL.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The expression type <ph id="ph1">`Expression&lt;TDelegate&gt;`</ph> is the only concrete example in the .NET Core libraries.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It's used to represent an expression that maps to any delegate type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because this type maps to a delegate type, .NET can examine the expression, and generate IL for an appropriate delegate that matches the signature of the lambda expression.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In most cases, this creates a simple mapping between an expression, and its corresponding delegate.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, an expression tree that is represented by <ph id="ph1">`Expression&lt;Func&lt;int&gt;&gt;`</ph> would be converted to a delegate of the type <ph id="ph2">`Func&lt;int&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For a lambda expression with any return type and argument list, there exists a delegate type that is the target type for the executable code represented by that lambda expression.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LambdaExpression`</ph> type contains <ph id="ph2">`Compile`</ph> and <ph id="ph3">`CompileToMethod`</ph> members that you would use to convert an expression tree to executable code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compile`</ph> method creates a delegate.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CompileToMethod`</ph> method updates a <ph id="ph2">`MethodBuilder`</ph> object with the IL that represents the compiled output of the expression tree.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`CompileToMethod`</ph> is only available in the full desktop framework, not in the .NET Core.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Optionally, you can also provide a <ph id="ph1">`DebugInfoGenerator`</ph> that will receive the symbol debugging information for the generated delegate object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This enables you to convert the expression tree into a delegate object, and have full debugging information about the generated delegate.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You would convert an expression into a delegate using the following code:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Notice that the delegate type is based on the expression type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You must know the return type and the argument list if you want to use the delegate object in a strongly typed manner.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LambdaExpression.Compile()`</ph> method returns the <ph id="ph2">`Delegate`</ph> type.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You will have to cast it to the correct delegate type to have any compile-time tools check the argument list or return type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Execution and Lifetimes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You execute the code by invoking the delegate created when you called <ph id="ph1">`LambdaExpression.Compile()`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can see this above where <ph id="ph1">`add.Compile()`</ph> returns a delegate.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Invoking that delegate, by calling <ph id="ph1">`func()`</ph> executes the code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>That delegate represents the code in the expression tree.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can retain the handle to that delegate and invoke it later.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You don't need to compile the expression tree each time you want to execute the code it represents.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(Remember that expression trees are immutable, and compiling the same expression tree later will create a delegate that executes the same code.)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>I will caution you against trying to create any more sophisticated caching mechanisms to increase performance by avoiding unnecessary compile calls.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Comparing two arbitrary expression trees to determine if they represent the same algorithm will also be time consuming to execute.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You'll likely find that the compute time you save avoiding any extra calls to <ph id="ph1">`LambdaExpression.Compile()`</ph> will be more than consumed by the time executing code that determines of two different expression trees result in the same executable code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Caveats</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Compiling a lambda expression to a delegate and invoking that delegate is one of the simplest operations you can perform with an expression tree.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>However, even with this simple operation, there are caveats you must be aware of.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Lambda Expressions create closures over any local variables that are referenced in the expression.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You must guarantee that any variables that would be part of the delegate are usable at the location where you call <ph id="ph1">`Compile`</ph>, and when you execute the resulting delegate.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In general, the compiler will ensure that this is true.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, if your expression accesses a variable that implements <ph id="ph1">`IDisposable`</ph>, it's possible that your code might dispose of the object while it is still held by the expression tree.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, this code works fine, because <ph id="ph1">`int`</ph> does not implement <ph id="ph2">`IDisposable`</ph>:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The delegate has captured a reference to the local variable <ph id="ph1">`constant`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>That variable is accessed at any time later, when the function returned by <ph id="ph1">`CreateBoundFunc`</ph> executes.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>However, consider this (rather contrived) class that implements <ph id="ph1">`IDisposable`</ph>:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you use it in an expression as shown below, you'll get an <ph id="ph1">`ObjectDisposedException`</ph> when you execute the code referenced by the <ph id="ph2">`Resource.Argument`</ph> property:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The delegate returned from this method has closed over the <ph id="ph1">`constant`</ph> object, which has been disposed of.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>(It's been disposed, because it was declared in a <ph id="ph1">`using`</ph> statement.)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Now, when you execute the delegate returned from this method, you'll have a <ph id="ph1">`ObjectDisposedException`</ph> thrown at the point of execution.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It does seem strange to have a runtime error representing a compile-time construct, but that's the world we enter when we work with expression trees.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>There are a lot of permutations of this problem, so it's hard to offer general guidance to avoid it.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Be careful about accessing local variables when defining expressions, and be careful about accessing state in the current object (represented by <ph id="ph1">`this`</ph>) when creating an expression tree that can be returned by a public API.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The code in your expression may reference methods or properties in other assemblies.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>That assembly must be accessible when the expression is defined, and when it is compiled, and when the resulting delegate is invoked.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You'll be met with a <ph id="ph1">`ReferencedAssemblyNotFoundException`</ph> in cases where it is not present.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Expression Trees that represent lambda expressions can be compiled to create a delegate that you can execute.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This provides one mechanism to execute the code represented by an expression tree.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The Expression Tree does represent the code that would execute for any given construct you create.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>As long as the environment where you compile and execute the code matches the environment where you create the expression, everything works as expected.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When that doesn't happen, the errors are very predictable, and they will be caught in your first tests of any code using the expression trees.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Next -- Interpreting Expressions<ept id="p1">](expression-trees-interpreting.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>