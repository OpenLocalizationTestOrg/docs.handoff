{"content":"---\ntitle: \"How to: Create a C-C++ Union by Using Attributes (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 85f35e56-26e0-4d31-9f3a-89bd4005e71a\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Create a C/C++ Union by Using Attributes (C#)\nBy using attributes you can customize how structs are laid out in memory. For example, you can create what is known as a union in C/C++ by using the `StructLayout(LayoutKind.Explicit)` and `FieldOffset` attributes.  \n  \n## Example  \n In this code segment, all of the fields of `TestUnion` start at the same location in memory.  \n  \n```csharp  \n// Add a using directive for System.Runtime.InteropServices.  \n  \n       [System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]  \n       struct TestUnion  \n       {  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public int i;  \n  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public double d;  \n  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public char c;  \n  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public byte b;  \n       }  \n```  \n  \n## Example  \n The following is another example where fields start at different explicitly set locations.  \n  \n```csharp  \n// Add a using directive for System.Runtime.InteropServices.  \n  \n       [System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]  \n       struct TestExplicit  \n       {  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public long lg;  \n  \n           [System.Runtime.InteropServices.FieldOffset(0)]  \n           public int i1;  \n  \n           [System.Runtime.InteropServices.FieldOffset(4)]  \n           public int i2;  \n  \n           [System.Runtime.InteropServices.FieldOffset(8)]  \n           public double d;  \n  \n           [System.Runtime.InteropServices.FieldOffset(12)]  \n           public char c;  \n  \n           [System.Runtime.InteropServices.FieldOffset(14)]  \n           public byte b;  \n       }  \n```  \n  \n The two integer fields, `i1` and `i2`, share the same memory locations as `lg`. This sort of control over struct layout is useful when using platform invocation.  \n  \n## See Also  \n <xref:System.Reflection>   \n <xref:System.Attribute>   \n [C# Programming Guide](../../../../csharp/programming-guide/index.md)   \n [Attributes](https://msdn.microsoft.com/library/5x6cd29c)   \n [Reflection (C#)](../../../../csharp/programming-guide/concepts/reflection.md)   \n [Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/index.md)   \n [Creating Custom Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md)   \n [Accessing Attributes by Using Reflection (C#)](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)","nodes":[{"pos":[4,434],"nodes":[{"content":"How to: Create a C-C++ Union by Using Attributes (C#) | Microsoft Docs","nodes":[{"pos":[0,70],"content":"How to: Create a C-C++ Union by Using Attributes (C#) | Microsoft Docs","nodes":[{"content":"How to: Create a C-C++ Union by Using Attributes (C#) | Microsoft Docs","pos":[0,70]}]}],"pos":[6,79],"yaml":true}],"content":"title: \"How to: Create a C-C++ Union by Using Attributes (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 85f35e56-26e0-4d31-9f3a-89bd4005e71a\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[441,494],"content":"How to: Create a C/C++ Union by Using Attributes (C#)","linkify":"How to: Create a C/C++ Union by Using Attributes (C#)","nodes":[{"content":"How to: Create a C/C++ Union by Using Attributes (C#)","pos":[0,53]}]},{"content":"By using attributes you can customize how structs are laid out in memory.","pos":[495,568]},{"content":"For example, you can create what is known as a union in C/C++ by using the <ph id=\"ph1\">`StructLayout(LayoutKind.Explicit)`</ph> and <ph id=\"ph2\">`FieldOffset`</ph> attributes.","pos":[569,709],"source":" For example, you can create what is known as a union in C/C++ by using the `StructLayout(LayoutKind.Explicit)` and `FieldOffset` attributes."},{"pos":[718,725],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[729,821],"content":"In this code segment, all of the fields of <ph id=\"ph1\">`TestUnion`</ph> start at the same location in memory.","source":"In this code segment, all of the fields of `TestUnion` start at the same location in memory."},{"pos":[1407,1414],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following is another example where fields start at different explicitly set locations.","pos":[1418,1508]},{"content":"The two integer fields, <ph id=\"ph1\">`i1`</ph> and <ph id=\"ph2\">`i2`</ph>, share the same memory locations as <ph id=\"ph3\">`lg`</ph>.","pos":[2283,2362],"source":"The two integer fields, `i1` and `i2`, share the same memory locations as `lg`."},{"content":"This sort of control over struct layout is useful when using platform invocation.","pos":[2363,2444]},{"pos":[2453,2461],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection&gt;</ph>","pos":[2465,2489],"source":"<xref:System.Reflection> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Attribute&gt;</ph>","pos":[2494,2517],"source":"<xref:System.Attribute> "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2522,2592],"source":"[C# Programming Guide](../../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](https://msdn.microsoft.com/library/5x6cd29c)</ept><ph id=\"ph1\"> </ph>","pos":[2596,2654],"source":"[Attributes](https://msdn.microsoft.com/library/5x6cd29c) "},{"content":"<bpt id=\"p1\">[</bpt>Reflection (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/reflection.md)</ept><ph id=\"ph1\"> </ph>","pos":[2658,2737],"source":"[Reflection (C#)](../../../../csharp/programming-guide/concepts/reflection.md) "},{"content":"<bpt id=\"p1\">[</bpt>Attributes (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2741,2826],"source":"[Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating Custom Attributes (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[2830,2952],"source":"[Creating Custom Attributes (C#)](../../../../csharp/programming-guide/concepts/attributes/creating-custom-attributes.md) "},{"content":"<bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept>","pos":[2956,3105],"source":"[Accessing Attributes by Using Reflection (C#)](../../../../csharp/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)"}]}