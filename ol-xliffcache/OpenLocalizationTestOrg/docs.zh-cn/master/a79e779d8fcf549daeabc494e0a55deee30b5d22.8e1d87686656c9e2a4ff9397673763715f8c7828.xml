{"content":"---\ntitle: \"&amp;= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.&=\"\nhelpviewer_keywords: \n  - \"operator &=\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"&= operator [Visual Basic]\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 0cf262fc-1a05-419a-a503-60013f111c8a\n---\n# &amp;= Operator (Visual Basic)\nConcatenates a `String` expression to a `String` variable or property and assigns the result to the variable or property.  \n  \n## Syntax  \n  \n```  \nvariableorproperty &= expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any `String` variable or property.  \n  \n `expression`  \n Required. Any `String` expression.  \n  \n## Remarks  \n The element on the left side of the `&=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md). The `&=` operator concatenates the `String` expression on its right to the `String` variable or property on its left, and assigns the result to the variable or property on its left.  \n  \n## Overloading  \n The [& Operator](../../../visual-basic/language-reference/operators/concatenation-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `&` operator affects the behavior of the `&=` operator. If your code uses `&=` on a class or structure that overloads `&`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `&=` operator to concatenate two `String` variables and assign the result to the first variable.  \n  \n [!code-vb[VbVbalrOperators#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#3)]  \n  \n## See also\n\n- [& Operator](../../../visual-basic/language-reference/operators/concatenation-operator.md)\n- [+= Operator](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)\n- [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)\n- [Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n","nodes":[{"pos":[4,369],"embed":true,"restype":"x-metadata","content":"title: \"&amp;= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.&=\"\nhelpviewer_keywords: \n  - \"operator &=\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"&= operator [Visual Basic]\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: 0cf262fc-1a05-419a-a503-60013f111c8a","nodes":[{"content":"&amp;= Operator (Visual Basic)","nodes":[{"pos":[0,30],"content":"&amp;= Operator (Visual Basic)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph>= Operator (Visual Basic)","pos":[0,30],"source":"&amp;= Operator (Visual Basic)"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[376,406],"content":"&amp;= Operator (Visual Basic)","linkify":"&amp;= Operator (Visual Basic)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph>= Operator (Visual Basic)","pos":[0,30],"source":"&amp;= Operator (Visual Basic)"}]},{"pos":[407,528],"content":"Concatenates a <ph id=\"ph1\">`String`</ph> expression to a <ph id=\"ph2\">`String`</ph> variable or property and assigns the result to the variable or property.","source":"Concatenates a `String` expression to a `String` variable or property and assigns the result to the variable or property."},{"pos":[537,543],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[602,607],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[635,644]},{"content":"Any <ph id=\"ph1\">`String`</ph> variable or property.","pos":[645,679],"source":" Any `String` variable or property."},{"content":"Required.","pos":[702,711]},{"content":"Any <ph id=\"ph1\">`String`</ph> expression.","pos":[712,736],"source":" Any `String` expression."},{"pos":[745,752],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`&amp;=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[756,877],"source":"The element on the left side of the `&=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[878,988],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`&amp;=`</ph> operator concatenates the <ph id=\"ph2\">`String`</ph> expression on its right to the <ph id=\"ph3\">`String`</ph> variable or property on its left, and assigns the result to the variable or property on its left.","pos":[989,1170],"source":" The `&=` operator concatenates the `String` expression on its right to the `String` variable or property on its left, and assigns the result to the variable or property on its left."},{"pos":[1179,1190],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">[</bpt>&amp; Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operator.md)</ept> can be <bpt id=\"p2\">*</bpt>overloaded<ept id=\"p2\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1194,1430],"source":"The [& Operator](../../../visual-basic/language-reference/operators/concatenation-operator.md) can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`&amp;`</ph> operator affects the behavior of the <ph id=\"ph2\">`&amp;=`</ph> operator.","pos":[1431,1502],"source":" Overloading the `&` operator affects the behavior of the `&=` operator."},{"content":"If your code uses <ph id=\"ph1\">`&amp;=`</ph> on a class or structure that overloads <ph id=\"ph2\">`&amp;`</ph>, be sure you understand its redefined behavior.","pos":[1503,1616],"source":" If your code uses `&=` on a class or structure that overloads `&`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[1617,1758],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[1767,1774],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1778,1905],"content":"The following example uses the <ph id=\"ph1\">`&amp;=`</ph> operator to concatenate two <ph id=\"ph2\">`String`</ph> variables and assign the result to the first variable.","source":"The following example uses the `&=` operator to concatenate two `String` variables and assign the result to the first variable."},{"pos":[2036,2044],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2048,2138],"content":"<bpt id=\"p1\">[</bpt>&amp; Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operator.md)</ept>","source":"[& Operator](../../../visual-basic/language-reference/operators/concatenation-operator.md)"},{"pos":[2141,2238],"content":"<bpt id=\"p1\">[</bpt>+= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)</ept>","source":"[+= Operator](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)"},{"pos":[2241,2339],"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>","source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)"},{"pos":[2342,2446],"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operators.md)</ept>","source":"[Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md)"},{"pos":[2449,2561],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[2564,2688],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[2691,2776],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}