{"content":"---\ntitle: Getting started with .NET Core on macOS | Microsoft Docs\ndescription: This document provides the steps and workflow to create a .NET Core Solution using Visual Studio Code.\nkeywords: .NET, .NET Core, Mac, macOS, Visual Studio Code\nauthor: bleroy\nms.author: mairaw\nms.date: 03/23/2017\nms.topic: article\nms.prod: .net-core\nms.devlang: dotnet\nms.assetid: 8ad82148-dac8-4b31-9128-b0e9610f4d9b\n---\n\n# Getting started with .NET Core on macOS\n\nThis document provides the steps and workflow to create a .NET Core solution for macOS. Learn how to create projects, unit tests, use the debugging tools, and incorporate third-party libraries via [NuGet](https://www.nuget.org/).\n\n> [!NOTE]\n> This article uses [Visual Studio Code](http://code.visualstudio.com) on macOS.\n\n## Prerequisites\n\nInstall the [.NET Core SDK](https://www.microsoft.com/net/core). The .NET Core SDK includes the latest release of the .NET Core framework and runtime.\n\nInstall [Visual Studio Code](http://code.visualstudio.com). During the course of this article, you also install VS Code extensions that improve the .NET Core development experience.\n\nInstall the VS Code C# extension by opening VS Code and pressing <kbd>F1</kbd> to open the VS Code palette. Type **ext install** to see the list of extensions. Select the C# extension. Restart VS Code to activate the extension. For more information, see the [Visual Studio Code C# Extension documentation](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md).\n\n## Getting started\n\nIn this tutorial, you create three projects: a library project, tests for that library project, and a console application that makes use of the library. You can [view or download the source](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden) for this topic at the dotnet/docs repository on GitHub. For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\nStart Visual Studio Code. Press <kbd>Ctrl</kbd>+<kbd>\\`</kbd> (the backquote or backtick character) or select **View > Integrated Terminal** from the menu to open an embedded terminal in VS Code. You can still open an external shell with the Explorer **Open in Command Prompt** command (**Open in Terminal** on Mac or Linux) if you prefer to work outside of VS Code.\n\nBegin by creating a solution file, which serves as a container for one or more .NET Core projects. In the terminal, create a *golden* folder and open the folder. This folder is the root of your solution. Run the [`dotnet new`](../tools/dotnet-new.md) command to create a new solution, *golden.sln*:\n\n```console\ndotnet new sln\n```\n\nFrom the *golden* folder, execute the following command to create a library project, which produces two files,*library.csproj* and *Class1.cs*, in the *library* folder:\n\n```console\ndotnet new classlib -o library\n```\n\nExecute the [`dotnet sln`](../tools/dotnet-sln.md) command to add the newly created *library.csproj* project to the solution:\n\n```console\ndotnet sln add library/library.csproj\n```\n\nThe *library.csproj* file contains the following information:\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>netstandard1.4</TargetFramework>\n  </PropertyGroup>\n\n</Project>\n```\n\nOur library methods serialize and deserialize objects in JSON format. To support JSON serialization and deserialization, add a reference to the `Newtonsoft.Json` NuGet package. The `dotnet add` command adds new items to a project. To add a reference to a NuGet package, use the [`dotnet add package`](../tools/dotnet-add-package.md) command and specify the name of the package:\n\n```console\ndotnet add library package Newtonsoft.Json\n```\n\nThis adds `Newtonsoft.Json` and its dependencies to the library project. Alternatively, manually edit the *library.csproj* file and add the following node:\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.1\" />\n</ItemGroup>\n```\n\nExecute [`dotnet restore`](../tools/dotnet-restore.md), which restores dependencies and creates an *obj* folder inside *library* with three files in it, including a *project.assets.json* file:\n\n```console\ndotnet restore\n```\n\nIn the *library* folder, rename the file *Class1.cs* to *Thing.cs*. Replace the code with the following:\n\n```csharp\nusing static Newtonsoft.Json.JsonConvert;\n\nnamespace Library\n{\n    public class Thing\n    {\n        public int Get(int left, int right) =>\n            DeserializeObject<int>($\"{left + right}\");\n    }\n}\n```\n\nThe `Thing` class contains one public method, `Get`, which returns the sum of two numbers but does so by converting the sum into a string and then deserializing it into an integer. This makes use of a number of modern C# features, such as [`using static` directives](../../csharp/language-reference/keywords/using-static.md), [expression-bodied members](../../csharp/whats-new/csharp-7.md#more-expression-bodied-members), and [interpolated strings](../../csharp/language-reference/keywords/interpolated-strings.md).\n\nBuild the library with the [`dotnet build`](../tools/dotnet-build.md) command. This produces a *library.dll* file under *golden/library/bin/Debug/netstandard1.4*:\n\n```console\ndotnet build\n```\n\n## Create the test project\n\nBuild a test project for the library. From the *golden* folder, create a new test project:\n\n```console\ndotnet new xunit -o test-library\n```\n\nAdd the test project to the solution:\n\n```console\ndotnet sln add test-library/test-library.csproj\n```\n\nAdd a project reference the library you created in the previous section so that the compiler can find and use the library project. Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:\n\n```console\ndotnet add test-library/test-library.csproj reference library/library.csproj\n```\n\nAlternatively, manually edit the *test-library.csproj* file and add the following node:\n\n```xml\n<ItemGroup>\n  <ProjectReference Include=\"..\\library\\library.csproj\" />\n</ItemGroup>\n```\n\nNow that the dependencies have been properly configured, create the tests for your library. Open *UnitTest1.cs* and replace its contents with the following code:\n\n```csharp\nusing Library;\nusing Xunit;\n\nnamespace TestApp\n{\n    public class LibraryTests\n    {\n        [Fact]\n        public void TestThing() {\n            Assert.NotEqual(42, new Thing().Get(19, 23));\n        }\n    }\n}\n```\n\nNote that you assert the value 42 is not equal to 19+23 (or 42) when you first create the unit test (`Assert.NotEqual`), which will fail. An important step in building unit tests is to create the test to fail once first to confirm its logic.\n\nFrom the *golden* folder, execute the following commands:\n\n```console\ndotnet restore\ndotnet test test-library/test-library.csproj\n```\n\nThese commands will recursively find all projects to restore dependencies, build them, and activate the xUnit test runner to run the tests. The single test fails, as you expect.\n\nEdit the *UnitTest1.cs* file and change the assertion from `Assert.NotEqual` to `Assert.Equal`. Execute the following command from the *golden* folder to re-run the test, which passes this time:\n\n```console\ndotnet test test-library/test-library.csproj\n```\n\n## Create the console app\n\nThe console app you create over the following steps takes a dependency on the library project you created earlier and calls its library method when it runs. Using this pattern of development, you see how to create reusable libraries for multiple projects.\n\nCreate a new console application from the *golden* folder:\n\n```console\ndotnet new console -o app\n```\n\nAdd the console app project to the solution:\n\n```console\ndotnet sln add app/app.csproj\n```\n\nCreate the dependency on the library by running the `dotnet add reference` command:\n\n```console\ndotnet add app/app.csproj reference library/library.csproj\n```\n\nRun `dotnet restore` to restore the dependencies of the three projects in the solution. Open *Program.cs* and replace the contents of the `Main` method with the following line:\n\n```csharp\nWriteLine($\"The answer is {new Thing().Get(19, 23)}\");\n```\n\nAdd two `using` directives to the top of the *Program.cs* file:\n\n```csharp\nusing static System.Console;\nusing Library;\n```\n\nExecute the following `dotnet run` command to run the executable, where the `-p` option to `dotnet run` specifies the project for the main application. The app produces the string \"The answer is 42\".\n\n```console\ndotnet run -p app/app.csproj\n```\n\n## Debug the application\n\nSet a breakpoint at the `WriteLine` statement in the `Main` method. Do this by either pressing the <kbd>F9</kbd> key when the cursor is over the `WriteLine` line or by clicking the mouse in the left margin on the line where you want to set the breakpoint. A red circle will appear in the margin next to the line of code. When the breakpoint is reached, code execution will stop *before* the breakpoint line is executed.\n\nOpen the debugger tab by selecting the Debug icon in the VS Code toolbar, selecting **View > Debug** from the menu bar, or using the keyboard shortcut <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>D</kbd>:\n\n![VS Code Debugger](./media/using-on-macos/vscodedebugger.png)\n\nPress the Play button to start the application under the debugger. The app begins execution and runs to the breakpoint, where it stops. Step into the `Get` method and make sure that you have passed in the correct arguments. Confirm that the answer is 42.\n","nodes":[{"pos":[11,67],"content":"Getting started with .NET Core on macOS | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"Getting started with .NET Core on macOS | Microsoft Docs","pos":[0,56]}]},{"pos":[81,183],"content":"This document provides the steps and workflow to create a .NET Core Solution using Visual Studio Code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This document provides the steps and workflow to create a .NET Core Solution using Visual Studio Code.","pos":[0,102]}]},{"pos":[194,241],"content":".NET, .NET Core, Mac, macOS, Visual Studio Code","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core, Mac, macOS, Visual Studio Code","pos":[0,47]}]},{"pos":[407,446],"content":"Getting started with .NET Core on macOS","linkify":"Getting started with .NET Core on macOS","nodes":[{"content":"Getting started with .NET Core on macOS","pos":[0,39]}]},{"content":"This document provides the steps and workflow to create a .NET Core solution for macOS.","pos":[448,535]},{"content":"Learn how to create projects, unit tests, use the debugging tools, and incorporate third-party libraries via <bpt id=\"p1\">[</bpt>NuGet<ept id=\"p1\">](https://www.nuget.org/)</ept>.","pos":[536,677],"source":" Learn how to create projects, unit tests, use the debugging tools, and incorporate third-party libraries via [NuGet](https://www.nuget.org/)."},{"pos":[681,769],"content":"[!NOTE]\nThis article uses [Visual Studio Code](http://code.visualstudio.com) on macOS.","leadings":["","> "],"nodes":[{"content":"This article uses <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](http://code.visualstudio.com)</ept> on macOS.","pos":[8,86],"source":"This article uses [Visual Studio Code](http://code.visualstudio.com) on macOS."}]},{"pos":[774,787],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"Install the <bpt id=\"p1\">[</bpt>.NET Core SDK<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept>.","pos":[789,853],"source":"Install the [.NET Core SDK](https://www.microsoft.com/net/core)."},{"content":"The .NET Core SDK includes the latest release of the .NET Core framework and runtime.","pos":[854,939]},{"content":"Install <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](http://code.visualstudio.com)</ept>.","pos":[941,1000],"source":"Install [Visual Studio Code](http://code.visualstudio.com)."},{"content":"During the course of this article, you also install VS Code extensions that improve the .NET Core development experience.","pos":[1001,1122]},{"content":"Install the VS Code C# extension by opening VS Code and pressing <bpt id=\"p1\">&lt;kbd&gt;</bpt>F1<ept id=\"p1\">&lt;/kbd&gt;</ept> to open the VS Code palette.","pos":[1124,1231],"source":"Install the VS Code C# extension by opening VS Code and pressing <kbd>F1</kbd> to open the VS Code palette."},{"content":"Type <bpt id=\"p1\">**</bpt>ext install<ept id=\"p1\">**</ept> to see the list of extensions.","pos":[1232,1283],"source":" Type **ext install** to see the list of extensions."},{"content":"Select the C# extension.","pos":[1284,1308]},{"content":"Restart VS Code to activate the extension.","pos":[1309,1351]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Visual Studio Code C# Extension documentation<ept id=\"p1\">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept>.","pos":[1352,1501],"source":" For more information, see the [Visual Studio Code C# Extension documentation](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)."},{"pos":[1506,1521],"content":"Getting started","linkify":"Getting started","nodes":[{"content":"Getting started","pos":[0,15]}]},{"content":"In this tutorial, you create three projects: a library project, tests for that library project, and a console application that makes use of the library.","pos":[1523,1675]},{"content":"You can <bpt id=\"p1\">[</bpt>view or download the source<ept id=\"p1\">](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden)</ept> for this topic at the dotnet/docs repository on GitHub.","pos":[1676,1849],"source":" You can [view or download the source](https://github.com/dotnet/docs/tree/master/samples/core/getting-started/golden) for this topic at the dotnet/docs repository on GitHub."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[1850,1975],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"content":"Start Visual Studio Code.","pos":[1977,2002]},{"content":"Press <bpt id=\"p1\">&lt;kbd&gt;</bpt>Ctrl<ept id=\"p1\">&lt;/kbd&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;kbd&gt;</bpt><ph id=\"ph2\">\\`</ph><ept id=\"p2\">&lt;/kbd&gt;</ept> (the backquote or backtick character) or select <bpt id=\"p3\">**</bpt>View &gt; Integrated Terminal<ept id=\"p3\">**</ept> from the menu to open an embedded terminal in VS Code.","pos":[2003,2172],"source":" Press <kbd>Ctrl</kbd>+<kbd>\\`</kbd> (the backquote or backtick character) or select **View > Integrated Terminal** from the menu to open an embedded terminal in VS Code."},{"content":"You can still open an external shell with the Explorer <bpt id=\"p1\">**</bpt>Open in Command Prompt<ept id=\"p1\">**</ept> command (<bpt id=\"p2\">**</bpt>Open in Terminal<ept id=\"p2\">**</ept> on Mac or Linux) if you prefer to work outside of VS Code.","pos":[2173,2343],"source":" You can still open an external shell with the Explorer **Open in Command Prompt** command (**Open in Terminal** on Mac or Linux) if you prefer to work outside of VS Code."},{"content":"Begin by creating a solution file, which serves as a container for one or more .NET Core projects.","pos":[2345,2443]},{"content":"In the terminal, create a <bpt id=\"p1\">*</bpt>golden<ept id=\"p1\">*</ept> folder and open the folder.","pos":[2444,2506],"source":" In the terminal, create a *golden* folder and open the folder."},{"content":"This folder is the root of your solution.","pos":[2507,2548]},{"content":"Run the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet new`</ph><ept id=\"p1\">](../tools/dotnet-new.md)</ept> command to create a new solution, <bpt id=\"p2\">*</bpt>golden.sln<ept id=\"p2\">*</ept>:","pos":[2549,2643],"source":" Run the [`dotnet new`](../tools/dotnet-new.md) command to create a new solution, *golden.sln*:"},{"pos":[2676,2844],"content":"From the <bpt id=\"p1\">*</bpt>golden<ept id=\"p1\">*</ept> folder, execute the following command to create a library project, which produces two files,<bpt id=\"p2\">*</bpt>library.csproj<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>Class1.cs<ept id=\"p3\">*</ept>, in the <bpt id=\"p4\">*</bpt>library<ept id=\"p4\">*</ept> folder:","source":"From the *golden* folder, execute the following command to create a library project, which produces two files,*library.csproj* and *Class1.cs*, in the *library* folder:"},{"pos":[2893,3018],"content":"Execute the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet sln`</ph><ept id=\"p1\">](../tools/dotnet-sln.md)</ept> command to add the newly created <bpt id=\"p2\">*</bpt>library.csproj<ept id=\"p2\">*</ept> project to the solution:","source":"Execute the [`dotnet sln`](../tools/dotnet-sln.md) command to add the newly created *library.csproj* project to the solution:"},{"pos":[3074,3135],"content":"The <bpt id=\"p1\">*</bpt>library.csproj<ept id=\"p1\">*</ept> file contains the following information:","source":"The *library.csproj* file contains the following information:"},{"content":"Our library methods serialize and deserialize objects in JSON format.","pos":[3287,3356]},{"content":"To support JSON serialization and deserialization, add a reference to the <ph id=\"ph1\">`Newtonsoft.Json`</ph> NuGet package.","pos":[3357,3463],"source":" To support JSON serialization and deserialization, add a reference to the `Newtonsoft.Json` NuGet package."},{"content":"The <ph id=\"ph1\">`dotnet add`</ph> command adds new items to a project.","pos":[3464,3517],"source":" The `dotnet add` command adds new items to a project."},{"content":"To add a reference to a NuGet package, use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add package`</ph><ept id=\"p1\">](../tools/dotnet-add-package.md)</ept> command and specify the name of the package:","pos":[3518,3664],"source":" To add a reference to a NuGet package, use the [`dotnet add package`](../tools/dotnet-add-package.md) command and specify the name of the package:"},{"content":"This adds <ph id=\"ph1\">`Newtonsoft.Json`</ph> and its dependencies to the library project.","pos":[3725,3797],"source":"This adds `Newtonsoft.Json` and its dependencies to the library project."},{"content":"Alternatively, manually edit the <bpt id=\"p1\">*</bpt>library.csproj<ept id=\"p1\">*</ept> file and add the following node:","pos":[3798,3880],"source":" Alternatively, manually edit the *library.csproj* file and add the following node:"},{"pos":[3985,4177],"content":"Execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet restore`</ph><ept id=\"p1\">](../tools/dotnet-restore.md)</ept>, which restores dependencies and creates an <bpt id=\"p2\">*</bpt>obj<ept id=\"p2\">*</ept> folder inside <bpt id=\"p3\">*</bpt>library<ept id=\"p3\">*</ept> with three files in it, including a <bpt id=\"p4\">*</bpt>project.assets.json<ept id=\"p4\">*</ept> file:","source":"Execute [`dotnet restore`](../tools/dotnet-restore.md), which restores dependencies and creates an *obj* folder inside *library* with three files in it, including a *project.assets.json* file:"},{"content":"In the <bpt id=\"p1\">*</bpt>library<ept id=\"p1\">*</ept> folder, rename the file <bpt id=\"p2\">*</bpt>Class1.cs<ept id=\"p2\">*</ept> to <bpt id=\"p3\">*</bpt>Thing.cs<ept id=\"p3\">*</ept>.","pos":[4210,4277],"source":"In the *library* folder, rename the file *Class1.cs* to *Thing.cs*."},{"content":"Replace the code with the following:","pos":[4278,4314]},{"content":"The <ph id=\"ph1\">`Thing`</ph> class contains one public method, <ph id=\"ph2\">`Get`</ph>, which returns the sum of two numbers but does so by converting the sum into a string and then deserializing it into an integer.","pos":[4533,4713],"source":"The `Thing` class contains one public method, `Get`, which returns the sum of two numbers but does so by converting the sum into a string and then deserializing it into an integer."},{"content":"This makes use of a number of modern C# features, such as <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`using static`</ph> directives<ept id=\"p1\">](../../csharp/language-reference/keywords/using-static.md)</ept>, <bpt id=\"p2\">[</bpt>expression-bodied members<ept id=\"p2\">](../../csharp/whats-new/csharp-7.md#more-expression-bodied-members)</ept>, and <bpt id=\"p3\">[</bpt>interpolated strings<ept id=\"p3\">](../../csharp/language-reference/keywords/interpolated-strings.md)</ept>.","pos":[4714,5048],"source":" This makes use of a number of modern C# features, such as [`using static` directives](../../csharp/language-reference/keywords/using-static.md), [expression-bodied members](../../csharp/whats-new/csharp-7.md#more-expression-bodied-members), and [interpolated strings](../../csharp/language-reference/keywords/interpolated-strings.md)."},{"content":"Build the library with the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet build`</ph><ept id=\"p1\">](../tools/dotnet-build.md)</ept> command.","pos":[5050,5128],"source":"Build the library with the [`dotnet build`](../tools/dotnet-build.md) command."},{"content":"This produces a <bpt id=\"p1\">*</bpt>library.dll<ept id=\"p1\">*</ept> file under <bpt id=\"p2\">*</bpt>golden/library/bin/Debug/netstandard1.4<ept id=\"p2\">*</ept>:","pos":[5129,5212],"source":" This produces a *library.dll* file under *golden/library/bin/Debug/netstandard1.4*:"},{"pos":[5246,5269],"content":"Create the test project","linkify":"Create the test project","nodes":[{"content":"Create the test project","pos":[0,23]}]},{"content":"Build a test project for the library.","pos":[5271,5308]},{"content":"From the <bpt id=\"p1\">*</bpt>golden<ept id=\"p1\">*</ept> folder, create a new test project:","pos":[5309,5361],"source":" From the *golden* folder, create a new test project:"},{"content":"Add the test project to the solution:","pos":[5412,5449]},{"content":"Add a project reference the library you created in the previous section so that the compiler can find and use the library project.","pos":[5515,5645]},{"content":"Use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add reference`</ph><ept id=\"p1\">](../tools/dotnet-add-reference.md)</ept> command:","pos":[5646,5721],"source":" Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:"},{"pos":[5816,5903],"content":"Alternatively, manually edit the <bpt id=\"p1\">*</bpt>test-library.csproj<ept id=\"p1\">*</ept> file and add the following node:","source":"Alternatively, manually edit the *test-library.csproj* file and add the following node:"},{"content":"Now that the dependencies have been properly configured, create the tests for your library.","pos":[6001,6092]},{"content":"Open <bpt id=\"p1\">*</bpt>UnitTest1.cs<ept id=\"p1\">*</ept> and replace its contents with the following code:","pos":[6093,6162],"source":" Open *UnitTest1.cs* and replace its contents with the following code:"},{"content":"Note that you assert the value 42 is not equal to 19+23 (or 42) when you first create the unit test (<ph id=\"ph1\">`Assert.NotEqual`</ph>), which will fail.","pos":[6389,6526],"source":"Note that you assert the value 42 is not equal to 19+23 (or 42) when you first create the unit test (`Assert.NotEqual`), which will fail."},{"content":"An important step in building unit tests is to create the test to fail once first to confirm its logic.","pos":[6527,6630]},{"pos":[6632,6689],"content":"From the <bpt id=\"p1\">*</bpt>golden<ept id=\"p1\">*</ept> folder, execute the following commands:","source":"From the *golden* folder, execute the following commands:"},{"content":"These commands will recursively find all projects to restore dependencies, build them, and activate the xUnit test runner to run the tests.","pos":[6767,6906]},{"content":"The single test fails, as you expect.","pos":[6907,6944]},{"content":"Edit the <bpt id=\"p1\">*</bpt>UnitTest1.cs<ept id=\"p1\">*</ept> file and change the assertion from <ph id=\"ph1\">`Assert.NotEqual`</ph> to <ph id=\"ph2\">`Assert.Equal`</ph>.","pos":[6946,7041],"source":"Edit the *UnitTest1.cs* file and change the assertion from `Assert.NotEqual` to `Assert.Equal`."},{"content":"Execute the following command from the <bpt id=\"p1\">*</bpt>golden<ept id=\"p1\">*</ept> folder to re-run the test, which passes this time:","pos":[7042,7140],"source":" Execute the following command from the *golden* folder to re-run the test, which passes this time:"},{"pos":[7206,7228],"content":"Create the console app","linkify":"Create the console app","nodes":[{"content":"Create the console app","pos":[0,22]}]},{"content":"The console app you create over the following steps takes a dependency on the library project you created earlier and calls its library method when it runs.","pos":[7230,7386]},{"content":"Using this pattern of development, you see how to create reusable libraries for multiple projects.","pos":[7387,7485]},{"pos":[7487,7545],"content":"Create a new console application from the <bpt id=\"p1\">*</bpt>golden<ept id=\"p1\">*</ept> folder:","source":"Create a new console application from the *golden* folder:"},{"content":"Add the console app project to the solution:","pos":[7589,7633]},{"pos":[7681,7764],"content":"Create the dependency on the library by running the <ph id=\"ph1\">`dotnet add reference`</ph> command:","source":"Create the dependency on the library by running the `dotnet add reference` command:"},{"content":"Run <ph id=\"ph1\">`dotnet restore`</ph> to restore the dependencies of the three projects in the solution.","pos":[7841,7928],"source":"Run `dotnet restore` to restore the dependencies of the three projects in the solution."},{"content":"Open <bpt id=\"p1\">*</bpt>Program.cs<ept id=\"p1\">*</ept> and replace the contents of the <ph id=\"ph1\">`Main`</ph> method with the following line:","pos":[7929,8017],"source":" Open *Program.cs* and replace the contents of the `Main` method with the following line:"},{"pos":[8089,8152],"content":"Add two <ph id=\"ph1\">`using`</ph> directives to the top of the <bpt id=\"p1\">*</bpt>Program.cs<ept id=\"p1\">*</ept> file:","source":"Add two `using` directives to the top of the *Program.cs* file:"},{"content":"Execute the following <ph id=\"ph1\">`dotnet run`</ph> command to run the executable, where the <ph id=\"ph2\">`-p`</ph> option to <ph id=\"ph3\">`dotnet run`</ph> specifies the project for the main application.","pos":[8213,8364],"source":"Execute the following `dotnet run` command to run the executable, where the `-p` option to `dotnet run` specifies the project for the main application."},{"content":"The app produces the string \"The answer is 42\".","pos":[8365,8412]},{"pos":[8462,8483],"content":"Debug the application","linkify":"Debug the application","nodes":[{"content":"Debug the application","pos":[0,21]}]},{"content":"Set a breakpoint at the <ph id=\"ph1\">`WriteLine`</ph> statement in the <ph id=\"ph2\">`Main`</ph> method.","pos":[8485,8552],"source":"Set a breakpoint at the `WriteLine` statement in the `Main` method."},{"content":"Do this by either pressing the <bpt id=\"p1\">&lt;kbd&gt;</bpt>F9<ept id=\"p1\">&lt;/kbd&gt;</ept> key when the cursor is over the <ph id=\"ph1\">`WriteLine`</ph> line or by clicking the mouse in the left margin on the line where you want to set the breakpoint.","pos":[8553,8740],"source":" Do this by either pressing the <kbd>F9</kbd> key when the cursor is over the `WriteLine` line or by clicking the mouse in the left margin on the line where you want to set the breakpoint."},{"content":"A red circle will appear in the margin next to the line of code.","pos":[8741,8805]},{"content":"When the breakpoint is reached, code execution will stop <bpt id=\"p1\">*</bpt>before<ept id=\"p1\">*</ept> the breakpoint line is executed.","pos":[8806,8904],"source":" When the breakpoint is reached, code execution will stop *before* the breakpoint line is executed."},{"pos":[8906,9103],"content":"Open the debugger tab by selecting the Debug icon in the VS Code toolbar, selecting <bpt id=\"p1\">**</bpt>View &gt; Debug<ept id=\"p1\">**</ept> from the menu bar, or using the keyboard shortcut <bpt id=\"p2\">&lt;kbd&gt;</bpt>CTRL<ept id=\"p2\">&lt;/kbd&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p3\">&lt;kbd&gt;</bpt>SHIFT<ept id=\"p3\">&lt;/kbd&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p4\">&lt;kbd&gt;</bpt>D<ept id=\"p4\">&lt;/kbd&gt;</ept>:","source":"Open the debugger tab by selecting the Debug icon in the VS Code toolbar, selecting **View > Debug** from the menu bar, or using the keyboard shortcut <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>D</kbd>:"},{"content":"VS Code Debugger","pos":[9107,9123]},{"content":"Press the Play button to start the application under the debugger.","pos":[9169,9235]},{"content":"The app begins execution and runs to the breakpoint, where it stops.","pos":[9236,9304]},{"content":"Step into the <ph id=\"ph1\">`Get`</ph> method and make sure that you have passed in the correct arguments.","pos":[9305,9392],"source":" Step into the `Get` method and make sure that you have passed in the correct arguments."},{"content":"Confirm that the answer is 42.","pos":[9393,9423]}]}