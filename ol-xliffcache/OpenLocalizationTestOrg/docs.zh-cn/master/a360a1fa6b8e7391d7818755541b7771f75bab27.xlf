<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a360a1fa6b8e7391d7818755541b7771f75bab27</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\security\encrypting-data.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4efda44a588eb05811018cef1e5fbacb877660e7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fe8a958f253f46c6c44edfa1ab4640794d57460</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encrypting Data | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Encrypting Data</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Symmetric encryption and asymmetric encryption are performed using different processes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Symmetric encryption is performed on streams and is therefore useful to encrypt large amounts of data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Asymmetric encryption is performed on a small number of bytes and is therefore useful only for small amounts of data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Symmetric Encryption</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The managed symmetric cryptography classes are used with a special stream class called a <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> that encrypts data read into the stream.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CryptoStream<ept id="p1">**</ept> class is initialized with a managed stream class, a class implements the <ph id="ph1">&lt;xref:System.Security.Cryptography.ICryptoTransform&gt;</ph> interface (created from a class that implements a cryptographic algorithm), and a <ph id="ph2">&lt;xref:System.Security.Cryptography.CryptoStreamMode&gt;</ph> enumeration that describes the type of access permitted to the <bpt id="p2">**</bpt>CryptoStream<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CryptoStream<ept id="p1">**</ept> class can be initialized using any class that derives from the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class, including <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>, and <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using these classes, you can perform symmetric encryption on a variety of stream objects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to create a new instance of the <ph id="ph1">&lt;xref:System.Security.Cryptography.RijndaelManaged&gt;</ph> class, which implements the Rijndael encryption algorithm, and use it to perform encryption on a <bpt id="p1">**</bpt>CryptoStream<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this example, the <bpt id="p1">**</bpt>CryptoStream<ept id="p1">**</ept> is initialized with a stream object called <ph id="ph1">`MyStream`</ph> that can be any type of managed stream.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CreateEncryptor<ept id="p1">**</ept> method from the <bpt id="p2">**</bpt>RijndaelManaged<ept id="p2">**</ept> class is passed the key and IV that are used for encryption.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this case, the default key and IV generated from <ph id="ph1">`RMCrypto`</ph> are used.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Finally, the <bpt id="p1">**</bpt>CryptoStreamMode.Write<ept id="p1">**</ept> is passed, specifying write access to the stream.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>After this code is executed, any data written to the <bpt id="p1">**</bpt>CryptoStream<ept id="p1">**</ept> object is encrypted using the Rijndael algorithm.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows the entire process of creating a stream, encrypting the stream, writing to the stream, and closing the stream.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example creates a network stream that is encrypted using the <bpt id="p1">**</bpt>CryptoStream<ept id="p1">**</ept> class and the <bpt id="p2">**</bpt>RijndaelManaged<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A message is written to the encrypted stream with the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also use this example to write to a file.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To do that, delete the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> reference and replace the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with a <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For the previous example to execute successfully, there must be a process listening on the IP address and port number specified in the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a listening process exists, the code will connect to the listening process, encrypt the stream using the Rijndael symmetric algorithm, and write "Hello World!"</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>to the stream.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the code is successful, it displays the following text to the console:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, if no listening process is found or an exception is raised, the code displays the following text to the console:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Asymmetric Encryption</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Asymmetric algorithms are usually used to encrypt small amounts of data such as the encryption of a symmetric key and IV.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Typically, an individual performing asymmetric encryption uses the public key generated by another party.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class is provided by the .NET Framework for this purpose.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example uses public key information to encrypt a symmetric key and IV.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Two byte arrays are initialized that represent the public key of a third party.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph> object is initialized to these values.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Next, the <bpt id="p1">**</bpt>RSAParameters<ept id="p1">**</ept> object (along with the public key it represents) is imported into an <bpt id="p2">**</bpt>RSACryptoServiceProvider<ept id="p2">**</ept> using the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Finally, the private key and IV created by a <ph id="ph1">&lt;xref:System.Security.Cryptography.RijndaelManaged&gt;</ph> class are encrypted.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This example requires systems to have 128-bit encryption installed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generating Keys for Encryption and Decryption<ept id="p1">](../../../docs/standard/security/generating-keys-for-encryption-and-decryption.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Decrypting Data<ept id="p1">](../../../docs/standard/security/decrypting-data.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Cryptographic Services<ept id="p1">](../../../docs/standard/security/cryptographic-services.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>