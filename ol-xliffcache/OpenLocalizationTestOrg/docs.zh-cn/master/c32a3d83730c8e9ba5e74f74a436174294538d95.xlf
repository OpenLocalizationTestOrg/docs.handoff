<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c32a3d83730c8e9ba5e74f74a436174294538d95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\tokens\verbatim.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2422815b537a34d4569dfc3d385f222445539332</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c118e416dd3257707b4ce529952c36bd6a2a01d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>@ (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>@ (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`@`</ph> special character serves as a verbatim identifier.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It can be used in the following ways:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To enable C# keywords to be used as identifiers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`@`</ph> character prefixes a code element that the compiler is to interpret as an identifier rather than a C# keyword.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`@`</ph> character to define an identifier named <ph id="ph2">`for`</ph> that it uses in a <ph id="ph3">`for`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>verbatim1<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/verbatim1.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To indicate that a string literal is to be interpreted verbatim.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`@`</ph> character in this instance defines a <bpt id="p1">*</bpt>verbatim string literal<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Simple escape sequences (such as <ph id="ph1">`"\\"`</ph> for a backslash), hexadecimal escape sequences (such as <ph id="ph2">`"\x0041"`</ph> for an uppercase A, and Unicode escape sequences, such as <ph id="ph3">`"\u0041"`</ph> for an uppercase A, are interpreted literally.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Only a quote escape sequence (<ph id="ph1">`""`</ph>) is not interpreted literally; it produces a single quotation mark.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example defines two identical file paths, one by using a regular string literal and the other by using a verbatim string literal.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is one of the more common uses of verbatim string literals.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>verbatim2<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/verbatim1.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example illustrates the effect of defining a regular string literal and a verbatim string literal that contain identical character sequences.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>verbatim3<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/verbatim1.cs#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To enable the compiler to distinguish between attributes in cases of a naming conflict.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An attribute is a type that derives from <ph id="ph1">@System.Attribute</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Its type name typically includes the suffix <bpt id="p1">**</bpt>Attribute<ept id="p1">**</ept>, although the compiler does not enforce this convention.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The attribute can then be referenced in code either by its full type name (for example, <ph id="ph1">`[InfoAttribute]`</ph> or its shortened name (for example, <ph id="ph2">`[Info]`</ph>).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, a naming conflict occurs if two shortened attribute type names are identical, and one type name includes the <bpt id="p1">**</bpt>Attribute<ept id="p1">**</ept> suffix but the other does not.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, the following code fails to compile because the compiler cannot determine whether the <ph id="ph1">`Info`</ph> or <ph id="ph2">`InfoAttribute`</ph> attribute is applied to the <ph id="ph3">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the verbatim identifier is used to identify the <ph id="ph1">`Info`</ph> attribute, the example compiles successfully.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>verbatim4<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/verbatim4.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Special Characters<ept id="p1">](../../../csharp/language-reference/tokens/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>