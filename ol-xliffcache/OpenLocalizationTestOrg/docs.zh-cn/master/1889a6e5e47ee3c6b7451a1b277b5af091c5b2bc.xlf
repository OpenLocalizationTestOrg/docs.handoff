<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1889a6e5e47ee3c6b7451a1b277b5af091c5b2bc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\return-or-skip-elements-in-a-sequence.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a65e34f7b917a6d4fa6dd8360af86a1c1cc0b68c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34c168a87950f90f69b867d3b1d253b43371c4b3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Return Or Skip Elements in a Sequence | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Return Or Skip Elements in a Sequence</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> operator to return a given number of elements in a sequence and then skip over the remainder.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> operator to skip over a given number of elements in a sequence and then return the remainder.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> have certain limitations when they are used in queries against SQL Server 2000.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see the "Skip and Take Exceptions in SQL Server 2000" entry in <bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/troubleshooting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> translates <ph id="ph2">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> by using a subquery with the SQL <ph id="ph3">`NOT EXISTS`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This translation has the following limitations:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The argument must be a set.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Multisets are not supported, even if ordered.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The generated query can be much more complex than the query generated for the base query on which <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> is applied.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This complexity can cause decrease in performance or even a time-out.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">`Take`</ph> to select the first five <ph id="ph2">`Employees`</ph> hired.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that the collection is first sorted by <ph id="ph1">`HireDate`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#16<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#16)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DLinqQueryExamples#16<ept id="p4">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#16)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> to select all except the 10 most expensive <ph id="ph2">`Products`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#17<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#17)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DLinqQueryExamples#17<ept id="p4">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#17)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example combines the <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> methods to skip the first 50 records and then return the next 10.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#18<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#18)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DLinqQueryExamples#18<ept id="p4">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#18)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> operations are well defined only against ordered sets.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The semantics for unordered sets or multisets is undefined.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Because of the limitations on ordering in SQL, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> tries to move the ordering of the argument of the <ph id="ph2">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> operator to the result of the operator.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Translation is different for <ph id="ph1">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph> and <ph id="ph2">[!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you plan to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> with a query of any complexity, use <ph id="ph2">[!INCLUDE[sqprsqlong](../../../../../../includes/sqprsqlong-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Consider the following <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> query for <ph id="ph2">[!INCLUDE[ss2k](../../../../../../includes/ss2k-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryExamples#19<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#19)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DLinqQueryExamples#19<ept id="p4">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#19)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> moves the ordering to the end in the SQL code, as follows:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> are chained together, all the specified ordering must be consistent.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Otherwise, the results are undefined.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For non-negative, constant integral arguments based on the SQL specification, both <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable.Skip%2A&gt;</ph> are well-defined.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Examples<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Standard Query Operator Translation<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/standard-query-operator-translation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>