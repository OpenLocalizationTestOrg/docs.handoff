{"content":"---\ntitle: \"* Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.*\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"arithmetic operators, multiplication\"\n  - \"operators [Visual Basic], multiplication\"\n  - \"* operator [Visual Basic]\"\n  - \"multiplication operator, syntax\"\n  - \"math operators\"\nms.assetid: 2b210382-99da-4195-89ba-b1d06f5e89ad\ncaps.latest.revision: 19\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# * Operator (Visual Basic)\nMultiplies two numbers.  \n  \n## Syntax  \n  \n```  \n  \nnumber1 * number2  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`number1`|Required. Any numeric expression.|  \n|`number2`|Required. Any numeric expression.|  \n  \n## Result  \n The result is the product of `number1` and `number2`.  \n  \n## Supported Types  \n All numeric types, including the unsigned and floating-point types and `Decimal`.  \n  \n## Remarks  \n The data type of the result depends on the types of the operands. The following table shows how the data type of the result is determined.  \n  \n|Operand data types|Result data type|  \n|---|---|  \n|Both expressions are integral data types ([SByte](../../../visual-basic/language-reference/data-types/sbyte-data-type.md), [Byte](../../../visual-basic/language-reference/data-types/byte-data-type.md), [Short](../../../visual-basic/language-reference/data-types/short-data-type.md), [UShort](../../../visual-basic/language-reference/data-types/ushort-data-type.md), [Integer](../../../visual-basic/language-reference/data-types/integer-data-type.md), [UInteger](../../../visual-basic/language-reference/data-types/uinteger-data-type.md), [Long](../../../visual-basic/language-reference/data-types/long-data-type.md), [ULong](../../../visual-basic/language-reference/data-types/ulong-data-type.md))|A numeric data type appropriate for the data types of `number1` and `number2`. See the \"Integer Arithmetic\" tables in [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md).|  \n|Both expressions are [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md)|`Decimal`|  \n|Both expressions are [Single](../../../visual-basic/language-reference/data-types/single-data-type.md)|`Single`|  \n|Either expression is a floating-point data type (`Single` or [Double](../../../visual-basic/language-reference/data-types/double-data-type.md)) but not both `Single` (note `Decimal` is not a floating-point data type)|`Double`|  \n  \n If an expression evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), it is treated as zero.  \n  \n## Overloading  \n The `*` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n This example uses the `*` operator to multiply two numbers. The result is the product of the two operands.  \n  \n [!code-vb[VbVbalrOperators#4](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/multiplication-operator_1.vb)]  \n  \n## See Also  \n [*= Operator](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md)   \n [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)","nodes":[{"pos":[4,735],"embed":true,"restype":"x-metadata","content":"title: \"* Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.*\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"arithmetic operators, multiplication\"\n  - \"operators [Visual Basic], multiplication\"\n  - \"* operator [Visual Basic]\"\n  - \"multiplication operator, syntax\"\n  - \"math operators\"\nms.assetid: 2b210382-99da-4195-89ba-b1d06f5e89ad\ncaps.latest.revision: 19\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"* Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[2,42],"content":"Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"Operator (Visual Basic) | Microsoft Docs","pos":[0,40]}]}],"path":["title"]}],"yml":true},{"pos":[742,767],"content":"* Operator (Visual Basic)","linkify":"* Operator (Visual Basic)","nodes":[{"content":"* Operator (Visual Basic)","pos":[0,25]}]},{"content":"Multiplies two numbers.","pos":[768,791]},{"pos":[800,806],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[853,858],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[865,869]},{"content":"Definition","pos":[870,880]},{"content":"Required.","pos":[907,916]},{"content":"Any numeric expression.","pos":[917,940]},{"content":"Required.","pos":[955,964]},{"content":"Any numeric expression.","pos":[965,988]},{"pos":[998,1004],"content":"Result","linkify":"Result","nodes":[{"content":"Result","pos":[0,6]}]},{"pos":[1008,1061],"content":"The result is the product of <ph id=\"ph1\">`number1`</ph> and <ph id=\"ph2\">`number2`</ph>.","source":"The result is the product of `number1` and `number2`."},{"pos":[1070,1085],"content":"Supported Types","linkify":"Supported Types","nodes":[{"content":"Supported Types","pos":[0,15]}]},{"pos":[1089,1170],"content":"All numeric types, including the unsigned and floating-point types and <ph id=\"ph1\">`Decimal`</ph>.","source":"All numeric types, including the unsigned and floating-point types and `Decimal`."},{"pos":[1179,1186],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The data type of the result depends on the types of the operands.","pos":[1190,1255]},{"content":"The following table shows how the data type of the result is determined.","pos":[1256,1328]},{"content":"Operand data types","pos":[1335,1353]},{"content":"Result data type","pos":[1354,1370]},{"pos":[1387,2084],"content":"Both expressions are integral data types (<bpt id=\"p1\">[</bpt>SByte<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>, <bpt id=\"p2\">[</bpt>Byte<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept>, <bpt id=\"p3\">[</bpt>Short<ept id=\"p3\">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>, <bpt id=\"p4\">[</bpt>UShort<ept id=\"p4\">](../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept>, <bpt id=\"p5\">[</bpt>Integer<ept id=\"p5\">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>, <bpt id=\"p6\">[</bpt>UInteger<ept id=\"p6\">](../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept>, <bpt id=\"p7\">[</bpt>Long<ept id=\"p7\">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>, <bpt id=\"p8\">[</bpt>ULong<ept id=\"p8\">](../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept>)","source":"Both expressions are integral data types ([SByte](../../../visual-basic/language-reference/data-types/sbyte-data-type.md), [Byte](../../../visual-basic/language-reference/data-types/byte-data-type.md), [Short](../../../visual-basic/language-reference/data-types/short-data-type.md), [UShort](../../../visual-basic/language-reference/data-types/ushort-data-type.md), [Integer](../../../visual-basic/language-reference/data-types/integer-data-type.md), [UInteger](../../../visual-basic/language-reference/data-types/uinteger-data-type.md), [Long](../../../visual-basic/language-reference/data-types/long-data-type.md), [ULong](../../../visual-basic/language-reference/data-types/ulong-data-type.md))"},{"content":"A numeric data type appropriate for the data types of <ph id=\"ph1\">`number1`</ph> and <ph id=\"ph2\">`number2`</ph>.","pos":[2085,2163],"source":"A numeric data type appropriate for the data types of `number1` and `number2`."},{"content":"See the \"Integer Arithmetic\" tables in <bpt id=\"p1\">[</bpt>Data Types of Operator Results<ept id=\"p1\">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept>.","pos":[2164,2322],"source":" See the \"Integer Arithmetic\" tables in [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)."},{"pos":[2327,2431],"content":"Both expressions are <bpt id=\"p1\">[</bpt>Decimal<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>","source":"Both expressions are [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md)"},{"pos":[2446,2548],"content":"Both expressions are <bpt id=\"p1\">[</bpt>Single<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>","source":"Both expressions are [Single](../../../visual-basic/language-reference/data-types/single-data-type.md)"},{"pos":[2562,2778],"content":"Either expression is a floating-point data type (<ph id=\"ph1\">`Single`</ph> or <bpt id=\"p1\">[</bpt>Double<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>) but not both <ph id=\"ph2\">`Single`</ph> (note <ph id=\"ph3\">`Decimal`</ph> is not a floating-point data type)","source":"Either expression is a floating-point data type (`Single` or [Double](../../../visual-basic/language-reference/data-types/double-data-type.md)) but not both `Single` (note `Decimal` is not a floating-point data type)"},{"pos":[2795,2911],"content":"If an expression evaluates to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept>, it is treated as zero.","source":"If an expression evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), it is treated as zero."},{"pos":[2920,2931],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`*`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[2935,3093],"source":"The `*` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[3094,3202]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[3203,3344],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[3353,3360],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses the <ph id=\"ph1\">`*`</ph> operator to multiply two numbers.","pos":[3364,3423],"source":"This example uses the `*` operator to multiply two numbers."},{"content":"The result is the product of the two operands.","pos":[3424,3470]},{"pos":[3621,3629],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>*= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[3633,3737],"source":"[*= Operator](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3741,3840],"source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[3844,3957],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[3961,4086],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","pos":[4090,4237],"source":"[Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"}]}