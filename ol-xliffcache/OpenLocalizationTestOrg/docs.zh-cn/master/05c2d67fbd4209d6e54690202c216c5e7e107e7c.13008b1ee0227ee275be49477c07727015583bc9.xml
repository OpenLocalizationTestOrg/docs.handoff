{"content":"---\ntitle: \"Automatic Scaling in Windows Forms | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"scalability, automatic in Windows Forms\"\n  - \"Windows Forms, automatic scaling\"\nms.assetid: 68fad25b-afbc-44bd-8e1b-966fc43507a4\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Automatic Scaling in Windows Forms\nAutomatic scaling enables a form and its controls, designed on one machine with a certain display resolution or system font, to be displayed appropriately on another machine with a different display resolution or system font. It assures that the form and its controls will intelligently resize to be consistent with native windows and other applications on both the users' and other developers' machines. The support of the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] for automatic scaling and visual styles enables [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] applications to maintain a consistent look and feel when compared to native Windows applications on each user's machine.  \n  \n For the most part, automatic scaling works as expected in [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0 and later. However, font scheme changes can be problematic. To see an example of how to resolve this, see [Scaling Windows Forms](http://www.informit.com/guides/content.aspx?g=dotnet&seqNum=488).  \n  \n## Need for Automatic Scaling  \n Without automatic scaling, an application designed for one display resolution or font will either appear too small or too large when that resolution or font is changed. For example, if the application is designed using Tahoma 9 point as a baseline, without adjustment it will appear too small if run on a machine where the system font is Tahoma 12 point. Text elements, such as titles, menus, text box contents, and so on will render smaller than other applications. Furthermore, the size of user interface (UI) elements that contain text, such as the title bar, menus, and many controls are dependent on the font used. In this example, these elements will also appear relatively smaller.  \n  \n An analogous situation occurs when an application is designed for a certain display resolution. The most common display resolution is 96 dots per inch (DPI), but higher resolution displays supporting 120, 133, 170, and above are becoming more common. Without adjustment, an application, especially a graphics-based one, designed for one resolution will appear either too large or too small when run at another resolution.  \n  \n Automatic scaling seeks to ameliorate these problems by automatically resizing the form and its child controls according to the relative font size or display resolution. The Windows operating system supports automatic scaling of dialog boxes using a relative unit of measurement called dialog units. A dialog unit is based on the system font and its relationship to pixels can be determined though the Win32 SDK function `GetDialogBaseUnits`. When a user changes the theme used by Windows, all dialog boxes are automatically adjusted accordingly. In addition,  \n  \n The [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] supports automatic scaling either according to the default system font or the display resolution. Optionally, automatic scaling can be disabled in an application.  \n  \n## Original Support for Automatic Scaling  \n Versions 1.0 and 1.1 of the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] supported automatic scaling in a straightforward manner that was dependent on the Windows default font used for the UI, represented by the Win32 SDK value **DEFAULT_GUI_FONT**. This font is typically only changed when the display resolution changes. The following mechanism was used to implement automatic scaling:  \n  \n1.  At design time, the <xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A> property (which is now deprecated) was set to the height and width of the default system font on the developer's machine.  \n  \n2.  At runtime, the default system font of the user's machine was used to initialize the <xref:System.Windows.Forms.Control.Font%2A> property of the <xref:System.Windows.Forms.Form> class.  \n  \n3.  Before displaying the form, the <xref:System.Windows.Forms.Form.ApplyAutoScaling%2A> method was called to scale the form. This method calculated the relative scale sizes from <xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A> and <xref:System.Windows.Forms.Control.Font%2A> then called the <xref:System.Windows.Forms.Control.Scale%2A> method to actually scale the form and its children.  \n  \n4.  The value of <xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A> was updated so that subsequent calls to <xref:System.Windows.Forms.Form.ApplyAutoScaling%2A> did not progressively resize the form.  \n  \n While this mechanism was sufficient for most purposes, it suffered from the following limitations:  \n  \n-   Since the <xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A> property represents the baseline font size as integral values, rounding errors occur that become evident when a form is cycled through multiple resolutions.  \n  \n-   Automatic scaling was implemented in only the <xref:System.Windows.Forms.Form> class, not in the <xref:System.Windows.Forms.ContainerControl> class. As a result, user controls would scale correctly only when the user control was designed at the same resolution as the form, and it was placed in the form at design time.  \n  \n-   Forms and their child controls could only be concurrently designed by multiple developers if their machine resolutions were the same. Likewise it also made inheritance of a form dependent on the resolution associated with the parent form.  \n  \n-   It is not compatible with the newer layout managers introduced with the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0, such as <xref:System.Windows.Forms.FlowLayoutPanel> and <xref:System.Windows.Forms.TableLayoutPanel>.  \n  \n-   It did not support scaling based directly on the display resolution that is required for compatibility to the [!INCLUDE[compact](../../../includes/compact-md.md)].  \n  \n Although this mechanism is preserved in the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0 to maintain backward compatibility, it has been superseded by the more robust scaling mechanism described next. As a consequence, the <xref:System.Windows.Forms.Form.AutoScale%2A>, <xref:System.Windows.Forms.Form.ApplyAutoScaling%2A>, <xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A>, and certain <xref:System.Windows.Forms.Control.Scale%2A> overloads are marked as obsolete.  \n  \n> [!NOTE]\n>  You can safely delete references to these members when you upgrade your legacy code to the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0.  \n  \n## Current Support for Automatic Scaling  \n The [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0 surmounts previous limitations by introducing the following changes to the automatic scaling of Windows Forms:  \n  \n-   Base support for scaling has been moved to the <xref:System.Windows.Forms.ContainerControl> class so that forms, native composite controls and user controls all receive uniform scaling support. The new members <xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A>, <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A>, <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> and <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> have been added.  \n  \n-   The <xref:System.Windows.Forms.Control> class also has several new members that allow it to participate in scaling and to support mixed scaling on the same form. Specifically the <xref:System.Windows.Forms.Control.Scale%2A>, <xref:System.Windows.Forms.Control.ScaleChildren%2A>, and <xref:System.Windows.Forms.Control.GetScaledBounds%2A> members support scaling.  \n  \n-   Support for scaling based upon the screen resolution has been added to complement system font support, as defined by the <xref:System.Windows.Forms.AutoScaleMode> enumeration. This mode is compatible with automatic scaling supported by the [!INCLUDE[compact](../../../includes/compact-md.md)] enabling easier application migration.  \n  \n-   Compatibility with layout managers such as <xref:System.Windows.Forms.FlowLayoutPanel> and <xref:System.Windows.Forms.TableLayoutPanel> has been added to the implementation of automatic scaling.  \n  \n-   Scaling factors are now represented as floating point values, typically using the <xref:System.Drawing.SizeF> structure, so that rounding errors have been practically eliminated.  \n  \n> [!CAUTION]\n>  Arbitrary mixtures of DPI and font scaling modes are not supported. Although you may scale a user control using one mode (for example, DPI) and place it on a form using another mode (Font) with no issues, but mixing a base form in one mode and a derived form in another can lead to unexpected results.  \n  \n### Automatic Scaling in Action  \n Windows Forms now uses the following logic to automatically scale forms and their contents:  \n  \n1.  At design time, each <xref:System.Windows.Forms.ContainerControl> records the scaling mode and it current resolution in the <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> and <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A>, respectively.  \n  \n2.  At run time, the actual resolution is stored in the <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> property. The <xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A> property dynamically calculates the ratio between the run-time and design-time scaling resolution.  \n  \n3.  When the form loads, if the values of <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> and <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> are different, then the <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> method is called to scale the control and its children. This method suspends layout and calls the <xref:System.Windows.Forms.Control.Scale%2A> method to perform the actual scaling. Afterwards, the value of <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> is updated to avoid progressive scaling.  \n  \n4.  <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> is also automatically invoked in the following situations:  \n  \n    -   In response to the <xref:System.Windows.Forms.Control.OnFontChanged%2A> event if the scaling mode is <xref:System.Windows.Forms.AutoScaleMode>.  \n  \n    -   When the layout of the container control resumes and a change is detected in the <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> or <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> properties.  \n  \n    -   As implied above, when a parent <xref:System.Windows.Forms.ContainerControl> is being scaled. Each container control is responsible for scaling its children using its own scaling factors and not the one from its parent container.  \n  \n5.  Child controls can modify their scaling behavior through several means:  \n  \n    -   The <xref:System.Windows.Forms.Control.ScaleChildren%2A> property can be overridden to determine if their child controls should be scaled or not.  \n  \n    -   The <xref:System.Windows.Forms.Control.GetScaledBounds%2A> method can be overridden to adjust the bounds that the control is scaled to, but not the scaling logic.  \n  \n    -   The <xref:System.Windows.Forms.Control.ScaleControl%2A> method can be overridden to change the scaling logic for the current control.  \n  \n## See Also  \n <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A>   \n <xref:System.Windows.Forms.Control.Scale%2A>   \n <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A>   \n <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A>   \n [Rendering Controls with Visual Styles](../../../docs/framework/winforms/controls/rendering-controls-with-visual-styles.md)   \n [How to: Improve Performance by Avoiding Automatic Scaling](../../../docs/framework/winforms/advanced/how-to-improve-performance-by-avoiding-automatic-scaling.md)","nodes":[{"pos":[12,63],"content":"Automatic Scaling in Windows Forms | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Automatic Scaling in Windows Forms | Microsoft Docs","pos":[0,51]}]},{"pos":[507,541],"content":"Automatic Scaling in Windows Forms","linkify":"Automatic Scaling in Windows Forms","nodes":[{"content":"Automatic Scaling in Windows Forms","pos":[0,34]}]},{"content":"Automatic scaling enables a form and its controls, designed on one machine with a certain display resolution or system font, to be displayed appropriately on another machine with a different display resolution or system font.","pos":[542,767]},{"content":"It assures that the form and its controls will intelligently resize to be consistent with native windows and other applications on both the users' and other developers' machines.","pos":[768,946]},{"content":"The support of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> for automatic scaling and visual styles enables <ph id=\"ph2\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> applications to maintain a consistent look and feel when compared to native Windows applications on each user's machine.","pos":[947,1256],"source":" The support of the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] for automatic scaling and visual styles enables [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] applications to maintain a consistent look and feel when compared to native Windows applications on each user's machine."},{"content":"For the most part, automatic scaling works as expected in <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> version 2.0 and later.","pos":[1263,1404],"source":"For the most part, automatic scaling works as expected in [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0 and later."},{"content":"However, font scheme changes can be problematic.","pos":[1405,1453]},{"content":"To see an example of how to resolve this, see <bpt id=\"p1\">[</bpt>Scaling Windows Forms<ept id=\"p1\">](http://www.informit.com/guides/content.aspx?g=dotnet&amp;seqNum=488)</ept>.","pos":[1454,1589],"source":" To see an example of how to resolve this, see [Scaling Windows Forms](http://www.informit.com/guides/content.aspx?g=dotnet&seqNum=488)."},{"pos":[1598,1624],"content":"Need for Automatic Scaling","linkify":"Need for Automatic Scaling","nodes":[{"content":"Need for Automatic Scaling","pos":[0,26]}]},{"content":"Without automatic scaling, an application designed for one display resolution or font will either appear too small or too large when that resolution or font is changed.","pos":[1628,1796]},{"content":"For example, if the application is designed using Tahoma 9 point as a baseline, without adjustment it will appear too small if run on a machine where the system font is Tahoma 12 point.","pos":[1797,1982]},{"content":"Text elements, such as titles, menus, text box contents, and so on will render smaller than other applications.","pos":[1983,2094]},{"content":"Furthermore, the size of user interface (UI) elements that contain text, such as the title bar, menus, and many controls are dependent on the font used.","pos":[2095,2247]},{"content":"In this example, these elements will also appear relatively smaller.","pos":[2248,2316]},{"content":"An analogous situation occurs when an application is designed for a certain display resolution.","pos":[2323,2418]},{"content":"The most common display resolution is 96 dots per inch (DPI), but higher resolution displays supporting 120, 133, 170, and above are becoming more common.","pos":[2419,2573]},{"content":"Without adjustment, an application, especially a graphics-based one, designed for one resolution will appear either too large or too small when run at another resolution.","pos":[2574,2744]},{"content":"Automatic scaling seeks to ameliorate these problems by automatically resizing the form and its child controls according to the relative font size or display resolution.","pos":[2751,2920]},{"content":"The Windows operating system supports automatic scaling of dialog boxes using a relative unit of measurement called dialog units.","pos":[2921,3050]},{"content":"A dialog unit is based on the system font and its relationship to pixels can be determined though the Win32 SDK function <ph id=\"ph1\">`GetDialogBaseUnits`</ph>.","pos":[3051,3193],"source":" A dialog unit is based on the system font and its relationship to pixels can be determined though the Win32 SDK function `GetDialogBaseUnits`."},{"content":"When a user changes the theme used by Windows, all dialog boxes are automatically adjusted accordingly.","pos":[3194,3297]},{"content":"In addition,","pos":[3298,3310]},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> supports automatic scaling either according to the default system font or the display resolution.","pos":[3317,3479],"source":"The [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] supports automatic scaling either according to the default system font or the display resolution."},{"content":"Optionally, automatic scaling can be disabled in an application.","pos":[3480,3544]},{"pos":[3553,3591],"content":"Original Support for Automatic Scaling","linkify":"Original Support for Automatic Scaling","nodes":[{"content":"Original Support for Automatic Scaling","pos":[0,38]}]},{"content":"Versions 1.0 and 1.1 of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> supported automatic scaling in a straightforward manner that was dependent on the Windows default font used for the UI, represented by the Win32 SDK value <bpt id=\"p1\">**</bpt>DEFAULT_GUI_FONT<ept id=\"p1\">**</ept>.","pos":[3595,3860],"source":"Versions 1.0 and 1.1 of the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] supported automatic scaling in a straightforward manner that was dependent on the Windows default font used for the UI, represented by the Win32 SDK value **DEFAULT_GUI_FONT**."},{"content":"This font is typically only changed when the display resolution changes.","pos":[3861,3933]},{"content":"The following mechanism was used to implement automatic scaling:","pos":[3934,3998]},{"content":"At design time, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A&gt;</ph> property (which is now deprecated) was set to the height and width of the default system font on the developer's machine.","pos":[4008,4203],"source":"At design time, the <xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A> property (which is now deprecated) was set to the height and width of the default system font on the developer's machine."},{"content":"At runtime, the default system font of the user's machine was used to initialize the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form&gt;</ph> class.","pos":[4213,4397],"source":"At runtime, the default system font of the user's machine was used to initialize the <xref:System.Windows.Forms.Control.Font%2A> property of the <xref:System.Windows.Forms.Form> class."},{"content":"Before displaying the form, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.ApplyAutoScaling%2A&gt;</ph> method was called to scale the form.","pos":[4407,4528],"source":"Before displaying the form, the <xref:System.Windows.Forms.Form.ApplyAutoScaling%2A> method was called to scale the form."},{"content":"This method calculated the relative scale sizes from <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> then called the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph> method to actually scale the form and its children.","pos":[4529,4796],"source":" This method calculated the relative scale sizes from <xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A> and <xref:System.Windows.Forms.Control.Font%2A> then called the <xref:System.Windows.Forms.Control.Scale%2A> method to actually scale the form and its children."},{"content":"The value of <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A&gt;</ph> was updated so that subsequent calls to <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form.ApplyAutoScaling%2A&gt;</ph> did not progressively resize the form.","pos":[4806,5004],"source":"The value of <xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A> was updated so that subsequent calls to <xref:System.Windows.Forms.Form.ApplyAutoScaling%2A> did not progressively resize the form."},{"content":"While this mechanism was sufficient for most purposes, it suffered from the following limitations:","pos":[5011,5109]},{"content":"Since the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A&gt;</ph> property represents the baseline font size as integral values, rounding errors occur that become evident when a form is cycled through multiple resolutions.","pos":[5119,5339],"source":"Since the <xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A> property represents the baseline font size as integral values, rounding errors occur that become evident when a form is cycled through multiple resolutions."},{"content":"Automatic scaling was implemented in only the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form&gt;</ph> class, not in the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.ContainerControl&gt;</ph> class.","pos":[5349,5497],"source":"Automatic scaling was implemented in only the <xref:System.Windows.Forms.Form> class, not in the <xref:System.Windows.Forms.ContainerControl> class."},{"content":"As a result, user controls would scale correctly only when the user control was designed at the same resolution as the form, and it was placed in the form at design time.","pos":[5498,5668]},{"content":"Forms and their child controls could only be concurrently designed by multiple developers if their machine resolutions were the same.","pos":[5678,5811]},{"content":"Likewise it also made inheritance of a form dependent on the resolution associated with the parent form.","pos":[5812,5916]},{"pos":[5926,6173],"content":"It is not compatible with the newer layout managers introduced with the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> version 2.0, such as <ph id=\"ph2\">&lt;xref:System.Windows.Forms.FlowLayoutPanel&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Forms.TableLayoutPanel&gt;</ph>.","source":"It is not compatible with the newer layout managers introduced with the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0, such as <xref:System.Windows.Forms.FlowLayoutPanel> and <xref:System.Windows.Forms.TableLayoutPanel>."},{"pos":[6183,6346],"content":"It did not support scaling based directly on the display resolution that is required for compatibility to the <ph id=\"ph1\">[!INCLUDE[compact](../../../includes/compact-md.md)]</ph>.","source":"It did not support scaling based directly on the display resolution that is required for compatibility to the [!INCLUDE[compact](../../../includes/compact-md.md)]."},{"content":"Although this mechanism is preserved in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> version 2.0 to maintain backward compatibility, it has been superseded by the more robust scaling mechanism described next.","pos":[6353,6581],"source":"Although this mechanism is preserved in the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0 to maintain backward compatibility, it has been superseded by the more robust scaling mechanism described next."},{"content":"As a consequence, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.AutoScale%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form.ApplyAutoScaling%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A&gt;</ph>, and certain <ph id=\"ph4\">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph> overloads are marked as obsolete.","pos":[6582,6850],"source":" As a consequence, the <xref:System.Windows.Forms.Form.AutoScale%2A>, <xref:System.Windows.Forms.Form.ApplyAutoScaling%2A>, <xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A>, and certain <xref:System.Windows.Forms.Control.Scale%2A> overloads are marked as obsolete."},{"pos":[6858,7033],"content":"[!NOTE]\n You can safely delete references to these members when you upgrade your legacy code to the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0.","leadings":["","> "],"nodes":[{"content":"You can safely delete references to these members when you upgrade your legacy code to the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> version 2.0.","pos":[9,173],"source":" You can safely delete references to these members when you upgrade your legacy code to the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0."}]},{"pos":[7042,7079],"content":"Current Support for Automatic Scaling","linkify":"Current Support for Automatic Scaling","nodes":[{"content":"Current Support for Automatic Scaling","pos":[0,37]}]},{"pos":[7083,7270],"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> version 2.0 surmounts previous limitations by introducing the following changes to the automatic scaling of Windows Forms:","source":"The [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] version 2.0 surmounts previous limitations by introducing the following changes to the automatic scaling of Windows Forms:"},{"content":"Base support for scaling has been moved to the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl&gt;</ph> class so that forms, native composite controls and user controls all receive uniform scaling support.","pos":[7280,7473],"source":"Base support for scaling has been moved to the <xref:System.Windows.Forms.ContainerControl> class so that forms, native composite controls and user controls all receive uniform scaling support."},{"content":"The new members <ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A&gt;</ph> have been added.","pos":[7474,7771],"source":" The new members <xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A>, <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A>, <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> and <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> have been added."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control&gt;</ph> class also has several new members that allow it to participate in scaling and to support mixed scaling on the same form.","pos":[7781,7942],"source":"The <xref:System.Windows.Forms.Control> class also has several new members that allow it to participate in scaling and to support mixed scaling on the same form."},{"content":"Specifically the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.GetScaledBounds%2A&gt;</ph> members support scaling.","pos":[7943,8143],"source":" Specifically the <xref:System.Windows.Forms.Control.Scale%2A>, <xref:System.Windows.Forms.Control.ScaleChildren%2A>, and <xref:System.Windows.Forms.Control.GetScaledBounds%2A> members support scaling."},{"content":"Support for scaling based upon the screen resolution has been added to complement system font support, as defined by the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.AutoScaleMode&gt;</ph> enumeration.","pos":[8153,8328],"source":"Support for scaling based upon the screen resolution has been added to complement system font support, as defined by the <xref:System.Windows.Forms.AutoScaleMode> enumeration."},{"content":"This mode is compatible with automatic scaling supported by the <ph id=\"ph1\">[!INCLUDE[compact](../../../includes/compact-md.md)]</ph> enabling easier application migration.","pos":[8329,8484],"source":" This mode is compatible with automatic scaling supported by the [!INCLUDE[compact](../../../includes/compact-md.md)] enabling easier application migration."},{"content":"Compatibility with layout managers such as <ph id=\"ph1\">&lt;xref:System.Windows.Forms.FlowLayoutPanel&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Forms.TableLayoutPanel&gt;</ph> has been added to the implementation of automatic scaling.","pos":[8494,8688],"source":"Compatibility with layout managers such as <xref:System.Windows.Forms.FlowLayoutPanel> and <xref:System.Windows.Forms.TableLayoutPanel> has been added to the implementation of automatic scaling."},{"content":"Scaling factors are now represented as floating point values, typically using the <ph id=\"ph1\">&lt;xref:System.Drawing.SizeF&gt;</ph> structure, so that rounding errors have been practically eliminated.","pos":[8698,8876],"source":"Scaling factors are now represented as floating point values, typically using the <xref:System.Drawing.SizeF> structure, so that rounding errors have been practically eliminated."},{"pos":[8884,9199],"content":"[!CAUTION]\n Arbitrary mixtures of DPI and font scaling modes are not supported. Although you may scale a user control using one mode (for example, DPI) and place it on a form using another mode (Font) with no issues, but mixing a base form in one mode and a derived form in another can lead to unexpected results.","leadings":["","> "],"nodes":[{"content":" Arbitrary mixtures of DPI and font scaling modes are not supported. Although you may scale a user control using one mode (for example, DPI) and place it on a form using another mode (Font) with no issues, but mixing a base form in one mode and a derived form in another can lead to unexpected results.","pos":[11,313],"nodes":[{"content":"Arbitrary mixtures of DPI and font scaling modes are not supported.","pos":[1,68]},{"content":"Although you may scale a user control using one mode (for example, DPI) and place it on a form using another mode (Font) with no issues, but mixing a base form in one mode and a derived form in another can lead to unexpected results.","pos":[69,302]}]}]},{"pos":[9209,9236],"content":"Automatic Scaling in Action","linkify":"Automatic Scaling in Action","nodes":[{"content":"Automatic Scaling in Action","pos":[0,27]}]},{"content":"Windows Forms now uses the following logic to automatically scale forms and their contents:","pos":[9240,9331]},{"content":"At design time, each <ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl&gt;</ph> records the scaling mode and it current resolution in the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A&gt;</ph>, respectively.","pos":[9341,9613],"source":"At design time, each <xref:System.Windows.Forms.ContainerControl> records the scaling mode and it current resolution in the <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> and <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A>, respectively."},{"content":"At run time, the actual resolution is stored in the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A&gt;</ph> property.","pos":[9623,9759],"source":"At run time, the actual resolution is stored in the <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A&gt;</ph> property dynamically calculates the ratio between the run-time and design-time scaling resolution.","pos":[9760,9926],"source":" The <xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A> property dynamically calculates the ratio between the run-time and design-time scaling resolution."},{"content":"When the form loads, if the values of <ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A&gt;</ph> are different, then the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A&gt;</ph> method is called to scale the control and its children.","pos":[9936,10265],"source":"When the form loads, if the values of <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> and <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> are different, then the <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> method is called to scale the control and its children."},{"content":"This method suspends layout and calls the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph> method to perform the actual scaling.","pos":[10266,10390],"source":" This method suspends layout and calls the <xref:System.Windows.Forms.Control.Scale%2A> method to perform the actual scaling."},{"content":"Afterwards, the value of <ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A&gt;</ph> is updated to avoid progressive scaling.","pos":[10391,10524],"source":" Afterwards, the value of <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> is updated to avoid progressive scaling."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A&gt;</ph> is also automatically invoked in the following situations:","pos":[10534,10657],"source":"<xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> is also automatically invoked in the following situations:"},{"content":"In response to the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnFontChanged%2A&gt;</ph> event if the scaling mode is <ph id=\"ph2\">&lt;xref:System.Windows.Forms.AutoScaleMode&gt;</ph>.","pos":[10671,10814],"source":"In response to the <xref:System.Windows.Forms.Control.OnFontChanged%2A> event if the scaling mode is <xref:System.Windows.Forms.AutoScaleMode>."},{"content":"When the layout of the container control resumes and a change is detected in the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A&gt;</ph> properties.","pos":[10828,11053],"source":"When the layout of the container control resumes and a change is detected in the <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> or <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> properties."},{"content":"As implied above, when a parent <ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl&gt;</ph> is being scaled.","pos":[11067,11160],"source":"As implied above, when a parent <xref:System.Windows.Forms.ContainerControl> is being scaled."},{"content":"Each container control is responsible for scaling its children using its own scaling factors and not the one from its parent container.","pos":[11161,11296]},{"content":"Child controls can modify their scaling behavior through several means:","pos":[11306,11377]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> property can be overridden to determine if their child controls should be scaled or not.","pos":[11391,11536],"source":"The <xref:System.Windows.Forms.Control.ScaleChildren%2A> property can be overridden to determine if their child controls should be scaled or not."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.GetScaledBounds%2A&gt;</ph> method can be overridden to adjust the bounds that the control is scaled to, but not the scaling logic.","pos":[11550,11712],"source":"The <xref:System.Windows.Forms.Control.GetScaledBounds%2A> method can be overridden to adjust the bounds that the control is scaled to, but not the scaling logic."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> method can be overridden to change the scaling logic for the current control.","pos":[11726,11859],"source":"The <xref:System.Windows.Forms.Control.ScaleControl%2A> method can be overridden to change the scaling logic for the current control."},{"pos":[11868,11876],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A&gt;</ph>","pos":[11880,11941],"source":"<xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph>","pos":[11946,11990],"source":" <xref:System.Windows.Forms.Control.Scale%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A&gt;</ph>","pos":[11995,12059],"source":" <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A&gt;</ph>","pos":[12064,12131],"source":" <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> "},{"content":"<bpt id=\"p1\"> [</bpt>Rendering Controls with Visual Styles<ept id=\"p1\">](../../../docs/framework/winforms/controls/rendering-controls-with-visual-styles.md)</ept><ph id=\"ph1\"> </ph>","pos":[12135,12260],"source":" [Rendering Controls with Visual Styles](../../../docs/framework/winforms/controls/rendering-controls-with-visual-styles.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Improve Performance by Avoiding Automatic Scaling<ept id=\"p1\">](../../../docs/framework/winforms/advanced/how-to-improve-performance-by-avoiding-automatic-scaling.md)</ept>","pos":[12263,12426],"source":" [How to: Improve Performance by Avoiding Automatic Scaling](../../../docs/framework/winforms/advanced/how-to-improve-performance-by-avoiding-automatic-scaling.md)"}]}