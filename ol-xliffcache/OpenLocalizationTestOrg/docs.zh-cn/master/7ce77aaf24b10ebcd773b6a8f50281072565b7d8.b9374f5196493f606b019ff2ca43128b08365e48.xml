{"content":"---\ntitle: \"How to: Chain Axis Method Calls (LINQ to XML) (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: e4e22942-39bd-460f-b3c0-9f09e53d3aa9\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# How to: Chain Axis Method Calls (LINQ to XML) (Visual Basic)\nA common pattern that you will use in your code is to call an axis method, then call one of the extension method axes.  \n  \n There are two axes with the name of `Elements` that return a collection of elements: the <xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName> method and the <xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName> method. You can combine these two axes to find all elements of a specified name at a given depth in the tree.  \n  \n## Example  \n This example uses <xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName> and <xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName> to find all `Name` elements in all `Address` elements in all `PurchaseOrder` elements.  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md).  \n  \n```vb  \nDim purchaseOrders As XElement = XElement.Load(\"PurchaseOrders.xml\")  \nDim names As IEnumerable(Of XElement) = _  \n    From el In purchaseOrders.<PurchaseOrder>.<Address>.<Name> _  \n    Select el  \nFor Each e As XElement In names  \n    Console.WriteLine(e)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \n<Name>Ellen Adams</Name>  \n<Name>Tai Yee</Name>  \n<Name>Cristian Osorio</Name>  \n<Name>Cristian Osorio</Name>  \n<Name>Jessica Arnold</Name>  \n<Name>Jessica Arnold</Name>  \n```  \n  \n This works because one of the implementations of the `Elements` axis is as an extension method on <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XContainer>. <xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, so you can call the <xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName> method on the results of a call to the <xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName> method.  \n  \n## Example  \n Sometimes you want to retrieve all elements at a particular element depth when there might or might not be intervening ancestors. For example, in the following document, you might want to retrieve all the `ConfigParameter` elements that are children of the `Customer` element, but not the `ConfigParameter` that is a child of the `Root` element.  \n  \n```xml  \n<Root>  \n  <ConfigParameter>RootConfigParameter</ConfigParameter>  \n  <Customer>  \n    <Name>Frank</Name>  \n    <Config>  \n      <ConfigParameter>FirstConfigParameter</ConfigParameter>  \n    </Config>  \n  </Customer>  \n  <Customer>  \n    <Name>Bob</Name>  \n    <!--This customer doesn't have a Config element-->  \n  </Customer>  \n  <Customer>  \n    <Name>Bill</Name>  \n    <Config>  \n      <ConfigParameter>SecondConfigParameter</ConfigParameter>  \n    </Config>  \n  </Customer>  \n</Root>  \n```  \n  \n To do this, you can use the <xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName> axis, as follows:  \n  \n```vb  \nDim root As XElement = XElement.Load(\"Irregular.xml\")  \nDim configParameters As IEnumerable(Of XElement) = _  \n    root.<Customer>.<Config>.<ConfigParameter>  \nFor Each cp As XElement In configParameters  \n    Console.WriteLine(cp)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \n<ConfigParameter>FirstConfigParameter</ConfigParameter>  \n<ConfigParameter>SecondConfigParameter</ConfigParameter>  \n```  \n  \n## Example  \n The following example shows the same technique for XML that is in a namespace. For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders in a Namespace](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md).  \n  \n```vb  \nImports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim purchaseOrders As XElement = XElement.Load(\"PurchaseOrdersInNamespace.xml\")  \n        Dim names As IEnumerable(Of XElement) = _  \n            From el In purchaseOrders.<aw:PurchaseOrder>.<aw:Address>.<aw:Name> _  \n            Select el  \n        For Each e As XElement In names  \n            Console.WriteLine(e)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n<aw:Name xmlns:aw=\"http://www.adventure-works.com\">Ellen Adams</aw:Name>  \n<aw:Name xmlns:aw=\"http://www.adventure-works.com\">Tai Yee</aw:Name>  \n<aw:Name xmlns:aw=\"http://www.adventure-works.com\">Cristian Osorio</aw:Name>  \n<aw:Name xmlns:aw=\"http://www.adventure-works.com\">Cristian Osorio</aw:Name>  \n<aw:Name xmlns:aw=\"http://www.adventure-works.com\">Jessica Arnold</aw:Name>  \n<aw:Name xmlns:aw=\"http://www.adventure-works.com\">Jessica Arnold</aw:Name>  \n```  \n  \n## See Also  \n [LINQ to XML Axes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)","nodes":[{"pos":[12,89],"content":"How to: Chain Axis Method Calls (LINQ to XML) (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Chain Axis Method Calls (LINQ to XML) (Visual Basic) | Microsoft Docs","pos":[0,77]}]},{"pos":[396,456],"content":"How to: Chain Axis Method Calls (LINQ to XML) (Visual Basic)","linkify":"How to: Chain Axis Method Calls (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Chain Axis Method Calls (LINQ to XML) (Visual Basic)","pos":[0,60]}]},{"content":"A common pattern that you will use in your code is to call an axis method, then call one of the extension method axes.","pos":[457,575]},{"content":"There are two axes with the name of <ph id=\"ph1\">`Elements`</ph> that return a collection of elements: the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName&gt;</ph> method and the <ph id=\"ph3\">&lt;xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName&gt;</ph> method.","pos":[582,835],"source":"There are two axes with the name of `Elements` that return a collection of elements: the <xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName> method and the <xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName> method."},{"content":"You can combine these two axes to find all elements of a specified name at a given depth in the tree.","pos":[836,937]},{"pos":[946,953],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[957,1207],"content":"This example uses <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName&gt;</ph> to find all <ph id=\"ph3\">`Name`</ph> elements in all <ph id=\"ph4\">`Address`</ph> elements in all <ph id=\"ph5\">`PurchaseOrder`</ph> elements.","source":"This example uses <xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName> and <xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName> to find all `Name` elements in all `Address` elements in all `PurchaseOrder` elements."},{"pos":[1214,1432],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)."},{"content":"This example produces the following output:","pos":[1722,1765]},{"content":"This works because one of the implementations of the <ph id=\"ph1\">`Elements`</ph> axis is as an extension method on <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph>.","pos":[1959,2144],"source":"This works because one of the implementations of the `Elements` axis is as an extension method on <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XContainer>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> derives from <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph>, so you can call the <ph id=\"ph3\">&lt;xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName&gt;</ph> method on the results of a call to the <ph id=\"ph4\">&lt;xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName&gt;</ph> method.","pos":[2145,2433],"source":"<xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, so you can call the <xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName> method on the results of a call to the <xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName> method."},{"pos":[2442,2449],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Sometimes you want to retrieve all elements at a particular element depth when there might or might not be intervening ancestors.","pos":[2453,2582]},{"content":"For example, in the following document, you might want to retrieve all the <ph id=\"ph1\">`ConfigParameter`</ph> elements that are children of the <ph id=\"ph2\">`Customer`</ph> element, but not the <ph id=\"ph3\">`ConfigParameter`</ph> that is a child of the <ph id=\"ph4\">`Root`</ph> element.","pos":[2583,2798],"source":" For example, in the following document, you might want to retrieve all the `ConfigParameter` elements that are children of the `Customer` element, but not the `ConfigParameter` that is a child of the `Root` element."},{"content":"To do this, you can use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName&gt;</ph> axis, as follows:","pos":[3314,3430],"source":"To do this, you can use the <xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName> axis, as follows:"},{"content":"This example produces the following output:","pos":[3695,3738]},{"pos":[3879,3886],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same technique for XML that is in a namespace.","pos":[3890,3968]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[3969,4129],"source":" For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[4136,4358],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders in a Namespace<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders in a Namespace](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md)."},{"content":"This example produces the following output:","pos":[4842,4885]},{"pos":[5369,5377],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5381,5492],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML Axes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept>","source":"[LINQ to XML Axes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)"}]}