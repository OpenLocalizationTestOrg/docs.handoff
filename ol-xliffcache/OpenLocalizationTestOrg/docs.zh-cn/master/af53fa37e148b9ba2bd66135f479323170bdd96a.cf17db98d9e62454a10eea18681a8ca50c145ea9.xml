{"content":"---\ntitle: \"&amp; Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.&\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"And (&) operator\"\n  - \"ampersand operator (&)\"\n  - \"& operator\"\n  - \"concatenation operators, syntax\"\n  - \"strings [Visual Basic], concatenating\"\nms.assetid: fefc3d00-cbf1-475c-8c5e-6fb213b3f85a\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &amp; Operator (Visual Basic)\nGenerates a string concatenation of two expressions.  \n  \n## Syntax  \n  \n```  \n  \nresult = expression1 & expression2  \n```  \n  \n## Parts  \n `result`  \n Required. Any `String` or `Object` variable.  \n  \n `expression1`  \n Required. Any expression with a data type that widens to `String`.  \n  \n `expression2`  \n Required. Any expression with a data type that widens to `String`.  \n  \n## Remarks  \n If the data type of `expression1` or `expression2` is not `String` but widens to `String`, it is converted to `String`. If either of the data types does not widen to `String`, the compiler generates an error.  \n  \n The data type of `result` is `String`. If one or both expressions evaluate to [Nothing](../../../visual-basic/language-reference/nothing.md) or have a value of <xref:System.DBNull.Value?displayProperty=fullName>, they are treated as a string with a value of \"\".  \n  \n> [!NOTE]\n>  The `&` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n> [!NOTE]\n>  The ampersand (&) character can also be used to identify variables as type `Long`. For more information, see [Type Characters](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md).  \n  \n## Example  \n This example uses the `&` operator to force string concatenation. The result is a string value representing the concatenation of the two string operands.  \n  \n [!code-vb[VbVbalrOperators#2](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/concatenation-operator_1.vb)]  \n  \n## See Also  \n [&= Operator](../../../visual-basic/language-reference/operators/and-assignment-operator.md)   \n [Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Concatenation Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)","nodes":[{"pos":[4,709],"embed":true,"restype":"x-metadata","content":"title: \"&amp; Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.&\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"And (&) operator\"\n  - \"ampersand operator (&)\"\n  - \"& operator\"\n  - \"concatenation operators, syntax\"\n  - \"strings [Visual Basic], concatenating\"\nms.assetid: fefc3d00-cbf1-475c-8c5e-6fb213b3f85a\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"&amp; Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"&amp; Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph> Operator (Visual Basic) | Microsoft Docs","pos":[0,46],"source":"&amp; Operator (Visual Basic) | Microsoft Docs"}]}],"path":["title"]}],"yml":true},{"pos":[716,745],"content":"&amp; Operator (Visual Basic)","linkify":"&amp; Operator (Visual Basic)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph> Operator (Visual Basic)","pos":[0,29],"source":"&amp; Operator (Visual Basic)"}]},{"content":"Generates a string concatenation of two expressions.","pos":[746,798]},{"pos":[807,813],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[877,882],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[898,907]},{"content":"Any <ph id=\"ph1\">`String`</ph> or <ph id=\"ph2\">`Object`</ph> variable.","pos":[908,942],"source":" Any `String` or `Object` variable."},{"content":"Required.","pos":[966,975]},{"content":"Any expression with a data type that widens to <ph id=\"ph1\">`String`</ph>.","pos":[976,1032],"source":" Any expression with a data type that widens to `String`."},{"content":"Required.","pos":[1056,1065]},{"content":"Any expression with a data type that widens to <ph id=\"ph1\">`String`</ph>.","pos":[1066,1122],"source":" Any expression with a data type that widens to `String`."},{"pos":[1131,1138],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the data type of <ph id=\"ph1\">`expression1`</ph> or <ph id=\"ph2\">`expression2`</ph> is not <ph id=\"ph3\">`String`</ph> but widens to <ph id=\"ph4\">`String`</ph>, it is converted to <ph id=\"ph5\">`String`</ph>.","pos":[1142,1261],"source":"If the data type of `expression1` or `expression2` is not `String` but widens to `String`, it is converted to `String`."},{"content":"If either of the data types does not widen to <ph id=\"ph1\">`String`</ph>, the compiler generates an error.","pos":[1262,1350],"source":" If either of the data types does not widen to `String`, the compiler generates an error."},{"content":"The data type of <ph id=\"ph1\">`result`</ph> is <ph id=\"ph2\">`String`</ph>.","pos":[1357,1395],"source":"The data type of `result` is `String`."},{"content":"If one or both expressions evaluate to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept> or have a value of <ph id=\"ph1\">&lt;xref:System.DBNull.Value?displayProperty=fullName&gt;</ph>, they are treated as a string with a value of \"\".","pos":[1396,1618],"source":" If one or both expressions evaluate to [Nothing](../../../visual-basic/language-reference/nothing.md) or have a value of <xref:System.DBNull.Value?displayProperty=fullName>, they are treated as a string with a value of \"\"."},{"pos":[1626,2046],"content":"[!NOTE]\n The `&` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":"The `&` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[9,418],"nodes":[{"content":"The <ph id=\"ph1\">`&amp;`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[0,158],"source":"The `&` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[159,267]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[268,409],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[2054,2281],"content":"[!NOTE]\n The ampersand (&) character can also be used to identify variables as type `Long`. For more information, see [Type Characters](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md).","leadings":["","> "],"nodes":[{"content":"The ampersand (&) character can also be used to identify variables as type `Long`. For more information, see [Type Characters](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md).","pos":[9,225],"nodes":[{"content":"The ampersand (&amp;) character can also be used to identify variables as type <ph id=\"ph1\">`Long`</ph>.","pos":[0,82],"source":"The ampersand (&) character can also be used to identify variables as type `Long`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Type Characters<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)</ept>.","pos":[83,216],"source":" For more information, see [Type Characters](../../../visual-basic/programming-guide/language-features/data-types/type-characters.md)."}]}]},{"pos":[2290,2297],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses the <ph id=\"ph1\">`&amp;`</ph> operator to force string concatenation.","pos":[2301,2366],"source":"This example uses the `&` operator to force string concatenation."},{"content":"The result is a string value representing the concatenation of the two string operands.","pos":[2367,2454]},{"pos":[2604,2612],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>&amp;= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/and-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2616,2709],"source":"[&= Operator](../../../visual-basic/language-reference/operators/and-assignment-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[2713,2818],"source":"[Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[2822,2935],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[2939,3064],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept>","pos":[3068,3221],"source":"[Concatenation Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)"}]}