{"content":"---\ntitle: \"COM Interop Sample: COM Client and .NET Server\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"interoperation with unmanaged code, samples\"\n  - \"COM interop, samples\"\nms.assetid: a219cb2c-9fa2-4c90-9b26-939e0788f178\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# COM Interop Sample: COM Client and .NET Server\nThis sample demonstrates the interoperation of a [COM Client](#cpconcominteropsamplecomclientnetserveranchor1) and a [.NET Server](#cpconcominteropsamplecomclientnetserveranchor2) that performs mortgage calculations. In this example, the client creates and calls an instance of the managed `Loan` class, passes four arguments (one of those four being equal to zero) to the instance, and displays the computations. Code examples from this sample appear throughout this section.  \n  \n<a name=\"cpconcominteropsamplecomclientnetserveranchor1\"></a>   \n## COM Client  \n  \n```cpp  \n// ConLoan.cpp : Defines the entry point for the console application.  \n#include \"stdafx.h\"  \n#import \"..\\LoanLib\\LoanLib.tlb\" raw_interfaces_only  \nusing namespace LoanLib;  \n  \nint main(int argc, char* argv[])  \n{  \n    HRESULT hr = CoInitialize(NULL);  \n  \n    ILoanPtr pILoan(__uuidof(Loan));  \n  \n    if (argc < 5)   \n    {  \n        printf(\"Usage: ConLoan Balance Rate Term Payment\\n\");  \n        printf(\"    Either Balance, Rate, Term, or Payment must be 0\\n\");  \n        return -1;  \n    }  \n  \n    double openingBalance = atof(argv[1]);  \n    double rate = atof(argv[2])/100.0;  \n    short  term = atoi(argv[3]);  \n    double payment = atof(argv[4]);  \n  \n    pILoan->put_OpeningBalance(openingBalance);  \n    pILoan->put_Rate(rate);  \n    pILoan->put_Term(term);  \n    pILoan->put_Payment(payment);  \n  \n    if (openingBalance == 0.00)   \n         pILoan->ComputeOpeningBalance(&openingBalance);  \n    if (rate == 0.00) pILoan->ComputeRate(&rate);  \n    if (term == 0) pILoan->ComputeTerm(&term);  \n    if (payment == 0.00) pILoan->ComputePayment(&payment);  \n  \n    printf(\"Balance = %.2f\\n\", openingBalance);  \n    printf(\"Rate    = %.1f%%\\n\", rate*100);  \n    printf(\"Term    = %.2i\\n\", term);  \n    printf(\"Payment = %.2f\\n\", payment);  \n  \n    VARIANT_BOOL MorePmts;  \n    double Balance = 0.0;  \n    double Principal = 0.0;  \n    double Interest = 0.0;  \n  \n    printf(\"%4s%10s%12s%10s%12s\\n\", \"Nbr\", \"Payment\", \"Principal\", \"Interest\", \"Balance\");  \n    printf(\"%4s%10s%12s%10s%12s\\n\", \"---\", \"-------\", \"---------\",   \n\"--------\", \"-------\");  \n  \n    pILoan->GetFirstPmtDistribution(payment, &Balance, &Principal, &Interest, &MorePmts);  \n  \n    for (short PmtNbr = 1; MorePmts; PmtNbr++)   \n    {  \n        printf(\"%4i%10.2f%12.2f%10.2f%12.2f\\n\",  \n        PmtNbr, payment, Principal, Interest, Balance);  \n  \n        pILoan->GetNextPmtDistribution(payment, &Balance, &Principal, &Interest, &MorePmts);   \n    }  \n  \n    CoUninitialize();  \n    return 0;  \n}  \n```  \n  \n<a name=\"cpconcominteropsamplecomclientnetserveranchor2\"></a>   \n## .NET Server  \n  \n```vb  \nImports System  \nImports System.Reflection  \n  \n<Assembly: AssemblyKeyFile(\"sample.snk\")>  \nNamespace LoanLib      \n  \n    Public Interface ILoan          \n        Property OpeningBalance() As Double  \n        Property Rate() As Double         \n        Property Payment() As Double         \n        Property Term() As Short          \n        Property RiskRating() As String  \n        Function ComputePayment() As Double  \n        Function ComputeOpeningBalance() As Double  \n        Function ComputeRate() As Double  \n        Function ComputeTerm() As Short  \n        Function GetFirstPmtDistribution(PmtAmt As Double, _  \n           ByRef Balance As Double, ByRef PrinPortion As Double, _  \n           ByRef IntPortion As Double) As Boolean  \n        Function GetNextPmtDistribution(PmtAmt As Double, _  \n           ByRef Balance As Double, ByRef PrinPortion As Double, _  \n           ByRef IntPortion As Double) As Boolean  \n    End Interface      \n  \n    Public Class Loan  \n        Implements ILoan  \n        Private m_openingBalance As Double  \n        Private m_rate As Double  \n        Private m_payment As Double  \n        Private m_term As Short  \n        Private m_riskRating As String   \n  \n        Public Property OpeningBalance() As Double _  \n        Implements ILoan.OpeningBalance  \n  \n            Get  \n                Return m_openingBalance  \n            End Get  \n            Set  \n                m_openingBalance = value  \n            End Set  \n        End Property   \n  \n        Public Property Rate() As Double _  \n        Implements ILoan.Rate  \n  \n            Get  \n                Return m_rate  \n            End Get  \n            Set  \n                m_rate = value  \n            End Set  \n        End Property   \n  \n        Public Property Payment() As Double _  \n        Implements ILoan.Payment  \n  \n            Get  \n                Return m_payment  \n            End Get  \n            Set  \n                m_payment = value  \n            End Set  \n        End Property   \n  \n        Public Property Term() As Short _  \n        Implements ILoan.Term  \n  \n            Get  \n                Return m_term  \n            End Get  \n            Set  \n                m_term = value  \n            End Set  \n        End Property   \n  \n        Public Property RiskRating() As String _  \n        Implements ILoan.RiskRating  \n  \n            Get  \n                Return m_riskRating  \n            End Get  \n            Set  \n                m_riskRating = value  \n            End Set  \n        End Property  \n  \n        Public Function ComputePayment() As Double _  \n        Implements ILoan.ComputePayment  \n  \n            Payment = Util.Round(OpeningBalance *(Rate / _  \n               (1 - Math.Pow(1 + Rate, - Term))), 2)  \n            Return Payment  \n        End Function          \n  \n        Public Function ComputeOpeningBalance() As Double _  \n        Implements ILoan.ComputeOpeningBalance  \n  \n            OpeningBalance = Util.Round(Payment /(Rate / _  \n               (1 - Math.Pow(1 + Rate, - Term))), 2)  \n            Return OpeningBalance  \n        End Function          \n  \n        Public Function ComputeRate() As Double _  \n        Implements ILoan.ComputeRate  \n  \n            Dim DesiredPayment As Double = Payment  \n  \n            For m_rate = 0.001 To 28.0 - 0.001 Step 0.001  \n                Payment = Util.Round(OpeningBalance *(Rate / _  \n                   (1 - Math.Pow(1 + Rate, - Term))), 2)  \n  \n                If Payment >= DesiredPayment Then  \n                    Exit For  \n                End If  \n            Next  \n            Return Rate  \n        End Function          \n  \n        Public Function ComputeTerm() As Short _  \n        Implements ILoan.ComputeTerm  \n  \n            Dim DesiredPayment As Double = Payment  \n  \n            For m_term = 1 To 479  \n                Payment = Util.Round(OpeningBalance *(Rate / _  \n                   (1 - Math.Pow(1 + Rate, - Term))), 2)  \n  \n                If Payment <= DesiredPayment Then  \n                    Exit For  \n                End If  \n            Next  \n            Return Term  \n        End Function          \n  \n        Public Function GetFirstPmtDistribution(PmtAmt As Double, _  \n        ByRef Balance As Double, ByRef PrinPortion As Double, _  \n        ByRef IntPortion As Double) As Boolean _  \n        Implements ILoan.GetFirstPmtDistribution  \n  \n            Balance = OpeningBalance  \n            Return GetNextPmtDistribution(PmtAmt, Balance, PrinPortion, _  \n               IntPortion)  \n        End Function          \n  \n        Public Function GetNextPmtDistribution(PmtAmt As Double, _  \n        ByRef Balance As Double, ByRef PrinPortion As Double, _  \n        ByRef IntPortion As Double) As Boolean _  \n        Implements ILoan.GetNextPmtDistribution  \n  \n            IntPortion = Util.Round(Balance * Rate, 2)  \n            PrinPortion = Util.Round(PmtAmt - IntPortion, 2)  \n            Balance = Util.Round(Balance - PrinPortion, 2)  \n  \n            If Balance <= 0.0 Then  \n                Return False  \n            End If   \n            Return True  \n        End Function  \n    End Class      \n  \n    Friend Class Util  \n  \n        Public Shared Function Round(value As Double, digits As Short) _  \n                                      As Double  \n            Dim factor As Double = Math.Pow(10, digits)  \n            Return Math.Round((value * factor)) / factor  \n        End Function  \n  \n    End Class  \n  \nEnd Namespace  \n```  \n  \n```csharp  \nusing System;  \nusing System.Reflection;  \n  \n[assembly:AssemblyKeyFile(\"sample.snk\")]  \nnamespace LoanLib {  \n  \n    public interface ILoan {  \n        double OpeningBalance{get; set;}  \n        double Rate{get; set;}  \n        double Payment{get; set;}     \n        short  Term{get; set;}  \n        String RiskRating{get; set;}  \n  \n        double ComputePayment();  \n        double ComputeOpeningBalance();  \n        double ComputeRate();  \n        short ComputeTerm();  \n        bool GetFirstPmtDistribution(double PmtAmt, ref double Balance,  \n            out double PrinPortion, out double IntPortion);  \n        bool GetNextPmtDistribution(double PmtAmt, ref double Balance,  \n            out double PrinPortion, out double IntPortion);  \n    }  \n  \n    public class Loan : ILoan {  \n        private double openingBalance;  \n        private double rate;  \n        private double payment;  \n        private short  term;  \n        private String riskRating;        \n  \n        public double OpeningBalance {  \n            get { return openingBalance; }  \n            set { openingBalance = value; }  \n        }  \n  \n        public double Rate {  \n            get { return rate; }  \n            set { rate = value; }  \n        }  \n  \n        public double Payment {  \n            get { return payment; }  \n            set { payment = value; }  \n        }  \n  \n        public short Term {  \n            get { return term; }  \n            set { term = value; }  \n        }  \n  \n        public String RiskRating {  \n            get { return riskRating; }  \n            set { riskRating = value; }  \n        }  \n  \n        public double ComputePayment() {  \n             Payment = Util.Round(OpeningBalance * (Rate / (1 –   \n                        Math.Pow((1 + Rate), -Term))), 2);  \n             return Payment;  \n        }  \n  \n        public double ComputeOpeningBalance() {  \n            OpeningBalance = Util.Round(Payment / (Rate / (1 - Math.Pow((1   \n                              + Rate), -Term))), 2);  \n             return OpeningBalance;  \n        }  \n  \n        public double ComputeRate() {  \n            double DesiredPayment = Payment;  \n  \n            for (Rate = 0.001; Rate < 28.0; Rate += 0.001) {  \n                Payment = Util.Round(OpeningBalance * (Rate / (1 –   \n                           Math.Pow((1 + Rate), -Term))), 2);  \n  \n                if (Payment >= DesiredPayment)  \n                    break;  \n            }  \n            return Rate;     \n        }  \n  \n        public short ComputeTerm() {  \n            double DesiredPayment = Payment;  \n  \n            for (Term = 1; Term < 480 ; Term ++) {  \n                Payment = Util.Round(OpeningBalance * (Rate / (1 –   \n                           Math.Pow((1 + Rate), -Term))),2);  \n  \n                if (Payment <= DesiredPayment)  \n                    break;  \n            }  \n  \n            return Term;     \n        }  \n  \n        public bool GetFirstPmtDistribution(double PmtAmt, ref double   \n            Balance, out double PrinPortion, out double IntPortion) {  \n             Balance = OpeningBalance;  \n             return GetNextPmtDistribution(PmtAmt, ref Balance, out   \n             PrinPortion, out IntPortion);   \n        }  \n  \n        public bool GetNextPmtDistribution(double PmtAmt, ref double   \n           Balance, out double PrinPortion, out double IntPortion) {  \n            IntPortion = Util.Round(Balance * Rate, 2);  \n            PrinPortion = Util.Round(PmtAmt - IntPortion,2);  \n            Balance = Util.Round(Balance - PrinPortion,2);  \n  \n            if (Balance <= 0.0)   \n                return false;  \n  \n            return true;  \n        }  \n     }  \n  \n    internal class Util {  \n        public static double Round(double value, short digits) {  \n            double factor = Math.Pow(10, digits);  \n            return Math.Round(value * factor) / factor;  \n         }  \n    }  \n}  \n```  \n  \n## See also\n\n- [Exposing .NET Framework Components to COM](../../../docs/framework/interop/exposing-dotnet-components-to-com.md)\n","nodes":[{"pos":[4,303],"embed":true,"restype":"x-metadata","content":"title: \"COM Interop Sample: COM Client and .NET Server\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"interoperation with unmanaged code, samples\"\n  - \"COM interop, samples\"\nms.assetid: a219cb2c-9fa2-4c90-9b26-939e0788f178\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"COM Interop Sample: COM Client and .NET Server","nodes":[{"pos":[0,46],"content":"COM Interop Sample: COM Client and .NET Server","nodes":[{"content":"COM Interop Sample: COM Client and .NET Server","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[310,356],"content":"COM Interop Sample: COM Client and .NET Server","linkify":"COM Interop Sample: COM Client and .NET Server","nodes":[{"content":"COM Interop Sample: COM Client and .NET Server","pos":[0,46]}]},{"content":"This sample demonstrates the interoperation of a <bpt id=\"p1\">[</bpt>COM Client<ept id=\"p1\">](#cpconcominteropsamplecomclientnetserveranchor1)</ept> and a <bpt id=\"p2\">[</bpt>.NET Server<ept id=\"p2\">](#cpconcominteropsamplecomclientnetserveranchor2)</ept> that performs mortgage calculations.","pos":[357,573],"source":"This sample demonstrates the interoperation of a [COM Client](#cpconcominteropsamplecomclientnetserveranchor1) and a [.NET Server](#cpconcominteropsamplecomclientnetserveranchor2) that performs mortgage calculations."},{"content":"In this example, the client creates and calls an instance of the managed <ph id=\"ph1\">`Loan`</ph> class, passes four arguments (one of those four being equal to zero) to the instance, and displays the computations.","pos":[574,770],"source":" In this example, the client creates and calls an instance of the managed `Loan` class, passes four arguments (one of those four being equal to zero) to the instance, and displays the computations."},{"content":"Code examples from this sample appear throughout this section.","pos":[771,833]},{"pos":[907,917],"content":"COM Client","linkify":"COM Client","nodes":[{"content":"COM Client","pos":[0,10]}]},{"pos":[2990,3001],"content":".NET Server","linkify":".NET Server","nodes":[{"content":".NET Server","pos":[0,11]}]},{"pos":[12434,12442],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[12446,12559],"content":"<bpt id=\"p1\">[</bpt>Exposing .NET Framework Components to COM<ept id=\"p1\">](../../../docs/framework/interop/exposing-dotnet-components-to-com.md)</ept>","source":"[Exposing .NET Framework Components to COM](../../../docs/framework/interop/exposing-dotnet-components-to-com.md)"}]}