{"content":"---\ntitle: \"/ Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"/_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"/ operator [C#]\"\n  - \"division operator [C#]\"\nms.assetid: d155e496-678f-4efa-bebe-2bd08da2c5af\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# / Operator (C# Reference)\nThe division operator (`/`) divides its first operand by its second operand. All numeric types have predefined division operators.  \n  \n## Remarks  \n User-defined types can overload the `/` operator (see [operator](../../../csharp/language-reference/keywords/operator.md)). An overload of the `/` operator implicitly overloads the [/= operator](division-assignment-operator.md).  \n  \n When you divide two integers, the result is always an integer. For example, the result of 7 / 3 is 2. To determine the remainder of 7 / 3, use the remainder operator ([%](../../../csharp/language-reference/operators/modulus-operator.md)). To obtain a quotient as a rational number or fraction, give the dividend or divisor type `float` or type `double`. You can assign the type implicitly if you express the dividend or divisor as a decimal by putting a digit to the right side of the decimal point, as the following example shows.  \n  \n## Example  \n [!code-cs[csRefOperators#42](../../../csharp/language-reference/operators/codesnippet/CSharp/division-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)\n","nodes":[{"pos":[12,54],"content":"/ Operator (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"/ Operator (C# Reference) | Microsoft Docs","pos":[0,42]}]},{"pos":[586,611],"content":"/ Operator (C# Reference)","linkify":"/ Operator (C# Reference)","nodes":[{"content":"/ Operator (C# Reference)","pos":[0,25]}]},{"content":"The division operator (<ph id=\"ph1\">`/`</ph>) divides its first operand by its second operand.","pos":[612,688],"source":"The division operator (`/`) divides its first operand by its second operand."},{"content":"All numeric types have predefined division operators.","pos":[689,742]},{"pos":[751,758],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"User-defined types can overload the <ph id=\"ph1\">`/`</ph> operator (see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","pos":[762,885],"source":"User-defined types can overload the `/` operator (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"content":"An overload of the <ph id=\"ph1\">`/`</ph> operator implicitly overloads the <bpt id=\"p1\">[</bpt>/= operator<ept id=\"p1\">](division-assignment-operator.md)</ept>.","pos":[886,990],"source":" An overload of the `/` operator implicitly overloads the [/= operator](division-assignment-operator.md)."},{"content":"When you divide two integers, the result is always an integer.","pos":[997,1059]},{"content":"For example, the result of 7 / 3 is 2.","pos":[1060,1098]},{"content":"To determine the remainder of 7 / 3, use the remainder operator (<bpt id=\"p1\">[</bpt><ph id=\"ph1\">%</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/modulus-operator.md)</ept>).","pos":[1099,1235],"source":" To determine the remainder of 7 / 3, use the remainder operator ([%](../../../csharp/language-reference/operators/modulus-operator.md))."},{"content":"To obtain a quotient as a rational number or fraction, give the dividend or divisor type <ph id=\"ph1\">`float`</ph> or type <ph id=\"ph2\">`double`</ph>.","pos":[1236,1350],"source":" To obtain a quotient as a rational number or fraction, give the dividend or divisor type `float` or type `double`."},{"content":"You can assign the type implicitly if you express the dividend or divisor as a decimal by putting a digit to the right side of the decimal point, as the following example shows.","pos":[1351,1528]},{"pos":[1537,1544],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1548,1665],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#42<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/division-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#42](../../../csharp/language-reference/operators/codesnippet/CSharp/division-operator_1.cs)]"},{"pos":[1674,1682],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1686,1746],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1749,1817],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1820,1890],"source":" [C# Operators](../../../csharp/language-reference/operators/index.md)"}]}