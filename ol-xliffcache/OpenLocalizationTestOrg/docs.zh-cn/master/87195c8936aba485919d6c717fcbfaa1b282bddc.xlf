<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87195c8936aba485919d6c717fcbfaa1b282bddc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\expression-trees\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91546d96fff54ea780e402e770eab157ca814250</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6ed7a9adb03eecfaa744de7f1042f99e9646277</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Expression Trees (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Expression Trees (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Expression trees represent code in a tree-like data structure, where each node is an expression, for example, a method call or a binary operation such as <ph id="ph1">`x &lt; y`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can compile and run code represented by expression trees.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This enables dynamic modification of executable code, the execution of LINQ queries in various databases, and the creation of dynamic queries.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about expression trees in LINQ, see <bpt id="p1">[</bpt>How to: Use Expression Trees to Build Dynamic Queries (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/expression-trees/how-to-use-expression-trees-to-build-dynamic-queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Expression trees are also used in the dynamic language runtime (DLR) to provide interoperability between dynamic languages and the .NET Framework and to enable compiler writers to emit expression trees instead of Microsoft intermediate language (MSIL).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about the DLR, see <bpt id="p1">[</bpt>Dynamic Language Runtime Overview<ept id="p1">](https://msdn.microsoft.com/library/dd233052)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can have the C# or Visual Basic compiler create an expression tree for you based on an anonymous lambda expression, or you can create expression trees manually by using the <ph id="ph1">&lt;xref:System.Linq.Expressions&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating Expression Trees from Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When a lambda expression is assigned to a variable of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, the compiler emits code to build an expression tree that represents the lambda expression.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The C# compiler can generate expression trees only from expression lambdas (or single-line lambdas).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It cannot parse statement lambdas (or multi-line lambdas).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about lambda expressions in C#, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following code examples demonstrate how to have the C# compiler create an expression tree that represents the lambda expression <ph id="ph1">`num =&gt; num &lt; 5`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creating Expression Trees by Using the API</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To create expression trees by using the API, use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This class contains static factory methods that create expression tree nodes of specific types, for example, <ph id="ph1">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph>, which represents a variable or parameter, or <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>, which represents a method call.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>, and the other expression-specific types are also defined in the <ph id="ph3">&lt;xref:System.Linq.Expressions&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These types derive from the abstract type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to create an expression tree that represents the lambda expression <ph id="ph1">`num =&gt; num &lt; 5`</ph> by using the API.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In .NET Framework 4 or later, the expression trees API also supports assignments and control flow expressions such as loops, conditional blocks, and <ph id="ph1">`try-catch`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By using the API, you can create expression trees that are more complex than those that can be created from lambda expressions by the C# compiler.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to create an expression tree that calculates the factorial of a number.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Generating Dynamic Methods with Expression Trees in Visual Studio 2010<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=169513)</ept>, which also applies to later versions of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Parsing Expression Trees</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how the expression tree that represents the lambda expression <ph id="ph1">`num =&gt; num &lt; 5`</ph> can be decomposed into its parts.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Immutability of Expression Trees</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Expression trees should be immutable.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This means that if you want to modify an expression tree, you must construct a new expression tree by copying the existing one and replacing nodes in it.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can use an expression tree visitor to traverse the existing expression tree.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Modify Expression Trees (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/expression-trees/how-to-modify-expression-trees.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Compiling Expression Trees</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> type provides the <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method that compiles the code represented by an expression tree into an executable delegate.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to compile an expression tree and run the resulting code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Execute Expression Trees (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/expression-trees/how-to-execute-expression-trees.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Expressions&gt;</ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Execute Expression Trees (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/expression-trees/how-to-execute-expression-trees.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Modify Expression Trees (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/expression-trees/how-to-modify-expression-trees.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Lambda Expressions<ept id="p1">](../../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Dynamic Language Runtime Overview<ept id="p1">](https://msdn.microsoft.com/library/dd233052)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Programming Concepts (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>