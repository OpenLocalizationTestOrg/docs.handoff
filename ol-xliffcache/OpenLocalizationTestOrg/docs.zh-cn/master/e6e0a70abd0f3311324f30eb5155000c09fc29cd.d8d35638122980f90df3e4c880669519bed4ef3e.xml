{"content":"---\ntitle: \"Boxing and Unboxing (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"cs.boxing\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"C# language, boxing\"\n  - \"C# language, unboxing\"\n  - \"unboxing [C#]\"\n  - \"boxing [C#]\"\nms.assetid: 8da9bbf4-bce9-4b08-b2e5-f64c11c56514\ncaps.latest.revision: 34\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Boxing and Unboxing (C# Programming Guide)\nBoxing is the process of converting a [value type](../../../csharp/language-reference/keywords/value-types.md) to the type `object` or to any interface type implemented by this value type. When the CLR boxes a value type, it wraps the value inside a System.Object and stores it on the managed heap. Unboxing extracts the value type from the object. Boxing is implicit; unboxing is explicit. The concept of boxing and unboxing underlies the C# unified view of the type system in which a value of any type can be treated as an object.  \n  \n In the following example, the integer variable `i` is *boxed* and assigned to object `o`.  \n  \n [!code-cs[csProgGuideTypes#14](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/boxing-and-unboxing_1.cs)]  \n  \n The object `o` can then be unboxed and assigned to integer variable `i`:  \n  \n [!code-cs[csProgGuideTypes#15](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/boxing-and-unboxing_2.cs)]  \n  \n The following examples illustrate how boxing is used in C#.  \n  \n [!code-cs[csProgGuideTypes#47](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/boxing-and-unboxing_3.cs)]  \n  \n## Performance  \n In relation to simple assignments, boxing and unboxing are computationally expensive processes. When a value type is boxed, a new object must be allocated and constructed. To a lesser degree, the cast required for unboxing is also expensive computationally. For more information, see [Performance](https://msdn.microsoft.com/library/ms173196(VS.110).aspx).  \n  \n## Boxing  \n Boxing is used to store value types in the garbage-collected heap. Boxing is an implicit conversion of a [value type](../../../csharp/language-reference/keywords/value-types.md) to the type `object` or to any interface type implemented by this value type. Boxing a value type allocates an object instance on the heap and copies the value into the new object.  \n  \n Consider the following declaration of a value-type variable:  \n  \n [!code-cs[csProgGuideTypes#17](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/boxing-and-unboxing_4.cs)]  \n  \n The following statement implicitly applies the boxing operation on the variable `i`:  \n  \n [!code-cs[csProgGuideTypes#18](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/boxing-and-unboxing_5.cs)]  \n  \n The result of this statement is creating an object reference `o`, on the stack, that references a value of the type `int`, on the heap. This value is a copy of the value-type value assigned to the variable `i`. The difference between the two variables, `i` and `o`, is illustrated in the following figure.  \n  \n ![BoxingConversion graphic](../../../csharp/programming-guide/types/media/vcboxingconversion.gif \"vcBoxingConversion\")  \nBoxing Conversion  \n  \n It is also possible to perform the boxing explicitly as in the following example, but explicit boxing is never required:  \n  \n [!code-cs[csProgGuideTypes#19](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/boxing-and-unboxing_6.cs)]  \n  \n## Description  \n This example converts an integer variable `i` to an object `o` by using boxing. Then, the value stored in the variable `i` is changed from `123` to `456`. The example shows that the original value type and the boxed object use separate memory locations, and therefore can store different values.  \n  \n## Example  \n [!code-cs[csProgGuideTypes#16](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/boxing-and-unboxing_7.cs)]  \n  \n## Unboxing  \n Unboxing is an explicit conversion from the type `object` to a [value type](../../../csharp/language-reference/keywords/value-types.md) or from an interface type to a value type that implements the interface. An unboxing operation consists of:  \n  \n-   Checking the object instance to make sure that it is a boxed value of the given value type.  \n  \n-   Copying the value from the instance into the value-type variable.  \n  \n The following statements demonstrate both boxing and unboxing operations:  \n  \n [!code-cs[csProgGuideTypes#21](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/boxing-and-unboxing_8.cs)]  \n  \n The following figure demonstrates the result of the previous statements.  \n  \n ![UnBoxing Conversion graphic](../../../csharp/programming-guide/types/media/vcunboxingconversion.gif \"vcUnBoxingConversion\")  \nUnboxing Conversion  \n  \n For the unboxing of value types to succeed at run time, the item being unboxed must be a reference to an object that was previously created by boxing an instance of that value type. Attempting to unbox `null` causes a <xref:System.NullReferenceException>. Attempting to unbox a reference to an incompatible value type causes an <xref:System.InvalidCastException>.  \n  \n## Example  \n The following example demonstrates a case of invalid unboxing and the resulting `InvalidCastException`. Using `try` and `catch`, an error message is displayed when the error occurs.  \n  \n [!code-cs[csProgGuideTypes#20](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/boxing-and-unboxing_9.cs)]  \n  \n This program outputs:  \n  \n `Specified cast is not valid. Error: Incorrect unboxing.`  \n  \n If you change the statement:  \n  \n```  \nint j = (short) o;  \n```  \n  \n to:  \n  \n```  \nint j = (int) o;  \n```  \n  \n the conversion will be performed, and you will get the output:  \n  \n `Unboxing OK.`  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## Related Sections  \n For more information:  \n  \n-   [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)  \n  \n-   [Value Types](../../../csharp/language-reference/keywords/value-types.md)  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)","nodes":[{"pos":[4,662],"embed":true,"restype":"x-metadata","content":"title: \"Boxing and Unboxing (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"cs.boxing\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"C# language, boxing\"\n  - \"C# language, unboxing\"\n  - \"unboxing [C#]\"\n  - \"boxing [C#]\"\nms.assetid: 8da9bbf4-bce9-4b08-b2e5-f64c11c56514\ncaps.latest.revision: 34\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","nodes":[{"content":"Boxing and Unboxing (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,59],"content":"Boxing and Unboxing (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Boxing and Unboxing (C# Programming Guide) | Microsoft Docs","pos":[0,59]}]}],"path":["title"]}],"yml":true},{"pos":[669,711],"content":"Boxing and Unboxing (C# Programming Guide)","linkify":"Boxing and Unboxing (C# Programming Guide)","nodes":[{"content":"Boxing and Unboxing (C# Programming Guide)","pos":[0,42]}]},{"content":"Boxing is the process of converting a <bpt id=\"p1\">[</bpt>value type<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept> to the type <ph id=\"ph1\">`object`</ph> or to any interface type implemented by this value type.","pos":[712,900],"source":"Boxing is the process of converting a [value type](../../../csharp/language-reference/keywords/value-types.md) to the type `object` or to any interface type implemented by this value type."},{"content":"When the CLR boxes a value type, it wraps the value inside a System.Object and stores it on the managed heap.","pos":[901,1010]},{"content":"Unboxing extracts the value type from the object.","pos":[1011,1060]},{"content":"Boxing is implicit; unboxing is explicit.","pos":[1061,1102]},{"content":"The concept of boxing and unboxing underlies the C# unified view of the type system in which a value of any type can be treated as an object.","pos":[1103,1244]},{"pos":[1251,1340],"content":"In the following example, the integer variable <ph id=\"ph1\">`i`</ph> is <bpt id=\"p1\">*</bpt>boxed<ept id=\"p1\">*</ept> and assigned to object <ph id=\"ph2\">`o`</ph>.","source":"In the following example, the integer variable `i` is *boxed* and assigned to object `o`."},{"pos":[1479,1551],"content":"The object <ph id=\"ph1\">`o`</ph> can then be unboxed and assigned to integer variable <ph id=\"ph2\">`i`</ph>:","source":"The object `o` can then be unboxed and assigned to integer variable `i`:"},{"content":"The following examples illustrate how boxing is used in C#.","pos":[1690,1749]},{"pos":[1890,1901],"content":"Performance","linkify":"Performance","nodes":[{"content":"Performance","pos":[0,11]}]},{"content":"In relation to simple assignments, boxing and unboxing are computationally expensive processes.","pos":[1905,2000]},{"content":"When a value type is boxed, a new object must be allocated and constructed.","pos":[2001,2076]},{"content":"To a lesser degree, the cast required for unboxing is also expensive computationally.","pos":[2077,2162]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Performance<ept id=\"p1\">](https://msdn.microsoft.com/library/ms173196(VS.110).aspx)</ept>.","pos":[2163,2261],"source":" For more information, see [Performance](https://msdn.microsoft.com/library/ms173196(VS.110).aspx)."},{"pos":[2270,2276],"content":"Boxing","linkify":"Boxing","nodes":[{"content":"Boxing","pos":[0,6]}]},{"content":"Boxing is used to store value types in the garbage-collected heap.","pos":[2280,2346]},{"content":"Boxing is an implicit conversion of a <bpt id=\"p1\">[</bpt>value type<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept> to the type <ph id=\"ph1\">`object`</ph> or to any interface type implemented by this value type.","pos":[2347,2535],"source":" Boxing is an implicit conversion of a [value type](../../../csharp/language-reference/keywords/value-types.md) to the type `object` or to any interface type implemented by this value type."},{"content":"Boxing a value type allocates an object instance on the heap and copies the value into the new object.","pos":[2536,2638]},{"content":"Consider the following declaration of a value-type variable:","pos":[2645,2705]},{"pos":[2844,2928],"content":"The following statement implicitly applies the boxing operation on the variable <ph id=\"ph1\">`i`</ph>:","source":"The following statement implicitly applies the boxing operation on the variable `i`:"},{"content":"The result of this statement is creating an object reference <ph id=\"ph1\">`o`</ph>, on the stack, that references a value of the type <ph id=\"ph2\">`int`</ph>, on the heap.","pos":[3067,3202],"source":"The result of this statement is creating an object reference `o`, on the stack, that references a value of the type `int`, on the heap."},{"content":"This value is a copy of the value-type value assigned to the variable <ph id=\"ph1\">`i`</ph>.","pos":[3203,3277],"source":" This value is a copy of the value-type value assigned to the variable `i`."},{"content":"The difference between the two variables, <ph id=\"ph1\">`i`</ph> and <ph id=\"ph2\">`o`</ph>, is illustrated in the following figure.","pos":[3278,3372],"source":" The difference between the two variables, `i` and `o`, is illustrated in the following figure."},{"content":"<bpt id=\"p1\">![</bpt>BoxingConversion graphic<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../csharp/programming-guide/types/media/vcboxingconversion.gif \"</bpt>vcBoxingConversion<ept id=\"p2\">\")</ept>","pos":[3379,3497],"source":"![BoxingConversion graphic](../../../csharp/programming-guide/types/media/vcboxingconversion.gif \"vcBoxingConversion\")"},{"content":"Boxing Conversion","pos":[3500,3517]},{"content":"It is also possible to perform the boxing explicitly as in the following example, but explicit boxing is never required:","pos":[3524,3644]},{"pos":[3785,3796],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"This example converts an integer variable <ph id=\"ph1\">`i`</ph> to an object <ph id=\"ph2\">`o`</ph> by using boxing.","pos":[3800,3879],"source":"This example converts an integer variable `i` to an object `o` by using boxing."},{"content":"Then, the value stored in the variable <ph id=\"ph1\">`i`</ph> is changed from <ph id=\"ph2\">`123`</ph> to <ph id=\"ph3\">`456`</ph>.","pos":[3880,3954],"source":" Then, the value stored in the variable `i` is changed from `123` to `456`."},{"content":"The example shows that the original value type and the boxed object use separate memory locations, and therefore can store different values.","pos":[3955,4095]},{"pos":[4104,4111],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4249,4257],"content":"Unboxing","linkify":"Unboxing","nodes":[{"content":"Unboxing","pos":[0,8]}]},{"content":"Unboxing is an explicit conversion from the type <ph id=\"ph1\">`object`</ph> to a <bpt id=\"p1\">[</bpt>value type<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept> or from an interface type to a value type that implements the interface.","pos":[4261,4469],"source":"Unboxing is an explicit conversion from the type `object` to a [value type](../../../csharp/language-reference/keywords/value-types.md) or from an interface type to a value type that implements the interface."},{"content":"An unboxing operation consists of:","pos":[4470,4504]},{"content":"Checking the object instance to make sure that it is a boxed value of the given value type.","pos":[4514,4605]},{"content":"Copying the value from the instance into the value-type variable.","pos":[4615,4680]},{"content":"The following statements demonstrate both boxing and unboxing operations:","pos":[4687,4760]},{"content":"The following figure demonstrates the result of the previous statements.","pos":[4899,4971]},{"content":"<bpt id=\"p1\">![</bpt>UnBoxing Conversion graphic<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../csharp/programming-guide/types/media/vcunboxingconversion.gif \"</bpt>vcUnBoxingConversion<ept id=\"p2\">\")</ept>","pos":[4978,5103],"source":"![UnBoxing Conversion graphic](../../../csharp/programming-guide/types/media/vcunboxingconversion.gif \"vcUnBoxingConversion\")"},{"content":"Unboxing Conversion","pos":[5106,5125]},{"content":"For the unboxing of value types to succeed at run time, the item being unboxed must be a reference to an object that was previously created by boxing an instance of that value type.","pos":[5132,5313]},{"content":"Attempting to unbox <ph id=\"ph1\">`null`</ph> causes a <ph id=\"ph2\">&lt;xref:System.NullReferenceException&gt;</ph>.","pos":[5314,5387],"source":" Attempting to unbox `null` causes a <xref:System.NullReferenceException>."},{"content":"Attempting to unbox a reference to an incompatible value type causes an <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph>.","pos":[5388,5495],"source":" Attempting to unbox a reference to an incompatible value type causes an <xref:System.InvalidCastException>."},{"pos":[5504,5511],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates a case of invalid unboxing and the resulting <ph id=\"ph1\">`InvalidCastException`</ph>.","pos":[5515,5618],"source":"The following example demonstrates a case of invalid unboxing and the resulting `InvalidCastException`."},{"content":"Using <ph id=\"ph1\">`try`</ph> and <ph id=\"ph2\">`catch`</ph>, an error message is displayed when the error occurs.","pos":[5619,5696],"source":" Using `try` and `catch`, an error message is displayed when the error occurs."},{"content":"This program outputs:","pos":[5835,5856]},{"content":"If you change the statement:","pos":[5927,5955]},{"content":"to:","pos":[5998,6001]},{"content":"the conversion will be performed, and you will get the output:","pos":[6042,6104]},{"pos":[6134,6159],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[6273,6289],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"For more information:","pos":[6293,6314]},{"pos":[6324,6405],"content":"<bpt id=\"p1\">[</bpt>Reference Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept>","source":"[Reference Types](../../../csharp/language-reference/keywords/reference-types.md)"},{"pos":[6415,6488],"content":"<bpt id=\"p1\">[</bpt>Value Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept>","source":"[Value Types](../../../csharp/language-reference/keywords/value-types.md)"},{"pos":[6497,6522],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[6636,6644],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6648,6714],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"}]}