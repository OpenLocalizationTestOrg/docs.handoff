{"content":"---\ntitle: Containerize an app with Docker tutorial\ndescription: In this tutorial you will learn how to containerize a .NET Core application with Docker.\nms.date: 03/20/2019\nms.topic: tutorial\nms.custom: \"mvc, seodec18\"\n#Customer intent: As a developer, I want to containerize my .NET Core app so that I can deploy it to the cloud.\n---\n\n# Tutorial: Containerize a .NET Core app\n\nThis tutorial teaches you how to build a Docker image that contains your .NET Core application. The image can be used to create containers for your local development environment, private cloud, or public cloud.\n\nIn this tutorial you will learn how to:\n\n> [!div class=\"checklist\"]\n> * Create a Dockerfile\n> * Pull a Microsoft .NET Core Docker base image\n> * Customize and deploy your app to the image\n> * Create and run a container\n> * Deploy to Azure\n\nThis tutorial teaches the Docker container build and deploy tasks for a .NET Core application. The [Docker platform](https://docs.docker.com/engine/docker-overview/#the-docker-platform) uses the [Docker Engine](https://docs.docker.com/engine/docker-overview/#docker-engine) to quickly build and package apps as [Docker images](https://docs.docker.com/glossary/?term=image). These images are written in the [Dockerfile](https://docs.docker.com/glossary/?term=Dockerfile) format to be deployed and run in a [layered container](https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/#container-and-layers).\n\n## .NET Core: Easiest way to get started\n\nBefore creating the Docker image, you need an application to containerize. You can create it on Linux, MacOS, or Windows. The quickest and easiest way to do that is to use .NET Core.\n\nIf you're unfamiliar with the .NET Core CLI toolset, read the [.NET Core SDK overview](../tools/index.md).\n\nYou can build both Windows and Linux containers with [multi-arch based tags](https://github.com/dotnet/announcements/issues/14).\n\n## Your first .NET Core Docker app\n\n### Prerequisites\n\nTo complete this tutorial:\n\n#### .NET Core SDK\n\n* Install [.NET Core 2.1 SDK](https://www.microsoft.com/net/download) or later.\n\nSee [.NET Core 2.1 Supported OS Versions](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md) for the complete list of .NET Core 2.1 supported operating systems, out of support OS versions, and lifecycle policy links.\n\n* Install your favorite code editor, if you haven't already.\n\n> [!TIP]\n> Need to install a code editor? Try [Visual Studio Code](https://code.visualstudio.com/download)!\n\n#### Installing Docker Client\n\nInstall [Docker 18.06](https://docs.docker.com/release-notes/docker-ce/) or later of the Docker client.\n\nThe Docker client can be installed in:\n\n* Linux distributions\n\n   * [CentOS](https://docs.docker.com/install/linux/docker-ce/centos/)\n\n   * [Debian](https://docs.docker.com/install/linux/docker-ce/debian/)\n\n   * [Fedora](https://docs.docker.com/install/linux/docker-ce/fedora/)\n\n   * [Ubuntu](https://docs.docker.com/install/linux/docker-ce/ubuntu/)\n\n* [macOS](https://docs.docker.com/docker-for-mac/install/)\n\n* [Windows](https://docs.docker.com/docker-for-windows/install/).\n\n### Create a .NET Core 2.1 console app for Dockerization\n\nOpen a command prompt and create a folder named *Hello*. Navigate to the folder you created and type the following commands:\n\n```console\ndotnet new console\ndotnet run\n```\n\nLet's do a quick walkthrough:\n\n1. `$ dotnet new console`\n\n   [`dotnet new`](../tools/dotnet-new.md) creates an up-to-date `Hello.csproj` project file with the dependencies necessary to build a console app.  It also creates a `Program.cs`, a basic file containing the entry point for the application.\n\n   `Hello.csproj`:\n\n   The project file specifies everything that's needed to restore dependencies and build the program.\n\n   * The `OutputType` tag specifies that we're building an executable, in other words a console application.\n   * The `TargetFramework` tag specifies what .NET implementation we're targeting. In an advanced scenario, you can specify multiple target frameworks and build to the specified frameworks in a single operation. In this tutorial, we build for .NET Core 2.1.\n\n   `Program.cs`:\n\n   The program starts by `using System`. This statement means, \"Bring everything in the `System` namespace into scope for this file.\" The `System` namespace includes basic constructs such as `string`, or numeric types.\n\n   We then define a namespace called `Hello`. You can change namespace to anything you want. A class named `Program` is defined within that namespace, with a `Main` method that takes an array of strings as its argument. This array contains the list of arguments passed in when the compiled program is called. In our example, the program only writes \"Hello World!\" to the console.\n\n   **dotnet new** runs the [`dotnet restore`](../tools/dotnet-restore.md) command. **Dotnet restore** restores the tree of dependencies with a [NuGet](https://www.nuget.org/)(.NET package manager) call.\n   NuGet performs the following tasks:\n   * analyzes the *Hello.csproj* file.\n   * downloads the file dependencies (or grabs from your machine cache).\n   * writes the *obj/project.assets.json* file.\n\n   The *project.assets.json* file is a complete set of the NuGet dependencies graph, binding resolutions, and other app metadata. This required file is used by other tools, such as [`dotnet build`](../tools/dotnet-build.md) and [`dotnet run`](../tools/dotnet-run.md), to correctly process the source code.\n\n2. `$ dotnet run`\n\n   [`dotnet run`](../tools/dotnet-run.md) calls [`dotnet build`](../tools/dotnet-build.md) to confirm a successful build, and then calls `dotnet <assembly.dll>` to run the application.\n\n    ```console\n    $ dotnet run\n\n    Hello World!\n    ```\n\n    For advanced scenarios,  see [.NET Core Application Deployment](../deploying/index.md) for details.\n\n## Dockerize the .NET Core application\n\nThe Hello .NET Core console app successfully runs locally. Now let's take it a step further and build and run the app in Docker.\n\n### Your first Dockerfile\n\nOpen your text editor and let's get started! We're still working from the Hello directory we built the app in.\n\nAdd the following Docker instructions for either Linux or [Windows Containers](https://docs.microsoft.com/virtualization/windowscontainers/about/) to a new file. When finished, save it in the root of your Hello directory as **Dockerfile**, with no extension (You may need to set your file type to `All types (*.*)` or something similar).\n\n```Dockerfile\nFROM microsoft/dotnet:2.1-sdk\nWORKDIR /app\n\n# copy csproj and restore as distinct layers\nCOPY *.csproj ./\nRUN dotnet restore\n\n# copy and build everything else\nCOPY . ./\nRUN dotnet publish -c Release -o out\nENTRYPOINT [\"dotnet\", \"out/Hello.dll\"]\n```\n\nThe Dockerfile contains Docker build instructions that run sequentially.\n\nThe first instruction must be [**FROM**](https://docs.docker.com/engine/reference/builder/#from). This instruction initializes a new build stage and sets the Base Image for the remaining instructions. The multi-arch tags pull either Windows or Linux containers depending on the Docker for Windows [container mode](https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers). The Base Image for our sample is the 2.1-sdk image from the microsoft/dotnet repository,\n\n```Dockerfile\nFROM microsoft/dotnet:2.1-sdk\n```\n\nThe [**WORKDIR**](https://docs.docker.com/engine/reference/builder/#workdir) instruction sets the working directory for any remaining RUN, CMD, ENTRYPOINT, COPY, and ADD Dockerfile instructions. If the directory doesn't exist, it's created. In this case, WORKDIR is set to the app directory.\n\n```Dockerfile\nWORKDIR /app\n```\n\nThe [**COPY**](https://docs.docker.com/engine/reference/builder/#copy) instruction copies new files or directories from the source path and adds them to the destination container filesystem. With this instruction, we are copying the C# project file to the container.\n\n```Dockerfile\nCOPY *.csproj ./\n```\n\nThe [**RUN**](https://docs.docker.com/engine/reference/builder/#run) instruction executes any commands in a new layer on top of the current image and commit the results. The resulting committed image is used for the next step in the Dockerfile. We are running **dotnet restore** to get the needed dependencies of the C# project file.\n\n```Dockerfile\nRUN dotnet restore\n```\n\nThis **COPY** instruction copies the rest of the files into our container into new [layers](https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/#images-and-layers).\n\n```Dockerfile\nCOPY . ./\n```\n\nWe are publishing the app with this **RUN** instruction. The [**dotnet publish**](../tools/dotnet-publish.md) command compiles the application, reads through its dependencies specified in the project file, and publishes the resulting set of files to a directory. Our app is published with a **Release** configuration and output to the default directory.\n\n```Dockerfile\nRUN dotnet publish -c Release -o out\n```\n\nThe [**ENTRYPOINT**](https://docs.docker.com/engine/reference/builder/#entrypoint) instruction allows the container to run as an executable.\n\n```Dockerfile\nENTRYPOINT [\"dotnet\", \"out/Hello.dll\"]\n```\n\nNow you have a Dockerfile that:\n\n* copies your app to the image\n* your app's dependencies to the image\n* builds the app to run as an executable\n\n### Build and run the Hello .NET Core app\n\n#### Essential Docker commands\n\nThese Docker commands are essential:\n\n* [docker build](https://docs.docker.com/engine/reference/commandline/build/)\n* [docker run](https://docs.docker.com/engine/reference/commandline/run/)\n* [docker ps](https://docs.docker.com/engine/reference/commandline/ps/)\n* [docker stop](https://docs.docker.com/engine/reference/commandline/stop/)\n* [docker rm](https://docs.docker.com/engine/reference/commandline/rm/)\n* [docker rmi](https://docs.docker.com/engine/reference/commandline/rmi/)\n* [docker image](https://docs.docker.com/engine/reference/commandline/image/)\n\n#### Build and run\n\nYou wrote the dockerfile; now Docker builds your app and then runs the container.\n\n```console\ndocker build -t dotnetapp-dev .\ndocker run --rm dotnetapp-dev Hello from Docker\n```\n\nThe output from the `docker build` command should be similar to the following console output:\n\n```console\nSending build context to Docker daemon   173.1kB\nStep 1/7 : FROM microsoft/dotnet:2.1-sdk\n ---> 288f8c45f7c2\nStep 2/7 : WORKDIR /app\n ---> Using cache\n ---> 9af1fbdc7972\nStep 3/7 : COPY *.csproj ./\n ---> Using cache\n ---> 86c8c332d4b3\nStep 4/7 : RUN dotnet restore\n ---> Using cache\n ---> 86fcd7dd0ea4\nStep 5/7 : COPY . ./\n ---> Using cache\n ---> 6faf0a53607f\nStep 6/7 : RUN dotnet publish -c Release -o out\n ---> Using cache\n ---> f972328318c8\nStep 7/7 : ENTRYPOINT dotnet out/Hello.dll\n ---> Using cache\n ---> 53c337887e18\nSuccessfully built 46db075bd98d\nSuccessfully tagged dotnetapp-dev:latest\n```\n\nAs you can see from the output, the Docker Engine used the Dockerfile to build our container.\n\nThe output from the `docker run` command should be similar to the following console output:\n\n```console\nHello World!\n```\n\nCongratulations! You have just:\n> [!div class=\"checklist\"]\n> * Created a local .NET Core app\n> * Created a Dockerfile to build your first container\n> * Built and ran your Dockerized app\n\n## Next steps\n\nHere are some next steps you can take:\n\n* [Introduction to .NET Docker Images Video](https://channel9.msdn.com/Shows/Code-Conversations/Introduction-to-NET-Docker-Images-with-Kendra-Havens?term=docker)\n* [Visual Studio, Docker & Azure Container Instances better together!](https://medium.com/@AliMazaheri/visual-studio-docker-azure-container-instances-better-together-bf8c2f0419ae)\n* [Docker for Azure Quickstarts](https://docs.docker.com/docker-for-azure/#docker-community-edition-ce-for-azure)\n* [Deploy your app on Docker for Azure](https://docs.docker.com/docker-for-azure/deploy/)\n\n> [!NOTE]\n> If you do not have an Azure subscription, [sign up today](https://azure.microsoft.com/free/?b=16.48) for a free 30-day account and get $200 in Azure Credits to try out any combination of Azure services.\n\n## Docker Images used in this sample\n\nThe following Docker images are used in this sample\n\n* [`microsoft/dotnet:2.1-sdk`](https://hub.docker.com/r/microsoft/dotnet)\n\n## Related resources\n\n* [.NET Core Docker samples](https://github.com/dotnet/dotnet-docker/tree/master/samples)\n* [Dockerfile on Windows Containers](https://docs.microsoft.com/virtualization/windowscontainers/manage-docker/manage-windows-dockerfile)\n* [.NET Framework Docker samples](https://github.com/Microsoft/dotnet-framework-docker-samples)\n* [ASP.NET Core on DockerHub](https://hub.docker.com/r/microsoft/aspnetcore/)\n* [Dockerize a .NET Core application - Docker Tutorial](https://docs.docker.com/engine/examples/dotnetcore/)\n* [Working with Visual Studio Docker Tools](https://docs.microsoft.com/aspnet/core/publishing/visual-studio-tools-for-docker)\n* [Deploying Docker Images from the Azure Container Registry to Azure Container Instances](https://blogs.msdn.microsoft.com/stevelasker/2017/07/28/deploying-docker-images-from-the-azure-container-registry-to-azure-container-instances/)","nodes":[{"pos":[4,331],"embed":true,"restype":"x-metadata","content":"title: Containerize an app with Docker tutorial\ndescription: In this tutorial you will learn how to containerize a .NET Core application with Docker.\nms.date: 03/20/2019\nms.topic: tutorial\nms.custom: \"mvc, seodec18\"\n#Customer intent: As a developer, I want to containerize my .NET Core app so that I can deploy it to the cloud.","nodes":[{"content":"Containerize an app with Docker tutorial","nodes":[{"pos":[0,40],"content":"Containerize an app with Docker tutorial","nodes":[{"content":"Containerize an app with Docker tutorial","pos":[0,40]}]}],"path":["title"],"nosxs":false},{"content":"In this tutorial you will learn how to containerize a .NET Core application with Docker.","nodes":[{"pos":[0,88],"content":"In this tutorial you will learn how to containerize a .NET Core application with Docker.","nodes":[{"content":"In this tutorial you will learn how to containerize a .NET Core application with Docker.","pos":[0,88]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[339,377],"content":"Tutorial: Containerize a .NET Core app","linkify":"Tutorial: Containerize a .NET Core app","nodes":[{"content":"Tutorial: Containerize a .NET Core app","pos":[0,38]}]},{"content":"This tutorial teaches you how to build a Docker image that contains your .NET Core application.","pos":[379,474]},{"content":"The image can be used to create containers for your local development environment, private cloud, or public cloud.","pos":[475,589]},{"content":"In this tutorial you will learn how to:","pos":[591,630]},{"content":"Create a Dockerfile","pos":[663,682]},{"content":"Pull a Microsoft .NET Core Docker base image","pos":[687,731]},{"content":"Customize and deploy your app to the image","pos":[736,778]},{"content":"Create and run a container","pos":[783,809]},{"content":"Deploy to Azure","pos":[814,829]},{"content":"This tutorial teaches the Docker container build and deploy tasks for a .NET Core application.","pos":[831,925]},{"content":"The <bpt id=\"p1\">[</bpt>Docker platform<ept id=\"p1\">](https://docs.docker.com/engine/docker-overview/#the-docker-platform)</ept> uses the <bpt id=\"p2\">[</bpt>Docker Engine<ept id=\"p2\">](https://docs.docker.com/engine/docker-overview/#docker-engine)</ept> to quickly build and package apps as <bpt id=\"p3\">[</bpt>Docker images<ept id=\"p3\">](https://docs.docker.com/glossary/?term=image)</ept>.","pos":[926,1204],"source":" The [Docker platform](https://docs.docker.com/engine/docker-overview/#the-docker-platform) uses the [Docker Engine](https://docs.docker.com/engine/docker-overview/#docker-engine) to quickly build and package apps as [Docker images](https://docs.docker.com/glossary/?term=image)."},{"content":"These images are written in the <bpt id=\"p1\">[</bpt>Dockerfile<ept id=\"p1\">](https://docs.docker.com/glossary/?term=Dockerfile)</ept> format to be deployed and run in a <bpt id=\"p2\">[</bpt>layered container<ept id=\"p2\">](https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/#container-and-layers)</ept>.","pos":[1205,1454],"source":" These images are written in the [Dockerfile](https://docs.docker.com/glossary/?term=Dockerfile) format to be deployed and run in a [layered container](https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/#container-and-layers)."},{"pos":[1459,1496],"content":".NET Core: Easiest way to get started","linkify":".NET Core: Easiest way to get started","nodes":[{"content":".NET Core: Easiest way to get started","pos":[0,37]}]},{"content":"Before creating the Docker image, you need an application to containerize.","pos":[1498,1572]},{"content":"You can create it on Linux, MacOS, or Windows.","pos":[1573,1619]},{"content":"The quickest and easiest way to do that is to use .NET Core.","pos":[1620,1680]},{"pos":[1682,1788],"content":"If you're unfamiliar with the .NET Core CLI toolset, read the <bpt id=\"p1\">[</bpt>.NET Core SDK overview<ept id=\"p1\">](../tools/index.md)</ept>.","source":"If you're unfamiliar with the .NET Core CLI toolset, read the [.NET Core SDK overview](../tools/index.md)."},{"pos":[1790,1918],"content":"You can build both Windows and Linux containers with <bpt id=\"p1\">[</bpt>multi-arch based tags<ept id=\"p1\">](https://github.com/dotnet/announcements/issues/14)</ept>.","source":"You can build both Windows and Linux containers with [multi-arch based tags](https://github.com/dotnet/announcements/issues/14)."},{"pos":[1923,1954],"content":"Your first .NET Core Docker app","linkify":"Your first .NET Core Docker app","nodes":[{"content":"Your first .NET Core Docker app","pos":[0,31]}]},{"pos":[1960,1973],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"To complete this tutorial:","pos":[1975,2001]},{"pos":[2008,2021],"content":".NET Core SDK","linkify":".NET Core SDK","nodes":[{"content":".NET Core SDK","pos":[0,13]}]},{"pos":[2025,2102],"content":"Install <bpt id=\"p1\">[</bpt>.NET Core 2.1 SDK<ept id=\"p1\">](https://www.microsoft.com/net/download)</ept> or later.","source":"Install [.NET Core 2.1 SDK](https://www.microsoft.com/net/download) or later."},{"pos":[2104,2351],"content":"See <bpt id=\"p1\">[</bpt>.NET Core 2.1 Supported OS Versions<ept id=\"p1\">](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md)</ept> for the complete list of .NET Core 2.1 supported operating systems, out of support OS versions, and lifecycle policy links.","source":"See [.NET Core 2.1 Supported OS Versions](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md) for the complete list of .NET Core 2.1 supported operating systems, out of support OS versions, and lifecycle policy links."},{"content":"Install your favorite code editor, if you haven't already.","pos":[2355,2413]},{"pos":[2417,2522],"content":"[!TIP]\nNeed to install a code editor? Try [Visual Studio Code](https://code.visualstudio.com/download)!","leadings":["","> "],"nodes":[{"content":"Need to install a code editor? Try [Visual Studio Code](https://code.visualstudio.com/download)!","pos":[7,103],"nodes":[{"content":"Need to install a code editor?","pos":[0,30]},{"content":"Try <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](https://code.visualstudio.com/download)</ept>!","pos":[31,96],"source":" Try [Visual Studio Code](https://code.visualstudio.com/download)!"}]}]},{"pos":[2529,2553],"content":"Installing Docker Client","linkify":"Installing Docker Client","nodes":[{"content":"Installing Docker Client","pos":[0,24]}]},{"pos":[2555,2658],"content":"Install <bpt id=\"p1\">[</bpt>Docker 18.06<ept id=\"p1\">](https://docs.docker.com/release-notes/docker-ce/)</ept> or later of the Docker client.","source":"Install [Docker 18.06](https://docs.docker.com/release-notes/docker-ce/) or later of the Docker client."},{"content":"The Docker client can be installed in:","pos":[2660,2698]},{"content":"Linux distributions","pos":[2702,2721]},{"pos":[2728,2793],"content":"<bpt id=\"p1\">[</bpt>CentOS<ept id=\"p1\">](https://docs.docker.com/install/linux/docker-ce/centos/)</ept>","source":"[CentOS](https://docs.docker.com/install/linux/docker-ce/centos/)"},{"pos":[2800,2865],"content":"<bpt id=\"p1\">[</bpt>Debian<ept id=\"p1\">](https://docs.docker.com/install/linux/docker-ce/debian/)</ept>","source":"[Debian](https://docs.docker.com/install/linux/docker-ce/debian/)"},{"pos":[2872,2937],"content":"<bpt id=\"p1\">[</bpt>Fedora<ept id=\"p1\">](https://docs.docker.com/install/linux/docker-ce/fedora/)</ept>","source":"[Fedora](https://docs.docker.com/install/linux/docker-ce/fedora/)"},{"pos":[2944,3009],"content":"<bpt id=\"p1\">[</bpt>Ubuntu<ept id=\"p1\">](https://docs.docker.com/install/linux/docker-ce/ubuntu/)</ept>","source":"[Ubuntu](https://docs.docker.com/install/linux/docker-ce/ubuntu/)"},{"pos":[3013,3069],"content":"<bpt id=\"p1\">[</bpt>macOS<ept id=\"p1\">](https://docs.docker.com/docker-for-mac/install/)</ept>","source":"[macOS](https://docs.docker.com/docker-for-mac/install/)"},{"pos":[3073,3136],"content":"<bpt id=\"p1\">[</bpt>Windows<ept id=\"p1\">](https://docs.docker.com/docker-for-windows/install/)</ept>.","source":"[Windows](https://docs.docker.com/docker-for-windows/install/)."},{"pos":[3142,3194],"content":"Create a .NET Core 2.1 console app for Dockerization","linkify":"Create a .NET Core 2.1 console app for Dockerization","nodes":[{"content":"Create a .NET Core 2.1 console app for Dockerization","pos":[0,52]}]},{"content":"Open a command prompt and create a folder named <bpt id=\"p1\">*</bpt>Hello<ept id=\"p1\">*</ept>.","pos":[3196,3252],"source":"Open a command prompt and create a folder named *Hello*."},{"content":"Navigate to the folder you created and type the following commands:","pos":[3253,3320]},{"content":"Let's do a quick walkthrough:","pos":[3368,3397]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet new`</ph><ept id=\"p1\">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id=\"ph2\">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.","pos":[3429,3573],"source":"[`dotnet new`](../tools/dotnet-new.md) creates an up-to-date `Hello.csproj` project file with the dependencies necessary to build a console app."},{"content":"It also creates a <ph id=\"ph1\">`Program.cs`</ph>, a basic file containing the entry point for the application.","pos":[3575,3667],"source":"  It also creates a `Program.cs`, a basic file containing the entry point for the application."},{"pos":[3672,3687],"content":"<ph id=\"ph1\">`Hello.csproj`</ph>:","source":"`Hello.csproj`:"},{"content":"The project file specifies everything that's needed to restore dependencies and build the program.","pos":[3692,3790]},{"pos":[3797,3900],"content":"The <ph id=\"ph1\">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.","source":"The `OutputType` tag specifies that we're building an executable, in other words a console application."},{"content":"The <ph id=\"ph1\">`TargetFramework`</ph> tag specifies what .NET implementation we're targeting.","pos":[3906,3983],"source":"The `TargetFramework` tag specifies what .NET implementation we're targeting."},{"content":"In an advanced scenario, you can specify multiple target frameworks and build to the specified frameworks in a single operation.","pos":[3984,4112]},{"content":"In this tutorial, we build for .NET Core 2.1.","pos":[4113,4158]},{"pos":[4163,4176],"content":"<ph id=\"ph1\">`Program.cs`</ph>:","source":"`Program.cs`:"},{"content":"The program starts by <ph id=\"ph1\">`using System`</ph>.","pos":[4181,4218],"source":"The program starts by `using System`."},{"content":"This statement means, \"Bring everything in the <ph id=\"ph1\">`System`</ph> namespace into scope for this file.\"","pos":[4219,4311],"source":" This statement means, \"Bring everything in the `System` namespace into scope for this file.\""},{"content":"The <ph id=\"ph1\">`System`</ph> namespace includes basic constructs such as <ph id=\"ph2\">`string`</ph>, or numeric types.","pos":[4312,4396],"source":" The `System` namespace includes basic constructs such as `string`, or numeric types."},{"content":"We then define a namespace called <ph id=\"ph1\">`Hello`</ph>.","pos":[4401,4443],"source":"We then define a namespace called `Hello`."},{"content":"You can change namespace to anything you want.","pos":[4444,4490]},{"content":"A class named <ph id=\"ph1\">`Program`</ph> is defined within that namespace, with a <ph id=\"ph2\">`Main`</ph> method that takes an array of strings as its argument.","pos":[4491,4617],"source":" A class named `Program` is defined within that namespace, with a `Main` method that takes an array of strings as its argument."},{"content":"This array contains the list of arguments passed in when the compiled program is called.","pos":[4618,4706]},{"content":"In our example, the program only writes \"Hello World!\"","pos":[4707,4761]},{"content":"to the console.","pos":[4762,4777]},{"pos":[4782,5020],"content":"**dotnet new** runs the [`dotnet restore`](../tools/dotnet-restore.md) command. **Dotnet restore** restores the tree of dependencies with a [NuGet](https://www.nuget.org/)(.NET package manager) call.\nNuGet performs the following tasks:","leadings":["","   "],"nodes":[{"content":"<bpt id=\"p1\">**</bpt>dotnet new<ept id=\"p1\">**</ept> runs the <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet restore`</ph><ept id=\"p2\">](../tools/dotnet-restore.md)</ept> command.","pos":[0,79],"source":"**dotnet new** runs the [`dotnet restore`](../tools/dotnet-restore.md) command."},{"content":"<bpt id=\"p1\">**</bpt>Dotnet restore<ept id=\"p1\">**</ept> restores the tree of dependencies with a <bpt id=\"p2\">[</bpt>NuGet<ept id=\"p2\">](https://www.nuget.org/)</ept>(.NET package manager) call.","pos":[80,199],"source":"**Dotnet restore** restores the tree of dependencies with a [NuGet](https://www.nuget.org/)(.NET package manager) call."},{"content":"NuGet performs the following tasks:","pos":[200,235]}]},{"pos":[5026,5059],"content":"analyzes the <bpt id=\"p1\">*</bpt>Hello.csproj<ept id=\"p1\">*</ept> file.","source":"analyzes the *Hello.csproj* file."},{"content":"downloads the file dependencies (or grabs from your machine cache).","pos":[5065,5132]},{"pos":[5138,5180],"content":"writes the <bpt id=\"p1\">*</bpt>obj/project.assets.json<ept id=\"p1\">*</ept> file.","source":"writes the *obj/project.assets.json* file."},{"content":"The <bpt id=\"p1\">*</bpt>project.assets.json<ept id=\"p1\">*</ept> file is a complete set of the NuGet dependencies graph, binding resolutions, and other app metadata.","pos":[5185,5311],"source":"The *project.assets.json* file is a complete set of the NuGet dependencies graph, binding resolutions, and other app metadata."},{"content":"This required file is used by other tools, such as <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet build`</ph><ept id=\"p1\">](../tools/dotnet-build.md)</ept> and <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`dotnet run`</ph><ept id=\"p2\">](../tools/dotnet-run.md)</ept>, to correctly process the source code.","pos":[5312,5487],"source":" This required file is used by other tools, such as [`dotnet build`](../tools/dotnet-build.md) and [`dotnet run`](../tools/dotnet-run.md), to correctly process the source code."},{"pos":[5511,5692],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet run`</ph><ept id=\"p1\">](../tools/dotnet-run.md)</ept> calls <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`dotnet build`</ph><ept id=\"p2\">](../tools/dotnet-build.md)</ept> to confirm a successful build, and then calls <ph id=\"ph3\">`dotnet &lt;assembly.dll&gt;`</ph> to run the application.","source":"[`dotnet run`](../tools/dotnet-run.md) calls [`dotnet build`](../tools/dotnet-build.md) to confirm a successful build, and then calls `dotnet <assembly.dll>` to run the application."},{"pos":[5757,5856],"content":"For advanced scenarios,  see <bpt id=\"p1\">[</bpt>.NET Core Application Deployment<ept id=\"p1\">](../deploying/index.md)</ept> for details.","source":"For advanced scenarios,  see [.NET Core Application Deployment](../deploying/index.md) for details."},{"pos":[5861,5896],"content":"Dockerize the .NET Core application","linkify":"Dockerize the .NET Core application","nodes":[{"content":"Dockerize the .NET Core application","pos":[0,35]}]},{"content":"The Hello .NET Core console app successfully runs locally.","pos":[5898,5956]},{"content":"Now let's take it a step further and build and run the app in Docker.","pos":[5957,6026]},{"pos":[6032,6053],"content":"Your first Dockerfile","linkify":"Your first Dockerfile","nodes":[{"content":"Your first Dockerfile","pos":[0,21]}]},{"content":"Open your text editor and let's get started!","pos":[6055,6099]},{"content":"We're still working from the Hello directory we built the app in.","pos":[6100,6165]},{"content":"Add the following Docker instructions for either Linux or <bpt id=\"p1\">[</bpt>Windows Containers<ept id=\"p1\">](https://docs.microsoft.com/virtualization/windowscontainers/about/)</ept> to a new file.","pos":[6167,6328],"source":"Add the following Docker instructions for either Linux or [Windows Containers](https://docs.microsoft.com/virtualization/windowscontainers/about/) to a new file."},{"content":"When finished, save it in the root of your Hello directory as <bpt id=\"p1\">**</bpt>Dockerfile<ept id=\"p1\">**</ept>, with no extension (You may need to set your file type to <ph id=\"ph1\">`All types (*.*)`</ph> or something similar).","pos":[6329,6504],"source":" When finished, save it in the root of your Hello directory as **Dockerfile**, with no extension (You may need to set your file type to `All types (*.*)` or something similar)."},{"content":"The Dockerfile contains Docker build instructions that run sequentially.","pos":[6770,6842]},{"content":"The first instruction must be <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FROM<ept id=\"p2\">**</ept><ept id=\"p1\">](https://docs.docker.com/engine/reference/builder/#from)</ept>.","pos":[6844,6941],"source":"The first instruction must be [**FROM**](https://docs.docker.com/engine/reference/builder/#from)."},{"content":"This instruction initializes a new build stage and sets the Base Image for the remaining instructions.","pos":[6942,7044]},{"content":"The multi-arch tags pull either Windows or Linux containers depending on the Docker for Windows <bpt id=\"p1\">[</bpt>container mode<ept id=\"p1\">](https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers)</ept>.","pos":[7045,7247],"source":" The multi-arch tags pull either Windows or Linux containers depending on the Docker for Windows [container mode](https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers)."},{"content":"The Base Image for our sample is the 2.1-sdk image from the microsoft/dotnet repository,","pos":[7248,7336]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>WORKDIR<ept id=\"p2\">**</ept><ept id=\"p1\">](https://docs.docker.com/engine/reference/builder/#workdir)</ept> instruction sets the working directory for any remaining RUN, CMD, ENTRYPOINT, COPY, and ADD Dockerfile instructions.","pos":[7387,7581],"source":"The [**WORKDIR**](https://docs.docker.com/engine/reference/builder/#workdir) instruction sets the working directory for any remaining RUN, CMD, ENTRYPOINT, COPY, and ADD Dockerfile instructions."},{"content":"If the directory doesn't exist, it's created.","pos":[7582,7627]},{"content":"In this case, WORKDIR is set to the app directory.","pos":[7628,7678]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>COPY<ept id=\"p2\">**</ept><ept id=\"p1\">](https://docs.docker.com/engine/reference/builder/#copy)</ept> instruction copies new files or directories from the source path and adds them to the destination container filesystem.","pos":[7712,7902],"source":"The [**COPY**](https://docs.docker.com/engine/reference/builder/#copy) instruction copies new files or directories from the source path and adds them to the destination container filesystem."},{"content":"With this instruction, we are copying the C# project file to the container.","pos":[7903,7978]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RUN<ept id=\"p2\">**</ept><ept id=\"p1\">](https://docs.docker.com/engine/reference/builder/#run)</ept> instruction executes any commands in a new layer on top of the current image and commit the results.","pos":[8016,8185],"source":"The [**RUN**](https://docs.docker.com/engine/reference/builder/#run) instruction executes any commands in a new layer on top of the current image and commit the results."},{"content":"The resulting committed image is used for the next step in the Dockerfile.","pos":[8186,8260]},{"content":"We are running <bpt id=\"p1\">**</bpt>dotnet restore<ept id=\"p1\">**</ept> to get the needed dependencies of the C# project file.","pos":[8261,8349],"source":" We are running **dotnet restore** to get the needed dependencies of the C# project file."},{"pos":[8389,8576],"content":"This <bpt id=\"p1\">**</bpt>COPY<ept id=\"p1\">**</ept> instruction copies the rest of the files into our container into new <bpt id=\"p2\">[</bpt>layers<ept id=\"p2\">](https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/#images-and-layers)</ept>.","source":"This **COPY** instruction copies the rest of the files into our container into new [layers](https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/#images-and-layers)."},{"content":"We are publishing the app with this <bpt id=\"p1\">**</bpt>RUN<ept id=\"p1\">**</ept> instruction.","pos":[8607,8663],"source":"We are publishing the app with this **RUN** instruction."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>dotnet publish<ept id=\"p2\">**</ept><ept id=\"p1\">](../tools/dotnet-publish.md)</ept> command compiles the application, reads through its dependencies specified in the project file, and publishes the resulting set of files to a directory.","pos":[8664,8869],"source":" The [**dotnet publish**](../tools/dotnet-publish.md) command compiles the application, reads through its dependencies specified in the project file, and publishes the resulting set of files to a directory."},{"content":"Our app is published with a <bpt id=\"p1\">**</bpt>Release<ept id=\"p1\">**</ept> configuration and output to the default directory.","pos":[8870,8960],"source":" Our app is published with a **Release** configuration and output to the default directory."},{"pos":[9018,9158],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ENTRYPOINT<ept id=\"p2\">**</ept><ept id=\"p1\">](https://docs.docker.com/engine/reference/builder/#entrypoint)</ept> instruction allows the container to run as an executable.","source":"The [**ENTRYPOINT**](https://docs.docker.com/engine/reference/builder/#entrypoint) instruction allows the container to run as an executable."},{"content":"Now you have a Dockerfile that:","pos":[9218,9249]},{"content":"copies your app to the image","pos":[9253,9281]},{"content":"your app's dependencies to the image","pos":[9284,9320]},{"content":"builds the app to run as an executable","pos":[9323,9361]},{"pos":[9367,9404],"content":"Build and run the Hello .NET Core app","linkify":"Build and run the Hello .NET Core app","nodes":[{"content":"Build and run the Hello .NET Core app","pos":[0,37]}]},{"pos":[9411,9436],"content":"Essential Docker commands","linkify":"Essential Docker commands","nodes":[{"content":"Essential Docker commands","pos":[0,25]}]},{"content":"These Docker commands are essential:","pos":[9438,9474]},{"pos":[9478,9553],"content":"<bpt id=\"p1\">[</bpt>docker build<ept id=\"p1\">](https://docs.docker.com/engine/reference/commandline/build/)</ept>","source":"[docker build](https://docs.docker.com/engine/reference/commandline/build/)"},{"pos":[9556,9627],"content":"<bpt id=\"p1\">[</bpt>docker run<ept id=\"p1\">](https://docs.docker.com/engine/reference/commandline/run/)</ept>","source":"[docker run](https://docs.docker.com/engine/reference/commandline/run/)"},{"pos":[9630,9699],"content":"<bpt id=\"p1\">[</bpt>docker ps<ept id=\"p1\">](https://docs.docker.com/engine/reference/commandline/ps/)</ept>","source":"[docker ps](https://docs.docker.com/engine/reference/commandline/ps/)"},{"pos":[9702,9775],"content":"<bpt id=\"p1\">[</bpt>docker stop<ept id=\"p1\">](https://docs.docker.com/engine/reference/commandline/stop/)</ept>","source":"[docker stop](https://docs.docker.com/engine/reference/commandline/stop/)"},{"pos":[9778,9847],"content":"<bpt id=\"p1\">[</bpt>docker rm<ept id=\"p1\">](https://docs.docker.com/engine/reference/commandline/rm/)</ept>","source":"[docker rm](https://docs.docker.com/engine/reference/commandline/rm/)"},{"pos":[9850,9921],"content":"<bpt id=\"p1\">[</bpt>docker rmi<ept id=\"p1\">](https://docs.docker.com/engine/reference/commandline/rmi/)</ept>","source":"[docker rmi](https://docs.docker.com/engine/reference/commandline/rmi/)"},{"pos":[9924,9999],"content":"<bpt id=\"p1\">[</bpt>docker image<ept id=\"p1\">](https://docs.docker.com/engine/reference/commandline/image/)</ept>","source":"[docker image](https://docs.docker.com/engine/reference/commandline/image/)"},{"pos":[10006,10019],"content":"Build and run","linkify":"Build and run","nodes":[{"content":"Build and run","pos":[0,13]}]},{"content":"You wrote the dockerfile; now Docker builds your app and then runs the container.","pos":[10021,10102]},{"pos":[10200,10293],"content":"The output from the <ph id=\"ph1\">`docker build`</ph> command should be similar to the following console output:","source":"The output from the `docker build` command should be similar to the following console output:"},{"content":"As you can see from the output, the Docker Engine used the Dockerfile to build our container.","pos":[10909,11002]},{"pos":[11004,11095],"content":"The output from the <ph id=\"ph1\">`docker run`</ph> command should be similar to the following console output:","source":"The output from the `docker run` command should be similar to the following console output:"},{"content":"Congratulations!","pos":[11126,11142]},{"content":"You have just:","pos":[11143,11157]},{"content":"Created a local .NET Core app","pos":[11189,11218]},{"content":"Created a Dockerfile to build your first container","pos":[11223,11273]},{"content":"Built and ran your Dockerized app","pos":[11278,11311]},{"pos":[11316,11326],"content":"Next steps","linkify":"Next steps","nodes":[{"content":"Next steps","pos":[0,10]}]},{"content":"Here are some next steps you can take:","pos":[11328,11366]},{"pos":[11370,11529],"content":"<bpt id=\"p1\">[</bpt>Introduction to .NET Docker Images Video<ept id=\"p1\">](https://channel9.msdn.com/Shows/Code-Conversations/Introduction-to-NET-Docker-Images-with-Kendra-Havens?term=docker)</ept>","source":"[Introduction to .NET Docker Images Video](https://channel9.msdn.com/Shows/Code-Conversations/Introduction-to-NET-Docker-Images-with-Kendra-Havens?term=docker)"},{"pos":[11532,11709],"content":"<bpt id=\"p1\">[</bpt>Visual Studio, Docker &amp; Azure Container Instances better together!<ept id=\"p1\">](https://medium.com/@AliMazaheri/visual-studio-docker-azure-container-instances-better-together-bf8c2f0419ae)</ept>","source":"[Visual Studio, Docker & Azure Container Instances better together!](https://medium.com/@AliMazaheri/visual-studio-docker-azure-container-instances-better-together-bf8c2f0419ae)"},{"pos":[11712,11823],"content":"<bpt id=\"p1\">[</bpt>Docker for Azure Quickstarts<ept id=\"p1\">](https://docs.docker.com/docker-for-azure/#docker-community-edition-ce-for-azure)</ept>","source":"[Docker for Azure Quickstarts](https://docs.docker.com/docker-for-azure/#docker-community-edition-ce-for-azure)"},{"pos":[11826,11913],"content":"<bpt id=\"p1\">[</bpt>Deploy your app on Docker for Azure<ept id=\"p1\">](https://docs.docker.com/docker-for-azure/deploy/)</ept>","source":"[Deploy your app on Docker for Azure](https://docs.docker.com/docker-for-azure/deploy/)"},{"pos":[11917,12129],"content":"[!NOTE]\nIf you do not have an Azure subscription, [sign up today](https://azure.microsoft.com/free/?b=16.48) for a free 30-day account and get $200 in Azure Credits to try out any combination of Azure services.","leadings":["","> "],"nodes":[{"content":"If you do not have an Azure subscription, <bpt id=\"p1\">[</bpt>sign up today<ept id=\"p1\">](https://azure.microsoft.com/free/?b=16.48)</ept> for a free 30-day account and get $200 in Azure Credits to try out any combination of Azure services.","pos":[8,210],"source":"If you do not have an Azure subscription, [sign up today](https://azure.microsoft.com/free/?b=16.48) for a free 30-day account and get $200 in Azure Credits to try out any combination of Azure services."}]},{"pos":[12134,12167],"content":"Docker Images used in this sample","linkify":"Docker Images used in this sample","nodes":[{"content":"Docker Images used in this sample","pos":[0,33]}]},{"content":"The following Docker images are used in this sample","pos":[12169,12220]},{"pos":[12300,12317],"content":"Related resources","linkify":"Related resources","nodes":[{"content":"Related resources","pos":[0,17]}]},{"pos":[12321,12408],"content":"<bpt id=\"p1\">[</bpt>.NET Core Docker samples<ept id=\"p1\">](https://github.com/dotnet/dotnet-docker/tree/master/samples)</ept>","source":"[.NET Core Docker samples](https://github.com/dotnet/dotnet-docker/tree/master/samples)"},{"pos":[12411,12546],"content":"<bpt id=\"p1\">[</bpt>Dockerfile on Windows Containers<ept id=\"p1\">](https://docs.microsoft.com/virtualization/windowscontainers/manage-docker/manage-windows-dockerfile)</ept>","source":"[Dockerfile on Windows Containers](https://docs.microsoft.com/virtualization/windowscontainers/manage-docker/manage-windows-dockerfile)"},{"pos":[12549,12642],"content":"<bpt id=\"p1\">[</bpt>.NET Framework Docker samples<ept id=\"p1\">](https://github.com/Microsoft/dotnet-framework-docker-samples)</ept>","source":"[.NET Framework Docker samples](https://github.com/Microsoft/dotnet-framework-docker-samples)"},{"pos":[12645,12720],"content":"<bpt id=\"p1\">[</bpt>ASP.NET Core on DockerHub<ept id=\"p1\">](https://hub.docker.com/r/microsoft/aspnetcore/)</ept>","source":"[ASP.NET Core on DockerHub](https://hub.docker.com/r/microsoft/aspnetcore/)"},{"pos":[12723,12829],"content":"<bpt id=\"p1\">[</bpt>Dockerize a .NET Core application - Docker Tutorial<ept id=\"p1\">](https://docs.docker.com/engine/examples/dotnetcore/)</ept>","source":"[Dockerize a .NET Core application - Docker Tutorial](https://docs.docker.com/engine/examples/dotnetcore/)"},{"pos":[12832,12955],"content":"<bpt id=\"p1\">[</bpt>Working with Visual Studio Docker Tools<ept id=\"p1\">](https://docs.microsoft.com/aspnet/core/publishing/visual-studio-tools-for-docker)</ept>","source":"[Working with Visual Studio Docker Tools](https://docs.microsoft.com/aspnet/core/publishing/visual-studio-tools-for-docker)"},{"pos":[12958,13191],"content":"<bpt id=\"p1\">[</bpt>Deploying Docker Images from the Azure Container Registry to Azure Container Instances<ept id=\"p1\">](https://blogs.msdn.microsoft.com/stevelasker/2017/07/28/deploying-docker-images-from-the-azure-container-registry-to-azure-container-instances/)</ept>","source":"[Deploying Docker Images from the Azure Container Registry to Azure Container Instances](https://blogs.msdn.microsoft.com/stevelasker/2017/07/28/deploying-docker-images-from-the-azure-container-registry-to-azure-container-instances/)"}]}