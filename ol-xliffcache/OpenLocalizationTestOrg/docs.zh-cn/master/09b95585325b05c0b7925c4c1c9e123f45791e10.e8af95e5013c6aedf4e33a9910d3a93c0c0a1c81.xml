{"content":"---\ntitle: \"* Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.*\"\nhelpviewer_keywords: \n  - \"arithmetic operators [Visual Basic], multiplication\"\n  - \"operators [Visual Basic], multiplication\"\n  - \"* operator [Visual Basic]\"\n  - \"multiplication operator [Visual Basic], syntax\"\n  - \"math operators [Visual Basic]\"\nms.assetid: 2b210382-99da-4195-89ba-b1d06f5e89ad\n---\n# * Operator (Visual Basic)\nMultiplies two numbers.  \n  \n## Syntax  \n  \n```  \nnumber1 * number2  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`number1`|Required. Any numeric expression.|  \n|`number2`|Required. Any numeric expression.|  \n  \n## Result  \n The result is the product of `number1` and `number2`.  \n  \n## Supported Types  \n All numeric types, including the unsigned and floating-point types and `Decimal`.  \n  \n## Remarks  \n The data type of the result depends on the types of the operands. The following table shows how the data type of the result is determined.  \n  \n|Operand data types|Result data type|  \n|---|---|  \n|Both expressions are integral data types ([SByte](../../../visual-basic/language-reference/data-types/sbyte-data-type.md), [Byte](../../../visual-basic/language-reference/data-types/byte-data-type.md), [Short](../../../visual-basic/language-reference/data-types/short-data-type.md), [UShort](../../../visual-basic/language-reference/data-types/ushort-data-type.md), [Integer](../../../visual-basic/language-reference/data-types/integer-data-type.md), [UInteger](../../../visual-basic/language-reference/data-types/uinteger-data-type.md), [Long](../../../visual-basic/language-reference/data-types/long-data-type.md), [ULong](../../../visual-basic/language-reference/data-types/ulong-data-type.md))|A numeric data type appropriate for the data types of `number1` and `number2`. See the \"Integer Arithmetic\" tables in [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md).|  \n|Both expressions are [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md)|`Decimal`|  \n|Both expressions are [Single](../../../visual-basic/language-reference/data-types/single-data-type.md)|`Single`|  \n|Either expression is a floating-point data type (`Single` or [Double](../../../visual-basic/language-reference/data-types/double-data-type.md)) but not both `Single` (note `Decimal` is not a floating-point data type)|`Double`|  \n  \n If an expression evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), it is treated as zero.  \n  \n## Overloading  \n The `*` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n This example uses the `*` operator to multiply two numbers. The result is the product of the two operands.  \n  \n [!code-vb[VbVbalrOperators#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#4)]  \n  \n## See also\n\n- [*= Operator](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md)\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)\n","nodes":[{"pos":[4,380],"embed":true,"restype":"x-metadata","content":"title: \"* Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.*\"\nhelpviewer_keywords: \n  - \"arithmetic operators [Visual Basic], multiplication\"\n  - \"operators [Visual Basic], multiplication\"\n  - \"* operator [Visual Basic]\"\n  - \"multiplication operator [Visual Basic], syntax\"\n  - \"math operators [Visual Basic]\"\nms.assetid: 2b210382-99da-4195-89ba-b1d06f5e89ad","nodes":[{"content":"* Operator (Visual Basic)","nodes":[{"pos":[2,25],"content":"Operator (Visual Basic)","nodes":[{"content":"Operator (Visual Basic)","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[387,412],"content":"* Operator (Visual Basic)","linkify":"* Operator (Visual Basic)","nodes":[{"content":"* Operator (Visual Basic)","pos":[0,25]}]},{"content":"Multiplies two numbers.","pos":[413,436]},{"pos":[445,451],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[495,500],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[507,511]},{"content":"Definition","pos":[512,522]},{"content":"Required.","pos":[549,558]},{"content":"Any numeric expression.","pos":[559,582]},{"content":"Required.","pos":[597,606]},{"content":"Any numeric expression.","pos":[607,630]},{"pos":[640,646],"content":"Result","linkify":"Result","nodes":[{"content":"Result","pos":[0,6]}]},{"pos":[650,703],"content":"The result is the product of <ph id=\"ph1\">`number1`</ph> and <ph id=\"ph2\">`number2`</ph>.","source":"The result is the product of `number1` and `number2`."},{"pos":[712,727],"content":"Supported Types","linkify":"Supported Types","nodes":[{"content":"Supported Types","pos":[0,15]}]},{"pos":[731,812],"content":"All numeric types, including the unsigned and floating-point types and <ph id=\"ph1\">`Decimal`</ph>.","source":"All numeric types, including the unsigned and floating-point types and `Decimal`."},{"pos":[821,828],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The data type of the result depends on the types of the operands.","pos":[832,897]},{"content":"The following table shows how the data type of the result is determined.","pos":[898,970]},{"content":"Operand data types","pos":[977,995]},{"content":"Result data type","pos":[996,1012]},{"pos":[1029,1726],"content":"Both expressions are integral data types (<bpt id=\"p1\">[</bpt>SByte<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/sbyte-data-type.md)</ept>, <bpt id=\"p2\">[</bpt>Byte<ept id=\"p2\">](../../../visual-basic/language-reference/data-types/byte-data-type.md)</ept>, <bpt id=\"p3\">[</bpt>Short<ept id=\"p3\">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>, <bpt id=\"p4\">[</bpt>UShort<ept id=\"p4\">](../../../visual-basic/language-reference/data-types/ushort-data-type.md)</ept>, <bpt id=\"p5\">[</bpt>Integer<ept id=\"p5\">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>, <bpt id=\"p6\">[</bpt>UInteger<ept id=\"p6\">](../../../visual-basic/language-reference/data-types/uinteger-data-type.md)</ept>, <bpt id=\"p7\">[</bpt>Long<ept id=\"p7\">](../../../visual-basic/language-reference/data-types/long-data-type.md)</ept>, <bpt id=\"p8\">[</bpt>ULong<ept id=\"p8\">](../../../visual-basic/language-reference/data-types/ulong-data-type.md)</ept>)","source":"Both expressions are integral data types ([SByte](../../../visual-basic/language-reference/data-types/sbyte-data-type.md), [Byte](../../../visual-basic/language-reference/data-types/byte-data-type.md), [Short](../../../visual-basic/language-reference/data-types/short-data-type.md), [UShort](../../../visual-basic/language-reference/data-types/ushort-data-type.md), [Integer](../../../visual-basic/language-reference/data-types/integer-data-type.md), [UInteger](../../../visual-basic/language-reference/data-types/uinteger-data-type.md), [Long](../../../visual-basic/language-reference/data-types/long-data-type.md), [ULong](../../../visual-basic/language-reference/data-types/ulong-data-type.md))"},{"content":"A numeric data type appropriate for the data types of <ph id=\"ph1\">`number1`</ph> and <ph id=\"ph2\">`number2`</ph>.","pos":[1727,1805],"source":"A numeric data type appropriate for the data types of `number1` and `number2`."},{"content":"See the \"Integer Arithmetic\" tables in <bpt id=\"p1\">[</bpt>Data Types of Operator Results<ept id=\"p1\">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept>.","pos":[1806,1964],"source":" See the \"Integer Arithmetic\" tables in [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)."},{"pos":[1969,2073],"content":"Both expressions are <bpt id=\"p1\">[</bpt>Decimal<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/decimal-data-type.md)</ept>","source":"Both expressions are [Decimal](../../../visual-basic/language-reference/data-types/decimal-data-type.md)"},{"pos":[2088,2190],"content":"Both expressions are <bpt id=\"p1\">[</bpt>Single<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/single-data-type.md)</ept>","source":"Both expressions are [Single](../../../visual-basic/language-reference/data-types/single-data-type.md)"},{"pos":[2204,2420],"content":"Either expression is a floating-point data type (<ph id=\"ph1\">`Single`</ph> or <bpt id=\"p1\">[</bpt>Double<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>) but not both <ph id=\"ph2\">`Single`</ph> (note <ph id=\"ph3\">`Decimal`</ph> is not a floating-point data type)","source":"Either expression is a floating-point data type (`Single` or [Double](../../../visual-basic/language-reference/data-types/double-data-type.md)) but not both `Single` (note `Decimal` is not a floating-point data type)"},{"pos":[2437,2553],"content":"If an expression evaluates to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept>, it is treated as zero.","source":"If an expression evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), it is treated as zero."},{"pos":[2562,2573],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`*`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[2577,2735],"source":"The `*` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[2736,2844]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[2845,2986],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[2995,3002],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses the <ph id=\"ph1\">`*`</ph> operator to multiply two numbers.","pos":[3006,3065],"source":"This example uses the `*` operator to multiply two numbers."},{"content":"The result is the product of the two operands.","pos":[3066,3112]},{"pos":[3243,3251],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3255,3358],"content":"<bpt id=\"p1\">[</bpt>*= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md)</ept>","source":"[*= Operator](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md)"},{"pos":[3361,3459],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[3462,3574],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[3577,3701],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[3704,3851],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"}]}