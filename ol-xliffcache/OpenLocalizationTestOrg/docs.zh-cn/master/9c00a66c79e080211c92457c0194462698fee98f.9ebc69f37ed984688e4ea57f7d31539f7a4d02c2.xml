{"content":"---\ntitle: \"How to: Find the Set Difference Between Two Lists (LINQ) (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: b5b25474-10a8-4df6-aab5-75621bb6b68e\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Find the Set Difference Between Two Lists (LINQ) (Visual Basic)\nThis example shows how to use LINQ to compare two lists of strings and output those lines that are in names1.txt but not in names2.txt.  \n  \n### To create the data files  \n  \n1.  Copy names1.txt and names2.txt to your solution folder as shown in [How to: Combine and Compare String Collections (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md).  \n  \n## Example  \n  \n```vb  \nClass CompareLists  \n  \n    Shared Sub Main()  \n  \n        ' Create the IEnumerable data sources.  \n        Dim names1 As String() = System.IO.File.ReadAllLines(\"../../../names1.txt\")  \n        Dim names2 As String() = System.IO.File.ReadAllLines(\"../../../names2.txt\")  \n  \n        ' Create the query. Note that method syntax must be used here.  \n        Dim differenceQuery = names1.Except(names2)  \n        Console.WriteLine(\"The following lines are in names1.txt but not names2.txt\")  \n  \n        ' Execute the query.  \n        For Each name As String In differenceQuery  \n            Console.WriteLine(name)  \n        Next  \n  \n        ' Keep console window open in debug mode.  \n        Console.WriteLine(\"Press any key to exit.\")  \n        Console.ReadKey()  \n    End Sub  \nEnd Class  \n' Output:  \n' The following lines are in names1.txt but not names2.txt  \n' Potra, Cristina  \n' Noriega, Fabricio  \n' Aw, Kam Foo  \n' Toyoshima, Tim  \n' Guy, Wey Yuan  \n' Garcia, Debra  \n```  \n  \n Some types of query operations in Visual Basic, such as <xref:System.Linq.Enumerable.Except%2A>, <xref:System.Linq.Enumerable.Distinct%2A>, <xref:System.Linq.Enumerable.Union%2A>, and <xref:System.Linq.Enumerable.Concat%2A>, can only be expressed in method-based syntax.  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace.  \n  \n## See Also  \n [LINQ and Strings (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)","nodes":[{"pos":[12,100],"content":"How to: Find the Set Difference Between Two Lists (LINQ) (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Find the Set Difference Between Two Lists (LINQ) (Visual Basic) | Microsoft Docs","pos":[0,88]}]},{"pos":[481,552],"content":"How to: Find the Set Difference Between Two Lists (LINQ) (Visual Basic)","linkify":"How to: Find the Set Difference Between Two Lists (LINQ) (Visual Basic)","nodes":[{"content":"How to: Find the Set Difference Between Two Lists (LINQ) (Visual Basic)","pos":[0,71]}]},{"content":"This example shows how to use LINQ to compare two lists of strings and output those lines that are in names1.txt but not in names2.txt.","pos":[553,688]},{"pos":[698,722],"content":"To create the data files","linkify":"To create the data files","nodes":[{"content":"To create the data files","pos":[0,24]}]},{"pos":[732,982],"content":"Copy names1.txt and names2.txt to your solution folder as shown in <bpt id=\"p1\">[</bpt>How to: Combine and Compare String Collections (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md)</ept>.","source":"Copy names1.txt and names2.txt to your solution folder as shown in [How to: Combine and Compare String Collections (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md)."},{"pos":[991,998],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Some types of query operations in Visual Basic, such as <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph>, can only be expressed in method-based syntax.","pos":[2001,2271],"source":"Some types of query operations in Visual Basic, such as <xref:System.Linq.Enumerable.Except%2A>, <xref:System.Linq.Enumerable.Distinct%2A>, <xref:System.Linq.Enumerable.Union%2A>, and <xref:System.Linq.Enumerable.Concat%2A>, can only be expressed in method-based syntax."},{"pos":[2280,2298],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[2302,2465],"content":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <ph id=\"ph1\">`Imports`</ph> statement for the System.Linq namespace.","source":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace."},{"pos":[2474,2482],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2486,2597],"content":"<bpt id=\"p1\">[</bpt>LINQ and Strings (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)</ept>","source":"[LINQ and Strings (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)"}]}