{"content":"---\ntitle: \"OperationScope | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 56206a21-1e63-422d-b92a-e5d8b713e707\ncaps.latest.revision: 7\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# OperationScope\nThis sample demonstrates how the messaging activities, <xref:System.ServiceModel.Activities.Receive> and <xref:System.ServiceModel.Activities.SendReply> can be used to expose an existing custom activity as an operation in a workflow service. This sample includes a new custom activity called an `OperationScope`. It is intended to ease the development of a workflow service by allowing users to author the body of their operations separately as custom activities and then easily exposing them as service operations using the `OperationScope` activity. For example, a custom `Add` activity that takes two `in` arguments and returns one `out` argument could be exposed as an `Add` operation on the workflow service by dropping it into an `OperationScope`.  \n  \n The scope works by inspecting the activity provided as its body. Any unbound `in` arguments are assumed to be inputs from the incoming message. All `out` arguments, regardless of whether they are bound, are assumed to be outputs in the subsequent reply message. The exposed operation’s name is taken from the display name of the `OperationScope` activity. The end result is that the body activity is wrapped in a <xref:System.ServiceModel.Activities.Receive> and <xref:System.ServiceModel.Activities.SendReply> with the parameters from the messages bound to the arguments of the activity.  \n  \n This sample exposes a workflow service using HTTP endpoints. To run, proper URL ACLs must be added. [!INCLUDE[crdefault](../../../../includes/crdefault-md.md)][Configuring HTTP and HTTPS](http://go.microsoft.com/fwlink/?LinkId=70353). Executing the following command at an elevated prompt adds the appropriate ACLs (ensure that your Domain and Username are substituted for %DOMAIN%\\\\%UserName%).  \n  \n **netsh http add urlacl url=http://+:8000/ user=%DOMAIN%\\\\%UserName%**  \n  \n### To run the sample  \n  \n1.  Open the OperationScope.sln solution in [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)].  \n  \n2.  Set multiple start-up projects by right-clicking the solution in Solution Explorer and selecting **Set Startup Projects**. Add Scenario and Scenario_Client (in that order) as multiple start-up projects.  \n  \n3.  Press CTRL+SHIFT+B to build the solution.  \n  \n    > [!WARNING]\n    >  This step is required to view the BankService.xaml workflow due to the custom activity `OperationScope`.  \n  \n4.  Press CTRL+F5 to run the application. The Scenario_Client console prompts you for inputs and the corresponding output is seen in the Scenario console.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Scenario\\Services\\OperationScope`  \n  \n## See Also","nodes":[{"pos":[12,43],"content":"OperationScope | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"OperationScope | Microsoft Docs","pos":[0,31]}]},{"pos":[308,322],"content":"OperationScope","linkify":"OperationScope","nodes":[{"content":"OperationScope","pos":[0,14]}]},{"content":"This sample demonstrates how the messaging activities, <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> can be used to expose an existing custom activity as an operation in a workflow service.","pos":[323,564],"source":"This sample demonstrates how the messaging activities, <xref:System.ServiceModel.Activities.Receive> and <xref:System.ServiceModel.Activities.SendReply> can be used to expose an existing custom activity as an operation in a workflow service."},{"content":"This sample includes a new custom activity called an <ph id=\"ph1\">`OperationScope`</ph>.","pos":[565,635],"source":" This sample includes a new custom activity called an `OperationScope`."},{"content":"It is intended to ease the development of a workflow service by allowing users to author the body of their operations separately as custom activities and then easily exposing them as service operations using the <ph id=\"ph1\">`OperationScope`</ph> activity.","pos":[636,874],"source":" It is intended to ease the development of a workflow service by allowing users to author the body of their operations separately as custom activities and then easily exposing them as service operations using the `OperationScope` activity."},{"content":"For example, a custom <ph id=\"ph1\">`Add`</ph> activity that takes two <ph id=\"ph2\">`in`</ph> arguments and returns one <ph id=\"ph3\">`out`</ph> argument could be exposed as an <ph id=\"ph4\">`Add`</ph> operation on the workflow service by dropping it into an <ph id=\"ph5\">`OperationScope`</ph>.","pos":[875,1076],"source":" For example, a custom `Add` activity that takes two `in` arguments and returns one `out` argument could be exposed as an `Add` operation on the workflow service by dropping it into an `OperationScope`."},{"content":"The scope works by inspecting the activity provided as its body.","pos":[1083,1147]},{"content":"Any unbound <ph id=\"ph1\">`in`</ph> arguments are assumed to be inputs from the incoming message.","pos":[1148,1226],"source":" Any unbound `in` arguments are assumed to be inputs from the incoming message."},{"content":"All <ph id=\"ph1\">`out`</ph> arguments, regardless of whether they are bound, are assumed to be outputs in the subsequent reply message.","pos":[1227,1344],"source":" All `out` arguments, regardless of whether they are bound, are assumed to be outputs in the subsequent reply message."},{"content":"The exposed operation’s name is taken from the display name of the <ph id=\"ph1\">`OperationScope`</ph> activity.","pos":[1345,1438],"source":" The exposed operation’s name is taken from the display name of the `OperationScope` activity."},{"content":"The end result is that the body activity is wrapped in a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> with the parameters from the messages bound to the arguments of the activity.","pos":[1439,1671],"source":" The end result is that the body activity is wrapped in a <xref:System.ServiceModel.Activities.Receive> and <xref:System.ServiceModel.Activities.SendReply> with the parameters from the messages bound to the arguments of the activity."},{"content":"This sample exposes a workflow service using HTTP endpoints.","pos":[1678,1738]},{"content":"To run, proper URL ACLs must be added.","pos":[1739,1777]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Configuring HTTP and HTTPS<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=70353)</ept>.","pos":[1778,1912],"source":"[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)][Configuring HTTP and HTTPS](http://go.microsoft.com/fwlink/?LinkId=70353)."},{"content":"Executing the following command at an elevated prompt adds the appropriate ACLs (ensure that your Domain and Username are substituted for %DOMAIN%<ph id=\"ph1\">\\\\</ph>%UserName%).","pos":[1913,2073],"source":" Executing the following command at an elevated prompt adds the appropriate ACLs (ensure that your Domain and Username are substituted for %DOMAIN%\\\\%UserName%)."},{"pos":[2080,2150],"content":"<bpt id=\"p1\">**</bpt>netsh http add urlacl url=http://+:8000/ user=%DOMAIN%<ph id=\"ph1\">\\\\</ph>%UserName%<ept id=\"p1\">**</ept>","source":"**netsh http add urlacl url=http://+:8000/ user=%DOMAIN%\\\\%UserName%**"},{"pos":[2160,2177],"content":"To run the sample","linkify":"To run the sample","nodes":[{"content":"To run the sample","pos":[0,17]}]},{"pos":[2187,2281],"content":"Open the OperationScope.sln solution in <ph id=\"ph1\">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.","source":"Open the OperationScope.sln solution in [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]."},{"content":"Set multiple start-up projects by right-clicking the solution in Solution Explorer and selecting <bpt id=\"p1\">**</bpt>Set Startup Projects<ept id=\"p1\">**</ept>.","pos":[2291,2413],"source":"Set multiple start-up projects by right-clicking the solution in Solution Explorer and selecting **Set Startup Projects**."},{"content":"Add Scenario and Scenario_Client (in that order) as multiple start-up projects.","pos":[2414,2493]},{"content":"Press CTRL+SHIFT+B to build the solution.","pos":[2503,2544]},{"pos":[2556,2678],"content":"[!WARNING]\nThis step is required to view the BankService.xaml workflow due to the custom activity `OperationScope`.","leadings":["","    >  "],"nodes":[{"content":"This step is required to view the BankService.xaml workflow due to the custom activity <ph id=\"ph1\">`OperationScope`</ph>.","pos":[11,115],"source":"This step is required to view the BankService.xaml workflow due to the custom activity `OperationScope`."}]},{"content":"Press CTRL+F5 to run the application.","pos":[2688,2725]},{"content":"The Scenario_Client console prompts you for inputs and the corresponding output is seen in the Scenario console.","pos":[2726,2838]},{"pos":[2846,2978],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[3032,3358],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[3359,3409]},{"pos":[3497,3505],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}