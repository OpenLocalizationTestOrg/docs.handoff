<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="countdownevent.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d3825ef73a6ec312ff51d1bddf5360f3de6cc69</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\countdownevent.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82b8ee4b33bb19956e40fe28c8d8410d22bf7c2a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7659483d3000b03546e34dddcf356406d86880b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>CountdownEvent</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CountdownEvent</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.CountdownEvent?displayProperty=nameWithType&gt;</ph> is a synchronization primitive that unblocks its waiting threads after it has been signaled a certain number of times.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> is designed for scenarios in which you would otherwise have to use a <ph id="ph2">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> and manually decrement a variable before signaling the event.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, in a fork/join scenario, you can just create a <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> that has a signal count of 5, and then start five work items on the thread pool and have each work item call <ph id="ph2">&lt;xref:System.Threading.CountdownEvent.Signal%2A&gt;</ph> when it completes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each call to <ph id="ph1">&lt;xref:System.Threading.CountdownEvent.Signal%2A&gt;</ph> decrements the signal count by 1.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>On the main thread, the call to <ph id="ph1">&lt;xref:System.Threading.CountdownEvent.Wait%2A&gt;</ph> will block until the signal count is zero.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For code that does not have to interact with legacy .NET Framework synchronization APIs, consider using <ph id="ph1">&lt;xref:System.Threading.Tasks.Task?displayProperty=nameWithType&gt;</ph> objects or the <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.Invoke%2A&gt;</ph> method for an even easier approach to expressing fork-join parallelism.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> has these additional features:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The wait operation can be canceled by using cancellation tokens.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Its signal count can be incremented after the instance is created.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Instances can be reused after <ph id="ph1">&lt;xref:System.Threading.CountdownEvent.Wait%2A&gt;</ph> has returned by calling the <ph id="ph2">&lt;xref:System.Threading.CountdownEvent.Reset%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Instances expose a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> for integration with other .NET Framework synchronization APIs such as <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use a <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> with <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> work items.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CountdownEvent With Cancellation</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows how to cancel the wait operation on <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> by using a cancellation token.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The basic pattern follows the model for unified cancellation, which is introduced in <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cancellation in Managed Threads<ept id="p1">](../../../docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Note that the wait operation does not cancel the threads that are signaling it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Typically, cancellation is applied to a logical operation, and that can include waiting on the event as well as all the work items that the wait is synchronizing.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this example, each work item is passed a copy of the same cancellation token so that it can respond to the cancellation request.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>