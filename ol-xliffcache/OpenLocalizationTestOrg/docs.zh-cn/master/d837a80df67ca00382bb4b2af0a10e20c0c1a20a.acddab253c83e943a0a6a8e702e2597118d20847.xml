{"content":"---\ntitle: \"Handling DataSet Events | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 54edefe0-bc38-419b-b486-3d8a0c356f13\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Handling DataSet Events\nThe <xref:System.Data.DataSet> object provides three events: <xref:System.ComponentModel.MarshalByValueComponent.Disposed>, <xref:System.Data.DataSet.Initialized>, and <xref:System.Data.DataSet.MergeFailed>.  \n  \n## The MergeFailed Event  \n The most commonly used event of the `DataSet` object is `MergeFailed`, which is raised when the schema of the `DataSet` objects being merged are in conflict. This occurs when a target and source <xref:System.Data.DataRow> have the same primary key value, and the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `true`. For example, if the primary key columns of a table being merged are the same between the tables in the two `DataSet` objects, an exception is thrown and the `MergeFailed` event is raised. The <xref:System.Data.MergeFailedEventArgs> object passed to the `MergeFailed` event have a <xref:System.Data.MergeFailedEventArgs.Conflict%2A> property that identifies the conflict in schema between the two `DataSet` objects, and a <xref:System.Data.MergeFailedEventArgs.Table%2A> property that identifies the name of the table in conflict.  \n  \n The following code fragment demonstrates how to add an event handler for the `MergeFailed` event.  \n  \n```vb  \nAddHandler workDS.MergeFailed, New MergeFailedEventHandler( _  \n  AddressOf DataSetMergeFailed)  \n  \nPrivate Shared Sub DataSetMergeFailed(  _  \n  sender As Object,args As MergeFailedEventArgs)  \n  Console.WriteLine(\"Merge failed for table \" & args.Table.TableName)  \n  Console.WriteLine(\"Conflict = \" & args.Conflict)  \nEnd Sub  \n  \n```  \n  \n```csharp  \nworkDS.MergeFailed += new MergeFailedEventHandler(DataSetMergeFailed);  \n  \nprivate static void DataSetMergeFailed(  \n  object sender, MergeFailedEventArgs args)  \n{  \n  Console.WriteLine(\"Merge failed for table \" + args.Table.TableName);  \n  Console.WriteLine(\"Conflict = \" + args.Conflict);  \n}  \n```  \n  \n## The Initialized Event  \n The <xref:System.Data.DataSet.Initialized> event occurs after the `DataSet` constructor initializes a new instance of the `DataSet`.  \n  \n The <xref:System.Data.DataSet.IsInitialized%2A> property returns `true` if the `DataSet` has completed initialization; otherwise it returns `false`. The <xref:System.Data.DataSet.BeginInit%2A> method, which begins the initialization of a `DataSet`, sets <xref:System.Data.DataSet.IsInitialized%2A> to `false`. The <xref:System.Data.DataSet.EndInit%2A> method, which ends the initialization of the `DataSet`, sets it to `true`. These methods are used by the [!INCLUDE[vsprvs](../../../../../includes/vsprvs-md.md)] design environment to initialize a `DataSet` that is being used by another component. You will not commonly use them in your code.  \n  \n## The Disposed Event  \n `DataSet` is derived from the <xref:System.ComponentModel.MarshalByValueComponent> class, which exposes both the <xref:System.ComponentModel.MarshalByValueComponent.Dispose%2A> method and the <xref:System.ComponentModel.MarshalByValueComponent.Disposed> event. The <xref:System.ComponentModel.MarshalByValueComponent.Disposed>event adds an event handler to listen to the disposed event on the component. You can use the <xref:System.ComponentModel.MarshalByValueComponent.Disposed>event of a `DataSet` if you want to execute code when the <xref:System.ComponentModel.MarshalByValueComponent.Dispose%2A>method is called. <xref:System.ComponentModel.MarshalByValueComponent.Dispose%2A>releases the resources used by the <xref:System.ComponentModel.MarshalByValueComponent>.  \n  \n> [!NOTE]\n>  The `DataSet` and `DataTable` objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting. These are the only ADO.NET objects that can be remoted. For more information, see [Remote Objects](http://msdn.microsoft.com/en-us/515686e6-0a8d-42f7-8188-73abede57c58).  \n  \n For information about other events available when working with a `DataSet`, see [Handling DataTable Events](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md) and [Handling DataAdapter Events](../../../../../docs/framework/data/adonet/handling-dataadapter-events.md).  \n  \n## See Also  \n [DataSets, DataTables, and DataViews](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)   \n [Validating Data](http://msdn.microsoft.com/library/b3a9ee4e-5d4d-4411-9c56-c811f2b4ee7e)   \n [Retrieving and Modifying Data in ADO.NET](../../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[4,354],"nodes":[{"content":"Handling DataSet Events | Microsoft Docs","nodes":[{"pos":[0,40],"content":"Handling DataSet Events | Microsoft Docs","nodes":[{"content":"Handling DataSet Events | Microsoft Docs","pos":[0,40]}]}],"pos":[6,49],"yaml":true}],"content":"title: \"Handling DataSet Events | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 54edefe0-bc38-419b-b486-3d8a0c356f13\ncaps.latest.revision: 4\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","yamlblock":true},{"pos":[361,384],"content":"Handling DataSet Events","linkify":"Handling DataSet Events","nodes":[{"content":"Handling DataSet Events","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> object provides three events: <ph id=\"ph2\">&lt;xref:System.ComponentModel.MarshalByValueComponent.Disposed&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Data.DataSet.Initialized&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Data.DataSet.MergeFailed&gt;</ph>.","pos":[385,592],"source":"The <xref:System.Data.DataSet> object provides three events: <xref:System.ComponentModel.MarshalByValueComponent.Disposed>, <xref:System.Data.DataSet.Initialized>, and <xref:System.Data.DataSet.MergeFailed>."},{"pos":[601,622],"content":"The MergeFailed Event","linkify":"The MergeFailed Event","nodes":[{"content":"The MergeFailed Event","pos":[0,21]}]},{"content":"The most commonly used event of the <ph id=\"ph1\">`DataSet`</ph> object is <ph id=\"ph2\">`MergeFailed`</ph>, which is raised when the schema of the <ph id=\"ph3\">`DataSet`</ph> objects being merged are in conflict.","pos":[626,783],"source":"The most commonly used event of the `DataSet` object is `MergeFailed`, which is raised when the schema of the `DataSet` objects being merged are in conflict."},{"content":"This occurs when a target and source <ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph> have the same primary key value, and the <ph id=\"ph2\">&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;</ph> property is set to <ph id=\"ph3\">`true`</ph>.","pos":[784,964],"source":" This occurs when a target and source <xref:System.Data.DataRow> have the same primary key value, and the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `true`."},{"content":"For example, if the primary key columns of a table being merged are the same between the tables in the two <ph id=\"ph1\">`DataSet`</ph> objects, an exception is thrown and the <ph id=\"ph2\">`MergeFailed`</ph> event is raised.","pos":[965,1152],"source":" For example, if the primary key columns of a table being merged are the same between the tables in the two `DataSet` objects, an exception is thrown and the `MergeFailed` event is raised."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.MergeFailedEventArgs&gt;</ph> object passed to the <ph id=\"ph2\">`MergeFailed`</ph> event have a <ph id=\"ph3\">&lt;xref:System.Data.MergeFailedEventArgs.Conflict%2A&gt;</ph> property that identifies the conflict in schema between the two <ph id=\"ph4\">`DataSet`</ph> objects, and a <ph id=\"ph5\">&lt;xref:System.Data.MergeFailedEventArgs.Table%2A&gt;</ph> property that identifies the name of the table in conflict.","pos":[1153,1494],"source":" The <xref:System.Data.MergeFailedEventArgs> object passed to the `MergeFailed` event have a <xref:System.Data.MergeFailedEventArgs.Conflict%2A> property that identifies the conflict in schema between the two `DataSet` objects, and a <xref:System.Data.MergeFailedEventArgs.Table%2A> property that identifies the name of the table in conflict."},{"pos":[1501,1598],"content":"The following code fragment demonstrates how to add an event handler for the <ph id=\"ph1\">`MergeFailed`</ph> event.","source":"The following code fragment demonstrates how to add an event handler for the `MergeFailed` event."},{"pos":[2278,2299],"content":"The Initialized Event","linkify":"The Initialized Event","nodes":[{"content":"The Initialized Event","pos":[0,21]}]},{"pos":[2303,2435],"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.Initialized&gt;</ph> event occurs after the <ph id=\"ph2\">`DataSet`</ph> constructor initializes a new instance of the <ph id=\"ph3\">`DataSet`</ph>.","source":"The <xref:System.Data.DataSet.Initialized> event occurs after the `DataSet` constructor initializes a new instance of the `DataSet`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.IsInitialized%2A&gt;</ph> property returns <ph id=\"ph2\">`true`</ph> if the <ph id=\"ph3\">`DataSet`</ph> has completed initialization; otherwise it returns <ph id=\"ph4\">`false`</ph>.","pos":[2442,2590],"source":"The <xref:System.Data.DataSet.IsInitialized%2A> property returns `true` if the `DataSet` has completed initialization; otherwise it returns `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.BeginInit%2A&gt;</ph> method, which begins the initialization of a <ph id=\"ph2\">`DataSet`</ph>, sets <ph id=\"ph3\">&lt;xref:System.Data.DataSet.IsInitialized%2A&gt;</ph> to <ph id=\"ph4\">`false`</ph>.","pos":[2591,2751],"source":" The <xref:System.Data.DataSet.BeginInit%2A> method, which begins the initialization of a `DataSet`, sets <xref:System.Data.DataSet.IsInitialized%2A> to `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.DataSet.EndInit%2A&gt;</ph> method, which ends the initialization of the <ph id=\"ph2\">`DataSet`</ph>, sets it to <ph id=\"ph3\">`true`</ph>.","pos":[2752,2868],"source":" The <xref:System.Data.DataSet.EndInit%2A> method, which ends the initialization of the `DataSet`, sets it to `true`."},{"content":"These methods are used by the <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../../../includes/vsprvs-md.md)]</ph> design environment to initialize a <ph id=\"ph2\">`DataSet`</ph> that is being used by another component.","pos":[2869,3041],"source":" These methods are used by the [!INCLUDE[vsprvs](../../../../../includes/vsprvs-md.md)] design environment to initialize a `DataSet` that is being used by another component."},{"content":"You will not commonly use them in your code.","pos":[3042,3086]},{"pos":[3095,3113],"content":"The Disposed Event","linkify":"The Disposed Event","nodes":[{"content":"The Disposed Event","pos":[0,18]}]},{"content":"<ph id=\"ph1\">`DataSet`</ph> is derived from the <ph id=\"ph2\">&lt;xref:System.ComponentModel.MarshalByValueComponent&gt;</ph> class, which exposes both the <ph id=\"ph3\">&lt;xref:System.ComponentModel.MarshalByValueComponent.Dispose%2A&gt;</ph> method and the <ph id=\"ph4\">&lt;xref:System.ComponentModel.MarshalByValueComponent.Disposed&gt;</ph> event.","pos":[3117,3377],"source":"`DataSet` is derived from the <xref:System.ComponentModel.MarshalByValueComponent> class, which exposes both the <xref:System.ComponentModel.MarshalByValueComponent.Dispose%2A> method and the <xref:System.ComponentModel.MarshalByValueComponent.Disposed> event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.MarshalByValueComponent.Disposed&gt;</ph>event adds an event handler to listen to the disposed event on the component.","pos":[3378,3520],"source":" The <xref:System.ComponentModel.MarshalByValueComponent.Disposed>event adds an event handler to listen to the disposed event on the component."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.MarshalByValueComponent.Disposed&gt;</ph>event of a <ph id=\"ph2\">`DataSet`</ph> if you want to execute code when the <ph id=\"ph3\">&lt;xref:System.ComponentModel.MarshalByValueComponent.Dispose%2A&gt;</ph>method is called.","pos":[3521,3736],"source":" You can use the <xref:System.ComponentModel.MarshalByValueComponent.Disposed>event of a `DataSet` if you want to execute code when the <xref:System.ComponentModel.MarshalByValueComponent.Dispose%2A>method is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.MarshalByValueComponent.Dispose%2A&gt;</ph>releases the resources used by the <ph id=\"ph2\">&lt;xref:System.ComponentModel.MarshalByValueComponent&gt;</ph>.","pos":[3737,3888],"source":" <xref:System.ComponentModel.MarshalByValueComponent.Dispose%2A>releases the resources used by the <xref:System.ComponentModel.MarshalByValueComponent>."},{"pos":[3896,4269],"content":"[!NOTE]\n The `DataSet` and `DataTable` objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting. These are the only ADO.NET objects that can be remoted. For more information, see [Remote Objects](http://msdn.microsoft.com/en-us/515686e6-0a8d-42f7-8188-73abede57c58).","leadings":["","> "],"nodes":[{"content":"The `DataSet` and `DataTable` objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting. These are the only ADO.NET objects that can be remoted. For more information, see [Remote Objects](http://msdn.microsoft.com/en-us/515686e6-0a8d-42f7-8188-73abede57c58).","pos":[9,371],"nodes":[{"content":"The <ph id=\"ph1\">`DataSet`</ph> and <ph id=\"ph2\">`DataTable`</ph> objects inherit from <ph id=\"ph3\">&lt;xref:System.ComponentModel.MarshalByValueComponent&gt;</ph>and support the <ph id=\"ph4\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface for remoting.","pos":[0,192],"source":"The `DataSet` and `DataTable` objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting."},{"content":"These are the only ADO.NET objects that can be remoted.","pos":[193,248]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Remote Objects<ept id=\"p1\">](http://msdn.microsoft.com/en-us/515686e6-0a8d-42f7-8188-73abede57c58)</ept>.","pos":[249,362],"source":" For more information, see [Remote Objects](http://msdn.microsoft.com/en-us/515686e6-0a8d-42f7-8188-73abede57c58)."}]}]},{"pos":[4276,4591],"content":"For information about other events available when working with a <ph id=\"ph1\">`DataSet`</ph>, see <bpt id=\"p1\">[</bpt>Handling DataTable Events<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept> and <bpt id=\"p2\">[</bpt>Handling DataAdapter Events<ept id=\"p2\">](../../../../../docs/framework/data/adonet/handling-dataadapter-events.md)</ept>.","source":"For information about other events available when working with a `DataSet`, see [Handling DataTable Events](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md) and [Handling DataAdapter Events](../../../../../docs/framework/data/adonet/handling-dataadapter-events.md)."},{"pos":[4600,4608],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>DataSets, DataTables, and DataViews<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4612,4729],"source":"[DataSets, DataTables, and DataViews](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Validating Data<ept id=\"p1\">](http://msdn.microsoft.com/library/b3a9ee4e-5d4d-4411-9c56-c811f2b4ee7e)</ept><ph id=\"ph1\"> </ph>","pos":[4733,4823],"source":"[Validating Data](http://msdn.microsoft.com/library/b3a9ee4e-5d4d-4411-9c56-c811f2b4ee7e) "},{"content":"<bpt id=\"p1\">[</bpt>Retrieving and Modifying Data in ADO.NET<ept id=\"p1\">](../../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)</ept><ph id=\"ph1\"> </ph>","pos":[4827,4946],"source":"[Retrieving and Modifying Data in ADO.NET](../../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md) "},{"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[4950,5053],"source":"[ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}