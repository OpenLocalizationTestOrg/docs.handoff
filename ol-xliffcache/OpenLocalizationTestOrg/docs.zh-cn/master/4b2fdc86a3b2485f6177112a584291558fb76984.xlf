<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b2fdc86a3b2485f6177112a584291558fb76984</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\local-functions-vs-lambdas.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">517399572fdb43374e5afa132e8e5f2887464d85</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">826a755296117a1eada6c9395a7fa8edd97446d1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Local functions vs. lambda expressions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Why Local Functions might be a better choice than Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>C#, .NET, .NET Core, Latest Features, What's New, local functions, lambda expressions</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Local functions compared to Lambda expressions</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In some use cases, you could create a lambda expression and use it without needing to create a local function.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here's an example async method that does just that:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TaskLambdaExample<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/new-in-7/AsyncWork.cs#36_TaskLambdaExample "</bpt>Task returning method with lambda expression<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, there are a number of reasons to prefer using local functions instead of defining and calling lambda expressions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>First, for lambda expressions, the compiler must create an anonymous class and an instance of that class to store any variables captured by the closure.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The closure for this lambda expression contains the <ph id="ph1">`address`</ph>, <ph id="ph2">`index`</ph> and <ph id="ph3">`name`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Second, lambda expressions are implemented by instantiating a delegate and invoking that delegate.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Local functions are implemented as method calls.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The instantiation necessary for lambda expressions means extra memory allocations, which may be a performance factor in time critical code paths.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Local functions do not incur this overhead.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Third, local functions can be called before they are defined.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Lambda expressions must be declared before they are defined.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This means local functions are easier to use in recursive algorithms:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>LocalFunctionFactorial<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/new-in-7/MathUtilities.cs#37_LocalFunctionFactorial "</bpt>Recursive factorial using local function<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Contrast that implementation with a version that uses lambda expressions:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>26_LambdaFactorial<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/new-in-7/MathUtilities.cs#38_LambdaFactorial "</bpt>Recursive factorial using lambda expressions<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Notice that the version using the lambda expression must declare and initialize the lambda expression, <ph id="ph1">`nthFactorial`</ph> before defining it.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Not doing so results in a compile time error for referencing <ph id="ph1">`nthFactorial`</ph> before assigning it.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Recursive algorithms are easier to create using local functions.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>While local functions may seem redundant to lambda expressions, they actually serve different purposes and have different uses.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Local functions are more efficient for the case when you want to write a function that is called only from the context of another method.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>