<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="compilation-and-reuse-in-regular-expressions.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2166412269a84329d42f58c7e3423229be4327b8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\compilation-and-reuse-in-regular-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6722413171d3c724299e735045e173aea9dac926</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a1a4a25c3e142b3df8b442b7a228f9d9faf05c6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Compilation and Reuse in Regular Expressions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compilation and Reuse in Regular Expressions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can optimize the performance of applications that make extensive use of regular expressions by understanding how the regular expression engine compiles expressions and by understanding how regular expressions are cached.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic discusses both compilation and caching.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Compiled Regular Expressions</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By default, the regular expression engine compiles a regular expression to a sequence of internal instructions (these are high-level codes that are different from Microsoft intermediate language, or MSIL).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When the engine executes a regular expression, it interprets the internal codes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object is constructed with the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexOptions.Compiled?displayProperty=nameWithType&gt;</ph> option, it compiles the regular expression to explicit MSIL code instead of high-level regular expression internal instructions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This allows .NET's just-in-time (JIT) compiler to convert the expression to native machine code for higher performance.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, generated MSIL cannot be unloaded.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The only way to unload code is to unload an entire application domain (that is, to unload all of your application's code.).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Effectively, once a regular expression is compiled with the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexOptions.Compiled?displayProperty=nameWithType&gt;</ph> option,   never releases the resources used by the compiled expression, even if the regular expression was created by a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object that is itself released to garbage collection.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You must be careful to limit the number of different regular expressions you compile with the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexOptions.Compiled?displayProperty=nameWithType&gt;</ph> option to avoid consuming too many resources.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If an application must use a large or unbounded number of regular expressions, each expression should be interpreted, not compiled.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, if a small number of regular expressions are used repeatedly, they should be compiled with <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexOptions.Compiled?displayProperty=nameWithType&gt;</ph> for better performance.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An alternative is to use precompiled regular expressions.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can compile all of your expressions into a reusable DLL by using the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This avoids the need to compile at runtime while still benefiting from the speed of compiled regular expressions.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Regular Expressions Cache</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To improve performance, the regular expression engine maintains an application-wide cache of compiled regular expressions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The cache stores regular expression patterns that are used only in static method calls.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>(Regular expression patterns supplied to instance methods are not cached.) This avoids the need to reparse an expression into high-level byte code each time it is used.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The maximum number of cached regular expressions is determined by the value of the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>By default, the regular expression engine caches up to 15 compiled regular expressions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the number of compiled regular expressions exceeds the cache size, the least recently used regular expression is discarded and the new regular expression is cached.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your application can take advantage of precompiled regular expressions in one of the following two ways:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By using a static method of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object to define the regular expression.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you are using a regular expression pattern that has already been defined in another static method call, the regular expression engine will retrieve it from the cache.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If not, the engine will compile the regular expression and add it to the cache.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>By reusing an existing <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object as long as its regular expression pattern is needed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because of the overhead of object instantiation and regular expression compilation, creating and rapidly destroying numerous <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> objects is a very expensive process.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For applications that use a large number of different regular expressions, you can optimize performance by using calls to static <ph id="ph1">`Regex`</ph> methods and possibly by increasing the size of the regular expression cache.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Regular Expressions<ept id="p1">](../../../docs/standard/base-types/regular-expressions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>