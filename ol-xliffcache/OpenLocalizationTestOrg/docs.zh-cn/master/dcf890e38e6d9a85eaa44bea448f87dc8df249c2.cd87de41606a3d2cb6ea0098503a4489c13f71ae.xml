{"content":"---\ntitle: \"Path Markup Syntax | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"PathGeometry class\"\n  - \"attribute usage in XAML\"\n  - \"XAML, attribute usage\"\n  - \"classes, PathGeometry\"\n  - \"graphics, PathGeometry class\"\n  - \"XAML, object element usage\"\nms.assetid: b8586241-a02d-486e-9223-e1e98e047f41\ncaps.latest.revision: 22\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Path Markup Syntax\nPaths are discussed in              [Shapes and Basic Drawing in WPF Overview](../../../../docs/framework/wpf/graphics-multimedia/shapes-and-basic-drawing-in-wpf-overview.md) and the              [Geometry Overview](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md), however, this topic describes in detail the powerful and complex mini-language you can use to specify path geometries more compactly using              [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)].  \n  \n This topic contains the following sections.  \n  \n<a name=\"autoTopLevelSectionsOUTLINE0\"></a>   \n<a name=\"prerequisites\"></a>   \n## Prerequisites  \n To understand this topic, you should be familiar with the basic features of                  <xref:System.Windows.Media.Geometry> objects. For more information, see the                  [Geometry Overview](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md).  \n  \n<a name=\"abouthisdocument\"></a>   \n## StreamGeometry and PathFigureCollection Mini-Languages  \n [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] provides two classes that provide mini-languages for describing geometric paths:                  <xref:System.Windows.Media.StreamGeometry> and                  <xref:System.Windows.Media.PathFigureCollection>.  \n  \n-   You use the                          <xref:System.Windows.Media.StreamGeometry> mini-language when setting a property of type                          <xref:System.Windows.Media.Geometry>, such as the                          <xref:System.Windows.UIElement.Clip%2A> property of a                          <xref:System.Windows.UIElement> or the                          <xref:System.Windows.Shapes.Path.Data%2A> property of a                          <xref:System.Windows.Shapes.Path> element. The following example uses attribute syntax to create a                          <xref:System.Windows.Media.StreamGeometry>.  \n  \n     [!code-xml[GeometrySample_snip_XAML#GraphicsMMStreamGeometryAttributeSyntaxInline](../../../../samples/snippets/csharp/VS_Snippets_Wpf/GeometrySample_snip_XAML/CS/MiniLanguageExample.xaml#graphicsmmstreamgeometryattributesyntaxinline)]  \n  \n-   You use the                          <xref:System.Windows.Media.PathFigureCollection> mini-language when setting the                          <xref:System.Windows.Media.PathGeometry.Figures%2A> property of a                          <xref:System.Windows.Media.PathGeometry>. The following example uses a attribute syntax to create a                          <xref:System.Windows.Media.PathFigureCollection> for a                          <xref:System.Windows.Media.PathGeometry>.  \n  \n     [!code-xml[GeometrySample_snip_XAML#GraphicsMMPathFigureCollectionAttributeSyntaxInline](../../../../samples/snippets/csharp/VS_Snippets_Wpf/GeometrySample_snip_XAML/CS/MiniLanguageExample.xaml#graphicsmmpathfigurecollectionattributesyntaxinline)]  \n  \n As you can see from the preceding examples, the two mini-languages are very similar. It's always possible to use a                  <xref:System.Windows.Media.PathGeometry> in any situation where you could use a                  <xref:System.Windows.Media.StreamGeometry>; so which one should you use? Use a                  <xref:System.Windows.Media.StreamGeometry> when you don't need to modify the path after creating it; use a                  <xref:System.Windows.Media.PathGeometry> if you do need to modify the path.  \n  \n For more information about the differences between                  <xref:System.Windows.Media.PathGeometry> and                  <xref:System.Windows.Media.StreamGeometry> objects, see the                  [Geometry Overview](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md).  \n  \n### A Note about White Space  \n For brevity, a single space is shown in the syntax sections that follow, but multiple spaces are also acceptable wherever a single space is shown.  \n  \n Two numbers donâ€™t actually have to be separated by a comma or whitespace, but this can only be done when the resulting string is unambiguous. For instance,                          `2..3` is actually two numbers: \"2.\" And \".3\". Similarly,                          `2-3` is \"2\" and \"-3\". Spaces are not required before or after commands, either.  \n  \n### Syntax  \n The                          [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] attribute usage syntax for a                          <xref:System.Windows.Media.StreamGeometry> is composed of an optional                          <xref:System.Windows.Media.FillRule> value and one or more figure descriptions.  \n  \n|StreamGeometry XAML Attribute Usage|  \n|-----------------------------------------|  \n|`<` *object* *property* `=\"`[                                         `fillRule`]                                          `figureDescription`[                                         `figureDescription`]*                                         `\" ... />`|  \n  \n The                          [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] attribute usage syntax for a                          <xref:System.Windows.Media.PathFigureCollection> is composed of one or more figure descriptions.  \n  \n|PathFigureCollection XAML Attribute Usage|  \n|-----------------------------------------------|  \n|`<` *object* *property* `=\"` `figureDescription`[                                         `figureDescription`]*                                         `\" ... />`|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|*fillRule*|<xref:System.Windows.Media.FillRule?displayProperty=fullName><br /><br /> Specifies whether the                                          <xref:System.Windows.Media.StreamGeometry> uses the                                          <xref:System.Windows.Media.FillRule> or                                          <xref:System.Windows.Media.FillRule><xref:System.Windows.Media.PathGeometry.FillRule%2A>.<br /><br /> -   `F0` specifies the                                                  <xref:System.Windows.Media.FillRule> fill rule.<br />-   `F1` specifies the                                                  <xref:System.Windows.Media.FillRule> fill rule.<br /><br /> If you omit this command, the subpath uses the default behavior, which is                                          <xref:System.Windows.Media.FillRule>. If you specify this command, you must place it first.|  \n|*figureDescription*|A figure composed of a move command, draw commands, and an optional close command.<br /><br /> `moveCommand` `drawCommands`  `[` `closeCommand` `]`|  \n|*moveCommand*|A move command that specifies the start point of the figure. See the                                          [Move Command](#themovecommand) section.|  \n|*drawCommands*|One or more drawing commands that describe the figure's contents. See the                                          [Draw Commands](#drawcommands) section.|  \n|*closeCommand*|An optional close command that closes figure. See the                                          [Close Command](#closecommand) section.|  \n  \n<a name=\"themovecommand\"></a>   \n## Move Command  \n Specifies the start point of a new figure.  \n  \n|Syntax|  \n|------------|  \n|`M` *startPoint*<br /><br /> - or -<br /><br /> `m` *startPoint*|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|*startPoint*|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The start point of a new figure.|  \n  \n An uppercase                  `M` indicates that                  `startPoint` is an absolute value; a lowercase                  `m` indicates that                  `startPoint` is an offset to the previous point, or (0,0) if none exists. If you list multiple points after the move command, a line is drawn to those points though you specified the line command.  \n  \n<a name=\"drawcommands\"></a>   \n## Draw Commands  \n A draw command can consist of several shape commands. The following shape commands are available: line, horizontal line, vertical line, cubic Bezier curve, quadratic Bezier curve, smooth cubic Bezier curve, smooth quadratic Bezier curve, and elliptical arc.  \n  \n You enter each command by using either an uppercase or a lowercase letter: uppercase letters denote absolute values and lowercase letters denote relative values: the control points for that segment are relative to the end point of the preceding example. When sequentially entering more than one command of the same type, you can omit the duplicate command entry; for example,                  `L 100,200 300,400` is equivalent to                  `L 100,200 L 300,400`. The following table describes the                  **move** and                  **draw** commands.  \n  \n### Line Command  \n Creates a straight line between the current point and the specified end point.                           `l 20 30` and                          `L 20,30` are examples of valid                          **line** commands.  \n  \n|Syntax|  \n|------------|  \n|`L` *endPoint*<br /><br /> - or -<br /><br /> `l` *endPoint*|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|*endPoint*|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The end point of the line.|  \n  \n### Horizontal Line Command  \n Creates a horizontal line between the current point and the specified x-coordinate.                          `H 90` is an example of a valid horizontal line command.  \n  \n|Syntax|  \n|------------|  \n|`H`  *x*<br /><br /> - or -<br /><br /> `h`  *x*|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|*x*|<xref:System.Double?displayProperty=fullName><br /><br /> The x-coordinate of the end point of the line.|  \n  \n### Vertical Line Command  \n Creates a vertical line between the current point and the specified y-coordinate.                          `v 90` is an example of a valid vertical line command.  \n  \n|Syntax|  \n|------------|  \n|`V`  *y*<br /><br /> - or -<br /><br /> `v`  *y*|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|*y*|<xref:System.Double?displayProperty=fullName><br /><br /> The y-coordinate of the end point of the line.|  \n  \n### Cubic Bezier Curve Command  \n Creates a cubic Bezier curve between the current point and the specified end point by using the two specified control points (                         `controlPoint`1 and                          `controlPoint`2).                          `C 100,200 200,400 300,200` is an example of a valid curve command.  \n  \n|Syntax|  \n|------------|  \n|`C` `controlPoint`1`controlPoint`2`endPoint`<br /><br /> - or -<br /><br /> `c` `controlPoint`1`controlPoint`2`endPoint`|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|`controlPoint`1|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The first control point of the curve, which determines the starting tangent of the curve.|  \n|`controlPoint`2|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The second control point of the curve, which determines the ending tangent of the curve.|  \n|`endPoint`|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The point to which the curve is drawn.|  \n  \n### Quadratic Bezier Curve Command  \n Creates a quadratic Bezier curve between the current point and the specified end point by using the specified control point (                         `controlPoint`).                          `q 100,200 300,200` is an example of a valid quadratic Bezier curve command.  \n  \n|Syntax|  \n|------------|  \n|`Q` `controlPoint` `endPoint`<br /><br /> - or -<br /><br /> `q` `controlPoint` `endPoint`|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|`controlPoint`|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The control point of the curve, which determines the starting and ending tangents of the curve.|  \n|`endPoint`|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The point to which the curve is drawn.|  \n  \n### Smooth cubic Bezier curve Command  \n Creates a cubic Bezier curve between the current point and the specified end point. The first control point is assumed to be the reflection of the second control point of the previous command relative to the current point. If there is no previous command or if the previous command was not a cubic Bezier curve command or a smooth cubic Bezier curve command, assume the first control point is coincident with the current point. The second control point, the control point for the end of the curve, is specified by                          `controlPoint`2. For example,                          `S 100,200 200,300` is a valid smooth cubic Bezier curve command.  \n  \n|Syntax|  \n|------------|  \n|`S` `controlPoint`2`endPoint`<br /><br /> - or -<br /><br /> `s` `controlPoint`2`endPoint`|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|`controlPoint`2|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The control point of the curve, which determines the ending tangent of the curve.|  \n|`endPoint`|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The point to which the curve is drawn.|  \n  \n### Smooth quadratic Bezier curve Command  \n Creates a quadratic Bezier curve between the current point and the specified end point. The control point is assumed to be the reflection of the control point of the previous command relative to the current point. If there is no previous command or if the previous command was not a quadratic Bezier curve command or a smooth quadratic Bezier curve command, the control point is coincident with the current point.  \n  \n|Syntax|  \n|------------|  \n|`T` `controlPoint` `endPoint`<br /><br /> - or -<br /><br /> `t` `controlPoint` `endPoint`|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|`controlPoint`|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The control point of the curve, which determines the starting and tangent of the curve.|  \n|`endPoint`|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The point to which the curve is drawn.|  \n  \n### Elliptical Arc Command  \n Creates an elliptical arc between the current point and the specified end point.  \n  \n|Syntax|  \n|------------|  \n|`A` `size` `rotationAngle` `isLargeArcFlag` `sweepDirectionFlag` `endPoint`<br /><br /> - or -<br /><br /> `a` `size` `rotationAngle` `isLargeArcFlag` `sweepDirectionFlag` `endPoint`|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|`size`|<xref:System.Windows.Size?displayProperty=fullName><br /><br /> The x- and y-radius of the arc.|  \n|`rotationAngle`|<xref:System.Double?displayProperty=fullName><br /><br /> The rotation of the ellipse, in degrees.|  \n|`isLargeArcFlag`|Set to 1 if the angle of the arc should be 180 degrees or greater; otherwise, set to 0.|  \n|`sweepDirectionFlag`|Set to 1 if the arc is drawn in a positive-angle direction; otherwise, set to 0.|  \n|`endPoint`|<xref:System.Windows.Point?displayProperty=fullName><br /><br /> The point to which the arc is drawn.|  \n  \n<a name=\"closecommand\"></a>   \n## The Close Command  \n Ends the current figure and creates a line that connects the current point to the starting point of the figure. This command creates a line-join (corner) between the last segment and the first segment of the figure.  \n  \n|Syntax|  \n|------------|  \n|`Z`<br /><br /> - or -<br /><br /> `z`|  \n  \n<a name=\"pointsyntax\"></a>   \n## Point Syntax  \n Describes the x- and y-coordinates of a point.  \n  \n|Syntax|  \n|------------|  \n|`x` `,` `y`<br /><br /> - or -<br /><br /> `x` `y`|  \n  \n|Term|Description|  \n|----------|-----------------|  \n|`x`|<xref:System.Double?displayProperty=fullName><br /><br /> The x-coordinate of the point.|  \n|`y`|<xref:System.Double?displayProperty=fullName><br /><br /> The y-coordinate of the point.|  \n  \n<a name=\"specialvalues\"></a>   \n## Special Values  \n Instead of a standard numerical value, you can also use the following special values. These values are case-sensitive.  \n  \n Infinity  \n Represents                          <xref:System.Double.PositiveInfinity?displayProperty=fullName>.  \n  \n -Infinity  \n Represents                          <xref:System.Double.NegativeInfinity?displayProperty=fullName>.  \n  \n NaN  \n Represents                          <xref:System.Double.NaN?displayProperty=fullName>.  \n  \n You may also use scientific notation. For example,                  `+1.e17` is a valid value.  \n  \n## See Also  \n <xref:System.Windows.Shapes.Path>   \n <xref:System.Windows.Media.StreamGeometry>   \n <xref:System.Windows.Media.PathGeometry>   \n <xref:System.Windows.Media.PathFigureCollection>   \n [Shapes and Basic Drawing in WPF Overview](../../../../docs/framework/wpf/graphics-multimedia/shapes-and-basic-drawing-in-wpf-overview.md)   \n [Geometry Overview](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md)   \n [How-to Topics](../../../../docs/framework/wpf/graphics-multimedia/geometries-how-to-topics.md)","nodes":[{"pos":[4,549],"embed":true,"restype":"x-metadata","content":"title: \"Path Markup Syntax | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"PathGeometry class\"\n  - \"attribute usage in XAML\"\n  - \"XAML, attribute usage\"\n  - \"classes, PathGeometry\"\n  - \"graphics, PathGeometry class\"\n  - \"XAML, object element usage\"\nms.assetid: b8586241-a02d-486e-9223-e1e98e047f41\ncaps.latest.revision: 22\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","nodes":[{"content":"Path Markup Syntax | Microsoft Docs","nodes":[{"pos":[0,35],"content":"Path Markup Syntax | Microsoft Docs","nodes":[{"content":"Path Markup Syntax | Microsoft Docs","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[556,574],"content":"Path Markup Syntax","linkify":"Path Markup Syntax","nodes":[{"content":"Path Markup Syntax","pos":[0,18]}]},{"pos":[575,1087],"content":"Paths are discussed in              <bpt id=\"p1\">[</bpt>Shapes and Basic Drawing in WPF Overview<ept id=\"p1\">](../../../../docs/framework/wpf/graphics-multimedia/shapes-and-basic-drawing-in-wpf-overview.md)</ept> and the              <bpt id=\"p2\">[</bpt>Geometry Overview<ept id=\"p2\">](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md)</ept>, however, this topic describes in detail the powerful and complex mini-language you can use to specify path geometries more compactly using              <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph>.","source":"Paths are discussed in              [Shapes and Basic Drawing in WPF Overview](../../../../docs/framework/wpf/graphics-multimedia/shapes-and-basic-drawing-in-wpf-overview.md) and the              [Geometry Overview](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md), however, this topic describes in detail the powerful and complex mini-language you can use to specify path geometries more compactly using              [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]."},{"content":"This topic contains the following sections.","pos":[1094,1137]},{"pos":[1225,1238],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"To understand this topic, you should be familiar with the basic features of                  <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects.","pos":[1242,1380],"source":"To understand this topic, you should be familiar with the basic features of                  <xref:System.Windows.Media.Geometry> objects."},{"content":"For more information, see the                  <bpt id=\"p1\">[</bpt>Geometry Overview<ept id=\"p1\">](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md)</ept>.","pos":[1381,1521],"source":" For more information, see the                  [Geometry Overview](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md)."},{"pos":[1565,1619],"content":"StreamGeometry and PathFigureCollection Mini-Languages","linkify":"StreamGeometry and PathFigureCollection Mini-Languages","nodes":[{"content":"StreamGeometry and PathFigureCollection Mini-Languages","pos":[0,54]}]},{"pos":[1705,1916],"content":"provides two classes that provide mini-languages for describing geometric paths:                  <ph id=\"ph1\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> and                  <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathFigureCollection&gt;</ph>.","source":" provides two classes that provide mini-languages for describing geometric paths:                  <xref:System.Windows.Media.StreamGeometry> and                  <xref:System.Windows.Media.PathFigureCollection>."},{"content":"You use the                          <ph id=\"ph1\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> mini-language when setting a property of type                          <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry&gt;</ph>, such as the                          <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> property of a                          <ph id=\"ph4\">&lt;xref:System.Windows.UIElement&gt;</ph> or the                          <ph id=\"ph5\">&lt;xref:System.Windows.Shapes.Path.Data%2A&gt;</ph> property of a                          <ph id=\"ph6\">&lt;xref:System.Windows.Shapes.Path&gt;</ph> element.","pos":[1926,2418],"source":"You use the                          <xref:System.Windows.Media.StreamGeometry> mini-language when setting a property of type                          <xref:System.Windows.Media.Geometry>, such as the                          <xref:System.Windows.UIElement.Clip%2A> property of a                          <xref:System.Windows.UIElement> or the                          <xref:System.Windows.Shapes.Path.Data%2A> property of a                          <xref:System.Windows.Shapes.Path> element."},{"content":"The following example uses attribute syntax to create a                          <ph id=\"ph1\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph>.","pos":[2419,2543],"source":" The following example uses attribute syntax to create a                          <xref:System.Windows.Media.StreamGeometry>."},{"content":"You use the                          <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathFigureCollection&gt;</ph> mini-language when setting the                          <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathGeometry.Figures%2A&gt;</ph> property of a                          <ph id=\"ph3\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>.","pos":[2799,3073],"source":"You use the                          <xref:System.Windows.Media.PathFigureCollection> mini-language when setting the                          <xref:System.Windows.Media.PathGeometry.Figures%2A> property of a                          <xref:System.Windows.Media.PathGeometry>."},{"content":"The following example uses a attribute syntax to create a                          <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathFigureCollection&gt;</ph> for a                          <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>.","pos":[3074,3278],"source":" The following example uses a attribute syntax to create a                          <xref:System.Windows.Media.PathFigureCollection> for a                          <xref:System.Windows.Media.PathGeometry>."},{"content":"As you can see from the preceding examples, the two mini-languages are very similar.","pos":[3543,3627]},{"content":"It's always possible to use a                  <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> in any situation where you could use a                  <ph id=\"ph2\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph>; so which one should you use?","pos":[3628,3844],"source":" It's always possible to use a                  <xref:System.Windows.Media.PathGeometry> in any situation where you could use a                  <xref:System.Windows.Media.StreamGeometry>; so which one should you use?"},{"content":"Use a                  <ph id=\"ph1\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> when you don't need to modify the path after creating it; use a                  <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> if you do need to modify the path.","pos":[3845,4067],"source":" Use a                  <xref:System.Windows.Media.StreamGeometry> when you don't need to modify the path after creating it; use a                  <xref:System.Windows.Media.PathGeometry> if you do need to modify the path."},{"pos":[4074,4374],"content":"For more information about the differences between                  <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> and                  <ph id=\"ph2\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> objects, see the                  <bpt id=\"p1\">[</bpt>Geometry Overview<ept id=\"p1\">](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md)</ept>.","source":"For more information about the differences between                  <xref:System.Windows.Media.PathGeometry> and                  <xref:System.Windows.Media.StreamGeometry> objects, see the                  [Geometry Overview](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md)."},{"pos":[4384,4408],"content":"A Note about White Space","linkify":"A Note about White Space","nodes":[{"content":"A Note about White Space","pos":[0,24]}]},{"content":"For brevity, a single space is shown in the syntax sections that follow, but multiple spaces are also acceptable wherever a single space is shown.","pos":[4412,4558]},{"content":"Two numbers donâ€™t actually have to be separated by a comma or whitespace, but this can only be done when the resulting string is unambiguous.","pos":[4565,4706]},{"content":"For instance,                          <ph id=\"ph1\">`2..3`</ph> is actually two numbers: \"2.\"","pos":[4707,4782],"source":" For instance,                          `2..3` is actually two numbers: \"2.\""},{"content":"And \".3\".","pos":[4783,4792]},{"content":"Similarly,                          <ph id=\"ph1\">`2-3`</ph> is \"2\" and \"-3\".","pos":[4793,4851],"source":" Similarly,                          `2-3` is \"2\" and \"-3\"."},{"content":"Spaces are not required before or after commands, either.","pos":[4852,4909]},{"pos":[4919,4925],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[4929,5256],"content":"The                          <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> attribute usage syntax for a                          <ph id=\"ph2\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> is composed of an optional                          <ph id=\"ph3\">&lt;xref:System.Windows.Media.FillRule&gt;</ph> value and one or more figure descriptions.","source":"The                          [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] attribute usage syntax for a                          <xref:System.Windows.Media.StreamGeometry> is composed of an optional                          <xref:System.Windows.Media.FillRule> value and one or more figure descriptions."},{"content":"StreamGeometry XAML Attribute Usage","pos":[5263,5298]},{"pos":[5349,5605],"content":"<ph id=\"ph1\">`&lt;`</ph> <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>property<ept id=\"p2\">*</ept> <ph id=\"ph2\">`=\"`</ph>[                                         <ph id=\"ph3\">`fillRule`</ph>]                                          <ph id=\"ph4\">`figureDescription`</ph>[                                         <ph id=\"ph5\">`figureDescription`</ph>]*                                         <ph id=\"ph6\">`\" ... /&gt;`</ph>","source":"`<` *object* *property* `=\"`[                                         `fillRule`]                                          `figureDescription`[                                         `figureDescription`]*                                         `\" ... />`"},{"pos":[5613,5862],"content":"The                          <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> attribute usage syntax for a                          <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathFigureCollection&gt;</ph> is composed of one or more figure descriptions.","source":"The                          [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] attribute usage syntax for a                          <xref:System.Windows.Media.PathFigureCollection> is composed of one or more figure descriptions."},{"content":"PathFigureCollection XAML Attribute Usage","pos":[5869,5910]},{"pos":[5967,6129],"content":"<ph id=\"ph1\">`&lt;`</ph> <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>property<ept id=\"p2\">*</ept> <ph id=\"ph2\">`=\"`</ph> <ph id=\"ph3\">`figureDescription`</ph>[                                         <ph id=\"ph4\">`figureDescription`</ph>]*                                         <ph id=\"ph5\">`\" ... /&gt;`</ph>","source":"`<` *object* *property* `=\"` `figureDescription`[                                         `figureDescription`]*                                         `\" ... />`"},{"content":"Term","pos":[6137,6141]},{"content":"Description","pos":[6142,6153]},{"pos":[6191,6201],"content":"<bpt id=\"p1\">*</bpt>fillRule<ept id=\"p1\">*</ept>","source":"*fillRule*"},{"content":"Specifies whether the                                          <ph id=\"ph1\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> uses the                                          <ph id=\"ph2\">&lt;xref:System.Windows.Media.FillRule&gt;</ph> or                                          <ph id=\"ph3\">&lt;xref:System.Windows.Media.FillRule&gt;</ph><ph id=\"ph4\">&lt;xref:System.Windows.Media.PathGeometry.FillRule%2A&gt;</ph>.","pos":[6276,6602],"source":"Specifies whether the                                          <xref:System.Windows.Media.StreamGeometry> uses the                                          <xref:System.Windows.Media.FillRule> or                                          <xref:System.Windows.Media.FillRule><xref:System.Windows.Media.PathGeometry.FillRule%2A>."},{"content":"<ph id=\"ph1\">-   </ph><ph id=\"ph2\">`F0`</ph> specifies the                                                  <ph id=\"ph3\">&lt;xref:System.Windows.Media.FillRule&gt;</ph> fill rule.","pos":[6615,6734],"source":"-   `F0` specifies the                                                  <xref:System.Windows.Media.FillRule> fill rule."},{"content":"<ph id=\"ph1\">-   </ph><ph id=\"ph2\">`F1`</ph> specifies the                                                  <ph id=\"ph3\">&lt;xref:System.Windows.Media.FillRule&gt;</ph> fill rule.","pos":[6740,6859],"source":"-   `F1` specifies the                                                  <xref:System.Windows.Media.FillRule> fill rule."},{"content":"If you omit this command, the subpath uses the default behavior, which is                                          <ph id=\"ph1\">&lt;xref:System.Windows.Media.FillRule&gt;</ph>.","pos":[6872,7024],"source":"If you omit this command, the subpath uses the default behavior, which is                                          <xref:System.Windows.Media.FillRule>."},{"content":"If you specify this command, you must place it first.","pos":[7025,7078]},{"pos":[7083,7102],"content":"<bpt id=\"p1\">*</bpt>figureDescription<ept id=\"p1\">*</ept>","source":"*figureDescription*"},{"content":"A figure composed of a move command, draw commands, and an optional close command.","pos":[7103,7185]},{"content":"<ph id=\"ph1\">`moveCommand`</ph> <ph id=\"ph2\">`drawCommands`</ph>  <ph id=\"ph3\">`[`</ph> <ph id=\"ph4\">`closeCommand`</ph> <ph id=\"ph5\">`]`</ph>","pos":[7198,7250],"source":"`moveCommand` `drawCommands`  `[` `closeCommand` `]`"},{"pos":[7255,7268],"content":"<bpt id=\"p1\">*</bpt>moveCommand<ept id=\"p1\">*</ept>","source":"*moveCommand*"},{"content":"A move command that specifies the start point of the figure.","pos":[7269,7329]},{"content":"See the                                          <bpt id=\"p1\">[</bpt>Move Command<ept id=\"p1\">](#themovecommand)</ept> section.","pos":[7330,7419],"source":" See the                                          [Move Command](#themovecommand) section."},{"pos":[7424,7438],"content":"<bpt id=\"p1\">*</bpt>drawCommands<ept id=\"p1\">*</ept>","source":"*drawCommands*"},{"content":"One or more drawing commands that describe the figure's contents.","pos":[7439,7504]},{"content":"See the                                          <bpt id=\"p1\">[</bpt>Draw Commands<ept id=\"p1\">](#drawcommands)</ept> section.","pos":[7505,7593],"source":" See the                                          [Draw Commands](#drawcommands) section."},{"pos":[7598,7612],"content":"<bpt id=\"p1\">*</bpt>closeCommand<ept id=\"p1\">*</ept>","source":"*closeCommand*"},{"content":"An optional close command that closes figure.","pos":[7613,7658]},{"content":"See the                                          <bpt id=\"p1\">[</bpt>Close Command<ept id=\"p1\">](#closecommand)</ept> section.","pos":[7659,7747],"source":" See the                                          [Close Command](#closecommand) section."},{"pos":[7790,7802],"content":"Move Command","linkify":"Move Command","nodes":[{"content":"Move Command","pos":[0,12]}]},{"content":"Specifies the start point of a new figure.","pos":[7806,7848]},{"content":"Syntax","pos":[7855,7861]},{"content":"<ph id=\"ph1\">`M`</ph> <bpt id=\"p1\">*</bpt>startPoint<ept id=\"p1\">*</ept>","pos":[7883,7899],"source":"`M` *startPoint*"},{"content":"- or -","pos":[7912,7918]},{"content":"<ph id=\"ph1\">`m`</ph> <bpt id=\"p1\">*</bpt>startPoint<ept id=\"p1\">*</ept>","pos":[7931,7947],"source":"`m` *startPoint*"},{"content":"Term","pos":[7955,7959]},{"content":"Description","pos":[7960,7971]},{"pos":[8009,8021],"content":"<bpt id=\"p1\">*</bpt>startPoint<ept id=\"p1\">*</ept>","source":"*startPoint*"},{"content":"The start point of a new figure.","pos":[8087,8119]},{"content":"An uppercase                  <ph id=\"ph1\">`M`</ph> indicates that                  <ph id=\"ph2\">`startPoint`</ph> is an absolute value; a lowercase                  <ph id=\"ph3\">`m`</ph> indicates that                  <ph id=\"ph4\">`startPoint`</ph> is an offset to the previous point, or (0,0) if none exists.","pos":[8127,8366],"source":"An uppercase                  `M` indicates that                  `startPoint` is an absolute value; a lowercase                  `m` indicates that                  `startPoint` is an offset to the previous point, or (0,0) if none exists."},{"content":"If you list multiple points after the move command, a line is drawn to those points though you specified the line command.","pos":[8367,8489]},{"pos":[8529,8542],"content":"Draw Commands","linkify":"Draw Commands","nodes":[{"content":"Draw Commands","pos":[0,13]}]},{"content":"A draw command can consist of several shape commands.","pos":[8546,8599]},{"content":"The following shape commands are available: line, horizontal line, vertical line, cubic Bezier curve, quadratic Bezier curve, smooth cubic Bezier curve, smooth quadratic Bezier curve, and elliptical arc.","pos":[8600,8803]},{"content":"You enter each command by using either an uppercase or a lowercase letter: uppercase letters denote absolute values and lowercase letters denote relative values: the control points for that segment are relative to the end point of the preceding example.","pos":[8810,9063]},{"content":"When sequentially entering more than one command of the same type, you can omit the duplicate command entry; for example,                  <ph id=\"ph1\">`L 100,200 300,400`</ph> is equivalent to                  <ph id=\"ph2\">`L 100,200 L 300,400`</ph>.","pos":[9064,9279],"source":" When sequentially entering more than one command of the same type, you can omit the duplicate command entry; for example,                  `L 100,200 300,400` is equivalent to                  `L 100,200 L 300,400`."},{"content":"The following table describes the                  <bpt id=\"p1\">**</bpt>move<ept id=\"p1\">**</ept> and                  <bpt id=\"p2\">**</bpt>draw<ept id=\"p2\">**</ept> commands.","pos":[9280,9379],"source":" The following table describes the                  **move** and                  **draw** commands."},{"pos":[9389,9401],"content":"Line Command","linkify":"Line Command","nodes":[{"content":"Line Command","pos":[0,12]}]},{"content":"Creates a straight line between the current point and the specified end point.","pos":[9405,9483]},{"content":"<ph id=\"ph1\">`l 20 30`</ph> and                          <ph id=\"ph2\">`L 20,30`</ph> are examples of valid                          <bpt id=\"p1\">**</bpt>line<ept id=\"p1\">**</ept> commands.","pos":[9510,9624],"source":"`l 20 30` and                          `L 20,30` are examples of valid                          **line** commands."},{"content":"Syntax","pos":[9631,9637]},{"content":"<ph id=\"ph1\">`L`</ph> <bpt id=\"p1\">*</bpt>endPoint<ept id=\"p1\">*</ept>","pos":[9659,9673],"source":"`L` *endPoint*"},{"content":"- or -","pos":[9686,9692]},{"content":"<ph id=\"ph1\">`l`</ph> <bpt id=\"p1\">*</bpt>endPoint<ept id=\"p1\">*</ept>","pos":[9705,9719],"source":"`l` *endPoint*"},{"content":"Term","pos":[9727,9731]},{"content":"Description","pos":[9732,9743]},{"pos":[9781,9791],"content":"<bpt id=\"p1\">*</bpt>endPoint<ept id=\"p1\">*</ept>","source":"*endPoint*"},{"content":"The end point of the line.","pos":[9857,9883]},{"pos":[9894,9917],"content":"Horizontal Line Command","linkify":"Horizontal Line Command","nodes":[{"content":"Horizontal Line Command","pos":[0,23]}]},{"content":"Creates a horizontal line between the current point and the specified x-coordinate.","pos":[9921,10004]},{"content":"<ph id=\"ph1\">`H 90`</ph> is an example of a valid horizontal line command.","pos":[10030,10086],"source":"`H 90` is an example of a valid horizontal line command."},{"content":"Syntax","pos":[10093,10099]},{"content":"<ph id=\"ph1\">`H`</ph>  <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[10121,10129],"source":"`H`  *x*"},{"content":"- or -","pos":[10142,10148]},{"content":"<ph id=\"ph1\">`h`</ph>  <bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[10161,10169],"source":"`h`  *x*"},{"content":"Term","pos":[10177,10181]},{"content":"Description","pos":[10182,10193]},{"pos":[10231,10234],"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","source":"*x*"},{"content":"The x-coordinate of the end point of the line.","pos":[10293,10339]},{"pos":[10350,10371],"content":"Vertical Line Command","linkify":"Vertical Line Command","nodes":[{"content":"Vertical Line Command","pos":[0,21]}]},{"content":"Creates a vertical line between the current point and the specified y-coordinate.","pos":[10375,10456]},{"content":"<ph id=\"ph1\">`v 90`</ph> is an example of a valid vertical line command.","pos":[10482,10536],"source":"`v 90` is an example of a valid vertical line command."},{"content":"Syntax","pos":[10543,10549]},{"content":"<ph id=\"ph1\">`V`</ph>  <bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","pos":[10571,10579],"source":"`V`  *y*"},{"content":"- or -","pos":[10592,10598]},{"content":"<ph id=\"ph1\">`v`</ph>  <bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","pos":[10611,10619],"source":"`v`  *y*"},{"content":"Term","pos":[10627,10631]},{"content":"Description","pos":[10632,10643]},{"pos":[10681,10684],"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","source":"*y*"},{"content":"The y-coordinate of the end point of the line.","pos":[10743,10789]},{"pos":[10800,10826],"content":"Cubic Bezier Curve Command","linkify":"Cubic Bezier Curve Command","nodes":[{"content":"Cubic Bezier Curve Command","pos":[0,26]}]},{"content":"Creates a cubic Bezier curve between the current point and the specified end point by using the two specified control points (                         <ph id=\"ph1\">`controlPoint`</ph>1 and                          <ph id=\"ph2\">`controlPoint`</ph>2).","pos":[10830,11043],"source":"Creates a cubic Bezier curve between the current point and the specified end point by using the two specified control points (                         `controlPoint`1 and                          `controlPoint`2)."},{"content":"<ph id=\"ph1\">`C 100,200 200,400 300,200`</ph> is an example of a valid curve command.","pos":[11069,11136],"source":"`C 100,200 200,400 300,200` is an example of a valid curve command."},{"content":"Syntax","pos":[11143,11149]},{"content":"<ph id=\"ph1\">`C`</ph> <ph id=\"ph2\">`controlPoint`</ph>1<ph id=\"ph3\">`controlPoint`</ph>2<ph id=\"ph4\">`endPoint`</ph>","pos":[11171,11215],"source":"`C` `controlPoint`1`controlPoint`2`endPoint`"},{"content":"- or -","pos":[11228,11234]},{"content":"<ph id=\"ph1\">`c`</ph> <ph id=\"ph2\">`controlPoint`</ph>1<ph id=\"ph3\">`controlPoint`</ph>2<ph id=\"ph4\">`endPoint`</ph>","pos":[11247,11291],"source":"`c` `controlPoint`1`controlPoint`2`endPoint`"},{"content":"Term","pos":[11299,11303]},{"content":"Description","pos":[11304,11315]},{"pos":[11353,11368],"content":"<ph id=\"ph1\">`controlPoint`</ph>1","source":"`controlPoint`1"},{"content":"The first control point of the curve, which determines the starting tangent of the curve.","pos":[11434,11523]},{"pos":[11528,11543],"content":"<ph id=\"ph1\">`controlPoint`</ph>2","source":"`controlPoint`2"},{"content":"The second control point of the curve, which determines the ending tangent of the curve.","pos":[11609,11697]},{"content":"The point to which the curve is drawn.","pos":[11778,11816]},{"pos":[11827,11857],"content":"Quadratic Bezier Curve Command","linkify":"Quadratic Bezier Curve Command","nodes":[{"content":"Quadratic Bezier Curve Command","pos":[0,30]}]},{"content":"Creates a quadratic Bezier curve between the current point and the specified end point by using the specified control point (                         <ph id=\"ph1\">`controlPoint`</ph>).","pos":[11861,12027],"source":"Creates a quadratic Bezier curve between the current point and the specified end point by using the specified control point (                         `controlPoint`)."},{"content":"<ph id=\"ph1\">`q 100,200 300,200`</ph> is an example of a valid quadratic Bezier curve command.","pos":[12053,12129],"source":"`q 100,200 300,200` is an example of a valid quadratic Bezier curve command."},{"content":"Syntax","pos":[12136,12142]},{"content":"<ph id=\"ph1\">`Q`</ph> <ph id=\"ph2\">`controlPoint`</ph> <ph id=\"ph3\">`endPoint`</ph>","pos":[12164,12193],"source":"`Q` `controlPoint` `endPoint`"},{"content":"- or -","pos":[12206,12212]},{"content":"<ph id=\"ph1\">`q`</ph> <ph id=\"ph2\">`controlPoint`</ph> <ph id=\"ph3\">`endPoint`</ph>","pos":[12225,12254],"source":"`q` `controlPoint` `endPoint`"},{"content":"Term","pos":[12262,12266]},{"content":"Description","pos":[12267,12278]},{"content":"The control point of the curve, which determines the starting and ending tangents of the curve.","pos":[12396,12491]},{"content":"The point to which the curve is drawn.","pos":[12572,12610]},{"pos":[12621,12654],"content":"Smooth cubic Bezier curve Command","linkify":"Smooth cubic Bezier curve Command","nodes":[{"content":"Smooth cubic Bezier curve Command","pos":[0,33]}]},{"content":"Creates a cubic Bezier curve between the current point and the specified end point.","pos":[12658,12741]},{"content":"The first control point is assumed to be the reflection of the second control point of the previous command relative to the current point.","pos":[12742,12880]},{"content":"If there is no previous command or if the previous command was not a cubic Bezier curve command or a smooth cubic Bezier curve command, assume the first control point is coincident with the current point.","pos":[12881,13085]},{"content":"The second control point, the control point for the end of the curve, is specified by                          <ph id=\"ph1\">`controlPoint`</ph>2.","pos":[13086,13213],"source":" The second control point, the control point for the end of the curve, is specified by                          `controlPoint`2."},{"content":"For example,                          <ph id=\"ph1\">`S 100,200 200,300`</ph> is a valid smooth cubic Bezier curve command.","pos":[13214,13317],"source":" For example,                          `S 100,200 200,300` is a valid smooth cubic Bezier curve command."},{"content":"Syntax","pos":[13324,13330]},{"content":"<ph id=\"ph1\">`S`</ph> <ph id=\"ph2\">`controlPoint`</ph>2<ph id=\"ph3\">`endPoint`</ph>","pos":[13352,13381],"source":"`S` `controlPoint`2`endPoint`"},{"content":"- or -","pos":[13394,13400]},{"content":"<ph id=\"ph1\">`s`</ph> <ph id=\"ph2\">`controlPoint`</ph>2<ph id=\"ph3\">`endPoint`</ph>","pos":[13413,13442],"source":"`s` `controlPoint`2`endPoint`"},{"content":"Term","pos":[13450,13454]},{"content":"Description","pos":[13455,13466]},{"pos":[13504,13519],"content":"<ph id=\"ph1\">`controlPoint`</ph>2","source":"`controlPoint`2"},{"content":"The control point of the curve, which determines the ending tangent of the curve.","pos":[13585,13666]},{"content":"The point to which the curve is drawn.","pos":[13747,13785]},{"pos":[13796,13833],"content":"Smooth quadratic Bezier curve Command","linkify":"Smooth quadratic Bezier curve Command","nodes":[{"content":"Smooth quadratic Bezier curve Command","pos":[0,37]}]},{"content":"Creates a quadratic Bezier curve between the current point and the specified end point.","pos":[13837,13924]},{"content":"The control point is assumed to be the reflection of the control point of the previous command relative to the current point.","pos":[13925,14050]},{"content":"If there is no previous command or if the previous command was not a quadratic Bezier curve command or a smooth quadratic Bezier curve command, the control point is coincident with the current point.","pos":[14051,14250]},{"content":"Syntax","pos":[14257,14263]},{"content":"<ph id=\"ph1\">`T`</ph> <ph id=\"ph2\">`controlPoint`</ph> <ph id=\"ph3\">`endPoint`</ph>","pos":[14285,14314],"source":"`T` `controlPoint` `endPoint`"},{"content":"- or -","pos":[14327,14333]},{"content":"<ph id=\"ph1\">`t`</ph> <ph id=\"ph2\">`controlPoint`</ph> <ph id=\"ph3\">`endPoint`</ph>","pos":[14346,14375],"source":"`t` `controlPoint` `endPoint`"},{"content":"Term","pos":[14383,14387]},{"content":"Description","pos":[14388,14399]},{"content":"The control point of the curve, which determines the starting and tangent of the curve.","pos":[14517,14604]},{"content":"The point to which the curve is drawn.","pos":[14685,14723]},{"pos":[14734,14756],"content":"Elliptical Arc Command","linkify":"Elliptical Arc Command","nodes":[{"content":"Elliptical Arc Command","pos":[0,22]}]},{"content":"Creates an elliptical arc between the current point and the specified end point.","pos":[14760,14840]},{"content":"Syntax","pos":[14847,14853]},{"content":"<ph id=\"ph1\">`A`</ph> <ph id=\"ph2\">`size`</ph> <ph id=\"ph3\">`rotationAngle`</ph> <ph id=\"ph4\">`isLargeArcFlag`</ph> <ph id=\"ph5\">`sweepDirectionFlag`</ph> <ph id=\"ph6\">`endPoint`</ph>","pos":[14875,14950],"source":"`A` `size` `rotationAngle` `isLargeArcFlag` `sweepDirectionFlag` `endPoint`"},{"content":"- or -","pos":[14963,14969]},{"content":"<ph id=\"ph1\">`a`</ph> <ph id=\"ph2\">`size`</ph> <ph id=\"ph3\">`rotationAngle`</ph> <ph id=\"ph4\">`isLargeArcFlag`</ph> <ph id=\"ph5\">`sweepDirectionFlag`</ph> <ph id=\"ph6\">`endPoint`</ph>","pos":[14982,15057],"source":"`a` `size` `rotationAngle` `isLargeArcFlag` `sweepDirectionFlag` `endPoint`"},{"content":"Term","pos":[15065,15069]},{"content":"Description","pos":[15070,15081]},{"content":"The x- and y-radius of the arc.","pos":[15190,15221]},{"content":"The rotation of the ellipse, in degrees.","pos":[15300,15340]},{"content":"Set to 1 if the angle of the arc should be 180 degrees or greater; otherwise, set to 0.","pos":[15362,15449]},{"content":"Set to 1 if the arc is drawn in a positive-angle direction; otherwise, set to 0.","pos":[15475,15555]},{"content":"The point to which the arc is drawn.","pos":[15636,15672]},{"pos":[15713,15730],"content":"The Close Command","linkify":"The Close Command","nodes":[{"content":"The Close Command","pos":[0,17]}]},{"content":"Ends the current figure and creates a line that connects the current point to the starting point of the figure.","pos":[15734,15845]},{"content":"This command creates a line-join (corner) between the last segment and the first segment of the figure.","pos":[15846,15949]},{"content":"Syntax","pos":[15956,15962]},{"content":"- or -","pos":[16000,16006]},{"pos":[16062,16074],"content":"Point Syntax","linkify":"Point Syntax","nodes":[{"content":"Point Syntax","pos":[0,12]}]},{"content":"Describes the x- and y-coordinates of a point.","pos":[16078,16124]},{"content":"Syntax","pos":[16131,16137]},{"content":"<ph id=\"ph1\">`x`</ph> <ph id=\"ph2\">`,`</ph> <ph id=\"ph3\">`y`</ph>","pos":[16159,16170],"source":"`x` `,` `y`"},{"content":"- or -","pos":[16183,16189]},{"content":"<ph id=\"ph1\">`x`</ph> <ph id=\"ph2\">`y`</ph>","pos":[16202,16209],"source":"`x` `y`"},{"content":"Term","pos":[16217,16221]},{"content":"Description","pos":[16222,16233]},{"content":"The x-coordinate of the point.","pos":[16333,16363]},{"content":"The y-coordinate of the point.","pos":[16430,16460]},{"pos":[16502,16516],"content":"Special Values","linkify":"Special Values","nodes":[{"content":"Special Values","pos":[0,14]}]},{"content":"Instead of a standard numerical value, you can also use the following special values.","pos":[16520,16605]},{"content":"These values are case-sensitive.","pos":[16606,16638]},{"content":"Infinity","pos":[16645,16653]},{"content":"Represents                          <ph id=\"ph1\">&lt;xref:System.Double.PositiveInfinity?displayProperty=fullName&gt;</ph>.","pos":[16657,16756],"source":"Represents                          <xref:System.Double.PositiveInfinity?displayProperty=fullName>."},{"content":"-Infinity","pos":[16763,16772]},{"content":"Represents                          <ph id=\"ph1\">&lt;xref:System.Double.NegativeInfinity?displayProperty=fullName&gt;</ph>.","pos":[16776,16875],"source":"Represents                          <xref:System.Double.NegativeInfinity?displayProperty=fullName>."},{"content":"NaN","pos":[16882,16885]},{"content":"Represents                          <ph id=\"ph1\">&lt;xref:System.Double.NaN?displayProperty=fullName&gt;</ph>.","pos":[16889,16975],"source":"Represents                          <xref:System.Double.NaN?displayProperty=fullName>."},{"content":"You may also use scientific notation.","pos":[16982,17019]},{"content":"For example,                  <ph id=\"ph1\">`+1.e17`</ph> is a valid value.","pos":[17020,17076],"source":" For example,                  `+1.e17` is a valid value."},{"pos":[17085,17093],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Path&gt;</ph>","pos":[17097,17130],"source":"<xref:System.Windows.Shapes.Path> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph>","pos":[17135,17177],"source":"<xref:System.Windows.Media.StreamGeometry> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>","pos":[17182,17222],"source":"<xref:System.Windows.Media.PathGeometry> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.PathFigureCollection&gt;</ph>","pos":[17227,17275],"source":"<xref:System.Windows.Media.PathFigureCollection> "},{"content":"<bpt id=\"p1\">[</bpt>Shapes and Basic Drawing in WPF Overview<ept id=\"p1\">](../../../../docs/framework/wpf/graphics-multimedia/shapes-and-basic-drawing-in-wpf-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[17280,17419],"source":"[Shapes and Basic Drawing in WPF Overview](../../../../docs/framework/wpf/graphics-multimedia/shapes-and-basic-drawing-in-wpf-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Geometry Overview<ept id=\"p1\">](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[17423,17516],"source":"[Geometry Overview](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>How-to Topics<ept id=\"p1\">](../../../../docs/framework/wpf/graphics-multimedia/geometries-how-to-topics.md)</ept>","pos":[17520,17615],"source":"[How-to Topics](../../../../docs/framework/wpf/graphics-multimedia/geometries-how-to-topics.md)"}]}