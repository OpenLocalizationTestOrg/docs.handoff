{"content":"---\ntitle: \"How to: Run Procedures at Set Intervals with the Windows Forms Timer Component\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"examples [Windows Forms], timers\"\n  - \"timers [Windows Forms], event intervals\"\n  - \"initialization [Windows Forms], Timer components\"\n  - \"timers [Windows Forms], Windows-based\"\n  - \"Timer component [Windows Forms], initializing\"\n  - \"procedures [Windows Forms], specific time intervals\"\nms.assetid: 8025247a-2de4-4d86-b8ab-a8cb8aeab2ea\n---\n# How to: Run Procedures at Set Intervals with the Windows Forms Timer Component\nYou might sometimes want to create a procedure that runs at specific time intervals until a loop has finished or that runs when a set time interval has elapsed. The <xref:System.Windows.Forms.Timer> component makes such a procedure possible.  \n  \n This component is designed for a Windows Forms environment. If you need a timer that is suitable for a server environment, see [Introduction to Server-Based Timers](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/tb9yt5e6(v=vs.90)).  \n  \n> [!NOTE]\n>  There are some limitations when using the <xref:System.Windows.Forms.Timer> component. For more information, see [Limitations of the Windows Forms Timer Component's Interval Property](limitations-of-the-timer-component-interval-property.md).  \n  \n## To run a procedure at set intervals with the Timer component  \n  \n1.  Add a <xref:System.Windows.Forms.Timer> to your form. See the following Example section for an illustration of how to do this programmatically. Visual Studio also has support for adding components to a form. Also see [How to: Add Controls Without a User Interface to Windows Forms](how-to-add-controls-without-a-user-interface-to-windows-forms.md).  \n  \n2.  Set the <xref:System.Windows.Forms.Timer.Interval%2A> property (in milliseconds) for the timer. This property determines how much time will pass before the procedure is run again.  \n  \n    > [!NOTE]\n    >  The more often a timer event occurs, the more processor time is used in responding to the event. This can slow down overall performance. Do not set a smaller interval than you need.  \n  \n3.  Write appropriate code in the <xref:System.Windows.Forms.Timer.Tick> event handler. The code you write in this event will run at the interval specified in the <xref:System.Windows.Forms.Timer.Interval%2A> property.  \n  \n4.  Set the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `true` to start the timer. The <xref:System.Windows.Forms.Timer.Tick> event will begin to occur, running your procedure at the set interval.  \n  \n5.  At the appropriate time, set the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `false` to stop the procedure from running again. Setting the interval to `0` does not cause the timer to stop.  \n  \n## Example  \n This first code example tracks the time of day in one-second increments. It uses a <xref:System.Windows.Forms.Button>, a <xref:System.Windows.Forms.Label>, and a <xref:System.Windows.Forms.Timer> component on a form. The <xref:System.Windows.Forms.Timer.Interval%2A> property is set to 1000 (equal to one second). In the <xref:System.Windows.Forms.Timer.Tick> event, the label's caption is set to the current time. When the button is clicked, the <xref:System.Windows.Forms.Timer.Enabled%2A> property is set to `false`, stopping the timer from updating the label's caption. The following code example requires that you have a form with a <xref:System.Windows.Forms.Button> control named `Button1`, a <xref:System.Windows.Forms.Timer> control named `Timer1`, and a <xref:System.Windows.Forms.Label> control named `Label1`.  \n  \n```vb  \nPrivate Sub InitializeTimer()  \n   ' Run this procedure in an appropriate event.  \n   ' Set to 1 second.  \n   Timer1.Interval = 1000  \n   ' Enable timer.  \n   Timer1.Enabled = True  \n   Button1.Text = \"Enabled\"  \nEnd Sub  \nx  \nPrivate Sub Timer1_Tick(ByVal Sender As Object, ByVal e As EventArgs) Handles Timer1.Tick  \n' Set the caption to the current time.  \n   Label1.Text = DateTime.Now  \nEnd Sub  \n  \nPrivate Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click  \n      If Button1.Text = \"Stop\" Then  \n         Button1.Text = \"Start\"  \n         Timer1.Enabled = False  \n      Else  \n         Button1.Text = \"Stop\"  \n         Timer1.Enabled = True  \n      End If  \nEnd Sub  \n```  \n  \n```csharp  \nprivate void InitializeTimer()  \n{  \n    // Call this procedure when the application starts.  \n    // Set to 1 second.  \n    Timer1.Interval = 1000;  \n    Timer1.Tick += new EventHandler(Timer1_Tick);  \n  \n    // Enable timer.  \n    Timer1.Enabled = true;  \n  \n    Button1.Text = \"Stop\";  \n    Button1.Click += new EventHandler(Button1_Click);  \n}  \n  \nprivate void Timer1_Tick(object Sender, EventArgs e)     \n{  \n   // Set the caption to the current time.  \n   Label1.Text = DateTime.Now.ToString();  \n}  \n  \nprivate void Button1_Click(object sender, EventArgs e)  \n{  \n  if ( Button1.Text == \"Stop\" )  \n  {  \n    Button1.Text = \"Start\";  \n    Timer1.Enabled = false;  \n  }  \n  else  \n  {  \n    Button1.Text = \"Stop\";  \n    Timer1.Enabled = true;  \n  }  \n}  \n```  \n  \n```cpp  \nprivate:  \n   void InitializeTimer()  \n   {  \n      // Run this procedure in an appropriate event.  \n      // Set to 1 second.  \n      timer1->Interval = 1000;  \n      // Enable timer.  \n      timer1->Enabled = true;  \n      this->timer1->Tick += gcnew System::EventHandler(this,    \n                               &Form1::timer1_Tick);  \n  \n      button1->Text = S\"Stop\";  \n      this->button1->Click += gcnew System::EventHandler(this,   \n                               &Form1::button1_Click);  \n   }  \n  \n   void timer1_Tick(System::Object ^ sender,  \n      System::EventArgs ^ e)  \n   {  \n      // Set the caption to the current time.  \n      label1->Text = DateTime::Now.ToString();  \n   }  \n  \n   void button1_Click(System::Object ^ sender,  \n      System::EventArgs ^ e)  \n   {  \n      if ( button1->Text == \"Stop\" )  \n      {  \n         button1->Text = \"Start\";  \n         timer1->Enabled = false;  \n      }  \n      else  \n      {  \n         button1->Text = \"Stop\";  \n         timer1->Enabled = true;  \n      }  \n   }  \n```  \n  \n## Example  \n This second code example runs a procedure every 600 milliseconds until a loop has finished. The following code example requires that you have a form with a <xref:System.Windows.Forms.Button> control named `Button1`, a <xref:System.Windows.Forms.Timer> control named `Timer1`, and a <xref:System.Windows.Forms.Label> control named `Label1`.  \n  \n```vb  \n' This variable will be the loop counter.  \nPrivate counter As Integer  \n  \nPrivate Sub InitializeTimer()  \n   ' Run this procedure in an appropriate event.  \n   counter = 0  \n   Timer1.Interval = 600  \n   Timer1.Enabled = True  \nEnd Sub  \n  \nPrivate Sub Timer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles Timer1.Tick  \n   If counter => 10 Then  \n      ' Exit loop code.  \n      Timer1.Enabled = False  \n      counter = 0  \n   Else  \n      ' Run your procedure here.  \n      ' Increment counter.  \n      counter = counter + 1  \n      Label1.Text = \"Procedures Run: \" & counter.ToString  \n   End If  \nEnd Sub  \n```  \n  \n```csharp  \n// This variable will be the loop counter.  \nprivate int counter;  \n  \nprivate void InitializeTimer()  \n{  \n   // Run this procedure in an appropriate event.  \n   counter = 0;  \n   timer1.Interval = 600;  \n   timer1.Enabled = true;  \n   // Hook up timer's tick event handler.  \n   this.timer1.Tick += new System.EventHandler(this.timer1_Tick);  \n}  \n  \nprivate void timer1_Tick(object sender, System.EventArgs e)     \n{  \n   if (counter >= 10)   \n   {  \n      // Exit loop code.  \n      timer1.Enabled = false;  \n      counter = 0;  \n   }  \n   else  \n   {  \n      // Run your procedure here.  \n      // Increment counter.  \n      counter = counter + 1;  \n      label1.Text = \"Procedures Run: \" + counter.ToString();  \n      }  \n}  \n```  \n  \n```cpp  \nprivate:  \n   int counter;  \n  \n   void InitializeTimer()  \n   {  \n      // Run this procedure in an appropriate event.  \n      counter = 0;  \n      timer1->Interval = 600;  \n      timer1->Enabled = true;  \n      // Hook up timer's tick event handler.  \n      this->timer1->Tick += gcnew System::EventHandler(this, &Form1::timer1_Tick);  \n   }  \n  \n   void timer1_Tick(System::Object ^ sender,  \n      System::EventArgs ^ e)  \n   {  \n      if (counter >= 10)   \n      {  \n         // Exit loop code.  \n         timer1->Enabled = false;  \n         counter = 0;  \n      }  \n      else  \n      {  \n         // Run your procedure here.  \n         // Increment counter.  \n         counter = counter + 1;  \n         label1->Text = String::Concat(\"Procedures Run: \",  \n            counter.ToString());  \n      }  \n   }  \n```  \n  \n## See also\n\n- <xref:System.Windows.Forms.Timer>\n- [Timer Component](timer-component-windows-forms.md)\n- [Timer Component Overview](timer-component-overview-windows-forms.md)\n","nodes":[{"pos":[4,522],"embed":true,"restype":"x-metadata","content":"title: \"How to: Run Procedures at Set Intervals with the Windows Forms Timer Component\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"examples [Windows Forms], timers\"\n  - \"timers [Windows Forms], event intervals\"\n  - \"initialization [Windows Forms], Timer components\"\n  - \"timers [Windows Forms], Windows-based\"\n  - \"Timer component [Windows Forms], initializing\"\n  - \"procedures [Windows Forms], specific time intervals\"\nms.assetid: 8025247a-2de4-4d86-b8ab-a8cb8aeab2ea","nodes":[{"content":"How to: Run Procedures at Set Intervals with the Windows Forms Timer Component","nodes":[{"pos":[0,78],"content":"How to: Run Procedures at Set Intervals with the Windows Forms Timer Component","nodes":[{"content":"How to: Run Procedures at Set Intervals with the Windows Forms Timer Component","pos":[0,78]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[529,607],"content":"How to: Run Procedures at Set Intervals with the Windows Forms Timer Component","linkify":"How to: Run Procedures at Set Intervals with the Windows Forms Timer Component","nodes":[{"content":"How to: Run Procedures at Set Intervals with the Windows Forms Timer Component","pos":[0,78]}]},{"content":"You might sometimes want to create a procedure that runs at specific time intervals until a loop has finished or that runs when a set time interval has elapsed.","pos":[608,768]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component makes such a procedure possible.","pos":[769,849],"source":" The <xref:System.Windows.Forms.Timer> component makes such a procedure possible."},{"content":"This component is designed for a Windows Forms environment.","pos":[856,915]},{"content":"If you need a timer that is suitable for a server environment, see <bpt id=\"p1\">[</bpt>Introduction to Server-Based Timers<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/tb9yt5e6(v=vs.90))</ept>.","pos":[916,1117],"source":" If you need a timer that is suitable for a server environment, see [Introduction to Server-Based Timers](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/tb9yt5e6(v=vs.90))."},{"pos":[1125,1377],"content":"[!NOTE]\n There are some limitations when using the <xref:System.Windows.Forms.Timer> component. For more information, see [Limitations of the Windows Forms Timer Component's Interval Property](limitations-of-the-timer-component-interval-property.md).","leadings":["","> "],"nodes":[{"content":"There are some limitations when using the <xref:System.Windows.Forms.Timer> component. For more information, see [Limitations of the Windows Forms Timer Component's Interval Property](limitations-of-the-timer-component-interval-property.md).","pos":[9,250],"nodes":[{"content":"There are some limitations when using the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component.","pos":[0,86],"source":"There are some limitations when using the <xref:System.Windows.Forms.Timer> component."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Limitations of the Windows Forms Timer Component's Interval Property<ept id=\"p1\">](limitations-of-the-timer-component-interval-property.md)</ept>.","pos":[87,241],"source":" For more information, see [Limitations of the Windows Forms Timer Component's Interval Property](limitations-of-the-timer-component-interval-property.md)."}]}]},{"pos":[1386,1446],"content":"To run a procedure at set intervals with the Timer component","linkify":"To run a procedure at set intervals with the Timer component","nodes":[{"content":"To run a procedure at set intervals with the Timer component","pos":[0,60]}]},{"content":"Add a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> to your form.","pos":[1456,1509],"source":"Add a <xref:System.Windows.Forms.Timer> to your form."},{"content":"See the following Example section for an illustration of how to do this programmatically.","pos":[1510,1599]},{"content":"Visual Studio also has support for adding components to a form.","pos":[1600,1663]},{"content":"Also see <bpt id=\"p1\">[</bpt>How to: Add Controls Without a User Interface to Windows Forms<ept id=\"p1\">](how-to-add-controls-without-a-user-interface-to-windows-forms.md)</ept>.","pos":[1664,1804],"source":" Also see [How to: Add Controls Without a User Interface to Windows Forms](how-to-add-controls-without-a-user-interface-to-windows-forms.md)."},{"content":"Set the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> property (in milliseconds) for the timer.","pos":[1814,1909],"source":"Set the <xref:System.Windows.Forms.Timer.Interval%2A> property (in milliseconds) for the timer."},{"content":"This property determines how much time will pass before the procedure is run again.","pos":[1910,1993]},{"pos":[2005,2201],"content":"[!NOTE]\nThe more often a timer event occurs, the more processor time is used in responding to the event. This can slow down overall performance. Do not set a smaller interval than you need.","leadings":["","    >  "],"nodes":[{"content":"The more often a timer event occurs, the more processor time is used in responding to the event. This can slow down overall performance. Do not set a smaller interval than you need.","pos":[8,189],"nodes":[{"content":"The more often a timer event occurs, the more processor time is used in responding to the event.","pos":[0,96]},{"content":"This can slow down overall performance.","pos":[97,136]},{"content":"Do not set a smaller interval than you need.","pos":[137,181]}]}]},{"content":"Write appropriate code in the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> event handler.","pos":[2211,2294],"source":"Write appropriate code in the <xref:System.Windows.Forms.Timer.Tick> event handler."},{"content":"The code you write in this event will run at the interval specified in the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> property.","pos":[2295,2425],"source":" The code you write in this event will run at the interval specified in the <xref:System.Windows.Forms.Timer.Interval%2A> property."},{"content":"Set the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph> to start the timer.","pos":[2435,2526],"source":"Set the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `true` to start the timer."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> event will begin to occur, running your procedure at the set interval.","pos":[2527,2640],"source":" The <xref:System.Windows.Forms.Timer.Tick> event will begin to occur, running your procedure at the set interval."},{"content":"At the appropriate time, set the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> property to <ph id=\"ph2\">`false`</ph> to stop the procedure from running again.","pos":[2650,2789],"source":"At the appropriate time, set the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `false` to stop the procedure from running again."},{"content":"Setting the interval to <ph id=\"ph1\">`0`</ph> does not cause the timer to stop.","pos":[2790,2851],"source":" Setting the interval to `0` does not cause the timer to stop."},{"pos":[2860,2867],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This first code example tracks the time of day in one-second increments.","pos":[2871,2943]},{"content":"It uses a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Button&gt;</ph>, a <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Label&gt;</ph>, and a <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component on a form.","pos":[2944,3087],"source":" It uses a <xref:System.Windows.Forms.Button>, a <xref:System.Windows.Forms.Label>, and a <xref:System.Windows.Forms.Timer> component on a form."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> property is set to 1000 (equal to one second).","pos":[3088,3184],"source":" The <xref:System.Windows.Forms.Timer.Interval%2A> property is set to 1000 (equal to one second)."},{"content":"In the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> event, the label's caption is set to the current time.","pos":[3185,3285],"source":" In the <xref:System.Windows.Forms.Timer.Tick> event, the label's caption is set to the current time."},{"content":"When the button is clicked, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>, stopping the timer from updating the label's caption.","pos":[3286,3444],"source":" When the button is clicked, the <xref:System.Windows.Forms.Timer.Enabled%2A> property is set to `false`, stopping the timer from updating the label's caption."},{"content":"The following code example requires that you have a form with a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Button&gt;</ph> control named <ph id=\"ph2\">`Button1`</ph>, a <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> control named <ph id=\"ph4\">`Timer1`</ph>, and a <ph id=\"ph5\">&lt;xref:System.Windows.Forms.Label&gt;</ph> control named <ph id=\"ph6\">`Label1`</ph>.","pos":[3445,3692],"source":" The following code example requires that you have a form with a <xref:System.Windows.Forms.Button> control named `Button1`, a <xref:System.Windows.Forms.Timer> control named `Timer1`, and a <xref:System.Windows.Forms.Label> control named `Label1`."},{"pos":[6271,6278],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This second code example runs a procedure every 600 milliseconds until a loop has finished.","pos":[6282,6373]},{"content":"The following code example requires that you have a form with a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Button&gt;</ph> control named <ph id=\"ph2\">`Button1`</ph>, a <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> control named <ph id=\"ph4\">`Timer1`</ph>, and a <ph id=\"ph5\">&lt;xref:System.Windows.Forms.Label&gt;</ph> control named <ph id=\"ph6\">`Label1`</ph>.","pos":[6374,6621],"source":" The following code example requires that you have a form with a <xref:System.Windows.Forms.Button> control named `Button1`, a <xref:System.Windows.Forms.Timer> control named `Timer1`, and a <xref:System.Windows.Forms.Label> control named `Label1`."},{"pos":[8864,8872],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8912,8963],"content":"<bpt id=\"p1\">[</bpt>Timer Component<ept id=\"p1\">](timer-component-windows-forms.md)</ept>","source":"[Timer Component](timer-component-windows-forms.md)"},{"pos":[8966,9035],"content":"<bpt id=\"p1\">[</bpt>Timer Component Overview<ept id=\"p1\">](timer-component-overview-windows-forms.md)</ept>","source":"[Timer Component Overview](timer-component-overview-windows-forms.md)"}]}