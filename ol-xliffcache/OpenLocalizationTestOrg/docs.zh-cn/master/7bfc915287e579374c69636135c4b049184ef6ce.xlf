<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="generating-and-compiling-source-code-from-a-codedom-graph.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7bfc915287e579374c69636135c4b049184ef6ce</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\generating-and-compiling-source-code-from-a-codedom-graph.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">18af9f1e3d7d0fc20c60e0d47e7031d8aaff4e68</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86bac52dc519720ece5d345e1f6fca6759fb6604</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Generating and Compiling Source Code from a CodeDOM Graph</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generating and Compiling Source Code from a CodeDOM Graph</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler&gt;</ph> namespace provides interfaces for generating source code from CodeDOM object graphs and for managing compilation with supported compilers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A code provider can produce source code in a particular programming language according to a CodeDOM graph.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A class that derives from <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> can typically provide methods for generating and compiling code for the language the provider supports.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using a CodeDOM code provider to generate source code</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To generate source code in a particular language, you need a CodeDOM graph that represents the structure of the source code to generate.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example demonstrate how to create an instance of a <ph id="ph1">&lt;xref:Microsoft.CSharp.CSharpCodeProvider&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The graph for code generation is typically contained in a <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To generate code for a <bpt id="p1">**</bpt>CodeCompileUnit<ept id="p1">**</ept> that contains a CodeDOM graph, call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A&gt;</ph> method of the code provider.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This method has a parameter for a <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> that it uses to generate the source code, so it is sometimes necessary to first create a <bpt id="p1">**</bpt>TextWriter<ept id="p1">**</ept> that can be written to.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example demonstrates generating code from a <bpt id="p1">**</bpt>CodeCompileUnit<ept id="p1">**</ept> and writing the generated source code to a file named HelloWorld.cs.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using a CodeDOM code provider to compile assemblies</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Invoking compilation<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To compile an assembly using a CodeDom provider, you must have either source code to compile in a language for which you have a compiler, or a CodeDOM graph that source code to compile can be generated from.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you are compiling from a CodeDOM graph, pass the <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> containing the graph to the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom%2A&gt;</ph> method of the code provider.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you have a source code file in a language that the compiler understands, pass the name of the file containing the source code to the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile%2A&gt;</ph> method of the CodeDom provider.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also pass a string containing source code in a language that the compiler understands to the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource%2A&gt;</ph> method of the CodeDom provider.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Configuring compilation parameters<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>All of the standard compilation-invoking methods of a CodeDom provider have a parameter of type <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters&gt;</ph> that indicates the options to use for compilation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can specify a file name for the output assembly in the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A&gt;</ph> property of the <bpt id="p1">**</bpt>CompilerParameters<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Otherwise, a default output file name will be used.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By default, a new <bpt id="p1">**</bpt>CompilerParameters<ept id="p1">**</ept> is initialized with its <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A&gt;</ph> property set to <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you are compiling an executable program, you must set the <bpt id="p1">**</bpt>GenerateExecutable<ept id="p1">**</ept> property to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When the <bpt id="p1">**</bpt>GenerateExecutable<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>false<ept id="p2">**</ept>, the compiler will generate a class library.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you are compiling an executable from a CodeDOM graph, a <ph id="ph1">&lt;xref:System.CodeDom.CodeEntryPointMethod&gt;</ph> must be defined in the graph.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If there are multiple code entry points, it may be necessary to set the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A&gt;</ph> property of the <bpt id="p1">**</bpt>CompilerParameters<ept id="p1">**</ept> to the name of the class that defines the entry point to use.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To include debug information in a generated executable, set the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A&gt;</ph> property to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If your project references any assemblies, you must specify the assembly names as items in a <ph id="ph1">&lt;xref:System.Collections.Specialized.StringCollection&gt;</ph> as the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A&gt;</ph> property of the <bpt id="p1">**</bpt>CompilerParameters<ept id="p1">**</ept> you use when invoking compilation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can compile an assembly that is written to memory rather than disk by setting the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A&gt;</ph> property to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When an assembly is generated in memory, your code can obtain a reference to the generated assembly from the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CompilerResults&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If an assembly is written to disk, you can obtain the path to the generated assembly from the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A&gt;</ph> property of a <bpt id="p1">**</bpt>CompilerResults<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To specify a custom command-line arguments string to use when invoking the compilation process, set the string in the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If a Win32 security token is required to invoke the compiler process, specify the token in the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To link a Win32 resource file into the compiled assembly, specify the name of the Win32 resource file in the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To specify a warning level at which to halt compilation, set the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A&gt;</ph> property to an integer that represents the warning level at which to halt compilation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can also configure the compiler to halt compilation if warnings are encountered by setting the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A&gt;</ph> property to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates compiling a source file using a CodeDom provider derived from the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Languages with Initial Support</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides code compilers and code generators for the following languages: C#, Visual Basic, C++, and JScript.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CodeDOM support can be extended to other languages by implementing language-specific code generators and code compilers.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dynamic Source Code Generation and Compilation<ept id="p1">](../../../docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CodeDOM Quick Reference<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/f1dfsbhc(v=vs.100))</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>