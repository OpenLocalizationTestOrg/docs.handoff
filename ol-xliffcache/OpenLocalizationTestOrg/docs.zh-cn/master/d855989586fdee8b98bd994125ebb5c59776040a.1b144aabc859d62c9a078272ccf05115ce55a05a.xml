{"content":"---\ntitle: \"Classes and Structs (C# Programming Guide) | Microsoft Docs\"\ndescription: Describes the use of classes and structures (structs) in C#.\nkeywords: classes (C#), structs (C#), structures (structs) (C#), reference types (C#), value types (C#)\nms.date: \"2016-01-17\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"structs [C#], about structs\"\n  - \"classes [C#], overview\"\n  - \"C# language, structs\"\n  - \"C# language, objects\"\n  - \"objects [C#]\"\n  - \"C# language, classes\"\nms.assetid: cc39dbda-8754-423e-b5b1-16a1db0734c0\ncaps.latest.revision: 48\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Classes and Structs (C# Programming Guide)\nClasses and structs are two of the basic constructs of the common type system in the .NET Framework. Each is essentially a data structure that encapsulates a set of data and behaviors that belong together as a logical unit. The data and behaviors are the *members* of the class or struct, and they include its methods, properties, and events, and so on, as listed later in this topic.  \n  \n A class or struct declaration is like a blueprint that is used to create instances or objects at run time. If you define a class or struct called `Person`, `Person` is the name of the type. If you declare and initialize a variable `p` of type `Person`, `p` is said to be an object or instance of `Person`. Multiple instances of the same `Person` type can be created, and each instance can have different values in its properties and fields.  \n  \n A class is a reference type. When an object of the class is created, the variable to which the object is assigned holds only a reference to that memory. When the object reference is assigned to a new variable, the new variable refers to the original object. Changes made through one variable are reflected in the other variable because they both refer to the same data.  \n  \n A struct is a value type. When a struct is created, the variable to which the struct is assigned holds the struct's actual data. When the struct is assigned to a new variable, it is copied. The new variable and the original variable therefore contain two separate copies of the same data. Changes made to one copy do not affect the other copy.  \n  \n In general, classes are used to model more complex behavior, or data that is intended to be modified after a class object is created. Structs are best suited for small data structures that contain primarily data that is not intended to be modified after the struct is created.  \n  \n For more information, see [Classes](../../../csharp/programming-guide/classes-and-structs/classes.md), [Objects](../../../csharp/programming-guide/classes-and-structs/objects.md), and [Structs](../../../csharp/programming-guide/classes-and-structs/structs.md).  \n  \n## Example  \n In the following example, `CustomClass` in the `ProgrammingGuide` namespace has three members: an instance constructor, a property named `Number`, and a method named `Multiply`. The `Main` method in the `Program` class creates an instance (object) of `CustomClass`, and the objectâ€™s method and property are accessed by using dot notation.\n  \n [!code-cs[csProgGuideObjects#1](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/class1.cs#1)]  \n  \n## Encapsulation  \n *Encapsulation* is sometimes referred to as the first pillar or principle of object-oriented programming. According to the principle of encapsulation, a class or struct can specify how accessible each of its members is to code outside of the class or struct. Methods and variables that are not intended to be used from outside of the class or assembly can be hidden to limit the potential for coding errors or malicious exploits.  \n  \n For more information about classes, see [Classes](../../../csharp/programming-guide/classes-and-structs/classes.md) and [Objects](../../../csharp/programming-guide/classes-and-structs/objects.md).  \n  \n### Members  \n All methods, fields, constants, properties, and events must be declared within a type; these are called the *members* of the type. In C#, there are no global variables or methods as there are in some other languages. Even a program's entry point, the `Main` method, must be declared within a class or struct. The following list includes all the various kinds of members that may be declared in a class or struct.  \n  \n-   [Fields](../../../csharp/programming-guide/classes-and-structs/fields.md)  \n  \n-   [Constants](../../../csharp/programming-guide/classes-and-structs/constants.md)  \n  \n-   [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)  \n  \n-   [Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)  \n  \n-   [Constructors](../../../csharp/programming-guide/classes-and-structs/constructors.md)  \n  \n-   [Events](../../../csharp/programming-guide/events/index.md)  \n  \n-   [Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)  \n  \n-   [Indexers](../../../csharp/programming-guide/indexers/index.md)  \n  \n-   [Operators](../../../csharp/programming-guide/statements-expressions-operators/operators.md)  \n  \n-   [Nested Types](../../../csharp/programming-guide/classes-and-structs/nested-types.md)  \n  \n### Accessibility  \n Some methods and properties are meant to be called or accessed from code outside your class or struct, known as *client code*. Other methods and properties might be only for use in the class or struct itself. It is important to limit the accessibility of your code so that only the intended client code can reach it. You specify how accessible your types and their members are to client code by using the access modifiers [public](../../../csharp/language-reference/keywords/public.md), [protected](../../../csharp/language-reference/keywords/protected.md), [internal](../../../csharp/language-reference/keywords/internal.md), `protected internal`, and [private](../../../csharp/language-reference/keywords/private.md). The default accessibility is `private`. For more information, see [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md).  \n  \n### Inheritance  \n Classes (but not structs) support the concept of inheritance. A class that derives from another class (the *base class*) automatically contains all the public, protected, and internal members of the base class except its constructors and finalizers. For more information, see [Inheritance](../../../csharp/programming-guide/classes-and-structs/inheritance.md) and [Polymorphism](../../../csharp/programming-guide/classes-and-structs/polymorphism.md).  \n  \n Classes may be declared as [abstract](../../../csharp/language-reference/keywords/abstract.md), which means that one or more of their methods have no implementation. Although abstract classes cannot be instantiated directly, they can serve as base classes for other classes that provide the missing implementation. Classes can also be declared as [sealed](../../../csharp/language-reference/keywords/sealed.md) to prevent other classes from inheriting from them. For more information, see [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md).  \n  \n### Interfaces  \n Classes and structs can inherit multiple interfaces. To inherit from an interface means that the type implements all the methods defined in the interface. For more information, see [Interfaces](../../../csharp/programming-guide/interfaces/index.md).  \n  \n### Generic Types  \n Classes and structs can be defined with one or more type parameters. Client code supplies the type when it creates an instance of the type. For example The <xref:System.Collections.Generic.List%601> class in the <xref:System.Collections.Generic> namespace is defined with one type parameter. Client code creates an instance of a `List<string>` or `List<int>` to specify the type that the list will hold. For more information, see [Generics](../../../csharp/programming-guide/generics/index.md).  \n  \n### Static Types  \n Classes (but not structs) can be declared as [static](../../../csharp/language-reference/keywords/static.md). A static class can contain only static members and cannot be instantiated with the new keyword. One copy of the class is loaded into memory when the program loads, and its members are accessed through the class name. Both classes and structs can contain static members. For more information, see [Static Classes and Static Class Members](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md).  \n  \n### Nested Types  \n A class or struct can be nested within another class or struct. For more information, see [Nested Types](../../../csharp/programming-guide/classes-and-structs/nested-types.md).  \n  \n### Partial Types  \n You can define part of a class, struct or method in one code file and another part in a separate code file. For more information, see [Partial Classes and Methods](../../../csharp/programming-guide/classes-and-structs/partial-classes-and-methods.md).  \n  \n### Object Initializers  \n You can instantiate and initialize class or struct objects, and collections of objects, without explicitly calling their constructor. For more information, see [Object and Collection Initializers](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md).  \n  \n### Anonymous Types  \n In situations where it is not convenient or necessary to create a named class, for example when you are populating a list with data structures that you do not have to persist or pass to another method, you use anonymous types. For more information, see [Anonymous Types](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md).  \n  \n### Extension Methods  \n You can \"extend\" a class without creating a derived class by creating a separate type whose methods can be called as if they belonged to the original type. For more information, see [Extension Methods](../../../csharp/programming-guide/classes-and-structs/extension-methods.md).  \n  \n### Implicitly Typed Local Variables  \n Within a class or struct method, you can use implicit typing to instruct the compiler to determine the correct type at compile time. For more information, see [Implicitly Typed Local Variables](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md).  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)","nodes":[{"pos":[12,71],"content":"Classes and Structs (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Classes and Structs (C# Programming Guide) | Microsoft Docs","pos":[0,59]}]},{"pos":[86,146],"content":"Describes the use of classes and structures (structs) in C#.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes the use of classes and structures (structs) in C#.","pos":[0,60]}]},{"pos":[157,250],"content":"classes (C#), structs (C#), structures (structs) (C#), reference types (C#), value types (C#)","needQuote":true,"needEscape":true,"nodes":[{"content":"classes (C#), structs (C#), structures (structs) (C#), reference types (C#), value types (C#)","pos":[0,93]}]},{"pos":[859,901],"content":"Classes and Structs (C# Programming Guide)","linkify":"Classes and Structs (C# Programming Guide)","nodes":[{"content":"Classes and Structs (C# Programming Guide)","pos":[0,42]}]},{"content":"Classes and structs are two of the basic constructs of the common type system in the .NET Framework.","pos":[902,1002]},{"content":"Each is essentially a data structure that encapsulates a set of data and behaviors that belong together as a logical unit.","pos":[1003,1125]},{"content":"The data and behaviors are the <bpt id=\"p1\">*</bpt>members<ept id=\"p1\">*</ept> of the class or struct, and they include its methods, properties, and events, and so on, as listed later in this topic.","pos":[1126,1286],"source":" The data and behaviors are the *members* of the class or struct, and they include its methods, properties, and events, and so on, as listed later in this topic."},{"content":"A class or struct declaration is like a blueprint that is used to create instances or objects at run time.","pos":[1293,1399]},{"content":"If you define a class or struct called <ph id=\"ph1\">`Person`</ph>, <ph id=\"ph2\">`Person`</ph> is the name of the type.","pos":[1400,1482],"source":" If you define a class or struct called `Person`, `Person` is the name of the type."},{"content":"If you declare and initialize a variable <ph id=\"ph1\">`p`</ph> of type <ph id=\"ph2\">`Person`</ph>, <ph id=\"ph3\">`p`</ph> is said to be an object or instance of <ph id=\"ph4\">`Person`</ph>.","pos":[1483,1598],"source":" If you declare and initialize a variable `p` of type `Person`, `p` is said to be an object or instance of `Person`."},{"content":"Multiple instances of the same <ph id=\"ph1\">`Person`</ph> type can be created, and each instance can have different values in its properties and fields.","pos":[1599,1733],"source":" Multiple instances of the same `Person` type can be created, and each instance can have different values in its properties and fields."},{"content":"A class is a reference type.","pos":[1740,1768]},{"content":"When an object of the class is created, the variable to which the object is assigned holds only a reference to that memory.","pos":[1769,1892]},{"content":"When the object reference is assigned to a new variable, the new variable refers to the original object.","pos":[1893,1997]},{"content":"Changes made through one variable are reflected in the other variable because they both refer to the same data.","pos":[1998,2109]},{"content":"A struct is a value type.","pos":[2116,2141]},{"content":"When a struct is created, the variable to which the struct is assigned holds the struct's actual data.","pos":[2142,2244]},{"content":"When the struct is assigned to a new variable, it is copied.","pos":[2245,2305]},{"content":"The new variable and the original variable therefore contain two separate copies of the same data.","pos":[2306,2404]},{"content":"Changes made to one copy do not affect the other copy.","pos":[2405,2459]},{"content":"In general, classes are used to model more complex behavior, or data that is intended to be modified after a class object is created.","pos":[2466,2599]},{"content":"Structs are best suited for small data structures that contain primarily data that is not intended to be modified after the struct is created.","pos":[2600,2742]},{"pos":[2749,3009],"content":"For more information, see <bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/classes.md)</ept>, <bpt id=\"p2\">[</bpt>Objects<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/objects.md)</ept>, and <bpt id=\"p3\">[</bpt>Structs<ept id=\"p3\">](../../../csharp/programming-guide/classes-and-structs/structs.md)</ept>.","source":"For more information, see [Classes](../../../csharp/programming-guide/classes-and-structs/classes.md), [Objects](../../../csharp/programming-guide/classes-and-structs/objects.md), and [Structs](../../../csharp/programming-guide/classes-and-structs/structs.md)."},{"pos":[3018,3025],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, <ph id=\"ph1\">`CustomClass`</ph> in the <ph id=\"ph2\">`ProgrammingGuide`</ph> namespace has three members: an instance constructor, a property named <ph id=\"ph3\">`Number`</ph>, and a method named <ph id=\"ph4\">`Multiply`</ph>.","pos":[3029,3206],"source":"In the following example, `CustomClass` in the `ProgrammingGuide` namespace has three members: an instance constructor, a property named `Number`, and a method named `Multiply`."},{"content":"The <ph id=\"ph1\">`Main`</ph> method in the <ph id=\"ph2\">`Program`</ph> class creates an instance (object) of <ph id=\"ph3\">`CustomClass`</ph>, and the objectâ€™s method and property are accessed by using dot notation.","pos":[3207,3367],"source":" The `Main` method in the `Program` class creates an instance (object) of `CustomClass`, and the objectâ€™s method and property are accessed by using dot notation."},{"pos":[3372,3491],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideObjects#1<ept id=\"p2\">](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/class1.cs#1)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideObjects#1](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/class1.cs#1)]"},{"pos":[3500,3513],"content":"Encapsulation","linkify":"Encapsulation","nodes":[{"content":"Encapsulation","pos":[0,13]}]},{"content":"<bpt id=\"p1\">*</bpt>Encapsulation<ept id=\"p1\">*</ept> is sometimes referred to as the first pillar or principle of object-oriented programming.","pos":[3517,3622],"source":"*Encapsulation* is sometimes referred to as the first pillar or principle of object-oriented programming."},{"content":"According to the principle of encapsulation, a class or struct can specify how accessible each of its members is to code outside of the class or struct.","pos":[3623,3775]},{"content":"Methods and variables that are not intended to be used from outside of the class or assembly can be hidden to limit the potential for coding errors or malicious exploits.","pos":[3776,3946]},{"pos":[3953,4149],"content":"For more information about classes, see <bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/classes.md)</ept> and <bpt id=\"p2\">[</bpt>Objects<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/objects.md)</ept>.","source":"For more information about classes, see [Classes](../../../csharp/programming-guide/classes-and-structs/classes.md) and [Objects](../../../csharp/programming-guide/classes-and-structs/objects.md)."},{"pos":[4159,4166],"content":"Members","linkify":"Members","nodes":[{"content":"Members","pos":[0,7]}]},{"content":"All methods, fields, constants, properties, and events must be declared within a type; these are called the <bpt id=\"p1\">*</bpt>members<ept id=\"p1\">*</ept> of the type.","pos":[4170,4300],"source":"All methods, fields, constants, properties, and events must be declared within a type; these are called the *members* of the type."},{"content":"In C#, there are no global variables or methods as there are in some other languages.","pos":[4301,4386]},{"content":"Even a program's entry point, the <ph id=\"ph1\">`Main`</ph> method, must be declared within a class or struct.","pos":[4387,4478],"source":" Even a program's entry point, the `Main` method, must be declared within a class or struct."},{"content":"The following list includes all the various kinds of members that may be declared in a class or struct.","pos":[4479,4582]},{"pos":[4592,4665],"content":"<bpt id=\"p1\">[</bpt>Fields<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/fields.md)</ept>","source":"[Fields](../../../csharp/programming-guide/classes-and-structs/fields.md)"},{"pos":[4675,4754],"content":"<bpt id=\"p1\">[</bpt>Constants<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/constants.md)</ept>","source":"[Constants](../../../csharp/programming-guide/classes-and-structs/constants.md)"},{"pos":[4764,4845],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","source":"[Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"},{"pos":[4855,4930],"content":"<bpt id=\"p1\">[</bpt>Methods<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept>","source":"[Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)"},{"pos":[4940,5025],"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/constructors.md)</ept>","source":"[Constructors](../../../csharp/programming-guide/classes-and-structs/constructors.md)"},{"pos":[5035,5094],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept>","source":"[Events](../../../csharp/programming-guide/events/index.md)"},{"pos":[5104,5186],"content":"<bpt id=\"p1\">[</bpt>Finalizers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/destructors.md)</ept>","source":"[Finalizers](../../../csharp/programming-guide/classes-and-structs/destructors.md)"},{"pos":[5196,5259],"content":"<bpt id=\"p1\">[</bpt>Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/index.md)</ept>","source":"[Indexers](../../../csharp/programming-guide/indexers/index.md)"},{"pos":[5269,5361],"content":"<bpt id=\"p1\">[</bpt>Operators<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/operators.md)</ept>","source":"[Operators](../../../csharp/programming-guide/statements-expressions-operators/operators.md)"},{"pos":[5371,5456],"content":"<bpt id=\"p1\">[</bpt>Nested Types<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/nested-types.md)</ept>","source":"[Nested Types](../../../csharp/programming-guide/classes-and-structs/nested-types.md)"},{"pos":[5466,5479],"content":"Accessibility","linkify":"Accessibility","nodes":[{"content":"Accessibility","pos":[0,13]}]},{"content":"Some methods and properties are meant to be called or accessed from code outside your class or struct, known as <bpt id=\"p1\">*</bpt>client code<ept id=\"p1\">*</ept>.","pos":[5483,5609],"source":"Some methods and properties are meant to be called or accessed from code outside your class or struct, known as *client code*."},{"content":"Other methods and properties might be only for use in the class or struct itself.","pos":[5610,5691]},{"content":"It is important to limit the accessibility of your code so that only the intended client code can reach it.","pos":[5692,5799]},{"content":"You specify how accessible your types and their members are to client code by using the access modifiers <bpt id=\"p1\">[</bpt>public<ept id=\"p1\">](../../../csharp/language-reference/keywords/public.md)</ept>, <bpt id=\"p2\">[</bpt>protected<ept id=\"p2\">](../../../csharp/language-reference/keywords/protected.md)</ept>, <bpt id=\"p3\">[</bpt>internal<ept id=\"p3\">](../../../csharp/language-reference/keywords/internal.md)</ept>, <ph id=\"ph1\">`protected internal`</ph>, and <bpt id=\"p4\">[</bpt>private<ept id=\"p4\">](../../../csharp/language-reference/keywords/private.md)</ept>.","pos":[5800,6202],"source":" You specify how accessible your types and their members are to client code by using the access modifiers [public](../../../csharp/language-reference/keywords/public.md), [protected](../../../csharp/language-reference/keywords/protected.md), [internal](../../../csharp/language-reference/keywords/internal.md), `protected internal`, and [private](../../../csharp/language-reference/keywords/private.md)."},{"content":"The default accessibility is <ph id=\"ph1\">`private`</ph>.","pos":[6203,6242],"source":" The default accessibility is `private`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Access Modifiers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)</ept>.","pos":[6243,6363],"source":" For more information, see [Access Modifiers](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)."},{"pos":[6373,6384],"content":"Inheritance","linkify":"Inheritance","nodes":[{"content":"Inheritance","pos":[0,11]}]},{"content":"Classes (but not structs) support the concept of inheritance.","pos":[6388,6449]},{"content":"A class that derives from another class (the <bpt id=\"p1\">*</bpt>base class<ept id=\"p1\">*</ept>) automatically contains all the public, protected, and internal members of the base class except its constructors and finalizers.","pos":[6450,6637],"source":" A class that derives from another class (the *base class*) automatically contains all the public, protected, and internal members of the base class except its constructors and finalizers."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Inheritance<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/inheritance.md)</ept> and <bpt id=\"p2\">[</bpt>Polymorphism<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/polymorphism.md)</ept>.","pos":[6638,6838],"source":" For more information, see [Inheritance](../../../csharp/programming-guide/classes-and-structs/inheritance.md) and [Polymorphism](../../../csharp/programming-guide/classes-and-structs/polymorphism.md)."},{"content":"Classes may be declared as <bpt id=\"p1\">[</bpt>abstract<ept id=\"p1\">](../../../csharp/language-reference/keywords/abstract.md)</ept>, which means that one or more of their methods have no implementation.","pos":[6845,7010],"source":"Classes may be declared as [abstract](../../../csharp/language-reference/keywords/abstract.md), which means that one or more of their methods have no implementation."},{"content":"Although abstract classes cannot be instantiated directly, they can serve as base classes for other classes that provide the missing implementation.","pos":[7011,7159]},{"content":"Classes can also be declared as <bpt id=\"p1\">[</bpt>sealed<ept id=\"p1\">](../../../csharp/language-reference/keywords/sealed.md)</ept> to prevent other classes from inheriting from them.","pos":[7160,7307],"source":" Classes can also be declared as [sealed](../../../csharp/language-reference/keywords/sealed.md) to prevent other classes from inheriting from them."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Abstract and Sealed Classes and Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept>.","pos":[7308,7486],"source":" For more information, see [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)."},{"pos":[7496,7506],"content":"Interfaces","linkify":"Interfaces","nodes":[{"content":"Interfaces","pos":[0,10]}]},{"content":"Classes and structs can inherit multiple interfaces.","pos":[7510,7562]},{"content":"To inherit from an interface means that the type implements all the methods defined in the interface.","pos":[7563,7664]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](../../../csharp/programming-guide/interfaces/index.md)</ept>.","pos":[7665,7759],"source":" For more information, see [Interfaces](../../../csharp/programming-guide/interfaces/index.md)."},{"pos":[7769,7782],"content":"Generic Types","linkify":"Generic Types","nodes":[{"content":"Generic Types","pos":[0,13]}]},{"content":"Classes and structs can be defined with one or more type parameters.","pos":[7786,7854]},{"content":"Client code supplies the type when it creates an instance of the type.","pos":[7855,7925]},{"content":"For example The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic&gt;</ph> namespace is defined with one type parameter.","pos":[7926,8077],"source":" For example The <xref:System.Collections.Generic.List%601> class in the <xref:System.Collections.Generic> namespace is defined with one type parameter."},{"content":"Client code creates an instance of a <ph id=\"ph1\">`List&lt;string&gt;`</ph> or <ph id=\"ph2\">`List&lt;int&gt;`</ph> to specify the type that the list will hold.","pos":[8078,8189],"source":" Client code creates an instance of a `List<string>` or `List<int>` to specify the type that the list will hold."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Generics<ept id=\"p1\">](../../../csharp/programming-guide/generics/index.md)</ept>.","pos":[8190,8280],"source":" For more information, see [Generics](../../../csharp/programming-guide/generics/index.md)."},{"pos":[8290,8302],"content":"Static Types","linkify":"Static Types","nodes":[{"content":"Static Types","pos":[0,12]}]},{"content":"Classes (but not structs) can be declared as <bpt id=\"p1\">[</bpt>static<ept id=\"p1\">](../../../csharp/language-reference/keywords/static.md)</ept>.","pos":[8306,8415],"source":"Classes (but not structs) can be declared as [static](../../../csharp/language-reference/keywords/static.md)."},{"content":"A static class can contain only static members and cannot be instantiated with the new keyword.","pos":[8416,8511]},{"content":"One copy of the class is loaded into memory when the program loads, and its members are accessed through the class name.","pos":[8512,8632]},{"content":"Both classes and structs can contain static members.","pos":[8633,8685]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Static Classes and Static Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md)</ept>.","pos":[8686,8852],"source":" For more information, see [Static Classes and Static Class Members](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md)."},{"pos":[8862,8874],"content":"Nested Types","linkify":"Nested Types","nodes":[{"content":"Nested Types","pos":[0,12]}]},{"content":"A class or struct can be nested within another class or struct.","pos":[8878,8941]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Nested Types<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/nested-types.md)</ept>.","pos":[8942,9054],"source":" For more information, see [Nested Types](../../../csharp/programming-guide/classes-and-structs/nested-types.md)."},{"pos":[9064,9077],"content":"Partial Types","linkify":"Partial Types","nodes":[{"content":"Partial Types","pos":[0,13]}]},{"content":"You can define part of a class, struct or method in one code file and another part in a separate code file.","pos":[9081,9188]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Partial Classes and Methods<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/partial-classes-and-methods.md)</ept>.","pos":[9189,9331],"source":" For more information, see [Partial Classes and Methods](../../../csharp/programming-guide/classes-and-structs/partial-classes-and-methods.md)."},{"pos":[9341,9360],"content":"Object Initializers","linkify":"Object Initializers","nodes":[{"content":"Object Initializers","pos":[0,19]}]},{"content":"You can instantiate and initialize class or struct objects, and collections of objects, without explicitly calling their constructor.","pos":[9364,9497]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Object and Collection Initializers<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept>.","pos":[9498,9654],"source":" For more information, see [Object and Collection Initializers](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)."},{"pos":[9664,9679],"content":"Anonymous Types","linkify":"Anonymous Types","nodes":[{"content":"Anonymous Types","pos":[0,15]}]},{"content":"In situations where it is not convenient or necessary to create a named class, for example when you are populating a list with data structures that you do not have to persist or pass to another method, you use anonymous types.","pos":[9683,9909]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Anonymous Types<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)</ept>.","pos":[9910,10028],"source":" For more information, see [Anonymous Types](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)."},{"pos":[10038,10055],"content":"Extension Methods","linkify":"Extension Methods","nodes":[{"content":"Extension Methods","pos":[0,17]}]},{"content":"You can \"extend\" a class without creating a derived class by creating a separate type whose methods can be called as if they belonged to the original type.","pos":[10059,10214]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Extension Methods<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/extension-methods.md)</ept>.","pos":[10215,10337],"source":" For more information, see [Extension Methods](../../../csharp/programming-guide/classes-and-structs/extension-methods.md)."},{"pos":[10347,10379],"content":"Implicitly Typed Local Variables","linkify":"Implicitly Typed Local Variables","nodes":[{"content":"Implicitly Typed Local Variables","pos":[0,32]}]},{"content":"Within a class or struct method, you can use implicit typing to instruct the compiler to determine the correct type at compile time.","pos":[10383,10515]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Implicitly Typed Local Variables<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>.","pos":[10516,10668],"source":" For more information, see [Implicitly Typed Local Variables](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)."},{"pos":[10677,10702],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[10816,10824],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[10828,10894],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"}]}