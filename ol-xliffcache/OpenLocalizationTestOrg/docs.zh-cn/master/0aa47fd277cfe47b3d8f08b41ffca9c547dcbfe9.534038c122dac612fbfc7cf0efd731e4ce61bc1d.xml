{"content":"---\ntitle: \"Function Expression (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"Function expression [Visual Basic]\"\n  - \"functions [Visual Basic], function expressions\"\n  - \"lambda expressions [Visual Basic], function expression\"\nms.assetid: e8a47a45-4b8a-4f45-a623-7653625dffbc\n---\n# Function Expression (Visual Basic)\nDeclares the parameters and code that define a function lambda expression.  \n  \n## Syntax  \n  \n```  \nFunction ( [ parameterlist ] ) expression  \n- or -  \nFunction ( [ parameterlist ] )  \n  [ statements ]  \nEnd Function  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`parameterlist`|Optional. A list of local variable names that represent the parameters of this procedure. The parentheses must be present even when the list is empty. See [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md).|  \n|`expression`|Required. A single expression. The type of the expression is the return type of the function.|  \n|`statements`|Required. A list of statements that returns a value by using the `Return` statement. (See [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md).) The type of the value returned is the return type of the function.|  \n  \n## Remarks  \n A *lambda expression* is a function without a name that calculates and returns a value. You can use a lambda expression anywhere you can use a delegate type, except as an argument to `RemoveHandler`. For more information about delegates, and the use of lambda expressions with delegates, see [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md) and [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md).  \n  \n## Lambda Expression Syntax  \n The syntax of a lambda expression resembles that of a standard function. The differences are as follows:  \n  \n-   A lambda expression does not have a name.  \n  \n-   Lambda expressions cannot have modifiers, such as `Overloads` or `Overrides`.  \n  \n-   Lambda expressions do not use an `As` clause to designate the return type of the function. Instead, the type is inferred from the value that the body of a single-line lambda expression evaluates to, or the return value of a multiline lambda expression. For example, if the body of a single-line lambda expression is `Where cust.City = \"London\"`, its return type is `Boolean`.  \n  \n-   The body of a single-line lambda expression must be an expression, not a statement. The body can consist of a call to a function procedure, but not a call to a sub procedure.  \n  \n-   Either all parameters must have specified data types or all must be inferred.  \n  \n-   Optional and Paramarray parameters are not permitted.  \n  \n-   Generic parameters are not permitted.  \n  \n## Example  \n The following examples show two ways to create simple lambda expressions. The first uses a `Dim` to provide a name for the function. To call the function, you send in a value for the parameter.  \n  \n [!code-vb[VbVbalrLambdas#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#1)]  \n  \n [!code-vb[VbVbalrLambdas#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#2)]  \n  \n## Example  \n Alternatively, you can declare and run the function at the same time.  \n  \n [!code-vb[VbVbalrLambdas#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#3)]  \n  \n## Example  \n Following is an example of a lambda expression that increments its argument and returns the value. The example shows both the single-line and multiline lambda expression syntax for a function. For more examples, see [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md).  \n  \n [!code-vb[VbVbalrLambdas#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrLambdas/VB/Class1.vb#14)]  \n  \n## Example  \n Lambda expressions underlie many of the query operators in [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)], and can be used explicitly in method-based queries. The following example shows a typical [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query, followed by the translation of the query into method format.  \n  \n```vb  \nDim londonCusts = From cust In db.Customers  \n                       Where cust.City = \"London\"  \n                       Select cust  \n  \n' This query is compiled to the following code:  \nDim londonCusts = db.Customers.  \n                  Where(Function(cust) cust.City = \"London\").  \n                  Select(Function(cust) cust)  \n```  \n  \n For more information about query methods, see [Queries](../../../visual-basic/language-reference/queries/index.md). For more information about standard query operators, see [Standard Query Operators Overview](../../programming-guide/concepts/linq/standard-query-operators-overview.md).  \n  \n## See also\n\n- [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)\n- [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)\n- [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n- [Value Comparisons](../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)\n- [Boolean Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)\n- [If Operator](../../../visual-basic/language-reference/operators/if-operator.md)\n- [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)\n","nodes":[{"pos":[4,293],"embed":true,"restype":"x-metadata","content":"title: \"Function Expression (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"Function expression [Visual Basic]\"\n  - \"functions [Visual Basic], function expressions\"\n  - \"lambda expressions [Visual Basic], function expression\"\nms.assetid: e8a47a45-4b8a-4f45-a623-7653625dffbc","nodes":[{"content":"Function Expression (Visual Basic)","nodes":[{"pos":[0,34],"content":"Function Expression (Visual Basic)","nodes":[{"content":"Function Expression (Visual Basic)","pos":[0,34]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[300,334],"content":"Function Expression (Visual Basic)","linkify":"Function Expression (Visual Basic)","nodes":[{"content":"Function Expression (Visual Basic)","pos":[0,34]}]},{"content":"Declares the parameters and code that define a function lambda expression.","pos":[335,409]},{"pos":[418,424],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[568,573],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[580,584]},{"content":"Definition","pos":[585,595]},{"content":"Optional.","pos":[628,637]},{"content":"A list of local variable names that represent the parameters of this procedure.","pos":[638,717]},{"content":"The parentheses must be present even when the list is empty.","pos":[718,778]},{"content":"See <bpt id=\"p1\">[</bpt>Parameter List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept>.","pos":[779,871],"source":" See [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md)."},{"content":"Required.","pos":[889,898]},{"content":"A single expression.","pos":[899,919]},{"content":"The type of the expression is the return type of the function.","pos":[920,982]},{"content":"Required.","pos":[1000,1009]},{"content":"A list of statements that returns a value by using the <ph id=\"ph1\">`Return`</ph> statement.","pos":[1010,1084],"source":" A list of statements that returns a value by using the `Return` statement."},{"content":"(See <bpt id=\"p1\">[</bpt>Return Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/return-statement.md)</ept>.) The type of the value returned is the return type of the function.","pos":[1085,1250],"source":" (See [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md).) The type of the value returned is the return type of the function."},{"pos":[1260,1267],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <bpt id=\"p1\">*</bpt>lambda expression<ept id=\"p1\">*</ept> is a function without a name that calculates and returns a value.","pos":[1271,1358],"source":"A *lambda expression* is a function without a name that calculates and returns a value."},{"content":"You can use a lambda expression anywhere you can use a delegate type, except as an argument to <ph id=\"ph1\">`RemoveHandler`</ph>.","pos":[1359,1470],"source":" You can use a lambda expression anywhere you can use a delegate type, except as an argument to `RemoveHandler`."},{"content":"For more information about delegates, and the use of lambda expressions with delegates, see <bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept> and <bpt id=\"p2\">[</bpt>Relaxed Delegate Conversion<ept id=\"p2\">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>.","pos":[1471,1793],"source":" For more information about delegates, and the use of lambda expressions with delegates, see [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md) and [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)."},{"pos":[1802,1826],"content":"Lambda Expression Syntax","linkify":"Lambda Expression Syntax","nodes":[{"content":"Lambda Expression Syntax","pos":[0,24]}]},{"content":"The syntax of a lambda expression resembles that of a standard function.","pos":[1830,1902]},{"content":"The differences are as follows:","pos":[1903,1934]},{"content":"A lambda expression does not have a name.","pos":[1944,1985]},{"pos":[1995,2072],"content":"Lambda expressions cannot have modifiers, such as <ph id=\"ph1\">`Overloads`</ph> or <ph id=\"ph2\">`Overrides`</ph>.","source":"Lambda expressions cannot have modifiers, such as `Overloads` or `Overrides`."},{"content":"Lambda expressions do not use an <ph id=\"ph1\">`As`</ph> clause to designate the return type of the function.","pos":[2082,2172],"source":"Lambda expressions do not use an `As` clause to designate the return type of the function."},{"content":"Instead, the type is inferred from the value that the body of a single-line lambda expression evaluates to, or the return value of a multiline lambda expression.","pos":[2173,2334]},{"content":"For example, if the body of a single-line lambda expression is <ph id=\"ph1\">`Where cust.City = \"London\"`</ph>, its return type is <ph id=\"ph2\">`Boolean`</ph>.","pos":[2335,2457],"source":" For example, if the body of a single-line lambda expression is `Where cust.City = \"London\"`, its return type is `Boolean`."},{"content":"The body of a single-line lambda expression must be an expression, not a statement.","pos":[2467,2550]},{"content":"The body can consist of a call to a function procedure, but not a call to a sub procedure.","pos":[2551,2641]},{"content":"Either all parameters must have specified data types or all must be inferred.","pos":[2651,2728]},{"content":"Optional and Paramarray parameters are not permitted.","pos":[2738,2791]},{"content":"Generic parameters are not permitted.","pos":[2801,2838]},{"pos":[2847,2854],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following examples show two ways to create simple lambda expressions.","pos":[2858,2931]},{"content":"The first uses a <ph id=\"ph1\">`Dim`</ph> to provide a name for the function.","pos":[2932,2990],"source":" The first uses a `Dim` to provide a name for the function."},{"content":"To call the function, you send in a value for the parameter.","pos":[2991,3051]},{"pos":[3296,3303],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Alternatively, you can declare and run the function at the same time.","pos":[3307,3376]},{"pos":[3503,3510],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Following is an example of a lambda expression that increments its argument and returns the value.","pos":[3514,3612]},{"content":"The example shows both the single-line and multiline lambda expression syntax for a function.","pos":[3613,3706]},{"content":"For more examples, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.","pos":[3707,3843],"source":" For more examples, see [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)."},{"pos":[3972,3979],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Lambda expressions underlie many of the query operators in <ph id=\"ph1\">[!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]</ph>, and can be used explicitly in method-based queries.","pos":[3983,4150],"source":"Lambda expressions underlie many of the query operators in [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)], and can be used explicitly in method-based queries."},{"content":"The following example shows a typical <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query, followed by the translation of the query into method format.","pos":[4151,4306],"source":" The following example shows a typical [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query, followed by the translation of the query into method format."},{"content":"For more information about query methods, see <bpt id=\"p1\">[</bpt>Queries<ept id=\"p1\">](../../../visual-basic/language-reference/queries/index.md)</ept>.","pos":[4664,4779],"source":"For more information about query methods, see [Queries](../../../visual-basic/language-reference/queries/index.md)."},{"content":"For more information about standard query operators, see <bpt id=\"p1\">[</bpt>Standard Query Operators Overview<ept id=\"p1\">](../../programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.","pos":[4780,4949],"source":" For more information about standard query operators, see [Standard Query Operators Overview](../../programming-guide/concepts/linq/standard-query-operators-overview.md)."},{"pos":[4958,4966],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4970,5065],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[5068,5180],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>","source":"[Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)"},{"pos":[5183,5304],"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept>","source":"[Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)"},{"pos":[5307,5392],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"},{"pos":[5395,5520],"content":"<bpt id=\"p1\">[</bpt>Value Comparisons<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept>","source":"[Value Comparisons](../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)"},{"pos":[5523,5652],"content":"<bpt id=\"p1\">[</bpt>Boolean Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)</ept>","source":"[Boolean Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)"},{"pos":[5655,5735],"content":"<bpt id=\"p1\">[</bpt>If Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/if-operator.md)</ept>","source":"[If Operator](../../../visual-basic/language-reference/operators/if-operator.md)"},{"pos":[5738,5867],"content":"<bpt id=\"p1\">[</bpt>Relaxed Delegate Conversion<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>","source":"[Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)"}]}