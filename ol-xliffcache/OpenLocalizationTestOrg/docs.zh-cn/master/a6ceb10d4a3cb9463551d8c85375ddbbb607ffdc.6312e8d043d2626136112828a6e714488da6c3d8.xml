{"content":"---\ntitle: \"Zero-based vs. One-based String Access in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"strings [Visual Basic], indexing\"\nms.assetid: 0ed39f35-d68e-421d-ae14-460a5c0373b8\n---\n# Zero-based vs. One-based String Access in Visual Basic\nThis topic compares how Visual Basic and the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] provide access to the characters in a string. The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] always provides zero-based access to the characters in a string, whereas Visual Basic provides zero-based and one-based access, depending on the function.  \n  \n## One-Based  \n For an example of a one-based Visual Basic function, consider the `Mid` function. It takes an argument that indicates the character position at which the substring will start, starting with position 1. The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] <xref:System.String.Substring%2A?displayProperty=nameWithType> method takes an index of the character in the string at which the substring is to start, starting with position 0. Thus, if you have a string \"ABCDE\", the individual characters are numbered 1,2,3,4,5 for use with the `Mid` function, but 0,1,2,3,4 for use with the <xref:System.String.Substring%2A?displayProperty=nameWithType> method.  \n  \n## Zero-Based  \n For an example of a zero-based Visual Basic function, consider the `Split` function. It splits a string and returns an array containing the substrings. The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] <xref:System.String.Split%2A?displayProperty=nameWithType> method also splits a string and returns an array containing the substrings. Because the `Split` function and <xref:System.String.Split%2A> method return [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] arrays, they must be zero-based.  \n  \n## See also\n\n- <xref:Microsoft.VisualBasic.Strings.Mid%2A>\n- <xref:Microsoft.VisualBasic.Strings.Split%2A>\n- <xref:System.String.Substring%2A>\n- <xref:System.String.Split%2A>\n- [Introduction to Strings in Visual Basic](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)\n","nodes":[{"pos":[4,197],"embed":true,"restype":"x-metadata","content":"title: \"Zero-based vs. One-based String Access in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"strings [Visual Basic], indexing\"\nms.assetid: 0ed39f35-d68e-421d-ae14-460a5c0373b8","nodes":[{"content":"Zero-based vs. One-based String Access in Visual Basic","nodes":[{"pos":[0,54],"content":"Zero-based vs. One-based String Access in Visual Basic","nodes":[{"content":"Zero-based vs. One-based String Access in Visual Basic","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[204,258],"content":"Zero-based vs. One-based String Access in Visual Basic","linkify":"Zero-based vs. One-based String Access in Visual Basic","nodes":[{"content":"Zero-based vs. One-based String Access in Visual Basic","pos":[0,54]}]},{"content":"This topic compares how Visual Basic and the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> provide access to the characters in a string.","pos":[259,403],"source":"This topic compares how Visual Basic and the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] provide access to the characters in a string."},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> always provides zero-based access to the characters in a string, whereas Visual Basic provides zero-based and one-based access, depending on the function.","pos":[404,616],"source":" The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] always provides zero-based access to the characters in a string, whereas Visual Basic provides zero-based and one-based access, depending on the function."},{"pos":[625,634],"content":"One-Based","linkify":"One-Based","nodes":[{"content":"One-Based","pos":[0,9]}]},{"content":"For an example of a one-based Visual Basic function, consider the <ph id=\"ph1\">`Mid`</ph> function.","pos":[638,719],"source":"For an example of a one-based Visual Basic function, consider the `Mid` function."},{"content":"It takes an argument that indicates the character position at which the substring will start, starting with position 1.","pos":[720,839]},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> <ph id=\"ph2\">&lt;xref:System.String.Substring%2A?displayProperty=nameWithType&gt;</ph> method takes an index of the character in the string at which the substring is to start, starting with position 0.","pos":[840,1075],"source":" The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] <xref:System.String.Substring%2A?displayProperty=nameWithType> method takes an index of the character in the string at which the substring is to start, starting with position 0."},{"content":"Thus, if you have a string \"ABCDE\", the individual characters are numbered 1,2,3,4,5 for use with the <ph id=\"ph1\">`Mid`</ph> function, but 0,1,2,3,4 for use with the <ph id=\"ph2\">&lt;xref:System.String.Substring%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[1076,1295],"source":" Thus, if you have a string \"ABCDE\", the individual characters are numbered 1,2,3,4,5 for use with the `Mid` function, but 0,1,2,3,4 for use with the <xref:System.String.Substring%2A?displayProperty=nameWithType> method."},{"pos":[1304,1314],"content":"Zero-Based","linkify":"Zero-Based","nodes":[{"content":"Zero-Based","pos":[0,10]}]},{"content":"For an example of a zero-based Visual Basic function, consider the <ph id=\"ph1\">`Split`</ph> function.","pos":[1318,1402],"source":"For an example of a zero-based Visual Basic function, consider the `Split` function."},{"content":"It splits a string and returns an array containing the substrings.","pos":[1403,1469]},{"content":"The <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> <ph id=\"ph2\">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph> method also splits a string and returns an array containing the substrings.","pos":[1470,1662],"source":" The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] <xref:System.String.Split%2A?displayProperty=nameWithType> method also splits a string and returns an array containing the substrings."},{"content":"Because the <ph id=\"ph1\">`Split`</ph> function and <ph id=\"ph2\">&lt;xref:System.String.Split%2A&gt;</ph> method return <ph id=\"ph3\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> arrays, they must be zero-based.","pos":[1663,1826],"source":" Because the `Split` function and <xref:System.String.Split%2A> method return [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] arrays, they must be zero-based."},{"pos":[1835,1843],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2009,2147],"content":"<bpt id=\"p1\">[</bpt>Introduction to Strings in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)</ept>","source":"[Introduction to Strings in Visual Basic](../../../../visual-basic/programming-guide/language-features/strings/introduction-to-strings.md)"}]}