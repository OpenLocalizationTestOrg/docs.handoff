{"content":"---\ntitle: \"Base Elements Overview\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"base elements [WPF]\"\nms.assetid: 2c997092-72c6-4767-bc84-74267f4eee72\n---\n# Base Elements Overview\nA high percentage of classes in [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] are derived from four classes which are commonly referred to in the [!INCLUDE[TLA2#tla_sdk](../../../../includes/tla2sharptla-sdk-md.md)] documentation as the base element classes. These classes are <xref:System.Windows.UIElement>, <xref:System.Windows.FrameworkElement>, <xref:System.Windows.ContentElement>, and <xref:System.Windows.FrameworkContentElement>. The <xref:System.Windows.DependencyObject> class is also related, because it is a common base class of both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>  \n\n<a name=\"base_apis\"></a>   \n## Base Element APIs in WPF Classes  \n Both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> are derived from <xref:System.Windows.DependencyObject>, through somewhat different pathways. The split at this level deals with how a <xref:System.Windows.UIElement> or <xref:System.Windows.ContentElement> are used in a user interface and what purpose they serve in an application. <xref:System.Windows.UIElement> also has <xref:System.Windows.Media.Visual> in its class hierarchy, which is a class that exposes the lower-level graphics support underlying the [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]. <xref:System.Windows.Media.Visual> provides a rendering framework by defining independent rectangular screen regions. In practice, <xref:System.Windows.UIElement> is for elements that will support a larger object model, are intended to render and layout into regions that can be described as rectangular screen regions, and where the content model is deliberately more open, to allow different combinations of elements. <xref:System.Windows.ContentElement> does not derive from <xref:System.Windows.Media.Visual>; its model is that a <xref:System.Windows.ContentElement> would be consumed by something else, such as a reader or viewer that would then interpret the elements and produce the complete <xref:System.Windows.Media.Visual> for [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] to consume. Certain <xref:System.Windows.UIElement> classes are intended to be content hosts: they provide the hosting and rendering for one or more <xref:System.Windows.ContentElement> classes (<xref:System.Windows.Controls.DocumentViewer> is an example of such a class). <xref:System.Windows.ContentElement> is used as base class for elements with somewhat smaller object models and that more address the text, information, or document content that might be hosted within a <xref:System.Windows.UIElement>.  \n  \n### Framework-Level and Core-Level  \n <xref:System.Windows.UIElement> serves as the base class for <xref:System.Windows.FrameworkElement>, and <xref:System.Windows.ContentElement> serves as the base class for <xref:System.Windows.FrameworkContentElement>. The reason for this next level of classes is to support a WPF core level that is separate from a WPF framework level, with this division also existing in how the [!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)] are divided between the PresentationCore and PresentationFramework assemblies. The WPF framework level presents a more complete solution for basic application needs, including the implementation of the layout manager for presentation. The WPF core level provides a way to use much of [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] without taking the overhead of the additional assembly. The distinction between these levels very rarely matters for most typical application development scenarios, and in general you should think of the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)] as a whole and not concern yourself with the difference between WPF framework level and WPF core level. You might need to know about the level distinctions if your application design chooses to replace substantial quantities of WPF framework level functionality, for instance if your overall solution already has its own implementations of [!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)] composition and layout.  \n  \n<a name=\"subclassing_elements\"></a>   \n## Choosing Which Element to Derive From  \n The most practical way to create a custom class that extends [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] is by deriving from one of the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] classes where you get as much as possible of your desired functionality through the existing class hierarchy. This section lists the functionality that comes with three of the most important element classes to help you decide which class to inherit from.  \n  \n If you are implementing a control, which is really one of the more common reasons for deriving from a [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] class, you probably want to derive from a class that is a practical control, a control family base class, or at least from the <xref:System.Windows.Controls.Control> base class. For some guidance and practical examples, see [Control Authoring Overview](../controls/control-authoring-overview.md).  \n  \n If you are not creating a control and need to derive from a class that is higher in the hierarchy, the following sections are intended as a guide for what characteristics are defined in each base element class.  \n  \n If you create a class that derives from <xref:System.Windows.DependencyObject>, you inherit the following functionality:  \n  \n-   <xref:System.Windows.DependencyObject.GetValue%2A> and <xref:System.Windows.DependencyObject.SetValue%2A> support, and general property system support.  \n  \n-   Ability to use dependency properties and attached properties that are implemented as dependency properties.  \n  \n If you create a class that derives from <xref:System.Windows.UIElement>, you inherit the following functionality in addition to that provided by <xref:System.Windows.DependencyObject>:  \n  \n-   Basic support for animated property values. For more information, see [Animation Overview](../graphics-multimedia/animation-overview.md).  \n  \n-   Basic input event support, and commanding support. For more information, see [Input Overview](input-overview.md) and [Commanding Overview](commanding-overview.md).  \n  \n-   Virtual methods that can be overridden to provide information to a layout system.  \n  \n If you create a class that derives from <xref:System.Windows.FrameworkElement>, you inherit the following functionality in addition to that provided by <xref:System.Windows.UIElement>:  \n  \n-   Support for styling and storyboards. For more information, see <xref:System.Windows.Style> and [Storyboards Overview](../graphics-multimedia/storyboards-overview.md).  \n  \n-   Support for data binding. For more information, see [Data Binding Overview](../data/data-binding-overview.md).  \n  \n-   Support for dynamic resource references. For more information, see [XAML Resources](xaml-resources.md).  \n  \n-   Property value inheritance support, and other flags in the metadata that help report conditions about properties to framework services such as data binding, styles, or the framework implementation of layout. For more information, see [Framework Property Metadata](framework-property-metadata.md).  \n  \n-   The concept of the logical tree. For more information, see [Trees in WPF](trees-in-wpf.md).  \n  \n-   Support for the practical WPF framework-level implementation of the layout system, including an <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> override that can detect changes to properties that influence layout.  \n  \n If you create a class that derives from <xref:System.Windows.ContentElement>, you inherit the following functionality in addition to that provided by <xref:System.Windows.DependencyObject>:  \n  \n-   Support for animations. For more information, see [Animation Overview](../graphics-multimedia/animation-overview.md).  \n  \n-   Basic input event support, and commanding support. For more information, see [Input Overview](input-overview.md) and [Commanding Overview](commanding-overview.md).  \n  \n If you create a class that derives from <xref:System.Windows.FrameworkContentElement>, you get the following functionality in addition to that provided by <xref:System.Windows.ContentElement>:  \n  \n-   Support for styling and storyboards. For more information, see <xref:System.Windows.Style> and [Animation Overview](../graphics-multimedia/animation-overview.md).  \n  \n-   Support for data binding. For more information, see [Data Binding Overview](../data/data-binding-overview.md).  \n  \n-   Support for dynamic resource references. For more information, see [XAML Resources](xaml-resources.md).  \n  \n-   Property value inheritance support, and other flags in the metadata that help report conditions about properties to framework services like data binding, styles, or the framework implementation of layout. For more information, see [Framework Property Metadata](framework-property-metadata.md).  \n  \n-   You do not inherit access to layout system modifications (such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>). Layout system implementations are only available on <xref:System.Windows.FrameworkElement>. However, you inherit an <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> override that can detect changes to properties that influence layout and report these to any content hosts.  \n  \n Content models are documented for a variety of classes. The content model for a class is one possible factor you should consider if you want to find an appropriate class to derive from. For more information, see [WPF Content Model](../controls/wpf-content-model.md).  \n  \n<a name=\"other_base_classes\"></a>   \n## Other Base Classes  \n  \n### DispatcherObject  \n <xref:System.Windows.Threading.DispatcherObject> provides support for the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] threading model and enables all objects created for [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] applications to be associated with a <xref:System.Windows.Threading.Dispatcher>. Even if you do not derive from <xref:System.Windows.UIElement>, <xref:System.Windows.DependencyObject>, or <xref:System.Windows.Media.Visual>, you should consider deriving from <xref:System.Windows.Threading.DispatcherObject> in order to get this threading model support. For more information, see [Threading Model](threading-model.md).  \n  \n### Visual  \n <xref:System.Windows.Media.Visual> implements the concept of a 2D object that generally requires visual presentation in a roughly rectangular region. The actual rendering of a <xref:System.Windows.Media.Visual> happens in other classes (it is not self-contained), but the <xref:System.Windows.Media.Visual> class provides a known type that is used by rendering processes at various levels. <xref:System.Windows.Media.Visual> implements hit testing, but it does not expose events that report hit-testing positives (these are in <xref:System.Windows.UIElement>). For more information, see [Visual Layer Programming](../graphics-multimedia/visual-layer-programming.md).  \n  \n### Freezable  \n <xref:System.Windows.Freezable> simulates immutability in a mutable object by providing the means to generate copies of the object when an immutable object is required or desired for performance reasons. The <xref:System.Windows.Freezable> type provides a common basis for certain graphics elements such as geometries and brushes, as well as animations. Notably, a <xref:System.Windows.Freezable> is not a <xref:System.Windows.Media.Visual>; it can hold properties that become subproperties when the <xref:System.Windows.Freezable> is applied to fill a property value of another object, and those subproperties might affect rendering. For more information, see [Freezable Objects Overview](freezable-objects-overview.md).  \n  \n <xref:System.Windows.Media.Animation.Animatable>  \n  \n <xref:System.Windows.Media.Animation.Animatable> is a <xref:System.Windows.Freezable> derived class that specifically adds the animation control layer and some utility members so that currently animated properties can be distinguished from nonanimated properties.  \n  \n### Control  \n <xref:System.Windows.Controls.Control> is the intended base class for the type of object that is variously termed a control or component, depending on the technology. In general, [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] control classes are classes that either directly represent a UI control or participate closely in control composition. The primary functionality that <xref:System.Windows.Controls.Control> enables is control templating.  \n  \n## See also\n\n- <xref:System.Windows.Controls.Control>\n- [Dependency Properties Overview](dependency-properties-overview.md)\n- [Control Authoring Overview](../controls/control-authoring-overview.md)\n- [WPF Architecture](wpf-architecture.md)\n","nodes":[{"pos":[4,154],"embed":true,"restype":"x-metadata","content":"title: \"Base Elements Overview\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"base elements [WPF]\"\nms.assetid: 2c997092-72c6-4767-bc84-74267f4eee72","nodes":[{"content":"Base Elements Overview","nodes":[{"pos":[0,22],"content":"Base Elements Overview","nodes":[{"content":"Base Elements Overview","pos":[0,22]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[161,183],"content":"Base Elements Overview","linkify":"Base Elements Overview","nodes":[{"content":"Base Elements Overview","pos":[0,22]}]},{"content":"A high percentage of classes in <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> are derived from four classes which are commonly referred to in the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_sdk](../../../../includes/tla2sharptla-sdk-md.md)]</ph> documentation as the base element classes.","pos":[184,476],"source":"A high percentage of classes in [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] are derived from four classes which are commonly referred to in the [!INCLUDE[TLA2#tla_sdk](../../../../includes/tla2sharptla-sdk-md.md)] documentation as the base element classes."},{"content":"These classes are <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.","pos":[477,656],"source":" These classes are <xref:System.Windows.UIElement>, <xref:System.Windows.FrameworkElement>, <xref:System.Windows.ContentElement>, and <xref:System.Windows.FrameworkContentElement>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.DependencyObject&gt;</ph> class is also related, because it is a common base class of both <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>","pos":[657,837],"source":" The <xref:System.Windows.DependencyObject> class is also related, because it is a common base class of both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>"},{"pos":[872,904],"content":"Base Element APIs in WPF Classes","linkify":"Base Element APIs in WPF Classes","nodes":[{"content":"Base Element APIs in WPF Classes","pos":[0,32]}]},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> are derived from <ph id=\"ph3\">&lt;xref:System.Windows.DependencyObject&gt;</ph>, through somewhat different pathways.","pos":[908,1079],"source":"Both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> are derived from <xref:System.Windows.DependencyObject>, through somewhat different pathways."},{"content":"The split at this level deals with how a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> are used in a user interface and what purpose they serve in an application.","pos":[1080,1268],"source":" The split at this level deals with how a <xref:System.Windows.UIElement> or <xref:System.Windows.ContentElement> are used in a user interface and what purpose they serve in an application."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> also has <ph id=\"ph2\">&lt;xref:System.Windows.Media.Visual&gt;</ph> in its class hierarchy, which is a class that exposes the lower-level graphics support underlying the <ph id=\"ph3\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>.","pos":[1269,1527],"source":"<xref:System.Windows.UIElement> also has <xref:System.Windows.Media.Visual> in its class hierarchy, which is a class that exposes the lower-level graphics support underlying the [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Visual&gt;</ph> provides a rendering framework by defining independent rectangular screen regions.","pos":[1528,1645],"source":"<xref:System.Windows.Media.Visual> provides a rendering framework by defining independent rectangular screen regions."},{"content":"In practice, <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> is for elements that will support a larger object model, are intended to render and layout into regions that can be described as rectangular screen regions, and where the content model is deliberately more open, to allow different combinations of elements.","pos":[1646,1947],"source":" In practice, <xref:System.Windows.UIElement> is for elements that will support a larger object model, are intended to render and layout into regions that can be described as rectangular screen regions, and where the content model is deliberately more open, to allow different combinations of elements."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> does not derive from <ph id=\"ph2\">&lt;xref:System.Windows.Media.Visual&gt;</ph>; its model is that a <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> would be consumed by something else, such as a reader or viewer that would then interpret the elements and produce the complete <ph id=\"ph4\">&lt;xref:System.Windows.Media.Visual&gt;</ph> for <ph id=\"ph5\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> to consume.","pos":[1948,2357],"source":"<xref:System.Windows.ContentElement> does not derive from <xref:System.Windows.Media.Visual>; its model is that a <xref:System.Windows.ContentElement> would be consumed by something else, such as a reader or viewer that would then interpret the elements and produce the complete <xref:System.Windows.Media.Visual> for [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] to consume."},{"content":"Certain <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> classes are intended to be content hosts: they provide the hosting and rendering for one or more <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> classes (<ph id=\"ph3\">&lt;xref:System.Windows.Controls.DocumentViewer&gt;</ph> is an example of such a class).","pos":[2358,2618],"source":" Certain <xref:System.Windows.UIElement> classes are intended to be content hosts: they provide the hosting and rendering for one or more <xref:System.Windows.ContentElement> classes (<xref:System.Windows.Controls.DocumentViewer> is an example of such a class)."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> is used as base class for elements with somewhat smaller object models and that more address the text, information, or document content that might be hosted within a <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[2619,2854],"source":"<xref:System.Windows.ContentElement> is used as base class for elements with somewhat smaller object models and that more address the text, information, or document content that might be hosted within a <xref:System.Windows.UIElement>."},{"pos":[2864,2894],"content":"Framework-Level and Core-Level","linkify":"Framework-Level and Core-Level","nodes":[{"content":"Framework-Level and Core-Level","pos":[0,30]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> serves as the base class for <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> serves as the base class for <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.","pos":[2898,3115],"source":"<xref:System.Windows.UIElement> serves as the base class for <xref:System.Windows.FrameworkElement>, and <xref:System.Windows.ContentElement> serves as the base class for <xref:System.Windows.FrameworkContentElement>."},{"content":"The reason for this next level of classes is to support a WPF core level that is separate from a WPF framework level, with this division also existing in how the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> are divided between the PresentationCore and PresentationFramework assemblies.","pos":[3116,3444],"source":" The reason for this next level of classes is to support a WPF core level that is separate from a WPF framework level, with this division also existing in how the [!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)] are divided between the PresentationCore and PresentationFramework assemblies."},{"content":"The WPF framework level presents a more complete solution for basic application needs, including the implementation of the layout manager for presentation.","pos":[3445,3600]},{"content":"The WPF core level provides a way to use much of <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> without taking the overhead of the additional assembly.","pos":[3601,3787],"source":" The WPF core level provides a way to use much of [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] without taking the overhead of the additional assembly."},{"content":"The distinction between these levels very rarely matters for most typical application development scenarios, and in general you should think of the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id=\"ph2\">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> as a whole and not concern yourself with the difference between WPF framework level and WPF core level.","pos":[3788,4209],"source":" The distinction between these levels very rarely matters for most typical application development scenarios, and in general you should think of the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)] as a whole and not concern yourself with the difference between WPF framework level and WPF core level."},{"content":"You might need to know about the level distinctions if your application design chooses to replace substantial quantities of WPF framework level functionality, for instance if your overall solution already has its own implementations of <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> composition and layout.","pos":[4210,4535],"source":" You might need to know about the level distinctions if your application design chooses to replace substantial quantities of WPF framework level functionality, for instance if your overall solution already has its own implementations of [!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)] composition and layout."},{"pos":[4583,4620],"content":"Choosing Which Element to Derive From","linkify":"Choosing Which Element to Derive From","nodes":[{"content":"Choosing Which Element to Derive From","pos":[0,37]}]},{"content":"The most practical way to create a custom class that extends <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> is by deriving from one of the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> classes where you get as much as possible of your desired functionality through the existing class hierarchy.","pos":[4624,4989],"source":"The most practical way to create a custom class that extends [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] is by deriving from one of the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] classes where you get as much as possible of your desired functionality through the existing class hierarchy."},{"content":"This section lists the functionality that comes with three of the most important element classes to help you decide which class to inherit from.","pos":[4990,5134]},{"content":"If you are implementing a control, which is really one of the more common reasons for deriving from a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> class, you probably want to derive from a class that is a practical control, a control family base class, or at least from the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Control&gt;</ph> base class.","pos":[5141,5502],"source":"If you are implementing a control, which is really one of the more common reasons for deriving from a [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] class, you probably want to derive from a class that is a practical control, a control family base class, or at least from the <xref:System.Windows.Controls.Control> base class."},{"content":"For some guidance and practical examples, see <bpt id=\"p1\">[</bpt>Control Authoring Overview<ept id=\"p1\">](../controls/control-authoring-overview.md)</ept>.","pos":[5503,5621],"source":" For some guidance and practical examples, see [Control Authoring Overview](../controls/control-authoring-overview.md)."},{"content":"If you are not creating a control and need to derive from a class that is higher in the hierarchy, the following sections are intended as a guide for what characteristics are defined in each base element class.","pos":[5628,5838]},{"pos":[5845,5965],"content":"If you create a class that derives from <ph id=\"ph1\">&lt;xref:System.Windows.DependencyObject&gt;</ph>, you inherit the following functionality:","source":"If you create a class that derives from <xref:System.Windows.DependencyObject>, you inherit the following functionality:"},{"pos":[5975,6126],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> support, and general property system support.","source":"<xref:System.Windows.DependencyObject.GetValue%2A> and <xref:System.Windows.DependencyObject.SetValue%2A> support, and general property system support."},{"content":"Ability to use dependency properties and attached properties that are implemented as dependency properties.","pos":[6136,6243]},{"pos":[6250,6434],"content":"If you create a class that derives from <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>, you inherit the following functionality in addition to that provided by <ph id=\"ph2\">&lt;xref:System.Windows.DependencyObject&gt;</ph>:","source":"If you create a class that derives from <xref:System.Windows.UIElement>, you inherit the following functionality in addition to that provided by <xref:System.Windows.DependencyObject>:"},{"content":"Basic support for animated property values.","pos":[6444,6487]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Animation Overview<ept id=\"p1\">](../graphics-multimedia/animation-overview.md)</ept>.","pos":[6488,6581],"source":" For more information, see [Animation Overview](../graphics-multimedia/animation-overview.md)."},{"content":"Basic input event support, and commanding support.","pos":[6591,6641]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](input-overview.md)</ept> and <bpt id=\"p2\">[</bpt>Commanding Overview<ept id=\"p2\">](commanding-overview.md)</ept>.","pos":[6642,6754],"source":" For more information, see [Input Overview](input-overview.md) and [Commanding Overview](commanding-overview.md)."},{"content":"Virtual methods that can be overridden to provide information to a layout system.","pos":[6764,6845]},{"pos":[6852,7036],"content":"If you create a class that derives from <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, you inherit the following functionality in addition to that provided by <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph>:","source":"If you create a class that derives from <xref:System.Windows.FrameworkElement>, you inherit the following functionality in addition to that provided by <xref:System.Windows.UIElement>:"},{"content":"Support for styling and storyboards.","pos":[7046,7082]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Windows.Style&gt;</ph> and <bpt id=\"p1\">[</bpt>Storyboards Overview<ept id=\"p1\">](../graphics-multimedia/storyboards-overview.md)</ept>.","pos":[7083,7212],"source":" For more information, see <xref:System.Windows.Style> and [Storyboards Overview](../graphics-multimedia/storyboards-overview.md)."},{"content":"Support for data binding.","pos":[7222,7247]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Binding Overview<ept id=\"p1\">](../data/data-binding-overview.md)</ept>.","pos":[7248,7332],"source":" For more information, see [Data Binding Overview](../data/data-binding-overview.md)."},{"content":"Support for dynamic resource references.","pos":[7342,7382]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>XAML Resources<ept id=\"p1\">](xaml-resources.md)</ept>.","pos":[7383,7445],"source":" For more information, see [XAML Resources](xaml-resources.md)."},{"content":"Property value inheritance support, and other flags in the metadata that help report conditions about properties to framework services such as data binding, styles, or the framework implementation of layout.","pos":[7455,7662]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Framework Property Metadata<ept id=\"p1\">](framework-property-metadata.md)</ept>.","pos":[7663,7751],"source":" For more information, see [Framework Property Metadata](framework-property-metadata.md)."},{"content":"The concept of the logical tree.","pos":[7761,7793]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Trees in WPF<ept id=\"p1\">](trees-in-wpf.md)</ept>.","pos":[7794,7852],"source":" For more information, see [Trees in WPF](trees-in-wpf.md)."},{"pos":[7862,8087],"content":"Support for the practical WPF framework-level implementation of the layout system, including an <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;</ph> override that can detect changes to properties that influence layout.","source":"Support for the practical WPF framework-level implementation of the layout system, including an <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> override that can detect changes to properties that influence layout."},{"pos":[8094,8283],"content":"If you create a class that derives from <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>, you inherit the following functionality in addition to that provided by <ph id=\"ph2\">&lt;xref:System.Windows.DependencyObject&gt;</ph>:","source":"If you create a class that derives from <xref:System.Windows.ContentElement>, you inherit the following functionality in addition to that provided by <xref:System.Windows.DependencyObject>:"},{"content":"Support for animations.","pos":[8293,8316]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Animation Overview<ept id=\"p1\">](../graphics-multimedia/animation-overview.md)</ept>.","pos":[8317,8410],"source":" For more information, see [Animation Overview](../graphics-multimedia/animation-overview.md)."},{"content":"Basic input event support, and commanding support.","pos":[8420,8470]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](input-overview.md)</ept> and <bpt id=\"p2\">[</bpt>Commanding Overview<ept id=\"p2\">](commanding-overview.md)</ept>.","pos":[8471,8583],"source":" For more information, see [Input Overview](input-overview.md) and [Commanding Overview](commanding-overview.md)."},{"pos":[8590,8782],"content":"If you create a class that derives from <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>, you get the following functionality in addition to that provided by <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph>:","source":"If you create a class that derives from <xref:System.Windows.FrameworkContentElement>, you get the following functionality in addition to that provided by <xref:System.Windows.ContentElement>:"},{"content":"Support for styling and storyboards.","pos":[8792,8828]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Windows.Style&gt;</ph> and <bpt id=\"p1\">[</bpt>Animation Overview<ept id=\"p1\">](../graphics-multimedia/animation-overview.md)</ept>.","pos":[8829,8954],"source":" For more information, see <xref:System.Windows.Style> and [Animation Overview](../graphics-multimedia/animation-overview.md)."},{"content":"Support for data binding.","pos":[8964,8989]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Binding Overview<ept id=\"p1\">](../data/data-binding-overview.md)</ept>.","pos":[8990,9074],"source":" For more information, see [Data Binding Overview](../data/data-binding-overview.md)."},{"content":"Support for dynamic resource references.","pos":[9084,9124]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>XAML Resources<ept id=\"p1\">](xaml-resources.md)</ept>.","pos":[9125,9187],"source":" For more information, see [XAML Resources](xaml-resources.md)."},{"content":"Property value inheritance support, and other flags in the metadata that help report conditions about properties to framework services like data binding, styles, or the framework implementation of layout.","pos":[9197,9401]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Framework Property Metadata<ept id=\"p1\">](framework-property-metadata.md)</ept>.","pos":[9402,9490],"source":" For more information, see [Framework Property Metadata](framework-property-metadata.md)."},{"content":"You do not inherit access to layout system modifications (such as <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>).","pos":[9500,9625],"source":"You do not inherit access to layout system modifications (such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>)."},{"content":"Layout system implementations are only available on <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.","pos":[9626,9717],"source":" Layout system implementations are only available on <xref:System.Windows.FrameworkElement>."},{"content":"However, you inherit an <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;</ph> override that can detect changes to properties that influence layout and report these to any content hosts.","pos":[9718,9909],"source":" However, you inherit an <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> override that can detect changes to properties that influence layout and report these to any content hosts."},{"content":"Content models are documented for a variety of classes.","pos":[9916,9971]},{"content":"The content model for a class is one possible factor you should consider if you want to find an appropriate class to derive from.","pos":[9972,10101]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>WPF Content Model<ept id=\"p1\">](../controls/wpf-content-model.md)</ept>.","pos":[10102,10182],"source":" For more information, see [WPF Content Model](../controls/wpf-content-model.md)."},{"pos":[10228,10246],"content":"Other Base Classes","linkify":"Other Base Classes","nodes":[{"content":"Other Base Classes","pos":[0,18]}]},{"pos":[10256,10272],"content":"DispatcherObject","linkify":"DispatcherObject","nodes":[{"content":"DispatcherObject","pos":[0,16]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> provides support for the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> threading model and enables all objects created for <ph id=\"ph3\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications to be associated with a <ph id=\"ph4\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.","pos":[10276,10646],"source":"<xref:System.Windows.Threading.DispatcherObject> provides support for the [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] threading model and enables all objects created for [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] applications to be associated with a <xref:System.Windows.Threading.Dispatcher>."},{"content":"Even if you do not derive from <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.DependencyObject&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Windows.Media.Visual&gt;</ph>, you should consider deriving from <ph id=\"ph4\">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> in order to get this threading model support.","pos":[10647,10918],"source":" Even if you do not derive from <xref:System.Windows.UIElement>, <xref:System.Windows.DependencyObject>, or <xref:System.Windows.Media.Visual>, you should consider deriving from <xref:System.Windows.Threading.DispatcherObject> in order to get this threading model support."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Threading Model<ept id=\"p1\">](threading-model.md)</ept>.","pos":[10919,10983],"source":" For more information, see [Threading Model](threading-model.md)."},{"pos":[10993,10999],"content":"Visual","linkify":"Visual","nodes":[{"content":"Visual","pos":[0,6]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Visual&gt;</ph> implements the concept of a 2D object that generally requires visual presentation in a roughly rectangular region.","pos":[11003,11152],"source":"<xref:System.Windows.Media.Visual> implements the concept of a 2D object that generally requires visual presentation in a roughly rectangular region."},{"content":"The actual rendering of a <ph id=\"ph1\">&lt;xref:System.Windows.Media.Visual&gt;</ph> happens in other classes (it is not self-contained), but the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Visual&gt;</ph> class provides a known type that is used by rendering processes at various levels.","pos":[11153,11392],"source":" The actual rendering of a <xref:System.Windows.Media.Visual> happens in other classes (it is not self-contained), but the <xref:System.Windows.Media.Visual> class provides a known type that is used by rendering processes at various levels."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Visual&gt;</ph> implements hit testing, but it does not expose events that report hit-testing positives (these are in <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph>).","pos":[11393,11563],"source":"<xref:System.Windows.Media.Visual> implements hit testing, but it does not expose events that report hit-testing positives (these are in <xref:System.Windows.UIElement>)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Visual Layer Programming<ept id=\"p1\">](../graphics-multimedia/visual-layer-programming.md)</ept>.","pos":[11564,11669],"source":" For more information, see [Visual Layer Programming](../graphics-multimedia/visual-layer-programming.md)."},{"pos":[11679,11688],"content":"Freezable","linkify":"Freezable","nodes":[{"content":"Freezable","pos":[0,9]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Freezable&gt;</ph> simulates immutability in a mutable object by providing the means to generate copies of the object when an immutable object is required or desired for performance reasons.","pos":[11692,11895],"source":"<xref:System.Windows.Freezable> simulates immutability in a mutable object by providing the means to generate copies of the object when an immutable object is required or desired for performance reasons."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Freezable&gt;</ph> type provides a common basis for certain graphics elements such as geometries and brushes, as well as animations.","pos":[11896,12045],"source":" The <xref:System.Windows.Freezable> type provides a common basis for certain graphics elements such as geometries and brushes, as well as animations."},{"content":"Notably, a <ph id=\"ph1\">&lt;xref:System.Windows.Freezable&gt;</ph> is not a <ph id=\"ph2\">&lt;xref:System.Windows.Media.Visual&gt;</ph>; it can hold properties that become subproperties when the <ph id=\"ph3\">&lt;xref:System.Windows.Freezable&gt;</ph> is applied to fill a property value of another object, and those subproperties might affect rendering.","pos":[12046,12326],"source":" Notably, a <xref:System.Windows.Freezable> is not a <xref:System.Windows.Media.Visual>; it can hold properties that become subproperties when the <xref:System.Windows.Freezable> is applied to fill a property value of another object, and those subproperties might affect rendering."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Freezable Objects Overview<ept id=\"p1\">](freezable-objects-overview.md)</ept>.","pos":[12327,12413],"source":" For more information, see [Freezable Objects Overview](freezable-objects-overview.md)."},{"pos":[12475,12738],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Animatable&gt;</ph> is a <ph id=\"ph2\">&lt;xref:System.Windows.Freezable&gt;</ph> derived class that specifically adds the animation control layer and some utility members so that currently animated properties can be distinguished from nonanimated properties.","source":"<xref:System.Windows.Media.Animation.Animatable> is a <xref:System.Windows.Freezable> derived class that specifically adds the animation control layer and some utility members so that currently animated properties can be distinguished from nonanimated properties."},{"pos":[12748,12755],"content":"Control","linkify":"Control","nodes":[{"content":"Control","pos":[0,7]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> is the intended base class for the type of object that is variously termed a control or component, depending on the technology.","pos":[12759,12925],"source":"<xref:System.Windows.Controls.Control> is the intended base class for the type of object that is variously termed a control or component, depending on the technology."},{"content":"In general, <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> control classes are classes that either directly represent a UI control or participate closely in control composition.","pos":[12926,13138],"source":" In general, [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] control classes are classes that either directly represent a UI control or participate closely in control composition."},{"content":"The primary functionality that <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> enables is control templating.","pos":[13139,13239],"source":" The primary functionality that <xref:System.Windows.Controls.Control> enables is control templating."},{"pos":[13248,13256],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[13301,13368],"content":"<bpt id=\"p1\">[</bpt>Dependency Properties Overview<ept id=\"p1\">](dependency-properties-overview.md)</ept>","source":"[Dependency Properties Overview](dependency-properties-overview.md)"},{"pos":[13371,13442],"content":"<bpt id=\"p1\">[</bpt>Control Authoring Overview<ept id=\"p1\">](../controls/control-authoring-overview.md)</ept>","source":"[Control Authoring Overview](../controls/control-authoring-overview.md)"},{"pos":[13445,13484],"content":"<bpt id=\"p1\">[</bpt>WPF Architecture<ept id=\"p1\">](wpf-architecture.md)</ept>","source":"[WPF Architecture](wpf-architecture.md)"}]}