{"content":"---\ntitle: \"How to: Convert a String to a Number - C# Programming Guide\"\nms.custom: seodec18\nms.date: 02/11/2019\nhelpviewer_keywords: \n  - \"conversions [C#]\"\n  - \"conversions [C#], string to int\"\n  - \"converting strings to int [C#]\"\n  - \"strings [C#], converting to int\"\nms.assetid: 467b9979-86ee-4afd-b734-30299cda91e3\n---\n# How to: Convert a String to a Number (C# Programming Guide)\n\nYou can convert a [string](../../../csharp/language-reference/keywords/string.md) to a number by calling the `Parse` or `TryParse` method found on the various numeric types (`int`, `long`, `double`, etc.), or by using methods in the <xref:System.Convert?displayProperty=nameWithType> class.  \n  \n If you have a string, it is slightly more efficient and straightforward to call a `TryParse` method (for example, [`int.TryParse(\"11\", out number)`](xref:System.Int32.TryParse%2A)) or `Parse` method (for example, [`var number = int.Parse(\"11\")`](xref:System.Int32.Parse%2A)).  Using a <xref:System.Convert> method is more useful for general objects that implement <xref:System.IConvertible>.  \n  \n You can use `Parse` or `TryParse` methods on the numeric type you expect the string contains, such as the <xref:System.Int32?displayProperty=nameWithType> type.  The <xref:System.Convert.ToInt32%2A?displayProperty=nameWithType> method uses <xref:System.Int32.Parse%2A> internally.  The `Parse` method returns the converted number; the `TryParse` method returns a <xref:System.Boolean> value that indicates whether the conversion succeeded, and returns the converted number in an [`out` parameter](../../../csharp/language-reference/keywords/out.md). If the string is not in a valid format, `Parse` throws an exception, whereas `TryParse` returns [false](../../../csharp/language-reference/keywords/false.md). When calling a `Parse` method, you should always use exception handling to catch a <xref:System.FormatException> in the event that the parse operation fails.  \n  \n## Calling the Parse and TryParse methods\n\nThe `Parse` and `TryParse` methods ignore white space at the beginning and at the end of the string, but all other characters must be characters that form the appropriate numeric type (`int`, `long`, `ulong`, `float`, `decimal`, etc.).  Any white space within the string that forms the number causes an error.  For example, you can use `decimal.TryParse` to parse \"10\", \"10.3\", or \"  10  \", but you cannot use this method to parse 10 from \"10X\", \"1 0\" (note the embedded space), \"10 .3\" (note the embedded space), \"10e1\" (`float.TryParse` works here), and so on. In addition, a string whose value is `null` or <xref:System.String.Empty?displayProperty=nameWithType> fails to parse successfully. You can check for a null or empty string before attempting to parse it by calling the <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> method. \n\nThe following example demonstrates both successful and unsuccessful calls to `Parse` and `TryParse`.  \n  \n[!code-csharp[Parse and TryParse](~/samples/snippets/csharp/programming-guide/string-to-number/parse-tryparse/program.cs)]  \n\nThe following example illustrates one a approach to parsing a string that is expected to include leading numeric characters (including hexadecimal characters) and trailing non-numeric characters. It assigns valid characters from the beginning of a string to a new string before calling the <xref:System.Int32.TryParse%2A> method. Because the strings to be parsed contain a small number of characters, the example calls the <xref:System.String.Concat%2A?displayProperty=nameWithType> method to assign valid characters to a new string. For a larger string, the <xref:System.Text.StringBuilder> class can be used instead. \n  \n[!code-csharp[Removing invalid characters](~/samples/snippets/csharp/programming-guide/string-to-number/parse-tryparse2/program.cs)]  \n\n## Calling the Convert methods\n\nThe following table lists some of the methods from the <xref:System.Convert> class that you can use to convert a string to a number.  \n  \n|Numeric Type|Method|  \n|------------------|------------|  \n|`decimal`|<xref:System.Convert.ToDecimal%28System.String%29>|  \n|`float`|<xref:System.Convert.ToSingle%28System.String%29>|  \n|`double`|<xref:System.Convert.ToDouble%28System.String%29>|  \n|`short`|<xref:System.Convert.ToInt16%28System.String%29>|  \n|`int`|<xref:System.Convert.ToInt32%28System.String%29>|  \n|`long`|<xref:System.Convert.ToInt64%28System.String%29>|  \n|`ushort`|<xref:System.Convert.ToUInt16%28System.String%29>|  \n|`uint`|<xref:System.Convert.ToUInt32%28System.String%29>|  \n|`ulong`|<xref:System.Convert.ToUInt64%28System.String%29>|  \n  \n The following example calls the <xref:System.Convert.ToInt32%28System.String%29?displayProperty=nameWithType> method to convert an input string to an [int](../../../csharp/language-reference/keywords/int.md). The example catches the two most common exceptions that can be thrown by this method, <xref:System.FormatException> and <xref:System.OverflowException>. If the resulting number can be incremented without exceeding <xref:System.Int32.MaxValue?displayProperty=nameWithType>, the example adds 1 to the result and displays the output.  \n  \n[!code-csharp[Parsing with Convert methods](~/samples/snippets/csharp/programming-guide/string-to-number/convert/program.cs)]  \n  \n## See also\n\n- [Types](../../../csharp/programming-guide/types/index.md)\n- [How to: Determine Whether a String Represents a Numeric Value](../../../csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)\n- [.NET Framework 4 Formatting Utility](https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d)\n","nodes":[{"pos":[4,319],"embed":true,"restype":"x-metadata","content":"title: \"How to: Convert a String to a Number - C# Programming Guide\"\nms.custom: seodec18\nms.date: 02/11/2019\nhelpviewer_keywords: \n  - \"conversions [C#]\"\n  - \"conversions [C#], string to int\"\n  - \"converting strings to int [C#]\"\n  - \"strings [C#], converting to int\"\nms.assetid: 467b9979-86ee-4afd-b734-30299cda91e3","nodes":[{"content":"How to: Convert a String to a Number - C# Programming Guide","nodes":[{"pos":[0,59],"content":"How to: Convert a String to a Number - C# Programming Guide","nodes":[{"content":"How to: Convert a String to a Number - C# Programming Guide","pos":[0,59]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[326,385],"content":"How to: Convert a String to a Number (C# Programming Guide)","linkify":"How to: Convert a String to a Number (C# Programming Guide)","nodes":[{"content":"How to: Convert a String to a Number (C# Programming Guide)","pos":[0,59]}]},{"pos":[387,677],"content":"You can convert a <bpt id=\"p1\">[</bpt>string<ept id=\"p1\">](../../../csharp/language-reference/keywords/string.md)</ept> to a number by calling the <ph id=\"ph1\">`Parse`</ph> or <ph id=\"ph2\">`TryParse`</ph> method found on the various numeric types (<ph id=\"ph3\">`int`</ph>, <ph id=\"ph4\">`long`</ph>, <ph id=\"ph5\">`double`</ph>, etc.), or by using methods in the <ph id=\"ph6\">&lt;xref:System.Convert?displayProperty=nameWithType&gt;</ph> class.","source":"You can convert a [string](../../../csharp/language-reference/keywords/string.md) to a number by calling the `Parse` or `TryParse` method found on the various numeric types (`int`, `long`, `double`, etc.), or by using methods in the <xref:System.Convert?displayProperty=nameWithType> class."},{"content":"If you have a string, it is slightly more efficient and straightforward to call a <ph id=\"ph1\">`TryParse`</ph> method (for example, <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`int.TryParse(\"11\", out number)`</ph><ept id=\"p1\">](xref:System.Int32.TryParse%2A)</ept>) or <ph id=\"ph3\">`Parse`</ph> method (for example, <bpt id=\"p2\">[</bpt><ph id=\"ph4\">`var number = int.Parse(\"11\")`</ph><ept id=\"p2\">](xref:System.Int32.Parse%2A)</ept>).","pos":[684,959],"source":"If you have a string, it is slightly more efficient and straightforward to call a `TryParse` method (for example, [`int.TryParse(\"11\", out number)`](xref:System.Int32.TryParse%2A)) or `Parse` method (for example, [`var number = int.Parse(\"11\")`](xref:System.Int32.Parse%2A))."},{"content":"Using a <ph id=\"ph1\">&lt;xref:System.Convert&gt;</ph> method is more useful for general objects that implement <ph id=\"ph2\">&lt;xref:System.IConvertible&gt;</ph>.","pos":[961,1075],"source":"  Using a <xref:System.Convert> method is more useful for general objects that implement <xref:System.IConvertible>."},{"content":"You can use <ph id=\"ph1\">`Parse`</ph> or <ph id=\"ph2\">`TryParse`</ph> methods on the numeric type you expect the string contains, such as the <ph id=\"ph3\">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph> type.","pos":[1082,1242],"source":"You can use `Parse` or `TryParse` methods on the numeric type you expect the string contains, such as the <xref:System.Int32?displayProperty=nameWithType> type."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Convert.ToInt32%2A?displayProperty=nameWithType&gt;</ph> method uses <ph id=\"ph2\">&lt;xref:System.Int32.Parse%2A&gt;</ph> internally.","pos":[1244,1362],"source":"  The <xref:System.Convert.ToInt32%2A?displayProperty=nameWithType> method uses <xref:System.Int32.Parse%2A> internally."},{"content":"The <ph id=\"ph1\">`Parse`</ph> method returns the converted number; the <ph id=\"ph2\">`TryParse`</ph> method returns a <ph id=\"ph3\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded, and returns the converted number in an <bpt id=\"p1\">[</bpt><ph id=\"ph4\">`out`</ph> parameter<ept id=\"p1\">](../../../csharp/language-reference/keywords/out.md)</ept>.","pos":[1364,1631],"source":"  The `Parse` method returns the converted number; the `TryParse` method returns a <xref:System.Boolean> value that indicates whether the conversion succeeded, and returns the converted number in an [`out` parameter](../../../csharp/language-reference/keywords/out.md)."},{"content":"If the string is not in a valid format, <ph id=\"ph1\">`Parse`</ph> throws an exception, whereas <ph id=\"ph2\">`TryParse`</ph> returns <bpt id=\"p1\">[</bpt>false<ept id=\"p1\">](../../../csharp/language-reference/keywords/false.md)</ept>.","pos":[1632,1790],"source":" If the string is not in a valid format, `Parse` throws an exception, whereas `TryParse` returns [false](../../../csharp/language-reference/keywords/false.md)."},{"content":"When calling a <ph id=\"ph1\">`Parse`</ph> method, you should always use exception handling to catch a <ph id=\"ph2\">&lt;xref:System.FormatException&gt;</ph> in the event that the parse operation fails.","pos":[1791,1948],"source":" When calling a `Parse` method, you should always use exception handling to catch a <xref:System.FormatException> in the event that the parse operation fails."},{"pos":[1957,1995],"content":"Calling the Parse and TryParse methods","linkify":"Calling the Parse and TryParse methods","nodes":[{"content":"Calling the Parse and TryParse methods","pos":[0,38]}]},{"content":"The <ph id=\"ph1\">`Parse`</ph> and <ph id=\"ph2\">`TryParse`</ph> methods ignore white space at the beginning and at the end of the string, but all other characters must be characters that form the appropriate numeric type (<ph id=\"ph3\">`int`</ph>, <ph id=\"ph4\">`long`</ph>, <ph id=\"ph5\">`ulong`</ph>, <ph id=\"ph6\">`float`</ph>, <ph id=\"ph7\">`decimal`</ph>, etc.).","pos":[1997,2232],"source":"The `Parse` and `TryParse` methods ignore white space at the beginning and at the end of the string, but all other characters must be characters that form the appropriate numeric type (`int`, `long`, `ulong`, `float`, `decimal`, etc.)."},{"content":"Any white space within the string that forms the number causes an error.","pos":[2234,2306]},{"content":"For example, you can use <ph id=\"ph1\">`decimal.TryParse`</ph> to parse \"10\", \"10.3\", or \"  10  \", but you cannot use this method to parse 10 from \"10X\", \"1 0\" (note the embedded space), \"10 .3\" (note the embedded space), \"10e1\" (<ph id=\"ph2\">`float.TryParse`</ph> works here), and so on.","pos":[2308,2559],"source":"  For example, you can use `decimal.TryParse` to parse \"10\", \"10.3\", or \"  10  \", but you cannot use this method to parse 10 from \"10X\", \"1 0\" (note the embedded space), \"10 .3\" (note the embedded space), \"10e1\" (`float.TryParse` works here), and so on."},{"content":"In addition, a string whose value is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> fails to parse successfully.","pos":[2560,2691],"source":" In addition, a string whose value is `null` or <xref:System.String.Empty?displayProperty=nameWithType> fails to parse successfully."},{"content":"You can check for a null or empty string before attempting to parse it by calling the <ph id=\"ph1\">&lt;xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[2692,2852],"source":" You can check for a null or empty string before attempting to parse it by calling the <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> method."},{"pos":[2855,2955],"content":"The following example demonstrates both successful and unsuccessful calls to <ph id=\"ph1\">`Parse`</ph> and <ph id=\"ph2\">`TryParse`</ph>.","source":"The following example demonstrates both successful and unsuccessful calls to `Parse` and `TryParse`."},{"content":"The following example illustrates one a approach to parsing a string that is expected to include leading numeric characters (including hexadecimal characters) and trailing non-numeric characters.","pos":[3087,3282]},{"content":"It assigns valid characters from the beginning of a string to a new string before calling the <ph id=\"ph1\">&lt;xref:System.Int32.TryParse%2A&gt;</ph> method.","pos":[3283,3416],"source":" It assigns valid characters from the beginning of a string to a new string before calling the <xref:System.Int32.TryParse%2A> method."},{"content":"Because the strings to be parsed contain a small number of characters, the example calls the <ph id=\"ph1\">&lt;xref:System.String.Concat%2A?displayProperty=nameWithType&gt;</ph> method to assign valid characters to a new string.","pos":[3417,3620],"source":" Because the strings to be parsed contain a small number of characters, the example calls the <xref:System.String.Concat%2A?displayProperty=nameWithType> method to assign valid characters to a new string."},{"content":"For a larger string, the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class can be used instead.","pos":[3621,3705],"source":" For a larger string, the <xref:System.Text.StringBuilder> class can be used instead."},{"pos":[3849,3876],"content":"Calling the Convert methods","linkify":"Calling the Convert methods","nodes":[{"content":"Calling the Convert methods","pos":[0,27]}]},{"pos":[3878,4010],"content":"The following table lists some of the methods from the <ph id=\"ph1\">&lt;xref:System.Convert&gt;</ph> class that you can use to convert a string to a number.","source":"The following table lists some of the methods from the <xref:System.Convert> class that you can use to convert a string to a number."},{"content":"Numeric Type","pos":[4017,4029]},{"content":"Method","pos":[4030,4036]},{"content":"The following example calls the <ph id=\"ph1\">&lt;xref:System.Convert.ToInt32%28System.String%29?displayProperty=nameWithType&gt;</ph> method to convert an input string to an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>. The example catches the two most common exceptions that can be thrown by this method, <ph id=\"ph2\">&lt;xref:System.FormatException&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.OverflowException&gt;</ph>.","pos":[4636,4997],"source":"The following example calls the <xref:System.Convert.ToInt32%28System.String%29?displayProperty=nameWithType> method to convert an input string to an [int](../../../csharp/language-reference/keywords/int.md). The example catches the two most common exceptions that can be thrown by this method, <xref:System.FormatException> and <xref:System.OverflowException>."},{"content":"If the resulting number can be incremented without exceeding <ph id=\"ph1\">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>, the example adds 1 to the result and displays the output.","pos":[4998,5175],"source":" If the resulting number can be incremented without exceeding <xref:System.Int32.MaxValue?displayProperty=nameWithType>, the example adds 1 to the result and displays the output."},{"pos":[5315,5323],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5327,5384],"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/programming-guide/types/index.md)</ept>","source":"[Types](../../../csharp/programming-guide/types/index.md)"},{"pos":[5387,5557],"content":"<bpt id=\"p1\">[</bpt>How to: Determine Whether a String Represents a Numeric Value<ept id=\"p1\">](../../../csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)</ept>","source":"[How to: Determine Whether a String Represents a Numeric Value](../../../csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)"},{"pos":[5560,5666],"content":"<bpt id=\"p1\">[</bpt>.NET Framework 4 Formatting Utility<ept id=\"p1\">](https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d)</ept>","source":"[.NET Framework 4 Formatting Utility](https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d)"}]}