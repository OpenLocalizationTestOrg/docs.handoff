{"content":"---\ntitle: \"Partial (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Partial\"\n  - \"partial\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"structures, partial\"\n  - \"classes [Visual Basic]\"\n  - \"partial, types [Visual Basic]\"\n  - \"partial, structures\"\n  - \"partial, classes [Visual Basic]\"\n  - \"classes [Visual Basic], partial\"\n  - \"Partial keyword [Visual Basic]\"\n  - \"type promotion\"\nms.assetid: 7adaef80-f435-46e1-970a-269fff63b448\ncaps.latest.revision: 36\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Partial (Visual Basic)\nIndicates that a type declaration is a partial definition of the type.  \n  \n You can divide the definition of a type among several declarations by using the `Partial` keyword. You can use as many partial declarations as you want, in as many different source files as you want. However, all the declarations must be in the same assembly and the same namespace.  \n  \n> [!NOTE]\n>  Visual Basic supports *partial methods*, which are typically implemented in partial classes. For more information, see [Partial Methods](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md) and [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md).  \n  \n## Syntax  \n  \n```  \n[ <attrlist> ] [ accessmodifier ] [ Shadows ] [ MustInherit | NotInheritable ] _  \nPartial { Class | Structure | Interface | Module } name [ (Of typelist) ]  \n    [ Inherits classname ]  \n    [ Implements interfacenames ]  \n    [ variabledeclarations ]  \n    [ proceduredeclarations ]  \n{ End Class | End Structure }  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`attrlist`|Optional. List of attributes that apply to this type. You must enclose the [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md) in angle brackets (`< >`).|  \n|`accessmodifier`|Optional. Specifies what code can access this type. See [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md).|  \n|`Shadows`|Optional. See [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md).|  \n|`MustInherit`|Optional. See [MustInherit](../../../visual-basic/language-reference/modifiers/mustinherit.md).|  \n|`NotInheritable`|Optional. See [NotInheritable](../../../visual-basic/language-reference/modifiers/notinheritable.md).|  \n|`name`|Required. Name of this type. Must match the name defined in all other partial declarations of the same type.|  \n|`Of`|Optional. Specifies that this is a generic type. See [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md).|  \n|`typelist`|Required if you use [Of](../../../visual-basic/language-reference/statements/of-clause.md). See [Type List](../../../visual-basic/language-reference/statements/type-list.md).|  \n|`Inherits`|Optional. See [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md).|  \n|`classname`|Required if you use `Inherits`. The name of the class or interface from which this class derives.|  \n|`Implements`|Optional. See [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md).|  \n|`interfacenames`|Required if you use `Implements`. The names of the interfaces this type implements.|  \n|`variabledeclarations`|Optional. Statements which declare additional variables and events for the type.|  \n|`proceduredeclarations`|Optional. Statements which declare and define additional procedures for the type.|  \n|`End Class` or `End Structure`|Ends this partial `Class` or `Structure` definition.|  \n  \n## Remarks  \n Visual Basic uses partial-class definitions to separate generated code from user-authored code in separate source files. For example, the **Windows Form Designer** defines partial classes for controls such as <xref:System.Windows.Forms.Form>. You should not modify the generated code in these controls.  \n  \n All the rules for class, structure, interface, and module creation, such as those for modifier usage and inheritance, apply when creating a partial type.  \n  \n## Best Practices  \n  \n-   Under normal circumstances, you should not split the development of a single type across two or more declarations. Therefore, in most cases you do not need the `Partial` keyword.  \n  \n-   For readability, every partial declaration of a type should include the `Partial` keyword. The compiler allows at most one partial declaration to omit the keyword; if two or more omit it the compiler signals an error.  \n  \n## Behavior  \n  \n-   **Union of Declarations.** The compiler treats the type as the union of all its partial declarations. Every modifier from every partial definition applies to the entire type, and every member from every partial definition is available to the entire type.  \n  \n-   **Type Promotion Not Allowed For Partial Types in Modules.** If a partial definition is inside a module, type promotion of that type is automatically defeated. In such a case, a set of partial definitions can cause unexpected results and even compiler errors. For more information, see [Type Promotion](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md).  \n  \n     The compiler merges partial definitions only when their fully qualified paths are identical.  \n  \n The `Partial` keyword can be used in these contexts:  \n  \n [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)  \n  \n [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)  \n  \n## Example  \n The following example splits the definition of class `sampleClass` into two declarations, each of which defines a different `Sub` procedure.  \n  \n [!code-vb[VbVbalrKeywords#3](../../../visual-basic/language-reference/codesnippet/VisualBasic/partial_1.vb)]  \n  \n The two partial definitions in the preceding example could be in the same source file or in two different source files.  \n  \n## See Also  \n [Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)   \n [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)   \n [Type Promotion](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md)   \n [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md)   \n [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [Partial Methods](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md)\n","nodes":[{"pos":[12,51],"content":"Partial (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Partial (Visual Basic) | Microsoft Docs","pos":[0,39]}]},{"pos":[814,836],"content":"Partial (Visual Basic)","linkify":"Partial (Visual Basic)","nodes":[{"content":"Partial (Visual Basic)","pos":[0,22]}]},{"content":"Indicates that a type declaration is a partial definition of the type.","pos":[837,907]},{"content":"You can divide the definition of a type among several declarations by using the <ph id=\"ph1\">`Partial`</ph> keyword.","pos":[914,1012],"source":"You can divide the definition of a type among several declarations by using the `Partial` keyword."},{"content":"You can use as many partial declarations as you want, in as many different source files as you want.","pos":[1013,1113]},{"content":"However, all the declarations must be in the same assembly and the same namespace.","pos":[1114,1196]},{"pos":[1204,1531],"content":"[!NOTE]\n Visual Basic supports *partial methods*, which are typically implemented in partial classes. For more information, see [Partial Methods](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md) and [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md).","leadings":["","> "],"nodes":[{"content":" Visual Basic supports *partial methods*, which are typically implemented in partial classes. For more information, see [Partial Methods](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md) and [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md).","pos":[8,325],"nodes":[{"content":"Visual Basic supports <bpt id=\"p1\">*</bpt>partial methods<ept id=\"p1\">*</ept>, which are typically implemented in partial classes.","pos":[1,93],"source":" Visual Basic supports *partial methods*, which are typically implemented in partial classes."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Partial Methods<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md)</ept> and <bpt id=\"p2\">[</bpt>Sub Statement<ept id=\"p2\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>.","pos":[94,317],"source":" For more information, see [Partial Methods](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md) and [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)."}]}]},{"pos":[1540,1546],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1889,1894],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[1901,1905]},{"content":"Definition","pos":[1906,1916]},{"content":"Optional.","pos":[1944,1953]},{"content":"List of attributes that apply to this type.","pos":[1954,1997]},{"content":"You must enclose the <bpt id=\"p1\">[</bpt>Attribute List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/attribute-list.md)</ept> in angle brackets (<ph id=\"ph1\">`&lt; &gt;`</ph>).","pos":[1998,2133],"source":" You must enclose the [Attribute List](../../../visual-basic/language-reference/statements/attribute-list.md) in angle brackets (`< >`)."},{"content":"Optional.","pos":[2155,2164]},{"content":"Specifies what code can access this type.","pos":[2165,2206]},{"content":"See <bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept>.","pos":[2207,2337],"source":" See [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)."},{"content":"Optional.","pos":[2352,2361]},{"content":"See <bpt id=\"p1\">[</bpt>Shadows<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept>.","pos":[2362,2439],"source":" See [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md)."},{"content":"Optional.","pos":[2458,2467]},{"content":"See <bpt id=\"p1\">[</bpt>MustInherit<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/mustinherit.md)</ept>.","pos":[2468,2553],"source":" See [MustInherit](../../../visual-basic/language-reference/modifiers/mustinherit.md)."},{"content":"Optional.","pos":[2575,2584]},{"content":"See <bpt id=\"p1\">[</bpt>NotInheritable<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/notinheritable.md)</ept>.","pos":[2585,2676],"source":" See [NotInheritable](../../../visual-basic/language-reference/modifiers/notinheritable.md)."},{"content":"Required.","pos":[2688,2697]},{"content":"Name of this type.","pos":[2698,2716]},{"content":"Must match the name defined in all other partial declarations of the same type.","pos":[2717,2796]},{"content":"Optional.","pos":[2806,2815]},{"content":"Specifies that this is a generic type.","pos":[2816,2854]},{"content":"See <bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>.","pos":[2855,2978],"source":" See [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)."},{"content":"Required if you use <bpt id=\"p1\">[</bpt>Of<ept id=\"p1\">](../../../visual-basic/language-reference/statements/of-clause.md)</ept>.","pos":[2994,3085],"source":"Required if you use [Of](../../../visual-basic/language-reference/statements/of-clause.md)."},{"content":"See <bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/type-list.md)</ept>.","pos":[3086,3168],"source":" See [Type List](../../../visual-basic/language-reference/statements/type-list.md)."},{"content":"Optional.","pos":[3184,3193]},{"content":"See <bpt id=\"p1\">[</bpt>Inherits Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/inherits-statement.md)</ept>.","pos":[3194,3294],"source":" See [Inherits Statement](../../../visual-basic/language-reference/statements/inherits-statement.md)."},{"content":"Required if you use <ph id=\"ph1\">`Inherits`</ph>.","pos":[3311,3342],"source":"Required if you use `Inherits`."},{"content":"The name of the class or interface from which this class derives.","pos":[3343,3408]},{"content":"Optional.","pos":[3426,3435]},{"content":"See <bpt id=\"p1\">[</bpt>Implements Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/implements-statement.md)</ept>.","pos":[3436,3540],"source":" See [Implements Statement](../../../visual-basic/language-reference/statements/implements-statement.md)."},{"content":"Required if you use <ph id=\"ph1\">`Implements`</ph>.","pos":[3562,3595],"source":"Required if you use `Implements`."},{"content":"The names of the interfaces this type implements.","pos":[3596,3645]},{"content":"Optional.","pos":[3673,3682]},{"content":"Statements which declare additional variables and events for the type.","pos":[3683,3753]},{"content":"Optional.","pos":[3782,3791]},{"content":"Statements which declare and define additional procedures for the type.","pos":[3792,3863]},{"pos":[3868,3898],"content":"<ph id=\"ph1\">`End Class`</ph> or <ph id=\"ph2\">`End Structure`</ph>","source":"`End Class` or `End Structure`"},{"pos":[3899,3951],"content":"Ends this partial <ph id=\"ph1\">`Class`</ph> or <ph id=\"ph2\">`Structure`</ph> definition.","source":"Ends this partial `Class` or `Structure` definition."},{"pos":[3961,3968],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Visual Basic uses partial-class definitions to separate generated code from user-authored code in separate source files.","pos":[3972,4092]},{"content":"For example, the <bpt id=\"p1\">**</bpt>Windows Form Designer<ept id=\"p1\">**</ept> defines partial classes for controls such as <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form&gt;</ph>.","pos":[4093,4214],"source":" For example, the **Windows Form Designer** defines partial classes for controls such as <xref:System.Windows.Forms.Form>."},{"content":"You should not modify the generated code in these controls.","pos":[4215,4274]},{"content":"All the rules for class, structure, interface, and module creation, such as those for modifier usage and inheritance, apply when creating a partial type.","pos":[4281,4434]},{"pos":[4443,4457],"content":"Best Practices","linkify":"Best Practices","nodes":[{"content":"Best Practices","pos":[0,14]}]},{"content":"Under normal circumstances, you should not split the development of a single type across two or more declarations.","pos":[4467,4581]},{"content":"Therefore, in most cases you do not need the <ph id=\"ph1\">`Partial`</ph> keyword.","pos":[4582,4645],"source":" Therefore, in most cases you do not need the `Partial` keyword."},{"content":"For readability, every partial declaration of a type should include the <ph id=\"ph1\">`Partial`</ph> keyword.","pos":[4655,4745],"source":"For readability, every partial declaration of a type should include the `Partial` keyword."},{"content":"The compiler allows at most one partial declaration to omit the keyword; if two or more omit it the compiler signals an error.","pos":[4746,4872]},{"pos":[4881,4889],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"<bpt id=\"p1\">**</bpt>Union of Declarations.<ept id=\"p1\">**</ept>","pos":[4899,4925],"source":"**Union of Declarations.**"},{"content":"The compiler treats the type as the union of all its partial declarations.","pos":[4926,5000]},{"content":"Every modifier from every partial definition applies to the entire type, and every member from every partial definition is available to the entire type.","pos":[5001,5153]},{"content":"<bpt id=\"p1\">**</bpt>Type Promotion Not Allowed For Partial Types in Modules.<ept id=\"p1\">**</ept>","pos":[5163,5223],"source":"**Type Promotion Not Allowed For Partial Types in Modules.**"},{"content":"If a partial definition is inside a module, type promotion of that type is automatically defeated.","pos":[5224,5322]},{"content":"In such a case, a set of partial definitions can cause unexpected results and even compiler errors.","pos":[5323,5422]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Type Promotion<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md)</ept>.","pos":[5423,5561],"source":" For more information, see [Type Promotion](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md)."},{"content":"The compiler merges partial definitions only when their fully qualified paths are identical.","pos":[5572,5664]},{"pos":[5671,5723],"content":"The <ph id=\"ph1\">`Partial`</ph> keyword can be used in these contexts:","source":"The `Partial` keyword can be used in these contexts:"},{"pos":[5730,5819],"content":"<bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept>","source":"[Class Statement](../../../visual-basic/language-reference/statements/class-statement.md)"},{"pos":[5826,5923],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[5932,5939],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5943,6083],"content":"The following example splits the definition of class <ph id=\"ph1\">`sampleClass`</ph> into two declarations, each of which defines a different <ph id=\"ph2\">`Sub`</ph> procedure.","source":"The following example splits the definition of class `sampleClass` into two declarations, each of which defines a different `Sub` procedure."},{"pos":[6090,6198],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrKeywords#3<ept id=\"p2\">](../../../visual-basic/language-reference/codesnippet/VisualBasic/partial_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrKeywords#3](../../../visual-basic/language-reference/codesnippet/VisualBasic/partial_1.vb)]"},{"content":"The two partial definitions in the preceding example could be in the same source file or in two different source files.","pos":[6205,6324]},{"pos":[6333,6341],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Class Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/class-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6345,6435],"source":"[Class Statement](../../../visual-basic/language-reference/statements/class-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6438,6537],"source":" [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type Promotion<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md)</ept><ph id=\"ph1\"> </ph>","pos":[6540,6653],"source":" [Type Promotion](../../../visual-basic/programming-guide/language-features/declared-elements/type-promotion.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Shadows<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/shadows.md)</ept><ph id=\"ph1\"> </ph>","pos":[6656,6730],"source":" [Shadows](../../../visual-basic/language-reference/modifiers/shadows.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[6733,6853],"source":" [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Partial Methods<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md)</ept>","pos":[6856,6963],"source":" [Partial Methods](../../../visual-basic/programming-guide/language-features/procedures/partial-methods.md)"}]}