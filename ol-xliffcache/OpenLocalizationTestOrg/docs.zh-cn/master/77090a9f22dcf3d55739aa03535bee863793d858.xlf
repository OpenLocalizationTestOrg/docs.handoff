<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="sql-clr-type-mismatches.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">77090a9f22dcf3d55739aa03535bee863793d858</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\sql-clr-type-mismatches.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9aa9b76fe3f64b2096321531e837941db222c0d0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a544823872a3dec9b62d1db6cc323f9877d0da57</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>SQL-CLR Type Mismatches</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>SQL-CLR Type Mismatches</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> automates much of the translation between the object model and SQL Server.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Nevertheless, some situations prevent exact translation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These key mismatches between the common language runtime (CLR) types and the SQL Server database types are summarized in the following sections.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can find more details about specific type mappings and function translation at <bpt id="p1">[</bpt>SQL-CLR Type Mapping<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md)</ept> and <bpt id="p2">[</bpt>Data Types and Functions<ept id="p2">](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Data Types</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Translation between the CLR and SQL Server occurs when a query is being sent to the database, and when the results are sent back to your object model.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, the following Transact-SQL query requires two value conversions:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Before the query can be executed on SQL Server, the value for the Transact-SQL parameter must be specified.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`id`</ph> parameter value must first be translated from a CLR <ph id="ph2">&lt;xref:System.Int32?displayProperty=nameWithType&gt;</ph> type to a SQL Server <ph id="ph3">`INT`</ph> type so that the database can understand what the value is.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Then to retrieve the results, the SQL Server <ph id="ph1">`DateOfBirth`</ph> column must be translated from a SQL Server <ph id="ph2">`DATETIME`</ph> type to a CLR <ph id="ph3">&lt;xref:System.DateTime?displayProperty=nameWithType&gt;</ph> type for use in the object model.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this example, the types in the CLR object model and SQL Server database have natural mappings.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>But, this is not always the case.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Missing Counterparts</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following types do not have reasonable counterparts.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Mismatches in the CLR <ph id="ph1">&lt;xref:System&gt;</ph> namespace:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Unsigned integers<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These types are typically mapped to their signed counterparts of larger size to avoid overflow.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Literals can be converted to a signed numeric of the same or smaller size, based on value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Boolean<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These types can be mapped to a bit or larger numeric or string.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A literal can be mapped to an expression that evaluates to the same value (for example, <ph id="ph1">`1=1`</ph> in SQL for <ph id="ph2">`True`</ph> in CLS).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TimeSpan<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This type represents the difference between two <ph id="ph1">`DateTime`</ph> values and does not correspond to the <ph id="ph2">`timestamp`</ph> of SQL Server.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The CLR <ph id="ph1">&lt;xref:System.TimeSpan?displayProperty=nameWithType&gt;</ph> may also map to the SQL Server <ph id="ph2">`TIME`</ph> type in some cases.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The SQL Server <ph id="ph1">`TIME`</ph> type was only intended to represent positive values less than 24 hours.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The CLR <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> has a much larger range.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>SQL Server-specific <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)]</ph> types in <ph id="ph2">&lt;xref:System.Data.SqlTypes&gt;</ph> are not included in this comparison.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Mismatches in SQL Server:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fixed length character types<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Transact-SQL distinguishes between Unicode and non-Unicode categories and has three distinct types in each category: fixed length <ph id="ph1">`nchar`</ph><ph id="ph2">/</ph><ph id="ph3">`char`</ph>, variable length <ph id="ph4">`nvarchar`</ph><ph id="ph5">/</ph><ph id="ph6">`varchar`</ph>, and larger-sized <ph id="ph7">`ntext`</ph><ph id="ph8">/</ph><ph id="ph9">`text`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The fixed length character types could be mapped to the CLR <ph id="ph1">&lt;xref:System.Char?displayProperty=nameWithType&gt;</ph> type for retrieving characters, but they do not really correspond to the same type in conversions and behavior.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Bit<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`bit`</ph> domain has the same number of values as <ph id="ph2">`Nullable&lt;Boolean&gt;`</ph>, the two are different types.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Bit`</ph> takes values <ph id="ph2">`1`</ph> and <ph id="ph3">`0`</ph> instead of <ph id="ph4">`true`</ph><ph id="ph5">/</ph><ph id="ph6">`false`</ph>, and cannot be used as an equivalent to Boolean expressions.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Timestamp<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unlike the CLR <ph id="ph1">&lt;xref:System.TimeSpan?displayProperty=nameWithType&gt;</ph> type, the SQL Server <ph id="ph2">`TIMESTAMP`</ph> type represents an 8-byte number generated by the database that is unique for each update and is not based on the difference between <ph id="ph3">&lt;xref:System.DateTime&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Money<ept id="p1">**</ept> and <bpt id="p2">**</bpt>SmallMoney<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>These types can be mapped to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> but are basically different types and are treated as such by server-based functions and conversions.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Multiple Mappings</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There are many SQL Server data types that you can map to one or more CLR data types.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>There are also many CLR types that you can map to one or more SQL Server types.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Although a mapping may be supported by LINQ to SQL, it does not mean that the two types mapped between the CLR and SQL Server are a perfect match in precision, range, and semantics.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Some mappings may include differences in any or all of these dimensions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can find details about these potential differences for the various mapping possibilities at <bpt id="p1">[</bpt>SQL-CLR Type Mapping<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>User-defined Types</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>User-defined CLR types are designed to help bridge the type system gap.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Nevertheless they surface interesting issues about type versioning.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A change in the version on the client might not be matched by a change in the type stored on the database server.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Any such change causes another type mismatch where the type semantics might not match and the version gap is likely to become visible.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Further complications occur as inheritance hierarchies are refactored in successive versions.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Expression Semantics</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In addition to the pairwise mismatch between CLR and database types, expressions add complexity to the mismatch.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Mismatches in operator semantics, function semantics, implicit type conversion, and precedence rules must be considered.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following subsections illustrate the mismatch between apparently similar expressions.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It might be possible to generate SQL expressions that are semantically equivalent to a given CLR expression.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>However, it is not clear whether the semantic differences between apparently similar expressions are evident to a CLR user, and therefore whether the changes that are required for semantic equivalence are intended or not.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is an especially critical issue when an expression is evaluated for a set of values.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The visibility of the difference might depend on data- and be hard to identify during coding and debugging.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Null Semantics</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>SQL expressions provide three-valued logic for Boolean expressions.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The result can be true, false, or null.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>By contrast, CLR specifies two-valued Boolean result for comparisons involving null values.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Consider the following code:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A similar problem occurs with the assumption about two-valued results.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the previous case, you can get equivalent behavior in generating SQL, but the translation might not accurately reflect your intention.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not impose C# <ph id="ph2">`null`</ph> or Visual Basic <ph id="ph3">`nothing`</ph> comparison semantics on SQL.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Comparison operators are syntactically translated to their SQL equivalents.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The semantics reflect SQL semantics as defined by server or connection settings.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Two null values are considered unequal under default SQL Server settings (although you can change the settings to change the semantics).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Regardless, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not consider server settings in query translation.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A comparison with the literal <ph id="ph1">`null`</ph> (<ph id="ph2">`nothing`</ph>) is translated to the appropriate SQL version (<ph id="ph3">`is null`</ph> or <ph id="ph4">`is not null`</ph>).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`null`</ph> (<ph id="ph2">`nothing`</ph>) in collation is defined by SQL Server; <ph id="ph3">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not change the collation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Type Conversion and Promotion</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>SQL supports a rich set of implicit conversions in expressions.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Similar expressions in C# would require an explicit cast.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Nvarchar`</ph> and <ph id="ph2">`DateTime`</ph> types can be compared in SQL without any explicit casts; C# requires explicit conversion.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Decimal`</ph> is implicitly converted to <ph id="ph2">`DateTime`</ph> in SQL.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>C# does not allow for an implicit conversion.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Likewise, type precedence in Transact-SQL differs from type precedence in C# because the underlying set of types is different.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In fact, there is no clear subset/superset relationship between the precedence lists.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, comparing an <ph id="ph1">`nvarchar`</ph> with a <ph id="ph2">`varchar`</ph> causes the implicit conversion of the <ph id="ph3">`varchar`</ph> expression to <ph id="ph4">`nvarchar`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The CLR provides no equivalent promotion.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In simple cases, these differences cause CLR expressions with casts to be redundant for a corresponding SQL expression.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>More importantly, the intermediate results of a SQL expression might be implicitly promoted to a type that has no accurate counterpart in C#, and vice versa.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Overall, the testing, debugging, and validation of such expressions adds significant burden on the user.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Collation</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Transact-SQL supports explicit collations as annotations to character string types.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>These collations determine the validity of certain comparisons.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example, comparing two columns with different explicit collations is an error.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The use of much simplified CTS string type does not cause such errors.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In effect, the collation subclause creates a <bpt id="p1">*</bpt>restricted type<ept id="p1">*</ept> that is not substitutable.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Similarly, the sort order can be significantly different across the type systems.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This difference affects the sorting of results.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Guid&gt;</ph> is sorted on all 16 bytes by lexicographic order (<ph id="ph2">`IComparable()`</ph>), whereas T-SQL compares GUIDs in the following order: node(10-15), clock-seq(8-9), time-high(6-7), time-mid(4-5), time-low(0-3).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This ordering was done in SQL 7.0 when NT-generated GUIDs had such an octet order.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The approach ensured that GUIDs generated at the same node cluster came together in sequential order according to timestamp.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The approach was also useful for building indexes (inserts become appends instead of random IOs).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The order was scrambled later in Windows because of privacy concerns, but SQL must maintain compatibility.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A workaround is to use <ph id="ph1">&lt;xref:System.Data.SqlTypes.SqlGuid&gt;</ph> instead of <ph id="ph2">&lt;xref:System.Guid&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Operator and Function Differences</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Operators and functions that are essentially comparable have subtly different semantics.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>C# specifies short circuit semantics based on lexical order of operands for logical operators <ph id="ph1">`&amp;&amp;`</ph> and <ph id="ph2">`||`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>SQL on the other hand is targeted for set-based queries and therefore provides more freedom for the optimizer to decide the order of execution.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Some of the implications include the following:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Semantically equivalent translation would require "<ph id="ph1">`CASE`</ph> …</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WHEN`</ph> …</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`THEN`</ph>" construct in SQL to avoid reordering of operand execution.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A loose translation to <ph id="ph1">`AND`</ph><ph id="ph2">/</ph><ph id="ph3">`OR`</ph> operators could cause unexpected errors if the C# expression relies on evaluation the second operand being based on the result of the evaluation of the first operand.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Round()`</ph> function has different semantics in <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)]</ph> and in T-SQL.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Starting index for strings is 0 in the CLR but 1 in SQL.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Therefore, any function that has index needs index translation.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The CLR supports modulus (‘%’) operator for floating point numbers but SQL does not.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Like`</ph> operator effectively acquires automatic overloads based on implicit conversions.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`Like`</ph> operator is defined to operate on character string types, implicit conversion from numeric types or <ph id="ph2">`DateTime`</ph> types allows for those non-string types to be used with <ph id="ph3">`Like`</ph> just as well.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>In CTS, comparable implicit conversions do not exist.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Therefore, additional overloads are needed.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`Like`</ph> operator behavior applies to C# only; the Visual Basic <ph id="ph2">`Like`</ph> keyword is unchanged.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Overflow is always checked in SQL but it has to be explicitly specified in C# (not in Visual Basic) to avoid wraparound.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Given integer columns C1, C2 and C3, if C1+C2 is stored in C3 (Update T Set C3 = C1 + C2).</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>SQL performs symmetric arithmetic rounding while <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)]</ph> uses banker’s rounding.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>See Knowledgebase article 196652 for additional details.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>By default, for common locales, character-string comparisons are case-insensitive in SQL.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In Visual Basic and in C#, they are case-sensitive.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`s == "Food"`</ph> (<ph id="ph2">`s = "Food"`</ph> in Visual Basic) and <ph id="ph3">`s == "Food"`</ph> can yield different results if <ph id="ph4">`s`</ph> is <ph id="ph5">`food`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Operators/ functions applied to fixed length character type arguments in SQL have significantly different semantics than the same operators/functions applied to the CLR <ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This could also be viewed as an extension of the missing counterpart problem discussed in the section about types.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A similar problem occurs with string concatenation.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>In summary, a convoluted translation might be required for CLR expressions and additional operators/functions may be necessary to expose SQL functionality.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Type Casting</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In C# and in SQL, users can override the default semantics of expressions by using explicit type casts (<ph id="ph1">`Cast`</ph> and <ph id="ph2">`Convert`</ph>).</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>However, exposing this capability across the type system boundary poses a dilemma.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A SQL cast that provides the desired semantics cannot be easily translated to a corresponding C# cast.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>On the other hand, a C# cast cannot be directly translated into an equivalent SQL cast because of type mismatches, missing counterparts, and different type precedence hierarchies.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>There is a trade-off between exposing the type system mismatch and losing significant power of expression.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In other cases, type casting might not be needed in either domain for validation of an expression but might be required to make sure that a non-default mapping is correctly applied to the expression.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Performance Issues</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Accounting for some SQL Server-CLR type differences may result in a decrease in performance when crossing between the CLR and SQL Server type systems.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Examples of scenarios impacting performance include the following:</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Forced order of evaluation for logical and/or operators</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Generating SQL to enforce order of predicate evaluation restricts the SQL optimizer’s ability.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Type conversions, whether introduced by a CLR compiler or by an Object-Relational query implementation, may curtail index usage.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For example,</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Consider the translation of expression <ph id="ph1">`(s = SOME_STRING_CONSTANT)`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>In addition to semantic differences, it is important to consider impacts to performance when crossing between the SQL Server and CLR type systems.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For large data sets, such performance issues can determine whether an application is deployable.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Background Information<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>