{"content":"---\ntitle: \"break statement - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"break\"\n  - \"break_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"break keyword [C#]\"\nms.assetid: be2571ed-efb0-4965-b122-81e5b09db0b9\n---\n# break (C# Reference)\n\nThe `break` statement terminates the closest enclosing loop or [switch](../../../csharp/language-reference/keywords/switch.md) statement in which it appears. Control is passed to the statement that follows the terminated statement, if any.\n\n## Example\n\nIn this example, the conditional statement contains a counter that is supposed to count from 1 to 100; however, the `break` statement terminates the loop after 4 counts.\n\n[!code-csharp[csrefKeywordsJump#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsJump/CS/csrefKeywordsJump.cs#1)]\n\n## Example\n\nIn this example, the `break` statement is used to break out of an inner nested loop, and return control to the outer loop.\n\n[!code-csharp[csrefKeywordsJump#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsJump/CS/csrefKeywordsJump.cs#7)]\n\n## Example\n\nThis example demonstrates the use of `break` in a [switch](../../../csharp/language-reference/keywords/switch.md) statement.\n\n[!code-csharp[csrefKeywordsJump#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsJump/CS/csrefKeywordsJump.cs#2)]\n\nIf you entered `4`, the output would be:\n\n```console\nEnter your selection (1, 2, or 3): 4\nSorry, invalid selection.\n```\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [switch](../../../csharp/language-reference/keywords/switch.md)\n- [Jump Statements](../../../csharp/language-reference/keywords/jump-statements.md)\n- [Iteration Statements](../../../csharp/language-reference/keywords/iteration-statements.md)\n","nodes":[{"pos":[4,232],"embed":true,"restype":"x-metadata","content":"title: \"break statement - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"break\"\n  - \"break_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"break keyword [C#]\"\nms.assetid: be2571ed-efb0-4965-b122-81e5b09db0b9","nodes":[{"content":"break statement - C# Reference","nodes":[{"pos":[0,30],"content":"break statement - C# Reference","nodes":[{"content":"break statement - C# Reference","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[239,259],"content":"break (C# Reference)","linkify":"break (C# Reference)","nodes":[{"content":"break (C# Reference)","pos":[0,20]}]},{"content":"The <ph id=\"ph1\">`break`</ph> statement terminates the closest enclosing loop or <bpt id=\"p1\">[</bpt>switch<ept id=\"p1\">](../../../csharp/language-reference/keywords/switch.md)</ept> statement in which it appears.","pos":[261,418],"source":"The `break` statement terminates the closest enclosing loop or [switch](../../../csharp/language-reference/keywords/switch.md) statement in which it appears."},{"content":"Control is passed to the statement that follows the terminated statement, if any.","pos":[419,500]},{"pos":[505,512],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[514,683],"content":"In this example, the conditional statement contains a counter that is supposed to count from 1 to 100; however, the <ph id=\"ph1\">`break`</ph> statement terminates the loop after 4 counts.","source":"In this example, the conditional statement contains a counter that is supposed to count from 1 to 100; however, the `break` statement terminates the loop after 4 counts."},{"pos":[817,824],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[826,948],"content":"In this example, the <ph id=\"ph1\">`break`</ph> statement is used to break out of an inner nested loop, and return control to the outer loop.","source":"In this example, the `break` statement is used to break out of an inner nested loop, and return control to the outer loop."},{"pos":[1082,1089],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1091,1215],"content":"This example demonstrates the use of <ph id=\"ph1\">`break`</ph> in a <bpt id=\"p1\">[</bpt>switch<ept id=\"p1\">](../../../csharp/language-reference/keywords/switch.md)</ept> statement.","source":"This example demonstrates the use of `break` in a [switch](../../../csharp/language-reference/keywords/switch.md) statement."},{"pos":[1346,1386],"content":"If you entered <ph id=\"ph1\">`4`</ph>, the output would be:","source":"If you entered `4`, the output would be:"},{"pos":[1470,1495],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1561,1569],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1573,1632],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[1635,1701],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1704,1771],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[1774,1837],"content":"<bpt id=\"p1\">[</bpt>switch<ept id=\"p1\">](../../../csharp/language-reference/keywords/switch.md)</ept>","source":"[switch](../../../csharp/language-reference/keywords/switch.md)"},{"pos":[1840,1921],"content":"<bpt id=\"p1\">[</bpt>Jump Statements<ept id=\"p1\">](../../../csharp/language-reference/keywords/jump-statements.md)</ept>","source":"[Jump Statements](../../../csharp/language-reference/keywords/jump-statements.md)"},{"pos":[1924,2015],"content":"<bpt id=\"p1\">[</bpt>Iteration Statements<ept id=\"p1\">](../../../csharp/language-reference/keywords/iteration-statements.md)</ept>","source":"[Iteration Statements](../../../csharp/language-reference/keywords/iteration-statements.md)"}]}