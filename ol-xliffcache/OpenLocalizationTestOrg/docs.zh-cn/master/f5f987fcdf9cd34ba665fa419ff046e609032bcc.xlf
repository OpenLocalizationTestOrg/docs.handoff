<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="document-serialization-and-storage.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5f987fcdf9cd34ba665fa419ff046e609032bcc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\document-serialization-and-storage.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e6e7eeb7680a0679a3a5c1b97ce3a0b06f0847e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fae8e7f5a6f0afd895e22cd9698ce79dd157e752</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Document Serialization and Storage | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Document Serialization and Storage</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winfx](../../../../includes/tlasharptla-winfx-md.md)]</ph> provides a powerful environment for creating and displaying high quality documents.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Enhanced features that support both fixed-documents and flow-documents, advanced viewing controls, combined with powerful 2D and 3D graphic capabilities take <ph id="ph1">[!INCLUDE[TLA2#tla_winfx](../../../../includes/tla2sharptla-winfx-md.md)]</ph> applications to a new level of quality and user experience.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Being able to flexibly manage an in-memory representation of a document is a key feature of <ph id="ph1">[!INCLUDE[TLA2#tla_winfx](../../../../includes/tla2sharptla-winfx-md.md)]</ph>, and being able to efficiently save and load documents from a data store is a need of almost every application.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The process of converting a document from an internal in-memory representation to an external data store is termed serialization.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The reverse process of reading a data store and recreating the original in-memory instance is termed deserialization.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>About Document Serialization</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Ideally the process of serializing and deserializing a document from and then back into memory is transparent to the application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The application calls a serializer "write" method to save the document, while a deserializer "read" method accesses the data store and recreates the original instance in memory.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The specific format that the data is stored in is generally not a concern of the application as long as the serialize and deserialize process recreates the document back to its original form.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Applications often provide multiple serialization options which allow the user to save documents to different medium or to a different format.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, an application might offer "Save As" options to store a document to a disk file, database, or web service.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Similarly, different serializers could store the document in different formats such as in HTML, RTF, XML, XPS, or alternately to a third-party format.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To the application, serialization defines an interface that isolates the details of the storage medium within the implementation of each specific serializer.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In addition to the benefits of encapsulating storage details, the <ph id="ph1">[!INCLUDE[TLA2#tla_winfx](../../../../includes/tla2sharptla-winfx-md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.Documents.Serialization&gt;</ph> <ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> provide several other important features.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Features of .NET Framework 3.0 Document Serializers</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Direct access to the high-level document objects (logical tree and visuals) enable efficient storage of paginated content, 2D/3D elements, images, media, hyperlinks, annotations, and other support content.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Synchronous and asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Support for plug-in serializers with enhanced capabilities:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>System-wide access for use by all <ph id="ph1">[!INCLUDE[TLA2#tla_winfx](../../../../includes/tla2sharptla-winfx-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Simple application plug-in discoverability.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Simple deployment, installation, and update for custom third-party plug-ins.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>User interface support for custom run-time settings and options.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>XPS Print Path</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winfx](../../../../includes/tlasharptla-winfx-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> print path also provides an extensible mechanism for writing documents through print output.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> serves as both a document file format and is the native print spool format for <ph id="ph2">[!INCLUDE[TLA#tla_winvista](../../../../includes/tlasharptla-winvista-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> documents can be sent directly to <ph id="ph2">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph>-compatible printers without the need for conversion to an intermediate format.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Printing Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/printing-overview.md)</ept> for additional information on print path output options and capabilities.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Plug-in Serializers</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization&gt;</ph> APIs provide support for both plug-in serializers and linked serializers that are installed separately from the application, bind at run time, and are accessed by using the <ph id="ph2">&lt;xref:System.Windows.Documents.Serialization.SerializerProvider&gt;</ph> discovery mechanism.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Plug-in serializers offer enhanced benefits for ease of deployment and system-wide use.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Linked serializers can also be implemented for partial trust environments such as <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](../../../../includes/tlasharptla-xbapsharpplural-md.md)]</ph> where plug-in serializers are not accessible.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Linked serializers, which are based on a derived implementation of the <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerWriter&gt;</ph> class, are compiled and linked directly into the application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Both plug-in serializers and linked serializers operate through identical public methods and events which make it easy to use either or both types of serializers in the same application.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Plug-in serializers aid application developers by providing extensibility to new storage designs and file formats without having to code directly for every potential format at build time.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Plug-in serializers also benefit third-party developers by providing a standardized means to deploy, install, and update system accessible plug-ins for custom or proprietary file formats.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Using a Plug-in Serializer</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Plug-in serializers are simple to use.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerProvider&gt;</ph> class enumerates a <ph id="ph2">&lt;xref:System.Windows.Documents.Serialization.SerializerDescriptor&gt;</ph> object for each plug-in installed on the system.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerDescriptor.IsLoadable%2A&gt;</ph> property filters the installed plug-ins based on the current configuration and verifies that the serializer can be loaded and used by the application.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerDescriptor&gt;</ph> also provides other properties, such as <ph id="ph2">&lt;xref:System.Windows.Documents.Serialization.SerializerDescriptor.DisplayName%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Documents.Serialization.SerializerDescriptor.DefaultFileExtension%2A&gt;</ph>, which the application can use to prompt the user in selecting a serializer for an available output format.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A default plug-in serializer for <ph id="ph1">[!INCLUDE[TLA2#tla_xps](../../../../includes/tla2sharptla-xps-md.md)]</ph> is provided with <ph id="ph2">[!INCLUDE[TLA2#tla_winfx](../../../../includes/tla2sharptla-winfx-md.md)]</ph> and is always enumerated.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>After the user selects an output format, the <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerProvider.CreateSerializerWriter%2A&gt;</ph> method is used to create a <ph id="ph2">&lt;xref:System.Windows.Documents.Serialization.SerializerWriter&gt;</ph> for the specific format.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerWriter&gt;</ph>.<ph id="ph2">&lt;xref:System.Windows.Documents.Serialization.SerializerWriter.Write%2A&gt;</ph> method can then be called to output the document stream to the data store.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example illustrates an application that uses the <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerProvider&gt;</ph> method in a "PlugInFileFilter" property.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>PlugInFileFilter enumerates the installed plug-ins and builds a filter string with the available file options for a <ph id="ph1">&lt;xref:Microsoft.Win32.SaveFileDialog&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>After an output file name has been selected by the user, the following example illustrates use of the <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerProvider.CreateSerializerWriter%2A&gt;</ph> method to store a given document in a specified format.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Installing Plug-in Serializers</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerProvider&gt;</ph> class supplies the upper-level application interface for plug-in serializer discovery and access.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerProvider&gt;</ph> locates and provides the application a list of the serializers that are installed and accessible on the system.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The specifics of the installed serializers are defined through registry settings.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Plug-in serializers can be added to the registry by using the <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerProvider.RegisterSerializer%2A&gt;</ph> method; or if <ph id="ph2">[!INCLUDE[TLA2#tla_winfx](../../../../includes/tla2sharptla-winfx-md.md)]</ph> is not yet installed, the plug-in installation script can directly set the registry values itself.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.SerializerProvider.UnregisterSerializer%2A&gt;</ph> method can be used to remove a previously installed plug-in, or the registry settings can be reset similarly by an uninstall script.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Creating a Plug-in Serializer</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Both plug-in serializers and linked serializers use the same exposed public methods and events, and similarly can be designed to operate either synchronously or asynchronously.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>There are three basic steps normally followed to create a plug-in serializer:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Implement and debug the serializer first as a linked serializer.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Initially creating the serializer compiled and linked directly in a test application provides full access to breakpoints and other debug services helpful for testing.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>After the serializer is fully tested, an <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.ISerializerFactory&gt;</ph> interface is added to create a plug-in.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.ISerializerFactory&gt;</ph> interface permits full access to all <ph id="ph2">[!INCLUDE[TLA2#tla_winfx](../../../../includes/tla2sharptla-winfx-md.md)]</ph> objects which includes the logical tree, <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> objects, <ph id="ph4">&lt;xref:System.Windows.Documents.IDocumentPaginatorSource&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Media.Visual&gt;</ph> elements.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Additionally <ph id="ph1">&lt;xref:System.Windows.Documents.Serialization.ISerializerFactory&gt;</ph> provides the same synchronous and asynchronous methods and events used by linked serializers.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Since large documents can take time to output, asynchronous operations are recommended to maintain responsive user interaction and offer a "Cancel" option if some problem occurs with the data store.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>After the plug-in serializer is created, an installation script is implemented for distributing and installing (and uninstalling) the plug-in (see above, "<bpt id="p1">[</bpt>Installing Plug-in Serializers<ept id="p1">](#InstallingPluginSerializers)</ept>").</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Serialization&gt;</ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Xps.XpsDocumentWriter&gt;</ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Xps.Packaging.XpsDocument&gt;</ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Documents in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/documents-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Printing Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/printing-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Paper Specification: Overview<ept id="p1">](http://go.microsoft.com/fwlink?LinkID=106246)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>