{"content":"---\ntitle: \"How to: Retrieve the Value of an Attribute (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 5f4b3790-c83f-4eb3-a889-e3587edf3ca1\n---\n# How to: Retrieve the Value of an Attribute (LINQ to XML) (Visual Basic)\nThis topic shows how to obtain the value of attributes. There are two main ways: You can cast an <xref:System.Xml.Linq.XAttribute> to the desired type; the explicit conversion operator then converts the contents of the element or attribute to the specified type. Alternatively, you can use the <xref:System.Xml.Linq.XAttribute.Value%2A> property. However, casting is generally the better approach. If you cast the attribute to a nullable type, the code is simpler to write when retrieving the value of an attribute that might or might not exist. For examples of this technique, see [How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml.md).  \n  \n## Example  \n In Visual Basic, you can use the integrated attribute property to retrieve the value of an attribute.  \n  \n```vb  \nDim root As XElement = <Root Attr=\"abcde\"/>  \nConsole.WriteLine(root)  \nDim str As String = root.@Attr  \nConsole.WriteLine(str)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root Attr=\"abcde\" />  \nabcde  \n```  \n  \n## Example  \n In Visual Basic, you can use the integrated attribute property to set the value of an attribute. Further, if you use the integrated attribute property to set the value of an attribute that does not exist, the attribute will be created.  \n  \n```vb  \nDim root As XElement = <Root Att1=\"content\"/>  \nroot.@Att1 = \"new content\"  \nroot.@Att2 = \"new attribute\"  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root Att1=\"new content\" Att2=\"new attribute\" />  \n```  \n  \n## Example  \n The following example shows how to retrieve the value of an attribute where the attribute is in a namespace. For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n```vb  \nImports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = <aw:Root aw:Attr=\"abcde\"/>  \n        Dim str As String = root.@aw:Attr  \n        Console.WriteLine(str)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \nabcde  \n```  \n  \n## See also\n\n- [LINQ to XML Axes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)\n","nodes":[{"pos":[4,153],"embed":true,"restype":"x-metadata","content":"title: \"How to: Retrieve the Value of an Attribute (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 5f4b3790-c83f-4eb3-a889-e3587edf3ca1","nodes":[{"content":"How to: Retrieve the Value of an Attribute (LINQ to XML) (Visual Basic)","nodes":[{"pos":[0,71],"content":"How to: Retrieve the Value of an Attribute (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Retrieve the Value of an Attribute (LINQ to XML) (Visual Basic)","pos":[0,71]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[160,231],"content":"How to: Retrieve the Value of an Attribute (LINQ to XML) (Visual Basic)","linkify":"How to: Retrieve the Value of an Attribute (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Retrieve the Value of an Attribute (LINQ to XML) (Visual Basic)","pos":[0,71]}]},{"content":"This topic shows how to obtain the value of attributes.","pos":[232,287]},{"content":"There are two main ways: You can cast an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> to the desired type; the explicit conversion operator then converts the contents of the element or attribute to the specified type.","pos":[288,494],"source":" There are two main ways: You can cast an <xref:System.Xml.Linq.XAttribute> to the desired type; the explicit conversion operator then converts the contents of the element or attribute to the specified type."},{"content":"Alternatively, you can use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute.Value%2A&gt;</ph> property.","pos":[495,578],"source":" Alternatively, you can use the <xref:System.Xml.Linq.XAttribute.Value%2A> property."},{"content":"However, casting is generally the better approach.","pos":[579,629]},{"content":"If you cast the attribute to a nullable type, the code is simpler to write when retrieving the value of an attribute that might or might not exist.","pos":[630,777]},{"content":"For examples of this technique, see <bpt id=\"p1\">[</bpt>How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml.md)</ept>.","pos":[778,999],"source":" For examples of this technique, see [How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml.md)."},{"pos":[1008,1015],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In Visual Basic, you can use the integrated attribute property to retrieve the value of an attribute.","pos":[1019,1120]},{"content":"This example produces the following output:","pos":[1274,1317]},{"pos":[1376,1383],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In Visual Basic, you can use the integrated attribute property to set the value of an attribute.","pos":[1387,1483]},{"content":"Further, if you use the integrated attribute property to set the value of an attribute that does not exist, the attribute will be created.","pos":[1484,1622]},{"content":"This example produces the following output:","pos":[1780,1823]},{"pos":[1901,1908],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to retrieve the value of an attribute where the attribute is in a namespace.","pos":[1912,2020]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[2021,2181],"source":" For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"content":"This example produces the following output:","pos":[2460,2503]},{"pos":[2535,2543],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2547,2658],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML Axes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept>","source":"[LINQ to XML Axes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)"}]}