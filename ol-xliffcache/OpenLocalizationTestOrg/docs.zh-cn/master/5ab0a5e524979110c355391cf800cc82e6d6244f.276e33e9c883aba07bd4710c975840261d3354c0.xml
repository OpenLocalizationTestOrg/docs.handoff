{"content":"---\ntitle: \"Indexers - C# Programming Guide\"\nms.custom: seodec18\nms.date: 03/10/2017\nf1_keywords: \n  - \"cs.indexers\"\nhelpviewer_keywords: \n  - \"indexers [C#]\"\n  - \"C# language, indexers\"\nms.assetid: 022cd27d-d5e0-4cfe-8b97-dc018cc3355d\n---\n# Indexers (C# Programming Guide)\n\nIndexers allow instances of a class or struct to be indexed just like arrays. The indexed value can be set or retrieved without explicitly specifying a type or instance member. Indexers resemble [properties](../../../csharp/programming-guide/classes-and-structs/properties.md) except that their accessors take parameters.  \n \n The following example defines a generic class with simple [get](../../../csharp/language-reference/keywords/get.md) and [set](../../../csharp/language-reference/keywords/set.md) accessor methods to assign and retrieve values. The `Program` class creates an instance of this class for storing strings.  \n  \n [!code-csharp[indexers#1](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-1.cs)]  \n  \n> [!NOTE]\n>  For more examples, see [Related Sections](../../../csharp/programming-guide/indexers/index.md#BKMK_RelatedSections).  \n  \n## Expression Body Definitions  \n \nIt is common for an indexer's get or set accessor to consist of a single statement that either returns or sets a value. Expression-bodied members provide a simplified syntax to support this scenario. Starting with C# 6, a read-only indexer can be implemented as an expression-bodied member, as the following example shows.\n\n[!code-csharp[indexers#2](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-2.cs)]  \n\nNote that `=>` introduces the expression body, and that the `get` keyword is not used. \n\nStarting with C# 7.0, both the get and set accessor can be an implemented as expression-bodied members. In this case, both `get` and `set` keywords must be used. For example:\n\n[!code-csharp[indexers#3](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-3.cs)]  \n  \n## Indexers Overview  \n  \n-   Indexers enable objects to be indexed in a similar manner to arrays.  \n  \n-   A `get` accessor returns a value. A `set` accessor assigns a value.  \n  \n-   The [this](../../../csharp/language-reference/keywords/this.md) keyword is used to define the indexer.  \n  \n-   The [value](../../../csharp/language-reference/keywords/value.md) keyword is used to define the value being assigned by the `set` indexer.  \n  \n-   Indexers do not have to be indexed by an integer value; it is up to you how to define the specific look-up mechanism.  \n  \n-   Indexers can be overloaded.  \n  \n-   Indexers can have more than one formal parameter, for example, when accessing a two-dimensional array.  \n  \n## <a name=\"BKMK_RelatedSections\"></a> Related Sections  \n  \n-   [Using Indexers](../../../csharp/programming-guide/indexers/using-indexers.md)  \n  \n-   [Indexers in Interfaces](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)  \n  \n-   [Comparison Between Properties and Indexers](../../../csharp/programming-guide/indexers/comparison-between-properties-and-indexers.md)  \n  \n-   [Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)  \n  \n## C# Language Specification  \n\nFor more information, see [Indexers](~/_csharplang/spec/classes.md#indexers) in the [C# Language Specification](../../language-reference/language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)\n","nodes":[{"pos":[4,235],"embed":true,"restype":"x-metadata","content":"title: \"Indexers - C# Programming Guide\"\nms.custom: seodec18\nms.date: 03/10/2017\nf1_keywords: \n  - \"cs.indexers\"\nhelpviewer_keywords: \n  - \"indexers [C#]\"\n  - \"C# language, indexers\"\nms.assetid: 022cd27d-d5e0-4cfe-8b97-dc018cc3355d","nodes":[{"content":"Indexers - C# Programming Guide","nodes":[{"pos":[0,31],"content":"Indexers - C# Programming Guide","nodes":[{"content":"Indexers - C# Programming Guide","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[242,273],"content":"Indexers (C# Programming Guide)","linkify":"Indexers (C# Programming Guide)","nodes":[{"content":"Indexers (C# Programming Guide)","pos":[0,31]}]},{"content":"Indexers allow instances of a class or struct to be indexed just like arrays.","pos":[275,352]},{"content":"The indexed value can be set or retrieved without explicitly specifying a type or instance member.","pos":[353,451]},{"content":"Indexers resemble <bpt id=\"p1\">[</bpt>properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept> except that their accessors take parameters.","pos":[452,596],"source":" Indexers resemble [properties](../../../csharp/programming-guide/classes-and-structs/properties.md) except that their accessors take parameters."},{"content":"The following example defines a generic class with simple <bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](../../../csharp/language-reference/keywords/get.md)</ept> and <bpt id=\"p2\">[</bpt>set<ept id=\"p2\">](../../../csharp/language-reference/keywords/set.md)</ept> accessor methods to assign and retrieve values.","pos":[602,827],"source":"The following example defines a generic class with simple [get](../../../csharp/language-reference/keywords/get.md) and [set](../../../csharp/language-reference/keywords/set.md) accessor methods to assign and retrieve values."},{"content":"The <ph id=\"ph1\">`Program`</ph> class creates an instance of this class for storing strings.","pos":[828,902],"source":" The `Program` class creates an instance of this class for storing strings."},{"pos":[1020,1147],"content":"[!NOTE]\n For more examples, see [Related Sections](../../../csharp/programming-guide/indexers/index.md#BKMK_RelatedSections).","leadings":["","> "],"nodes":[{"content":"For more examples, see <bpt id=\"p1\">[</bpt>Related Sections<ept id=\"p1\">](../../../csharp/programming-guide/indexers/index.md#BKMK_RelatedSections)</ept>.","pos":[9,125],"source":"For more examples, see [Related Sections](../../../csharp/programming-guide/indexers/index.md#BKMK_RelatedSections)."}]},{"pos":[1156,1183],"content":"Expression Body Definitions","linkify":"Expression Body Definitions","nodes":[{"content":"Expression Body Definitions","pos":[0,27]}]},{"content":"It is common for an indexer's get or set accessor to consist of a single statement that either returns or sets a value.","pos":[1188,1307]},{"content":"Expression-bodied members provide a simplified syntax to support this scenario.","pos":[1308,1387]},{"content":"Starting with C# 6, a read-only indexer can be implemented as an expression-bodied member, as the following example shows.","pos":[1388,1510]},{"pos":[1619,1705],"content":"Note that <ph id=\"ph1\">`=&gt;`</ph> introduces the expression body, and that the <ph id=\"ph2\">`get`</ph> keyword is not used.","source":"Note that `=>` introduces the expression body, and that the `get` keyword is not used."},{"content":"Starting with C# 7.0, both the get and set accessor can be an implemented as expression-bodied members.","pos":[1708,1811]},{"content":"In this case, both <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> keywords must be used.","pos":[1812,1869],"source":" In this case, both `get` and `set` keywords must be used."},{"content":"For example:","pos":[1870,1882]},{"pos":[1996,2013],"content":"Indexers Overview","linkify":"Indexers Overview","nodes":[{"content":"Indexers Overview","pos":[0,17]}]},{"content":"Indexers enable objects to be indexed in a similar manner to arrays.","pos":[2023,2091]},{"content":"A <ph id=\"ph1\">`get`</ph> accessor returns a value.","pos":[2101,2134],"source":"A `get` accessor returns a value."},{"content":"A <ph id=\"ph1\">`set`</ph> accessor assigns a value.","pos":[2135,2168],"source":" A `set` accessor assigns a value."},{"pos":[2178,2280],"content":"The <bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](../../../csharp/language-reference/keywords/this.md)</ept> keyword is used to define the indexer.","source":"The [this](../../../csharp/language-reference/keywords/this.md) keyword is used to define the indexer."},{"pos":[2290,2428],"content":"The <bpt id=\"p1\">[</bpt>value<ept id=\"p1\">](../../../csharp/language-reference/keywords/value.md)</ept> keyword is used to define the value being assigned by the <ph id=\"ph1\">`set`</ph> indexer.","source":"The [value](../../../csharp/language-reference/keywords/value.md) keyword is used to define the value being assigned by the `set` indexer."},{"content":"Indexers do not have to be indexed by an integer value; it is up to you how to define the specific look-up mechanism.","pos":[2438,2555]},{"content":"Indexers can be overloaded.","pos":[2565,2592]},{"content":"Indexers can have more than one formal parameter, for example, when accessing a two-dimensional array.","pos":[2602,2704]},{"pos":[2713,2765],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_RelatedSections\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Related Sections","linkify":"<a name=\"BKMK_RelatedSections\"></a> Related Sections","source":"<a name=\"BKMK_RelatedSections\"></a> Related Sections"},{"pos":[2775,2853],"content":"<bpt id=\"p1\">[</bpt>Using Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/using-indexers.md)</ept>","source":"[Using Indexers](../../../csharp/programming-guide/indexers/using-indexers.md)"},{"pos":[2863,2957],"content":"<bpt id=\"p1\">[</bpt>Indexers in Interfaces<ept id=\"p1\">](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)</ept>","source":"[Indexers in Interfaces](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)"},{"pos":[2967,3101],"content":"<bpt id=\"p1\">[</bpt>Comparison Between Properties and Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/comparison-between-properties-and-indexers.md)</ept>","source":"[Comparison Between Properties and Indexers](../../../csharp/programming-guide/indexers/comparison-between-properties-and-indexers.md)"},{"pos":[3111,3240],"content":"<bpt id=\"p1\">[</bpt>Restricting Accessor Accessibility<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)</ept>","source":"[Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)"},{"pos":[3249,3274],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Indexers<ept id=\"p1\">](~/_csharplang/spec/classes.md#indexers)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../../language-reference/language-specification/index.md)</ept>.","pos":[3278,3448],"source":"For more information, see [Indexers](~/_csharplang/spec/classes.md#indexers) in the [C# Language Specification](../../language-reference/language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[3449,3525]},{"pos":[3532,3540],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3544,3610],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[3613,3694],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","source":"[Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"}]}