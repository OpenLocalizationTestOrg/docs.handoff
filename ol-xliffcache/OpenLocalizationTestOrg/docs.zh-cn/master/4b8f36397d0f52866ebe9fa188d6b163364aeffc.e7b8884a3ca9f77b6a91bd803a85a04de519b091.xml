{"content":"---\ntitle: \"+= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.+=\"\nhelpviewer_keywords: \n  - \"+= operator [Visual Basic]\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"+= operator [Visual Basic], appending strings\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: d3e959f4-85d4-4e47-87c4-77b62335a5b3\n---\n# += Operator (Visual Basic)\nAdds the value of a numeric expression to the value of a numeric variable or property and assigns the result to the variable or property. Can also be used to concatenate a `String` expression to a `String` variable or property and assign the result to the variable or property.  \n  \n## Syntax  \n  \n```  \nvariableorproperty += expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any numeric or `String` variable or property.  \n  \n `expression`  \n Required. Any numeric or `String` expression.  \n  \n## Remarks  \n The element on the left side of the `+=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `+=` operator adds the value on its right to the variable or property on its left, and assigns the result to the variable or property on its left. The `+=` operator can also be used to concatenate the `String` expression on its right to the `String` variable or property on its left, and assign the result to the variable or property on its left.  \n  \n> [!NOTE]\n>  When you use the `+=` operator, you might not be able to determine whether addition or string concatenation will occur. Use the `&=` operator for concatenation to eliminate ambiguity and to provide self-documenting code.  \n  \n This assignment operator implicitly performs widening but not narrowing conversions if the compilation environment enforces strict semantics. For more information on these conversions, see [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md). For more information on strict and permissive semantics, see [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md).  \n  \n If permissive semantics are allowed, the `+=` operator implicitly performs a variety of string and numeric conversions identical to those performed by the `+` operator. For details on these conversions, see [+ Operator](../../../visual-basic/language-reference/operators/addition-operator.md).  \n  \n## Overloading  \n The `+` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `+` operator affects the behavior of the `+=` operator. If your code uses `+=` on a class or structure that overloads `+`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `+=` operator to combine the value of one variable with another. The first part uses `+=` with numeric variables to add one value to another. The second part uses `+=` with `String` variables to concatenate one value with another. In both cases, the result is assigned to the first variable.  \n  \n [!code-vb[VbVbalrOperators#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#7)]  \n  \n [!code-vb[VbVbalrOperators#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#8)]  \n  \n The value of `num1` is now 13, and the value of `str1` is now \"103\".  \n  \n## See also\n\n- [+ Operator](../../../visual-basic/language-reference/operators/addition-operator.md)\n- [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n","nodes":[{"pos":[4,399],"embed":true,"restype":"x-metadata","content":"title: \"+= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.+=\"\nhelpviewer_keywords: \n  - \"+= operator [Visual Basic]\"\n  - \"assignment statements [Visual Basic], compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"+= operator [Visual Basic], appending strings\"\n  - \"compound assignment statements [Visual Basic]\"\nms.assetid: d3e959f4-85d4-4e47-87c4-77b62335a5b3","nodes":[{"content":"+= Operator (Visual Basic)","nodes":[{"pos":[0,26],"content":"+= Operator (Visual Basic)","nodes":[{"content":"+= Operator (Visual Basic)","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[406,432],"content":"+= Operator (Visual Basic)","linkify":"+= Operator (Visual Basic)","nodes":[{"content":"+= Operator (Visual Basic)","pos":[0,26]}]},{"content":"Adds the value of a numeric expression to the value of a numeric variable or property and assigns the result to the variable or property.","pos":[433,570]},{"content":"Can also be used to concatenate a <ph id=\"ph1\">`String`</ph> expression to a <ph id=\"ph2\">`String`</ph> variable or property and assign the result to the variable or property.","pos":[571,710],"source":" Can also be used to concatenate a `String` expression to a `String` variable or property and assign the result to the variable or property."},{"pos":[719,725],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[784,789],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[817,826]},{"content":"Any numeric or <ph id=\"ph1\">`String`</ph> variable or property.","pos":[827,872],"source":" Any numeric or `String` variable or property."},{"content":"Required.","pos":[895,904]},{"content":"Any numeric or <ph id=\"ph1\">`String`</ph> expression.","pos":[905,940],"source":" Any numeric or `String` expression."},{"pos":[949,956],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`+=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[960,1081],"source":"The element on the left side of the `+=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[1082,1192],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`+=`</ph> operator adds the value on its right to the variable or property on its left, and assigns the result to the variable or property on its left.","pos":[1199,1349],"source":"The `+=` operator adds the value on its right to the variable or property on its left, and assigns the result to the variable or property on its left."},{"content":"The <ph id=\"ph1\">`+=`</ph> operator can also be used to concatenate the <ph id=\"ph2\">`String`</ph> expression on its right to the <ph id=\"ph3\">`String`</ph> variable or property on its left, and assign the result to the variable or property on its left.","pos":[1350,1549],"source":" The `+=` operator can also be used to concatenate the `String` expression on its right to the `String` variable or property on its left, and assign the result to the variable or property on its left."},{"pos":[1557,1788],"content":"[!NOTE]\n When you use the `+=` operator, you might not be able to determine whether addition or string concatenation will occur. Use the `&=` operator for concatenation to eliminate ambiguity and to provide self-documenting code.","leadings":["","> "],"nodes":[{"content":"When you use the `+=` operator, you might not be able to determine whether addition or string concatenation will occur. Use the `&=` operator for concatenation to eliminate ambiguity and to provide self-documenting code.","pos":[9,229],"nodes":[{"content":"When you use the <ph id=\"ph1\">`+=`</ph> operator, you might not be able to determine whether addition or string concatenation will occur.","pos":[0,119],"source":"When you use the `+=` operator, you might not be able to determine whether addition or string concatenation will occur."},{"content":"Use the <ph id=\"ph1\">`&amp;=`</ph> operator for concatenation to eliminate ambiguity and to provide self-documenting code.","pos":[120,220],"source":" Use the `&=` operator for concatenation to eliminate ambiguity and to provide self-documenting code."}]}]},{"content":"This assignment operator implicitly performs widening but not narrowing conversions if the compilation environment enforces strict semantics.","pos":[1795,1936]},{"content":"For more information on these conversions, see <bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.","pos":[1937,2129],"source":" For more information on these conversions, see [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)."},{"content":"For more information on strict and permissive semantics, see <bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>.","pos":[2130,2297],"source":" For more information on strict and permissive semantics, see [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)."},{"content":"If permissive semantics are allowed, the <ph id=\"ph1\">`+=`</ph> operator implicitly performs a variety of string and numeric conversions identical to those performed by the <ph id=\"ph2\">`+`</ph> operator.","pos":[2304,2472],"source":"If permissive semantics are allowed, the `+=` operator implicitly performs a variety of string and numeric conversions identical to those performed by the `+` operator."},{"content":"For details on these conversions, see <bpt id=\"p1\">[</bpt>+ Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/addition-operator.md)</ept>.","pos":[2473,2597],"source":" For details on these conversions, see [+ Operator](../../../visual-basic/language-reference/operators/addition-operator.md)."},{"pos":[2606,2617],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`+`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[2621,2779],"source":"The `+` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`+`</ph> operator affects the behavior of the <ph id=\"ph2\">`+=`</ph> operator.","pos":[2780,2851],"source":" Overloading the `+` operator affects the behavior of the `+=` operator."},{"content":"If your code uses <ph id=\"ph1\">`+=`</ph> on a class or structure that overloads <ph id=\"ph2\">`+`</ph>, be sure you understand its redefined behavior.","pos":[2852,2965],"source":" If your code uses `+=` on a class or structure that overloads `+`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[2966,3107],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[3116,3123],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`+=`</ph> operator to combine the value of one variable with another.","pos":[3127,3222],"source":"The following example uses the `+=` operator to combine the value of one variable with another."},{"content":"The first part uses <ph id=\"ph1\">`+=`</ph> with numeric variables to add one value to another.","pos":[3223,3299],"source":" The first part uses `+=` with numeric variables to add one value to another."},{"content":"The second part uses <ph id=\"ph1\">`+=`</ph> with <ph id=\"ph2\">`String`</ph> variables to concatenate one value with another.","pos":[3300,3388],"source":" The second part uses `+=` with `String` variables to concatenate one value with another."},{"content":"In both cases, the result is assigned to the first variable.","pos":[3389,3449]},{"pos":[3700,3768],"content":"The value of <ph id=\"ph1\">`num1`</ph> is now 13, and the value of <ph id=\"ph2\">`str1`</ph> is now \"103\".","source":"The value of `num1` is now 13, and the value of `str1` is now \"103\"."},{"pos":[3777,3785],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3789,3874],"content":"<bpt id=\"p1\">[</bpt>+ Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/addition-operator.md)</ept>","source":"[+ Operator](../../../visual-basic/language-reference/operators/addition-operator.md)"},{"pos":[3877,3975],"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept>","source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)"},{"pos":[3978,4076],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[4079,4183],"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operators.md)</ept>","source":"[Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md)"},{"pos":[4186,4298],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[4301,4425],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[4428,4513],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}