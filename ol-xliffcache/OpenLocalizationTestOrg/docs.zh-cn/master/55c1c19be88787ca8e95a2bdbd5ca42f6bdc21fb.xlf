<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55c1c19be88787ca8e95a2bdbd5ca42f6bdc21fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\absolute-delay.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9723d22ae2ffcc7ecb0c6872354f9f01c833d6ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29058537a424be2ab19ca8517f9b15a46aa4c777</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Absolute Delay | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Absolute Delay</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The main scenario for this sample is to delay until a specified <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> using durable timers in a workflow application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is different from using the built-in <ph id="ph1">&lt;xref:System.Activities.Statements.Delay&gt;</ph> activity as this will only allow you to delay for a given <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> (or number of minutes/seconds).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Some real-life scenarios in which you may want to make this distinction include the following:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You want to delay sending a mail for 30 seconds to make sure you didnâ€™t make any errors.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You are working overtime and want to delay all of your mails until normal business hours (such as 8 am).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Demonstrates</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Statements.DurableTimerExtension&gt;</ph> for implementing Absolute Delay</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Setting up persistence using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> for Durable Timers</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use of <ph id="ph1">&lt;xref:System.Activities.NativeActivity%601&gt;</ph> for using Extensibility points</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use of <ph id="ph1">&lt;xref:System.Activities.CodeActivity%601&gt;</ph> in the SendEmail activity</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>XAML-only workflow</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to create a custom activity which takes in a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> and uses durable timers to register the delay duration.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When using durable timers, you must use a <ph id="ph1">&lt;xref:System.Activities.NativeActivity&gt;</ph> to create a bookmark, as you will need to register this bookmark with the timer extension.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this sample, when the durable timer expires, the <ph id="ph1">`OnTimerExpired`</ph> method will be called.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Make sure that you are adding the timer extension in the <ph id="ph1">&lt;xref:System.Activities.NativeActivity%601.CacheMetadata%2A&gt;</ph> event to ensure you are providing the runtime with this information.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The only other implementation detail is that you will need to implement logic to convert from <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> to <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>, as durable timers only take in a <ph id="ph3">&lt;xref:System.DateTime&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Do note that there is a small lapse in accuracy by doing</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There is a small loss of accuracy by converting from <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> to <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This sample also demonstrates how to turn on persistence for a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For this particular sample, we will be using durable timers in which the workflow data will be unloaded into the persistence database during the idle time while waiting for timer to expire.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This implementation can also be used for other persistence actions.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This sample shows how to set up the persistence connection string with SQL Server, and how to create the instance store in order to persist the data for workflow instances.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Logic is provided on how to resume the workflow once an event is raised which makes the workflow instance runnable.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As you step through this sample, you will see the time in which the built-in delay begins and completes, which in turn will cause an e-mail message to be sent.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>From there, the AbsoluteDelay activity will halt until a specified <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> (or 0 seconds if the <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> has expired) which in turn will send out an email upon expiration.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This will show the two different use cases of the built-in <ph id="ph1">&lt;xref:System.Activities.Statements.Delay&gt;</ph> functionality versus using an AbsoluteDelay activity.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Ensure you have SQL Server Express (or higher) installed on your machine</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Run setup.cmd (from WF/Basic/Services/AbsoluteDelay/CS) in a <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph> command prompt to create the AbsoluteDelaySampleDB database, create the persistence schema and create the persistence logic.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Open the solution in <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Specify the Duration in the Delay activity.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Specify the ExpirationTime in the AbsoluteDelay activity.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Update the SendMailTo, SendMailFrom, SendMailSubject, SendMailBody, and SmtpHost fields in the SendMail activity.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you do not enter a valid SMTP host, the application will throw a SMTP exception.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Build the solution by selecting <bpt id="p1">**</bpt>Build<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Run the solution by pressing <bpt id="p1">**</bpt>F5<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>