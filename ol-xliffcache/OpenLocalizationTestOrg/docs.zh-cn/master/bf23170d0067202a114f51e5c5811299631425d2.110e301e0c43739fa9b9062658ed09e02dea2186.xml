{"content":"---\ntitle: \"Names of Type Members | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"events [.NET Framework], names\"\n  - \"methods [.NET Framework], names\"\n  - \"type members\"\n  - \"properties [.NET Framework], names\"\n  - \"fields, names\"\n  - \"field names\"\n  - \"names [.NET Framework], type members\"\n  - \"members [.NET Framework], type\"\nms.assetid: af5a0903-36af-4c2a-b848-cf959affeaa5\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Names of Type Members\nTypes are made of members: methods, properties, events, constructors, and fields. The following sections describe guidelines for naming type members.  \n  \n## Names of Methods  \n Because methods are the means of taking action, the design guidelines require that method names be verbs or verb phrases. Following this guideline also serves to distinguish method names from property and type names, which are noun or adjective phrases.  \n  \n **✓ DO** give methods names that are verbs or verb phrases.  \n  \n```  \npublic class String {  \n    public int CompareTo(...);  \n    public string[] Split(...);  \n    public string Trim();  \n}  \n  \n```  \n  \n## Names of Properties  \n Unlike other members, properties should be given noun phrase or adjective names. That is because a property refers to data, and the name of the property reflects that. PascalCasing is always used for property names.  \n  \n **✓ DO** name properties using a noun, noun phrase, or adjective.  \n  \n **X DO NOT** have properties that match the name of \"Get\" methods as in the following example:  \n  \n `public string TextWriter { get {...} set {...} }`   \n `public string GetTextWriter(int value) { ... }`  \n  \n This pattern typically indicates that the property should really be a method.  \n  \n **✓ DO** name collection properties with a plural phrase describing the items in the collection instead of using a singular phrase followed by \"List\" or \"Collection.\"  \n  \n **✓ DO** name Boolean properties with an affirmative phrase (`CanSeek` instead of `CantSeek`). Optionally, you can also prefix Boolean properties with \"Is,\" \"Can,\" or \"Has,\" but only where it adds value.  \n  \n **✓ CONSIDER** giving a property the same name as its type.  \n  \n For example, the following property correctly gets and sets an enum value named `Color`, so the property is named `Color`:  \n  \n```  \npublic enum Color {...}  \npublic class Control {  \n    public Color Color { get {...} set {...} }  \n}  \n```  \n  \n## Names of Events  \n Events always refer to some action, either one that is happening or one that has occurred. Therefore, as with methods, events are named with verbs, and verb tense is used to indicate the time when the event is raised.  \n  \n **✓ DO** name events with a verb or a verb phrase.  \n  \n Examples include `Clicked`, `Painting`, `DroppedDown`, and so on.  \n  \n **✓ DO** give events names with a concept of before and after, using the present and past tenses.  \n  \n For example, a close event that is raised before a window is closed would be called `Closing`, and one that is raised after the window is closed would be called `Closed`.  \n  \n **X DO NOT** use \"Before\" or \"After\" prefixes or postfixes to indicate pre- and post-events. Use present and past tenses as just described.  \n  \n **✓ DO** name event handlers (delegates used as types of events) with the \"EventHandler\" suffix, as shown in the following example:  \n  \n `public delegate void ClickedEventHandler(object sender, ClickedEventArgs e);`  \n  \n **✓ DO** use two parameters named `sender` and `e` in event handlers.  \n  \n The sender parameter represents the object that raised the event. The sender parameter is typically of type `object`, even if it is possible to employ a more specific type.  \n  \n **✓ DO** name event argument classes with the \"EventArgs\" suffix.  \n  \n## Names of Fields  \n The field-naming guidelines apply to static public and protected fields. Internal and private fields are not covered by guidelines, and public or protected instance fields are not allowed by the [member design guidelines](../../../docs/standard/design-guidelines/member.md).  \n  \n **✓ DO** use PascalCasing in field names.  \n  \n **✓ DO** name fields using a noun, noun phrase, or adjective.  \n  \n **X DO NOT** use a prefix for field names.  \n  \n For example, do not use \"g_\" or \"s_\" to indicate static fields.  \n  \n *Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*  \n  \n *Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*  \n  \n## See Also  \n [Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)   \n [Naming Guidelines](../../../docs/standard/design-guidelines/naming-guidelines.md)","nodes":[{"pos":[4,667],"nodes":[{"content":"Names of Type Members | Microsoft Docs","nodes":[{"pos":[0,38],"content":"Names of Type Members | Microsoft Docs","nodes":[{"content":"Names of Type Members | Microsoft Docs","pos":[0,38]}]}],"pos":[6,47],"yaml":true}],"content":"title: \"Names of Type Members | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"events [.NET Framework], names\"\n  - \"methods [.NET Framework], names\"\n  - \"type members\"\n  - \"properties [.NET Framework], names\"\n  - \"fields, names\"\n  - \"field names\"\n  - \"names [.NET Framework], type members\"\n  - \"members [.NET Framework], type\"\nms.assetid: af5a0903-36af-4c2a-b848-cf959affeaa5\ncaps.latest.revision: 10\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[674,695],"content":"Names of Type Members","linkify":"Names of Type Members","nodes":[{"content":"Names of Type Members","pos":[0,21]}]},{"content":"Types are made of members: methods, properties, events, constructors, and fields.","pos":[696,777]},{"content":"The following sections describe guidelines for naming type members.","pos":[778,845]},{"pos":[854,870],"content":"Names of Methods","linkify":"Names of Methods","nodes":[{"content":"Names of Methods","pos":[0,16]}]},{"content":"Because methods are the means of taking action, the design guidelines require that method names be verbs or verb phrases.","pos":[874,995]},{"content":"Following this guideline also serves to distinguish method names from property and type names, which are noun or adjective phrases.","pos":[996,1127]},{"pos":[1134,1193],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> give methods names that are verbs or verb phrases.","source":"**✓ DO** give methods names that are verbs or verb phrases."},{"pos":[1343,1362],"content":"Names of Properties","linkify":"Names of Properties","nodes":[{"content":"Names of Properties","pos":[0,19]}]},{"content":"Unlike other members, properties should be given noun phrase or adjective names.","pos":[1366,1446]},{"content":"That is because a property refers to data, and the name of the property reflects that.","pos":[1447,1533]},{"content":"PascalCasing is always used for property names.","pos":[1534,1581]},{"pos":[1588,1653],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name properties using a noun, noun phrase, or adjective.","source":"**✓ DO** name properties using a noun, noun phrase, or adjective."},{"pos":[1660,1754],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> have properties that match the name of \"Get\" methods as in the following example:","source":"**X DO NOT** have properties that match the name of \"Get\" methods as in the following example:"},{"content":"This pattern typically indicates that the property should really be a method.","pos":[1871,1948]},{"pos":[1955,2121],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name collection properties with a plural phrase describing the items in the collection instead of using a singular phrase followed by \"List\" or \"Collection.\"","source":"**✓ DO** name collection properties with a plural phrase describing the items in the collection instead of using a singular phrase followed by \"List\" or \"Collection.\""},{"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name Boolean properties with an affirmative phrase (<ph id=\"ph1\">`CanSeek`</ph> instead of <ph id=\"ph2\">`CantSeek`</ph>).","pos":[2128,2222],"source":"**✓ DO** name Boolean properties with an affirmative phrase (`CanSeek` instead of `CantSeek`)."},{"content":"Optionally, you can also prefix Boolean properties with \"Is,\" \"Can,\" or \"Has,\" but only where it adds value.","pos":[2223,2331]},{"pos":[2338,2397],"content":"<bpt id=\"p1\">**</bpt>✓ CONSIDER<ept id=\"p1\">**</ept> giving a property the same name as its type.","source":"**✓ CONSIDER** giving a property the same name as its type."},{"pos":[2404,2526],"content":"For example, the following property correctly gets and sets an enum value named <ph id=\"ph1\">`Color`</ph>, so the property is named <ph id=\"ph2\">`Color`</ph>:","source":"For example, the following property correctly gets and sets an enum value named `Color`, so the property is named `Color`:"},{"pos":[2654,2669],"content":"Names of Events","linkify":"Names of Events","nodes":[{"content":"Names of Events","pos":[0,15]}]},{"content":"Events always refer to some action, either one that is happening or one that has occurred.","pos":[2673,2763]},{"content":"Therefore, as with methods, events are named with verbs, and verb tense is used to indicate the time when the event is raised.","pos":[2764,2890]},{"pos":[2897,2947],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name events with a verb or a verb phrase.","source":"**✓ DO** name events with a verb or a verb phrase."},{"pos":[2954,3019],"content":"Examples include <ph id=\"ph1\">`Clicked`</ph>, <ph id=\"ph2\">`Painting`</ph>, <ph id=\"ph3\">`DroppedDown`</ph>, and so on.","source":"Examples include `Clicked`, `Painting`, `DroppedDown`, and so on."},{"pos":[3026,3123],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> give events names with a concept of before and after, using the present and past tenses.","source":"**✓ DO** give events names with a concept of before and after, using the present and past tenses."},{"pos":[3130,3300],"content":"For example, a close event that is raised before a window is closed would be called <ph id=\"ph1\">`Closing`</ph>, and one that is raised after the window is closed would be called <ph id=\"ph2\">`Closed`</ph>.","source":"For example, a close event that is raised before a window is closed would be called `Closing`, and one that is raised after the window is closed would be called `Closed`."},{"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> use \"Before\" or \"After\" prefixes or postfixes to indicate pre- and post-events.","pos":[3307,3399],"source":"**X DO NOT** use \"Before\" or \"After\" prefixes or postfixes to indicate pre- and post-events."},{"content":"Use present and past tenses as just described.","pos":[3400,3446]},{"pos":[3453,3584],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name event handlers (delegates used as types of events) with the \"EventHandler\" suffix, as shown in the following example:","source":"**✓ DO** name event handlers (delegates used as types of events) with the \"EventHandler\" suffix, as shown in the following example:"},{"pos":[3676,3745],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use two parameters named <ph id=\"ph1\">`sender`</ph> and <ph id=\"ph2\">`e`</ph> in event handlers.","source":"**✓ DO** use two parameters named `sender` and `e` in event handlers."},{"content":"The sender parameter represents the object that raised the event.","pos":[3752,3817]},{"content":"The sender parameter is typically of type <ph id=\"ph1\">`object`</ph>, even if it is possible to employ a more specific type.","pos":[3818,3924],"source":" The sender parameter is typically of type `object`, even if it is possible to employ a more specific type."},{"pos":[3931,3996],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name event argument classes with the \"EventArgs\" suffix.","source":"**✓ DO** name event argument classes with the \"EventArgs\" suffix."},{"pos":[4005,4020],"content":"Names of Fields","linkify":"Names of Fields","nodes":[{"content":"Names of Fields","pos":[0,15]}]},{"content":"The field-naming guidelines apply to static public and protected fields.","pos":[4024,4096]},{"content":"Internal and private fields are not covered by guidelines, and public or protected instance fields are not allowed by the <bpt id=\"p1\">[</bpt>member design guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/member.md)</ept>.","pos":[4097,4298],"source":" Internal and private fields are not covered by guidelines, and public or protected instance fields are not allowed by the [member design guidelines](../../../docs/standard/design-guidelines/member.md)."},{"pos":[4305,4346],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use PascalCasing in field names.","source":"**✓ DO** use PascalCasing in field names."},{"pos":[4353,4414],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name fields using a noun, noun phrase, or adjective.","source":"**✓ DO** name fields using a noun, noun phrase, or adjective."},{"pos":[4421,4463],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> use a prefix for field names.","source":"**X DO NOT** use a prefix for field names."},{"content":"For example, do not use \"g_\" or \"s_\" to indicate static fields.","pos":[4470,4533]},{"pos":[4540,4607],"content":"<bpt id=\"p1\">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id=\"p1\">*</ept>","source":"*Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*"},{"pos":[4614,5018],"content":"<bpt id=\"p1\">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id=\"p2\">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id=\"p2\">](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id=\"p1\">*</ept>","source":"*Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*"},{"pos":[5027,5035],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Framework Design Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5039,5120],"source":"[Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Naming Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/naming-guidelines.md)</ept>","pos":[5124,5206],"source":"[Naming Guidelines](../../../docs/standard/design-guidelines/naming-guidelines.md)"}]}