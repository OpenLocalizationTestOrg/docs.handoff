{"content":"---\ntitle: \"const (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"const_CSharpKeyword\"\n  - \"const\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"const keyword [C#]\"\nms.assetid: 79eb447c-117b-4418-933f-97c50aa472db\ncaps.latest.revision: 28\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# const (C# Reference)\nYou use the `const` keyword to declare a constant field or a constant local. Constant fields and locals aren't variables and may not be modified. Constants can be numbers, Boolean values, strings, or a null reference. Don’t create a constant to represent information that you expect to change at any time. For example, don’t use a constant field to store the price of a service, a product version number, or the brand name of a company. These values can change over time, and because compilers propagate constants, other code compiled with your libraries will have to be recompiled to see the changes. See also the [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword. For example:  \n  \n```  \n  \n      const int x = 0;  \npublic const double gravitationalConstant = 6.673e-11;  \nprivate const string productName = \"Visual C#\";  \n```  \n  \n## Remarks  \n The type of a constant declaration specifies the type of the members that the declaration introduces. The initializer of a constant local or a constant field must be a constant expression that can be implicitly converted to the target type.  \n  \n A constant expression is an expression that can be fully evaluated at compile time. Therefore, the only possible values for constants of reference types are `string` and a null reference.  \n  \n The constant declaration can declare multiple constants, such as:  \n  \n```  \npublic const double x = 1.0, y = 2.0, z = 3.0;  \n```  \n  \n The `static` modifier is not allowed in a constant declaration.  \n  \n A constant can participate in a constant expression, as follows:  \n  \n```  \npublic const int c1 = 5;  \npublic const int c2 = c1 + 100;  \n```  \n  \n> [!NOTE]\n>  The [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword differs from the `const` keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be initialized either at the declaration or in a constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, although a `const` field is a compile-time constant, the `readonly` field can be used for run-time constants, as in this line: `public static readonly uint l1 = (uint)DateTime.Now.Ticks;`  \n  \n## Example  \n [!code-cs[csrefKeywordsModifiers#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/const_1.cs)]  \n  \n## Example  \n This example demonstrates how to use constants as local variables.  \n  \n [!code-cs[csrefKeywordsModifiers#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/const_2.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Modifiers](../../../csharp/language-reference/keywords/modifiers.md)   \n [readonly](../../../csharp/language-reference/keywords/readonly.md)","nodes":[{"pos":[4,564],"nodes":[{"content":"const (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,37],"content":"const (C# Reference) | Microsoft Docs","nodes":[{"content":"const (C# Reference) | Microsoft Docs","pos":[0,37]}]}],"pos":[6,46],"yaml":true}],"content":"title: \"const (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"const_CSharpKeyword\"\n  - \"const\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"const keyword [C#]\"\nms.assetid: 79eb447c-117b-4418-933f-97c50aa472db\ncaps.latest.revision: 28\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[571,591],"content":"const (C# Reference)","linkify":"const (C# Reference)","nodes":[{"content":"const (C# Reference)","pos":[0,20]}]},{"content":"You use the <ph id=\"ph1\">`const`</ph> keyword to declare a constant field or a constant local.","pos":[592,668],"source":"You use the `const` keyword to declare a constant field or a constant local."},{"content":"Constant fields and locals aren't variables and may not be modified.","pos":[669,737]},{"content":"Constants can be numbers, Boolean values, strings, or a null reference.","pos":[738,809]},{"content":"Don’t create a constant to represent information that you expect to change at any time.","pos":[810,897]},{"content":"For example, don’t use a constant field to store the price of a service, a product version number, or the brand name of a company.","pos":[898,1028]},{"content":"These values can change over time, and because compilers propagate constants, other code compiled with your libraries will have to be recompiled to see the changes.","pos":[1029,1193]},{"content":"See also the <bpt id=\"p1\">[</bpt>readonly<ept id=\"p1\">](../../../csharp/language-reference/keywords/readonly.md)</ept> keyword.","pos":[1194,1283],"source":" See also the [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword."},{"content":"For example:","pos":[1284,1296]},{"pos":[1455,1462],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type of a constant declaration specifies the type of the members that the declaration introduces.","pos":[1466,1567]},{"content":"The initializer of a constant local or a constant field must be a constant expression that can be implicitly converted to the target type.","pos":[1568,1706]},{"content":"A constant expression is an expression that can be fully evaluated at compile time.","pos":[1713,1796]},{"content":"Therefore, the only possible values for constants of reference types are <ph id=\"ph1\">`string`</ph> and a null reference.","pos":[1797,1900],"source":" Therefore, the only possible values for constants of reference types are `string` and a null reference."},{"content":"The constant declaration can declare multiple constants, such as:","pos":[1907,1972]},{"pos":[2043,2106],"content":"The <ph id=\"ph1\">`static`</ph> modifier is not allowed in a constant declaration.","source":"The `static` modifier is not allowed in a constant declaration."},{"content":"A constant can participate in a constant expression, as follows:","pos":[2113,2177]},{"pos":[2261,2827],"content":"[!NOTE]\n The [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword differs from the `const` keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be initialized either at the declaration or in a constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, although a `const` field is a compile-time constant, the `readonly` field can be used for run-time constants, as in this line: `public static readonly uint l1 = (uint)DateTime.Now.Ticks;`","leadings":["","> "],"nodes":[{"content":"The [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword differs from the `const` keyword. A `const` field can only be initialized at the declaration of the field. A `readonly` field can be initialized either at the declaration or in a constructor. Therefore, `readonly` fields can have different values depending on the constructor used. Also, although a `const` field is a compile-time constant, the `readonly` field can be used for run-time constants, as in this line: `public static readonly uint l1 = (uint)DateTime.Now.Ticks;`","pos":[9,564],"nodes":[{"content":"The <bpt id=\"p1\">[</bpt>readonly<ept id=\"p1\">](../../../csharp/language-reference/keywords/readonly.md)</ept> keyword differs from the <ph id=\"ph1\">`const`</ph> keyword.","pos":[0,113],"source":"The [readonly](../../../csharp/language-reference/keywords/readonly.md) keyword differs from the `const` keyword."},{"content":"A <ph id=\"ph1\">`const`</ph> field can only be initialized at the declaration of the field.","pos":[114,186],"source":" A `const` field can only be initialized at the declaration of the field."},{"content":"A <ph id=\"ph1\">`readonly`</ph> field can be initialized either at the declaration or in a constructor.","pos":[187,271],"source":" A `readonly` field can be initialized either at the declaration or in a constructor."},{"content":"Therefore, <ph id=\"ph1\">`readonly`</ph> fields can have different values depending on the constructor used.","pos":[272,361],"source":" Therefore, `readonly` fields can have different values depending on the constructor used."},{"content":"Also, although a <ph id=\"ph1\">`const`</ph> field is a compile-time constant, the <ph id=\"ph2\">`readonly`</ph> field can be used for run-time constants, as in this line: <ph id=\"ph3\">`public static readonly uint l1 = (uint)DateTime.Now.Ticks;`</ph>","pos":[362,555],"source":" Also, although a `const` field is a compile-time constant, the `readonly` field can be used for run-time constants, as in this line: `public static readonly uint l1 = (uint)DateTime.Now.Ticks;`"}]}]},{"pos":[2836,2843],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2847,2958],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsModifiers#5<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/const_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsModifiers#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/const_1.cs)]"},{"pos":[2967,2974],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example demonstrates how to use constants as local variables.","pos":[2978,3044]},{"pos":[3051,3162],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsModifiers#6<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/const_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsModifiers#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/const_2.cs)]"},{"pos":[3171,3196],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3310,3318],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3322,3382],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3386,3453],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3457,3525],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/modifiers.md)</ept><ph id=\"ph1\"> </ph>","pos":[3529,3599],"source":"[Modifiers](../../../csharp/language-reference/keywords/modifiers.md) "},{"content":"<bpt id=\"p1\">[</bpt>readonly<ept id=\"p1\">](../../../csharp/language-reference/keywords/readonly.md)</ept>","pos":[3603,3670],"source":"[readonly](../../../csharp/language-reference/keywords/readonly.md)"}]}