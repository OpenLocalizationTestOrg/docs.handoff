{"content":"---\ntitle: \"AttributeUsage (C#)\"\nms.date: 04/25/2018\n---\n# AttributeUsage (C#)\n\nDetermines how a custom attribute class can be used. <xref:System.AttributeUsageAttribute> is an attribute you apply to custom attribute definitions. The `AttributeUsage` attribute enables you to control:\n\n- Which program elements attribute may be applied to. Unless you restrict its usage, an attribute may be applied to any of the following program elements:\n  - assembly\n  - module\n  - field\n  - event\n  - method\n  - param\n  - property\n  - return\n  - type\n- Whether an attribute can be applied to a single program element multiple times.\n- Whether attributes are inherited by derived classes.\n\nThe default settings look like the following example when applied explicitly:\n\n[!code-csharp[Define a new attribute](../../../../../samples/snippets/csharp/attributes/NewAttribute.cs#1)]\n\nIn this example, the `NewAttribute` class can be applied to any supported program element. But it can be applied only once to each entity. The attribute is inherited by derived classes when applied to a base class.\n\nThe <xref:System.AttributeUsageAttribute.AllowMultiple> and <xref:System.AttributeUsageAttribute.Inherited> arguments are optional, so the following code has the same effect:\n\n[!code-csharp[Omit optional attributes](../../../../../samples/snippets/csharp/attributes/NewAttribute.cs#2)]\n\nThe first <xref:System.AttributeUsageAttribute> argument must be one or more elements of the <xref:System.AttributeTargets> enumeration. Multiple target types can be linked together with the OR operator, like the following example shows:\n\n[!code-csharp[Create an attribute for fields or properties](../../../../../samples/snippets/csharp/attributes/NewPropertyOrFieldAttribute.cs#1)]\n\nBeginning in C# 7.3, attributes can be applied to either the property or the backing field for an auto-implemented property. The attribute applies to the property, unless you specify the `field` specifier on the attribute. Both are shown in the following example:\n\n[!code-csharp[Create an attribute for fields or properties](../../../../../samples/snippets/csharp/attributes/NewPropertyOrFieldAttribute.cs#2)]\n\nIf the <xref:System.AttributeUsageAttribute.AllowMultiple> argument is `true`, then the resulting attribute can be applied more than once to a single entity, as shown in the following example:\n\n[!code-csharp[Create and use an attribute that can be applied multiple times](../../../../../samples/snippets/csharp/attributes/MultiUseAttribute.cs#1)]\n\nIn this case, `MultiUseAttribute` can be applied repeatedly because `AllowMultiple` is set to `true`. Both formats shown for applying multiple attributes are valid.\n\nIf <xref:System.AttributeUsageAttribute.Inherited> is `false`, then the attribute isn't inherited by classes derived from an attributed class. For example:\n\n[!code-csharp[Create and use an attribute that can be applied multiple times](../../../../../samples/snippets/csharp/attributes/NonInheritedAttribute.cs#1)]\n\nIn this case `NonInheritedAttribute` isn't applied to `DClass` via inheritance.\n\n## Remarks\n\nThe `AttributeUsage` attribute is a single-use attribute--it can't be applied more than once to the same class. `AttributeUsage` is an alias for <xref:System.AttributeUsageAttribute>.\n\nFor more information, see [Accessing Attributes by Using Reflection (C#)](accessing-attributes-by-using-reflection.md).\n\n## Example\n\nThe following example demonstrates the effect of the <xref:System.AttributeUsageAttribute.Inherited> and <xref:System.AttributeUsageAttribute.AllowMultiple> arguments to the <xref:System.AttributeUsageAttribute> attribute, and how the custom attributes applied to a class can be enumerated.\n\n[!code-csharp[Applying and querying attributes](../../../../../samples/snippets/csharp/attributes/Program.cs#1)]\n\n## Sample Output\n\n```text\nAttributes on Base Class:\nFirstAttribute\nSecondAttribute\nAttributes on Derived Class:\nThirdAttribute\nThirdAttribute\nSecondAttribute\n```\n\n## See also\n\n- <xref:System.Attribute>\n- <xref:System.Reflection>\n- [C# Programming Guide](../..//index.md)\n- [Attributes](../../../..//standard/attributes/index.md)\n- [Reflection (C#)](../reflection.md)\n- [Attributes](index.md)\n- [Creating Custom Attributes (C#)](creating-custom-attributes.md)\n- [Accessing Attributes by Using Reflection (C#)](accessing-attributes-by-using-reflection.md)\n","nodes":[{"pos":[4,52],"embed":true,"restype":"x-metadata","content":"title: \"AttributeUsage (C#)\"\nms.date: 04/25/2018","nodes":[{"content":"AttributeUsage (C#)","nodes":[{"pos":[0,19],"content":"AttributeUsage (C#)","nodes":[{"content":"AttributeUsage (C#)","pos":[0,19]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[59,78],"content":"AttributeUsage (C#)","linkify":"AttributeUsage (C#)","nodes":[{"content":"AttributeUsage (C#)","pos":[0,19]}]},{"content":"Determines how a custom attribute class can be used.","pos":[80,132]},{"content":"<ph id=\"ph1\">&lt;xref:System.AttributeUsageAttribute&gt;</ph> is an attribute you apply to custom attribute definitions.","pos":[133,229],"source":"<xref:System.AttributeUsageAttribute> is an attribute you apply to custom attribute definitions."},{"content":"The <ph id=\"ph1\">`AttributeUsage`</ph> attribute enables you to control:","pos":[230,284],"source":" The `AttributeUsage` attribute enables you to control:"},{"content":"Which program elements attribute may be applied to.","pos":[288,339]},{"content":"Unless you restrict its usage, an attribute may be applied to any of the following program elements:","pos":[340,440]},{"content":"assembly","pos":[445,453]},{"content":"module","pos":[458,464]},{"content":"field","pos":[469,474]},{"content":"event","pos":[479,484]},{"content":"method","pos":[489,495]},{"content":"param","pos":[500,505]},{"content":"property","pos":[510,518]},{"content":"return","pos":[523,529]},{"content":"type","pos":[534,538]},{"content":"Whether an attribute can be applied to a single program element multiple times.","pos":[541,620]},{"content":"Whether attributes are inherited by derived classes.","pos":[623,675]},{"content":"The default settings look like the following example when applied explicitly:","pos":[677,754]},{"content":"In this example, the <ph id=\"ph1\">`NewAttribute`</ph> class can be applied to any supported program element.","pos":[865,955],"source":"In this example, the `NewAttribute` class can be applied to any supported program element."},{"content":"But it can be applied only once to each entity.","pos":[956,1003]},{"content":"The attribute is inherited by derived classes when applied to a base class.","pos":[1004,1079]},{"pos":[1081,1255],"content":"The <ph id=\"ph1\">&lt;xref:System.AttributeUsageAttribute.AllowMultiple&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AttributeUsageAttribute.Inherited&gt;</ph> arguments are optional, so the following code has the same effect:","source":"The <xref:System.AttributeUsageAttribute.AllowMultiple> and <xref:System.AttributeUsageAttribute.Inherited> arguments are optional, so the following code has the same effect:"},{"content":"The first <ph id=\"ph1\">&lt;xref:System.AttributeUsageAttribute&gt;</ph> argument must be one or more elements of the <ph id=\"ph2\">&lt;xref:System.AttributeTargets&gt;</ph> enumeration.","pos":[1368,1504],"source":"The first <xref:System.AttributeUsageAttribute> argument must be one or more elements of the <xref:System.AttributeTargets> enumeration."},{"content":"Multiple target types can be linked together with the OR operator, like the following example shows:","pos":[1505,1605]},{"content":"Beginning in C# 7.3, attributes can be applied to either the property or the backing field for an auto-implemented property.","pos":[1753,1877]},{"content":"The attribute applies to the property, unless you specify the <ph id=\"ph1\">`field`</ph> specifier on the attribute.","pos":[1878,1975],"source":" The attribute applies to the property, unless you specify the `field` specifier on the attribute."},{"content":"Both are shown in the following example:","pos":[1976,2016]},{"pos":[2164,2356],"content":"If the <ph id=\"ph1\">&lt;xref:System.AttributeUsageAttribute.AllowMultiple&gt;</ph> argument is <ph id=\"ph2\">`true`</ph>, then the resulting attribute can be applied more than once to a single entity, as shown in the following example:","source":"If the <xref:System.AttributeUsageAttribute.AllowMultiple> argument is `true`, then the resulting attribute can be applied more than once to a single entity, as shown in the following example:"},{"content":"In this case, <ph id=\"ph1\">`MultiUseAttribute`</ph> can be applied repeatedly because <ph id=\"ph2\">`AllowMultiple`</ph> is set to <ph id=\"ph3\">`true`</ph>.","pos":[2512,2613],"source":"In this case, `MultiUseAttribute` can be applied repeatedly because `AllowMultiple` is set to `true`."},{"content":"Both formats shown for applying multiple attributes are valid.","pos":[2614,2676]},{"content":"If <ph id=\"ph1\">&lt;xref:System.AttributeUsageAttribute.Inherited&gt;</ph> is <ph id=\"ph2\">`false`</ph>, then the attribute isn't inherited by classes derived from an attributed class.","pos":[2678,2820],"source":"If <xref:System.AttributeUsageAttribute.Inherited> is `false`, then the attribute isn't inherited by classes derived from an attributed class."},{"content":"For example:","pos":[2821,2833]},{"pos":[2993,3072],"content":"In this case <ph id=\"ph1\">`NonInheritedAttribute`</ph> isn't applied to <ph id=\"ph2\">`DClass`</ph> via inheritance.","source":"In this case `NonInheritedAttribute` isn't applied to `DClass` via inheritance."},{"pos":[3077,3084],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`AttributeUsage`</ph> attribute is a single-use attribute--it can't be applied more than once to the same class.","pos":[3086,3197],"source":"The `AttributeUsage` attribute is a single-use attribute--it can't be applied more than once to the same class."},{"content":"<ph id=\"ph1\">`AttributeUsage`</ph> is an alias for <ph id=\"ph2\">&lt;xref:System.AttributeUsageAttribute&gt;</ph>.","pos":[3198,3269],"source":"`AttributeUsage` is an alias for <xref:System.AttributeUsageAttribute>."},{"pos":[3271,3390],"content":"For more information, see <bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id=\"p1\">](accessing-attributes-by-using-reflection.md)</ept>.","source":"For more information, see [Accessing Attributes by Using Reflection (C#)](accessing-attributes-by-using-reflection.md)."},{"pos":[3395,3402],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3404,3694],"content":"The following example demonstrates the effect of the <ph id=\"ph1\">&lt;xref:System.AttributeUsageAttribute.Inherited&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AttributeUsageAttribute.AllowMultiple&gt;</ph> arguments to the <ph id=\"ph3\">&lt;xref:System.AttributeUsageAttribute&gt;</ph> attribute, and how the custom attributes applied to a class can be enumerated.","source":"The following example demonstrates the effect of the <xref:System.AttributeUsageAttribute.Inherited> and <xref:System.AttributeUsageAttribute.AllowMultiple> arguments to the <xref:System.AttributeUsageAttribute> attribute, and how the custom attributes applied to a class can be enumerated."},{"pos":[3813,3826],"content":"Sample Output","linkify":"Sample Output","nodes":[{"content":"Sample Output","pos":[0,13]}]},{"pos":[3976,3984],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4041,4080],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../..//index.md)</ept>","source":"[C# Programming Guide](../..//index.md)"},{"pos":[4083,4138],"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](../../../..//standard/attributes/index.md)</ept>","source":"[Attributes](../../../..//standard/attributes/index.md)"},{"pos":[4141,4176],"content":"<bpt id=\"p1\">[</bpt>Reflection (C#)<ept id=\"p1\">](../reflection.md)</ept>","source":"[Reflection (C#)](../reflection.md)"},{"pos":[4179,4201],"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](index.md)</ept>","source":"[Attributes](index.md)"},{"pos":[4204,4268],"content":"<bpt id=\"p1\">[</bpt>Creating Custom Attributes (C#)<ept id=\"p1\">](creating-custom-attributes.md)</ept>","source":"[Creating Custom Attributes (C#)](creating-custom-attributes.md)"},{"pos":[4271,4363],"content":"<bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id=\"p1\">](accessing-attributes-by-using-reflection.md)</ept>","source":"[Accessing Attributes by Using Reflection (C#)](accessing-attributes-by-using-reflection.md)"}]}