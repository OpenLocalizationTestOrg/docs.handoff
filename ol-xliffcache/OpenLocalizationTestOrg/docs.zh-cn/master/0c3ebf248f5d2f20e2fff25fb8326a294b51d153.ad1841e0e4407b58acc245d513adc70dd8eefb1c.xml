{"content":"---\ntitle: \"How to: Create a C-C++ Union by Using Attributes (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 9352a7e4-c0da-4d07-aa14-55ed43736fcb\n---\n# How to: Create a C/C++ Union by Using Attributes (Visual Basic)\nBy using attributes you can customize how structs are laid out in memory. For example, you can create what is known as a union in C/C++ by using the `StructLayout(LayoutKind.Explicit)` and `FieldOffset` attributes.  \n  \n## Example  \n In this code segment, all of the fields of `TestUnion` start at the same location in memory.  \n  \n```vb  \n' Add an Imports statement for System.Runtime.InteropServices.  \n  \n<System.Runtime.InteropServices.StructLayout(   \n      System.Runtime.InteropServices.LayoutKind.Explicit)>   \nStructure TestUnion  \n    <System.Runtime.InteropServices.FieldOffset(0)>   \n    Public i As Integer  \n  \n    <System.Runtime.InteropServices.FieldOffset(0)>   \n    Public d As Double  \n  \n    <System.Runtime.InteropServices.FieldOffset(0)>   \n    Public c As Char  \n  \n    <System.Runtime.InteropServices.FieldOffset(0)>   \n    Public b As Byte  \nEnd Structure  \n```  \n  \n## Example  \n The following is another example where fields start at different explicitly set locations.  \n  \n```vb  \n' Add an Imports statement for System.Runtime.InteropServices.  \n  \n <System.Runtime.InteropServices.StructLayout(  \n      System.Runtime.InteropServices.LayoutKind.Explicit)>   \nStructure TestExplicit  \n     <System.Runtime.InteropServices.FieldOffset(0)>   \n     Public lg As Long  \n  \n     <System.Runtime.InteropServices.FieldOffset(0)>   \n     Public i1 As Integer  \n  \n     <System.Runtime.InteropServices.FieldOffset(4)>   \n     Public i2 As Integer  \n  \n     <System.Runtime.InteropServices.FieldOffset(8)>   \n     Public d As Double  \n  \n     <System.Runtime.InteropServices.FieldOffset(12)>   \n     Public c As Char  \n  \n     <System.Runtime.InteropServices.FieldOffset(14)>   \n     Public b As Byte  \n End Structure  \n```  \n  \n The two integer fields, `i1` and `i2`, share the same memory locations as `lg`. This sort of control over struct layout is useful when using platform invocation.  \n  \n## See also\n\n- <xref:System.Reflection>\n- <xref:System.Attribute>\n- [Visual Basic Programming Guide](../../../../visual-basic/programming-guide/index.md)\n- [Attributes](../../../../standard/attributes/index.md)\n- [Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/reflection.md)\n- [Attributes (Visual Basic)](../../../../visual-basic/language-reference/attributes.md)\n- [Creating Custom Attributes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)\n- [Accessing Attributes by Using Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)\n","nodes":[{"pos":[4,145],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create a C-C++ Union by Using Attributes (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 9352a7e4-c0da-4d07-aa14-55ed43736fcb","nodes":[{"content":"How to: Create a C-C++ Union by Using Attributes (Visual Basic)","nodes":[{"pos":[0,63],"content":"How to: Create a C-C++ Union by Using Attributes (Visual Basic)","nodes":[{"content":"How to: Create a C-C++ Union by Using Attributes (Visual Basic)","pos":[0,63]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[152,215],"content":"How to: Create a C/C++ Union by Using Attributes (Visual Basic)","linkify":"How to: Create a C/C++ Union by Using Attributes (Visual Basic)","nodes":[{"content":"How to: Create a C/C++ Union by Using Attributes (Visual Basic)","pos":[0,63]}]},{"content":"By using attributes you can customize how structs are laid out in memory.","pos":[216,289]},{"content":"For example, you can create what is known as a union in C/C++ by using the <ph id=\"ph1\">`StructLayout(LayoutKind.Explicit)`</ph> and <ph id=\"ph2\">`FieldOffset`</ph> attributes.","pos":[290,430],"source":" For example, you can create what is known as a union in C/C++ by using the `StructLayout(LayoutKind.Explicit)` and `FieldOffset` attributes."},{"pos":[439,446],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[450,542],"content":"In this code segment, all of the fields of <ph id=\"ph1\">`TestUnion`</ph> start at the same location in memory.","source":"In this code segment, all of the fields of `TestUnion` start at the same location in memory."},{"pos":[1111,1118],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following is another example where fields start at different explicitly set locations.","pos":[1122,1212]},{"content":"The two integer fields, <ph id=\"ph1\">`i1`</ph> and <ph id=\"ph2\">`i2`</ph>, share the same memory locations as <ph id=\"ph3\">`lg`</ph>.","pos":[1965,2044],"source":"The two integer fields, `i1` and `i2`, share the same memory locations as `lg`."},{"content":"This sort of control over struct layout is useful when using platform invocation.","pos":[2045,2126]},{"pos":[2135,2143],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2200,2285],"content":"<bpt id=\"p1\">[</bpt>Visual Basic Programming Guide<ept id=\"p1\">](../../../../visual-basic/programming-guide/index.md)</ept>","source":"[Visual Basic Programming Guide](../../../../visual-basic/programming-guide/index.md)"},{"pos":[2288,2342],"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](../../../../standard/attributes/index.md)</ept>","source":"[Attributes](../../../../standard/attributes/index.md)"},{"pos":[2345,2439],"content":"<bpt id=\"p1\">[</bpt>Reflection (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/reflection.md)</ept>","source":"[Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/reflection.md)"},{"pos":[2442,2528],"content":"<bpt id=\"p1\">[</bpt>Attributes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/language-reference/attributes.md)</ept>","source":"[Attributes (Visual Basic)](../../../../visual-basic/language-reference/attributes.md)"},{"pos":[2531,2668],"content":"<bpt id=\"p1\">[</bpt>Creating Custom Attributes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)</ept>","source":"[Creating Custom Attributes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)"},{"pos":[2671,2836],"content":"<bpt id=\"p1\">[</bpt>Accessing Attributes by Using Reflection (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept>","source":"[Accessing Attributes by Using Reflection (Visual Basic)](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)"}]}