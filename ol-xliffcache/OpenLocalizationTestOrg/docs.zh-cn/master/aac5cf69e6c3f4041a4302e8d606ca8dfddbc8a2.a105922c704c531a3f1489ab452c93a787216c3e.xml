{"content":"---\ntitle: \"Projection Operations (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: b8d38e6d-21cf-4619-8dbb-94476f4badc7\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Projection Operations (Visual Basic)\nProjection refers to the operation of transforming an object into a new form that often consists only of those properties that will be subsequently used. By using projection, you can construct a new type that is built from each object. You can project a property and perform a mathematical function on it. You can also project the original object without changing it.  \n  \n The standard query operator methods that perform projection are listed in the following section.  \n  \n## Methods  \n  \n|Method Name|Description|Visual Basic Query Expression Syntax|More Information|  \n|-----------------|-----------------|------------------------------------------|----------------------|  \n|Select|Projects values that are based on a transform function.|`Select`|<xref:System.Linq.Enumerable.Select%2A?displayProperty=fullName><br /><br /> <xref:System.Linq.Queryable.Select%2A?displayProperty=fullName>|  \n|SelectMany|Projects sequences of values that are based on a transform function and then flattens them into one sequence.|Use multiple `From` clauses|<xref:System.Linq.Enumerable.SelectMany%2A?displayProperty=fullName><br /><br /> <xref:System.Linq.Queryable.SelectMany%2A?displayProperty=fullName>|  \n  \n## Query Expression Syntax Examples  \n  \n### Select  \n The following example uses the `Select` clause to project the first letter from each string in a list of strings.  \n  \n```vb  \nDim words = New List(Of String) From {\"an\", \"apple\", \"a\", \"day\"}  \n  \nDim query = From word In words   \n            Select word.Substring(0, 1)  \n  \nDim sb As New System.Text.StringBuilder()  \nFor Each letter As String In query  \n    sb.AppendLine(letter)  \nNext  \n  \n' Display the output.  \nMsgBox(sb.ToString())  \n  \n' This code produces the following output:  \n  \n' a  \n' a  \n' a  \n' d  \n```  \n  \n### SelectMany  \n The following example uses multiple `From` clauses to project each word from each string in a list of strings.  \n  \n```vb  \nDim phrases = New List(Of String) From {\"an apple a day\", \"the quick brown fox\"}  \n  \nDim query = From phrase In phrases   \n            From word In phrase.Split(\" \"c)   \n            Select word  \n  \nDim sb As New System.Text.StringBuilder()  \nFor Each str As String In query  \n    sb.AppendLine(str)  \nNext  \n  \n' Display the output.  \nMsgBox(sb.ToString())  \n  \n' This code produces the following output:  \n  \n' an  \n' apple  \n' a  \n' day  \n' the  \n' quick  \n' brown  \n' fox  \n```  \n  \n## Select versus SelectMany  \n The work of both `Select()` and `SelectMany()` is to produce a result value (or values) from source values. `Select()` produces one result value for every source value. The overall result is therefore a collection that has the same number of elements as the source collection. In contrast, `SelectMany()` produces a single overall result that contains concatenated sub-collections from each source value. The transform function that is passed as an argument to `SelectMany()` must return an enumerable sequence of values for each source value. These enumerable sequences are then concatenated by `SelectMany()` to create one large sequence.  \n  \n The following two illustrations show the conceptual difference between the actions of these two methods. In each case, assume that the selector (transform) function selects the array of flowers from each source value.  \n  \n This illustration depicts how `Select()` returns a collection that has the same number of elements as the source collection.  \n  \n ![Conceptual illustration of the action of Select&#40;&#41;](../../../../csharp/programming-guide/concepts/linq/media/selectaction.png \"SelectAction\")  \n  \n This illustration depicts how `SelectMany()` concatenates the intermediate sequence of arrays into one final result value that contains each value from each intermediate array.  \n  \n ![Graphic showing the action of SelectMany&#40;&#41;.](../../../../csharp/programming-guide/concepts/linq/media/selectmany.png \"SelectMany\")  \n  \n### Code Example  \n The following example compares the behavior of `Select()` and `SelectMany()`. The code creates a \"bouquet\" of flowers by taking the first two items from each list of flower names in the source collection. In this example, the \"single value\" that the transform function <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> uses is itself a collection of values. This requires the extra `For Each` loop in order to enumerate each string in each sub-sequence.  \n  \n```vb  \nClass Bouquet  \n    Public Flowers As List(Of String)  \nEnd Class  \n  \nSub SelectVsSelectMany()  \n    Dim bouquets = New List(Of Bouquet) From {   \n        New Bouquet With {.Flowers = New List(Of String)(New String() {\"sunflower\", \"daisy\", \"daffodil\", \"larkspur\"})},   \n        New Bouquet With {.Flowers = New List(Of String)(New String() {\"tulip\", \"rose\", \"orchid\"})},   \n        New Bouquet With {.Flowers = New List(Of String)(New String() {\"gladiolis\", \"lily\", \"snapdragon\", \"aster\", \"protea\"})},   \n        New Bouquet With {.Flowers = New List(Of String)(New String() {\"larkspur\", \"lilac\", \"iris\", \"dahlia\"})}}  \n  \n    Dim output As New System.Text.StringBuilder  \n  \n    ' Select()  \n    Dim query1 = bouquets.Select(Function(b) b.Flowers)  \n  \n    output.AppendLine(\"Using Select():\")  \n    For Each flowerList In query1  \n        For Each str As String In flowerList  \n            output.AppendLine(str)  \n        Next  \n    Next  \n  \n    ' SelectMany()  \n    Dim query2 = bouquets.SelectMany(Function(b) b.Flowers)  \n  \n    output.AppendLine(vbCrLf & \"Using SelectMany():\")  \n    For Each str As String In query2  \n        output.AppendLine(str)  \n    Next  \n  \n    ' Display the output  \n    MsgBox(output.ToString())  \n  \n    ' This code produces the following output:  \n    '  \n    ' Using Select():  \n    ' sunflower  \n    ' daisy  \n    ' daffodil  \n    ' larkspur  \n    ' tulip  \n    ' rose  \n    ' orchid  \n    ' gladiolis  \n    ' lily  \n    ' snapdragon  \n    ' aster  \n    ' protea  \n    ' larkspur  \n    ' lilac  \n    ' iris  \n    ' dahlia  \n  \n    ' Using SelectMany()  \n    ' sunflower  \n    ' daisy  \n    ' daffodil  \n    ' larkspur  \n    ' tulip  \n    ' rose  \n    ' orchid  \n    ' gladiolis  \n    ' lily  \n    ' snapdragon  \n    ' aster  \n    ' protea  \n    ' larkspur  \n    ' lilac  \n    ' iris  \n    ' dahlia  \n  \nEnd Sub  \n```  \n  \n## See Also  \n <xref:System.Linq>   \n [Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)   \n [Select Clause](../../../../visual-basic/language-reference/queries/select-clause.md)   \n [How to: Combine Data with Joins](../../../../visual-basic/programming-guide/language-features/linq/how-to-combine-data-with-linq-by-using-joins.md)   \n [How to: Populate Object Collections from Multiple Sources (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)   \n [How to: Return a LINQ Query Result as a Specific Type](../../../../visual-basic/programming-guide/language-features/linq/how-to-return-a-linq-query-result-as-a-specific-type.md)   \n [How to: Split a File Into Many Files by Using Groups (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md)","nodes":[{"pos":[4,439],"nodes":[{"content":"Projection Operations (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,53],"content":"Projection Operations (Visual Basic) | Microsoft Docs","nodes":[{"content":"Projection Operations (Visual Basic) | Microsoft Docs","pos":[0,53]}]}],"pos":[6,62],"yaml":true}],"content":"title: \"Projection Operations (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: b8d38e6d-21cf-4619-8dbb-94476f4badc7\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[446,482],"content":"Projection Operations (Visual Basic)","linkify":"Projection Operations (Visual Basic)","nodes":[{"content":"Projection Operations (Visual Basic)","pos":[0,36]}]},{"content":"Projection refers to the operation of transforming an object into a new form that often consists only of those properties that will be subsequently used.","pos":[483,636]},{"content":"By using projection, you can construct a new type that is built from each object.","pos":[637,718]},{"content":"You can project a property and perform a mathematical function on it.","pos":[719,788]},{"content":"You can also project the original object without changing it.","pos":[789,850]},{"content":"The standard query operator methods that perform projection are listed in the following section.","pos":[857,953]},{"pos":[962,969],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method Name","pos":[976,987]},{"content":"Description","pos":[988,999]},{"content":"Visual Basic Query Expression Syntax","pos":[1000,1036]},{"content":"More Information","pos":[1037,1053]},{"content":"Select","pos":[1164,1170]},{"content":"Projects values that are based on a transform function.","pos":[1171,1226]},{"content":"SelectMany","pos":[1381,1391]},{"content":"Projects sequences of values that are based on a transform function and then flattens them into one sequence.","pos":[1392,1501]},{"pos":[1502,1529],"content":"Use multiple <ph id=\"ph1\">`From`</ph> clauses","source":"Use multiple `From` clauses"},{"pos":[1688,1720],"content":"Query Expression Syntax Examples","linkify":"Query Expression Syntax Examples","nodes":[{"content":"Query Expression Syntax Examples","pos":[0,32]}]},{"pos":[1730,1736],"content":"Select","linkify":"Select","nodes":[{"content":"Select","pos":[0,6]}]},{"pos":[1740,1853],"content":"The following example uses the <ph id=\"ph1\">`Select`</ph> clause to project the first letter from each string in a list of strings.","source":"The following example uses the `Select` clause to project the first letter from each string in a list of strings."},{"pos":[2271,2281],"content":"SelectMany","linkify":"SelectMany","nodes":[{"content":"SelectMany","pos":[0,10]}]},{"pos":[2285,2395],"content":"The following example uses multiple <ph id=\"ph1\">`From`</ph> clauses to project each word from each string in a list of strings.","source":"The following example uses multiple `From` clauses to project each word from each string in a list of strings."},{"pos":[2900,2924],"content":"Select versus SelectMany","linkify":"Select versus SelectMany","nodes":[{"content":"Select versus SelectMany","pos":[0,24]}]},{"content":"The work of both <ph id=\"ph1\">`Select()`</ph> and <ph id=\"ph2\">`SelectMany()`</ph> is to produce a result value (or values) from source values.","pos":[2928,3035],"source":"The work of both `Select()` and `SelectMany()` is to produce a result value (or values) from source values."},{"content":"<ph id=\"ph1\">`Select()`</ph> produces one result value for every source value.","pos":[3036,3096],"source":"`Select()` produces one result value for every source value."},{"content":"The overall result is therefore a collection that has the same number of elements as the source collection.","pos":[3097,3204]},{"content":"In contrast, <ph id=\"ph1\">`SelectMany()`</ph> produces a single overall result that contains concatenated sub-collections from each source value.","pos":[3205,3332],"source":" In contrast, `SelectMany()` produces a single overall result that contains concatenated sub-collections from each source value."},{"content":"The transform function that is passed as an argument to <ph id=\"ph1\">`SelectMany()`</ph> must return an enumerable sequence of values for each source value.","pos":[3333,3471],"source":" The transform function that is passed as an argument to `SelectMany()` must return an enumerable sequence of values for each source value."},{"content":"These enumerable sequences are then concatenated by <ph id=\"ph1\">`SelectMany()`</ph> to create one large sequence.","pos":[3472,3568],"source":" These enumerable sequences are then concatenated by `SelectMany()` to create one large sequence."},{"content":"The following two illustrations show the conceptual difference between the actions of these two methods.","pos":[3575,3679]},{"content":"In each case, assume that the selector (transform) function selects the array of flowers from each source value.","pos":[3680,3792]},{"pos":[3799,3923],"content":"This illustration depicts how <ph id=\"ph1\">`Select()`</ph> returns a collection that has the same number of elements as the source collection.","source":"This illustration depicts how `Select()` returns a collection that has the same number of elements as the source collection."},{"pos":[3930,4080],"content":"<bpt id=\"p1\">![</bpt>Conceptual illustration of the action of Select&amp;#40;&amp;#41;<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../csharp/programming-guide/concepts/linq/media/selectaction.png \"</bpt>SelectAction<ept id=\"p2\">\")</ept>","source":"![Conceptual illustration of the action of Select&#40;&#41;](../../../../csharp/programming-guide/concepts/linq/media/selectaction.png \"SelectAction\")"},{"pos":[4087,4263],"content":"This illustration depicts how <ph id=\"ph1\">`SelectMany()`</ph> concatenates the intermediate sequence of arrays into one final result value that contains each value from each intermediate array.","source":"This illustration depicts how `SelectMany()` concatenates the intermediate sequence of arrays into one final result value that contains each value from each intermediate array."},{"pos":[4270,4410],"content":"<bpt id=\"p1\">![</bpt>Graphic showing the action of SelectMany&amp;#40;&amp;#41;.<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../csharp/programming-guide/concepts/linq/media/selectmany.png \"</bpt>SelectMany<ept id=\"p2\">\")</ept>","source":"![Graphic showing the action of SelectMany&#40;&#41;.](../../../../csharp/programming-guide/concepts/linq/media/selectmany.png \"SelectMany\")"},{"pos":[4420,4432],"content":"Code Example","linkify":"Code Example","nodes":[{"content":"Code Example","pos":[0,12]}]},{"content":"The following example compares the behavior of <ph id=\"ph1\">`Select()`</ph> and <ph id=\"ph2\">`SelectMany()`</ph>.","pos":[4436,4513],"source":"The following example compares the behavior of `Select()` and `SelectMany()`."},{"content":"The code creates a \"bouquet\" of flowers by taking the first two items from each list of flower names in the source collection.","pos":[4514,4640]},{"content":"In this example, the \"single value\" that the transform function <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> uses is itself a collection of values.","pos":[4641,4881],"source":" In this example, the \"single value\" that the transform function <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> uses is itself a collection of values."},{"content":"This requires the extra <ph id=\"ph1\">`For Each`</ph> loop in order to enumerate each string in each sub-sequence.","pos":[4882,4977],"source":" This requires the extra `For Each` loop in order to enumerate each string in each sub-sequence."},{"pos":[6856,6864],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq&gt;</ph>","pos":[6868,6886],"source":"<xref:System.Linq> "},{"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[6891,7037],"source":"[Standard Query Operators Overview (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Select Clause<ept id=\"p1\">](../../../../visual-basic/language-reference/queries/select-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[7041,7127],"source":"[Select Clause](../../../../visual-basic/language-reference/queries/select-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Combine Data with Joins<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/linq/how-to-combine-data-with-linq-by-using-joins.md)</ept><ph id=\"ph1\"> </ph>","pos":[7131,7280],"source":"[How to: Combine Data with Joins](../../../../visual-basic/programming-guide/language-features/linq/how-to-combine-data-with-linq-by-using-joins.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Populate Object Collections from Multiple Sources (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[7284,7489],"source":"[How to: Populate Object Collections from Multiple Sources (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-populate-object-collections-from-multiple-sources-linq.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Return a LINQ Query Result as a Specific Type<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/linq/how-to-return-a-linq-query-result-as-a-specific-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[7493,7672],"source":"[How to: Return a LINQ Query Result as a Specific Type](../../../../visual-basic/programming-guide/language-features/linq/how-to-return-a-linq-query-result-as-a-specific-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Split a File Into Many Files by Using Groups (LINQ) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md)</ept>","pos":[7676,7870],"source":"[How to: Split a File Into Many Files by Using Groups (LINQ) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md)"}]}