{"content":"---\ntitle: \"How to: Persist and Restore Application-Scope Properties Across Application Sessions\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"application-scope properties [WPF], persisting\"\n  - \"persisting application-scope properties [WPF]\"\n  - \"properties [WPF], persisting\"\n  - \"restoring application-scope properties [WPF]\"\n  - \"properties [WPF], restoring\"\n  - \"application-scope properties [WPF], restoring\"\nms.assetid: 55d5904a-f444-4eb5-abd3-6bc74dd14226\n---\n# How to: Persist and Restore Application-Scope Properties Across Application Sessions\nThis example shows how to persist application-scope properties when an application shuts down, and how to restore application-scope properties when an application is next launch.  \n  \n## Example  \n The application persists application-scope properties to, and restores them from, isolated storage. Isolated storage is a protected storage area that can safely be used by applications without file access permission.  The *App.xaml* file defines the `App_Startup` method as the handler for the <xref:System.Windows.Application.Startup?displayProperty=nameWithType> event, and the `App_Exit` method as the handler for the  <xref:System.Windows.Application.Exit?displayProperty=nameWithType> event, as shown in the highlighted lines of the first example. The second example shows a portion of the *App.xaml.cs* and *App.xaml.vb* files that highlights the code for the `App_Startup` method, which restores application-scope properties, and the `App_Exit` method, which saves application-scope properties.\n\n [!code-xaml[HOWTOApplicationModelSnippets#PersistRestoreAppScopePropertiesXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOApplicationModelSnippets/CSharp/App.xaml?highlight=1-7)]\n  \n [!code-csharp[HOWTOApplicationModelSnippets#PersistRestoreAppScopePropertiesCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOApplicationModelSnippets/CSharp/App.xaml.cs?highlight=17-55)]\n [!code-vb[HOWTOApplicationModelSnippets#PersistRestoreAppScopePropertiesCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOApplicationModelSnippets/visualbasic/application.xaml.vb#persistrestoreappscopepropertiescodebehind1)]\n","nodes":[{"pos":[4,501],"embed":true,"restype":"x-metadata","content":"title: \"How to: Persist and Restore Application-Scope Properties Across Application Sessions\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"application-scope properties [WPF], persisting\"\n  - \"persisting application-scope properties [WPF]\"\n  - \"properties [WPF], persisting\"\n  - \"restoring application-scope properties [WPF]\"\n  - \"properties [WPF], restoring\"\n  - \"application-scope properties [WPF], restoring\"\nms.assetid: 55d5904a-f444-4eb5-abd3-6bc74dd14226","nodes":[{"content":"How to: Persist and Restore Application-Scope Properties Across Application Sessions","nodes":[{"pos":[0,84],"content":"How to: Persist and Restore Application-Scope Properties Across Application Sessions","nodes":[{"content":"How to: Persist and Restore Application-Scope Properties Across Application Sessions","pos":[0,84]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[508,592],"content":"How to: Persist and Restore Application-Scope Properties Across Application Sessions","linkify":"How to: Persist and Restore Application-Scope Properties Across Application Sessions","nodes":[{"content":"How to: Persist and Restore Application-Scope Properties Across Application Sessions","pos":[0,84]}]},{"content":"This example shows how to persist application-scope properties when an application shuts down, and how to restore application-scope properties when an application is next launch.","pos":[593,771]},{"pos":[780,787],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The application persists application-scope properties to, and restores them from, isolated storage.","pos":[791,890]},{"content":"Isolated storage is a protected storage area that can safely be used by applications without file access permission.","pos":[891,1007]},{"content":"The <bpt id=\"p1\">*</bpt>App.xaml<ept id=\"p1\">*</ept> file defines the <ph id=\"ph1\">`App_Startup`</ph> method as the handler for the <ph id=\"ph2\">&lt;xref:System.Windows.Application.Startup?displayProperty=nameWithType&gt;</ph> event, and the <ph id=\"ph3\">`App_Exit`</ph> method as the handler for the  <ph id=\"ph4\">&lt;xref:System.Windows.Application.Exit?displayProperty=nameWithType&gt;</ph> event, as shown in the highlighted lines of the first example.","pos":[1009,1343],"source":"  The *App.xaml* file defines the `App_Startup` method as the handler for the <xref:System.Windows.Application.Startup?displayProperty=nameWithType> event, and the `App_Exit` method as the handler for the  <xref:System.Windows.Application.Exit?displayProperty=nameWithType> event, as shown in the highlighted lines of the first example."},{"content":"The second example shows a portion of the <bpt id=\"p1\">*</bpt>App.xaml.cs<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>App.xaml.vb<ept id=\"p2\">*</ept> files that highlights the code for the <ph id=\"ph1\">`App_Startup`</ph> method, which restores application-scope properties, and the <ph id=\"ph2\">`App_Exit`</ph> method, which saves application-scope properties.","pos":[1344,1592],"source":" The second example shows a portion of the *App.xaml.cs* and *App.xaml.vb* files that highlights the code for the `App_Startup` method, which restores application-scope properties, and the `App_Exit` method, which saves application-scope properties."}]}