{"content":"---\ntitle: \"How to: Calculate Intermediate Values (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 933a97b2-dfe7-4f4d-94ad-e6e20df84abd\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# How to: Calculate Intermediate Values (Visual Basic)\nThis example shows how to calculate intermediate values that can be used in sorting, filtering, and selecting.  \n  \n## Example  \n The following example uses the `Let` clause.  \n  \n This example uses the following XML document: [Sample XML File: Numerical Data (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-numerical-data-linq-to-xml.md).  \n  \n```vb  \nDim root As XElement = XElement.Load(\"Data.xml\")  \nDim extensions As IEnumerable(Of Decimal) = _  \n    From el In root.<Data> _  \n    Let extension = CDec(el.<Quantity>.Value) * CDec(el.<Price>.Value) _  \n    Where extension > 25 _  \n    Order By extension _  \n    Select extension  \nFor Each ex As Decimal In extensions  \n    Console.WriteLine(ex)  \nNext  \n  \n```  \n  \n This code produces the following output:  \n  \n```  \n55.92  \n73.50  \n89.99  \n198.00  \n435.00  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n This example uses the following XML document: [Sample XML File: Numerical Data in a Namespace](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-numerical-data-in-a-namespace.md).  \n  \n```vb  \nImports <xmlns=\"http://www.adatum.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = XElement.Load(\"DataInNamespace.xml\")  \n        Dim extensions As IEnumerable(Of Decimal) = _  \n            From el In root.<Data> _  \n            Let extension = CDec(el.<Quantity>.Value) * CDec(el.<Price>.Value) _  \n            Where extension > 25 _  \n            Order By extension _  \n            Select extension  \n        For Each ex As Decimal In extensions  \n            Console.WriteLine(ex)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This code produces the following output:  \n  \n```  \n55.92  \n73.50  \n89.99  \n198.00  \n435.00  \n```  \n  \n## See Also  \n [Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)","nodes":[{"pos":[12,81],"content":"How to: Calculate Intermediate Values (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Calculate Intermediate Values (Visual Basic) | Microsoft Docs","pos":[0,69]}]},{"pos":[388,440],"content":"How to: Calculate Intermediate Values (Visual Basic)","linkify":"How to: Calculate Intermediate Values (Visual Basic)","nodes":[{"content":"How to: Calculate Intermediate Values (Visual Basic)","pos":[0,52]}]},{"content":"This example shows how to calculate intermediate values that can be used in sorting, filtering, and selecting.","pos":[441,551]},{"pos":[560,567],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[571,615],"content":"The following example uses the <ph id=\"ph1\">`Let`</ph> clause.","source":"The following example uses the `Let` clause."},{"pos":[622,820],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Numerical Data (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-numerical-data-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Numerical Data (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-numerical-data-linq-to-xml.md)."},{"content":"This code produces the following output:","pos":[1205,1245]},{"pos":[1311,1318],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1322,1396]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[1397,1557],"source":" For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[1564,1766],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Numerical Data in a Namespace<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-numerical-data-in-a-namespace.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Numerical Data in a Namespace](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-numerical-data-in-a-namespace.md)."},{"content":"This code produces the following output:","pos":[2345,2385]},{"pos":[2451,2459],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2463,2594],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}