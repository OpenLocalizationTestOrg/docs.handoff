{"content":"---\ntitle: \"LINQ and strings (C#)\"\nms.date: 07/20/2015\nms.assetid: dbe2d657-b3f3-487e-b645-21fb2d71cd7b\n---\n# LINQ and strings (C#)\n\nLINQ can be used to query and transform strings and collections of strings. It can be especially useful with semi-structured data in text files. LINQ queries can be combined with traditional string functions and regular expressions. For example, you can use the <xref:System.String.Split%2A?displayProperty=nameWithType> or <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method to create an array of strings that you can then query or modify by using LINQ. You can use the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A?displayProperty=nameWithType> method in the `where` clause of a LINQ query. And you can use LINQ to query or modify the <xref:System.Text.RegularExpressions.MatchCollection> results returned by a regular expression.\n\nYou can also use the techniques described in this section to transform semi-structured text data to XML. For more information, see [How to: Generate XML from CSV Files](how-to-generate-xml-from-csv-files.md).\n\nThe examples in this section fall into two categories:\n\n## Querying a block of text\n\nYou can query, analyze, and modify text blocks by splitting them into a queryable array of smaller strings by using the <xref:System.String.Split%2A?displayProperty=nameWithType> method or the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method. You can split the source text into words, sentences, paragraphs, pages, or any other criteria, and then perform additional splits if they are required in your query.\n\n- [How to: Count Occurrences of a Word in a String (LINQ) (C#)](how-to-count-occurrences-of-a-word-in-a-string-linq.md)  \n  Shows how to use LINQ for simple querying over text.\n\n- [How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)](how-to-query-for-sentences-that-contain-a-specified-set-of-words-linq.md)\n\n  Shows how to split text files on arbitrary boundaries and how to perform queries against each part.\n\n- [How to: Query for Characters in a String (LINQ) (C#)](how-to-query-for-characters-in-a-string-linq.md)\n\n  Demonstrates that a string is a queryable type.\n\n- [How to: Combine LINQ Queries with Regular Expressions (C#)](how-to-combine-linq-queries-with-regular-expressions.md)\n\n  Shows how to use regular expressions in LINQ queries for complex pattern matching on filtered query results.\n\n## Querying semi-structured data in text format\n\nMany different types of text files consist of a series of lines, often with similar formatting, such as tab- or comma-delimited files or fixed-length lines. After you read such a text file into memory, you can use LINQ to query and/or modify the lines. LINQ queries also simplify the task of combining data from multiple sources.\n\n- [How to: Find the Set Difference Between Two Lists (LINQ) (C#)](how-to-find-the-set-difference-between-two-lists-linq.md)\n\n  Shows how to find all the strings that are present in one list but not the other.\n\n- [How to: Sort or Filter Text Data by Any Word or Field (LINQ) (C#)](how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)\n\n  Shows how to sort text lines based on any word or field.\n\n- [How to: Reorder the Fields of a Delimited File (LINQ) (C#)](how-to-reorder-the-fields-of-a-delimited-file-linq.md)\n\n  Shows how to reorder fields in a line in a .csv file.\n\n- [How to: Combine and Compare String Collections (LINQ) (C#)](how-to-combine-and-compare-string-collections-linq.md)\n\n  Shows how to combine string lists in various ways.\n\n- [How to: Populate Object Collections from Multiple Sources (LINQ) (C#)](how-to-populate-object-collections-from-multiple-sources-linq.md)\n\n  Shows how to create object collections by using multiple text files as data sources.\n\n- [How to: Join Content from Dissimilar Files (LINQ) (C#)](how-to-join-content-from-dissimilar-files-linq.md)\n  \n  Shows how to combine strings in two lists into a single string by using a matching key.\n\n- [How to: Split a File Into Many Files by Using Groups (LINQ) (C#)](how-to-split-a-file-into-many-files-by-using-groups-linq.md)\n  \n  Shows how to create new files by using a single file as a data source.\n\n- [How to: Compute Column Values in a CSV Text File (LINQ) (C#)](how-to-compute-column-values-in-a-csv-text-file-linq.md)\n  \n  Shows how to perform mathematical computations on text data in .csv files.\n\n## See also\n\n- [Language-Integrated Query (LINQ) (C#)](index.md)\n- [How to: Generate XML from CSV Files](how-to-generate-xml-from-csv-files.md)\n","nodes":[{"pos":[4,103],"embed":true,"restype":"x-metadata","content":"title: \"LINQ and strings (C#)\"\nms.date: 07/20/2015\nms.assetid: dbe2d657-b3f3-487e-b645-21fb2d71cd7b","nodes":[{"content":"LINQ and strings (C#)","nodes":[{"pos":[0,21],"content":"LINQ and strings (C#)","nodes":[{"content":"LINQ and strings (C#)","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[110,131],"content":"LINQ and strings (C#)","linkify":"LINQ and strings (C#)","nodes":[{"content":"LINQ and strings (C#)","pos":[0,21]}]},{"content":"LINQ can be used to query and transform strings and collections of strings.","pos":[133,208]},{"content":"It can be especially useful with semi-structured data in text files.","pos":[209,277]},{"content":"LINQ queries can be combined with traditional string functions and regular expressions.","pos":[278,365]},{"content":"For example, you can use the <ph id=\"ph1\">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType&gt;</ph> method to create an array of strings that you can then query or modify by using LINQ.","pos":[366,624],"source":" For example, you can use the <xref:System.String.Split%2A?displayProperty=nameWithType> or <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method to create an array of strings that you can then query or modify by using LINQ."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%2A?displayProperty=nameWithType&gt;</ph> method in the <ph id=\"ph2\">`where`</ph> clause of a LINQ query.","pos":[625,770],"source":" You can use the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A?displayProperty=nameWithType> method in the `where` clause of a LINQ query."},{"content":"And you can use LINQ to query or modify the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> results returned by a regular expression.","pos":[771,910],"source":" And you can use LINQ to query or modify the <xref:System.Text.RegularExpressions.MatchCollection> results returned by a regular expression."},{"content":"You can also use the techniques described in this section to transform semi-structured text data to XML.","pos":[912,1016]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Generate XML from CSV Files<ept id=\"p1\">](how-to-generate-xml-from-csv-files.md)</ept>.","pos":[1017,1120],"source":" For more information, see [How to: Generate XML from CSV Files](how-to-generate-xml-from-csv-files.md)."},{"content":"The examples in this section fall into two categories:","pos":[1122,1176]},{"pos":[1181,1205],"content":"Querying a block of text","linkify":"Querying a block of text","nodes":[{"content":"Querying a block of text","pos":[0,24]}]},{"content":"You can query, analyze, and modify text blocks by splitting them into a queryable array of smaller strings by using the <ph id=\"ph1\">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph> method or the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[1207,1489],"source":"You can query, analyze, and modify text blocks by splitting them into a queryable array of smaller strings by using the <xref:System.String.Split%2A?displayProperty=nameWithType> method or the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method."},{"content":"You can split the source text into words, sentences, paragraphs, pages, or any other criteria, and then perform additional splits if they are required in your query.","pos":[1490,1655]},{"pos":[1659,1833],"content":"[How to: Count Occurrences of a Word in a String (LINQ) (C#)](how-to-count-occurrences-of-a-word-in-a-string-linq.md)  \nShows how to use LINQ for simple querying over text.","leadings":["","  "],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>How to: Count Occurrences of a Word in a String (LINQ) (C#)<ept id=\"p1\">](how-to-count-occurrences-of-a-word-in-a-string-linq.md)</ept>","pos":[0,117],"source":"[How to: Count Occurrences of a Word in a String (LINQ) (C#)](how-to-count-occurrences-of-a-word-in-a-string-linq.md)"},{"content":"Shows how to use LINQ for simple querying over text.","pos":[120,172]}]},{"pos":[1837,1990],"content":"<bpt id=\"p1\">[</bpt>How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)<ept id=\"p1\">](how-to-query-for-sentences-that-contain-a-specified-set-of-words-linq.md)</ept>","source":"[How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (C#)](how-to-query-for-sentences-that-contain-a-specified-set-of-words-linq.md)"},{"content":"Shows how to split text files on arbitrary boundaries and how to perform queries against each part.","pos":[1994,2093]},{"pos":[2097,2200],"content":"<bpt id=\"p1\">[</bpt>How to: Query for Characters in a String (LINQ) (C#)<ept id=\"p1\">](how-to-query-for-characters-in-a-string-linq.md)</ept>","source":"[How to: Query for Characters in a String (LINQ) (C#)](how-to-query-for-characters-in-a-string-linq.md)"},{"content":"Demonstrates that a string is a queryable type.","pos":[2204,2251]},{"pos":[2255,2372],"content":"<bpt id=\"p1\">[</bpt>How to: Combine LINQ Queries with Regular Expressions (C#)<ept id=\"p1\">](how-to-combine-linq-queries-with-regular-expressions.md)</ept>","source":"[How to: Combine LINQ Queries with Regular Expressions (C#)](how-to-combine-linq-queries-with-regular-expressions.md)"},{"content":"Shows how to use regular expressions in LINQ queries for complex pattern matching on filtered query results.","pos":[2376,2484]},{"pos":[2489,2533],"content":"Querying semi-structured data in text format","linkify":"Querying semi-structured data in text format","nodes":[{"content":"Querying semi-structured data in text format","pos":[0,44]}]},{"content":"Many different types of text files consist of a series of lines, often with similar formatting, such as tab- or comma-delimited files or fixed-length lines.","pos":[2535,2691]},{"content":"After you read such a text file into memory, you can use LINQ to query and/or modify the lines.","pos":[2692,2787]},{"content":"LINQ queries also simplify the task of combining data from multiple sources.","pos":[2788,2864]},{"pos":[2868,2989],"content":"<bpt id=\"p1\">[</bpt>How to: Find the Set Difference Between Two Lists (LINQ) (C#)<ept id=\"p1\">](how-to-find-the-set-difference-between-two-lists-linq.md)</ept>","source":"[How to: Find the Set Difference Between Two Lists (LINQ) (C#)](how-to-find-the-set-difference-between-two-lists-linq.md)"},{"content":"Shows how to find all the strings that are present in one list but not the other.","pos":[2993,3074]},{"pos":[3078,3207],"content":"<bpt id=\"p1\">[</bpt>How to: Sort or Filter Text Data by Any Word or Field (LINQ) (C#)<ept id=\"p1\">](how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)</ept>","source":"[How to: Sort or Filter Text Data by Any Word or Field (LINQ) (C#)](how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)"},{"content":"Shows how to sort text lines based on any word or field.","pos":[3211,3267]},{"pos":[3271,3386],"content":"<bpt id=\"p1\">[</bpt>How to: Reorder the Fields of a Delimited File (LINQ) (C#)<ept id=\"p1\">](how-to-reorder-the-fields-of-a-delimited-file-linq.md)</ept>","source":"[How to: Reorder the Fields of a Delimited File (LINQ) (C#)](how-to-reorder-the-fields-of-a-delimited-file-linq.md)"},{"content":"Shows how to reorder fields in a line in a .csv file.","pos":[3390,3443]},{"pos":[3447,3562],"content":"<bpt id=\"p1\">[</bpt>How to: Combine and Compare String Collections (LINQ) (C#)<ept id=\"p1\">](how-to-combine-and-compare-string-collections-linq.md)</ept>","source":"[How to: Combine and Compare String Collections (LINQ) (C#)](how-to-combine-and-compare-string-collections-linq.md)"},{"content":"Shows how to combine string lists in various ways.","pos":[3566,3616]},{"pos":[3620,3757],"content":"<bpt id=\"p1\">[</bpt>How to: Populate Object Collections from Multiple Sources (LINQ) (C#)<ept id=\"p1\">](how-to-populate-object-collections-from-multiple-sources-linq.md)</ept>","source":"[How to: Populate Object Collections from Multiple Sources (LINQ) (C#)](how-to-populate-object-collections-from-multiple-sources-linq.md)"},{"content":"Shows how to create object collections by using multiple text files as data sources.","pos":[3761,3845]},{"pos":[3849,3956],"content":"<bpt id=\"p1\">[</bpt>How to: Join Content from Dissimilar Files (LINQ) (C#)<ept id=\"p1\">](how-to-join-content-from-dissimilar-files-linq.md)</ept>","source":"[How to: Join Content from Dissimilar Files (LINQ) (C#)](how-to-join-content-from-dissimilar-files-linq.md)"},{"content":"Shows how to combine strings in two lists into a single string by using a matching key.","pos":[3962,4049]},{"pos":[4053,4180],"content":"<bpt id=\"p1\">[</bpt>How to: Split a File Into Many Files by Using Groups (LINQ) (C#)<ept id=\"p1\">](how-to-split-a-file-into-many-files-by-using-groups-linq.md)</ept>","source":"[How to: Split a File Into Many Files by Using Groups (LINQ) (C#)](how-to-split-a-file-into-many-files-by-using-groups-linq.md)"},{"content":"Shows how to create new files by using a single file as a data source.","pos":[4186,4256]},{"pos":[4260,4379],"content":"<bpt id=\"p1\">[</bpt>How to: Compute Column Values in a CSV Text File (LINQ) (C#)<ept id=\"p1\">](how-to-compute-column-values-in-a-csv-text-file-linq.md)</ept>","source":"[How to: Compute Column Values in a CSV Text File (LINQ) (C#)](how-to-compute-column-values-in-a-csv-text-file-linq.md)"},{"content":"Shows how to perform mathematical computations on text data in .csv files.","pos":[4385,4459]},{"pos":[4464,4472],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4476,4525],"content":"<bpt id=\"p1\">[</bpt>Language-Integrated Query (LINQ) (C#)<ept id=\"p1\">](index.md)</ept>","source":"[Language-Integrated Query (LINQ) (C#)](index.md)"},{"pos":[4528,4604],"content":"<bpt id=\"p1\">[</bpt>How to: Generate XML from CSV Files<ept id=\"p1\">](how-to-generate-xml-from-csv-files.md)</ept>","source":"[How to: Generate XML from CSV Files](how-to-generate-xml-from-csv-files.md)"}]}