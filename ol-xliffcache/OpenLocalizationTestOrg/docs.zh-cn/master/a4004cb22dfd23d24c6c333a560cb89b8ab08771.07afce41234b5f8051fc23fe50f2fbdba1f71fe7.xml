{"content":"---\ntitle: \"Passing Parameters (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"parameters [C#], passing\"\n  - \"passing parameters [C#]\"\n  - \"arguments [C#]\"\n  - \"methods [C#], passing parameters\"\n  - \"C# language, method parameters\"\nms.assetid: a5c3003f-7441-4710-b8b1-c79de77e0b77\ncaps.latest.revision: 17\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Passing Parameters (C# Programming Guide)\nIn C#, arguments can be passed to parameters either by value or by reference. Passing by reference enables function members, methods, properties, indexers, operators, and constructors to change the value of the parameters and have that change persist in the calling environment. To pass a parameter by reference, use the `ref` or `out` keyword. For simplicity, only the `ref` keyword is used in the examples in this topic. For more information about the difference between `ref` and `out`, see [ref](../../../csharp/language-reference/keywords/ref.md), [out](../../../csharp/language-reference/keywords/out.md), and [Passing Arrays Using ref and out](../../../csharp/programming-guide/arrays/passing-arrays-using-ref-and-out.md).  \n  \n The following example illustrates the difference between value and reference parameters.  \n  \n [!code-cs[csProgGuideParameters#10](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/passing-parameters_1.cs)]  \n  \n For more information, see the following topics:  \n  \n-   [Passing Value-Type Parameters](../../../csharp/programming-guide/classes-and-structs/passing-value-type-parameters.md)  \n  \n-   [Passing Reference-Type Parameters](../../../csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md)  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)","nodes":[{"pos":[4,671],"nodes":[{"content":"Passing Parameters (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,58],"content":"Passing Parameters (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Passing Parameters (C# Programming Guide) | Microsoft Docs","pos":[0,58]}]}],"pos":[6,67],"yaml":true}],"content":"title: \"Passing Parameters (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"parameters [C#], passing\"\n  - \"passing parameters [C#]\"\n  - \"arguments [C#]\"\n  - \"methods [C#], passing parameters\"\n  - \"C# language, method parameters\"\nms.assetid: a5c3003f-7441-4710-b8b1-c79de77e0b77\ncaps.latest.revision: 17\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[678,719],"content":"Passing Parameters (C# Programming Guide)","linkify":"Passing Parameters (C# Programming Guide)","nodes":[{"content":"Passing Parameters (C# Programming Guide)","pos":[0,41]}]},{"content":"In C#, arguments can be passed to parameters either by value or by reference.","pos":[720,797]},{"content":"Passing by reference enables function members, methods, properties, indexers, operators, and constructors to change the value of the parameters and have that change persist in the calling environment.","pos":[798,998]},{"content":"To pass a parameter by reference, use the <ph id=\"ph1\">`ref`</ph> or <ph id=\"ph2\">`out`</ph> keyword.","pos":[999,1064],"source":" To pass a parameter by reference, use the `ref` or `out` keyword."},{"content":"For simplicity, only the <ph id=\"ph1\">`ref`</ph> keyword is used in the examples in this topic.","pos":[1065,1142],"source":" For simplicity, only the `ref` keyword is used in the examples in this topic."},{"content":"For more information about the difference between <ph id=\"ph1\">`ref`</ph> and <ph id=\"ph2\">`out`</ph>, see <bpt id=\"p1\">[</bpt>ref<ept id=\"p1\">](../../../csharp/language-reference/keywords/ref.md)</ept>, <bpt id=\"p2\">[</bpt>out<ept id=\"p2\">](../../../csharp/language-reference/keywords/out.md)</ept>, and <bpt id=\"p3\">[</bpt>Passing Arrays Using ref and out<ept id=\"p3\">](../../../csharp/programming-guide/arrays/passing-arrays-using-ref-and-out.md)</ept>.","pos":[1143,1449],"source":" For more information about the difference between `ref` and `out`, see [ref](../../../csharp/language-reference/keywords/ref.md), [out](../../../csharp/language-reference/keywords/out.md), and [Passing Arrays Using ref and out](../../../csharp/programming-guide/arrays/passing-arrays-using-ref-and-out.md)."},{"content":"The following example illustrates the difference between value and reference parameters.","pos":[1456,1544]},{"pos":[1551,1685],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideParameters#10<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/passing-parameters_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideParameters#10](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/passing-parameters_1.cs)]"},{"content":"For more information, see the following topics:","pos":[1692,1739]},{"pos":[1749,1868],"content":"<bpt id=\"p1\">[</bpt>Passing Value-Type Parameters<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/passing-value-type-parameters.md)</ept>","source":"[Passing Value-Type Parameters](../../../csharp/programming-guide/classes-and-structs/passing-value-type-parameters.md)"},{"pos":[1878,2005],"content":"<bpt id=\"p1\">[</bpt>Passing Reference-Type Parameters<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md)</ept>","source":"[Passing Reference-Type Parameters](../../../csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md)"},{"pos":[2014,2039],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2153,2161],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2165,2232],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Methods<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept>","pos":[2236,2311],"source":"[Methods](../../../csharp/programming-guide/classes-and-structs/methods.md)"}]}