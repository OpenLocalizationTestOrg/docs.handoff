{"content":"---\ntitle: \"How to: Query an ArrayList with LINQ (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 2bfb471c-6e9a-4e60-bd83-4a1778abde11\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Query an ArrayList with LINQ (C#)\nWhen using LINQ to query non-generic <xref:System.Collections.IEnumerable> collections such as <xref:System.Collections.ArrayList>, you must explicitly declare the type of the range variable to reflect the specific type of the objects in the collection. For example, if you have an <xref:System.Collections.ArrayList> of `Student` objects, your [from clause](../../../../csharp/language-reference/keywords/from-clause.md)should look like this:  \n  \n```  \n  \nvar query = from Student s in arrList  \n...  \n  \n```  \n  \n By specifying the type of the range variable, you are casting each item in the <xref:System.Collections.ArrayList> to a `Student`.  \n  \n The use of an explicitly typed range variable in a query expression is equivalent to calling the <xref:System.Linq.Enumerable.Cast%2A> method. <xref:System.Linq.Enumerable.Cast%2A> throws an exception if the specified cast cannot be performed. <xref:System.Linq.Enumerable.Cast%2A> and <xref:System.Linq.Enumerable.OfType%2A> are the two Standard Query Operator methods that operate on non-generic <xref:System.Collections.IEnumerable> types. For more information, see[Type Relationships in LINQ Query Operations](../../../../csharp/programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md).  \n  \n## Example  \n The following example shows a simple query over an <xref:System.Collections.ArrayList>. Note that this example uses object initializers when the code calls the <xref:System.Collections.ArrayList.Add%2A> method, but this is not a requirement.  \n  \n```csharp  \nusing System;  \nusing System.Collections;  \nusing System.Linq;  \n  \nnamespace NonGenericLINQ  \n{  \n    public class Student  \n    {  \n        public string FirstName { get; set; }  \n        public string LastName { get; set; }  \n        public int[] Scores { get; set; }  \n    }  \n  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ArrayList arrList = new ArrayList();  \n            arrList.Add(  \n                new Student  \n                    {  \n                        FirstName = \"Svetlana\", LastName = \"Omelchenko\", Scores = new int[] { 98, 92, 81, 60 }  \n                    });  \n            arrList.Add(  \n                new Student  \n                    {  \n                        FirstName = \"Claire\", LastName = \"Oâ€™Donnell\", Scores = new int[] { 75, 84, 91, 39 }  \n                    });  \n            arrList.Add(  \n                new Student  \n                    {  \n                        FirstName = \"Sven\", LastName = \"Mortensen\", Scores = new int[] { 88, 94, 65, 91 }  \n                    });  \n            arrList.Add(  \n                new Student  \n                    {  \n                        FirstName = \"Cesar\", LastName = \"Garcia\", Scores = new int[] { 97, 89, 85, 82 }  \n                    });  \n  \n            var query = from Student student in arrList  \n                        where student.Scores[0] > 95  \n                        select student;  \n  \n            foreach (Student s in query)  \n                Console.WriteLine(s.LastName + \": \" + s.Scores[0]);  \n  \n            // Keep the console window open in debug mode.  \n            Console.WriteLine(\"Press any key to exit.\");  \n            Console.ReadKey();  \n        }  \n    }  \n}  \n/* Output:   \n    Omelchenko: 98  \n    Garcia: 97  \n*/  \n```  \n  \n## See Also  \n [LINQ to Objects (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)","nodes":[{"pos":[12,70],"content":"How to: Query an ArrayList with LINQ (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Query an ArrayList with LINQ (C#) | Microsoft Docs","pos":[0,58]}]},{"pos":[429,470],"content":"How to: Query an ArrayList with LINQ (C#)","linkify":"How to: Query an ArrayList with LINQ (C#)","nodes":[{"content":"How to: Query an ArrayList with LINQ (C#)","pos":[0,41]}]},{"content":"When using LINQ to query non-generic <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> collections such as <ph id=\"ph2\">&lt;xref:System.Collections.ArrayList&gt;</ph>, you must explicitly declare the type of the range variable to reflect the specific type of the objects in the collection.","pos":[471,724],"source":"When using LINQ to query non-generic <xref:System.Collections.IEnumerable> collections such as <xref:System.Collections.ArrayList>, you must explicitly declare the type of the range variable to reflect the specific type of the objects in the collection."},{"content":"For example, if you have an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> of <ph id=\"ph2\">`Student`</ph> objects, your <bpt id=\"p1\">[</bpt>from clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/from-clause.md)</ept>should look like this:","pos":[725,914],"source":" For example, if you have an <xref:System.Collections.ArrayList> of `Student` objects, your [from clause](../../../../csharp/language-reference/keywords/from-clause.md)should look like this:"},{"pos":[988,1118],"content":"By specifying the type of the range variable, you are casting each item in the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph> to a <ph id=\"ph2\">`Student`</ph>.","source":"By specifying the type of the range variable, you are casting each item in the <xref:System.Collections.ArrayList> to a `Student`."},{"content":"The use of an explicitly typed range variable in a query expression is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Cast%2A&gt;</ph> method.","pos":[1125,1267],"source":"The use of an explicitly typed range variable in a query expression is equivalent to calling the <xref:System.Linq.Enumerable.Cast%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Cast%2A&gt;</ph> throws an exception if the specified cast cannot be performed.","pos":[1268,1368],"source":"<xref:System.Linq.Enumerable.Cast%2A> throws an exception if the specified cast cannot be performed."},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Cast%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> are the two Standard Query Operator methods that operate on non-generic <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph> types.","pos":[1369,1567],"source":"<xref:System.Linq.Enumerable.Cast%2A> and <xref:System.Linq.Enumerable.OfType%2A> are the two Standard Query Operator methods that operate on non-generic <xref:System.Collections.IEnumerable> types."},{"content":"For more information, see<bpt id=\"p1\">[</bpt>Type Relationships in LINQ Query Operations<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md)</ept>.","pos":[1568,1738],"source":" For more information, see[Type Relationships in LINQ Query Operations](../../../../csharp/programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md)."},{"pos":[1747,1754],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows a simple query over an <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>.","pos":[1758,1845],"source":"The following example shows a simple query over an <xref:System.Collections.ArrayList>."},{"content":"Note that this example uses object initializers when the code calls the <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList.Add%2A&gt;</ph> method, but this is not a requirement.","pos":[1846,1999],"source":" Note that this example uses object initializers when the code calls the <xref:System.Collections.ArrayList.Add%2A> method, but this is not a requirement."},{"pos":[3822,3830],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3834,3927],"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept>","source":"[LINQ to Objects (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)"}]}