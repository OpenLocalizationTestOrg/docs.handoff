{"content":"---\ntitle: \"Adding Columns to a DataTable\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: e85c4a0e-4f3f-458c-b58b-0ddbc06bf974\n---\n# Adding Columns to a DataTable\nA <xref:System.Data.DataTable> contains a collection of <xref:System.Data.DataColumn> objects referenced by the **Columns** property of the table. This collection of columns, along with any constraints, defines the schema, or structure, of the table.  \n  \n You create **DataColumn** objects within a table by using the **DataColumn** constructor, or by calling the **Add** method of the **Columns** property of the table, which is a <xref:System.Data.DataColumnCollection>. The **Add** method accepts optional **ColumnName**, **DataType**, and **Expression** arguments and creates a new **DataColumn** as a member of the collection. It also accepts an existing **DataColumn** object and adds it to the collection, and returns a reference to the added **DataColumn** if requested. Because **DataTable** objects are not specific to any data source, .NET Framework types are used when specifying the data type of a **DataColumn**.  \n  \n The following example adds four columns to a **DataTable**.  \n  \n```vb  \nDim workTable As DataTable = New DataTable(\"Customers\")  \n  \nDim workCol As DataColumn = workTable.Columns.Add( _  \n    \"CustID\", Type.GetType(\"System.Int32\"))  \nworkCol.AllowDBNull = false  \nworkCol.Unique = true  \n  \nworkTable.Columns.Add(\"CustLName\", Type.GetType(\"System.String\"))  \nworkTable.Columns.Add(\"CustFName\", Type.GetType(\"System.String\"))  \nworkTable.Columns.Add(\"Purchases\", Type.GetType(\"System.Double\"))  \n```  \n  \n```csharp  \nDataTable workTable = new DataTable(\"Customers\");  \n  \nDataColumn workCol = workTable.Columns.Add(\"CustID\", typeof(Int32));  \nworkCol.AllowDBNull = false;  \nworkCol.Unique = true;  \n  \nworkTable.Columns.Add(\"CustLName\", typeof(String));  \nworkTable.Columns.Add(\"CustFName\", typeof(String));  \nworkTable.Columns.Add(\"Purchases\", typeof(Double));  \n```  \n  \n In the example, notice that the properties for the **CustID** column are set to not allow **DBNull** values and to constrain values to be unique. However, if you define the **CustID** column as the primary key column of the table, the **AllowDBNull** property will automatically be set to **false** and the **Unique** property will automatically be set to **true**. For more information, see [Defining Primary Keys](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  \n  \n> [!CAUTION]\n>  If a column name is not supplied for a column, the column is given an incremental default name of Column*N,* starting with \"Column1\", when it is added to the **DataColumnCollection**. We recommend that you avoid the naming convention of \"Column*N*\" when you supply a column name, because the name you supply may conflict with an existing default column name in the **DataColumnCollection**. If the supplied name already exists, an exception is thrown.  \n  \n If you are using <xref:System.Xml.Linq.XElement> as the <xref:System.Data.DataColumn.DataType%2A> of a <xref:System.Data.DataColumn> in the <xref:System.Data.DataTable>, XML serialization will not work when you read in data. For example, if you write out a <xref:System.Xml.XmlDocument> by using the `DataTable.WriteXml` method, upon serialization to XML there is an additional parent node in the <xref:System.Xml.Linq.XElement>. To work around this problem, use the <xref:System.Data.SqlTypes.SqlXml> type instead of <xref:System.Xml.Linq.XElement>. `ReadXml` and `WriteXml` work correctly with <xref:System.Data.SqlTypes.SqlXml>.  \n  \n## See also\n\n- <xref:System.Data.DataColumn>\n- <xref:System.Data.DataColumnCollection>\n- <xref:System.Data.DataTable>\n- [DataTable Schema Definition](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/datatable-schema-definition.md)\n- [DataTables](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/datatables.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,147],"embed":true,"restype":"x-metadata","content":"title: \"Adding Columns to a DataTable\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: e85c4a0e-4f3f-458c-b58b-0ddbc06bf974","nodes":[{"content":"Adding Columns to a DataTable","nodes":[{"pos":[0,29],"content":"Adding Columns to a DataTable","nodes":[{"content":"Adding Columns to a DataTable","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[154,183],"content":"Adding Columns to a DataTable","linkify":"Adding Columns to a DataTable","nodes":[{"content":"Adding Columns to a DataTable","pos":[0,29]}]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> contains a collection of <ph id=\"ph2\">&lt;xref:System.Data.DataColumn&gt;</ph> objects referenced by the <bpt id=\"p1\">**</bpt>Columns<ept id=\"p1\">**</ept> property of the table.","pos":[184,330],"source":"A <xref:System.Data.DataTable> contains a collection of <xref:System.Data.DataColumn> objects referenced by the **Columns** property of the table."},{"content":"This collection of columns, along with any constraints, defines the schema, or structure, of the table.","pos":[331,434]},{"content":"You create <bpt id=\"p1\">**</bpt>DataColumn<ept id=\"p1\">**</ept> objects within a table by using the <bpt id=\"p2\">**</bpt>DataColumn<ept id=\"p2\">**</ept> constructor, or by calling the <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept> method of the <bpt id=\"p4\">**</bpt>Columns<ept id=\"p4\">**</ept> property of the table, which is a <ph id=\"ph1\">&lt;xref:System.Data.DataColumnCollection&gt;</ph>.","pos":[441,657],"source":"You create **DataColumn** objects within a table by using the **DataColumn** constructor, or by calling the **Add** method of the **Columns** property of the table, which is a <xref:System.Data.DataColumnCollection>."},{"content":"The <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> method accepts optional <bpt id=\"p2\">**</bpt>ColumnName<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>DataType<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>Expression<ept id=\"p4\">**</ept> arguments and creates a new <bpt id=\"p5\">**</bpt>DataColumn<ept id=\"p5\">**</ept> as a member of the collection.","pos":[658,816],"source":" The **Add** method accepts optional **ColumnName**, **DataType**, and **Expression** arguments and creates a new **DataColumn** as a member of the collection."},{"content":"It also accepts an existing <bpt id=\"p1\">**</bpt>DataColumn<ept id=\"p1\">**</ept> object and adds it to the collection, and returns a reference to the added <bpt id=\"p2\">**</bpt>DataColumn<ept id=\"p2\">**</ept> if requested.","pos":[817,963],"source":" It also accepts an existing **DataColumn** object and adds it to the collection, and returns a reference to the added **DataColumn** if requested."},{"content":"Because <bpt id=\"p1\">**</bpt>DataTable<ept id=\"p1\">**</ept> objects are not specific to any data source, .NET Framework types are used when specifying the data type of a <bpt id=\"p2\">**</bpt>DataColumn<ept id=\"p2\">**</ept>.","pos":[964,1111],"source":" Because **DataTable** objects are not specific to any data source, .NET Framework types are used when specifying the data type of a **DataColumn**."},{"pos":[1118,1177],"content":"The following example adds four columns to a <bpt id=\"p1\">**</bpt>DataTable<ept id=\"p1\">**</ept>.","source":"The following example adds four columns to a **DataTable**."},{"content":"In the example, notice that the properties for the <bpt id=\"p1\">**</bpt>CustID<ept id=\"p1\">**</ept> column are set to not allow <bpt id=\"p2\">**</bpt>DBNull<ept id=\"p2\">**</ept> values and to constrain values to be unique.","pos":[1992,2137],"source":"In the example, notice that the properties for the **CustID** column are set to not allow **DBNull** values and to constrain values to be unique."},{"content":"However, if you define the <bpt id=\"p1\">**</bpt>CustID<ept id=\"p1\">**</ept> column as the primary key column of the table, the <bpt id=\"p2\">**</bpt>AllowDBNull<ept id=\"p2\">**</ept> property will automatically be set to <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept> and the <bpt id=\"p4\">**</bpt>Unique<ept id=\"p4\">**</ept> property will automatically be set to <bpt id=\"p5\">**</bpt>true<ept id=\"p5\">**</ept>.","pos":[2138,2357],"source":" However, if you define the **CustID** column as the primary key column of the table, the **AllowDBNull** property will automatically be set to **false** and the **Unique** property will automatically be set to **true**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)</ept>.","pos":[2358,2503],"source":" For more information, see [Defining Primary Keys](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)."},{"pos":[2511,2976],"content":"[!CAUTION]\n If a column name is not supplied for a column, the column is given an incremental default name of Column*N,* starting with \"Column1\", when it is added to the **DataColumnCollection**. We recommend that you avoid the naming convention of \"Column*N*\" when you supply a column name, because the name you supply may conflict with an existing default column name in the **DataColumnCollection**. If the supplied name already exists, an exception is thrown.","leadings":["","> "],"nodes":[{"content":"If a column name is not supplied for a column, the column is given an incremental default name of Column*N,* starting with \"Column1\", when it is added to the **DataColumnCollection**. We recommend that you avoid the naming convention of \"Column*N*\" when you supply a column name, because the name you supply may conflict with an existing default column name in the **DataColumnCollection**. If the supplied name already exists, an exception is thrown.","pos":[12,463],"nodes":[{"content":"If a column name is not supplied for a column, the column is given an incremental default name of Column<bpt id=\"p1\">*</bpt>N,<ept id=\"p1\">*</ept> starting with \"Column1\", when it is added to the <bpt id=\"p2\">**</bpt>DataColumnCollection<ept id=\"p2\">**</ept>.","pos":[0,183],"source":"If a column name is not supplied for a column, the column is given an incremental default name of Column*N,* starting with \"Column1\", when it is added to the **DataColumnCollection**."},{"content":"We recommend that you avoid the naming convention of \"Column<bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept>\" when you supply a column name, because the name you supply may conflict with an existing default column name in the <bpt id=\"p2\">**</bpt>DataColumnCollection<ept id=\"p2\">**</ept>.","pos":[184,390],"source":" We recommend that you avoid the naming convention of \"Column*N*\" when you supply a column name, because the name you supply may conflict with an existing default column name in the **DataColumnCollection**."},{"content":"If the supplied name already exists, an exception is thrown.","pos":[391,451]}]}]},{"content":"If you are using <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as the <ph id=\"ph2\">&lt;xref:System.Data.DataColumn.DataType%2A&gt;</ph> of a <ph id=\"ph3\">&lt;xref:System.Data.DataColumn&gt;</ph> in the <ph id=\"ph4\">&lt;xref:System.Data.DataTable&gt;</ph>, XML serialization will not work when you read in data.","pos":[2983,3207],"source":"If you are using <xref:System.Xml.Linq.XElement> as the <xref:System.Data.DataColumn.DataType%2A> of a <xref:System.Data.DataColumn> in the <xref:System.Data.DataTable>, XML serialization will not work when you read in data."},{"content":"For example, if you write out a <ph id=\"ph1\">&lt;xref:System.Xml.XmlDocument&gt;</ph> by using the <ph id=\"ph2\">`DataTable.WriteXml`</ph> method, upon serialization to XML there is an additional parent node in the <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[3208,3412],"source":" For example, if you write out a <xref:System.Xml.XmlDocument> by using the `DataTable.WriteXml` method, upon serialization to XML there is an additional parent node in the <xref:System.Xml.Linq.XElement>."},{"content":"To work around this problem, use the <ph id=\"ph1\">&lt;xref:System.Data.SqlTypes.SqlXml&gt;</ph> type instead of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[3413,3533],"source":" To work around this problem, use the <xref:System.Data.SqlTypes.SqlXml> type instead of <xref:System.Xml.Linq.XElement>."},{"content":"<ph id=\"ph1\">`ReadXml`</ph> and <ph id=\"ph2\">`WriteXml`</ph> work correctly with <ph id=\"ph3\">&lt;xref:System.Data.SqlTypes.SqlXml&gt;</ph>.","pos":[3534,3614],"source":"`ReadXml` and `WriteXml` work correctly with <xref:System.Data.SqlTypes.SqlXml>."},{"pos":[3623,3631],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3740,3870],"content":"<bpt id=\"p1\">[</bpt>DataTable Schema Definition<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/datatable-schema-definition.md)</ept>","source":"[DataTable Schema Definition](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/datatable-schema-definition.md)"},{"pos":[3873,3969],"content":"<bpt id=\"p1\">[</bpt>DataTables<ept id=\"p1\">](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/datatables.md)</ept>","source":"[DataTables](../../../../../docs/framework/data/adonet/dataset-datatable-dataview/datatables.md)"},{"pos":[3972,4076],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}