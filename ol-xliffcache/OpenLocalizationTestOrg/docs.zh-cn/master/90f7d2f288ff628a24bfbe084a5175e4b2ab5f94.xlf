<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="xelement-class-overview.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90f7d2f288ff628a24bfbe084a5175e4b2ab5f94</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\xelement-class-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8183bcfe533b394a7c6b0db83b10d09ea825c80f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">407b29ee771eb826cd1ba2729d102b581b489622</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>XElement Class Overview (C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XElement Class Overview (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class is one of the fundamental classes in <ph id="ph2">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It represents an XML element.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use this class to create elements; change the content of the element; add, change, or delete child elements; add attributes to an element; or serialize the contents of an element in text form.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can also interoperate with other classes in <ph id="ph1">&lt;xref:System.Xml?displayProperty=nameWithType&gt;</ph>, such as <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlWriter&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>XElement Functionality</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic describes the functionality provided by the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Constructing XML Trees</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can construct XML trees in a variety of ways, including the following:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can construct an XML tree in code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating XML Trees (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can parse XML from various sources, including a <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>, text files, or a Web address (URL).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Parsing XML (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/parsing-xml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can use an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to populate the tree.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xml.Linq.XNode.ReadFrom%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you have a module that can write content to an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>, you can use the <ph id="ph2">&lt;xref:System.Xml.Linq.XContainer.CreateWriter%2A&gt;</ph> method to create a writer, pass the writer to the module, and then use the content that is written to the <ph id="ph3">&lt;xref:System.Xml.XmlWriter&gt;</ph> to populate the XML tree.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, the most common way to create an XML tree is as follows:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Another very common technique for creating an XML tree involves using the results of a <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query to populate an XML tree, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Serializing XML Trees</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can serialize the XML tree to a <ph id="ph1">&lt;xref:System.IO.File&gt;</ph>, a <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph>, or an <ph id="ph3">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Serializing XML Trees (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/serializing-xml-trees.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Retrieving XML Data via Axis Methods</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can use axis methods to retrieve attributes, child elements, descendant elements, and ancestor elements.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> queries operate on axis methods, and provide several flexible and powerful ways to navigate through and process an XML tree.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>LINQ to XML Axes (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Querying XML Trees</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can write <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> queries that extract data from an XML tree.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Querying XML Trees (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/querying-xml-trees.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Modifying XML Trees</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can modify an element in a variety of ways, including changing its content or attributes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can also remove an element from its parent.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Modifying XML Trees (LINQ to XML) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/modifying-xml-trees-linq-to-xml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to XML Programming Overview (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-programming-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>