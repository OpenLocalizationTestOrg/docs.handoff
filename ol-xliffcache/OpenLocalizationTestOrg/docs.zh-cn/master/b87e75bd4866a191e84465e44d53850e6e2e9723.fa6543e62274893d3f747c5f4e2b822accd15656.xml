{"content":"---\ntitle: \"as - C# Reference\"\nms.custom: seodec18\n\nms.date: 10/11/2018\nf1_keywords: \n  - \"as_CSharpKeyword\"\n  - \"as\"\nhelpviewer_keywords: \n  - \"type conversion [C#], as keyword\"\n  - \"as keyword [C#]\"\nms.assetid: a9be126b-cbf4-4990-a70d-d0e1983cad0e\n---\n# as (C# Reference)\nYou can use the `as` operator to perform certain types of conversions between compatible reference types or [nullable types](../../../csharp/programming-guide/nullable-types/index.md). The following code shows an example.  \n  \n[!code-csharp[csrefKeywordsOperator#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsOperator/CS/csrefKeywordsOperators.cs#1)]\n\nAs the example shows, you need to compare the result of the `as` expression with `null` to check if a conversion is successful. Beginning with C# 7.0, you can use the [is](is.md) expression both to test that a conversion succeeds and conditionally assign a variable when the conversion succeeds. In many scenarios, it's more concise than using the `as` operator. For more information, see the [Type pattern](is.md#type) section of the [`is` operator](is.md) article.\n  \n## Remarks  \n The `as` operator is like a cast operation. However, if the conversion isn't possible, `as` returns `null` instead of raising an exception. Consider the following example:  \n  \n```csharp  \nexpression as type  \n```  \n  \n The code is equivalent to the following expression except that the `expression` variable is evaluated only one time.  \n  \n```csharp  \nexpression is type ? (type)expression : (type)null  \n```  \n  \n Note that the `as` operator performs only reference conversions, nullable conversions, and boxing conversions. The `as` operator can't perform other conversions, such as user-defined conversions, which should instead be performed by using cast expressions.  \n  \n## Example  \n\n[!code-csharp[csrefKeywordsOperator#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsOperator/CS/csrefKeywordsOperators.cs#2)]\n  \n## C# Language Specification  \n\nFor more information, see [The as operator](~/_csharplang/spec/expressions.md#the-as-operator) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n \n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [is](../../../csharp/language-reference/keywords/is.md)\n- [?: Operator](../../../csharp/language-reference/operators/conditional-operator.md)\n- [Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)\n","nodes":[{"pos":[4,249],"embed":true,"restype":"x-metadata","content":"title: \"as - C# Reference\"\nms.custom: seodec18\n\nms.date: 10/11/2018\nf1_keywords: \n  - \"as_CSharpKeyword\"\n  - \"as\"\nhelpviewer_keywords: \n  - \"type conversion [C#], as keyword\"\n  - \"as keyword [C#]\"\nms.assetid: a9be126b-cbf4-4990-a70d-d0e1983cad0e","nodes":[{"content":"as - C# Reference","nodes":[{"pos":[0,17],"content":"as - C# Reference","nodes":[{"content":"as - C# Reference","pos":[0,17]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[256,273],"content":"as (C# Reference)","linkify":"as (C# Reference)","nodes":[{"content":"as (C# Reference)","pos":[0,17]}]},{"content":"You can use the <ph id=\"ph1\">`as`</ph> operator to perform certain types of conversions between compatible reference types or <bpt id=\"p1\">[</bpt>nullable types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept>.","pos":[274,458],"source":"You can use the `as` operator to perform certain types of conversions between compatible reference types or [nullable types](../../../csharp/programming-guide/nullable-types/index.md)."},{"content":"The following code shows an example.","pos":[459,495]},{"content":"As the example shows, you need to compare the result of the <ph id=\"ph1\">`as`</ph> expression with <ph id=\"ph2\">`null`</ph> to check if a conversion is successful.","pos":[643,770],"source":"As the example shows, you need to compare the result of the `as` expression with `null` to check if a conversion is successful."},{"content":"Beginning with C# 7.0, you can use the <bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](is.md)</ept> expression both to test that a conversion succeeds and conditionally assign a variable when the conversion succeeds.","pos":[771,938],"source":" Beginning with C# 7.0, you can use the [is](is.md) expression both to test that a conversion succeeds and conditionally assign a variable when the conversion succeeds."},{"content":"In many scenarios, it's more concise than using the <ph id=\"ph1\">`as`</ph> operator.","pos":[939,1005],"source":" In many scenarios, it's more concise than using the `as` operator."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Type pattern<ept id=\"p1\">](is.md#type)</ept> section of the <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`is`</ph> operator<ept id=\"p2\">](is.md)</ept> article.","pos":[1006,1109],"source":" For more information, see the [Type pattern](is.md#type) section of the [`is` operator](is.md) article."},{"pos":[1116,1123],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`as`</ph> operator is like a cast operation.","pos":[1127,1170],"source":"The `as` operator is like a cast operation."},{"content":"However, if the conversion isn't possible, <ph id=\"ph1\">`as`</ph> returns <ph id=\"ph2\">`null`</ph> instead of raising an exception.","pos":[1171,1266],"source":" However, if the conversion isn't possible, `as` returns `null` instead of raising an exception."},{"content":"Consider the following example:","pos":[1267,1298]},{"pos":[1347,1463],"content":"The code is equivalent to the following expression except that the <ph id=\"ph1\">`expression`</ph> variable is evaluated only one time.","source":"The code is equivalent to the following expression except that the `expression` variable is evaluated only one time."},{"content":"Note that the <ph id=\"ph1\">`as`</ph> operator performs only reference conversions, nullable conversions, and boxing conversions.","pos":[1544,1654],"source":"Note that the `as` operator performs only reference conversions, nullable conversions, and boxing conversions."},{"content":"The <ph id=\"ph1\">`as`</ph> operator can't perform other conversions, such as user-defined conversions, which should instead be performed by using cast expressions.","pos":[1655,1800],"source":" The `as` operator can't perform other conversions, such as user-defined conversions, which should instead be performed by using cast expressions."},{"pos":[1809,1816],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1967,1992],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>The as operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#the-as-operator)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[1996,2162],"source":"For more information, see [The as operator](~/_csharplang/spec/expressions.md#the-as-operator) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[2163,2239]},{"pos":[2245,2253],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2257,2316],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[2319,2385],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2388,2455],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[2458,2513],"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../../../csharp/language-reference/keywords/is.md)</ept>","source":"[is](../../../csharp/language-reference/keywords/is.md)"},{"pos":[2516,2599],"content":"<bpt id=\"p1\">[</bpt>?: Operator<ept id=\"p1\">](../../../csharp/language-reference/operators/conditional-operator.md)</ept>","source":"[?: Operator](../../../csharp/language-reference/operators/conditional-operator.md)"},{"pos":[2602,2687],"content":"<bpt id=\"p1\">[</bpt>Operator Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept>","source":"[Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)"}]}