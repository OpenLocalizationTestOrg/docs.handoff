{"content":"---\ntitle: \"How to: Bind a Windows Forms Control to a Type\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"controls [Windows Forms], binding to a type\"\n  - \"BindingSource component [Windows Forms], binding to a type\"\n  - \"types [Windows Forms], binding controls to\"\nms.assetid: 94faeebb-d2bc-45d6-86d7-96a42661b43d\n---\n# How to: Bind a Windows Forms Control to a Type\nWhen you are building controls that interact with data, you will sometimes find it necessary to bind a control to a type, rather than an object. This situation arises especially at design time, when data may not be available, but your data-bound controls still need to display information from a type's public interface. For example, you may bind a <xref:System.Windows.Forms.DataGridView> control to an object exposed by a Web service and want the <xref:System.Windows.Forms.DataGridView> control to label its columns at design time with the member names of a custom type.  \n  \n You can easily bind a control to a type with the <xref:System.Windows.Forms.BindingSource> component.  \n  \n## Example  \n The following code example demonstrates how to bind a <xref:System.Windows.Forms.DataGridView> control to a custom type by using a <xref:System.Windows.Forms.BindingSource> component. When you run the example, you'll notice the <xref:System.Windows.Forms.DataGridView> has labeled columns that reflect the properties of a `Customer` object, before the control is populated with data. The example has an Add Customer button to add data to the <xref:System.Windows.Forms.DataGridView> control. When you click the button, a new `Customer` object is added to the <xref:System.Windows.Forms.BindingSource>. In a real-world scenario, the data might be obtained by a call to a Web service or other data source.  \n  \n [!code-csharp[System.Windows.Forms.DataConnector.BindingToType#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.BindingToType/CS/form1.cs#1)]\n [!code-vb[System.Windows.Forms.DataConnector.BindingToType#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.BindingToType/VB/form1.vb#1)]  \n  \n## Compiling the Code  \n This example requires:  \n  \n-   References to the System and System.Windows.Forms assemblies.  \n  \n For information about building this example from the command line for Visual Basic or Visual C#, see [Building from the Command Line](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md) or [Command-line Building With csc.exe](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md). You can also build this example in Visual Studio by pasting the code into a new project.  \n  \n## See also\n\n- <xref:System.Windows.Forms.BindingNavigator>\n- <xref:System.Windows.Forms.DataGridView>\n- <xref:System.Windows.Forms.BindingSource>\n- [BindingSource Component](bindingsource-component.md)\n","nodes":[{"pos":[4,350],"embed":true,"restype":"x-metadata","content":"title: \"How to: Bind a Windows Forms Control to a Type\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"controls [Windows Forms], binding to a type\"\n  - \"BindingSource component [Windows Forms], binding to a type\"\n  - \"types [Windows Forms], binding controls to\"\nms.assetid: 94faeebb-d2bc-45d6-86d7-96a42661b43d","nodes":[{"content":"How to: Bind a Windows Forms Control to a Type","nodes":[{"pos":[0,46],"content":"How to: Bind a Windows Forms Control to a Type","nodes":[{"content":"How to: Bind a Windows Forms Control to a Type","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[357,403],"content":"How to: Bind a Windows Forms Control to a Type","linkify":"How to: Bind a Windows Forms Control to a Type","nodes":[{"content":"How to: Bind a Windows Forms Control to a Type","pos":[0,46]}]},{"content":"When you are building controls that interact with data, you will sometimes find it necessary to bind a control to a type, rather than an object.","pos":[404,548]},{"content":"This situation arises especially at design time, when data may not be available, but your data-bound controls still need to display information from a type's public interface.","pos":[549,724]},{"content":"For example, you may bind a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control to an object exposed by a Web service and want the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control to label its columns at design time with the member names of a custom type.","pos":[725,977],"source":" For example, you may bind a <xref:System.Windows.Forms.DataGridView> control to an object exposed by a Web service and want the <xref:System.Windows.Forms.DataGridView> control to label its columns at design time with the member names of a custom type."},{"pos":[984,1085],"content":"You can easily bind a control to a type with the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.BindingSource&gt;</ph> component.","source":"You can easily bind a control to a type with the <xref:System.Windows.Forms.BindingSource> component."},{"pos":[1094,1101],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates how to bind a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control to a custom type by using a <ph id=\"ph2\">&lt;xref:System.Windows.Forms.BindingSource&gt;</ph> component.","pos":[1105,1288],"source":"The following code example demonstrates how to bind a <xref:System.Windows.Forms.DataGridView> control to a custom type by using a <xref:System.Windows.Forms.BindingSource> component."},{"content":"When you run the example, you'll notice the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> has labeled columns that reflect the properties of a <ph id=\"ph2\">`Customer`</ph> object, before the control is populated with data.","pos":[1289,1488],"source":" When you run the example, you'll notice the <xref:System.Windows.Forms.DataGridView> has labeled columns that reflect the properties of a `Customer` object, before the control is populated with data."},{"content":"The example has an Add Customer button to add data to the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control.","pos":[1489,1596],"source":" The example has an Add Customer button to add data to the <xref:System.Windows.Forms.DataGridView> control."},{"content":"When you click the button, a new <ph id=\"ph1\">`Customer`</ph> object is added to the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.BindingSource&gt;</ph>.","pos":[1597,1706],"source":" When you click the button, a new `Customer` object is added to the <xref:System.Windows.Forms.BindingSource>."},{"content":"In a real-world scenario, the data might be obtained by a call to a Web service or other data source.","pos":[1707,1808]},{"pos":[2181,2199],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"This example requires:","pos":[2203,2225]},{"content":"References to the System and System.Windows.Forms assemblies.","pos":[2235,2296]},{"content":"For information about building this example from the command line for Visual Basic or Visual C#, see <bpt id=\"p1\">[</bpt>Building from the Command Line<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept> or <bpt id=\"p2\">[</bpt>Command-line Building With csc.exe<ept id=\"p2\">](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>.","pos":[2303,2657],"source":"For information about building this example from the command line for Visual Basic or Visual C#, see [Building from the Command Line](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md) or [Command-line Building With csc.exe](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)."},{"content":"You can also build this example in Visual Studio by pasting the code into a new project.","pos":[2658,2746]},{"pos":[2755,2763],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2901,2954],"content":"<bpt id=\"p1\">[</bpt>BindingSource Component<ept id=\"p1\">](bindingsource-component.md)</ept>","source":"[BindingSource Component](bindingsource-component.md)"}]}