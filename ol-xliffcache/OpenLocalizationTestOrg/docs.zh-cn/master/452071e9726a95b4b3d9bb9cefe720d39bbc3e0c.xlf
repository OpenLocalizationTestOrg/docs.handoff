<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="composing-streams.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">452071e9726a95b4b3d9bb9cefe720d39bbc3e0c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\io\composing-streams.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90d24b1ab24bee3ecadf5bed2efc5ef066ebbbd9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66b3fde08ef20f67560eb36113e99f1e088e57a1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Compose streams</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compose streams</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>backing store<ept id="p1">*</ept> is a storage medium, such as a disk or memory.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each different backing store implements its own stream as an implementation of the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Each stream type reads and writes bytes from and to its given backing store.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Streams that connect to backing stores are called <bpt id="p1">*</bpt>base streams<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Base streams have constructors with the parameters necessary to connect the stream to the backing store.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> has constructors that specify a path parameter, which specifies how the file will be shared by processes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The design of the <ph id="ph1">&lt;xref:System.IO&gt;</ph> classes provides simplified stream composition.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can attach base streams to one or more pass-through streams that provide the functionality you want.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can attach a reader or writer to the end of the chain, so the preferred types can be read or written easily.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following code examples create a <bpt id="p1">**</bpt>FileStream<ept id="p1">**</ept> around the existing <bpt id="p2">*</bpt>MyFile.txt<ept id="p2">*</ept> in order to buffer <bpt id="p3">*</bpt>MyFile.txt<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>FileStreams<ept id="p1">**</ept> are buffered by default.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The examples assume that a file named <bpt id="p1">*</bpt>MyFile.txt<ept id="p1">*</ept> already exists in the same folder as the app.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example: Use StreamReader</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> to read characters from the <bpt id="p1">**</bpt>FileStream<ept id="p1">**</ept>, which is passed to the <bpt id="p2">**</bpt>StreamReader<ept id="p2">**</ept> as its constructor argument.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.StreamReader.ReadLine%2A?displayProperty=nameWithType&gt;</ph> then reads until <ph id="ph2">&lt;xref:System.IO.StreamReader.Peek%2A?displayProperty=nameWithType&gt;</ph> finds no more characters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example: Use BinaryReader</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> to read bytes from the <bpt id="p1">**</bpt>FileStream<ept id="p1">**</ept>, which is passed to the <bpt id="p2">**</bpt>BinaryReader<ept id="p2">**</ept> as its constructor argument.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader.ReadByte%2A&gt;</ph> then reads until <ph id="ph2">&lt;xref:System.IO.BinaryReader.PeekChar%2A&gt;</ph> finds no more bytes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>