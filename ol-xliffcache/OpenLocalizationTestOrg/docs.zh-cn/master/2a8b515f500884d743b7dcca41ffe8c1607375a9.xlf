<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-handling-events.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a8b515f500884d743b7dcca41ffe8c1607375a9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\events\walkthrough-handling-events.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d83eb549b82f0a5024c8e0a19b9f3fb93764810a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a14d4b0ded1a111ac0854f18cd583948fdd4f66</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Handling Events (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Handling Events (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This is the second of two topics that demonstrate how to work with events.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The first topic, <bpt id="p1">[</bpt>Walkthrough: Declaring and Raising Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/walkthrough-declaring-and-raising-events.md)</ept>, shows how to declare and raise events.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This section uses the form and class from that walkthrough to show how to handle events when they take place.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Widget`</ph> class example uses traditional event-handling statements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Visual Basic provides other techniques for working with events.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As an exercise, you can modify this example to use the <ph id="ph1">`AddHandler`</ph> and <ph id="ph2">`Handles`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To handle the PercentDone event of the Widget class</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Place the following code in <ph id="ph1">`Form1`</ph>:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WithEvents`</ph> keyword specifies that the variable <ph id="ph2">`mWidget`</ph> is used to handle an object's events.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You specify the kind of object by supplying the name of the class from which the object will be created.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`mWidget`</ph> is declared in <ph id="ph2">`Form1`</ph> because <ph id="ph3">`WithEvents`</ph> variables must be class-level.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is true regardless of the type of class you place them in.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`mblnCancel`</ph> is used to cancel the <ph id="ph2">`LongTask`</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Writing Code to Handle an Event</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As soon as you declare a variable using <ph id="ph1">`WithEvents`</ph>, the variable name appears in the left drop-down list of the class's <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When you select <ph id="ph1">`mWidget`</ph>, the <ph id="ph2">`Widget`</ph> class's events appear in the right drop-down list.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Selecting an event displays the corresponding event procedure, with the prefix <ph id="ph1">`mWidget`</ph> and an underscore.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>All the event procedures associated with a <ph id="ph1">`WithEvents`</ph> variable are given the variable name as a prefix.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To handle an event</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Select <ph id="ph1">`mWidget`</ph> from the left drop-down list in the <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Select the <ph id="ph1">`PercentDone`</ph> event from the right drop-down list.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept> opens the <ph id="ph1">`mWidget_PercentDone`</ph> event procedure.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept> is useful, but not required, for inserting new event handlers.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this walkthrough, it is more direct to just copy the event handlers directly into your code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`mWidget_PercentDone`</ph> event handler:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Whenever the <ph id="ph1">`PercentDone`</ph> event is raised, the event procedure displays the percent complete in a <ph id="ph2">`Label`</ph> control.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DoEvents`</ph> method allows the label to repaint, and also gives the user the opportunity to click the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Add the following code for the <ph id="ph1">`Button2_Click`</ph> event handler:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the user clicks the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button while <ph id="ph1">`LongTask`</ph> is running, the <ph id="ph2">`Button2_Click`</ph> event is executed as soon as the <ph id="ph3">`DoEvents`</ph> statement allows event processing to occur.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The class-level variable <ph id="ph1">`mblnCancel`</ph> is set to <ph id="ph2">`True`</ph>, and the <ph id="ph3">`mWidget_PercentDone`</ph> event then tests it and sets the <ph id="ph4">`ByRef Cancel`</ph> argument to <ph id="ph5">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Connecting a WithEvents Variable to an Object</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Form1`</ph> is now set up to handle a <ph id="ph2">`Widget`</ph> object's events.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>All that remains is to find a <ph id="ph1">`Widget`</ph> somewhere.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When you declare a variable <ph id="ph1">`WithEvents`</ph> at design time, no object is associated with it.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`WithEvents`</ph> variable is just like any other object variable.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You have to create an object and assign a reference to it with the <ph id="ph1">`WithEvents`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To create an object and assign a reference to it</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>(Form1 Events)<ept id="p1">**</ept> from the left drop-down list in the <bpt id="p2">**</bpt>Code Editor<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Select the <ph id="ph1">`Load`</ph> event from the right drop-down list.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Code Editor<ept id="p1">**</ept> opens the <ph id="ph1">`Form1_Load`</ph> event procedure.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Add the following code for the <ph id="ph1">`Form1_Load`</ph> event procedure to create the <ph id="ph2">`Widget`</ph>:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When this code executes, Visual Basic creates a <ph id="ph1">`Widget`</ph> object and connects its events to the event procedures associated with <ph id="ph2">`mWidget`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>From that point on, whenever the <ph id="ph1">`Widget`</ph> raises its <ph id="ph2">`PercentDone`</ph> event, the <ph id="ph3">`mWidget_PercentDone`</ph> event procedure is executed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To call the LongTask method</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`Button1_Click`</ph> event handler:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Before the <ph id="ph1">`LongTask`</ph> method is called, the label that displays the percent complete must be initialized, and the class-level <ph id="ph2">`Boolean`</ph> flag for canceling the method must be set to <ph id="ph3">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LongTask`</ph> is called with a task duration of 12.2 seconds.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PercentDone`</ph> event is raised once every one-third of a second.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Each time the event is raised, the <ph id="ph1">`mWidget_PercentDone`</ph> event procedure is executed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`LongTask`</ph> is done, <ph id="ph2">`mblnCancel`</ph> is tested to see if <ph id="ph3">`LongTask`</ph> ended normally, or if it stopped because <ph id="ph4">`mblnCancel`</ph> was set to <ph id="ph5">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The percent complete is updated only in the former case.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To run the program</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Press F5 to put the project in run mode.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Start Task<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Each time the <ph id="ph1">`PercentDone`</ph> event is raised, the label is updated with the percentage of the task that is complete.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button to stop the task.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Notice that the appearance of the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button does not change immediately when you click it.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Click`</ph> event cannot happen until the <ph id="ph2">`My.Application.DoEvents`</ph> statement allows event processing.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My.Application.DoEvents`</ph> method does not process events in exactly the same way as the form does.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, in this walkthrough, you must click the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button twice.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To allow the form to handle the events directly, you can use multithreading.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Managed Threading<ept id="p1">](../../../../standard/threading/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You may find it instructive to run the program with F11 and step through the code a line at a time.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can clearly see how execution enters <ph id="ph1">`LongTask`</ph>, and then briefly re-enters <ph id="ph2">`Form1`</ph> each time the <ph id="ph3">`PercentDone`</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>What would happen if, while execution was back in the code of <ph id="ph1">`Form1`</ph>, the <ph id="ph2">`LongTask`</ph> method were called again?</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>At worst, a stack overflow might occur if <ph id="ph1">`LongTask`</ph> were called every time the event was raised.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can cause the variable <ph id="ph1">`mWidget`</ph> to handle events for a different <ph id="ph2">`Widget`</ph> object by assigning a reference to the new <ph id="ph3">`Widget`</ph> to <ph id="ph4">`mWidget`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In fact, you can make the code in <ph id="ph1">`Button1_Click`</ph> do this every time you click the button.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To handle events for a different widget</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Add the following line of code to the <ph id="ph1">`Button1_Click`</ph> procedure, immediately preceding the line that reads <ph id="ph2">`mWidget.LongTask(12.2, 0.33)`</ph>:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The code above creates a new <ph id="ph1">`Widget`</ph> each time the button is clicked.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>As soon as the <ph id="ph1">`LongTask`</ph> method completes, the reference to the <ph id="ph2">`Widget`</ph> is released, and the <ph id="ph3">`Widget`</ph> is destroyed.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`WithEvents`</ph> variable can contain only one object reference at a time, so if you assign a different <ph id="ph2">`Widget`</ph> object to <ph id="ph3">`mWidget`</ph>, the previous <ph id="ph4">`Widget`</ph> object's events will no longer be handled.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`mWidget`</ph> is the only object variable containing a reference to the old <ph id="ph2">`Widget`</ph>, the object is destroyed.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you want to handle events from several <ph id="ph1">`Widget`</ph> objects, use the <ph id="ph2">`AddHandler`</ph> statement to process events from each object separately.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can declare as many <ph id="ph1">`WithEvents`</ph> variables as you need, but arrays of <ph id="ph2">`WithEvents`</ph> variables are not supported.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Declaring and Raising Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/walkthrough-declaring-and-raising-events.md)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>