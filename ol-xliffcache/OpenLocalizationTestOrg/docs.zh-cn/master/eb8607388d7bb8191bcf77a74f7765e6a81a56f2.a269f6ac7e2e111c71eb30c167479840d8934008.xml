{"content":"---\ntitle: \"ICorProfilerCallback2 Interface | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerCallback2\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerCallback2\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICorProfilerCallback2 interface [.NET Framework profiling]\"\nms.assetid: 4a261dba-450d-4f1f-8d98-865b58bfc992\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 21\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ICorProfilerCallback2 Interface\nProvides methods that are used by the common language runtime (CLR) to notify a code profiler when the events to which the profiler has subscribed occur. The `ICorProfilerCallback2` interface is an extension of the [ICorProfilerCallback](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md) interface. That is, it provides new callbacks introduced in the .NET Framework version 2.0.  \n  \n> [!NOTE]\n>  Each method implementation must return an HRESULT having a value of S_OK on success or E_FAIL on failure. Currently, the CLR ignores the HRESULT that is returned by each callback except [ICorProfilerCallback::ObjectReferences](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectreferences-method.md).  \n  \n## Methods  \n  \n|Method|Description|  \n|------------|-----------------|  \n|[FinalizeableObjectQueued Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-finalizeableobjectqueued-method.md)|Notifies the code profiler that an object with a finalizer has been queued to the finalizer thread for execution of its `Finalize` method.|  \n|[GarbageCollectionFinished Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md)|Notifies the profiler that a garbage collection has completed and all garbage collection callbacks have been issued for it.|  \n|[GarbageCollectionStarted Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionstarted-method.md)|Notifies the code profiler that a garbage collection has started.|  \n|[HandleCreated Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-handlecreated-method.md)|Notifies the code profiler that a garbage collection handle has been created.|  \n|[HandleDestroyed Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-handledestroyed-method.md)|Notifies the code profiler that a garbage collection handle has been destroyed.|  \n|[RootReferences2 Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-rootreferences2-method.md)|Notifies the profiler about root references after a garbage collection has occurred. This method is an extension of the [ICorProfilerCallback::RootReferences](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-rootreferences-method.md) method.|  \n|[SurvivingReferences Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-survivingreferences-method.md)|Notifies the profiler about object references that have survived a garbage collection.|  \n|[ThreadNameChanged Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-threadnamechanged-method.md)|Notifies the code profiler that the name of a thread has changed.|  \n  \n## Remarks  \n The CLR calls a method in the `ICorProfilerCallback` (or `ICorProfilerCallback2`) interface to notify the profiler when an event, to which the profiler had subscribed, occurs. This is the primary callback interface through which the CLR communicates with the code profiler.  \n  \n A code profiler must implement the methods of the `ICorProfilerCallback` interface. For the .NET Framework 2.0 and later versions, the profiler must also implement the `ICorProfilerCallback2` methods. Each method implementation must return an HRESULT having a value of S_OK on success or E_FAIL on failure. Currently, the CLR ignores the HRESULT that is returned by each callback except [ICorProfilerCallback::ObjectReferences](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectreferences-method.md).  \n  \n A code profiler must register in the Microsoft Windows registry, its COM object that implements the `ICorProfilerCallback` and `ICorProfilerCallback2` interfaces. A code profiler subscribes to the events for which it wants to receive notification by calling [ICorProfilerInfo::SetEventMask](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-seteventmask-method.md). This is usually done in the profiler's implementation of [ICorProfilerCallback::Initialize](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-initialize-method.md). The profiler is then able to receive notification from the runtime when an event is about to occur or has just occurred in an executing runtime process.  \n  \n> [!NOTE]\n>  The profiler registers a single COM object. If the profiler is targeting .NET Framework version 1.0 or 1.1, that COM object need only implement the methods of `ICorProfilerCallback`. If it is targeting .NET Framework version 2.0 and later, the COM object must also implement the methods of `ICorProfilerCallback2`.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v20plus](../../../../includes/net-current-v20plus-md.md)]  \n  \n## See Also  \n [Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)   \n [ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)   \n [ICorProfilerCallback3 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback3-interface.md)   \n [ICorProfilerCallback4 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback4-interface.md)","nodes":[{"pos":[4,627],"embed":true,"restype":"x-metadata","content":"title: \"ICorProfilerCallback2 Interface | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ICorProfilerCallback2\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerCallback2\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ICorProfilerCallback2 interface [.NET Framework profiling]\"\nms.assetid: 4a261dba-450d-4f1f-8d98-865b58bfc992\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 21\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","nodes":[{"content":"ICorProfilerCallback2 Interface | Microsoft Docs","nodes":[{"pos":[0,48],"content":"ICorProfilerCallback2 Interface | Microsoft Docs","nodes":[{"content":"ICorProfilerCallback2 Interface | Microsoft Docs","pos":[0,48]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[634,665],"content":"ICorProfilerCallback2 Interface","linkify":"ICorProfilerCallback2 Interface","nodes":[{"content":"ICorProfilerCallback2 Interface","pos":[0,31]}]},{"content":"Provides methods that are used by the common language runtime (CLR) to notify a code profiler when the events to which the profiler has subscribed occur.","pos":[666,819]},{"content":"The <ph id=\"ph1\">`ICorProfilerCallback2`</ph> interface is an extension of the <bpt id=\"p1\">[</bpt>ICorProfilerCallback<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept> interface.","pos":[820,1000],"source":" The `ICorProfilerCallback2` interface is an extension of the [ICorProfilerCallback](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md) interface."},{"content":"That is, it provides new callbacks introduced in the .NET Framework version 2.0.","pos":[1001,1081]},{"pos":[1089,1427],"content":"[!NOTE]\n Each method implementation must return an HRESULT having a value of S_OK on success or E_FAIL on failure. Currently, the CLR ignores the HRESULT that is returned by each callback except [ICorProfilerCallback::ObjectReferences](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectreferences-method.md).","leadings":["","> "],"nodes":[{"content":"Each method implementation must return an HRESULT having a value of S_OK on success or E_FAIL on failure. Currently, the CLR ignores the HRESULT that is returned by each callback except [ICorProfilerCallback::ObjectReferences](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectreferences-method.md).","pos":[9,336],"nodes":[{"content":"Each method implementation must return an HRESULT having a value of S_OK on success or E_FAIL on failure.","pos":[0,105]},{"content":"Currently, the CLR ignores the HRESULT that is returned by each callback except <bpt id=\"p1\">[</bpt>ICorProfilerCallback::ObjectReferences<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectreferences-method.md)</ept>.","pos":[106,327],"source":" Currently, the CLR ignores the HRESULT that is returned by each callback except [ICorProfilerCallback::ObjectReferences](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectreferences-method.md)."}]}]},{"pos":[1436,1443],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[1450,1456]},{"content":"Description","pos":[1457,1468]},{"pos":[1508,1650],"content":"<bpt id=\"p1\">[</bpt>FinalizeableObjectQueued Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-finalizeableobjectqueued-method.md)</ept>","source":"[FinalizeableObjectQueued Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-finalizeableobjectqueued-method.md)"},{"pos":[1651,1789],"content":"Notifies the code profiler that an object with a finalizer has been queued to the finalizer thread for execution of its <ph id=\"ph1\">`Finalize`</ph> method.","source":"Notifies the code profiler that an object with a finalizer has been queued to the finalizer thread for execution of its `Finalize` method."},{"pos":[1794,1938],"content":"<bpt id=\"p1\">[</bpt>GarbageCollectionFinished Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md)</ept>","source":"[GarbageCollectionFinished Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md)"},{"content":"Notifies the profiler that a garbage collection has completed and all garbage collection callbacks have been issued for it.","pos":[1939,2062]},{"pos":[2067,2209],"content":"<bpt id=\"p1\">[</bpt>GarbageCollectionStarted Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionstarted-method.md)</ept>","source":"[GarbageCollectionStarted Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionstarted-method.md)"},{"content":"Notifies the code profiler that a garbage collection has started.","pos":[2210,2275]},{"pos":[2280,2400],"content":"<bpt id=\"p1\">[</bpt>HandleCreated Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-handlecreated-method.md)</ept>","source":"[HandleCreated Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-handlecreated-method.md)"},{"content":"Notifies the code profiler that a garbage collection handle has been created.","pos":[2401,2478]},{"pos":[2483,2607],"content":"<bpt id=\"p1\">[</bpt>HandleDestroyed Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-handledestroyed-method.md)</ept>","source":"[HandleDestroyed Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-handledestroyed-method.md)"},{"content":"Notifies the code profiler that a garbage collection handle has been destroyed.","pos":[2608,2687]},{"pos":[2692,2816],"content":"<bpt id=\"p1\">[</bpt>RootReferences2 Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-rootreferences2-method.md)</ept>","source":"[RootReferences2 Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-rootreferences2-method.md)"},{"content":"Notifies the profiler about root references after a garbage collection has occurred.","pos":[2817,2901]},{"content":"This method is an extension of the <bpt id=\"p1\">[</bpt>ICorProfilerCallback::RootReferences<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-rootreferences-method.md)</ept> method.","pos":[2902,3081],"source":" This method is an extension of the [ICorProfilerCallback::RootReferences](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-rootreferences-method.md) method."},{"pos":[3086,3218],"content":"<bpt id=\"p1\">[</bpt>SurvivingReferences Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-survivingreferences-method.md)</ept>","source":"[SurvivingReferences Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-survivingreferences-method.md)"},{"content":"Notifies the profiler about object references that have survived a garbage collection.","pos":[3219,3305]},{"pos":[3310,3438],"content":"<bpt id=\"p1\">[</bpt>ThreadNameChanged Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-threadnamechanged-method.md)</ept>","source":"[ThreadNameChanged Method](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-threadnamechanged-method.md)"},{"content":"Notifies the code profiler that the name of a thread has changed.","pos":[3439,3504]},{"pos":[3514,3521],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The CLR calls a method in the <ph id=\"ph1\">`ICorProfilerCallback`</ph> (or <ph id=\"ph2\">`ICorProfilerCallback2`</ph>) interface to notify the profiler when an event, to which the profiler had subscribed, occurs.","pos":[3525,3700],"source":"The CLR calls a method in the `ICorProfilerCallback` (or `ICorProfilerCallback2`) interface to notify the profiler when an event, to which the profiler had subscribed, occurs."},{"content":"This is the primary callback interface through which the CLR communicates with the code profiler.","pos":[3701,3798]},{"content":"A code profiler must implement the methods of the <ph id=\"ph1\">`ICorProfilerCallback`</ph> interface.","pos":[3805,3888],"source":"A code profiler must implement the methods of the `ICorProfilerCallback` interface."},{"content":"For the .NET Framework 2.0 and later versions, the profiler must also implement the <ph id=\"ph1\">`ICorProfilerCallback2`</ph> methods.","pos":[3889,4005],"source":" For the .NET Framework 2.0 and later versions, the profiler must also implement the `ICorProfilerCallback2` methods."},{"content":"Each method implementation must return an HRESULT having a value of S_OK on success or E_FAIL on failure.","pos":[4006,4111]},{"content":"Currently, the CLR ignores the HRESULT that is returned by each callback except <bpt id=\"p1\">[</bpt>ICorProfilerCallback::ObjectReferences<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectreferences-method.md)</ept>.","pos":[4112,4333],"source":" Currently, the CLR ignores the HRESULT that is returned by each callback except [ICorProfilerCallback::ObjectReferences](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectreferences-method.md)."},{"content":"A code profiler must register in the Microsoft Windows registry, its COM object that implements the <ph id=\"ph1\">`ICorProfilerCallback`</ph> and <ph id=\"ph2\">`ICorProfilerCallback2`</ph> interfaces.","pos":[4340,4502],"source":"A code profiler must register in the Microsoft Windows registry, its COM object that implements the `ICorProfilerCallback` and `ICorProfilerCallback2` interfaces."},{"content":"A code profiler subscribes to the events for which it wants to receive notification by calling <bpt id=\"p1\">[</bpt>ICorProfilerInfo::SetEventMask<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-seteventmask-method.md)</ept>.","pos":[4503,4723],"source":" A code profiler subscribes to the events for which it wants to receive notification by calling [ICorProfilerInfo::SetEventMask](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-seteventmask-method.md)."},{"content":"This is usually done in the profiler's implementation of <bpt id=\"p1\">[</bpt>ICorProfilerCallback::Initialize<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-initialize-method.md)</ept>.","pos":[4724,4910],"source":" This is usually done in the profiler's implementation of [ICorProfilerCallback::Initialize](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-initialize-method.md)."},{"content":"The profiler is then able to receive notification from the runtime when an event is about to occur or has just occurred in an executing runtime process.","pos":[4911,5063]},{"pos":[5071,5396],"content":"[!NOTE]\n The profiler registers a single COM object. If the profiler is targeting .NET Framework version 1.0 or 1.1, that COM object need only implement the methods of `ICorProfilerCallback`. If it is targeting .NET Framework version 2.0 and later, the COM object must also implement the methods of `ICorProfilerCallback2`.","leadings":["","> "],"nodes":[{"content":"The profiler registers a single COM object. If the profiler is targeting .NET Framework version 1.0 or 1.1, that COM object need only implement the methods of `ICorProfilerCallback`. If it is targeting .NET Framework version 2.0 and later, the COM object must also implement the methods of `ICorProfilerCallback2`.","pos":[9,323],"nodes":[{"content":"The profiler registers a single COM object.","pos":[0,43]},{"content":"If the profiler is targeting .NET Framework version 1.0 or 1.1, that COM object need only implement the methods of <ph id=\"ph1\">`ICorProfilerCallback`</ph>.","pos":[44,182],"source":" If the profiler is targeting .NET Framework version 1.0 or 1.1, that COM object need only implement the methods of `ICorProfilerCallback`."},{"content":"If it is targeting .NET Framework version 2.0 and later, the COM object must also implement the methods of <ph id=\"ph1\">`ICorProfilerCallback2`</ph>.","pos":[183,314],"source":" If it is targeting .NET Framework version 2.0 and later, the COM object must also implement the methods of `ICorProfilerCallback2`."}]}]},{"pos":[5405,5417],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[5421,5525],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[5532,5566],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[5573,5598],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[5605,5633],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept>","source":"**.NET Framework Versions:**"},{"pos":[5722,5730],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Profiling Interfaces<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)</ept><ph id=\"ph1\"> </ph>","pos":[5734,5833],"source":"[Profiling Interfaces](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md) "},{"content":"<bpt id=\"p1\">[</bpt>ICorProfilerCallback Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[5837,5956],"source":"[ICorProfilerCallback Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md) "},{"content":"<bpt id=\"p1\">[</bpt>ICorProfilerCallback3 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback3-interface.md)</ept><ph id=\"ph1\"> </ph>","pos":[5960,6081],"source":"[ICorProfilerCallback3 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback3-interface.md) "},{"content":"<bpt id=\"p1\">[</bpt>ICorProfilerCallback4 Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback4-interface.md)</ept>","pos":[6085,6205],"source":"[ICorProfilerCallback4 Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback4-interface.md)"}]}