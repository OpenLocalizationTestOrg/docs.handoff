<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-a-data-contract-resolver.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1c545d84db68f4b13925dd9088cc9d81050b5e7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\using-a-data-contract-resolver.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39e5a6d963ba43d741fa160744970b87e45a650b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc9730232edfe8f8ce23daf71a996b022b2b06ae</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using a Data Contract Resolver</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using a Data Contract Resolver</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A data contract resolver allows you to configure known types dynamically.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Known types are required when serializing or deserializing a type not expected by a data contract.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about known types, see <bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Known types are normally specified statically.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This means you would have to know all the possible types an operation may receive while implementing the operation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are scenarios in which this is not true and being able to specify known types dynamically is important.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating a Data Contract Resolver</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating a data contract resolver involves implementing two methods, <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractResolver.TryResolveType%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractResolver.ResolveName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These two methods implement callbacks that are used during serialization and deserialization, respectively.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractResolver.TryResolveType%2A&gt;</ph> method is invoked during serialization and takes a data contract type and maps it to an <ph id="ph2">`xsi:type`</ph> name and namespace.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractResolver.ResolveName%2A&gt;</ph> method is invoked during deserialization and takes an <ph id="ph2">`xsi:type`</ph> name and namespace and resolves it to a data contract type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Both of these methods have a <ph id="ph1">`knownTypeResolver`</ph> parameter that can be used to use the default known type resolver in your implementation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example shows how to implement a <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph> to map to and from a data contract type named <ph id="ph2">`Customer`</ph> derived from a data contract type <ph id="ph3">`Person`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Once you have defined a <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph> you can use it by passing it to the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> constructor as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can specify a <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph> in a call to the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer.ReadObject%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer.WriteObject%2A?displayProperty=nameWithType&gt;</ph> methods, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Or you can set it on the <ph id="ph1">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt;</ph> as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can declaratively specify a data contract resolver by implementing an attribute that can be applied to a service.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>KnownAssemblyAttribute<ept id="p1">](../../../../docs/framework/wcf/samples/knownassemblyattribute.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This sample implements an attribute called "KnownAssembly" that adds a custom data contract resolver to the serviceâ€™s behavior.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-known-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataContractSerializer Sample<ept id="p1">](../../../../docs/framework/wcf/samples/datacontractserializer-sample.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>KnownAssemblyAttribute<ept id="p1">](../../../../docs/framework/wcf/samples/knownassemblyattribute.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>