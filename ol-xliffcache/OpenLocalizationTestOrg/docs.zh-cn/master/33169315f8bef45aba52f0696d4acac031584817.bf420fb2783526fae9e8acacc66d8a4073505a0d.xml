{"content":"---\ntitle: \"How to: Identify a nullable type - C# Programming Guide\"\nms.custom: seodec18\ndescription: \"Learn how to determine whether a type is a nullable type or an instance is of a nullable type\"\nms.date: 09/24/2018\nhelpviewer_keywords: \n  - \"nullable types [C#], identifying\"\nms.assetid: d4b67ee2-66e8-40c1-ae9d-545d32c71387\n---\n# How to: Identify a nullable type (C# Programming Guide)\n\nThe following example shows how to determine whether a <xref:System.Type?displayProperty=nameWithType> instance represents a closed generic nullable type, that is, the <xref:System.Nullable%601?displayProperty=nameWithType> type with a specified type parameter `T`:\n\n[!code-csharp-interactive[whether Type is nullable](../../../../samples/snippets/csharp/programming-guide/nullable-types/IdentifyNullableType.cs#1)]\n\nAs the example shows, you use the [typeof](../../language-reference/keywords/typeof.md) operator to create a <xref:System.Type?displayProperty=nameWithType> object.  \n  \nIf you want to determine whether an instance is of a nullable type, don't use the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to get a <xref:System.Type> instance to be tested with the preceding code. When you call the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method on an instance of a nullable type, the instance is [boxed](using-nullable-types.md#boxing-and-unboxing) to <xref:System.Object>. As boxing of a non-null instance of a nullable type is equivalent to boxing of a value of the underlying type, <xref:System.Object.GetType%2A> returns a <xref:System.Type> object that represents the underlying type of a nullable type:\n\n[!code-csharp-interactive[GetType example](../../../../samples/snippets/csharp/programming-guide/nullable-types/IdentifyNullableType.cs#2)]\n\nDon't use the [is](../../language-reference/keywords/is.md) operator to determine whether an instance is of a nullable type. As the following example shows, you cannot distinguish types of instances of a nullable type and its underlying type with using the `is` operator:\n\n[!code-csharp-interactive[is operator example](../../../../samples/snippets/csharp/programming-guide/nullable-types/IdentifyNullableType.cs#3)]\n\nYou can use the code presented in the following example to determine whether an instance is of a nullable type:\n\n[!code-csharp-interactive[whether an instance is of a nullable type](../../../../samples/snippets/csharp/programming-guide/nullable-types/IdentifyNullableType.cs#4)]\n  \n## See also\n\n- [Nullable types](index.md)\n- [Using nullable types](using-nullable-types.md)\n- <xref:System.Nullable.GetUnderlyingType%2A>\n","nodes":[{"pos":[4,327],"embed":true,"restype":"x-metadata","content":"title: \"How to: Identify a nullable type - C# Programming Guide\"\nms.custom: seodec18\ndescription: \"Learn how to determine whether a type is a nullable type or an instance is of a nullable type\"\nms.date: 09/24/2018\nhelpviewer_keywords: \n  - \"nullable types [C#], identifying\"\nms.assetid: d4b67ee2-66e8-40c1-ae9d-545d32c71387","nodes":[{"content":"How to: Identify a nullable type - C# Programming Guide","nodes":[{"pos":[0,55],"content":"How to: Identify a nullable type - C# Programming Guide","nodes":[{"content":"How to: Identify a nullable type - C# Programming Guide","pos":[0,55]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to determine whether a type is a nullable type or an instance is of a nullable type","nodes":[{"pos":[0,93],"content":"Learn how to determine whether a type is a nullable type or an instance is of a nullable type","nodes":[{"content":"Learn how to determine whether a type is a nullable type or an instance is of a nullable type","pos":[0,93]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[334,389],"content":"How to: Identify a nullable type (C# Programming Guide)","linkify":"How to: Identify a nullable type (C# Programming Guide)","nodes":[{"content":"How to: Identify a nullable type (C# Programming Guide)","pos":[0,55]}]},{"pos":[391,656],"content":"The following example shows how to determine whether a <ph id=\"ph1\">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> instance represents a closed generic nullable type, that is, the <ph id=\"ph2\">&lt;xref:System.Nullable%601?displayProperty=nameWithType&gt;</ph> type with a specified type parameter <ph id=\"ph3\">`T`</ph>:","source":"The following example shows how to determine whether a <xref:System.Type?displayProperty=nameWithType> instance represents a closed generic nullable type, that is, the <xref:System.Nullable%601?displayProperty=nameWithType> type with a specified type parameter `T`:"},{"pos":[808,972],"content":"As the example shows, you use the <bpt id=\"p1\">[</bpt>typeof<ept id=\"p1\">](../../language-reference/keywords/typeof.md)</ept> operator to create a <ph id=\"ph1\">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> object.","source":"As the example shows, you use the [typeof](../../language-reference/keywords/typeof.md) operator to create a <xref:System.Type?displayProperty=nameWithType> object."},{"content":"If you want to determine whether an instance is of a nullable type, don't use the <ph id=\"ph1\">&lt;xref:System.Object.GetType%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> instance to be tested with the preceding code.","pos":[978,1202],"source":"If you want to determine whether an instance is of a nullable type, don't use the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to get a <xref:System.Type> instance to be tested with the preceding code."},{"content":"When you call the <ph id=\"ph1\">&lt;xref:System.Object.GetType%2A?displayProperty=nameWithType&gt;</ph> method on an instance of a nullable type, the instance is <bpt id=\"p1\">[</bpt>boxed<ept id=\"p1\">](using-nullable-types.md#boxing-and-unboxing)</ept> to <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph>.","pos":[1203,1417],"source":" When you call the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method on an instance of a nullable type, the instance is [boxed](using-nullable-types.md#boxing-and-unboxing) to <xref:System.Object>."},{"content":"As boxing of a non-null instance of a nullable type is equivalent to boxing of a value of the underlying type, <ph id=\"ph1\">&lt;xref:System.Object.GetType%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object that represents the underlying type of a nullable type:","pos":[1418,1652],"source":" As boxing of a non-null instance of a nullable type is equivalent to boxing of a value of the underlying type, <xref:System.Object.GetType%2A> returns a <xref:System.Type> object that represents the underlying type of a nullable type:"},{"content":"Don't use the <bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../../language-reference/keywords/is.md)</ept> operator to determine whether an instance is of a nullable type.","pos":[1795,1919],"source":"Don't use the [is](../../language-reference/keywords/is.md) operator to determine whether an instance is of a nullable type."},{"content":"As the following example shows, you cannot distinguish types of instances of a nullable type and its underlying type with using the <ph id=\"ph1\">`is`</ph> operator:","pos":[1920,2066],"source":" As the following example shows, you cannot distinguish types of instances of a nullable type and its underlying type with using the `is` operator:"},{"content":"You can use the code presented in the following example to determine whether an instance is of a nullable type:","pos":[2213,2324]},{"pos":[2498,2506],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2510,2536],"content":"<bpt id=\"p1\">[</bpt>Nullable types<ept id=\"p1\">](index.md)</ept>","source":"[Nullable types](index.md)"},{"pos":[2539,2586],"content":"<bpt id=\"p1\">[</bpt>Using nullable types<ept id=\"p1\">](using-nullable-types.md)</ept>","source":"[Using nullable types](using-nullable-types.md)"}]}