{"content":"---\ntitle: \"+ Operator - C# Reference\"\nms.custom: seodec18\nms.date: 10/22/2018\nf1_keywords: \n  - \"+_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"+ operator [C#]\"\n  - \"concatenation operator [C#]\"\n  - \"addition operator [C#]\"\nms.assetid: 93e56486-bb42-43c1-bd43-60af11e64e67\n---\n# + Operator (C# Reference)\n\nThe `+` operator is supported in two forms: a unary plus operator or a binary addition operator.\n\n## Unary plus operator\n\nThe unary `+` operator returns the value of its operand. It's supported by all numeric types.\n\n## Numeric addition\n\nFor numeric types, the `+` operator computes the sum of its operands:\n\n[!code-csharp-interactive[numeric addition](~/samples/snippets/csharp/language-reference/operators/AdditionExamples.cs#AddNumerics)]\n\nFor more information about arithmetic operators, see [Arithmetic operators](arithmetic-operators.md).\n\n## String concatenation\n\nWhen one or both operands are of type [string](../keywords/string.md), the `+` operator concatenates the string representations of its operands:\n\n[!code-csharp-interactive[string concatenation](~/samples/snippets/csharp/language-reference/operators/AdditionExamples.cs#AddStrings)]\n\nStarting with C# 6, [string interpolation](../tokens/interpolated.md) provides a more convenient way to format strings:\n\n[!code-csharp-interactive[string interpolation](~/samples/snippets/csharp/language-reference/operators/AdditionExamples.cs#UseStringInterpolation)]\n\n## Delegate combination\n\nFor [delegate](../keywords/delegate.md) types, the `+` operator returns a new delegate instance that, when invoked, invokes the first operand and then invokes the second operand. If any of the operands is `null`, the `+` operator returns the value of another operand (which also might be `null`). The following example shows how delegates can be combined with the `+` operator:\n\n[!code-csharp-interactive[delegate combination](~/samples/snippets/csharp/language-reference/operators/AdditionExamples.cs#AddDelegates)]\n\nFor more information about delegate types, see [Delegates](../../programming-guide/delegates/index.md).\n\n## Operator overloadability\n\nUser-defined types can [overload](../keywords/operator.md) the unary and binary `+` operators. When a binary `+` operator is overloaded, the [addition assignment operator](addition-assignment-operator.md) `+=` is also implicitly overloaded.\n\n## C# language specification\n\nFor more information, see the [Unary plus operator](~/_csharplang/spec/expressions.md#unary-plus-operator) and [Addition operator](~/_csharplang/spec/expressions.md#addition-operator) sections of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [String interpolation](../tokens/interpolated.md)\n- [How to: Concatenate Multiple Strings](../../how-to/concatenate-multiple-strings.md)\n- [Delegates](../../programming-guide/delegates/index.md)\n- [Checked and unchecked](../keywords/checked-and-unchecked.md)\n","nodes":[{"pos":[4,270],"embed":true,"restype":"x-metadata","content":"title: \"+ Operator - C# Reference\"\nms.custom: seodec18\nms.date: 10/22/2018\nf1_keywords: \n  - \"+_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"+ operator [C#]\"\n  - \"concatenation operator [C#]\"\n  - \"addition operator [C#]\"\nms.assetid: 93e56486-bb42-43c1-bd43-60af11e64e67","nodes":[{"content":"+ Operator - C# Reference","nodes":[{"pos":[2,25],"content":"Operator - C# Reference","nodes":[{"content":"Operator - C# Reference","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[277,302],"content":"+ Operator (C# Reference)","linkify":"+ Operator (C# Reference)","nodes":[{"content":"+ Operator (C# Reference)","pos":[0,25]}]},{"pos":[304,400],"content":"The <ph id=\"ph1\">`+`</ph> operator is supported in two forms: a unary plus operator or a binary addition operator.","source":"The `+` operator is supported in two forms: a unary plus operator or a binary addition operator."},{"pos":[405,424],"content":"Unary plus operator","linkify":"Unary plus operator","nodes":[{"content":"Unary plus operator","pos":[0,19]}]},{"content":"The unary <ph id=\"ph1\">`+`</ph> operator returns the value of its operand.","pos":[426,482],"source":"The unary `+` operator returns the value of its operand."},{"content":"It's supported by all numeric types.","pos":[483,519]},{"pos":[524,540],"content":"Numeric addition","linkify":"Numeric addition","nodes":[{"content":"Numeric addition","pos":[0,16]}]},{"pos":[542,611],"content":"For numeric types, the <ph id=\"ph1\">`+`</ph> operator computes the sum of its operands:","source":"For numeric types, the `+` operator computes the sum of its operands:"},{"pos":[747,848],"content":"For more information about arithmetic operators, see <bpt id=\"p1\">[</bpt>Arithmetic operators<ept id=\"p1\">](arithmetic-operators.md)</ept>.","source":"For more information about arithmetic operators, see [Arithmetic operators](arithmetic-operators.md)."},{"pos":[853,873],"content":"String concatenation","linkify":"String concatenation","nodes":[{"content":"String concatenation","pos":[0,20]}]},{"pos":[875,1019],"content":"When one or both operands are of type <bpt id=\"p1\">[</bpt>string<ept id=\"p1\">](../keywords/string.md)</ept>, the <ph id=\"ph1\">`+`</ph> operator concatenates the string representations of its operands:","source":"When one or both operands are of type [string](../keywords/string.md), the `+` operator concatenates the string representations of its operands:"},{"pos":[1158,1277],"content":"Starting with C# 6, <bpt id=\"p1\">[</bpt>string interpolation<ept id=\"p1\">](../tokens/interpolated.md)</ept> provides a more convenient way to format strings:","source":"Starting with C# 6, [string interpolation](../tokens/interpolated.md) provides a more convenient way to format strings:"},{"pos":[1431,1451],"content":"Delegate combination","linkify":"Delegate combination","nodes":[{"content":"Delegate combination","pos":[0,20]}]},{"content":"For <bpt id=\"p1\">[</bpt>delegate<ept id=\"p1\">](../keywords/delegate.md)</ept> types, the <ph id=\"ph1\">`+`</ph> operator returns a new delegate instance that, when invoked, invokes the first operand and then invokes the second operand.","pos":[1453,1631],"source":"For [delegate](../keywords/delegate.md) types, the `+` operator returns a new delegate instance that, when invoked, invokes the first operand and then invokes the second operand."},{"content":"If any of the operands is <ph id=\"ph1\">`null`</ph>, the <ph id=\"ph2\">`+`</ph> operator returns the value of another operand (which also might be <ph id=\"ph3\">`null`</ph>).","pos":[1632,1749],"source":" If any of the operands is `null`, the `+` operator returns the value of another operand (which also might be `null`)."},{"content":"The following example shows how delegates can be combined with the <ph id=\"ph1\">`+`</ph> operator:","pos":[1750,1830],"source":" The following example shows how delegates can be combined with the `+` operator:"},{"pos":[1971,2074],"content":"For more information about delegate types, see <bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../programming-guide/delegates/index.md)</ept>.","source":"For more information about delegate types, see [Delegates](../../programming-guide/delegates/index.md)."},{"pos":[2079,2103],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"User-defined types can <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](../keywords/operator.md)</ept> the unary and binary <ph id=\"ph1\">`+`</ph> operators.","pos":[2105,2199],"source":"User-defined types can [overload](../keywords/operator.md) the unary and binary `+` operators."},{"content":"When a binary <ph id=\"ph1\">`+`</ph> operator is overloaded, the <bpt id=\"p1\">[</bpt>addition assignment operator<ept id=\"p1\">](addition-assignment-operator.md)</ept> <ph id=\"ph2\">`+=`</ph> is also implicitly overloaded.","pos":[2200,2345],"source":" When a binary `+` operator is overloaded, the [addition assignment operator](addition-assignment-operator.md) `+=` is also implicitly overloaded."},{"pos":[2350,2375],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2377,2641],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Unary plus operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#unary-plus-operator)</ept> and <bpt id=\"p2\">[</bpt>Addition operator<ept id=\"p2\">](~/_csharplang/spec/expressions.md#addition-operator)</ept> sections of the <bpt id=\"p3\">[</bpt>C# language specification<ept id=\"p3\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Unary plus operator](~/_csharplang/spec/expressions.md#unary-plus-operator) and [Addition operator](~/_csharplang/spec/expressions.md#addition-operator) sections of the [C# language specification](../language-specification/index.md)."},{"pos":[2646,2654],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2658,2685],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2688,2744],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2747,2771],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[2774,2823],"content":"<bpt id=\"p1\">[</bpt>String interpolation<ept id=\"p1\">](../tokens/interpolated.md)</ept>","source":"[String interpolation](../tokens/interpolated.md)"},{"pos":[2826,2910],"content":"<bpt id=\"p1\">[</bpt>How to: Concatenate Multiple Strings<ept id=\"p1\">](../../how-to/concatenate-multiple-strings.md)</ept>","source":"[How to: Concatenate Multiple Strings](../../how-to/concatenate-multiple-strings.md)"},{"pos":[2913,2968],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../programming-guide/delegates/index.md)</ept>","source":"[Delegates](../../programming-guide/delegates/index.md)"},{"pos":[2971,3032],"content":"<bpt id=\"p1\">[</bpt>Checked and unchecked<ept id=\"p1\">](../keywords/checked-and-unchecked.md)</ept>","source":"[Checked and unchecked](../keywords/checked-and-unchecked.md)"}]}