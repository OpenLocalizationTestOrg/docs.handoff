{"content":"---\ntitle: \"int (C# Reference) | Microsoft Docs\"\nms.date: \"2017-03-14\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"int_CSharpKeyword\"\n  - \"int\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"int keyword [C#]\"\nms.assetid: 212447b4-5d2a-41aa-88ab-84fe710bdb52\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# int (C# Reference)\n\n`int` denotes an integral type that stores values according to the size and range shown in the following table.  \n  \n|Type|Range|Size|.NET Framework type|Default Value|  \n|----------|-----------|----------|-------------------------|-------------------|  \n|`int`|-2,147,483,648 to 2,147,483,647|Signed 32-bit integer|<xref:System.Int32?displayProperty=fullName>|0|  \n  \n## Literals  \n \nYou can declare and initialize an `int` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.  If the integer literal is outside the range of `int` (that is, if it is less than <xref:System.Int32.MinValue?displayProperty=fullName> or greater than <xref:System.Int32.MaxValue?displayProperty=fullName>, a compilation error occurs. \n\nIn the following example, integers equal to 16,342 that are represented as decimal, hexadecimal, and binary literals are assigned to `int` values.  \n  \n[!code-cs[int](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Int)]  \n\n> [!NOTE] \n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix. \n\nStarting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-cs[int](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#IntS)]  \n \n Integer literals can also include a suffix that denotes the type, although there is no suffix that denotes the `int` type. If an integer literal has no suffix, its type is the first of the following types in which its value can be represented: \n\n1. `int`\n2. [uint](../../../csharp/language-reference/keywords/uint.md)\n3. [long](../../../csharp/language-reference/keywords/long.md)\n4. [ulong](../../../csharp/language-reference/keywords/ulong.md) \n \nIn these examples, the literal 90946 is of type `int`.\n  \n## Conversions  \n There is a predefined implicit conversion from `int` to [long](../../../csharp/language-reference/keywords/long.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md). For example:  \n  \n```csharp  \n// '123' is an int, so an implicit conversion takes place here:  \nfloat f = 123;  \n```  \n  \n There is a predefined implicit conversion from [sbyte](../../../csharp/language-reference/keywords/sbyte.md), [byte](../../../csharp/language-reference/keywords/byte.md), [short](../../../csharp/language-reference/keywords/short.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), or [char](../../../csharp/language-reference/keywords/char.md) to `int`. For example, the following assignment statement will produce a compilation error without a cast:  \n  \n```csharp  \nlong aLong = 22;  \nint i1 = aLong;       // Error: no implicit conversion from long.  \nint i2 = (int)aLong;  // OK: explicit conversion.  \n```  \n  \n Notice also that there is no implicit conversion from floating-point types to `int`. For example, the following statement generates a compiler error unless an explicit cast is used:  \n  \n```csharp  \nint x = 3.0;         // Error: no implicit conversion from double.  \nint y = (int)3.0;    // OK: explicit conversion.  \n```  \n  \n For more information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md).  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.Int32>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)","nodes":[{"pos":[12,47],"content":"int (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"int (C# Reference) | Microsoft Docs","pos":[0,35]}]},{"pos":[563,581],"content":"int (C# Reference)","linkify":"int (C# Reference)","nodes":[{"content":"int (C# Reference)","pos":[0,18]}]},{"pos":[583,694],"content":"<ph id=\"ph1\">`int`</ph> denotes an integral type that stores values according to the size and range shown in the following table.","source":"`int` denotes an integral type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[701,705]},{"content":"Range","pos":[706,711]},{"content":"Size","pos":[712,716]},{"content":".NET Framework type","pos":[717,736]},{"content":"Default Value","pos":[737,750]},{"content":"-2,147,483,648 to 2,147,483,647","pos":[845,876]},{"content":"Signed 32-bit integer","pos":[877,898]},{"content":"0","pos":[944,945]},{"pos":[955,963],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize an <ph id=\"ph1\">`int`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.","pos":[968,1119],"source":"You can declare and initialize an `int` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`int`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Int32.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[1121,1355],"source":"  If the integer literal is outside the range of `int` (that is, if it is less than <xref:System.Int32.MinValue?displayProperty=fullName> or greater than <xref:System.Int32.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"pos":[1358,1504],"content":"In the following example, integers equal to 16,342 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`int`</ph> values.","source":"In the following example, integers equal to 16,342 that are represented as decimal, hexadecimal, and binary literals are assigned to `int` values."},{"pos":[1510,1614],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>int<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Int)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[int](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Int)]"},{"pos":[1620,1783],"content":"[!NOTE] \nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[9,161],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"pos":[1786,1930],"content":"Starting with C# 7, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"pos":[1932,2037],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>int<ept id=\"p2\">](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#IntS)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[int](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#IntS)]"},{"content":"Integer literals can also include a suffix that denotes the type, although there is no suffix that denotes the <ph id=\"ph1\">`int`</ph> type.","pos":[2043,2165],"source":"Integer literals can also include a suffix that denotes the type, although there is no suffix that denotes the `int` type."},{"content":"If an integer literal has no suffix, its type is the first of the following types in which its value can be represented:","pos":[2166,2286]},{"pos":[2301,2360],"content":"<bpt id=\"p1\">[</bpt>uint<ept id=\"p1\">](../../../csharp/language-reference/keywords/uint.md)</ept>","source":"[uint](../../../csharp/language-reference/keywords/uint.md)"},{"pos":[2364,2423],"content":"<bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept>","source":"[long](../../../csharp/language-reference/keywords/long.md)"},{"pos":[2427,2488],"content":"<bpt id=\"p1\">[</bpt>ulong<ept id=\"p1\">](../../../csharp/language-reference/keywords/ulong.md)</ept>","source":"[ulong](../../../csharp/language-reference/keywords/ulong.md)"},{"pos":[2492,2546],"content":"In these examples, the literal 90946 is of type <ph id=\"ph1\">`int`</ph>.","source":"In these examples, the literal 90946 is of type `int`."},{"pos":[2553,2564],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`int`</ph> to <bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id=\"p2\">[</bpt>float<ept id=\"p2\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p3\">[</bpt>double<ept id=\"p3\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p4\">[</bpt>decimal<ept id=\"p4\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","pos":[2568,2882],"source":"There is a predefined implicit conversion from `int` to [long](../../../csharp/language-reference/keywords/long.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"For example:","pos":[2883,2895]},{"content":"There is a predefined implicit conversion from <bpt id=\"p1\">[</bpt>sbyte<ept id=\"p1\">](../../../csharp/language-reference/keywords/sbyte.md)</ept>, <bpt id=\"p2\">[</bpt>byte<ept id=\"p2\">](../../../csharp/language-reference/keywords/byte.md)</ept>, <bpt id=\"p3\">[</bpt>short<ept id=\"p3\">](../../../csharp/language-reference/keywords/short.md)</ept>, <bpt id=\"p4\">[</bpt>ushort<ept id=\"p4\">](../../../csharp/language-reference/keywords/ushort.md)</ept>, or <bpt id=\"p5\">[</bpt>char<ept id=\"p5\">](../../../csharp/language-reference/keywords/char.md)</ept> to <ph id=\"ph1\">`int`</ph>.","pos":[3006,3377],"source":"There is a predefined implicit conversion from [sbyte](../../../csharp/language-reference/keywords/sbyte.md), [byte](../../../csharp/language-reference/keywords/byte.md), [short](../../../csharp/language-reference/keywords/short.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), or [char](../../../csharp/language-reference/keywords/char.md) to `int`."},{"content":"For example, the following assignment statement will produce a compilation error without a cast:","pos":[3378,3474]},{"content":"Notice also that there is no implicit conversion from floating-point types to <ph id=\"ph1\">`int`</ph>.","pos":[3641,3725],"source":"Notice also that there is no implicit conversion from floating-point types to `int`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[3726,3822]},{"pos":[3970,4203],"content":"For more information on arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../../csharp/language-reference/keywords/double.md)</ept>.","source":"For more information on arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md)."},{"pos":[4212,4237],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[4351,4359],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4386,4447],"source":" [C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4450,4518],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4521,4590],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[4593,4686],"source":" [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[4689,4782],"source":" [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[4785,4906],"source":" [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","pos":[4909,5029],"source":" [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}