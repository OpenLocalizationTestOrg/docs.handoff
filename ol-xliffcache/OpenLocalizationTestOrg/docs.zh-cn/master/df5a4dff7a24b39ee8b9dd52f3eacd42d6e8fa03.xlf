<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df5a4dff7a24b39ee8b9dd52f3eacd42d6e8fa03</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\schema-validation-using-xpathnavigator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8562b40a661188f25d8741a931a11519ba902a83</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c71b58904f4f246f9094594027f67eab9c52d273</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Schema Validation using XPathNavigator | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Schema Validation using XPathNavigator</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> class, you can validate the XML content contained in an <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> object in two ways.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The first way is to validate the XML content using a validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object and the second way is to use the <ph id="ph2">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Xml.XmlDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also perform read-only validation of XML content using the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Validating XML Data</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> class does not validate an XML document using either DTD or XML schema definition language (XSD) schema validation by default.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It only verifies that the XML document is well formed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first way to validate an XML document is to validate the document as it is loaded into an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object using a validating <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The second way is to validate a previously untyped XML document using the <ph id="ph1">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In both cases, changes to the validated XML document can be revalidated using the <ph id="ph1">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Validating a Document as it is Loaded</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object is created by passing an <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object to the <ph id="ph3">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method of the <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> class that takes an <ph id="ph5">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object as a parameter.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object passed as a parameter has a <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.ValidationType%2A&gt;</ph> property set to <ph id="ph3">`Schema`</ph> and an XML Schema for the XML document contained in the <ph id="ph4">&lt;xref:System.Xml.XmlDocument&gt;</ph> object added to its <ph id="ph5">&lt;xref:System.Xml.XmlReaderSettings.Schemas%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object is then used to create the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file as it is loaded into the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> object by creating the <ph id="ph3">&lt;xref:System.Xml.XmlDocument&gt;</ph> object using a validating <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because the XML document is valid according to its schema, no schema validation errors or warnings are generated.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as an input.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XPathXMLExamples#2<ept id="p2">](../../../../samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XPathXMLExamples#3<ept id="p2">](../../../../samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the above example, an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> will be thrown when <ph id="ph2">&lt;xref:System.Xml.XmlDocument.Load%2A&gt;</ph> is called if any attribute or element type does not match the corresponding type specified in the validating schema.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.ValidationEventHandler&gt;</ph> is set on the validating <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>, the <ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings.ValidationEventHandler&gt;</ph> will get called whenever an invalid type is encountered.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaException&gt;</ph> will be thrown when an attribute or element with <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.TypedValue%2A&gt;</ph> set to <ph id="ph3">`invalid`</ph> is accessed by the <ph id="ph4">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A&gt;</ph> property can be used to determine whether or not an individual attribute or element is valid when accessing attributes or elements with the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When an XML document is loaded into an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object with an associated schema that defines default values, the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> object treats these defaults as if they appeared in the XML document.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This means that the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.IsEmptyElement%2A&gt;</ph> property  always returns <ph id="ph2">`false`</ph> for an element that was defaulted from the schema, even if in the XML document it was written as an empty element.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Validating a Document using the Validate Method</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> class validates the XML document contained in an <ph id="ph3">&lt;xref:System.Xml.XmlDocument&gt;</ph> object against the schemas specified in the <ph id="ph4">&lt;xref:System.Xml.XmlDocument&gt;</ph> object's <ph id="ph5">&lt;xref:System.Xml.XmlDocument.Schemas%2A&gt;</ph> property and performs infoset augmentation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The result is a previously untyped XML document in the <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object replaced with a typed document.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object reports schema validation errors and warnings using the <ph id="ph2">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph> delegate passed as a parameter to the <ph id="ph3">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file contained in the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> object against the <ph id="ph3">`contosoBooks.xsd`</ph> schema contained in the <ph id="ph4">&lt;xref:System.Xml.XmlDocument&gt;</ph> object's <ph id="ph5">&lt;xref:System.Xml.XmlDocument.Schemas%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as an input.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XPathXMLExamples#2<ept id="p2">](../../../../samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XPathXMLExamples#3<ept id="p2">](../../../../samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Validating Modifications</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After modifications are made to an XML document, you can validate the modifications against the schema for the XML document using the <ph id="ph1">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example validates the <ph id="ph1">`contosoBooks.xml`</ph> file as it is loaded into the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> object by creating the <ph id="ph3">&lt;xref:System.Xml.XmlDocument&gt;</ph> object using a validating <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The XML document is validated successfully as it is loaded without generating any schema validation errors or warnings.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The example then makes two modifications to the XML document that are invalid according to the <ph id="ph1">`contosoBooks.xsd`</ph> schema.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The first modification inserts an invalid child element resulting in a schema validation error, and the second modification sets the value of a typed node to a value that is invalid according to the type of the node resulting in an exception.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as an input.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XPathXMLExamples#2<ept id="p2">](../../../../samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XPathXMLExamples#3<ept id="p2">](../../../../samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the example above, two modifications are made to the XML document contained in the <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>As the XML document was loaded, any schema validation errors encountered would have been handled by the validation event handler method and written to the console.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this example, the validation errors were introduced after the XML document was loaded and were found using the <ph id="ph1">&lt;xref:System.Xml.XmlDocument.Validate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Modifications made using the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.SetTypedValue%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class resulted in an <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> because the new value was invalid according to the schema type of the node.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information about modifying values using the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.SetTypedValue%2A&gt;</ph> method, see the <bpt id="p1">[</bpt>Modify XML Data using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/modify-xml-data-using-xpathnavigator.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Read-Only Validation</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> class is a read-only, in-memory representation of an XML document.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> class and the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> class create <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> objects to navigate and edit XML documents.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> class is a read-only class, <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> object's returned from <ph id="ph3">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> objects cannot edit the XML document contained in the <ph id="ph4">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the case of validation, you can create an <ph id="ph1">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> object just like you create an <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> object using a validating <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> object as described earlier in this topic.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> object validates the XML document as it is loaded, but because you cannot edit the XML data in the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> object, you cannot revalidate the XML document.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information about read-only and editable <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> objects, see the <bpt id="p1">[</bpt>Reading XML Data using XPathDocument and XmlDocument<ept id="p1">](../../../../docs/standard/data/xml/reading-xml-data-using-xpathdocument-and-xmldocument.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Process XML Data Using the XPath Data Model<ept id="p1">](../../../../docs/standard/data/xml/process-xml-data-using-the-xpath-data-model.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reading XML Data using XPathDocument and XmlDocument<ept id="p1">](../../../../docs/standard/data/xml/reading-xml-data-using-xpathdocument-and-xmldocument.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Selecting, Evaluating and Matching XML Data using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/selecting-evaluating-and-matching-xml-data-using-xpathnavigator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Accessing XML Data using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/accessing-xml-data-using-xpathnavigator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Editing XML Data using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/editing-xml-data-using-xpathnavigator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>