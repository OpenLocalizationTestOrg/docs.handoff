<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7666918cbff7a395a93a274629fe574ff20e170c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\operators\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">649e5bc55b1ce896c69934c4d3afba466aba2baa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37573973685702eeec8b136936f37f644fefefa2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>C# operators</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C# operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>C# provides many operators, which are symbols that specify which operations (math, indexing, function call, etc.) to perform in an expression.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can <bpt id="p1">[</bpt>overload<ept id="p1">](../../programming-guide/statements-expressions-operators/overloadable-operators.md)</ept> many operators to change their meaning when applied to a user-defined type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Operations on integral types (such as <ph id="ph1">`==`</ph>, <ph id="ph2">`!=`</ph>, <ph id="ph3">`&lt;`</ph>, <ph id="ph4">`&gt;`</ph>, <ph id="ph5">`&amp;`</ph>, <ph id="ph6">`|`</ph>) are generally allowed on enumeration (<ph id="ph7">`enum`</ph>) types.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The sections below list the C# operators starting with the highest precedence to the lowest.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The operators within each section share the same precedence level.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Primary operators</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These are the highest precedence operators.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x.y<ept id="p1">](member-access-operator.md)</ept> – member access.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x?.y<ept id="p1">](null-conditional-operators.md)</ept> – null conditional member access.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`null`</ph> if the left-hand operand evaluates to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x?[y]<ept id="p1">](null-conditional-operators.md)</ept> - null conditional index access.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`null`</ph> if the left-hand operand evaluates to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>f(x)<ept id="p1">](invocation-operator.md)</ept> – function invocation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>a&amp;#91;x&amp;#93;<ept id="p1">](index-operator.md)</ept> – aggregate object indexing.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x++<ept id="p1">](arithmetic-operators.md#increment-operator-)</ept> – postfix increment.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Returns the value of x and then updates the storage location with the value of x that is one greater (typically adds the integer 1).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x--<ept id="p1">](arithmetic-operators.md#decrement-operator---)</ept> –  postfix decrement.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns the value of x and then updates the storage location with the value of x that is one less (typically subtracts the integer 1).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>new<ept id="p1">](../keywords/new-operator.md)</ept> – type instantiation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>typeof<ept id="p1">](../keywords/typeof.md)</ept> – returns the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object representing the operand.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>checked<ept id="p1">](../keywords/checked.md)</ept> – enables overflow checking for integer operations.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unchecked<ept id="p1">](../keywords/unchecked.md)</ept> – disables overflow checking for integer operations.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is the default compiler behavior.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>default(T)<ept id="p1">](../../programming-guide/statements-expressions-operators/default-value-expressions.md)</ept> – produces the default value of type T.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>delegate<ept id="p1">](../../programming-guide/statements-expressions-operators/anonymous-methods.md)</ept> – declares and returns a delegate instance.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sizeof<ept id="p1">](../keywords/sizeof.md)</ept> – returns the size in bytes of the type operand.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">-&gt;</ph><ept id="p1">](dereference-operator.md)</ept> – pointer dereferencing combined with member access.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Unary operators</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These operators have higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>+x<ept id="p1">](addition-operator.md)</ept> – returns the value of x.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>-x<ept id="p1">](subtraction-operator.md)</ept> – numeric negation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\!</ph>x<ept id="p1">](logical-negation-operator.md)</ept> – logical negation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>~x<ept id="p1">](bitwise-complement-operator.md)</ept> – bitwise complement.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>++x<ept id="p1">](arithmetic-operators.md#increment-operator-)</ept> – prefix increment.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns the value of x after updating the storage location with the value of x that is one greater (typically adds the integer 1).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>--x<ept id="p1">](arithmetic-operators.md#decrement-operator---)</ept> – prefix decrement.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns the value of x after updating the storage location with the value of x that is one less (typically subtracts the integer 1).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>(T)x<ept id="p1">](invocation-operator.md)</ept> – type casting.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>await<ept id="p1">](../keywords/await.md)</ept> – awaits a <ph id="ph1">`Task`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;x<ept id="p1">](and-operator.md)</ept> – address of.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>*x<ept id="p1">](multiplication-operator.md)</ept> – dereferencing.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Multiplicative operators</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>These operators have higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x * y<ept id="p1">](arithmetic-operators.md#multiplication-operator-)</ept> – multiplication.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x / y<ept id="p1">](arithmetic-operators.md#division-operator-)</ept> – division.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the operands are integers, the result is an integer truncated toward zero (for example, <ph id="ph1">`-7 / 2 is -3`</ph>).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x % y<ept id="p1">](arithmetic-operators.md#remainder-operator-)</ept> – remainder.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the operands are integers, this returns the remainder of dividing x by y.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`q = x / y`</ph> and <ph id="ph2">`r = x % y`</ph>, then <ph id="ph3">`x = q * y + r`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Additive operators</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>These operators have higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x + y<ept id="p1">](arithmetic-operators.md#addition-operator-)</ept> – addition.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x – y<ept id="p1">](arithmetic-operators.md#subtraction-operator--)</ept> – subtraction.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Shift operators</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These operators have higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &lt;<ph id="ph1">\&lt;</ph>  y<ept id="p1">](left-shift-operator.md)</ept> – shift bits left and fill with zero on the right.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &gt;&gt; y<ept id="p1">](right-shift-operator.md)</ept> – shift bits right.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the left operand is <ph id="ph1">`int`</ph> or <ph id="ph2">`long`</ph>, then left bits are filled with the sign bit.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the left operand is <ph id="ph1">`uint`</ph> or <ph id="ph2">`ulong`</ph>, then left bits are filled with zero.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Relational and type-testing operators</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>These operators have higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x <ph id="ph1">\&lt;</ph> y<ept id="p1">](less-than-operator.md)</ept> – less than (true if x is less than y).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &gt; y<ept id="p1">](greater-than-operator.md)</ept> – greater than (true if x is greater than y).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x <ph id="ph1">\&lt;</ph>= y<ept id="p1">](less-than-equal-operator.md)</ept> – less than or equal to.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &gt;= y<ept id="p1">](greater-than-equal-operator.md)</ept> – greater than or equal to.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>is<ept id="p1">](../keywords/is.md)</ept> – type compatibility.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns true if the evaluated left operand can be cast to the type specified in the right operand (a static type).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>as<ept id="p1">](../keywords/as.md)</ept> – type conversion.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Returns the left operand cast to the type specified by the right operand (a static type), but <ph id="ph1">`as`</ph> returns <ph id="ph2">`null`</ph> where <ph id="ph3">`(T)x`</ph> would throw an exception.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Equality operators</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>These operators have higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x == y<ept id="p1">](equality-operators.md#equality-operator-)</ept> – equality.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>By default, for reference types other than <ph id="ph1">`string`</ph>, this returns reference equality (identity test).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>However, types can overload <ph id="ph1">`==`</ph>, so if your intent is to test identity, it is best to use the <ph id="ph2">`ReferenceEquals`</ph> method on <ph id="ph3">`object`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x != y<ept id="p1">](equality-operators.md#inequality-operator-)</ept> – not equal.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See comment for <ph id="ph1">`==`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If a type overloads <ph id="ph1">`==`</ph>, then it must overload <ph id="ph2">`!=`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Logical AND operator</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This operator has higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &amp; y<ept id="p1">](and-operator.md)</ept> – logical or bitwise AND.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can generally use this with integer types and <ph id="ph1">`enum`</ph> types.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Logical XOR operator</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This operator has higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x ^ y<ept id="p1">](xor-operator.md)</ept> – logical or bitwise XOR.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can generally use this with integer types and <ph id="ph1">`enum`</ph> types.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Logical OR operator</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This operator has higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &amp;#124; y<ept id="p1">](or-operator.md)</ept> – logical or bitwise OR.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can generally use this with integer types and <ph id="ph1">`enum`</ph> types.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Conditional AND operator</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This operator has higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &amp;&amp; y<ept id="p1">](conditional-and-operator.md)</ept> – logical AND.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If the first operand evaluates to false, then C# does not evaluate the second operand.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Conditional OR operator</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This operator has higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &amp;#124;&amp;#124; y<ept id="p1">](conditional-or-operator.md)</ept> – logical OR.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If the first operand evaluates to true, then C# does not evaluate the second operand.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Null-coalescing operator</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This operator has higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x ?? y<ept id="p1">](null-coalescing-operator.md)</ept> – returns <ph id="ph1">`x`</ph> if it is non-<ph id="ph2">`null`</ph>; otherwise, returns <ph id="ph3">`y`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Conditional operator</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This operator has higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>t ? x : y<ept id="p1">](conditional-operator.md)</ept> – if test <ph id="ph1">`t`</ph> evaluates to true, then evaluate and return <ph id="ph2">`x`</ph>; otherwise, evaluate and return <ph id="ph3">`y`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Assignment and Lambda operators</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>These operators have higher precedence than the next section and lower precedence than the previous section.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x = y<ept id="p1">](assignment-operator.md)</ept> – assignment.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x += y<ept id="p1">](addition-assignment-operator.md)</ept> – increment.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Add the value of <ph id="ph1">`y`</ph> to the value of <ph id="ph2">`x`</ph>, store the result in <ph id="ph3">`x`</ph>, and return the new value.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`x`</ph> designates an <ph id="ph2">`event`</ph>, then <ph id="ph3">`y`</ph> must be an appropriate function that C# adds as an event handler.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x -= y<ept id="p1">](subtraction-assignment-operator.md)</ept> – decrement.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Subtract the value of <ph id="ph1">`y`</ph> from the value of <ph id="ph2">`x`</ph>, store the result in <ph id="ph3">`x`</ph>, and return the new value.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`x`</ph> designates an <ph id="ph2">`event`</ph>, then <ph id="ph3">`y`</ph> must be an appropriate function that C# removes as an event handler</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x *= y<ept id="p1">](multiplication-assignment-operator.md)</ept> – multiplication assignment.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Multiply the value of <ph id="ph1">`y`</ph> to the value of <ph id="ph2">`x`</ph>, store the result in <ph id="ph3">`x`</ph>, and return the new value.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x /= y<ept id="p1">](arithmetic-operators.md#compound-assignment)</ept> – division assignment.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Divide the value of <ph id="ph1">`x`</ph> by the value of <ph id="ph2">`y`</ph>, store the result in <ph id="ph3">`x`</ph>, and return the new value.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x %= y<ept id="p1">](arithmetic-operators.md#compound-assignment)</ept> – remainder assignment.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Divide the value of <ph id="ph1">`x`</ph> by the value of <ph id="ph2">`y`</ph>, store the remainder in <ph id="ph3">`x`</ph>, and return the new value.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &amp;= y<ept id="p1">](and-assignment-operator.md)</ept> – AND assignment.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>AND the value of <ph id="ph1">`y`</ph> with the value of <ph id="ph2">`x`</ph>, store the result in <ph id="ph3">`x`</ph>, and return the new value.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &amp;#124;= y<ept id="p1">](or-assignment-operator.md)</ept> – OR assignment.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>OR the value of <ph id="ph1">`y`</ph> with the value of <ph id="ph2">`x`</ph>, store the result in <ph id="ph3">`x`</ph>, and return the new value.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x ^= y<ept id="p1">](xor-assignment-operator.md)</ept> – XOR assignment.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>XOR the value of <ph id="ph1">`y`</ph> with the value of <ph id="ph2">`x`</ph>, store the result in <ph id="ph3">`x`</ph>, and return the new value.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &lt;&lt;= y<ept id="p1">](left-shift-assignment-operator.md)</ept> – left-shift assignment.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Shift the value of <ph id="ph1">`x`</ph> left by <ph id="ph2">`y`</ph> places, store the result in <ph id="ph3">`x`</ph>, and return the new value.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x &gt;&gt;= y<ept id="p1">](right-shift-assignment-operator.md)</ept> – right-shift assignment.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Shift the value of <ph id="ph1">`x`</ph> right by <ph id="ph2">`y`</ph> places, store the result in <ph id="ph3">`x`</ph>, and return the new value.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">=&gt;</ph><ept id="p1">](lambda-operator.md)</ept> – lambda declaration.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C#<ept id="p1">](../../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloadable Operators<ept id="p1">](../../programming-guide/statements-expressions-operators/overloadable-operators.md)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../keywords/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>