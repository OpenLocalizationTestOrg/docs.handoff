{"content":"---\ntitle: \"How To: Build Claims-Aware ASP.NET MVC Web Application Using WIF\"\nms.date: \"03/30/2017\"\nms.assetid: 0efb76bc-9f7b-4afe-be1c-2a57c917010b\nauthor: \"BrucePerlerMS\"\n---\n# How To: Build Claims-Aware ASP.NET MVC Web Application Using WIF\n## Applies To  \n  \n-   Microsoft® Windows® Identity Foundation (WIF)  \n  \n-   ASP.NET® MVC  \n  \n## Summary  \n This How-To provides detailed step-by-step procedures for creating simple claims-aware ASP.NET MVC web application. It also provides instructions how to test the simple claims-aware ASP.NET MVC web application for successful implementation of claims-based authentication. This How-To does not have detailed instructions for creating a Security Token Service (STS), and assumes you have already configured an STS.  \n  \n## Contents  \n  \n-   Objectives  \n  \n-   Summary of Steps  \n  \n-   Step 1 – Create Simple ASP.NET MVC Application  \n  \n-   Step 2 – Configure ASP.NET MVC Application for Claims-Based Authentication  \n  \n-   Step 3 – Test Your Solution  \n  \n-   Related Items  \n  \n## Objectives  \n  \n-   Configure ASP.NET MVC web application for claims-based authentication  \n  \n-   Test successful claims-aware ASP.NET MVC web application  \n  \n## Summary of Steps  \n  \n-   Step 1 – Create Simple ASP.NET MVC Application  \n  \n-   Step 2 – Configure ASP.NET MVC Application for Claims-Based Authentication  \n  \n-   Step 3 – Test Your Solution  \n  \n## Step 1 – Create Simple ASP.NET MVC Application  \n In this step, you will create a new ASP.NET MVC application.  \n  \n#### To create simple ASP.NET MVC application  \n  \n1.  Start Visual Studio and click **File**, **New**, and then **Project**.  \n  \n2.  In the **New Project** window, click **ASP.NET MVC 3 Web Application**.  \n  \n3.  In **Name**, enter `TestApp` and press **OK**.  \n  \n4.  In the **New ASP.NET MVC 3 Project** dialog, select **Internet Application** from the available templates, ensure **View Engine** is set to **Razor**, and then click **OK**.  \n  \n5.  When the new project opens, right-click the **TestApp** project in **Solution Explorer** and select the **Properties** option.  \n  \n6.  On the project’s properties page, click on the **Web** tab on the left and ensure that the **Use Local IIS Web Server** option is selected.  \n  \n## Step 2 – Configure ASP.NET MVC Application for Claims-Based Authentication  \n In this step you will add configuration entries to the *Web.config* configuration file of your ASP.NET MVC web application to make it claims-aware.  \n  \n#### To configure ASP.NET MVC application for claims-based authentication  \n  \n1.  Add the following configuration section definitions to the *Web.config* configuration file. These define configuration sections required by Windows Identity Foundation. Add the definitions immediately after the **\\<configuration>** opening element:  \n  \n    ```xml  \n    <configSections>  \n        <section name=\"system.identityModel\" type=\"System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089\" />  \n        <section name=\"system.identityModel.services\" type=\"System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089\" />  \n    </configSections>  \n    ```  \n  \n2.  Add a **\\<location>** element that enables access to the application’s federation metadata:  \n  \n    ```xml  \n    <location path=\"FederationMetadata\">  \n        <system.web>  \n            <authorization>  \n                <allow users=\"*\" />  \n            </authorization>  \n        </system.web>  \n    </location>  \n    ```  \n  \n3.  Add the following configuration entries within the **\\<system.web>** elements to deny users, disable native authentication, and enable WIF to manage authentication.  \n  \n    ```xml  \n    <authorization>  \n        <deny users=\"?\" />  \n    </authorization>  \n    <authentication mode=\"None\" />  \n    ```  \n  \n4.  Add the following Windows Identity Foundation related configuration entries and ensure that your ASP.NET application’s URL and port number match the values in the **\\<audienceUris>** entry, **realm** attribute of the **\\<wsFederation>** element, and the **reply** attribute of the **\\<wsFederation>** element. Also ensure that the **issuer** value fits your Security Token Service (STS) URL.  \n  \n    ```xml  \n    <system.identityModel>  \n        <identityConfiguration>  \n            <audienceUris>  \n                <add value=\"http://localhost:28503/\" />  \n            </audienceUris>  \n            <issuerNameRegistry type=\"System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\">  \n                <trustedIssuers>  \n                    <add thumbprint=\"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234\" name=\"YourSTSName\" />  \n                </trustedIssuers>   \n            </issuerNameRegistry>  \n            <certificateValidation certificateValidationMode=\"None\" />  \n        </identityConfiguration>  \n    </system.identityModel>  \n    <system.identityModel.services>  \n        <federationConfiguration>  \n            <cookieHandler requireSsl=\"false\" />  \n            <wsFederation passiveRedirectEnabled=\"true\" issuer=\"http://localhost:13922/wsFederationSTS/Issue\" realm=\"http://localhost:28503/\" reply=\"http://localhost:28503/\" requireHttps=\"false\" />  \n        </federationConfiguration>  \n    </system.identityModel.services>  \n    ```  \n  \n5.  Add reference to the <xref:System.IdentityModel> assembly.  \n  \n6.  Compile the solution to make sure there are errors.  \n  \n## Step 3 – Test Your Solution  \n In this step you will test your ASP.NET MVC web application configured for claims-based authentication. To perform basic test you will add simple code that displays claims in the token issued by the Security Token Service (STS).  \n  \n#### To test your ASP.NET MVC application for claims-based authentication  \n  \n1.  In the **Solution Explorer**, expand the **Controllers** folder and open *HomeController.cs* file in the editor. Add the following code to the **Index** method:  \n  \n    ```csharp  \n    public ActionResult Index()  \n    {  \n        ViewBag.ClaimsIdentity = Thread.CurrentPrincipal.Identity;  \n  \n        return View();  \n    }  \n    ```  \n  \n2.  In the **Solution Explorer** expand **Views** and then **Home** folders and open *Index.cshtml* file in the editor. Delete its contents and add the following markup:  \n  \n    ```html  \n    @{  \n        ViewBag.Title = \"Home Page\";  \n    }  \n  \n    <h2>Welcome: @ViewBag.ClaimsIdentity.Name</h2>  \n    <h3>Values from Identity</h3>  \n    <table>  \n        <tr>  \n            <th>  \n                IsAuthenticated   \n            </th>  \n            <td>  \n                @ViewBag.ClaimsIdentity.IsAuthenticated   \n            </td>  \n        </tr>  \n        <tr>  \n            <th>  \n                Name   \n            </th>          \n            <td>  \n                @ViewBag.ClaimsIdentity.Name  \n            </td>          \n        </tr>  \n    </table>  \n    <h3>Claims from ClaimsIdentity</h3>  \n    <table>  \n        <tr>  \n            <th>  \n                Claim Type  \n            </th>  \n            <th>  \n                Claim Value  \n            </th>  \n            <th>  \n                Value Type  \n            </th>  \n            <th>  \n                Subject Name  \n            </th>          \n            <th>  \n                Issuer Name  \n            </th>          \n        </tr>  \n            @foreach (System.Security.Claims.Claim claim in ViewBag.ClaimsIdentity.Claims ) {  \n        <tr>  \n            <td>  \n                @claim.Type  \n            </td>  \n            <td>  \n                @claim.Value  \n            </td>  \n            <td>  \n                @claim.ValueType  \n            </td>  \n            <td>  \n                @claim.Subject.Name  \n            </td>  \n            <td>  \n                @claim.Issuer  \n            </td>  \n        </tr>  \n    }  \n    </table>  \n    ```  \n  \n3.  Run the solution by pressing the **F5** key.  \n  \n4.  You should be presented with the page that displays the claims in the token that was issued to you by Security Token Service.  \n  \n## Related Items  \n  \n-   [How To: Build Claims-Aware ASP.NET Web Forms Application Using WIF](../../../docs/framework/security/how-to-build-claims-aware-aspnet-web-forms-app-using-wif.md)\n","nodes":[{"pos":[4,172],"embed":true,"restype":"x-metadata","content":"title: \"How To: Build Claims-Aware ASP.NET MVC Web Application Using WIF\"\nms.date: \"03/30/2017\"\nms.assetid: 0efb76bc-9f7b-4afe-be1c-2a57c917010b\nauthor: \"BrucePerlerMS\"","nodes":[{"content":"How To: Build Claims-Aware ASP.NET MVC Web Application Using WIF","nodes":[{"pos":[0,64],"content":"How To: Build Claims-Aware ASP.NET MVC Web Application Using WIF","nodes":[{"content":"How To: Build Claims-Aware ASP.NET MVC Web Application Using WIF","pos":[0,64]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[179,243],"content":"How To: Build Claims-Aware ASP.NET MVC Web Application Using WIF","linkify":"How To: Build Claims-Aware ASP.NET MVC Web Application Using WIF","nodes":[{"content":"How To: Build Claims-Aware ASP.NET MVC Web Application Using WIF","pos":[0,64]}]},{"pos":[247,257],"content":"Applies To","linkify":"Applies To","nodes":[{"content":"Applies To","pos":[0,10]}]},{"content":"Microsoft® Windows® Identity Foundation (WIF)","pos":[267,312]},{"content":"ASP.NET® MVC","pos":[322,334]},{"pos":[343,350],"content":"Summary","linkify":"Summary","nodes":[{"content":"Summary","pos":[0,7]}]},{"content":"This How-To provides detailed step-by-step procedures for creating simple claims-aware ASP.NET MVC web application.","pos":[354,469]},{"content":"It also provides instructions how to test the simple claims-aware ASP.NET MVC web application for successful implementation of claims-based authentication.","pos":[470,625]},{"content":"This How-To does not have detailed instructions for creating a Security Token Service (STS), and assumes you have already configured an STS.","pos":[626,766]},{"pos":[775,783],"content":"Contents","linkify":"Contents","nodes":[{"content":"Contents","pos":[0,8]}]},{"content":"Objectives","pos":[793,803]},{"content":"Summary of Steps","pos":[813,829]},{"content":"Step 1 – Create Simple ASP.NET MVC Application","pos":[839,885]},{"content":"Step 2 – Configure ASP.NET MVC Application for Claims-Based Authentication","pos":[895,969]},{"content":"Step 3 – Test Your Solution","pos":[979,1006]},{"content":"Related Items","pos":[1016,1029]},{"pos":[1038,1048],"content":"Objectives","linkify":"Objectives","nodes":[{"content":"Objectives","pos":[0,10]}]},{"content":"Configure ASP.NET MVC web application for claims-based authentication","pos":[1058,1127]},{"content":"Test successful claims-aware ASP.NET MVC web application","pos":[1137,1193]},{"pos":[1202,1218],"content":"Summary of Steps","linkify":"Summary of Steps","nodes":[{"content":"Summary of Steps","pos":[0,16]}]},{"content":"Step 1 – Create Simple ASP.NET MVC Application","pos":[1228,1274]},{"content":"Step 2 – Configure ASP.NET MVC Application for Claims-Based Authentication","pos":[1284,1358]},{"content":"Step 3 – Test Your Solution","pos":[1368,1395]},{"pos":[1404,1450],"content":"Step 1 – Create Simple ASP.NET MVC Application","linkify":"Step 1 – Create Simple ASP.NET MVC Application","nodes":[{"content":"Step 1 – Create Simple ASP.NET MVC Application","pos":[0,46]}]},{"content":"In this step, you will create a new ASP.NET MVC application.","pos":[1454,1514]},{"pos":[1525,1565],"content":"To create simple ASP.NET MVC application","linkify":"To create simple ASP.NET MVC application","nodes":[{"content":"To create simple ASP.NET MVC application","pos":[0,40]}]},{"pos":[1575,1645],"content":"Start Visual Studio and click <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","source":"Start Visual Studio and click **File**, **New**, and then **Project**."},{"pos":[1655,1726],"content":"In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> window, click <bpt id=\"p2\">**</bpt>ASP.NET MVC 3 Web Application<ept id=\"p2\">**</ept>.","source":"In the **New Project** window, click **ASP.NET MVC 3 Web Application**."},{"pos":[1736,1782],"content":"In <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept>, enter <ph id=\"ph1\">`TestApp`</ph> and press <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","source":"In **Name**, enter `TestApp` and press **OK**."},{"pos":[1792,1965],"content":"In the <bpt id=\"p1\">**</bpt>New ASP.NET MVC 3 Project<ept id=\"p1\">**</ept> dialog, select <bpt id=\"p2\">**</bpt>Internet Application<ept id=\"p2\">**</ept> from the available templates, ensure <bpt id=\"p3\">**</bpt>View Engine<ept id=\"p3\">**</ept> is set to <bpt id=\"p4\">**</bpt>Razor<ept id=\"p4\">**</ept>, and then click <bpt id=\"p5\">**</bpt>OK<ept id=\"p5\">**</ept>.","source":"In the **New ASP.NET MVC 3 Project** dialog, select **Internet Application** from the available templates, ensure **View Engine** is set to **Razor**, and then click **OK**."},{"pos":[1975,2101],"content":"When the new project opens, right-click the <bpt id=\"p1\">**</bpt>TestApp<ept id=\"p1\">**</ept> project in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and select the <bpt id=\"p3\">**</bpt>Properties<ept id=\"p3\">**</ept> option.","source":"When the new project opens, right-click the **TestApp** project in **Solution Explorer** and select the **Properties** option."},{"pos":[2111,2250],"content":"On the project’s properties page, click on the <bpt id=\"p1\">**</bpt>Web<ept id=\"p1\">**</ept> tab on the left and ensure that the <bpt id=\"p2\">**</bpt>Use Local IIS Web Server<ept id=\"p2\">**</ept> option is selected.","source":"On the project’s properties page, click on the **Web** tab on the left and ensure that the **Use Local IIS Web Server** option is selected."},{"pos":[2259,2333],"content":"Step 2 – Configure ASP.NET MVC Application for Claims-Based Authentication","linkify":"Step 2 – Configure ASP.NET MVC Application for Claims-Based Authentication","nodes":[{"content":"Step 2 – Configure ASP.NET MVC Application for Claims-Based Authentication","pos":[0,74]}]},{"pos":[2337,2484],"content":"In this step you will add configuration entries to the <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> configuration file of your ASP.NET MVC web application to make it claims-aware.","source":"In this step you will add configuration entries to the *Web.config* configuration file of your ASP.NET MVC web application to make it claims-aware."},{"pos":[2495,2563],"content":"To configure ASP.NET MVC application for claims-based authentication","linkify":"To configure ASP.NET MVC application for claims-based authentication","nodes":[{"content":"To configure ASP.NET MVC application for claims-based authentication","pos":[0,68]}]},{"content":"Add the following configuration section definitions to the <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> configuration file.","pos":[2573,2664],"source":"Add the following configuration section definitions to the *Web.config* configuration file."},{"content":"These define configuration sections required by Windows Identity Foundation.","pos":[2665,2741]},{"content":"Add the definitions immediately after the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>configuration&gt;<ept id=\"p1\">**</ept> opening element:","pos":[2742,2821],"source":" Add the definitions immediately after the **\\<configuration>** opening element:"},{"pos":[3355,3446],"content":"Add a <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>location&gt;<ept id=\"p1\">**</ept> element that enables access to the application’s federation metadata:","source":"Add a **\\<location>** element that enables access to the application’s federation metadata:"},{"pos":[3689,3853],"content":"Add the following configuration entries within the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>system.web&gt;<ept id=\"p1\">**</ept> elements to deny users, disable native authentication, and enable WIF to manage authentication.","source":"Add the following configuration entries within the **\\<system.web>** elements to deny users, disable native authentication, and enable WIF to manage authentication."},{"content":"Add the following Windows Identity Foundation related configuration entries and ensure that your ASP.NET application’s URL and port number match the values in the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>audienceUris&gt;<ept id=\"p1\">**</ept> entry, <bpt id=\"p2\">**</bpt>realm<ept id=\"p2\">**</ept> attribute of the <bpt id=\"p3\">**</bpt><ph id=\"ph2\">\\&lt;</ph>wsFederation&gt;<ept id=\"p3\">**</ept> element, and the <bpt id=\"p4\">**</bpt>reply<ept id=\"p4\">**</ept> attribute of the <bpt id=\"p5\">**</bpt><ph id=\"ph3\">\\&lt;</ph>wsFederation&gt;<ept id=\"p5\">**</ept> element.","pos":[4000,4309],"source":"Add the following Windows Identity Foundation related configuration entries and ensure that your ASP.NET application’s URL and port number match the values in the **\\<audienceUris>** entry, **realm** attribute of the **\\<wsFederation>** element, and the **reply** attribute of the **\\<wsFederation>** element."},{"content":"Also ensure that the <bpt id=\"p1\">**</bpt>issuer<ept id=\"p1\">**</ept> value fits your Security Token Service (STS) URL.","pos":[4310,4391],"source":" Also ensure that the **issuer** value fits your Security Token Service (STS) URL."},{"pos":[5553,5611],"content":"Add reference to the <ph id=\"ph1\">&lt;xref:System.IdentityModel&gt;</ph> assembly.","source":"Add reference to the <xref:System.IdentityModel> assembly."},{"content":"Compile the solution to make sure there are errors.","pos":[5621,5672]},{"pos":[5681,5708],"content":"Step 3 – Test Your Solution","linkify":"Step 3 – Test Your Solution","nodes":[{"content":"Step 3 – Test Your Solution","pos":[0,27]}]},{"content":"In this step you will test your ASP.NET MVC web application configured for claims-based authentication.","pos":[5712,5815]},{"content":"To perform basic test you will add simple code that displays claims in the token issued by the Security Token Service (STS).","pos":[5816,5940]},{"pos":[5951,6019],"content":"To test your ASP.NET MVC application for claims-based authentication","linkify":"To test your ASP.NET MVC application for claims-based authentication","nodes":[{"content":"To test your ASP.NET MVC application for claims-based authentication","pos":[0,68]}]},{"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, expand the <bpt id=\"p2\">**</bpt>Controllers<ept id=\"p2\">**</ept> folder and open <bpt id=\"p3\">*</bpt>HomeController.cs<ept id=\"p3\">*</ept> file in the editor.","pos":[6029,6141],"source":"In the **Solution Explorer**, expand the **Controllers** folder and open *HomeController.cs* file in the editor."},{"content":"Add the following code to the <bpt id=\"p1\">**</bpt>Index<ept id=\"p1\">**</ept> method:","pos":[6142,6189],"source":" Add the following code to the **Index** method:"},{"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> expand <bpt id=\"p2\">**</bpt>Views<ept id=\"p2\">**</ept> and then <bpt id=\"p3\">**</bpt>Home<ept id=\"p3\">**</ept> folders and open <bpt id=\"p4\">*</bpt>Index.cshtml<ept id=\"p4\">*</ept> file in the editor.","pos":[6375,6490],"source":"In the **Solution Explorer** expand **Views** and then **Home** folders and open *Index.cshtml* file in the editor."},{"content":"Delete its contents and add the following markup:","pos":[6491,6540]},{"pos":[8111,8155],"content":"Run the solution by pressing the <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> key.","source":"Run the solution by pressing the **F5** key."},{"content":"You should be presented with the page that displays the claims in the token that was issued to you by Security Token Service.","pos":[8165,8290]},{"pos":[8299,8312],"content":"Related Items","linkify":"Related Items","nodes":[{"content":"Related Items","pos":[0,13]}]},{"pos":[8322,8484],"content":"<bpt id=\"p1\">[</bpt>How To: Build Claims-Aware ASP.NET Web Forms Application Using WIF<ept id=\"p1\">](../../../docs/framework/security/how-to-build-claims-aware-aspnet-web-forms-app-using-wif.md)</ept>","source":"[How To: Build Claims-Aware ASP.NET Web Forms Application Using WIF](../../../docs/framework/security/how-to-build-claims-aware-aspnet-web-forms-app-using-wif.md)"}]}