{"content":"---\ntitle: \"How to: Implement a Partitioner for Static Partitioning\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"tasks, how to create a static partitioner\"\nms.assetid: f4410508-cac6-4ba7-bef1-c5e68b2794f3\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Implement a Partitioner for Static Partitioning\nThe following example shows one way to implement a simple custom partitioner for PLINQ that performs static partitioning. Because the partitioner does not support dynamic partitions, it is not consumable from <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>. This particular partitioner might provide speedup over the default range partitioner for data sources for which each element requires an increasing amount of processing time.  \n  \n## Example  \n [!code-csharp[TPL_Partitioners#05](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_partitioners/cs/partitioners.cs#05)]  \n  \n The partitions in this example are based on the assumption of a linear increase in processing time for each element. In the real world, it might be difficult to predict processing times in this way. If you are using a static partitioner with a specific data source, you can optimize the partitioning formula for the source, add load-balancing logic, or use a chunk partitioning approach as demonstrated in [How to: Implement Dynamic Partitions](../../../docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  \n  \n## See also\n\n- [Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)\n","nodes":[{"pos":[4,280],"embed":true,"restype":"x-metadata","content":"title: \"How to: Implement a Partitioner for Static Partitioning\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\nhelpviewer_keywords: \n  - \"tasks, how to create a static partitioner\"\nms.assetid: f4410508-cac6-4ba7-bef1-c5e68b2794f3\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Implement a Partitioner for Static Partitioning","nodes":[{"pos":[0,55],"content":"How to: Implement a Partitioner for Static Partitioning","nodes":[{"content":"How to: Implement a Partitioner for Static Partitioning","pos":[0,55]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[287,342],"content":"How to: Implement a Partitioner for Static Partitioning","linkify":"How to: Implement a Partitioner for Static Partitioning","nodes":[{"content":"How to: Implement a Partitioner for Static Partitioning","pos":[0,55]}]},{"content":"The following example shows one way to implement a simple custom partitioner for PLINQ that performs static partitioning.","pos":[343,464]},{"content":"Because the partitioner does not support dynamic partitions, it is not consumable from <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph>.","pos":[465,631],"source":" Because the partitioner does not support dynamic partitions, it is not consumable from <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>."},{"content":"This particular partitioner might provide speedup over the default range partitioner for data sources for which each element requires an increasing amount of processing time.","pos":[632,806]},{"pos":[815,822],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The partitions in this example are based on the assumption of a linear increase in processing time for each element.","pos":[958,1074]},{"content":"In the real world, it might be difficult to predict processing times in this way.","pos":[1075,1156]},{"content":"If you are using a static partitioner with a specific data source, you can optimize the partitioning formula for the source, add load-balancing logic, or use a chunk partitioning approach as demonstrated in <bpt id=\"p1\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p1\">](../../../docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[1157,1487],"source":" If you are using a static partitioner with a specific data source, you can optimize the partitioning formula for the source, add load-balancing logic, or use a chunk partitioning approach as demonstrated in [How to: Implement Dynamic Partitions](../../../docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."},{"pos":[1496,1504],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1508,1633],"content":"<bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>","source":"[Custom Partitioners for PLINQ and TPL](../../../docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)"}]}