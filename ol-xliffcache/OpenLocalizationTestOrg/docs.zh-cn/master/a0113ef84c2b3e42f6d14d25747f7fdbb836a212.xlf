<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="working-with-calendars.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0113ef84c2b3e42f6d14d25747f7fdbb836a212</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\datetime\working-with-calendars.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c975521c56ea355cb45da741b7fdff7332edd1ef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f686d70fe22bc0628478a23856766343b26e572d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Working with calendars</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Working with calendars</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Although a date and time value represents a moment in time, its string representation is culture-sensitive and depends both on the conventions used for displaying date and time values by a specific culture and on the calendar used by that culture.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic explores the support for calendars in .NET and discusses the use of the calendar classes when working with date values.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Calendars in .NET</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>All calendars in .NET derive from the <ph id="ph1">&lt;xref:System.Globalization.Calendar?displayProperty=nameWithType&gt;</ph> class, which provides the base calendar implementation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>One of the classes that inherits from the <ph id="ph1">&lt;xref:System.Globalization.Calendar&gt;</ph> class is the <ph id="ph2">&lt;xref:System.Globalization.EastAsianLunisolarCalendar&gt;</ph> class, which is the base class for all lunisolar calendars.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>.NET includes the following calendar implementations:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.ChineseLunisolarCalendar&gt;</ph>, which represents the Chinese lunisolar calendar.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.GregorianCalendar&gt;</ph>, which represents the Gregorian calendar.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This calendar is further divided into subtypes (such as Arabic and Middle East French) that are defined by the <ph id="ph1">&lt;xref:System.Globalization.GregorianCalendarTypes?displayProperty=nameWithType&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.GregorianCalendar.CalendarType%2A?displayProperty=nameWithType&gt;</ph> property specifies the subtype of the Gregorian calendar.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.HebrewCalendar&gt;</ph>, which represents the Hebrew calendar.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.HijriCalendar&gt;</ph>, which represents the Hijri calendar.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph>, which represents the Japanese calendar.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.JapaneseLunisolarCalendar&gt;</ph>, which represents the Japanese lunisolar calendar.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.JulianCalendar&gt;</ph>, which represents the Julian calendar.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.KoreanCalendar&gt;</ph>, which represents the Korean calendar.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.KoreanLunisolarCalendar&gt;</ph>, which represents the Korean lunisolar calendar.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.PersianCalendar&gt;</ph>, which represents the Persian calendar.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph>, which represents the Taiwan calendar.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.TaiwanLunisolarCalendar&gt;</ph>, which represents the Taiwan lunisolar calendar.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.ThaiBuddhistCalendar&gt;</ph>, which represents the Thai Buddhist calendar.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.UmAlQuraCalendar&gt;</ph>, which represents the Um Al Qura calendar.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A calendar can be used in one of two ways:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As the calendar used by a specific culture.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object has a current calendar, which is the calendar that the object is currently using.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The string representations of all date and time values automatically reflect the current culture and its current calendar.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Typically, the current calendar is the culture's default calendar.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objects also have optional calendars, which include additional calendars that the culture can use.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>As a standalone calendar independent of a specific culture.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref:System.Globalization.Calendar&gt;</ph> methods are used to express dates as values that reflect the calendar.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Note that six calendar classes – <ph id="ph1">&lt;xref:System.Globalization.ChineseLunisolarCalendar&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.JapaneseLunisolarCalendar&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.JulianCalendar&gt;</ph>, <ph id="ph4">&lt;xref:System.Globalization.KoreanLunisolarCalendar&gt;</ph>, <ph id="ph5">&lt;xref:System.Globalization.PersianCalendar&gt;</ph>, and <ph id="ph6">&lt;xref:System.Globalization.TaiwanLunisolarCalendar&gt;</ph> – can be used only as standalone calendars.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>They are not used by any culture as either the default calendar or as an optional calendar.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Calendars and cultures</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each culture has a default calendar, which is defined by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType&gt;</ph> property returns an array of <ph id="ph2">&lt;xref:System.Globalization.Calendar&gt;</ph> objects that specifies all the calendars supported by a particular culture, including that culture's default calendar.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It creates <ph id="ph1">`CultureInfo`</ph> objects for the Thai (Thailand) and Japanese (Japan) cultures and displays their default and optional calendars.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Note that in both cases, the culture's default calendar is also included in the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The calendar currently in use by a particular <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object is defined by the culture's <ph id="ph2">&lt;xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A culture's <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object is returned by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When a culture is created, its default value is the same as the value of the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, you can change the culture's current calendar to any calendar contained in the array returned by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you try to set the current calendar to a calendar that is not included in the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType&gt;</ph> property value, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example changes the calendar used by the Arabic (Saudi Arabia) culture.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It first instantiates a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value and displays it using the current culture - which, in this case, is English (United States) - and the current culture's calendar (which, in this case, is the Gregorian calendar).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Next, it changes the current culture to Arabic (Saudi Arabia) and displays the date using its default Um Al-Qura calendar.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It then calls the <ph id="ph1">`CalendarExists`</ph> method to determine whether the Hijri calendar is supported by the Arabic (Saudi Arabia) culture.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Because the calendar is supported, it changes the current calendar to Hijri and again displays the date.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Note that in each case, the date is displayed using the current culture's current calendar.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Dates and calendars</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>With the exception of the constructors that include a parameter of type <ph id="ph1">&lt;xref:System.Globalization.Calendar&gt;</ph> and allow the elements of a date (that is, the month, the day, and the year) to reflect values in a designated calendar, both <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph3">&lt;xref:System.DateTimeOffset&gt;</ph> values are always based on the Gregorian calendar.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This means, for example, that the <ph id="ph1">&lt;xref:System.DateTime.Year%2A?displayProperty=nameWithType&gt;</ph> property returns the year in the Gregorian calendar, and the <ph id="ph2">&lt;xref:System.DateTime.Day%2A?displayProperty=nameWithType&gt;</ph> property returns the day of the month in the Gregorian calendar.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It is important to remember that there is a difference between a date value and its string representation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The former is based on the Gregorian calendar; the latter is based on the current calendar of a specific culture.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example illustrates this difference between <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> properties and their corresponding <ph id="ph2">&lt;xref:System.Globalization.Calendar&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the example, the current culture is Arabic (Egypt), and the current calendar is Um Al Qura.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value is set to the fifteenth day of the seventh month of 2011.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It is clear that this is interpreted as a Gregorian date, because these same values are returned by the <ph id="ph1">&lt;xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method when it uses the conventions of the invariant culture.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The string representation of the date that is formatted using the conventions of the current culture is 14/08/32, which is the equivalent date in the Um Al Qura calendar.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Next, members of <ph id="ph1">`DateTime`</ph> and <ph id="ph2">`Calendar`</ph> are used to return the day, the month, and the year of the <ph id="ph3">&lt;xref:System.DateTime&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In each case, the values returned by <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> members reflect values in the Gregorian calendar, whereas values returned by <ph id="ph2">&lt;xref:System.Globalization.UmAlQuraCalendar&gt;</ph> members reflect values in the Uum al-Qura calendar.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Instantiating dates based on a calendar</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> values are based on the Gregorian calendar, you must call an overloaded constructor that includes a parameter of type <ph id="ph3">&lt;xref:System.Globalization.Calendar&gt;</ph> to instantiate a date value if you want to use the day, month, or year values from a different calendar.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also call one of the overloads of a specific calendar's <ph id="ph1">&lt;xref:System.Globalization.Calendar.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> method to instantiate a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> object based on the values of a particular calendar.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example instantiates one <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value by passing a <ph id="ph2">&lt;xref:System.Globalization.HebrewCalendar&gt;</ph> object to a <ph id="ph3">&lt;xref:System.DateTime&gt;</ph> constructor, and instantiates a second <ph id="ph4">&lt;xref:System.DateTime&gt;</ph> value by calling the <ph id="ph5">&lt;xref:System.Globalization.HebrewCalendar.ToDateTime%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because the two values are created with identical values from the Hebrew calendar, the call to the <ph id="ph1">&lt;xref:System.DateTime.Equals%2A?displayProperty=nameWithType&gt;</ph> method shows that the two <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> values are equal.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Representing dates in the current calendar</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Date and time formatting methods always use the current calendar when converting dates to strings.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This means that the string representation of the year, the month, and the day of the month reflect the current calendar, and do not necessarily reflect the Gregorian calendar.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example shows how the current calendar affects the string representation of a date.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It changes the current culture to Chinese (Traditional, Taiwan), and instantiates a date value.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It then displays the current calendar and the date, changes the current calendar to <ph id="ph1">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph>, and displays the current calendar and date once again.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The first time the date is displayed, it is represented as a date in the Gregorian calendar.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The second time it is displayed, it is represented as a date in the Taiwan calendar.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Representing dates in a non-current calendar</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To represent a date using a calendar that is not the current calendar of a particular culture, you must call methods of that <ph id="ph1">&lt;xref:System.Globalization.Calendar&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.Calendar.GetMonth%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType&gt;</ph> methods convert the year, month, and day to values that reflect a particular calendar.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Because some calendars are not optional calendars of any culture, representing dates in these calendars always requires that you call calendar methods.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This is true of all calendars that derive from the <ph id="ph1">&lt;xref:System.Globalization.EastAsianLunisolarCalendar&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.JulianCalendar&gt;</ph>, and <ph id="ph3">&lt;xref:System.Globalization.PersianCalendar&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Globalization.JulianCalendar&gt;</ph> object to instantiate a date, January 9, 1905, in the Julian calendar.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When this date is displayed using the default (Gregorian) calendar, it is represented as January 22, 1905.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Calls to individual <ph id="ph1">&lt;xref:System.Globalization.JulianCalendar&gt;</ph> methods enable the date to be represented in the Julian calendar.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Calendars and date ranges</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The earliest date supported by a calendar is indicated by that calendar's <ph id="ph1">&lt;xref:System.Globalization.Calendar.MinSupportedDateTime%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">&lt;xref:System.Globalization.GregorianCalendar&gt;</ph> class, that date is January 1, 0001 C.E.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Most of the other calendars in .NET support a later date.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Trying to work with a date and time value that precedes a calendar's earliest supported date throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>However, there is one important exception.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The default (uninitialized) value of a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> object and a <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> object is equal to the <ph id="ph3">&lt;xref:System.Globalization.GregorianCalendar.MinSupportedDateTime%2A?displayProperty=nameWithType&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you try to format this date in a calendar that does not support January 1, 0001 C.E.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>and you do not provide a format specifier, the formatting method uses the "s" (sortable date/time pattern) format specifier instead of the "G" (general date/time pattern) format specifier.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>As a result, the formatting operation does not throw an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Instead, it returns the unsupported date.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following example, which displays the value of <ph id="ph1">&lt;xref:System.DateTime.MinValue?displayProperty=nameWithType&gt;</ph> when the current culture is set to Japanese (Japan) with the Japanese calendar, and to Arabic (Egypt) with the Um Al Qura calendar.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It also sets the current culture to English (United States) and calls the <ph id="ph1">&lt;xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method with each of these <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In each case, the date is displayed by using the sortable date/time pattern.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Working with eras</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Calendars typically divide dates into eras.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">&lt;xref:System.Globalization.Calendar&gt;</ph> classes in .NET do not support every era defined by a calendar, and most of the <ph id="ph2">&lt;xref:System.Globalization.Calendar&gt;</ph> classes support only a single era.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Only the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.JapaneseLunisolarCalendar&gt;</ph> classes support multiple eras.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The Reiwa era, a new era in the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.JapaneseLunisolarCalendar&gt;</ph>, begins on May 1, 2019.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This change affects all applications that use these calendars.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>See the following articles for more information:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Handling a new era in the Japanese calendar in .NET<ept id="p1">](https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/)</ept>, which documents features added to .NET to support calendars with multiple eras and discusses best practices to use when handling multi-era calendars.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Prepare your application for the Japanese era change<ept id="p1">](/windows/uwp/design/globalizing/japanese-era-change)</ept>, which provides information on testing your applications on Windows to ensure their readiness for the era change.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Summary of new Japanese Era updates for .NET Framework<ept id="p1">](https://support.microsoft.com/en-us/help/4477957/new-japanese-era-updates-for-net-framework)</ept>, which lists .NET Framework updates for individual Windows versions that are related to the new Japanese calendar era, notes new .NET Framework features for multi-era support, and includes things to look for in testing your applications.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An era in most calendars denotes an extremely long time period.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In the Gregorian calendar, for example, the current era spans more than two millennia.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> and the <ph id="ph2">&lt;xref:System.Globalization.JapaneseLunisolarCalendar&gt;</ph>, the two calendars that support multiple eras, this is not the case.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An era corresponds to the period of an emperor's reign.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Support for multiple eras, particularly when the upper limit of the current era is unknown, poses special challenges.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Eras and era names</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In .NET, integers that represent the eras supported by a particular calendar implementation are stored in reverse order in the <ph id="ph1">&lt;xref:System.Globalization.Calendar.Eras%2A?displayProperty=nameWithType&gt;</ph> array.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The current era (which is the era with the latest time range) is at index zero, and for <ph id="ph1">&lt;xref:System.Globalization.Calendar&gt;</ph> classes that support multiple eras, each successive index reflects the previous era.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The static <ph id="ph1">&lt;xref:System.Globalization.Calendar.CurrentEra?displayProperty=nameWithType&gt;</ph> property defines the index of the current era in the <ph id="ph2">&lt;xref:System.Globalization.Calendar.Eras%2A?displayProperty=nameWithType&gt;</ph> array; it is a constant whose value is always zero.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Individual <ph id="ph1">&lt;xref:System.Globalization.Calendar&gt;</ph> classes also include static fields that return the value of the current era.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>They are listed in the following table.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Calendar class</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Current era field</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The name that corresponds to a particular era number can be retrieved by passing the era number to the <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following example calls these methods to retrieve information about era support in the <ph id="ph1">&lt;xref:System.Globalization.GregorianCalendar&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>It displays the Gregorian calendar date that corresponds to January 1 of the second year of the current era, as well as the Gregorian calendar date that corresponds to January 1 of the second year of each supported Japanese calendar era.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In addition, the "g" custom date and time format string includes a calendar's era name in the string representation of a date and time.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Custom date and time format strings<ept id="p1">](../../../docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Instantiating a date with an era</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For the two <ph id="ph1">&lt;xref:System.Globalization.Calendar&gt;</ph> classes that support multiple eras, a date that consists of a particular year, month, and day of the month value can be ambiguous.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For example, all eras supported by the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> have years whose number is 1.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Ordinarily, if an era is not specified, both date and time and calendar methods assume that values belong to the current era.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This is true of the <ph id="ph1">&lt;xref:System.DateTime.%23ctor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.DateTimeOffset.%23ctor%2A&gt;</ph> constructors that include parameters of type <ph id="ph3">&lt;xref:System.Globalization.Calendar&gt;</ph>, as well as the <bpt id="p1">[</bpt>JapaneseCalendar.ToDateTime<ept id="p1">](xref:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32))</ept> and <bpt id="p2">[</bpt>JapaneseLunisolarCalendar.ToDateTime<ept id="p2">](xref:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32))</ept> methods.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The following example instantiates a date that represents January 1 of the second year of an unspecified era.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If you execute the example when the Reiwa era is the current era, the date is interpreted as the second year of the Reiwa era.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The era, 令和, precedes the year in the string returned by the <ph id="ph1">&lt;xref:System.DateTime.ToString(System.String,System.IFormatProvider)?displayProperty=nameWithType&gt;</ph> method and corresponds to January 1, 2020, in the Gregorian calendar.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>(The Reiwa era begins in the year 2019 of the Gregorian calendar.)</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>However, if the era changes, the intent of this code becomes ambiguous.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Is the date intended to represent the second year of the current era, or is it intended to represent the second year of the Heisei era?</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>There are two ways to avoid this ambiguity:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Instantiate the date and time value using the default <ph id="ph1">&lt;xref:System.Globalization.GregorianCalendar&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You can then use the Japanese calendar or the Japanese Lunisolar calendar for the string representation of dates, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Call a date and time method that explicitly specifies an era.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This includes the following methods:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.JapaneseLunisolarCalendar&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> or <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> parsing method, such as <ph id="ph3">&lt;xref:System.DateTime.Parse%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.DateTime.TryParse%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.DateTime.ParseExact%2A&gt;</ph>, or <ph id="ph6">&lt;xref:System.DateTime.TryParseExact%2A&gt;</ph>, that includes the string to be parsed and optionally a <ph id="ph7">&lt;xref:System.Globalization.DateTimeStyles&gt;</ph> argument if the current culture is Japanese-Japan ("ja-JP") and that culture's calendar is the <ph id="ph8">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The string to be parsed must include the era.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> or <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> parsing method that includes a <ph id="ph3">`provider`</ph> parameter of type <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`provider`</ph> must be either a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the Japanese-Japan ("ja-JP") culture whose current calendar is <ph id="ph3">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> or a <ph id="ph4">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object whose <ph id="ph5">&lt;xref:System.Globalization.DateTimeFormatInfo.Calendar&gt;</ph> property is <ph id="ph6">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The string to be parsed must include the era.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The following example uses three of these methods to instantiate a date and time in the Meiji era, which began on September 8, 1868, and ended on July 29, 1912.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>When working with calendars that support multiple eras, <bpt id="p1">*</bpt>always<ept id="p1">*</ept> use the Gregorian date to instantiate a date, or specify the era when you instantiate a date and time based on that calendar.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>In specifying an era to the <ph id="ph1">&lt;xref:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)&gt;</ph> method, you provide the index of the era in the calendar's <ph id="ph2">&lt;xref:System.Globalization.Calendar.Eras&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For calendars whose eras are subject to change, however, these indexes are not constant values; the current era is at index 0, and the oldest era is at index <ph id="ph1">`Eras.Length - 1`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>When a new era is added to a calendar, the indexes of the previous eras increase by one.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>You can supply the appropriate era index as follows:</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For dates in the current era, always use the calendar's <ph id="ph1">&lt;xref:System.Globalization.Calendar.CurrentEra&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>For dates in a specified era, use the <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType&gt;</ph> method to retrieve the index that corresponds to a specified era name.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>This requires that the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> be the current calendar of the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the ja-JP culture.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>(This technique works for the <ph id="ph1">&lt;xref:System.Globalization.JapaneseLunisolarCalendar&gt;</ph> as well, since it supports the same eras as the <ph id="ph2">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph>.) The previous example illustrates this approach.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Calendars, eras, and date ranges: Relaxed range checks</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Very much like individual calendars have supported date ranges, eras in the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.JapaneseLunisolarCalendar&gt;</ph> classes also have supported ranges.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Previously, .NET used strict era range checks to ensure that an era-specific date was within the range of that era.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>That is, if a date is outside of the range of the specified era, the method throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Currently, .NET uses relaxed ranged checking by default.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Updates to all versions of .NET introduced relaxed era range checks; the attempt to instantiate an era-specific date that is outside the range of the specified era "overflows" into the following era, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The following example attempts to instantiate a date in the 65th year of the Showa era, which began on December 25, 1926 and ended on January 7, 1989.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>This date corresponds to January 9, 1990, which is outside the range of the Showa era in the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>As the output from the example illustrates, the date displayed by the example is January 9, 1990, in the second year of the Heisei era.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>If relaxed range checks are undesirable, you can restore strict range checks in a number of ways, depending on the version of .NET on which your application is running:</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Core:<ept id="p1">**</ept> You can add the following to the <bpt id="p2">*</bpt>.netcore.runtime.json<ept id="p2">*</ept> config file:</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework 4.6 or later:<ept id="p1">**</ept> You can set the following AppContext switch:</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework 4.5.2 or earlier:<ept id="p1">**</ept> You can set the following registry value:</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Key</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>HKEY_LOCAL_MACHINE\Software\Microsoft.NETFramework\AppContext</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Switch.System.Globalization.EnforceJapaneseEraYearRanges</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>REG_SZ</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>With strict range checks enabled, the previous example throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> and displays the following output:</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Representing dates in calendars with multiple eras</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">&lt;xref:System.Globalization.Calendar&gt;</ph> object supports eras and is the current calendar of a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object, the era is included in the string representation of a date and time value for the full date and time, long date, and short date patterns.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The following example displays these date patterns when the current culture is Japan (Japanese) and the current calendar is the Japanese calendar.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> class is the only calendar class in .NET that both supports dates in more than one era and that can be the current calendar of a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object - specifically, of a <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the Japanese (Japan) culture.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For all calendars, the "g" custom format specifier includes the era in the result string.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The following example uses the "MM-dd-yyyy g" custom format string to include the era in the result string when the current calendar is the Gregorian calendar.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>In cases where the string representation of a date is expressed in a calendar that is not the current calendar, the <ph id="ph1">&lt;xref:System.Globalization.Calendar&gt;</ph> class includes a <ph id="ph2">&lt;xref:System.Globalization.Calendar.GetEra%2A?displayProperty=nameWithType&gt;</ph> method that can be used along with the <ph id="ph3">&lt;xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Globalization.Calendar.GetMonth%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph5">&lt;xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType&gt;</ph> methods to unambiguously indicate a date as well as the era to which it belongs.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Globalization.JapaneseLunisolarCalendar&gt;</ph> class to provide an illustration.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>However, note that including a meaningful name or abbreviation instead of an integer for the era in the result string requires that you instantiate a <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object and make <ph id="ph2">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> its current calendar.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>(The <ph id="ph1">&lt;xref:System.Globalization.JapaneseLunisolarCalendar&gt;</ph> calendar cannot be the current calendar of any culture, but in this case the two calendars share the same eras.)</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>In the Japanese calendars, the first year of an era is called Gannen (元年).</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For example, instead of Heisei 1, the first year of the Heisei era can be described as Heisei Gannen.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>.NET adopts this convention in formatting operations for dates and times formatted with the following standard or custom date and time format strings when they are used with a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the Japanese-Japan ("ja-JP") culture with the <ph id="ph2">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The long date pattern<ept id="p1">](../base-types/standard-date-and-time-format-strings.md#LongDate)</ept>, indicated by the "D" standard date and time format string.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The full date long time pattern<ept id="p1">](../base-types/standard-date-and-time-format-strings.md#FullDateLongTime)</ept>, indicated by the "F" standard date and time format string.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The full date short time pattern<ept id="p1">](../base-types/standard-date-and-time-format-strings.md#FullDateShortTime)</ept>, indicated by the "f" standard date and time format string.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The year/month pattern<ept id="p1">](../base-types/standard-date-and-time-format-strings.md#YearMonth)</ept>, indicated by the Y" or "y" standard date and time format string.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>[The "ggy'年'" or "ggy年" <bpt id="p1">[</bpt>custom date and time format string<ept id="p1">](../base-types/custom-date-and-time-format-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>For example, the following example displays a date in the first year of the Heisei era in the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If this behavior is undesirable in formatting operations, you can restore the previous behavior, which always represents the first year of an era as “1” rather than “Gannen”, by doing the following, depending on the version of .NET:</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Core:<ept id="p1">**</ept> You can add the following to the <bpt id="p2">*</bpt>.netcore.runtime.json<ept id="p2">*</ept> config file:</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework 4.6 or later:<ept id="p1">**</ept> You can set the following AppContext switch:</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework 4.5.2 or earlier:<ept id="p1">**</ept> You can set the following registry value:</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Key</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>HKEY_LOCAL_MACHINE\Software\Microsoft.NETFramework\AppContext</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Switch.System.Globalization.FormatJapaneseFirstYearAsANumber</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>REG_SZ</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>With gannen support in formatting operations disabled, the previous example displays the following output:</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>.NET has also been updated so that date and time parsing operations support strings that contain the year represented as either "1" or Gannen.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Although you should not need to do this, you can restore the previous behavior to recognizes only “1” as the first year of an era.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>You can do this as follows, depending on the version of .NET:</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Core:<ept id="p1">**</ept> You can add the following to the <bpt id="p2">*</bpt>.netcore.runtime.json<ept id="p2">*</ept> config file:</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework 4.6 or later:<ept id="p1">**</ept> You can set the following AppContext switch:</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework 4.5.2 or earlier:<ept id="p1">**</ept> You can set the following registry value:</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Key</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>HKEY_LOCAL_MACHINE\Software\Microsoft.NETFramework\AppContext</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Switch.System.Globalization.EnforceLegacyJapaneseDateParsing</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>REG_SZ</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Display dates in non-Gregorian calendars<ept id="p1">](../../../docs/standard/base-types/how-to-display-dates-in-non-gregorian-calendars.md)</ept></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sample: Calendar week range utility<ept id="p1">](https://code.msdn.microsoft.com/NET-Framework-4-Calendar-3360a84a)</ept></source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Calendar class<ept id="p1">](xref:System.Globalization.Calendar)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>