<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bcd325d72ac14f2b33860fbc9e2662c33ca2703d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\how-to-chain-axis-method-calls-linq-to-xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fef7583cd4b6202dc50f4ec3dca7356c0f8e33cd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6c58c3a33d509184b50d81045bf77500135b6a3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Chain Axis Method Calls (LINQ to XML) (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Chain Axis Method Calls (LINQ to XML) (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A common pattern that you will use in your code is to call an axis method, then call one of the extension method axes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are two axes with the name of <ph id="ph1">`Elements`</ph> that return a collection of elements: the <ph id="ph2">&lt;xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can combine these two axes to find all elements of a specified name at a given depth in the tree.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example uses <ph id="ph1">&lt;xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName&gt;</ph> to find all <ph id="ph3">`Name`</ph> elements in all <ph id="ph4">`Address`</ph> elements in all <ph id="ph5">`PurchaseOrder`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Multiple Purchase Orders (LINQ to XML)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This works because one of the implementations of the <ph id="ph1">`Elements`</ph> axis is as an extension method on <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id="ph3">&lt;xref:System.Xml.Linq.XContainer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> derives from <ph id="ph2">&lt;xref:System.Xml.Linq.XContainer&gt;</ph>, so you can call the <ph id="ph3">&lt;xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName&gt;</ph> method on the results of a call to the <ph id="ph4">&lt;xref:System.Xml.Linq.XContainer.Elements%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Sometimes you want to retrieve all elements at a particular element depth when there might or might not be intervening ancestors.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, in the following document, you might want to retrieve all the <ph id="ph1">`ConfigParameter`</ph> elements that are children of the <ph id="ph2">`Customer`</ph> element, but not the <ph id="ph3">`ConfigParameter`</ph> that is a child of the <ph id="ph4">`Root`</ph> element.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To do this, you can use the <ph id="ph1">&lt;xref:System.Xml.Linq.Extensions.Elements%2A?displayProperty=fullName&gt;</ph> axis, as follows:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example shows the same technique for XML that is in a namespace.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Multiple Purchase Orders in a Namespace<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-in-a-namespace.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to XML Axes (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>