{"content":"---\ntitle: \"Applying Attributes | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"assemblies [.NET Framework], attributes\"\n  - \"attributes [.NET Framework], applying\"\nms.assetid: dd7604eb-9fa3-4b60-b2dd-b47739fa3148\ncaps.latest.revision: 19\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Applying Attributes\nUse the following process to apply an attribute to an element of your code.  \n  \n1.  Define a new attribute or use an existing attribute by importing its namespace from the .NET Framework.  \n  \n2.  Apply the attribute to the code element by placing it immediately before the element.  \n  \n     Each language has its own attribute syntax. In C++ and C#, the attribute is surrounded by square brackets and separated from the element by white space, which can include a line break. In Visual Basic, the attribute is surrounded by angle brackets and must be on the same logical line; the line continuation character can be used if a line break is desired. In J#, the attribute is attached using special comment syntax.  \n  \n3.  Specify positional parameters and named parameters for the attribute.  \n  \n     Positional parameters are required and must come before any named parameters; they correspond to the parameters of one of the attribute's constructors. Named parameters are optional and correspond to read/write properties of the attribute. In C++, C#, and J#, specify `name`=`value` for each optional parameter, where `name` is the name of the property. In Visual Basic, specify `name`:=`value`.  \n  \n The attribute is emitted into metadata when you compile your code and is available to the common language runtime and any custom tool or application through the runtime reflection services.  \n  \n By convention, all attribute names end with Attribute. However, several languages that target the runtime, such as Visual Basic and C#, do not require you to specify the full name of an attribute. For example, if you want to initialize <xref:System.ObsoleteAttribute?displayProperty=fullName>, you only need to reference it as **Obsolete**.  \n  \n## Applying an Attribute to a Method  \n The following code example shows how to declare **System.ObsoleteAttribute**, which marks code as obsolete. The string `\"Will be removed in next version\"` is passed to the attribute. This attribute causes a compiler warning that displays the passed string when code that the attribute describes is called.  \n  \n [!code-cpp[Conceptual.Attributes.Usage#3](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.attributes.usage/cpp/source1.cpp#3)]\n [!code-csharp[Conceptual.Attributes.Usage#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.attributes.usage/cs/source1.cs#3)]\n [!code-vb[Conceptual.Attributes.Usage#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.attributes.usage/vb/source1.vb#3)]  \n  \n## Applying Attributes at the Assembly Level  \n If you want to apply an attribute at the assembly level, use the **assembly** (`Assembly` in Visual Basic) keyword. The following code shows the **AssemblyTitleAttribute** applied at the assembly level.  \n  \n [!code-cpp[Conceptual.Attributes.Usage#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.attributes.usage/cpp/source1.cpp#2)]\n [!code-csharp[Conceptual.Attributes.Usage#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.attributes.usage/cs/source1.cs#2)]\n [!code-vb[Conceptual.Attributes.Usage#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.attributes.usage/vb/source1.vb#2)]  \n  \n When this attribute is applied, the string `\"My Assembly\"` is placed in the assembly manifest in the metadata portion of the file. You can view the attribute either by using the [MSIL Disassembler (Ildasm.exe)](../../../docs/framework/tools/ildasm-exe-il-disassembler.md) or by creating a custom program to retrieve the attribute.  \n  \n## See Also  \n [Attributes](../../../docs/standard/attributes/index.md)   \n [Retrieving Information Stored in Attributes](../../../docs/standard/attributes/retrieving-information-stored-in-attributes.md)   \n [Concepts](/cpp/windows/attributed-programming-concepts)   \n [Attributes](http://msdn.microsoft.com/library/ae334cee-d96c-4243-a5e3-06dd7fcaf205)","nodes":[{"pos":[4,445],"embed":true,"restype":"x-metadata","content":"title: \"Applying Attributes | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"assemblies [.NET Framework], attributes\"\n  - \"attributes [.NET Framework], applying\"\nms.assetid: dd7604eb-9fa3-4b60-b2dd-b47739fa3148\ncaps.latest.revision: 19\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"Applying Attributes | Microsoft Docs","nodes":[{"pos":[0,36],"content":"Applying Attributes | Microsoft Docs","nodes":[{"content":"Applying Attributes | Microsoft Docs","pos":[0,36]}]}],"path":["title"]}],"yml":true},{"pos":[452,471],"content":"Applying Attributes","linkify":"Applying Attributes","nodes":[{"content":"Applying Attributes","pos":[0,19]}]},{"content":"Use the following process to apply an attribute to an element of your code.","pos":[472,547]},{"content":"Define a new attribute or use an existing attribute by importing its namespace from the .NET Framework.","pos":[557,660]},{"content":"Apply the attribute to the code element by placing it immediately before the element.","pos":[670,755]},{"content":"Each language has its own attribute syntax.","pos":[766,809]},{"content":"In C++ and C#, the attribute is surrounded by square brackets and separated from the element by white space, which can include a line break.","pos":[810,950]},{"content":"In Visual Basic, the attribute is surrounded by angle brackets and must be on the same logical line; the line continuation character can be used if a line break is desired.","pos":[951,1123]},{"content":"In J#, the attribute is attached using special comment syntax.","pos":[1124,1186]},{"content":"Specify positional parameters and named parameters for the attribute.","pos":[1196,1265]},{"content":"Positional parameters are required and must come before any named parameters; they correspond to the parameters of one of the attribute's constructors.","pos":[1276,1427]},{"content":"Named parameters are optional and correspond to read/write properties of the attribute.","pos":[1428,1515]},{"content":"In C++, C#, and J#, specify <ph id=\"ph1\">`name`</ph><ph id=\"ph2\">=</ph><ph id=\"ph3\">`value`</ph> for each optional parameter, where <ph id=\"ph4\">`name`</ph> is the name of the property.","pos":[1516,1629],"source":" In C++, C#, and J#, specify `name`=`value` for each optional parameter, where `name` is the name of the property."},{"content":"In Visual Basic, specify <ph id=\"ph1\">`name`</ph>:=<ph id=\"ph2\">`value`</ph>.","pos":[1630,1671],"source":" In Visual Basic, specify `name`:=`value`."},{"content":"The attribute is emitted into metadata when you compile your code and is available to the common language runtime and any custom tool or application through the runtime reflection services.","pos":[1678,1867]},{"content":"By convention, all attribute names end with Attribute.","pos":[1874,1928]},{"content":"However, several languages that target the runtime, such as Visual Basic and C#, do not require you to specify the full name of an attribute.","pos":[1929,2070]},{"content":"For example, if you want to initialize <ph id=\"ph1\">&lt;xref:System.ObsoleteAttribute?displayProperty=fullName&gt;</ph>, you only need to reference it as <bpt id=\"p1\">**</bpt>Obsolete<ept id=\"p1\">**</ept>.","pos":[2071,2214],"source":" For example, if you want to initialize <xref:System.ObsoleteAttribute?displayProperty=fullName>, you only need to reference it as **Obsolete**."},{"pos":[2223,2256],"content":"Applying an Attribute to a Method","linkify":"Applying an Attribute to a Method","nodes":[{"content":"Applying an Attribute to a Method","pos":[0,33]}]},{"content":"The following code example shows how to declare <bpt id=\"p1\">**</bpt>System.ObsoleteAttribute<ept id=\"p1\">**</ept>, which marks code as obsolete.","pos":[2260,2367],"source":"The following code example shows how to declare **System.ObsoleteAttribute**, which marks code as obsolete."},{"content":"The string <ph id=\"ph1\">`\"Will be removed in next version\"`</ph> is passed to the attribute.","pos":[2368,2442],"source":" The string `\"Will be removed in next version\"` is passed to the attribute."},{"content":"This attribute causes a compiler warning that displays the passed string when code that the attribute describes is called.","pos":[2443,2565]},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Attributes.Usage#3<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.attributes.usage/cpp/source1.cpp#3)</ept><ept id=\"p1\">]</ept>","pos":[2572,2707],"source":"[!code-cpp[Conceptual.Attributes.Usage#3](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.attributes.usage/cpp/source1.cpp#3)]"},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Attributes.Usage#3<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.attributes.usage/cs/source1.cs#3)</ept><ept id=\"p1\">]</ept>","pos":[2709,2848],"source":"[!code-csharp[Conceptual.Attributes.Usage#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.attributes.usage/cs/source1.cs#3)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>Conceptual.Attributes.Usage#3<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.attributes.usage/vb/source1.vb#3)</ept><ept id=\"p1\">]</ept>","pos":[2850,2990],"source":"[!code-vb[Conceptual.Attributes.Usage#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.attributes.usage/vb/source1.vb#3)]"},{"pos":[2999,3040],"content":"Applying Attributes at the Assembly Level","linkify":"Applying Attributes at the Assembly Level","nodes":[{"content":"Applying Attributes at the Assembly Level","pos":[0,41]}]},{"content":"If you want to apply an attribute at the assembly level, use the <bpt id=\"p1\">**</bpt>assembly<ept id=\"p1\">**</ept> (<ph id=\"ph1\">`Assembly`</ph> in Visual Basic) keyword.","pos":[3044,3159],"source":"If you want to apply an attribute at the assembly level, use the **assembly** (`Assembly` in Visual Basic) keyword."},{"content":"The following code shows the <bpt id=\"p1\">**</bpt>AssemblyTitleAttribute<ept id=\"p1\">**</ept> applied at the assembly level.","pos":[3160,3246],"source":" The following code shows the **AssemblyTitleAttribute** applied at the assembly level."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Attributes.Usage#2<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.attributes.usage/cpp/source1.cpp#2)</ept><ept id=\"p1\">]</ept>","pos":[3253,3388],"source":"[!code-cpp[Conceptual.Attributes.Usage#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.attributes.usage/cpp/source1.cpp#2)]"},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Conceptual.Attributes.Usage#2<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.attributes.usage/cs/source1.cs#2)</ept><ept id=\"p1\">]</ept>","pos":[3390,3529],"source":"[!code-csharp[Conceptual.Attributes.Usage#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.attributes.usage/cs/source1.cs#2)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>Conceptual.Attributes.Usage#2<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.attributes.usage/vb/source1.vb#2)</ept><ept id=\"p1\">]</ept>","pos":[3531,3671],"source":"[!code-vb[Conceptual.Attributes.Usage#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.attributes.usage/vb/source1.vb#2)]"},{"content":"When this attribute is applied, the string <ph id=\"ph1\">`\"My Assembly\"`</ph> is placed in the assembly manifest in the metadata portion of the file.","pos":[3678,3808],"source":"When this attribute is applied, the string `\"My Assembly\"` is placed in the assembly manifest in the metadata portion of the file."},{"content":"You can view the attribute either by using the <bpt id=\"p1\">[</bpt>MSIL Disassembler (Ildasm.exe)<ept id=\"p1\">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> or by creating a custom program to retrieve the attribute.","pos":[3809,4008],"source":" You can view the attribute either by using the [MSIL Disassembler (Ildasm.exe)](../../../docs/framework/tools/ildasm-exe-il-disassembler.md) or by creating a custom program to retrieve the attribute."},{"pos":[4017,4025],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](../../../docs/standard/attributes/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4029,4086],"source":"[Attributes](../../../docs/standard/attributes/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Retrieving Information Stored in Attributes<ept id=\"p1\">](../../../docs/standard/attributes/retrieving-information-stored-in-attributes.md)</ept><ph id=\"ph1\"> </ph>","pos":[4090,4218],"source":"[Retrieving Information Stored in Attributes](../../../docs/standard/attributes/retrieving-information-stored-in-attributes.md) "},{"content":"<bpt id=\"p1\">[</bpt>Concepts<ept id=\"p1\">](/cpp/windows/attributed-programming-concepts)</ept><ph id=\"ph1\"> </ph>","pos":[4222,4279],"source":"[Concepts](/cpp/windows/attributed-programming-concepts) "},{"content":"<bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](http://msdn.microsoft.com/library/ae334cee-d96c-4243-a5e3-06dd7fcaf205)</ept>","pos":[4283,4367],"source":"[Attributes](http://msdn.microsoft.com/library/ae334cee-d96c-4243-a5e3-06dd7fcaf205)"}]}