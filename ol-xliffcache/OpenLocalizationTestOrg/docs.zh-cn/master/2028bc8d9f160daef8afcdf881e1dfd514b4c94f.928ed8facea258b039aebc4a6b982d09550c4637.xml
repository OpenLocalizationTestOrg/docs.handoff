{"content":"---\ntitle: \"Viewing Type Information\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"types, viewing type information\"\n  - \"Type object\"\n  - \"viewing type information\"\n  - \"reflection, viewing type information\"\nms.assetid: 7e7303a9-4064-4738-b4e7-b75974ed70d2\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Viewing Type Information\nThe <xref:System.Type?displayProperty=nameWithType> class is central to reflection. The common language runtime creates the **Type** for a loaded type when reflection requests it. You can use a **Type** object's methods, fields, properties, and nested classes to find out everything about that type.  \n  \n Use <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> to obtain **Type** objects from assemblies that have not been loaded, passing in the name of the type or types you want. Use <xref:System.Type.GetType%2A?displayProperty=nameWithType> to get the **Type** objects from an assembly that is already loaded. Use <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType> and <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType> to obtain module **Type** objects.  \n  \n> [!NOTE]\n>  If you want to examine and manipulate generic types and methods, please see the additional information provided in [Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md) and [How to: Examine and Instantiate Generic Types with Reflection](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md).  \n  \n The following example shows the syntax necessary to get the <xref:System.Reflection.Assembly> object and module for an assembly.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#6](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source5.cpp#6)]\n [!code-csharp[Conceptual.Types.ViewInfo#6](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source5.cs#6)]\n [!code-vb[Conceptual.Types.ViewInfo#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source5.vb#6)]  \n  \n The following example demonstrates getting **Type** objects from a loaded assembly.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#7](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source5.cpp#7)]\n [!code-csharp[Conceptual.Types.ViewInfo#7](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source5.cs#7)]\n [!code-vb[Conceptual.Types.ViewInfo#7](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source5.vb#7)]  \n  \n Once you obtain a **Type**, there are many ways you can discover information about the members of that type. For example, you can find out about all the type's members by calling the <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method, which obtains an array of <xref:System.Reflection.MemberInfo> objects describing each of the members of the current type.  \n  \n You can also use methods on the **Type** class to retrieve information about one or more constructors, methods, events, fields, or properties that you specify by name. For example, <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> encapsulates a specific constructor of the current class.  \n  \n If you have a **Type**, you can use the <xref:System.Type.Module%2A?displayProperty=nameWithType> property to obtain an object that encapsulates the module containing that type. Use the <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType> property to locate an object that encapsulates the assembly containing the module. You can obtain the assembly that encapsulates the type directly by using the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property.  \n  \n## System.Type and ConstructorInfo  \n The following example shows how to list the constructors for a class, in this case, the <xref:System.String> class.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#1](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source1.cpp#1)]\n [!code-csharp[Conceptual.Types.ViewInfo#1](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source1.cs#1)]\n [!code-vb[Conceptual.Types.ViewInfo#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source1.vb#1)]  \n  \n## MemberInfo, MethodInfo, FieldInfo, and PropertyInfo  \n Obtain information about the type's methods, properties, events, and fields using <xref:System.Reflection.MemberInfo>, <xref:System.Reflection.MethodInfo>, <xref:System.Reflection.FieldInfo>, or <xref:System.Reflection.PropertyInfo> objects.  \n  \n The following example uses **MemberInfo** to list the number of members in the **System.IO.File** class and uses the <xref:System.Type.IsPublic%2A> property to determine the visibility of the class.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source2.cpp#2)]\n [!code-csharp[Conceptual.Types.ViewInfo#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source2.cs#2)]\n [!code-vb[Conceptual.Types.ViewInfo#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source2.vb#2)]  \n  \n The following example investigates the type of the specified member. It performs reflection on a member of the **MemberInfo** class, and lists its type.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#3](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source3.cpp#3)]\n [!code-csharp[Conceptual.Types.ViewInfo#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source3.cs#3)]\n [!code-vb[Conceptual.Types.ViewInfo#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source3.vb#3)]  \n  \n The following example uses all the Reflection **\\*Info** classes along with <xref:System.Reflection.BindingFlags> to list all the members (constructors, fields, properties, events, and methods) of the specified class, dividing the members into static and instance categories.  \n  \n [!code-cpp[Conceptual.Types.ViewInfo#4](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.types.viewinfo/cpp/source4.cpp#4)]\n [!code-csharp[Conceptual.Types.ViewInfo#4](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.types.viewinfo/cs/source4.cs#4)]\n [!code-vb[Conceptual.Types.ViewInfo#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.types.viewinfo/vb/source4.vb#4)]  \n  \n## See also\n\n- <xref:System.Reflection.BindingFlags>\n- <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>\n- <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>\n- <xref:System.Type.GetType%2A?displayProperty=nameWithType>\n- <xref:System.Type.GetMembers%2A?displayProperty=nameWithType>\n- <xref:System.Type.GetFields%2A?displayProperty=nameWithType>\n- <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>\n- <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>\n- <xref:System.Reflection.MemberInfo>\n- <xref:System.Reflection.ConstructorInfo>\n- <xref:System.Reflection.MethodInfo>\n- <xref:System.Reflection.FieldInfo>\n- <xref:System.Reflection.EventInfo>\n- <xref:System.Reflection.ParameterInfo>\n- [Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)\n","nodes":[{"pos":[4,344],"embed":true,"restype":"x-metadata","content":"title: \"Viewing Type Information\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"types, viewing type information\"\n  - \"Type object\"\n  - \"viewing type information\"\n  - \"reflection, viewing type information\"\nms.assetid: 7e7303a9-4064-4738-b4e7-b75974ed70d2\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Viewing Type Information","nodes":[{"pos":[0,24],"content":"Viewing Type Information","nodes":[{"content":"Viewing Type Information","pos":[0,24]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[351,375],"content":"Viewing Type Information","linkify":"Viewing Type Information","nodes":[{"content":"Viewing Type Information","pos":[0,24]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> class is central to reflection.","pos":[376,459],"source":"The <xref:System.Type?displayProperty=nameWithType> class is central to reflection."},{"content":"The common language runtime creates the <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> for a loaded type when reflection requests it.","pos":[460,555],"source":" The common language runtime creates the **Type** for a loaded type when reflection requests it."},{"content":"You can use a <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> object's methods, fields, properties, and nested classes to find out everything about that type.","pos":[556,675],"source":" You can use a **Type** object's methods, fields, properties, and nested classes to find out everything about that type."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType&gt;</ph> to obtain <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> objects from assemblies that have not been loaded, passing in the name of the type or types you want.","pos":[682,958],"source":"Use <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> to obtain **Type** objects from assemblies that have not been loaded, passing in the name of the type or types you want."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> to get the <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> objects from an assembly that is already loaded.","pos":[959,1090],"source":" Use <xref:System.Type.GetType%2A?displayProperty=nameWithType> to get the **Type** objects from an assembly that is already loaded."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType&gt;</ph> to obtain module <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> objects.","pos":[1091,1278],"source":" Use <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType> and <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType> to obtain module **Type** objects."},{"pos":[1286,1703],"content":"[!NOTE]\n If you want to examine and manipulate generic types and methods, please see the additional information provided in [Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md) and [How to: Examine and Instantiate Generic Types with Reflection](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md).","leadings":["","> "],"nodes":[{"content":"If you want to examine and manipulate generic types and methods, please see the additional information provided in <bpt id=\"p1\">[</bpt>Reflection and Generic Types<ept id=\"p1\">](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Examine and Instantiate Generic Types with Reflection<ept id=\"p2\">](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md)</ept>.","pos":[9,415],"source":"If you want to examine and manipulate generic types and methods, please see the additional information provided in [Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md) and [How to: Examine and Instantiate Generic Types with Reflection](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md)."}]},{"pos":[1710,1838],"content":"The following example shows the syntax necessary to get the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> object and module for an assembly.","source":"The following example shows the syntax necessary to get the <xref:System.Reflection.Assembly> object and module for an assembly."},{"pos":[2258,2341],"content":"The following example demonstrates getting <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> objects from a loaded assembly.","source":"The following example demonstrates getting **Type** objects from a loaded assembly."},{"content":"Once you obtain a <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>, there are many ways you can discover information about the members of that type.","pos":[2761,2869],"source":"Once you obtain a **Type**, there are many ways you can discover information about the members of that type."},{"content":"For example, you can find out about all the type's members by calling the <ph id=\"ph1\">&lt;xref:System.Type.GetMembers%2A?displayProperty=nameWithType&gt;</ph> method, which obtains an array of <ph id=\"ph2\">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects describing each of the members of the current type.","pos":[2870,3135],"source":" For example, you can find out about all the type's members by calling the <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method, which obtains an array of <xref:System.Reflection.MemberInfo> objects describing each of the members of the current type."},{"content":"You can also use methods on the <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> class to retrieve information about one or more constructors, methods, events, fields, or properties that you specify by name.","pos":[3142,3309],"source":"You can also use methods on the **Type** class to retrieve information about one or more constructors, methods, events, fields, or properties that you specify by name."},{"content":"For example, <ph id=\"ph1\">&lt;xref:System.Type.GetConstructor%2A?displayProperty=nameWithType&gt;</ph> encapsulates a specific constructor of the current class.","pos":[3310,3446],"source":" For example, <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> encapsulates a specific constructor of the current class."},{"content":"If you have a <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept>, you can use the <ph id=\"ph1\">&lt;xref:System.Type.Module%2A?displayProperty=nameWithType&gt;</ph> property to obtain an object that encapsulates the module containing that type.","pos":[3453,3630],"source":"If you have a **Type**, you can use the <xref:System.Type.Module%2A?displayProperty=nameWithType> property to obtain an object that encapsulates the module containing that type."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType&gt;</ph> property to locate an object that encapsulates the assembly containing the module.","pos":[3631,3794],"source":" Use the <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType> property to locate an object that encapsulates the assembly containing the module."},{"content":"You can obtain the assembly that encapsulates the type directly by using the <ph id=\"ph1\">&lt;xref:System.Type.Assembly%2A?displayProperty=nameWithType&gt;</ph> property.","pos":[3795,3941],"source":" You can obtain the assembly that encapsulates the type directly by using the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property."},{"pos":[3950,3981],"content":"System.Type and ConstructorInfo","linkify":"System.Type and ConstructorInfo","nodes":[{"content":"System.Type and ConstructorInfo","pos":[0,31]}]},{"pos":[3985,4100],"content":"The following example shows how to list the constructors for a class, in this case, the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class.","source":"The following example shows how to list the constructors for a class, in this case, the <xref:System.String> class."},{"pos":[4522,4573],"content":"MemberInfo, MethodInfo, FieldInfo, and PropertyInfo","linkify":"MemberInfo, MethodInfo, FieldInfo, and PropertyInfo","nodes":[{"content":"MemberInfo, MethodInfo, FieldInfo, and PropertyInfo","pos":[0,51]}]},{"pos":[4577,4818],"content":"Obtain information about the type's methods, properties, events, and fields using <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objects.","source":"Obtain information about the type's methods, properties, events, and fields using <xref:System.Reflection.MemberInfo>, <xref:System.Reflection.MethodInfo>, <xref:System.Reflection.FieldInfo>, or <xref:System.Reflection.PropertyInfo> objects."},{"pos":[4825,5023],"content":"The following example uses <bpt id=\"p1\">**</bpt>MemberInfo<ept id=\"p1\">**</ept> to list the number of members in the <bpt id=\"p2\">**</bpt>System.IO.File<ept id=\"p2\">**</ept> class and uses the <ph id=\"ph1\">&lt;xref:System.Type.IsPublic%2A&gt;</ph> property to determine the visibility of the class.","source":"The following example uses **MemberInfo** to list the number of members in the **System.IO.File** class and uses the <xref:System.Type.IsPublic%2A> property to determine the visibility of the class."},{"content":"The following example investigates the type of the specified member.","pos":[5443,5511]},{"content":"It performs reflection on a member of the <bpt id=\"p1\">**</bpt>MemberInfo<ept id=\"p1\">**</ept> class, and lists its type.","pos":[5512,5595],"source":" It performs reflection on a member of the **MemberInfo** class, and lists its type."},{"pos":[6015,6290],"content":"The following example uses all the Reflection <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\*</ph>Info<ept id=\"p1\">**</ept> classes along with <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags&gt;</ph> to list all the members (constructors, fields, properties, events, and methods) of the specified class, dividing the members into static and instance categories.","source":"The following example uses all the Reflection **\\*Info** classes along with <xref:System.Reflection.BindingFlags> to list all the members (constructors, fields, properties, events, and methods) of the specified class, dividing the members into static and instance categories."},{"pos":[6712,6720],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7488,7598],"content":"<bpt id=\"p1\">[</bpt>Reflection and Generic Types<ept id=\"p1\">](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)</ept>","source":"[Reflection and Generic Types](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)"}]}