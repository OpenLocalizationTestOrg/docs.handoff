<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="enumeration-types.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2014047f17f766023ba4db4981aad6e6d4902381</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\enumeration-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20feed78a9d9c30d88b37ac1c11ab4364c8ff8dc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0921a0945df2598500c0e211207ed2dbbd15b324</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Enumeration Types (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Enumeration Types (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An enumeration type (also named an enumeration or an enum) provides an efficient way to define a set of named integral constants that may be assigned to a variable.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, assume that you have to define a variable whose value will represent a day of the week.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are only seven meaningful values which that variable will ever store.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To define those values, you can use an enumeration type, which is declared by using the <bpt id="p1">[</bpt>enum<ept id="p1">](../../csharp/language-reference/keywords/enum.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By default the underlying type of each element in the enum is <bpt id="p1">[</bpt>int<ept id="p1">](../../csharp/language-reference/keywords/int.md)</ept>. You can specify another integral numeric type by using a colon, as shown in the previous example.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For a full list of possible types, see <bpt id="p1">[</bpt>enum (C# Reference)<ept id="p1">](../../csharp/language-reference/keywords/enum.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can verify the underlying numeric values by casting  to the underlying type, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following are advantages of using an enum instead of a numeric type:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You clearly specify for client code which values are valid for the variable.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vsprvs](../../csharp/includes/vsprvs_md.md)]</ph>, IntelliSense lists the defined values.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you do not specify values for the elements in the enumerator list, the values are automatically incremented by 1.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the previous example, <ph id="ph1">`Days.Sunday`</ph> has a value of 0, <ph id="ph2">`Days.Monday`</ph> has a value of 1, and so on.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When you create a new <ph id="ph1">`Days`</ph> object, it will have a default value of <ph id="ph2">`Days.Sunday`</ph> (0) if you do not explicitly assign it a value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you create an enum, select the most logical default value and give it a value of zero.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>That will cause all enums to have that default value if they are not explicitly assigned a value when they are created.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the variable <ph id="ph1">`meetingDay`</ph> is of type <ph id="ph2">`Days`</ph>, then (without an explicit cast) you can only assign it one of the values defined by <ph id="ph3">`Days`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>And if the meeting day changes, you can assign a new value from <ph id="ph1">`Days`</ph> to <ph id="ph2">`meetingDay`</ph>:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It is possible to assign any arbitrary integer value to <ph id="ph1">`meetingDay`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, this line of code does not produce an error: <ph id="ph1">`meetingDay = (Days) 42`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, you should not do this because the implicit expectation is that an enum variable will only hold one of the values defined by the enum.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To assign an arbitrary value to a variable of an enumeration type is to introduce a high risk for errors.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can assign any values to the elements in the enumerator list of an enumeration type, and you can also use computed values:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Enumeration Types as Bit Flags</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can use an enumeration type to define bit flags, which enables an instance of the enumeration type to store any combination of the values that are defined in the enumerator list.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>(Of course, some combinations may not be meaningful or allowed in your program code.)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You create a bit flags enum by applying the <ph id="ph1">&lt;xref:System.FlagsAttribute?displayProperty=fullName&gt;</ph> attribute and defining the values appropriately so that <ph id="ph2">`AND`</ph>, <ph id="ph3">`OR`</ph>, <ph id="ph4">`NOT`</ph> and <ph id="ph5">`XOR`</ph> bitwise operations can be performed on them.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In a bit flags enum, include a named constant with a value of zero that means "no flags are set."</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Do not give a flag a value of zero if it does not mean "no flags are set".</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the following example, another version of the <ph id="ph1">`Days`</ph> enum, which is named <ph id="ph2">`Days2`</ph>, is defined.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Days2`</ph> has the <ph id="ph2">`Flags`</ph> attribute and each value is assigned the next greater power of 2.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This enables you to create a <ph id="ph1">`Days2`</ph> variable whose value is <ph id="ph2">`Days2.Tuesday`</ph> and <ph id="ph3">`Days2.Thursday`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To set a flag on an enum, use the bitwise <ph id="ph1">`OR`</ph> operator as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To determine whether a specific flag is set, use a bitwise <ph id="ph1">`AND`</ph> operation, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information about what to consider when you define enumeration types with the <ph id="ph1">&lt;xref:System.FlagsAttribute?displayProperty=fullName&gt;</ph> attribute, see <ph id="ph2">&lt;xref:System.Enum?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Using the System.Enum Methods to Discover and Manipulate Enum Values</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>All enums are instances of the <ph id="ph1">&lt;xref:System.Enum?displayProperty=fullName&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You cannot derive new classes from <ph id="ph1">&lt;xref:System.Enum?displayProperty=fullName&gt;</ph>, but you can use its methods to discover information about and manipulate values in an enum instance.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Enum?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can also create a new method for an enum by using an extension method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create a New Method for an Enumeration<ept id="p1">](../../csharp/programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Enum?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>enum<ept id="p1">](../../csharp/language-reference/keywords/enum.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>