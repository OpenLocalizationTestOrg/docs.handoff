{"content":"---\ntitle: \"How to: Update the Definition of a Running Workflow Instance | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 26dfac36-ae23-4909-9867-62495b55fb5e\ncaps.latest.revision: 6\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Update the Definition of a Running Workflow Instance\nDynamic update provides a mechanism for workflow application developers to update the workflow definition of a persisted workflow instance. The required change can be to implement a bug fix, new requirements, or to accommodate unexpected changes. This step in the tutorial demonstrates how to use dynamic update to modify  persisted instances of the `v1` number guessing workflow to match the new functionality introduced in [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md).  \n  \n> [!NOTE]\n>  To download a completed version or view a video walkthrough of the tutorial, see [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976).  \n  \n## In this topic  \n  \n-   [To create the CreateUpdateMaps project](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_CreateProject)  \n  \n-   [To update StateMachineNumberGuessWorkflow](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_StateMachine)  \n  \n-   [To update FlowchartNumberGuessWorkflow](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_Flowchart)  \n  \n-   [To update SequentialNumberGuessWorkflow](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_Sequential)  \n  \n-   [To build and run the CreateUpdateMaps application](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_CreateUpdateMaps)  \n  \n-   [To build the updated workflow assembly](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_BuildAssembly)  \n  \n-   [To update WorkflowVersionMap with the new versions](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_UpdateWorkflowVersionMap)  \n  \n-   [To apply the dynamic updates](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_ApplyUpdate)  \n  \n-   [To run the application with the updated workflows](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_BuildAndRun)  \n  \n-   [To enable starting previous versions of the workflows](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_StartPreviousVersions)  \n  \n###  <a name=\"BKMK_CreateProject\"></a> To create the CreateUpdateMaps project  \n  \n1.  Right-click **WF45GettingStartedTutorial** in **Solution Explorer** and choose **Add**, **New Project**.  \n  \n2.  In the **Installed** node, select **Visual C#**, **Windows** (or **Visual Basic**, **Windows**).  \n  \n    > [!NOTE]\n    >  Depending on which programming language is configured as the primary language in Visual Studio, the **Visual C#** or **Visual Basic** node may be under the **Other Languages** node in the **Installed** node.  \n  \n     Ensure that **.NET Framework 4.5** is selected in the .NET Framework version drop-down list. Select **Console Application** from the **Windows** list. Type **CreateUpdateMaps** into the **Name** box and click **OK**.  \n  \n3.  Right-click **CreateUpdateMaps** in **Solution Explorer** and choose **Add Reference**.  \n  \n4.  Select **Framework** from the **Assemblies** node in the **Add Reference** list. Type **System.Activities** into the **Search Assemblies** box to filter the assemblies and make the desired references easier to select.  \n  \n5.  Check the checkbox beside **System.Activities** from the **Search Results** list.  \n  \n6.  Type **Serialization** into the **Search Assemblies** box, and check the checkbox beside **System.Runtime.Serialization** from the **Search Results** list.  \n  \n7.  Type **System.Xaml** into the **Search Assemblies** box, and check the checkbox beside **System.Xaml** from the **Search Results** list.  \n  \n8.  Click **OK** to close **Reference Manager** and add the references.  \n  \n9. Add the following `using` (or `Imports`) statements at the top of the file with the other `using` (or `Imports`) statements.  \n  \n    ```vb  \n    Imports System.Activities  \n    Imports System.Activities.Statements  \n    Imports System.Xaml  \n    Imports System.Reflection  \n    Imports System.IO  \n    Imports System.Activities.XamlIntegration  \n    Imports System.Activities.DynamicUpdate  \n    Imports System.Runtime.Serialization  \n    Imports Microsoft.VisualBasic.Activities  \n    ```  \n  \n    ```csharp  \n    using System.Activities;  \n    using System.Activities.Statements;  \n    using System.IO;  \n    using System.Xaml;  \n    using System.Reflection;  \n    using System.Activities.XamlIntegration;  \n    using System.Activities.DynamicUpdate;  \n    using System.Runtime.Serialization;  \n    using Microsoft.CSharp.Activities;  \n    ```  \n  \n10. Add the following two string members to the `Program` class (or `Module1`).  \n  \n    ```vb  \n    Const mapPath = \"..\\..\\..\\PreviousVersions\"  \n    Const definitionPath = \"..\\..\\..\\NumberGuessWorkflowActivities_du\"  \n    ```  \n  \n    ```csharp  \n    const string mapPath = @\"..\\..\\..\\PreviousVersions\";  \n    const string definitionPath = @\"..\\..\\..\\NumberGuessWorkflowActivities_du\";  \n    ```  \n  \n11. Add the following `StartUpdate` method to the `Program` class (or `Module1`). This method loads up the specified xaml workflow definition into an `ActivityBuilder`, and then calls `DynamicUpdate.PrepareForUpdate`. `PrepareForUpdate` makes a copy of the workflow definition inside the `ActivityBuilder`. After the workflow definition is modified, this copy is used along with the modified workflow definition to create the update map.  \n  \n    ```vb  \n    Private Function StartUpdate(name As String) As ActivityBuilder  \n        'Create the XamlXmlReaderSettings.  \n        Dim readerSettings As XamlReaderSettings = New XamlXmlReaderSettings()  \n        'In the XAML the \"local\" namespace referes to artifacts that come from   \n        'the same project as the XAML. When loading XAML if the currently executing   \n        'assembly is not the same assembly that was referred to as \"local\" in the XAML  \n        'LocalAssembly must be set to the assembly containing the artifacts.  \n        'Assembly.LoadFile requires an absolute path so convert this relative path  \n        'to an absolute path.  \n        readerSettings.LocalAssembly = Assembly.LoadFile(  \n            Path.GetFullPath(Path.Combine(mapPath, \"NumberGuessWorkflowActivities_v1.dll\")))  \n  \n        Dim fullPath As String = Path.Combine(definitionPath, name)  \n        Dim xamlReader As XamlXmlReader = New XamlXmlReader(fullPath, readerSettings)  \n  \n        'Load the workflow definition into an ActivityBuilder.  \n        Dim wf As ActivityBuilder = XamlServices.Load(  \n            ActivityXamlServices.CreateBuilderReader(xamlReader))  \n  \n        'PrepareForUpdate makes a copy of the workflow definition in the  \n        'ActivityBuilder that is used for comparison when the update  \n        'map is created.  \n        DynamicUpdateServices.PrepareForUpdate(wf)  \n  \n        Return wf  \n    End Function  \n    ```  \n  \n    ```csharp  \n    private static ActivityBuilder StartUpdate(string name)  \n    {  \n        // Create the XamlXmlReaderSettings.  \n        XamlXmlReaderSettings readerSettings = new XamlXmlReaderSettings()  \n        {  \n            // In the XAML the \"local\" namespace referes to artifacts that come from   \n            // the same project as the XAML. When loading XAML if the currently executing   \n            // assembly is not the same assembly that was referred to as \"local\" in the XAML  \n            // LocalAssembly must be set to the assembly containing the artifacts.  \n            // Assembly.LoadFile requires an absolute path so convert this relative path  \n            // to an absolute path.  \n            LocalAssembly = Assembly.LoadFile(  \n                Path.GetFullPath(Path.Combine(mapPath, \"NumberGuessWorkflowActivities_v1.dll\")))  \n        };  \n  \n        string path = Path.Combine(definitionPath, name);  \n        XamlXmlReader xamlReader = new XamlXmlReader(path, readerSettings);  \n  \n        // Load the workflow definition into an ActivityBuilder.  \n        ActivityBuilder wf = XamlServices.Load(  \n            ActivityXamlServices.CreateBuilderReader(xamlReader))  \n            as ActivityBuilder;  \n  \n        // PrepareForUpdate makes a copy of the workflow definition in the  \n        // ActivityBuilder that is used for comparison when the update  \n        // map is created.  \n        DynamicUpdateServices.PrepareForUpdate(wf);  \n  \n        return wf;  \n    }  \n    ```  \n  \n12. Next, add the following `CreateUpdateMethod` to the `Program` class (or `Module1`). This creates a dynamic update map by calling DynamicUpdateServices.CreateUpdateMap, and then saves the update map using the specified name. This update map contains the information needed by the workflow runtime to update a persisted workflow instance that was started using the original workflow definition contained in the `ActivityBuilder` so that it completes using the updated workflow definition.  \n  \n    ```vb  \n    Private Sub CreateUpdateMaps(wf As ActivityBuilder, name As String)  \n        'Create the UpdateMap.  \n        Dim map As DynamicUpdateMap =  \n            DynamicUpdateServices.CreateUpdateMap(wf)  \n  \n        'Serialize it to a file.  \n        Dim mapFullPath As String = Path.Combine(mapPath, name)  \n        Dim sz As DataContractSerializer = New DataContractSerializer(GetType(DynamicUpdateMap))  \n        Using fs As FileStream = File.Open(mapFullPath, FileMode.Create)  \n            sz.WriteObject(fs, map)  \n        End Using  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private static void CreateUpdateMaps(ActivityBuilder wf, string name)  \n    {  \n        // Create the UpdateMap.  \n        DynamicUpdateMap map =  \n            DynamicUpdateServices.CreateUpdateMap(wf);  \n  \n        // Serialize it to a file.  \n        string path = Path.Combine(mapPath, name);  \n        DataContractSerializer sz = new DataContractSerializer(typeof(DynamicUpdateMap));  \n        using (FileStream fs = System.IO.File.Open(path, FileMode.Create))  \n        {  \n            sz.WriteObject(fs, map);  \n        }  \n    }  \n    ```  \n  \n13. Add the following `SaveUpdatedDefinition` method to the `Program` class (or `Module1`). This method saves the updated workflow definition once the update map is created.  \n  \n    ```vb  \n    Private Sub SaveUpdatedDefinition(wf As ActivityBuilder, name As String)  \n        Dim xamlPath As String = Path.Combine(definitionPath, name)  \n        Dim sw As StreamWriter = File.CreateText(xamlPath)  \n        Dim xw As XamlWriter = ActivityXamlServices.CreateBuilderWriter(  \n            New XamlXmlWriter(sw, New XamlSchemaContext()))  \n        XamlServices.Save(xw, wf)  \n        sw.Close()  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private static void SaveUpdatedDefinition(ActivityBuilder wf, string name)  \n    {  \n        string xamlPath = Path.Combine(definitionPath, name);  \n        StreamWriter sw = File.CreateText(xamlPath);  \n        XamlWriter xw = ActivityXamlServices.CreateBuilderWriter(  \n            new XamlXmlWriter(sw, new XamlSchemaContext()));  \n        XamlServices.Save(xw, wf);  \n        sw.Close();  \n    }  \n    ```  \n  \n###  <a name=\"BKMK_StateMachine\"></a> To update StateMachineNumberGuessWorkflow  \n  \n1.  Add a `CreateStateMachineUpdateMap` to the `Program` class (or `Module1`).  \n  \n    ```vb  \n    Private Sub CreateStateMachineUpdateMap()  \n  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private static void CreateStateMachineUpdateMap()  \n    {    \n    }  \n    ```  \n  \n2.  Make a call to `StartUpdate` and then get a reference to the root `StateMachine` activity of the workflow.  \n  \n    ```vb  \n    Dim wf As ActivityBuilder = StartUpdate(\"StateMachineNumberGuessWorkflow.xaml\")  \n  \n    'Get a reference to the root StateMachine activity.  \n    Dim sm As StateMachine = wf.Implementation  \n    ```  \n  \n    ```csharp  \n    ActivityBuilder wf = StartUpdate(\"StateMachineNumberGuessWorkflow.xaml\");  \n  \n    // Get a reference to the root StateMachine activity.  \n    StateMachine sm = wf.Implementation as StateMachine;  \n    ```  \n  \n3.  Next, update the expressions of the two `WriteLine` activities that display whether the user's guess is too high or too low so that they match the updates made in [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md).  \n  \n    ```vb  \n    'Update the Text of the two WriteLine activities that write the  \n    'results of the user's guess. They are contained in the workflow as the  \n    'Then and Else action of the If activity in sm.States[1].Transitions[1].Action.  \n    Dim guessLow As Statements.If = sm.States(1).Transitions(1).Action  \n  \n    'Update the \"too low\" message.  \n    Dim tooLow As WriteLine = guessLow.Then  \n    tooLow.Text = New VisualBasicValue(Of String)(\"Guess.ToString() & \"\" is too low.\"\"\")  \n  \n    'Update the \"too high\" message.  \n    Dim tooHigh As WriteLine = guessLow.Else  \n    tooHigh.Text = New VisualBasicValue(Of String)(\"Guess.ToString() & \"\" is too high.\"\"\")  \n    ```  \n  \n    ```csharp  \n    // Update the Text of the two WriteLine activities that write the  \n    // results of the user's guess. They are contained in the workflow as the  \n    // Then and Else action of the If activity in sm.States[1].Transitions[1].Action.  \n    If guessLow = sm.States[1].Transitions[1].Action as If;  \n  \n    // Update the \"too low\" message.  \n    WriteLine tooLow = guessLow.Then as WriteLine;  \n    tooLow.Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is too low.\\\"\");  \n  \n    // Update the \"too high\" message.  \n    WriteLine tooHigh = guessLow.Else as WriteLine;  \n    tooHigh.Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is too high.\\\"\");  \n    ```  \n  \n4.  Next, add the new `WriteLine` activity that displays the closing message.  \n  \n    ```vb  \n    'Create the new WriteLine that displays the closing message.  \n    Dim wl As New WriteLine() With  \n    {  \n        .Text = New VisualBasicValue(Of String) _  \n            (\"Guess.ToString() + \"\" is correct. You guessed it in \"\" & Turns.ToString() & \"\" turns.\"\"\")  \n    }  \n  \n    'Add it as the Action for the Guess Correct transition. The Guess Correct  \n    'transition is the first transition of States[1]. The transitions are listed  \n    'at the bottom of the State activity designer.  \n    sm.States(1).Transitions(0).Action = wl  \n    ```  \n  \n    ```csharp  \n    // Create the new WriteLine that displays the closing message.  \n    WriteLine wl = new WriteLine  \n    {  \n        Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is correct. You guessed it in \\\" + Turns.ToString() + \\\" turns.\\\"\")  \n    };  \n  \n    // Add it as the Action for the Guess Correct transition. The Guess Correct  \n    // transition is the first transition of States[1]. The transitions are listed  \n    // at the bottom of the State activity designer.  \n    sm.States[1].Transitions[0].Action = wl;  \n    ```  \n  \n5.  After the workflow is updated, call `CreateUpdateMaps` and `SaveUpdatedDefinition`. `CreateUpdateMaps` creates and saves the `DynamicUpdateMap`, and `SaveUpdatedDefinition` saves the updated workflow definition.  \n  \n    ```vb  \n    'Create the update map.  \n    CreateUpdateMaps(wf, \"StateMachineNumberGuessWorkflow.map\")  \n  \n    'Save the updated workflow definition.  \n    SaveUpdatedDefinition(wf, \"StateMachineNumberGuessWorkflow_du.xaml\")  \n    ```  \n  \n    ```csharp  \n    // Create the update map.  \n    CreateUpdateMaps(wf, \"StateMachineNumberGuessWorkflow.map\");  \n  \n    // Save the updated workflow definition.  \n    SaveUpdatedDefinition(wf, \"StateMachineNumberGuessWorkflow_du.xaml\");  \n    ```  \n  \n     The following example is the completed `CreateStateMachineUpdateMap` method.  \n  \n    ```vb  \n    Private Sub CreateStateMachineUpdateMap()  \n        Dim wf As ActivityBuilder = StartUpdate(\"StateMachineNumberGuessWorkflow.xaml\")  \n  \n        'Get a reference to the root StateMachine activity.  \n        Dim sm As StateMachine = wf.Implementation  \n  \n        'Update the Text of the two WriteLine activities that write the  \n        'results of the user's guess. They are contained in the workflow as the  \n        'Then and Else action of the If activity in sm.States[1].Transitions[1].Action.  \n        Dim guessLow As Statements.If = sm.States(1).Transitions(1).Action  \n  \n        'Update the \"too low\" message.  \n        Dim tooLow As WriteLine = guessLow.Then  \n        tooLow.Text = New VisualBasicValue(Of String)(\"Guess.ToString() & \"\" is too low.\"\"\")  \n  \n        'Update the \"too high\" message.  \n        Dim tooHigh As WriteLine = guessLow.Else  \n        tooHigh.Text = New VisualBasicValue(Of String)(\"Guess.ToString() & \"\" is too high.\"\"\")  \n  \n        'Create the new WriteLine that displays the closing message.  \n        Dim wl As New WriteLine() With  \n        {  \n            .Text = New VisualBasicValue(Of String) _  \n                (\"Guess.ToString() + \"\" is correct. You guessed it in \"\" & Turns.ToString() & \"\" turns.\"\"\")  \n        }  \n  \n        'Add it as the Action for the Guess Correct transition. The Guess Correct  \n        'transition is the first transition of States[1]. The transitions are listed  \n        'at the bottom of the State activity designer.  \n        sm.States(1).Transitions(0).Action = wl  \n  \n        'Create the update map.  \n        CreateUpdateMaps(wf, \"StateMachineNumberGuessWorkflow.map\")  \n  \n        'Save the updated workflow definition.  \n        SaveUpdatedDefinition(wf, \"StateMachineNumberGuessWorkflow_du.xaml\")  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private static void CreateStateMachineUpdateMap()  \n    {  \n        ActivityBuilder wf = StartUpdate(\"StateMachineNumberGuessWorkflow.xaml\");  \n  \n        // Get a reference to the root StateMachine activity.  \n        StateMachine sm = wf.Implementation as StateMachine;  \n  \n        // Update the Text of the two WriteLine activities that write the  \n        // results of the user's guess. They are contained in the workflow as the  \n        // Then and Else action of the If activity in sm.States[1].Transitions[1].Action.  \n        If guessLow = sm.States[1].Transitions[1].Action as If;  \n  \n        // Update the \"too low\" message.  \n        WriteLine tooLow = guessLow.Then as WriteLine;  \n        tooLow.Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is too low.\\\"\");  \n  \n        // Update the \"too high\" message.  \n        WriteLine tooHigh = guessLow.Else as WriteLine;  \n        tooHigh.Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is too high.\\\"\");  \n  \n        // Create the new WriteLine that displays the closing message.  \n        WriteLine wl = new WriteLine  \n        {  \n            Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is correct. You guessed it in \\\" + Turns.ToString() + \\\" turns.\\\"\")  \n        };  \n  \n        // Add it as the Action for the Guess Correct transition. The Guess Correct  \n        // transition is the first transition of States[1]. The transitions are listed  \n        // at the bottom of the State activity designer.  \n        sm.States[1].Transitions[0].Action = wl;  \n  \n        // Create the update map.  \n        CreateUpdateMaps(wf, \"StateMachineNumberGuessWorkflow.map\");  \n  \n        // Save the updated workflow definition.  \n        SaveUpdatedDefinition(wf, \"StateMachineNumberGuessWorkflow_du.xaml\");  \n    }  \n    ```  \n  \n###  <a name=\"BKMK_Flowchart\"></a> To update FlowchartNumberGuessWorkflow  \n  \n1.  Add the following `CreateFlowchartUpdateMethod` to the `Program` class (or `Module1`). This method is similar to `CreateStateMachineUpdateMap`. It starts with a call to `StartUpdate`, updates the flowchart workflow definition, and finishes by saving the update map and the updated workflow definition.  \n  \n    ```vb  \n    Private Sub CreateFlowchartUpdateMap()  \n        Dim wf As ActivityBuilder = StartUpdate(\"FlowchartNumberGuessWorkflow.xaml\")  \n  \n        'Get a reference to the root Flowchart activity.  \n        Dim fc As Flowchart = wf.Implementation  \n  \n        'Update the Text of the two WriteLine activities that write the  \n        'results of the user's guess. They are contained in the workflow as the  \n        'True and False action of the \"Guess < Target\" FlowDecision, which is  \n        'Nodes[4].  \n        Dim guessLow As FlowDecision = fc.Nodes(4)  \n  \n        'Update the \"too low\" message.  \n        Dim trueStep As FlowStep = guessLow.True  \n        Dim tooLow As WriteLine = trueStep.Action  \n        tooLow.Text = New VisualBasicValue(Of String)(\"Guess.ToString() & \"\" is too low.\"\"\")  \n  \n        'Update the \"too high\" message.  \n        Dim falseStep As FlowStep = guessLow.False  \n        Dim tooHigh As WriteLine = falseStep.Action  \n        tooHigh.Text = New VisualBasicValue(Of String)(\"Guess.ToString() & \"\" is too high.\"\"\")  \n  \n        'Create the new WriteLine that displays the closing message.  \n        Dim wl As New WriteLine() With  \n        {  \n            .Text = New VisualBasicValue(Of String) _  \n                (\"Guess.ToString() + \"\" is correct. You guessed it in \"\" & Turns.ToString() & \"\" turns.\"\"\")  \n        }  \n  \n        'Create a FlowStep to hold the WriteLine.  \n        Dim closingStep As New FlowStep() With  \n        {  \n            .Action = wl  \n        }  \n  \n        'Add this new FlowStep to the True action of the   \n        '\"Guess = Guess\" FlowDecision  \n        Dim guessCorrect As FlowDecision = fc.Nodes(3)  \n        guessCorrect.True = closingStep  \n  \n        'Add the new FlowStep to the Nodes collection.  \n        'If closingStep was replacing an existing node then  \n        'we would need to remove that Step from the collection.  \n        'In this example there was no existing True step to remove.  \n        fc.Nodes.Add(closingStep)  \n  \n        'Create the update map.  \n        CreateUpdateMaps(wf, \"FlowchartNumberGuessWorkflow.map\")  \n  \n        'Save the updated workflow definition.  \n        SaveUpdatedDefinition(wf, \"FlowchartNumberGuessWorkflow_du.xaml\")  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private static void CreateFlowchartUpdateMap()  \n    {  \n        ActivityBuilder wf = StartUpdate(\"FlowchartNumberGuessWorkflow.xaml\");  \n  \n        // Get a reference to the root Flowchart activity.  \n        Flowchart fc = wf.Implementation as Flowchart;  \n  \n        // Update the Text of the two WriteLine activities that write the  \n        // results of the user's guess. They are contained in the workflow as the  \n        // True and False action of the \"Guess < Target\" FlowDecision, which is  \n        // Nodes[4].  \n        FlowDecision guessLow = fc.Nodes[4] as FlowDecision;  \n  \n        // Update the \"too low\" message.  \n        FlowStep trueStep = guessLow.True as FlowStep;  \n        WriteLine tooLow = trueStep.Action as WriteLine;  \n        tooLow.Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is too low.\\\"\");  \n  \n        // Update the \"too high\" message.  \n        FlowStep falseStep = guessLow.False as FlowStep;  \n        WriteLine tooHigh = falseStep.Action as WriteLine;  \n        tooHigh.Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is too high.\\\"\");  \n  \n        // Add the new WriteLine that displays the closing message.  \n        WriteLine wl = new WriteLine  \n        {  \n            Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is correct. You guessed it in \\\" + Turns.ToString() + \\\" turns.\\\"\")  \n        };  \n  \n        // Create a FlowStep to hold the WriteLine.  \n        FlowStep closingStep = new FlowStep  \n        {  \n            Action = wl  \n        };  \n  \n        // Add this new FlowStep to the True action of the   \n        // \"Guess == Guess\" FlowDecision  \n        FlowDecision guessCorrect = fc.Nodes[3] as FlowDecision;  \n        guessCorrect.True = closingStep;  \n  \n        // Add the new FlowStep to the Nodes collection.  \n        // If closingStep was replacing an existing node then  \n        // we would need to remove that Step from the collection.  \n        // In this example there was no existing True step to remove.  \n        fc.Nodes.Add(closingStep);  \n  \n        // Create the update map.  \n        CreateUpdateMaps(wf, \"FlowchartNumberGuessWorkflow.map\");  \n  \n        //  Save the updated workflow definition.  \n        SaveUpdatedDefinition(wf, \"FlowchartNumberGuessWorkflow_du.xaml\");  \n    }  \n    ```  \n  \n###  <a name=\"BKMK_Sequential\"></a> To update SequentialNumberGuessWorkflow  \n  \n1.  Add the following `CreateSequentialUpdateMethod` to the `Program` class (or `Module1`). This method is similar to the other two methods. It starts with a call to `StartUpdate`, updates the sequential workflow definition, and finishes by saving the update map and the updated workflow definition.  \n  \n    ```vb  \n    Private Sub CreateSequentialUpdateMap()  \n        Dim wf As ActivityBuilder = StartUpdate(\"SequentialNumberGuessWorkflow.xaml\")  \n  \n        'Get a reference to the root activity in the workflow.  \n        Dim rootSequence As Sequence = wf.Implementation  \n  \n        'Update the Text of the two WriteLine activities that write the  \n        'results of the user's guess. They are contained in the workflow as the  \n        'Then and Else action of the \"Guess < Target\" If activity.  \n        'Sequence[1]->DoWhile->Body->Sequence[2]->If->Then->If  \n        Dim gameLoop As Statements.DoWhile = rootSequence.Activities(1)  \n        Dim gameBody As Sequence = gameLoop.Body  \n        Dim guessCorrect As Statements.If = gameBody.Activities(2)  \n        Dim guessLow As Statements.If = guessCorrect.Then  \n        Dim tooLow As WriteLine = guessLow.Then  \n        tooLow.Text = New VisualBasicValue(Of String)(\"Guess.ToString() & \"\" is too low.\"\"\")  \n        Dim tooHigh As WriteLine = guessLow.Else  \n        tooHigh.Text = New VisualBasicValue(Of String)(\"Guess.ToString() & \"\" is too high.\"\"\")  \n  \n        'Create the new WriteLine that displays the closing message.  \n        Dim wl As New WriteLine() With  \n        {  \n            .Text = New VisualBasicValue(Of String) _  \n                (\"Guess.ToString() + \"\" is correct. You guessed it in \"\" & Turns.ToString() & \"\" turns.\"\"\")  \n        }  \n  \n        'Insert it as the third activity in the root sequence  \n        rootSequence.Activities.Insert(2, wl)  \n  \n        'Create the update map.  \n        CreateUpdateMaps(wf, \"SequentialNumberGuessWorkflow.map\")  \n  \n        'Save the updated workflow definition.  \n        SaveUpdatedDefinition(wf, \"SequentialNumberGuessWorkflow_du.xaml\")  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private static void CreateSequentialUpdateMap()  \n    {  \n        ActivityBuilder wf = StartUpdate(\"SequentialNumberGuessWorkflow.xaml\");  \n  \n        // Get a reference to the root activity in the workflow.  \n        Sequence rootSequence = wf.Implementation as Sequence;  \n  \n        // Update the Text of the two WriteLine activities that write the  \n        // results of the user's guess. They are contained in the workflow as the  \n        // Then and Else action of the \"Guess < Target\" If activity.  \n        // Sequence[1]->DoWhile->Body->Sequence[2]->If->Then->If  \n        DoWhile gameLoop = rootSequence.Activities[1] as DoWhile;  \n        Sequence gameBody = gameLoop.Body as Sequence;  \n        If guessCorrect = gameBody.Activities[2] as If;  \n        If guessLow = guessCorrect.Then as If;  \n        WriteLine tooLow = guessLow.Then as WriteLine;  \n        tooLow.Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is too low.\\\"\");  \n        WriteLine tooHigh = guessLow.Else as WriteLine;  \n        tooHigh.Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is too high.\\\"\");  \n  \n        // Add the new WriteLine that displays the closing message.  \n        WriteLine wl = new WriteLine  \n        {  \n            Text = new CSharpValue<string>(\"Guess.ToString() + \\\" is correct. You guessed it in \\\" + Turns.ToString() + \\\" turns.\\\"\")  \n        };  \n  \n        // Insert it as the third activity in the root sequence  \n        rootSequence.Activities.Insert(2, wl);  \n  \n        // Create the update map.  \n        CreateUpdateMaps(wf, \"SequentialNumberGuessWorkflow.map\");  \n  \n        // Save the updated workflow definition.  \n        SaveUpdatedDefinition(wf, \"SequentialNumberGuessWorkflow_du.xaml\");  \n    }  \n    ```  \n  \n###  <a name=\"BKMK_CreateUpdateMaps\"></a> To build and run the CreateUpdateMaps application  \n  \n1.  Update the `Main` method and add the following three method calls. These methods are added in the following sections. Each method updates the corresponding number guess workflow and creates a `DynamicUpdateMap` that describes the updates.  \n  \n    ```vb  \n    Sub Main()  \n        'Create the update maps for the changes needed to the v1 activities  \n        'so they match the v2 activities.  \n        CreateSequentialUpdateMap()  \n        CreateFlowchartUpdateMap()  \n        CreateStateMachineUpdateMap()  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    static void Main(string[] args)  \n    {  \n        // Create the update maps for the changes needed to the v1 activities  \n        // so they match the v2 activities.  \n        CreateSequentialUpdateMap();  \n        CreateFlowchartUpdateMap();  \n        CreateStateMachineUpdateMap();  \n    }  \n    ```  \n  \n2.  Right-click **CreateUpdateMaps** in **Solution Explorer** and choose **Set as StartUp Project**.  \n  \n3.  Press CTRL+SHIFT+B to build the solution, and then CTRL+F5 to run the `CreateUpdateMaps` application.  \n  \n    > [!NOTE]\n    >  The `CreateUpdateMaps` application does not display any status information while running, but if you look in the **NumberGuessWorkflowActivities_du** folder and the **PreviousVersions** folder you will see the updated workflow definition files and the update maps.  \n  \n     Once the update maps are created and the workflow definitions updated, the next step is to build an updated workflow assembly containing the updated definitions.  \n  \n###  <a name=\"BKMK_BuildAssembly\"></a> To build the updated workflow assembly  \n  \n1.  Open a second instance of [!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)].  \n  \n2.  Choose **Open**, **Project/Solution** from the **File** menu.  \n  \n3.  Navigate to the **NumberGuessWorkflowActivities_du** folder you created in [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md), select **NumberGuessWorkflowActivities.csproj** (or **vbproj**), and click **Open**.  \n  \n4.  In **Solution Explorer**, right click **SequentialNumberGuessWorkflow.xaml** and choose **Exclude From Project**. Do the same thing for **FlowchartNumberGuessWorkflow.xaml** and **StateMachineNumberGuessWorkflow.xaml**. This step removes the previous versions of the workflow definitions from the project.  \n  \n5.  Choose **Add Existing Item** from the **Project** menu.  \n  \n6.  Navigate to the **NumberGuessWorkflowActivities_du** folder you created in [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md).  \n  \n7.  Choose **XAML Files (\\*.xaml;\\*.xoml)** from the **Files of type** drop-down list.  \n  \n8.  Select **SequentialNumberGuessWorkflow_du.xaml**, **FlowchartNumberGuessWorkflow_du.xaml**, and **StateMachineNumberGuessWorkflow_du.xaml** and click **Add**.  \n  \n    > [!NOTE]\n    >  CTRL+Click to select multiple items at a time.  \n  \n     This step adds the updated versions of the workflow definitions to the project.  \n  \n9. Press CTRL+SHIFT+B to build the project.  \n  \n10. Choose **Close Solution** from the **File** menu. A solution file for the project is not required, so click **No** to close [!INCLUDE[vs_current_short](../../../includes/vs-current-short-md.md)] without saving a solution file. Choose **Exit** from the **File** menu to close [!INCLUDE[vs_current_short](../../../includes/vs-current-short-md.md)].  \n  \n11. Open Windows Explorer and navigate to the **NumberGuessWorkflowActivities_du\\bin\\Debug** folder (or **bin\\Release** depending on your project settings).  \n  \n12. Rename **NumberGuessWorkflowActivities.dll** to **NumberGuessWorkflowActivities_v15.dll**, and copy it to the **PreviousVersions** folder you created in [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md).  \n  \n###  <a name=\"BKMK_UpdateWorkflowVersionMap\"></a> To update WorkflowVersionMap with the new versions  \n  \n1.  Switch back to the initial instance of [!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)].  \n  \n2.  Double-click **WorkflowVersionMap.cs** (or **WorkflowVersionMap.vb**) under the **NumberGuessWorkflowHost** project to open it.  \n  \n3.  Add three new workflow identities just below the six existing workflow identity declarations. In this tutorial, `1.5.0.0` is used as the `WorkflowIdentity.Version` for the dynamic update identities. These new `v15` workflow identities will be used provide the correct workflow definition for the dynamically updated persisted workflow instances.  \n  \n    ```vb  \n    'Current version identities.  \n    Public StateMachineNumberGuessIdentity As WorkflowIdentity  \n    Public FlowchartNumberGuessIdentity As WorkflowIdentity  \n    Public SequentialNumberGuessIdentity As WorkflowIdentity  \n  \n    'v1 identities.  \n    Public StateMachineNumberGuessIdentity_v1 As WorkflowIdentity  \n    Public FlowchartNumberGuessIdentity_v1 As WorkflowIdentity  \n    Public SequentialNumberGuessIdentity_v1 As WorkflowIdentity  \n  \n    'v1.5 (Dynamimc Update) identities.  \n    Public StateMachineNumberGuessIdentity_v15 As WorkflowIdentity  \n    Public FlowchartNumberGuessIdentity_v15 As WorkflowIdentity  \n    Public SequentialNumberGuessIdentity_v15 As WorkflowIdentity  \n    ```  \n  \n    ```csharp  \n    // Current version identities.  \n    static public WorkflowIdentity StateMachineNumberGuessIdentity;  \n    static public WorkflowIdentity FlowchartNumberGuessIdentity;  \n    static public WorkflowIdentity SequentialNumberGuessIdentity;  \n  \n    // v1 identities.  \n    static public WorkflowIdentity StateMachineNumberGuessIdentity_v1;  \n    static public WorkflowIdentity FlowchartNumberGuessIdentity_v1;  \n    static public WorkflowIdentity SequentialNumberGuessIdentity_v1;  \n  \n    // v1.5 (Dynamic Update) identities.  \n    static public WorkflowIdentity StateMachineNumberGuessIdentity_v15;  \n    static public WorkflowIdentity FlowchartNumberGuessIdentity_v15;  \n    static public WorkflowIdentity SequentialNumberGuessIdentity_v15;  \n    ```  \n  \n4.  Add the following code at the end of the constructor. This code initializes the dynamic update workflow identities, loads the corresponding workflow definitions, and adds them to the workflow version dictionary.  \n  \n    ```vb  \n    'Initialize the dynamic update workflow identities.  \n    StateMachineNumberGuessIdentity_v15 = New WorkflowIdentity With  \n    {  \n        .Name = \"StateMachineNumberGuessWorkflow\",  \n        .Version = New Version(1, 5, 0, 0)  \n    }  \n  \n    FlowchartNumberGuessIdentity_v15 = New WorkflowIdentity With  \n    {  \n        .Name = \"FlowchartNumberGuessWorkflow\",  \n        .Version = New Version(1, 5, 0, 0)  \n    }  \n  \n    SequentialNumberGuessIdentity_v15 = New WorkflowIdentity With  \n    {  \n        .Name = \"SequentialNumberGuessWorkflow\",  \n        .Version = New Version(1, 5, 0, 0)  \n    }  \n  \n    'Add the dynamic update workflow identities to the dictionary along with  \n    'the corresponding workflow definitions loaded from the v15 assembly.  \n    'Assembly.LoadFile requires an absolute path so convert this relative path  \n    'to an absolute path.  \n    Dim v15AssemblyPath As String = \"..\\..\\..\\PreviousVersions\\NumberGuessWorkflowActivities_v15.dll\"  \n    v15AssemblyPath = Path.GetFullPath(v15AssemblyPath)  \n    Dim v15Assembly As Assembly = Assembly.LoadFile(v15AssemblyPath)  \n  \n    map.Add(StateMachineNumberGuessIdentity_v15,  \n        v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.StateMachineNumberGuessWorkflow\"))  \n  \n    map.Add(SequentialNumberGuessIdentity_v15,  \n        v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.SequentialNumberGuessWorkflow\"))  \n  \n    map.Add(FlowchartNumberGuessIdentity_v15,  \n        v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.FlowchartNumberGuessWorkflow\"))  \n    ```  \n  \n    ```csharp  \n    // Initialize the dynamic update workflow identities.  \n    StateMachineNumberGuessIdentity_v15 = new WorkflowIdentity  \n    {  \n        Name = \"StateMachineNumberGuessWorkflow\",  \n        Version = new Version(1, 5, 0, 0)  \n    };  \n  \n    FlowchartNumberGuessIdentity_v15 = new WorkflowIdentity  \n    {  \n        Name = \"FlowchartNumberGuessWorkflow\",  \n        Version = new Version(1, 5, 0, 0)  \n    };  \n  \n    SequentialNumberGuessIdentity_v15 = new WorkflowIdentity  \n    {  \n        Name = \"SequentialNumberGuessWorkflow\",  \n        Version = new Version(1, 5, 0, 0)  \n    };  \n  \n    // Add the dynamic update workflow identities to the dictionary along with  \n    // the corresponding workflow definitions loaded from the v15 assembly.  \n    // Assembly.LoadFile requires an absolute path so convert this relative path  \n    // to an absolute path.  \n    string v15AssemblyPath = @\"..\\..\\..\\PreviousVersions\\NumberGuessWorkflowActivities_v15.dll\";  \n    v15AssemblyPath = Path.GetFullPath(v15AssemblyPath);  \n    Assembly v15Assembly = Assembly.LoadFile(v15AssemblyPath);  \n  \n    map.Add(StateMachineNumberGuessIdentity_v15,  \n        v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.StateMachineNumberGuessWorkflow\") as Activity);  \n  \n    map.Add(SequentialNumberGuessIdentity_v15,  \n        v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.SequentialNumberGuessWorkflow\") as Activity);  \n  \n    map.Add(FlowchartNumberGuessIdentity_v15,  \n        v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.FlowchartNumberGuessWorkflow\") as Activity);  \n  \n    ```  \n  \n     The following example is the completed `WorkflowVersionMap` class.  \n  \n    ```vb  \n    Public Module WorkflowVersionMap  \n        Dim map As Dictionary(Of WorkflowIdentity, Activity)  \n  \n        'Current version identities.  \n        Public StateMachineNumberGuessIdentity As WorkflowIdentity  \n        Public FlowchartNumberGuessIdentity As WorkflowIdentity  \n        Public SequentialNumberGuessIdentity As WorkflowIdentity  \n  \n        'v1 identities.  \n        Public StateMachineNumberGuessIdentity_v1 As WorkflowIdentity  \n        Public FlowchartNumberGuessIdentity_v1 As WorkflowIdentity  \n        Public SequentialNumberGuessIdentity_v1 As WorkflowIdentity  \n  \n        'v1.5 (Dynamimc Update) identities.  \n        Public StateMachineNumberGuessIdentity_v15 As WorkflowIdentity  \n        Public FlowchartNumberGuessIdentity_v15 As WorkflowIdentity  \n        Public SequentialNumberGuessIdentity_v15 As WorkflowIdentity  \n  \n        Sub New()  \n            map = New Dictionary(Of WorkflowIdentity, Activity)  \n  \n            'Add the current workflow version identities.  \n            StateMachineNumberGuessIdentity = New WorkflowIdentity With  \n            {  \n                .Name = \"StateMachineNumberGuessWorkflow\",  \n                .Version = New Version(2, 0, 0, 0)  \n            }  \n  \n            FlowchartNumberGuessIdentity = New WorkflowIdentity With  \n            {  \n                .Name = \"FlowchartNumberGuessWorkflow\",  \n                .Version = New Version(2, 0, 0, 0)  \n            }  \n  \n            SequentialNumberGuessIdentity = New WorkflowIdentity With  \n            {  \n                .Name = \"SequentialNumberGuessWorkflow\",  \n                .Version = New Version(2, 0, 0, 0)  \n            }  \n  \n            map.Add(StateMachineNumberGuessIdentity, New StateMachineNumberGuessWorkflow())  \n            map.Add(FlowchartNumberGuessIdentity, New FlowchartNumberGuessWorkflow())  \n            map.Add(SequentialNumberGuessIdentity, New SequentialNumberGuessWorkflow())  \n  \n            'Initialize the previous workflow version identities.  \n            StateMachineNumberGuessIdentity_v1 = New WorkflowIdentity With  \n            {  \n                .Name = \"StateMachineNumberGuessWorkflow\",  \n                .Version = New Version(1, 0, 0, 0)  \n            }  \n  \n            FlowchartNumberGuessIdentity_v1 = New WorkflowIdentity With  \n            {  \n                .Name = \"FlowchartNumberGuessWorkflow\",  \n                .Version = New Version(1, 0, 0, 0)  \n            }  \n  \n            SequentialNumberGuessIdentity_v1 = New WorkflowIdentity With  \n            {  \n                .Name = \"SequentialNumberGuessWorkflow\",  \n                .Version = New Version(1, 0, 0, 0)  \n            }  \n  \n            'Add the previous version workflow identities to the dictionary along with  \n            'the corresponding workflow definitions loaded from the v1 assembly.  \n            'Assembly.LoadFile requires an absolute path so convert this relative path  \n            'to an absolute path.  \n            Dim v1AssemblyPath As String = \"..\\..\\..\\PreviousVersions\\NumberGuessWorkflowActivities_v1.dll\"  \n            v1AssemblyPath = Path.GetFullPath(v1AssemblyPath)  \n            Dim v1Assembly As Assembly = Assembly.LoadFile(v1AssemblyPath)  \n  \n            map.Add(StateMachineNumberGuessIdentity_v1,  \n                v1Assembly.CreateInstance(\"NumberGuessWorkflowActivities.StateMachineNumberGuessWorkflow\"))  \n  \n            map.Add(SequentialNumberGuessIdentity_v1,  \n                v1Assembly.CreateInstance(\"NumberGuessWorkflowActivities.SequentialNumberGuessWorkflow\"))  \n  \n            map.Add(FlowchartNumberGuessIdentity_v1,  \n                v1Assembly.CreateInstance(\"NumberGuessWorkflowActivities.FlowchartNumberGuessWorkflow\"))  \n  \n            'Initialize the dynamic update workflow identities.  \n            StateMachineNumberGuessIdentity_v15 = New WorkflowIdentity With  \n            {  \n                .Name = \"StateMachineNumberGuessWorkflow\",  \n                .Version = New Version(1, 5, 0, 0)  \n            }  \n  \n            FlowchartNumberGuessIdentity_v15 = New WorkflowIdentity With  \n            {  \n                .Name = \"FlowchartNumberGuessWorkflow\",  \n                .Version = New Version(1, 5, 0, 0)  \n            }  \n  \n            SequentialNumberGuessIdentity_v15 = New WorkflowIdentity With  \n            {  \n                .Name = \"SequentialNumberGuessWorkflow\",  \n                .Version = New Version(1, 5, 0, 0)  \n            }  \n  \n            'Add the dynamic update workflow identities to the dictionary along with  \n            'the corresponding workflow definitions loaded from the v15 assembly.  \n            'Assembly.LoadFile requires an absolute path so convert this relative path  \n            'to an absolute path.  \n            Dim v15AssemblyPath As String = \"..\\..\\..\\PreviousVersions\\NumberGuessWorkflowActivities_v15.dll\"  \n            v15AssemblyPath = Path.GetFullPath(v15AssemblyPath)  \n            Dim v15Assembly As Assembly = Assembly.LoadFile(v15AssemblyPath)  \n  \n            map.Add(StateMachineNumberGuessIdentity_v15,  \n                v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.StateMachineNumberGuessWorkflow\"))  \n  \n            map.Add(SequentialNumberGuessIdentity_v15,  \n                v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.SequentialNumberGuessWorkflow\"))  \n  \n            map.Add(FlowchartNumberGuessIdentity_v15,  \n                v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.FlowchartNumberGuessWorkflow\"))  \n        End Sub  \n  \n        Public Function GetWorkflowDefinition(identity As WorkflowIdentity) As Activity  \n            Return map(identity)  \n        End Function  \n  \n        Public Function GetIdentityDescription(identity As WorkflowIdentity) As String  \n            Return identity.ToString()  \n        End Function  \n    End Module  \n    ```  \n  \n    ```csharp  \n    public static class WorkflowVersionMap  \n    {  \n        static Dictionary<WorkflowIdentity, Activity> map;  \n  \n        // Current version identities.  \n        static public WorkflowIdentity StateMachineNumberGuessIdentity;  \n        static public WorkflowIdentity FlowchartNumberGuessIdentity;  \n        static public WorkflowIdentity SequentialNumberGuessIdentity;  \n  \n        // v1 identities.  \n        static public WorkflowIdentity StateMachineNumberGuessIdentity_v1;  \n        static public WorkflowIdentity FlowchartNumberGuessIdentity_v1;  \n        static public WorkflowIdentity SequentialNumberGuessIdentity_v1;  \n  \n        // v1.5 (Dynamic Update) identities.  \n        static public WorkflowIdentity StateMachineNumberGuessIdentity_v15;  \n        static public WorkflowIdentity FlowchartNumberGuessIdentity_v15;  \n        static public WorkflowIdentity SequentialNumberGuessIdentity_v15;  \n  \n        static WorkflowVersionMap()  \n        {  \n            map = new Dictionary<WorkflowIdentity, Activity>();  \n  \n            // Add the current workflow version identities.  \n            StateMachineNumberGuessIdentity = new WorkflowIdentity  \n            {  \n                Name = \"StateMachineNumberGuessWorkflow\",  \n                // Version = new Version(1, 0, 0, 0),  \n                Version = new Version(2, 0, 0, 0)  \n            };  \n  \n            FlowchartNumberGuessIdentity = new WorkflowIdentity  \n            {  \n                Name = \"FlowchartNumberGuessWorkflow\",  \n                // Version = new Version(1, 0, 0, 0),  \n                Version = new Version(2, 0, 0, 0)  \n            };  \n  \n            SequentialNumberGuessIdentity = new WorkflowIdentity  \n            {  \n                Name = \"SequentialNumberGuessWorkflow\",  \n                // Version = new Version(1, 0, 0, 0),  \n                Version = new Version(2, 0, 0, 0)  \n            };  \n  \n            map.Add(StateMachineNumberGuessIdentity, new StateMachineNumberGuessWorkflow());  \n            map.Add(FlowchartNumberGuessIdentity, new FlowchartNumberGuessWorkflow());  \n            map.Add(SequentialNumberGuessIdentity, new SequentialNumberGuessWorkflow());  \n  \n            // Initialize the previous workflow version identities.  \n            StateMachineNumberGuessIdentity_v1 = new WorkflowIdentity  \n            {  \n                Name = \"StateMachineNumberGuessWorkflow\",  \n                Version = new Version(1, 0, 0, 0)  \n            };  \n  \n            FlowchartNumberGuessIdentity_v1 = new WorkflowIdentity  \n            {  \n                Name = \"FlowchartNumberGuessWorkflow\",  \n                Version = new Version(1, 0, 0, 0)  \n            };  \n  \n            SequentialNumberGuessIdentity_v1 = new WorkflowIdentity  \n            {  \n                Name = \"SequentialNumberGuessWorkflow\",  \n                Version = new Version(1, 0, 0, 0)  \n            };  \n  \n            // Add the previous version workflow identities to the dictionary along with  \n            // the corresponding workflow definitions loaded from the v1 assembly.  \n            // Assembly.LoadFile requires an absolute path so convert this relative path  \n            // to an absolute path.  \n            string v1AssemblyPath = @\"..\\..\\..\\PreviousVersions\\NumberGuessWorkflowActivities_v1.dll\";  \n            v1AssemblyPath = Path.GetFullPath(v1AssemblyPath);  \n            Assembly v1Assembly = Assembly.LoadFile(v1AssemblyPath);  \n  \n            map.Add(StateMachineNumberGuessIdentity_v1,  \n                v1Assembly.CreateInstance(\"NumberGuessWorkflowActivities.StateMachineNumberGuessWorkflow\") as Activity);  \n  \n            map.Add(SequentialNumberGuessIdentity_v1,  \n                v1Assembly.CreateInstance(\"NumberGuessWorkflowActivities.SequentialNumberGuessWorkflow\") as Activity);  \n  \n            map.Add(FlowchartNumberGuessIdentity_v1,  \n                v1Assembly.CreateInstance(\"NumberGuessWorkflowActivities.FlowchartNumberGuessWorkflow\") as Activity);  \n  \n            // Initialize the dynamic update workflow identities.  \n            StateMachineNumberGuessIdentity_v15 = new WorkflowIdentity  \n            {  \n                Name = \"StateMachineNumberGuessWorkflow\",  \n                Version = new Version(1, 5, 0, 0)  \n            };  \n  \n            FlowchartNumberGuessIdentity_v15 = new WorkflowIdentity  \n            {  \n                Name = \"FlowchartNumberGuessWorkflow\",  \n                Version = new Version(1, 5, 0, 0)  \n            };  \n  \n            SequentialNumberGuessIdentity_v15 = new WorkflowIdentity  \n            {  \n                Name = \"SequentialNumberGuessWorkflow\",  \n                Version = new Version(1, 5, 0, 0)  \n            };  \n  \n            // Add the dynamic update workflow identities to the dictionary along with  \n            // the corresponding workflow definitions loaded from the v15 assembly.  \n            // Assembly.LoadFile requires an absolute path so convert this relative path  \n            // to an absolute path.  \n            string v15AssemblyPath = @\"..\\..\\..\\PreviousVersions\\NumberGuessWorkflowActivities_v15.dll\";  \n            v15AssemblyPath = Path.GetFullPath(v15AssemblyPath);  \n            Assembly v15Assembly = Assembly.LoadFile(v15AssemblyPath);  \n  \n            map.Add(StateMachineNumberGuessIdentity_v15,  \n                v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.StateMachineNumberGuessWorkflow\") as Activity);  \n  \n            map.Add(SequentialNumberGuessIdentity_v15,  \n                v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.SequentialNumberGuessWorkflow\") as Activity);  \n  \n            map.Add(FlowchartNumberGuessIdentity_v15,  \n                v15Assembly.CreateInstance(\"NumberGuessWorkflowActivities.FlowchartNumberGuessWorkflow\") as Activity);  \n        }  \n  \n        public static Activity GetWorkflowDefinition(WorkflowIdentity identity)  \n        {  \n            return map[identity];  \n        }  \n  \n        public static string GetIdentityDescription(WorkflowIdentity identity)  \n        {  \n            return identity.ToString();  \n        }  \n    }  \n    ```  \n  \n5.  Press CTRL+SHIFT+B to build the project.  \n  \n###  <a name=\"BKMK_ApplyUpdate\"></a> To apply the dynamic updates  \n  \n1.  Right-click **WF45GettingStartedTutorial** in **Solution Explorer** and choose **Add**, **New Project**.  \n  \n2.  In the **Installed** node, select **Visual C#**, **Windows** (or **Visual Basic**, **Windows**).  \n  \n    > [!NOTE]\n    >  Depending on which programming language is configured as the primary language in Visual Studio, the **Visual C#** or **Visual Basic** node may be under the **Other Languages** node in the **Installed** node.  \n  \n     Ensure that **.NET Framework 4.5** is selected in the .NET Framework version drop-down list. Select **Console Application** from the **Windows** list. Type **ApplyDynamicUpdate** into the **Name** box and click **OK**.  \n  \n3.  Right-click **ApplyDynamicUpdate** in **Solution Explorer** and choose **Add Reference**.  \n  \n4.  Click **Solution** and check the box next to **NumberGuessWorkflowHost**. This reference is needed so that `ApplyDynamicUpdate` can use the `NumberGuessWorkflowHost.WorkflowVersionMap` class.  \n  \n5.  Select **Framework** from the **Assemblies** node in the **Add Reference** list. Type **System.Activities** into the **Search Assemblies** box. This will filter the assemblies and make the desired references easier to select.  \n  \n6.  Check the checkbox beside **System.Activities** from the **Search Results** list.  \n  \n7.  Type **Serialization** into the **Search Assemblies** box, and check the checkbox beside **System.Runtime.Serialization** from the **Search Results** list.  \n  \n8.  Type **DurableInstancing** into the **Search Assemblies** box, and check the checkbox beside **System.Activities.DurableInstancing** and **System.Runtime.DurableInstancing** from the **Search Results** list.  \n  \n9. Click **OK** to close **Reference Manager** and add the references.  \n  \n10. Right-click **ApplyDynamicUpdate** in Solution Explorer and choose **Add**, **Class**. Type `DynamicUpdateInfo` into the **Name** box and click **Add**.  \n  \n11. Add the following two members to the `DynamicUpdateInfo` class. The following example is the completed `DynamicUpdateInfo` class. This class contains information on the update map and new workflow identity used when a workflow instance is updated.  \n  \n    ```vb  \n    Public Class DynamicUpdateInfo  \n        Public updateMap As DynamicUpdateMap  \n        Public newIdentity As WorkflowIdentity  \n    End Class  \n    ```  \n  \n    ```csharp  \n    class DynamicUpdateInfo  \n    {  \n        public DynamicUpdateMap updateMap;  \n        public WorkflowIdentity newIdentity;  \n    }  \n    ```  \n  \n12. Add the following `using` (or `Imports`) statements at the top of the file with the other `using` (or `Imports`) statements.  \n  \n    ```vb  \n    Imports System.Activities  \n    Imports System.Activities.DynamicUpdate  \n    ```  \n  \n    ```csharp  \n    using System.Activities;  \n    using System.Activities.DynamicUpdate;  \n    ```  \n  \n13. Double-click **Program.cs** (or **Module1.vb**) in Solution Explorer.  \n  \n14. Add the following `using` (or `Imports`) statements at the top of the file with the other `using` (or `Imports`) statements.  \n  \n    ```vb  \n    Imports NumberGuessWorkflowHost  \n    Imports System.Data.SqlClient  \n    Imports System.Activities.DynamicUpdate  \n    Imports System.IO  \n    Imports System.Runtime.Serialization  \n    Imports System.Activities  \n    Imports System.Activities.DurableInstancing  \n    ```  \n  \n    ```csharp  \n    using NumberGuessWorkflowHost;  \n    using System.Data;  \n    using System.Data.SqlClient;  \n    using System.Activities;  \n    using System.Activities.DynamicUpdate;  \n    using System.IO;  \n    using System.Runtime.Serialization;  \n    using System.Activities.DurableInstancing;  \n    ```  \n  \n15. Add the following connection string member to the `Program` class (or `Module1`).  \n  \n    ```vb  \n    Const connectionString = \"Server=.\\SQLEXPRESS;Initial Catalog=WF45GettingStartedTutorial;Integrated Security=SSPI\"  \n    ```  \n  \n    ```csharp  \n    const string connectionString = \"Server=.\\\\SQLEXPRESS;Initial Catalog=WF45GettingStartedTutorial;Integrated Security=SSPI\";  \n    ```  \n  \n    > [!NOTE]\n    >  Depending on your edition of SQL Server, the connection string server name may be different.  \n  \n16. Add the following `GetIDs` method to the `Program` class (or `Module1`). This method returns a list of persisted workflow instance ids.  \n  \n    ```vb  \n    Function GetIds() As IList(Of Guid)  \n        Dim Ids As New List(Of Guid)  \n        Dim localCmd = _  \n            String.Format(\"Select [InstanceId] from [System.Activities.DurableInstancing].[Instances] Order By [CreationTime]\")  \n        Using localCon = New SqlConnection(connectionString)  \n            Dim cmd As SqlCommand = localCon.CreateCommand()  \n            cmd.CommandText = localCmd  \n            localCon.Open()  \n            Using reader = cmd.ExecuteReader(CommandBehavior.CloseConnection)  \n                While reader.Read()  \n                    'Get the InstanceId of the persisted Workflow  \n                    Dim id As Guid = Guid.Parse(reader(0).ToString())  \n  \n                    'Add it to the list.  \n                    Ids.Add(id)  \n                End While  \n            End Using  \n        End Using  \n  \n        Return Ids  \n    End Function  \n    ```  \n  \n    ```csharp  \n    static IList<Guid> GetIds()  \n    {  \n        List<Guid> Ids = new List<Guid>();  \n        string localCmd = string.Format(\"Select [InstanceId] from [System.Activities.DurableInstancing].[Instances] Order By [CreationTime]\");  \n        using (SqlConnection localCon = new SqlConnection(connectionString))  \n        {  \n            SqlCommand cmd = localCon.CreateCommand();  \n            cmd.CommandText = localCmd;  \n            localCon.Open();  \n            using (SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection))  \n            {  \n                while (reader.Read())  \n                {  \n                    // Get the InstanceId of the persisted Workflow  \n                    Guid id = Guid.Parse(reader[0].ToString());  \n  \n                    // Add it to the list.  \n                    Ids.Add(id);  \n                }  \n            }  \n        }  \n  \n        return Ids;  \n    }  \n    ```  \n  \n17. Add the following `LoadMap` method to the `Program` class (or `Module1`). This method creates a dictionary that maps `v1` workflow identities to the update maps and new workflow identities used to update the corresponding persisted workflow instances.  \n  \n    ```vb  \n    Function LoadMap(mapName As String) As DynamicUpdateMap  \n        Dim mapPath As String = Path.Combine(\"..\\..\\..\\PreviousVersions\", mapName)  \n  \n        Dim map As DynamicUpdateMap  \n        Using fs As FileStream = File.Open(mapPath, FileMode.Open)  \n            Dim serializer As DataContractSerializer = New DataContractSerializer(GetType(DynamicUpdateMap))  \n            Dim updateMap = serializer.ReadObject(fs)  \n            If updateMap Is Nothing Then  \n                Throw New ApplicationException(\"DynamicUpdateMap is null.\")  \n            End If  \n  \n            map = updateMap  \n        End Using  \n  \n        Return map  \n    End Function  \n    ```  \n  \n    ```csharp  \n    static DynamicUpdateMap LoadMap(string mapName)  \n    {  \n        string path = Path.Combine(@\"..\\..\\..\\PreviousVersions\", mapName);  \n  \n        DynamicUpdateMap map;  \n        using (FileStream fs = File.Open(path, FileMode.Open))  \n        {  \n            DataContractSerializer serializer = new DataContractSerializer(typeof(DynamicUpdateMap));  \n            object updateMap = serializer.ReadObject(fs);  \n            if (updateMap == null)  \n            {  \n                throw new ApplicationException(\"DynamicUpdateMap is null.\");  \n            }  \n  \n            map = updateMap as DynamicUpdateMap;  \n        }  \n  \n        return map;  \n    }  \n    ```  \n  \n18. Add the following `LoadMaps` method to the `Program` class (or `Module1`). This method loads the three update maps and creates a dictionary that maps `v1` workflow identities to the update maps.  \n  \n    ```vb  \n    Function LoadMaps() As IDictionary(Of WorkflowIdentity, DynamicUpdateInfo)  \n        'There are 3 update maps to describe the changes to update v1 workflows,  \n        'one for reach of the 3 workflow types in the tutorial.  \n        Dim maps = New Dictionary(Of WorkflowIdentity, DynamicUpdateInfo)()  \n  \n        Dim sequentialMap As DynamicUpdateMap = LoadMap(\"SequentialNumberGuessWorkflow.map\")  \n        Dim sequentialInfo = New DynamicUpdateInfo With  \n        {  \n            .updateMap = sequentialMap,  \n            .newIdentity = WorkflowVersionMap.SequentialNumberGuessIdentity_v15  \n        }  \n        maps.Add(WorkflowVersionMap.SequentialNumberGuessIdentity_v1, sequentialInfo)  \n  \n        Dim stateMap As DynamicUpdateMap = LoadMap(\"StateMachineNumberGuessWorkflow.map\")  \n        Dim stateInfo = New DynamicUpdateInfo With  \n        {  \n            .updateMap = stateMap,  \n            .newIdentity = WorkflowVersionMap.StateMachineNumberGuessIdentity_v15  \n        }  \n        maps.Add(WorkflowVersionMap.StateMachineNumberGuessIdentity_v1, stateInfo)  \n  \n        Dim flowchartMap As DynamicUpdateMap = LoadMap(\"FlowchartNumberGuessWorkflow.map\")  \n        Dim flowchartInfo = New DynamicUpdateInfo With  \n        {  \n            .updateMap = flowchartMap,  \n            .newIdentity = WorkflowVersionMap.FlowchartNumberGuessIdentity_v15  \n        }  \n        maps.Add(WorkflowVersionMap.FlowchartNumberGuessIdentity_v1, flowchartInfo)  \n  \n        Return maps  \n    End Function  \n    ```  \n  \n    ```csharp  \n    static IDictionary<WorkflowIdentity, DynamicUpdateInfo> LoadMaps()  \n    {  \n        // There are 3 update maps to describe the changes to update v1 workflows,  \n        // one for reach of the 3 workflow types in the tutorial.  \n        Dictionary<WorkflowIdentity, DynamicUpdateInfo> maps =  \n            new Dictionary<WorkflowIdentity, DynamicUpdateInfo>();  \n  \n        DynamicUpdateMap sequentialMap = LoadMap(\"SequentialNumberGuessWorkflow.map\");  \n        DynamicUpdateInfo sequentialInfo = new DynamicUpdateInfo  \n        {  \n            updateMap = sequentialMap,  \n            newIdentity = WorkflowVersionMap.SequentialNumberGuessIdentity_v15  \n        };  \n        maps.Add(WorkflowVersionMap.SequentialNumberGuessIdentity_v1, sequentialInfo);  \n  \n        DynamicUpdateMap stateMap = LoadMap(\"StateMachineNumberGuessWorkflow.map\");  \n        DynamicUpdateInfo stateInfo = new DynamicUpdateInfo  \n        {  \n            updateMap = stateMap,  \n            newIdentity = WorkflowVersionMap.StateMachineNumberGuessIdentity_v15  \n        };  \n        maps.Add(WorkflowVersionMap.StateMachineNumberGuessIdentity_v1, stateInfo);  \n  \n        DynamicUpdateMap flowchartMap = LoadMap(\"FlowchartNumberGuessWorkflow.map\");  \n        DynamicUpdateInfo flowchartInfo = new DynamicUpdateInfo  \n        {  \n            updateMap = flowchartMap,  \n            newIdentity = WorkflowVersionMap.FlowchartNumberGuessIdentity_v15  \n        };  \n        maps.Add(WorkflowVersionMap.FlowchartNumberGuessIdentity_v1, flowchartInfo);  \n  \n        return maps;              \n    }  \n    ```  \n  \n19. Add the following code to `Main`. This code iterates the persisted workflow instances and examines each `WorkflowIdentity`. If the `WorkflowIdentity` maps to a `v1` workflow instance, a `WorkflowApplication` is configured with the updated workflow definition and an updated workflow identity. Next, `WorkflowApplication.Load` is called with the instance and the update map, which applies the dynamic update map. Once the update is applied, the updated instance is persisted with a call to `Unload`.  \n  \n    ```vb  \n    Dim store = New SqlWorkflowInstanceStore(connectionString)  \n    WorkflowApplication.CreateDefaultInstanceOwner(store, Nothing, WorkflowIdentityFilter.Any)  \n  \n    Dim updateMaps As IDictionary(Of WorkflowIdentity, DynamicUpdateInfo) = LoadMaps()  \n  \n    For Each id As Guid In GetIds()  \n        'Get a proxy to the instance.   \n        Dim instance As WorkflowApplicationInstance = WorkflowApplication.GetInstance(id, store)  \n  \n        Console.WriteLine(\"Inspecting: {0}\", instance.DefinitionIdentity)  \n  \n        'Only update v1 workflows.  \n        If Not instance.DefinitionIdentity Is Nothing AndAlso _  \n            instance.DefinitionIdentity.Version.Equals(New Version(1, 0, 0, 0)) Then  \n  \n            Dim info As DynamicUpdateInfo = updateMaps(instance.DefinitionIdentity)  \n  \n            'Associate the persisted WorkflowApplicationInstance with  \n            'a WorkflowApplication that is configured with the updated  \n            'definition and updated WorkflowIdentity.  \n            Dim wf As Activity = WorkflowVersionMap.GetWorkflowDefinition(info.newIdentity)  \n            Dim wfApp = New WorkflowApplication(wf, info.newIdentity)  \n  \n            'Apply the Dynamic Update.               \n            wfApp.Load(instance, info.updateMap)  \n  \n            'Persist the updated instance.  \n            wfApp.Unload()  \n  \n            Console.WriteLine(\"Updated to: {0}\", info.newIdentity)  \n        Else  \n            'Not updating this instance, so unload it.  \n            instance.Abandon()  \n        End If  \n    Next  \n  \n    ```  \n  \n    ```csharp  \n    SqlWorkflowInstanceStore store = new SqlWorkflowInstanceStore(connectionString);  \n    WorkflowApplication.CreateDefaultInstanceOwner(store, null, WorkflowIdentityFilter.Any);  \n  \n    IDictionary<WorkflowIdentity, DynamicUpdateInfo> updateMaps = LoadMaps();  \n  \n    foreach (Guid id in GetIds())  \n    {  \n        // Get a proxy to the instance.   \n        WorkflowApplicationInstance instance =  \n            WorkflowApplication.GetInstance(id, store);  \n  \n        Console.WriteLine(\"Inspecting: {0}\", instance.DefinitionIdentity);  \n  \n        // Only update v1 workflows.  \n        if (instance.DefinitionIdentity != null &&  \n            instance.DefinitionIdentity.Version.Equals(new Version(1, 0, 0, 0)))  \n        {  \n            DynamicUpdateInfo info = updateMaps[instance.DefinitionIdentity];  \n  \n            // Associate the persisted WorkflowApplicationInstance with  \n            // a WorkflowApplication that is configured with the updated  \n            // definition and updated WorkflowIdentity.  \n            Activity wf = WorkflowVersionMap.GetWorkflowDefinition(info.newIdentity);  \n            WorkflowApplication wfApp =  \n                new WorkflowApplication(wf, info.newIdentity);  \n  \n            // Apply the Dynamic Update.               \n            wfApp.Load(instance, info.updateMap);  \n  \n            // Persist the updated instance.  \n            wfApp.Unload();  \n  \n            Console.WriteLine(\"Updated to: {0}\", info.newIdentity);  \n        }  \n        else  \n        {  \n            // Not updating this instance, so unload it.  \n            instance.Abandon();  \n        }  \n    }  \n    ```  \n  \n20. Right-click **ApplyDynamicUpdate** in **Solution Explorer** and choose **Set as StartUp Project**.  \n  \n21. Press CTRL+SHIFT+B to build the solution, and then press CTRL+F5 to run the `ApplyDynamicUpdate` application and update the persisted workflow instances. You should see output similar to the following. The version 1.0.0.0 workflows are updated to version 1.5.0.0, while the version 2.0.0.0 workflows are not updated.  \n  \n **Inspecting: StateMachineNumberGuessWorkflow; Version=1.0.0.0**   \n**Updated to: StateMachineNumberGuessWorkflow; Version=1.5.0.0**   \n**Inspecting: StateMachineNumberGuessWorkflow; Version=1.0.0.0**   \n**Updated to: StateMachineNumberGuessWorkflow; Version=1.5.0.0**   \n**Inspecting: FlowchartNumberGuessWorkflow; Version=1.0.0.0**   \n**Updated to: FlowchartNumberGuessWorkflow; Version=1.5.0.0**   \n**Inspecting: FlowchartNumberGuessWorkflow; Version=1.0.0.0**   \n**Updated to: FlowchartNumberGuessWorkflow; Version=1.5.0.0**   \n**Inspecting: SequentialNumberGuessWorkflow; Version=1.0.0.0**   \n**Updated to: SequentialNumberGuessWorkflow; Version=1.5.0.0**   \n**Inspecting: SequentialNumberGuessWorkflow; Version=1.0.0.0**   \n**Updated to: SequentialNumberGuessWorkflow; Version=1.5.0.0**   \n**Inspecting: SequentialNumberGuessWorkflow; Version=1.0.0.0**   \n**Updated to: SequentialNumberGuessWorkflow; Version=1.5.0.0**   \n**Inspecting: StateMachineNumberGuessWorkflow; Version=1.0.0.0**   \n**Updated to: StateMachineNumberGuessWorkflow; Version=1.5.0.0**   \n**Inspecting: FlowchartNumberGuessWorkflow; Version=1.0.0.0**   \n**Updated to: FlowchartNumberGuessWorkflow; Version=1.5.0.0**   \n**Inspecting: StateMachineNumberGuessWorkflow; Version=2.0.0.0**   \n**Inspecting: StateMachineNumberGuessWorkflow; Version=2.0.0.0**   \n**Inspecting: FlowchartNumberGuessWorkflow; Version=2.0.0.0**   \n**Inspecting: FlowchartNumberGuessWorkflow; Version=2.0.0.0**   \n**Inspecting: SequentialNumberGuessWorkflow; Version=2.0.0.0**   \n**Inspecting: SequentialNumberGuessWorkflow; Version=2.0.0.0**   \n**Press any key to continue . . .**  \n  \n###  <a name=\"BKMK_BuildAndRun\"></a> To run the application with the updated workflows  \n  \n1.  Right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Set as StartUp Project**.  \n  \n2.  Press CTRL+F5 to run the application.  \n  \n3.  Click **New Game** to start a new workflow and note the version information below the status window that indicates the workflow is a `v2` workflow.  \n  \n4.  Select one of the `v1` workflows you started at the beginning of the [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md) topic. Note that the version information under the status window indicates that the workflow is a version **1.5.0.0** workflow. Note that there is no information indicated about previous guesses other than whether they were too high or too low.  \n  \n **Please enter a number between 1 and 10**   \n**Your guess is too low.**  \n  \n5.  Make a note of the `InstanceId` and then enter guesses until the workflow completes. The status window displays information about the content of the guess because the `WriteLine` activities were updated by the dynamic update.  \n  \n **Please enter a number between 1 and 10**   \n**Your guess is too low.**   \n**Please enter a number between 1 and 10**   \n**5 is too low.**   \n**Please enter a number between 1 and 10**   \n**7 is too high.**   \n**Please enter a number between 1 and 10**   \n**Congratulations, you guessed the number in 4 turns.**  \n  \n6.  Open Windows Explorer and navigate to the **NumberGuessWorkflowHost\\bin\\debug** folder (or **bin\\release** depending on your project settings) and open the tracking file using Notepad that corresponds to the completed workflow. If you did not make a note of the `InstanceId` you may be able to identify the correct tracking file by using the **Date modified** information in Windows Explorer. The last line of the tracking information contains the output of the newly added `WriteLine` activity.  \n  \n **Please enter a number between 1 and 10**   \n**Your guess is too low.**   \n**Please enter a number between 1 and 10**   \n**5 is too low.**   \n**Please enter a number between 1 and 10**   \n**7 is too high.**   \n**Please enter a number between 1 and 10**   \n**6 is correct. You guessed it in 4 turns.**  \n  \n###  <a name=\"BKMK_StartPreviousVersions\"></a> To enable starting previous versions of the workflows  \n If you run out of workflows to update, you can modify the `NumberGuessWorkflowHost` application to enable starting previous versions of the workflows.  \n  \n1.  Double-click **WorkflowHostForm** in **Solution Explorer**, and select the **WorkflowType** combo box.  \n  \n2.  In the **Properties** window, select the **Items** property and click the ellipsis button to edit the **Items** collection.  \n  \n3.  Add the following three items to the collection.  \n  \n    ```vb-c#  \n    StateMachineNumberGuessWorkflow v1  \n    FlowchartNumberGuessWorkflow v1  \n    SequentialNumberGuessWorkflow v1  \n    ```  \n  \n     The completed `Items` collection will have six items.  \n  \n    ```vb-c#  \n    StateMachineNumberGuessWorkflow  \n    FlowchartNumberGuessWorkflow  \n    SequentialNumberGuessWorkflow  \n    StateMachineNumberGuessWorkflow v1  \n    FlowchartNumberGuessWorkflow v1  \n    SequentialNumberGuessWorkflow v1  \n    ```  \n  \n4.  Double-click **WorkflowHostForm** in **Solution Explorer**, and select **View Code**.  \n  \n5.  Add three new cases to the `switch` (or `Select Case`) statement in the `NewGame_Click` handler to map the new items in the **WorkflowType** combo box to the matching workflow identities.  \n  \n    ```vb  \n    Case \"SequentialNumberGuessWorkflow v1\"  \n        identity = WorkflowVersionMap.SequentialNumberGuessIdentity_v1  \n  \n    Case \"StateMachineNumberGuessWorkflow v1\"  \n        identity = WorkflowVersionMap.StateMachineNumberGuessIdentity_v1  \n  \n    Case \"FlowchartNumberGuessWorkflow v1\"  \n        identity = WorkflowVersionMap.FlowchartNumberGuessIdentity_v1  \n    ```  \n  \n    ```csharp  \n    case \"SequentialNumberGuessWorkflow v1\":  \n        identity = WorkflowVersionMap.SequentialNumberGuessIdentity_v1;  \n        break;  \n  \n    case \"StateMachineNumberGuessWorkflow v1\":  \n        identity = WorkflowVersionMap.StateMachineNumberGuessIdentity_v1;  \n        break;  \n  \n    case \"FlowchartNumberGuessWorkflow v1\":  \n        identity = WorkflowVersionMap.FlowchartNumberGuessIdentity_v1;  \n        break;  \n    ```  \n  \n     The following example contains the complete `switch` (or `Select Case`) statement.  \n  \n    ```vb  \n    Select Case WorkflowType.SelectedItem.ToString()  \n        Case \"SequentialNumberGuessWorkflow\"  \n            identity = WorkflowVersionMap.SequentialNumberGuessIdentity  \n  \n        Case \"StateMachineNumberGuessWorkflow\"  \n            identity = WorkflowVersionMap.StateMachineNumberGuessIdentity  \n  \n        Case \"FlowchartNumberGuessWorkflow\"  \n            identity = WorkflowVersionMap.FlowchartNumberGuessIdentity  \n  \n        Case \"SequentialNumberGuessWorkflow v1\"  \n            identity = WorkflowVersionMap.SequentialNumberGuessIdentity_v1  \n  \n        Case \"StateMachineNumberGuessWorkflow v1\"  \n            identity = WorkflowVersionMap.StateMachineNumberGuessIdentity_v1  \n  \n        Case \"FlowchartNumberGuessWorkflow v1\"  \n            identity = WorkflowVersionMap.FlowchartNumberGuessIdentity_v1  \n    End Select  \n    ```  \n  \n    ```csharp  \n    switch (WorkflowType.SelectedItem.ToString())  \n    {  \n        case \"SequentialNumberGuessWorkflow\":  \n            identity = WorkflowVersionMap.SequentialNumberGuessIdentity;  \n            break;  \n  \n        case \"StateMachineNumberGuessWorkflow\":  \n            identity = WorkflowVersionMap.StateMachineNumberGuessIdentity;  \n            break;  \n  \n        case \"FlowchartNumberGuessWorkflow\":  \n            identity = WorkflowVersionMap.FlowchartNumberGuessIdentity;  \n            break;  \n  \n        case \"SequentialNumberGuessWorkflow v1\":  \n            identity = WorkflowVersionMap.SequentialNumberGuessIdentity_v1;  \n            break;  \n  \n        case \"StateMachineNumberGuessWorkflow v1\":  \n            identity = WorkflowVersionMap.StateMachineNumberGuessIdentity_v1;  \n            break;  \n  \n        case \"FlowchartNumberGuessWorkflow v1\":  \n            identity = WorkflowVersionMap.FlowchartNumberGuessIdentity_v1;  \n            break;  \n    };  \n    ```  \n  \n6.  Press CTRL+F5 to build and run the application. You can now start the `v1` versions of the workflow as well as the current versions. To dynamically update these new instances, run the **ApplyDynamicUpdate** application.","nodes":[{"pos":[12,89],"content":"How to: Update the Definition of a Running Workflow Instance | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Update the Definition of a Running Workflow Instance | Microsoft Docs","pos":[0,77]}]},{"pos":[354,414],"content":"How to: Update the Definition of a Running Workflow Instance","linkify":"How to: Update the Definition of a Running Workflow Instance","nodes":[{"content":"How to: Update the Definition of a Running Workflow Instance","pos":[0,60]}]},{"content":"Dynamic update provides a mechanism for workflow application developers to update the workflow definition of a persisted workflow instance.","pos":[415,554]},{"content":"The required change can be to implement a bug fix, new requirements, or to accommodate unexpected changes.","pos":[555,661]},{"content":"This step in the tutorial demonstrates how to use dynamic update to modify  persisted instances of the <ph id=\"ph1\">`v1`</ph> number guessing workflow to match the new functionality introduced in <bpt id=\"p1\">[</bpt>How to: Host Multiple Versions of a Workflow Side-by-Side<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md)</ept>.","pos":[662,1013],"source":" This step in the tutorial demonstrates how to use dynamic update to modify  persisted instances of the `v1` number guessing workflow to match the new functionality introduced in [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md)."},{"pos":[1021,1224],"content":"[!NOTE]\n To download a completed version or view a video walkthrough of the tutorial, see [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976).","leadings":["","> "],"nodes":[{"content":"To download a completed version or view a video walkthrough of the tutorial, see <bpt id=\"p1\">[</bpt>Windows Workflow Foundation (WF45) - Getting Started Tutorial<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=248976)</ept>.","pos":[9,201],"source":" To download a completed version or view a video walkthrough of the tutorial, see [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976)."}]},{"pos":[1233,1246],"content":"In this topic","linkify":"In this topic","nodes":[{"content":"In this topic","pos":[0,13]}]},{"pos":[1256,1431],"content":"<bpt id=\"p1\">[</bpt>To create the CreateUpdateMaps project<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_CreateProject)</ept>","source":"[To create the CreateUpdateMaps project](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_CreateProject)"},{"pos":[1441,1618],"content":"<bpt id=\"p1\">[</bpt>To update StateMachineNumberGuessWorkflow<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_StateMachine)</ept>","source":"[To update StateMachineNumberGuessWorkflow](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_StateMachine)"},{"pos":[1628,1799],"content":"<bpt id=\"p1\">[</bpt>To update FlowchartNumberGuessWorkflow<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_Flowchart)</ept>","source":"[To update FlowchartNumberGuessWorkflow](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_Flowchart)"},{"pos":[1809,1982],"content":"<bpt id=\"p1\">[</bpt>To update SequentialNumberGuessWorkflow<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_Sequential)</ept>","source":"[To update SequentialNumberGuessWorkflow](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_Sequential)"},{"pos":[1992,2181],"content":"<bpt id=\"p1\">[</bpt>To build and run the CreateUpdateMaps application<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_CreateUpdateMaps)</ept>","source":"[To build and run the CreateUpdateMaps application](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_CreateUpdateMaps)"},{"pos":[2191,2366],"content":"<bpt id=\"p1\">[</bpt>To build the updated workflow assembly<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_BuildAssembly)</ept>","source":"[To build the updated workflow assembly](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_BuildAssembly)"},{"pos":[2376,2574],"content":"<bpt id=\"p1\">[</bpt>To update WorkflowVersionMap with the new versions<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_UpdateWorkflowVersionMap)</ept>","source":"[To update WorkflowVersionMap with the new versions](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_UpdateWorkflowVersionMap)"},{"pos":[2584,2747],"content":"<bpt id=\"p1\">[</bpt>To apply the dynamic updates<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_ApplyUpdate)</ept>","source":"[To apply the dynamic updates](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_ApplyUpdate)"},{"pos":[2757,2941],"content":"<bpt id=\"p1\">[</bpt>To run the application with the updated workflows<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_BuildAndRun)</ept>","source":"[To run the application with the updated workflows](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_BuildAndRun)"},{"pos":[2951,3149],"content":"<bpt id=\"p1\">[</bpt>To enable starting previous versions of the workflows<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_StartPreviousVersions)</ept>","source":"[To enable starting previous versions of the workflows](../../../docs/framework/windows-workflow-foundation/how-to-update-the-definition-of-a-running-workflow-instance.md#BKMK_StartPreviousVersions)"},{"pos":[3160,3232],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_CreateProject\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To create the CreateUpdateMaps project","linkify":"<a name=\"BKMK_CreateProject\"></a> To create the CreateUpdateMaps project","source":"<a name=\"BKMK_CreateProject\"></a> To create the CreateUpdateMaps project"},{"pos":[3242,3346],"content":"Right-click <bpt id=\"p1\">**</bpt>WF45GettingStartedTutorial<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>New Project<ept id=\"p4\">**</ept>.","source":"Right-click **WF45GettingStartedTutorial** in **Solution Explorer** and choose **Add**, **New Project**."},{"pos":[3356,3452],"content":"In the <bpt id=\"p1\">**</bpt>Installed<ept id=\"p1\">**</ept> node, select <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Windows<ept id=\"p3\">**</ept> (or <bpt id=\"p4\">**</bpt>Visual Basic<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>Windows<ept id=\"p5\">**</ept>).","source":"In the **Installed** node, select **Visual C#**, **Windows** (or **Visual Basic**, **Windows**)."},{"pos":[3464,3686],"content":"[!NOTE]\nDepending on which programming language is configured as the primary language in Visual Studio, the **Visual C#** or **Visual Basic** node may be under the **Other Languages** node in the **Installed** node.","leadings":["","    >  "],"nodes":[{"content":"Depending on which programming language is configured as the primary language in Visual Studio, the <bpt id=\"p1\">**</bpt>Visual C#<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Visual Basic<ept id=\"p2\">**</ept> node may be under the <bpt id=\"p3\">**</bpt>Other Languages<ept id=\"p3\">**</ept> node in the <bpt id=\"p4\">**</bpt>Installed<ept id=\"p4\">**</ept> node.","pos":[8,215],"source":"Depending on which programming language is configured as the primary language in Visual Studio, the **Visual C#** or **Visual Basic** node may be under the **Other Languages** node in the **Installed** node."}]},{"content":"Ensure that <bpt id=\"p1\">**</bpt>.NET Framework 4.5<ept id=\"p1\">**</ept> is selected in the .NET Framework version drop-down list.","pos":[3697,3789],"source":"Ensure that **.NET Framework 4.5** is selected in the .NET Framework version drop-down list."},{"content":"Select <bpt id=\"p1\">**</bpt>Console Application<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Windows<ept id=\"p2\">**</ept> list.","pos":[3790,3847],"source":" Select **Console Application** from the **Windows** list."},{"content":"Type <bpt id=\"p1\">**</bpt>CreateUpdateMaps<ept id=\"p1\">**</ept> into the <bpt id=\"p2\">**</bpt>Name<ept id=\"p2\">**</ept> box and click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>.","pos":[3848,3913],"source":" Type **CreateUpdateMaps** into the **Name** box and click **OK**."},{"pos":[3923,4010],"content":"Right-click <bpt id=\"p1\">**</bpt>CreateUpdateMaps<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Add Reference<ept id=\"p3\">**</ept>.","source":"Right-click **CreateUpdateMaps** in **Solution Explorer** and choose **Add Reference**."},{"content":"Select <bpt id=\"p1\">**</bpt>Framework<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Assemblies<ept id=\"p2\">**</ept> node in the <bpt id=\"p3\">**</bpt>Add Reference<ept id=\"p3\">**</ept> list.","pos":[4020,4100],"source":"Select **Framework** from the **Assemblies** node in the **Add Reference** list."},{"content":"Type <bpt id=\"p1\">**</bpt>System.Activities<ept id=\"p1\">**</ept> into the <bpt id=\"p2\">**</bpt>Search Assemblies<ept id=\"p2\">**</ept> box to filter the assemblies and make the desired references easier to select.","pos":[4101,4237],"source":" Type **System.Activities** into the **Search Assemblies** box to filter the assemblies and make the desired references easier to select."},{"pos":[4247,4328],"content":"Check the checkbox beside <bpt id=\"p1\">**</bpt>System.Activities<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Search Results<ept id=\"p2\">**</ept> list.","source":"Check the checkbox beside **System.Activities** from the **Search Results** list."},{"pos":[4338,4493],"content":"Type <bpt id=\"p1\">**</bpt>Serialization<ept id=\"p1\">**</ept> into the <bpt id=\"p2\">**</bpt>Search Assemblies<ept id=\"p2\">**</ept> box, and check the checkbox beside <bpt id=\"p3\">**</bpt>System.Runtime.Serialization<ept id=\"p3\">**</ept> from the <bpt id=\"p4\">**</bpt>Search Results<ept id=\"p4\">**</ept> list.","source":"Type **Serialization** into the **Search Assemblies** box, and check the checkbox beside **System.Runtime.Serialization** from the **Search Results** list."},{"pos":[4503,4639],"content":"Type <bpt id=\"p1\">**</bpt>System.Xaml<ept id=\"p1\">**</ept> into the <bpt id=\"p2\">**</bpt>Search Assemblies<ept id=\"p2\">**</ept> box, and check the checkbox beside <bpt id=\"p3\">**</bpt>System.Xaml<ept id=\"p3\">**</ept> from the <bpt id=\"p4\">**</bpt>Search Results<ept id=\"p4\">**</ept> list.","source":"Type **System.Xaml** into the **Search Assemblies** box, and check the checkbox beside **System.Xaml** from the **Search Results** list."},{"pos":[4649,4716],"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> to close <bpt id=\"p2\">**</bpt>Reference Manager<ept id=\"p2\">**</ept> and add the references.","source":"Click **OK** to close **Reference Manager** and add the references."},{"pos":[4725,4849],"content":"Add the following <ph id=\"ph1\">`using`</ph> (or <ph id=\"ph2\">`Imports`</ph>) statements at the top of the file with the other <ph id=\"ph3\">`using`</ph> (or <ph id=\"ph4\">`Imports`</ph>) statements.","source":"Add the following `using` (or `Imports`) statements at the top of the file with the other `using` (or `Imports`) statements."},{"pos":[5581,5656],"content":"Add the following two string members to the <ph id=\"ph1\">`Program`</ph> class (or <ph id=\"ph2\">`Module1`</ph>).","source":"Add the following two string members to the `Program` class (or `Module1`)."},{"content":"Add the following <ph id=\"ph1\">`StartUpdate`</ph> method to the <ph id=\"ph2\">`Program`</ph> class (or <ph id=\"ph3\">`Module1`</ph>).","pos":[5984,6061],"source":"Add the following `StartUpdate` method to the `Program` class (or `Module1`)."},{"content":"This method loads up the specified xaml workflow definition into an <ph id=\"ph1\">`ActivityBuilder`</ph>, and then calls <ph id=\"ph2\">`DynamicUpdate.PrepareForUpdate`</ph>.","pos":[6062,6197],"source":" This method loads up the specified xaml workflow definition into an `ActivityBuilder`, and then calls `DynamicUpdate.PrepareForUpdate`."},{"content":"<ph id=\"ph1\">`PrepareForUpdate`</ph> makes a copy of the workflow definition inside the <ph id=\"ph2\">`ActivityBuilder`</ph>.","pos":[6198,6286],"source":"`PrepareForUpdate` makes a copy of the workflow definition inside the `ActivityBuilder`."},{"content":"After the workflow definition is modified, this copy is used along with the modified workflow definition to create the update map.","pos":[6287,6417]},{"content":"Next, add the following <ph id=\"ph1\">`CreateUpdateMethod`</ph> to the <ph id=\"ph2\">`Program`</ph> class (or <ph id=\"ph3\">`Module1`</ph>).","pos":[9399,9482],"source":"Next, add the following `CreateUpdateMethod` to the `Program` class (or `Module1`)."},{"content":"This creates a dynamic update map by calling DynamicUpdateServices.CreateUpdateMap, and then saves the update map using the specified name.","pos":[9483,9622]},{"content":"This update map contains the information needed by the workflow runtime to update a persisted workflow instance that was started using the original workflow definition contained in the <ph id=\"ph1\">`ActivityBuilder`</ph> so that it completes using the updated workflow definition.","pos":[9623,9885],"source":" This update map contains the information needed by the workflow runtime to update a persisted workflow instance that was started using the original workflow definition contained in the `ActivityBuilder` so that it completes using the updated workflow definition."},{"content":"Add the following <ph id=\"ph1\">`SaveUpdatedDefinition`</ph> method to the <ph id=\"ph2\">`Program`</ph> class (or <ph id=\"ph3\">`Module1`</ph>).","pos":[11044,11131],"source":"Add the following `SaveUpdatedDefinition` method to the `Program` class (or `Module1`)."},{"content":"This method saves the updated workflow definition once the update map is created.","pos":[11132,11213]},{"pos":[12102,12176],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_StateMachine\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To update StateMachineNumberGuessWorkflow","linkify":"<a name=\"BKMK_StateMachine\"></a> To update StateMachineNumberGuessWorkflow","source":"<a name=\"BKMK_StateMachine\"></a> To update StateMachineNumberGuessWorkflow"},{"pos":[12186,12260],"content":"Add a <ph id=\"ph1\">`CreateStateMachineUpdateMap`</ph> to the <ph id=\"ph2\">`Program`</ph> class (or <ph id=\"ph3\">`Module1`</ph>).","source":"Add a `CreateStateMachineUpdateMap` to the `Program` class (or `Module1`)."},{"pos":[12463,12569],"content":"Make a call to <ph id=\"ph1\">`StartUpdate`</ph> and then get a reference to the root <ph id=\"ph2\">`StateMachine`</ph> activity of the workflow.","source":"Make a call to `StartUpdate` and then get a reference to the root `StateMachine` activity of the workflow."},{"pos":[13031,13367],"content":"Next, update the expressions of the two <ph id=\"ph1\">`WriteLine`</ph> activities that display whether the user's guess is too high or too low so that they match the updates made in <bpt id=\"p1\">[</bpt>How to: Host Multiple Versions of a Workflow Side-by-Side<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md)</ept>.","source":"Next, update the expressions of the two `WriteLine` activities that display whether the user's guess is too high or too low so that they match the updates made in [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md)."},{"pos":[14760,14833],"content":"Next, add the new <ph id=\"ph1\">`WriteLine`</ph> activity that displays the closing message.","source":"Next, add the new `WriteLine` activity that displays the closing message."},{"content":"After the workflow is updated, call <ph id=\"ph1\">`CreateUpdateMaps`</ph> and <ph id=\"ph2\">`SaveUpdatedDefinition`</ph>.","pos":[15965,16048],"source":"After the workflow is updated, call `CreateUpdateMaps` and `SaveUpdatedDefinition`."},{"content":"<ph id=\"ph1\">`CreateUpdateMaps`</ph> creates and saves the <ph id=\"ph2\">`DynamicUpdateMap`</ph>, and <ph id=\"ph3\">`SaveUpdatedDefinition`</ph> saves the updated workflow definition.","pos":[16049,16176],"source":"`CreateUpdateMaps` creates and saves the `DynamicUpdateMap`, and `SaveUpdatedDefinition` saves the updated workflow definition."},{"pos":[16685,16761],"content":"The following example is the completed <ph id=\"ph1\">`CreateStateMachineUpdateMap`</ph> method.","source":"The following example is the completed `CreateStateMachineUpdateMap` method."},{"pos":[20429,20497],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_Flowchart\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To update FlowchartNumberGuessWorkflow","linkify":"<a name=\"BKMK_Flowchart\"></a> To update FlowchartNumberGuessWorkflow","source":"<a name=\"BKMK_Flowchart\"></a> To update FlowchartNumberGuessWorkflow"},{"content":"Add the following <ph id=\"ph1\">`CreateFlowchartUpdateMethod`</ph> to the <ph id=\"ph2\">`Program`</ph> class (or <ph id=\"ph3\">`Module1`</ph>).","pos":[20507,20593],"source":"Add the following `CreateFlowchartUpdateMethod` to the `Program` class (or `Module1`)."},{"content":"This method is similar to <ph id=\"ph1\">`CreateStateMachineUpdateMap`</ph>.","pos":[20594,20650],"source":" This method is similar to `CreateStateMachineUpdateMap`."},{"content":"It starts with a call to <ph id=\"ph1\">`StartUpdate`</ph>, updates the flowchart workflow definition, and finishes by saving the update map and the updated workflow definition.","pos":[20651,20808],"source":" It starts with a call to `StartUpdate`, updates the flowchart workflow definition, and finishes by saving the update map and the updated workflow definition."},{"pos":[25419,25489],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_Sequential\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To update SequentialNumberGuessWorkflow","linkify":"<a name=\"BKMK_Sequential\"></a> To update SequentialNumberGuessWorkflow","source":"<a name=\"BKMK_Sequential\"></a> To update SequentialNumberGuessWorkflow"},{"content":"Add the following <ph id=\"ph1\">`CreateSequentialUpdateMethod`</ph> to the <ph id=\"ph2\">`Program`</ph> class (or <ph id=\"ph3\">`Module1`</ph>).","pos":[25499,25586],"source":"Add the following `CreateSequentialUpdateMethod` to the `Program` class (or `Module1`)."},{"content":"This method is similar to the other two methods.","pos":[25587,25635]},{"content":"It starts with a call to <ph id=\"ph1\">`StartUpdate`</ph>, updates the sequential workflow definition, and finishes by saving the update map and the updated workflow definition.","pos":[25636,25794],"source":" It starts with a call to `StartUpdate`, updates the sequential workflow definition, and finishes by saving the update map and the updated workflow definition."},{"pos":[29372,29458],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_CreateUpdateMaps\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To build and run the CreateUpdateMaps application","linkify":"<a name=\"BKMK_CreateUpdateMaps\"></a> To build and run the CreateUpdateMaps application","source":"<a name=\"BKMK_CreateUpdateMaps\"></a> To build and run the CreateUpdateMaps application"},{"content":"Update the <ph id=\"ph1\">`Main`</ph> method and add the following three method calls.","pos":[29468,29534],"source":"Update the `Main` method and add the following three method calls."},{"content":"These methods are added in the following sections.","pos":[29535,29585]},{"content":"Each method updates the corresponding number guess workflow and creates a <ph id=\"ph1\">`DynamicUpdateMap`</ph> that describes the updates.","pos":[29586,29706],"source":" Each method updates the corresponding number guess workflow and creates a `DynamicUpdateMap` that describes the updates."},{"pos":[30336,30432],"content":"Right-click <bpt id=\"p1\">**</bpt>CreateUpdateMaps<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Set as StartUp Project<ept id=\"p3\">**</ept>.","source":"Right-click **CreateUpdateMaps** in **Solution Explorer** and choose **Set as StartUp Project**."},{"pos":[30442,30543],"content":"Press CTRL+SHIFT+B to build the solution, and then CTRL+F5 to run the <ph id=\"ph1\">`CreateUpdateMaps`</ph> application.","source":"Press CTRL+SHIFT+B to build the solution, and then CTRL+F5 to run the `CreateUpdateMaps` application."},{"pos":[30555,30834],"content":"[!NOTE]\nThe `CreateUpdateMaps` application does not display any status information while running, but if you look in the **NumberGuessWorkflowActivities_du** folder and the **PreviousVersions** folder you will see the updated workflow definition files and the update maps.","leadings":["","    >  "],"nodes":[{"content":"The <ph id=\"ph1\">`CreateUpdateMaps`</ph> application does not display any status information while running, but if you look in the <bpt id=\"p1\">**</bpt>NumberGuessWorkflowActivities_du<ept id=\"p1\">**</ept> folder and the <bpt id=\"p2\">**</bpt>PreviousVersions<ept id=\"p2\">**</ept> folder you will see the updated workflow definition files and the update maps.","pos":[8,272],"source":"The `CreateUpdateMaps` application does not display any status information while running, but if you look in the **NumberGuessWorkflowActivities_du** folder and the **PreviousVersions** folder you will see the updated workflow definition files and the update maps."}]},{"content":"Once the update maps are created and the workflow definitions updated, the next step is to build an updated workflow assembly containing the updated definitions.","pos":[30845,31006]},{"pos":[31017,31089],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_BuildAssembly\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To build the updated workflow assembly","linkify":"<a name=\"BKMK_BuildAssembly\"></a> To build the updated workflow assembly","source":"<a name=\"BKMK_BuildAssembly\"></a> To build the updated workflow assembly"},{"pos":[31099,31194],"content":"Open a second instance of <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph>.","source":"Open a second instance of [!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]."},{"pos":[31204,31265],"content":"Choose <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Project/Solution<ept id=\"p2\">**</ept> from the <bpt id=\"p3\">**</bpt>File<ept id=\"p3\">**</ept> menu.","source":"Choose **Open**, **Project/Solution** from the **File** menu."},{"pos":[31275,31608],"content":"Navigate to the <bpt id=\"p1\">**</bpt>NumberGuessWorkflowActivities_du<ept id=\"p1\">**</ept> folder you created in <bpt id=\"p2\">[</bpt>How to: Host Multiple Versions of a Workflow Side-by-Side<ept id=\"p2\">](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md)</ept>, select <bpt id=\"p3\">**</bpt>NumberGuessWorkflowActivities.csproj<ept id=\"p3\">**</ept> (or <bpt id=\"p4\">**</bpt>vbproj<ept id=\"p4\">**</ept>), and click <bpt id=\"p5\">**</bpt>Open<ept id=\"p5\">**</ept>.","source":"Navigate to the **NumberGuessWorkflowActivities_du** folder you created in [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md), select **NumberGuessWorkflowActivities.csproj** (or **vbproj**), and click **Open**."},{"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right click <bpt id=\"p2\">**</bpt>SequentialNumberGuessWorkflow.xaml<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Exclude From Project<ept id=\"p3\">**</ept>.","pos":[31618,31731],"source":"In **Solution Explorer**, right click **SequentialNumberGuessWorkflow.xaml** and choose **Exclude From Project**."},{"content":"Do the same thing for <bpt id=\"p1\">**</bpt>FlowchartNumberGuessWorkflow.xaml<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>StateMachineNumberGuessWorkflow.xaml<ept id=\"p2\">**</ept>.","pos":[31732,31837],"source":" Do the same thing for **FlowchartNumberGuessWorkflow.xaml** and **StateMachineNumberGuessWorkflow.xaml**."},{"content":"This step removes the previous versions of the workflow definitions from the project.","pos":[31838,31923]},{"pos":[31933,31988],"content":"Choose <bpt id=\"p1\">**</bpt>Add Existing Item<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Project<ept id=\"p2\">**</ept> menu.","source":"Choose **Add Existing Item** from the **Project** menu."},{"pos":[31998,32246],"content":"Navigate to the <bpt id=\"p1\">**</bpt>NumberGuessWorkflowActivities_du<ept id=\"p1\">**</ept> folder you created in <bpt id=\"p2\">[</bpt>How to: Host Multiple Versions of a Workflow Side-by-Side<ept id=\"p2\">](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md)</ept>.","source":"Navigate to the **NumberGuessWorkflowActivities_du** folder you created in [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md)."},{"pos":[32256,32338],"content":"Choose <bpt id=\"p1\">**</bpt>XAML Files (<ph id=\"ph1\">\\*</ph>.xaml;<ph id=\"ph2\">\\*</ph>.xoml)<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Files of type<ept id=\"p2\">**</ept> drop-down list.","source":"Choose **XAML Files (\\*.xaml;\\*.xoml)** from the **Files of type** drop-down list."},{"pos":[32348,32506],"content":"Select <bpt id=\"p1\">**</bpt>SequentialNumberGuessWorkflow_du.xaml<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>FlowchartNumberGuessWorkflow_du.xaml<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>StateMachineNumberGuessWorkflow_du.xaml<ept id=\"p3\">**</ept> and click <bpt id=\"p4\">**</bpt>Add<ept id=\"p4\">**</ept>.","source":"Select **SequentialNumberGuessWorkflow_du.xaml**, **FlowchartNumberGuessWorkflow_du.xaml**, and **StateMachineNumberGuessWorkflow_du.xaml** and click **Add**."},{"pos":[32518,32579],"content":"[!NOTE]\nCTRL+Click to select multiple items at a time.","leadings":["","    >  "],"nodes":[{"content":"CTRL+Click to select multiple items at a time.","pos":[8,54]}]},{"content":"This step adds the updated versions of the workflow definitions to the project.","pos":[32590,32669]},{"content":"Press CTRL+SHIFT+B to build the project.","pos":[32678,32718]},{"content":"Choose <bpt id=\"p1\">**</bpt>Close Solution<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> menu.","pos":[32728,32777],"source":"Choose **Close Solution** from the **File** menu."},{"content":"A solution file for the project is not required, so click <bpt id=\"p1\">**</bpt>No<ept id=\"p1\">**</ept> to close <ph id=\"ph1\">[!INCLUDE[vs_current_short](../../../includes/vs-current-short-md.md)]</ph> without saving a solution file.","pos":[32778,32954],"source":" A solution file for the project is not required, so click **No** to close [!INCLUDE[vs_current_short](../../../includes/vs-current-short-md.md)] without saving a solution file."},{"content":"Choose <bpt id=\"p1\">**</bpt>Exit<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> menu to close <ph id=\"ph1\">[!INCLUDE[vs_current_short](../../../includes/vs-current-short-md.md)]</ph>.","pos":[32955,33074],"source":" Choose **Exit** from the **File** menu to close [!INCLUDE[vs_current_short](../../../includes/vs-current-short-md.md)]."},{"pos":[33084,33236],"content":"Open Windows Explorer and navigate to the <bpt id=\"p1\">**</bpt>NumberGuessWorkflowActivities_du\\bin\\Debug<ept id=\"p1\">**</ept> folder (or <bpt id=\"p2\">**</bpt>bin\\Release<ept id=\"p2\">**</ept> depending on your project settings).","source":"Open Windows Explorer and navigate to the **NumberGuessWorkflowActivities_du\\bin\\Debug** folder (or **bin\\Release** depending on your project settings)."},{"pos":[33246,33572],"content":"Rename <bpt id=\"p1\">**</bpt>NumberGuessWorkflowActivities.dll<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>NumberGuessWorkflowActivities_v15.dll<ept id=\"p2\">**</ept>, and copy it to the <bpt id=\"p3\">**</bpt>PreviousVersions<ept id=\"p3\">**</ept> folder you created in <bpt id=\"p4\">[</bpt>How to: Host Multiple Versions of a Workflow Side-by-Side<ept id=\"p4\">](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md)</ept>.","source":"Rename **NumberGuessWorkflowActivities.dll** to **NumberGuessWorkflowActivities_v15.dll**, and copy it to the **PreviousVersions** folder you created in [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md)."},{"pos":[33583,33678],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_UpdateWorkflowVersionMap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To update WorkflowVersionMap with the new versions","linkify":"<a name=\"BKMK_UpdateWorkflowVersionMap\"></a> To update WorkflowVersionMap with the new versions","source":"<a name=\"BKMK_UpdateWorkflowVersionMap\"></a> To update WorkflowVersionMap with the new versions"},{"pos":[33688,33796],"content":"Switch back to the initial instance of <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph>.","source":"Switch back to the initial instance of [!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]."},{"pos":[33806,33933],"content":"Double-click <bpt id=\"p1\">**</bpt>WorkflowVersionMap.cs<ept id=\"p1\">**</ept> (or <bpt id=\"p2\">**</bpt>WorkflowVersionMap.vb<ept id=\"p2\">**</ept>) under the <bpt id=\"p3\">**</bpt>NumberGuessWorkflowHost<ept id=\"p3\">**</ept> project to open it.","source":"Double-click **WorkflowVersionMap.cs** (or **WorkflowVersionMap.vb**) under the **NumberGuessWorkflowHost** project to open it."},{"content":"Add three new workflow identities just below the six existing workflow identity declarations.","pos":[33943,34036]},{"content":"In this tutorial, <ph id=\"ph1\">`1.5.0.0`</ph> is used as the <ph id=\"ph2\">`WorkflowIdentity.Version`</ph> for the dynamic update identities.","pos":[34037,34141],"source":" In this tutorial, `1.5.0.0` is used as the `WorkflowIdentity.Version` for the dynamic update identities."},{"content":"These new <ph id=\"ph1\">`v15`</ph> workflow identities will be used provide the correct workflow definition for the dynamically updated persisted workflow instances.","pos":[34142,34288],"source":" These new `v15` workflow identities will be used provide the correct workflow definition for the dynamically updated persisted workflow instances."},{"content":"Add the following code at the end of the constructor.","pos":[35794,35847]},{"content":"This code initializes the dynamic update workflow identities, loads the corresponding workflow definitions, and adds them to the workflow version dictionary.","pos":[35848,36005]},{"pos":[39228,39294],"content":"The following example is the completed <ph id=\"ph1\">`WorkflowVersionMap`</ph> class.","source":"The following example is the completed `WorkflowVersionMap` class."},{"content":"Press CTRL+SHIFT+B to build the project.","pos":[51352,51392]},{"pos":[51403,51463],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_ApplyUpdate\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To apply the dynamic updates","linkify":"<a name=\"BKMK_ApplyUpdate\"></a> To apply the dynamic updates","source":"<a name=\"BKMK_ApplyUpdate\"></a> To apply the dynamic updates"},{"pos":[51473,51577],"content":"Right-click <bpt id=\"p1\">**</bpt>WF45GettingStartedTutorial<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>New Project<ept id=\"p4\">**</ept>.","source":"Right-click **WF45GettingStartedTutorial** in **Solution Explorer** and choose **Add**, **New Project**."},{"pos":[51587,51683],"content":"In the <bpt id=\"p1\">**</bpt>Installed<ept id=\"p1\">**</ept> node, select <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Windows<ept id=\"p3\">**</ept> (or <bpt id=\"p4\">**</bpt>Visual Basic<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>Windows<ept id=\"p5\">**</ept>).","source":"In the **Installed** node, select **Visual C#**, **Windows** (or **Visual Basic**, **Windows**)."},{"pos":[51695,51917],"content":"[!NOTE]\nDepending on which programming language is configured as the primary language in Visual Studio, the **Visual C#** or **Visual Basic** node may be under the **Other Languages** node in the **Installed** node.","leadings":["","    >  "],"nodes":[{"content":"Depending on which programming language is configured as the primary language in Visual Studio, the <bpt id=\"p1\">**</bpt>Visual C#<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Visual Basic<ept id=\"p2\">**</ept> node may be under the <bpt id=\"p3\">**</bpt>Other Languages<ept id=\"p3\">**</ept> node in the <bpt id=\"p4\">**</bpt>Installed<ept id=\"p4\">**</ept> node.","pos":[8,215],"source":"Depending on which programming language is configured as the primary language in Visual Studio, the **Visual C#** or **Visual Basic** node may be under the **Other Languages** node in the **Installed** node."}]},{"content":"Ensure that <bpt id=\"p1\">**</bpt>.NET Framework 4.5<ept id=\"p1\">**</ept> is selected in the .NET Framework version drop-down list.","pos":[51928,52020],"source":"Ensure that **.NET Framework 4.5** is selected in the .NET Framework version drop-down list."},{"content":"Select <bpt id=\"p1\">**</bpt>Console Application<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Windows<ept id=\"p2\">**</ept> list.","pos":[52021,52078],"source":" Select **Console Application** from the **Windows** list."},{"content":"Type <bpt id=\"p1\">**</bpt>ApplyDynamicUpdate<ept id=\"p1\">**</ept> into the <bpt id=\"p2\">**</bpt>Name<ept id=\"p2\">**</ept> box and click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>.","pos":[52079,52146],"source":" Type **ApplyDynamicUpdate** into the **Name** box and click **OK**."},{"pos":[52156,52245],"content":"Right-click <bpt id=\"p1\">**</bpt>ApplyDynamicUpdate<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Add Reference<ept id=\"p3\">**</ept>.","source":"Right-click **ApplyDynamicUpdate** in **Solution Explorer** and choose **Add Reference**."},{"content":"Click <bpt id=\"p1\">**</bpt>Solution<ept id=\"p1\">**</ept> and check the box next to <bpt id=\"p2\">**</bpt>NumberGuessWorkflowHost<ept id=\"p2\">**</ept>.","pos":[52255,52328],"source":"Click **Solution** and check the box next to **NumberGuessWorkflowHost**."},{"content":"This reference is needed so that <ph id=\"ph1\">`ApplyDynamicUpdate`</ph> can use the <ph id=\"ph2\">`NumberGuessWorkflowHost.WorkflowVersionMap`</ph> class.","pos":[52329,52446],"source":" This reference is needed so that `ApplyDynamicUpdate` can use the `NumberGuessWorkflowHost.WorkflowVersionMap` class."},{"content":"Select <bpt id=\"p1\">**</bpt>Framework<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Assemblies<ept id=\"p2\">**</ept> node in the <bpt id=\"p3\">**</bpt>Add Reference<ept id=\"p3\">**</ept> list.","pos":[52456,52536],"source":"Select **Framework** from the **Assemblies** node in the **Add Reference** list."},{"content":"Type <bpt id=\"p1\">**</bpt>System.Activities<ept id=\"p1\">**</ept> into the <bpt id=\"p2\">**</bpt>Search Assemblies<ept id=\"p2\">**</ept> box.","pos":[52537,52599],"source":" Type **System.Activities** into the **Search Assemblies** box."},{"content":"This will filter the assemblies and make the desired references easier to select.","pos":[52600,52681]},{"pos":[52691,52772],"content":"Check the checkbox beside <bpt id=\"p1\">**</bpt>System.Activities<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Search Results<ept id=\"p2\">**</ept> list.","source":"Check the checkbox beside **System.Activities** from the **Search Results** list."},{"pos":[52782,52937],"content":"Type <bpt id=\"p1\">**</bpt>Serialization<ept id=\"p1\">**</ept> into the <bpt id=\"p2\">**</bpt>Search Assemblies<ept id=\"p2\">**</ept> box, and check the checkbox beside <bpt id=\"p3\">**</bpt>System.Runtime.Serialization<ept id=\"p3\">**</ept> from the <bpt id=\"p4\">**</bpt>Search Results<ept id=\"p4\">**</ept> list.","source":"Type **Serialization** into the **Search Assemblies** box, and check the checkbox beside **System.Runtime.Serialization** from the **Search Results** list."},{"pos":[52947,53154],"content":"Type <bpt id=\"p1\">**</bpt>DurableInstancing<ept id=\"p1\">**</ept> into the <bpt id=\"p2\">**</bpt>Search Assemblies<ept id=\"p2\">**</ept> box, and check the checkbox beside <bpt id=\"p3\">**</bpt>System.Activities.DurableInstancing<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>System.Runtime.DurableInstancing<ept id=\"p4\">**</ept> from the <bpt id=\"p5\">**</bpt>Search Results<ept id=\"p5\">**</ept> list.","source":"Type **DurableInstancing** into the **Search Assemblies** box, and check the checkbox beside **System.Activities.DurableInstancing** and **System.Runtime.DurableInstancing** from the **Search Results** list."},{"pos":[53163,53230],"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> to close <bpt id=\"p2\">**</bpt>Reference Manager<ept id=\"p2\">**</ept> and add the references.","source":"Click **OK** to close **Reference Manager** and add the references."},{"content":"Right-click <bpt id=\"p1\">**</bpt>ApplyDynamicUpdate<ept id=\"p1\">**</ept> in Solution Explorer and choose <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Class<ept id=\"p3\">**</ept>.","pos":[53240,53326],"source":"Right-click **ApplyDynamicUpdate** in Solution Explorer and choose **Add**, **Class**."},{"content":"Type <ph id=\"ph1\">`DynamicUpdateInfo`</ph> into the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> box and click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.","pos":[53327,53392],"source":" Type `DynamicUpdateInfo` into the **Name** box and click **Add**."},{"content":"Add the following two members to the <ph id=\"ph1\">`DynamicUpdateInfo`</ph> class.","pos":[53402,53465],"source":"Add the following two members to the `DynamicUpdateInfo` class."},{"content":"The following example is the completed <ph id=\"ph1\">`DynamicUpdateInfo`</ph> class.","pos":[53466,53531],"source":" The following example is the completed `DynamicUpdateInfo` class."},{"content":"This class contains information on the update map and new workflow identity used when a workflow instance is updated.","pos":[53532,53649]},{"pos":[54000,54124],"content":"Add the following <ph id=\"ph1\">`using`</ph> (or <ph id=\"ph2\">`Imports`</ph>) statements at the top of the file with the other <ph id=\"ph3\">`using`</ph> (or <ph id=\"ph4\">`Imports`</ph>) statements.","source":"Add the following `using` (or `Imports`) statements at the top of the file with the other `using` (or `Imports`) statements."},{"pos":[54342,54411],"content":"Double-click <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> (or <bpt id=\"p2\">**</bpt>Module1.vb<ept id=\"p2\">**</ept>) in Solution Explorer.","source":"Double-click **Program.cs** (or **Module1.vb**) in Solution Explorer."},{"pos":[54421,54545],"content":"Add the following <ph id=\"ph1\">`using`</ph> (or <ph id=\"ph2\">`Imports`</ph>) statements at the top of the file with the other <ph id=\"ph3\">`using`</ph> (or <ph id=\"ph4\">`Imports`</ph>) statements.","source":"Add the following `using` (or `Imports`) statements at the top of the file with the other `using` (or `Imports`) statements."},{"pos":[55165,55246],"content":"Add the following connection string member to the <ph id=\"ph1\">`Program`</ph> class (or <ph id=\"ph2\">`Module1`</ph>).","source":"Add the following connection string member to the `Program` class (or `Module1`)."},{"pos":[55563,55670],"content":"[!NOTE]\nDepending on your edition of SQL Server, the connection string server name may be different.","leadings":["","    >  "],"nodes":[{"content":"Depending on your edition of SQL Server, the connection string server name may be different.","pos":[8,100]}]},{"content":"Add the following <ph id=\"ph1\">`GetIDs`</ph> method to the <ph id=\"ph2\">`Program`</ph> class (or <ph id=\"ph3\">`Module1`</ph>).","pos":[55680,55752],"source":"Add the following `GetIDs` method to the `Program` class (or `Module1`)."},{"content":"This method returns a list of persisted workflow instance ids.","pos":[55753,55815]},{"content":"Add the following <ph id=\"ph1\">`LoadMap`</ph> method to the <ph id=\"ph2\">`Program`</ph> class (or <ph id=\"ph3\">`Module1`</ph>).","pos":[57692,57765],"source":"Add the following `LoadMap` method to the `Program` class (or `Module1`)."},{"content":"This method creates a dictionary that maps <ph id=\"ph1\">`v1`</ph> workflow identities to the update maps and new workflow identities used to update the corresponding persisted workflow instances.","pos":[57766,57943],"source":" This method creates a dictionary that maps `v1` workflow identities to the update maps and new workflow identities used to update the corresponding persisted workflow instances."},{"content":"Add the following <ph id=\"ph1\">`LoadMaps`</ph> method to the <ph id=\"ph2\">`Program`</ph> class (or <ph id=\"ph3\">`Module1`</ph>).","pos":[59331,59405],"source":"Add the following `LoadMaps` method to the `Program` class (or `Module1`)."},{"content":"This method loads the three update maps and creates a dictionary that maps <ph id=\"ph1\">`v1`</ph> workflow identities to the update maps.","pos":[59406,59525],"source":" This method loads the three update maps and creates a dictionary that maps `v1` workflow identities to the update maps."},{"content":"Add the following code to <ph id=\"ph1\">`Main`</ph>.","pos":[62674,62707],"source":"Add the following code to `Main`."},{"content":"This code iterates the persisted workflow instances and examines each <ph id=\"ph1\">`WorkflowIdentity`</ph>.","pos":[62708,62797],"source":" This code iterates the persisted workflow instances and examines each `WorkflowIdentity`."},{"content":"If the <ph id=\"ph1\">`WorkflowIdentity`</ph> maps to a <ph id=\"ph2\">`v1`</ph> workflow instance, a <ph id=\"ph3\">`WorkflowApplication`</ph> is configured with the updated workflow definition and an updated workflow identity.","pos":[62798,62966],"source":" If the `WorkflowIdentity` maps to a `v1` workflow instance, a `WorkflowApplication` is configured with the updated workflow definition and an updated workflow identity."},{"content":"Next, <ph id=\"ph1\">`WorkflowApplication.Load`</ph> is called with the instance and the update map, which applies the dynamic update map.","pos":[62967,63085],"source":" Next, `WorkflowApplication.Load` is called with the instance and the update map, which applies the dynamic update map."},{"content":"Once the update is applied, the updated instance is persisted with a call to <ph id=\"ph1\">`Unload`</ph>.","pos":[63086,63172],"source":" Once the update is applied, the updated instance is persisted with a call to `Unload`."},{"pos":[66428,66526],"content":"Right-click <bpt id=\"p1\">**</bpt>ApplyDynamicUpdate<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Set as StartUp Project<ept id=\"p3\">**</ept>.","source":"Right-click **ApplyDynamicUpdate** in **Solution Explorer** and choose **Set as StartUp Project**."},{"content":"Press CTRL+SHIFT+B to build the solution, and then press CTRL+F5 to run the <ph id=\"ph1\">`ApplyDynamicUpdate`</ph> application and update the persisted workflow instances.","pos":[66536,66689],"source":"Press CTRL+SHIFT+B to build the solution, and then press CTRL+F5 to run the `ApplyDynamicUpdate` application and update the persisted workflow instances."},{"content":"You should see output similar to the following.","pos":[66690,66737]},{"content":"The version 1.0.0.0 workflows are updated to version 1.5.0.0, while the version 2.0.0.0 workflows are not updated.","pos":[66738,66852]},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: StateMachineNumberGuessWorkflow; Version=1.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[66859,66924],"source":"**Inspecting: StateMachineNumberGuessWorkflow; Version=1.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Updated to: StateMachineNumberGuessWorkflow; Version=1.5.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[66927,66992],"source":"**Updated to: StateMachineNumberGuessWorkflow; Version=1.5.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: StateMachineNumberGuessWorkflow; Version=1.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[66995,67060],"source":"**Inspecting: StateMachineNumberGuessWorkflow; Version=1.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Updated to: StateMachineNumberGuessWorkflow; Version=1.5.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67063,67128],"source":"**Updated to: StateMachineNumberGuessWorkflow; Version=1.5.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: FlowchartNumberGuessWorkflow; Version=1.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67131,67193],"source":"**Inspecting: FlowchartNumberGuessWorkflow; Version=1.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Updated to: FlowchartNumberGuessWorkflow; Version=1.5.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67196,67258],"source":"**Updated to: FlowchartNumberGuessWorkflow; Version=1.5.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: FlowchartNumberGuessWorkflow; Version=1.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67261,67323],"source":"**Inspecting: FlowchartNumberGuessWorkflow; Version=1.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Updated to: FlowchartNumberGuessWorkflow; Version=1.5.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67326,67388],"source":"**Updated to: FlowchartNumberGuessWorkflow; Version=1.5.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: SequentialNumberGuessWorkflow; Version=1.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67391,67454],"source":"**Inspecting: SequentialNumberGuessWorkflow; Version=1.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Updated to: SequentialNumberGuessWorkflow; Version=1.5.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67457,67520],"source":"**Updated to: SequentialNumberGuessWorkflow; Version=1.5.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: SequentialNumberGuessWorkflow; Version=1.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67523,67586],"source":"**Inspecting: SequentialNumberGuessWorkflow; Version=1.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Updated to: SequentialNumberGuessWorkflow; Version=1.5.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67589,67652],"source":"**Updated to: SequentialNumberGuessWorkflow; Version=1.5.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: SequentialNumberGuessWorkflow; Version=1.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67655,67718],"source":"**Inspecting: SequentialNumberGuessWorkflow; Version=1.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Updated to: SequentialNumberGuessWorkflow; Version=1.5.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67721,67784],"source":"**Updated to: SequentialNumberGuessWorkflow; Version=1.5.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: StateMachineNumberGuessWorkflow; Version=1.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67787,67852],"source":"**Inspecting: StateMachineNumberGuessWorkflow; Version=1.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Updated to: StateMachineNumberGuessWorkflow; Version=1.5.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67855,67920],"source":"**Updated to: StateMachineNumberGuessWorkflow; Version=1.5.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: FlowchartNumberGuessWorkflow; Version=1.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67923,67985],"source":"**Inspecting: FlowchartNumberGuessWorkflow; Version=1.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Updated to: FlowchartNumberGuessWorkflow; Version=1.5.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[67988,68050],"source":"**Updated to: FlowchartNumberGuessWorkflow; Version=1.5.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: StateMachineNumberGuessWorkflow; Version=2.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[68053,68118],"source":"**Inspecting: StateMachineNumberGuessWorkflow; Version=2.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: StateMachineNumberGuessWorkflow; Version=2.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[68121,68186],"source":"**Inspecting: StateMachineNumberGuessWorkflow; Version=2.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: FlowchartNumberGuessWorkflow; Version=2.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[68189,68251],"source":"**Inspecting: FlowchartNumberGuessWorkflow; Version=2.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: FlowchartNumberGuessWorkflow; Version=2.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[68254,68316],"source":"**Inspecting: FlowchartNumberGuessWorkflow; Version=2.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: SequentialNumberGuessWorkflow; Version=2.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[68319,68382],"source":"**Inspecting: SequentialNumberGuessWorkflow; Version=2.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Inspecting: SequentialNumberGuessWorkflow; Version=2.0.0.0<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[68385,68448],"source":"**Inspecting: SequentialNumberGuessWorkflow; Version=2.0.0.0** "},{"content":"<bpt id=\"p1\">**</bpt>Press any key to continue . . .<ept id=\"p1\">**</ept>","pos":[68451,68486],"source":"**Press any key to continue . . .**"},{"pos":[68497,68578],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_BuildAndRun\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To run the application with the updated workflows","linkify":"<a name=\"BKMK_BuildAndRun\"></a> To run the application with the updated workflows","source":"<a name=\"BKMK_BuildAndRun\"></a> To run the application with the updated workflows"},{"pos":[68588,68691],"content":"Right-click <bpt id=\"p1\">**</bpt>NumberGuessWorkflowHost<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Set as StartUp Project<ept id=\"p3\">**</ept>.","source":"Right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Set as StartUp Project**."},{"content":"Press CTRL+F5 to run the application.","pos":[68701,68738]},{"pos":[68748,68895],"content":"Click <bpt id=\"p1\">**</bpt>New Game<ept id=\"p1\">**</ept> to start a new workflow and note the version information below the status window that indicates the workflow is a <ph id=\"ph1\">`v2`</ph> workflow.","source":"Click **New Game** to start a new workflow and note the version information below the status window that indicates the workflow is a `v2` workflow."},{"content":"Select one of the <ph id=\"ph1\">`v1`</ph> workflows you started at the beginning of the <bpt id=\"p1\">[</bpt>How to: Host Multiple Versions of a Workflow Side-by-Side<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md)</ept> topic.","pos":[68905,69153],"source":"Select one of the `v1` workflows you started at the beginning of the [How to: Host Multiple Versions of a Workflow Side-by-Side](../../../docs/framework/windows-workflow-foundation/how-to-host-multiple-versions-of-a-workflow-side-by-side.md) topic."},{"content":"Note that the version information under the status window indicates that the workflow is a version <bpt id=\"p1\">**</bpt>1.5.0.0<ept id=\"p1\">**</ept> workflow.","pos":[69154,69274],"source":" Note that the version information under the status window indicates that the workflow is a version **1.5.0.0** workflow."},{"content":"Note that there is no information indicated about previous guesses other than whether they were too high or too low.","pos":[69275,69391]},{"content":"<bpt id=\"p1\">**</bpt>Please enter a number between 1 and 10<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[69398,69441],"source":"**Please enter a number between 1 and 10** "},{"content":"<bpt id=\"p1\">**</bpt>Your guess is too low.<ept id=\"p1\">**</ept>","pos":[69444,69470],"source":"**Your guess is too low.**"},{"content":"Make a note of the <ph id=\"ph1\">`InstanceId`</ph> and then enter guesses until the workflow completes.","pos":[69480,69564],"source":"Make a note of the `InstanceId` and then enter guesses until the workflow completes."},{"content":"The status window displays information about the content of the guess because the <ph id=\"ph1\">`WriteLine`</ph> activities were updated by the dynamic update.","pos":[69565,69705],"source":" The status window displays information about the content of the guess because the `WriteLine` activities were updated by the dynamic update."},{"content":"<bpt id=\"p1\">**</bpt>Please enter a number between 1 and 10<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[69712,69755],"source":"**Please enter a number between 1 and 10** "},{"content":"<bpt id=\"p1\">**</bpt>Your guess is too low.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[69758,69785],"source":"**Your guess is too low.** "},{"content":"<bpt id=\"p1\">**</bpt>Please enter a number between 1 and 10<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[69788,69831],"source":"**Please enter a number between 1 and 10** "},{"content":"<bpt id=\"p1\">**</bpt>5 is too low.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[69834,69852],"source":"**5 is too low.** "},{"content":"<bpt id=\"p1\">**</bpt>Please enter a number between 1 and 10<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[69855,69898],"source":"**Please enter a number between 1 and 10** "},{"content":"<bpt id=\"p1\">**</bpt>7 is too high.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[69901,69920],"source":"**7 is too high.** "},{"content":"<bpt id=\"p1\">**</bpt>Please enter a number between 1 and 10<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[69923,69966],"source":"**Please enter a number between 1 and 10** "},{"content":"<bpt id=\"p1\">**</bpt>Congratulations, you guessed the number in 4 turns.<ept id=\"p1\">**</ept>","pos":[69969,70024],"source":"**Congratulations, you guessed the number in 4 turns.**"},{"content":"Open Windows Explorer and navigate to the <bpt id=\"p1\">**</bpt>NumberGuessWorkflowHost\\bin\\debug<ept id=\"p1\">**</ept> folder (or <bpt id=\"p2\">**</bpt>bin\\release<ept id=\"p2\">**</ept> depending on your project settings) and open the tracking file using Notepad that corresponds to the completed workflow.","pos":[70034,70261],"source":"Open Windows Explorer and navigate to the **NumberGuessWorkflowHost\\bin\\debug** folder (or **bin\\release** depending on your project settings) and open the tracking file using Notepad that corresponds to the completed workflow."},{"content":"If you did not make a note of the <ph id=\"ph1\">`InstanceId`</ph> you may be able to identify the correct tracking file by using the <bpt id=\"p1\">**</bpt>Date modified<ept id=\"p1\">**</ept> information in Windows Explorer.","pos":[70262,70426],"source":" If you did not make a note of the `InstanceId` you may be able to identify the correct tracking file by using the **Date modified** information in Windows Explorer."},{"content":"The last line of the tracking information contains the output of the newly added <ph id=\"ph1\">`WriteLine`</ph> activity.","pos":[70427,70529],"source":" The last line of the tracking information contains the output of the newly added `WriteLine` activity."},{"content":"<bpt id=\"p1\">**</bpt>Please enter a number between 1 and 10<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[70536,70579],"source":"**Please enter a number between 1 and 10** "},{"content":"<bpt id=\"p1\">**</bpt>Your guess is too low.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[70582,70609],"source":"**Your guess is too low.** "},{"content":"<bpt id=\"p1\">**</bpt>Please enter a number between 1 and 10<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[70612,70655],"source":"**Please enter a number between 1 and 10** "},{"content":"<bpt id=\"p1\">**</bpt>5 is too low.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[70658,70676],"source":"**5 is too low.** "},{"content":"<bpt id=\"p1\">**</bpt>Please enter a number between 1 and 10<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[70679,70722],"source":"**Please enter a number between 1 and 10** "},{"content":"<bpt id=\"p1\">**</bpt>7 is too high.<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[70725,70744],"source":"**7 is too high.** "},{"content":"<bpt id=\"p1\">**</bpt>Please enter a number between 1 and 10<ept id=\"p1\">**</ept><ph id=\"ph1\"> </ph>","pos":[70747,70790],"source":"**Please enter a number between 1 and 10** "},{"content":"<bpt id=\"p1\">**</bpt>6 is correct. You guessed it in 4 turns.<ept id=\"p1\">**</ept>","pos":[70793,70837],"source":"**6 is correct. You guessed it in 4 turns.**"},{"pos":[70848,70943],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_StartPreviousVersions\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To enable starting previous versions of the workflows","linkify":"<a name=\"BKMK_StartPreviousVersions\"></a> To enable starting previous versions of the workflows","source":"<a name=\"BKMK_StartPreviousVersions\"></a> To enable starting previous versions of the workflows"},{"pos":[70947,71097],"content":"If you run out of workflows to update, you can modify the <ph id=\"ph1\">`NumberGuessWorkflowHost`</ph> application to enable starting previous versions of the workflows.","source":"If you run out of workflows to update, you can modify the `NumberGuessWorkflowHost` application to enable starting previous versions of the workflows."},{"pos":[71107,71209],"content":"Double-click <bpt id=\"p1\">**</bpt>WorkflowHostForm<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept>, and select the <bpt id=\"p3\">**</bpt>WorkflowType<ept id=\"p3\">**</ept> combo box.","source":"Double-click **WorkflowHostForm** in **Solution Explorer**, and select the **WorkflowType** combo box."},{"pos":[71219,71342],"content":"In the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, select the <bpt id=\"p2\">**</bpt>Items<ept id=\"p2\">**</ept> property and click the ellipsis button to edit the <bpt id=\"p3\">**</bpt>Items<ept id=\"p3\">**</ept> collection.","source":"In the **Properties** window, select the **Items** property and click the ellipsis button to edit the **Items** collection."},{"content":"Add the following three items to the collection.","pos":[71352,71400]},{"pos":[71557,71610],"content":"The completed <ph id=\"ph1\">`Items`</ph> collection will have six items.","source":"The completed `Items` collection will have six items."},{"pos":[71875,71960],"content":"Double-click <bpt id=\"p1\">**</bpt>WorkflowHostForm<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept>, and select <bpt id=\"p3\">**</bpt>View Code<ept id=\"p3\">**</ept>.","source":"Double-click **WorkflowHostForm** in **Solution Explorer**, and select **View Code**."},{"pos":[71970,72157],"content":"Add three new cases to the <ph id=\"ph1\">`switch`</ph> (or <ph id=\"ph2\">`Select Case`</ph>) statement in the <ph id=\"ph3\">`NewGame_Click`</ph> handler to map the new items in the <bpt id=\"p1\">**</bpt>WorkflowType<ept id=\"p1\">**</ept> combo box to the matching workflow identities.","source":"Add three new cases to the `switch` (or `Select Case`) statement in the `NewGame_Click` handler to map the new items in the **WorkflowType** combo box to the matching workflow identities."},{"pos":[73009,73091],"content":"The following example contains the complete <ph id=\"ph1\">`switch`</ph> (or <ph id=\"ph2\">`Select Case`</ph>) statement.","source":"The following example contains the complete `switch` (or `Select Case`) statement."},{"content":"Press CTRL+F5 to build and run the application.","pos":[74960,75007]},{"content":"You can now start the <ph id=\"ph1\">`v1`</ph> versions of the workflow as well as the current versions.","pos":[75008,75092],"source":" You can now start the `v1` versions of the workflow as well as the current versions."},{"content":"To dynamically update these new instances, run the <bpt id=\"p1\">**</bpt>ApplyDynamicUpdate<ept id=\"p1\">**</ept> application.","pos":[75093,75179],"source":" To dynamically update these new instances, run the **ApplyDynamicUpdate** application."}]}