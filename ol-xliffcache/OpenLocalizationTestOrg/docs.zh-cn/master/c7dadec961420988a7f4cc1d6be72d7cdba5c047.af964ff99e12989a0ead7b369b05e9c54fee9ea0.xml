{"content":"---\ntitle: \"How to: Find Descendants with a Specific Element Name (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 78915518-0d25-4051-ab55-929779989510\n---\n# How to: Find Descendants with a Specific Element Name (Visual Basic)\nSometimes you want to find all descendants with a particular name. You could write code to iterate through all of the descendants, but it is easier to use the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis.  \n  \n## Example  \n The following example shows how to find descendants based on the element name.  \n  \n```vb  \nDim root As XElement = _  \n    <root>  \n        <para>  \n            <r>  \n                <t>Some text </t>  \n            </r>  \n            <n>  \n                <r>  \n                    <t>that is broken up into </t>  \n                </r>  \n            </n>  \n            <n>  \n                <r>  \n                    <t>multiple segments.</t>  \n                </r>  \n            </n>  \n        </para>  \n    </root>  \n  \nDim textSegs As IEnumerable(Of String) = _  \n    From seg In root...<t> _  \n    Select seg.Value  \n  \nDim str As String = textSegs.Aggregate( _  \n    New StringBuilder, _  \n    Function(sb, i) sb.Append(i), _  \n    Function(sb) sb.ToString)  \n  \nConsole.WriteLine(str)  \n```  \n  \n This code produces the following output:  \n  \n```  \nSome text that is broken up into multiple segments.  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n```vb  \nImports <xmlns='http://www.adatum.com'>  \n  \nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            <root>  \n                <para>  \n                    <r>  \n                        <t>Some text </t>  \n                    </r>  \n                    <n>  \n                        <r>  \n                            <t>that is broken up into </t>  \n                        </r>  \n                    </n>  \n                    <n>  \n                        <r>  \n                            <t>multiple segments.</t>  \n                        </r>  \n                    </n>  \n                </para>  \n            </root>  \n  \n        Dim textSegs As IEnumerable(Of String) = _  \n            From seg In root...<t> _  \n            Select seg.Value  \n  \n        Dim str As String = textSegs.Aggregate( _  \n            New StringBuilder, _  \n            Function(sb, i) sb.Append(i), _  \n            Function(sb) sb.ToString)  \n  \n        Console.WriteLine(str)  \n    End Sub  \nEnd Module  \n```  \n  \n This code produces the following output:  \n  \n```  \nSome text that is broken up into multiple segments.  \n```  \n  \n## See also\n\n- <xref:System.Xml.Linq.XContainer.Descendants%2A>\n- [Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)\n","nodes":[{"pos":[4,150],"embed":true,"restype":"x-metadata","content":"title: \"How to: Find Descendants with a Specific Element Name (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 78915518-0d25-4051-ab55-929779989510","nodes":[{"content":"How to: Find Descendants with a Specific Element Name (Visual Basic)","nodes":[{"pos":[0,68],"content":"How to: Find Descendants with a Specific Element Name (Visual Basic)","nodes":[{"content":"How to: Find Descendants with a Specific Element Name (Visual Basic)","pos":[0,68]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[157,225],"content":"How to: Find Descendants with a Specific Element Name (Visual Basic)","linkify":"How to: Find Descendants with a Specific Element Name (Visual Basic)","nodes":[{"content":"How to: Find Descendants with a Specific Element Name (Visual Basic)","pos":[0,68]}]},{"content":"Sometimes you want to find all descendants with a particular name.","pos":[226,292]},{"content":"You could write code to iterate through all of the descendants, but it is easier to use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> axis.","pos":[293,439],"source":" You could write code to iterate through all of the descendants, but it is easier to use the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis."},{"pos":[448,455],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to find descendants based on the element name.","pos":[459,537]},{"content":"This code produces the following output:","pos":[1262,1302]},{"pos":[1380,1387],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1391,1465]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[1466,1626],"source":" For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"content":"This code produces the following output:","pos":[2665,2705]},{"pos":[2783,2791],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2846,2977],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}