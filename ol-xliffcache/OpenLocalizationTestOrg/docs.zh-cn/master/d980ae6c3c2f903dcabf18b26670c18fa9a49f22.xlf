<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d980ae6c3c2f903dcabf18b26670c18fa9a49f22</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\getting-started\consuming-library-with-visual-studio.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8cd52b86e1192f5bab4cbe8b739e62aec477ab12</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a06592cfbe1f56534f6ce6a3bbde3f3bf2a7189a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Consuming a class library with .NET Core in Visual Studio 2017</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to call the members in a class library with Visual Studio 2017.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET Core, .NET Core class library, .NET Standard, .NET Standard class library distribution</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Consuming a class library with .NET Core in Visual Studio 2017</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Once you've followed the steps in <bpt id="p1">[</bpt>Building a C# class library with .NET Core in Visual Studio 2017<ept id="p1">](./library-with-visual-studio.md)</ept> and <bpt id="p2">[</bpt>Testing a class library with .NET Core in Visual Studio 2017<ept id="p2">](testing-library-with-visual-studio.md)</ept> to build and test your class library and you've built a Release version of the library, the next step is to make it available to callers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can do this in two ways:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If the library will be used by a single solution (for example, if it's a component in a single large application), you can include it as a project in your solution.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the library will be generally accessible, you can distribute it as a NuGet package.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Including a library as a project in a solution</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Just as you included unit tests in the same solution as your class library, you can include your application as part of that solution.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, you can use your class library in a console application that prompts the user to enter a string and reports whether its first character is uppercase:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`ClassLibraryProjects`</ph> solution you created in the <bpt id="p1">[</bpt>Building a C# Class Library with .NET Core in Visual Studio 2017<ept id="p1">](./library-with-visual-studio.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the <bpt id="p2">**</bpt>ClassLibraryProjects<ept id="p2">**</ept> solution and select <bpt id="p3">**</bpt>Add<ept id="p3">**</ept><ph id="ph1"> &gt; </ph><bpt id="p4">**</bpt>New Project<ept id="p4">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Project<ept id="p1">**</ept> dialog, select the <bpt id="p2">**</bpt>.NET Core<ept id="p2">**</ept> node followed by the <bpt id="p3">**</bpt>Console App (.NET Core)<ept id="p3">**</ept> project template.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> text box, type "ShowCase", and select the <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Add New Project dialog</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the <bpt id="p2">**</bpt>ShowCase<ept id="p2">**</ept> project and select <bpt id="p3">**</bpt>Set as StartUp Project<ept id="p3">**</ept> in the context menu.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>ShowCase context menu</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initially, your project doesn't have access to your class library.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To allow it to call methods in your class library, you create a reference to the class library.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the <ph id="ph1">`ShowCase`</ph> project's <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node and select <bpt id="p3">**</bpt>Add Reference<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>ShowCase Dependencies context menu</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog, select <bpt id="p2">**</bpt>StringLibrary<ept id="p2">**</ept>, your class library project, and select the <bpt id="p3">**</bpt>OK<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Reference manager</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the code window for the <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> file, replace all of the code with the following code:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!CODE-csharp</bpt><bpt id="p2">[</bpt>UsingClassLib#1<ept id="p2">](../../../samples/snippets/csharp/getting_started/with_visual_studio_2017/showcase.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The code uses the <bpt id="p1">[</bpt>Console.WindowHeight<ept id="p1">](xref:System.Console.WindowHeight)</ept> property to determine the number of rows in the console window.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Whenever the <bpt id="p1">[</bpt>Console.CursorTop<ept id="p1">](xref:System.Console.CursorTop)</ept> property is greater than or equal to the number of rows in the console window, the code clears the console window and displays a message to the user.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The program prompts the user to enter a string.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It indicates whether the string starts with an uppercase character.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the user presses the Enter key without entering a string, the application terminates, and the console window closes.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If necessary, change the toolbar to compile the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> release of the <ph id="ph1">`ShowCase`</ph> project.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Compile and run the program by selecting the green arrow on the <bpt id="p1">**</bpt>ShowCase<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Image</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can debug and publish the application that uses this library by following the steps in <bpt id="p1">[</bpt>Debugging your C# Hello World application with Visual Studio 2017<ept id="p1">](debugging-with-visual-studio.md)</ept> and <bpt id="p2">[</bpt>Publishing your Hello World Application with Visual Studio 2017<ept id="p2">](publishing-with-visual-studio.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Distributing the library in a NuGet package</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can make your class library widely available by publishing it as a NuGet package.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Visual Studio does not support the creation of NuGet packages.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To create one, you use the <bpt id="p1">[</bpt><ph id="ph1">`dotnet`</ph> command line utility<ept id="p1">](../../core/tools/dotnet.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Open a console window.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example in the <bpt id="p1">**</bpt>Ask me anything<ept id="p1">**</ept> text box in the Windows taskbar, enter <ph id="ph1">`Command Prompt`</ph> (or <ph id="ph2">`cmd`</ph> for short), and open a console window by either selecting the <bpt id="p2">**</bpt>Command Prompt<ept id="p2">**</ept> desktop app or pressing Enter if it's selected in the search results.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Navigate to your library's project directory.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Unless you've reconfigured the typical file location, it's in the <bpt id="p1">*</bpt>Documents\Visual Studio 2017\Projects\ClassLibraryProjects\StringLibrary<ept id="p1">*</ept> directory.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The directory contains your source code and a project file, <bpt id="p1">*</bpt>StringLibrary.csproj<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Issue the command <ph id="ph1">`dotnet pack --no-build`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet`</ph> utility generates a package with a <bpt id="p1">*</bpt>.nupkg<ept id="p1">*</ept> extension.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the directory that contains <bpt id="p1">*</bpt>dotnet.exe<ept id="p1">*</ept> is not in your PATH, you can find its location by entering <ph id="ph1">`where dotnet.exe`</ph> in the console window.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information on creating NuGet packages, see <bpt id="p1">[</bpt>How to Create a NuGet Package with Cross Platform Tools<ept id="p1">](../../core/deploying/creating-nuget-packages.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>