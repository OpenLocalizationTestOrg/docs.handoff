{"content":"---\ntitle: \"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred from an expression containing &#39;&lt;variablename&gt;&#39; | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc30980\"\n  - \"bc30980\"\nhelpviewer_keywords: \n  - \"BC30980\"\nms.assetid: 43a5d008-5362-481b-845b-b9bb00a61a83\ncaps.latest.revision: 21\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Type of &#39;&lt;variablename&gt;&#39; cannot be inferred from an expression containing &#39;&lt;variablename&gt;&#39;\nThe compiler cannot infer the data type of a variable if the variable is used in establishing its initial value in the declaration.  \n  \n For example, with `Option Infer` set to `On`, the following examples do not compile:  \n  \n-   Declarations  \n  \n    ```  \n    ' Does not compile with Option Infer on.  \n    Dim m = m  \n    Dim d = someFunction(d)  \n    ```  \n  \n-   `For` loop  \n  \n    ```  \n    ' Does not compile with Option Infer on.  \n    For j = 1 To j  \n    Next  \n    ```  \n  \n-   `For Each` loop  \n  \n    ```  \n    ' Does not compile with Option Infer on.  \n    For Each customer In customer.Orders  \n    Next  \n    ```  \n  \n **Error ID:** BC30980  \n  \n## To correct this error  \n  \n-   If the two variables were intended to refer to different values, change the name of the variable that you are declaring.  \n  \n-   Use a literal value instead of the variable name in the initial value, on the right side of the assignment.  \n  \n-   Use an `As` clause to specify the type of the variable you are declaring.  \n  \n## See Also  \n [Dim Statement](../../visual-basic/language-reference/statements/dim-statement.md)   \n [For Each...Next Statement](../../visual-basic/language-reference/statements/for-each-next-statement.md)   \n [For...Next Statement](../../visual-basic/language-reference/statements/for-next-statement.md)   \n [Local Type Inference](../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)   \n [Option Infer Statement](../../visual-basic/language-reference/statements/option-infer-statement.md)","nodes":[{"pos":[4,657],"nodes":[{"content":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred from an expression containing &#39;&lt;variablename&gt;&#39; | Microsoft Docs","nodes":[{"pos":[0,135],"content":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred from an expression containing &#39;&lt;variablename&gt;&#39; | Microsoft Docs","nodes":[{"content":"Type of &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>variablename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; cannot be inferred from an expression containing &amp;#39;<ph id=\"ph3\">&amp;lt;</ph>variablename<ph id=\"ph4\">&amp;gt;</ph>&amp;#39; | Microsoft Docs","pos":[0,135],"source":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred from an expression containing &#39;&lt;variablename&gt;&#39; | Microsoft Docs"}]}],"pos":[6,144],"yaml":true}],"content":"title: \"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred from an expression containing &#39;&lt;variablename&gt;&#39; | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc30980\"\n  - \"bc30980\"\nhelpviewer_keywords: \n  - \"BC30980\"\nms.assetid: 43a5d008-5362-481b-845b-b9bb00a61a83\ncaps.latest.revision: 21\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[664,782],"content":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred from an expression containing &#39;&lt;variablename&gt;&#39;","linkify":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred from an expression containing &#39;&lt;variablename&gt;&#39;","nodes":[{"content":"Type of &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>variablename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; cannot be inferred from an expression containing &amp;#39;<ph id=\"ph3\">&amp;lt;</ph>variablename<ph id=\"ph4\">&amp;gt;</ph>&amp;#39;","pos":[0,118],"source":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred from an expression containing &#39;&lt;variablename&gt;&#39;"}]},{"content":"The compiler cannot infer the data type of a variable if the variable is used in establishing its initial value in the declaration.","pos":[783,914]},{"pos":[921,1005],"content":"For example, with <ph id=\"ph1\">`Option Infer`</ph> set to <ph id=\"ph2\">`On`</ph>, the following examples do not compile:","source":"For example, with `Option Infer` set to `On`, the following examples do not compile:"},{"content":"Declarations","pos":[1015,1027]},{"pos":[1153,1163],"content":"<ph id=\"ph1\">`For`</ph> loop","source":"`For` loop"},{"pos":[1275,1290],"content":"<ph id=\"ph1\">`For Each`</ph> loop","source":"`For Each` loop"},{"pos":[1421,1442],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC30980","source":"**Error ID:** BC30980"},{"pos":[1451,1472],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"If the two variables were intended to refer to different values, change the name of the variable that you are declaring.","pos":[1482,1602]},{"content":"Use a literal value instead of the variable name in the initial value, on the right side of the assignment.","pos":[1612,1719]},{"pos":[1729,1802],"content":"Use an <ph id=\"ph1\">`As`</ph> clause to specify the type of the variable you are declaring.","source":"Use an `As` clause to specify the type of the variable you are declaring."},{"pos":[1811,1819],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/dim-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[1823,1906],"source":"[Dim Statement](../../visual-basic/language-reference/statements/dim-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[1910,2015],"source":"[For Each...Next Statement](../../visual-basic/language-reference/statements/for-each-next-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>For...Next Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2019,2114],"source":"[For...Next Statement](../../visual-basic/language-reference/statements/for-next-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id=\"ph1\"> </ph>","pos":[2118,2231],"source":"[Local Type Inference](../../visual-basic/programming-guide/language-features/variables/local-type-inference.md) "},{"content":"<bpt id=\"p1\">[</bpt>Option Infer Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/option-infer-statement.md)</ept>","pos":[2235,2335],"source":"[Option Infer Statement](../../visual-basic/language-reference/statements/option-infer-statement.md)"}]}