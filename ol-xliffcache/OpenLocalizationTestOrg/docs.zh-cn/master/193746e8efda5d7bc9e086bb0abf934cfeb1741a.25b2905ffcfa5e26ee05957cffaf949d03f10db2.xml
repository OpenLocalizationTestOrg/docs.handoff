{"content":"---\ntitle: Unit testing Visual Basic in .NET Core with dotnet test and xUnit\ndescription: Learn unit test concepts in .NET Core through an interactive experience building a sample Visual Basic solution step-by-step using dotnet test and xUnit.\nauthor: billwagner\nms.author: wiwagn\nms.date: 09/01/2017\ndev_langs: \n  - \"vb\"\nms.custom: \"seodec18\"\n---\n# Unit testing Visual Basic .NET Core libraries using dotnet test and xUnit\n\nThis tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts. If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-vb-dotnet-test) before you begin. For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\n## Creating the source project\n\nOpen a shell window. Create a directory called *unit-testing-vb-using-dotnet-test* to hold the solution.\nInside this new directory, run [`dotnet new sln`](../tools/dotnet-new.md) to create a new solution. This practice\nmakes it easier to manage both the class library and the unit test project.\nInside the solution directory, create a *PrimeService* directory. You have the following directory and file structure thus far:\n\n```\n/unit-testing-using-dotnet-test\n    unit-testing-using-dotnet-test.sln\n    /PrimeService\n```\n\nMake *PrimeService* the current directory and run [`dotnet new classlib -lang VB`](../tools/dotnet-new.md) to create the source project. Rename *Class1.VB* to *PrimeService.VB*. You create a failing implementation of the `PrimeService` class:\n\n```vb\nNamespace Prime.Services\n    Public Class PrimeService\n        Public Function IsPrime(candidate As Integer) As Boolean\n            Throw New NotImplementedException(\"Please create a test first\")\n        End Function\n    End Class\nEnd Namespace\n```\n\nChange the directory back to the *unit-testing-vb-using-dotnet-test* directory. Run [`dotnet sln add .\\PrimeService\\PrimeService.vbproj`](../tools/dotnet-sln.md)\nto add the class library project to the solution.\n\n## Creating the test project\n\nNext, create the *PrimeService.Tests* directory. The following outline shows the directory structure:\n\n```\n/unit-testing-vb-using-dotnet-test\n    unit-testing-vb-using-dotnet-test.sln\n    /PrimeService\n        Source Files\n        PrimeService.vbproj\n    /PrimeService.Tests\n```\n\nMake the *PrimeService.Tests* directory the current directory and create a new project using [`dotnet new xunit -lang VB`](../tools/dotnet-new.md). This command creates a test project that uses xUnit as the test library. The generated template configures the test runner in the *PrimeServiceTests.vbproj*:\n\n```xml\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.3.0-preview-20170628-02\" />\n  <PackageReference Include=\"xunit\" Version=\"2.2.0\" />\n  <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.2.0\" />\n</ItemGroup>\n```\n\nThe test project requires other packages to create and run unit tests. `dotnet new` in the previous step added xUnit and the xUnit runner. Now, add the `PrimeService` class library as another dependency to the project. Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:\n\n```\ndotnet add reference ../PrimeService/PrimeService.vbproj\n```\n\nYou can see the entire file in the [samples repository](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-vb-dotnet-test/PrimeService.Tests/PrimeService.Tests.vbproj) on GitHub.\n\nYou have the following final folder layout:\n\n```\n/unit-testing-using-dotnet-test\n    unit-testing-using-dotnet-test.sln\n    /PrimeService\n        Source Files\n        PrimeService.vbproj\n    /PrimeService.Tests\n        Test Source Files\n        PrimeServiceTests.vbproj\n```\n\nExecute [`dotnet sln add .\\PrimeService.Tests\\PrimeService.Tests.vbproj`](../tools/dotnet-sln.md) in the *unit-testing-vb-using-dotnet-test* directory. \n\n## Creating the first test\n\nYou write one failing test, make it pass, then repeat the process. Remove *UnitTest1.vb* from the *PrimeService.Tests* directory and create a new Visual Basic file named *PrimeService_IsPrimeShould.VB*. Add the following code:\n\n```vb\nImports Xunit\n\nNamespace PrimeService.Tests\n    Public Class PrimeService_IsPrimeShould\n        Private _primeService As Prime.Services.PrimeService = New Prime.Services.PrimeService()\n\n        <Fact>\n        Sub ReturnFalseGivenValueOf1()\n            Dim result As Boolean = _primeService.IsPrime(1)\n\n            Assert.False(result, \"1 should not be prime\")\n        End Sub\n\n    End Class\nEnd Namespace\n```\n\nThe `<Fact>` attribute denotes a test method that is run by the test runner. From the *unit-testing-using-dotnet-test*, execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests. The xUnit test runner contains the program entry point to run your tests. `dotnet test` starts the test runner using the unit test project you've created.\n\nYour test fails. You haven't created the implementation yet. Make this test by writing the simplest code in the `PrimeService` class that works:\n\n```vb\nPublic Function IsPrime(candidate As Integer) As Boolean\n    If candidate = 1 Then\n        Return False\n    End If\n    Throw New NotImplementedException(\"Please create a test first\")\nEnd Function\n```\n\nIn the *unit-testing-vb-using-dotnet-test* directory, run `dotnet test` again. The `dotnet test` command runs a build for the `PrimeService` project and then for the `PrimeService.Tests` project. After building both projects, it runs this single test. It passes.\n\n## Adding more features\n\nNow that you've made one test pass, it's time to write more. There are a few other simple cases for prime numbers: 0, -1. You could add those cases as new tests with the `<Fact>` attribute, but that quickly becomes tedious. There are other xUnit attributes that enable you to write a suite of similar tests.  A `<Theory>` attribute represents a suite of tests that execute the same code but have different input arguments. You can use the `<InlineData>` attribute to specify values for those inputs.\n\nInstead of creating new tests, apply these two attributes to create a single theory. The theory is a method that tests several values less than two, which is the lowest prime number:\n\n[!code-vb[Sample_TestCode](../../../samples/core/getting-started/unit-testing-vb-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.vb?name=Sample_TestCode)]\n\nRun `dotnet test`, and two of these tests fail. To make all of the tests pass, change the `if` clause at the beginning of the method:\n\n```vb\nif candidate < 2\n```\n\nContinue to iterate by adding more tests, more theories, and more code in the main library. You have the [finished version of the tests](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-vb-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.vb) and the [complete implementation of the library](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-vb-dotnet-test/PrimeService/PrimeService.vb).\n\nYou've built a small library and a set of unit tests for that library. You've structured the solution so that adding new packages and tests is part of the normal workflow. You've concentrated most of your time and effort on solving the goals of the application.\n","nodes":[{"pos":[4,343],"embed":true,"restype":"x-metadata","content":"title: Unit testing Visual Basic in .NET Core with dotnet test and xUnit\ndescription: Learn unit test concepts in .NET Core through an interactive experience building a sample Visual Basic solution step-by-step using dotnet test and xUnit.\nauthor: billwagner\nms.author: wiwagn\nms.date: 09/01/2017\ndev_langs: \n  - \"vb\"\nms.custom: \"seodec18\"","nodes":[{"content":"Unit testing Visual Basic in .NET Core with dotnet test and xUnit","nodes":[{"pos":[0,65],"content":"Unit testing Visual Basic in .NET Core with dotnet test and xUnit","nodes":[{"content":"Unit testing Visual Basic in .NET Core with dotnet test and xUnit","pos":[0,65]}]}],"path":["title"],"nosxs":false},{"content":"Learn unit test concepts in .NET Core through an interactive experience building a sample Visual Basic solution step-by-step using dotnet test and xUnit.","nodes":[{"pos":[0,153],"content":"Learn unit test concepts in .NET Core through an interactive experience building a sample Visual Basic solution step-by-step using dotnet test and xUnit.","nodes":[{"content":"Learn unit test concepts in .NET Core through an interactive experience building a sample Visual Basic solution step-by-step using dotnet test and xUnit.","pos":[0,153]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[350,423],"content":"Unit testing Visual Basic .NET Core libraries using dotnet test and xUnit","linkify":"Unit testing Visual Basic .NET Core libraries using dotnet test and xUnit","nodes":[{"content":"Unit testing Visual Basic .NET Core libraries using dotnet test and xUnit","pos":[0,73]}]},{"content":"This tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts.","pos":[425,554]},{"content":"If you prefer to follow the tutorial using a pre-built solution, <bpt id=\"p1\">[</bpt>view or download the sample code<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-vb-dotnet-test)</ept> before you begin.","pos":[555,768],"source":" If you prefer to follow the tutorial using a pre-built solution, [view or download the sample code](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-vb-dotnet-test) before you begin."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[769,894],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"pos":[899,926],"content":"Creating the source project","linkify":"Creating the source project","nodes":[{"content":"Creating the source project","pos":[0,27]}]},{"content":"Open a shell window.","pos":[928,948]},{"content":"Create a directory called <bpt id=\"p1\">*</bpt>unit-testing-vb-using-dotnet-test<ept id=\"p1\">*</ept> to hold the solution.","pos":[949,1032],"source":" Create a directory called *unit-testing-vb-using-dotnet-test* to hold the solution."},{"content":"Inside this new directory, run <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet new sln`</ph><ept id=\"p1\">](../tools/dotnet-new.md)</ept> to create a new solution.","pos":[1033,1132],"source":"\nInside this new directory, run [`dotnet new sln`](../tools/dotnet-new.md) to create a new solution."},{"content":"This practice makes it easier to manage both the class library and the unit test project.","pos":[1133,1222],"source":" This practice\nmakes it easier to manage both the class library and the unit test project."},{"content":"Inside the solution directory, create a <bpt id=\"p1\">*</bpt>PrimeService<ept id=\"p1\">*</ept> directory.","pos":[1223,1288],"source":"\nInside the solution directory, create a *PrimeService* directory."},{"content":"You have the following directory and file structure thus far:","pos":[1289,1350]},{"content":"Make <bpt id=\"p1\">*</bpt>PrimeService<ept id=\"p1\">*</ept> the current directory and run <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet new classlib -lang VB`</ph><ept id=\"p2\">](../tools/dotnet-new.md)</ept> to create the source project.","pos":[1450,1586],"source":"Make *PrimeService* the current directory and run [`dotnet new classlib -lang VB`](../tools/dotnet-new.md) to create the source project."},{"content":"Rename <bpt id=\"p1\">*</bpt>Class1.VB<ept id=\"p1\">*</ept> to <bpt id=\"p2\">*</bpt>PrimeService.VB<ept id=\"p2\">*</ept>.","pos":[1587,1627],"source":" Rename *Class1.VB* to *PrimeService.VB*."},{"content":"You create a failing implementation of the <ph id=\"ph1\">`PrimeService`</ph> class:","pos":[1628,1692],"source":" You create a failing implementation of the `PrimeService` class:"},{"content":"Change the directory back to the <bpt id=\"p1\">*</bpt>unit-testing-vb-using-dotnet-test<ept id=\"p1\">*</ept> directory.","pos":[1950,2029],"source":"Change the directory back to the *unit-testing-vb-using-dotnet-test* directory."},{"content":"Run <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet sln add .\\PrimeService\\PrimeService.vbproj`</ph><ept id=\"p1\">](../tools/dotnet-sln.md)</ept> to add the class library project to the solution.","pos":[2030,2161],"source":" Run [`dotnet sln add .\\PrimeService\\PrimeService.vbproj`](../tools/dotnet-sln.md)\nto add the class library project to the solution."},{"pos":[2166,2191],"content":"Creating the test project","linkify":"Creating the test project","nodes":[{"content":"Creating the test project","pos":[0,25]}]},{"content":"Next, create the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory.","pos":[2193,2241],"source":"Next, create the *PrimeService.Tests* directory."},{"content":"The following outline shows the directory structure:","pos":[2242,2294]},{"content":"Make the <bpt id=\"p1\">*</bpt>PrimeService.Tests<ept id=\"p1\">*</ept> directory the current directory and create a new project using <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet new xunit -lang VB`</ph><ept id=\"p2\">](../tools/dotnet-new.md)</ept>.","pos":[2473,2620],"source":"Make the *PrimeService.Tests* directory the current directory and create a new project using [`dotnet new xunit -lang VB`](../tools/dotnet-new.md)."},{"content":"This command creates a test project that uses xUnit as the test library.","pos":[2621,2693]},{"content":"The generated template configures the test runner in the <bpt id=\"p1\">*</bpt>PrimeServiceTests.vbproj<ept id=\"p1\">*</ept>:","pos":[2694,2778],"source":" The generated template configures the test runner in the *PrimeServiceTests.vbproj*:"},{"content":"The test project requires other packages to create and run unit tests.","pos":[3040,3110]},{"content":"<ph id=\"ph1\">`dotnet new`</ph> in the previous step added xUnit and the xUnit runner.","pos":[3111,3178],"source":"`dotnet new` in the previous step added xUnit and the xUnit runner."},{"content":"Now, add the <ph id=\"ph1\">`PrimeService`</ph> class library as another dependency to the project.","pos":[3179,3258],"source":" Now, add the `PrimeService` class library as another dependency to the project."},{"content":"Use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add reference`</ph><ept id=\"p1\">](../tools/dotnet-add-reference.md)</ept> command:","pos":[3259,3334],"source":" Use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:"},{"pos":[3402,3609],"content":"You can see the entire file in the <bpt id=\"p1\">[</bpt>samples repository<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-vb-dotnet-test/PrimeService.Tests/PrimeService.Tests.vbproj)</ept> on GitHub.","source":"You can see the entire file in the [samples repository](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-vb-dotnet-test/PrimeService.Tests/PrimeService.Tests.vbproj) on GitHub."},{"content":"You have the following final folder layout:","pos":[3611,3654]},{"pos":[3886,4037],"content":"Execute <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet sln add .\\PrimeService.Tests\\PrimeService.Tests.vbproj`</ph><ept id=\"p1\">](../tools/dotnet-sln.md)</ept> in the <bpt id=\"p2\">*</bpt>unit-testing-vb-using-dotnet-test<ept id=\"p2\">*</ept> directory.","source":"Execute [`dotnet sln add .\\PrimeService.Tests\\PrimeService.Tests.vbproj`](../tools/dotnet-sln.md) in the *unit-testing-vb-using-dotnet-test* directory."},{"pos":[4043,4066],"content":"Creating the first test","linkify":"Creating the first test","nodes":[{"content":"Creating the first test","pos":[0,23]}]},{"content":"You write one failing test, make it pass, then repeat the process.","pos":[4068,4134]},{"content":"Remove <bpt id=\"p1\">*</bpt>UnitTest1.vb<ept id=\"p1\">*</ept> from the <bpt id=\"p2\">*</bpt>PrimeService.Tests<ept id=\"p2\">*</ept> directory and create a new Visual Basic file named <bpt id=\"p3\">*</bpt>PrimeService_IsPrimeShould.VB<ept id=\"p3\">*</ept>.","pos":[4135,4270],"source":" Remove *UnitTest1.vb* from the *PrimeService.Tests* directory and create a new Visual Basic file named *PrimeService_IsPrimeShould.VB*."},{"content":"Add the following code:","pos":[4271,4294]},{"content":"The <ph id=\"ph1\">`&lt;Fact&gt;`</ph> attribute denotes a test method that is run by the test runner.","pos":[4712,4788],"source":"The `<Fact>` attribute denotes a test method that is run by the test runner."},{"content":"From the <bpt id=\"p1\">*</bpt>unit-testing-using-dotnet-test<ept id=\"p1\">*</ept>, execute <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`dotnet test`</ph><ept id=\"p2\">](../tools/dotnet-test.md)</ept> to build the tests and the class library and then run the tests.","pos":[4789,4945],"source":" From the *unit-testing-using-dotnet-test*, execute [`dotnet test`](../tools/dotnet-test.md) to build the tests and the class library and then run the tests."},{"content":"The xUnit test runner contains the program entry point to run your tests.","pos":[4946,5019]},{"content":"<ph id=\"ph1\">`dotnet test`</ph> starts the test runner using the unit test project you've created.","pos":[5020,5100],"source":"`dotnet test` starts the test runner using the unit test project you've created."},{"content":"Your test fails.","pos":[5102,5118]},{"content":"You haven't created the implementation yet.","pos":[5119,5162]},{"content":"Make this test by writing the simplest code in the <ph id=\"ph1\">`PrimeService`</ph> class that works:","pos":[5163,5246],"source":" Make this test by writing the simplest code in the `PrimeService` class that works:"},{"content":"In the <bpt id=\"p1\">*</bpt>unit-testing-vb-using-dotnet-test<ept id=\"p1\">*</ept> directory, run <ph id=\"ph1\">`dotnet test`</ph> again.","pos":[5455,5533],"source":"In the *unit-testing-vb-using-dotnet-test* directory, run `dotnet test` again."},{"content":"The <ph id=\"ph1\">`dotnet test`</ph> command runs a build for the <ph id=\"ph2\">`PrimeService`</ph> project and then for the <ph id=\"ph3\">`PrimeService.Tests`</ph> project.","pos":[5534,5650],"source":" The `dotnet test` command runs a build for the `PrimeService` project and then for the `PrimeService.Tests` project."},{"content":"After building both projects, it runs this single test.","pos":[5651,5706]},{"content":"It passes.","pos":[5707,5717]},{"pos":[5722,5742],"content":"Adding more features","linkify":"Adding more features","nodes":[{"content":"Adding more features","pos":[0,20]}]},{"content":"Now that you've made one test pass, it's time to write more.","pos":[5744,5804]},{"content":"There are a few other simple cases for prime numbers: 0, -1.","pos":[5805,5865]},{"content":"You could add those cases as new tests with the <ph id=\"ph1\">`&lt;Fact&gt;`</ph> attribute, but that quickly becomes tedious.","pos":[5866,5967],"source":" You could add those cases as new tests with the `<Fact>` attribute, but that quickly becomes tedious."},{"content":"There are other xUnit attributes that enable you to write a suite of similar tests.","pos":[5968,6051]},{"content":"A <ph id=\"ph1\">`&lt;Theory&gt;`</ph> attribute represents a suite of tests that execute the same code but have different input arguments.","pos":[6053,6166],"source":"  A `<Theory>` attribute represents a suite of tests that execute the same code but have different input arguments."},{"content":"You can use the <ph id=\"ph1\">`&lt;InlineData&gt;`</ph> attribute to specify values for those inputs.","pos":[6167,6243],"source":" You can use the `<InlineData>` attribute to specify values for those inputs."},{"content":"Instead of creating new tests, apply these two attributes to create a single theory.","pos":[6245,6329]},{"content":"The theory is a method that tests several values less than two, which is the lowest prime number:","pos":[6330,6427]},{"content":"Run <ph id=\"ph1\">`dotnet test`</ph>, and two of these tests fail.","pos":[6595,6642],"source":"Run `dotnet test`, and two of these tests fail."},{"content":"To make all of the tests pass, change the <ph id=\"ph1\">`if`</ph> clause at the beginning of the method:","pos":[6643,6728],"source":" To make all of the tests pass, change the `if` clause at the beginning of the method:"},{"content":"Continue to iterate by adding more tests, more theories, and more code in the main library.","pos":[6758,6849]},{"content":"You have the <bpt id=\"p1\">[</bpt>finished version of the tests<ept id=\"p1\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-vb-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.vb)</ept> and the <bpt id=\"p2\">[</bpt>complete implementation of the library<ept id=\"p2\">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-vb-dotnet-test/PrimeService/PrimeService.vb)</ept>.","pos":[6850,7214],"source":" You have the [finished version of the tests](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-vb-dotnet-test/PrimeService.Tests/PrimeService_IsPrimeShould.vb) and the [complete implementation of the library](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-vb-dotnet-test/PrimeService/PrimeService.vb)."},{"content":"You've built a small library and a set of unit tests for that library.","pos":[7216,7286]},{"content":"You've structured the solution so that adding new packages and tests is part of the normal workflow.","pos":[7287,7387]},{"content":"You've concentrated most of your time and effort on solving the goals of the application.","pos":[7388,7477]}]}