{"content":"---\ntitle: \"Attributed Programming Model Overview (MEF)\"\nms.date: \"03/30/2017\"\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"MEF, attributed programming model\"\n  - \"attributed programming model [MEF]\"\nms.assetid: 49b787ff-2741-4836-ad51-c3017dc592d4\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n\n# Attributed Programming Model Overview (MEF)\n\nIn the Managed Extensibility Framework (MEF), a *programming model* is a particular method of defining the set of conceptual objects on which MEF operates. These conceptual objects include parts, imports, and exports. MEF uses these objects, but does not specify how they should be represented. Therefore, a wide variety of programming models are possible, including customized programming models.\n\nThe default programming model used in MEF is the *attributed programming model*. In the attributed programming model parts, imports, exports, and other objects are defined with attributes that decorate ordinary .NET Framework classes. This topic explains how to use the attributes provided by the attributed programming model to create a MEF application.\n\n<a name=\"import_and_export_basics\"></a>\n\n## Import and Export Basics\n\nAn *export* is a value that a part provides to other parts in the container, and an *import* is a requirement that a part expresses to the container, to be filled from the available exports. In the attributed programming model, imports and exports are declared by decorating classes or members with the `Import` and `Export` attributes. The `Export` attribute can decorate a class, field, property, or method, while the `Import` attribute can decorate a field, property, or constructor parameter.\n\nIn order for an import to be matched with an export, the import and export must have the same *contract*. The contract consists of a string, called the *contract name*, and the type of the exported or imported object, called the *contract type*. Only if both the contract name and contract type match is an export considered to fulfill a particular import.\n\nEither or both of the contract parameters can be implicit or explicit. The following code shows a class that declares a basic import.\n\n```vb\nPublic Class MyClass1\n    <Import()>\n    Public Property MyAddin As IMyAddin\nEnd Class\n```\n\n```csharp\npublic class MyClass\n{\n    [Import]\n    public IMyAddin MyAddin { get; set; }\n}\n```\n\nIn this import, the `Import` attribute has neither a contract type nor a contract name parameter attached. Therefore, both will be inferred from the decorated property. In this case, the contract type will be `IMyAddin`, and the contract name will be a unique string created from the contract type. (In other words, the contract name will match only exports whose names are also inferred from the type `IMyAddin`.)\n\nThe following shows an export that matches the previous import.\n\n```vb\n<Export(GetType(IMyAddin))>\nPublic Class MyLogger\n    Implements IMyAddin\n\nEnd Class\n```\n\n```csharp\n[Export(typeof(IMyAddin))]\npublic class MyLogger : IMyAddin { }\n```\n\nIn this export, the contract type is `IMyAddin` because it is specified as a parameter of the `Export` attribute. The exported type must be either the same as the contract type, derive from the contract type, or implement the contract type if it is an interface. In this export, the actual type `MyLogger` implements the interface `IMyAddin`. The contract name is inferred from the contract type, which means that this export will match the previous import.\n\n> [!NOTE]\n> Exports and imports should usually be declared on public classes or members. Other declarations are supported, but exporting or importing a private, protected, or internal member breaks the isolation model for the part and is therefore not recommended.\n\nThe contract type must match exactly for the export and import to be considered a match. Consider the following export.\n\n```vb\n<Export()> 'WILL NOT match the previous import!\nPublic Class MyLogger\n    Implements IMyAddin\n\nEnd Class\n```\n\n```csharp\n[Export] //WILL NOT match the previous import!\npublic class MyLogger : IMyAddin { }\n```\n\nIn this export, the contract type is `MyLogger` instead of `IMyAddin`. Even though `MyLogger` implements `IMyAddin`, and therefore could be cast to an `IMyAddin` object, this export will not match the previous import because the contract types are not the same.\n\nIn general, it is not necessary to specify the contract name, and most contracts should be defined in terms of the contract type and metadata. However, under certain circumstances, it is important to specify the contract name directly. The most common case is when a class exports several values that share a common type, such as primitives. The contract name can be specified as the first parameter of the `Import` or `Export` attribute. The following code shows an import and an export with a specified contract name of `MajorRevision`.\n\n```vb\nPublic Class MyExportClass\n\n    'This one will match\n    <Export(\"MajorRevision\")>\n    Public ReadOnly Property MajorRevision As Integer\n        Get\n            Return 4\n        End Get\n    End Property\n\n    <Export(\"MinorRevision\")>\n    Public ReadOnly Property MinorRevision As Integer\n        Get\n            Return 16\n        End Get\n    End Property\nEnd Class\n```\n\n```csharp\npublic class MyClass\n{\n    [Import(\"MajorRevision\")]\n    public int MajorRevision { get; set; }\n}\n\npublic class MyExportClass\n{\n    [Export(\"MajorRevision\")] //This one will match.\n    public int MajorRevision = 4;\n\n    [Export(\"MinorRevision\")]\n    public int MinorRevision = 16;\n}\n```\n\nIf the contract type is not specified, it will still be inferred from the type of the import or export. However, even if the contract name is specified explicitly, the contract type must also match exactly for the import and export to be considered a match. For example, if the `MajorRevision` field was a string, the inferred contract types would not match and the export would not match the import, despite having the same contract name.\n\n### Importing and Exporting a Method\n\nThe `Export` attribute can also decorate a method, in the same way as a class, property, or function. Method exports must specify a contract type or contract name, as the type cannot be inferred. The specified type can be either a custom delegate or a generic type, such as `Func`. The following class exports a method named `DoSomething`.\n\n```vb\nPublic Class MyAddin\n\n    'Explicitly specifying a generic type\n    <Export(GetType(Func(Of Integer, String)))>\n    Public Function DoSomething(ByVal TheParam As Integer) As String\n        Return Nothing 'Function body goes here\n    End Function\n\nEnd Class\n```\n\n```csharp\npublic class MyAddin\n{\n    //Explicitly specifying a generic type.\n    [Export(typeof(Func<int, string>))]\n    public string DoSomething(int TheParam);\n}\n```\n\nIn this class, the `DoSomething` method takes a single `int` parameter and returns a `string`. To match this export, the importing part must declare an appropriate member. The following class imports the `DoSomething` method.\n\n```vb\nPublic Class MyClass1\n\n    'Contract name must match!\n    <Import()>\n    Public Property MajorRevision As Func(Of Integer, String)\nEnd Class\n```\n\n```csharp\npublic class MyClass\n{\n    [Import] //Contract name must match!\n    public Func<int, string> DoSomething { get; set; }\n}\n```\n\nFor more information about how to use of the `Func<T, T>` object, see <xref:System.Func%602>.\n\n<a name=\"types_of_imports\"></a>\n\n## Types of Imports\n\nMEF support several import types, including dynamic, lazy, prerequisite, and optional.\n\n### Dynamic Imports\n\nIn some cases, the importing class may want to match exports of any type that have a particular contract name. In this scenario, the class can declare a *dynamic import*. The following import matches any export with contract name \"TheString\".\n\n```vb\nPublic Class MyClass1\n\n    <Import(\"TheString\")>\n    Public Property MyAddin\n\nEnd Class\n```\n\n```csharp\npublic class MyClass\n{\n    [Import(\"TheString\")]\n    public dynamic MyAddin { get; set; }\n}\n```\n\nWhen the contract type is inferred from the `dynamic` keyword, it will match any contract type. In this case, an import should **always** specify a contract name to match on. (If no contract name is specified, the import will be considered to match no exports.) Both of the following exports would match the previous import.\n\n```vb\n<Export(\"TheString\", GetType(IMyAddin))>\nPublic Class MyLogger\n    Implements IMyAddin\n\nEnd Class\n\n<Export(\"TheString\")>\nPublic Class MyToolbar\n\nEnd Class\n```\n\n```csharp\n[Export(\"TheString\", typeof(IMyAddin))]\npublic class MyLogger : IMyAddin { }\n\n[Export(\"TheString\")]\npublic class MyToolbar { }\n```\n\nObviously, the importing class must be prepared to deal with an object of arbitrary type.\n\n### Lazy Imports\n\nIn some cases, the importing class may require an indirect reference to the imported object, so that the object is not instantiated immediately. In this scenario, the class can declare a *lazy import* by using a contract type of `Lazy<T>`. The following importing property declares a lazy import.\n\n```vb\nPublic Class MyClass1\n\n    <Import()>\n    Public Property MyAddin As Lazy(Of IMyAddin)\n\nEnd Class\n```\n\n```csharp\npublic class MyClass\n{\n    [Import]\n    public Lazy<IMyAddin> MyAddin { get; set; }\n}\n```\n\nFrom the point of view of the composition engine, a contract type of `Lazy<T>` is considered identical to contract type of `T`. Therefore, the previous import would match the following export.\n\n```vb\n<Export(GetType(IMyAddin))>\nPublic Class MyLogger\n    Implements IMyAddin\n\nEnd Class\n```\n\n```csharp\n[Export(typeof(IMyAddin))]\npublic class MyLogger : IMyAddin { }\n```\n\nThe contract name and contract type can be specified in the `Import` attribute for a lazy import, as described earlier in the \"Basic Imports and Exports\" section.\n\n### Prerequisite Imports\n\nExported MEF parts are typically created by the composition engine, in response to a direct request or the need to fill a matched import. By default, when creating a part, the composition engine uses the parameter-less constructor. To make the engine use a different constructor, you can mark it with the `ImportingConstructor` attribute.\n\nEach part may have only one constructor for use by the composition engine. Providing no default constructor and no `ImportingConstructor` attribute, or providing more than one `ImportingConstructor` attribute, will produce an error.\n\nTo fill the parameters of a constructor marked with the `ImportingConstructor` attribute, all of those parameters are automatically declared as imports. This is a convenient way to declare imports that are used during part initialization. The following class uses `ImportingConstructor` to declare an import.\n\n```vb\nPublic Class MyClass1\n\n    Private _theAddin As IMyAddin\n\n    'Default constructor will NOT be used\n    'because the ImportingConstructor\n    'attribute is present.\n    Public Sub New()\n\n    End Sub\n\n    'This constructor will be used.\n    'An import with contract type IMyAddin\n    'is declared automatically.\n    <ImportingConstructor()>\n    Public Sub New(ByVal MyAddin As IMyAddin)\n        _theAddin = MyAddin\n    End Sub\n\nEnd Class\n```\n\n```csharp\npublic class MyClass\n{\n    private IMyAddin _theAddin;\n\n    //Default constructor will NOT be\n    //used because the ImportingConstructor\n    //attribute is present.\n    public MyClass() { }\n\n    //This constructor will be used.\n    //An import with contract type IMyAddin is\n    //declared automatically.\n    [ImportingConstructor]\n    public MyClass(IMyAddin MyAddin)\n    {\n        _theAddin = MyAddin;\n    }\n}\n```\n\nBy default, the `ImportingConstructor` attribute uses inferred contract types and contract names for all of the parameter imports. It is possible to override this by decorating the parameters with `Import` attributes, which can then define the contract type and contract name explicitly. The following code demonstrates a constructor that uses this syntax to import a derived class instead of a parent class.\n\n```vb\n<ImportingConstructor()>\nPublic Sub New(<Import(GetType(IMySubAddin))> ByVal MyAddin As IMyAddin)\n\nEnd Sub\n```\n\n```csharp\n[ImportingConstructor]\npublic MyClass([Import(typeof(IMySubAddin))]IMyAddin MyAddin)\n{\n    _theAddin = MyAddin;\n}\n```\n\nIn particular, you should be careful with collection parameters. For example, if you specify `ImportingConstructor` on a constructor with a parameter of type `IEnumerable<int>`, the import will match a single export of type `IEnumerable<int>`, instead of a set of exports of type `int`. To match a set of exports of type `int`, you have to decorate the parameter with the `ImportMany` attribute.\n\nParameters declared as imports by the `ImportingConstructor` attribute are also marked as *prerequisite imports*. MEF normally allows exports and imports to form a *cycle*. For example, a cycle is where object A imports object B, which in turn imports object A. Under ordinary circumstances, a cycle is not a problem, and the composition container constructs both objects normally.\n\nWhen an imported value is required by the constructor of a part, that object cannot participate in a cycle. If object A requires that object B be constructed before it can be constructed itself, and object B imports object A, then the cycle will be unable to resolve and a composition error will occur. Imports declared on constructor parameters are therefore prerequisite imports, which must all be filled before any of the exports from the object that requires them can be used.\n\n### Optional Imports\n\nThe `Import` attribute specifies a requirement for the part to function. If an import cannot be fulfilled, the composition of that part will fail and the part will not be available.\n\nYou can specify that an import is *optional* by using the `AllowDefault` property. In this case, the composition will succeed even if the import does not match any available exports, and the importing property will be set to the default for its property type (`null` for object properties, `false` for Booleans, or zero for numeric properties.) The following class uses an optional import.\n\n```vb\nPublic Class MyClass1\n\n    <Import(AllowDefault:=True)>\n    Public Property thePlugin As Plugin\n\n    'If no matching export is available,\n    'thePlugin will be set to null.\nEnd Class\n```\n\n```csharp\npublic class MyClass\n{\n    [Import(AllowDefault = true)]\n    public Plugin thePlugin { get; set; }\n\n    //If no matching export is available,\n    //thePlugin will be set to null.\n}\n```\n\n### Importing Multiple Objects\n\nThe `Import` attribute will only be successfully composed when it matches one and only one export. Other cases will produce a composition error. To import more than one export that matches the same contract, use the `ImportMany` attribute. Imports marked with this attribute are always optional. For example, composition will not fail if no matching exports are present. The following class imports any number of exports of type `IMyAddin`.\n\n```vb\nPublic Class MyClass1\n\n    <ImportMany()>\n    Public Property MyAddin As IEnumerable(Of IMyAddin)\n\nEnd Class\n```\n\n```csharp\npublic class MyClass\n{\n    [ImportMany]\n    public IEnumerable<IMyAddin> MyAddin { get; set; }\n}\n```\n\nThe imported array can be accessed by using ordinary `IEnumerable<T>` syntax and methods. It is also possible to use an ordinary array (`IMyAddin[]`) instead.\n\nThis pattern can be very important when you use it in combination with the `Lazy<T>` syntax. For example, by using `ImportMany`, `IEnumerable<T>`, and `Lazy<T>`, you can import indirect references to any number of objects and only instantiate the ones that become necessary. The following class shows this pattern.\n\n```vb\nPublic Class MyClass1\n\n    <ImportMany()>\n    Public Property MyAddin As IEnumerable(Of Lazy(Of IMyAddin))\n\nEnd Class\n```\n\n```csharp\npublic class MyClass\n{\n    [ImportMany]\n    public IEnumerable<Lazy<IMyAddin>> MyAddin { get; set; }\n}\n```\n\n<a name=\"avoiding_discovery\"></a>\n\n## Avoiding Discovery\n\nIn some cases, you may want to prevent a part from being discovered as part of a catalog. For example, the part may be a base class intended to be inherited from, but not used. There are two ways to accomplish this. First, you can use the `abstract` keyword on the part class. Abstract classes never provide exports, although they can provide inherited exports to classes that derive from them.\n\nIf the class cannot be made abstract, you can decorate it with the `PartNotDiscoverable` attribute. A part decorated with this attribute will not be included in any catalogs. The following example demonstrates these patterns. `DataOne` will be discovered by the catalog. Since `DataTwo` is abstract, it will not be discovered. Since `DataThree` used the `PartNotDiscoverable` attribute, it will not be discovered.\n\n```vb\n<Export()>\nPublic Class DataOne\n    'This part will be discovered\n    'as normal by the catalog.\nEnd Class\n\n<Export()>\nPublic MustInherit Class DataTwo\n    'This part will not be discovered\n    'by the catalog.\nEnd Class\n\n<PartNotDiscoverable()>\n<Export()>\nPublic Class DataThree\n    'This part will also not be discovered\n    'by the catalog.\nEnd Class\n```\n\n```csharp\n[Export]\npublic class DataOne\n{\n    //This part will be discovered\n    //as normal by the catalog.\n}\n\n[Export]\npublic abstract class DataTwo\n{\n    //This part will not be discovered\n    //by the catalog.\n}\n\n[PartNotDiscoverable]\n[Export]\npublic class DataThree\n{\n    //This part will also not be discovered\n    //by the catalog.\n}\n```\n\n<a name=\"metadata_and_metadata_views\"></a>\n\n## Metadata and Metadata Views\n\nExports can provide additional information about themselves known as *metadata*. Metadata can be used to convey properties of the exported object to the importing part. The importing part can use this data to decide which exports to use, or to gather information about an export without having to construct it. For this reason, an import must be lazy to use metadata.\n\nTo use metadata, you typically declare an interface known as a *metadata view*, which declares what metadata will be available. The metadata view interface must have only properties, and those properties must have `get` accessors. The following interface is an example metadata view.\n\n```vb\nPublic Interface IPluginMetadata\n\n    ReadOnly Property Name As String\n\n    <DefaultValue(1)>\n    ReadOnly Property Version As Integer\n\nEnd Interface\n```\n\n```csharp\npublic interface IPluginMetadata\n{\n    string Name { get; }\n\n    [DefaultValue(1)]\n    int Version { get; }\n}\n```\n\nIt is also possible to use a generic collection, `IDictionary<string, object>`, as a metadata view, but this forfeits the benefits of type checking and should be avoided.\n\nOrdinarily, all of the properties named in the metadata view are required, and any exports that do not provide them will not be considered a match. The `DefaultValue` attribute specifies that a property is optional. If the property is not included, it will be assigned the default value specified as a parameter of `DefaultValue`. The following are two different classes decorated with metadata. Both of these classes would match the previous metadata view.\n\n```vb\n<Export(GetType(IPlugin))>\n<ExportMetadata(\"Name\", \"Logger\")>\n<ExportMetadata(\"Version\", 4)>\nPublic Class MyLogger\n    Implements IPlugin\n\nEnd Class\n\n'Version is not required because of the DefaultValue\n<Export(GetType(IPlugin))>\n<ExportMetadata(\"Name\", \"Disk Writer\")>\nPublic Class DWriter\n    Implements IPlugin\n\nEnd Class\n```\n\n```csharp\n[Export(typeof(IPlugin)),\n    ExportMetadata(\"Name\", \"Logger\"),\n    ExportMetadata(\"Version\", 4)]\npublic class Logger : IPlugin\n{\n}\n\n[Export(typeof(IPlugin)),\n    ExportMetadata(\"Name\", \"Disk Writer\")]\n    //Version is not required because of the DefaultValue\npublic class DWriter : IPlugin\n{\n}\n```\n\nMetadata is expressed after the `Export` attribute by using the `ExportMetadata` attribute. Each piece of metadata is composed of a name/value pair. The name portion of the metadata must match the name of the appropriate property in the metadata view, and the value will be assigned to that property.\n\nIt is the importer that specifies what metadata view, if any, will be in use. An import with metadata is declared as a lazy import, with the metadata interface as the second type parameter to `Lazy<T,T>`. The following class imports the previous part with metadata.\n\n```vb\nPublic Class Addin\n\n    <Import()>\n    Public Property plugin As Lazy(Of IPlugin, IPluginMetadata)\nEnd Class\n```\n\n```csharp\npublic class Addin\n{\n    [Import]\n    public Lazy<IPlugin, IPluginMetadata> plugin;\n}\n```\n\nIn many cases, you will want to combine metadata with the `ImportMany` attribute, in order to parse through the available imports and choose and instantiate only one, or filter a collection to match a certain condition. The following class instantiates only `IPlugin` objects that have the `Name` value \"Logger\".\n\n```vb\nPublic Class User\n\n    <ImportMany()>\n    Public Property plugins As IEnumerable(Of Lazy(Of IPlugin, IPluginMetadata))\n\n    Public Function InstantiateLogger() As IPlugin\n\n        Dim logger As IPlugin\n        logger = Nothing\n\n        For Each Plugin As Lazy(Of IPlugin, IPluginMetadata) In plugins\n            If Plugin.Metadata.Name = \"Logger\" Then\n                logger = Plugin.Value\n            End If\n        Next\n        Return logger\n    End Function\n\nEnd Class\n```\n\n```csharp\npublic class User\n{\n    [ImportMany]\n    public IEnumerable<Lazy<IPlugin, IPluginMetadata>> plugins;\n\n    public IPlugin InstantiateLogger()\n    {\n        IPlugin logger = null;\n\n        foreach (Lazy<IPlugin, IPluginMetadata> plugin in plugins)\n        {\n            if (plugin.Metadata.Name == \"Logger\")\n                logger = plugin.Value;\n        }\n        return logger;\n    }\n}\n```\n\n<a name=\"import_and_export_inheritance\"></a>\n\n## Import and Export Inheritance\n\nIf a class inherits from a part, that class may also become a part. Imports are always inherited by subclasses. Therefore, a subclass of a part will always be a part, with the same imports as its parent class.\n\nExports declared by using the `Export` attribute are not inherited by subclasses. However, a part can export itself by using the `InheritedExport` attribute. Subclasses of the part will inherit and provide the same export, including contract name and contract type. Unlike an `Export` attribute, `InheritedExport` can be applied only at the class level, and not at the member level. Therefore, member-level exports can never be inherited.\n\nThe following four classes demonstrate the principles of import and export inheritance. `NumTwo` inherits from `NumOne`, so `NumTwo` will import `IMyData`. Ordinary exports are not inherited, so `NumTwo` will not export anything. `NumFour` inherits from `NumThree`. Because `NumThree` used `InheritedExport`, `NumFour` has one export with contract type `NumThree`. Member-level exports are never inherited, so `IMyData` is not exported.\n\n```vb\n<Export()>\nPublic Class NumOne\n    <Import()>\n    Public Property MyData As IMyData\nEnd Class\n\nPublic Class NumTwo\n    Inherits NumOne\n\n    'Imports are always inherited, so NumTwo will\n    'Import IMyData\n\n    'Ordinary exports are not inherited, so\n    'NumTwo will NOT export anything.  As a result it\n    'will not be discovered by the catalog!\n\nEnd Class\n\n<InheritedExport()>\nPublic Class NumThree\n\n    <Export()>\n    Public Property MyData As IMyData\n\n    'This part provides two exports, one of\n    'contract type NumThree, and one of\n    'contract type IMyData.\n\nEnd Class\n\nPublic Class NumFour\n    Inherits NumThree\n\n    'Because NumThree used InheritedExport,\n    'this part has one export with contract\n    'type NumThree.\n\n    'Member-level exports are never inherited,\n    'so IMyData is not exported.\n\nEnd Class\n```\n\n```csharp\n[Export]\npublic class NumOne\n{\n    [Import]\n    public IMyData MyData { get; set; }\n}\n\npublic class NumTwo : NumOne\n{\n    //Imports are always inherited, so NumTwo will\n    //import IMyData.\n\n    //Ordinary exports are not inherited, so\n    //NumTwo will NOT export anything. As a result it\n    //will not be discovered by the catalog!\n}\n\n[InheritedExport]\npublic class NumThree\n{\n    [Export]\n    Public IMyData MyData { get; set; }\n\n    //This part provides two exports, one of\n    //contract type NumThree, and one of\n    //contract type IMyData.\n}\n\npublic class NumFour : NumThree\n{\n    //Because NumThree used InheritedExport,\n    //this part has one export with contract\n    //type NumThree.\n\n    //Member-level exports are never inherited,\n    //so IMyData is not exported.\n}\n```\n\nIf there is metadata associated with an `InheritedExport` attribute, that metadata will also be inherited. (For more information, see the earlier \"Metadata and Metadata Views\" section.) Inherited metadata cannot be modified by the subclass. However, by re-declaring the `InheritedExport` attribute with the same contract name and contract type, but with new metadata, the subclass can replace the inherited metadata with new metadata. The following class demonstrates this principle. The `MegaLogger` part inherits from `Logger` and includes the `InheritedExport` attribute. Since `MegaLogger` re-declares new metadata named Status, it does not inherit the Name and Version metadata from `Logger`.\n\n```vb\n<InheritedExport(GetType(IPlugin))>\n<ExportMetadata(\"Name\", \"Logger\")>\n<ExportMetadata(\"Version\", 4)>\nPublic Class Logger\n    Implements IPlugin\n\n    'Exports with contract type IPlugin\n    'and metadata \"Name\" and \"Version\".\nEnd Class\n\nPublic Class SuperLogger\n    Inherits Logger\n\n    'Exports with contract type IPlugin and\n    'metadata \"Name\" and \"Version\", exactly the same\n    'as the Logger class.\n\nEnd Class\n\n<InheritedExport(GetType(IPlugin))>\n<ExportMetadata(\"Status\", \"Green\")>\nPublic Class MegaLogger\n    Inherits Logger\n\n    'Exports with contract type IPlugin and\n    'metadata \"Status\" only. Re-declaring\n    'the attribute replaces all metadata.\n\nEnd Class\n```\n\n```csharp\n[InheritedExport(typeof(IPlugin)),\n    ExportMetadata(\"Name\", \"Logger\"),\n    ExportMetadata(\"Version\", 4)]\npublic class Logger : IPlugin\n{\n    //Exports with contract type IPlugin and\n    //metadata \"Name\" and \"Version\".\n}\n\npublic class SuperLogger : Logger\n{\n    //Exports with contract type IPlugin and\n    //metadata \"Name\" and \"Version\", exactly the same\n    //as the Logger class.\n}\n\n[InheritedExport(typeof(IPlugin)),\n    ExportMetadata(\"Status\", \"Green\")]\npublic class MegaLogger : Logger        {\n    //Exports with contract type IPlugin and\n    //metadata \"Status\" only. Re-declaring\n    //the attribute replaces all metadata.\n}\n```\n\nWhen re-declaring the `InheritedExport` attribute to override metadata, make sure that the contract types are the same. (In the previous example, `IPlugin` is the contract type.) If they differ, instead of overriding, the second attribute will create a second, independent export from the part. Generally, this means that you will have to explicitly specify the contract type when you override an `InheritedExport` attribute, as shown in the previous example.\n\nSince interfaces cannot be instantiated directly, they generally cannot be decorated with `Export` or `Import` attributes. However, an interface can be decorated with an `InheritedExport` attribute at the interface level, and that export along with any associated metadata will be inherited by any implementing classes. The interface itself will not be available as a part, however.\n\n<a name=\"custom_export_attributes\"></a>\n\n## Custom Export Attributes\n\nThe basic export attributes, `Export` and `InheritedExport`, can be extended to include metadata as attribute properties. This technique is useful for applying similar metadata to many parts, or creating an inheritance tree of metadata attributes.\n\nA custom attribute can specify the contract type, the contract name, or any other metadata. In order to define a custom attribute, a class inheriting from `ExportAttribute` (or `InheritedExportAttribute`) must be decorated with the `MetadataAttribute` attribute. The following class defines a custom attribute.\n\n```vb\n<MetadataAttribute()>\n<AttributeUsage(AttributeTargets.Class, AllowMultiple:=false)>\nPublic Class MyAttribute\n    Inherits ExportAttribute\n\n    Public Property MyMetadata As String\n\n    Public Sub New(ByVal myMetadata As String)\n        MyBase.New(GetType(IMyAddin))\n\n        myMetadata = myMetadata\n    End Sub\n\nEnd Class\n```\n\n```csharp\n[MetadataAttribute]\n[AttributeUsage(AttributeTargets.Class, AllowMultiple=false)]\npublic class MyAttribute : ExportAttribute\n{\n    public MyAttribute(string myMetadata)\n        : base(typeof(IMyAddin))\n    {\n        MyMetadata = myMetadata;\n    }\n\n    public string MyMetadata { get; private set; }\n}\n```\n\nThis class defines a custom attribute named `MyAttribute` with contract type `IMyData` and some metadata named `MyMetadata`. All properties in a class marked with the `MetadataAttribute` attribute are considered to be metadata defined in the custom attribute. The following two declarations are equivalent.\n\n```vb\n<Export(GetType(IMyAddin))>\n<ExportMetadata(\"MyMetadata\", \"theData\")>\nPublic Property myAddin As MyAddin\n```\n\n```vb\n<MyAttribute(\"theData\")>\nPublic Property myAddin As MyAddin\n```\n\n```csharp\n[Export(typeof(IMyAddin)),\n    ExportMetadata(\"MyMetadata\", \"theData\")]\npublic MyAddin myAddin { get; set; }\n```\n\n```csharp\n[MyAttribute(\"theData\")]\npublic MyAddin myAddin { get; set; }\n```\n\nIn the first declaration, the contract type and metadata are explicitly defined. In the second declaration, the contract type and metadata are implicit in the customized attribute. Particularly in cases where a large amount of identical metadata must be applied to many parts (for example, author or copyright information), using a custom attribute can save a lot of time and duplication. Further, inheritance trees of custom attributes can be created to allow for variations.\n\nTo create optional metadata in a custom attribute, you can use the `DefaultValue` attribute. When this attribute is applied to a property in a custom attribute class, it specifies that the decorated property is optional and does not have to be supplied by an exporter. If a value for the property is not supplied, it will be assigned the default value for its property type (usually `null`, `false`, or 0.)\n\n<a name=\"creation_policies\"></a>\n\n## Creation Policies\n\nWhen a part specifies an import and composition is performed, the composition container attempts to find a matching export. If it matches the import with an export successfully, the importing member is set to an instance of the exported object. Where this instance comes from is controlled by the exporting part's *creation policy*.\n\nThe two possible creation policies are *shared* and *non-shared*. A part with a creation policy of shared will be shared between every import in the container for a part with that contract. When the composition engine finds a match and has to set an importing property, it will instantiate a new copy of the part only if one does not already exist; otherwise, it will supply the existing copy. This means that many objects may have references to the same part. Such parts should not rely on internal state that might be changed from many places. This policy is appropriate for static parts, parts that provide services, and parts that consume a lot of memory or other resources.\n\nA part with the creation policy of non-shared will be created every time a matching import for one of its exports is found. A new copy will therefore be instantiated for every import in the container that matches one of the part's exported contracts. The internal state of these copies will not be shared. This policy is appropriate for parts where each import requires its own internal state.\n\nBoth the import and the export can specify the creation policy of a part, from among the values `Shared`, `NonShared`, or `Any`. The default is `Any` for both imports and exports. An export that specifies `Shared` or `NonShared` will only match an import that specifies the same, or that specifies `Any`. Similarly, an import that specifies `Shared` or `NonShared` will only match an export that specifies the same, or that specifies `Any`. Imports and exports with incompatible creation policies are not considered a match, in the same way as an import and export whose contract name or contract type are not a match. If both import and export specify `Any`, or do not specify a creation policy and default to `Any`, the creation policy will default to shared.\n\nThe following example shows both imports and exports specifying creation policies. `PartOne` does not specify a creation policy, so the default is `Any`. `PartTwo` does not specify a creation policy, so the default is `Any`. Since both import and export default to `Any`, `PartOne` will be shared. `PartThree` specifies a `Shared` creation policy, so `PartTwo` and `PartThree` will share the same copy of `PartOne`. `PartFour` specifies a `NonShared` creation policy, so `PartFour` will be non-shared in `PartFive`. `PartSix` specifies a `NonShared` creation policy. `PartFive` and `PartSix` will each receive separate copies of `PartFour`. `PartSeven` specifies a `Shared` creation policy. Because there is no exported `PartFour` with a creation policy of `Shared`, the `PartSeven` import does not match anything and will not be filled.\n\n```vb\n<Export()>\nPublic Class PartOne\n    'The default creation policy for an export is Any.\nEnd Class\n\nPublic Class PartTwo\n\n    <Import()>\n    Public Property partOne As PartOne\n\n    'The default creation policy for an import is Any.\n    'If both policies are Any, the part will be shared.\n\nEnd Class\n\nPublic Class PartThree\n\n    <Import(RequiredCreationPolicy:=CreationPolicy.Shared)>\n    Public Property partOne As PartOne\n\n    'The Shared creation policy is explicitly specified.\n    'PartTwo and PartThree will receive references to the\n    'SAME copy of PartOne.\n\nEnd Class\n\n<Export()>\n<PartCreationPolicy(CreationPolicy.NonShared)>\nPublic Class PartFour\n    'The NonShared creation policy is explicitly specified.\nEnd Class\n\nPublic Class PartFive\n\n    <Import()>\n    Public Property partFour As PartFour\n\n    'The default creation policy for an import is Any.\n    'Since the export's creation policy was explicitly\n    'defined, the creation policy for this property will\n    'be non-shared.\n\nEnd Class\n\nPublic Class PartSix\n\n    <Import(RequiredCreationPolicy:=CreationPolicy.NonShared)>\n    Public Property partFour As PartFour\n\n    'Both import and export specify matching creation\n    'policies.  PartFive and PartSix will each receive\n    'SEPARATE copies of PartFour, each with its own\n    'internal state.\n\nEnd Class\n\nPublic Class PartSeven\n\n    <Import(RequiredCreationPolicy:=CreationPolicy.Shared)>\n    Public Property partFour As PartFour\n\n    'A creation policy mismatch.  Because there is no\n    'exported PartFour with a creation policy of Shared,\n    'this import does not match anything and will not be\n    'filled.\n\nEnd Class\n```\n\n```csharp\n[Export]\npublic class PartOne\n{\n    //The default creation policy for an export is Any.\n}\n\npublic class PartTwo\n{\n    [Import]\n    public PartOne partOne { get; set; }\n\n    //The default creation policy for an import is Any.\n    //If both policies are Any, the part will be shared.\n}\n\npublic class PartThree\n{\n    [Import(RequiredCreationPolicy = CreationPolicy.Shared)]\n    public PartOne partOne { get; set; }\n\n    //The Shared creation policy is explicitly specified.\n    //PartTwo and PartThree will receive references to the\n    //SAME copy of PartOne.\n}\n\n[Export]\n[PartCreationPolicy(CreationPolicy.NonShared)]\npublic class PartFour\n{\n    //The NonShared creation policy is explicitly specified.\n}\n\npublic class PartFive\n{\n    [Import]\n    public PartFour partFour { get; set; }\n\n    //The default creation policy for an import is Any.\n    //Since the export's creation policy was explicitly\n    //defined, the creation policy for this property will\n    //be non-shared.\n}\n\npublic class PartSix\n{\n    [Import(RequiredCreationPolicy = CreationPolicy.NonShared)]\n    public PartFour partFour { get; set; }\n\n    //Both import and export specify matching creation\n    //policies.  PartFive and PartSix will each receive\n    //SEPARATE copies of PartFour, each with its own\n    //internal state.\n}\n\npublic class PartSeven\n{\n    [Import(RequiredCreationPolicy = CreationPolicy.Shared)]\n    public PartFour partFour { get; set; }\n\n    //A creation policy mismatch.  Because there is no\n    //exported PartFour with a creation policy of Shared,\n    //this import does not match anything and will not be\n    //filled.\n}\n```\n\n<a name=\"life_cycle_and_disposing\"></a>\n\n## Life Cycle and Disposing\n\nBecause parts are hosted in the composition container, their life cycle can be more complex than ordinary objects. Parts can implement two important life cycle-related interfaces: `IDisposable` and `IPartImportsSatisfiedNotification`.\n\nParts that require work to be performed at shut down or that need to release resources should implement `IDisposable`, as usual for .NET Framework objects. However, since the container creates and maintains references to parts, only the container that owns a part should call the `Dispose` method on it. The container itself implements `IDisposable`, and as portion of its cleanup in `Dispose` it will call `Dispose` on all the parts that it owns. For this reason, you should always dispose the composition container when it and any parts it owns are no longer needed.\n\nFor long-lived composition containers, memory consumption by parts with a creation policy of non-shared can become a problem. These non-shared parts can be created multiple times and will not be disposed until the container itself is disposed. To deal with this, the container provides the `ReleaseExport` method. Calling this method on a non-shared export removes that export from the composition container and disposes it. Parts that are used only by the removed export, and so on down the tree, are also removed and disposed. In this way, resources can be reclaimed without disposing the composition container itself.\n\n`IPartImportsSatisfiedNotification` contains one method named `OnImportsSatisfied`. This method is called by the composition container on any parts that implement the interface when composition has been completed and the part's imports are ready for use. Parts are created by the composition engine to fill the imports of other parts. Before the imports of a part have been set, you cannot perform any initialization that relies on or manipulates imported values in the part constructor unless those values have been specified as prerequisites by using the `ImportingConstructor` attribute. This is normally the preferred method, but in some cases, constructor injection may not be available. In those cases, initialization can be performed in `OnImportsSatisfied`, and the part should implement `IPartImportsSatisfiedNotification`.\n\n## See also\n\n- [Channel 9 Video: Open Up Your Applications with the Managed Extensibility Framework](https://channel9.msdn.com/events/TechEd/NorthAmerica/2009/DTL328)\n- [Channel 9 Video: Managed Extensibility Framework (MEF) 2.0](https://channel9.msdn.com/posts/NET-45-Oleg-Lvovitch-and-Kevin-Ransom-Managed-Extensibility-Framework-MEF-20)\n","nodes":[{"pos":[4,302],"embed":true,"restype":"x-metadata","content":"title: \"Attributed Programming Model Overview (MEF)\"\nms.date: \"03/30/2017\"\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"MEF, attributed programming model\"\n  - \"attributed programming model [MEF]\"\nms.assetid: 49b787ff-2741-4836-ad51-c3017dc592d4\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Attributed Programming Model Overview (MEF)","nodes":[{"pos":[0,43],"content":"Attributed Programming Model Overview (MEF)","nodes":[{"content":"Attributed Programming Model Overview (MEF)","pos":[0,43]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[310,353],"content":"Attributed Programming Model Overview (MEF)","linkify":"Attributed Programming Model Overview (MEF)","nodes":[{"content":"Attributed Programming Model Overview (MEF)","pos":[0,43]}]},{"content":"In the Managed Extensibility Framework (MEF), a <bpt id=\"p1\">*</bpt>programming model<ept id=\"p1\">*</ept> is a particular method of defining the set of conceptual objects on which MEF operates.","pos":[355,510],"source":"In the Managed Extensibility Framework (MEF), a *programming model* is a particular method of defining the set of conceptual objects on which MEF operates."},{"content":"These conceptual objects include parts, imports, and exports.","pos":[511,572]},{"content":"MEF uses these objects, but does not specify how they should be represented.","pos":[573,649]},{"content":"Therefore, a wide variety of programming models are possible, including customized programming models.","pos":[650,752]},{"content":"The default programming model used in MEF is the <bpt id=\"p1\">*</bpt>attributed programming model<ept id=\"p1\">*</ept>.","pos":[754,834],"source":"The default programming model used in MEF is the *attributed programming model*."},{"content":"In the attributed programming model parts, imports, exports, and other objects are defined with attributes that decorate ordinary .NET Framework classes.","pos":[835,988]},{"content":"This topic explains how to use the attributes provided by the attributed programming model to create a MEF application.","pos":[989,1108]},{"pos":[1154,1178],"content":"Import and Export Basics","linkify":"Import and Export Basics","nodes":[{"content":"Import and Export Basics","pos":[0,24]}]},{"content":"An <bpt id=\"p1\">*</bpt>export<ept id=\"p1\">*</ept> is a value that a part provides to other parts in the container, and an <bpt id=\"p2\">*</bpt>import<ept id=\"p2\">*</ept> is a requirement that a part expresses to the container, to be filled from the available exports.","pos":[1180,1370],"source":"An *export* is a value that a part provides to other parts in the container, and an *import* is a requirement that a part expresses to the container, to be filled from the available exports."},{"content":"In the attributed programming model, imports and exports are declared by decorating classes or members with the <ph id=\"ph1\">`Import`</ph> and <ph id=\"ph2\">`Export`</ph> attributes.","pos":[1371,1516],"source":" In the attributed programming model, imports and exports are declared by decorating classes or members with the `Import` and `Export` attributes."},{"content":"The <ph id=\"ph1\">`Export`</ph> attribute can decorate a class, field, property, or method, while the <ph id=\"ph2\">`Import`</ph> attribute can decorate a field, property, or constructor parameter.","pos":[1517,1676],"source":" The `Export` attribute can decorate a class, field, property, or method, while the `Import` attribute can decorate a field, property, or constructor parameter."},{"content":"In order for an import to be matched with an export, the import and export must have the same <bpt id=\"p1\">*</bpt>contract<ept id=\"p1\">*</ept>.","pos":[1678,1783],"source":"In order for an import to be matched with an export, the import and export must have the same *contract*."},{"content":"The contract consists of a string, called the <bpt id=\"p1\">*</bpt>contract name<ept id=\"p1\">*</ept>, and the type of the exported or imported object, called the <bpt id=\"p2\">*</bpt>contract type<ept id=\"p2\">*</ept>.","pos":[1784,1923],"source":" The contract consists of a string, called the *contract name*, and the type of the exported or imported object, called the *contract type*."},{"content":"Only if both the contract name and contract type match is an export considered to fulfill a particular import.","pos":[1924,2034]},{"content":"Either or both of the contract parameters can be implicit or explicit.","pos":[2036,2106]},{"content":"The following code shows a class that declares a basic import.","pos":[2107,2169]},{"content":"In this import, the <ph id=\"ph1\">`Import`</ph> attribute has neither a contract type nor a contract name parameter attached.","pos":[2364,2470],"source":"In this import, the `Import` attribute has neither a contract type nor a contract name parameter attached."},{"content":"Therefore, both will be inferred from the decorated property.","pos":[2471,2532]},{"content":"In this case, the contract type will be <ph id=\"ph1\">`IMyAddin`</ph>, and the contract name will be a unique string created from the contract type.","pos":[2533,2662],"source":" In this case, the contract type will be `IMyAddin`, and the contract name will be a unique string created from the contract type."},{"content":"(In other words, the contract name will match only exports whose names are also inferred from the type <ph id=\"ph1\">`IMyAddin`</ph>.)","pos":[2663,2778],"source":" (In other words, the contract name will match only exports whose names are also inferred from the type `IMyAddin`.)"},{"content":"The following shows an export that matches the previous import.","pos":[2780,2843]},{"content":"In this export, the contract type is <ph id=\"ph1\">`IMyAddin`</ph> because it is specified as a parameter of the <ph id=\"ph2\">`Export`</ph> attribute.","pos":[3020,3133],"source":"In this export, the contract type is `IMyAddin` because it is specified as a parameter of the `Export` attribute."},{"content":"The exported type must be either the same as the contract type, derive from the contract type, or implement the contract type if it is an interface.","pos":[3134,3282]},{"content":"In this export, the actual type <ph id=\"ph1\">`MyLogger`</ph> implements the interface <ph id=\"ph2\">`IMyAddin`</ph>.","pos":[3283,3362],"source":" In this export, the actual type `MyLogger` implements the interface `IMyAddin`."},{"content":"The contract name is inferred from the contract type, which means that this export will match the previous import.","pos":[3363,3477]},{"pos":[3481,3743],"content":"[!NOTE]\nExports and imports should usually be declared on public classes or members. Other declarations are supported, but exporting or importing a private, protected, or internal member breaks the isolation model for the part and is therefore not recommended.","leadings":["","> "],"nodes":[{"content":"Exports and imports should usually be declared on public classes or members. Other declarations are supported, but exporting or importing a private, protected, or internal member breaks the isolation model for the part and is therefore not recommended.","pos":[8,260],"nodes":[{"content":"Exports and imports should usually be declared on public classes or members.","pos":[0,76]},{"content":"Other declarations are supported, but exporting or importing a private, protected, or internal member breaks the isolation model for the part and is therefore not recommended.","pos":[77,252]}]}]},{"content":"The contract type must match exactly for the export and import to be considered a match.","pos":[3745,3833]},{"content":"Consider the following export.","pos":[3834,3864]},{"content":"In this export, the contract type is <ph id=\"ph1\">`MyLogger`</ph> instead of <ph id=\"ph2\">`IMyAddin`</ph>.","pos":[4081,4151],"source":"In this export, the contract type is `MyLogger` instead of `IMyAddin`."},{"content":"Even though <ph id=\"ph1\">`MyLogger`</ph> implements <ph id=\"ph2\">`IMyAddin`</ph>, and therefore could be cast to an <ph id=\"ph3\">`IMyAddin`</ph> object, this export will not match the previous import because the contract types are not the same.","pos":[4152,4342],"source":" Even though `MyLogger` implements `IMyAddin`, and therefore could be cast to an `IMyAddin` object, this export will not match the previous import because the contract types are not the same."},{"content":"In general, it is not necessary to specify the contract name, and most contracts should be defined in terms of the contract type and metadata.","pos":[4344,4486]},{"content":"However, under certain circumstances, it is important to specify the contract name directly.","pos":[4487,4579]},{"content":"The most common case is when a class exports several values that share a common type, such as primitives.","pos":[4580,4685]},{"content":"The contract name can be specified as the first parameter of the <ph id=\"ph1\">`Import`</ph> or <ph id=\"ph2\">`Export`</ph> attribute.","pos":[4686,4782],"source":" The contract name can be specified as the first parameter of the `Import` or `Export` attribute."},{"content":"The following code shows an import and an export with a specified contract name of <ph id=\"ph1\">`MajorRevision`</ph>.","pos":[4783,4882],"source":" The following code shows an import and an export with a specified contract name of `MajorRevision`."},{"content":"If the contract type is not specified, it will still be inferred from the type of the import or export.","pos":[5558,5661]},{"content":"However, even if the contract name is specified explicitly, the contract type must also match exactly for the import and export to be considered a match.","pos":[5662,5815]},{"content":"For example, if the <ph id=\"ph1\">`MajorRevision`</ph> field was a string, the inferred contract types would not match and the export would not match the import, despite having the same contract name.","pos":[5816,5997],"source":" For example, if the `MajorRevision` field was a string, the inferred contract types would not match and the export would not match the import, despite having the same contract name."},{"pos":[6003,6035],"content":"Importing and Exporting a Method","linkify":"Importing and Exporting a Method","nodes":[{"content":"Importing and Exporting a Method","pos":[0,32]}]},{"content":"The <ph id=\"ph1\">`Export`</ph> attribute can also decorate a method, in the same way as a class, property, or function.","pos":[6037,6138],"source":"The `Export` attribute can also decorate a method, in the same way as a class, property, or function."},{"content":"Method exports must specify a contract type or contract name, as the type cannot be inferred.","pos":[6139,6232]},{"content":"The specified type can be either a custom delegate or a generic type, such as <ph id=\"ph1\">`Func`</ph>.","pos":[6233,6318],"source":" The specified type can be either a custom delegate or a generic type, such as `Func`."},{"content":"The following class exports a method named <ph id=\"ph1\">`DoSomething`</ph>.","pos":[6319,6376],"source":" The following class exports a method named `DoSomething`."},{"content":"In this class, the <ph id=\"ph1\">`DoSomething`</ph> method takes a single <ph id=\"ph2\">`int`</ph> parameter and returns a <ph id=\"ph3\">`string`</ph>.","pos":[6815,6909],"source":"In this class, the `DoSomething` method takes a single `int` parameter and returns a `string`."},{"content":"To match this export, the importing part must declare an appropriate member.","pos":[6910,6986]},{"content":"The following class imports the <ph id=\"ph1\">`DoSomething`</ph> method.","pos":[6987,7040],"source":" The following class imports the `DoSomething` method."},{"pos":[7330,7423],"content":"For more information about how to use of the <ph id=\"ph1\">`Func&lt;T, T&gt;`</ph> object, see <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph>.","source":"For more information about how to use of the `Func<T, T>` object, see <xref:System.Func%602>."},{"pos":[7461,7477],"content":"Types of Imports","linkify":"Types of Imports","nodes":[{"content":"Types of Imports","pos":[0,16]}]},{"content":"MEF support several import types, including dynamic, lazy, prerequisite, and optional.","pos":[7479,7565]},{"pos":[7571,7586],"content":"Dynamic Imports","linkify":"Dynamic Imports","nodes":[{"content":"Dynamic Imports","pos":[0,15]}]},{"content":"In some cases, the importing class may want to match exports of any type that have a particular contract name.","pos":[7588,7698]},{"content":"In this scenario, the class can declare a <bpt id=\"p1\">*</bpt>dynamic import<ept id=\"p1\">*</ept>.","pos":[7699,7758],"source":" In this scenario, the class can declare a *dynamic import*."},{"content":"The following import matches any export with contract name \"TheString\".","pos":[7759,7830]},{"content":"When the contract type is inferred from the <ph id=\"ph1\">`dynamic`</ph> keyword, it will match any contract type.","pos":[8038,8133],"source":"When the contract type is inferred from the `dynamic` keyword, it will match any contract type."},{"content":"In this case, an import should <bpt id=\"p1\">**</bpt>always<ept id=\"p1\">**</ept> specify a contract name to match on.","pos":[8134,8212],"source":" In this case, an import should **always** specify a contract name to match on."},{"content":"(If no contract name is specified, the import will be considered to match no exports.) Both of the following exports would match the previous import.","pos":[8213,8362]},{"content":"Obviously, the importing class must be prepared to deal with an object of arbitrary type.","pos":[8672,8761]},{"pos":[8767,8779],"content":"Lazy Imports","linkify":"Lazy Imports","nodes":[{"content":"Lazy Imports","pos":[0,12]}]},{"content":"In some cases, the importing class may require an indirect reference to the imported object, so that the object is not instantiated immediately.","pos":[8781,8925]},{"content":"In this scenario, the class can declare a <bpt id=\"p1\">*</bpt>lazy import<ept id=\"p1\">*</ept> by using a contract type of <ph id=\"ph1\">`Lazy&lt;T&gt;`</ph>.","pos":[8926,9020],"source":" In this scenario, the class can declare a *lazy import* by using a contract type of `Lazy<T>`."},{"content":"The following importing property declares a lazy import.","pos":[9021,9077]},{"content":"From the point of view of the composition engine, a contract type of <ph id=\"ph1\">`Lazy&lt;T&gt;`</ph> is considered identical to contract type of <ph id=\"ph2\">`T`</ph>.","pos":[9289,9416],"source":"From the point of view of the composition engine, a contract type of `Lazy<T>` is considered identical to contract type of `T`."},{"content":"Therefore, the previous import would match the following export.","pos":[9417,9481]},{"pos":[9658,9820],"content":"The contract name and contract type can be specified in the <ph id=\"ph1\">`Import`</ph> attribute for a lazy import, as described earlier in the \"Basic Imports and Exports\" section.","source":"The contract name and contract type can be specified in the `Import` attribute for a lazy import, as described earlier in the \"Basic Imports and Exports\" section."},{"pos":[9826,9846],"content":"Prerequisite Imports","linkify":"Prerequisite Imports","nodes":[{"content":"Prerequisite Imports","pos":[0,20]}]},{"content":"Exported MEF parts are typically created by the composition engine, in response to a direct request or the need to fill a matched import.","pos":[9848,9985]},{"content":"By default, when creating a part, the composition engine uses the parameter-less constructor.","pos":[9986,10079]},{"content":"To make the engine use a different constructor, you can mark it with the <ph id=\"ph1\">`ImportingConstructor`</ph> attribute.","pos":[10080,10186],"source":" To make the engine use a different constructor, you can mark it with the `ImportingConstructor` attribute."},{"content":"Each part may have only one constructor for use by the composition engine.","pos":[10188,10262]},{"content":"Providing no default constructor and no <ph id=\"ph1\">`ImportingConstructor`</ph> attribute, or providing more than one <ph id=\"ph2\">`ImportingConstructor`</ph> attribute, will produce an error.","pos":[10263,10420],"source":" Providing no default constructor and no `ImportingConstructor` attribute, or providing more than one `ImportingConstructor` attribute, will produce an error."},{"content":"To fill the parameters of a constructor marked with the <ph id=\"ph1\">`ImportingConstructor`</ph> attribute, all of those parameters are automatically declared as imports.","pos":[10422,10574],"source":"To fill the parameters of a constructor marked with the `ImportingConstructor` attribute, all of those parameters are automatically declared as imports."},{"content":"This is a convenient way to declare imports that are used during part initialization.","pos":[10575,10660]},{"content":"The following class uses <ph id=\"ph1\">`ImportingConstructor`</ph> to declare an import.","pos":[10661,10730],"source":" The following class uses `ImportingConstructor` to declare an import."},{"content":"By default, the <ph id=\"ph1\">`ImportingConstructor`</ph> attribute uses inferred contract types and contract names for all of the parameter imports.","pos":[11608,11738],"source":"By default, the `ImportingConstructor` attribute uses inferred contract types and contract names for all of the parameter imports."},{"content":"It is possible to override this by decorating the parameters with <ph id=\"ph1\">`Import`</ph> attributes, which can then define the contract type and contract name explicitly.","pos":[11739,11895],"source":" It is possible to override this by decorating the parameters with `Import` attributes, which can then define the contract type and contract name explicitly."},{"content":"The following code demonstrates a constructor that uses this syntax to import a derived class instead of a parent class.","pos":[11896,12016]},{"content":"In particular, you should be careful with collection parameters.","pos":[12265,12329]},{"content":"For example, if you specify <ph id=\"ph1\">`ImportingConstructor`</ph> on a constructor with a parameter of type <ph id=\"ph2\">`IEnumerable&lt;int&gt;`</ph>, the import will match a single export of type <ph id=\"ph3\">`IEnumerable&lt;int&gt;`</ph>, instead of a set of exports of type <ph id=\"ph4\">`int`</ph>.","pos":[12330,12551],"source":" For example, if you specify `ImportingConstructor` on a constructor with a parameter of type `IEnumerable<int>`, the import will match a single export of type `IEnumerable<int>`, instead of a set of exports of type `int`."},{"content":"To match a set of exports of type <ph id=\"ph1\">`int`</ph>, you have to decorate the parameter with the <ph id=\"ph2\">`ImportMany`</ph> attribute.","pos":[12552,12660],"source":" To match a set of exports of type `int`, you have to decorate the parameter with the `ImportMany` attribute."},{"content":"Parameters declared as imports by the <ph id=\"ph1\">`ImportingConstructor`</ph> attribute are also marked as <bpt id=\"p1\">*</bpt>prerequisite imports<ept id=\"p1\">*</ept>.","pos":[12662,12775],"source":"Parameters declared as imports by the `ImportingConstructor` attribute are also marked as *prerequisite imports*."},{"content":"MEF normally allows exports and imports to form a <bpt id=\"p1\">*</bpt>cycle<ept id=\"p1\">*</ept>.","pos":[12776,12834],"source":" MEF normally allows exports and imports to form a *cycle*."},{"content":"For example, a cycle is where object A imports object B, which in turn imports object A. Under ordinary circumstances, a cycle is not a problem, and the composition container constructs both objects normally.","pos":[12835,13043]},{"content":"When an imported value is required by the constructor of a part, that object cannot participate in a cycle.","pos":[13045,13152]},{"content":"If object A requires that object B be constructed before it can be constructed itself, and object B imports object A, then the cycle will be unable to resolve and a composition error will occur.","pos":[13153,13347]},{"content":"Imports declared on constructor parameters are therefore prerequisite imports, which must all be filled before any of the exports from the object that requires them can be used.","pos":[13348,13525]},{"pos":[13531,13547],"content":"Optional Imports","linkify":"Optional Imports","nodes":[{"content":"Optional Imports","pos":[0,16]}]},{"content":"The <ph id=\"ph1\">`Import`</ph> attribute specifies a requirement for the part to function.","pos":[13549,13621],"source":"The `Import` attribute specifies a requirement for the part to function."},{"content":"If an import cannot be fulfilled, the composition of that part will fail and the part will not be available.","pos":[13622,13730]},{"content":"You can specify that an import is <bpt id=\"p1\">*</bpt>optional<ept id=\"p1\">*</ept> by using the <ph id=\"ph1\">`AllowDefault`</ph> property.","pos":[13732,13814],"source":"You can specify that an import is *optional* by using the `AllowDefault` property."},{"content":"In this case, the composition will succeed even if the import does not match any available exports, and the importing property will be set to the default for its property type (<ph id=\"ph1\">`null`</ph> for object properties, <ph id=\"ph2\">`false`</ph> for Booleans, or zero for numeric properties.) The following class uses an optional import.","pos":[13815,14121],"source":" In this case, the composition will succeed even if the import does not match any available exports, and the importing property will be set to the default for its property type (`null` for object properties, `false` for Booleans, or zero for numeric properties.) The following class uses an optional import."},{"pos":[14518,14544],"content":"Importing Multiple Objects","linkify":"Importing Multiple Objects","nodes":[{"content":"Importing Multiple Objects","pos":[0,26]}]},{"content":"The <ph id=\"ph1\">`Import`</ph> attribute will only be successfully composed when it matches one and only one export.","pos":[14546,14644],"source":"The `Import` attribute will only be successfully composed when it matches one and only one export."},{"content":"Other cases will produce a composition error.","pos":[14645,14690]},{"content":"To import more than one export that matches the same contract, use the <ph id=\"ph1\">`ImportMany`</ph> attribute.","pos":[14691,14785],"source":" To import more than one export that matches the same contract, use the `ImportMany` attribute."},{"content":"Imports marked with this attribute are always optional.","pos":[14786,14841]},{"content":"For example, composition will not fail if no matching exports are present.","pos":[14842,14916]},{"content":"The following class imports any number of exports of type <ph id=\"ph1\">`IMyAddin`</ph>.","pos":[14917,14986],"source":" The following class imports any number of exports of type `IMyAddin`."},{"content":"The imported array can be accessed by using ordinary <ph id=\"ph1\">`IEnumerable&lt;T&gt;`</ph> syntax and methods.","pos":[15220,15309],"source":"The imported array can be accessed by using ordinary `IEnumerable<T>` syntax and methods."},{"content":"It is also possible to use an ordinary array (<ph id=\"ph1\">`IMyAddin[]`</ph>) instead.","pos":[15310,15378],"source":" It is also possible to use an ordinary array (`IMyAddin[]`) instead."},{"content":"This pattern can be very important when you use it in combination with the <ph id=\"ph1\">`Lazy&lt;T&gt;`</ph> syntax.","pos":[15380,15472],"source":"This pattern can be very important when you use it in combination with the `Lazy<T>` syntax."},{"content":"For example, by using <ph id=\"ph1\">`ImportMany`</ph>, <ph id=\"ph2\">`IEnumerable&lt;T&gt;`</ph>, and <ph id=\"ph3\">`Lazy&lt;T&gt;`</ph>, you can import indirect references to any number of objects and only instantiate the ones that become necessary.","pos":[15473,15654],"source":" For example, by using `ImportMany`, `IEnumerable<T>`, and `Lazy<T>`, you can import indirect references to any number of objects and only instantiate the ones that become necessary."},{"content":"The following class shows this pattern.","pos":[15655,15694]},{"pos":[15981,15999],"content":"Avoiding Discovery","linkify":"Avoiding Discovery","nodes":[{"content":"Avoiding Discovery","pos":[0,18]}]},{"content":"In some cases, you may want to prevent a part from being discovered as part of a catalog.","pos":[16001,16090]},{"content":"For example, the part may be a base class intended to be inherited from, but not used.","pos":[16091,16177]},{"content":"There are two ways to accomplish this.","pos":[16178,16216]},{"content":"First, you can use the <ph id=\"ph1\">`abstract`</ph> keyword on the part class.","pos":[16217,16277],"source":" First, you can use the `abstract` keyword on the part class."},{"content":"Abstract classes never provide exports, although they can provide inherited exports to classes that derive from them.","pos":[16278,16395]},{"content":"If the class cannot be made abstract, you can decorate it with the <ph id=\"ph1\">`PartNotDiscoverable`</ph> attribute.","pos":[16397,16496],"source":"If the class cannot be made abstract, you can decorate it with the `PartNotDiscoverable` attribute."},{"content":"A part decorated with this attribute will not be included in any catalogs.","pos":[16497,16571]},{"content":"The following example demonstrates these patterns.","pos":[16572,16622]},{"content":"<ph id=\"ph1\">`DataOne`</ph> will be discovered by the catalog.","pos":[16623,16667],"source":"`DataOne` will be discovered by the catalog."},{"content":"Since <ph id=\"ph1\">`DataTwo`</ph> is abstract, it will not be discovered.","pos":[16668,16723],"source":" Since `DataTwo` is abstract, it will not be discovered."},{"content":"Since <ph id=\"ph1\">`DataThree`</ph> used the <ph id=\"ph2\">`PartNotDiscoverable`</ph> attribute, it will not be discovered.","pos":[16724,16810],"source":" Since `DataThree` used the `PartNotDiscoverable` attribute, it will not be discovered."},{"pos":[17570,17597],"content":"Metadata and Metadata Views","linkify":"Metadata and Metadata Views","nodes":[{"content":"Metadata and Metadata Views","pos":[0,27]}]},{"content":"Exports can provide additional information about themselves known as <bpt id=\"p1\">*</bpt>metadata<ept id=\"p1\">*</ept>.","pos":[17599,17679],"source":"Exports can provide additional information about themselves known as *metadata*."},{"content":"Metadata can be used to convey properties of the exported object to the importing part.","pos":[17680,17767]},{"content":"The importing part can use this data to decide which exports to use, or to gather information about an export without having to construct it.","pos":[17768,17909]},{"content":"For this reason, an import must be lazy to use metadata.","pos":[17910,17966]},{"content":"To use metadata, you typically declare an interface known as a <bpt id=\"p1\">*</bpt>metadata view<ept id=\"p1\">*</ept>, which declares what metadata will be available.","pos":[17968,18095],"source":"To use metadata, you typically declare an interface known as a *metadata view*, which declares what metadata will be available."},{"content":"The metadata view interface must have only properties, and those properties must have <ph id=\"ph1\">`get`</ph> accessors.","pos":[18096,18198],"source":" The metadata view interface must have only properties, and those properties must have `get` accessors."},{"content":"The following interface is an example metadata view.","pos":[18199,18251]},{"pos":[18539,18709],"content":"It is also possible to use a generic collection, <ph id=\"ph1\">`IDictionary&lt;string, object&gt;`</ph>, as a metadata view, but this forfeits the benefits of type checking and should be avoided.","source":"It is also possible to use a generic collection, `IDictionary<string, object>`, as a metadata view, but this forfeits the benefits of type checking and should be avoided."},{"content":"Ordinarily, all of the properties named in the metadata view are required, and any exports that do not provide them will not be considered a match.","pos":[18711,18858]},{"content":"The <ph id=\"ph1\">`DefaultValue`</ph> attribute specifies that a property is optional.","pos":[18859,18926],"source":" The `DefaultValue` attribute specifies that a property is optional."},{"content":"If the property is not included, it will be assigned the default value specified as a parameter of <ph id=\"ph1\">`DefaultValue`</ph>.","pos":[18927,19041],"source":" If the property is not included, it will be assigned the default value specified as a parameter of `DefaultValue`."},{"content":"The following are two different classes decorated with metadata.","pos":[19042,19106]},{"content":"Both of these classes would match the previous metadata view.","pos":[19107,19168]},{"content":"Metadata is expressed after the <ph id=\"ph1\">`Export`</ph> attribute by using the <ph id=\"ph2\">`ExportMetadata`</ph> attribute.","pos":[19816,19907],"source":"Metadata is expressed after the `Export` attribute by using the `ExportMetadata` attribute."},{"content":"Each piece of metadata is composed of a name/value pair.","pos":[19908,19964]},{"content":"The name portion of the metadata must match the name of the appropriate property in the metadata view, and the value will be assigned to that property.","pos":[19965,20116]},{"content":"It is the importer that specifies what metadata view, if any, will be in use.","pos":[20118,20195]},{"content":"An import with metadata is declared as a lazy import, with the metadata interface as the second type parameter to <ph id=\"ph1\">`Lazy&lt;T,T&gt;`</ph>.","pos":[20196,20322],"source":" An import with metadata is declared as a lazy import, with the metadata interface as the second type parameter to `Lazy<T,T>`."},{"content":"The following class imports the previous part with metadata.","pos":[20323,20383]},{"content":"In many cases, you will want to combine metadata with the <ph id=\"ph1\">`ImportMany`</ph> attribute, in order to parse through the available imports and choose and instantiate only one, or filter a collection to match a certain condition.","pos":[20606,20825],"source":"In many cases, you will want to combine metadata with the `ImportMany` attribute, in order to parse through the available imports and choose and instantiate only one, or filter a collection to match a certain condition."},{"content":"The following class instantiates only <ph id=\"ph1\">`IPlugin`</ph> objects that have the <ph id=\"ph2\">`Name`</ph> value \"Logger\".","pos":[20826,20918],"source":" The following class instantiates only `IPlugin` objects that have the `Name` value \"Logger\"."},{"pos":[21853,21882],"content":"Import and Export Inheritance","linkify":"Import and Export Inheritance","nodes":[{"content":"Import and Export Inheritance","pos":[0,29]}]},{"content":"If a class inherits from a part, that class may also become a part.","pos":[21884,21951]},{"content":"Imports are always inherited by subclasses.","pos":[21952,21995]},{"content":"Therefore, a subclass of a part will always be a part, with the same imports as its parent class.","pos":[21996,22093]},{"content":"Exports declared by using the <ph id=\"ph1\">`Export`</ph> attribute are not inherited by subclasses.","pos":[22095,22176],"source":"Exports declared by using the `Export` attribute are not inherited by subclasses."},{"content":"However, a part can export itself by using the <ph id=\"ph1\">`InheritedExport`</ph> attribute.","pos":[22177,22252],"source":" However, a part can export itself by using the `InheritedExport` attribute."},{"content":"Subclasses of the part will inherit and provide the same export, including contract name and contract type.","pos":[22253,22360]},{"content":"Unlike an <ph id=\"ph1\">`Export`</ph> attribute, <ph id=\"ph2\">`InheritedExport`</ph> can be applied only at the class level, and not at the member level.","pos":[22361,22477],"source":" Unlike an `Export` attribute, `InheritedExport` can be applied only at the class level, and not at the member level."},{"content":"Therefore, member-level exports can never be inherited.","pos":[22478,22533]},{"content":"The following four classes demonstrate the principles of import and export inheritance.","pos":[22535,22622]},{"content":"<ph id=\"ph1\">`NumTwo`</ph> inherits from <ph id=\"ph2\">`NumOne`</ph>, so <ph id=\"ph3\">`NumTwo`</ph> will import <ph id=\"ph4\">`IMyData`</ph>.","pos":[22623,22690],"source":"`NumTwo` inherits from `NumOne`, so `NumTwo` will import `IMyData`."},{"content":"Ordinary exports are not inherited, so <ph id=\"ph1\">`NumTwo`</ph> will not export anything.","pos":[22691,22764],"source":" Ordinary exports are not inherited, so `NumTwo` will not export anything."},{"content":"<ph id=\"ph1\">`NumFour`</ph> inherits from <ph id=\"ph2\">`NumThree`</ph>.","pos":[22765,22800],"source":"`NumFour` inherits from `NumThree`."},{"content":"Because <ph id=\"ph1\">`NumThree`</ph> used <ph id=\"ph2\">`InheritedExport`</ph>, <ph id=\"ph3\">`NumFour`</ph> has one export with contract type <ph id=\"ph4\">`NumThree`</ph>.","pos":[22801,22899],"source":" Because `NumThree` used `InheritedExport`, `NumFour` has one export with contract type `NumThree`."},{"content":"Member-level exports are never inherited, so <ph id=\"ph1\">`IMyData`</ph> is not exported.","pos":[22900,22971],"source":" Member-level exports are never inherited, so `IMyData` is not exported."},{"content":"If there is metadata associated with an <ph id=\"ph1\">`InheritedExport`</ph> attribute, that metadata will also be inherited.","pos":[24608,24714],"source":"If there is metadata associated with an `InheritedExport` attribute, that metadata will also be inherited."},{"content":"(For more information, see the earlier \"Metadata and Metadata Views\" section.) Inherited metadata cannot be modified by the subclass.","pos":[24715,24848]},{"content":"However, by re-declaring the <ph id=\"ph1\">`InheritedExport`</ph> attribute with the same contract name and contract type, but with new metadata, the subclass can replace the inherited metadata with new metadata.","pos":[24849,25042],"source":" However, by re-declaring the `InheritedExport` attribute with the same contract name and contract type, but with new metadata, the subclass can replace the inherited metadata with new metadata."},{"content":"The following class demonstrates this principle.","pos":[25043,25091]},{"content":"The <ph id=\"ph1\">`MegaLogger`</ph> part inherits from <ph id=\"ph2\">`Logger`</ph> and includes the <ph id=\"ph3\">`InheritedExport`</ph> attribute.","pos":[25092,25182],"source":" The `MegaLogger` part inherits from `Logger` and includes the `InheritedExport` attribute."},{"content":"Since <ph id=\"ph1\">`MegaLogger`</ph> re-declares new metadata named Status, it does not inherit the Name and Version metadata from <ph id=\"ph2\">`Logger`</ph>.","pos":[25183,25305],"source":" Since `MegaLogger` re-declares new metadata named Status, it does not inherit the Name and Version metadata from `Logger`."},{"content":"When re-declaring the <ph id=\"ph1\">`InheritedExport`</ph> attribute to override metadata, make sure that the contract types are the same.","pos":[26645,26764],"source":"When re-declaring the `InheritedExport` attribute to override metadata, make sure that the contract types are the same."},{"content":"(In the previous example, <ph id=\"ph1\">`IPlugin`</ph> is the contract type.) If they differ, instead of overriding, the second attribute will create a second, independent export from the part.","pos":[26765,26939],"source":" (In the previous example, `IPlugin` is the contract type.) If they differ, instead of overriding, the second attribute will create a second, independent export from the part."},{"content":"Generally, this means that you will have to explicitly specify the contract type when you override an <ph id=\"ph1\">`InheritedExport`</ph> attribute, as shown in the previous example.","pos":[26940,27104],"source":" Generally, this means that you will have to explicitly specify the contract type when you override an `InheritedExport` attribute, as shown in the previous example."},{"content":"Since interfaces cannot be instantiated directly, they generally cannot be decorated with <ph id=\"ph1\">`Export`</ph> or <ph id=\"ph2\">`Import`</ph> attributes.","pos":[27106,27228],"source":"Since interfaces cannot be instantiated directly, they generally cannot be decorated with `Export` or `Import` attributes."},{"content":"However, an interface can be decorated with an <ph id=\"ph1\">`InheritedExport`</ph> attribute at the interface level, and that export along with any associated metadata will be inherited by any implementing classes.","pos":[27229,27425],"source":" However, an interface can be decorated with an `InheritedExport` attribute at the interface level, and that export along with any associated metadata will be inherited by any implementing classes."},{"content":"The interface itself will not be available as a part, however.","pos":[27426,27488]},{"pos":[27534,27558],"content":"Custom Export Attributes","linkify":"Custom Export Attributes","nodes":[{"content":"Custom Export Attributes","pos":[0,24]}]},{"content":"The basic export attributes, <ph id=\"ph1\">`Export`</ph> and <ph id=\"ph2\">`InheritedExport`</ph>, can be extended to include metadata as attribute properties.","pos":[27560,27681],"source":"The basic export attributes, `Export` and `InheritedExport`, can be extended to include metadata as attribute properties."},{"content":"This technique is useful for applying similar metadata to many parts, or creating an inheritance tree of metadata attributes.","pos":[27682,27807]},{"content":"A custom attribute can specify the contract type, the contract name, or any other metadata.","pos":[27809,27900]},{"content":"In order to define a custom attribute, a class inheriting from <ph id=\"ph1\">`ExportAttribute`</ph> (or <ph id=\"ph2\">`InheritedExportAttribute`</ph>) must be decorated with the <ph id=\"ph3\">`MetadataAttribute`</ph> attribute.","pos":[27901,28071],"source":" In order to define a custom attribute, a class inheriting from `ExportAttribute` (or `InheritedExportAttribute`) must be decorated with the `MetadataAttribute` attribute."},{"content":"The following class defines a custom attribute.","pos":[28072,28119]},{"content":"This class defines a custom attribute named <ph id=\"ph1\">`MyAttribute`</ph> with contract type <ph id=\"ph2\">`IMyData`</ph> and some metadata named <ph id=\"ph3\">`MyMetadata`</ph>.","pos":[28771,28895],"source":"This class defines a custom attribute named `MyAttribute` with contract type `IMyData` and some metadata named `MyMetadata`."},{"content":"All properties in a class marked with the <ph id=\"ph1\">`MetadataAttribute`</ph> attribute are considered to be metadata defined in the custom attribute.","pos":[28896,29030],"source":" All properties in a class marked with the `MetadataAttribute` attribute are considered to be metadata defined in the custom attribute."},{"content":"The following two declarations are equivalent.","pos":[29031,29077]},{"content":"In the first declaration, the contract type and metadata are explicitly defined.","pos":[29467,29547]},{"content":"In the second declaration, the contract type and metadata are implicit in the customized attribute.","pos":[29548,29647]},{"content":"Particularly in cases where a large amount of identical metadata must be applied to many parts (for example, author or copyright information), using a custom attribute can save a lot of time and duplication.","pos":[29648,29855]},{"content":"Further, inheritance trees of custom attributes can be created to allow for variations.","pos":[29856,29943]},{"content":"To create optional metadata in a custom attribute, you can use the <ph id=\"ph1\">`DefaultValue`</ph> attribute.","pos":[29945,30037],"source":"To create optional metadata in a custom attribute, you can use the `DefaultValue` attribute."},{"content":"When this attribute is applied to a property in a custom attribute class, it specifies that the decorated property is optional and does not have to be supplied by an exporter.","pos":[30038,30213]},{"content":"If a value for the property is not supplied, it will be assigned the default value for its property type (usually <ph id=\"ph1\">`null`</ph>, <ph id=\"ph2\">`false`</ph>, or 0.)","pos":[30214,30351],"source":" If a value for the property is not supplied, it will be assigned the default value for its property type (usually `null`, `false`, or 0.)"},{"pos":[30390,30407],"content":"Creation Policies","linkify":"Creation Policies","nodes":[{"content":"Creation Policies","pos":[0,17]}]},{"content":"When a part specifies an import and composition is performed, the composition container attempts to find a matching export.","pos":[30409,30532]},{"content":"If it matches the import with an export successfully, the importing member is set to an instance of the exported object.","pos":[30533,30653]},{"content":"Where this instance comes from is controlled by the exporting part's <bpt id=\"p1\">*</bpt>creation policy<ept id=\"p1\">*</ept>.","pos":[30654,30741],"source":" Where this instance comes from is controlled by the exporting part's *creation policy*."},{"content":"The two possible creation policies are <bpt id=\"p1\">*</bpt>shared<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>non-shared<ept id=\"p2\">*</ept>.","pos":[30743,30808],"source":"The two possible creation policies are *shared* and *non-shared*."},{"content":"A part with a creation policy of shared will be shared between every import in the container for a part with that contract.","pos":[30809,30932]},{"content":"When the composition engine finds a match and has to set an importing property, it will instantiate a new copy of the part only if one does not already exist; otherwise, it will supply the existing copy.","pos":[30933,31136]},{"content":"This means that many objects may have references to the same part.","pos":[31137,31203]},{"content":"Such parts should not rely on internal state that might be changed from many places.","pos":[31204,31288]},{"content":"This policy is appropriate for static parts, parts that provide services, and parts that consume a lot of memory or other resources.","pos":[31289,31421]},{"content":"A part with the creation policy of non-shared will be created every time a matching import for one of its exports is found.","pos":[31423,31546]},{"content":"A new copy will therefore be instantiated for every import in the container that matches one of the part's exported contracts.","pos":[31547,31673]},{"content":"The internal state of these copies will not be shared.","pos":[31674,31728]},{"content":"This policy is appropriate for parts where each import requires its own internal state.","pos":[31729,31816]},{"content":"Both the import and the export can specify the creation policy of a part, from among the values <ph id=\"ph1\">`Shared`</ph>, <ph id=\"ph2\">`NonShared`</ph>, or <ph id=\"ph3\">`Any`</ph>.","pos":[31818,31946],"source":"Both the import and the export can specify the creation policy of a part, from among the values `Shared`, `NonShared`, or `Any`."},{"content":"The default is <ph id=\"ph1\">`Any`</ph> for both imports and exports.","pos":[31947,31997],"source":" The default is `Any` for both imports and exports."},{"content":"An export that specifies <ph id=\"ph1\">`Shared`</ph> or <ph id=\"ph2\">`NonShared`</ph> will only match an import that specifies the same, or that specifies <ph id=\"ph3\">`Any`</ph>.","pos":[31998,32122],"source":" An export that specifies `Shared` or `NonShared` will only match an import that specifies the same, or that specifies `Any`."},{"content":"Similarly, an import that specifies <ph id=\"ph1\">`Shared`</ph> or <ph id=\"ph2\">`NonShared`</ph> will only match an export that specifies the same, or that specifies <ph id=\"ph3\">`Any`</ph>.","pos":[32123,32258],"source":" Similarly, an import that specifies `Shared` or `NonShared` will only match an export that specifies the same, or that specifies `Any`."},{"content":"Imports and exports with incompatible creation policies are not considered a match, in the same way as an import and export whose contract name or contract type are not a match.","pos":[32259,32436]},{"content":"If both import and export specify <ph id=\"ph1\">`Any`</ph>, or do not specify a creation policy and default to <ph id=\"ph2\">`Any`</ph>, the creation policy will default to shared.","pos":[32437,32579],"source":" If both import and export specify `Any`, or do not specify a creation policy and default to `Any`, the creation policy will default to shared."},{"content":"The following example shows both imports and exports specifying creation policies.","pos":[32581,32663]},{"content":"<ph id=\"ph1\">`PartOne`</ph> does not specify a creation policy, so the default is <ph id=\"ph2\">`Any`</ph>.","pos":[32664,32734],"source":"`PartOne` does not specify a creation policy, so the default is `Any`."},{"content":"<ph id=\"ph1\">`PartTwo`</ph> does not specify a creation policy, so the default is <ph id=\"ph2\">`Any`</ph>.","pos":[32735,32805],"source":"`PartTwo` does not specify a creation policy, so the default is `Any`."},{"content":"Since both import and export default to <ph id=\"ph1\">`Any`</ph>, <ph id=\"ph2\">`PartOne`</ph> will be shared.","pos":[32806,32878],"source":" Since both import and export default to `Any`, `PartOne` will be shared."},{"content":"<ph id=\"ph1\">`PartThree`</ph> specifies a <ph id=\"ph2\">`Shared`</ph> creation policy, so <ph id=\"ph3\">`PartTwo`</ph> and <ph id=\"ph4\">`PartThree`</ph> will share the same copy of <ph id=\"ph5\">`PartOne`</ph>.","pos":[32879,32996],"source":"`PartThree` specifies a `Shared` creation policy, so `PartTwo` and `PartThree` will share the same copy of `PartOne`."},{"content":"<ph id=\"ph1\">`PartFour`</ph> specifies a <ph id=\"ph2\">`NonShared`</ph> creation policy, so <ph id=\"ph3\">`PartFour`</ph> will be non-shared in <ph id=\"ph4\">`PartFive`</ph>.","pos":[32997,33096],"source":"`PartFour` specifies a `NonShared` creation policy, so `PartFour` will be non-shared in `PartFive`."},{"content":"<ph id=\"ph1\">`PartSix`</ph> specifies a <ph id=\"ph2\">`NonShared`</ph> creation policy.","pos":[33097,33147],"source":"`PartSix` specifies a `NonShared` creation policy."},{"content":"<ph id=\"ph1\">`PartFive`</ph> and <ph id=\"ph2\">`PartSix`</ph> will each receive separate copies of <ph id=\"ph3\">`PartFour`</ph>.","pos":[33148,33221],"source":"`PartFive` and `PartSix` will each receive separate copies of `PartFour`."},{"content":"<ph id=\"ph1\">`PartSeven`</ph> specifies a <ph id=\"ph2\">`Shared`</ph> creation policy.","pos":[33222,33271],"source":"`PartSeven` specifies a `Shared` creation policy."},{"content":"Because there is no exported <ph id=\"ph1\">`PartFour`</ph> with a creation policy of <ph id=\"ph2\">`Shared`</ph>, the <ph id=\"ph3\">`PartSeven`</ph> import does not match anything and will not be filled.","pos":[33272,33418],"source":" Because there is no exported `PartFour` with a creation policy of `Shared`, the `PartSeven` import does not match anything and will not be filled."},{"pos":[36752,36776],"content":"Life Cycle and Disposing","linkify":"Life Cycle and Disposing","nodes":[{"content":"Life Cycle and Disposing","pos":[0,24]}]},{"content":"Because parts are hosted in the composition container, their life cycle can be more complex than ordinary objects.","pos":[36778,36892]},{"content":"Parts can implement two important life cycle-related interfaces: <ph id=\"ph1\">`IDisposable`</ph> and <ph id=\"ph2\">`IPartImportsSatisfiedNotification`</ph>.","pos":[36893,37012],"source":" Parts can implement two important life cycle-related interfaces: `IDisposable` and `IPartImportsSatisfiedNotification`."},{"content":"Parts that require work to be performed at shut down or that need to release resources should implement <ph id=\"ph1\">`IDisposable`</ph>, as usual for .NET Framework objects.","pos":[37014,37169],"source":"Parts that require work to be performed at shut down or that need to release resources should implement `IDisposable`, as usual for .NET Framework objects."},{"content":"However, since the container creates and maintains references to parts, only the container that owns a part should call the <ph id=\"ph1\">`Dispose`</ph> method on it.","pos":[37170,37317],"source":" However, since the container creates and maintains references to parts, only the container that owns a part should call the `Dispose` method on it."},{"content":"The container itself implements <ph id=\"ph1\">`IDisposable`</ph>, and as portion of its cleanup in <ph id=\"ph2\">`Dispose`</ph> it will call <ph id=\"ph3\">`Dispose`</ph> on all the parts that it owns.","pos":[37318,37461],"source":" The container itself implements `IDisposable`, and as portion of its cleanup in `Dispose` it will call `Dispose` on all the parts that it owns."},{"content":"For this reason, you should always dispose the composition container when it and any parts it owns are no longer needed.","pos":[37462,37582]},{"content":"For long-lived composition containers, memory consumption by parts with a creation policy of non-shared can become a problem.","pos":[37584,37709]},{"content":"These non-shared parts can be created multiple times and will not be disposed until the container itself is disposed.","pos":[37710,37827]},{"content":"To deal with this, the container provides the <ph id=\"ph1\">`ReleaseExport`</ph> method.","pos":[37828,37897],"source":" To deal with this, the container provides the `ReleaseExport` method."},{"content":"Calling this method on a non-shared export removes that export from the composition container and disposes it.","pos":[37898,38008]},{"content":"Parts that are used only by the removed export, and so on down the tree, are also removed and disposed.","pos":[38009,38112]},{"content":"In this way, resources can be reclaimed without disposing the composition container itself.","pos":[38113,38204]},{"content":"<ph id=\"ph1\">`IPartImportsSatisfiedNotification`</ph> contains one method named <ph id=\"ph2\">`OnImportsSatisfied`</ph>.","pos":[38206,38289],"source":"`IPartImportsSatisfiedNotification` contains one method named `OnImportsSatisfied`."},{"content":"This method is called by the composition container on any parts that implement the interface when composition has been completed and the part's imports are ready for use.","pos":[38290,38460]},{"content":"Parts are created by the composition engine to fill the imports of other parts.","pos":[38461,38540]},{"content":"Before the imports of a part have been set, you cannot perform any initialization that relies on or manipulates imported values in the part constructor unless those values have been specified as prerequisites by using the <ph id=\"ph1\">`ImportingConstructor`</ph> attribute.","pos":[38541,38796],"source":" Before the imports of a part have been set, you cannot perform any initialization that relies on or manipulates imported values in the part constructor unless those values have been specified as prerequisites by using the `ImportingConstructor` attribute."},{"content":"This is normally the preferred method, but in some cases, constructor injection may not be available.","pos":[38797,38898]},{"content":"In those cases, initialization can be performed in <ph id=\"ph1\">`OnImportsSatisfied`</ph>, and the part should implement <ph id=\"ph2\">`IPartImportsSatisfiedNotification`</ph>.","pos":[38899,39038],"source":" In those cases, initialization can be performed in `OnImportsSatisfied`, and the part should implement `IPartImportsSatisfiedNotification`."},{"pos":[39043,39051],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[39055,39206],"content":"<bpt id=\"p1\">[</bpt>Channel 9 Video: Open Up Your Applications with the Managed Extensibility Framework<ept id=\"p1\">](https://channel9.msdn.com/events/TechEd/NorthAmerica/2009/DTL328)</ept>","source":"[Channel 9 Video: Open Up Your Applications with the Managed Extensibility Framework](https://channel9.msdn.com/events/TechEd/NorthAmerica/2009/DTL328)"},{"pos":[39209,39379],"content":"<bpt id=\"p1\">[</bpt>Channel 9 Video: Managed Extensibility Framework (MEF) 2.0<ept id=\"p1\">](https://channel9.msdn.com/posts/NET-45-Oleg-Lvovitch-and-Kevin-Ransom-Managed-Extensibility-Framework-MEF-20)</ept>","source":"[Channel 9 Video: Managed Extensibility Framework (MEF) 2.0](https://channel9.msdn.com/posts/NET-45-Oleg-Lvovitch-and-Kevin-Ransom-Managed-Extensibility-Framework-MEF-20)"}]}