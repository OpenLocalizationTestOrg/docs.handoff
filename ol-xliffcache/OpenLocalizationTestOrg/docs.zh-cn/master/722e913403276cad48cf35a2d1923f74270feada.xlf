<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="constants.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">722e913403276cad48cf35a2d1923f74270feada</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\constants.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11e6a7caecb61c063ca2ce1767b016b8fd3df3ef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a43f6d636d41593d719089f18000c952ee0e9b0c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Constants - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Constants (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Constants are immutable values which are known at compile time and do not change for the life of the program.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Constants are declared with the <bpt id="p1">[</bpt>const<ept id="p1">](../../../csharp/language-reference/keywords/const.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Only the C# built-in types (excluding <ph id="ph1">&lt;xref:System.Object?displayProperty=nameWithType&gt;</ph>) may be declared as <ph id="ph2">`const`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For a list of the built-in types, see <bpt id="p1">[</bpt>Built-In Types Table<ept id="p1">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>User-defined types, including classes, structs, and arrays, cannot be <ph id="ph1">`const`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>readonly<ept id="p1">](../../../csharp/language-reference/keywords/readonly.md)</ept> modifier to create a class, struct, or array that is initialized one time at runtime (for example in a constructor) and thereafter cannot be changed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>C# does not support <ph id="ph1">`const`</ph> methods, properties, or events.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The enum type enables you to define named constants for integral built-in types (for example <ph id="ph1">`int`</ph>, <ph id="ph2">`uint`</ph>, <ph id="ph3">`long`</ph>, and so on).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>enum<ept id="p1">](../../../csharp/language-reference/keywords/enum.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Constants must be initialized as they are declared.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this example, the constant <ph id="ph1">`months`</ph> is always 12, and it cannot be changed even by the class itself.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In fact, when the compiler encounters a constant identifier in C# source code (for example, <ph id="ph1">`months`</ph>), it substitutes the literal value directly into the intermediate language (IL) code that it produces.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because there is no variable address associated with a constant at run time, <ph id="ph1">`const`</ph> fields cannot be passed by reference and cannot appear as an l-value in an expression.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use caution when you refer to constant values defined in other code such as DLLs.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If a new version of the DLL defines a new value for the constant, your program will still hold the old literal value until it is recompiled against the new version.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Multiple constants of the same type can be declared at the same time, for example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The expression that is used to initialize a constant can refer to another constant if it does not create a circular reference.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Constants can be marked as <bpt id="p1">[</bpt>public<ept id="p1">](../../../csharp/language-reference/keywords/public.md)</ept>, <bpt id="p2">[</bpt>private<ept id="p2">](../../../csharp/language-reference/keywords/private.md)</ept>, <bpt id="p3">[</bpt>protected<ept id="p3">](../../../csharp/language-reference/keywords/protected.md)</ept>, <bpt id="p4">[</bpt>internal<ept id="p4">](../../../csharp/language-reference/keywords/internal.md)</ept>, <bpt id="p5">[</bpt>protected internal<ept id="p5">](../../../csharp/language-reference/keywords/protected-internal.md)</ept> or <bpt id="p6">[</bpt>private protected<ept id="p6">](../../../csharp/language-reference/keywords/private-protected.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>These access modifiers define how users of the class can access the constant.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Access Modifiers<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Constants are accessed as if they were <bpt id="p1">[</bpt>static<ept id="p1">](../../../csharp/language-reference/keywords/static.md)</ept> fields because the value of the constant is the same for all instances of the type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You do not use the <ph id="ph1">`static`</ph> keyword to declare them.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Expressions that are not in the class that defines the constant must use the class name, a period, and the name of the constant to access the constant.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes and Structs<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types<ept id="p1">](../../../csharp/programming-guide/types/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>readonly<ept id="p1">](../../../csharp/language-reference/keywords/readonly.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Immutability in C# Part One: Kinds of Immutability<ept id="p1">](https://blogs.msdn.microsoft.com/ericlippert/2007/11/13/immutability-in-c-part-one-kinds-of-immutability)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>