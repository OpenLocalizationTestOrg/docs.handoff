{"content":"---\ntitle: \"Managed Threading Best Practices\"\nms.date: \"10/15/2018\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"threading [.NET Framework], design guidelines\"\n  - \"threading [.NET Framework], best practices\"\n  - \"managed threading\"\nms.assetid: e51988e7-7f4b-4646-a06d-1416cee8d557\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Managed threading best practices\nMultithreading requires careful programming. For most tasks, you can reduce complexity by queuing requests for execution by thread pool threads. This topic addresses more difficult situations, such as coordinating the work of multiple threads, or handling threads that block.  \n  \n> [!NOTE]\n> Starting with the .NET Framework 4, the Task Parallel Library and PLINQ provide APIs that reduce some of the complexity and risks of multi-threaded programming. For more information, see [Parallel Programming in .NET](../../../docs/standard/parallel-programming/index.md).  \n  \n## Deadlocks and race conditions  \n Multithreading solves problems with throughput and responsiveness, but in doing so it introduces new problems: deadlocks and race conditions.  \n  \n### Deadlocks  \n A deadlock occurs when each of two threads tries to lock a resource the other has already locked. Neither thread can make any further progress.  \n  \n Many methods of the managed threading classes provide time-outs to help you detect deadlocks. For example, the following code attempts to acquire a lock on an object named `lockObject`. If the lock is not obtained in 300 milliseconds, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType> returns `false`.  \n  \n```vb  \nIf Monitor.TryEnter(lockObject, 300) Then  \n    Try  \n        ' Place code protected by the Monitor here.  \n    Finally  \n        Monitor.Exit(lockObject)  \n    End Try  \nElse  \n    ' Code to execute if the attempt times out.  \nEnd If  \n```  \n  \n```csharp  \nif (Monitor.TryEnter(lockObject, 300)) {  \n    try {  \n        // Place code protected by the Monitor here.  \n    }  \n    finally {  \n        Monitor.Exit(lockObject);  \n    }  \n}  \nelse {  \n    // Code to execute if the attempt times out.  \n}  \n```  \n  \n### Race conditions  \n A race condition is a bug that occurs when the outcome of a program depends on which of two or more threads reaches a particular block of code first. Running the program many times produces different results, and the result of any given run cannot be predicted.  \n  \n A simple example of a race condition is incrementing a field. Suppose a class has a private **static** field (**Shared** in Visual Basic) that is incremented every time an instance of the class is created, using code such as `objCt++;` (C#) or `objCt += 1` (Visual Basic). This operation requires loading the value from `objCt` into a register, incrementing the value, and storing it in `objCt`.  \n  \n In a multithreaded application, a thread that has loaded and incremented the value might be preempted by another thread which performs all three steps; when the first thread resumes execution and stores its value, it overwrites `objCt` without taking into account the fact that the value has changed in the interim.  \n  \n This particular race condition is easily avoided by using methods of the <xref:System.Threading.Interlocked> class, such as <xref:System.Threading.Interlocked.Increment%2A?displayProperty=nameWithType>. To read about other techniques for synchronizing data among multiple threads, see [Synchronizing Data for Multithreading](../../../docs/standard/threading/synchronizing-data-for-multithreading.md).  \n  \n Race conditions can also occur when you synchronize the activities of multiple threads. Whenever you write a line of code, you must consider what might happen if a thread were preempted before executing the line (or before any of the individual machine instructions that make up the line), and another thread overtook it.  \n  \n## Static members and static constructors  \n A class is not initialized until its class constructor (`static` constructor in C#, `Shared Sub New` in Visual Basic) has finished running. To prevent the execution of code on a type that is not initialized, the common language runtime blocks all calls from other threads to `static` members of the class (`Shared` members in Visual Basic) until the class constructor has finished running.  \n  \n For example, if a class constructor starts a new thread, and the thread procedure calls a `static` member of the class, the new thread blocks until the class constructor completes.  \n  \n This applies to any type that can have a `static` constructor.  \n\n## Number of processors\n\nWhether there are multiple processors or only one processor available on a system can influence multithreaded architecture. For more information, see [Number of Processors](https://docs.microsoft.com/previous-versions/dotnet/netframework-1.1/1c9txz50(v%3dvs.71)#number-of-processors).\n\nUse the <xref:System.Environment.ProcessorCount?displayProperty=nameWithType> property to determine the number of processors available at runtime.\n  \n## General recommendations  \n Consider the following guidelines when using multiple threads:  \n  \n-   Don't use <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType> to terminate other threads. Calling **Abort** on another thread is akin to throwing an exception on that thread, without knowing what point that thread has reached in its processing.  \n  \n-   Don't use <xref:System.Threading.Thread.Suspend%2A?displayProperty=nameWithType> and <xref:System.Threading.Thread.Resume%2A?displayProperty=nameWithType> to synchronize the activities of multiple threads. Do use <xref:System.Threading.Mutex>, <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Monitor>.  \n  \n-   Don't control the execution of worker threads from your main program (using events, for example). Instead, design your program so that worker threads are responsible for waiting until work is available, executing it, and notifying other parts of your program when finished. If your worker threads do not block, consider using thread pool threads. <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> is useful in situations where worker threads block.  \n  \n-   Don't use types as lock objects. That is, avoid code such as `lock(typeof(X))` in C# or `SyncLock(GetType(X))` in Visual Basic, or the use of <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> with <xref:System.Type> objects. For a given type, there is only one instance of <xref:System.Type?displayProperty=nameWithType> per application domain. If the type you take a lock on is public, code other than your own can take locks on it, leading to deadlocks. For additional issues, see [Reliability Best Practices](../../../docs/framework/performance/reliability-best-practices.md).  \n  \n-   Use caution when locking on instances, for example `lock(this)` in C# or `SyncLock(Me)` in Visual Basic. If other code in your application, external to the type, takes a lock on the object, deadlocks could occur.  \n  \n-   Do ensure that a thread that has entered a monitor always leaves that monitor, even if an exception occurs while the thread is in the monitor. The C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement and the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement provide this behavior automatically, employing a **finally** block to ensure that <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> is called. If you cannot ensure that **Exit** will be called, consider changing your design to use **Mutex**. A mutex is automatically released when the thread that currently owns it terminates.  \n  \n-   Do use multiple threads for tasks that require different resources, and avoid assigning multiple threads to a single resource. For example, any task involving I/O benefits from having its own thread, because that thread will block during I/O operations and thus allow other threads to execute. User input is another resource that benefits from a dedicated thread. On a single-processor computer, a task that involves intensive computation coexists with user input and with tasks that involve I/O, but multiple computation-intensive tasks contend with each other.  \n  \n-   Consider using methods of the <xref:System.Threading.Interlocked> class for simple state changes, instead of using the `lock` statement (`SyncLock` in Visual Basic). The `lock` statement is a good general-purpose tool, but the <xref:System.Threading.Interlocked> class provides better performance for updates that must be atomic. Internally, it executes a single lock prefix if there is no contention. In code reviews, watch for code like that shown in the following examples. In the first example, a state variable is incremented:  \n  \n    ```vb  \n    SyncLock lockObject  \n        myField += 1  \n    End SyncLock  \n    ```  \n  \n    ```csharp  \n    lock(lockObject)   \n    {  \n        myField++;  \n    }  \n    ```  \n  \n     You can improve performance by using the <xref:System.Threading.Interlocked.Increment%2A> method instead of the `lock` statement, as follows:  \n  \n    ```vb  \n    System.Threading.Interlocked.Increment(myField)  \n    ```  \n  \n    ```csharp  \n    System.Threading.Interlocked.Increment(myField);  \n    ```  \n  \n    > [!NOTE]\n    > In the .NET Framework 2.0 and later, use the <xref:System.Threading.Interlocked.Add%2A> method for atomic increments larger than 1.  \n  \n     In the second example, a reference type variable is updated only if it is a null reference (`Nothing` in Visual Basic).  \n  \n    ```vb  \n    If x Is Nothing Then  \n        SyncLock lockObject  \n            If x Is Nothing Then  \n                x = y  \n            End If  \n        End SyncLock  \n    End If  \n    ```  \n  \n    ```csharp  \n    if (x == null)  \n    {  \n        lock (lockObject)  \n        {  \n            if (x == null)  \n            {  \n                x = y;  \n            }  \n        }  \n    }  \n    ```  \n  \n     Performance can be improved by using the <xref:System.Threading.Interlocked.CompareExchange%2A> method instead, as follows:  \n  \n    ```vb  \n    System.Threading.Interlocked.CompareExchange(x, y, Nothing)  \n    ```  \n  \n    ```csharp  \n    System.Threading.Interlocked.CompareExchange(ref x, y, null);  \n    ```  \n  \n    > [!NOTE]\n    > Beginning with .NET Framework 2.0, the <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29> method overload provides a type-safe alternative for reference types.\n  \n## Recommendations for class libraries  \n Consider the following guidelines when designing class libraries for multithreading:  \n  \n-   Avoid the need for synchronization, if possible. This is especially true for heavily used code. For example, an algorithm might be adjusted to tolerate a race condition rather than eliminate it. Unnecessary synchronization decreases performance and creates the possibility of deadlocks and race conditions.  \n  \n-   Make static data (`Shared` in Visual Basic) thread safe by default.  \n  \n-   Do not make instance data thread safe by default. Adding locks to create thread-safe code decreases performance, increases lock contention, and creates the possibility for deadlocks to occur. In common application models, only one thread at a time executes user code, which minimizes the need for thread safety. For this reason, the .NET Framework class libraries are not thread safe by default.  \n  \n-   Avoid providing static methods that alter static state. In common server scenarios, static state is shared across requests, which means multiple threads can execute that code at the same time. This opens up the possibility of threading bugs. Consider using a design pattern that encapsulates data into instances that are not shared across requests. Furthermore, if static data are synchronized, calls between static methods that alter state can result in deadlocks or redundant synchronization, adversely affecting performance.  \n  \n## See also\n\n- [Threading](../../../docs/standard/threading/index.md)\n- [Threads and Threading](../../../docs/standard/threading/threads-and-threading.md)\n","nodes":[{"pos":[4,368],"embed":true,"restype":"x-metadata","content":"title: \"Managed Threading Best Practices\"\nms.date: \"10/15/2018\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"threading [.NET Framework], design guidelines\"\n  - \"threading [.NET Framework], best practices\"\n  - \"managed threading\"\nms.assetid: e51988e7-7f4b-4646-a06d-1416cee8d557\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Managed Threading Best Practices","nodes":[{"pos":[0,32],"content":"Managed Threading Best Practices","nodes":[{"content":"Managed Threading Best Practices","pos":[0,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[375,407],"content":"Managed threading best practices","linkify":"Managed threading best practices","nodes":[{"content":"Managed threading best practices","pos":[0,32]}]},{"content":"Multithreading requires careful programming.","pos":[408,452]},{"content":"For most tasks, you can reduce complexity by queuing requests for execution by thread pool threads.","pos":[453,552]},{"content":"This topic addresses more difficult situations, such as coordinating the work of multiple threads, or handling threads that block.","pos":[553,683]},{"pos":[691,973],"content":"[!NOTE]\nStarting with the .NET Framework 4, the Task Parallel Library and PLINQ provide APIs that reduce some of the complexity and risks of multi-threaded programming. For more information, see [Parallel Programming in .NET](../../../docs/standard/parallel-programming/index.md).","leadings":["","> "],"nodes":[{"content":"Starting with the .NET Framework 4, the Task Parallel Library and PLINQ provide APIs that reduce some of the complexity and risks of multi-threaded programming. For more information, see [Parallel Programming in .NET](../../../docs/standard/parallel-programming/index.md).","pos":[8,280],"nodes":[{"content":"Starting with the .NET Framework 4, the Task Parallel Library and PLINQ provide APIs that reduce some of the complexity and risks of multi-threaded programming.","pos":[0,160]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Parallel Programming in .NET<ept id=\"p1\">](../../../docs/standard/parallel-programming/index.md)</ept>.","pos":[161,272],"source":" For more information, see [Parallel Programming in .NET](../../../docs/standard/parallel-programming/index.md)."}]}]},{"pos":[982,1011],"content":"Deadlocks and race conditions","linkify":"Deadlocks and race conditions","nodes":[{"content":"Deadlocks and race conditions","pos":[0,29]}]},{"content":"Multithreading solves problems with throughput and responsiveness, but in doing so it introduces new problems: deadlocks and race conditions.","pos":[1015,1156]},{"pos":[1166,1175],"content":"Deadlocks","linkify":"Deadlocks","nodes":[{"content":"Deadlocks","pos":[0,9]}]},{"content":"A deadlock occurs when each of two threads tries to lock a resource the other has already locked.","pos":[1179,1276]},{"content":"Neither thread can make any further progress.","pos":[1277,1322]},{"content":"Many methods of the managed threading classes provide time-outs to help you detect deadlocks.","pos":[1329,1422]},{"content":"For example, the following code attempts to acquire a lock on an object named <ph id=\"ph1\">`lockObject`</ph>.","pos":[1423,1514],"source":" For example, the following code attempts to acquire a lock on an object named `lockObject`."},{"content":"If the lock is not obtained in 300 milliseconds, <ph id=\"ph1\">&lt;xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType&gt;</ph> returns <ph id=\"ph2\">`false`</ph>.","pos":[1515,1653],"source":" If the lock is not obtained in 300 milliseconds, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType> returns `false`."},{"pos":[2184,2199],"content":"Race conditions","linkify":"Race conditions","nodes":[{"content":"Race conditions","pos":[0,15]}]},{"content":"A race condition is a bug that occurs when the outcome of a program depends on which of two or more threads reaches a particular block of code first.","pos":[2203,2352]},{"content":"Running the program many times produces different results, and the result of any given run cannot be predicted.","pos":[2353,2464]},{"content":"A simple example of a race condition is incrementing a field.","pos":[2471,2532]},{"content":"Suppose a class has a private <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> field (<bpt id=\"p2\">**</bpt>Shared<ept id=\"p2\">**</ept> in Visual Basic) that is incremented every time an instance of the class is created, using code such as <ph id=\"ph1\">`objCt++;`</ph> (C#) or <ph id=\"ph2\">`objCt += 1`</ph> (Visual Basic).","pos":[2533,2743],"source":" Suppose a class has a private **static** field (**Shared** in Visual Basic) that is incremented every time an instance of the class is created, using code such as `objCt++;` (C#) or `objCt += 1` (Visual Basic)."},{"content":"This operation requires loading the value from <ph id=\"ph1\">`objCt`</ph> into a register, incrementing the value, and storing it in <ph id=\"ph2\">`objCt`</ph>.","pos":[2744,2866],"source":" This operation requires loading the value from `objCt` into a register, incrementing the value, and storing it in `objCt`."},{"pos":[2873,3188],"content":"In a multithreaded application, a thread that has loaded and incremented the value might be preempted by another thread which performs all three steps; when the first thread resumes execution and stores its value, it overwrites <ph id=\"ph1\">`objCt`</ph> without taking into account the fact that the value has changed in the interim.","source":"In a multithreaded application, a thread that has loaded and incremented the value might be preempted by another thread which performs all three steps; when the first thread resumes execution and stores its value, it overwrites `objCt` without taking into account the fact that the value has changed in the interim."},{"content":"This particular race condition is easily avoided by using methods of the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked&gt;</ph> class, such as <ph id=\"ph2\">&lt;xref:System.Threading.Interlocked.Increment%2A?displayProperty=nameWithType&gt;</ph>.","pos":[3195,3397],"source":"This particular race condition is easily avoided by using methods of the <xref:System.Threading.Interlocked> class, such as <xref:System.Threading.Interlocked.Increment%2A?displayProperty=nameWithType>."},{"content":"To read about other techniques for synchronizing data among multiple threads, see <bpt id=\"p1\">[</bpt>Synchronizing Data for Multithreading<ept id=\"p1\">](../../../docs/standard/threading/synchronizing-data-for-multithreading.md)</ept>.","pos":[3398,3595],"source":" To read about other techniques for synchronizing data among multiple threads, see [Synchronizing Data for Multithreading](../../../docs/standard/threading/synchronizing-data-for-multithreading.md)."},{"content":"Race conditions can also occur when you synchronize the activities of multiple threads.","pos":[3602,3689]},{"content":"Whenever you write a line of code, you must consider what might happen if a thread were preempted before executing the line (or before any of the individual machine instructions that make up the line), and another thread overtook it.","pos":[3690,3923]},{"pos":[3932,3970],"content":"Static members and static constructors","linkify":"Static members and static constructors","nodes":[{"content":"Static members and static constructors","pos":[0,38]}]},{"content":"A class is not initialized until its class constructor (<ph id=\"ph1\">`static`</ph> constructor in C#, <ph id=\"ph2\">`Shared Sub New`</ph> in Visual Basic) has finished running.","pos":[3974,4113],"source":"A class is not initialized until its class constructor (`static` constructor in C#, `Shared Sub New` in Visual Basic) has finished running."},{"content":"To prevent the execution of code on a type that is not initialized, the common language runtime blocks all calls from other threads to <ph id=\"ph1\">`static`</ph> members of the class (<ph id=\"ph2\">`Shared`</ph> members in Visual Basic) until the class constructor has finished running.","pos":[4114,4363],"source":" To prevent the execution of code on a type that is not initialized, the common language runtime blocks all calls from other threads to `static` members of the class (`Shared` members in Visual Basic) until the class constructor has finished running."},{"pos":[4370,4550],"content":"For example, if a class constructor starts a new thread, and the thread procedure calls a <ph id=\"ph1\">`static`</ph> member of the class, the new thread blocks until the class constructor completes.","source":"For example, if a class constructor starts a new thread, and the thread procedure calls a `static` member of the class, the new thread blocks until the class constructor completes."},{"pos":[4557,4619],"content":"This applies to any type that can have a <ph id=\"ph1\">`static`</ph> constructor.","source":"This applies to any type that can have a `static` constructor."},{"pos":[4626,4646],"content":"Number of processors","linkify":"Number of processors","nodes":[{"content":"Number of processors","pos":[0,20]}]},{"content":"Whether there are multiple processors or only one processor available on a system can influence multithreaded architecture.","pos":[4648,4771]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Number of Processors<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-1.1/1c9txz50(v%3dvs.71)#number-of-processors)</ept>.","pos":[4772,4932],"source":" For more information, see [Number of Processors](https://docs.microsoft.com/previous-versions/dotnet/netframework-1.1/1c9txz50(v%3dvs.71)#number-of-processors)."},{"pos":[4934,5080],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Environment.ProcessorCount?displayProperty=nameWithType&gt;</ph> property to determine the number of processors available at runtime.","source":"Use the <xref:System.Environment.ProcessorCount?displayProperty=nameWithType> property to determine the number of processors available at runtime."},{"pos":[5087,5110],"content":"General recommendations","linkify":"General recommendations","nodes":[{"content":"General recommendations","pos":[0,23]}]},{"content":"Consider the following guidelines when using multiple threads:","pos":[5114,5176]},{"content":"Don't use <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType&gt;</ph> to terminate other threads.","pos":[5186,5292],"source":"Don't use <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType> to terminate other threads."},{"content":"Calling <bpt id=\"p1\">**</bpt>Abort<ept id=\"p1\">**</ept> on another thread is akin to throwing an exception on that thread, without knowing what point that thread has reached in its processing.","pos":[5293,5447],"source":" Calling **Abort** on another thread is akin to throwing an exception on that thread, without knowing what point that thread has reached in its processing."},{"content":"Don't use <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Suspend%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Resume%2A?displayProperty=nameWithType&gt;</ph> to synchronize the activities of multiple threads.","pos":[5457,5662],"source":"Don't use <xref:System.Threading.Thread.Suspend%2A?displayProperty=nameWithType> and <xref:System.Threading.Thread.Resume%2A?displayProperty=nameWithType> to synchronize the activities of multiple threads."},{"content":"Do use <ph id=\"ph1\">&lt;xref:System.Threading.Mutex&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Threading.Monitor&gt;</ph>.","pos":[5663,5819],"source":" Do use <xref:System.Threading.Mutex>, <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Monitor>."},{"content":"Don't control the execution of worker threads from your main program (using events, for example).","pos":[5829,5926]},{"content":"Instead, design your program so that worker threads are responsible for waiting until work is available, executing it, and notifying other parts of your program when finished.","pos":[5927,6102]},{"content":"If your worker threads do not block, consider using thread pool threads.","pos":[6103,6175]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType&gt;</ph> is useful in situations where worker threads block.","pos":[6176,6300],"source":"<xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> is useful in situations where worker threads block."},{"content":"Don't use types as lock objects.","pos":[6310,6342]},{"content":"That is, avoid code such as <ph id=\"ph1\">`lock(typeof(X))`</ph> in C# or <ph id=\"ph2\">`SyncLock(GetType(X))`</ph> in Visual Basic, or the use of <ph id=\"ph3\">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> with <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph> objects.","pos":[6343,6554],"source":" That is, avoid code such as `lock(typeof(X))` in C# or `SyncLock(GetType(X))` in Visual Basic, or the use of <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> with <xref:System.Type> objects."},{"content":"For a given type, there is only one instance of <ph id=\"ph1\">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> per application domain.","pos":[6555,6674],"source":" For a given type, there is only one instance of <xref:System.Type?displayProperty=nameWithType> per application domain."},{"content":"If the type you take a lock on is public, code other than your own can take locks on it, leading to deadlocks.","pos":[6675,6785]},{"content":"For additional issues, see <bpt id=\"p1\">[</bpt>Reliability Best Practices<ept id=\"p1\">](../../../docs/framework/performance/reliability-best-practices.md)</ept>.","pos":[6786,6909],"source":" For additional issues, see [Reliability Best Practices](../../../docs/framework/performance/reliability-best-practices.md)."},{"content":"Use caution when locking on instances, for example <ph id=\"ph1\">`lock(this)`</ph> in C# or <ph id=\"ph2\">`SyncLock(Me)`</ph> in Visual Basic.","pos":[6919,7023],"source":"Use caution when locking on instances, for example `lock(this)` in C# or `SyncLock(Me)` in Visual Basic."},{"content":"If other code in your application, external to the type, takes a lock on the object, deadlocks could occur.","pos":[7024,7131]},{"content":"Do ensure that a thread that has entered a monitor always leaves that monitor, even if an exception occurs while the thread is in the monitor.","pos":[7141,7283]},{"content":"The C# <bpt id=\"p1\">[</bpt>lock<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> statement and the Visual Basic <bpt id=\"p2\">[</bpt>SyncLock<ept id=\"p2\">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> statement provide this behavior automatically, employing a <bpt id=\"p3\">**</bpt>finally<ept id=\"p3\">**</ept> block to ensure that <ph id=\"ph1\">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> is called.","pos":[7284,7645],"source":" The C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement and the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement provide this behavior automatically, employing a **finally** block to ensure that <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> is called."},{"content":"If you cannot ensure that <bpt id=\"p1\">**</bpt>Exit<ept id=\"p1\">**</ept> will be called, consider changing your design to use <bpt id=\"p2\">**</bpt>Mutex<ept id=\"p2\">**</ept>.","pos":[7646,7744],"source":" If you cannot ensure that **Exit** will be called, consider changing your design to use **Mutex**."},{"content":"A mutex is automatically released when the thread that currently owns it terminates.","pos":[7745,7829]},{"content":"Do use multiple threads for tasks that require different resources, and avoid assigning multiple threads to a single resource.","pos":[7839,7965]},{"content":"For example, any task involving I/O benefits from having its own thread, because that thread will block during I/O operations and thus allow other threads to execute.","pos":[7966,8132]},{"content":"User input is another resource that benefits from a dedicated thread.","pos":[8133,8202]},{"content":"On a single-processor computer, a task that involves intensive computation coexists with user input and with tasks that involve I/O, but multiple computation-intensive tasks contend with each other.","pos":[8203,8401]},{"content":"Consider using methods of the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked&gt;</ph> class for simple state changes, instead of using the <ph id=\"ph2\">`lock`</ph> statement (<ph id=\"ph3\">`SyncLock`</ph> in Visual Basic).","pos":[8411,8576],"source":"Consider using methods of the <xref:System.Threading.Interlocked> class for simple state changes, instead of using the `lock` statement (`SyncLock` in Visual Basic)."},{"content":"The <ph id=\"ph1\">`lock`</ph> statement is a good general-purpose tool, but the <ph id=\"ph2\">&lt;xref:System.Threading.Interlocked&gt;</ph> class provides better performance for updates that must be atomic.","pos":[8577,8740],"source":" The `lock` statement is a good general-purpose tool, but the <xref:System.Threading.Interlocked> class provides better performance for updates that must be atomic."},{"content":"Internally, it executes a single lock prefix if there is no contention.","pos":[8741,8812]},{"content":"In code reviews, watch for code like that shown in the following examples.","pos":[8813,8887]},{"content":"In the first example, a state variable is incremented:","pos":[8888,8942]},{"pos":[9136,9277],"content":"You can improve performance by using the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph> method instead of the <ph id=\"ph2\">`lock`</ph> statement, as follows:","source":"You can improve performance by using the <xref:System.Threading.Interlocked.Increment%2A> method instead of the `lock` statement, as follows:"},{"pos":[9452,9597],"content":"[!NOTE]\nIn the .NET Framework 2.0 and later, use the <xref:System.Threading.Interlocked.Add%2A> method for atomic increments larger than 1.","leadings":["","    > "],"nodes":[{"content":"In the .NET Framework 2.0 and later, use the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> method for atomic increments larger than 1.","pos":[8,139],"source":"In the .NET Framework 2.0 and later, use the <xref:System.Threading.Interlocked.Add%2A> method for atomic increments larger than 1."}]},{"pos":[9608,9727],"content":"In the second example, a reference type variable is updated only if it is a null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"In the second example, a reference type variable is updated only if it is a null reference (`Nothing` in Visual Basic)."},{"pos":[10140,10263],"content":"Performance can be improved by using the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method instead, as follows:","source":"Performance can be improved by using the <xref:System.Threading.Interlocked.CompareExchange%2A> method instead, as follows:"},{"pos":[10463,10680],"content":"[!NOTE]\nBeginning with .NET Framework 2.0, the <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29> method overload provides a type-safe alternative for reference types.","leadings":["","    > "],"nodes":[{"content":"Beginning with .NET Framework 2.0, the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29&gt;</ph> method overload provides a type-safe alternative for reference types.","pos":[8,211],"source":"Beginning with .NET Framework 2.0, the <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29> method overload provides a type-safe alternative for reference types."}]},{"pos":[10687,10722],"content":"Recommendations for class libraries","linkify":"Recommendations for class libraries","nodes":[{"content":"Recommendations for class libraries","pos":[0,35]}]},{"content":"Consider the following guidelines when designing class libraries for multithreading:","pos":[10726,10810]},{"content":"Avoid the need for synchronization, if possible.","pos":[10820,10868]},{"content":"This is especially true for heavily used code.","pos":[10869,10915]},{"content":"For example, an algorithm might be adjusted to tolerate a race condition rather than eliminate it.","pos":[10916,11014]},{"content":"Unnecessary synchronization decreases performance and creates the possibility of deadlocks and race conditions.","pos":[11015,11126]},{"pos":[11136,11203],"content":"Make static data (<ph id=\"ph1\">`Shared`</ph> in Visual Basic) thread safe by default.","source":"Make static data (`Shared` in Visual Basic) thread safe by default."},{"content":"Do not make instance data thread safe by default.","pos":[11213,11262]},{"content":"Adding locks to create thread-safe code decreases performance, increases lock contention, and creates the possibility for deadlocks to occur.","pos":[11263,11404]},{"content":"In common application models, only one thread at a time executes user code, which minimizes the need for thread safety.","pos":[11405,11524]},{"content":"For this reason, the .NET Framework class libraries are not thread safe by default.","pos":[11525,11608]},{"content":"Avoid providing static methods that alter static state.","pos":[11618,11673]},{"content":"In common server scenarios, static state is shared across requests, which means multiple threads can execute that code at the same time.","pos":[11674,11810]},{"content":"This opens up the possibility of threading bugs.","pos":[11811,11859]},{"content":"Consider using a design pattern that encapsulates data into instances that are not shared across requests.","pos":[11860,11966]},{"content":"Furthermore, if static data are synchronized, calls between static methods that alter state can result in deadlocks or redundant synchronization, adversely affecting performance.","pos":[11967,12145]},{"pos":[12154,12162],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[12166,12220],"content":"<bpt id=\"p1\">[</bpt>Threading<ept id=\"p1\">](../../../docs/standard/threading/index.md)</ept>","source":"[Threading](../../../docs/standard/threading/index.md)"},{"pos":[12223,12305],"content":"<bpt id=\"p1\">[</bpt>Threads and Threading<ept id=\"p1\">](../../../docs/standard/threading/threads-and-threading.md)</ept>","source":"[Threads and Threading](../../../docs/standard/threading/threads-and-threading.md)"}]}