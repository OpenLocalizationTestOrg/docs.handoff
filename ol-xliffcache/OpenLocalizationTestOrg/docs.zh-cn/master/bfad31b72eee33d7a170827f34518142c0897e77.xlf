<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfad31b72eee33d7a170827f34518142c0897e77</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\transaction-rollback.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b796273ec25380681dcfcd7da241e8a92813121</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71ee4a5c79766e9c728d66d5d3442489c18eabc8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Transaction Rollback | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Transaction Rollback</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample shows how to create a custom <ph id="ph1">&lt;xref:System.Activities.NativeActivity&gt;</ph> that accesses the ambient <ph id="ph2">&lt;xref:System.Activities.RuntimeTransactionHandle&gt;</ph> to get the ambient transaction and explicitly roll it back.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sample Details</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In workflow, a transaction is automatically completed when the outermost <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph> completes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A transaction implicitly rolls back when an unhandled exception propagates across the scope boundary.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, there may be times when it makes sense to explicitly roll back a transaction without having to throw an exception.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this case, you can use the custom rollback activity like the one in this sample to explicitly abort the ambient transaction and provide an optional exception reason.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RollbackActivity`</ph> is a <ph id="ph2">&lt;xref:System.Activities.NativeActivity&gt;</ph> as it requires access to the execution properties to get the ambient <ph id="ph3">&lt;xref:System.Activities.RuntimeTransactionHandle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Execute`</ph> method, it obtains the <ph id="ph2">&lt;xref:System.Activities.RuntimeTransactionHandle&gt;</ph> and checks whether it is <ph id="ph3">`null`</ph>, which indicates that the activity was used without an ambient run-time transaction.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It then obtains the transaction, again checking whether <ph id="ph1">`null`</ph> is present.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It is possible to have an ambient <ph id="ph1">&lt;xref:System.Activities.RuntimeTransactionHandle&gt;</ph> without ever initializing a run-time transaction.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Finally it aborts the transaction by calling <ph id="ph1">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> and specifying either a user-provided exception or a generic exception that states that the activity rolled back the transaction.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The demonstration workflow consists of a <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> whose body prints the transaction status before and after the <ph id="ph2">`RollbackActivity`</ph> executes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that even though the transaction has been rolled back, the <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> executes to completion and does not abort the workflow until the body completes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The workflow is aborted because the <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope.AbortInstanceOnTransactionFailure%2A&gt;</ph> property defaults to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To use this sample</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Load the TransactionRollback.sln solution in <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Press CTRL+SHIFT+B to build the solution.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Press CTRL+F5 to run the application.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Transactions<ept id="p1">](../../../../docs/framework/windows-workflow-foundation/workflow-transactions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>