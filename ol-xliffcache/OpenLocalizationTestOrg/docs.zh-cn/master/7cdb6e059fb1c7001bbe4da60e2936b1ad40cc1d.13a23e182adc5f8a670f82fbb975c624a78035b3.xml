{"content":"---\ntitle: \"How to: Cancel a Parallel.For or ForEach Loop\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"parallel foreach loop, how to cancel\"\n  - \"parallel for loops, how to cancel\"\nms.assetid: 9d19b591-ea95-4418-8ea7-b6266af9905b\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Cancel a Parallel.For or ForEach Loop\nThe <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods support cancellation through the use of cancellation tokens. For more information about cancellation in general, see [Cancellation](../../../docs/standard/threading/cancellation-in-managed-threads.md). In a parallel loop, you supply the <xref:System.Threading.CancellationToken> to the method in the <xref:System.Threading.Tasks.ParallelOptions> parameter and then enclose the parallel call in a try-catch block.  \n  \n## Example  \n The following example shows how to cancel a call to <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>. You can apply the same approach to a <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> call.  \n  \n [!code-csharp[TPL_Parallel#29](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_parallel/cs/parallel_cancel.cs#29)]\n [!code-vb[TPL_Parallel#29](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_parallel/vb/cancelloop.vb#29)]  \n  \n If the token that signals the cancellation is the same token that is specified in the <xref:System.Threading.Tasks.ParallelOptions> instance, then the parallel loop will throw a single <xref:System.OperationCanceledException> on cancellation. If some other token causes cancellation, the loop will throw an <xref:System.AggregateException> with an <xref:System.OperationCanceledException> as an InnerException.  \n  \n## See also\n\n- [Data Parallelism](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)\n- [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)\n","nodes":[{"pos":[4,339],"embed":true,"restype":"x-metadata","content":"title: \"How to: Cancel a Parallel.For or ForEach Loop\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"parallel foreach loop, how to cancel\"\n  - \"parallel for loops, how to cancel\"\nms.assetid: 9d19b591-ea95-4418-8ea7-b6266af9905b\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Cancel a Parallel.For or ForEach Loop","nodes":[{"pos":[0,45],"content":"How to: Cancel a Parallel.For or ForEach Loop","nodes":[{"content":"How to: Cancel a Parallel.For or ForEach Loop","pos":[0,45]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[346,391],"content":"How to: Cancel a Parallel.For or ForEach Loop","linkify":"How to: Cancel a Parallel.For or ForEach Loop","nodes":[{"content":"How to: Cancel a Parallel.For or ForEach Loop","pos":[0,45]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> methods support cancellation through the use of cancellation tokens.","pos":[392,622],"source":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods support cancellation through the use of cancellation tokens."},{"content":"For more information about cancellation in general, see <bpt id=\"p1\">[</bpt>Cancellation<ept id=\"p1\">](../../../docs/standard/threading/cancellation-in-managed-threads.md)</ept>.","pos":[623,763],"source":" For more information about cancellation in general, see [Cancellation](../../../docs/standard/threading/cancellation-in-managed-threads.md)."},{"content":"In a parallel loop, you supply the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> to the method in the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelOptions&gt;</ph> parameter and then enclose the parallel call in a try-catch block.","pos":[764,974],"source":" In a parallel loop, you supply the <xref:System.Threading.CancellationToken> to the method in the <xref:System.Threading.Tasks.ParallelOptions> parameter and then enclose the parallel call in a try-catch block."},{"pos":[983,990],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to cancel a call to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph>.","pos":[994,1125],"source":"The following example shows how to cancel a call to <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>."},{"content":"You can apply the same approach to a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> call.","pos":[1126,1243],"source":" You can apply the same approach to a <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> call."},{"content":"If the token that signals the cancellation is the same token that is specified in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelOptions&gt;</ph> instance, then the parallel loop will throw a single <ph id=\"ph2\">&lt;xref:System.OperationCanceledException&gt;</ph> on cancellation.","pos":[1495,1737],"source":"If the token that signals the cancellation is the same token that is specified in the <xref:System.Threading.Tasks.ParallelOptions> instance, then the parallel loop will throw a single <xref:System.OperationCanceledException> on cancellation."},{"content":"If some other token causes cancellation, the loop will throw an <ph id=\"ph1\">&lt;xref:System.AggregateException&gt;</ph> with an <ph id=\"ph2\">&lt;xref:System.OperationCanceledException&gt;</ph> as an InnerException.","pos":[1738,1905],"source":" If some other token causes cancellation, the loop will throw an <xref:System.AggregateException> with an <xref:System.OperationCanceledException> as an InnerException."},{"pos":[1914,1922],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1926,2031],"content":"<bpt id=\"p1\">[</bpt>Data Parallelism<ept id=\"p1\">](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)</ept>","source":"[Data Parallelism](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)"},{"pos":[2034,2155],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions in PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)</ept>","source":"[Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)"}]}