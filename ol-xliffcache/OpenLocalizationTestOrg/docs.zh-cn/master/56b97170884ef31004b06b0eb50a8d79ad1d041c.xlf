<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="xaml-overview-wpf.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56b97170884ef31004b06b0eb50a8d79ad1d041c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\xaml-overview-wpf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68e03fbac6506b90ce2bcf266383ddafbe2b5e74</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1274c116aa598948d29527926af26c8bd8932c0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>XAML overview (WPF)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XAML overview (WPF)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes the features of the XAML language and demonstrates how you can use XAML to write <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic specifically describes XAML as implemented by <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML itself is a larger language concept than <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>What is XAML?</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>XAML is a declarative markup language.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As applied to the .NET Framework programming model, XAML simplifies creating a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> for a .NET Framework application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can create visible <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> elements in the declarative XAML markup, and then separate the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> definition from the run-time logic by using code-behind files, joined to the markup through partial class definitions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>XAML directly represents the instantiation of objects in a specific set of backing types defined in assemblies.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is unlike most other markup languages, which are typically an interpreted language without such a direct tie to a backing type system.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>XAML enables a workflow where separate parties can work on the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> and the logic of an application, using potentially different tools.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When represented as text, XAML files are XML files that generally have the <ph id="ph1">`.xaml`</ph> extension.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The files can be encoded by any XML encoding, but encoding as UTF-8 is typical.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example shows how you might create a button as part of a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example is just intended to give you a flavor of how XAML represents common <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> programming metaphors (it is not a complete sample).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>XAML syntax in brief</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following sections explain the basic forms of XAML syntax, and give a short markup example.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These sections are not intended to provide complete information about each syntax form, such as how these are represented in the backing type system.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about the specifics of XAML syntax for each of the syntax forms introduced in this topic, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](xaml-syntax-in-detail.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Much of the material in the next few sections will be elementary to you, if you have previous familiarity with the XML language.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is a consequence of one of the basic design principles of XAML.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The XAML language defines concepts of its own, but these concepts work within the XML language and markup form.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>XAML object elements</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An object element typically declares an instance of a type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>That type is defined in the assemblies that provide the backing types for a technology that uses XAML as a language.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Object element syntax always starts with an opening angle bracket (<ph id="ph1">\&lt;</ph>).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is followed by the name of the type where you want to create an instance.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>(The name can possibly include a prefix, a concept that will be explained later.) After this, you can optionally declare attributes on the object element.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To complete the object element tag, end with a closing angle bracket (&gt;).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can instead use a self-closing form that does not have any content, by completing the tag with a forward slash and closing angle bracket in succession (/&gt;).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, look at the previously shown markup snippet again:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This specifies two object elements: <ph id="ph1">`&lt;StackPanel&gt;`</ph> (with content, and a closing tag later), and <ph id="ph2">`&lt;Button .../&gt;`</ph> (the self-closing form, with several attributes).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The object elements <ph id="ph1">`StackPanel`</ph> and <ph id="ph2">`Button`</ph> each map to the name of a class that is defined by <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> and is part of the <ph id="ph4">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> assemblies.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you specify an object element tag, you create an instruction for XAML processing to create a new instance.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each instance is created by calling the default constructor of the underlying type when parsing and loading the XAML.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Attribute syntax (properties)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Properties of an object can often be expressed as attributes of the object element.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An attribute syntax names the property that is being set in attribute syntax, followed by the assignment operator (=).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The value of an attribute is always specified as a string that is contained within quotation marks.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Attribute syntax is the most streamlined property setting syntax and is the most intuitive syntax to use for developers who have used markup languages in the past.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, the following markup creates a button that has red text and a blue background in addition to display text specified as <ph id="ph1">`Content`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Property element syntax</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For some properties of an object element, attribute syntax is not possible, because the object or information necessary to provide the property value cannot be adequately expressed within the quotation mark and string restrictions of attribute syntax.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For these cases, a different syntax known as property element syntax can be used.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The syntax for the property element start tag is <ph id="ph1">`&lt;`</ph><bpt id="p1">*</bpt>typeName<ept id="p1">*</ept><ph id="ph2">`.`</ph><bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept><ph id="ph3">`&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Generally, the content of that tag is an object element of the type that the property takes as its value .</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>After specifying content, you must close the property element with an end tag.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The syntax for the end tag is <ph id="ph1">`&lt;/`</ph><bpt id="p1">*</bpt>typeName<ept id="p1">*</ept><ph id="ph2">`.`</ph><bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept><ph id="ph3">`&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If an attribute syntax is possible, using the attribute syntax is typically more convenient and enables a more compact markup, but that is often just a matter of style, not a technical limitation.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example shows the same properties being set as in the previous attribute syntax example, but this time by using property element syntax for all properties of the <ph id="ph1">`Button`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Collection syntax</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The XAML language includes some optimizations that produce more human-readable markup.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>One such optimization is that if a particular property takes a collection type, then items that you declare in markup as child elements within that property's value become part of the collection.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In this case a collection of child object elements is the value being set to the collection property.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following example shows collection syntax for setting values of the <ph id="ph1">&lt;xref:System.Windows.Media.GradientBrush.GradientStops%2A&gt;</ph> property:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>XAML content properties</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>XAML specifies a language feature whereby a class can designate exactly one of its properties to be the XAML content property.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Child elements of that object element are used to set the value of that content property.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In other words, for the content property uniquely, you can omit a property element when setting that property in XAML markup and produce a more visible parent/child metaphor in the markup.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> specifies a content property of <ph id="ph2">&lt;xref:System.Windows.Controls.Decorator.Child%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following two <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> elements are treated identically.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The first one takes advantage of the content property syntax and omits the <ph id="ph1">`Border.Child`</ph> property element.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The second one shows <ph id="ph1">`Border.Child`</ph> explicitly.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>As a rule of the XAML language, the value of a XAML content property must be given either entirely before or entirely after any other property elements on that object element.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For instance, the following markup does not compile:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information about this restriction on XAML content properties, see the "XAML Content Properties" section of <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](xaml-syntax-in-detail.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Text content</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A small number of XAML elements can directly process text as their content.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To enable this, one of the following cases must be true:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The class must declare a content property, and that content property must be of a type assignable to a string (the type could be <ph id="ph1">&lt;xref:System.Object&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For instance, any <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> uses <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> as its content property and it is type <ph id="ph3">&lt;xref:System.Object&gt;</ph>, and this supports the following usage on a practical <ph id="ph4">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> such as a <ph id="ph5">&lt;xref:System.Windows.Controls.Button&gt;</ph>: <ph id="ph6">`&lt;Button&gt;Hello&lt;/Button&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The type must declare a type converter, in which case the text content is used as initialization text for that type converter.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`&lt;Brush&gt;Blue&lt;/Brush&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This case is less common in practice.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The type must be a known XAML language primitive.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Content properties and collection syntax combined</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Here, each <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is a child element of <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This is a streamlined and intuitive markup that omits two tags for two different reasons.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Omitted StackPanel.Children property element:<ept id="p1">**</ept> <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> derives from <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> defines <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A?displayProperty=nameWithType&gt;</ph> as its XAML content property.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Omitted UIElementCollection object element:<ept id="p1">**</ept> The <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A?displayProperty=nameWithType&gt;</ph> property takes the type <ph id="ph2">&lt;xref:System.Windows.Controls.UIElementCollection&gt;</ph>, which implements <ph id="ph3">&lt;xref:System.Collections.IList&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The collection's element tag can be omitted, based on the XAML rules for processing collections such as <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>(In this case, <ph id="ph1">&lt;xref:System.Windows.Controls.UIElementCollection&gt;</ph> actually cannot be instantiated because it does not expose a default constructor, and that is why the <ph id="ph2">&lt;xref:System.Windows.Controls.UIElementCollection&gt;</ph> object element is shown commented out).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Attribute syntax (events)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Attribute syntax can also be used for members that are events rather than properties.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In this case, the attribute's name is the name of the event.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In the WPF implementation of events for XAML, the attribute's value is the name of a handler that implements that event's delegate.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For example, the following markup assigns a handler for the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event to a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> created in markup:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>There is more to events and XAML in WPF than just this example of the attribute syntax.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example, you might wonder what the <ph id="ph1">`ClickHandler`</ph> referenced here represents and how it is defined.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This will be explained in the upcoming <bpt id="p1">[</bpt>Events and XAML Code-Behind<ept id="p1">](xaml-overview-wpf.md#events_and_xaml_codebehind)</ept> section of this topic.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Case and white space in XAML</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>XAML is generally speaking case sensitive.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For purposes of resolving backing types, WPF XAML is case sensitive by the same rules that the CLR is case sensitive.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Object elements, property elements, and attribute names must all be specified by using the sensitive casing when compared by name to the underlying type in the assembly, or to a member of a type.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>XAML language keywords and primitives are also case sensitive.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Values are not always case sensitive.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Case sensitivity for values will depend on the type converter behavior associated with the property that takes the value, or the property value type.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For example, properties that take the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> type can take either <ph id="ph2">`true`</ph> or <ph id="ph3">`True`</ph> as equivalent values, but only because the native WPF XAML parser type conversion for string to <ph id="ph4">&lt;xref:System.Boolean&gt;</ph> already permits these as equivalents.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>WPF XAML processors and serializers will ignore or drop all nonsignificant white space, and will normalize any significant white space.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This is consistent with the default white-space behavior recommendations of the XAML specification.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This behavior is generally only of consequence when you specify strings within XAML content properties.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In simplest terms, XAML converts space, linefeed and tab characters into spaces, and then preserves one space if found at either end of a contiguous string.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The full explanation of XAML white-space handling is not covered in this topic.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>White space processing in XAML<ept id="p1">](../../xaml-services/whitespace-processing-in-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Markup extensions</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Markup extensions are a XAML language concept.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When used to provide the value of an attribute syntax, curly braces (<ph id="ph1">`{`</ph> and <ph id="ph2">`}`</ph>) indicate a markup extension usage.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This usage directs the XAML processing to escape from the general treatment of attribute values as either a literal string or a string-convertible value.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The most common markup extensions used in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application programming are <bpt id="p1">[</bpt>Binding<ept id="p1">](binding-markup-extension.md)</ept>, used for data binding expressions, and the resource references <bpt id="p2">[</bpt>StaticResource<ept id="p2">](staticresource-markup-extension.md)</ept> and <bpt id="p3">[</bpt>DynamicResource<ept id="p3">](dynamicresource-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>By using markup extensions, you can use attribute syntax to provide values for properties even if that property does not support an attribute syntax in general.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Markup extensions often use intermediate expression types to enable features such as deferring values or referencing other objects that are only present at run time.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example, the following markup sets the value of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property using attribute syntax.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property takes an instance of the <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> class, which by default could not be instantiated by an attribute syntax string.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>But in this case, the attribute references a particular markup extension, <bpt id="p1">[</bpt>StaticResource<ept id="p1">](staticresource-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>When that markup extension is processed, it returns a reference to a style that was previously instantiated as a keyed resource in a resource dictionary.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For a reference listing of all markup extensions for XAML implemented specifically in WPF, see <bpt id="p1">[</bpt>WPF XAML Extensions<ept id="p1">](wpf-xaml-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For a reference listing of the markup extensions that are defined by System.Xaml and are more widely available for .NET Framework XAML implementations, see <bpt id="p1">[</bpt>XAML Namespace (x:) Language Features<ept id="p1">](../../xaml-services/xaml-namespace-x-language-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For more information about markup extension concepts, see <bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](markup-extensions-and-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Type converters</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>XAML Syntax in Brief<ept id="p1">](xaml-overview-wpf.md#xaml_syntax_in_brief)</ept> section, it was stated that the attribute value must be able to be set by a string.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The basic, native handling of how strings are converted into other object types or primitive values is based on the <ph id="ph1">&lt;xref:System.String&gt;</ph> type itself, in addition to native processing for certain types such as <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> or <ph id="ph3">&lt;xref:System.Uri&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>But many <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> types or members of those types extend the basic string attribute processing behavior, in such a way that instances of more complex object types can be specified as strings and attributes.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph> structure is an example of a type that has a type conversion enabled for XAML usages.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph> indicates measurements within a nested rectangle and is used as the value for properties such as <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>By placing a type converter on <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph>, all properties that use a <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> are easier to specify in XAML because they can be specified as attributes.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following example uses a type conversion and attribute syntax to provide a value for a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The previous attribute syntax example is equivalent to the following more verbose syntax example, where the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> is instead set through property element syntax containing a <ph id="ph2">&lt;xref:System.Windows.Thickness&gt;</ph> object element.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The four key properties of <ph id="ph1">&lt;xref:System.Windows.Thickness&gt;</ph> are set as attributes on the new instance:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>There are also a limited number of objects where the type conversion is the only public way to set a property to that type without involving a subclass, because the type itself does not have a default constructor.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>An example is <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For more information on how type conversion and its use for attribute syntax is supported, see <bpt id="p1">[</bpt>TypeConverters and XAML<ept id="p1">](typeconverters-and-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>XAML root elements and XAML namespaces</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A XAML file must have only one root element, in order to be both a well-formed <ph id="ph1">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> file and a valid XAML file.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For typical WPF scenarios, you use a root element that has a prominent meaning in the WPF application model (for example, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> for a page, <ph id="ph3">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> for an external dictionary, or <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph> for the application definition).</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The following example shows the root element of a typical XAML file for a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> page, with the root element of <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The root element also contains the attributes <ph id="ph1">`xmlns`</ph> and <ph id="ph2">`xmlns:x`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>These attributes indicate to a XAML processor which XAML namespaces contain the type definitions for backing types that the markup will reference as elements.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xmlns`</ph> attribute specifically indicates the default XAML namespace.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Within the default XAML namespace, object elements in the markup can be specified without a prefix.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For most <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application scenarios, and for almost all of the examples given in the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> sections of the <ph id="ph3">[!INCLUDE[TLA2#tla_sdk](../../../../includes/tla2sharptla-sdk-md.md)]</ph>, the default XAML namespace is mapped to the <ph id="ph4">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> namespace <ph id="ph5">[!INCLUDE[TLA#tla_wpfxmlnsv1](../../../../includes/tlasharptla-wpfxmlnsv1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xmlns:x`</ph> attribute indicates an additional XAML namespace, which maps the XAML language namespace <ph id="ph2">[!INCLUDE[TLA#tla_xamlxmlnsv1](../../../../includes/tlasharptla-xamlxmlnsv1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This usage of <ph id="ph1">`xmlns`</ph> to define a scope for usage and mapping of a namescope is consistent with the XML 1.0 specification.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>XAML namescopes are different from XML namescopes only in that a XAML namescope also implies something about how the namescope's elements are backed by types when it comes to type resolution and parsing the XAML.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`xmlns`</ph> attributes are only strictly necessary on the root element of each XAML file.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`xmlns`</ph> definitions will apply to all descendant elements of the root element (this behavior is again consistent with the XML 1.0 specification for <ph id="ph2">`xmlns`</ph>.) <ph id="ph3">`xmlns`</ph> attributes are also permitted on other elements underneath the root, and would apply to any descendant elements of the defining element.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>However, frequent definition or redefinition of XAML namespaces can result in a XAML markup style that is difficult to read.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> implementation of its XAML processor includes an infrastructure that has awareness of the WPF core assemblies.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> core assemblies are known to contain the types that support the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> mappings to the default XAML namespace.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This is enabled through configuration that is part of your project build file and the WPF build and project systems.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Therefore, declaring the default XAML namespace as the default <ph id="ph1">`xmlns`</ph> is all that is necessary in order to reference XAML elements that come from <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> assemblies.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The x: prefix</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>In the previous root element example, the prefix <ph id="ph1">`x:`</ph> was used to map the XAML namespace <ph id="ph2">[!INCLUDE[TLA#tla_xamlxmlnsv1](../../../../includes/tlasharptla-xamlxmlnsv1-md.md)]</ph>, which is the dedicated XAML namespace that supports XAML language constructs.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`x:`</ph> prefix is used for mapping this XAML namespace in the templates for projects, in examples, and in documentation throughout this <ph id="ph2">[!INCLUDE[TLA2#tla_sdk](../../../../includes/tla2sharptla-sdk-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The XAML namespace for the XAML language contain several programming constructs that you will use very frequently in your XAML.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The following is a listing of the most common <ph id="ph1">`x:`</ph> prefix programming constructs you will use:</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Key<ept id="p1">](../../xaml-services/x-key-directive.md)</ept>: Sets a unique key for each resource in a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> (or similar dictionary concepts in other frameworks).</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Key`</ph> will probably account for 90% of the <ph id="ph2">`x:`</ph> usages you will see in a typical WPF application's markup.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Class<ept id="p1">](../../xaml-services/x-class-directive.md)</ept>: Specifies the <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> namespace and class name for the class that provides code-behind for a XAML page.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>You must have such a class to support code-behind per the WPF programming model, and therefore you almost always see <ph id="ph1">`x:`</ph> mapped, even if there are no resources.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Name<ept id="p1">](../../xaml-services/x-name-directive.md)</ept>: Specifies a run-time object name for the instance that exists in run-time code after an object element is processed.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>In general, you will frequently use a WPF-defined equivalent property for <bpt id="p1">[</bpt>x:Name<ept id="p1">](../../xaml-services/x-name-directive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Such properties map specifically to a CLR backing property and are thus more convenient for application programming, where you frequently use run time code to find the named elements from initialized XAML.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The most common such property is <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>You might still use <bpt id="p1">[</bpt>x:Name<ept id="p1">](../../xaml-services/x-name-directive.md)</ept> when the equivalent WPF framework-level <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property is not supported in a particular type.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This occurs in certain animation scenarios.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Static<ept id="p1">](../../xaml-services/x-static-markup-extension.md)</ept>: Enables a reference that returns a static value that is not otherwise a XAML-compatible property.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Type<ept id="p1">](../../xaml-services/x-type-markup-extension.md)</ept>: Constructs a <ph id="ph1">&lt;xref:System.Type&gt;</ph> reference based on a type name.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>This is used to specify attributes that take <ph id="ph1">&lt;xref:System.Type&gt;</ph>, such as <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType&gt;</ph>, although frequently the property has native string-to-<ph id="ph3">&lt;xref:System.Type&gt;</ph> conversion in such a way that the <bpt id="p1">[</bpt>x:Type<ept id="p1">](../../xaml-services/x-type-markup-extension.md)</ept> markup extension usage is optional.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>There are additional programming constructs in the <ph id="ph1">`x:`</ph> prefix/XAML namespace, which are not as common.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>XAML Namespace (x:) Language Features<ept id="p1">](../../xaml-services/xaml-namespace-x-language-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Custom prefixes and custom types in XAML</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For your own custom assemblies, or for assemblies outside the WPF core of PresentationCore, PresentationFramework and WindowsBase, you can specify the assembly as part of a custom <ph id="ph1">`xmlns`</ph> mapping.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can then reference types from that assembly in your XAML, so long as that type is correctly implemented to support the XAML usages you are attempting.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The following is a very basic example of how custom prefixes work in XAML markup.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The prefix <ph id="ph1">`custom`</ph> is defined in the root element tag, and mapped to a specific assembly that is packaged and available with the application.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>This assembly contains a type <ph id="ph1">`NumericUpDown`</ph>, which is implemented to support general XAML usage as well as using a class inheritance that permits its insertion at this particular point in a WPF XAML content model.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>An instance of this <ph id="ph1">`NumericUpDown`</ph> control is declared as an object element, using the prefix so that a XAML parser knows which XAML namespace contains the type, and therefore where the backing assembly is that contains the type definition.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>For more information about custom types in XAML, see <bpt id="p1">[</bpt>XAML and Custom Classes for WPF<ept id="p1">](xaml-and-custom-classes-for-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>For more information about how XML namespaces and the namespaces of the backing code in assemblies are related, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Events and XAML code-behind</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Most <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications consist of both XAML markup and code-behind.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Within a project, the XAML is written as a <ph id="ph1">`.xaml`</ph> file, and a <ph id="ph2">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> language such as Microsoft Visual Basic or C# is used to write a code-behind file.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>When a XAML file is markup compiled as part of the WPF programming and application models, the location of the XAML code-behind file for a XAML file is identified by specifying a namespace and class as the <ph id="ph1">`x:Class`</ph> attribute of the root element of the XAML.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>In the examples so far, you have seen several buttons, but none of these buttons had any logical behavior associated with them yet.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The primary application-level mechanism for adding a behavior for an object element is to use an existing event of the element class, and to write a specific handler for that event that is invoked when that event is raised at run time.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The event name and the name of the handler to use are specified in the markup, whereas the code that implements your handler is defined in the code-behind.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Notice that the code-behind file uses the CLR namespace <ph id="ph1">`ExampleNamespace`</ph> and declares <ph id="ph2">`ExamplePage`</ph> as a partial class within that namespace.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This parallels the <ph id="ph1">`x:Class`</ph> attribute value of <ph id="ph2">`ExampleNamespace`</ph>.<ph id="ph3">`ExamplePage`</ph></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>that was provided in the markup root.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The WPF markup compiler will create a partial class for any compiled XAML file, by deriving a class from the root element type.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>When you provide code-behind that also defines the same partial class, the resulting code is combined within the same namespace and class of the compiled application.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>For more information about requirements for code-behind programming in WPF, see the "Code-behind, Event Handler, and Partial Class Requirements" section of <bpt id="p1">[</bpt>Code-Behind and XAML in WPF<ept id="p1">](code-behind-and-xaml-in-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>If you do not want to create a separate code-behind file, you can also inline your code in a XAML file.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>However, inline code is a less versatile technique that has substantial limitations.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Code-Behind and XAML in WPF<ept id="p1">](code-behind-and-xaml-in-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Routed events</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>A particular event feature that is fundamental to <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> is a routed event.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Routed events enable an element to handle an event that was raised by a different element, as long as the elements are connected through a tree relationship.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>When specifying event handling with a XAML attribute, the routed event can be listened for and handled on any element, including elements that do not list that particular event in the class members table.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This is accomplished by qualifying the event name attribute with the owning class name.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For instance, the parent <ph id="ph1">`StackPanel`</ph> in the ongoing <ph id="ph2">`StackPanel`</ph><ph id="ph3"> / </ph><ph id="ph4">`Button`</ph> example could register a handler for the child element button's <ph id="ph5">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event by specifying the attribute <ph id="ph6">`Button.Click`</ph> on the <ph id="ph7">`StackPanel`</ph> object element, with your handler name as the attribute value.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>For more information about how routed events work, see <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](routed-events-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>XAML named elements</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>By default, the object instance that is created in an object graph by processing a XAML object element does not possess a unique identifier or object reference.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>In contrast, if you call a constructor in code, you almost always use the constructor result to set a variable to the constructed instance, so that you can reference the instance later in your code.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>In order to provide standardized access to objects that were created through a markup definition, XAML defines the <bpt id="p1">[</bpt>x:Name attribute<ept id="p1">](../../xaml-services/x-name-directive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>You can set the value of the <ph id="ph1">`x:Name`</ph> attribute on any object element.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>In your code-behind, the identifier you choose is equivalent to an instance variable that refers to the constructed instance.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>In all respects, named elements function as if they were object instances (the name references that instance), and your code-behind can reference the named elements to handle run-time interactions within the application.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>This connection between instances and variables is accomplished by the WPF XAML markup compiler, and more specifically involve features and patterns such as <ph id="ph1">&lt;xref:System.Windows.Markup.IComponentConnector.InitializeComponent%2A&gt;</ph> that will not be discussed in detail in this topic.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>WPF framework-level XAML elements inherit a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property, which is equivalent to the XAML defined <ph id="ph2">`x:Name`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Certain other classes also provide property-level equivalents for <ph id="ph1">`x:Name`</ph>, which is also generally defined as a <ph id="ph2">`Name`</ph> property.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Generally speaking, if you cannot find a <ph id="ph1">`Name`</ph> property in the members table for your chosen element/type, use <ph id="ph2">`x:Name`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`x:Name`</ph> values will provide an identifier to a XAML element that can be used at run time, either by specific subsystems or by utility methods such as <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The following example sets <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Then, a handler on a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> within that <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> references the <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> through its instance reference <ph id="ph4">`buttonContainer`</ph> as set by <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Just like a variable, the XAML name for an instance is governed by a concept of scope, so that names can be enforced to be unique within a certain scope that is predictable.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The primary markup that defines a page denotes one unique XAML namescope, with the XAML namescope boundary being the root element of that page.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>However, other markup sources can interact with a page at run time, such as styles or templates within styles, and such markup sources often have their own XAML namescopes that do not necessarily connect with the XAML namescope of the page.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`x:Name`</ph> and XAML namescopes, see <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>, <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](../../xaml-services/x-name-directive.md)</ept>, or <bpt id="p2">[</bpt>WPF XAML Namescopes<ept id="p2">](wpf-xaml-namescopes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Attached properties and attached events</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>XAML specifies a language feature that enables certain properties or events to be specified on any element, regardless of whether the property or event exists in the type's definitions for the element it is being set on.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The properties version of this feature is called an attached property, the events version is called an attached event.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Conceptually, you can think of attached properties and attached events as global members that can be set on any XAML element/object instance.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>However, that element/class or a larger infrastructure must support a backing property store for the attached values.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Attached properties in XAML are typically used through attribute syntax.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>In attribute syntax, you specify an attached property in the form <bpt id="p1">*</bpt>ownerType<ept id="p1">*</ept>.<bpt id="p2">*</bpt>propertyName<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Superficially, this resembles a property element usage, but in this case the <bpt id="p1">*</bpt>ownerType<ept id="p1">*</ept> you specify is always a different type than the object element where the attached property is being set.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ownerType<ept id="p1">*</ept> is the type that provides the accessor methods that are required by a XAML processor in order to get or set the attached property value.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The most common scenario for attached properties is to enable child elements to report a property value to their parent element.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> class defines the accessors for <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph> and therefore owns the attached property.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> class also includes logic that iterates its child elements and specifically checks each element for a set value of <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>If a value is found, that value is used during layout to position the child elements.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Use of the <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType&gt;</ph> attached property and this positioning capability is in fact the motivating scenario for the <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, most or all the attached properties are also implemented as dependency properties.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](attached-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Attached events use a similar <bpt id="p1">*</bpt>ownerType<ept id="p1">*</ept>.<bpt id="p2">*</bpt>eventName<ept id="p2">*</ept> form of attribute syntax.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Just like the non-attached events, the attribute value for an attached event in XAML specifies the name of the handler method that is invoked when the event is handled on the element.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Attached event usages in WPF XAML are less common.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Attached Events Overview<ept id="p1">](attached-events-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Base types and XAML</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Underlying WPF XAML and its XAML namespace is a collection of types that correspond to <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> objects in addition to markup elements for XAML.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>However, not all classes can be mapped to elements.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Abstract classes, such as <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph>, and certain nonabstract base classes are used for inheritance in the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> objects model.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Base classes, including abstract ones, are still important to XAML development because each of the concrete XAML elements inherits members from some base class in its hierarchy.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Often these members include properties that can be set as attributes on the element, or events that can be handled.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is the concrete base <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> class of <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> at the WPF framework level.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>When designing <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, you will use various shape, panel, decorator, or control classes, which all derive from <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A related base class, <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>, supports document-oriented elements that work well for a flow layout presentation, using <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> that deliberately mirror the <ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> in <ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The combination of attributes at the element level and a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> object model provides you with a set of common properties that are settable on most concrete XAML elements, regardless of the specific XAML element and its underlying type.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>XAML security</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>XAML is a markup language that directly represents object instantiation and execution.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Therefore, elements created in XAML have the same ability to interact with system resources (network access, file system IO, for example) as the equivalent generated code does.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> supports the  <ph id="ph2">[!INCLUDE[net_v40_short](../../../../includes/net-v40-short-md.md)]</ph> security framework <ph id="ph3">[!INCLUDE[TLA#tla_cas](../../../../includes/tlasharptla-cas-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>This means that <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content running in the internet zone has reduced execution permissions.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>"Loose XAML" (pages of noncompiled XAML interpreted at load time by a XAML viewer) and <ph id="ph1">[!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)]</ph> are usually run in this internet zone and use the same permission set.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>However, XAML loaded in to a fully trusted application has the same access to the system resources as the hosting application does.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WPF Partial Trust Security<ept id="p1">](../wpf-partial-trust-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Loading XAML from code</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>XAML can be used to define all of the UI, but it is sometimes also appropriate to define just a piece of the UI in XAML.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>This capability could be used to enable partial customization, local storage of information, using XAML to provide a business object, or a variety of possible scenarios.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The key to these scenarios is the <ph id="ph1">&lt;xref:System.Windows.Markup.XamlReader&gt;</ph> class and its <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The input is a XAML file, and the output is an object that represents all of the run-time tree of objects that was created from that markup.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>You then can insert the object to be a property of another object that already exists in the application.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>So long as the property is an appropriate property in the content model that has eventual display capabilities and that will notify the execution engine that new content has been added into the application, you can modify a running application's contents very easily by loading in XAML.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Note that this capability is generally only available in full-trust applications, because of the obvious security implications of loading files into applications as they run.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>What's next</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>This topic provides a basic introduction to XAML syntax concepts and terminology as it applies to WPF.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For more information about the terms used here, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](xaml-syntax-in-detail.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>If you have not already done this, try the exercises in the tutorial topic <bpt id="p1">[</bpt>Walkthrough: My first WPF desktop application<ept id="p1">](../getting-started/walkthrough-my-first-wpf-desktop-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>When you create the markup-centric application described by the tutorial, the exercise will help reinforce many of the concepts described in this topic.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> uses a particular application model that is based on the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Application Management Overview<ept id="p1">](../app-development/application-management-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Building a WPF Application<ept id="p1">](../app-development/building-a-wpf-application-wpf.md)</ept> gives you more details about how to build XAML inclusive applications from the command line and with <ph id="ph1">[!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](dependency-properties-overview.md)</ept> gives more information about the versatility of properties in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, and introduces the concept of dependency properties.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](xaml-syntax-in-detail.md)</ept></source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML and Custom Classes for WPF<ept id="p1">](xaml-and-custom-classes-for-wpf.md)</ept></source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML Namespace (x:) Language Features<ept id="p1">](../../xaml-services/xaml-namespace-x-language-features.md)</ept></source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF XAML Extensions<ept id="p1">](wpf-xaml-extensions.md)</ept></source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](base-elements-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](trees-in-wpf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>