{"content":"# [C# Operators](index.md)\n## [[] Operator](index-operator.md)\n## [() Operator](invocation-operator.md)\n## [. Operator](member-access-operator.md)\n## [:: Operator](namespace-alias-qualifer.md)\n## [+ Operator](addition-operator.md)\n## [- Operator](subtraction-operator.md)\n## [* Operator](multiplication-operator.md)\n## [/ Operator](division-operator.md)\n## [% Operator](modulus-operator.md)\n## [& Operator](and-operator.md)\n## [| Operator](or-operator.md)\n## [^ Operator](xor-operator.md)\n## [! Operator](logical-negation-operator.md)\n## [~ Operator](bitwise-complement-operator.md)\n## [= Operator](assignment-operator.md)\n## [< Operator](less-than-operator.md)\n## [> Operator](greater-than-operator.md)\n## [?: Operator](conditional-operator.md)\n## [++ Operator](increment-operator.md)\n## [-- Operator](decrement-operator.md)\n## [&& Operator](conditional-and-operator.md)\n## [|| Operator](conditional-or-operator.md)\n## [<< Operator](left-shift-operator.md)\n## [>> Operator](right-shift-operator.md)\n## [== Operator](equality-comparison-operator.md)\n## [!= Operator](not-equal-operator.md)\n## [<= Operator](less-than-equal-operator.md)\n## [>= Operator](greater-than-equal-operator.md)\n## [+= Operator](addition-assignment-operator.md)\n## [-= Operator](subtraction-assignment-operator.md)\n## [*= Operator](multiplication-assignment-operator.md)\n## [/= Operator](division-assignment-operator.md)\n## [%= Operator](modulus-assignment-operator.md)\n## [&= Operator](and-assignment-operator.md)\n## [|= Operator](or-assignment-operator.md)\n## [^= Operator](xor-assignment-operator.md)\n## [<<= Operator](left-shift-assignment-operator.md)\n## [>>= Operator](right-shift-assignment-operator.md)\n## [-> Operator](dereference-operator.md)\n## [?? Operator](null-conditional-operator.md)\n## [=> Operator](lambda-operator.md)\n## [Null-conditional Operators (C# and Visual Basic)](null-conditional-operators.md)\n","nodes":[{"pos":[2,26],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","linkify":"[C# Operators](index.md)","source":"[C# Operators](index.md)"},{"pos":[30,62],"content":"<bpt id=\"p1\">[</bpt>[] Operator<ept id=\"p1\">](index-operator.md)</ept>","linkify":"[[] Operator](index-operator.md)","source":"[[] Operator](index-operator.md)"},{"pos":[66,103],"content":"<bpt id=\"p1\">[</bpt>() Operator<ept id=\"p1\">](invocation-operator.md)</ept>","linkify":"[() Operator](invocation-operator.md)","source":"[() Operator](invocation-operator.md)"},{"pos":[107,146],"content":"<bpt id=\"p1\">[</bpt>. Operator<ept id=\"p1\">](member-access-operator.md)</ept>","linkify":"[. Operator](member-access-operator.md)","source":"[. Operator](member-access-operator.md)"},{"pos":[150,192],"content":"<bpt id=\"p1\">[</bpt>:: Operator<ept id=\"p1\">](namespace-alias-qualifer.md)</ept>","linkify":"[:: Operator](namespace-alias-qualifer.md)","source":"[:: Operator](namespace-alias-qualifer.md)"},{"pos":[196,230],"content":"<bpt id=\"p1\">[</bpt>+ Operator<ept id=\"p1\">](addition-operator.md)</ept>","linkify":"[+ Operator](addition-operator.md)","source":"[+ Operator](addition-operator.md)"},{"pos":[234,271],"content":"<bpt id=\"p1\">[</bpt>- Operator<ept id=\"p1\">](subtraction-operator.md)</ept>","linkify":"[- Operator](subtraction-operator.md)","source":"[- Operator](subtraction-operator.md)"},{"pos":[275,315],"content":"<bpt id=\"p1\">[</bpt>* Operator<ept id=\"p1\">](multiplication-operator.md)</ept>","linkify":"[* Operator](multiplication-operator.md)","source":"[* Operator](multiplication-operator.md)"},{"pos":[319,353],"content":"<bpt id=\"p1\">[</bpt>/ Operator<ept id=\"p1\">](division-operator.md)</ept>","linkify":"[/ Operator](division-operator.md)","source":"[/ Operator](division-operator.md)"},{"pos":[357,390],"content":"<bpt id=\"p1\">[</bpt>% Operator<ept id=\"p1\">](modulus-operator.md)</ept>","linkify":"[% Operator](modulus-operator.md)","source":"[% Operator](modulus-operator.md)"},{"pos":[394,423],"content":"<bpt id=\"p1\">[</bpt>&amp; Operator<ept id=\"p1\">](and-operator.md)</ept>","linkify":"[& Operator](and-operator.md)","source":"[& Operator](and-operator.md)"},{"pos":[427,455],"content":"<bpt id=\"p1\">[</bpt>| Operator<ept id=\"p1\">](or-operator.md)</ept>","linkify":"[| Operator](or-operator.md)","source":"[| Operator](or-operator.md)"},{"pos":[459,488],"content":"<bpt id=\"p1\">[</bpt>^ Operator<ept id=\"p1\">](xor-operator.md)</ept>","linkify":"[^ Operator](xor-operator.md)","source":"[^ Operator](xor-operator.md)"},{"pos":[492,534],"content":"<bpt id=\"p1\">[</bpt>! Operator<ept id=\"p1\">](logical-negation-operator.md)</ept>","linkify":"[! Operator](logical-negation-operator.md)","source":"[! Operator](logical-negation-operator.md)"},{"pos":[538,582],"content":"<bpt id=\"p1\">[</bpt>~ Operator<ept id=\"p1\">](bitwise-complement-operator.md)</ept>","linkify":"[~ Operator](bitwise-complement-operator.md)","source":"[~ Operator](bitwise-complement-operator.md)"},{"pos":[586,622],"content":"<bpt id=\"p1\">[</bpt>= Operator<ept id=\"p1\">](assignment-operator.md)</ept>","linkify":"[= Operator](assignment-operator.md)","source":"[= Operator](assignment-operator.md)"},{"pos":[626,661],"content":"<bpt id=\"p1\">[</bpt>&lt; Operator<ept id=\"p1\">](less-than-operator.md)</ept>","linkify":"[< Operator](less-than-operator.md)","source":"[< Operator](less-than-operator.md)"},{"pos":[665,703],"content":"<bpt id=\"p1\">[</bpt>&gt; Operator<ept id=\"p1\">](greater-than-operator.md)</ept>","linkify":"[> Operator](greater-than-operator.md)","source":"[> Operator](greater-than-operator.md)"},{"pos":[707,745],"content":"<bpt id=\"p1\">[</bpt>?: Operator<ept id=\"p1\">](conditional-operator.md)</ept>","linkify":"[?: Operator](conditional-operator.md)","source":"[?: Operator](conditional-operator.md)"},{"pos":[749,785],"content":"<bpt id=\"p1\">[</bpt>++ Operator<ept id=\"p1\">](increment-operator.md)</ept>","linkify":"[++ Operator](increment-operator.md)","source":"[++ Operator](increment-operator.md)"},{"pos":[789,825],"content":"<bpt id=\"p1\">[</bpt>-- Operator<ept id=\"p1\">](decrement-operator.md)</ept>","linkify":"[-- Operator](decrement-operator.md)","source":"[-- Operator](decrement-operator.md)"},{"pos":[829,871],"content":"<bpt id=\"p1\">[</bpt>&amp;&amp; Operator<ept id=\"p1\">](conditional-and-operator.md)</ept>","linkify":"[&& Operator](conditional-and-operator.md)","source":"[&& Operator](conditional-and-operator.md)"},{"pos":[875,916],"content":"<bpt id=\"p1\">[</bpt>|| Operator<ept id=\"p1\">](conditional-or-operator.md)</ept>","linkify":"[|| Operator](conditional-or-operator.md)","source":"[|| Operator](conditional-or-operator.md)"},{"pos":[920,957],"content":"<bpt id=\"p1\">[</bpt>&lt;&lt; Operator<ept id=\"p1\">](left-shift-operator.md)</ept>","linkify":"[<< Operator](left-shift-operator.md)","source":"[<< Operator](left-shift-operator.md)"},{"pos":[961,999],"content":"<bpt id=\"p1\">[</bpt>&gt;&gt; Operator<ept id=\"p1\">](right-shift-operator.md)</ept>","linkify":"[>> Operator](right-shift-operator.md)","source":"[>> Operator](right-shift-operator.md)"},{"pos":[1003,1049],"content":"<bpt id=\"p1\">[</bpt>== Operator<ept id=\"p1\">](equality-comparison-operator.md)</ept>","linkify":"[== Operator](equality-comparison-operator.md)","source":"[== Operator](equality-comparison-operator.md)"},{"pos":[1053,1089],"content":"<bpt id=\"p1\">[</bpt>!= Operator<ept id=\"p1\">](not-equal-operator.md)</ept>","linkify":"[!= Operator](not-equal-operator.md)","source":"[!= Operator](not-equal-operator.md)"},{"pos":[1093,1135],"content":"<bpt id=\"p1\">[</bpt>&lt;= Operator<ept id=\"p1\">](less-than-equal-operator.md)</ept>","linkify":"[<= Operator](less-than-equal-operator.md)","source":"[<= Operator](less-than-equal-operator.md)"},{"pos":[1139,1184],"content":"<bpt id=\"p1\">[</bpt>&gt;= Operator<ept id=\"p1\">](greater-than-equal-operator.md)</ept>","linkify":"[>= Operator](greater-than-equal-operator.md)","source":"[>= Operator](greater-than-equal-operator.md)"},{"pos":[1188,1234],"content":"<bpt id=\"p1\">[</bpt>+= Operator<ept id=\"p1\">](addition-assignment-operator.md)</ept>","linkify":"[+= Operator](addition-assignment-operator.md)","source":"[+= Operator](addition-assignment-operator.md)"},{"pos":[1238,1287],"content":"<bpt id=\"p1\">[</bpt>-= Operator<ept id=\"p1\">](subtraction-assignment-operator.md)</ept>","linkify":"[-= Operator](subtraction-assignment-operator.md)","source":"[-= Operator](subtraction-assignment-operator.md)"},{"pos":[1291,1343],"content":"<bpt id=\"p1\">[</bpt>*= Operator<ept id=\"p1\">](multiplication-assignment-operator.md)</ept>","linkify":"[*= Operator](multiplication-assignment-operator.md)","source":"[*= Operator](multiplication-assignment-operator.md)"},{"pos":[1347,1393],"content":"<bpt id=\"p1\">[</bpt>/= Operator<ept id=\"p1\">](division-assignment-operator.md)</ept>","linkify":"[/= Operator](division-assignment-operator.md)","source":"[/= Operator](division-assignment-operator.md)"},{"pos":[1397,1442],"content":"<bpt id=\"p1\">[</bpt>%= Operator<ept id=\"p1\">](modulus-assignment-operator.md)</ept>","linkify":"[%= Operator](modulus-assignment-operator.md)","source":"[%= Operator](modulus-assignment-operator.md)"},{"pos":[1446,1487],"content":"<bpt id=\"p1\">[</bpt>&amp;= Operator<ept id=\"p1\">](and-assignment-operator.md)</ept>","linkify":"[&= Operator](and-assignment-operator.md)","source":"[&= Operator](and-assignment-operator.md)"},{"pos":[1491,1531],"content":"<bpt id=\"p1\">[</bpt>|= Operator<ept id=\"p1\">](or-assignment-operator.md)</ept>","linkify":"[|= Operator](or-assignment-operator.md)","source":"[|= Operator](or-assignment-operator.md)"},{"pos":[1535,1576],"content":"<bpt id=\"p1\">[</bpt>^= Operator<ept id=\"p1\">](xor-assignment-operator.md)</ept>","linkify":"[^= Operator](xor-assignment-operator.md)","source":"[^= Operator](xor-assignment-operator.md)"},{"pos":[1580,1629],"content":"<bpt id=\"p1\">[</bpt>&lt;&lt;= Operator<ept id=\"p1\">](left-shift-assignment-operator.md)</ept>","linkify":"[<<= Operator](left-shift-assignment-operator.md)","source":"[<<= Operator](left-shift-assignment-operator.md)"},{"pos":[1633,1683],"content":"<bpt id=\"p1\">[</bpt>&gt;&gt;= Operator<ept id=\"p1\">](right-shift-assignment-operator.md)</ept>","linkify":"[>>= Operator](right-shift-assignment-operator.md)","source":"[>>= Operator](right-shift-assignment-operator.md)"},{"pos":[1687,1725],"content":"<bpt id=\"p1\">[</bpt>-&gt; Operator<ept id=\"p1\">](dereference-operator.md)</ept>","linkify":"[-> Operator](dereference-operator.md)","source":"[-> Operator](dereference-operator.md)"},{"pos":[1729,1772],"content":"<bpt id=\"p1\">[</bpt>?? Operator<ept id=\"p1\">](null-conditional-operator.md)</ept>","linkify":"[?? Operator](null-conditional-operator.md)","source":"[?? Operator](null-conditional-operator.md)"},{"pos":[1776,1809],"content":"<bpt id=\"p1\">[</bpt>=&gt; Operator<ept id=\"p1\">](lambda-operator.md)</ept>","linkify":"[=> Operator](lambda-operator.md)","source":"[=> Operator](lambda-operator.md)"},{"pos":[1813,1894],"content":"<bpt id=\"p1\">[</bpt>Null-conditional Operators (C# and Visual Basic)<ept id=\"p1\">](null-conditional-operators.md)</ept>","linkify":"[Null-conditional Operators (C# and Visual Basic)](null-conditional-operators.md)","source":"[Null-conditional Operators (C# and Visual Basic)](null-conditional-operators.md)"}]}