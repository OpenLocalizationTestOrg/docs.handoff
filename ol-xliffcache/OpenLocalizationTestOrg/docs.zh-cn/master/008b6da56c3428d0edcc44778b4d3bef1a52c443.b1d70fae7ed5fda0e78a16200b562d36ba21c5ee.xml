{"content":"---\ntitle: \"How to: Host Controls in Windows Forms DataGridView Cells\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"controls [Windows Forms], hosting in cells\"\n  - \"DataGridView control [Windows Forms], hosting controls in cells\"\n  - \"cells [Windows Forms], hosting controls\"\nms.assetid: e79a9d4e-64ec-41f5-93ec-f5492633cbb2\n---\n# How to: Host Controls in Windows Forms DataGridView Cells\nThe <xref:System.Windows.Forms.DataGridView> control provides several column types, enabling your users to enter and edit values in a variety of ways. If these column types do not meet your data-entry needs, however, you can create your own column types with cells that host controls of your choosing. To do this, you must define classes that derive from <xref:System.Windows.Forms.DataGridViewColumn> and <xref:System.Windows.Forms.DataGridViewCell>. You must also define a class that derives from <xref:System.Windows.Forms.Control> and implements the <xref:System.Windows.Forms.IDataGridViewEditingControl> interface.  \n  \n The following code example shows how to create a calendar column. The cells of this column display dates in ordinary text box cells, but when the user edits a cell, a <xref:System.Windows.Forms.DateTimePicker> control appears. In order to avoid having to implement text box display functionality again, the `CalendarCell` class derives from the <xref:System.Windows.Forms.DataGridViewTextBoxCell> class rather than inheriting the <xref:System.Windows.Forms.DataGridViewCell> class directly.  \n  \n> [!NOTE]\n>  When you derive from <xref:System.Windows.Forms.DataGridViewCell> or <xref:System.Windows.Forms.DataGridViewColumn> and add new properties to the derived class, be sure to override the `Clone` method to copy the new properties during cloning operations. You should also call the base class's `Clone` method so that the properties of the base class are copied to the new cell or column.  \n  \n## Example  \n [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#000](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#000)]\n [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#000](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#000)]  \n  \n## Compiling the Code  \n The following example requires:  \n  \n-   References to the System and System.Windows.Forms assemblies.  \n  \n For information about building this example from the command line for Visual Basic or Visual C#, see [Building from the Command Line](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md) or [Command-line Building With csc.exe](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md). You can also build this example in Visual Studio by pasting the code into a new project.  \n  \n## See also\n\n- <xref:System.Windows.Forms.DataGridView>\n- <xref:System.Windows.Forms.DataGridViewColumn>\n- <xref:System.Windows.Forms.DataGridViewCell>\n- <xref:System.Windows.Forms.DataGridViewTextBoxCell>\n- <xref:System.Windows.Forms.IDataGridViewEditingControl>\n- <xref:System.Windows.Forms.DateTimePicker>\n- [Customizing the Windows Forms DataGridView Control](customizing-the-windows-forms-datagridview-control.md)\n- [DataGridView Control Architecture](datagridview-control-architecture-windows-forms.md)\n- [Column Types in the Windows Forms DataGridView Control](column-types-in-the-windows-forms-datagridview-control.md)\n","nodes":[{"pos":[4,362],"embed":true,"restype":"x-metadata","content":"title: \"How to: Host Controls in Windows Forms DataGridView Cells\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"controls [Windows Forms], hosting in cells\"\n  - \"DataGridView control [Windows Forms], hosting controls in cells\"\n  - \"cells [Windows Forms], hosting controls\"\nms.assetid: e79a9d4e-64ec-41f5-93ec-f5492633cbb2","nodes":[{"content":"How to: Host Controls in Windows Forms DataGridView Cells","nodes":[{"pos":[0,57],"content":"How to: Host Controls in Windows Forms DataGridView Cells","nodes":[{"content":"How to: Host Controls in Windows Forms DataGridView Cells","pos":[0,57]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[369,426],"content":"How to: Host Controls in Windows Forms DataGridView Cells","linkify":"How to: Host Controls in Windows Forms DataGridView Cells","nodes":[{"content":"How to: Host Controls in Windows Forms DataGridView Cells","pos":[0,57]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control provides several column types, enabling your users to enter and edit values in a variety of ways.","pos":[427,577],"source":"The <xref:System.Windows.Forms.DataGridView> control provides several column types, enabling your users to enter and edit values in a variety of ways."},{"content":"If these column types do not meet your data-entry needs, however, you can create your own column types with cells that host controls of your choosing.","pos":[578,728]},{"content":"To do this, you must define classes that derive from <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridViewColumn&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridViewCell&gt;</ph>.","pos":[729,878],"source":" To do this, you must define classes that derive from <xref:System.Windows.Forms.DataGridViewColumn> and <xref:System.Windows.Forms.DataGridViewCell>."},{"content":"You must also define a class that derives from <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control&gt;</ph> and implements the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.IDataGridViewEditingControl&gt;</ph> interface.","pos":[879,1047],"source":" You must also define a class that derives from <xref:System.Windows.Forms.Control> and implements the <xref:System.Windows.Forms.IDataGridViewEditingControl> interface."},{"content":"The following code example shows how to create a calendar column.","pos":[1054,1119]},{"content":"The cells of this column display dates in ordinary text box cells, but when the user edits a cell, a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> control appears.","pos":[1120,1280],"source":" The cells of this column display dates in ordinary text box cells, but when the user edits a cell, a <xref:System.Windows.Forms.DateTimePicker> control appears."},{"content":"In order to avoid having to implement text box display functionality again, the <ph id=\"ph1\">`CalendarCell`</ph> class derives from the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridViewTextBoxCell&gt;</ph> class rather than inheriting the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.DataGridViewCell&gt;</ph> class directly.","pos":[1281,1544],"source":" In order to avoid having to implement text box display functionality again, the `CalendarCell` class derives from the <xref:System.Windows.Forms.DataGridViewTextBoxCell> class rather than inheriting the <xref:System.Windows.Forms.DataGridViewCell> class directly."},{"pos":[1552,1948],"content":"[!NOTE]\n When you derive from <xref:System.Windows.Forms.DataGridViewCell> or <xref:System.Windows.Forms.DataGridViewColumn> and add new properties to the derived class, be sure to override the `Clone` method to copy the new properties during cloning operations. You should also call the base class's `Clone` method so that the properties of the base class are copied to the new cell or column.","leadings":["","> "],"nodes":[{"content":"When you derive from <xref:System.Windows.Forms.DataGridViewCell> or <xref:System.Windows.Forms.DataGridViewColumn> and add new properties to the derived class, be sure to override the `Clone` method to copy the new properties during cloning operations. You should also call the base class's `Clone` method so that the properties of the base class are copied to the new cell or column.","pos":[9,394],"nodes":[{"content":"When you derive from <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridViewCell&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridViewColumn&gt;</ph> and add new properties to the derived class, be sure to override the <ph id=\"ph3\">`Clone`</ph> method to copy the new properties during cloning operations.","pos":[0,253],"source":"When you derive from <xref:System.Windows.Forms.DataGridViewCell> or <xref:System.Windows.Forms.DataGridViewColumn> and add new properties to the derived class, be sure to override the `Clone` method to copy the new properties during cloning operations."},{"content":"You should also call the base class's <ph id=\"ph1\">`Clone`</ph> method so that the properties of the base class are copied to the new cell or column.","pos":[254,385],"source":" You should also call the base class's `Clone` method so that the properties of the base class are copied to the new cell or column."}]}]},{"pos":[1957,1964],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2380,2398],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"The following example requires:","pos":[2402,2433]},{"content":"References to the System and System.Windows.Forms assemblies.","pos":[2443,2504]},{"content":"For information about building this example from the command line for Visual Basic or Visual C#, see <bpt id=\"p1\">[</bpt>Building from the Command Line<ept id=\"p1\">](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept> or <bpt id=\"p2\">[</bpt>Command-line Building With csc.exe<ept id=\"p2\">](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>.","pos":[2511,2865],"source":"For information about building this example from the command line for Visual Basic or Visual C#, see [Building from the Command Line](../../../visual-basic/reference/command-line-compiler/building-from-the-command-line.md) or [Command-line Building With csc.exe](../../../csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)."},{"content":"You can also build this example in Visual Studio by pasting the code into a new project.","pos":[2866,2954]},{"pos":[2963,2971],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3271,3378],"content":"<bpt id=\"p1\">[</bpt>Customizing the Windows Forms DataGridView Control<ept id=\"p1\">](customizing-the-windows-forms-datagridview-control.md)</ept>","source":"[Customizing the Windows Forms DataGridView Control](customizing-the-windows-forms-datagridview-control.md)"},{"pos":[3381,3468],"content":"<bpt id=\"p1\">[</bpt>DataGridView Control Architecture<ept id=\"p1\">](datagridview-control-architecture-windows-forms.md)</ept>","source":"[DataGridView Control Architecture](datagridview-control-architecture-windows-forms.md)"},{"pos":[3471,3586],"content":"<bpt id=\"p1\">[</bpt>Column Types in the Windows Forms DataGridView Control<ept id=\"p1\">](column-types-in-the-windows-forms-datagridview-control.md)</ept>","source":"[Column Types in the Windows Forms DataGridView Control](column-types-in-the-windows-forms-datagridview-control.md)"}]}