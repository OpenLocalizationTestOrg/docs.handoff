{"content":"---\ntitle: \"How to: Create a Custom Activity Designer | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 2f3aade6-facc-44ef-9657-a407ef8b9b31\ncaps.latest.revision: 25\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Create a Custom Activity Designer\nCustom activity designers are typically implemented so that their associated activities are composable with other activities whose designers can be dropped on to the design surface with them. This functionality requires that a custom activity designer provide a \"drop zone\" where an arbitrary activity can be placed and also the means to manage the resulting collection of elements on the design surface. This topic describes how to create a custom activity designer that contains such a drop zone and how to create a custom activity designer that provides that editing functionality needed to manage the collection of designer elements.  \n  \n Custom activity designers typically inherit from <xref:System.Activities.Presentation.ActivityDesigner> which is the default base activity designer type for any activities without a specific designer. This type provides the design-time experience of interacting with the property grid and configuring basic aspects such as managing colors and icons.  \n  \n <xref:System.Activities.Presentation.ActivityDesigner> uses two helper controls, <xref:System.Activities.Presentation.WorkflowItemPresenter> and <xref:System.Activities.Presentation.WorkflowItemsPresenter> to make it easier to develop custom activity designers. They handle common functionality like dragging and dropping of child elements, deletion, selection, and addition of those child elements. The <xref:System.Activities.Presentation.WorkflowItemPresenter> allows a single child UI element inside, providing the \"drop zone\", it while the <xref:System.Activities.Presentation.WorkflowItemsPresenter> can provide support multiple UI elements, including additional functionality like the ordering, moving, deleting, and adding of child elements.  \n  \n The other key part of the story that needs highlighting in the implementation of a custom activity designer concerns the way in which the visual edits are bound using [!INCLUDE[avalon2](../../../includes/avalon2-md.md)] data binding to the instance stored in memory of what we are editing in the designer. This is accomplished by the Model Item tree, which is also responsible for enabling change notification and the tracking of events like changes in states.  \n  \n This topic outlines two procedures.  \n  \n1.  The first procedure describes how to create a custom activity designer with a <xref:System.Activities.Presentation.WorkflowItemPresenter> that provides the drop zone that receives other activities. This procedure is based on the [Custom Composite Designers - Workflow Item Presenter](../../../docs/framework/windows-workflow-foundation/samples/custom-composite-designers-workflow-item-presenter.md) sample.  \n  \n2.  The second procedure describes how to create a custom activity designer with a <xref:System.Activities.Presentation.WorkflowItemsPresenter> that provides the functionality needed to edit of a collection of contained elements. This procedure is based on the [Custom Composite Designers - Workflow Items Presenter](../../../docs/framework/windows-workflow-foundation/samples/custom-composite-designers-workflow-items-presenter.md) sample.  \n  \n### To create a custom activity designer with a drop zone using WorkflowItemPresenter  \n  \n1.  Start [!INCLUDE[vs2010](../../../includes/vs2010-md.md)].  \n  \n2.  On the **File** menu, point to **New**, and then select **Project…**.  \n  \n     The **New Project** dialog box opens.  \n  \n3.  In the **Installed Templates** pane, select **Windows** from your preferred language category.  \n  \n4.  In the **Templates** pane, select **WPF Application**.  \n  \n5.  In the **Name** box, enter `UsingWorkflowItemPresenter`.  \n  \n6.  In the **Location** box, enter the directory in which you want to save your project, or click **Browse** to navigate to it.  \n  \n7.  In the **Solution** box, accept the default value.  \n  \n8.  Click **OK**.  \n  \n9. Right-click the MainWindows.xaml file in the **Solution Explorer**, select **Delete** and confirm **OK** in the **Microsoft Visual Studio** dialogue box.  \n  \n10. Right-click the UsingWorkflowItemPresenter project in **Solution Explorer**, select **Add**, then **New Item…** to bring up the **Add New Item** dialogue and select the **WPF** category from the **Installed Templates** section on the left.  \n  \n11. Select the  **Window (WPF)** template, name it `RehostingWFDesigner`, and click **Add**.  \n  \n12. Open the RehostingWFDesigner.xaml file and paste the following code into it to define the UI for the application.  \n  \n    ```  \n  \n    <Window x:Class=\" UsingWorkflowItemPresenter.RehostingWFDesigner\"  \n            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"  \n            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"  \n            xmlns:sapt=\"clr-namespace:System.Activities.Presentation.Toolbox;assembly=System.Activities.Presentation\"  \n            xmlns:sys=\"clr-namespace:System;assembly=mscorlib\"  \n            Title=\"Window1\" Height=\"600\" Width=\"900\">  \n        <Window.Resources>  \n            <sys:String x:Key=\"AssemblyName\">System.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</sys:String>  \n        </Window.Resources>  \n        <Grid>  \n            <Grid.ColumnDefinitions>  \n                <ColumnDefinition Width=\"2*\"/>  \n                <ColumnDefinition Width=\"7*\"/>  \n                <ColumnDefinition Width=\"3*\"/>  \n            </Grid.ColumnDefinitions>  \n            <Border Grid.Column=\"0\">  \n                <sapt:ToolboxControl Name=\"Toolbox\">  \n                    <sapt:ToolboxCategory CategoryName=\"Basic\">  \n                        <sapt:ToolboxItemWrapper AssemblyName=\"{StaticResource AssemblyName}\" >  \n                            <sapt:ToolboxItemWrapper.ToolName>  \n                                System.Activities.Statements.Sequence  \n                            </sapt:ToolboxItemWrapper.ToolName>  \n                           </sapt:ToolboxItemWrapper>  \n                        <sapt:ToolboxItemWrapper  AssemblyName=\"{StaticResource AssemblyName}\">  \n                            <sapt:ToolboxItemWrapper.ToolName>  \n                                System.Activities.Statements.WriteLine  \n                            </sapt:ToolboxItemWrapper.ToolName>  \n  \n                        </sapt:ToolboxItemWrapper>  \n                        <sapt:ToolboxItemWrapper  AssemblyName=\"{StaticResource AssemblyName}\">  \n                            <sapt:ToolboxItemWrapper.ToolName>  \n                                System.Activities.Statements.If  \n                            </sapt:ToolboxItemWrapper.ToolName>  \n  \n                        </sapt:ToolboxItemWrapper>  \n                        <sapt:ToolboxItemWrapper  AssemblyName=\"{StaticResource AssemblyName}\">  \n                            <sapt:ToolboxItemWrapper.ToolName>  \n                                System.Activities.Statements.While  \n                            </sapt:ToolboxItemWrapper.ToolName>  \n  \n                        </sapt:ToolboxItemWrapper>  \n                    </sapt:ToolboxCategory>  \n                </sapt:ToolboxControl>  \n            </Border>  \n            <Border Grid.Column=\"1\" Name=\"DesignerBorder\"/>  \n            <Border Grid.Column=\"2\" Name=\"PropertyBorder\"/>  \n        </Grid>  \n    </Window>  \n  \n    ```  \n  \n13. To associate an activity designer with an activity type, you must register that activity designer with the metadata store. To do this, add the `RegisterMetadata` method to the `RehostingWFDesigner` class. Within the scope of the  `RegisterMetadata` method, create an <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder> object and call the <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> method to add the attributes to it. Call the <xref:System.Activities.Presentation.Metadata.MetadataStore.AddAttributeTable%2A> method to add the <xref:System.Activities.Presentation.Metadata.AttributeTable> to the metadata store. The following code contains the rehosting logic for the designer. It registers the metadata, puts the `SimpleNativeActivity` into the toolbox, and creates the workflow. Put this code into the RehostingWFDesigner.xaml.cs file.  \n  \n    ```  \n  \n    using System;  \n    using System.Activities.Core.Presentation;  \n    using System.Activities.Presentation;  \n    using System.Activities.Presentation.Metadata;  \n    using System.Activities.Presentation.Toolbox;  \n    using System.Activities.Statements;  \n    using System.ComponentModel;  \n    using System.Windows;  \n  \n    namespace UsingWorkflowItemPresenter  \n    {  \n        // Interaction logic for RehostingWFDesigner.xaml  \n        public partial class RehostingWFDesigner  \n        {  \n            public RehostingWFDesigner()  \n            {  \n                InitializeComponent();  \n            }  \n  \n            protected override void OnInitialized(EventArgs e)  \n            {  \n                base.OnInitialized(e);  \n                // register metadata  \n                (new DesignerMetadata()).Register();  \n                RegisterCustomMetadata();  \n                // add custom activity to toolbox  \n                Toolbox.Categories.Add(new ToolboxCategory(\"Custom activities\"));  \n                Toolbox.Categories[1].Add(new ToolboxItemWrapper(typeof(SimpleNativeActivity)));  \n  \n                // create the workflow designer  \n                WorkflowDesigner wd = new WorkflowDesigner();  \n                wd.Load(new Sequence());  \n                DesignerBorder.Child = wd.View;  \n                PropertyBorder.Child = wd.PropertyInspectorView;  \n  \n            }  \n  \n            void RegisterCustomMetadata()  \n            {  \n                AttributeTableBuilder builder = new AttributeTableBuilder();  \n                builder.AddCustomAttributes(typeof(SimpleNativeActivity), new DesignerAttribute(typeof(SimpleNativeDesigner)));  \n                MetadataStore.AddAttributeTable(builder.CreateTable());  \n            }  \n        }  \n    }  \n  \n    ```  \n  \n14. Right-click the References directory in Solution Explorer and select **Add Reference …** to bring up the **Add Reference** dialogue.  \n  \n15. Click the **.NET** tab, locate the assembly named **System.Activities.Core.Presentation**, select it and click **OK**.  \n  \n16. Using the same procedure, add references to the following assemblies:  \n  \n    1.  System.Data.DataSetExtensions.dll  \n  \n    2.  System.Activities.Presentation.dll  \n  \n    3.  System.ServiceModel.Activities.dll  \n  \n17. Open the App.xaml file and change the value of the StartUpUri to \"RehostingWFDesigner.xaml\".  \n  \n18. Right-click the UsingWorkflowItemPresenter project in **Solution Explorer**, select **Add**, then **New Item…** to bring up the **Add New Item** dialogue and select the **Workflow** category form the **Installed Templates** section on the left.  \n  \n19. Select the **Activity Designer** template, name it `SimpleNativeDesigner`, and click **Add**.  \n  \n20. Open the SimpleNativeDesigner.xaml file and paste the following code into it. Note this code uses <xref:System.Activities.Presentation.ActivityDesigner> as your root element and shows how binding is used to integrate <xref:System.Activities.Presentation.WorkflowItemPresenter> into your designer so a child type can be displayed in your composite activity designer.  \n  \n    > [!NOTE]\n    >  The schema for <xref:System.Activities.Presentation.ActivityDesigner> allows the addition of only one child element to your custom activity designer definition; however, this element could be a `StackPanel`, `Grid`, or some other composite UI element.  \n  \n    ```  \n  \n    <sap:ActivityDesigner x:Class=\" UsingWorkflowItemPresenter.SimpleNativeDesigner\"  \n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"  \n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"  \n        xmlns:sap=\"clr-namespace:System.Activities.Presentation;assembly=System.Activities.Presentation\"  \n        xmlns:sapv=\"clr-namespace:System.Activities.Presentation.View;assembly=System.Activities.Presentation\">  \n        <sap:ActivityDesigner.Resources>  \n            <DataTemplate x:Key=\"Collapsed\">  \n                <StackPanel>  \n                    <TextBlock>This is the collapsed view</TextBlock>  \n                </StackPanel>  \n            </DataTemplate>  \n            <DataTemplate x:Key=\"Expanded\">  \n                <StackPanel>  \n                    <TextBlock>Custom Text</TextBlock>  \n                    <sap:WorkflowItemPresenter Item=\"{Binding Path=ModelItem.Body, Mode=TwoWay}\"  \n                                            HintText=\"Please drop an activity here\" />  \n                </StackPanel>  \n            </DataTemplate>  \n            <Style x:Key=\"ExpandOrCollapsedStyle\" TargetType=\"{x:Type ContentPresenter}\">  \n                <Setter Property=\"ContentTemplate\" Value=\"{DynamicResource Collapsed}\"/>  \n                <Style.Triggers>  \n                    <DataTrigger Binding=\"{Binding Path=ShowExpanded}\" Value=\"true\">  \n                        <Setter Property=\"ContentTemplate\" Value=\"{DynamicResource Expanded}\"/>  \n                    </DataTrigger>  \n                </Style.Triggers>  \n            </Style>  \n        </sap:ActivityDesigner.Resources>  \n        <Grid>  \n            <ContentPresenter Style=\"{DynamicResource ExpandOrCollapsedStyle}\" Content=\"{Binding}\" />  \n        </Grid>  \n    </sap:ActivityDesigner>  \n  \n    ```  \n  \n21. Right-click the UsingWorkflowItemPresenter project in **Solution Explorer**, select **Add**, then **New Item…** to bring up the **Add New Item** dialogue and select the **Workflow** category form the **Installed Templates** section on the left.  \n  \n22. Select the  **Code Activity** template, name it `SimpleNativeActivity`, and click **Add**.  \n  \n23. Implement the `SimpleNativeActivity` class by entering the following code into the SimpleNativeActivity.cs file.  \n  \n    ```  \n  \n    using System.Activities;  \n  \n    namespace UsingWorkflowItemPresenter  \n    {  \n        public sealed class SimpleNativeActivity : NativeActivity  \n        {  \n            // this property contains an activity that will be scheduled in the execute method  \n    // the WorkflowItemPresenter in the designer is bound to this to enable editing  \n    // of the value  \n            public Activity Body { get; set; }  \n  \n            protected override void CacheMetadata(NativeActivityMetadata metadata)  \n            {  \n               metadata.AddChild(Body);  \n               base.CacheMetadata(metadata);  \n  \n            }  \n  \n            protected override void Execute(NativeActivityContext context)  \n            {  \n                context.ScheduleActivity(Body);  \n            }  \n        }  \n    }  \n  \n    ```  \n  \n24. Select **Build Solution** from the **Build** menu.  \n  \n25. Select **Start Without Debugging** from the **Debug** menu to open the rehosted custom design window.  \n  \n### To create a custom activity designer using WorkflowItemsPresenter  \n  \n1.  The procedure for the second custom activity designer is the parallels the first with a few modifications, the first of which is to name the second application `UsingWorkflowItemsPresenter`. Also this application does not define a new custom activity.  \n  \n2.  Key differences are contained in the CustomParallelDesigner.xaml and RehostingWFDesigner.xaml.cs files. Here is the code from the CustomParallelDesigne.xaml file that defines the UI.  \n  \n    ```  \n    <sap:ActivityDesigner x:Class=\" UsingWorkflowItemsPresenter.CustomParallelDesigner\"  \n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"  \n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"  \n        xmlns:sap=\"clr-namespace:System.Activities.Presentation;assembly=System.Activities.Presentation\"  \n        xmlns:sapv=\"clr-namespace:System.Activities.Presentation.View;assembly=System.Activities.Presentation\">  \n        <sap:ActivityDesigner.Resources>  \n            <DataTemplate x:Key=\"Collapsed\">  \n                <TextBlock>This is the Collapsed View</TextBlock>  \n            </DataTemplate>  \n            <DataTemplate x:Key=\"Expanded\">  \n                <StackPanel>  \n                    <TextBlock HorizontalAlignment=\"Center\">This is the</TextBlock>  \n                    <TextBlock HorizontalAlignment=\"Center\">extended view</TextBlock>  \n                    <sap:WorkflowItemsPresenter HintText=\"Drop Activities Here\"  \n                                        Items=\"{Binding Path=ModelItem.Branches}\">  \n                        <sap:WorkflowItemsPresenter.SpacerTemplate>  \n                            <DataTemplate>  \n                                <Ellipse Width=\"10\" Height=\"10\" Fill=\"Black\"/>  \n                            </DataTemplate>  \n                        </sap:WorkflowItemsPresenter.SpacerTemplate>  \n                        <sap:WorkflowItemsPresenter.ItemsPanel>  \n                            <ItemsPanelTemplate>  \n                                <StackPanel Orientation=\"Horizontal\"/>  \n                            </ItemsPanelTemplate>  \n                        </sap:WorkflowItemsPresenter.ItemsPanel>  \n                    </sap:WorkflowItemsPresenter>  \n                </StackPanel>  \n            </DataTemplate>  \n            <Style x:Key=\"ExpandOrCollapsedStyle\" TargetType=\"{x:Type ContentPresenter}\">  \n                <Setter Property=\"ContentTemplate\" Value=\"{DynamicResource Collapsed}\"/>  \n                <Style.Triggers>  \n                    <DataTrigger Binding=\"{Binding Path=ShowExpanded}\" Value=\"true\">  \n                        <Setter Property=\"ContentTemplate\" Value=\"{DynamicResource Expanded}\"/>  \n                    </DataTrigger>  \n                </Style.Triggers>  \n            </Style>  \n        </sap:ActivityDesigner.Resources>  \n        <Grid>  \n            <ContentPresenter Style=\"{DynamicResource ExpandOrCollapsedStyle}\" Content=\"{Binding}\"/>  \n        </Grid>  \n    </sap:ActivityDesigner>  \n  \n    ```  \n  \n3.  Here is the code from the RehostingWFDesigner.xaml.cs file that provides the rehosting logic.  \n  \n    ```  \n  \n    using System;  \n    using System.Activities.Core.Presentation;  \n    using System.Activities.Presentation;  \n    using System.Activities.Presentation.Metadata;  \n    using System.Activities.Statements;  \n    using System.ComponentModel;  \n    using System.Windows;  \n  \n    namespaceUsingWorkflowItemsPresenter  \n    {  \n        public partial class RehostingWfDesigner : Window  \n        {  \n            public RehostingWfDesigner()  \n            {  \n                InitializeComponent();  \n            }  \n  \n            protected override void OnInitialized(EventArgs e)  \n            {  \n                base.OnInitialized(e);  \n                // register metadata  \n                (new DesignerMetadata()).Register();  \n                RegisterCustomMetadata();  \n  \n                // create the workflow designer  \n                WorkflowDesigner wd = new WorkflowDesigner();  \n                wd.Load(new Sequence());  \n                DesignerBorder.Child = wd.View;  \n                PropertyBorder.Child = wd.PropertyInspectorView;  \n  \n            }  \n  \n            void RegisterCustomMetadata()  \n            {  \n                AttributeTableBuilder builder = new AttributeTableBuilder();  \n                builder.AddCustomAttributes(typeof(Parallel), new DesignerAttribute(typeof(CustomParallelDesigner)));  \n                MetadataStore.AddAttributeTable(builder.CreateTable());  \n            }  \n        }  \n    }  \n    ```  \n  \n## See Also  \n <xref:System.Activities.Presentation.ActivityDesigner>   \n <xref:System.Activities.Presentation.WorkflowItemPresenter>   \n <xref:System.Activities.Presentation.WorkflowItemsPresenter>   \n <xref:System.Activities.Presentation.WorkflowViewElement>   \n <xref:System.Activities.Presentation.Model.ModelItem>   \n [Customizing the Workflow Design Experience](../../../docs/framework/windows-workflow-foundation/customizing-the-workflow-design-experience.md)","nodes":[{"pos":[4,329],"nodes":[{"content":"How to: Create a Custom Activity Designer | Microsoft Docs","nodes":[{"pos":[0,58],"content":"How to: Create a Custom Activity Designer | Microsoft Docs","nodes":[{"content":"How to: Create a Custom Activity Designer | Microsoft Docs","pos":[0,58]}]}],"pos":[6,67],"yaml":true}],"content":"title: \"How to: Create a Custom Activity Designer | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 2f3aade6-facc-44ef-9657-a407ef8b9b31\ncaps.latest.revision: 25\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[336,377],"content":"How to: Create a Custom Activity Designer","linkify":"How to: Create a Custom Activity Designer","nodes":[{"content":"How to: Create a Custom Activity Designer","pos":[0,41]}]},{"content":"Custom activity designers are typically implemented so that their associated activities are composable with other activities whose designers can be dropped on to the design surface with them.","pos":[378,569]},{"content":"This functionality requires that a custom activity designer provide a \"drop zone\" where an arbitrary activity can be placed and also the means to manage the resulting collection of elements on the design surface.","pos":[570,782]},{"content":"This topic describes how to create a custom activity designer that contains such a drop zone and how to create a custom activity designer that provides that editing functionality needed to manage the collection of designer elements.","pos":[783,1015]},{"content":"Custom activity designers typically inherit from <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.ActivityDesigner&gt;</ph> which is the default base activity designer type for any activities without a specific designer.","pos":[1022,1222],"source":"Custom activity designers typically inherit from <xref:System.Activities.Presentation.ActivityDesigner> which is the default base activity designer type for any activities without a specific designer."},{"content":"This type provides the design-time experience of interacting with the property grid and configuring basic aspects such as managing colors and icons.","pos":[1223,1371]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Presentation.ActivityDesigner&gt;</ph> uses two helper controls, <ph id=\"ph2\">&lt;xref:System.Activities.Presentation.WorkflowItemPresenter&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter&gt;</ph> to make it easier to develop custom activity designers.","pos":[1378,1639],"source":"<xref:System.Activities.Presentation.ActivityDesigner> uses two helper controls, <xref:System.Activities.Presentation.WorkflowItemPresenter> and <xref:System.Activities.Presentation.WorkflowItemsPresenter> to make it easier to develop custom activity designers."},{"content":"They handle common functionality like dragging and dropping of child elements, deletion, selection, and addition of those child elements.","pos":[1640,1777]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowItemPresenter&gt;</ph> allows a single child UI element inside, providing the \"drop zone\", it while the <ph id=\"ph2\">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter&gt;</ph> can provide support multiple UI elements, including additional functionality like the ordering, moving, deleting, and adding of child elements.","pos":[1778,2127],"source":" The <xref:System.Activities.Presentation.WorkflowItemPresenter> allows a single child UI element inside, providing the \"drop zone\", it while the <xref:System.Activities.Presentation.WorkflowItemsPresenter> can provide support multiple UI elements, including additional functionality like the ordering, moving, deleting, and adding of child elements."},{"content":"The other key part of the story that needs highlighting in the implementation of a custom activity designer concerns the way in which the visual edits are bound using <ph id=\"ph1\">[!INCLUDE[avalon2](../../../includes/avalon2-md.md)]</ph> data binding to the instance stored in memory of what we are editing in the designer.","pos":[2134,2439],"source":"The other key part of the story that needs highlighting in the implementation of a custom activity designer concerns the way in which the visual edits are bound using [!INCLUDE[avalon2](../../../includes/avalon2-md.md)] data binding to the instance stored in memory of what we are editing in the designer."},{"content":"This is accomplished by the Model Item tree, which is also responsible for enabling change notification and the tracking of events like changes in states.","pos":[2440,2594]},{"content":"This topic outlines two procedures.","pos":[2601,2636]},{"content":"The first procedure describes how to create a custom activity designer with a <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowItemPresenter&gt;</ph> that provides the drop zone that receives other activities.","pos":[2646,2843],"source":"The first procedure describes how to create a custom activity designer with a <xref:System.Activities.Presentation.WorkflowItemPresenter> that provides the drop zone that receives other activities."},{"content":"This procedure is based on the <bpt id=\"p1\">[</bpt>Custom Composite Designers - Workflow Item Presenter<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/samples/custom-composite-designers-workflow-item-presenter.md)</ept> sample.","pos":[2844,3052],"source":" This procedure is based on the [Custom Composite Designers - Workflow Item Presenter](../../../docs/framework/windows-workflow-foundation/samples/custom-composite-designers-workflow-item-presenter.md) sample."},{"content":"The second procedure describes how to create a custom activity designer with a <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter&gt;</ph> that provides the functionality needed to edit of a collection of contained elements.","pos":[3062,3287],"source":"The second procedure describes how to create a custom activity designer with a <xref:System.Activities.Presentation.WorkflowItemsPresenter> that provides the functionality needed to edit of a collection of contained elements."},{"content":"This procedure is based on the <bpt id=\"p1\">[</bpt>Custom Composite Designers - Workflow Items Presenter<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/samples/custom-composite-designers-workflow-items-presenter.md)</ept> sample.","pos":[3288,3498],"source":" This procedure is based on the [Custom Composite Designers - Workflow Items Presenter](../../../docs/framework/windows-workflow-foundation/samples/custom-composite-designers-workflow-items-presenter.md) sample."},{"pos":[3508,3589],"content":"To create a custom activity designer with a drop zone using WorkflowItemPresenter","linkify":"To create a custom activity designer with a drop zone using WorkflowItemPresenter","nodes":[{"content":"To create a custom activity designer with a drop zone using WorkflowItemPresenter","pos":[0,81]}]},{"pos":[3599,3656],"content":"Start <ph id=\"ph1\">[!INCLUDE[vs2010](../../../includes/vs2010-md.md)]</ph>.","source":"Start [!INCLUDE[vs2010](../../../includes/vs2010-md.md)]."},{"pos":[3666,3735],"content":"On the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, point to <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then select <bpt id=\"p3\">**</bpt>Project…<ept id=\"p3\">**</ept>.","source":"On the **File** menu, point to **New**, and then select **Project…**."},{"pos":[3746,3783],"content":"The <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog box opens.","source":"The **New Project** dialog box opens."},{"pos":[3793,3887],"content":"In the <bpt id=\"p1\">**</bpt>Installed Templates<ept id=\"p1\">**</ept> pane, select <bpt id=\"p2\">**</bpt>Windows<ept id=\"p2\">**</ept> from your preferred language category.","source":"In the **Installed Templates** pane, select **Windows** from your preferred language category."},{"pos":[3897,3951],"content":"In the <bpt id=\"p1\">**</bpt>Templates<ept id=\"p1\">**</ept> pane, select <bpt id=\"p2\">**</bpt>WPF Application<ept id=\"p2\">**</ept>.","source":"In the **Templates** pane, select **WPF Application**."},{"pos":[3961,4017],"content":"In the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> box, enter <ph id=\"ph1\">`UsingWorkflowItemPresenter`</ph>.","source":"In the **Name** box, enter `UsingWorkflowItemPresenter`."},{"pos":[4027,4150],"content":"In the <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept> box, enter the directory in which you want to save your project, or click <bpt id=\"p2\">**</bpt>Browse<ept id=\"p2\">**</ept> to navigate to it.","source":"In the **Location** box, enter the directory in which you want to save your project, or click **Browse** to navigate to it."},{"pos":[4160,4210],"content":"In the <bpt id=\"p1\">**</bpt>Solution<ept id=\"p1\">**</ept> box, accept the default value.","source":"In the **Solution** box, accept the default value."},{"pos":[4220,4233],"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","source":"Click **OK**."},{"pos":[4242,4395],"content":"Right-click the MainWindows.xaml file in the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Delete<ept id=\"p2\">**</ept> and confirm <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept> in the <bpt id=\"p4\">**</bpt>Microsoft Visual Studio<ept id=\"p4\">**</ept> dialogue box.","source":"Right-click the MainWindows.xaml file in the **Solution Explorer**, select **Delete** and confirm **OK** in the **Microsoft Visual Studio** dialogue box."},{"content":"Right-click the UsingWorkflowItemPresenter project in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, then <bpt id=\"p3\">**</bpt>New Item…<ept id=\"p3\">**</ept>","pos":[4405,4516],"source":"Right-click the UsingWorkflowItemPresenter project in **Solution Explorer**, select **Add**, then **New Item…**"},{"content":"to bring up the <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialogue and select the <bpt id=\"p2\">**</bpt>WPF<ept id=\"p2\">**</ept> category from the <bpt id=\"p3\">**</bpt>Installed Templates<ept id=\"p3\">**</ept> section on the left.","pos":[4517,4644],"source":" to bring up the **Add New Item** dialogue and select the **WPF** category from the **Installed Templates** section on the left."},{"pos":[4654,4742],"content":"Select the  <bpt id=\"p1\">**</bpt>Window (WPF)<ept id=\"p1\">**</ept> template, name it <ph id=\"ph1\">`RehostingWFDesigner`</ph>, and click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.","source":"Select the  **Window (WPF)** template, name it `RehostingWFDesigner`, and click **Add**."},{"content":"Open the RehostingWFDesigner.xaml file and paste the following code into it to define the UI for the application.","pos":[4752,4865]},{"content":"To associate an activity designer with an activity type, you must register that activity designer with the metadata store.","pos":[7662,7784]},{"content":"To do this, add the <ph id=\"ph1\">`RegisterMetadata`</ph> method to the <ph id=\"ph2\">`RehostingWFDesigner`</ph> class.","pos":[7785,7866],"source":" To do this, add the `RegisterMetadata` method to the `RehostingWFDesigner` class."},{"content":"Within the scope of the  <ph id=\"ph1\">`RegisterMetadata`</ph> method, create an <ph id=\"ph2\">&lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder&gt;</ph> object and call the <ph id=\"ph3\">&lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A&gt;</ph> method to add the attributes to it.","pos":[7867,8145],"source":" Within the scope of the  `RegisterMetadata` method, create an <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder> object and call the <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> method to add the attributes to it."},{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.Metadata.MetadataStore.AddAttributeTable%2A&gt;</ph> method to add the <ph id=\"ph2\">&lt;xref:System.Activities.Presentation.Metadata.AttributeTable&gt;</ph> to the metadata store.","pos":[8146,8339],"source":" Call the <xref:System.Activities.Presentation.Metadata.MetadataStore.AddAttributeTable%2A> method to add the <xref:System.Activities.Presentation.Metadata.AttributeTable> to the metadata store."},{"content":"The following code contains the rehosting logic for the designer.","pos":[8340,8405]},{"content":"It registers the metadata, puts the <ph id=\"ph1\">`SimpleNativeActivity`</ph> into the toolbox, and creates the workflow.","pos":[8406,8508],"source":" It registers the metadata, puts the `SimpleNativeActivity` into the toolbox, and creates the workflow."},{"content":"Put this code into the RehostingWFDesigner.xaml.cs file.","pos":[8509,8565]},{"content":"Right-click the References directory in Solution Explorer and select <bpt id=\"p1\">**</bpt>Add Reference …<ept id=\"p1\">**</ept>","pos":[10396,10484],"source":"Right-click the References directory in Solution Explorer and select **Add Reference …**"},{"content":"to bring up the <bpt id=\"p1\">**</bpt>Add Reference<ept id=\"p1\">**</ept> dialogue.","pos":[10485,10528],"source":" to bring up the **Add Reference** dialogue."},{"pos":[10538,10656],"content":"Click the <bpt id=\"p1\">**</bpt>.NET<ept id=\"p1\">**</ept> tab, locate the assembly named <bpt id=\"p2\">**</bpt>System.Activities.Core.Presentation<ept id=\"p2\">**</ept>, select it and click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>.","source":"Click the **.NET** tab, locate the assembly named **System.Activities.Core.Presentation**, select it and click **OK**."},{"content":"Using the same procedure, add references to the following assemblies:","pos":[10666,10735]},{"content":"System.Data.DataSetExtensions.dll","pos":[10749,10782]},{"content":"System.Activities.Presentation.dll","pos":[10796,10830]},{"content":"System.ServiceModel.Activities.dll","pos":[10844,10878]},{"content":"Open the App.xaml file and change the value of the StartUpUri to \"RehostingWFDesigner.xaml\".","pos":[10888,10980]},{"content":"Right-click the UsingWorkflowItemPresenter project in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, then <bpt id=\"p3\">**</bpt>New Item…<ept id=\"p3\">**</ept>","pos":[10990,11101],"source":"Right-click the UsingWorkflowItemPresenter project in **Solution Explorer**, select **Add**, then **New Item…**"},{"content":"to bring up the <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialogue and select the <bpt id=\"p2\">**</bpt>Workflow<ept id=\"p2\">**</ept> category form the <bpt id=\"p3\">**</bpt>Installed Templates<ept id=\"p3\">**</ept> section on the left.","pos":[11102,11234],"source":" to bring up the **Add New Item** dialogue and select the **Workflow** category form the **Installed Templates** section on the left."},{"pos":[11244,11337],"content":"Select the <bpt id=\"p1\">**</bpt>Activity Designer<ept id=\"p1\">**</ept> template, name it <ph id=\"ph1\">`SimpleNativeDesigner`</ph>, and click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.","source":"Select the **Activity Designer** template, name it `SimpleNativeDesigner`, and click **Add**."},{"content":"Open the SimpleNativeDesigner.xaml file and paste the following code into it.","pos":[11347,11424]},{"content":"Note this code uses <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.ActivityDesigner&gt;</ph> as your root element and shows how binding is used to integrate <ph id=\"ph2\">&lt;xref:System.Activities.Presentation.WorkflowItemPresenter&gt;</ph> into your designer so a child type can be displayed in your composite activity designer.","pos":[11425,11712],"source":" Note this code uses <xref:System.Activities.Presentation.ActivityDesigner> as your root element and shows how binding is used to integrate <xref:System.Activities.Presentation.WorkflowItemPresenter> into your designer so a child type can be displayed in your composite activity designer."},{"pos":[11724,11990],"content":"[!NOTE]\nThe schema for <xref:System.Activities.Presentation.ActivityDesigner> allows the addition of only one child element to your custom activity designer definition; however, this element could be a `StackPanel`, `Grid`, or some other composite UI element.","leadings":["","    >  "],"nodes":[{"content":"The schema for <ph id=\"ph1\">&lt;xref:System.Activities.Presentation.ActivityDesigner&gt;</ph> allows the addition of only one child element to your custom activity designer definition; however, this element could be a <ph id=\"ph2\">`StackPanel`</ph>, <ph id=\"ph3\">`Grid`</ph>, or some other composite UI element.","pos":[8,259],"source":"The schema for <xref:System.Activities.Presentation.ActivityDesigner> allows the addition of only one child element to your custom activity designer definition; however, this element could be a `StackPanel`, `Grid`, or some other composite UI element."}]},{"content":"Right-click the UsingWorkflowItemPresenter project in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, then <bpt id=\"p3\">**</bpt>New Item…<ept id=\"p3\">**</ept>","pos":[13829,13940],"source":"Right-click the UsingWorkflowItemPresenter project in **Solution Explorer**, select **Add**, then **New Item…**"},{"content":"to bring up the <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialogue and select the <bpt id=\"p2\">**</bpt>Workflow<ept id=\"p2\">**</ept> category form the <bpt id=\"p3\">**</bpt>Installed Templates<ept id=\"p3\">**</ept> section on the left.","pos":[13941,14073],"source":" to bring up the **Add New Item** dialogue and select the **Workflow** category form the **Installed Templates** section on the left."},{"pos":[14083,14173],"content":"Select the  <bpt id=\"p1\">**</bpt>Code Activity<ept id=\"p1\">**</ept> template, name it <ph id=\"ph1\">`SimpleNativeActivity`</ph>, and click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.","source":"Select the  **Code Activity** template, name it `SimpleNativeActivity`, and click **Add**."},{"pos":[14183,14295],"content":"Implement the <ph id=\"ph1\">`SimpleNativeActivity`</ph> class by entering the following code into the SimpleNativeActivity.cs file.","source":"Implement the `SimpleNativeActivity` class by entering the following code into the SimpleNativeActivity.cs file."},{"pos":[15147,15197],"content":"Select <bpt id=\"p1\">**</bpt>Build Solution<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Build<ept id=\"p2\">**</ept> menu.","source":"Select **Build Solution** from the **Build** menu."},{"pos":[15207,15308],"content":"Select <bpt id=\"p1\">**</bpt>Start Without Debugging<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept> menu to open the rehosted custom design window.","source":"Select **Start Without Debugging** from the **Debug** menu to open the rehosted custom design window."},{"pos":[15318,15383],"content":"To create a custom activity designer using WorkflowItemsPresenter","linkify":"To create a custom activity designer using WorkflowItemsPresenter","nodes":[{"content":"To create a custom activity designer using WorkflowItemsPresenter","pos":[0,65]}]},{"content":"The procedure for the second custom activity designer is the parallels the first with a few modifications, the first of which is to name the second application <ph id=\"ph1\">`UsingWorkflowItemsPresenter`</ph>.","pos":[15393,15583],"source":"The procedure for the second custom activity designer is the parallels the first with a few modifications, the first of which is to name the second application `UsingWorkflowItemsPresenter`."},{"content":"Also this application does not define a new custom activity.","pos":[15584,15644]},{"content":"Key differences are contained in the CustomParallelDesigner.xaml and RehostingWFDesigner.xaml.cs files.","pos":[15654,15757]},{"content":"Here is the code from the CustomParallelDesigne.xaml file that defines the UI.","pos":[15758,15836]},{"content":"Here is the code from the RehostingWFDesigner.xaml.cs file that provides the rehosting logic.","pos":[18377,18470]},{"pos":[19949,19957],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Presentation.ActivityDesigner&gt;</ph>","pos":[19961,20015],"source":"<xref:System.Activities.Presentation.ActivityDesigner> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowItemPresenter&gt;</ph>","pos":[20020,20079],"source":"<xref:System.Activities.Presentation.WorkflowItemPresenter> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter&gt;</ph>","pos":[20084,20144],"source":"<xref:System.Activities.Presentation.WorkflowItemsPresenter> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Presentation.WorkflowViewElement&gt;</ph>","pos":[20149,20206],"source":"<xref:System.Activities.Presentation.WorkflowViewElement> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.Presentation.Model.ModelItem&gt;</ph>","pos":[20211,20264],"source":"<xref:System.Activities.Presentation.Model.ModelItem> "},{"content":"<bpt id=\"p1\">[</bpt>Customizing the Workflow Design Experience<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/customizing-the-workflow-design-experience.md)</ept>","pos":[20269,20412],"source":"[Customizing the Workflow Design Experience](../../../docs/framework/windows-workflow-foundation/customizing-the-workflow-design-experience.md)"}]}