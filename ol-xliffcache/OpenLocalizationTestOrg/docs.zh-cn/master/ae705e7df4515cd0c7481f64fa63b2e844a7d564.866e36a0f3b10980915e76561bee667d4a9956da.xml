{"content":"---\ntitle: \"lock Statement (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"lock_CSharpKeyword\"\n  - \"lock\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"lock keyword [C#]\"\nms.assetid: 656da1a4-707e-4ef6-9c6e-6d13b646af42\ncaps.latest.revision: 43\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# lock Statement (C# Reference)\nThe `lock` keyword marks a statement block as a critical section by obtaining the mutual-exclusion lock for a given object, executing a statement, and then releasing the lock. The following example includes a `lock` statement.  \n  \n```  \n  \nclass Account  \n{  \n    decimal balance;  \n    private Object thisLock = new Object();  \n  \n    public void Withdraw(decimal amount)  \n    {  \n        lock (thisLock)  \n        {  \n            if (amount > balance)  \n            {  \n                throw new Exception(\"Insufficient funds\");  \n            }  \n            balance -= amount;  \n        }  \n    }  \n}  \n  \n```  \n  \n For more information, see [Thread Synchronization](http://msdn.microsoft.com/library/413e1f28-a2c5-4eec-8338-aa43e7982ff4).  \n  \n## Remarks  \n The `lock` keyword ensures that one thread does not enter a critical section of code while another thread is in the critical section. If another thread tries to enter a locked code, it will wait, block, until the object is released.  \n  \n The section [Threading](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c) discusses threading.  \n  \n The `lock` keyword calls <xref:System.Threading.Monitor.Enter%2A> at the start of the block and <xref:System.Threading.Monitor.Exit%2A> at the end of the block. A <xref:System.Threading.ThreadInterruptedException> is thrown if <xref:System.Threading.Thread.Interrupt%2A> interrupts a thread that is waiting to enter a `lock` statement.  \n  \n In general, avoid locking on a `public` type, or instances beyond your code's control. The common constructs `lock (this)`, `lock (typeof (MyType))`, and `lock (\"myLock\")` violate this guideline:  \n  \n-   `lock (this)` is a problem if the instance can be accessed publicly.  \n  \n-   `lock (typeof (MyType))` is a problem if `MyType` is publicly accessible.  \n  \n-   `lock(\"myLock\")` is a problem because any other code in the process using the same string, will share the same lock.  \n  \n Best practice is to define a `private` object to lock on, or a `private static` object variable to protect data common to all instances.  \n  \n You can't use the [await](../../../csharp/language-reference/keywords/await.md) keyword in the body of a `lock` statement.  \n  \n## Example  \n The following sample shows a simple use of threads without locking in C#.  \n  \n [!code-cs[csrefKeywordsFixedLock#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/lock-statement_1.cs)]  \n  \n## Example  \n The following sample uses threads and `lock`. As long as the `lock` statement is present, the statement block is a critical section and `balance` will never become a negative number.  \n  \n [!code-cs[csrefKeywordsFixedLock#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/lock-statement_2.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.Reflection.MethodImplAttributes>   \n <xref:System.Threading.Mutex>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Threading](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Statement Keywords](../../../csharp/language-reference/keywords/statement-keywords.md)   \n @System.Threading.Monitor   \n [Interlocked Operations](../../../standard/threading/interlocked-operations.md)   \n [AutoResetEvent](../../../standard/threading/autoresetevent.md)   \n [Thread Synchronization](http://msdn.microsoft.com/library/413e1f28-a2c5-4eec-8338-aa43e7982ff4)","nodes":[{"pos":[12,58],"content":"lock Statement (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"lock Statement (C# Reference) | Microsoft Docs","pos":[0,46]}]},{"pos":[577,606],"content":"lock Statement (C# Reference)","linkify":"lock Statement (C# Reference)","nodes":[{"content":"lock Statement (C# Reference)","pos":[0,29]}]},{"content":"The <ph id=\"ph1\">`lock`</ph> keyword marks a statement block as a critical section by obtaining the mutual-exclusion lock for a given object, executing a statement, and then releasing the lock.","pos":[607,782],"source":"The `lock` keyword marks a statement block as a critical section by obtaining the mutual-exclusion lock for a given object, executing a statement, and then releasing the lock."},{"content":"The following example includes a <ph id=\"ph1\">`lock`</ph> statement.","pos":[783,833],"source":" The following example includes a `lock` statement."},{"pos":[1228,1351],"content":"For more information, see <bpt id=\"p1\">[</bpt>Thread Synchronization<ept id=\"p1\">](http://msdn.microsoft.com/library/413e1f28-a2c5-4eec-8338-aa43e7982ff4)</ept>.","source":"For more information, see [Thread Synchronization](http://msdn.microsoft.com/library/413e1f28-a2c5-4eec-8338-aa43e7982ff4)."},{"pos":[1360,1367],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`lock`</ph> keyword ensures that one thread does not enter a critical section of code while another thread is in the critical section.","pos":[1371,1504],"source":"The `lock` keyword ensures that one thread does not enter a critical section of code while another thread is in the critical section."},{"content":"If another thread tries to enter a locked code, it will wait, block, until the object is released.","pos":[1505,1603]},{"pos":[1610,1726],"content":"The section <bpt id=\"p1\">[</bpt>Threading<ept id=\"p1\">](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c)</ept> discusses threading.","source":"The section [Threading](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c) discusses threading."},{"content":"The <ph id=\"ph1\">`lock`</ph> keyword calls <ph id=\"ph2\">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> at the start of the block and <ph id=\"ph3\">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> at the end of the block.","pos":[1733,1893],"source":"The `lock` keyword calls <xref:System.Threading.Monitor.Enter%2A> at the start of the block and <xref:System.Threading.Monitor.Exit%2A> at the end of the block."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> is thrown if <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph> interrupts a thread that is waiting to enter a <ph id=\"ph3\">`lock`</ph> statement.","pos":[1894,2068],"source":" A <xref:System.Threading.ThreadInterruptedException> is thrown if <xref:System.Threading.Thread.Interrupt%2A> interrupts a thread that is waiting to enter a `lock` statement."},{"content":"In general, avoid locking on a <ph id=\"ph1\">`public`</ph> type, or instances beyond your code's control.","pos":[2075,2161],"source":"In general, avoid locking on a `public` type, or instances beyond your code's control."},{"content":"The common constructs <ph id=\"ph1\">`lock (this)`</ph>, <ph id=\"ph2\">`lock (typeof (MyType))`</ph>, and <ph id=\"ph3\">`lock (\"myLock\")`</ph> violate this guideline:","pos":[2162,2270],"source":" The common constructs `lock (this)`, `lock (typeof (MyType))`, and `lock (\"myLock\")` violate this guideline:"},{"pos":[2280,2348],"content":"<ph id=\"ph1\">`lock (this)`</ph> is a problem if the instance can be accessed publicly.","source":"`lock (this)` is a problem if the instance can be accessed publicly."},{"pos":[2358,2431],"content":"<ph id=\"ph1\">`lock (typeof (MyType))`</ph> is a problem if <ph id=\"ph2\">`MyType`</ph> is publicly accessible.","source":"`lock (typeof (MyType))` is a problem if `MyType` is publicly accessible."},{"pos":[2441,2557],"content":"<ph id=\"ph1\">`lock(\"myLock\")`</ph> is a problem because any other code in the process using the same string, will share the same lock.","source":"`lock(\"myLock\")` is a problem because any other code in the process using the same string, will share the same lock."},{"pos":[2564,2700],"content":"Best practice is to define a <ph id=\"ph1\">`private`</ph> object to lock on, or a <ph id=\"ph2\">`private static`</ph> object variable to protect data common to all instances.","source":"Best practice is to define a `private` object to lock on, or a `private static` object variable to protect data common to all instances."},{"pos":[2707,2829],"content":"You can't use the <bpt id=\"p1\">[</bpt>await<ept id=\"p1\">](../../../csharp/language-reference/keywords/await.md)</ept> keyword in the body of a <ph id=\"ph1\">`lock`</ph> statement.","source":"You can't use the [await](../../../csharp/language-reference/keywords/await.md) keyword in the body of a `lock` statement."},{"pos":[2838,2845],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample shows a simple use of threads without locking in C#.","pos":[2849,2922]},{"pos":[2929,3049],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsFixedLock#5<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/lock-statement_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsFixedLock#5](../../../csharp/language-reference/keywords/codesnippet/CSharp/lock-statement_1.cs)]"},{"pos":[3058,3065],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample uses threads and <ph id=\"ph1\">`lock`</ph>.","pos":[3069,3114],"source":"The following sample uses threads and `lock`."},{"content":"As long as the <ph id=\"ph1\">`lock`</ph> statement is present, the statement block is a critical section and <ph id=\"ph2\">`balance`</ph> will never become a negative number.","pos":[3115,3251],"source":" As long as the `lock` statement is present, the statement block is a critical section and `balance` will never become a negative number."},{"pos":[3258,3378],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsFixedLock#6<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/lock-statement_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsFixedLock#6](../../../csharp/language-reference/keywords/codesnippet/CSharp/lock-statement_2.cs)]"},{"pos":[3387,3412],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3526,3534],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3621,3682],"source":" [C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3685,3753],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Threading<ept id=\"p1\">](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c)</ept><ph id=\"ph1\"> </ph>","pos":[3756,3841],"source":" [Threading](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3844,3913],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Statement Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/statement-keywords.md)</ept><ph id=\"ph1\"> </ph>","pos":[3916,4005],"source":" [Statement Keywords](../../../csharp/language-reference/keywords/statement-keywords.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Interlocked Operations<ept id=\"p1\">](../../../standard/threading/interlocked-operations.md)</ept><ph id=\"ph1\"> </ph>","pos":[4038,4119],"source":" [Interlocked Operations](../../../standard/threading/interlocked-operations.md) "},{"content":"<bpt id=\"p1\"> [</bpt>AutoResetEvent<ept id=\"p1\">](../../../standard/threading/autoresetevent.md)</ept><ph id=\"ph1\"> </ph>","pos":[4122,4187],"source":" [AutoResetEvent](../../../standard/threading/autoresetevent.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Thread Synchronization<ept id=\"p1\">](http://msdn.microsoft.com/library/413e1f28-a2c5-4eec-8338-aa43e7982ff4)</ept>","pos":[4190,4287],"source":" [Thread Synchronization](http://msdn.microsoft.com/library/413e1f28-a2c5-4eec-8338-aa43e7982ff4)"}]}