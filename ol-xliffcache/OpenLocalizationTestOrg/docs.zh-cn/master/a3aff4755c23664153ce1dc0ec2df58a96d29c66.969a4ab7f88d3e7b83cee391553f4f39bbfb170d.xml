{"content":"---\ntitle: \"Introduction to XML Literals in Visual Basic2 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 94fc0e03-978e-4c08-ab6c-0dc3c1e64f10\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Introduction to XML Literals in Visual Basic\nThis section provides information about creating XML trees in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)].  \n  \n For information about using the results of LINQ queries as the content for an XML tree, see [Functional Construction (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md).  \n  \n For more information on XML literals in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)], see [Overview of LINQ to XML in Visual Basic](../../../../visual-basic/programming-guide/language-features/xml/overview-of-linq-to-xml.md).  \n  \n## Creating XML Trees  \n The following example shows how to create an <xref:System.Xml.Linq.XElement>, in this case `contacts`:  \n  \n```vb  \nDim contacts As XElement = _  \n    <Contacts>  \n        <Contact>  \n            <Name>Patrick Hines</Name>  \n            <Phone>206-555-0144</Phone>  \n            <Address>  \n                <Street1>123 Main St</Street1>  \n                <City>Mercer Island</City>  \n                <State>WA</State>  \n                <Postal>68042</Postal>  \n            </Address>  \n        </Contact>  \n    </Contacts>  \n```  \n  \n### Creating an XElement with Simple Content  \n You can create an <xref:System.Xml.Linq.XElement> that contains simple content, as follows:  \n  \n```vb  \nDim n as XElement = <Customer>Adventure Works</Customer>  \nConsole.WriteLine(n)   \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Customer>Adventure Works</Customer>  \n```  \n  \n### Creating an Empty Element  \n You can create an empty <xref:System.Xml.Linq.XElement>, as follows:  \n  \n```vb  \nDim n As XElement = <Customer/>  \nConsole.WriteLine(n)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Customer />  \n```  \n  \n### Using Embedded Expressions  \n An important feature of XML literals is that they allow embedded expressions. Embedded expressions enable you to evaluate an expression and insert the results of the expression into the XML tree. If the expression evaluates to a type of <xref:System.Xml.Linq.XElement>, an element is inserted into the tree. If the expression evaluates to a type of <xref:System.Xml.Linq.XAttribute>, an attribute is inserted into the tree. You can insert elements and attributes into the tree only where they are valid.  \n  \n It is important to note that only a single expression can go into an embedded expression. You cannot embed multiple statements. If an expression extends beyond a single line, you must use the line continuation character.  \n  \n If you use an embedded expression to add existing nodes (including elements) and attributes to a new XML tree and if the existing nodes are already parented, the nodes are cloned. The newly cloned nodes are attached to the new XML tree. If the existing nodes are not parented, the nodes are simply attached to the new XML tree. The last example in this topic demonstrates this.  \n  \n The following example uses an embedded expression to insert an element into the tree:  \n  \n```vb  \nxmlTree1 As XElement = _  \n    <Root>  \n        <Child>Contents</Child>  \n    </Root>  \nDim xmlTree2 As XElement = _  \n    <Root>  \n        <%= xmlTree1.<Child> %>  \n    </Root>  \nConsole.WriteLine(xmlTree2)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root>  \n  <Child>Contents</Child>  \n</Root>  \n```  \n  \n### Using Embedded Expressions for Content  \n You can use an embedded expression to supply the content of an element:  \n  \n```vb  \nDim str As String  \nstr = \"Some content\"  \nDim root As XElement = <Root><%= str %></Root>  \nConsole.WriteLine(root)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root>Some content</Root>  \n```  \n  \n### Using a LINQ Query in an Embedded Expression  \n You can use the results of a LINQ query for the content of an element:  \n  \n```vb  \nDim arr As Integer() = {1, 2, 3}  \n  \nDim n As XElement = _  \n    <Root>  \n        <%= From i In arr Select <Child><%= i %></Child> %>  \n    </Root>  \n  \nConsole.WriteLine(n)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root>  \n  <Child>1</Child>  \n  <Child>2</Child>  \n  <Child>3</Child>  \n</Root>  \n```  \n  \n### Using Embedded Expressions for Node Names  \n You can also use embedded expressions to calculate attribute names, attribute values, element names, and element values:  \n  \n```vb  \nDim eleName As String = \"ele\"  \nDim attName As String = \"att\"  \nDim attValue As String = \"aValue\"  \nDim eleValue As String = \"eValue\"  \nDim n As XElement = _  \n    <Root <%= attName %>=<%= attValue %>>  \n        <<%= eleName %>>  \n            <%= eleValue %>  \n        </>  \n    </Root>  \nConsole.WriteLine(n)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root att=\"aValue\">  \n  <ele>eValue</ele>  \n</Root>  \n```  \n  \n### Cloning vs. Attaching  \n As mentioned earlier, if you use an embedded expression to add existing nodes (including elements) and attributes to a new XML tree, if the existing nodes are already parented, the nodes are cloned and the newly cloned nodes are attached to the new XML tree. If the existing nodes are not parented, they are simply attached to the new XML tree.  \n  \n```vb  \n' Create a tree with a child element.  \nDim xmlTree1 As XElement = _  \n    <Root>  \n        <Child1>1</Child1>  \n    </Root>  \n  \n' Create an element that is not parented.  \nDim child2 As XElement = <Child2>2</Child2>  \n  \n' Create a tree and add Child1 and Child2 to it.  \nDim xmlTree2 As XElement = _  \n    <Root>  \n        <%= xmlTree1.<Child1>(0) %>  \n        <%= child2 %>  \n    </Root>  \n  \n' Compare Child1 identity.  \nConsole.WriteLine(\"Child1 was {0}\", _  \n    IIf(xmlTree1.Element(\"Child1\") Is xmlTree2.Element(\"Child1\"), _  \n    \"attached\", \"cloned\"))  \n  \n' Compare Child2 identity.  \nConsole.WriteLine(\"Child2 was {0}\", _  \n    IIf(child2 Is xmlTree2.Element(\"Child2\"), _  \n    \"attached\", \"cloned\"))  \n```  \n  \n This example produces the following output:  \n  \n```  \nChild1 was cloned  \nChild2 was attached  \n```  \n  \n## See Also  \n [Creating XML Trees (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)","nodes":[{"pos":[12,74],"content":"Introduction to XML Literals in Visual Basic2 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Introduction to XML Literals in Visual Basic2 | Microsoft Docs","pos":[0,62]}]},{"pos":[455,499],"content":"Introduction to XML Literals in Visual Basic","linkify":"Introduction to XML Literals in Visual Basic","nodes":[{"content":"Introduction to XML Literals in Visual Basic","pos":[0,44]}]},{"pos":[500,655],"content":"This section provides information about creating XML trees in <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.","source":"This section provides information about creating XML trees in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]."},{"pos":[662,906],"content":"For information about using the results of LINQ queries as the content for an XML tree, see <bpt id=\"p1\">[</bpt>Functional Construction (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)</ept>.","source":"For information about using the results of LINQ queries as the content for an XML tree, see [Functional Construction (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)."},{"pos":[913,1186],"content":"For more information on XML literals in <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Overview of LINQ to XML in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/xml/overview-of-linq-to-xml.md)</ept>.","source":"For more information on XML literals in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)], see [Overview of LINQ to XML in Visual Basic](../../../../visual-basic/programming-guide/language-features/xml/overview-of-linq-to-xml.md)."},{"pos":[1195,1213],"content":"Creating XML Trees","linkify":"Creating XML Trees","nodes":[{"content":"Creating XML Trees","pos":[0,18]}]},{"pos":[1217,1319],"content":"The following example shows how to create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, in this case <ph id=\"ph2\">`contacts`</ph>:","source":"The following example shows how to create an <xref:System.Xml.Linq.XElement>, in this case `contacts`:"},{"pos":[1756,1796],"content":"Creating an XElement with Simple Content","linkify":"Creating an XElement with Simple Content","nodes":[{"content":"Creating an XElement with Simple Content","pos":[0,40]}]},{"content":"You can create an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> that contains simple content, as follows:","pos":[1800,1891],"source":"You can create an <xref:System.Xml.Linq.XElement> that contains simple content, as follows:"},{"content":"This example produces the following output:","pos":[1998,2041]},{"pos":[2108,2133],"content":"Creating an Empty Element","linkify":"Creating an Empty Element","nodes":[{"content":"Creating an Empty Element","pos":[0,25]}]},{"content":"You can create an empty <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, as follows:","pos":[2137,2205],"source":"You can create an empty <xref:System.Xml.Linq.XElement>, as follows:"},{"content":"This example produces the following output:","pos":[2286,2329]},{"pos":[2372,2398],"content":"Using Embedded Expressions","linkify":"Using Embedded Expressions","nodes":[{"content":"Using Embedded Expressions","pos":[0,26]}]},{"content":"An important feature of XML literals is that they allow embedded expressions.","pos":[2402,2479]},{"content":"Embedded expressions enable you to evaluate an expression and insert the results of the expression into the XML tree.","pos":[2480,2597]},{"content":"If the expression evaluates to a type of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, an element is inserted into the tree.","pos":[2598,2709],"source":" If the expression evaluates to a type of <xref:System.Xml.Linq.XElement>, an element is inserted into the tree."},{"content":"If the expression evaluates to a type of <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>, an attribute is inserted into the tree.","pos":[2710,2825],"source":" If the expression evaluates to a type of <xref:System.Xml.Linq.XAttribute>, an attribute is inserted into the tree."},{"content":"You can insert elements and attributes into the tree only where they are valid.","pos":[2826,2905]},{"content":"It is important to note that only a single expression can go into an embedded expression.","pos":[2912,3001]},{"content":"You cannot embed multiple statements.","pos":[3002,3039]},{"content":"If an expression extends beyond a single line, you must use the line continuation character.","pos":[3040,3132]},{"content":"If you use an embedded expression to add existing nodes (including elements) and attributes to a new XML tree and if the existing nodes are already parented, the nodes are cloned.","pos":[3139,3318]},{"content":"The newly cloned nodes are attached to the new XML tree.","pos":[3319,3375]},{"content":"If the existing nodes are not parented, the nodes are simply attached to the new XML tree.","pos":[3376,3466]},{"content":"The last example in this topic demonstrates this.","pos":[3467,3516]},{"content":"The following example uses an embedded expression to insert an element into the tree:","pos":[3523,3608]},{"content":"This example produces the following output:","pos":[3842,3885]},{"pos":[3960,3998],"content":"Using Embedded Expressions for Content","linkify":"Using Embedded Expressions for Content","nodes":[{"content":"Using Embedded Expressions for Content","pos":[0,38]}]},{"content":"You can use an embedded expression to supply the content of an element:","pos":[4002,4073]},{"content":"This example produces the following output:","pos":[4215,4258]},{"pos":[4314,4358],"content":"Using a LINQ Query in an Embedded Expression","linkify":"Using a LINQ Query in an Embedded Expression","nodes":[{"content":"Using a LINQ Query in an Embedded Expression","pos":[0,44]}]},{"content":"You can use the results of a LINQ query for the content of an element:","pos":[4362,4432]},{"content":"This example produces the following output:","pos":[4633,4676]},{"pos":[4786,4827],"content":"Using Embedded Expressions for Node Names","linkify":"Using Embedded Expressions for Node Names","nodes":[{"content":"Using Embedded Expressions for Node Names","pos":[0,41]}]},{"content":"You can also use embedded expressions to calculate attribute names, attribute values, element names, and element values:","pos":[4831,4951]},{"content":"This example produces the following output:","pos":[5287,5330]},{"pos":[5412,5433],"content":"Cloning vs. Attaching","linkify":"Cloning vs. Attaching","nodes":[{"content":"Cloning vs. Attaching","pos":[0,21]}]},{"content":"As mentioned earlier, if you use an embedded expression to add existing nodes (including elements) and attributes to a new XML tree, if the existing nodes are already parented, the nodes are cloned and the newly cloned nodes are attached to the new XML tree.","pos":[5437,5695]},{"content":"If the existing nodes are not parented, they are simply attached to the new XML tree.","pos":[5696,5781]},{"content":"This example produces the following output:","pos":[6521,6564]},{"pos":[6630,6638],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6642,6757],"content":"<bpt id=\"p1\">[</bpt>Creating XML Trees (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)</ept>","source":"[Creating XML Trees (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)"}]}