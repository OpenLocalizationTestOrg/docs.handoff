{"content":"---\ntitle: \"How to: Catch Parsing Errors (C#)\"\nms.date: 07/20/2015\nms.assetid: bfb612d4-5605-48ef-8c93-915cf9d5dcfb\n---\n# How to: Catch Parsing Errors (C#)\nThis topic shows how to detect badly formed or invalid XML.  \n  \n [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] is implemented using <xref:System.Xml.XmlReader>. If badly formed or invalid XML is passed to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], the underlying <xref:System.Xml.XmlReader> class will throw an exception. The various methods that parse XML, such as <xref:System.Xml.Linq.XElement.Parse%2A?displayProperty=nameWithType>, do not catch the exception; the exception can then be caught by your application.  \n  \n## Example  \n The following code tries to parse invalid XML:  \n  \n```csharp  \ntry {  \n    XElement contacts = XElement.Parse(  \n        @\"<Contacts>  \n            <Contact>  \n                <Name>Jim Wilson</Name>  \n            </Contact>  \n          </Contcts>\");  \n  \n    Console.WriteLine(contacts);  \n}  \ncatch (System.Xml.XmlException e)  \n{  \n    Console.WriteLine(e.Message);  \n}  \n```  \n  \n When you run this code, it throws the following exception:  \n  \n```  \nThe 'Contacts' start tag on line 1 does not match the end tag of 'Contcts'. Line 5, position 13.  \n```  \n  \n For information about the exceptions that you can expect the <xref:System.Xml.Linq.XElement.Parse%2A?displayProperty=nameWithType>, <xref:System.Xml.Linq.XDocument.Parse%2A?displayProperty=nameWithType>, <xref:System.Xml.Linq.XElement.Load%2A?displayProperty=nameWithType>, and <xref:System.Xml.Linq.XDocument.Load%2A?displayProperty=nameWithType> methods to throw, see the <xref:System.Xml.XmlReader> documentation.  \n  \n## See also\n\n- [Parsing XML (C#)](../../../../csharp/programming-guide/concepts/linq/parsing-xml.md)\n","nodes":[{"pos":[4,115],"embed":true,"restype":"x-metadata","content":"title: \"How to: Catch Parsing Errors (C#)\"\nms.date: 07/20/2015\nms.assetid: bfb612d4-5605-48ef-8c93-915cf9d5dcfb","nodes":[{"content":"How to: Catch Parsing Errors (C#)","nodes":[{"pos":[0,33],"content":"How to: Catch Parsing Errors (C#)","nodes":[{"content":"How to: Catch Parsing Errors (C#)","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[122,155],"content":"How to: Catch Parsing Errors (C#)","linkify":"How to: Catch Parsing Errors (C#)","nodes":[{"content":"How to: Catch Parsing Errors (C#)","pos":[0,33]}]},{"content":"This topic shows how to detect badly formed or invalid XML.","pos":[156,215]},{"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> is implemented using <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[222,325],"source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] is implemented using <xref:System.Xml.XmlReader>."},{"content":"If badly formed or invalid XML is passed to <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph>, the underlying <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> class will throw an exception.","pos":[326,498],"source":" If badly formed or invalid XML is passed to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], the underlying <xref:System.Xml.XmlReader> class will throw an exception."},{"content":"The various methods that parse XML, such as <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Parse%2A?displayProperty=nameWithType&gt;</ph>, do not catch the exception; the exception can then be caught by your application.","pos":[499,695],"source":" The various methods that parse XML, such as <xref:System.Xml.Linq.XElement.Parse%2A?displayProperty=nameWithType>, do not catch the exception; the exception can then be caught by your application."},{"pos":[704,711],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code tries to parse invalid XML:","pos":[715,761]},{"content":"When you run this code, it throws the following exception:","pos":[1101,1159]},{"pos":[1280,1696],"content":"For information about the exceptions that you can expect the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Parse%2A?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument.Parse%2A?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement.Load%2A?displayProperty=nameWithType&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Xml.Linq.XDocument.Load%2A?displayProperty=nameWithType&gt;</ph> methods to throw, see the <ph id=\"ph5\">&lt;xref:System.Xml.XmlReader&gt;</ph> documentation.","source":"For information about the exceptions that you can expect the <xref:System.Xml.Linq.XElement.Parse%2A?displayProperty=nameWithType>, <xref:System.Xml.Linq.XDocument.Parse%2A?displayProperty=nameWithType>, <xref:System.Xml.Linq.XElement.Load%2A?displayProperty=nameWithType>, and <xref:System.Xml.Linq.XDocument.Load%2A?displayProperty=nameWithType> methods to throw, see the <xref:System.Xml.XmlReader> documentation."},{"pos":[1705,1713],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1717,1802],"content":"<bpt id=\"p1\">[</bpt>Parsing XML (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/parsing-xml.md)</ept>","source":"[Parsing XML (C#)](../../../../csharp/programming-guide/concepts/linq/parsing-xml.md)"}]}