{"content":"---\ntitle: \"How to: Find Descendants of a Child Element (XPath-LINQ to XML) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 505b7512-bb8b-4f85-abbf-491f039c961e\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Find Descendants of a Child Element (XPath-LINQ to XML) (C#)\nThis topic shows how to get the descendant elements of a child element with a particular name.  \n  \n The XPath expression is:  \n  \n `./Paragraph//Text/text()`  \n  \n## Example  \n This example simulates the problems of extracting text from an XML representation of a word processing document. It first selects all `Paragraph` elements, and then it selects all `Text` descendant elements of each `Paragraph` element. This doesn't select the descendant `Text` elements of the `Comment` element.  \n  \n```csharp  \nXElement root = XElement.Parse(  \n@\"<Root>  \n  <Paragraph>  \n    <Text>This is the start of</Text>  \n  </Paragraph>  \n  <Comment>  \n    <Text>This comment is not part of the paragraph text.</Text>  \n  </Comment>  \n  <Paragraph>  \n    <Annotation Emphasis='true'>  \n      <Text> a sentence.</Text>  \n    </Annotation>  \n  </Paragraph>  \n  <Paragraph>  \n    <Text>  This is a second sentence.</Text>  \n  </Paragraph>  \n</Root>\");  \n  \n// LINQ to XML query  \nstring str1 =  \n    root  \n    .Elements(\"Paragraph\")  \n    .Descendants(\"Text\")  \n    .Select(s => s.Value)  \n    .Aggregate(  \n        new StringBuilder(),  \n        (s, i) => s.Append(i),  \n        s => s.ToString()  \n    );  \n  \n// XPath expression  \nstring str2 =  \n    ((IEnumerable)root.XPathEvaluate(\"./Paragraph//Text/text()\"))  \n    .Cast<XText>()  \n    .Select(s => s.Value)  \n    .Aggregate(  \n        new StringBuilder(),  \n        (s, i) => s.Append(i),  \n        s => s.ToString()  \n    );  \n  \nif (str1 == str2)  \n    Console.WriteLine(\"Results are identical\");  \nelse  \n    Console.WriteLine(\"Results differ\");  \nConsole.WriteLine(str2);  \n```  \n  \n This example produces the following output:  \n  \n```  \nResults are identical  \nThis is the start of a sentence.  This is a second sentence.  \n```  \n  \n## See Also  \n [LINQ to XML for XPath Users (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)","nodes":[{"pos":[12,97],"content":"How to: Find Descendants of a Child Element (XPath-LINQ to XML) (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Find Descendants of a Child Element (XPath-LINQ to XML) (C#) | Microsoft Docs","pos":[0,85]}]},{"pos":[382,450],"content":"How to: Find Descendants of a Child Element (XPath-LINQ to XML) (C#)","linkify":"How to: Find Descendants of a Child Element (XPath-LINQ to XML) (C#)","nodes":[{"content":"How to: Find Descendants of a Child Element (XPath-LINQ to XML) (C#)","pos":[0,68]}]},{"content":"This topic shows how to get the descendant elements of a child element with a particular name.","pos":[451,545]},{"content":"The XPath expression is:","pos":[552,576]},{"pos":[618,625],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example simulates the problems of extracting text from an XML representation of a word processing document.","pos":[629,741]},{"content":"It first selects all <ph id=\"ph1\">`Paragraph`</ph> elements, and then it selects all <ph id=\"ph2\">`Text`</ph> descendant elements of each <ph id=\"ph3\">`Paragraph`</ph> element.","pos":[742,864],"source":" It first selects all `Paragraph` elements, and then it selects all `Text` descendant elements of each `Paragraph` element."},{"content":"This doesn't select the descendant <ph id=\"ph1\">`Text`</ph> elements of the <ph id=\"ph2\">`Comment`</ph> element.","pos":[865,941],"source":" This doesn't select the descendant `Text` elements of the `Comment` element."},{"content":"This example produces the following output:","pos":[2082,2125]},{"pos":[2236,2244],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2248,2365],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML for XPath Users (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)</ept>","source":"[LINQ to XML for XPath Users (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)"}]}