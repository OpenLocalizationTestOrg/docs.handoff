<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="event-based-asynchronous-pattern-overview.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbbebaf4c3419f46a90cce59e8f5bd72aebc6e26</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\event-based-asynchronous-pattern-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56bfb1165b0784e98114f3211f03ddc9b366a414</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bdaa871fa9039c59f3339d2705cde88a2200228e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Event-based Asynchronous Pattern Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Event-based Asynchronous Pattern Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applications that perform many tasks simultaneously, yet remain responsive to user interaction, often require a design that uses multiple threads.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading&gt;</ph> namespace provides all the tools necessary to create high-performance multithreaded applications, but using these tools effectively requires significant experience with multithreaded software engineering.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For relatively simple multithreaded applications, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component provides a straightforward solution.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more sophisticated asynchronous applications, consider implementing a class that adheres to the Event-based Asynchronous Pattern.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The Event-based Asynchronous Pattern makes available the advantages of multithreaded applications while hiding many of the complex issues inherent in multithreaded design.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using a class that supports this pattern can allow you to:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Perform time-consuming tasks, such as downloads and database operations, "in the background," without interrupting your application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Execute multiple operations simultaneously, receiving notifications when each completes.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Wait for resources to become available without stopping ("hanging") your application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Communicate with pending asynchronous operations using the familiar events-and-delegates model.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information on using event handlers and delegates, see <bpt id="p1">[</bpt>Events<ept id="p1">](../../../docs/standard/events/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A class that supports the Event-based Asynchronous Pattern will have one or more methods named <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Async`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These methods may mirror synchronous versions, which perform the same operation on the current thread.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The class may also have a <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Completed`</ph> event and it may have a <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph2">`AsyncCancel`</ph> (or simply <ph id="ph3">`CancelAsync`</ph>) method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> is a typical component that supports the Event-based Asynchronous Pattern.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can download an image synchronously by calling its <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox.Load%2A&gt;</ph> method, but if the image is large, or if the network connection is slow, your application will stop ("hang") until the download operation is completed and the call to <ph id="ph2">&lt;xref:System.Windows.Forms.PictureBox.Load%2A&gt;</ph> returns.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you want your application to keep running while the image is loading, you can call the <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox.LoadAsync%2A&gt;</ph> method and handle the <ph id="ph2">&lt;xref:System.Windows.Forms.PictureBox.LoadCompleted&gt;</ph> event, just as you would handle any other event.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox.LoadAsync%2A&gt;</ph> method, your application will continue to run while the download proceeds on a separate thread ("in the background").</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Your event handler will be called when the image-loading operation is complete, and your event handler can examine the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> parameter to determine if the download completed successfully.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The Event-based Asynchronous Pattern requires that an asynchronous operation can be canceled, and the <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> control supports this requirement with its <ph id="ph2">&lt;xref:System.Windows.Forms.PictureBox.CancelAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox.CancelAsync%2A&gt;</ph> submits a request to stop the pending download, and when the task is canceled, the <ph id="ph2">&lt;xref:System.Windows.Forms.PictureBox.LoadCompleted&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It is possible that the download will finish just as the <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox.CancelAsync%2A&gt;</ph> request is made, so <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> may not reflect the request to cancel.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common issue in multithreaded programming.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information on issues in multithreaded programming, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](../../../docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Characteristics of the Event-based Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The Event-based Asynchronous Pattern may take several forms, depending on the complexity of the operations supported by a particular class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The simplest classes may have a single <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Async`</ph> method and a corresponding <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph2">`Completed`</ph> event.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>More complex classes may have several <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Async`</ph> methods, each with a corresponding <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph2">`Completed`</ph> event, as well as synchronous versions of these methods.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Classes can optionally support cancellation, progress reporting, and incremental results for each asynchronous method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An asynchronous method may also support multiple pending calls (multiple concurrent invocations), allowing your code to call it any number of times before it completes other pending operations.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Correctly handling this situation may require your application to track the completion of each operation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Examples of the Event-based Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Media.SoundPlayer&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> components represent simple implementations of the Event-based Asynchronous Pattern.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebClient&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> components represent more complex implementations of the Event-based Asynchronous Pattern.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Below is an example class declaration that conforms to the pattern:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The fictitious <ph id="ph1">`AsyncExample`</ph> class has two methods, both of which support synchronous and asynchronous invocations.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The synchronous overloads behave like any method call and execute the operation on the calling thread; if the operation is time-consuming, there may be a noticeable delay before the call returns.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The asynchronous overloads will start the operation on another thread and then return immediately, allowing the calling thread to continue while the operation executes "in the background."</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Asynchronous Method Overloads</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There are potentially two overloads for the asynchronous operations: single-invocation and multiple-invocation.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can distinguish these two forms by their method signatures: the multiple-invocation form has an extra parameter called <ph id="ph1">`userState`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This form makes it possible for your code to call <ph id="ph1">`Method1Async(string param, object userState)`</ph> multiple times without waiting for any pending asynchronous operations to finish.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If, on the other hand, you try to call <ph id="ph1">`Method1Async(string param)`</ph> before a previous invocation has completed, the method raises an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`userState`</ph> parameter for the multiple-invocation overloads allows you to distinguish among asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You provide a unique value (for example, a GUID or hash code) for each call to <ph id="ph1">`Method1Async(string param, object userState)`</ph>, and when each operation is completed, your event handler can determine which instance of the operation raised the completion event.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Tracking Pending Operations</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you use the multiple-invocation overloads, your code will need to keep track of the <ph id="ph1">`userState`</ph> objects (task IDs) for pending tasks.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For each call to <ph id="ph1">`Method1Async(string param, object userState)`</ph>, you will typically generate a new, unique <ph id="ph2">`userState`</ph> object and add it to a collection.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When the task corresponding to this <ph id="ph1">`userState`</ph> object raises the completion event, your completion method implementation will examine <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A?displayProperty=fullName&gt;</ph> and remove it from your collection.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Used this way, the <ph id="ph1">`userState`</ph> parameter takes the role of a task ID.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You must be careful to provide a unique value for <ph id="ph1">`userState`</ph> in your calls to multiple-invocation overloads.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Non-unique task IDs will cause the asynchronous class throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Canceling Pending Operations</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It is important to be able to cancel asynchronous operations at any time before their completion.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Classes that implement the Event-based Asynchronous Pattern will have a <ph id="ph1">`CancelAsync`</ph> method (if there is only one asynchronous method) or a <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`AsyncCancel`</ph> method (if there are multiple asynchronous methods).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Methods that allow multiple invocations take a <ph id="ph1">`userState`</ph> parameter, which can be used to track the lifetime of each task.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CancelAsync`</ph> takes a <ph id="ph2">`userState`</ph> parameter, which allows you to cancel particular pending tasks.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Methods that support only a single pending operation at a time, like <ph id="ph1">`Method1Async(string param)`</ph>, are not cancelable.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Receiving Progress Updates and Incremental Results</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A class that adheres to the Event-based Asynchronous Pattern may optionally provide an event for tracking progress and incremental results.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This will typically be named <ph id="ph1">`ProgressChanged`</ph> or <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`ProgressChanged`</ph>, and its corresponding event handler will take a <ph id="ph3">&lt;xref:System.ComponentModel.ProgressChangedEventArgs&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The event handler for the <ph id="ph1">`ProgressChanged`</ph>event can examine the <ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage%2A?displayProperty=fullName&gt;</ph> property to determine what percentage of an asynchronous task has been completed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This property will range from 0 to 100, and it can be used to update the <ph id="ph1">&lt;xref:System.Windows.Forms.ProgressBar.Value%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Forms.ProgressBar&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If multiple asynchronous operations are pending, you can use the <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs.UserState%2A?displayProperty=fullName&gt;</ph> property to distinguish which operation is reporting progress.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Some classes may report incremental results as asynchronous operations proceed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>These results will be stored in a class that derives from <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs&gt;</ph> and they will appear as properties in the derived class.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can access these results in the event handler for the <ph id="ph1">`ProgressChanged`</ph> event, just as you would access the <ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If multiple asynchronous operations are pending, you can use the <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs.UserState%2A&gt;</ph> property to distinguish which operation is reporting incremental results.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use Components That Support the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/how-to-use-components-that-support-the-event-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](../../../docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id="p1">](../../../docs/framework/winforms/controls/how-to-implement-a-form-that-uses-a-background-operation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Multithreaded Programming with the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/multithreaded-programming-with-the-event-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Best Practices for Implementing the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deciding When to Implement the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/deciding-when-to-implement-the-event-based-asynchronous-pattern.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>