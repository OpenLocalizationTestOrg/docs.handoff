{"content":"---\ntitle: \"How to: Hook Up a Command to a Control with Command Support | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Control class, attaching a RoutedCommand\"\n  - \"classes, Control, attaching a RoutedCommand\"\n  - \"RoutedCommand class, attaching to a Control\"\n  - \"classes, RoutedCommand, attaching to a Control\"\nms.assetid: 8d8592ae-0c91-469e-a1cd-d179c4544548\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Hook Up a Command to a Control with Command Support\nThe following example shows how to hook up a <xref:System.Windows.Input.RoutedCommand> to a <xref:System.Windows.Controls.Control> which has built in support for the command.  For a complete sample which hooks up commands to multiple sources, see the [Create a Custom RoutedCommand Sample](http://go.microsoft.com/fwlink/?LinkID=159980) sample.  \n  \n## Example  \n [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] provides a library of common commands which application programmers encounter regularly.  The classes which comprise the command library are: <xref:System.Windows.Input.ApplicationCommands>, <xref:System.Windows.Input.ComponentCommands>, <xref:System.Windows.Input.NavigationCommands>, <xref:System.Windows.Input.MediaCommands>, and <xref:System.Windows.Documents.EditingCommands>.  \n  \n The static <xref:System.Windows.Input.RoutedCommand> objects which make up these classes do not supply command logic.  The logic for the command is associated with the command with a <xref:System.Windows.Input.CommandBinding>.  Some controls have built in CommandBindings for some commands.  This mechanism allows the semantics of a command to stay the same, while the actual implementation is can change.  A <xref:System.Windows.Controls.TextBox>, for example, handles the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command differently than a control designed to support images, but the basic idea of what it means to paste something stays the same.  The command logic cannot be supplied by the command, but rather must be supplied by the control or the application.  \n  \n Many controls in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] do have built in support for some of the commands in the command library.  <xref:System.Windows.Controls.TextBox>, for example, supports many of the application edit commands such as <xref:System.Windows.Input.ApplicationCommands.Paste%2A>, <xref:System.Windows.Input.ApplicationCommands.Copy%2A>, <xref:System.Windows.Input.ApplicationCommands.Cut%2A>, <xref:System.Windows.Input.ApplicationCommands.Redo%2A>, and <xref:System.Windows.Input.ApplicationCommands.Undo%2A>.  The application developer does not have to do anything special to get these commands to work with these controls.  If the <xref:System.Windows.Controls.TextBox> is the command target when the command is executed, it will handle the command using the <xref:System.Windows.Input.CommandBinding> that is built into the control.  \n  \n The following shows how to use a <xref:System.Windows.Controls.MenuItem> as the command source for the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command, where a <xref:System.Windows.Controls.TextBox> is the target of the command.  All the logic that defines how the <xref:System.Windows.Controls.TextBox> performs the paste is built into the <xref:System.Windows.Controls.TextBox> control.  \n  \n A <xref:System.Windows.Controls.MenuItem> is created and it's <xref:System.Windows.Controls.MenuItem.Command%2A> property is set to the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command.  The <xref:System.Windows.Controls.MenuItem.CommandTarget%2A> is not explicitly set to the <xref:System.Windows.Controls.TextBox> object.  When the  <xref:System.Windows.Controls.MenuItem.CommandTarget%2A> is not set, the target for the command is the element which has keyboard focus.  If the element which has keyboard focus does not support the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command or cannot currently execute the paste command (the clipboard is empty, for example) then the <xref:System.Windows.Controls.MenuItem> would be grayed out.  \n  \n [!code-xml[MenuItemCommandTask_XAML#MenuItemCommanding](../../../../samples/snippets/csharp/VS_Snippets_Wpf/MenuItemCommandTask_XAML/CS/Window1.xaml#menuitemcommanding)]  \n  \n [!code-csharp[MenuItemCommandTask#MenuItemCommandingCodeBehind](../../../../samples/snippets/csharp/VS_Snippets_Wpf/MenuItemCommandTask/CSharp/Window1.xaml.cs#menuitemcommandingcodebehind)]\n [!code-vb[MenuItemCommandTask#MenuItemCommandingCodeBehind](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/MenuItemCommandTask/VisualBasic/Window1.xaml.vb#menuitemcommandingcodebehind)]  \n  \n## See Also  \n [Commanding Overview](../../../../docs/framework/wpf/advanced/commanding-overview.md)   \n [Hook Up a Command to a Control with No Command Support](../../../../docs/framework/wpf/advanced/how-to-hook-up-a-command-to-a-control-with-no-command-support.md)","nodes":[{"pos":[4,610],"embed":true,"restype":"x-metadata","content":"title: \"How to: Hook Up a Command to a Control with Command Support | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"Control class, attaching a RoutedCommand\"\n  - \"classes, Control, attaching a RoutedCommand\"\n  - \"RoutedCommand class, attaching to a Control\"\n  - \"classes, RoutedCommand, attaching to a Control\"\nms.assetid: 8d8592ae-0c91-469e-a1cd-d179c4544548\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","nodes":[{"content":"How to: Hook Up a Command to a Control with Command Support | Microsoft Docs","nodes":[{"pos":[0,76],"content":"How to: Hook Up a Command to a Control with Command Support | Microsoft Docs","nodes":[{"content":"How to: Hook Up a Command to a Control with Command Support | Microsoft Docs","pos":[0,76]}]}],"path":["title"]}],"yml":true},{"pos":[617,676],"content":"How to: Hook Up a Command to a Control with Command Support","linkify":"How to: Hook Up a Command to a Control with Command Support","nodes":[{"content":"How to: Hook Up a Command to a Control with Command Support","pos":[0,59]}]},{"content":"The following example shows how to hook up a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Control&gt;</ph> which has built in support for the command.","pos":[677,851],"source":"The following example shows how to hook up a <xref:System.Windows.Input.RoutedCommand> to a <xref:System.Windows.Controls.Control> which has built in support for the command."},{"content":"For a complete sample which hooks up commands to multiple sources, see the <bpt id=\"p1\">[</bpt>Create a Custom RoutedCommand Sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=159980)</ept> sample.","pos":[853,1021],"source":"  For a complete sample which hooks up commands to multiple sources, see the [Create a Custom RoutedCommand Sample](http://go.microsoft.com/fwlink/?LinkID=159980) sample."},{"pos":[1030,1037],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides a library of common commands which application programmers encounter regularly.","pos":[1041,1209],"source":"[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] provides a library of common commands which application programmers encounter regularly."},{"content":"The classes which comprise the command library are: <ph id=\"ph1\">&lt;xref:System.Windows.Input.ApplicationCommands&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Input.ComponentCommands&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Input.NavigationCommands&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Input.MediaCommands&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Windows.Documents.EditingCommands&gt;</ph>.","pos":[1211,1502],"source":"  The classes which comprise the command library are: <xref:System.Windows.Input.ApplicationCommands>, <xref:System.Windows.Input.ComponentCommands>, <xref:System.Windows.Input.NavigationCommands>, <xref:System.Windows.Input.MediaCommands>, and <xref:System.Windows.Documents.EditingCommands>."},{"content":"The static <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> objects which make up these classes do not supply command logic.","pos":[1509,1626],"source":"The static <xref:System.Windows.Input.RoutedCommand> objects which make up these classes do not supply command logic."},{"content":"The logic for the command is associated with the command with a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.","pos":[1628,1735],"source":"  The logic for the command is associated with the command with a <xref:System.Windows.Input.CommandBinding>."},{"content":"Some controls have built in CommandBindings for some commands.","pos":[1737,1799]},{"content":"This mechanism allows the semantics of a command to stay the same, while the actual implementation is can change.","pos":[1801,1914]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, for example, handles the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command differently than a control designed to support images, but the basic idea of what it means to paste something stays the same.","pos":[1916,2173],"source":"  A <xref:System.Windows.Controls.TextBox>, for example, handles the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command differently than a control designed to support images, but the basic idea of what it means to paste something stays the same."},{"content":"The command logic cannot be supplied by the command, but rather must be supplied by the control or the application.","pos":[2175,2290]},{"content":"Many controls in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> do have built in support for some of the commands in the command library.","pos":[2297,2469],"source":"Many controls in [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] do have built in support for some of the commands in the command library."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, for example, supports many of the application edit commands such as <ph id=\"ph2\">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Input.ApplicationCommands.Copy%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Input.ApplicationCommands.Cut%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.Input.ApplicationCommands.Redo%2A&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.Windows.Input.ApplicationCommands.Undo%2A&gt;</ph>.","pos":[2471,2867],"source":"  <xref:System.Windows.Controls.TextBox>, for example, supports many of the application edit commands such as <xref:System.Windows.Input.ApplicationCommands.Paste%2A>, <xref:System.Windows.Input.ApplicationCommands.Copy%2A>, <xref:System.Windows.Input.ApplicationCommands.Cut%2A>, <xref:System.Windows.Input.ApplicationCommands.Redo%2A>, and <xref:System.Windows.Input.ApplicationCommands.Undo%2A>."},{"content":"The application developer does not have to do anything special to get these commands to work with these controls.","pos":[2869,2982]},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is the command target when the command is executed, it will handle the command using the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> that is built into the control.","pos":[2984,3193],"source":"  If the <xref:System.Windows.Controls.TextBox> is the command target when the command is executed, it will handle the command using the <xref:System.Windows.Input.CommandBinding> that is built into the control."},{"content":"The following shows how to use a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> as the command source for the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command, where a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is the target of the command.","pos":[3200,3445],"source":"The following shows how to use a <xref:System.Windows.Controls.MenuItem> as the command source for the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command, where a <xref:System.Windows.Controls.TextBox> is the target of the command."},{"content":"All the logic that defines how the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> performs the paste is built into the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> control.","pos":[3447,3605],"source":"  All the logic that defines how the <xref:System.Windows.Controls.TextBox> performs the paste is built into the <xref:System.Windows.Controls.TextBox> control."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> is created and it's <ph id=\"ph2\">&lt;xref:System.Windows.Controls.MenuItem.Command%2A&gt;</ph> property is set to the <ph id=\"ph3\">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command.","pos":[3612,3813],"source":"A <xref:System.Windows.Controls.MenuItem> is created and it's <xref:System.Windows.Controls.MenuItem.Command%2A> property is set to the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.MenuItem.CommandTarget%2A&gt;</ph> is not explicitly set to the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> object.","pos":[3815,3951],"source":"  The <xref:System.Windows.Controls.MenuItem.CommandTarget%2A> is not explicitly set to the <xref:System.Windows.Controls.TextBox> object."},{"content":"When the  <ph id=\"ph1\">&lt;xref:System.Windows.Controls.MenuItem.CommandTarget%2A&gt;</ph> is not set, the target for the command is the element which has keyboard focus.","pos":[3953,4099],"source":"  When the  <xref:System.Windows.Controls.MenuItem.CommandTarget%2A> is not set, the target for the command is the element which has keyboard focus."},{"content":"If the element which has keyboard focus does not support the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command or cannot currently execute the paste command (the clipboard is empty, for example) then the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> would be grayed out.","pos":[4101,4380],"source":"  If the element which has keyboard focus does not support the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command or cannot currently execute the paste command (the clipboard is empty, for example) then the <xref:System.Windows.Controls.MenuItem> would be grayed out."},{"pos":[4387,4556],"content":"<bpt id=\"p1\">[!code-xml</bpt><bpt id=\"p2\">[</bpt>MenuItemCommandTask_XAML#MenuItemCommanding<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/MenuItemCommandTask_XAML/CS/Window1.xaml#menuitemcommanding)</ept><ept id=\"p1\">]</ept>","source":"[!code-xml[MenuItemCommandTask_XAML#MenuItemCommanding](../../../../samples/snippets/csharp/VS_Snippets_Wpf/MenuItemCommandTask_XAML/CS/Window1.xaml#menuitemcommanding)]"},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>MenuItemCommandTask#MenuItemCommandingCodeBehind<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/MenuItemCommandTask/CSharp/Window1.xaml.cs#menuitemcommandingcodebehind)</ept><ept id=\"p1\">]</ept>","pos":[4563,4752],"source":"[!code-csharp[MenuItemCommandTask#MenuItemCommandingCodeBehind](../../../../samples/snippets/csharp/VS_Snippets_Wpf/MenuItemCommandTask/CSharp/Window1.xaml.cs#menuitemcommandingcodebehind)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>MenuItemCommandTask#MenuItemCommandingCodeBehind<ept id=\"p2\">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/MenuItemCommandTask/VisualBasic/Window1.xaml.vb#menuitemcommandingcodebehind)</ept><ept id=\"p1\">]</ept>","pos":[4754,4949],"source":"[!code-vb[MenuItemCommandTask#MenuItemCommandingCodeBehind](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/MenuItemCommandTask/VisualBasic/Window1.xaml.vb#menuitemcommandingcodebehind)]"},{"pos":[4958,4966],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Commanding Overview<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/commanding-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[4970,5056],"source":"[Commanding Overview](../../../../docs/framework/wpf/advanced/commanding-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Hook Up a Command to a Control with No Command Support<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/how-to-hook-up-a-command-to-a-control-with-no-command-support.md)</ept>","pos":[5060,5222],"source":"[Hook Up a Command to a Control with No Command Support](../../../../docs/framework/wpf/advanced/how-to-hook-up-a-command-to-a-control-with-no-command-support.md)"}]}