{"content":"---\ntitle: \"Option Strict On requires each lambda expression parameter to be declared with an 'As' clause if its type cannot be inferred\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc36642\"\n  - \"vbc36642\"\nhelpviewer_keywords: \n  - \"BC36642\"\nms.assetid: 2aaa62b8-49c9-4ae8-b0f5-08e3f0b5ad10\n---\n# Option Strict On requires each lambda expression parameter to be declared with an 'As' clause if its type cannot be inferred\nYou have declared a parameter in a lambda expression without using an `As` clause, with `Option Strict` on.  \n  \n```  \n' Not valid when Option Strict is on.  \n' Dim increment1 = Function (n) n + 1  \n```  \n  \n The previous declaration is valid if the type of `n` can be inferred. For example, if you are assigning the previous lambda expression to a function delegate, `Del`:  \n  \n```  \nDelegate Function Del(ByVal p As Integer) As Integer  \n```  \n  \n Now the type of `n` can be inferred from parameter `p`:  \n  \n```  \nDim increment2 as Del = Function(n) n + 1  \n```  \n  \n **Error ID:** BC36642  \n  \n## To correct this error  \n  \n-   Add an `As` clause to the parameter declaration:  \n  \n    ```  \n    Dim increment3 = Function (n As Integer) n + 1  \n    ```  \n  \n## See also\n\n- [Lambda Expressions](../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)\n","nodes":[{"pos":[4,285],"embed":true,"restype":"x-metadata","content":"title: \"Option Strict On requires each lambda expression parameter to be declared with an 'As' clause if its type cannot be inferred\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc36642\"\n  - \"vbc36642\"\nhelpviewer_keywords: \n  - \"BC36642\"\nms.assetid: 2aaa62b8-49c9-4ae8-b0f5-08e3f0b5ad10","nodes":[{"content":"Option Strict On requires each lambda expression parameter to be declared with an 'As' clause if its type cannot be inferred","nodes":[{"pos":[0,124],"content":"Option Strict On requires each lambda expression parameter to be declared with an 'As' clause if its type cannot be inferred","nodes":[{"content":"Option Strict On requires each lambda expression parameter to be declared with an 'As' clause if its type cannot be inferred","pos":[0,124]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[292,416],"content":"Option Strict On requires each lambda expression parameter to be declared with an 'As' clause if its type cannot be inferred","linkify":"Option Strict On requires each lambda expression parameter to be declared with an 'As' clause if its type cannot be inferred","nodes":[{"content":"Option Strict On requires each lambda expression parameter to be declared with an 'As' clause if its type cannot be inferred","pos":[0,124]}]},{"pos":[417,524],"content":"You have declared a parameter in a lambda expression without using an <ph id=\"ph1\">`As`</ph> clause, with <ph id=\"ph2\">`Option Strict`</ph> on.","source":"You have declared a parameter in a lambda expression without using an `As` clause, with `Option Strict` on."},{"content":"The previous declaration is valid if the type of <ph id=\"ph1\">`n`</ph> can be inferred.","pos":[626,695],"source":"The previous declaration is valid if the type of `n` can be inferred."},{"content":"For example, if you are assigning the previous lambda expression to a function delegate, <ph id=\"ph1\">`Del`</ph>:","pos":[696,791],"source":" For example, if you are assigning the previous lambda expression to a function delegate, `Del`:"},{"pos":[868,923],"content":"Now the type of <ph id=\"ph1\">`n`</ph> can be inferred from parameter <ph id=\"ph2\">`p`</ph>:","source":"Now the type of `n` can be inferred from parameter `p`:"},{"pos":[989,1010],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC36642","source":"**Error ID:** BC36642"},{"pos":[1019,1040],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[1050,1098],"content":"Add an <ph id=\"ph1\">`As`</ph> clause to the parameter declaration:","source":"Add an `As` clause to the parameter declaration:"},{"pos":[1183,1191],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1195,1304],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>","source":"[Lambda Expressions](../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)"}]}