<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="delegates-for-manipulating-arrays-and-lists.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2752ecd05caec207955b2366ed19b3713f571f91</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\generics\delegates-for-manipulating-arrays-and-lists.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9f579030ac7200f264b46c75435872f2a06d9c7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7af593178ec8158eb808122270f3a475199735fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Generic Delegates for Manipulating Arrays and Lists</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generic Delegates for Manipulating Arrays and Lists</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of generic delegates for conversions, search predicates, and actions to be taken on elements of an array or collection.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Generic Delegates for Manipulating Arrays and Lists</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> generic delegate represents a method that performs some action on an element of the specified type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can create a method that performs the desired action on the element, create an instance of the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate to represent that method, and then pass the array and the delegate to the <ph id="ph2">&lt;xref:System.Array.ForEach%2A?displayProperty=nameWithType&gt;</ph> static generic method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The method is called for every element of the array.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class also provides a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.ForEach%2A&gt;</ph> method that uses the <ph id="ph3">&lt;xref:System.Action%601&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This method is not generic.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This makes an interesting point about generic types and methods.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Array.ForEach%2A?displayProperty=nameWithType&gt;</ph> method must be static (<ph id="ph2">`Shared`</ph> in Visual Basic) and generic because <ph id="ph3">&lt;xref:System.Array&gt;</ph> is not a generic type; the only reason you can specify a type for <ph id="ph4">&lt;xref:System.Array.ForEach%2A?displayProperty=nameWithType&gt;</ph> to operate on is that the method has its own type parameter list.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By contrast, the nongeneric <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType&gt;</ph> method belongs to the generic class <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, so it simply uses the type parameter of its class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The class is strongly typed, so the method can be an instance method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> generic delegate represents a method that determines whether a particular element meets criteria you define.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can use it with the following static generic methods of <ph id="ph1">&lt;xref:System.Array&gt;</ph> to search for an element or a set of elements: <ph id="ph2">&lt;xref:System.Array.Exists%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Array.Find%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Array.FindAll%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Array.FindIndex%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Array.FindLast%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Array.FindLastIndex%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Array.TrueForAll%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> also works with the corresponding nongeneric instance methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph> generic delegate allows you to provide a sort order for array or list elements that do not have a native sort order, or to override the native sort order.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Create a method that performs the comparison, create an instance of the <ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph> delegate to represent your method, and then pass the array and the delegate to the <ph id="ph2">&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> static generic method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class provides a corresponding instance method overload, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Converter%602&gt;</ph> generic delegate allows you to define a conversion between two types, and to convert an array of one type into an array of the other, or to convert a list of one type to a list of the other.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create a method that converts the elements of the existing list to a new type, create a delegate instance to represent the method, and use the <ph id="ph1">&lt;xref:System.Array.ConvertAll%2A?displayProperty=nameWithType&gt;</ph> generic static method to produce an array of the new type from the original array, or the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.ConvertAll%60%601%28System.Converter%7B%600%2C%60%600%7D%29?displayProperty=nameWithType&gt;</ph> generic instance method to produce a list of the new type from the original list.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Chaining Delegates</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Many of the methods that use these delegates return an array or list, which can be passed to another method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, if you want to select certain elements of an array, convert those elements to a new type, and save them in a new array, you can pass the array returned by the <ph id="ph1">&lt;xref:System.Array.FindAll%2A&gt;</ph> generic method to the <ph id="ph2">&lt;xref:System.Array.ConvertAll%2A&gt;</ph> generic method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the new element type lacks a natural sort order, you can pass the array returned by the <ph id="ph1">&lt;xref:System.Array.ConvertAll%2A&gt;</ph> generic method to the <ph id="ph2">&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29&gt;</ph> generic method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](../../../docs/standard/generics/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Collections in the .NET Framework<ept id="p1">](../../../docs/standard/generics/collections.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Interfaces<ept id="p1">](../../../docs/standard/generics/interfaces.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Covariance and Contravariance<ept id="p1">](../../../docs/standard/generics/covariance-and-contravariance.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>