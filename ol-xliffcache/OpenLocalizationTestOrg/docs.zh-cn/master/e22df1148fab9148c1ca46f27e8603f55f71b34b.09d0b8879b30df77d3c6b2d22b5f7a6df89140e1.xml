{"content":"---\ntitle: \"Cross-Table Queries (LINQ to DataSet)\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 6819a16f-8656-41af-a54d-dfec0cb66366\n---\n# Cross-Table Queries (LINQ to DataSet)\nIn addition to querying a single table, you can also perform cross-table queries in [!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]. This is done by using a *join*. A join is the association of objects in one data source with objects that share a common attribute in another data source, such as a product or contact ID. In object-oriented programming, relationships between objects are relatively easy to navigate because each object has a member that references another object. In external database tables, however, navigating relationships is not as straightforward. Database tables do not contain built-in relationships. In these cases, the join operation can be used to match elements from each source. For example, given two tables that contain product information and sales information, you could use a join operation to match sales information and products for the same sales order.  \n  \n The [!INCLUDE[vbteclinqext](../../../../includes/vbteclinqext-md.md)] framework provides two join operators, <xref:System.Linq.Enumerable.Join%2A> and <xref:System.Linq.Enumerable.GroupJoin%2A>. These operators perform *equi-joins*: that is, joins that match two data sources only when their keys are equal. (By contrast, [!INCLUDE[tsql](../../../../includes/tsql-md.md)] supports join operators other than `equals`, such as the `less than` operator.)  \n  \n In relational database terms, <xref:System.Linq.Enumerable.Join%2A> implements an inner join. An inner join is a type of join in which only those objects that have a match in the opposite data set are returned.  \n  \n The <xref:System.Linq.Enumerable.GroupJoin%2A> operators have no direct equivalent in relational database terms; they implement a superset of inner joins and left outer joins. A left outer join is a join that returns each element of the first (left) collection, even if it has no correlated elements in the second collection.  \n  \n For more information about joins, see [Join Operations](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/bb397908(v=vs.120)).  \n  \n## Example  \n The following example performs a traditional join of the `SalesOrderHeader` and `SalesOrderDetail` tables from the AdventureWorks sample database to obtain online orders from the month of August.  \n  \n [!code-csharp[DP LINQ to DataSet Examples#Join](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#join)]\n [!code-vb[DP LINQ to DataSet Examples#Join](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#join)]  \n  \n## See also\n\n- [Querying DataSets](../../../../docs/framework/data/adonet/querying-datasets-linq-to-dataset.md)\n- [Single-Table Queries](../../../../docs/framework/data/adonet/single-table-queries-linq-to-dataset.md)\n- [Querying Typed DataSets](../../../../docs/framework/data/adonet/querying-typed-datasets.md)\n- [Join Operations](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/bb397908(v=vs.120))\n- [LINQ to DataSet Examples](../../../../docs/framework/data/adonet/linq-to-dataset-examples.md)\n","nodes":[{"pos":[4,155],"embed":true,"restype":"x-metadata","content":"title: \"Cross-Table Queries (LINQ to DataSet)\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: 6819a16f-8656-41af-a54d-dfec0cb66366","nodes":[{"content":"Cross-Table Queries (LINQ to DataSet)","nodes":[{"pos":[0,37],"content":"Cross-Table Queries (LINQ to DataSet)","nodes":[{"content":"Cross-Table Queries (LINQ to DataSet)","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[162,199],"content":"Cross-Table Queries (LINQ to DataSet)","linkify":"Cross-Table Queries (LINQ to DataSet)","nodes":[{"content":"Cross-Table Queries (LINQ to DataSet)","pos":[0,37]}]},{"content":"In addition to querying a single table, you can also perform cross-table queries in <ph id=\"ph1\">[!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]</ph>.","pos":[200,350],"source":"In addition to querying a single table, you can also perform cross-table queries in [!INCLUDE[linq_dataset](../../../../includes/linq-dataset-md.md)]."},{"content":"This is done by using a <bpt id=\"p1\">*</bpt>join<ept id=\"p1\">*</ept>.","pos":[351,382],"source":" This is done by using a *join*."},{"content":"A join is the association of objects in one data source with objects that share a common attribute in another data source, such as a product or contact ID.","pos":[383,538]},{"content":"In object-oriented programming, relationships between objects are relatively easy to navigate because each object has a member that references another object.","pos":[539,697]},{"content":"In external database tables, however, navigating relationships is not as straightforward.","pos":[698,787]},{"content":"Database tables do not contain built-in relationships.","pos":[788,842]},{"content":"In these cases, the join operation can be used to match elements from each source.","pos":[843,925]},{"content":"For example, given two tables that contain product information and sales information, you could use a join operation to match sales information and products for the same sales order.","pos":[926,1108]},{"content":"The <ph id=\"ph1\">[!INCLUDE[vbteclinqext](../../../../includes/vbteclinqext-md.md)]</ph> framework provides two join operators, <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.","pos":[1115,1309],"source":"The [!INCLUDE[vbteclinqext](../../../../includes/vbteclinqext-md.md)] framework provides two join operators, <xref:System.Linq.Enumerable.Join%2A> and <xref:System.Linq.Enumerable.GroupJoin%2A>."},{"content":"These operators perform <bpt id=\"p1\">*</bpt>equi-joins<ept id=\"p1\">*</ept>: that is, joins that match two data sources only when their keys are equal.","pos":[1310,1422],"source":" These operators perform *equi-joins*: that is, joins that match two data sources only when their keys are equal."},{"content":"(By contrast, <ph id=\"ph1\">[!INCLUDE[tsql](../../../../includes/tsql-md.md)]</ph> supports join operators other than <ph id=\"ph2\">`equals`</ph>, such as the <ph id=\"ph3\">`less than`</ph> operator.)","pos":[1423,1566],"source":" (By contrast, [!INCLUDE[tsql](../../../../includes/tsql-md.md)] supports join operators other than `equals`, such as the `less than` operator.)"},{"content":"In relational database terms, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> implements an inner join.","pos":[1573,1666],"source":"In relational database terms, <xref:System.Linq.Enumerable.Join%2A> implements an inner join."},{"content":"An inner join is a type of join in which only those objects that have a match in the opposite data set are returned.","pos":[1667,1783]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> operators have no direct equivalent in relational database terms; they implement a superset of inner joins and left outer joins.","pos":[1790,1965],"source":"The <xref:System.Linq.Enumerable.GroupJoin%2A> operators have no direct equivalent in relational database terms; they implement a superset of inner joins and left outer joins."},{"content":"A left outer join is a join that returns each element of the first (left) collection, even if it has no correlated elements in the second collection.","pos":[1966,2115]},{"pos":[2122,2275],"content":"For more information about joins, see <bpt id=\"p1\">[</bpt>Join Operations<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/bb397908(v=vs.120))</ept>.","source":"For more information about joins, see [Join Operations](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/bb397908(v=vs.120))."},{"pos":[2284,2291],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2295,2490],"content":"The following example performs a traditional join of the <ph id=\"ph1\">`SalesOrderHeader`</ph> and <ph id=\"ph2\">`SalesOrderDetail`</ph> tables from the AdventureWorks sample database to obtain online orders from the month of August.","source":"The following example performs a traditional join of the `SalesOrderHeader` and `SalesOrderDetail` tables from the AdventureWorks sample database to obtain online orders from the month of August."},{"pos":[2813,2821],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2825,2921],"content":"<bpt id=\"p1\">[</bpt>Querying DataSets<ept id=\"p1\">](../../../../docs/framework/data/adonet/querying-datasets-linq-to-dataset.md)</ept>","source":"[Querying DataSets](../../../../docs/framework/data/adonet/querying-datasets-linq-to-dataset.md)"},{"pos":[2924,3026],"content":"<bpt id=\"p1\">[</bpt>Single-Table Queries<ept id=\"p1\">](../../../../docs/framework/data/adonet/single-table-queries-linq-to-dataset.md)</ept>","source":"[Single-Table Queries](../../../../docs/framework/data/adonet/single-table-queries-linq-to-dataset.md)"},{"pos":[3029,3121],"content":"<bpt id=\"p1\">[</bpt>Querying Typed DataSets<ept id=\"p1\">](../../../../docs/framework/data/adonet/querying-typed-datasets.md)</ept>","source":"[Querying Typed DataSets](../../../../docs/framework/data/adonet/querying-typed-datasets.md)"},{"pos":[3124,3238],"content":"<bpt id=\"p1\">[</bpt>Join Operations<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/bb397908(v=vs.120))</ept>","source":"[Join Operations](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/bb397908(v=vs.120))"},{"pos":[3241,3335],"content":"<bpt id=\"p1\">[</bpt>LINQ to DataSet Examples<ept id=\"p1\">](../../../../docs/framework/data/adonet/linq-to-dataset-examples.md)</ept>","source":"[LINQ to DataSet Examples](../../../../docs/framework/data/adonet/linq-to-dataset-examples.md)"}]}