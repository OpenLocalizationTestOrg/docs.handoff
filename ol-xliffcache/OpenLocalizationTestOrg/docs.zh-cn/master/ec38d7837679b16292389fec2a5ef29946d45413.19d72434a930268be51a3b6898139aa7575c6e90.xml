{"content":"---\ntitle: \"Threading Objects and Features | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"threading [.NET Framework], features\"\n  - \"managed threading\"\nms.assetid: 239b2e8d-581b-4ca3-992b-0e8525b9321c\ncaps.latest.revision: 15\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Threading Objects and Features\nThe .NET Framework provides a number of objects that help you create and manage multithreaded applications. Managed threads are represented by the <xref:System.Threading.Thread> class. The <xref:System.Threading.ThreadPool> class provides easy creation and management of multithreaded background tasks. The <xref:System.ComponentModel.BackgroundWorker> class does the same for tasks that interact with the user interface. The <xref:System.Threading.Timer> class executes background tasks at timed intervals.  \n  \n In addition, there are a number of classes that synchronize activities of threads, including the <xref:System.Threading.Semaphore> and <xref:System.Threading.EventWaitHandle> classes introduced in the .NET Framework version 2.0. The features of these classes are compared in [Overview of Synchronization Primitives](../../../docs/standard/threading/overview-of-synchronization-primitives.md).  \n  \n## In This Section  \n [The Managed Thread Pool](../../../docs/standard/threading/the-managed-thread-pool.md)  \n Explains the **ThreadPool** class, which enables you to request a thread to execute a task without having to do any thread management yourself.  \n  \n [Timers](../../../docs/standard/threading/timers.md)  \n Explains how to use a **Timer** to specify a delegate to be called at a specified time.  \n  \n [Monitors](http://msdn.microsoft.com/library/33fe4aef-b44b-42fd-9e72-c908e39e75db)  \n Explains how to use the **Monitor** class to synchronize access to a member or to build your own thread management types.  \n  \n [Wait Handles](http://msdn.microsoft.com/library/48d10b6f-5fd7-407c-86ab-0179aef72489)  \n Describes the <xref:System.Threading.WaitHandle> class, the abstract base class for event wait handles, mutexes, and semaphores, which enables waiting for multiple synchronization events.  \n  \n [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](../../../docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)  \n Describes managed event wait handles, which are used to synchronize thread activities by signaling and waiting for signals.  \n  \n [Mutexes](../../../docs/standard/threading/mutexes.md)  \n Explains how to use a <xref:System.Threading.Mutex>to synchronize access to an object or to build your own synchronization mechanisms.  \n  \n [Interlocked Operations](../../../docs/standard/threading/interlocked-operations.md)  \n Explains how to use the <xref:System.Threading.Interlocked> class to increment or decrement a value and store the value in a single atomic operation.  \n  \n [Reader-Writer Locks](../../../docs/standard/threading/reader-writer-locks.md)  \n Defines a lock that implements single-writer/multiple-reader semantics.  \n  \n [Semaphore and SemaphoreSlim](../../../docs/standard/threading/semaphore-and-semaphoreslim.md)  \n Describes <xref:System.Threading.Semaphore> objects and explains how to use them to control access to limited resources.  \n  \n [Overview of Synchronization Primitives](../../../docs/standard/threading/overview-of-synchronization-primitives.md)  \n Compares the features of the .NET Framework classes provided for locking and synchronizing managed threads.  \n  \n [Barrier](../../../docs/standard/threading/barrier.md)  \n Describes <xref:System.Threading.Barrier> objects that implement the barrier pattern for coordination of threads in phased operations.  \n  \n [SpinLock](../../../docs/standard/threading/spinlock.md)  \n Describes <xref:System.Threading.SpinLock>, a lightweight alternative to the Monitor class for certain low-level scenarios.  \n  \n [SpinWait](../../../docs/standard/threading/spinwait.md)  \n Describes <xref:System.Threading.SpinWait>, a low level synchronization primitive that performs busy spinning prior to initiating a kernel-based wait.  \n  \n## Reference  \n <xref:System.Threading.Thread>  \n Provides reference documentation for the **Thread** class, which represents a managed thread, whether it came from unmanaged code or was created in a managed application.  \n  \n <xref:System.ComponentModel.BackgroundWorker>  \n Enables background tasks that interact with the user interface, communicating via events raised on the user-interface thread.  \n  \n## Related Sections  \n [Asynchronous File I/O](../../../docs/standard/io/asynchronous-file-i-o.md)  \n Describes how I/O asynchronous completion ports use the thread pool to require processing only when an input/output operation completes.  \n  \n [Task Parallel Library (TPL)](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)  \n Describes the recommended approach for multithreaded programming in the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)] and later.","nodes":[{"pos":[12,59],"content":"Threading Objects and Features | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Threading Objects and Features | Microsoft Docs","pos":[0,47]}]},{"pos":[440,470],"content":"Threading Objects and Features","linkify":"Threading Objects and Features","nodes":[{"content":"Threading Objects and Features","pos":[0,30]}]},{"content":"The .NET Framework provides a number of objects that help you create and manage multithreaded applications.","pos":[471,578]},{"content":"Managed threads are represented by the <ph id=\"ph1\">&lt;xref:System.Threading.Thread&gt;</ph> class.","pos":[579,655],"source":" Managed threads are represented by the <xref:System.Threading.Thread> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ThreadPool&gt;</ph> class provides easy creation and management of multithreaded background tasks.","pos":[656,773],"source":" The <xref:System.Threading.ThreadPool> class provides easy creation and management of multithreaded background tasks."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class does the same for tasks that interact with the user interface.","pos":[774,892],"source":" The <xref:System.ComponentModel.BackgroundWorker> class does the same for tasks that interact with the user interface."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph> class executes background tasks at timed intervals.","pos":[893,978],"source":" The <xref:System.Threading.Timer> class executes background tasks at timed intervals."},{"content":"In addition, there are a number of classes that synchronize activities of threads, including the <ph id=\"ph1\">&lt;xref:System.Threading.Semaphore&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> classes introduced in the .NET Framework version 2.0.","pos":[985,1213],"source":"In addition, there are a number of classes that synchronize activities of threads, including the <xref:System.Threading.Semaphore> and <xref:System.Threading.EventWaitHandle> classes introduced in the .NET Framework version 2.0."},{"content":"The features of these classes are compared in <bpt id=\"p1\">[</bpt>Overview of Synchronization Primitives<ept id=\"p1\">](../../../docs/standard/threading/overview-of-synchronization-primitives.md)</ept>.","pos":[1214,1377],"source":" The features of these classes are compared in [Overview of Synchronization Primitives](../../../docs/standard/threading/overview-of-synchronization-primitives.md)."},{"pos":[1386,1401],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"content":"<bpt id=\"p1\">[</bpt>The Managed Thread Pool<ept id=\"p1\">](../../../docs/standard/threading/the-managed-thread-pool.md)</ept>","pos":[1405,1491],"source":"[The Managed Thread Pool](../../../docs/standard/threading/the-managed-thread-pool.md)"},{"content":"Explains the <bpt id=\"p1\">**</bpt>ThreadPool<ept id=\"p1\">**</ept> class, which enables you to request a thread to execute a task without having to do any thread management yourself.","pos":[1495,1638],"source":" Explains the **ThreadPool** class, which enables you to request a thread to execute a task without having to do any thread management yourself."},{"content":"<bpt id=\"p1\">[</bpt>Timers<ept id=\"p1\">](../../../docs/standard/threading/timers.md)</ept>","pos":[1645,1697],"source":"[Timers](../../../docs/standard/threading/timers.md)"},{"content":"Explains how to use a <bpt id=\"p1\">**</bpt>Timer<ept id=\"p1\">**</ept> to specify a delegate to be called at a specified time.","pos":[1701,1788],"source":" Explains how to use a **Timer** to specify a delegate to be called at a specified time."},{"content":"<bpt id=\"p1\">[</bpt>Monitors<ept id=\"p1\">](http://msdn.microsoft.com/library/33fe4aef-b44b-42fd-9e72-c908e39e75db)</ept>","pos":[1795,1877],"source":"[Monitors](http://msdn.microsoft.com/library/33fe4aef-b44b-42fd-9e72-c908e39e75db)"},{"content":"Explains how to use the <bpt id=\"p1\">**</bpt>Monitor<ept id=\"p1\">**</ept> class to synchronize access to a member or to build your own thread management types.","pos":[1881,2002],"source":" Explains how to use the **Monitor** class to synchronize access to a member or to build your own thread management types."},{"content":"<bpt id=\"p1\">[</bpt>Wait Handles<ept id=\"p1\">](http://msdn.microsoft.com/library/48d10b6f-5fd7-407c-86ab-0179aef72489)</ept>","pos":[2009,2095],"source":"[Wait Handles](http://msdn.microsoft.com/library/48d10b6f-5fd7-407c-86ab-0179aef72489)"},{"content":"Describes the <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandle&gt;</ph> class, the abstract base class for event wait handles, mutexes, and semaphores, which enables waiting for multiple synchronization events.","pos":[2099,2286],"source":" Describes the <xref:System.Threading.WaitHandle> class, the abstract base class for event wait handles, mutexes, and semaphores, which enables waiting for multiple synchronization events."},{"content":"<bpt id=\"p1\">[</bpt>EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent<ept id=\"p1\">](../../../docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)</ept>","pos":[2293,2460],"source":"[EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](../../../docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)"},{"content":"Describes managed event wait handles, which are used to synchronize thread activities by signaling and waiting for signals.","pos":[2464,2587]},{"content":"<bpt id=\"p1\">[</bpt>Mutexes<ept id=\"p1\">](../../../docs/standard/threading/mutexes.md)</ept>","pos":[2594,2648],"source":"[Mutexes](../../../docs/standard/threading/mutexes.md)"},{"content":"Explains how to use a <ph id=\"ph1\">&lt;xref:System.Threading.Mutex&gt;</ph>to synchronize access to an object or to build your own synchronization mechanisms.","pos":[2652,2786],"source":" Explains how to use a <xref:System.Threading.Mutex>to synchronize access to an object or to build your own synchronization mechanisms."},{"content":"<bpt id=\"p1\">[</bpt>Interlocked Operations<ept id=\"p1\">](../../../docs/standard/threading/interlocked-operations.md)</ept>","pos":[2793,2877],"source":"[Interlocked Operations](../../../docs/standard/threading/interlocked-operations.md)"},{"content":"Explains how to use the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked&gt;</ph> class to increment or decrement a value and store the value in a single atomic operation.","pos":[2881,3030],"source":" Explains how to use the <xref:System.Threading.Interlocked> class to increment or decrement a value and store the value in a single atomic operation."},{"content":"<bpt id=\"p1\">[</bpt>Reader-Writer Locks<ept id=\"p1\">](../../../docs/standard/threading/reader-writer-locks.md)</ept>","pos":[3037,3115],"source":"[Reader-Writer Locks](../../../docs/standard/threading/reader-writer-locks.md)"},{"content":"Defines a lock that implements single-writer/multiple-reader semantics.","pos":[3119,3190]},{"content":"<bpt id=\"p1\">[</bpt>Semaphore and SemaphoreSlim<ept id=\"p1\">](../../../docs/standard/threading/semaphore-and-semaphoreslim.md)</ept>","pos":[3197,3291],"source":"[Semaphore and SemaphoreSlim](../../../docs/standard/threading/semaphore-and-semaphoreslim.md)"},{"content":"Describes <ph id=\"ph1\">&lt;xref:System.Threading.Semaphore&gt;</ph> objects and explains how to use them to control access to limited resources.","pos":[3295,3415],"source":" Describes <xref:System.Threading.Semaphore> objects and explains how to use them to control access to limited resources."},{"content":"<bpt id=\"p1\">[</bpt>Overview of Synchronization Primitives<ept id=\"p1\">](../../../docs/standard/threading/overview-of-synchronization-primitives.md)</ept>","pos":[3422,3538],"source":"[Overview of Synchronization Primitives](../../../docs/standard/threading/overview-of-synchronization-primitives.md)"},{"content":"Compares the features of the .NET Framework classes provided for locking and synchronizing managed threads.","pos":[3542,3649]},{"content":"<bpt id=\"p1\">[</bpt>Barrier<ept id=\"p1\">](../../../docs/standard/threading/barrier.md)</ept>","pos":[3656,3710],"source":"[Barrier](../../../docs/standard/threading/barrier.md)"},{"content":"Describes <ph id=\"ph1\">&lt;xref:System.Threading.Barrier&gt;</ph> objects that implement the barrier pattern for coordination of threads in phased operations.","pos":[3714,3848],"source":" Describes <xref:System.Threading.Barrier> objects that implement the barrier pattern for coordination of threads in phased operations."},{"content":"<bpt id=\"p1\">[</bpt>SpinLock<ept id=\"p1\">](../../../docs/standard/threading/spinlock.md)</ept>","pos":[3855,3911],"source":"[SpinLock](../../../docs/standard/threading/spinlock.md)"},{"content":"Describes <ph id=\"ph1\">&lt;xref:System.Threading.SpinLock&gt;</ph>, a lightweight alternative to the Monitor class for certain low-level scenarios.","pos":[3915,4038],"source":" Describes <xref:System.Threading.SpinLock>, a lightweight alternative to the Monitor class for certain low-level scenarios."},{"content":"<bpt id=\"p1\">[</bpt>SpinWait<ept id=\"p1\">](../../../docs/standard/threading/spinwait.md)</ept>","pos":[4045,4101],"source":"[SpinWait](../../../docs/standard/threading/spinwait.md)"},{"content":"Describes <ph id=\"ph1\">&lt;xref:System.Threading.SpinWait&gt;</ph>, a low level synchronization primitive that performs busy spinning prior to initiating a kernel-based wait.","pos":[4105,4255],"source":" Describes <xref:System.Threading.SpinWait>, a low level synchronization primitive that performs busy spinning prior to initiating a kernel-based wait."},{"pos":[4264,4273],"content":"Reference","linkify":"Reference","nodes":[{"content":"Reference","pos":[0,9]}]},{"content":"Provides reference documentation for the <bpt id=\"p1\">**</bpt>Thread<ept id=\"p1\">**</ept> class, which represents a managed thread, whether it came from unmanaged code or was created in a managed application.","pos":[4311,4481],"source":" Provides reference documentation for the **Thread** class, which represents a managed thread, whether it came from unmanaged code or was created in a managed application."},{"content":"Enables background tasks that interact with the user interface, communicating via events raised on the user-interface thread.","pos":[4537,4662]},{"pos":[4671,4687],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"<bpt id=\"p1\">[</bpt>Asynchronous File I/O<ept id=\"p1\">](../../../docs/standard/io/asynchronous-file-i-o.md)</ept>","pos":[4691,4766],"source":"[Asynchronous File I/O](../../../docs/standard/io/asynchronous-file-i-o.md)"},{"content":"Describes how I/O asynchronous completion ports use the thread pool to require processing only when an input/output operation completes.","pos":[4770,4906]},{"content":"<bpt id=\"p1\">[</bpt>Task Parallel Library (TPL)<ept id=\"p1\">](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)</ept>","pos":[4913,5016],"source":"[Task Parallel Library (TPL)](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)"},{"content":"Describes the recommended approach for multithreaded programming in the <ph id=\"ph1\">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph> and later.","pos":[5020,5165],"source":" Describes the recommended approach for multithreaded programming in the [!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)] and later."}]}