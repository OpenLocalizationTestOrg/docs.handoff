{"content":"---\ntitle: \"?: Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: \"11/20/2018\"\nf1_keywords: \n  - \"?:_CSharpKeyword\"\n  - \"?_CSharpKeyword\"\n  - \":_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"?: operator [C#]\"\n  - \"conditional operator (?:) [C#]\"\nms.assetid: e83a17f1-7500-48ba-8bee-2fbc4c847af4\n---\n# ?: Operator (C# Reference)\n\nThe conditional operator `?:`, commonly known as the ternary conditional operator, evaluates a Boolean expression, and returns the result of evaluating one of two expressions, depending on whether the Boolean expression evaluates to `true` or `false`. Beginning with C# 7.2, the [conditional ref expression](#conditional-ref-expression) returns the reference to the result of one of the two expressions.\n\nThe syntax for the conditional operator is as follows:\n\n```csharp\ncondition ? consequence : alternative\n```\n\nThe `condition` expression must evaluate to `true` or `false`. If `condition` evaluates to `true`, the `consequence` expression is evaluated, and its result becomes the result of the operation. If `condition` evaluates to `false`, the `alternative` expression is evaluated, and its result becomes the result of the operation. Only `consequence` or `alternative` is evaluated.\n\nThe type of `consequence` and `alternative` must be the same, or there must be an implicit conversion from one type to the other.\n\nThe conditional operator is right-associative, that is, an expression of the form\n\n```csharp\na ? b : c ? d : e\n```\n\nis evaluated as\n\n```csharp\na ? b : (c ? d : e)\n```\n\nThe following example demonstrates the usage of the conditional operator:\n\n[!code-csharp[non ref conditional](~/samples/snippets/csharp/language-reference/operators/ConditionalExamples.cs#ConditionalValue)]\n\n## Conditional ref expression\n\nBeginning with C# 7.2, you can use the conditional ref expression to return the reference to the result of one of the two expressions. You can assign that reference to a [ref local](../keywords/ref.md#ref-locals) or [ref readonly local](../keywords/ref.md#ref-readonly-locals) variable, or use it as a [reference return value](../keywords/ref.md#reference-return-values) or as a [`ref` method parameter](../keywords/ref.md#passing-an-argument-by-reference).\n\nThe syntax for the conditional ref expression is as follows:\n\n```csharp\ncondition ? ref consequence : ref alternative\n```\n\nLike the original conditional operator, the conditional ref expression evaluates only one of the two expressions: either `consequence` or `alternative`.\n\nIn the case of the conditional ref expression, the type of `consequence` and `alternative` must be the same.\n\nThe following example demonstrates the usage of the conditional ref expression:\n\n[!code-csharp[conditional ref](~/samples/snippets/csharp/language-reference/operators/ConditionalExamples.cs#ConditionalRef)]\n\nFor more information, see the [feature proposal note](../../../../_csharplang/proposals/csharp-7.2/conditional-ref.md).\n\n## Conditional operator and an `if..else` statement\n\nUse of the conditional operator over an [if-else](../keywords/if-else.md) statement might result in more concise code in cases when you need conditionally to compute a value. The following example demonstrates two ways to classify an integer as negative or nonnegative:\n\n[!code-csharp[conditional and if-else](~/samples/snippets/csharp/language-reference/operators/ConditionalExamples.cs#CompareWithIf)]\n\n## Operator overloadability\n\nThe conditional operator cannot be overloaded.\n\n## C# language specification\n\nFor more information, see the [Conditional operator](~/_csharplang/spec/expressions.md#conditional-operator) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [if-else statement](../keywords/if-else.md)\n- [?. and ?[] Operators](null-conditional-operators.md)\n- [?? Operator](null-coalescing-operator.md)\n- [ref keyword](../keywords/ref.md)\n","nodes":[{"pos":[4,294],"embed":true,"restype":"x-metadata","content":"title: \"?: Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: \"11/20/2018\"\nf1_keywords: \n  - \"?:_CSharpKeyword\"\n  - \"?_CSharpKeyword\"\n  - \":_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"?: operator [C#]\"\n  - \"conditional operator (?:) [C#]\"\nms.assetid: e83a17f1-7500-48ba-8bee-2fbc4c847af4","nodes":[{"content":"?: Operator - C# Reference","nodes":[{"pos":[0,26],"content":"?: Operator - C# Reference","nodes":[{"content":"?: Operator - C# Reference","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[301,327],"content":"?: Operator (C# Reference)","linkify":"?: Operator (C# Reference)","nodes":[{"content":"?: Operator (C# Reference)","pos":[0,26]}]},{"content":"The conditional operator <ph id=\"ph1\">`?:`</ph>, commonly known as the ternary conditional operator, evaluates a Boolean expression, and returns the result of evaluating one of two expressions, depending on whether the Boolean expression evaluates to <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">`false`</ph>.","pos":[329,580],"source":"The conditional operator `?:`, commonly known as the ternary conditional operator, evaluates a Boolean expression, and returns the result of evaluating one of two expressions, depending on whether the Boolean expression evaluates to `true` or `false`."},{"content":"Beginning with C# 7.2, the <bpt id=\"p1\">[</bpt>conditional ref expression<ept id=\"p1\">](#conditional-ref-expression)</ept> returns the reference to the result of one of the two expressions.","pos":[581,732],"source":" Beginning with C# 7.2, the [conditional ref expression](#conditional-ref-expression) returns the reference to the result of one of the two expressions."},{"content":"The syntax for the conditional operator is as follows:","pos":[734,788]},{"content":"The <ph id=\"ph1\">`condition`</ph> expression must evaluate to <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">`false`</ph>.","pos":[843,905],"source":"The `condition` expression must evaluate to `true` or `false`."},{"content":"If <ph id=\"ph1\">`condition`</ph> evaluates to <ph id=\"ph2\">`true`</ph>, the <ph id=\"ph3\">`consequence`</ph> expression is evaluated, and its result becomes the result of the operation.","pos":[906,1036],"source":" If `condition` evaluates to `true`, the `consequence` expression is evaluated, and its result becomes the result of the operation."},{"content":"If <ph id=\"ph1\">`condition`</ph> evaluates to <ph id=\"ph2\">`false`</ph>, the <ph id=\"ph3\">`alternative`</ph> expression is evaluated, and its result becomes the result of the operation.","pos":[1037,1168],"source":" If `condition` evaluates to `false`, the `alternative` expression is evaluated, and its result becomes the result of the operation."},{"content":"Only <ph id=\"ph1\">`consequence`</ph> or <ph id=\"ph2\">`alternative`</ph> is evaluated.","pos":[1169,1218],"source":" Only `consequence` or `alternative` is evaluated."},{"pos":[1220,1349],"content":"The type of <ph id=\"ph1\">`consequence`</ph> and <ph id=\"ph2\">`alternative`</ph> must be the same, or there must be an implicit conversion from one type to the other.","source":"The type of `consequence` and `alternative` must be the same, or there must be an implicit conversion from one type to the other."},{"content":"The conditional operator is right-associative, that is, an expression of the form","pos":[1351,1432]},{"content":"is evaluated as","pos":[1467,1482]},{"content":"The following example demonstrates the usage of the conditional operator:","pos":[1519,1592]},{"pos":[1730,1756],"content":"Conditional ref expression","linkify":"Conditional ref expression","nodes":[{"content":"Conditional ref expression","pos":[0,26]}]},{"content":"Beginning with C# 7.2, you can use the conditional ref expression to return the reference to the result of one of the two expressions.","pos":[1758,1892]},{"content":"You can assign that reference to a <bpt id=\"p1\">[</bpt>ref local<ept id=\"p1\">](../keywords/ref.md#ref-locals)</ept> or <bpt id=\"p2\">[</bpt>ref readonly local<ept id=\"p2\">](../keywords/ref.md#ref-readonly-locals)</ept> variable, or use it as a <bpt id=\"p3\">[</bpt>reference return value<ept id=\"p3\">](../keywords/ref.md#reference-return-values)</ept> or as a <bpt id=\"p4\">[</bpt><ph id=\"ph1\">`ref`</ph> method parameter<ept id=\"p4\">](../keywords/ref.md#passing-an-argument-by-reference)</ept>.","pos":[1893,2215],"source":" You can assign that reference to a [ref local](../keywords/ref.md#ref-locals) or [ref readonly local](../keywords/ref.md#ref-readonly-locals) variable, or use it as a [reference return value](../keywords/ref.md#reference-return-values) or as a [`ref` method parameter](../keywords/ref.md#passing-an-argument-by-reference)."},{"content":"The syntax for the conditional ref expression is as follows:","pos":[2217,2277]},{"pos":[2340,2492],"content":"Like the original conditional operator, the conditional ref expression evaluates only one of the two expressions: either <ph id=\"ph1\">`consequence`</ph> or <ph id=\"ph2\">`alternative`</ph>.","source":"Like the original conditional operator, the conditional ref expression evaluates only one of the two expressions: either `consequence` or `alternative`."},{"pos":[2494,2602],"content":"In the case of the conditional ref expression, the type of <ph id=\"ph1\">`consequence`</ph> and <ph id=\"ph2\">`alternative`</ph> must be the same.","source":"In the case of the conditional ref expression, the type of `consequence` and `alternative` must be the same."},{"content":"The following example demonstrates the usage of the conditional ref expression:","pos":[2604,2683]},{"pos":[2812,2931],"content":"For more information, see the <bpt id=\"p1\">[</bpt>feature proposal note<ept id=\"p1\">](../../../../_csharplang/proposals/csharp-7.2/conditional-ref.md)</ept>.","source":"For more information, see the [feature proposal note](../../../../_csharplang/proposals/csharp-7.2/conditional-ref.md)."},{"pos":[2936,2984],"content":"Conditional operator and an <ph id=\"ph1\">`if..else`</ph> statement","linkify":"Conditional operator and an `if..else` statement","source":"Conditional operator and an `if..else` statement"},{"content":"Use of the conditional operator over an <bpt id=\"p1\">[</bpt>if-else<ept id=\"p1\">](../keywords/if-else.md)</ept> statement might result in more concise code in cases when you need conditionally to compute a value.","pos":[2986,3160],"source":"Use of the conditional operator over an [if-else](../keywords/if-else.md) statement might result in more concise code in cases when you need conditionally to compute a value."},{"content":"The following example demonstrates two ways to classify an integer as negative or nonnegative:","pos":[3161,3255]},{"pos":[3394,3418],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"The conditional operator cannot be overloaded.","pos":[3420,3466]},{"pos":[3471,3496],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[3498,3686],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Conditional operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#conditional-operator)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Conditional operator](~/_csharplang/spec/expressions.md#conditional-operator) section of the [C# language specification](../language-specification/index.md)."},{"pos":[3691,3699],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3703,3730],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[3733,3789],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[3792,3816],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[3819,3862],"content":"<bpt id=\"p1\">[</bpt>if-else statement<ept id=\"p1\">](../keywords/if-else.md)</ept>","source":"[if-else statement](../keywords/if-else.md)"},{"pos":[3865,3918],"content":"<bpt id=\"p1\">[</bpt>?. and ?[] Operators<ept id=\"p1\">](null-conditional-operators.md)</ept>","source":"[?. and ?[] Operators](null-conditional-operators.md)"},{"pos":[3921,3963],"content":"<bpt id=\"p1\">[</bpt>?? Operator<ept id=\"p1\">](null-coalescing-operator.md)</ept>","source":"[?? Operator](null-coalescing-operator.md)"},{"pos":[3966,3999],"content":"<bpt id=\"p1\">[</bpt>ref keyword<ept id=\"p1\">](../keywords/ref.md)</ept>","source":"[ref keyword](../keywords/ref.md)"}]}