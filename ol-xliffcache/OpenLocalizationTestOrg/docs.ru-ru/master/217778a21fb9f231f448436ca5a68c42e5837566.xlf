<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="byte-data-type.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">217778a21fb9f231f448436ca5a68c42e5837566</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\data-types\byte-data-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c47c427f39b05f3070dd2dc55066f31ebb6feb74</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b528cd87d0138b150e44f671415ffa9820609254</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Byte Data Type (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Byte data type (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Holds unsigned 8-bit (1-byte) integers that range in value from 0 through 255.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Byte`</ph> data type to contain binary data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The default value of <ph id="ph1">`Byte`</ph> is 0.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Literal assignments</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can declare and initialize a <ph id="ph1">`Byte`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the integral literal is outside the range of a <ph id="ph1">`Byte`</ph> (that is, if it is less than <ph id="ph2">&lt;xref:System.Byte.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id="ph3">&lt;xref:System.Byte.MaxValue?displayProperty=nameWithType&gt;</ph>), a compilation error occurs.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following example, integers equal to 201 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <bpt id="p1">[</bpt>Integer<ept id="p1">](integer-data-type.md)</ept> to <ph id="ph1">`byte`</ph> values.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You use the prefix <ph id="ph1">`&amp;h`</ph> or <ph id="ph2">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id="ph3">`&amp;b`</ph> or <ph id="ph4">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id="ph5">`&amp;o`</ph> or <ph id="ph6">`&amp;O`</ph> to denote an octal literal.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Decimal literals have no prefix.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Starting with Visual Basic 2017, you can also use the underscore character, <ph id="ph1">`_`</ph>, as a digit separator to enhance readability, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Starting with Visual Basic 15.5, you can also use the underscore character (<ph id="ph1">`_`</ph>) as a leading separator between the prefix and the hexadecimal, binary, or octal digits.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Programming tips</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Negative Numbers.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`Byte`</ph> is an unsigned type, it cannot represent a negative number.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you use the unary minus (<ph id="ph1">`-`</ph>) operator on an expression that evaluates to type <ph id="ph2">`Byte`</ph>, Visual Basic converts the expression to <ph id="ph3">`Short`</ph> first.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Format Conversions.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When Visual Basic reads or writes files, or when it calls DLLs, methods, and properties, it can automatically convert between data formats.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Binary data stored in <ph id="ph1">`Byte`</ph> variables and arrays is preserved during such format conversions.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You should not use a <ph id="ph1">`String`</ph> variable for binary data, because its contents can be corrupted during conversion between ANSI and Unicode formats.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Widening.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Byte`</ph> data type widens to <ph id="ph2">`Short`</ph>, <ph id="ph3">`UShort`</ph>, <ph id="ph4">`Integer`</ph>, <ph id="ph5">`UInteger`</ph>, <ph id="ph6">`Long`</ph>, <ph id="ph7">`ULong`</ph>, <ph id="ph8">`Decimal`</ph>, <ph id="ph9">`Single`</ph>, or <ph id="ph10">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This means you can convert <ph id="ph1">`Byte`</ph> to any of these types without encountering a <ph id="ph2">&lt;xref:System.OverflowException?displayProperty=nameWithType&gt;</ph> error.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Type Characters.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Byte`</ph> has no literal type character or identifier type character.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Framework Type.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The corresponding type in the .NET Framework is the <ph id="ph1">&lt;xref:System.Byte?displayProperty=nameWithType&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`b`</ph> is a <ph id="ph2">`Byte`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The statements demonstrate the range of the variable and the application of bit-shift operators to it.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../visual-basic/language-reference/data-types/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conversion Summary<ept id="p1">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Efficient Use of Data Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>