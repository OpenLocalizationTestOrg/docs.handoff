<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a9f4bcec850cb5612baa4bf026525b9b71b5302</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\getting-started\whats-new.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0c30685934bf180cf2b8157dca113dda28384a9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d73dcfb51018ea9f834e262ea420eca92b0dcb8a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>What&amp;#39;s New in WPF Version 4.5 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>What&amp;#39;s New in WPF Version 4.5</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="introduction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Thistopic contains information about new and enhanced features in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> version 4.5.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic contains the following sections:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Ribbon control<ept id="p1">](#ribbon_control)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Improved performance when displaying large sets of grouped data<ept id="p1">](#grouped_virtualization)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>New features for the VirtualizingPanel<ept id="p1">](#VirtualizingPanel)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Binding to static properties<ept id="p1">](#static_properties)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Accessing collections on non-UI Threads<ept id="p1">](#xthread_access)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Synchronously and Asynchronously validating data<ept id="p1">](#INotifyDataErrorInfo)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Automatically updating the source of a data binding<ept id="p1">](#delay)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Binding to types that Implement ICustomTypeProvider<ept id="p1">](#ICustomTypeProvider)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving data binding information from a binding expression<ept id="p1">](#binding_state)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Checking for a valid DataContext object<ept id="p1">](#DisconnectedSource)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Repositioning data as the data's values change (Live shaping)<ept id="p1">](#live_shaping)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Improved Support for Establishing a Weak Reference to an Event<ept id="p1">](#weak_event_pattern)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>New methods for the Dispatcher class<ept id="p1">](#async)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Markup Extensions for Events<ept id="p1">](#events_markup_extenions)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Ribbon control</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>WPF 4.5 ships with a <ph id="ph1">&lt;xref:System.Windows.Controls.Ribbon.Ribbon&gt;</ph> control that hosts a Quick Access Toolbar, Application Menu, and tabs.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Ribbon Overview<ept id="p1">](/visualstudio/vsto/ribbon-overview)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Improved performance when displaying large sets of grouped data</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>UI virtualization occurs when  a subset of user interface (UI) elements are generated from a larger number of data items based on which items are visible on the screen.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingPanel&gt;</ph> defines the <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingPanel.IsVirtualizingWhenGrouping%2A&gt;</ph> attached property that enables UI Virtualization for grouped data.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about grouping data, see How to: Sort and Group Data Using a View in XAML.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information about virtualizing grouped data, see the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingPanel.IsVirtualizingWhenGrouping%2A&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>New features for the VirtualizingPanel</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can specify whether a <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingPanel&gt;</ph>, such as the <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph>, displays partial items by using the <ph id="ph3">&lt;xref:System.Windows.Controls.VirtualizingPanel.ScrollUnit%2A&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingPanel.ScrollUnit%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollUnit&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Controls.VirtualizingPanel&gt;</ph> will only display items that are completely visible.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingPanel.ScrollUnit%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollUnit&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Controls.VirtualizingPanel&gt;</ph> can display partially visible items.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can specify the  size of the cache before and after the viewport when the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingPanel&gt;</ph> is virtualizing by using the <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingPanel.CacheLength%2A&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The cache is the amount of space above or below the viewport in which items are not virtualized.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Using a cache to avoid generating UI elements as theyâ€™re scrolled into view can improve performance.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The cache is populated at a lower priority so that the application does not become unresponsive during the operation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingPanel.CacheLengthUnit%2A?displayProperty=fullName&gt;</ph> property determines the unit of measurement that is used by <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingPanel.CacheLength%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Binding to static properties</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use static properties as the source of a data binding.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The data binding engine recognizes when the property's value changes if a static event is raised.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, if the class <ph id="ph1">`SomeClass`</ph> defines a static property called <ph id="ph2">`MyProperty`</ph>, <ph id="ph3">`SomeClass`</ph> can define a static event that is raised when the value of <ph id="ph4">`MyProperty`</ph> changes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The static event can use either of the following signatures.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Note that in the first case, the class exposes a static event named <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph1">`Changed`</ph> that passes <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph> to the event handler.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the second case, the class exposes a static event named <ph id="ph1">`StaticPropertyChanged`</ph> that passes <ph id="ph2">&lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;</ph> to the event handler.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A class that implements the static property can choose to raise property-change notifications using either method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Accessing collections on non-UI Threads</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>WPF enables you to access and modify data collections on threads other than the one that created the collection.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This enables you to use a background thread to receive data from an external source, such as a database, and display the data on the UI thread.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>By using another thread to modify the collection, your user interface remains responsive to user interaction.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Synchronously and Asynchronously validating data</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.INotifyDataErrorInfo&gt;</ph> interface enables data entity classes to implement custom validation rules and expose validation results asynchronously.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This interface also supports custom error objects, multiple errors per property, cross-property errors, and entity-level errors.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.ComponentModel.INotifyDataErrorInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Automatically updating the source of a data binding</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you use a data binding to update a data source, you can use the <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.Delay%2A&gt;</ph> property to specify an amount of time to pass after the property changes on the target before the source updates.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, suppose that you have a <ph id="ph1">&lt;xref:System.Windows.Controls.Slider&gt;</ph> that has its <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A&gt;</ph> property data two-way bound to a property of a data object and the <ph id="ph3">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> property is set to <ph id="ph4">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In this example, when the user moves the <ph id="ph1">&lt;xref:System.Windows.Controls.Slider&gt;</ph>, the source updates for each pixel that the <ph id="ph2">&lt;xref:System.Windows.Controls.Slider&gt;</ph> moves.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The source object typically needs the value of the slider only when the slider's <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A&gt;</ph> stops changing.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To prevent updating the source too often, use <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.Delay%2A&gt;</ph> to specify that the source should not be updated until a certain amount of time elapses after the thumb stops moving.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Binding to types that Implement ICustomTypeProvider</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>WPF supports data binding to objects that implement <ph id="ph1">&lt;xref:System.Reflection.ICustomTypeProvider&gt;</ph>, also known as custom types.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can use custom types in the following cases.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>As a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> in a data binding.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> can reference a property of a custom type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>As the value of the <ph id="ph1">&lt;xref:System.Windows.DataTemplate.DataType%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>As a type that determines the automatically generated columns in a <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Retrieving data binding information from a binding expression</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In certain cases, you might get the <ph id="ph1">&lt;xref:System.Windows.Data.BindingExpression&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> and need information about the source and target objects of the binding.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>New APIs have been added to enable you to get the source or target object or the associated property.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When you have a <ph id="ph1">&lt;xref:System.Windows.Data.BindingExpression&gt;</ph>, use the following APIs to get information about the target and source.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To find this value of the binding</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Use this API</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The target object</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The target property</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The source object</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The source property</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Whether the <ph id="ph1">&lt;xref:System.Windows.Data.BindingExpression&gt;</ph> belongs to a <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The owner of a <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Checking for a valid DataContext object</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>There are cases where the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> of an item container in an <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> becomes disconnected.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An item container is the UI element that displays an item in an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When an <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> is data bound to a collection, an item container is generated for each item.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In some cases, item containers are removed from the visual tree.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Two typical cases where an item container is removed are when an item is removed from the underlying collection and when virtualization is enabled on the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In these cases, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> property of the item container will be set to the sentinel object that is returned by the <ph id="ph2">&lt;xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A?displayProperty=fullName&gt;</ph> static property.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You should check whether the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> is equal to the <ph id="ph2">&lt;xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A&gt;</ph> object before accessing the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> of an item container.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Repositioning data as the data's values change (Live shaping)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A collection of data can be grouped, sorted, or filtered.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>WPF 4.5 enables the data to be rearranged when the data is modified.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, suppose that an application uses a <ph id="ph1">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> to list stocks in a stock market and the stocks are sorted by stock value.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If live sorting is enabled on the stocks' <ph id="ph1">&lt;xref:System.Windows.Data.CollectionView&gt;</ph>, a stock's position in the <ph id="ph2">&lt;xref:System.Windows.Controls.DataGrid&gt;</ph> moves when the value of the stock becomes greater or less than another stock's value.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.ComponentModel.ICollectionViewLiveShaping&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Improved Support for Establishing a Weak Reference to an Event</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Implementing the weak event pattern is now easier because subscribers to events can participate in it without implementing an extra interface.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The generic <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> class also enables subscribers to participate in the weak event pattern if a dedicated <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> does not exist for a certain event.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Weak Event Patterns<ept id="p1">](../../../../docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>New methods for the Dispatcher class</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The Dispatcher class defines new methods for synchronous and asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The synchronous <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> method defines overloads that take an <ph id="ph2">&lt;xref:System.Action&gt;</ph> or <ph id="ph3">&lt;xref:System.Func%601&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The new asynchronous method, <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.InvokeAsync%2A&gt;</ph>, also takes an <ph id="ph2">&lt;xref:System.Action&gt;</ph> or <ph id="ph3">&lt;xref:System.Func%601&gt;</ph> as the callback parameter and returns a <ph id="ph4">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Threading.DispatcherOperation%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherOperation%601&gt;</ph> classes define a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.InvokeAsync%2A&gt;</ph>, you can use the <ph id="ph2">`await`</ph> keyword with either the <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> or the associated <ph id="ph4">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If you need to wait synchronously for the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> that is returned by a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherOperation%601&gt;</ph>, call the <ph id="ph4">&lt;xref:System.Windows.Threading.TaskExtensions.DispatcherOperationWait%2A&gt;</ph> extension method.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName&gt;</ph> will result in a deadlock if the operation is queued on a calling thread.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For more information about using a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> to perform asynchronous operations, see <bpt id="p1">[</bpt>Task Parallelism (Task Parallel Library)<ept id="p1">](../../../../docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Markup Extensions for Events</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>WPF 4.5 supports markup extensions for events.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>While WPF does not define a markup extension to be used for events, third parties are able to create a markup extension that can be used with events.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>What's New in the .NET Framework<ept id="p1">](../../../../docs/framework/whats-new/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>