{"content":"---\ntitle: \"Enhanced Strong Naming | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-bcl\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"strong-named assemblies\"\n  - \"strong naming [.NET Framework], enhanced\"\nms.assetid: 6cf17a82-62a1-4f6d-8d5a-d7d06dec2bb5\ncaps.latest.revision: 11\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Enhanced Strong Naming\nA strong name signature is an identity mechanism in the .NET Framework for identifying assemblies. It is a public-key digital signature that is typically used to verify the integrity of data being passed from an originator (signer) to a recipient (verifier). This signature is used as a unique identity for an assembly and ensures that references to the assembly are not ambiguous. The assembly is signed as part of the build process and then verified when it is loaded.  \n  \n Strong name signatures help prevent malicious parties from tampering with an assembly and then re-signing the assembly with the original signer’s key. However, strong name keys don’t contain any reliable information about the publisher, nor do they contain a certificate hierarchy. A strong name signature does not guarantee the trustworthiness of the person who signed the assembly or indicate whether that person was a legitimate owner of the key; it indicates only that the owner of the key signed the assembly. Therefore, we do not recommend using a strong name signature as a security validator for trusting third-party code. Microsoft Authenticode is the recommended way to authenticate code.  \n  \n## Limitations of Conventional Strong Names  \n The strong naming technology used in versions before the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] has the following shortcomings:  \n  \n-   Keys are constantly under attack, and improved techniques and hardware make it easier to infer a private key from a public key. To guard against attacks, larger keys are necessary. .NET Framework versions before the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] provide the ability to sign with any size key (the default size is 1024 bits), but signing an assembly with a new key breaks all binaries that reference the older identity of the assembly. Therefore, it is extremely difficult to upgrade the size of a signing key if you want to maintain compatibility.  \n  \n-   Strong name signing supports only the SHA-1 algorithm. SHA-1 has recently been found to be inadequate for secure hashing applications. Therefore, a stronger algorithm (SHA-256 or greater) is necessary. It is possible that SHA-1 will lose its FIPS-compliant standing, which would present problems for those who choose to use only FIPS-compliant software and algorithms.  \n  \n## Advantages of Enhanced Strong Names  \n The main advantages of enhanced strong names are compatibility with pre-existing strong names and the ability to claim that one identity is equivalent to another:  \n  \n-   Developers who have pre-existing signed assemblies can migrate their identities to the SHA-2 algorithms while maintaining compatibility with assemblies that reference the old identities.  \n  \n-   Developers who create new assemblies and are not concerned with pre-existing strong name signatures can use the more secure SHA-2 algorithms and sign the assemblies as they always have.  \n  \n## Using Enhanced Strong Names  \n Strong name keys consist of a signature key and an identity key. The assembly is signed with the signature key and is identified by the identity key. Prior to the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], these two keys were identical. Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], the identity key remains the same as in earlier .NET Framework versions, but the signature key is enhanced with a stronger hash algorithm. In addition, the signature key is signed with the identity key to create a counter-signature.  \n  \n The <xref:System.Reflection.AssemblySignatureKeyAttribute> attribute enables the assembly metadata to use the pre-existing public key for assembly identity, which allows old assembly references to continue to work.  The <xref:System.Reflection.AssemblySignatureKeyAttribute> attribute uses the counter-signature to ensure that the owner of the new signature key is also the owner of the old identity key.  \n  \n### Signing with SHA-2, Without Key Migration  \n Run the following commands from a Command Prompt window to sign an assembly without migrating a strong name signature:  \n  \n1.  Generate the new identity key (if necessary).  \n  \n    ```  \n    sn -k IdentityKey.snk  \n    ```  \n  \n2.  Extract the identity public key, and specify that a SHA-2 algorithm should be used when signing with this key.  \n  \n    ```  \n    sn -p IdentityKey.snk IdentityPubKey.snk sha256  \n    ```  \n  \n3.  Delay-sign the assembly with the identity public key file.  \n  \n    ```  \n    csc MyAssembly.cs /keyfile:IdentityPubKey.snk /delaySign+  \n    ```  \n  \n4.  Re-sign the assembly with the full identity key pair.  \n  \n    ```  \n    sn -Ra MyAssembly.exe IdentityKey.snk  \n    ```  \n  \n### Signing with SHA-2, with Key Migration  \n Run the following commands from a Command Prompt window to sign an assembly with a migrated strong name signature.  \n  \n1.  Generate an identity and signature key pair (if necessary).  \n  \n    ```  \n    sn -k IdentityKey.snk  \n    sn -k SignatureKey.snk  \n    ```  \n  \n2.  Extract the signature public key, and specify that a SHA-2 algorithm should be used when signing with this key.  \n  \n    ```  \n    sn -p SignatureKey.snk SignaturePubKey.snk sha256  \n    ```  \n  \n3.  Extract the identity public key, which determines the hash algorithm that generates a counter-signature.  \n  \n    ```  \n    sn -p IdentityKey.snk IdentityPubKey.snk  \n    ```  \n  \n4.  Generate the parameters for a <xref:System.Reflection.AssemblySignatureKeyAttribute> attribute, and attach the attribute to the assembly.  \n  \n    ```  \n    sn -ac IdentityPubKey.snk IdentityKey.snk SignaturePubKey.snk  \n    ```  \n  \n5.  Delay-sign the assembly with the identity public key.  \n  \n    ```  \n    csc MyAssembly.cs /keyfile:IdentityPubKey.snk /delaySign+  \n  \n    ```  \n  \n6.  Fully sign the assembly with the signature key pair.  \n  \n    ```  \n    sn -Ra MyAssembly.exe SignatureKey.snk  \n    ```  \n  \n## See Also  \n [Creating and Using Strong-Named Assemblies](../../../docs/framework/app-domains/create-and-use-strong-named-assemblies.md)","nodes":[{"pos":[12,51],"content":"Enhanced Strong Naming | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Enhanced Strong Naming | Microsoft Docs","pos":[0,39]}]},{"pos":[454,476],"content":"Enhanced Strong Naming","linkify":"Enhanced Strong Naming","nodes":[{"content":"Enhanced Strong Naming","pos":[0,22]}]},{"content":"A strong name signature is an identity mechanism in the .NET Framework for identifying assemblies.","pos":[477,575]},{"content":"It is a public-key digital signature that is typically used to verify the integrity of data being passed from an originator (signer) to a recipient (verifier).","pos":[576,735]},{"content":"This signature is used as a unique identity for an assembly and ensures that references to the assembly are not ambiguous.","pos":[736,858]},{"content":"The assembly is signed as part of the build process and then verified when it is loaded.","pos":[859,947]},{"content":"Strong name signatures help prevent malicious parties from tampering with an assembly and then re-signing the assembly with the original signer’s key.","pos":[954,1104]},{"content":"However, strong name keys don’t contain any reliable information about the publisher, nor do they contain a certificate hierarchy.","pos":[1105,1235]},{"content":"A strong name signature does not guarantee the trustworthiness of the person who signed the assembly or indicate whether that person was a legitimate owner of the key; it indicates only that the owner of the key signed the assembly.","pos":[1236,1468]},{"content":"Therefore, we do not recommend using a strong name signature as a security validator for trusting third-party code.","pos":[1469,1584]},{"content":"Microsoft Authenticode is the recommended way to authenticate code.","pos":[1585,1652]},{"pos":[1661,1701],"content":"Limitations of Conventional Strong Names","linkify":"Limitations of Conventional Strong Names","nodes":[{"content":"Limitations of Conventional Strong Names","pos":[0,40]}]},{"pos":[1705,1846],"content":"The strong naming technology used in versions before the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> has the following shortcomings:","source":"The strong naming technology used in versions before the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] has the following shortcomings:"},{"content":"Keys are constantly under attack, and improved techniques and hardware make it easier to infer a private key from a public key.","pos":[1856,1983]},{"content":"To guard against attacks, larger keys are necessary.","pos":[1984,2036]},{"content":".NET Framework versions before the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> provide the ability to sign with any size key (the default size is 1024 bits), but signing an assembly with a new key breaks all binaries that reference the older identity of the assembly.","pos":[2037,2313],"source":" .NET Framework versions before the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)] provide the ability to sign with any size key (the default size is 1024 bits), but signing an assembly with a new key breaks all binaries that reference the older identity of the assembly."},{"content":"Therefore, it is extremely difficult to upgrade the size of a signing key if you want to maintain compatibility.","pos":[2314,2426]},{"content":"Strong name signing supports only the SHA-1 algorithm.","pos":[2436,2490]},{"content":"SHA-1 has recently been found to be inadequate for secure hashing applications.","pos":[2491,2570]},{"content":"Therefore, a stronger algorithm (SHA-256 or greater) is necessary.","pos":[2571,2637]},{"content":"It is possible that SHA-1 will lose its FIPS-compliant standing, which would present problems for those who choose to use only FIPS-compliant software and algorithms.","pos":[2638,2804]},{"pos":[2813,2848],"content":"Advantages of Enhanced Strong Names","linkify":"Advantages of Enhanced Strong Names","nodes":[{"content":"Advantages of Enhanced Strong Names","pos":[0,35]}]},{"content":"The main advantages of enhanced strong names are compatibility with pre-existing strong names and the ability to claim that one identity is equivalent to another:","pos":[2852,3014]},{"content":"Developers who have pre-existing signed assemblies can migrate their identities to the SHA-2 algorithms while maintaining compatibility with assemblies that reference the old identities.","pos":[3024,3210]},{"content":"Developers who create new assemblies and are not concerned with pre-existing strong name signatures can use the more secure SHA-2 algorithms and sign the assemblies as they always have.","pos":[3220,3405]},{"pos":[3414,3441],"content":"Using Enhanced Strong Names","linkify":"Using Enhanced Strong Names","nodes":[{"content":"Using Enhanced Strong Names","pos":[0,27]}]},{"content":"Strong name keys consist of a signature key and an identity key.","pos":[3445,3509]},{"content":"The assembly is signed with the signature key and is identified by the identity key.","pos":[3510,3594]},{"content":"Prior to the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, these two keys were identical.","pos":[3595,3692],"source":" Prior to the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], these two keys were identical."},{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, the identity key remains the same as in earlier .NET Framework versions, but the signature key is enhanced with a stronger hash algorithm.","pos":[3693,3903],"source":" Starting with the [!INCLUDE[net_v45](../../../includes/net-v45-md.md)], the identity key remains the same as in earlier .NET Framework versions, but the signature key is enhanced with a stronger hash algorithm."},{"content":"In addition, the signature key is signed with the identity key to create a counter-signature.","pos":[3904,3997]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblySignatureKeyAttribute&gt;</ph> attribute enables the assembly metadata to use the pre-existing public key for assembly identity, which allows old assembly references to continue to work.","pos":[4004,4218],"source":"The <xref:System.Reflection.AssemblySignatureKeyAttribute> attribute enables the assembly metadata to use the pre-existing public key for assembly identity, which allows old assembly references to continue to work."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblySignatureKeyAttribute&gt;</ph> attribute uses the counter-signature to ensure that the owner of the new signature key is also the owner of the old identity key.","pos":[4220,4408],"source":"  The <xref:System.Reflection.AssemblySignatureKeyAttribute> attribute uses the counter-signature to ensure that the owner of the new signature key is also the owner of the old identity key."},{"pos":[4418,4459],"content":"Signing with SHA-2, Without Key Migration","linkify":"Signing with SHA-2, Without Key Migration","nodes":[{"content":"Signing with SHA-2, Without Key Migration","pos":[0,41]}]},{"content":"Run the following commands from a Command Prompt window to sign an assembly without migrating a strong name signature:","pos":[4463,4581]},{"content":"Generate the new identity key (if necessary).","pos":[4591,4636]},{"content":"Extract the identity public key, and specify that a SHA-2 algorithm should be used when signing with this key.","pos":[4697,4807]},{"content":"Delay-sign the assembly with the identity public key file.","pos":[4894,4952]},{"content":"Re-sign the assembly with the full identity key pair.","pos":[5049,5102]},{"pos":[5179,5217],"content":"Signing with SHA-2, with Key Migration","linkify":"Signing with SHA-2, with Key Migration","nodes":[{"content":"Signing with SHA-2, with Key Migration","pos":[0,38]}]},{"content":"Run the following commands from a Command Prompt window to sign an assembly with a migrated strong name signature.","pos":[5221,5335]},{"content":"Generate an identity and signature key pair (if necessary).","pos":[5345,5404]},{"content":"Extract the signature public key, and specify that a SHA-2 algorithm should be used when signing with this key.","pos":[5494,5605]},{"content":"Extract the identity public key, which determines the hash algorithm that generates a counter-signature.","pos":[5694,5798]},{"content":"Generate the parameters for a <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblySignatureKeyAttribute&gt;</ph> attribute, and attach the attribute to the assembly.","pos":[5878,6015],"source":"Generate the parameters for a <xref:System.Reflection.AssemblySignatureKeyAttribute> attribute, and attach the attribute to the assembly."},{"content":"Delay-sign the assembly with the identity public key.","pos":[6116,6169]},{"content":"Fully sign the assembly with the signature key pair.","pos":[6269,6321]},{"pos":[6398,6406],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6410,6533],"content":"<bpt id=\"p1\">[</bpt>Creating and Using Strong-Named Assemblies<ept id=\"p1\">](../../../docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>","source":"[Creating and Using Strong-Named Assemblies](../../../docs/framework/app-domains/create-and-use-strong-named-assemblies.md)"}]}