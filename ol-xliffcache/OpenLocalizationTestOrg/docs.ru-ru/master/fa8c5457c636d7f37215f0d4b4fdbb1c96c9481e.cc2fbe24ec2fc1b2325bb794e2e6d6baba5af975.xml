{"content":"---\ntitle: \"Tutorial: Implement a Windows Communication Foundation service contract\"\nms.date: 03/19/2019\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"service contracts [WCF], implementing\"\nms.assetid: d5ab51ba-61ae-403e-b3c8-e2669e326806\n---\n# Tutorial: Implement a Windows Communication Foundation service contract\n\nThis tutorial describes the second of five tasks required to create a basic Windows Communication Foundation (WCF) application. For an overview of the tutorials, see [Tutorial: Get started with Windows Communication Foundation applications](getting-started-tutorial.md).\n\nThe next step for creating a WCF application is to add code to implement the WCF service interface that you created in the previous step. In this step, you create a class named `CalculatorService` that implements the user-defined `ICalculator` interface. Each method in the following code calls a calculator operation and writes text to the console to test it. \n\nIn this tutorial, you learn how to:\n> [!div class=\"checklist\"]\n> - Add code to implement the WCF service contract.\n> - Build the solution.\n\n## Add code to implement the WCF service contract\n\nIn **GettingStartedLib**, open the **Service1.cs** or **Service1.vb** file and replace its code with the following code:\n\n```csharp\nusing System;\nusing System.ServiceModel;\n\nnamespace GettingStartedLib\n{\n    public class CalculatorService : ICalculator\n    {\n        public double Add(double n1, double n2)\n        {\n            double result = n1 + n2;\n            Console.WriteLine(\"Received Add({0},{1})\", n1, n2);\n            // Code added to write output to the console window.\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n\n        public double Subtract(double n1, double n2)\n        {\n            double result = n1 - n2;\n            Console.WriteLine(\"Received Subtract({0},{1})\", n1, n2);\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n\n        public double Multiply(double n1, double n2)\n        {\n            double result = n1 * n2;\n            Console.WriteLine(\"Received Multiply({0},{1})\", n1, n2);\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n\n        public double Divide(double n1, double n2)\n        {\n            double result = n1 / n2;\n            Console.WriteLine(\"Received Divide({0},{1})\", n1, n2);\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n    }\n}\n```\n\n```vb\nImports System.ServiceModel\n\nNamespace GettingStartedLib\n\n    Public Class CalculatorService\n        Implements ICalculator\n\n        Public Function Add(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Add\n            Dim result As Double = n1 + n2\n            ' Code added to write output to the console window.\n            Console.WriteLine(\"Received Add({0},{1})\", n1, n2)\n            Console.WriteLine(\"Return: {0}\", result)\n            Return result\n        End Function\n\n        Public Function Subtract(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Subtract\n            Dim result As Double = n1 - n2\n            Console.WriteLine(\"Received Subtract({0},{1})\", n1, n2)\n            Console.WriteLine(\"Return: {0}\", result)\n            Return result\n\n        End Function\n\n        Public Function Multiply(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Multiply\n            Dim result As Double = n1 * n2\n            Console.WriteLine(\"Received Multiply({0},{1})\", n1, n2)\n            Console.WriteLine(\"Return: {0}\", result)\n            Return result\n\n        End Function\n\n        Public Function Divide(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Divide\n            Dim result As Double = n1 / n2\n            Console.WriteLine(\"Received Divide({0},{1})\", n1, n2)\n            Console.WriteLine(\"Return: {0}\", result)\n            Return result\n\n        End Function\n    End Class\nEnd Namespace\n```\n\n## Edit App.config\n\nEdit **App.config** in **GettingStartedLib** to reflect the changes you made to the code.\n- For Visual C# projects:\n  - Change line 14 to `<service name=\"GettingStartedLib.CalculatorService\">`\n  - Change line 17 to `<add baseAddress = \"http://localhost:8000/GettingStarted/CalculatorService\" />`\n  - Change line 22 to `<endpoint address=\"\" binding=\"wsHttpBinding\" contract=\"GettingStartedLib.ICalculator\">`\n\n- For Visual Basic projects:\n  - Change line 14 to `<service name=\"GettingStartedLib.GettingStartedLib.CalculatorService\">`\n  - Change line 17 to `<add baseAddress = \"http://localhost:8000/GettingStarted/CalculatorService\" />`\n  - Change line 22 to `<endpoint address=\"\" binding=\"wsHttpBinding\" contract=\"GettingStartedLib.GettingStartedLib.ICalculator\">`\n\n## Compile the code\n\nBuild the solution to verify there aren't any compilation errors. If you're using Visual Studio, on the **Build** menu select **Build Solution** (or press **Ctrl**+**Shift**+**B**).\n\n## Next steps\n\nIn this tutorial, you learned how to:\n> [!div class=\"checklist\"]\n> - Add code to implement the WCF service contract.\n> - Build the solution.\n\nAdvance to the next tutorial to learn how to run the WCF service.\n\n> [!div class=\"nextstepaction\"]\n> [Tutorial: Host and run a basic WCF service](how-to-host-and-run-a-basic-wcf-service.md)\n","nodes":[{"pos":[4,251],"embed":true,"restype":"x-metadata","content":"title: \"Tutorial: Implement a Windows Communication Foundation service contract\"\nms.date: 03/19/2019\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"service contracts [WCF], implementing\"\nms.assetid: d5ab51ba-61ae-403e-b3c8-e2669e326806","nodes":[{"content":"Tutorial: Implement a Windows Communication Foundation service contract","nodes":[{"pos":[0,71],"content":"Tutorial: Implement a Windows Communication Foundation service contract","nodes":[{"content":"Tutorial: Implement a Windows Communication Foundation service contract","pos":[0,71]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[258,329],"content":"Tutorial: Implement a Windows Communication Foundation service contract","linkify":"Tutorial: Implement a Windows Communication Foundation service contract","nodes":[{"content":"Tutorial: Implement a Windows Communication Foundation service contract","pos":[0,71]}]},{"content":"This tutorial describes the second of five tasks required to create a basic Windows Communication Foundation (WCF) application.","pos":[331,458]},{"content":"For an overview of the tutorials, see <bpt id=\"p1\">[</bpt>Tutorial: Get started with Windows Communication Foundation applications<ept id=\"p1\">](getting-started-tutorial.md)</ept>.","pos":[459,601],"source":" For an overview of the tutorials, see [Tutorial: Get started with Windows Communication Foundation applications](getting-started-tutorial.md)."},{"content":"The next step for creating a WCF application is to add code to implement the WCF service interface that you created in the previous step.","pos":[603,740]},{"content":"In this step, you create a class named <ph id=\"ph1\">`CalculatorService`</ph> that implements the user-defined <ph id=\"ph2\">`ICalculator`</ph> interface.","pos":[741,857],"source":" In this step, you create a class named `CalculatorService` that implements the user-defined `ICalculator` interface."},{"content":"Each method in the following code calls a calculator operation and writes text to the console to test it.","pos":[858,963]},{"content":"In this tutorial, you learn how to:","pos":[966,1001]},{"content":"Add code to implement the WCF service contract.","pos":[1033,1080]},{"content":"Build the solution.","pos":[1085,1104]},{"pos":[1109,1155],"content":"Add code to implement the WCF service contract","linkify":"Add code to implement the WCF service contract","nodes":[{"content":"Add code to implement the WCF service contract","pos":[0,46]}]},{"pos":[1157,1277],"content":"In <bpt id=\"p1\">**</bpt>GettingStartedLib<ept id=\"p1\">**</ept>, open the <bpt id=\"p2\">**</bpt>Service1.cs<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Service1.vb<ept id=\"p3\">**</ept> file and replace its code with the following code:","source":"In **GettingStartedLib**, open the **Service1.cs** or **Service1.vb** file and replace its code with the following code:"},{"pos":[4043,4058],"content":"Edit App.config","linkify":"Edit App.config","nodes":[{"content":"Edit App.config","pos":[0,15]}]},{"pos":[4060,4149],"content":"Edit <bpt id=\"p1\">**</bpt>App.config<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>GettingStartedLib<ept id=\"p2\">**</ept> to reflect the changes you made to the code.","source":"Edit **App.config** in **GettingStartedLib** to reflect the changes you made to the code."},{"content":"For Visual C# projects:","pos":[4152,4175]},{"pos":[4180,4252],"content":"Change line 14 to <ph id=\"ph1\">`&lt;service name=\"GettingStartedLib.CalculatorService\"&gt;`</ph>","source":"Change line 14 to `<service name=\"GettingStartedLib.CalculatorService\">`"},{"pos":[4257,4355],"content":"Change line 17 to <ph id=\"ph1\">`&lt;add baseAddress = \"http://localhost:8000/GettingStarted/CalculatorService\" /&gt;`</ph>","source":"Change line 17 to `<add baseAddress = \"http://localhost:8000/GettingStarted/CalculatorService\" />`"},{"pos":[4360,4466],"content":"Change line 22 to <ph id=\"ph1\">`&lt;endpoint address=\"\" binding=\"wsHttpBinding\" contract=\"GettingStartedLib.ICalculator\"&gt;`</ph>","source":"Change line 22 to `<endpoint address=\"\" binding=\"wsHttpBinding\" contract=\"GettingStartedLib.ICalculator\">`"},{"content":"For Visual Basic projects:","pos":[4470,4496]},{"pos":[4501,4591],"content":"Change line 14 to <ph id=\"ph1\">`&lt;service name=\"GettingStartedLib.GettingStartedLib.CalculatorService\"&gt;`</ph>","source":"Change line 14 to `<service name=\"GettingStartedLib.GettingStartedLib.CalculatorService\">`"},{"pos":[4596,4694],"content":"Change line 17 to <ph id=\"ph1\">`&lt;add baseAddress = \"http://localhost:8000/GettingStarted/CalculatorService\" /&gt;`</ph>","source":"Change line 17 to `<add baseAddress = \"http://localhost:8000/GettingStarted/CalculatorService\" />`"},{"pos":[4699,4823],"content":"Change line 22 to <ph id=\"ph1\">`&lt;endpoint address=\"\" binding=\"wsHttpBinding\" contract=\"GettingStartedLib.GettingStartedLib.ICalculator\"&gt;`</ph>","source":"Change line 22 to `<endpoint address=\"\" binding=\"wsHttpBinding\" contract=\"GettingStartedLib.GettingStartedLib.ICalculator\">`"},{"pos":[4828,4844],"content":"Compile the code","linkify":"Compile the code","nodes":[{"content":"Compile the code","pos":[0,16]}]},{"content":"Build the solution to verify there aren't any compilation errors.","pos":[4846,4911]},{"content":"If you're using Visual Studio, on the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> menu select <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept> (or press <bpt id=\"p3\">**</bpt>Ctrl<ept id=\"p3\">**</ept><ph id=\"ph1\">+</ph><bpt id=\"p4\">**</bpt>Shift<ept id=\"p4\">**</ept><ph id=\"ph2\">+</ph><bpt id=\"p5\">**</bpt>B<ept id=\"p5\">**</ept>).","pos":[4912,5027],"source":" If you're using Visual Studio, on the **Build** menu select **Build Solution** (or press **Ctrl**+**Shift**+**B**)."},{"pos":[5032,5042],"content":"Next steps","linkify":"Next steps","nodes":[{"content":"Next steps","pos":[0,10]}]},{"content":"In this tutorial, you learned how to:","pos":[5044,5081]},{"content":"Add code to implement the WCF service contract.","pos":[5113,5160]},{"content":"Build the solution.","pos":[5165,5184]},{"content":"Advance to the next tutorial to learn how to run the WCF service.","pos":[5186,5251]},{"pos":[5255,5375],"content":"[!div class=\"nextstepaction\"]\n[Tutorial: Host and run a basic WCF service](how-to-host-and-run-a-basic-wcf-service.md)","leadings":["","> "],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Tutorial: Host and run a basic WCF service<ept id=\"p1\">](how-to-host-and-run-a-basic-wcf-service.md)</ept>","pos":[30,118],"source":"[Tutorial: Host and run a basic WCF service](how-to-host-and-run-a-basic-wcf-service.md)"}]}]}