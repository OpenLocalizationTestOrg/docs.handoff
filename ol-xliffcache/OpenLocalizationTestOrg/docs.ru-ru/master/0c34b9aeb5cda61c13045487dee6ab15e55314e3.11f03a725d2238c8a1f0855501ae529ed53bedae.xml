{"content":"---\ntitle: \"How to: Stream XML Fragments from an XmlReader (C#)\"\nms.date: 07/20/2015\nms.assetid: 4a8f0e45-768a-42e2-bc5f-68bdf0e0a726\n---\n# How to: Stream XML Fragments from an XmlReader (C#)\nWhen you have to process large XML files, it might not be feasible to load the whole XML tree into memory. This topic shows how to stream fragments using an <xref:System.Xml.XmlReader>.  \n  \n One of the most effective ways to use an <xref:System.Xml.XmlReader> to read <xref:System.Xml.Linq.XElement> objects is to write your own custom axis method. An axis method typically returns a collection such as <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, as shown in the example in this topic. In the custom axis method, after you create the XML fragment by calling the <xref:System.Xml.Linq.XNode.ReadFrom%2A> method, return the collection using `yield return`. This provides deferred execution semantics to your custom axis method.  \n  \n When you create an XML tree from an <xref:System.Xml.XmlReader> object, the <xref:System.Xml.XmlReader> must be positioned on an element. The <xref:System.Xml.Linq.XNode.ReadFrom%2A> method does not return until it has read the close tag of the element.  \n  \n If you want to create a partial tree, you can instantiate an <xref:System.Xml.XmlReader>, position the reader on the node that you want to convert to an <xref:System.Xml.Linq.XElement> tree, and then create the <xref:System.Xml.Linq.XElement> object.  \n  \n The topic [How to: Stream XML Fragments with Access to Header Information (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md) contains information and an example on how to stream a more complex document.  \n  \n The topic [How to: Perform Streaming Transform of Large XML Documents (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md) contains an example of using LINQ to XML to transform extremely large XML documents while maintaining a small memory footprint.  \n  \n## Example  \n This example creates a custom axis method. You can query it by using a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query. The custom axis method, `StreamRootChildDoc`, is a method that is designed specifically to read a document that has a repeating `Child` element.  \n  \n```csharp  \nstatic IEnumerable<XElement> StreamRootChildDoc(StringReader stringReader)  \n{  \n    using (XmlReader reader = XmlReader.Create(stringReader))  \n    {  \n        reader.MoveToContent();  \n        // Parse the file and display each of the nodes.  \n        while (reader.Read())  \n        {  \n            switch (reader.NodeType)  \n            {  \n                case XmlNodeType.Element:  \n                    if (reader.Name == \"Child\") {  \n                        XElement el = XElement.ReadFrom(reader) as XElement;  \n                        if (el != null)  \n                            yield return el;  \n                    }  \n                    break;  \n            }  \n        }  \n    }  \n}  \n  \nstatic void Main(string[] args)  \n{  \n    string markup = @\"<Root>  \n      <Child Key=\"\"01\"\">  \n        <GrandChild>aaa</GrandChild>  \n      </Child>  \n      <Child Key=\"\"02\"\">  \n        <GrandChild>bbb</GrandChild>  \n      </Child>  \n      <Child Key=\"\"03\"\">  \n        <GrandChild>ccc</GrandChild>  \n      </Child>  \n    </Root>\";  \n  \n    IEnumerable<string> grandChildData =  \n        from el in StreamRootChildDoc(new StringReader(markup))  \n        where (int)el.Attribute(\"Key\") > 1  \n        select (string)el.Element(\"GrandChild\");  \n  \n    foreach (string str in grandChildData) {  \n        Console.WriteLine(str);  \n    }  \n}  \n```  \n  \n This example produces the following output:  \n  \n```  \nbbb  \nccc  \n```  \n  \n In this example, the source document is very small. However, even if there were millions of `Child` elements, this example would still have a small memory footprint.  \n  \n## See also\n\n- [Parsing XML (C#)](../../../../csharp/programming-guide/concepts/linq/parsing-xml.md)\n","nodes":[{"pos":[4,133],"embed":true,"restype":"x-metadata","content":"title: \"How to: Stream XML Fragments from an XmlReader (C#)\"\nms.date: 07/20/2015\nms.assetid: 4a8f0e45-768a-42e2-bc5f-68bdf0e0a726","nodes":[{"content":"How to: Stream XML Fragments from an XmlReader (C#)","nodes":[{"pos":[0,51],"content":"How to: Stream XML Fragments from an XmlReader (C#)","nodes":[{"content":"How to: Stream XML Fragments from an XmlReader (C#)","pos":[0,51]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[140,191],"content":"How to: Stream XML Fragments from an XmlReader (C#)","linkify":"How to: Stream XML Fragments from an XmlReader (C#)","nodes":[{"content":"How to: Stream XML Fragments from an XmlReader (C#)","pos":[0,51]}]},{"content":"When you have to process large XML files, it might not be feasible to load the whole XML tree into memory.","pos":[192,298]},{"content":"This topic shows how to stream fragments using an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[299,377],"source":" This topic shows how to stream fragments using an <xref:System.Xml.XmlReader>."},{"content":"One of the most effective ways to use an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> to read <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects is to write your own custom axis method.","pos":[384,541],"source":"One of the most effective ways to use an <xref:System.Xml.XmlReader> to read <xref:System.Xml.Linq.XElement> objects is to write your own custom axis method."},{"content":"An axis method typically returns a collection such as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, as shown in the example in this topic.","pos":[542,720],"source":" An axis method typically returns a collection such as <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, as shown in the example in this topic."},{"content":"In the custom axis method, after you create the XML fragment by calling the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.ReadFrom%2A&gt;</ph> method, return the collection using <ph id=\"ph2\">`yield return`</ph>.","pos":[721,889],"source":" In the custom axis method, after you create the XML fragment by calling the <xref:System.Xml.Linq.XNode.ReadFrom%2A> method, return the collection using `yield return`."},{"content":"This provides deferred execution semantics to your custom axis method.","pos":[890,960]},{"content":"When you create an XML tree from an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> object, the <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph> must be positioned on an element.","pos":[967,1104],"source":"When you create an XML tree from an <xref:System.Xml.XmlReader> object, the <xref:System.Xml.XmlReader> must be positioned on an element."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.ReadFrom%2A&gt;</ph> method does not return until it has read the close tag of the element.","pos":[1105,1220],"source":" The <xref:System.Xml.Linq.XNode.ReadFrom%2A> method does not return until it has read the close tag of the element."},{"pos":[1227,1477],"content":"If you want to create a partial tree, you can instantiate an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>, position the reader on the node that you want to convert to an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> tree, and then create the <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> object.","source":"If you want to create a partial tree, you can instantiate an <xref:System.Xml.XmlReader>, position the reader on the node that you want to convert to an <xref:System.Xml.Linq.XElement> tree, and then create the <xref:System.Xml.Linq.XElement> object."},{"pos":[1484,1758],"content":"The topic <bpt id=\"p1\">[</bpt>How to: Stream XML Fragments with Access to Header Information (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md)</ept> contains information and an example on how to stream a more complex document.","source":"The topic [How to: Stream XML Fragments with Access to Header Information (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-stream-xml-fragments-with-access-to-header-information.md) contains information and an example on how to stream a more complex document."},{"pos":[1765,2081],"content":"The topic <bpt id=\"p1\">[</bpt>How to: Perform Streaming Transform of Large XML Documents (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md)</ept> contains an example of using LINQ to XML to transform extremely large XML documents while maintaining a small memory footprint.","source":"The topic [How to: Perform Streaming Transform of Large XML Documents (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md) contains an example of using LINQ to XML to transform extremely large XML documents while maintaining a small memory footprint."},{"pos":[2090,2097],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example creates a custom axis method.","pos":[2101,2143]},{"content":"You can query it by using a <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query.","pos":[2144,2228],"source":" You can query it by using a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query."},{"content":"The custom axis method, <ph id=\"ph1\">`StreamRootChildDoc`</ph>, is a method that is designed specifically to read a document that has a repeating <ph id=\"ph2\">`Child`</ph> element.","pos":[2229,2373],"source":" The custom axis method, `StreamRootChildDoc`, is a method that is designed specifically to read a document that has a repeating `Child` element."},{"content":"This example produces the following output:","pos":[3744,3787]},{"content":"In this example, the source document is very small.","pos":[3821,3872]},{"content":"However, even if there were millions of <ph id=\"ph1\">`Child`</ph> elements, this example would still have a small memory footprint.","pos":[3873,3986],"source":" However, even if there were millions of `Child` elements, this example would still have a small memory footprint."},{"pos":[3995,4003],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4007,4092],"content":"<bpt id=\"p1\">[</bpt>Parsing XML (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/parsing-xml.md)</ept>","source":"[Parsing XML (C#)](../../../../csharp/programming-guide/concepts/linq/parsing-xml.md)"}]}