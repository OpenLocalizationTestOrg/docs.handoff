<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99cf844513e7264d9542cd3502613b5e2b90da76</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\tools\mdbg-exe.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e4d33f0f8cd169fecb74a494a136bc9419901f4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2af2872dc93ed37a0bdecf6d418f715dcb8d5420</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MDbg.exe (.NET Framework Command-Line Debugger) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MDbg.exe (.NET Framework Command-Line Debugger)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The NET Framework Command-Line Debugger helps tools vendors and application developers find and fix bugs in programs that target the .NET Framework common language runtime.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tool uses the runtime debugging API to provide debugging services.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use MDbg.exe to debug only managed code; there is no support for debugging unmanaged code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This tool is available through NuGet.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For installation information, see <bpt id="p1">[</bpt>MDbg 0.1.0<ept id="p1">](http://www.nuget.org/packages/MDbg/0.1.0)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To run the tool, use the Package Manager Console.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information how to use the Package Manager Console, see <bpt id="p1">[</bpt>Using the Package Manager Console<ept id="p1">](http://docs.nuget.org/docs/start-here/Using-the-Package-Manager-Console)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At the Package Manager prompt, type the following:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Commands</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you are in the debugger (as indicated by the <bpt id="p1">**</bpt>mdbg&gt;<ept id="p1">**</ept> prompt), type one of the commands described in the next section:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>command<ept id="p1">**</ept> [<bpt id="p2">*</bpt>arguments<ept id="p2">*</ept>]</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>MDbg.exe commands are case-sensitive.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Command</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ap<ept id="p1">**</ept>[<bpt id="p2">**</bpt>rocess<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>number<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Switches to another debugged process or prints available processes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The numbers are not real process IDs (PIDs), but a 0-indexed list.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>a<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ttach<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>pid<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Attaches to a process or prints available processes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>b<ept id="p1">**</ept>[<bpt id="p2">**</bpt>reak<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>ClassName.Method<ept id="p3">*</ept> &amp;#124; <bpt id="p4">*</bpt>FileName:LineNo<ept id="p4">*</ept>]</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Sets a breakpoint at the specified method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Modules are scanned sequentially.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">**</bpt>break<ept id="p1">**</ept> <bpt id="p2">*</bpt>FileName:LineNo<ept id="p2">*</ept> sets a breakpoint at a location in the source.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">**</bpt>break<ept id="p1">**</ept> <bpt id="p2">*</bpt>~number<ept id="p2">*</ept> sets a breakpoint on a symbol recently displayed with the <bpt id="p3">**</bpt>x<ept id="p3">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">**</bpt>break<ept id="p1">**</ept> <bpt id="p2">*</bpt>module!ClassName.Method+IlOffset<ept id="p2">*</ept> sets a breakpoint on the fully qualified location.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>block<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ingObjects<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Displays monitor locks, which are blocking threads.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ca<ept id="p1">**</ept>[<bpt id="p2">**</bpt>tch<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>exceptionType<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Causes the debugger to break on all exceptions, and not just on the unhandled exceptions.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>cl<ept id="p1">**</ept>[<bpt id="p2">**</bpt>earException<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Marks the current exception as handled so that execution can continue.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the cause of the exception has not been dealt with, the exception may be quickly rethrown.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>conf<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ig<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>option value<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Displays all configurable options and shows how the options are invoked without any optional values.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the option is specified, sets <ph id="ph1">`value`</ph> as the current option.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following options are currently available:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`extpath`</ph> sets the path to search for  extensions when the <ph id="ph3">`load`</ph> command is used.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`extpath+`</ph> adds a path for loading extensions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>del<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ete<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Deletes a breakpoint.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>de<ept id="p1">**</ept>[<bpt id="p2">**</bpt>tach<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Detaches from a debugged process.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>d<ept id="p1">**</ept>[<bpt id="p2">**</bpt>own<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>frames<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Moves the active stack frame down.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>echo<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Echoes a message to the console.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>enableNotif<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ication<ept id="p2">**</ept>] <bpt id="p3">*</bpt>typeName<ept id="p3">*</ept> 0&amp;#124;1</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Enables (1) or disables (0) custom notifications for the specified type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ex<ept id="p1">**</ept>[<bpt id="p2">**</bpt>it<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>exitcode<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Exits the MDbg.exe shell, and optionally specifies the process exit code.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fo<ept id="p1">**</ept>[<bpt id="p2">**</bpt>reach<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>OtherCommand<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Performs a command on all threads.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>OtherCommand<ept id="p1">*</ept> is a valid command that operates on one thread; <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> <bpt id="p3">*</bpt>OtherCommand<ept id="p3">*</ept> performs the same command on all threads.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>f<ept id="p1">**</ept>[<bpt id="p2">**</bpt>unceval<ept id="p2">**</ept>] [<ph id="ph1">`-ad`</ph> <bpt id="p3">*</bpt>Num<ept id="p3">*</ept>] <bpt id="p4">*</bpt>functionName<ept id="p4">*</ept> [<bpt id="p5">*</bpt>args ...<ept id="p5">*</ept> ]</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Performs a function evaluation on the current active thread where the function to evaluate is <bpt id="p1">*</bpt>functionName<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The function name must be fully qualified, including namespaces.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-ad`</ph> option specifies the application domain to use to resolve the function.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`-ad`</ph> option is not specified, the application domain for resolution defaults to the application domain where the thread that is used for function evaluation is located.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the function that is being evaluated is not static, the first parameter passed in should be a <ph id="ph1">`this`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>All application domains are searched for arguments to the function evaluation..</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To request a value from an application domain, prefix the variable with the module and application domain name; for example, <ph id="ph1">`funceval -ad 0 System.Object.ToString hello.exe#0!MyClass.g_rootRef`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This command evaluates the function <ph id="ph1">`System.Object.ToString`</ph> in the application domain <ph id="ph2">`0`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`ToString`</ph> method is an instance function, the first parameter must be a <ph id="ph2">`this`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>g<ept id="p1">**</ept>[<bpt id="p2">**</bpt>o<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Causes the program to continue until it encounters a breakpoint, the program exits, or an event (for example, an unhandled exception) causes the program to stop.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>h<ept id="p1">**</ept>[<bpt id="p2">**</bpt>elp<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>command<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>?<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">*</bpt>command<ept id="p1">*</ept>]</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Displays a description of all commands or a detailed description of a specified command.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ig<ept id="p1">**</ept>[<bpt id="p2">**</bpt>nore<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>event<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Causes the debugger to stop on unhandled exceptions only.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>int<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ercept<ept id="p2">**</ept>] <bpt id="p3">*</bpt>FrameNumber<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Rolls the debugger back to a specified frame number.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the debugger encounters an exception, use this command to roll the debugger back to the specified frame number.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can change the program state by using the <bpt id="p1">**</bpt>set<ept id="p1">**</ept> command and continue by using the <bpt id="p2">**</bpt>go<ept id="p2">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>k<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ill<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Stops the active process.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>l<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ist<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>modules<ept id="p3">*</ept> &amp;#124; <bpt id="p4">*</bpt>appdomains<ept id="p4">*</ept> &amp;#124; <bpt id="p5">*</bpt>assemblies<ept id="p5">*</ept>]</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Displays the loaded modules, application domains, or assemblies.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>lo<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ad<ept id="p2">**</ept>] <bpt id="p3">*</bpt>assemblyName<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Loads an extension in the following manner: The specified assembly is loaded and an attempt is then made to run the static method <ph id="ph1">`LoadExtension`</ph> from the <ph id="ph2">`Microsoft.Tools.Mdbg.Extension.Extension`</ph> type.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>log<ept id="p1">**</ept> [<bpt id="p2">*</bpt>eventType<ept id="p2">*</ept>]</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Set or display the events to be logged.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>mo<ept id="p1">**</ept>[<bpt id="p2">**</bpt>de<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>option on/off<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Sets different debugger options.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`mode`</ph> with no options to get a list of the debugging modes and their current settings.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>mon<ept id="p1">**</ept>[<bpt id="p2">**</bpt>itorInfo<ept id="p2">**</ept>] <bpt id="p3">*</bpt>monitorReference<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Displays object monitor lock information.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>newo<ept id="p1">**</ept>[<bpt id="p2">**</bpt>bj<ept id="p2">**</ept>] <bpt id="p3">*</bpt>typeName<ept id="p3">*</ept> [<bpt id="p4">*</bpt>arguments...<ept id="p4">*</ept>]</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Creates a new object of type <bpt id="p1">*</bpt>typeName<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">n</ph><ept id="p1">**</ept>[<bpt id="p2">**</bpt>ext<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Runs code and moves to the next line (even if the next line includes many function calls).</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Opendump<ept id="p1">**</ept> <bpt id="p2">*</bpt>pathToDumpFile<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Opens the specified dump file for debugging.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>o<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ut<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Moves to the end of the current function.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>pa<ept id="p1">**</ept>[<bpt id="p2">**</bpt>th<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>pathName<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Searches the specified path for the source files if the location in the binaries is not available.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>p<ept id="p1">**</ept>[<bpt id="p2">**</bpt>rint<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>var<ept id="p3">*</ept>] &amp;#124; [<ph id="ph1">`-d`</ph>]</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Prints all variables in scope (<bpt id="p1">**</bpt>print<ept id="p1">**</ept>), prints the specified variable (<bpt id="p2">**</bpt>print<ept id="p2">**</ept> <bpt id="p3">*</bpt>var<ept id="p3">*</ept>), or prints the debugger variables (<bpt id="p4">**</bpt>print<ept id="p4">**</ept><ph id="ph1">`-d`</ph>).</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>printe<ept id="p1">**</ept>[<bpt id="p2">**</bpt>xception<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>-r<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Prints the last exception on the current thread.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`–r`</ph> (recursive) option to traverse the <ph id="ph2">`InnerException`</ph> property on the exception object to get information about the entire chain of exceptions.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>pro<ept id="p1">**</ept>[<bpt id="p2">**</bpt>cessenum<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Displays the active processes.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>q<ept id="p1">**</ept>[<bpt id="p2">**</bpt>uit<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>exitcode<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Quits the MDbg.exe shell, optionally specifying the process exit code.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>re<ept id="p1">**</ept>[<bpt id="p2">**</bpt>sume<ept id="p2">**</ept>] [<ph id="ph1">`*`</ph> &amp;#124; [<ph id="ph2">`~`</ph>]<bpt id="p3">*</bpt>threadNumber<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Resumes the current thread or the thread specified by the <bpt id="p1">*</bpt>threadNumber<ept id="p1">*</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>threadNumber<ept id="p1">*</ept> parameter is specified as <ph id="ph1">`*`</ph> or if the thread number starts with <ph id="ph2">`~`</ph>, the command applies to all threads except the one specified by <bpt id="p2">*</bpt>threadNumber<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Resuming a non-suspended thread has no effect.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>r<ept id="p1">**</ept>[<bpt id="p2">**</bpt>un<ept id="p2">**</ept>] [<ph id="ph1">`-d`</ph>(<ph id="ph2">`ebug`</ph>) &amp;#124; -<ph id="ph3">`o`</ph>(<ph id="ph4">`ptimize`</ph>) &amp;#124;<ph id="ph5">`-enc`</ph>] [[<bpt id="p3">*</bpt>path_to_exe<ept id="p3">*</ept>] [<bpt id="p4">*</bpt>args_to_exe<ept id="p4">*</ept>]]</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Stops the current process (if there is one) and starts a new one.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If no executable argument is passed, this command runs the program that was previously executed with the <ph id="ph1">`run`</ph> command.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If the executable argument is provided, the specified program is run using the optionally supplied arguments.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If class load, module load, and thread start events are ignored (as they are by default), the program stops on the first executable instruction of the main thread.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You can force the debugger to just-in-time (JIT) compile the code by using one of the following three flags:</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`-d`</ph> <bpt id="p1">*</bpt>(<ept id="p1">*</ept> <ph id="ph3">`ebug`</ph> <bpt id="p2">*</bpt>)<ept id="p2">*</ept> disables optimizations.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This is the default for MDbg.exe.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`-o`</ph> <bpt id="p1">*</bpt>(<ept id="p1">*</ept> <ph id="ph3">`ptimize`</ph> <bpt id="p2">*</bpt>)<ept id="p2">*</ept> forces the code to run more like it does outside the debugger, but also makes the debugging experience more difficult.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This is the default for use outside the debugger.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`-enc`</ph> enables the Edit and Continue feature but incurs a performance hit.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Set<ept id="p1">**</ept> <bpt id="p2">*</bpt>variable<ept id="p2">*</ept><ph id="ph1">=</ph><bpt id="p3">*</bpt>value<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Changes the value of any in-scope variable.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You can also create your own debugger variables and assign reference values to them from within your application.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>These values act as handles to the original value, and even the original value is out of scope.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>All debugger variables must begin with <ph id="ph1">`$`</ph> (for example, <ph id="ph2">`$var`</ph>).</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Clear these handles by setting them to nothing using the following command:</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Setip<ept id="p1">**</ept> [<ph id="ph1">`-il`</ph>] <bpt id="p2">*</bpt>number<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Sets the current instruction pointer (IP) in the file to the specified position.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If you specify the <ph id="ph1">`-il`</ph> option, the number represents a Microsoft intermediate language (MSIL) offset in the method.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Otherwise, the number represents a source line number.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>sh<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ow<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>lines<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Specifies the number of lines to show.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>s<ept id="p1">**</ept>[<bpt id="p2">**</bpt>tep<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Moves execution into the next function on the current line, or moves to the next line if there is no function to step into.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>su<ept id="p1">**</ept>[<bpt id="p2">**</bpt>spend<ept id="p2">**</ept>] [<ph id="ph1">\*</ph> &amp;#124; [~]<bpt id="p3">*</bpt>threadNumber<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Suspends the current thread or the thread specified by the <bpt id="p1">*</bpt>threadNumber<ept id="p1">*</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>threadNumber<ept id="p1">*</ept> is specified as <ph id="ph1">`*`</ph>, the command applies to all threads.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If the thread number starts with <ph id="ph1">`~`</ph>, the command applies to all threads except the one specified by <bpt id="p1">*</bpt>threadNumber<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Suspended threads are excluded from running when the process is run by either the <bpt id="p1">**</bpt>go<ept id="p1">**</ept> or <bpt id="p2">**</bpt>step<ept id="p2">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If there are no non-suspended threads in the process and you issue the <bpt id="p1">**</bpt>go<ept id="p1">**</ept> command, the process will not continue.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>In that case, press CTRL-C to break into the process.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>sy<ept id="p1">**</ept>[<bpt id="p2">**</bpt>mbol<ept id="p2">**</ept>] <bpt id="p3">*</bpt>commandName<ept id="p3">*</ept> [<bpt id="p4">*</bpt>commandValue<ept id="p4">*</ept>]</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Specifies one of the following commands:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`symbol path`</ph> [<ph id="ph3">`"``value``"`</ph>] - Displays or sets the current symbol path.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`symbol addpath`</ph> <ph id="ph3">`"`</ph> <ph id="ph4">`value`</ph> <ph id="ph5">`"`</ph> - Adds to your current symbol path.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`symbol reload`</ph> [<ph id="ph3">`"``module``"`</ph>]- Reloads either all symbols or the symbols for the specified module.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><ph id="ph2">`symbol list`</ph> [<ph id="ph3">`module`</ph>] - Shows the currently loaded symbols for either all modules or the specified module.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>t<ept id="p1">**</ept>[<bpt id="p2">**</bpt>hread<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>newThread<ept id="p3">*</ept>] [-<bpt id="p4">*</bpt>nick nickname<ept id="p4">*</ept><ph id="ph1">`]`</ph></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The thread command with no parameters displays all managed threads in the current process.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Threads are usually identified by their thread numbers; however, if the thread has an assigned nickname, the nickname is displayed instead.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`-nick`</ph> parameter to assign a nickname to a thread.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">**</bpt>thread<ept id="p1">**</ept> <ph id="ph2">`-nick`</ph> <bpt id="p2">*</bpt>threadName<ept id="p2">*</ept> assigns a nickname to the currently running thread.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Nicknames cannot be numbers.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If the current thread already has an assigned nickname, the old nickname is replaced with the new one.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>If the new nickname is an empty string (""), the nickname for the current thread is deleted and no new nickname is assigned to the thread.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>u<ept id="p1">**</ept>[<bpt id="p2">**</bpt>p<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Moves the active stack frame up.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>uwgc<ept id="p1">**</ept>[<bpt id="p2">**</bpt>handle<ept id="p2">**</ept>] [<bpt id="p3">*</bpt>var<ept id="p3">*</ept>] &amp;#124; [<bpt id="p4">*</bpt>address<ept id="p4">*</ept>]</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Prints the variable tracked by a handle.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The handle can be specified by name or address.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>when<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Displays the currently active <ph id="ph1">`when`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>when<ept id="p1">**</ept> <bpt id="p2">**</bpt>delete all<ept id="p2">**</ept> &amp;#124; <ph id="ph1">`num`</ph> [<ph id="ph2">`num`</ph> [<ph id="ph3">`num`</ph> …]] - Deletes the <ph id="ph4">`when`</ph> statement specified by the number, or all <ph id="ph5">`when`</ph> statements if <ph id="ph6">`all`</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>when<ept id="p1">**</ept> <ph id="ph1">`stopReason`</ph> [<ph id="ph2">`specific_condition`</ph>] <bpt id="p2">**</bpt>do<ept id="p2">**</ept><ph id="ph3">`cmd`</ph> [<ph id="ph4">`cmd`</ph> [<ph id="ph5">`cmd`</ph> …] ] - The <bpt id="p3">*</bpt>stopReason<ept id="p3">*</ept> parameter can be one of the following:</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`StepComplete`</ph>, <ph id="ph2">`ProcessExited`</ph>, <ph id="ph3">`ThreadCreated`</ph>, <ph id="ph4">`BreakpointHit`</ph>, <ph id="ph5">`ModuleLoaded`</ph>, <ph id="ph6">`ClassLoaded`</ph>, <ph id="ph7">`AssemblyLoaded`</ph>, <ph id="ph8">`AssemblyUnloaded`</ph>, <ph id="ph9">`ControlCTrapped`</ph>, <ph id="ph10">`ExceptionThrown`</ph>, <ph id="ph11">`UnhandledExceptionThrown`</ph>, <ph id="ph12">`AsyncStop`</ph>, <ph id="ph13">`AttachComplete`</ph>, <ph id="ph14">`UserBreak`</ph>, <ph id="ph15">`EvalComplete`</ph>, <ph id="ph16">`EvalException`</ph>, <ph id="ph17">`RemapOpportunityReached`</ph>, <ph id="ph18">`NativeStop`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>specific_condition<ept id="p1">*</ept> can be one of the following:</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">*</bpt>number<ept id="p1">*</ept> - For <ph id="ph2">`ThreadCreated`</ph> and <ph id="ph3">`BreakpointHit`</ph>, triggers action only when stopped by a thread ID/breakpoint number with same value.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>-   [<ph id="ph1">`!`</ph>]<bpt id="p1">*</bpt>name<ept id="p1">*</ept> - For <ph id="ph2">`ModuleLoaded`</ph>, <ph id="ph3">`ClassLoaded`</ph>, <ph id="ph4">`AssemblyLoaded`</ph>, <ph id="ph5">`AssemblyUnloaded`</ph>, <ph id="ph6">`ExceptionThrown`</ph>, and <ph id="ph7">`UnhandledExceptionThrown`</ph>, triggers action only when the name matches the name of the <bpt id="p2">*</bpt>stopReason<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>specific_condition<ept id="p1">*</ept> must be empty for other values of <bpt id="p2">*</bpt>stopReason<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>w<ept id="p1">**</ept>[<bpt id="p2">**</bpt>here<ept id="p2">**</ept>] [<ph id="ph1">`-v`</ph>] [<ph id="ph2">`-c`</ph> <bpt id="p3">*</bpt>depth<ept id="p3">*</ept>] [<bpt id="p4">*</bpt>threadID<ept id="p4">*</ept>]</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Displays debug information about stack frames.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>-   The <ph id="ph1">`-v`</ph> option provides verbose information about each displayed stack frame.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>-   Specifying a number for <ph id="ph1">`depth`</ph> limits how many frames are displayed.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>all<ept id="p1">**</ept> command to display all frames.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The default is 100.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>-   If you specify the <bpt id="p1">*</bpt>threadID<ept id="p1">*</ept> parameter, you can control which thread is associated with the stack.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The default is the current thread only.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>all<ept id="p1">**</ept> command to get all threads.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>x<ept id="p1">**</ept> [<ph id="ph1">`-c`</ph><bpt id="p2">*</bpt>numSymbols<ept id="p2">*</ept>] [<bpt id="p3">*</bpt>module<ept id="p3">*</ept>[<ph id="ph2">`!`</ph><bpt id="p4">*</bpt>pattern<ept id="p4">*</ept>]]</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Displays functions that match the <ph id="ph1">`pattern`</ph> for a module.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>numSymbols<ept id="p1">*</ept> is specified, the output is limited to the specified number.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`!`</ph> (indicating a regular expression) is not specified for <bpt id="p1">*</bpt>pattern<ept id="p1">*</ept>, all functions are displayed.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>module<ept id="p1">*</ept> is not provided, all loaded modules are displayed.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Symbols (<bpt id="p1">*</bpt><ph id="ph1">~#</ph><ept id="p1">*</ept>) can be used to set breakpoints using the <bpt id="p2">**</bpt>break<ept id="p2">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Compile the application to be debugged by using compiler-specific flags that cause your compiler to generate debugging symbols.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Refer to your compiler's documentation for more information about these flags.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>You can debug optimized applications, but some debugging information will be missing.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>For example, many local variables will not be visible and source lines will be inaccurate.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>After you compile your application, type <bpt id="p1">**</bpt>mdbg<ept id="p1">**</ept> at the command prompt to start a debugging session, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mdbg&gt;`</ph> prompt indicates that you are in the debugger.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Once you are in the debugger, use the commands and arguments described in the previous section.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tools<ept id="p1">](../../../docs/framework/tools/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>