{"content":"---\ntitle: \"<<= operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/12/2019\nf1_keywords: \n  - \"<<=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"<<= operator (left-shift assignment) [C#]\"\n  - \"left shift assignment operator (<<=) [C#]\"\nms.assetid: 3bc99c78-1edb-4827-86fc-bce6c3048871\n---\n# \\<\\<= operator (C# Reference)\n\nThe left-shift assignment operator.\n\nAn expression using the `<<=` operator, such as\n\n```csharp\nx <<= y\n```\n\nis equivalent to\n\n```csharp\nx = x << y\n```\n\nexcept that `x` is only evaluated once.\n\nThe [`<<` operator](left-shift-operator.md) shifts its first operand left by the number of bits defined by its second operand.\n\nThe following example demonstrates the usage of the `<<=` operator:\n\n[!code-csharp-interactive[left shift assignment](~/samples/snippets/csharp/language-reference/operators/ShiftOperatorsExamples.cs#LeftShiftAssignment)]\n\n## Operator overloadability\n\nIf a user-defined type [overloads](../keywords/operator.md) the [`<<` operator](left-shift-operator.md), the left-shift assignment operator `<<=` is implicitly overloaded. A user-defined type cannot explicitly overload the left-shift assignment operator.\n\n## C# language specification\n\nFor more information, see the [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n","nodes":[{"pos":[4,285],"embed":true,"restype":"x-metadata","content":"title: \"<<= operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/12/2019\nf1_keywords: \n  - \"<<=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"<<= operator (left-shift assignment) [C#]\"\n  - \"left shift assignment operator (<<=) [C#]\"\nms.assetid: 3bc99c78-1edb-4827-86fc-bce6c3048871","nodes":[{"content":"<<= operator - C# Reference","nodes":[{"pos":[0,27],"content":"<<= operator - C# Reference","nodes":[{"content":"&lt;&lt;= operator - C# Reference","pos":[0,27],"source":"<<= operator - C# Reference"}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[292,321],"content":"\\<\\<= operator (C# Reference)","linkify":"\\<\\<= operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">\\&lt;</ph><ph id=\"ph2\">\\&lt;</ph>= operator (C# Reference)","pos":[0,29],"source":"\\<\\<= operator (C# Reference)"}]},{"content":"The left-shift assignment operator.","pos":[323,358]},{"pos":[360,407],"content":"An expression using the <ph id=\"ph1\">`&lt;&lt;=`</ph> operator, such as","source":"An expression using the `<<=` operator, such as"},{"content":"is equivalent to","pos":[432,448]},{"pos":[476,515],"content":"except that <ph id=\"ph1\">`x`</ph> is only evaluated once.","source":"except that `x` is only evaluated once."},{"pos":[517,643],"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`&lt;&lt;`</ph> operator<ept id=\"p1\">](left-shift-operator.md)</ept> shifts its first operand left by the number of bits defined by its second operand.","source":"The [`<<` operator](left-shift-operator.md) shifts its first operand left by the number of bits defined by its second operand."},{"pos":[645,712],"content":"The following example demonstrates the usage of the <ph id=\"ph1\">`&lt;&lt;=`</ph> operator:","source":"The following example demonstrates the usage of the `<<=` operator:"},{"pos":[870,894],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"If a user-defined type <bpt id=\"p1\">[</bpt>overloads<ept id=\"p1\">](../keywords/operator.md)</ept> the <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`&lt;&lt;`</ph> operator<ept id=\"p2\">](left-shift-operator.md)</ept>, the left-shift assignment operator <ph id=\"ph2\">`&lt;&lt;=`</ph> is implicitly overloaded.","pos":[896,1067],"source":"If a user-defined type [overloads](../keywords/operator.md) the [`<<` operator](left-shift-operator.md), the left-shift assignment operator `<<=` is implicitly overloaded."},{"content":"A user-defined type cannot explicitly overload the left-shift assignment operator.","pos":[1068,1150]},{"pos":[1155,1180],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1182,1368],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Compound assignment<ept id=\"p1\">](~/_csharplang/spec/expressions.md#compound-assignment)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1373,1381],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1385,1412],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1415,1471],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1474,1498],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"}]}