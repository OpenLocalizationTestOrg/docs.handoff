<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="sql-clr-custom-type-mappings.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc92d54cad6a977268ef3f000c684d5f195a933d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\sql-clr-custom-type-mappings.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">948de79f0a32dba1cb8f51ed56edba59890eaa7d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e80d0152cb2f8da15a46c90e3d44d75923207aad</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>SQL-CLR Custom Type Mappings</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>SQL-CLR Custom Type Mappings</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Type mapping between SQL Server and the common language runtime (CLR) is automatically specified when you use the SQLMetal command-line tool, Object Relational Designer (O/R Designer).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When no customized mapping is performed, these tools assign default type mappings as described in <bpt id="p1">[</bpt>SQL-CLR Type Mapping<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you want to type mappings differently from these defaults, you need to do some customization of the type mappings.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When customizing type mappings, the recommended approach is to make the changes in an intermediary DBML file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Then, your customized DBML file should be used when you create you code and mapping files with SQLMetal or O/R Designer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Once you instantiate the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> object from the code and mapping files, the <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.CreateDatabase%2A?displayProperty=nameWithType&gt;</ph> method creates a database based on the type mappings that are specified.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If there are no CLR <ph id="ph1">`type`</ph> attributes specified in the mappings, the default type mappings will be used.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Customization with SQLMetal or O/R Designer</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>With SQLMetal and O/R Designer, you can automatically create an object model that includes the type mapping information inside or outside the code file.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Because these files are overwritten by SQLMetal or O/R Designer, each time you recreate your mappings, the recommended approach to specifying custom type mappings is to customize a DBML file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To customize type mappings with SQLMetal or O/R Designer, first generate a DBML file.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Then, before generating the code file or mapping file, modify the DBML file to identify the desired type mappings.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>With SQLMetal, you have to manually change the <ph id="ph1">`Type`</ph> and <ph id="ph2">`DbType`</ph> attributes in the DBML file to make your type mapping customizations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>With O/R Designer, you can make your changes within the Designer.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about using the O/R Designer, see <bpt id="p1">[</bpt>LINQ to SQL Tools in Visual Studio<ept id="p1">](/visualstudio/data-tools/linq-to-sql-tools-in-visual-studio2)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Some type mappings may result in overflow or data loss exceptions while translating to or from the database.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Carefully review the Type Mapping Run-time Behavior Matrix in <bpt id="p1">[</bpt>SQL-CLR Type Mapping<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md)</ept> before making any customizations.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In order for your type mapping customizations to be recognized by SQLMetal or O/R Designer, you need to make sure that these tools are supplied with the path to your custom DBML file when you generate your code file or external mapping file.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Although not required for type mapping customization, it is recommended that you always separate your type mapping information from your code file and generate the additional external type mapping file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Doing so will leave some flexibility by not requiring that the code file be recompiled.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Incorporating Database Changes</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When your database changes, you will need to update your DBML file to reflect those changes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>One way to do this is to automatically create a new DBML file and then re-do your type mapping customizations.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Alternatively, you could compare the differences between your new DBML file and your customized DBML file and update your custom DBML file manually to reflect the database change.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SQL-CLR Type Mapping<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Code Generation in LINQ to SQL<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/code-generation-in-linq-to-sql.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>