{"content":"---\ntitle: \"How to: Create a Custom Claim\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: d619976b-eda3-475e-ac23-c7988a2dceb0\n---\n# How to: Create a Custom Claim\nThe Identity Model infrastructure in Windows Communication Foundation (WCF) provides a set of built-in claim types and rights with the helper functions for creating <xref:System.IdentityModel.Claims.Claim> instances with those types and rights. These built-in claims are designed to model information found in client credential types that WCF supports by default. In many cases, the built-in claims are sufficient; however some applications may require custom claims. A claim consists of the claim type, the resource for which the claim applies to and the right that is asserted over that resource. This topic describes how to create a custom claim.  \n  \n### To create a custom claim that is based on a primitive data type  \n  \n1.  Create a custom claim by passing the claim type, resource value and right to the <xref:System.IdentityModel.Claims.Claim.%23ctor%28System.String%2CSystem.Object%2CSystem.String%29> constructor.  \n  \n    1.  Decide on a unique value for the claim type.  \n  \n         The claim type is a unique string identifier. It is the custom claim designer's responsibility to ensure that the string identifier that is used for the claim type is unique. For a list of claim types that are defined by WCF, see the <xref:System.IdentityModel.Claims.ClaimTypes> class.  \n  \n    2.  Choose the primitive data type and value for the resource.  \n  \n         A resource is an object. The CLR type of the resource can be a primitive, such as <xref:System.String> or <xref:System.Int32>, or any serializable type. The CLR type of the resource must be serializable, because claims are serialized at various points by WCF. Primitive types are serializable.  \n  \n    3.  Choose a right that is defined by WCF or a unique value for a custom right.  \n  \n         A right is a unique string identifier. The rights that are defined by WCF are defined in the <xref:System.IdentityModel.Claims.Rights> class.  \n  \n         It is the custom claim designer's responsibility to ensure that the string identifier that is used for the right is unique.  \n  \n         The following code example creates a custom claim with a claim type of `http://example.org/claims/simplecustomclaim`, for a resource named `Driver's License`, and with the <xref:System.IdentityModel.Claims.Rights.PossessProperty%2A> right.  \n  \n     [!code-csharp[c_CustomClaim#4](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_customclaim/cs/c_customclaim.cs#4)]\n     [!code-vb[c_CustomClaim#4](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_customclaim/vb/c_customclaim.vb#4)]  \n  \n### To create a custom claim that is based on a non-primitive data type  \n  \n1.  Create a custom claim by passing the claim type, resource value and right to the <xref:System.IdentityModel.Claims.Claim.%23ctor%28System.String%2CSystem.Object%2CSystem.String%29> constructor.  \n  \n    1.  Decide on a unique value for the claim type.  \n  \n         The claim type is a unique string identifier. It is the custom claim designer's responsibility to ensure that the string identifier that is used for the claim type is unique. For a list of claim types that are defined by WCF, see the <xref:System.IdentityModel.Claims.ClaimTypes> class.  \n  \n    2.  Choose or define a serializable non-primitive type for the resource.  \n  \n         A resource is an object. The CLR type of the resource must be serializable, because claims are serialized at various points by WCF. Primitive types are already serializable.  \n  \n         When a new type is defined, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class. Also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> attribute to the all members of the new type that need to be serialized as part of the claim.  \n  \n         The following code example defines a custom resource type named `MyResourceType`.  \n  \n         [!code-csharp[c_CustomClaim#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_customclaim/cs/c_customclaim.cs#2)] \n         [!code-vb[c_CustomClaim#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_customclaim/vb/c_customclaim.vb#2)]        \n  \n    3.  Choose a right that is defined by WCF or a unique value for a custom right.  \n  \n         A right is a unique string identifier. The rights that are defined by WCF are defined in the <xref:System.IdentityModel.Claims.Rights> class.  \n  \n         It is the custom claim designer's responsibility to ensure that the string identifier that is used for the right is unique.  \n  \n         The following code example creates a custom claim with a claim type of `http://example.org/claims/complexcustomclaim`, a custom resource type of `MyResourceType`, and with the <xref:System.IdentityModel.Claims.Rights.PossessProperty%2A> right.  \n  \n         [!code-csharp[c_CustomClaim#5](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_customclaim/cs/c_customclaim.cs#5)] \n         [!code-vb[c_CustomClaim#5](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_customclaim/vb/c_customclaim.vb#5)]     \n  \n## Example  \n The following code example demonstrates how to create a custom claim with a primitive resource type and a custom claim with a non-primitive resource type.  \n  \n [!code-csharp[c_CustomClaim#0](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_customclaim/cs/c_customclaim.cs#0)]\n [!code-vb[c_CustomClaim#0](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_customclaim/vb/c_customclaim.vb#0)]  \n  \n## See also\n\n- <xref:System.IdentityModel.Claims.Claim>\n- <xref:System.IdentityModel.Claims.Rights>\n- <xref:System.IdentityModel.Claims.ClaimTypes>\n- <xref:System.Runtime.Serialization.DataContractAttribute>\n- <xref:System.Runtime.Serialization.DataMemberAttribute>\n- [Managing Claims and Authorization with the Identity Model](../../../../docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md)\n","nodes":[{"pos":[4,147],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create a Custom Claim\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: d619976b-eda3-475e-ac23-c7988a2dceb0","nodes":[{"content":"How to: Create a Custom Claim","nodes":[{"pos":[0,29],"content":"How to: Create a Custom Claim","nodes":[{"content":"How to: Create a Custom Claim","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[154,183],"content":"How to: Create a Custom Claim","linkify":"How to: Create a Custom Claim","nodes":[{"content":"How to: Create a Custom Claim","pos":[0,29]}]},{"content":"The Identity Model infrastructure in Windows Communication Foundation (WCF) provides a set of built-in claim types and rights with the helper functions for creating <ph id=\"ph1\">&lt;xref:System.IdentityModel.Claims.Claim&gt;</ph> instances with those types and rights.","pos":[184,428],"source":"The Identity Model infrastructure in Windows Communication Foundation (WCF) provides a set of built-in claim types and rights with the helper functions for creating <xref:System.IdentityModel.Claims.Claim> instances with those types and rights."},{"content":"These built-in claims are designed to model information found in client credential types that WCF supports by default.","pos":[429,547]},{"content":"In many cases, the built-in claims are sufficient; however some applications may require custom claims.","pos":[548,651]},{"content":"A claim consists of the claim type, the resource for which the claim applies to and the right that is asserted over that resource.","pos":[652,782]},{"content":"This topic describes how to create a custom claim.","pos":[783,833]},{"pos":[843,906],"content":"To create a custom claim that is based on a primitive data type","linkify":"To create a custom claim that is based on a primitive data type","nodes":[{"content":"To create a custom claim that is based on a primitive data type","pos":[0,63]}]},{"pos":[916,1109],"content":"Create a custom claim by passing the claim type, resource value and right to the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Claims.Claim.%23ctor%28System.String%2CSystem.Object%2CSystem.String%29&gt;</ph> constructor.","source":"Create a custom claim by passing the claim type, resource value and right to the <xref:System.IdentityModel.Claims.Claim.%23ctor%28System.String%2CSystem.Object%2CSystem.String%29> constructor."},{"content":"Decide on a unique value for the claim type.","pos":[1123,1167]},{"content":"The claim type is a unique string identifier.","pos":[1182,1227]},{"content":"It is the custom claim designer's responsibility to ensure that the string identifier that is used for the claim type is unique.","pos":[1228,1356]},{"content":"For a list of claim types that are defined by WCF, see the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Claims.ClaimTypes&gt;</ph> class.","pos":[1357,1468],"source":" For a list of claim types that are defined by WCF, see the <xref:System.IdentityModel.Claims.ClaimTypes> class."},{"content":"Choose the primitive data type and value for the resource.","pos":[1482,1540]},{"content":"A resource is an object.","pos":[1555,1579]},{"content":"The CLR type of the resource can be a primitive, such as <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>, or any serializable type.","pos":[1580,1707],"source":" The CLR type of the resource can be a primitive, such as <xref:System.String> or <xref:System.Int32>, or any serializable type."},{"content":"The CLR type of the resource must be serializable, because claims are serialized at various points by WCF.","pos":[1708,1814]},{"content":"Primitive types are serializable.","pos":[1815,1848]},{"content":"Choose a right that is defined by WCF or a unique value for a custom right.","pos":[1862,1937]},{"content":"A right is a unique string identifier.","pos":[1952,1990]},{"content":"The rights that are defined by WCF are defined in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Claims.Rights&gt;</ph> class.","pos":[1991,2093],"source":" The rights that are defined by WCF are defined in the <xref:System.IdentityModel.Claims.Rights> class."},{"content":"It is the custom claim designer's responsibility to ensure that the string identifier that is used for the right is unique.","pos":[2108,2231]},{"pos":[2246,2485],"content":"The following code example creates a custom claim with a claim type of <ph id=\"ph1\">`http://example.org/claims/simplecustomclaim`</ph>, for a resource named <ph id=\"ph2\">`Driver's License`</ph>, and with the <ph id=\"ph3\">&lt;xref:System.IdentityModel.Claims.Rights.PossessProperty%2A&gt;</ph> right.","source":"The following code example creates a custom claim with a claim type of `http://example.org/claims/simplecustomclaim`, for a resource named `Driver's License`, and with the <xref:System.IdentityModel.Claims.Rights.PossessProperty%2A> right."},{"pos":[2496,2743],"content":"[!code-csharp[c_CustomClaim#4](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_customclaim/cs/c_customclaim.cs#4)]\n[!code-vb[c_CustomClaim#4](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_customclaim/vb/c_customclaim.vb#4)]","leadings":["","     "],"nodes":[]},{"pos":[2753,2820],"content":"To create a custom claim that is based on a non-primitive data type","linkify":"To create a custom claim that is based on a non-primitive data type","nodes":[{"content":"To create a custom claim that is based on a non-primitive data type","pos":[0,67]}]},{"pos":[2830,3023],"content":"Create a custom claim by passing the claim type, resource value and right to the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Claims.Claim.%23ctor%28System.String%2CSystem.Object%2CSystem.String%29&gt;</ph> constructor.","source":"Create a custom claim by passing the claim type, resource value and right to the <xref:System.IdentityModel.Claims.Claim.%23ctor%28System.String%2CSystem.Object%2CSystem.String%29> constructor."},{"content":"Decide on a unique value for the claim type.","pos":[3037,3081]},{"content":"The claim type is a unique string identifier.","pos":[3096,3141]},{"content":"It is the custom claim designer's responsibility to ensure that the string identifier that is used for the claim type is unique.","pos":[3142,3270]},{"content":"For a list of claim types that are defined by WCF, see the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Claims.ClaimTypes&gt;</ph> class.","pos":[3271,3382],"source":" For a list of claim types that are defined by WCF, see the <xref:System.IdentityModel.Claims.ClaimTypes> class."},{"content":"Choose or define a serializable non-primitive type for the resource.","pos":[3396,3464]},{"content":"A resource is an object.","pos":[3479,3503]},{"content":"The CLR type of the resource must be serializable, because claims are serialized at various points by WCF.","pos":[3504,3610]},{"content":"Primitive types are already serializable.","pos":[3611,3652]},{"content":"When a new type is defined, apply the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to the class.","pos":[3667,3776],"source":"When a new type is defined, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class."},{"content":"Also apply the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> attribute to the all members of the new type that need to be serialized as part of the claim.","pos":[3777,3941],"source":" Also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> attribute to the all members of the new type that need to be serialized as part of the claim."},{"pos":[3956,4037],"content":"The following code example defines a custom resource type named <ph id=\"ph1\">`MyResourceType`</ph>.","source":"The following code example defines a custom resource type named `MyResourceType`."},{"pos":[4052,4304],"content":"[!code-csharp[c_CustomClaim#2](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_customclaim/cs/c_customclaim.cs#2)] \n [!code-vb[c_CustomClaim#2](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_customclaim/vb/c_customclaim.vb#2)]","leadings":["","        "],"nodes":[]},{"content":"Choose a right that is defined by WCF or a unique value for a custom right.","pos":[4324,4399]},{"content":"A right is a unique string identifier.","pos":[4414,4452]},{"content":"The rights that are defined by WCF are defined in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Claims.Rights&gt;</ph> class.","pos":[4453,4555],"source":" The rights that are defined by WCF are defined in the <xref:System.IdentityModel.Claims.Rights> class."},{"content":"It is the custom claim designer's responsibility to ensure that the string identifier that is used for the right is unique.","pos":[4570,4693]},{"pos":[4708,4951],"content":"The following code example creates a custom claim with a claim type of <ph id=\"ph1\">`http://example.org/claims/complexcustomclaim`</ph>, a custom resource type of <ph id=\"ph2\">`MyResourceType`</ph>, and with the <ph id=\"ph3\">&lt;xref:System.IdentityModel.Claims.Rights.PossessProperty%2A&gt;</ph> right.","source":"The following code example creates a custom claim with a claim type of `http://example.org/claims/complexcustomclaim`, a custom resource type of `MyResourceType`, and with the <xref:System.IdentityModel.Claims.Rights.PossessProperty%2A> right."},{"pos":[4966,5218],"content":"[!code-csharp[c_CustomClaim#5](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_customclaim/cs/c_customclaim.cs#5)] \n [!code-vb[c_CustomClaim#5](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_customclaim/vb/c_customclaim.vb#5)]","leadings":["","        "],"nodes":[]},{"pos":[5230,5237],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates how to create a custom claim with a primitive resource type and a custom claim with a non-primitive resource type.","pos":[5241,5395]},{"pos":[5654,5662],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5919,6087],"content":"<bpt id=\"p1\">[</bpt>Managing Claims and Authorization with the Identity Model<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md)</ept>","source":"[Managing Claims and Authorization with the Identity Model](../../../../docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md)"}]}