<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c1566b48687537177af95cfca4428efc7b14bae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\how-to-create-a-wcf-client.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2cda758bb94376194f3da9ffc541c5c54011f06</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">048a64fd6b70f6107a488131a1cf346bce065a1c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create a Windows Communication Foundation Client | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create a Windows Communication Foundation Client</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This is the fourth of six tasks required to create a <ph id="ph1">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For an overview of all six of the tasks, see the <bpt id="p1">[</bpt>Getting Started Tutorial<ept id="p1">](../../../docs/framework/wcf/getting-started-tutorial.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic describes how to retrieve metadata from a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service and use it to create a <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> proxy that can access the service.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This task is completed by using the Add Service Reference functionality provided by Visual Studio .</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This tool obtains the metadata from the serviceâ€™s MEX endpoint and generates a managed source code file for a client proxy in the language you have chosen (C# by default).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In addition to creating the client proxy, the tool also creates or updates the client configuration file which enables the client application to connect to the service at one of its endpoints.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> tool to generate the proxy class and configuration instead of using Add Service Reference inside of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When calling a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service from a class library project in <ph id="ph2">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph> you can use the Add Service Reference feature to automatically generate a proxy and associated configuration file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The configuration file will not be used by the class library project.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You will need to add the settings in the generated configuration file to the app.config file for the executable that will call the class library.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The client application uses the generated proxy class to communicate with the service.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This procedure is described in <bpt id="p1">[</bpt>How to: Use a Client<ept id="p1">](../../../docs/framework/wcf/how-to-use-a-wcf-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To create a Windows Communication Foundation client</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Create a new console application project by right-clicking on the Getting Started solution, selecting, <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New Project<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Project<ept id="p1">**</ept> dialog on the left hand side of the dialog select <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept> under <bpt id="p3">**</bpt>C#<ept id="p3">**</ept> or <bpt id="p4">**</bpt>VB<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the center section of the dialog select <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name the project <ph id="ph1">`GettingStartedClient`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Set the target framework of the GettingStartedClient project to .NET Framework 4.5 by right clicking on <bpt id="p1">**</bpt>GettingStartedClient<ept id="p1">**</ept> in the Solution Explorer and selecting <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the dropdown box labeled <bpt id="p1">**</bpt>Target Framework<ept id="p1">**</ept> select <bpt id="p2">**</bpt>.NET Framework 4.5<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Setting the target framework for a VB project is a little different, in the GettingStartedClient project properties dialog, click the <bpt id="p1">**</bpt>Compile<ept id="p1">**</ept> tab on the left-hand side of the screen, and then click the <bpt id="p2">**</bpt>Advanced Compile Options<ept id="p2">**</ept> button at the lower left-hand corner of the dialog.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Then select <bpt id="p1">**</bpt>.NET Framework 4.5<ept id="p1">**</ept> in the dropdown box labeled <bpt id="p2">**</bpt>Target Framework<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Setting the target framework will cause Visual Studio 2011 to reload the solution, press <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> when prompted.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add a reference to System.ServiceModel to the GettingStartedClient project by right-clicking the <bpt id="p1">**</bpt>Reference<ept id="p1">**</ept> folder under the GettingStartedClient project in Solution Explorer and select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept> Reference.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> dialog select <bpt id="p2">**</bpt>Framework<ept id="p2">**</ept> on the left-hand side of the dialog.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the Search Assemblies textbox, type in <ph id="ph1">`System.ServiceModel`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the center section of the dialog select <bpt id="p1">**</bpt>System.ServiceModel<ept id="p1">**</ept>, click the <bpt id="p2">**</bpt>Add<ept id="p2">**</ept> button, and click the <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Save the solution by clicking the <bpt id="p1">**</bpt>Save All<ept id="p1">**</ept> button below the main menu.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Next you wlll add a service reference to the Calculator Service.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Before you can do that, you must start up the GettingStartedHost console application.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Once the host is running you can right click the References folder under the GettingStartedClient project in the Solution Explorer and select Add Service Reference and type in the following URL in the address box of the Add Service Reference dialog:  HYPERLINK "http://localhost:8000/ServiceModelSamples/Service" http://localhost:8000/ServiceModelSamples/Service and   click the <bpt id="p1">**</bpt>Go<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The CalculatorService should then be displayed in the Services list box, Double click CalculatorService and it will expand and show the service contracts implemented by the service.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Leave the default namespace as is and click the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you add a reference to a service using Visual Studio a new item will appear in the Solution Explorer under the Service References folder under the GettingStartedClient project.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> tool a source code file and app.config file will be generated.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can also use the command-line tool <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> with the appropriate switches to create the client code.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example generates a code file and a configuration file for the service.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The first example shows how to generate the proxy in VB and the second shows how to generated the proxy in C#:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You have now created the proxy that the client application will use to call the calculator service.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Proceed to the next topic in the series: <bpt id="p1">[</bpt>How to: Configure a Client<ept id="p1">](../../../docs/framework/wcf/how-to-configure-a-basic-wcf-client.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started<ept id="p1">](../../../docs/framework/wcf/samples/getting-started-sample.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Self-Host<ept id="p1">](../../../docs/framework/wcf/samples/self-host.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Publish Metadata for a Service Using a Configuration File<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-a-configuration-file.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use Svcutil.exe to Download Metadata Documents<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-use-svcutil-exe-to-download-metadata-documents.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>