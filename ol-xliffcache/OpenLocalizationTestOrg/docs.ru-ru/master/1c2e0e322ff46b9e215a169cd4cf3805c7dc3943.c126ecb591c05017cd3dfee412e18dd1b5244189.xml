{"content":"---\ntitle: \"Using the iteration variable in a lambda expression may have unexpected results | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc42324\"\n  - \"bc42324\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"BC42324\"\nms.assetid: b5c2c4bd-3b2a-4a73-aaeb-55728eb03b68\ncaps.latest.revision: 8\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using the iteration variable in a lambda expression may have unexpected results\nUsing the iteration variable in a lambda expression may have unexpected results. Instead, create a local variable within the loop and assign it the value of the iteration variable.  \n  \n This warning appears when you use a loop iteration variable in a lambda expression that is declared inside the loop. For example, the following example causes the warning to appear.  \n  \n```vb  \nFor i As Integer = 1 To 10  \n    ' The warning is given for the use of i.  \n    Dim exampleFunc As Func(Of Integer) = Function() i  \nNext  \n```  \n  \n The following example shows the unexpected results that might occur.  \n  \n```vb  \nModule Module1  \n    Sub Main()  \n        Dim array1 As Func(Of Integer)() = New Func(Of Integer)(4) {}  \n  \n        For i As Integer = 0 To 4  \n            array1(i) = Function() i  \n        Next  \n  \n        For Each funcElement In array1  \n            System.Console.WriteLine(funcElement())  \n        Next  \n  \n    End Sub  \nEnd Module  \n```  \n  \n The `For` loop creates an array of lambda expressions, each of which returns the value of the loop iteration variable `i`. When the lambda expressions are evaluated in the `For Each` loop, you might expect to see 0, 1, 2, 3, and 4 displayed, the successive values of `i` in the `For` loop. Instead, you see the final value of `i` displayed five times:  \n  \n `5`  \n  \n `5`  \n  \n `5`  \n  \n `5`  \n  \n `5`  \n  \n By default, this message is a warning. For more information about hiding warnings or treating warnings as errors, see [Configuring Warnings in Visual Basic](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic).  \n  \n **Error ID:** BC42324  \n  \n## To correct this error  \n  \n-   Assign the value of the iteration variable to a local variable, and use the local variable in the lambda expression.  \n  \n```vb  \nModule Module1  \n    Sub Main()  \n        Dim array1 As Func(Of Integer)() = New Func(Of Integer)(4) {}  \n  \n        For i As Integer = 0 To 4  \n            Dim j = i  \n            array1(i) = Function() j  \n        Next  \n  \n        For Each funcElement In array1  \n            System.Console.WriteLine(funcElement())  \n        Next  \n  \n    End Sub  \nEnd Module  \n```  \n  \n## See Also  \n [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)","nodes":[{"pos":[12,108],"content":"Using the iteration variable in a lambda expression may have unexpected results | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using the iteration variable in a lambda expression may have unexpected results | Microsoft Docs","pos":[0,96]}]},{"pos":[646,725],"content":"Using the iteration variable in a lambda expression may have unexpected results","linkify":"Using the iteration variable in a lambda expression may have unexpected results","nodes":[{"content":"Using the iteration variable in a lambda expression may have unexpected results","pos":[0,79]}]},{"content":"Using the iteration variable in a lambda expression may have unexpected results.","pos":[726,806]},{"content":"Instead, create a local variable within the loop and assign it the value of the iteration variable.","pos":[807,906]},{"content":"This warning appears when you use a loop iteration variable in a lambda expression that is declared inside the loop.","pos":[913,1029]},{"content":"For example, the following example causes the warning to appear.","pos":[1030,1094]},{"content":"The following example shows the unexpected results that might occur.","pos":[1258,1326]},{"content":"The <ph id=\"ph1\">`For`</ph> loop creates an array of lambda expressions, each of which returns the value of the loop iteration variable <ph id=\"ph2\">`i`</ph>.","pos":[1692,1814],"source":"The `For` loop creates an array of lambda expressions, each of which returns the value of the loop iteration variable `i`."},{"content":"When the lambda expressions are evaluated in the <ph id=\"ph1\">`For Each`</ph> loop, you might expect to see 0, 1, 2, 3, and 4 displayed, the successive values of <ph id=\"ph2\">`i`</ph> in the <ph id=\"ph3\">`For`</ph> loop.","pos":[1815,1981],"source":" When the lambda expressions are evaluated in the `For Each` loop, you might expect to see 0, 1, 2, 3, and 4 displayed, the successive values of `i` in the `For` loop."},{"content":"Instead, you see the final value of <ph id=\"ph1\">`i`</ph> displayed five times:","pos":[1982,2043],"source":" Instead, you see the final value of `i` displayed five times:"},{"content":"By default, this message is a warning.","pos":[2100,2138]},{"content":"For more information about hiding warnings or treating warnings as errors, see <bpt id=\"p1\">[</bpt>Configuring Warnings in Visual Basic<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)</ept>.","pos":[2139,2339],"source":" For more information about hiding warnings or treating warnings as errors, see [Configuring Warnings in Visual Basic](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)."},{"pos":[2346,2367],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC42324","source":"**Error ID:** BC42324"},{"pos":[2376,2397],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Assign the value of the iteration variable to a local variable, and use the local variable in the lambda expression.","pos":[2407,2523]},{"pos":[2915,2923],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2927,3039],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>","source":"[Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)"}]}