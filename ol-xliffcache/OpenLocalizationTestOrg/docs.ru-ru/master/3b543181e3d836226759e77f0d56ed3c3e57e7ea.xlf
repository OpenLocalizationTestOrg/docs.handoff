<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="preprocessor-define.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b543181e3d836226759e77f0d56ed3c3e57e7ea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\preprocessor-directives\preprocessor-define.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a6b60f76447c326bfafd6d1e9362b7830d6d4d1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4f24d0739a73c2b49f17afb1e5d1573294e737b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>define - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>#define (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">`#define`</ph> to define a symbol.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you use the symbol as the expression that's passed to the <bpt id="p1">[</bpt>#if<ept id="p1">](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)</ept> directive, the expression will evaluate to <ph id="ph1">`true`</ph>, as the following example shows:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#define`</ph> directive cannot be used to declare constant values as is typically done in C and C++.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Constants in C# are best defined as static members of a class or struct.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you have several such constants, consider creating a separate "Constants" class to hold them.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Symbols can be used to specify conditions for compilation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can test for the symbol with either <bpt id="p1">[</bpt>#if<ept id="p1">](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)</ept> or <bpt id="p2">[</bpt>#elif<ept id="p2">](../../../csharp/language-reference/preprocessor-directives/preprocessor-elif.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Diagnostics.ConditionalAttribute&gt;</ph> to perform conditional compilation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can define a symbol, but you cannot assign a value to a symbol.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#define`</ph> directive must appear in the file before you use any instructions that aren't also preprocessor directives.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can also define a symbol with the <bpt id="p1">[</bpt>-define<ept id="p1">](../../../csharp/language-reference/compiler-options/define-compiler-option.md)</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can undefine a symbol with <bpt id="p1">[</bpt>#undef<ept id="p1">](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A symbol that you define with <ph id="ph1">`-define`</ph> or with <ph id="ph2">`#define`</ph> does not conflict with a variable of the same name.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>That is, a variable name should not be passed to a preprocessor directive and a symbol can only be evaluated by a preprocessor directive.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The scope of a symbol that was created by using <ph id="ph1">`#define`</ph> is the file in which the symbol was defined.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>As the following example shows, you must put <ph id="ph1">`#define`</ph> directives at the top of the file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For an example of how to undefine a symbol, see <bpt id="p1">[</bpt>#undef<ept id="p1">](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Preprocessor Directives<ept id="p1">](../../../csharp/language-reference/preprocessor-directives/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>const<ept id="p1">](../../../csharp/language-reference/keywords/const.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Compile Conditionally with Trace and Debug<ept id="p1">](../../../framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>#undef<ept id="p1">](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>#if<ept id="p1">](../../../csharp/language-reference/preprocessor-directives/preprocessor-if.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>