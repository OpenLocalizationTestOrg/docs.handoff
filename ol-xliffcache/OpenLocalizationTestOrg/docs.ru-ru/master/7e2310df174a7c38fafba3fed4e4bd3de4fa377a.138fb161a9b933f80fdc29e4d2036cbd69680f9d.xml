{"content":"---\ntitle: \"Using Type dynamic (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"dynamic [C#], about dynamic type\"\n  - \"dynamic type [C#]\"\nms.assetid: 3828989d-c967-4a51-b948-857ebc8fdf26\ncaps.latest.revision: 30\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Using Type dynamic (C# Programming Guide)\n[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)] introduces a new type, `dynamic`. The type is a static type, but an object of type `dynamic` bypasses static type checking. In most cases, it functions like it has type `object`. At compile time, an element that is typed as `dynamic` is assumed to support any operation. Therefore, you do not have to be concerned about whether the object gets its value from a COM API, from a dynamic language such as IronPython, from the HTML Document Object Model (DOM), from reflection, or from somewhere else in the program. However, if the code is not valid, errors are caught at run time.  \n  \n For example, if instance method `exampleMethod1` in the following code has only one parameter, the compiler recognizes that the first call to the method, `ec.exampleMethod1(10, 4)`, is not valid because it contains two arguments. The call causes a compiler error. The second call to the method, `dynamic_ec.exampleMethod1(10, 4)`, is not checked by the compiler because the type of `dynamic_ec` is `dynamic`. Therefore, no compiler error is reported. However, the error does not escape notice indefinitely. It is caught at run time and causes a run-time exception.  \n  \n [!code-cs[CsProgGuideTypes#50](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_1.cs)]  \n  \n [!code-cs[CsProgGuideTypes#56](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_2.cs)]  \n  \n The role of the compiler in these examples is to package together information about what each statement is proposing to do to the object or expression that is typed as `dynamic`. At run time, the stored information is examined, and any statement that is not valid causes a run-time exception.  \n  \n The result of most dynamic operations is itself `dynamic`. For example, if you rest the mouse pointer over the use of `testSum` in the following example, IntelliSense displays the type **(local variable) dynamic testSum**.  \n  \n [!code-cs[CsProgGuideTypes#51](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_3.cs)]  \n  \n Operations in which the result is not `dynamic` include conversions from `dynamic` to another type, and constructor calls that include arguments of type `dynamic`. For example, the type of `testInstance` in the following declaration is `ExampleClass`, not `dynamic`.  \n  \n [!code-cs[CsProgGuideTypes#52](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_4.cs)]  \n  \n Conversion examples are shown in the following section, \"Conversions.\"  \n  \n## Conversions  \n Conversions between dynamic objects and other types are easy. This enables the developer to switch between dynamic and non-dynamic behavior.  \n  \n Any object can be converted to dynamic type implicitly, as shown in the following examples.  \n  \n [!code-cs[CsProgGuideTypes#53](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_5.cs)]  \n  \n Conversely, an implicit conversion can be dynamically applied to any expression of type `dynamic`.  \n  \n [!code-cs[CsProgGuideTypes#54](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_6.cs)]  \n  \n## Overload Resolution with Arguments of Type dynamic  \n Overload resolution occurs at run time instead of at compile time if one or more of the arguments in a method call have the type `dynamic`, or if the receiver of the method call is of type `dynamic`. In the following example, if the only accessible `exampleMethod2` method is defined to take a string argument, sending `d1` as the argument does not cause a compiler error, but it does cause a run-time exception. Overload resolution fails at run time because the run-time type of `d1` is `int`, and `exampleMethod2` requires a string.  \n  \n [!code-cs[CsProgGuideTypes#55](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_7.cs)]  \n  \n## Dynamic Language Runtime  \n The dynamic language runtime (DLR) is a new API in [!INCLUDE[net_v40_short](../../../csharp/programming-guide/types/includes/net_v40_short_md.md)]. It provides the infrastructure that supports the `dynamic` type in C#, and also the implementation of dynamic programming languages such as IronPython and IronRuby. For more information about the DLR, see [Dynamic Language Runtime Overview](../../../framework/reflection-and-codedom/dynamic-language-runtime-overview.md).  \n  \n## COM Interop  \n [!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)] includes several features that improve the experience of interoperating with COM APIs such as the Office Automation APIs. Among the improvements are the use of the `dynamic` type, and of [named and optional arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md).  \n  \n Many COM methods allow for variation in argument types and return type by designating the types as `object`. This has necessitated explicit casting of the values to coordinate with strongly typed variables in C#. If you compile by using the [/link (C# Compiler Options)](../../../csharp/language-reference/compiler-options/link-compiler-option.md) option, the introduction of the `dynamic` type enables you to treat the occurrences of `object` in COM signatures as if they were of type `dynamic`, and thereby to avoid much of the casting. For example, the following statements contrast how you access a cell in a Microsoft Office Excel spreadsheet with the `dynamic` type and without the `dynamic` type.  \n  \n [!code-cs[csOfficeWalkthrough#12](../../../csharp/programming-guide/interop/codesnippet/CSharp/using-type-dynamic_8.cs)]  \n  \n [!code-cs[csOfficeWalkthrough#13](../../../csharp/programming-guide/interop/codesnippet/CSharp/using-type-dynamic_9.cs)]  \n  \n## Related Topics  \n  \n|Title|Description|  \n|-----------|-----------------|  \n|[dynamic](../../../csharp/language-reference/keywords/dynamic.md)|Describes the usage of the `dynamic` keyword.|  \n|[Dynamic Language Runtime Overview](../../../framework/reflection-and-codedom/dynamic-language-runtime-overview.md)|Provides an overview of the DLR, which is a runtime environment that adds a set of services for dynamic languages to the common language runtime (CLR).|  \n|[Walkthrough: Creating and Using Dynamic Objects](../../../csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md)|Provides step-by-step instructions for creating a custom dynamic object and for creating a project that accesses an `IronPython` library.|  \n|[How to: Access Office Interop Objects by Using Visual C# Features](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)|Demonstrates how to create a project that uses named and optional arguments, the `dynamic` type, and other enhancements that simplify access to Office API objects.|","nodes":[{"pos":[12,70],"content":"Using Type dynamic (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using Type dynamic (C# Programming Guide) | Microsoft Docs","pos":[0,58]}]},{"pos":[583,624],"content":"Using Type dynamic (C# Programming Guide)","linkify":"Using Type dynamic (C# Programming Guide)","nodes":[{"content":"Using Type dynamic (C# Programming Guide)","pos":[0,41]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph> introduces a new type, <ph id=\"ph2\">`dynamic`</ph>.","pos":[625,776],"source":"[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)] introduces a new type, `dynamic`."},{"content":"The type is a static type, but an object of type <ph id=\"ph1\">`dynamic`</ph> bypasses static type checking.","pos":[777,866],"source":" The type is a static type, but an object of type `dynamic` bypasses static type checking."},{"content":"In most cases, it functions like it has type <ph id=\"ph1\">`object`</ph>.","pos":[867,921],"source":" In most cases, it functions like it has type `object`."},{"content":"At compile time, an element that is typed as <ph id=\"ph1\">`dynamic`</ph> is assumed to support any operation.","pos":[922,1013],"source":" At compile time, an element that is typed as `dynamic` is assumed to support any operation."},{"content":"Therefore, you do not have to be concerned about whether the object gets its value from a COM API, from a dynamic language such as IronPython, from the HTML Document Object Model (DOM), from reflection, or from somewhere else in the program.","pos":[1014,1255]},{"content":"However, if the code is not valid, errors are caught at run time.","pos":[1256,1321]},{"content":"For example, if instance method <ph id=\"ph1\">`exampleMethod1`</ph> in the following code has only one parameter, the compiler recognizes that the first call to the method, <ph id=\"ph2\">`ec.exampleMethod1(10, 4)`</ph>, is not valid because it contains two arguments.","pos":[1328,1557],"source":"For example, if instance method `exampleMethod1` in the following code has only one parameter, the compiler recognizes that the first call to the method, `ec.exampleMethod1(10, 4)`, is not valid because it contains two arguments."},{"content":"The call causes a compiler error.","pos":[1558,1591]},{"content":"The second call to the method, <ph id=\"ph1\">`dynamic_ec.exampleMethod1(10, 4)`</ph>, is not checked by the compiler because the type of <ph id=\"ph2\">`dynamic_ec`</ph> is <ph id=\"ph3\">`dynamic`</ph>.","pos":[1592,1736],"source":" The second call to the method, `dynamic_ec.exampleMethod1(10, 4)`, is not checked by the compiler because the type of `dynamic_ec` is `dynamic`."},{"content":"Therefore, no compiler error is reported.","pos":[1737,1778]},{"content":"However, the error does not escape notice indefinitely.","pos":[1779,1834]},{"content":"It is caught at run time and causes a run-time exception.","pos":[1835,1892]},{"pos":[1899,2023],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>CsProgGuideTypes#50<ept id=\"p2\">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[CsProgGuideTypes#50](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_1.cs)]"},{"pos":[2030,2154],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>CsProgGuideTypes#56<ept id=\"p2\">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[CsProgGuideTypes#56](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_2.cs)]"},{"content":"The role of the compiler in these examples is to package together information about what each statement is proposing to do to the object or expression that is typed as <ph id=\"ph1\">`dynamic`</ph>.","pos":[2161,2339],"source":"The role of the compiler in these examples is to package together information about what each statement is proposing to do to the object or expression that is typed as `dynamic`."},{"content":"At run time, the stored information is examined, and any statement that is not valid causes a run-time exception.","pos":[2340,2453]},{"content":"The result of most dynamic operations is itself <ph id=\"ph1\">`dynamic`</ph>.","pos":[2460,2518],"source":"The result of most dynamic operations is itself `dynamic`."},{"content":"For example, if you rest the mouse pointer over the use of <ph id=\"ph1\">`testSum`</ph> in the following example, IntelliSense displays the type <bpt id=\"p1\">**</bpt>(local variable) dynamic testSum<ept id=\"p1\">**</ept>.","pos":[2519,2682],"source":" For example, if you rest the mouse pointer over the use of `testSum` in the following example, IntelliSense displays the type **(local variable) dynamic testSum**."},{"pos":[2689,2813],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>CsProgGuideTypes#51<ept id=\"p2\">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[CsProgGuideTypes#51](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_3.cs)]"},{"content":"Operations in which the result is not <ph id=\"ph1\">`dynamic`</ph> include conversions from <ph id=\"ph2\">`dynamic`</ph> to another type, and constructor calls that include arguments of type <ph id=\"ph3\">`dynamic`</ph>.","pos":[2820,2983],"source":"Operations in which the result is not `dynamic` include conversions from `dynamic` to another type, and constructor calls that include arguments of type `dynamic`."},{"content":"For example, the type of <ph id=\"ph1\">`testInstance`</ph> in the following declaration is <ph id=\"ph2\">`ExampleClass`</ph>, not <ph id=\"ph3\">`dynamic`</ph>.","pos":[2984,3086],"source":" For example, the type of `testInstance` in the following declaration is `ExampleClass`, not `dynamic`."},{"pos":[3093,3217],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>CsProgGuideTypes#52<ept id=\"p2\">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[CsProgGuideTypes#52](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_4.cs)]"},{"content":"Conversion examples are shown in the following section, \"Conversions.\"","pos":[3224,3294]},{"pos":[3303,3314],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"Conversions between dynamic objects and other types are easy.","pos":[3318,3379]},{"content":"This enables the developer to switch between dynamic and non-dynamic behavior.","pos":[3380,3458]},{"content":"Any object can be converted to dynamic type implicitly, as shown in the following examples.","pos":[3465,3556]},{"pos":[3563,3687],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>CsProgGuideTypes#53<ept id=\"p2\">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_5.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[CsProgGuideTypes#53](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_5.cs)]"},{"pos":[3694,3792],"content":"Conversely, an implicit conversion can be dynamically applied to any expression of type <ph id=\"ph1\">`dynamic`</ph>.","source":"Conversely, an implicit conversion can be dynamically applied to any expression of type `dynamic`."},{"pos":[3799,3923],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>CsProgGuideTypes#54<ept id=\"p2\">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_6.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[CsProgGuideTypes#54](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_6.cs)]"},{"pos":[3932,3982],"content":"Overload Resolution with Arguments of Type dynamic","linkify":"Overload Resolution with Arguments of Type dynamic","nodes":[{"content":"Overload Resolution with Arguments of Type dynamic","pos":[0,50]}]},{"content":"Overload resolution occurs at run time instead of at compile time if one or more of the arguments in a method call have the type <ph id=\"ph1\">`dynamic`</ph>, or if the receiver of the method call is of type <ph id=\"ph2\">`dynamic`</ph>.","pos":[3986,4185],"source":"Overload resolution occurs at run time instead of at compile time if one or more of the arguments in a method call have the type `dynamic`, or if the receiver of the method call is of type `dynamic`."},{"content":"In the following example, if the only accessible <ph id=\"ph1\">`exampleMethod2`</ph> method is defined to take a string argument, sending <ph id=\"ph2\">`d1`</ph> as the argument does not cause a compiler error, but it does cause a run-time exception.","pos":[4186,4398],"source":" In the following example, if the only accessible `exampleMethod2` method is defined to take a string argument, sending `d1` as the argument does not cause a compiler error, but it does cause a run-time exception."},{"content":"Overload resolution fails at run time because the run-time type of <ph id=\"ph1\">`d1`</ph> is <ph id=\"ph2\">`int`</ph>, and <ph id=\"ph3\">`exampleMethod2`</ph> requires a string.","pos":[4399,4520],"source":" Overload resolution fails at run time because the run-time type of `d1` is `int`, and `exampleMethod2` requires a string."},{"pos":[4527,4651],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>CsProgGuideTypes#55<ept id=\"p2\">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_7.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[CsProgGuideTypes#55](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/using-type-dynamic_7.cs)]"},{"pos":[4660,4684],"content":"Dynamic Language Runtime","linkify":"Dynamic Language Runtime","nodes":[{"content":"Dynamic Language Runtime","pos":[0,24]}]},{"content":"The dynamic language runtime (DLR) is a new API in <ph id=\"ph1\">[!INCLUDE[net_v40_short](../../../csharp/programming-guide/types/includes/net_v40_short_md.md)]</ph>.","pos":[4688,4835],"source":"The dynamic language runtime (DLR) is a new API in [!INCLUDE[net_v40_short](../../../csharp/programming-guide/types/includes/net_v40_short_md.md)]."},{"content":"It provides the infrastructure that supports the <ph id=\"ph1\">`dynamic`</ph> type in C#, and also the implementation of dynamic programming languages such as IronPython and IronRuby.","pos":[4836,5000],"source":" It provides the infrastructure that supports the `dynamic` type in C#, and also the implementation of dynamic programming languages such as IronPython and IronRuby."},{"content":"For more information about the DLR, see <bpt id=\"p1\">[</bpt>Dynamic Language Runtime Overview<ept id=\"p1\">](../../../framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>.","pos":[5001,5157],"source":" For more information about the DLR, see [Dynamic Language Runtime Overview](../../../framework/reflection-and-codedom/dynamic-language-runtime-overview.md)."},{"pos":[5166,5177],"content":"COM Interop","linkify":"COM Interop","nodes":[{"content":"COM Interop","pos":[0,11]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)]</ph> includes several features that improve the experience of interoperating with COM APIs such as the Office Automation APIs.","pos":[5181,5420],"source":"[!INCLUDE[csharp_dev10_long](../../../csharp/programming-guide/classes-and-structs/includes/csharp_dev10_long_md.md)] includes several features that improve the experience of interoperating with COM APIs such as the Office Automation APIs."},{"content":"Among the improvements are the use of the <ph id=\"ph1\">`dynamic`</ph> type, and of <bpt id=\"p1\">[</bpt>named and optional arguments<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept>.","pos":[5421,5604],"source":" Among the improvements are the use of the `dynamic` type, and of [named and optional arguments](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)."},{"content":"Many COM methods allow for variation in argument types and return type by designating the types as <ph id=\"ph1\">`object`</ph>.","pos":[5611,5719],"source":"Many COM methods allow for variation in argument types and return type by designating the types as `object`."},{"content":"This has necessitated explicit casting of the values to coordinate with strongly typed variables in C#.","pos":[5720,5823]},{"content":"If you compile by using the <bpt id=\"p1\">[</bpt>/link (C# Compiler Options)<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/link-compiler-option.md)</ept> option, the introduction of the <ph id=\"ph1\">`dynamic`</ph> type enables you to treat the occurrences of <ph id=\"ph2\">`object`</ph> in COM signatures as if they were of type <ph id=\"ph3\">`dynamic`</ph>, and thereby to avoid much of the casting.","pos":[5824,6149],"source":" If you compile by using the [/link (C# Compiler Options)](../../../csharp/language-reference/compiler-options/link-compiler-option.md) option, the introduction of the `dynamic` type enables you to treat the occurrences of `object` in COM signatures as if they were of type `dynamic`, and thereby to avoid much of the casting."},{"content":"For example, the following statements contrast how you access a cell in a Microsoft Office Excel spreadsheet with the <ph id=\"ph1\">`dynamic`</ph> type and without the <ph id=\"ph2\">`dynamic`</ph> type.","pos":[6150,6314],"source":" For example, the following statements contrast how you access a cell in a Microsoft Office Excel spreadsheet with the `dynamic` type and without the `dynamic` type."},{"pos":[6321,6441],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csOfficeWalkthrough#12<ept id=\"p2\">](../../../csharp/programming-guide/interop/codesnippet/CSharp/using-type-dynamic_8.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csOfficeWalkthrough#12](../../../csharp/programming-guide/interop/codesnippet/CSharp/using-type-dynamic_8.cs)]"},{"pos":[6448,6568],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csOfficeWalkthrough#13<ept id=\"p2\">](../../../csharp/programming-guide/interop/codesnippet/CSharp/using-type-dynamic_9.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csOfficeWalkthrough#13](../../../csharp/programming-guide/interop/codesnippet/CSharp/using-type-dynamic_9.cs)]"},{"pos":[6577,6591],"content":"Related Topics","linkify":"Related Topics","nodes":[{"content":"Related Topics","pos":[0,14]}]},{"content":"Title","pos":[6598,6603]},{"content":"Description","pos":[6604,6615]},{"pos":[6654,6719],"content":"<bpt id=\"p1\">[</bpt>dynamic<ept id=\"p1\">](../../../csharp/language-reference/keywords/dynamic.md)</ept>","source":"[dynamic](../../../csharp/language-reference/keywords/dynamic.md)"},{"pos":[6720,6765],"content":"Describes the usage of the <ph id=\"ph1\">`dynamic`</ph> keyword.","source":"Describes the usage of the `dynamic` keyword."},{"pos":[6770,6885],"content":"<bpt id=\"p1\">[</bpt>Dynamic Language Runtime Overview<ept id=\"p1\">](../../../framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept>","source":"[Dynamic Language Runtime Overview](../../../framework/reflection-and-codedom/dynamic-language-runtime-overview.md)"},{"content":"Provides an overview of the DLR, which is a runtime environment that adds a set of services for dynamic languages to the common language runtime (CLR).","pos":[6886,7037]},{"pos":[7042,7182],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Creating and Using Dynamic Objects<ept id=\"p1\">](../../../csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md)</ept>","source":"[Walkthrough: Creating and Using Dynamic Objects](../../../csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md)"},{"pos":[7183,7320],"content":"Provides step-by-step instructions for creating a custom dynamic object and for creating a project that accesses an <ph id=\"ph1\">`IronPython`</ph> library.","source":"Provides step-by-step instructions for creating a custom dynamic object and for creating a project that accesses an `IronPython` library."},{"pos":[7325,7475],"content":"<bpt id=\"p1\">[</bpt>How to: Access Office Interop Objects by Using Visual C# Features<ept id=\"p1\">](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)</ept>","source":"[How to: Access Office Interop Objects by Using Visual C# Features](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)"},{"pos":[7476,7639],"content":"Demonstrates how to create a project that uses named and optional arguments, the <ph id=\"ph1\">`dynamic`</ph> type, and other enhancements that simplify access to Office API objects.","source":"Demonstrates how to create a project that uses named and optional arguments, the `dynamic` type, and other enhancements that simplify access to Office API objects."}]}