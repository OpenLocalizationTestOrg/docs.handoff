{"content":"---\ntitle: \"Collections (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 5f7749f3-aaf2-4319-b63c-bfa72e1e2b7a\n---\n# Collections (Visual Basic)\nFor many applications, you want to create and manage groups of related objects. There are two ways to group objects: by creating arrays of objects, and by creating collections of objects.  \n  \n Arrays are most useful for creating and working with a fixed number of strongly-typed objects. For information about arrays, see [Arrays](../../../visual-basic/programming-guide/language-features/arrays/index.md).  \n  \n Collections provide a more flexible way to work with groups of objects. Unlike arrays, the group of objects you work with can grow and shrink dynamically as the needs of the application change. For some collections, you can assign a key to any object that you put into the collection so that you can quickly retrieve the object by using the key.  \n  \n A collection is a class, so you must declare an instance of the class before you can add elements to that collection.  \n  \n If your collection contains elements of only one data type, you can use one of the classes in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace. A generic collection enforces type safety so that no other data type can be added to it. When you retrieve an element from a generic collection, you do not have to determine its data type or convert it.  \n  \n> [!NOTE]\n>  For the examples in this topic, include [Imports](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md) statements for the `System.Collections.Generic` and `System.Linq` namespaces.  \n  \n **In this topic**  \n  \n-   [Using a Simple Collection](#BKMK_SimpleCollection)  \n  \n-   [Kinds of Collections](#BKMK_KindsOfCollections)  \n  \n    -   [System.Collections.Generic Classes](#BKMK_Generic)  \n  \n    -   [System.Collections.Concurrent Classes](#BKMK_Concurrent)  \n  \n    -   [System.Collections Classes](#BKMK_Collections)  \n  \n    -   [Visual Basic Collection Class](#BKMK_VisualBasic)  \n  \n-   [Implementing a Collection of Key/Value Pairs](#BKMK_KeyValuePairs)  \n  \n-   [Using LINQ to Access a Collection](#BKMK_LINQ)  \n  \n-   [Sorting a Collection](#BKMK_Sorting)  \n  \n-   [Defining a Custom Collection](#BKMK_CustomCollection)  \n  \n-   [Iterators](#BKMK_Iterators)  \n  \n<a name=\"BKMK_SimpleCollection\"></a>\n## Using a Simple Collection  \n The examples in this section use the generic <xref:System.Collections.Generic.List%601> class, which enables you to work with a strongly typed list of objects.  \n  \n The following example creates a list of strings and then iterates through the strings by using a [For Each…Next](../../../visual-basic/language-reference/statements/for-each-next-statement.md) statement.  \n  \n```vb  \n' Create a list of strings.  \nDim salmons As New List(Of String)  \nsalmons.Add(\"chinook\")  \nsalmons.Add(\"coho\")  \nsalmons.Add(\"pink\")  \nsalmons.Add(\"sockeye\")  \n  \n' Iterate through the list.  \nFor Each salmon As String In salmons  \n    Console.Write(salmon & \" \")  \nNext  \n'Output: chinook coho pink sockeye  \n```  \n  \n If the contents of a collection are known in advance, you can use a *collection initializer* to initialize the collection. For more information, see [Collection Initializers](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md).  \n  \n The following example is the same as the previous example, except a collection initializer is used to add elements to the collection.  \n  \n```vb  \n' Create a list of strings by using a  \n' collection initializer.  \nDim salmons As New List(Of String) From  \n    {\"chinook\", \"coho\", \"pink\", \"sockeye\"}  \n  \nFor Each salmon As String In salmons  \n    Console.Write(salmon & \" \")  \nNext  \n'Output: chinook coho pink sockeye  \n```  \n  \n You can use a [For…Next](../../../visual-basic/language-reference/statements/for-next-statement.md) statement instead of a `For Each` statement to iterate through a collection. You accomplish this by accessing the collection elements by the index position. The index of the elements starts at 0 and ends at the element count minus 1.  \n  \n The following example iterates through the elements of a collection by using `For…Next` instead of `For Each`.  \n  \n```vb  \nDim salmons As New List(Of String) From  \n    {\"chinook\", \"coho\", \"pink\", \"sockeye\"}  \n  \nFor index = 0 To salmons.Count - 1  \n    Console.Write(salmons(index) & \" \")  \nNext  \n'Output: chinook coho pink sockeye  \n```  \n  \n The following example removes an element from the collection by specifying the object to remove.  \n  \n```vb  \n' Create a list of strings by using a  \n' collection initializer.  \nDim salmons As New List(Of String) From  \n    {\"chinook\", \"coho\", \"pink\", \"sockeye\"}  \n  \n' Remove an element in the list by specifying  \n' the object.  \nsalmons.Remove(\"coho\")  \n  \nFor Each salmon As String In salmons  \n    Console.Write(salmon & \" \")  \nNext  \n'Output: chinook pink sockeye  \n```  \n  \n The following example removes elements from a generic list. Instead of a `For Each` statement, a [For…Next](../../../visual-basic/language-reference/statements/for-next-statement.md) statement that iterates in descending order is used. This is because the <xref:System.Collections.Generic.List%601.RemoveAt%2A> method causes elements after a removed element to have a lower index value.  \n  \n```vb  \nDim numbers As New List(Of Integer) From  \n    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}  \n  \n' Remove odd numbers.  \nFor index As Integer = numbers.Count - 1 To 0 Step -1  \n    If numbers(index) Mod 2 = 1 Then  \n        ' Remove the element by specifying  \n        ' the zero-based index in the list.  \n        numbers.RemoveAt(index)  \n    End If  \nNext  \n  \n' Iterate through the list.  \n' A lambda expression is placed in the ForEach method  \n' of the List(T) object.  \nnumbers.ForEach(  \n    Sub(number) Console.Write(number & \" \"))  \n' Output: 0 2 4 6 8  \n```  \n  \n For the type of elements in the <xref:System.Collections.Generic.List%601>, you can also define your own class. In the following example, the `Galaxy` class that is used by the <xref:System.Collections.Generic.List%601> is defined in the code.  \n  \n```vb  \nPrivate Sub IterateThroughList()  \n    Dim theGalaxies As New List(Of Galaxy) From  \n        {  \n            New Galaxy With {.Name = \"Tadpole\", .MegaLightYears = 400},  \n            New Galaxy With {.Name = \"Pinwheel\", .MegaLightYears = 25},  \n            New Galaxy With {.Name = \"Milky Way\", .MegaLightYears = 0},  \n            New Galaxy With {.Name = \"Andromeda\", .MegaLightYears = 3}  \n        }  \n  \n    For Each theGalaxy In theGalaxies  \n        With theGalaxy  \n            Console.WriteLine(.Name & \"  \" & .MegaLightYears)  \n        End With  \n    Next  \n  \n    ' Output:  \n    '  Tadpole  400  \n    '  Pinwheel  25  \n    '  Milky Way  0  \n    '  Andromeda  3  \nEnd Sub  \n  \nPublic Class Galaxy  \n    Public Property Name As String  \n    Public Property MegaLightYears As Integer  \nEnd Class  \n```  \n  \n<a name=\"BKMK_KindsOfCollections\"></a>\n## Kinds of Collections   \n Many common collections are provided by the .NET Framework. Each type of collection is designed for a specific purpose.  \n  \n Some of the common collection classes are described in this section:  \n  \n-   <xref:System.Collections.Generic> classes  \n  \n-   <xref:System.Collections.Concurrent> classes  \n  \n-   <xref:System.Collections> classes  \n  \n-   Visual Basic `Collection` class  \n  \n<a name=\"BKMK_Generic\"></a>\n### System.Collections.Generic Classes  \n\n You can create a generic collection by using one of the classes in the <xref:System.Collections.Generic> namespace. A generic collection is useful when every item in the collection has the same data type. A generic collection enforces strong typing by allowing only the desired data type to be added.  \n  \n The following table lists some of the frequently used classes of the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace:  \n  \n|Class|Description|  \n|---|---|  \n|<xref:System.Collections.Generic.Dictionary%602>|Represents a collection of key/value pairs that are organized based on the key.|  \n|<xref:System.Collections.Generic.List%601>|Represents a list of objects that can be accessed by index. Provides methods to search, sort, and modify lists.|  \n|<xref:System.Collections.Generic.Queue%601>|Represents a first in, first out (FIFO) collection of objects.|  \n|<xref:System.Collections.Generic.SortedList%602>|Represents a collection of key/value pairs that are sorted by key based on the associated <xref:System.Collections.Generic.IComparer%601> implementation.|  \n|<xref:System.Collections.Generic.Stack%601>|Represents a last in, first out (LIFO) collection of objects.|  \n  \n For additional information, see [Commonly Used Collection Types](../../../standard/collections/commonly-used-collection-types.md), [Selecting a Collection Class](../../../standard/collections/selecting-a-collection-class.md), and <xref:System.Collections.Generic?displayProperty=nameWithType>.  \n  \n<a name=\"BKMK_Concurrent\"></a>\n### System.Collections.Concurrent Classes   \n In the .NET Framework 4 or newer, the collections in the <xref:System.Collections.Concurrent> namespace provide efficient thread-safe operations for accessing collection items from multiple threads.  \n  \n The classes in the <xref:System.Collections.Concurrent> namespace should be used instead of the corresponding types in the <xref:System.Collections.Generic?displayProperty=nameWithType> and <xref:System.Collections?displayProperty=nameWithType> namespaces whenever multiple threads are accessing the collection concurrently. For more information, see [Thread-Safe Collections](../../../standard/collections/thread-safe/index.md) and <xref:System.Collections.Concurrent>.  \n  \n Some classes included in the <xref:System.Collections.Concurrent> namespace are <xref:System.Collections.Concurrent.BlockingCollection%601>, <xref:System.Collections.Concurrent.ConcurrentDictionary%602>, <xref:System.Collections.Concurrent.ConcurrentQueue%601>, and <xref:System.Collections.Concurrent.ConcurrentStack%601>.  \n  \n<a name=\"BKMK_Collections\"></a>\n### System.Collections Classes    \n The classes in the <xref:System.Collections?displayProperty=nameWithType> namespace do not store elements as specifically typed objects, but as objects of type `Object`.  \n  \n Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of the legacy types in the `System.Collections` namespace.  \n  \n The following table lists some of the frequently used classes in the `System.Collections` namespace:  \n  \n|Class|Description|  \n|---|---|  \n|<xref:System.Collections.ArrayList>|Represents an array of objects whose size is dynamically increased as required.|  \n|<xref:System.Collections.Hashtable>|Represents a collection of key/value pairs that are organized based on the hash code of the key.|  \n|<xref:System.Collections.Queue>|Represents a first in, first out (FIFO) collection of objects.|  \n|<xref:System.Collections.Stack>|Represents a last in, first out (LIFO) collection of objects.|  \n  \n The <xref:System.Collections.Specialized> namespace provides specialized and strongly typed collection classes, such as string-only collections and linked-list and hybrid dictionaries.  \n\n<a name=\"BKMK_VisualBasic\"></a> \n### Visual Basic Collection Class  \n You can use the Visual Basic <xref:Microsoft.VisualBasic.Collection> class to access a collection item by using either a numeric index or a `String` key. You can add items to a collection object either with or without specifying a key. If you add an item without a key, you must use its numeric index to access it.  \n  \n The Visual Basic `Collection` class stores all its elements as type `Object`, so you can add an item of any data type. There is no safeguard against inappropriate data types being added.  \n  \n When you use the Visual Basic `Collection` class, the first item in a collection has an index of 1. This differs from the .NET Framework collection classes, for which the starting index is 0.  \n  \n Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of the Visual Basic `Collection` class.  \n  \n For more information, see <xref:Microsoft.VisualBasic.Collection>.  \n  \n<a name=\"BKMK_KeyValuePairs\"></a>\n## Implementing a Collection of Key/Value Pairs   \n The <xref:System.Collections.Generic.Dictionary%602> generic collection enables you to access to elements in a collection by using the key of each element. Each addition to the dictionary consists of a value and its associated key. Retrieving a value by using its key is fast because the `Dictionary` class is implemented as a hash table.  \n  \n The following example creates a `Dictionary` collection and iterates through the dictionary by using a `For Each` statement.  \n  \n```vb  \nPrivate Sub IterateThroughDictionary()  \n    Dim elements As Dictionary(Of String, Element) = BuildDictionary()  \n  \n    For Each kvp As KeyValuePair(Of String, Element) In elements  \n        Dim theElement As Element = kvp.Value  \n  \n        Console.WriteLine(\"key: \" & kvp.Key)  \n        With theElement  \n            Console.WriteLine(\"values: \" & .Symbol & \" \" &  \n                .Name & \" \" & .AtomicNumber)  \n        End With  \n    Next  \nEnd Sub  \n  \nPrivate Function BuildDictionary() As Dictionary(Of String, Element)  \n    Dim elements As New Dictionary(Of String, Element)  \n  \n    AddToDictionary(elements, \"K\", \"Potassium\", 19)  \n    AddToDictionary(elements, \"Ca\", \"Calcium\", 20)  \n    AddToDictionary(elements, \"Sc\", \"Scandium\", 21)  \n    AddToDictionary(elements, \"Ti\", \"Titanium\", 22)  \n  \n    Return elements  \nEnd Function  \n  \nPrivate Sub AddToDictionary(ByVal elements As Dictionary(Of String, Element),  \nByVal symbol As String, ByVal name As String, ByVal atomicNumber As Integer)  \n    Dim theElement As New Element  \n  \n    theElement.Symbol = symbol  \n    theElement.Name = name  \n    theElement.AtomicNumber = atomicNumber  \n  \n    elements.Add(Key:=theElement.Symbol, value:=theElement)  \nEnd Sub  \n  \nPublic Class Element  \n    Public Property Symbol As String  \n    Public Property Name As String  \n    Public Property AtomicNumber As Integer  \nEnd Class  \n```  \n  \n To instead use a collection initializer to build the `Dictionary` collection, you can replace the `BuildDictionary` and `AddToDictionary` methods with the following method.  \n  \n```vb  \nPrivate Function BuildDictionary2() As Dictionary(Of String, Element)  \n    Return New Dictionary(Of String, Element) From  \n        {  \n            {\"K\", New Element With  \n                {.Symbol = \"K\", .Name = \"Potassium\", .AtomicNumber = 19}},  \n            {\"Ca\", New Element With  \n                {.Symbol = \"Ca\", .Name = \"Calcium\", .AtomicNumber = 20}},  \n            {\"Sc\", New Element With  \n                {.Symbol = \"Sc\", .Name = \"Scandium\", .AtomicNumber = 21}},  \n            {\"Ti\", New Element With  \n                {.Symbol = \"Ti\", .Name = \"Titanium\", .AtomicNumber = 22}}  \n        }  \nEnd Function  \n```  \n  \n The following example uses the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property of `Dictionary` to quickly find an item by key. The `Item` property enables you to access an item in the `elements` collection by using the `elements(symbol)` code in Visual Basic.  \n  \n```vb  \nPrivate Sub FindInDictionary(ByVal symbol As String)  \n    Dim elements As Dictionary(Of String, Element) = BuildDictionary()  \n  \n    If elements.ContainsKey(symbol) = False Then  \n        Console.WriteLine(symbol & \" not found\")  \n    Else  \n        Dim theElement = elements(symbol)  \n        Console.WriteLine(\"found: \" & theElement.Name)  \n    End If  \nEnd Sub  \n```  \n  \n The following example instead uses the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method quickly find an item by key.  \n  \n```vb  \nPrivate Sub FindInDictionary2(ByVal symbol As String)  \n    Dim elements As Dictionary(Of String, Element) = BuildDictionary()  \n  \n    Dim theElement As Element = Nothing  \n    If elements.TryGetValue(symbol, theElement) = False Then  \n        Console.WriteLine(symbol & \" not found\")  \n    Else  \n        Console.WriteLine(\"found: \" & theElement.Name)  \n    End If  \nEnd Sub  \n```  \n  \n<a name=\"BKMK_LINQ\"></a> \n## Using LINQ to Access a Collection  \n LINQ (Language-Integrated Query) can be used to access collections. LINQ queries provide filtering, ordering, and grouping capabilities. For more information, see [Getting Started with LINQ in Visual Basic](../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md).  \n  \n The following example runs a LINQ query against a generic `List`. The LINQ query returns a different collection that contains the results.  \n  \n```vb  \nPrivate Sub ShowLINQ()  \n    Dim elements As List(Of Element) = BuildList()  \n  \n    ' LINQ Query.  \n    Dim subset = From theElement In elements  \n                  Where theElement.AtomicNumber < 22  \n                  Order By theElement.Name  \n  \n    For Each theElement In subset  \n        Console.WriteLine(theElement.Name & \" \" & theElement.AtomicNumber)  \n    Next  \n  \n    ' Output:  \n    '  Calcium 20  \n    '  Potassium 19  \n    '  Scandium 21  \nEnd Sub  \n  \nPrivate Function BuildList() As List(Of Element)  \n    Return New List(Of Element) From  \n        {  \n            {New Element With  \n                {.Symbol = \"K\", .Name = \"Potassium\", .AtomicNumber = 19}},  \n            {New Element With  \n                {.Symbol = \"Ca\", .Name = \"Calcium\", .AtomicNumber = 20}},  \n            {New Element With  \n                {.Symbol = \"Sc\", .Name = \"Scandium\", .AtomicNumber = 21}},  \n            {New Element With  \n                {.Symbol = \"Ti\", .Name = \"Titanium\", .AtomicNumber = 22}}  \n        }  \nEnd Function  \n  \nPublic Class Element  \n    Public Property Symbol As String  \n    Public Property Name As String  \n    Public Property AtomicNumber As Integer  \nEnd Class  \n```  \n  \n <a name=\"BKMK_Sorting\"></a> \n## Sorting a Collection  \n The following example illustrates a procedure for sorting a collection. The example sorts instances of the `Car` class that are stored in a <xref:System.Collections.Generic.List%601>. The `Car` class implements the <xref:System.IComparable%601> interface, which requires that the <xref:System.IComparable%601.CompareTo%2A> method be implemented.  \n  \n Each call to the <xref:System.IComparable%601.CompareTo%2A> method makes a single comparison that is used for sorting. User-written code in the `CompareTo` method returns a value for each comparison of the current object with another object. The value returned is less than zero if the current object is less than the other object, greater than zero if the current object is greater than the other object, and zero if they are equal. This enables you to define in code the criteria for greater than, less than, and equal.  \n  \n In the `ListCars` method, the `cars.Sort()` statement sorts the list. This call to the <xref:System.Collections.Generic.List%601.Sort%2A> method of the <xref:System.Collections.Generic.List%601> causes the `CompareTo` method to be called automatically for the `Car` objects in the `List`.  \n  \n```vb  \nPublic Sub ListCars()  \n  \n    ' Create some new cars.  \n    Dim cars As New List(Of Car) From  \n    {  \n        New Car With {.Name = \"car1\", .Color = \"blue\", .Speed = 20},  \n        New Car With {.Name = \"car2\", .Color = \"red\", .Speed = 50},  \n        New Car With {.Name = \"car3\", .Color = \"green\", .Speed = 10},  \n        New Car With {.Name = \"car4\", .Color = \"blue\", .Speed = 50},  \n        New Car With {.Name = \"car5\", .Color = \"blue\", .Speed = 30},  \n        New Car With {.Name = \"car6\", .Color = \"red\", .Speed = 60},  \n        New Car With {.Name = \"car7\", .Color = \"green\", .Speed = 50}  \n    }  \n  \n    ' Sort the cars by color alphabetically, and then by speed  \n    ' in descending order.  \n    cars.Sort()  \n  \n    ' View all of the cars.  \n    For Each thisCar As Car In cars  \n        Console.Write(thisCar.Color.PadRight(5) & \" \")  \n        Console.Write(thisCar.Speed.ToString & \" \")  \n        Console.Write(thisCar.Name)  \n        Console.WriteLine()  \n    Next  \n  \n    ' Output:  \n    '  blue  50 car4  \n    '  blue  30 car5  \n    '  blue  20 car1  \n    '  green 50 car7  \n    '  green 10 car3  \n    '  red   60 car6  \n    '  red   50 car2  \nEnd Sub  \n  \nPublic Class Car  \n    Implements IComparable(Of Car)  \n  \n    Public Property Name As String  \n    Public Property Speed As Integer  \n    Public Property Color As String  \n  \n    Public Function CompareTo(ByVal other As Car) As Integer _  \n        Implements System.IComparable(Of Car).CompareTo  \n        ' A call to this method makes a single comparison that is  \n        ' used for sorting.  \n  \n        ' Determine the relative order of the objects being compared.  \n        ' Sort by color alphabetically, and then by speed in  \n        ' descending order.  \n  \n        ' Compare the colors.  \n        Dim compare As Integer  \n        compare = String.Compare(Me.Color, other.Color, True)  \n  \n        ' If the colors are the same, compare the speeds.  \n        If compare = 0 Then  \n            compare = Me.Speed.CompareTo(other.Speed)  \n  \n            ' Use descending order for speed.  \n            compare = -compare  \n        End If  \n  \n        Return compare  \n    End Function  \nEnd Class  \n```  \n  \n<a name=\"BKMK_CustomCollection\"></a> \n## Defining a Custom Collection  \n You can define a collection by implementing the <xref:System.Collections.Generic.IEnumerable%601> or <xref:System.Collections.IEnumerable> interface. For additional information, see [Enumerating a Collection](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hwyysy67(v=vs.100)).\n  \n Although you can define a custom collection, it is usually better to instead use the collections that are included in the .NET Framework, which are described in [Kinds of Collections](#kinds-of-collections) earlier in this topic.  \n  \n The following example defines a custom collection class named `AllColors`. This class implements the <xref:System.Collections.IEnumerable> interface, which requires that the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method be implemented.  \n  \n The `GetEnumerator` method returns an instance of the `ColorEnumerator` class. `ColorEnumerator` implements the <xref:System.Collections.IEnumerator> interface, which requires that the <xref:System.Collections.IEnumerator.Current%2A> property, <xref:System.Collections.IEnumerator.MoveNext%2A> method, and <xref:System.Collections.IEnumerator.Reset%2A> method be implemented.  \n  \n```vb  \nPublic Sub ListColors()  \n    Dim colors As New AllColors()  \n  \n    For Each theColor As Color In colors  \n        Console.Write(theColor.Name & \" \")  \n    Next  \n    Console.WriteLine()  \n    ' Output: red blue green  \nEnd Sub  \n  \n' Collection class.  \nPublic Class AllColors  \n    Implements System.Collections.IEnumerable  \n  \n    Private _colors() As Color =  \n    {  \n        New Color With {.Name = \"red\"},  \n        New Color With {.Name = \"blue\"},  \n        New Color With {.Name = \"green\"}  \n    }  \n  \n    Public Function GetEnumerator() As System.Collections.IEnumerator _  \n        Implements System.Collections.IEnumerable.GetEnumerator  \n  \n        Return New ColorEnumerator(_colors)  \n  \n        ' Instead of creating a custom enumerator, you could  \n        ' use the GetEnumerator of the array.  \n        'Return _colors.GetEnumerator  \n    End Function  \n  \n    ' Custom enumerator.  \n    Private Class ColorEnumerator  \n        Implements System.Collections.IEnumerator  \n  \n        Private _colors() As Color  \n        Private _position As Integer = -1  \n  \n        Public Sub New(ByVal colors() As Color)  \n            _colors = colors  \n        End Sub  \n  \n        Public ReadOnly Property Current() As Object _  \n            Implements System.Collections.IEnumerator.Current  \n            Get  \n                Return _colors(_position)  \n            End Get  \n        End Property  \n  \n        Public Function MoveNext() As Boolean _  \n            Implements System.Collections.IEnumerator.MoveNext  \n            _position += 1  \n            Return (_position < _colors.Length)  \n        End Function  \n  \n        Public Sub Reset() Implements System.Collections.IEnumerator.Reset  \n            _position = -1  \n        End Sub  \n    End Class  \nEnd Class  \n  \n' Element class.  \nPublic Class Color  \n    Public Property Name As String  \nEnd Class  \n```  \n  \n<a name=\"BKMK_Iterators\"></a>\n## Iterators  \n An *iterator* is used to perform a custom iteration over a collection. An iterator can be a method or a `get` accessor. An iterator uses a [Yield](../../../visual-basic/language-reference/statements/yield-statement.md) statement to return each element of the collection one at a time.  \n  \n You call an iterator by using a [For Each…Next](../../../visual-basic/language-reference/statements/for-each-next-statement.md) statement. Each iteration of the `For Each` loop calls the iterator. When a `Yield` statement is reached in the iterator, an expression is returned, and the current location in code is retained. Execution is restarted from that location the next time that the iterator is called.  \n  \n For more information, see [Iterators (Visual Basic)](../../../visual-basic/programming-guide/concepts/iterators.md).  \n  \n The following example uses an iterator method. The iterator method has a `Yield` statement that is inside a [For…Next](../../../visual-basic/language-reference/statements/for-next-statement.md) loop. In the `ListEvenNumbers` method, each iteration of the `For Each` statement body creates a call to the iterator method, which proceeds to the next `Yield` statement.  \n  \n```vb  \nPublic Sub ListEvenNumbers()  \n    For Each number As Integer In EvenSequence(5, 18)  \n        Console.Write(number & \" \")  \n    Next  \n    Console.WriteLine()  \n    ' Output: 6 8 10 12 14 16 18  \nEnd Sub  \n  \nPrivate Iterator Function EvenSequence(  \nByVal firstNumber As Integer, ByVal lastNumber As Integer) _  \nAs IEnumerable(Of Integer)  \n  \n' Yield even numbers in the range.  \n    For number = firstNumber To lastNumber  \n        If number Mod 2 = 0 Then  \n            Yield number  \n        End If  \n    Next  \nEnd Function  \n```  \n  \n## See also\n\n- [Collection Initializers](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)\n- [Programming Concepts (Visual Basic)](../../../visual-basic/programming-guide/concepts/index.md)\n- [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)\n- [LINQ to Objects (Visual Basic)](../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)\n- [Parallel LINQ (PLINQ)](../../../standard/parallel-programming/parallel-linq-plinq.md)\n- [Collections and Data Structures](../../../standard/collections/index.md)\n- [Selecting a Collection Class](../../../standard/collections/selecting-a-collection-class.md)\n- [Comparisons and Sorts Within Collections](../../../standard/collections/comparisons-and-sorts-within-collections.md)\n- [When to Use Generic Collections](../../../standard/collections/when-to-use-generic-collections.md)\n","nodes":[{"pos":[4,108],"embed":true,"restype":"x-metadata","content":"title: \"Collections (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 5f7749f3-aaf2-4319-b63c-bfa72e1e2b7a","nodes":[{"content":"Collections (Visual Basic)","nodes":[{"pos":[0,26],"content":"Collections (Visual Basic)","nodes":[{"content":"Collections (Visual Basic)","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[115,141],"content":"Collections (Visual Basic)","linkify":"Collections (Visual Basic)","nodes":[{"content":"Collections (Visual Basic)","pos":[0,26]}]},{"content":"For many applications, you want to create and manage groups of related objects.","pos":[142,221]},{"content":"There are two ways to group objects: by creating arrays of objects, and by creating collections of objects.","pos":[222,329]},{"content":"Arrays are most useful for creating and working with a fixed number of strongly-typed objects.","pos":[336,430]},{"content":"For information about arrays, see <bpt id=\"p1\">[</bpt>Arrays<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.","pos":[431,549],"source":" For information about arrays, see [Arrays](../../../visual-basic/programming-guide/language-features/arrays/index.md)."},{"content":"Collections provide a more flexible way to work with groups of objects.","pos":[556,627]},{"content":"Unlike arrays, the group of objects you work with can grow and shrink dynamically as the needs of the application change.","pos":[628,749]},{"content":"For some collections, you can assign a key to any object that you put into the collection so that you can quickly retrieve the object by using the key.","pos":[750,901]},{"content":"A collection is a class, so you must declare an instance of the class before you can add elements to that collection.","pos":[908,1025]},{"content":"If your collection contains elements of only one data type, you can use one of the classes in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace.","pos":[1032,1203],"source":"If your collection contains elements of only one data type, you can use one of the classes in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace."},{"content":"A generic collection enforces type safety so that no other data type can be added to it.","pos":[1204,1292]},{"content":"When you retrieve an element from a generic collection, you do not have to determine its data type or convert it.","pos":[1293,1406]},{"pos":[1414,1649],"content":"[!NOTE]\n For the examples in this topic, include [Imports](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md) statements for the `System.Collections.Generic` and `System.Linq` namespaces.","leadings":["","> "],"nodes":[{"content":"For the examples in this topic, include <bpt id=\"p1\">[</bpt>Imports<ept id=\"p1\">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept> statements for the <ph id=\"ph1\">`System.Collections.Generic`</ph> and <ph id=\"ph2\">`System.Linq`</ph> namespaces.","pos":[9,233],"source":"For the examples in this topic, include [Imports](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md) statements for the `System.Collections.Generic` and `System.Linq` namespaces."}]},{"pos":[1656,1673],"content":"<bpt id=\"p1\">**</bpt>In this topic<ept id=\"p1\">**</ept>","source":"**In this topic**"},{"pos":[1683,1734],"content":"<bpt id=\"p1\">[</bpt>Using a Simple Collection<ept id=\"p1\">](#BKMK_SimpleCollection)</ept>","source":"[Using a Simple Collection](#BKMK_SimpleCollection)"},{"pos":[1744,1792],"content":"<bpt id=\"p1\">[</bpt>Kinds of Collections<ept id=\"p1\">](#BKMK_KindsOfCollections)</ept>","source":"[Kinds of Collections](#BKMK_KindsOfCollections)"},{"pos":[1806,1857],"content":"<bpt id=\"p1\">[</bpt>System.Collections.Generic Classes<ept id=\"p1\">](#BKMK_Generic)</ept>","source":"[System.Collections.Generic Classes](#BKMK_Generic)"},{"pos":[1871,1928],"content":"<bpt id=\"p1\">[</bpt>System.Collections.Concurrent Classes<ept id=\"p1\">](#BKMK_Concurrent)</ept>","source":"[System.Collections.Concurrent Classes](#BKMK_Concurrent)"},{"pos":[1942,1989],"content":"<bpt id=\"p1\">[</bpt>System.Collections Classes<ept id=\"p1\">](#BKMK_Collections)</ept>","source":"[System.Collections Classes](#BKMK_Collections)"},{"pos":[2003,2053],"content":"<bpt id=\"p1\">[</bpt>Visual Basic Collection Class<ept id=\"p1\">](#BKMK_VisualBasic)</ept>","source":"[Visual Basic Collection Class](#BKMK_VisualBasic)"},{"pos":[2063,2130],"content":"<bpt id=\"p1\">[</bpt>Implementing a Collection of Key/Value Pairs<ept id=\"p1\">](#BKMK_KeyValuePairs)</ept>","source":"[Implementing a Collection of Key/Value Pairs](#BKMK_KeyValuePairs)"},{"pos":[2140,2187],"content":"<bpt id=\"p1\">[</bpt>Using LINQ to Access a Collection<ept id=\"p1\">](#BKMK_LINQ)</ept>","source":"[Using LINQ to Access a Collection](#BKMK_LINQ)"},{"pos":[2197,2234],"content":"<bpt id=\"p1\">[</bpt>Sorting a Collection<ept id=\"p1\">](#BKMK_Sorting)</ept>","source":"[Sorting a Collection](#BKMK_Sorting)"},{"pos":[2244,2298],"content":"<bpt id=\"p1\">[</bpt>Defining a Custom Collection<ept id=\"p1\">](#BKMK_CustomCollection)</ept>","source":"[Defining a Custom Collection](#BKMK_CustomCollection)"},{"pos":[2308,2336],"content":"<bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](#BKMK_Iterators)</ept>","source":"[Iterators](#BKMK_Iterators)"},{"pos":[2382,2407],"content":"Using a Simple Collection","linkify":"Using a Simple Collection","nodes":[{"content":"Using a Simple Collection","pos":[0,25]}]},{"pos":[2411,2570],"content":"The examples in this section use the generic <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, which enables you to work with a strongly typed list of objects.","source":"The examples in this section use the generic <xref:System.Collections.Generic.List%601> class, which enables you to work with a strongly typed list of objects."},{"pos":[2577,2780],"content":"The following example creates a list of strings and then iterates through the strings by using a <bpt id=\"p1\">[</bpt>For Each…Next<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> statement.","source":"The following example creates a list of strings and then iterates through the strings by using a [For Each…Next](../../../visual-basic/language-reference/statements/for-each-next-statement.md) statement."},{"content":"If the contents of a collection are known in advance, you can use a <bpt id=\"p1\">*</bpt>collection initializer<ept id=\"p1\">*</ept> to initialize the collection.","pos":[3115,3237],"source":"If the contents of a collection are known in advance, you can use a *collection initializer* to initialize the collection."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Collection Initializers<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>.","pos":[3238,3382],"source":" For more information, see [Collection Initializers](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)."},{"content":"The following example is the same as the previous example, except a collection initializer is used to add elements to the collection.","pos":[3389,3522]},{"content":"You can use a <bpt id=\"p1\">[</bpt>For…Next<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> statement instead of a <ph id=\"ph1\">`For Each`</ph> statement to iterate through a collection.","pos":[3821,3997],"source":"You can use a [For…Next](../../../visual-basic/language-reference/statements/for-next-statement.md) statement instead of a `For Each` statement to iterate through a collection."},{"content":"You accomplish this by accessing the collection elements by the index position.","pos":[3998,4077]},{"content":"The index of the elements starts at 0 and ends at the element count minus 1.","pos":[4078,4154]},{"pos":[4161,4271],"content":"The following example iterates through the elements of a collection by using <ph id=\"ph1\">`For…Next`</ph> instead of <ph id=\"ph2\">`For Each`</ph>.","source":"The following example iterates through the elements of a collection by using `For…Next` instead of `For Each`."},{"content":"The following example removes an element from the collection by specifying the object to remove.","pos":[4508,4604]},{"content":"The following example removes elements from a generic list.","pos":[4990,5049]},{"content":"Instead of a <ph id=\"ph1\">`For Each`</ph> statement, a <bpt id=\"p1\">[</bpt>For…Next<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> statement that iterates in descending order is used.","pos":[5050,5225],"source":" Instead of a `For Each` statement, a [For…Next](../../../visual-basic/language-reference/statements/for-next-statement.md) statement that iterates in descending order is used."},{"content":"This is because the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.RemoveAt%2A&gt;</ph> method causes elements after a removed element to have a lower index value.","pos":[5226,5376],"source":" This is because the <xref:System.Collections.Generic.List%601.RemoveAt%2A> method causes elements after a removed element to have a lower index value."},{"content":"For the type of elements in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, you can also define your own class.","pos":[5951,6062],"source":"For the type of elements in the <xref:System.Collections.Generic.List%601>, you can also define your own class."},{"content":"In the following example, the <ph id=\"ph1\">`Galaxy`</ph> class that is used by the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is defined in the code.","pos":[6063,6194],"source":" In the following example, the `Galaxy` class that is used by the <xref:System.Collections.Generic.List%601> is defined in the code."},{"pos":[7064,7084],"content":"Kinds of Collections","linkify":"Kinds of Collections","nodes":[{"content":"Kinds of Collections","pos":[0,20]}]},{"content":"Many common collections are provided by the .NET Framework.","pos":[7089,7148]},{"content":"Each type of collection is designed for a specific purpose.","pos":[7149,7208]},{"content":"Some of the common collection classes are described in this section:","pos":[7215,7283]},{"pos":[7293,7334],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph> classes","source":"<xref:System.Collections.Generic> classes"},{"pos":[7344,7388],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Concurrent&gt;</ph> classes","source":"<xref:System.Collections.Concurrent> classes"},{"pos":[7398,7431],"content":"<ph id=\"ph1\">&lt;xref:System.Collections&gt;</ph> classes","source":"<xref:System.Collections> classes"},{"pos":[7441,7472],"content":"Visual Basic <ph id=\"ph1\">`Collection`</ph> class","source":"Visual Basic `Collection` class"},{"pos":[7510,7544],"content":"System.Collections.Generic Classes","linkify":"System.Collections.Generic Classes","nodes":[{"content":"System.Collections.Generic Classes","pos":[0,34]}]},{"content":"You can create a generic collection by using one of the classes in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph> namespace.","pos":[7549,7664],"source":"You can create a generic collection by using one of the classes in the <xref:System.Collections.Generic> namespace."},{"content":"A generic collection is useful when every item in the collection has the same data type.","pos":[7665,7753]},{"content":"A generic collection enforces strong typing by allowing only the desired data type to be added.","pos":[7754,7849]},{"pos":[7856,7998],"content":"The following table lists some of the frequently used classes of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace:","source":"The following table lists some of the frequently used classes of the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace:"},{"content":"Class","pos":[8005,8010]},{"content":"Description","pos":[8011,8022]},{"content":"Represents a collection of key/value pairs that are organized based on the key.","pos":[8088,8167]},{"content":"Represents a list of objects that can be accessed by index.","pos":[8215,8274]},{"content":"Provides methods to search, sort, and modify lists.","pos":[8275,8326]},{"content":"Represents a first in, first out (FIFO) collection of objects.","pos":[8375,8437]},{"pos":[8491,8644],"content":"Represents a collection of key/value pairs that are sorted by key based on the associated <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.","source":"Represents a collection of key/value pairs that are sorted by key based on the associated <xref:System.Collections.Generic.IComparer%601> implementation."},{"content":"Represents a last in, first out (LIFO) collection of objects.","pos":[8693,8754]},{"pos":[8762,9055],"content":"For additional information, see <bpt id=\"p1\">[</bpt>Commonly Used Collection Types<ept id=\"p1\">](../../../standard/collections/commonly-used-collection-types.md)</ept>, <bpt id=\"p2\">[</bpt>Selecting a Collection Class<ept id=\"p2\">](../../../standard/collections/selecting-a-collection-class.md)</ept>, and <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>.","source":"For additional information, see [Commonly Used Collection Types](../../../standard/collections/commonly-used-collection-types.md), [Selecting a Collection Class](../../../standard/collections/selecting-a-collection-class.md), and <xref:System.Collections.Generic?displayProperty=nameWithType>."},{"pos":[9096,9133],"content":"System.Collections.Concurrent Classes","linkify":"System.Collections.Concurrent Classes","nodes":[{"content":"System.Collections.Concurrent Classes","pos":[0,37]}]},{"pos":[9138,9336],"content":"In the .NET Framework 4 or newer, the collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace provide efficient thread-safe operations for accessing collection items from multiple threads.","source":"In the .NET Framework 4 or newer, the collections in the <xref:System.Collections.Concurrent> namespace provide efficient thread-safe operations for accessing collection items from multiple threads."},{"content":"The classes in the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace should be used instead of the corresponding types in the <ph id=\"ph2\">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph> namespaces whenever multiple threads are accessing the collection concurrently.","pos":[9343,9667],"source":"The classes in the <xref:System.Collections.Concurrent> namespace should be used instead of the corresponding types in the <xref:System.Collections.Generic?displayProperty=nameWithType> and <xref:System.Collections?displayProperty=nameWithType> namespaces whenever multiple threads are accessing the collection concurrently."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Thread-Safe Collections<ept id=\"p1\">](../../../standard/collections/thread-safe/index.md)</ept> and <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent&gt;</ph>.","pos":[9668,9813],"source":" For more information, see [Thread-Safe Collections](../../../standard/collections/thread-safe/index.md) and <xref:System.Collections.Concurrent>."},{"pos":[9820,10143],"content":"Some classes included in the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace are <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Concurrent.ConcurrentDictionary%602&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.","source":"Some classes included in the <xref:System.Collections.Concurrent> namespace are <xref:System.Collections.Concurrent.BlockingCollection%601>, <xref:System.Collections.Concurrent.ConcurrentDictionary%602>, <xref:System.Collections.Concurrent.ConcurrentQueue%601>, and <xref:System.Collections.Concurrent.ConcurrentStack%601>."},{"pos":[10185,10211],"content":"System.Collections Classes","linkify":"System.Collections Classes","nodes":[{"content":"System.Collections Classes","pos":[0,26]}]},{"pos":[10217,10386],"content":"The classes in the <ph id=\"ph1\">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph> namespace do not store elements as specifically typed objects, but as objects of type <ph id=\"ph2\">`Object`</ph>.","source":"The classes in the <xref:System.Collections?displayProperty=nameWithType> namespace do not store elements as specifically typed objects, but as objects of type `Object`."},{"pos":[10393,10651],"content":"Whenever possible, you should use the generic collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace or the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace instead of the legacy types in the <ph id=\"ph3\">`System.Collections`</ph> namespace.","source":"Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of the legacy types in the `System.Collections` namespace."},{"pos":[10658,10758],"content":"The following table lists some of the frequently used classes in the <ph id=\"ph1\">`System.Collections`</ph> namespace:","source":"The following table lists some of the frequently used classes in the `System.Collections` namespace:"},{"content":"Class","pos":[10765,10770]},{"content":"Description","pos":[10771,10782]},{"content":"Represents an array of objects whose size is dynamically increased as required.","pos":[10835,10914]},{"content":"Represents a collection of key/value pairs that are organized based on the hash code of the key.","pos":[10955,11051]},{"content":"Represents a first in, first out (FIFO) collection of objects.","pos":[11088,11150]},{"content":"Represents a last in, first out (LIFO) collection of objects.","pos":[11187,11248]},{"pos":[11256,11440],"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Specialized&gt;</ph> namespace provides specialized and strongly typed collection classes, such as string-only collections and linked-list and hybrid dictionaries.","source":"The <xref:System.Collections.Specialized> namespace provides specialized and strongly typed collection classes, such as string-only collections and linked-list and hybrid dictionaries."},{"pos":[11481,11510],"content":"Visual Basic Collection Class","linkify":"Visual Basic Collection Class","nodes":[{"content":"Visual Basic Collection Class","pos":[0,29]}]},{"content":"You can use the Visual Basic <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> class to access a collection item by using either a numeric index or a <ph id=\"ph2\">`String`</ph> key.","pos":[11514,11667],"source":"You can use the Visual Basic <xref:Microsoft.VisualBasic.Collection> class to access a collection item by using either a numeric index or a `String` key."},{"content":"You can add items to a collection object either with or without specifying a key.","pos":[11668,11749]},{"content":"If you add an item without a key, you must use its numeric index to access it.","pos":[11750,11828]},{"content":"The Visual Basic <ph id=\"ph1\">`Collection`</ph> class stores all its elements as type <ph id=\"ph2\">`Object`</ph>, so you can add an item of any data type.","pos":[11835,11953],"source":"The Visual Basic `Collection` class stores all its elements as type `Object`, so you can add an item of any data type."},{"content":"There is no safeguard against inappropriate data types being added.","pos":[11954,12021]},{"content":"When you use the Visual Basic <ph id=\"ph1\">`Collection`</ph> class, the first item in a collection has an index of 1.","pos":[12028,12127],"source":"When you use the Visual Basic `Collection` class, the first item in a collection has an index of 1."},{"content":"This differs from the .NET Framework collection classes, for which the starting index is 0.","pos":[12128,12219]},{"pos":[12226,12465],"content":"Whenever possible, you should use the generic collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace or the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace instead of the Visual Basic <ph id=\"ph3\">`Collection`</ph> class.","source":"Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of the Visual Basic `Collection` class."},{"pos":[12472,12538],"content":"For more information, see <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph>.","source":"For more information, see <xref:Microsoft.VisualBasic.Collection>."},{"pos":[12581,12625],"content":"Implementing a Collection of Key/Value Pairs","linkify":"Implementing a Collection of Key/Value Pairs","nodes":[{"content":"Implementing a Collection of Key/Value Pairs","pos":[0,44]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> generic collection enables you to access to elements in a collection by using the key of each element.","pos":[12630,12785],"source":"The <xref:System.Collections.Generic.Dictionary%602> generic collection enables you to access to elements in a collection by using the key of each element."},{"content":"Each addition to the dictionary consists of a value and its associated key.","pos":[12786,12861]},{"content":"Retrieving a value by using its key is fast because the <ph id=\"ph1\">`Dictionary`</ph> class is implemented as a hash table.","pos":[12862,12968],"source":" Retrieving a value by using its key is fast because the `Dictionary` class is implemented as a hash table."},{"pos":[12975,13099],"content":"The following example creates a <ph id=\"ph1\">`Dictionary`</ph> collection and iterates through the dictionary by using a <ph id=\"ph2\">`For Each`</ph> statement.","source":"The following example creates a `Dictionary` collection and iterates through the dictionary by using a `For Each` statement."},{"pos":[14511,14683],"content":"To instead use a collection initializer to build the <ph id=\"ph1\">`Dictionary`</ph> collection, you can replace the <ph id=\"ph2\">`BuildDictionary`</ph> and <ph id=\"ph3\">`AddToDictionary`</ph> methods with the following method.","source":"To instead use a collection initializer to build the `Dictionary` collection, you can replace the `BuildDictionary` and `AddToDictionary` methods with the following method."},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property of <ph id=\"ph3\">`Dictionary`</ph> to quickly find an item by key.","pos":[15328,15551],"source":"The following example uses the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property of `Dictionary` to quickly find an item by key."},{"content":"The <ph id=\"ph1\">`Item`</ph> property enables you to access an item in the <ph id=\"ph2\">`elements`</ph> collection by using the <ph id=\"ph3\">`elements(symbol)`</ph> code in Visual Basic.","pos":[15552,15684],"source":" The `Item` property enables you to access an item in the `elements` collection by using the `elements(symbol)` code in Visual Basic."},{"pos":[16076,16214],"content":"The following example instead uses the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph> method quickly find an item by key.","source":"The following example instead uses the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method quickly find an item by key."},{"pos":[16645,16678],"content":"Using LINQ to Access a Collection","linkify":"Using LINQ to Access a Collection","nodes":[{"content":"Using LINQ to Access a Collection","pos":[0,33]}]},{"content":"LINQ (Language-Integrated Query) can be used to access collections.","pos":[16682,16749]},{"content":"LINQ queries provide filtering, ordering, and grouping capabilities.","pos":[16750,16818]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Getting Started with LINQ in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)</ept>.","pos":[16819,16973],"source":" For more information, see [Getting Started with LINQ in Visual Basic](../../../visual-basic/programming-guide/concepts/linq/getting-started-with-linq.md)."},{"content":"The following example runs a LINQ query against a generic <ph id=\"ph1\">`List`</ph>.","pos":[16980,17045],"source":"The following example runs a LINQ query against a generic `List`."},{"content":"The LINQ query returns a different collection that contains the results.","pos":[17046,17118]},{"pos":[18367,18387],"content":"Sorting a Collection","linkify":"Sorting a Collection","nodes":[{"content":"Sorting a Collection","pos":[0,20]}]},{"content":"The following example illustrates a procedure for sorting a collection.","pos":[18391,18462]},{"content":"The example sorts instances of the <ph id=\"ph1\">`Car`</ph> class that are stored in a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.","pos":[18463,18574],"source":" The example sorts instances of the `Car` class that are stored in a <xref:System.Collections.Generic.List%601>."},{"content":"The <ph id=\"ph1\">`Car`</ph> class implements the <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph> interface, which requires that the <ph id=\"ph3\">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method be implemented.","pos":[18575,18736],"source":" The `Car` class implements the <xref:System.IComparable%601> interface, which requires that the <xref:System.IComparable%601.CompareTo%2A> method be implemented."},{"content":"Each call to the <ph id=\"ph1\">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method makes a single comparison that is used for sorting.","pos":[18743,18861],"source":"Each call to the <xref:System.IComparable%601.CompareTo%2A> method makes a single comparison that is used for sorting."},{"content":"User-written code in the <ph id=\"ph1\">`CompareTo`</ph> method returns a value for each comparison of the current object with another object.","pos":[18862,18984],"source":" User-written code in the `CompareTo` method returns a value for each comparison of the current object with another object."},{"content":"The value returned is less than zero if the current object is less than the other object, greater than zero if the current object is greater than the other object, and zero if they are equal.","pos":[18985,19176]},{"content":"This enables you to define in code the criteria for greater than, less than, and equal.","pos":[19177,19264]},{"content":"In the <ph id=\"ph1\">`ListCars`</ph> method, the <ph id=\"ph2\">`cars.Sort()`</ph> statement sorts the list.","pos":[19271,19340],"source":"In the `ListCars` method, the `cars.Sort()` statement sorts the list."},{"content":"This call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> causes the <ph id=\"ph3\">`CompareTo`</ph> method to be called automatically for the <ph id=\"ph4\">`Car`</ph> objects in the <ph id=\"ph5\">`List`</ph>.","pos":[19341,19559],"source":" This call to the <xref:System.Collections.Generic.List%601.Sort%2A> method of the <xref:System.Collections.Generic.List%601> causes the `CompareTo` method to be called automatically for the `Car` objects in the `List`."},{"pos":[21807,21835],"content":"Defining a Custom Collection","linkify":"Defining a Custom Collection","nodes":[{"content":"Defining a Custom Collection","pos":[0,28]}]},{"content":"You can define a collection by implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.","pos":[21839,21988],"source":"You can define a collection by implementing the <xref:System.Collections.Generic.IEnumerable%601> or <xref:System.Collections.IEnumerable> interface."},{"content":"For additional information, see <bpt id=\"p1\">[</bpt>Enumerating a Collection<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hwyysy67(v=vs.100))</ept>.","pos":[21989,22137],"source":" For additional information, see [Enumerating a Collection](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hwyysy67(v=vs.100))."},{"pos":[22142,22371],"content":"Although you can define a custom collection, it is usually better to instead use the collections that are included in the .NET Framework, which are described in <bpt id=\"p1\">[</bpt>Kinds of Collections<ept id=\"p1\">](#kinds-of-collections)</ept> earlier in this topic.","source":"Although you can define a custom collection, it is usually better to instead use the collections that are included in the .NET Framework, which are described in [Kinds of Collections](#kinds-of-collections) earlier in this topic."},{"content":"The following example defines a custom collection class named <ph id=\"ph1\">`AllColors`</ph>.","pos":[22378,22452],"source":"The following example defines a custom collection class named `AllColors`."},{"content":"This class implements the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, which requires that the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> method be implemented.","pos":[22453,22629],"source":" This class implements the <xref:System.Collections.IEnumerable> interface, which requires that the <xref:System.Collections.IEnumerable.GetEnumerator%2A> method be implemented."},{"content":"The <ph id=\"ph1\">`GetEnumerator`</ph> method returns an instance of the <ph id=\"ph2\">`ColorEnumerator`</ph> class.","pos":[22636,22714],"source":"The `GetEnumerator` method returns an instance of the `ColorEnumerator` class."},{"content":"<ph id=\"ph1\">`ColorEnumerator`</ph> implements the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface, which requires that the <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property, <ph id=\"ph4\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method, and <ph id=\"ph5\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method be implemented.","pos":[22715,23011],"source":"`ColorEnumerator` implements the <xref:System.Collections.IEnumerator> interface, which requires that the <xref:System.Collections.IEnumerator.Current%2A> property, <xref:System.Collections.IEnumerator.MoveNext%2A> method, and <xref:System.Collections.IEnumerator.Reset%2A> method be implemented."},{"pos":[24945,24954],"content":"Iterators","linkify":"Iterators","nodes":[{"content":"Iterators","pos":[0,9]}]},{"content":"An <bpt id=\"p1\">*</bpt>iterator<ept id=\"p1\">*</ept> is used to perform a custom iteration over a collection.","pos":[24958,25028],"source":"An *iterator* is used to perform a custom iteration over a collection."},{"content":"An iterator can be a method or a <ph id=\"ph1\">`get`</ph> accessor.","pos":[25029,25077],"source":" An iterator can be a method or a `get` accessor."},{"content":"An iterator uses a <bpt id=\"p1\">[</bpt>Yield<ept id=\"p1\">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> statement to return each element of the collection one at a time.","pos":[25078,25242],"source":" An iterator uses a [Yield](../../../visual-basic/language-reference/statements/yield-statement.md) statement to return each element of the collection one at a time."},{"content":"You call an iterator by using a <bpt id=\"p1\">[</bpt>For Each…Next<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> statement.","pos":[25249,25387],"source":"You call an iterator by using a [For Each…Next](../../../visual-basic/language-reference/statements/for-each-next-statement.md) statement."},{"content":"Each iteration of the <ph id=\"ph1\">`For Each`</ph> loop calls the iterator.","pos":[25388,25445],"source":" Each iteration of the `For Each` loop calls the iterator."},{"content":"When a <ph id=\"ph1\">`Yield`</ph> statement is reached in the iterator, an expression is returned, and the current location in code is retained.","pos":[25446,25571],"source":" When a `Yield` statement is reached in the iterator, an expression is returned, and the current location in code is retained."},{"content":"Execution is restarted from that location the next time that the iterator is called.","pos":[25572,25656]},{"pos":[25663,25779],"content":"For more information, see <bpt id=\"p1\">[</bpt>Iterators (Visual Basic)<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/iterators.md)</ept>.","source":"For more information, see [Iterators (Visual Basic)](../../../visual-basic/programming-guide/concepts/iterators.md)."},{"content":"The following example uses an iterator method.","pos":[25786,25832]},{"content":"The iterator method has a <ph id=\"ph1\">`Yield`</ph> statement that is inside a <bpt id=\"p1\">[</bpt>For…Next<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> loop.","pos":[25833,25985],"source":" The iterator method has a `Yield` statement that is inside a [For…Next](../../../visual-basic/language-reference/statements/for-next-statement.md) loop."},{"content":"In the <ph id=\"ph1\">`ListEvenNumbers`</ph> method, each iteration of the <ph id=\"ph2\">`For Each`</ph> statement body creates a call to the iterator method, which proceeds to the next <ph id=\"ph3\">`Yield`</ph> statement.","pos":[25986,26151],"source":" In the `ListEvenNumbers` method, each iteration of the `For Each` statement body creates a call to the iterator method, which proceeds to the next `Yield` statement."},{"pos":[26711,26719],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[26723,26840],"content":"<bpt id=\"p1\">[</bpt>Collection Initializers<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept>","source":"[Collection Initializers](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)"},{"pos":[26843,26939],"content":"<bpt id=\"p1\">[</bpt>Programming Concepts (Visual Basic)<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/index.md)</ept>","source":"[Programming Concepts (Visual Basic)](../../../visual-basic/programming-guide/concepts/index.md)"},{"pos":[26942,27047],"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>","source":"[Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)"},{"pos":[27050,27156],"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (Visual Basic)<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)</ept>","source":"[LINQ to Objects (Visual Basic)](../../../visual-basic/programming-guide/concepts/linq/linq-to-objects.md)"},{"pos":[27159,27245],"content":"<bpt id=\"p1\">[</bpt>Parallel LINQ (PLINQ)<ept id=\"p1\">](../../../standard/parallel-programming/parallel-linq-plinq.md)</ept>","source":"[Parallel LINQ (PLINQ)](../../../standard/parallel-programming/parallel-linq-plinq.md)"},{"pos":[27248,27321],"content":"<bpt id=\"p1\">[</bpt>Collections and Data Structures<ept id=\"p1\">](../../../standard/collections/index.md)</ept>","source":"[Collections and Data Structures](../../../standard/collections/index.md)"},{"pos":[27324,27417],"content":"<bpt id=\"p1\">[</bpt>Selecting a Collection Class<ept id=\"p1\">](../../../standard/collections/selecting-a-collection-class.md)</ept>","source":"[Selecting a Collection Class](../../../standard/collections/selecting-a-collection-class.md)"},{"pos":[27420,27537],"content":"<bpt id=\"p1\">[</bpt>Comparisons and Sorts Within Collections<ept id=\"p1\">](../../../standard/collections/comparisons-and-sorts-within-collections.md)</ept>","source":"[Comparisons and Sorts Within Collections](../../../standard/collections/comparisons-and-sorts-within-collections.md)"},{"pos":[27540,27639],"content":"<bpt id=\"p1\">[</bpt>When to Use Generic Collections<ept id=\"p1\">](../../../standard/collections/when-to-use-generic-collections.md)</ept>","source":"[When to Use Generic Collections](../../../standard/collections/when-to-use-generic-collections.md)"}]}