{"content":"---\ntitle: \"Passing a URI to the Windows Runtime\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Windows Runtime, .NET Framework support for\"\n  - \"Windows Runtime, passing a URI to\"\nms.assetid: 3eb5ce6f-f304-4f87-8e81-0f25092f5ad4\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# Passing a URI to the Windows Runtime\nWindows Runtime methods accept only absolute URIs. If you pass a relative URI to a [!INCLUDE[wrt](../../../includes/wrt-md.md)] method, an <xref:System.ArgumentException> exception is thrown. Here's why: When you use the [!INCLUDE[wrt](../../../includes/wrt-md.md)] in .NET Framework code, the <xref:Windows.Foundation.Uri?displayProperty=nameWithType> class appears as <xref:System.Uri?displayProperty=nameWithType> in Intellisense. The <xref:System.Uri?displayProperty=nameWithType> class allows relative URIs, but the <xref:Windows.Foundation.Uri?displayProperty=nameWithType> class does not. This is also true for methods you expose in [!INCLUDE[wrt](../../../includes/wrt-md.md)] Components. If your component exposes a method that takes a URI, the signature in your code includes <xref:System.Uri?displayProperty=nameWithType>. However, to users of your component, the signature includes <xref:Windows.Foundation.Uri?displayProperty=nameWithType>. A URI that is passed to your component must be an absolute URI.  \n  \nThis topic shows how to detect an absolute URI and how to create one when referring to a resource in the app package.  \n  \n## Detecting and using an absolute URI  \nUse the <xref:System.Uri.IsAbsoluteUri%2A?displayProperty=nameWithType> property to ensure that a URI is absolute before passing it to the [!INCLUDE[wrt](../../../includes/wrt-md.md)]. Using this property is more efficient than catching and handling the <xref:System.ArgumentException> exception.  \n  \n## Using an absolute URI for a resource in the app package  \nIf you want to specify a URI for a resource that your app package contains, you can use the `ms-appx` or `ms-appx-web` scheme to create an absolute URI.  \n  \nThe following example shows how to set the <xref:Windows.UI.Xaml.Controls.WebView.Source%2A> property for a <xref:Windows.UI.Xaml.Controls.WebView> control and the <xref:Windows.UI.Xaml.Controls.Image.Source%2A> property for an <xref:Windows.UI.Xaml.Controls.Image> control to resources that are contained in a folder named Pages, using both XAML and code.  \n  \n[!code-xaml[System.URIToWindowsURI#1](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.uritowindowsuri/cs/mainpage.xaml#1)]  \n[!code-csharp[System.URIToWindowsURI#2](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.uritowindowsuri/cs/mainpage.xaml.cs#2)]\n[!code-vb[System.URIToWindowsURI#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uritowindowsuri/vb/mainpage.xaml.vb#2)]  \n  \nFor more information about these schemes, see [URI schemes](/windows/uwp/app-resources/uri-schemes) in the Windows Dev Center.  \n  \n## See also\n\n- [.NET Framework Support for Windows Store Apps and Windows Runtime](../../../docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)\n","nodes":[{"pos":[4,334],"embed":true,"restype":"x-metadata","content":"title: \"Passing a URI to the Windows Runtime\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Windows Runtime, .NET Framework support for\"\n  - \"Windows Runtime, passing a URI to\"\nms.assetid: 3eb5ce6f-f304-4f87-8e81-0f25092f5ad4\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"Passing a URI to the Windows Runtime","nodes":[{"pos":[0,36],"content":"Passing a URI to the Windows Runtime","nodes":[{"content":"Passing a URI to the Windows Runtime","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[341,377],"content":"Passing a URI to the Windows Runtime","linkify":"Passing a URI to the Windows Runtime","nodes":[{"content":"Passing a URI to the Windows Runtime","pos":[0,36]}]},{"content":"Windows Runtime methods accept only absolute URIs.","pos":[378,428]},{"content":"If you pass a relative URI to a <ph id=\"ph1\">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> method, an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph> exception is thrown.","pos":[429,569],"source":" If you pass a relative URI to a [!INCLUDE[wrt](../../../includes/wrt-md.md)] method, an <xref:System.ArgumentException> exception is thrown."},{"content":"Here's why: When you use the <ph id=\"ph1\">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> in .NET Framework code, the <ph id=\"ph2\">&lt;xref:Windows.Foundation.Uri?displayProperty=nameWithType&gt;</ph> class appears as <ph id=\"ph3\">&lt;xref:System.Uri?displayProperty=nameWithType&gt;</ph> in Intellisense.","pos":[570,811],"source":" Here's why: When you use the [!INCLUDE[wrt](../../../includes/wrt-md.md)] in .NET Framework code, the <xref:Windows.Foundation.Uri?displayProperty=nameWithType> class appears as <xref:System.Uri?displayProperty=nameWithType> in Intellisense."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Uri?displayProperty=nameWithType&gt;</ph> class allows relative URIs, but the <ph id=\"ph2\">&lt;xref:Windows.Foundation.Uri?displayProperty=nameWithType&gt;</ph> class does not.","pos":[812,973],"source":" The <xref:System.Uri?displayProperty=nameWithType> class allows relative URIs, but the <xref:Windows.Foundation.Uri?displayProperty=nameWithType> class does not."},{"content":"This is also true for methods you expose in <ph id=\"ph1\">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> Components.","pos":[974,1074],"source":" This is also true for methods you expose in [!INCLUDE[wrt](../../../includes/wrt-md.md)] Components."},{"content":"If your component exposes a method that takes a URI, the signature in your code includes <ph id=\"ph1\">&lt;xref:System.Uri?displayProperty=nameWithType&gt;</ph>.","pos":[1075,1211],"source":" If your component exposes a method that takes a URI, the signature in your code includes <xref:System.Uri?displayProperty=nameWithType>."},{"content":"However, to users of your component, the signature includes <ph id=\"ph1\">&lt;xref:Windows.Foundation.Uri?displayProperty=nameWithType&gt;</ph>.","pos":[1212,1331],"source":" However, to users of your component, the signature includes <xref:Windows.Foundation.Uri?displayProperty=nameWithType>."},{"content":"A URI that is passed to your component must be an absolute URI.","pos":[1332,1395]},{"content":"This topic shows how to detect an absolute URI and how to create one when referring to a resource in the app package.","pos":[1401,1518]},{"pos":[1527,1562],"content":"Detecting and using an absolute URI","linkify":"Detecting and using an absolute URI","nodes":[{"content":"Detecting and using an absolute URI","pos":[0,35]}]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Uri.IsAbsoluteUri%2A?displayProperty=nameWithType&gt;</ph> property to ensure that a URI is absolute before passing it to the <ph id=\"ph2\">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>.","pos":[1565,1749],"source":"Use the <xref:System.Uri.IsAbsoluteUri%2A?displayProperty=nameWithType> property to ensure that a URI is absolute before passing it to the [!INCLUDE[wrt](../../../includes/wrt-md.md)]."},{"content":"Using this property is more efficient than catching and handling the <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> exception.","pos":[1750,1861],"source":" Using this property is more efficient than catching and handling the <xref:System.ArgumentException> exception."},{"pos":[1870,1925],"content":"Using an absolute URI for a resource in the app package","linkify":"Using an absolute URI for a resource in the app package","nodes":[{"content":"Using an absolute URI for a resource in the app package","pos":[0,55]}]},{"pos":[1928,2080],"content":"If you want to specify a URI for a resource that your app package contains, you can use the <ph id=\"ph1\">`ms-appx`</ph> or <ph id=\"ph2\">`ms-appx-web`</ph> scheme to create an absolute URI.","source":"If you want to specify a URI for a resource that your app package contains, you can use the `ms-appx` or `ms-appx-web` scheme to create an absolute URI."},{"pos":[2086,2442],"content":"The following example shows how to set the <ph id=\"ph1\">&lt;xref:Windows.UI.Xaml.Controls.WebView.Source%2A&gt;</ph> property for a <ph id=\"ph2\">&lt;xref:Windows.UI.Xaml.Controls.WebView&gt;</ph> control and the <ph id=\"ph3\">&lt;xref:Windows.UI.Xaml.Controls.Image.Source%2A&gt;</ph> property for an <ph id=\"ph4\">&lt;xref:Windows.UI.Xaml.Controls.Image&gt;</ph> control to resources that are contained in a folder named Pages, using both XAML and code.","source":"The following example shows how to set the <xref:Windows.UI.Xaml.Controls.WebView.Source%2A> property for a <xref:Windows.UI.Xaml.Controls.WebView> control and the <xref:Windows.UI.Xaml.Controls.Image.Source%2A> property for an <xref:Windows.UI.Xaml.Controls.Image> control to resources that are contained in a folder named Pages, using both XAML and code."},{"pos":[2880,3006],"content":"For more information about these schemes, see <bpt id=\"p1\">[</bpt>URI schemes<ept id=\"p1\">](/windows/uwp/app-resources/uri-schemes)</ept> in the Windows Dev Center.","source":"For more information about these schemes, see [URI schemes](/windows/uwp/app-resources/uri-schemes) in the Windows Dev Center."},{"pos":[3015,3023],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3027,3187],"content":"<bpt id=\"p1\">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id=\"p1\">](../../../docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>","source":"[.NET Framework Support for Windows Store Apps and Windows Runtime](../../../docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)"}]}