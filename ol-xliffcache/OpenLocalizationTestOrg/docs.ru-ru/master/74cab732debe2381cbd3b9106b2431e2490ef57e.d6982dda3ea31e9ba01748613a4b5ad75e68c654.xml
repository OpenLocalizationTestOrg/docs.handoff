{"content":"---\ntitle: \"Fine-Tuning Your Async Application (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 97696eb9-81fc-4940-9655-84daa8eb4d5c\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Fine-Tuning Your Async Application (C#)\nYou can add precision and flexibility to your async applications by using the methods and properties that the <xref:System.Threading.Tasks.Task> type makes available. The topics in this section show examples that use <xref:System.Threading.CancellationToken> and important `Task` methods such as <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName> and <xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=fullName>.  \n  \n By using `WhenAny` and `WhenAll`, you can more easily start multiple tasks and await their completion by monitoring a single task.  \n  \n-   `WhenAny` returns a task that completes when any task in a collection is complete.  \n  \n     For examples that use `WhenAny`, see [Cancel Remaining Async Tasks after One Is Complete (C#)](../../../../csharp/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md) and [Start Multiple Async Tasks and Process Them As They Complete (C#)](../../../../csharp/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md).  \n  \n-   `WhenAll` returns a task that completes when all tasks in a collection are complete.  \n  \n     For more information and an example that uses `WhenAll`, see [How to: Extend the async Walkthrough by Using Task.WhenAll (C#)](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md).  \n  \n This section includes the following examples.  \n  \n-   [Cancel an Async Task or a List of Tasks (C#)](../../../../csharp/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md).  \n  \n-   [Cancel Async Tasks after a Period of Time (C#)](../../../../csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md)  \n  \n-   [Cancel Remaining Async Tasks after One Is Complete (C#)](../../../../csharp/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)  \n  \n-   [Start Multiple Async Tasks and Process Them As They Complete (C#)](../../../../csharp/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)  \n  \n> [!NOTE]\n>  To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.  \n  \n The projects create a UI that contains a button that starts the process and a button that cancels it, as the following image shows. The buttons are named `startButton` and `cancelButton`.  \n  \n ![WPF window with Cancel button](../../../../csharp/programming-guide/concepts/async/media/cancellation.png \"Cancellation\")  \n  \n You can download the complete Windows Presentation Foundation (WPF) projects from [Async Sample: Fine Tuning Your Application](http://go.microsoft.com/fwlink/?LinkId=255046).  \n  \n## See Also  \n [Asynchronous Programming with async and await (C#)](../../../../csharp/programming-guide/concepts/async/index.md)","nodes":[{"pos":[12,68],"content":"Fine-Tuning Your Async Application (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Fine-Tuning Your Async Application (C#) | Microsoft Docs","pos":[0,56]}]},{"pos":[427,466],"content":"Fine-Tuning Your Async Application (C#)","linkify":"Fine-Tuning Your Async Application (C#)","nodes":[{"content":"Fine-Tuning Your Async Application (C#)","pos":[0,39]}]},{"content":"You can add precision and flexibility to your async applications by using the methods and properties that the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> type makes available.","pos":[467,633],"source":"You can add precision and flexibility to your async applications by using the methods and properties that the <xref:System.Threading.Tasks.Task> type makes available."},{"content":"The topics in this section show examples that use <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> and important <ph id=\"ph2\">`Task`</ph> methods such as <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=fullName&gt;</ph>.","pos":[634,909],"source":" The topics in this section show examples that use <xref:System.Threading.CancellationToken> and important `Task` methods such as <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName> and <xref:System.Threading.Tasks.Task.WhenAny%2A?displayProperty=fullName>."},{"pos":[916,1046],"content":"By using <ph id=\"ph1\">`WhenAny`</ph> and <ph id=\"ph2\">`WhenAll`</ph>, you can more easily start multiple tasks and await their completion by monitoring a single task.","source":"By using `WhenAny` and `WhenAll`, you can more easily start multiple tasks and await their completion by monitoring a single task."},{"pos":[1056,1138],"content":"<ph id=\"ph1\">`WhenAny`</ph> returns a task that completes when any task in a collection is complete.","source":"`WhenAny` returns a task that completes when any task in a collection is complete."},{"pos":[1149,1540],"content":"For examples that use <ph id=\"ph1\">`WhenAny`</ph>, see <bpt id=\"p1\">[</bpt>Cancel Remaining Async Tasks after One Is Complete (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)</ept> and <bpt id=\"p2\">[</bpt>Start Multiple Async Tasks and Process Them As They Complete (C#)<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)</ept>.","source":"For examples that use `WhenAny`, see [Cancel Remaining Async Tasks after One Is Complete (C#)](../../../../csharp/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md) and [Start Multiple Async Tasks and Process Them As They Complete (C#)](../../../../csharp/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)."},{"pos":[1550,1634],"content":"<ph id=\"ph1\">`WhenAll`</ph> returns a task that completes when all tasks in a collection are complete.","source":"`WhenAll` returns a task that completes when all tasks in a collection are complete."},{"pos":[1645,1886],"content":"For more information and an example that uses <ph id=\"ph1\">`WhenAll`</ph>, see <bpt id=\"p1\">[</bpt>How to: Extend the async Walkthrough by Using Task.WhenAll (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept>.","source":"For more information and an example that uses `WhenAll`, see [How to: Extend the async Walkthrough by Using Task.WhenAll (C#)](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)."},{"content":"This section includes the following examples.","pos":[1893,1938]},{"pos":[1948,2091],"content":"<bpt id=\"p1\">[</bpt>Cancel an Async Task or a List of Tasks (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)</ept>.","source":"[Cancel an Async Task or a List of Tasks (C#)](../../../../csharp/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md)."},{"pos":[2101,2247],"content":"<bpt id=\"p1\">[</bpt>Cancel Async Tasks after a Period of Time (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md)</ept>","source":"[Cancel Async Tasks after a Period of Time (C#)](../../../../csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md)"},{"pos":[2257,2421],"content":"<bpt id=\"p1\">[</bpt>Cancel Remaining Async Tasks after One Is Complete (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)</ept>","source":"[Cancel Remaining Async Tasks after One Is Complete (C#)](../../../../csharp/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md)"},{"pos":[2431,2615],"content":"<bpt id=\"p1\">[</bpt>Start Multiple Async Tasks and Process Them As They Complete (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)</ept>","source":"[Start Multiple Async Tasks and Process Them As They Complete (C#)](../../../../csharp/programming-guide/concepts/async/start-multiple-async-tasks-and-process-them-as-they-complete.md)"},{"pos":[2623,2760],"content":"[!NOTE]\n To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.","leadings":["","> "],"nodes":[{"content":"To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.","pos":[9,135]}]},{"content":"The projects create a UI that contains a button that starts the process and a button that cancels it, as the following image shows.","pos":[2767,2898]},{"content":"The buttons are named <ph id=\"ph1\">`startButton`</ph> and <ph id=\"ph2\">`cancelButton`</ph>.","pos":[2899,2954],"source":" The buttons are named `startButton` and `cancelButton`."},{"pos":[2961,3084],"content":"<bpt id=\"p1\">![</bpt>WPF window with Cancel button<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../csharp/programming-guide/concepts/async/media/cancellation.png \"</bpt>Cancellation<ept id=\"p2\">\")</ept>","source":"![WPF window with Cancel button](../../../../csharp/programming-guide/concepts/async/media/cancellation.png \"Cancellation\")"},{"pos":[3091,3265],"content":"You can download the complete Windows Presentation Foundation (WPF) projects from <bpt id=\"p1\">[</bpt>Async Sample: Fine Tuning Your Application<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=255046)</ept>.","source":"You can download the complete Windows Presentation Foundation (WPF) projects from [Async Sample: Fine Tuning Your Application](http://go.microsoft.com/fwlink/?LinkId=255046)."},{"pos":[3274,3282],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3286,3400],"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming with async and await (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/async/index.md)</ept>","source":"[Asynchronous Programming with async and await (C#)](../../../../csharp/programming-guide/concepts/async/index.md)"}]}