{"content":"---\ntitle: \"How to: Declare A Constant (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.constant\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Integer data type, declaring constants\"\n  - \"Single data type, declaring constants\"\n  - \"Const statement [Visual Basic], declaring constants\"\n  - \"procedures, declaration\"\n  - \"data types [Visual Basic], constants\"\n  - \"Long data type, declaring constants\"\n  - \"Visual Basic code, declaring variables and constants\"\n  - \"Double data type, declaring constants\"\n  - \"Boolean data type, declaring constants\"\n  - \"modules, declaring constants\"\n  - \"Byte data type, declaring constants\"\n  - \"constants, declaring\"\n  - \"Date data type, declaring constants\"\n  - \"String data type, declaring constants\"\n  - \"declaring constants, const keyword\"\n  - \"Currency data type, declaring constants and variants\"\n  - \"module-level constants and variables\"\n  - \"Object data type, declaring constants\"\nms.assetid: f901b4fa-481f-4621-822e-427060577ad1\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Declare A Constant (Visual Basic)\nYou use the `Const` statement to declare a constant and set its value. By declaring a constant, you assign a meaningful name to a value. Once a constant is declared, it cannot be modified or assigned a new value.  \n  \n You declare a constant within a procedure or in the declarations section of a module, class, or structure. Class or structure-level constants are `Private` by default, but may also be declared as `Public`, `Friend`, `Protected`, or `Protected Friend` for the appropriate level of code access.  \n  \n The constant must have a valid symbolic name (the rules are the same as those for creating variable names) and an expression composed of numeric or string constants and operators (but no function calls).  \n  \n[!INCLUDE[note_settings_general](../../../../csharp/language-reference/compiler-messages/includes/note_settings_general_md.md)]  \n  \n### To declare a constant  \n  \n-   Write a declaration that includes an access specifier, the `Const` keyword, and an expression, as in the following examples:  \n  \n     [!code-vb[VbEnumsTask#8](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-a-constant_1.vb)]  \n  \n     When [Option Infer](../../../../visual-basic/language-reference/statements/option-infer-statement.md) is `Off` and [Option Strict](../../../../visual-basic/language-reference/statements/option-strict-statement.md) is `On`, you must declare a constant explicitly by specifying a data type (`Boolean`, `Byte`, `Char`, `DateTime`, `Decimal`, `Double`, `Integer`, `Long`, `Short`, `Single`, or `String`).  \n  \n     When `Option Infer` is `On` or `Option Strict` is `Off`, you can declare a constant without specifying a data type with an `As` clause. The compiler determines the type of the constant from the type of the expression. For more information, see [Constant and Literal Data Types](constant-and-literal-data-types.md).  \n  \n### To declare a constant that has an explicitly stated data type  \n  \n-   Write a declaration that includes the `As` keyword and an explicit data type, as in the following examples:  \n  \n     [!code-vb[VbEnumsTask#9](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-a-constant_2.vb)]  \n  \n     You can declare multiple constants on a single line, although your code is more readable if you declare only a single constant per line. If you declare multiple constants on a single line, they must all have the same access level (`Public`, `Private`, `Friend`, `Protected`, or `Protected Friend`).  \n  \n### To declare multiple constants on a single line  \n  \n-   Separate the declarations with a comma and a space, as in the following example:  \n  \n    ```  \n    Public Const Four As Integer = 4, Five As Integer = 5, Six As Integer = 44  \n    ```  \n  \n## See Also  \n [Const Statement](../../../../visual-basic/language-reference/statements/const-statement.md)   \n [Constant and Literal Data Types](constant-and-literal-data-types.md)   \n [Constants Overview](constants-overview.md)\n [How to: Declare A Constant](how-to-declare-a-constant.md)\n [User-Defined Constants](user-defined-constants.md)\n [Constant and Literal Data Types](constant-and-literal-data-types.md)\n [How to: Group Related Constant Values Together](how-to-group-related-constant-values-together.md)\n [Enumerations Overview](enumerations-overview.md)\n [How to: Declare Enumerations](how-to-declare-enumerations.md)\n [How to: Refer to an Enumeration Member](how-to-refer-to-an-enumeration-member.md)\n [Enumerations and Name Qualification](enumerations-and-name-qualification.md)\n [How to: Iterate Through An Enumeration](how-to-iterate-through-an-enumeration.md)\n [How to: Determine the String Associated with an Enumeration Value](how-to-determine-the-string-associated-with-an-enumeration-value.md)\n [When to Use an Enumeration](when-to-use-an-enumeration.md)\n\n [Enumerations Overview](enumerations-overview.md)   \n [Constants Overview](constants-overview.md)   \n [How to: Declare an Enumeration](how-to-declare-enumerations.md)   \n [Enumerations and Name Qualification](enumerations-and-name-qualification.md)   \n [Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md)   \n [Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)\n","nodes":[{"pos":[4,1377],"nodes":[{"content":"How to: Declare A Constant (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,58],"content":"How to: Declare A Constant (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Declare A Constant (Visual Basic) | Microsoft Docs","pos":[0,58]}]}],"pos":[6,67],"yaml":true}],"content":"title: \"How to: Declare A Constant (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.constant\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Integer data type, declaring constants\"\n  - \"Single data type, declaring constants\"\n  - \"Const statement [Visual Basic], declaring constants\"\n  - \"procedures, declaration\"\n  - \"data types [Visual Basic], constants\"\n  - \"Long data type, declaring constants\"\n  - \"Visual Basic code, declaring variables and constants\"\n  - \"Double data type, declaring constants\"\n  - \"Boolean data type, declaring constants\"\n  - \"modules, declaring constants\"\n  - \"Byte data type, declaring constants\"\n  - \"constants, declaring\"\n  - \"Date data type, declaring constants\"\n  - \"String data type, declaring constants\"\n  - \"declaring constants, const keyword\"\n  - \"Currency data type, declaring constants and variants\"\n  - \"module-level constants and variables\"\n  - \"Object data type, declaring constants\"\nms.assetid: f901b4fa-481f-4621-822e-427060577ad1\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[1384,1425],"content":"How to: Declare A Constant (Visual Basic)","linkify":"How to: Declare A Constant (Visual Basic)","nodes":[{"content":"How to: Declare A Constant (Visual Basic)","pos":[0,41]}]},{"content":"You use the <ph id=\"ph1\">`Const`</ph> statement to declare a constant and set its value.","pos":[1426,1496],"source":"You use the `Const` statement to declare a constant and set its value."},{"content":"By declaring a constant, you assign a meaningful name to a value.","pos":[1497,1562]},{"content":"Once a constant is declared, it cannot be modified or assigned a new value.","pos":[1563,1638]},{"content":"You declare a constant within a procedure or in the declarations section of a module, class, or structure.","pos":[1645,1751]},{"content":"Class or structure-level constants are <ph id=\"ph1\">`Private`</ph> by default, but may also be declared as <ph id=\"ph2\">`Public`</ph>, <ph id=\"ph3\">`Friend`</ph>, <ph id=\"ph4\">`Protected`</ph>, or <ph id=\"ph5\">`Protected Friend`</ph> for the appropriate level of code access.","pos":[1752,1937],"source":" Class or structure-level constants are `Private` by default, but may also be declared as `Public`, `Friend`, `Protected`, or `Protected Friend` for the appropriate level of code access."},{"content":"The constant must have a valid symbolic name (the rules are the same as those for creating variable names) and an expression composed of numeric or string constants and operators (but no function calls).","pos":[1944,2147]},{"pos":[2290,2311],"content":"To declare a constant","linkify":"To declare a constant","nodes":[{"content":"To declare a constant","pos":[0,21]}]},{"pos":[2321,2445],"content":"Write a declaration that includes an access specifier, the <ph id=\"ph1\">`Const`</ph> keyword, and an expression, as in the following examples:","source":"Write a declaration that includes an access specifier, the `Const` keyword, and an expression, as in the following examples:"},{"pos":[2456,2592],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbEnumsTask#8<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-a-constant_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbEnumsTask#8](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-a-constant_1.vb)]"},{"pos":[2603,3003],"content":"When <bpt id=\"p1\">[</bpt>Option Infer<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> is <ph id=\"ph1\">`Off`</ph> and <bpt id=\"p2\">[</bpt>Option Strict<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept> is <ph id=\"ph2\">`On`</ph>, you must declare a constant explicitly by specifying a data type (<ph id=\"ph3\">`Boolean`</ph>, <ph id=\"ph4\">`Byte`</ph>, <ph id=\"ph5\">`Char`</ph>, <ph id=\"ph6\">`DateTime`</ph>, <ph id=\"ph7\">`Decimal`</ph>, <ph id=\"ph8\">`Double`</ph>, <ph id=\"ph9\">`Integer`</ph>, <ph id=\"ph10\">`Long`</ph>, <ph id=\"ph11\">`Short`</ph>, <ph id=\"ph12\">`Single`</ph>, or <ph id=\"ph13\">`String`</ph>).","source":"When [Option Infer](../../../../visual-basic/language-reference/statements/option-infer-statement.md) is `Off` and [Option Strict](../../../../visual-basic/language-reference/statements/option-strict-statement.md) is `On`, you must declare a constant explicitly by specifying a data type (`Boolean`, `Byte`, `Char`, `DateTime`, `Decimal`, `Double`, `Integer`, `Long`, `Short`, `Single`, or `String`)."},{"content":"When <ph id=\"ph1\">`Option Infer`</ph> is <ph id=\"ph2\">`On`</ph> or <ph id=\"ph3\">`Option Strict`</ph> is <ph id=\"ph4\">`Off`</ph>, you can declare a constant without specifying a data type with an <ph id=\"ph5\">`As`</ph> clause.","pos":[3014,3149],"source":"When `Option Infer` is `On` or `Option Strict` is `Off`, you can declare a constant without specifying a data type with an `As` clause."},{"content":"The compiler determines the type of the constant from the type of the expression.","pos":[3150,3231]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Constant and Literal Data Types<ept id=\"p1\">](constant-and-literal-data-types.md)</ept>.","pos":[3232,3328],"source":" For more information, see [Constant and Literal Data Types](constant-and-literal-data-types.md)."},{"pos":[3338,3399],"content":"To declare a constant that has an explicitly stated data type","linkify":"To declare a constant that has an explicitly stated data type","nodes":[{"content":"To declare a constant that has an explicitly stated data type","pos":[0,61]}]},{"pos":[3409,3516],"content":"Write a declaration that includes the <ph id=\"ph1\">`As`</ph> keyword and an explicit data type, as in the following examples:","source":"Write a declaration that includes the `As` keyword and an explicit data type, as in the following examples:"},{"pos":[3527,3663],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbEnumsTask#9<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-a-constant_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbEnumsTask#9](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/how-to-declare-a-constant_2.vb)]"},{"content":"You can declare multiple constants on a single line, although your code is more readable if you declare only a single constant per line.","pos":[3674,3810]},{"content":"If you declare multiple constants on a single line, they must all have the same access level (<ph id=\"ph1\">`Public`</ph>, <ph id=\"ph2\">`Private`</ph>, <ph id=\"ph3\">`Friend`</ph>, <ph id=\"ph4\">`Protected`</ph>, or <ph id=\"ph5\">`Protected Friend`</ph>).","pos":[3811,3972],"source":" If you declare multiple constants on a single line, they must all have the same access level (`Public`, `Private`, `Friend`, `Protected`, or `Protected Friend`)."},{"pos":[3982,4028],"content":"To declare multiple constants on a single line","linkify":"To declare multiple constants on a single line","nodes":[{"content":"To declare multiple constants on a single line","pos":[0,46]}]},{"content":"Separate the declarations with a comma and a space, as in the following example:","pos":[4038,4118]},{"pos":[4231,4239],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Const Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/const-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[4243,4336],"source":"[Const Statement](../../../../visual-basic/language-reference/statements/const-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Constant and Literal Data Types<ept id=\"p1\">](constant-and-literal-data-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[4340,4410],"source":"[Constant and Literal Data Types](constant-and-literal-data-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Constants Overview<ept id=\"p1\">](constants-overview.md)</ept> <bpt id=\"p2\">[</bpt>How to: Declare A Constant<ept id=\"p2\">](how-to-declare-a-constant.md)</ept> <bpt id=\"p3\">[</bpt>User-Defined Constants<ept id=\"p3\">](user-defined-constants.md)</ept> <bpt id=\"p4\">[</bpt>Constant and Literal Data Types<ept id=\"p4\">](constant-and-literal-data-types.md)</ept> <bpt id=\"p5\">[</bpt>How to: Group Related Constant Values Together<ept id=\"p5\">](how-to-group-related-constant-values-together.md)</ept> <bpt id=\"p6\">[</bpt>Enumerations Overview<ept id=\"p6\">](enumerations-overview.md)</ept> <bpt id=\"p7\">[</bpt>How to: Declare Enumerations<ept id=\"p7\">](how-to-declare-enumerations.md)</ept> <bpt id=\"p8\">[</bpt>How to: Refer to an Enumeration Member<ept id=\"p8\">](how-to-refer-to-an-enumeration-member.md)</ept> <bpt id=\"p9\">[</bpt>Enumerations and Name Qualification<ept id=\"p9\">](enumerations-and-name-qualification.md)</ept> <bpt id=\"p10\">[</bpt>How to: Iterate Through An Enumeration<ept id=\"p10\">](how-to-iterate-through-an-enumeration.md)</ept> <bpt id=\"p11\">[</bpt>How to: Determine the String Associated with an Enumeration Value<ept id=\"p11\">](how-to-determine-the-string-associated-with-an-enumeration-value.md)</ept> <bpt id=\"p12\">[</bpt>When to Use an Enumeration<ept id=\"p12\">](when-to-use-an-enumeration.md)</ept>","pos":[4414,5302],"source":"[Constants Overview](constants-overview.md)\n [How to: Declare A Constant](how-to-declare-a-constant.md)\n [User-Defined Constants](user-defined-constants.md)\n [Constant and Literal Data Types](constant-and-literal-data-types.md)\n [How to: Group Related Constant Values Together](how-to-group-related-constant-values-together.md)\n [Enumerations Overview](enumerations-overview.md)\n [How to: Declare Enumerations](how-to-declare-enumerations.md)\n [How to: Refer to an Enumeration Member](how-to-refer-to-an-enumeration-member.md)\n [Enumerations and Name Qualification](enumerations-and-name-qualification.md)\n [How to: Iterate Through An Enumeration](how-to-iterate-through-an-enumeration.md)\n [How to: Determine the String Associated with an Enumeration Value](how-to-determine-the-string-associated-with-an-enumeration-value.md)\n [When to Use an Enumeration](when-to-use-an-enumeration.md)"},{"content":"<bpt id=\"p1\">[</bpt>Enumerations Overview<ept id=\"p1\">](enumerations-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[5305,5355],"source":"[Enumerations Overview](enumerations-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Constants Overview<ept id=\"p1\">](constants-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[5359,5403],"source":"[Constants Overview](constants-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Declare an Enumeration<ept id=\"p1\">](how-to-declare-enumerations.md)</ept><ph id=\"ph1\"> </ph>","pos":[5407,5472],"source":"[How to: Declare an Enumeration](how-to-declare-enumerations.md) "},{"content":"<bpt id=\"p1\">[</bpt>Enumerations and Name Qualification<ept id=\"p1\">](enumerations-and-name-qualification.md)</ept><ph id=\"ph1\"> </ph>","pos":[5476,5554],"source":"[Enumerations and Name Qualification](enumerations-and-name-qualification.md) "},{"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[5558,5667],"source":"[Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Constants and Enumerations<ept id=\"p1\">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept>","pos":[5671,5774],"source":"[Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)"}]}