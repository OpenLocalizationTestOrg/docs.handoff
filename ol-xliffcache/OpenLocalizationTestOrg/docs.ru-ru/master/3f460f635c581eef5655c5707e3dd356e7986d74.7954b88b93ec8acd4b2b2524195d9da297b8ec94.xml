{"content":"---\ntitle: \"How to: Query for Characters in a String (LINQ) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 499ebbe0-746c-4235-9dba-ce722c12b50e\n---\n# How to: Query for Characters in a String (LINQ) (Visual Basic)\nBecause the <xref:System.String> class implements the generic <xref:System.Collections.Generic.IEnumerable%601> interface, any string can be queried as a sequence of characters. However, this is not a common use of LINQ. For complex pattern matching operations, use the <xref:System.Text.RegularExpressions.Regex> class.  \n  \n## Example  \n The following example queries a string to determine the number of numeric digits it contains. Note that the query is \"reused\" after it is executed the first time. This is possible because the query itself does not store any actual results.  \n  \n```vb  \nClass QueryAString  \n  \n    Shared Sub Main()  \n  \n        ' A string is an IEnumerable data source.  \n        Dim aString As String = \"ABCDE99F-J74-12-89A\"  \n  \n        ' Select only those characters that are numbers  \n        Dim stringQuery = From ch In aString   \n                          Where Char.IsDigit(ch)   \n                          Select ch  \n        ' Execute the query  \n        For Each c As Char In stringQuery  \n            Console.Write(c & \" \")  \n        Next  \n  \n        ' Call the Count method on the existing query.  \n        Dim count As Integer = stringQuery.Count()  \n        Console.WriteLine(System.Environment.NewLine & \"Count = \" & count)  \n  \n        ' Select all characters before the first '-'  \n        Dim stringQuery2 = aString.TakeWhile(Function(c) c <> \"-\")  \n  \n        ' Execute the second query  \n        For Each ch In stringQuery2  \n            Console.Write(ch)  \n        Next  \n  \n        Console.WriteLine(System.Environment.NewLine & \"Press any key to exit\")  \n        Console.ReadKey()  \n    End Sub  \nEnd Class  \n' Output:  \n' 9 9 7 4 1 2 8 9   \n' Count = 8  \n' ABCDE99F  \n```  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace.  \n  \n## See also\n\n- [LINQ and Strings (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)\n- [How to: Combine LINQ Queries with Regular Expressions (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-combine-linq-queries-with-regular-expressions.md)\n","nodes":[{"pos":[4,144],"embed":true,"restype":"x-metadata","content":"title: \"How to: Query for Characters in a String (LINQ) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 499ebbe0-746c-4235-9dba-ce722c12b50e","nodes":[{"content":"How to: Query for Characters in a String (LINQ) (Visual Basic)","nodes":[{"pos":[0,62],"content":"How to: Query for Characters in a String (LINQ) (Visual Basic)","nodes":[{"content":"How to: Query for Characters in a String (LINQ) (Visual Basic)","pos":[0,62]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[151,213],"content":"How to: Query for Characters in a String (LINQ) (Visual Basic)","linkify":"How to: Query for Characters in a String (LINQ) (Visual Basic)","nodes":[{"content":"How to: Query for Characters in a String (LINQ) (Visual Basic)","pos":[0,62]}]},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class implements the generic <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, any string can be queried as a sequence of characters.","pos":[214,391],"source":"Because the <xref:System.String> class implements the generic <xref:System.Collections.Generic.IEnumerable%601> interface, any string can be queried as a sequence of characters."},{"content":"However, this is not a common use of LINQ.","pos":[392,434]},{"content":"For complex pattern matching operations, use the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class.","pos":[435,534],"source":" For complex pattern matching operations, use the <xref:System.Text.RegularExpressions.Regex> class."},{"pos":[543,550],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example queries a string to determine the number of numeric digits it contains.","pos":[554,647]},{"content":"Note that the query is \"reused\" after it is executed the first time.","pos":[648,716]},{"content":"This is possible because the query itself does not store any actual results.","pos":[717,793]},{"pos":[1944,1962],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[1966,2129],"content":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <ph id=\"ph1\">`Imports`</ph> statement for the System.Linq namespace.","source":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace."},{"pos":[2138,2146],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2150,2261],"content":"<bpt id=\"p1\">[</bpt>LINQ and Strings (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)</ept>","source":"[LINQ and Strings (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)"},{"pos":[2264,2448],"content":"<bpt id=\"p1\">[</bpt>How to: Combine LINQ Queries with Regular Expressions (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/how-to-combine-linq-queries-with-regular-expressions.md)</ept>","source":"[How to: Combine LINQ Queries with Regular Expressions (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/how-to-combine-linq-queries-with-regular-expressions.md)"}]}