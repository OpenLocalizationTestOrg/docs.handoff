{"content":"---\ntitle: \"+= Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 10/29/2018\nf1_keywords: \n  - \"+=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"+= operator [C#]\"\n  - \"addition assignment operator (+=) [C#]\"\n  - \"event subscription [C#]\"\nms.assetid: 9cdf97e6-331d-492b-85e1-3ec3171484e9\n---\n# += Operator (C# Reference)\n\nThe addition assignment operator.\n\nAn expression using the `+=` operator, such as\n\n```csharp\nx += y\n```\n\nis equivalent to\n\n```csharp\nx = x + y\n```\n\nexcept that `x` is only evaluated once.\n  \nFor numeric types, the [addition operator](addition-operator.md) `+` computes the sum of its operands. If one or both operands is of type [string](../keywords/string.md), it concatenates the string representations of its operands. For delegate types, the `+` operator returns a new delegate instance that is combination of its operands.\n\nYou also use the `+=` operator to specify an event handler method when you subscribe to an [event](../keywords/event.md). For more information, see [How to: Subscribe to and Unsubscribe from Events](../../programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md).\n\nThe following example demonstrates the usage of the `+=` operator:\n\n[!code-csharp-interactive[+= examples](~/samples/snippets/csharp/language-reference/operators/AdditionExamples.cs#AddAndAssign)]\n\n## Operator overloadability\n\nIf a user-defined type [overloads](../keywords/operator.md) the [addition operator](addition-operator.md) `+`, the addition assignment operator `+=` is implicitly overloaded. A user-defined type cannot explicitly overload the addition assignment operator.\n\n## C# language specification\n\nFor more information, see the [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment) and [Event assignment](~/_csharplang/spec/expressions.md#event-assignment) sections of the [C# language specification](../language-specification/index.md).\n  \n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [Events](../../programming-guide/events/index.md)\n- [Delegates](../../programming-guide/delegates/index.md)\n","nodes":[{"pos":[4,286],"embed":true,"restype":"x-metadata","content":"title: \"+= Operator - C# Reference\"\nms.custom: seodec18\n\nms.date: 10/29/2018\nf1_keywords: \n  - \"+=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"+= operator [C#]\"\n  - \"addition assignment operator (+=) [C#]\"\n  - \"event subscription [C#]\"\nms.assetid: 9cdf97e6-331d-492b-85e1-3ec3171484e9","nodes":[{"content":"+= Operator - C# Reference","nodes":[{"pos":[0,26],"content":"+= Operator - C# Reference","nodes":[{"content":"+= Operator - C# Reference","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[293,319],"content":"+= Operator (C# Reference)","linkify":"+= Operator (C# Reference)","nodes":[{"content":"+= Operator (C# Reference)","pos":[0,26]}]},{"content":"The addition assignment operator.","pos":[321,354]},{"pos":[356,402],"content":"An expression using the <ph id=\"ph1\">`+=`</ph> operator, such as","source":"An expression using the `+=` operator, such as"},{"content":"is equivalent to","pos":[426,442]},{"pos":[469,508],"content":"except that <ph id=\"ph1\">`x`</ph> is only evaluated once.","source":"except that `x` is only evaluated once."},{"content":"For numeric types, the <bpt id=\"p1\">[</bpt>addition operator<ept id=\"p1\">](addition-operator.md)</ept> <ph id=\"ph1\">`+`</ph> computes the sum of its operands.","pos":[512,614],"source":"For numeric types, the [addition operator](addition-operator.md) `+` computes the sum of its operands."},{"content":"If one or both operands is of type <bpt id=\"p1\">[</bpt>string<ept id=\"p1\">](../keywords/string.md)</ept>, it concatenates the string representations of its operands.","pos":[615,742],"source":" If one or both operands is of type [string](../keywords/string.md), it concatenates the string representations of its operands."},{"content":"For delegate types, the <ph id=\"ph1\">`+`</ph> operator returns a new delegate instance that is combination of its operands.","pos":[743,848],"source":" For delegate types, the `+` operator returns a new delegate instance that is combination of its operands."},{"content":"You also use the <ph id=\"ph1\">`+=`</ph> operator to specify an event handler method when you subscribe to an <bpt id=\"p1\">[</bpt>event<ept id=\"p1\">](../keywords/event.md)</ept>.","pos":[850,971],"source":"You also use the `+=` operator to specify an event handler method when you subscribe to an [event](../keywords/event.md)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Subscribe to and Unsubscribe from Events<ept id=\"p1\">](../../programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md)</ept>.","pos":[972,1132],"source":" For more information, see [How to: Subscribe to and Unsubscribe from Events](../../programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events.md)."},{"pos":[1134,1200],"content":"The following example demonstrates the usage of the <ph id=\"ph1\">`+=`</ph> operator:","source":"The following example demonstrates the usage of the `+=` operator:"},{"pos":[1335,1359],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"If a user-defined type <bpt id=\"p1\">[</bpt>overloads<ept id=\"p1\">](../keywords/operator.md)</ept> the <bpt id=\"p2\">[</bpt>addition operator<ept id=\"p2\">](addition-operator.md)</ept> <ph id=\"ph1\">`+`</ph>, the addition assignment operator <ph id=\"ph2\">`+=`</ph> is implicitly overloaded.","pos":[1361,1535],"source":"If a user-defined type [overloads](../keywords/operator.md) the [addition operator](addition-operator.md) `+`, the addition assignment operator `+=` is implicitly overloaded."},{"content":"A user-defined type cannot explicitly overload the addition assignment operator.","pos":[1536,1616]},{"pos":[1621,1646],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1648,1910],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Compound assignment<ept id=\"p1\">](~/_csharplang/spec/expressions.md#compound-assignment)</ept> and <bpt id=\"p2\">[</bpt>Event assignment<ept id=\"p2\">](~/_csharplang/spec/expressions.md#event-assignment)</ept> sections of the <bpt id=\"p3\">[</bpt>C# language specification<ept id=\"p3\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment) and [Event assignment](~/_csharplang/spec/expressions.md#event-assignment) sections of the [C# language specification](../language-specification/index.md)."},{"pos":[1917,1925],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1929,1956],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1959,2015],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2018,2042],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[2045,2094],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../programming-guide/events/index.md)</ept>","source":"[Events](../../programming-guide/events/index.md)"},{"pos":[2097,2152],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../programming-guide/delegates/index.md)</ept>","source":"[Delegates](../../programming-guide/delegates/index.md)"}]}