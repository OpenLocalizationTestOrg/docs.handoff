<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="the-managed-thread-pool.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f921f40bbc5a7b72341c3fb778dd69fcc7b918c9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\the-managed-thread-pool.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a46edbd6cc2ddb3a257adc306386ce8886d7d45</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89ec54d83b73b0037cc912305d1d925cb8048968</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>The managed thread pool</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about the .NET thread pool that provides background worker threads</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The managed thread pool</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool?displayProperty=nameWithType&gt;</ph> class provides your application with a pool of worker threads that are managed by the system, allowing you to concentrate on application tasks rather than thread management.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you have short tasks that require background processing, the managed thread pool is an easy way to take advantage of multiple threads.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use of the thread pool is significantly easier in Framework 4 and later, since you can create <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects that perform asynchronous tasks on thread pool threads.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.NET uses thread pool threads for many purposes, including <bpt id="p1">[</bpt>Task Parallel Library (TPL)<ept id="p1">](../parallel-programming/task-parallel-library-tpl.md)</ept> operations, asynchronous I/O completion, <bpt id="p2">[</bpt>timer<ept id="p2">](timers.md)</ept> callbacks, registered wait operations, asynchronous method calls using delegates, and <ph id="ph1">&lt;xref:System.Net?displayProperty=nameWithType&gt;</ph> socket connections.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Thread pool characteristics</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Thread pool threads are <bpt id="p1">[</bpt>background<ept id="p1">](foreground-and-background-threads.md)</ept> threads.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each thread uses the default stack size, runs at the default priority, and is in the multithreaded apartment.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Once a thread in the thread pool completes its task, it's returned to a queue of waiting threads.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>From this moment it can be reused.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This reuse enables applications to avoid the cost of creating a new thread for each task.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There is only one thread pool per process.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Exceptions in thread pool threads</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Unhandled exceptions in thread pool threads terminate the process.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There are three exceptions to this rule:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException?displayProperty=nameWithType&gt;</ph> is thrown in a thread pool thread because <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType&gt;</ph> was called.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.AppDomainUnloadedException?displayProperty=nameWithType&gt;</ph> is thrown in a thread pool thread because the application domain is being unloaded.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The common language runtime or a host process terminates the thread.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Exceptions in Managed Threads<ept id="p1">](exceptions-in-managed-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Maximum number of thread pool threads</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The number of operations that can be queued to the thread pool is limited only by available memory.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, the thread pool limits the number of threads that can be active in the process simultaneously.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If all thread pool threads are busy, additional work items are queued until threads to execute them become available.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Beginning with the .NET Framework 4, the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A process can call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A?displayProperty=nameWithType&gt;</ph> method to determine the number of threads.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can control the maximum number of threads by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Code that hosts the common language runtime can set the size using the <bpt id="p1">[</bpt><ph id="ph1">`ICorThreadpool::CorSetMaxThreads`</ph><ept id="p1">](../../framework/unmanaged-api/hosting/icorthreadpool-corsetmaxthreads-method.md)</ept> method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Thread pool minimums</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches a specified minimum for each category.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A?displayProperty=nameWithType&gt;</ph> method to obtain these minimum values.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When a minimum is reached, the thread pool can create additional threads or wait until some tasks complete.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Beginning with the .NET Framework 4, the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A?displayProperty=nameWithType&gt;</ph> method to increase the minimum number of idle threads.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In most cases the thread pool will perform better with its own algorithm for allocating threads.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Using the thread pool</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Beginning with the .NET Framework 4, the easiest way to use the thread pool is to use the <bpt id="p1">[</bpt>Task Parallel Library (TPL)<ept id="p1">](../parallel-programming/task-parallel-library-tpl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>By default, TPL types like <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> use thread pool threads to run tasks.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can also use the thread pool by calling <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType&gt;</ph> from managed code (or <bpt id="p1">[</bpt><ph id="ph2">`ICorThreadpool::CorQueueUserWorkItem`</ph><ept id="p1">](../../framework/unmanaged-api/hosting/icorthreadpool-corqueueuserworkitem-method.md)</ept> from unmanaged code) and passing a <ph id="ph3">&lt;xref:System.Threading.WaitCallback?displayProperty=nameWithType&gt;</ph> delegate representing the method that performs the task.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Another way to use the thread pool is to queue work items that are related to a wait operation by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType&gt;</ph> method and passing a <ph id="ph2">&lt;xref:System.Threading.WaitHandle?displayProperty=nameWithType&gt;</ph> that, when signaled or when timed out, calls the method represented by the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback?displayProperty=nameWithType&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Thread pool threads are used to invoke callback methods.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For the examples, check the referenced API pages.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Skipping security checks</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The thread pool also provides the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Use these methods only when you are certain that the caller's stack is irrelevant to any security checks performed during the execution of the queued task.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType&gt;</ph> both capture the caller's stack, which is merged into the stack of the thread pool thread when the thread begins to execute a task.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If a security check is required, the entire stack must be checked.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Although the check provides safety, it also has a performance cost.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When not to use thread pool threads</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>There are several scenarios in which it's appropriate to create and manage your own threads instead of using thread pool threads:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You require a foreground thread.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You require a thread to have a particular priority.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You have tasks that cause the thread to block for long periods of time.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The thread pool has a maximum number of threads, so a large number of blocked thread pool threads might prevent tasks from starting.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You need to place threads into a single-threaded apartment.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads are in the multithreaded apartment.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You need to have a stable identity associated with the thread, or to dedicate a thread to a task.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Task Parallel Library (TPL)<ept id="p1">](../parallel-programming/task-parallel-library-tpl.md)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Return a Value from a Task<ept id="p1">](../parallel-programming/how-to-return-a-value-from-a-task.md)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading Objects and Features<ept id="p1">](threading-objects-and-features.md)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threads and Threading<ept id="p1">](threads-and-threading.md)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous File I/O<ept id="p1">](../io/asynchronous-file-i-o.md)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Timers<ept id="p1">](timers.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>