<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae45795c12071b35fa469d1814b8199e8f81a0bf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\controls\ui-automation-of-a-wpf-custom-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9371104037acf86858df10373900beec6b473f5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e112d1ef8d8b46d9163f8ceb63a04289c97c8fa8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>UI Automation of a WPF Custom Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>UI Automation of a WPF Custom Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_uiautomation](../../../../includes/tlasharptla-uiautomation-md.md)]</ph> provides a single, generalized interface that automation clients can use to examine or operate the user interfaces of a variety of platforms and frameworks.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> enables both quality-assurance (test) code and accessibility applications such as screen readers to examine user-interface elements and simulate user interaction with them from other code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> across all platforms, see Accessibility.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic describes how to implement a server-side UI Automation provider for a custom control that runs in a WPF application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>WPF supports <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> through a tree of peer automation objects that parallels the tree of user interface elements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Test code and applications that provide accessibility features can use automation peer objects directly (for in-process code) or through the generalized interface provided by <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Automation Peer Classes</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>WPF controls support <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> through a tree of peer classes that derive from <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By convention, peer class names begin with the control class name and end with "AutomationPeer".</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.ButtonAutomationPeer&gt;</ph> is the peer class for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The peer classes are roughly equivalent to <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> control types but are specific to <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> elements.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Automation code that accesses WPF applications through the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> interface does not use automation peers directly, but automation code in the same process space can use automation peers directly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Built-in Automation Peer Classes</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Elements implement an automation peer class if they accept interface activity from the user, or if they contain information needed by users of screen-reader applications.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Not all WPF visual elements have automation peers.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Examples of classes that implement automation peers are <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.Label&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Examples of classes that do not implement automation peers are classes that derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Decorator&gt;</ph>, such as <ph id="ph2">&lt;xref:System.Windows.Controls.Border&gt;</ph>, and classes based on <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, such as <ph id="ph4">&lt;xref:System.Windows.Controls.Grid&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The base <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> class does not have a corresponding peer class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you need a peer class to correspond to a custom control that derives from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>, you should derive the custom peer class from <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.FrameworkElementAutomationPeer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Security Considerations for Derived Peers</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Automation peers must run in a partial-trust environment.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Code in the UIAutomationClient assembly is not configured to run in a partial-trust environment, and automation peer code should not reference that assembly.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Instead, you should use the classes in the UIAutomationTypes assembly.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, you should use the <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElementIdentifiers&gt;</ph> class from the UIAutomationTypes assembly, which corresponds to the <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> class in the UIAutomationClient assembly.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is safe to reference the UIAutomationTypes assembly in automation peer code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Peer Navigation</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>After locating an automation peer, in-process code can navigate the peer tree by calling the object's <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetChildren%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetParent%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Navigation among <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> elements within a control is supported by the peer's implementation of the <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The UI Automation system calls this method to build up a tree of subelements contained within a control; for example, list items in a list box.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetChildrenCore%2A?displayProperty=fullName&gt;</ph> method traverses the visual tree of elements to build the tree of automation peers.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Custom controls override this method to expose children elements to automation clients, returning the automation peers of elements that convey information or allow user interaction.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Customizations in a Derived Peer</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>All classes that derive from <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> contain the protected virtual method <ph id="ph3">&lt;xref:System.Windows.UIElement.OnCreateAutomationPeer%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>WPF calls <ph id="ph1">&lt;xref:System.Windows.UIElement.OnCreateAutomationPeer%2A&gt;</ph> to get the automation peer object for each control.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Automation code can use the peer to get information about a control’s characteristics and features and to simulate interactive use.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A custom control that supports automation must override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnCreateAutomationPeer%2A&gt;</ph> and return an instance of a class that derives from <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, if a custom control derives from the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> class, then the object returned by <ph id="ph2">&lt;xref:System.Windows.UIElement.OnCreateAutomationPeer%2A&gt;</ph> should derive from <ph id="ph3">&lt;xref:System.Windows.Automation.Peers.ButtonBaseAutomationPeer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When implementing a custom control, you must override the "Core" methods from the base automation peer class that describe behavior unique and specific to your custom control.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Override OnCreateAutomationPeer</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Override the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnCreateAutomationPeer%2A&gt;</ph> method for your custom control so that it returns your provider object, which must derive directly or indirectly from <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Override GetPattern</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Automation peers simplify some implementation aspects of server-side <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> providers, but custom control automation peers must still handle pattern interfaces.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Like non-WPF providers, peers support control patterns by providing implementations of interfaces in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider?displayProperty=fullName&gt;</ph> namespace, such as <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.IInvokeProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The control pattern interfaces can be implemented by the peer itself or by another object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The peer's implementation of <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A&gt;</ph> returns the object that supports the specified pattern.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> code calls the <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A&gt;</ph> method and specifies a <ph id="ph3">&lt;xref:System.Windows.Automation.Peers.PatternInterface&gt;</ph> enumeration value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Your override of <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A&gt;</ph> should return the object that implements the specified pattern.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If your control does not have a custom implementation of a pattern, you can call the base type's implementation of <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A&gt;</ph> to retrieve either its implementation or null if the pattern is not supported for this control type.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, a custom NumericUpDown control can be set to a value within a range, so its <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> peer would implement the <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.IRangeValueProvider&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following example shows how the peer's <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A&gt;</ph> method is overridden to respond to a <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.PatternInterface?displayProperty=fullName&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CustomControlNumericUpDown#GetPattern<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#getpattern)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CustomControlNumericUpDown#GetPattern<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#getpattern)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A&gt;</ph> method can also specify a subelement as a pattern provider.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following code shows how <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> transfers scroll pattern handling to the peer of its internal <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To specify a subelement for pattern handling, this code gets the subelement object, creates a peer by using the <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.CreatePeerForElement%2A&gt;</ph> method, sets the <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A&gt;</ph> property of the new peer to the current peer, and returns the new peer.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A&gt;</ph> on a subelement prevents the subelement from appearing in the automation peer tree and designates all events raised by the subelement as originating from the control specified in <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control does not appear in the automation tree, and scrolling events that it generates appear to originate from the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Override "Core" Methods</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Automation code gets information about your control by calling public methods of the peer class.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To provide information about your control, override each method whose name ends with "Core" when your control implementation differs from that of that provided by the base automation peer class.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>At a minimum, your control must implement the <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetClassNameCore%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore%2A&gt;</ph> methods, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CustomControlNumericUpDown#CoreOverrides<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#coreoverrides)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CustomControlNumericUpDown#CoreOverrides<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#coreoverrides)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Your implementation of <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore%2A&gt;</ph> describes your control by returning a <ph id="ph2">&lt;xref:System.Windows.Automation.ControlType&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Although you can return <ph id="ph1">&lt;xref:System.Windows.Automation.ControlType.Custom?displayProperty=fullName&gt;</ph>, you should return one of the more specific control types if it accurately describes your control.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A return value of <ph id="ph1">&lt;xref:System.Windows.Automation.ControlType.Custom?displayProperty=fullName&gt;</ph> requires extra work for the provider to implement <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph>, and <ph id="ph3">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> client products are unable to anticipate the control structure, keyboard interaction, and possible control patterns.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Implement the <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.IsContentElementCore%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A&gt;</ph> methods to indicate whether your control contains data content or fulfills an interactive role in the user interface (or both).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>By default, both methods return <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>These settings improve the usability of automation tools such as screen readers, which may use these methods to filter the automation tree.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A&gt;</ph> method transfers pattern handling to a subelement peer, the subelement peer's <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A&gt;</ph> method can return false to hide the subelement peer from the automation tree.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, scrolling in a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> is handled by a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>, and the automation peer for <ph id="ph3">&lt;xref:System.Windows.Automation.Peers.PatternInterface?displayProperty=fullName&gt;</ph> is returned by the <ph id="ph4">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A&gt;</ph> method of the <ph id="ph5">&lt;xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer&gt;</ph> that is associated with the <ph id="ph6">&lt;xref:System.Windows.Automation.Peers.ListBoxAutomationPeer&gt;</ph>.Therefore, the <ph id="ph7">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A&gt;</ph> method of the <ph id="ph8">&lt;xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer&gt;</ph> returns <ph id="ph9">`false`</ph>, so that the <ph id="ph10">&lt;xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer&gt;</ph> does not appear in the automation tree.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Your automation peer should provide appropriate default values for your control.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Note that XAML that references your control can override your peer implementations of core methods by including <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationProperties&gt;</ph> attributes.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, the following XAML creates a button that has two customized <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> properties.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Implement Pattern Providers</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The interfaces implemented by a custom provider are explicitly declared if the owning element derives directly from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, the following code declares a peer for a <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> that implements a range value.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the owning control derives from a specific type of control such as <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.RangeBase&gt;</ph>, the peer can be derived from an equivalent derived peer class.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In this case, the peer would derive from <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.RangeBaseAutomationPeer&gt;</ph>, which supplies a base implementation of <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.IRangeValueProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following code shows the declaration of such a peer.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For an example implementation, see <bpt id="p1">[</bpt>NumericUpDown Custom Control with Theme and UI Automation Support Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160025)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Raise Events</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Automation clients can subscribe to automation events.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Custom controls must report changes to control state by calling the <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.RaiseAutomationEvent%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Similarly, when a property value changes, call the <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following code shows how to get the peer object from within the control code and call a method to raise an event.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>As an optimization, the code determines if there are any listeners for this event type.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Raising the event only when there are listeners avoids unnecessary overhead and helps the control remain responsive.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CustomControlNumericUpDown#RaiseEventFromControl<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#raiseeventfromcontrol)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>CustomControlNumericUpDown#RaiseEventFromControl<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#raiseeventfromcontrol)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](../../../../docs/framework/ui-automation/ui-automation-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>NumericUpDown Custom Control with Theme and UI Automation Support Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160025)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Server-Side UI Automation Provider Implementation<ept id="p1">](../../../../docs/framework/ui-automation/server-side-ui-automation-provider-implementation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>