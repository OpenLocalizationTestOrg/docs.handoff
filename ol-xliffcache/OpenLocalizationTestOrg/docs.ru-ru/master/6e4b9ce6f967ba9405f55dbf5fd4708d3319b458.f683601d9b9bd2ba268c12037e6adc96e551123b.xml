{"content":"---\ntitle: \"Collection Activities in WF\"\nms.date: \"03/30/2017\"\nms.assetid: 2680c3e2-9902-4968-b98d-cab776103dbe\n---\n# Collection Activities in WF\nCollection activities are used to work with collection objects in a workflow. [!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)] has system-provided activities for adding and removing items from a collection, testing for the existence of an item in a collection, and clearing a collection. `ExistsInCollection` and `RemoveFromCollection` have an <xref:System.Activities.OutArgument%601> of type <xref:System.Boolean>, which indicates the result.  \n  \n> [!IMPORTANT]\n>  If a collection activity is executed before setting the underlying collection object, an <xref:System.InvalidOperationException> is thrown and the activity faults.  \n  \n## Collection activities  \n  \n|||  \n|-|-|  \n|<xref:System.Activities.Statements.AddToCollection%601>|Adds an item to a specified collection.|  \n|<xref:System.Activities.Statements.ClearCollection%601>|Clears all items from a specified collection.|  \n|<xref:System.Activities.Statements.ExistsInCollection%601>|Returns `true` if an item exists in a collection.|  \n|<xref:System.Activities.Statements.RemoveFromCollection%601>|Removes an item from a specified collection and returns `true` if the item was successfully removed.|  \n  \n## Using collection activities  \n The following code example demonstrates how to interact with a collection declared as a workflow variable. The collection used is a <xref:System.Collections.Generic.List%601> of <xref:System.String> objects named `fruitList`.  \n  \n```csharp  \nVariable<ICollection<string>> fruitList = new Variable<ICollection<string>>  \n{  \n    Default = new VisualBasicValue<ICollection<string>>(\"New List(Of String) From {\\\"Apple\\\", \\\"Orange\\\"}\"),  \n    Name = \"FruitList\"  \n};  \n  \nVariable<bool> result = new Variable<bool>  \n{  \n    Name = \"Result\"  \n};  \n  \nActivity wf = new Sequence  \n{  \n    Variables = { fruitList, result },  \n  \n    Activities =   \n    {  \n        new If  \n        {  \n            Condition = new ExistsInCollection<string>  \n            {  \n                Collection = fruitList,  \n                Item = \"Pear\"  \n            },  \n            Then = new AddToCollection<string>  \n            {  \n                Collection = fruitList,  \n                Item = \"Pear\"  \n            },  \n            Else = new RemoveFromCollection<string>  \n            {  \n                Collection = fruitList,  \n                Item = \"Apple\"  \n            }  \n        },  \n  \n        new RemoveFromCollection<string>  \n        {  \n            Collection = fruitList,  \n            Item = \"Apple\",  \n            Result = result  \n        },  \n        new If  \n        {  \n            Condition = result,  \n            Then = new ClearCollection<string>  \n            {  \n                Collection = fruitList,  \n            }  \n        }  \n    }  \n};  \n```  \n  \n```xaml  \n<Sequence  \n   xmlns=\"http://schemas.microsoft.com/netfx/2009/xaml/activities\"  \n   xmlns:scg=\"clr-namespace:System.Collections.Generic;assembly=mscorlib\"  \n   xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">  \n  <Sequence.Variables>  \n    <x:Reference>__ReferenceID0</x:Reference>  \n    <x:Reference>__ReferenceID1</x:Reference>  \n  </Sequence.Variables>  \n  <If>  \n    <If.Condition>  \n      <InArgument  \n         x:TypeArguments=\"x:Boolean\">  \n        <ExistsInCollection  \n           x:TypeArguments=\"x:String\"  \n           Item=\"Pear\">  \n          <ExistsInCollection.Result>  \n            <OutArgument  \n               x:TypeArguments=\"x:Boolean\" />  \n          </ExistsInCollection.Result>  \n          <InArgument  \n             x:TypeArguments=\"scg:ICollection(x:String)\">  \n            <VariableValue  \n               x:TypeArguments=\"scg:ICollection(x:String)\">  \n              <VariableValue.Result>  \n                <OutArgument  \n                   x:TypeArguments=\"scg:ICollection(x:String)\" />  \n              </VariableValue.Result>  \n              <VariableValue.Variable>  \n                <Variable  \n                   x:TypeArguments=\"scg:ICollection(x:String)\"  \n                   x:Name=\"__ReferenceID0\"  \n                   Default=\"[New List(Of String) From {\"Apple\", \"Orange\"}]\"  \n                   Name=\"FruitList\" />  \n              </VariableValue.Variable>  \n            </VariableValue>  \n          </InArgument>  \n        </ExistsInCollection>  \n      </InArgument>  \n    </If.Condition>  \n    <If.Then>  \n      <AddToCollection  \n         x:TypeArguments=\"x:String\"  \n         Item=\"Pear\">  \n        <InArgument  \n           x:TypeArguments=\"scg:ICollection(x:String)\">  \n          <VariableValue  \n             x:TypeArguments=\"scg:ICollection(x:String)\"  \n             Variable=\"{x:Reference __ReferenceID0}\">  \n            <VariableValue.Result>  \n              <OutArgument  \n                 x:TypeArguments=\"scg:ICollection(x:String)\" />  \n            </VariableValue.Result>  \n          </VariableValue>  \n        </InArgument>  \n      </AddToCollection>  \n    </If.Then>  \n    <If.Else>  \n      <RemoveFromCollection  \n         x:TypeArguments=\"x:String\"  \n         Item=\"Apple\"  \n         Result=\"{x:Null}\">  \n        <InArgument  \n           x:TypeArguments=\"scg:ICollection(x:String)\">  \n          <VariableValue  \n             x:TypeArguments=\"scg:ICollection(x:String)\"  \n             Variable=\"{x:Reference __ReferenceID0}\">  \n            <VariableValue.Result>  \n              <OutArgument  \n                 x:TypeArguments=\"scg:ICollection(x:String)\" />  \n            </VariableValue.Result>  \n          </VariableValue>  \n        </InArgument>  \n      </RemoveFromCollection>  \n    </If.Else>  \n  </If>  \n  <RemoveFromCollection  \n     x:TypeArguments=\"x:String\"  \n     Item=\"Apple\">  \n    <RemoveFromCollection.Result>  \n      <OutArgument  \n         x:TypeArguments=\"x:Boolean\">  \n        <VariableReference  \n           x:TypeArguments=\"x:Boolean\">  \n          <VariableReference.Result>  \n            <OutArgument  \n               x:TypeArguments=\"Location(x:Boolean)\" />  \n          </VariableReference.Result>  \n          <VariableReference.Variable>  \n            <Variable  \n               x:TypeArguments=\"x:Boolean\"  \n               x:Name=\"__ReferenceID1\"  \n               Name=\"Result\" />  \n          </VariableReference.Variable>  \n        </VariableReference>  \n      </OutArgument>  \n    </RemoveFromCollection.Result>  \n    <InArgument  \n       x:TypeArguments=\"scg:ICollection(x:String)\">  \n      <VariableValue  \n         x:TypeArguments=\"scg:ICollection(x:String)\"  \n         Variable=\"{x:Reference __ReferenceID0}\">  \n        <VariableValue.Result>  \n          <OutArgument  \n             x:TypeArguments=\"scg:ICollection(x:String)\" />  \n        </VariableValue.Result>  \n      </VariableValue>  \n    </InArgument>  \n  </RemoveFromCollection>  \n  <If>  \n    <If.Condition>  \n      <InArgument  \n         x:TypeArguments=\"x:Boolean\">  \n        <VariableValue  \n           x:TypeArguments=\"x:Boolean\"  \n           Variable=\"{x:Reference __ReferenceID1}\">  \n          <VariableValue.Result>  \n            <OutArgument  \n               x:TypeArguments=\"x:Boolean\" />  \n          </VariableValue.Result>  \n        </VariableValue>  \n      </InArgument>  \n    </If.Condition>  \n    <If.Then>  \n      <ClearCollection  \n         x:TypeArguments=\"x:String\">  \n        <InArgument  \n           x:TypeArguments=\"scg:ICollection(x:String)\">  \n          <VariableValue  \n             x:TypeArguments=\"scg:ICollection(x:String)\"  \n             Variable=\"{x:Reference __ReferenceID0}\">  \n            <VariableValue.Result>  \n              <OutArgument  \n                 x:TypeArguments=\"scg:ICollection(x:String)\" />  \n            </VariableValue.Result>  \n          </VariableValue>  \n        </InArgument>  \n      </ClearCollection>  \n    </If.Then>  \n  </If>  \n</Sequence>  \n```  \n  \n The above code samples can also be created using <xref:Microsoft.CSharp.Activities.CSharpValue%601> instead of <xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601>  \n  \n```csharp\nVariable<ICollection<string>> fruitList = new Variable<ICollection<string>>  \n{  \n    Default = new CSharpValue<ICollection<string>>(\"new List<String> From {\\\"Apple\\\", \\\"Orange\\\"};\"),  \n    Name = \"FruitList\"  \n};  \n  \nVariable<bool> result = new Variable<bool>  \n{  \n    Name = \"Result\"  \n};  \n  \nActivity wf = new Sequence  \n{  \n    Variables = { fruitList, result },  \n  \n    Activities =   \n    {  \n        new If  \n        {  \n            Condition = new ExistsInCollection<string>  \n            {  \n                Collection = fruitList,  \n                Item = \"Pear\"  \n            },  \n            Then = new AddToCollection<string>  \n            {  \n                Collection = fruitList,  \n                Item = \"Pear\"  \n            },  \n            Else = new RemoveFromCollection<string>  \n            {  \n                Collection = fruitList,  \n                Item = \"Apple\"  \n            }  \n        },  \n  \n        new RemoveFromCollection<string>  \n        {  \n            Collection = fruitList,  \n            Item = \"Apple\",  \n            Result = result  \n        },  \n        new If  \n        {  \n            Condition = result,  \n            Then = new ClearCollection<string>  \n            {  \n                Collection = fruitList,  \n            }  \n        }  \n    }  \n};  \n```  \n  \n```xml  \n<Sequence  \n   xmlns=\"http://schemas.microsoft.com/netfx/2009/xaml/activities\"  \n   xmlns:scg=\"clr-namespace:System.Collections.Generic;assembly=mscorlib\"  \n   xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">  \n  <Sequence.Variables>  \n    <x:Reference>__ReferenceID0</x:Reference>  \n    <x:Reference>__ReferenceID1</x:Reference>  \n  </Sequence.Variables>  \n  <If>  \n    <If.Condition>  \n      <InArgument  \n         x:TypeArguments=\"x:Boolean\">  \n        <ExistsInCollection  \n           x:TypeArguments=\"x:String\"  \n           Item=\"Pear\">  \n          <ExistsInCollection.Result>  \n            <OutArgument  \n               x:TypeArguments=\"x:Boolean\" />  \n          </ExistsInCollection.Result>  \n          <InArgument  \n             x:TypeArguments=\"scg:ICollection(x:String)\">  \n            <VariableValue  \n               x:TypeArguments=\"scg:ICollection(x:String)\">  \n              <VariableValue.Result>  \n                <OutArgument  \n                   x:TypeArguments=\"scg:ICollection(x:String)\" />  \n              </VariableValue.Result>  \n              <VariableValue.Variable>  \n                <Variable  \n                   x:TypeArguments=\"scg:ICollection(x:String)\"  \n                   x:Name=\"__ReferenceID0\"  \n                   Default=\"[new List<String> From {\"Apple\", \"Orange\"};]\"  \n                   Name=\"FruitList\" />  \n              </VariableValue.Variable>  \n            </VariableValue>  \n          </InArgument>  \n        </ExistsInCollection>  \n      </InArgument>  \n    </If.Condition>  \n    <If.Then>  \n      <AddToCollection  \n         x:TypeArguments=\"x:String\"  \n         Item=\"Pear\">  \n        <InArgument  \n           x:TypeArguments=\"scg:ICollection(x:String)\">  \n          <VariableValue  \n             x:TypeArguments=\"scg:ICollection(x:String)\"  \n             Variable=\"{x:Reference __ReferenceID0}\">  \n            <VariableValue.Result>  \n              <OutArgument  \n                 x:TypeArguments=\"scg:ICollection(x:String)\" />  \n            </VariableValue.Result>  \n          </VariableValue>  \n        </InArgument>  \n      </AddToCollection>  \n    </If.Then>  \n    <If.Else>  \n      <RemoveFromCollection  \n         x:TypeArguments=\"x:String\"  \n         Item=\"Apple\"  \n         Result=\"{x:Null}\">  \n        <InArgument  \n           x:TypeArguments=\"scg:ICollection(x:String)\">  \n          <VariableValue  \n             x:TypeArguments=\"scg:ICollection(x:String)\"  \n             Variable=\"{x:Reference __ReferenceID0}\">  \n            <VariableValue.Result>  \n              <OutArgument  \n                 x:TypeArguments=\"scg:ICollection(x:String)\" />  \n            </VariableValue.Result>  \n          </VariableValue>  \n        </InArgument>  \n      </RemoveFromCollection>  \n    </If.Else>  \n  </If>  \n  <RemoveFromCollection  \n     x:TypeArguments=\"x:String\"  \n     Item=\"Apple\">  \n    <RemoveFromCollection.Result>  \n      <OutArgument  \n         x:TypeArguments=\"x:Boolean\">  \n        <VariableReference  \n           x:TypeArguments=\"x:Boolean\">  \n          <VariableReference.Result>  \n            <OutArgument  \n               x:TypeArguments=\"Location(x:Boolean)\" />  \n          </VariableReference.Result>  \n          <VariableReference.Variable>  \n            <Variable  \n               x:TypeArguments=\"x:Boolean\"  \n               x:Name=\"__ReferenceID1\"  \n               Name=\"Result\" />  \n          </VariableReference.Variable>  \n        </VariableReference>  \n      </OutArgument>  \n    </RemoveFromCollection.Result>  \n    <InArgument  \n       x:TypeArguments=\"scg:ICollection(x:String)\">  \n      <VariableValue  \n         x:TypeArguments=\"scg:ICollection(x:String)\"  \n         Variable=\"{x:Reference __ReferenceID0}\">  \n        <VariableValue.Result>  \n          <OutArgument  \n             x:TypeArguments=\"scg:ICollection(x:String)\" />  \n        </VariableValue.Result>  \n      </VariableValue>  \n    </InArgument>  \n  </RemoveFromCollection>  \n  <If>  \n    <If.Condition>  \n      <InArgument  \n         x:TypeArguments=\"x:Boolean\">  \n        <VariableValue  \n           x:TypeArguments=\"x:Boolean\"  \n           Variable=\"{x:Reference __ReferenceID1}\">  \n          <VariableValue.Result>  \n            <OutArgument  \n               x:TypeArguments=\"x:Boolean\" />  \n          </VariableValue.Result>  \n        </VariableValue>  \n      </InArgument>  \n    </If.Condition>  \n    <If.Then>  \n      <ClearCollection  \n         x:TypeArguments=\"x:String\">  \n        <InArgument  \n           x:TypeArguments=\"scg:ICollection(x:String)\">  \n          <VariableValue  \n             x:TypeArguments=\"scg:ICollection(x:String)\"  \n             Variable=\"{x:Reference __ReferenceID0}\">  \n            <VariableValue.Result>  \n              <OutArgument  \n                 x:TypeArguments=\"scg:ICollection(x:String)\" />  \n            </VariableValue.Result>  \n          </VariableValue>  \n        </InArgument>  \n      </ClearCollection>  \n    </If.Then>  \n  </If>  \n</Sequence>  \n```  \n  \n## See also\n\n- [Authoring Workflows, Activities, and Expressions Using Imperative Code](authoring-workflows-activities-and-expressions-using-imperative-code.md)\n","nodes":[{"pos":[4,111],"embed":true,"restype":"x-metadata","content":"title: \"Collection Activities in WF\"\nms.date: \"03/30/2017\"\nms.assetid: 2680c3e2-9902-4968-b98d-cab776103dbe","nodes":[{"content":"Collection Activities in WF","nodes":[{"pos":[0,27],"content":"Collection Activities in WF","nodes":[{"content":"Collection Activities in WF","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[118,145],"content":"Collection Activities in WF","linkify":"Collection Activities in WF","nodes":[{"content":"Collection Activities in WF","pos":[0,27]}]},{"content":"Collection activities are used to work with collection objects in a workflow.","pos":[146,223]},{"content":"<ph id=\"ph1\">[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)]</ph> has system-provided activities for adding and removing items from a collection, testing for the existence of an item in a collection, and clearing a collection.","pos":[224,459],"source":"[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)] has system-provided activities for adding and removing items from a collection, testing for the existence of an item in a collection, and clearing a collection."},{"content":"<ph id=\"ph1\">`ExistsInCollection`</ph> and <ph id=\"ph2\">`RemoveFromCollection`</ph> have an <ph id=\"ph3\">&lt;xref:System.Activities.OutArgument%601&gt;</ph> of type <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph>, which indicates the result.","pos":[460,615],"source":"`ExistsInCollection` and `RemoveFromCollection` have an <xref:System.Activities.OutArgument%601> of type <xref:System.Boolean>, which indicates the result."},{"pos":[623,802],"content":"[!IMPORTANT]\n If a collection activity is executed before setting the underlying collection object, an <xref:System.InvalidOperationException> is thrown and the activity faults.","leadings":["","> "],"nodes":[{"content":"If a collection activity is executed before setting the underlying collection object, an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown and the activity faults.","pos":[14,177],"source":"If a collection activity is executed before setting the underlying collection object, an <xref:System.InvalidOperationException> is thrown and the activity faults."}]},{"pos":[811,832],"content":"Collection activities","linkify":"Collection activities","nodes":[{"content":"Collection activities","pos":[0,21]}]},{"content":"Adds an item to a specified collection.","pos":[909,948]},{"content":"Clears all items from a specified collection.","pos":[1009,1054]},{"pos":[1118,1167],"content":"Returns <ph id=\"ph1\">`true`</ph> if an item exists in a collection.","source":"Returns `true` if an item exists in a collection."},{"pos":[1233,1333],"content":"Removes an item from a specified collection and returns <ph id=\"ph1\">`true`</ph> if the item was successfully removed.","source":"Removes an item from a specified collection and returns `true` if the item was successfully removed."},{"pos":[1343,1370],"content":"Using collection activities","linkify":"Using collection activities","nodes":[{"content":"Using collection activities","pos":[0,27]}]},{"content":"The following code example demonstrates how to interact with a collection declared as a workflow variable.","pos":[1374,1480]},{"content":"The collection used is a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> objects named <ph id=\"ph3\">`fruitList`</ph>.","pos":[1481,1599],"source":" The collection used is a <xref:System.Collections.Generic.List%601> of <xref:System.String> objects named `fruitList`."},{"pos":[7906,8077],"content":"The above code samples can also be created using <ph id=\"ph1\">&lt;xref:Microsoft.CSharp.Activities.CSharpValue%601&gt;</ph> instead of <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph>","source":"The above code samples can also be created using <xref:Microsoft.CSharp.Activities.CSharpValue%601> instead of <xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601>"},{"pos":[14374,14382],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[14386,14531],"content":"<bpt id=\"p1\">[</bpt>Authoring Workflows, Activities, and Expressions Using Imperative Code<ept id=\"p1\">](authoring-workflows-activities-and-expressions-using-imperative-code.md)</ept>","source":"[Authoring Workflows, Activities, and Expressions Using Imperative Code](authoring-workflows-activities-and-expressions-using-imperative-code.md)"}]}