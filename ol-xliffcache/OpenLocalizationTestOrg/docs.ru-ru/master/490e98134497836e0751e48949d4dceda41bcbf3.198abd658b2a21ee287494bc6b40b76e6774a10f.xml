{"content":"---\ntitle: \"How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 76b9b2a5-b3ba-49da-ba74-82100e1bd21c\n---\n# How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)\nThis topic shows how to get the value of elements. There are two main ways to do this. One way is to cast an <xref:System.Xml.Linq.XElement> or an <xref:System.Xml.Linq.XAttribute> to the desired type. The explicit conversion operator then converts the contents of the element or attribute to the specified type and assigns it to your variable. Alternatively, you can use the <xref:System.Xml.Linq.XElement.Value%2A?displayProperty=nameWithType> property or the <xref:System.Xml.Linq.XAttribute.Value%2A?displayProperty=nameWithType> property.  \n  \n With Visual Basic, the best approach is to use the <xref:System.Xml.Linq.XElement.Value%2A?displayProperty=nameWithType> property.  \n  \n## Example  \n To retrieve the value of an element, you just cast the <xref:System.Xml.Linq.XElement> object to your desired type. You can always cast an element to a string, as follows:  \n  \n```vb  \nDim e As XElement = <StringElement>abcde</StringElement>  \nConsole.WriteLine(e)  \nConsole.WriteLine(\"Value of e:\" & e.Value)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<StringElement>abcde</StringElement>  \nValue of e:abcde  \n```  \n  \n## Example  \n You can also cast elements to types other than string. For example, if you have an element that contains an integer, you can cast it to `int`, as shown in the following code:  \n  \n```vb  \nDim e As XElement = <Age>44</Age>  \nConsole.WriteLine(e)  \nConsole.WriteLine(\"Value of e:\" & CInt(e))  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Age>44</Age>  \nValue of e:44  \n```  \n  \n [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides explicit cast operators for the following data types: `string`, `bool`, `bool?`, `int`, `int?`, `uint`, `uint?`, `long`, `long?`, `ulong`, `ulong?`, `float`, `float?`, `double`, `double?`, `decimal`, `decimal?`, `DateTime`, `DateTime?`, `TimeSpan`, `TimeSpan?`, `GUID`, and `GUID?`.  \n  \n [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides the same cast operators for <xref:System.Xml.Linq.XAttribute> objects.  \n  \n## Example  \n You can use the <xref:System.Xml.Linq.XElement.Value%2A> property to retrieve the contents of an element:  \n  \n```vb  \nDim e As XElement = <StringElement>abcde</StringElement>  \nConsole.WriteLine(e)  \nConsole.WriteLine(\"Value of e:\" & e.Value)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<StringElement>abcde</StringElement>  \nValue of e:abcde  \n```  \n  \n## Example  \n Sometimes you try to retrieve the value of an element even though you are not sure it exists. In this case, when you assign the casted element to a nullable type (either `string` or one of the nullable types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]), if the element does not exist the assigned variable is just set to `Nothing`. The following code shows that when the element might or might not exist, it is easier to use casting than to use the <xref:System.Xml.Linq.XElement.Value%2A> property.  \n  \n```vb  \nDim root As XElement = <Root>  \n                           <Child1>child 1 content</Child1>  \n                           <Child2>2</Child2>  \n                       </Root>  \n  \n' The following assignments show why it is easier to use  \n' casting when the element might or might not exist.  \n  \nDim c1 As String = CStr(root.Element(\"Child1\"))  \nConsole.WriteLine(\"c1:{0}\", IIf(c1 Is Nothing, \"element does not exist\", c1))  \n  \nDim c2 As Nullable(Of Integer) = CType(root.Element(\"Child2\"), Nullable(Of Integer))  \nConsole.WriteLine(\"c2:{0}\", IIf(Not (c2.HasValue), \"element does not exist\", c2.ToString()))  \n  \nDim c3 As String = CStr(root.Element(\"Child3\"))  \nConsole.WriteLine(\"c3:{0}\", IIf(c3 Is Nothing, \"element does not exist\", c3))  \n  \nDim c4 As Nullable(Of Integer) = CType(root.Element(\"Child4\"), Nullable(Of Integer))  \nConsole.WriteLine(\"c4:{0}\", IIf(Not (c4.HasValue), \"element does not exist\", c4.ToString()))  \n  \nConsole.WriteLine()  \n  \n' The following assignments show the required code when using  \n' the Value property when the attribute might or might not exist.  \n' Notice that this is more difficult than the casting approach.  \n  \nDim e1 As XElement = root.Element(\"Child1\")  \nDim v1 As String  \nIf (e1 Is Nothing) Then  \n    v1 = Nothing  \nElse  \n    v1 = e1.Value  \nEnd If  \nConsole.WriteLine(\"v1:{0}\", IIf(v1 Is Nothing, \"element does not exist\", v1))  \n  \nDim e2 As XElement = root.Element(\"Child2\")  \nDim v2 As Nullable(Of Integer)  \nIf (e2 Is Nothing) Then  \n    v2 = Nothing  \nElse  \n    v2 = e2.Value  \nEnd If  \nConsole.WriteLine(\"v2:{0}\", IIf(Not (v2.HasValue), \"element does not exist\", v2))  \n  \nDim e3 As XElement = root.Element(\"Child3\")  \nDim v3 As String  \nIf (e3 Is Nothing) Then  \n    v3 = Nothing  \nElse  \n    v3 = e3.Value  \nEnd If  \nConsole.WriteLine(\"v3:{0}\", IIf(v3 Is Nothing, \"element does not exist\", v3))  \n  \nDim e4 As XElement = root.Element(\"Child4\")  \nDim v4 As Nullable(Of Integer)  \nIf (e4 Is Nothing) Then  \n    v4 = Nothing  \nElse  \n    v4 = e4.Value  \nEnd If  \nConsole.WriteLine(\"v4:{0}\", IIf(Not (v4.HasValue), \"element does not exist\", v4))  \n```  \n  \n This code produces the following output:  \n  \n```  \nc1:child 1 content  \nc2:2  \nc3:element does not exist  \nc4:element does not exist  \n  \nv1:child 1 content  \nv2:2  \nv3:element does not exist  \nv4:element does not exist  \n```  \n  \n In general, you can write simpler code when using casting to retrieve the contents of elements and attributes.  \n  \n## See also\n\n- [LINQ to XML Axes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)\n","nodes":[{"pos":[4,151],"embed":true,"restype":"x-metadata","content":"title: \"How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 76b9b2a5-b3ba-49da-ba74-82100e1bd21c","nodes":[{"content":"How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)","nodes":[{"pos":[0,69],"content":"How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)","pos":[0,69]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[158,227],"content":"How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)","linkify":"How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Retrieve the Value of an Element (LINQ to XML) (Visual Basic)","pos":[0,69]}]},{"content":"This topic shows how to get the value of elements.","pos":[228,278]},{"content":"There are two main ways to do this.","pos":[279,314]},{"content":"One way is to cast an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> or an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> to the desired type.","pos":[315,429],"source":" One way is to cast an <xref:System.Xml.Linq.XElement> or an <xref:System.Xml.Linq.XAttribute> to the desired type."},{"content":"The explicit conversion operator then converts the contents of the element or attribute to the specified type and assigns it to your variable.","pos":[430,572]},{"content":"Alternatively, you can use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Value%2A?displayProperty=nameWithType&gt;</ph> property or the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute.Value%2A?displayProperty=nameWithType&gt;</ph> property.","pos":[573,771],"source":" Alternatively, you can use the <xref:System.Xml.Linq.XElement.Value%2A?displayProperty=nameWithType> property or the <xref:System.Xml.Linq.XAttribute.Value%2A?displayProperty=nameWithType> property."},{"pos":[778,908],"content":"With Visual Basic, the best approach is to use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Value%2A?displayProperty=nameWithType&gt;</ph> property.","source":"With Visual Basic, the best approach is to use the <xref:System.Xml.Linq.XElement.Value%2A?displayProperty=nameWithType> property."},{"pos":[917,924],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"To retrieve the value of an element, you just cast the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> object to your desired type.","pos":[928,1043],"source":"To retrieve the value of an element, you just cast the <xref:System.Xml.Linq.XElement> object to your desired type."},{"content":"You can always cast an element to a string, as follows:","pos":[1044,1099]},{"content":"This example produces the following output:","pos":[1250,1293]},{"pos":[1378,1385],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"You can also cast elements to types other than string.","pos":[1389,1443]},{"content":"For example, if you have an element that contains an integer, you can cast it to <ph id=\"ph1\">`int`</ph>, as shown in the following code:","pos":[1444,1563],"source":" For example, if you have an element that contains an integer, you can cast it to `int`, as shown in the following code:"},{"content":"This example produces the following output:","pos":[1691,1734]},{"pos":[1791,2136],"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> provides explicit cast operators for the following data types: <ph id=\"ph2\">`string`</ph>, <ph id=\"ph3\">`bool`</ph>, <ph id=\"ph4\">`bool?`</ph>, <ph id=\"ph5\">`int`</ph>, <ph id=\"ph6\">`int?`</ph>, <ph id=\"ph7\">`uint`</ph>, <ph id=\"ph8\">`uint?`</ph>, <ph id=\"ph9\">`long`</ph>, <ph id=\"ph10\">`long?`</ph>, <ph id=\"ph11\">`ulong`</ph>, <ph id=\"ph12\">`ulong?`</ph>, <ph id=\"ph13\">`float`</ph>, <ph id=\"ph14\">`float?`</ph>, <ph id=\"ph15\">`double`</ph>, <ph id=\"ph16\">`double?`</ph>, <ph id=\"ph17\">`decimal`</ph>, <ph id=\"ph18\">`decimal?`</ph>, <ph id=\"ph19\">`DateTime`</ph>, <ph id=\"ph20\">`DateTime?`</ph>, <ph id=\"ph21\">`TimeSpan`</ph>, <ph id=\"ph22\">`TimeSpan?`</ph>, <ph id=\"ph23\">`GUID`</ph>, and <ph id=\"ph24\">`GUID?`</ph>.","source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides explicit cast operators for the following data types: `string`, `bool`, `bool?`, `int`, `int?`, `uint`, `uint?`, `long`, `long?`, `ulong`, `ulong?`, `float`, `float?`, `double`, `double?`, `decimal`, `decimal?`, `DateTime`, `DateTime?`, `TimeSpan`, `TimeSpan?`, `GUID`, and `GUID?`."},{"pos":[2143,2276],"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> provides the same cast operators for <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects.","source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides the same cast operators for <xref:System.Xml.Linq.XAttribute> objects."},{"pos":[2285,2292],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2296,2401],"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Value%2A&gt;</ph> property to retrieve the contents of an element:","source":"You can use the <xref:System.Xml.Linq.XElement.Value%2A> property to retrieve the contents of an element:"},{"content":"This example produces the following output:","pos":[2552,2595]},{"pos":[2680,2687],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Sometimes you try to retrieve the value of an element even though you are not sure it exists.","pos":[2691,2784]},{"content":"In this case, when you assign the casted element to a nullable type (either <ph id=\"ph1\">`string`</ph> or one of the nullable types in the <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>), if the element does not exist the assigned variable is just set to <ph id=\"ph3\">`Nothing`</ph>.","pos":[2785,3039],"source":" In this case, when you assign the casted element to a nullable type (either `string` or one of the nullable types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]), if the element does not exist the assigned variable is just set to `Nothing`."},{"content":"The following code shows that when the element might or might not exist, it is easier to use casting than to use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Value%2A&gt;</ph> property.","pos":[3040,3207],"source":" The following code shows that when the element might or might not exist, it is easier to use casting than to use the <xref:System.Xml.Linq.XElement.Value%2A> property."},{"content":"This code produces the following output:","pos":[5337,5377]},{"content":"In general, you can write simpler code when using casting to retrieve the contents of elements and attributes.","pos":[5570,5680]},{"pos":[5689,5697],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5701,5812],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML Axes (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept>","source":"[LINQ to XML Axes (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-axes.md)"}]}