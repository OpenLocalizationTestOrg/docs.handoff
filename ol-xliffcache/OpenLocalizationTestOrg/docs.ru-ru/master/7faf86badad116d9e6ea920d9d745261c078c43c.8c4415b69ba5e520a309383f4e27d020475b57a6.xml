{"content":"---\ntitle: \"Serializing to an XmlReader (Invoking XSLT) (C#)\"\nms.date: 07/20/2015\nms.assetid: 4cc3ee03-ef4c-429b-a408-fedd10b728cd\n---\n# Serializing to an XmlReader (Invoking XSLT) (C#)\nWhen you use the <xref:System.Xml?displayProperty=nameWithType> interoperability capabilities of [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], you can use <xref:System.Xml.Linq.XNode.CreateReader%2A> to create an <xref:System.Xml.XmlReader>. The module that reads from this <xref:System.Xml.XmlReader> reads the nodes from the XML tree and processes them accordingly.  \n  \n## Invoking an XSLT Transformation  \n One possible use for this method is when invoking an XSLT transformation. You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and then create an <xref:System.Xml.XmlWriter> to write into the new document. Then, you can invoke the XSLT transformation, passing in <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter>. After the transformation successfully completes, the new XML tree is populated with the results of the transformation.  \n  \n```csharp  \nstring xslMarkup = @\"<?xml version='1.0'?>  \n<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  \n    <xsl:template match='/Parent'>  \n        <Root>  \n            <C1>  \n            <xsl:value-of select='Child1'/>  \n            </C1>  \n            <C2>  \n            <xsl:value-of select='Child2'/>  \n            </C2>  \n        </Root>  \n    </xsl:template>  \n</xsl:stylesheet>\";  \n  \nXDocument xmlTree = new XDocument(  \n    new XElement(\"Parent\",  \n        new XElement(\"Child1\", \"Child1 data\"),  \n        new XElement(\"Child2\", \"Child2 data\")  \n    )  \n);  \n  \nXDocument newTree = new XDocument();  \nusing (XmlWriter writer = newTree.CreateWriter()) {  \n    // Load the style sheet.  \n    XslCompiledTransform xslt = new XslCompiledTransform();  \n    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  \n  \n    // Execute the transformation and output the results to a writer.  \n    xslt.Transform(xmlTree.CreateReader(), writer);  \n}  \n  \nConsole.WriteLine(newTree);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root>  \n  <C1>Child1 data</C1>  \n  <C2>Child2 data</C2>  \n</Root>  \n```  \n  \n## See also\n\n- [Serializing XML Trees (C#)](../../../../csharp/programming-guide/concepts/linq/serializing-xml-trees.md)\n","nodes":[{"pos":[4,130],"embed":true,"restype":"x-metadata","content":"title: \"Serializing to an XmlReader (Invoking XSLT) (C#)\"\nms.date: 07/20/2015\nms.assetid: 4cc3ee03-ef4c-429b-a408-fedd10b728cd","nodes":[{"content":"Serializing to an XmlReader (Invoking XSLT) (C#)","nodes":[{"pos":[0,48],"content":"Serializing to an XmlReader (Invoking XSLT) (C#)","nodes":[{"content":"Serializing to an XmlReader (Invoking XSLT) (C#)","pos":[0,48]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[137,185],"content":"Serializing to an XmlReader (Invoking XSLT) (C#)","linkify":"Serializing to an XmlReader (Invoking XSLT) (C#)","nodes":[{"content":"Serializing to an XmlReader (Invoking XSLT) (C#)","pos":[0,48]}]},{"content":"When you use the <ph id=\"ph1\">&lt;xref:System.Xml?displayProperty=nameWithType&gt;</ph> interoperability capabilities of <ph id=\"ph2\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph>, you can use <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XNode.CreateReader%2A&gt;</ph> to create an <ph id=\"ph4\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[186,436],"source":"When you use the <xref:System.Xml?displayProperty=nameWithType> interoperability capabilities of [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], you can use <xref:System.Xml.Linq.XNode.CreateReader%2A> to create an <xref:System.Xml.XmlReader>."},{"content":"The module that reads from this <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> reads the nodes from the XML tree and processes them accordingly.","pos":[437,562],"source":" The module that reads from this <xref:System.Xml.XmlReader> reads the nodes from the XML tree and processes them accordingly."},{"pos":[571,602],"content":"Invoking an XSLT Transformation","linkify":"Invoking an XSLT Transformation","nodes":[{"content":"Invoking an XSLT Transformation","pos":[0,31]}]},{"content":"One possible use for this method is when invoking an XSLT transformation.","pos":[606,679]},{"content":"You can create an XML tree, create an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> from the XML tree, create a new document, and then create an <ph id=\"ph2\">&lt;xref:System.Xml.XmlWriter&gt;</ph> to write into the new document.","pos":[680,866],"source":" You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and then create an <xref:System.Xml.XmlWriter> to write into the new document."},{"content":"Then, you can invoke the XSLT transformation, passing in <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.XmlWriter&gt;</ph>.","pos":[867,984],"source":" Then, you can invoke the XSLT transformation, passing in <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter>."},{"content":"After the transformation successfully completes, the new XML tree is populated with the results of the transformation.","pos":[985,1103]},{"content":"This example produces the following output:","pos":[2142,2185]},{"pos":[2281,2289],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2293,2398],"content":"<bpt id=\"p1\">[</bpt>Serializing XML Trees (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/serializing-xml-trees.md)</ept>","source":"[Serializing XML Trees (C#)](../../../../csharp/programming-guide/concepts/linq/serializing-xml-trees.md)"}]}