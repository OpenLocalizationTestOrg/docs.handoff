<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="unit-testing-best-practices.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b543ab2e200e8169a251db8ddfb1493c5583ed69</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\unit-testing-best-practices.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb3ff3f77945f61d762a887b9a94931fd5017107</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bc29c73c440deb8d65d2514e728aa19e27f8c13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Best practices for writing unit tests</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn best practices for writing unit tests that drive code quality and resilience for .NET Core and .NET Standard projects.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Unit testing best practices with .NET Core and .NET Standard</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are numerous benefits to writing unit tests; they help with regression, provide documentation, and facilitate good design.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, hard to read and brittle unit tests can wreak havoc on your code base.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article describes some best practices regarding unit test design for your .NET Core and .NET Standard projects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In this guide, you'll learn some best practices when writing unit tests to keep your tests resilient and easy to understand.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>John Reese<ept id="p1">](https://reese.dev)</ept> with special thanks to <bpt id="p2">[</bpt>Roy Osherove<ept id="p2">](http://osherove.com/)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Why unit test?</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Less time performing functional tests</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Functional tests are expensive.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>They typically involve opening up the application and performing a series of steps that you (or someone else), must follow in order to validate the expected behavior.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These steps may not always be known to the tester, which means they will have to reach out to someone more knowledgeable in the area in order to carry out the test.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Testing itself could take seconds for trivial changes, or minutes for larger changes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Lastly, this process must be repeated for every change that you make in the system.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Unit tests, on the other hand, take milliseconds, can be run at the press of a button and do not necessarily require any knowledge of the system at large.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Whether or not the test passes or fails is up to the test runner, not the individual.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Protection against regression</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Regression defects are defects that are introduced when a change is made to the application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It is common for testers to not only test their new feature but also features that existed beforehand in order to verify that previously implemented features still function as expected.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>With unit testing, it's possible to rerun your entire suite of tests after every build or even after you change a line of code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Giving you confidence that your new code does not break existing functionality.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Executable documentation</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It may not always be obvious what a particular method does or how it behaves given a certain input.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You may ask yourself: How does this method behave if I pass it a blank string?</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Null?</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you have a suite of well-named unit tests, each test should be able to clearly explain the expected output for a given input.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In addition, it should be able to verify that it actually works.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Less coupled code</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When code is tightly coupled, it can be difficult to unit test.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Without creating unit tests for the code that you're writing, coupling may be less apparent.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Writing tests for your code will naturally decouple your code, because it would be more difficult to test otherwise.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Characteristics of a good unit test</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fast<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It is not uncommon for mature projects to have thousands of unit tests.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Unit tests should take very little time to run.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Milliseconds.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Isolated<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Unit tests are standalone, can be run in isolation, and have no dependencies on any outside factors such as a file system or database.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Repeatable<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Running a unit test should be consistent with its results, that is, it always returns the same result if you do not change anything in between runs.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Self-Checking<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The test should be able to automatically detect if it passed or failed without any human interaction.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Timely<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A unit test should not take a disproportionately long time to write compared to the code being tested.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If you find testing the code taking a large amount of time compared to writing the code, consider a design that is more testable.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Let's speak the same language</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The term <bpt id="p1">*</bpt>mock<ept id="p1">*</ept> is unfortunately very misused when talking about testing.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following defines the most common types of <bpt id="p1">*</bpt>fakes<ept id="p1">*</ept> when writing unit tests:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Fake<ept id="p1">*</ept> - A fake is a generic term which can be used to describe either a stub or a mock object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Whether it is a stub or a mock depends on the context in which it's used.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>So in other words, a fake can be a stub or a mock.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Mock<ept id="p1">*</ept> - A mock object is a fake object in the system that decides whether or not a unit test has passed or failed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A mock starts out as a Fake until it is asserted against.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Stub<ept id="p1">*</ept> - A stub is a controllable replacement for an existing dependency (or collaborator) in the system.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>By using a stub, you can test your code without dealing with the dependency directly.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>By default, a fake starts out as a stub.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Consider the following code snippet:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This would be an example of stub being referred to as a mock.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In this case, it is a stub.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You're just passing in the Order as a means to be able to instantiate <ph id="ph1">`Purchase`</ph> (the system under test).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The name <ph id="ph1">`MockOrder`</ph> is also very misleading because again, the order is not a mock.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A better approach would be</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>By renaming the class to <ph id="ph1">`FakeOrder`</ph>, you've made the class a lot more generic, the class can be used as a mock or a stub.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Whichever is better for the test case.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the above example, <ph id="ph1">`FakeOrder`</ph> is used as a stub.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You're not using the <ph id="ph1">`FakeOrder`</ph> in any shape or form during the assert.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FakeOrder`</ph> was just passed into the <ph id="ph2">`Purchase`</ph> class to satisfy the requirements of the constructor.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To use it as a Mock, you could do something like this</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In this case, you are checking a property on the Fake (asserting against it), so in the above code snippet, the <ph id="ph1">`mockOrder`</ph> is a Mock.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It's important to get this terminology correct.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you call your stubs "mocks", other developers are going to make false assumptions about your intent.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The main thing to remember about mocks versus stubs is that mocks are just like stubs, but you assert against the mock object, whereas you do not assert against a stub.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Best practices</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Naming your tests</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The name of your test should consist of three parts:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The name of the method being tested.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The scenario under which it's being tested.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The expected behavior when the scenario is invoked.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Naming standards are important because they explicitly express the intent of the test.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Tests are more than just making sure your code works, they also provide documentation.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Just by looking at the suite of unit tests, you should be able to infer the behavior of your code without even looking at the code itself.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Additionally, when tests fail, you can see exactly which scenarios do not meet your expectations.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Bad:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Better:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Arranging your tests</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arrange, Act, Assert<ept id="p1">**</ept> is a common pattern when unit testing.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>As the name implies, it consists of three main actions:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Arrange<ept id="p1">*</ept> your objects, creating and setting them up as necessary.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Act<ept id="p1">*</ept> on an object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Assert<ept id="p1">*</ept> that something is as expected.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Clearly separates what is being tested from the <bpt id="p1">*</bpt>arrange<ept id="p1">*</ept> and <bpt id="p2">*</bpt>assert<ept id="p2">*</ept> steps.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Less chance to intermix assertions with "Act" code.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Readability is one of the most important aspects when writing a test.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Separating each of these actions within the test clearly highlight the dependencies required to call your code, how your code is being called, and what you are trying to assert.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>While it may be possible to combine some steps and reduce the size of your test, the primary goal is to make the test as readable as possible.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Bad:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Better:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Write minimally passing tests</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The input to be used in a unit test should be the simplest possible in order to verify the behavior that you are currently testing.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Tests become more resilient to future changes in the codebase.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Closer to testing behavior over implementation.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Tests that include more information than required to pass the test have a higher chance of introducing errors into the test and can make the intent of the test less clear.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>When writing tests you want to focus on the behavior.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Setting extra properties on models or using non-zero values when not required, only detracts from what you are trying to prove.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Bad:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Better:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Avoid magic strings</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Naming variables in unit tests is as important, if not more important, than naming variables in production code.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Unit tests should not contain magic strings.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Prevents the need for the reader of the test to inspect the production code in order to figure out what makes the value special.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Explicitly shows what you're trying to <bpt id="p1">*</bpt>prove<ept id="p1">*</ept> rather than trying to <bpt id="p2">*</bpt>accomplish<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Magic strings can cause confusion to the reader of your tests.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If a string looks out of the ordinary, they may wonder why a certain value was chosen for a parameter or return value.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This may lead them to take a closer look at the implementation details, rather than focus on the test.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>When writing tests, you should aim to express as much intent as possible.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In the case of magic strings, a good approach is to assign these values to constants.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Bad:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Better:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Avoid logic in tests</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When writing your unit tests avoid manual string concatenation and logical conditions such as <ph id="ph1">`if`</ph>, <ph id="ph2">`while`</ph>, <ph id="ph3">`for`</ph>, <ph id="ph4">`switch`</ph>, etc.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Less chance to introduce a bug inside of your tests.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Focus on the end result, rather than implementation details.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>When you introduce logic into your test suite, the chance of introducing a bug into it increases dramatically.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The last place that you want to find a bug is within your test suite.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>You should have a high level of confidence that your tests work, otherwise, you will not trust them.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Tests that you do not trust, do not provide any value.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>When a test fails, you want to have a sense that something is actually wrong with your code and that it cannot be ignored.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If logic in your test seems unavoidable, consider splitting the test up into two or more different tests.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Bad:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Better:</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Prefer helper methods to setup and teardown</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If you require a similar object or state for your tests, prefer a helper method than leveraging Setup and Teardown attributes if they exist.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Less confusion when reading the tests since all of the code is visible from within each test.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Less chance of setting up too much or too little for the given test.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Less chance of sharing state between tests which creates unwanted dependencies between them.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>In unit testing frameworks, <ph id="ph1">`Setup`</ph> is called before each and every unit test within your test suite.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>While some may see this as a useful tool, it generally ends up leading to bloated and hard to read tests.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Each test will generally have different requirements in order to get the test up and running.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Unfortunately, <ph id="ph1">`Setup`</ph> forces you to use the exact same requirements for each test.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>xUnit has removed both SetUp and TearDown as of version 2.x</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Bad:</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Better:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Avoid multiple asserts</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>When writing your tests, try to only include one Assert per test.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Common approaches to using only one assert include:</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Create a separate test for each assert.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Use parameterized tests.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If one Assert fails, the subsequent Asserts will not be evaluated.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Ensures you are not asserting multiple cases in your tests.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Gives you the entire picture as to why your tests are failing.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>When introducing multiple asserts into a test case, it is not guaranteed that all of the asserts will be executed.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In most unit testing frameworks, once an assertion fails in a unit test, the proceeding tests are automatically considered to be failing.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This can be confusing as functionality that is actually working, will be shown as failing.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A common exception to this rule is when asserting against an object.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In this case, it is generally acceptable to have multiple asserts against each property to ensure the object is in the state that you expect it to be in.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Bad:</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Better:</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Validate private methods by unit testing public methods</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>In most cases, there should not be a need to test a private method.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Private methods are an implementation detail.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>You can think of it this way: private methods never exist in isolation.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>At some point, there is going to be a public facing method that calls the private method as part of its implementation.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>What you should care about is the end result of the public method that calls into the private one.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Consider the following case</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Your first reaction may be to start writing a test for <ph id="ph1">`trimInput`</ph> because you want to make sure that the method is working as expected.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>However, it is entirely possible that <ph id="ph1">`ParseLogLine`</ph> manipulates <ph id="ph2">`sanitizedInput`</ph> in such a way that you do not expect, rendering a test against <ph id="ph3">`trimInput`</ph> useless.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The real test should be done against the public facing method <ph id="ph1">`ParseLogLine`</ph> because that is what you should ultimately care about.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>With this viewpoint, if you see a private method, find the public method and write your tests against that method.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Just because a private method returns the expected result, does not mean the system that eventually calls the private method uses the result correctly.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Stub static references</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>One of the principles of a unit test is that it must have full control of the system under test.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This can be problematic when production code includes calls to static references (e.g. <ph id="ph1">`DateTime.Now`</ph>).</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Consider the following code</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>How can this code possibly be unit tested?</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You may try an approach such as</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Unfortunately, you will quickly realize that there are a couple problems with your tests.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If the test suite is run on a Tuesday, the second test will pass, but the first test will fail.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>If the test suite is run on any other day, the first test will pass, but the second test will fail.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>To solve these problems, you'll need to introduce a <bpt id="p1">*</bpt>seam<ept id="p1">*</ept> into your production code.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>One approach is to wrap the code that you need to control in an interface and have the production code depend on that interface.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Your test suite now becomes</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Now the test suite has full control over <ph id="ph1">`DateTime.Now`</ph> and can stub any value when calling into the method.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>