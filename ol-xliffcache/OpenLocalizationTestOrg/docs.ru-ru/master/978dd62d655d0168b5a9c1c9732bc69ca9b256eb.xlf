<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">978dd62d655d0168b5a9c1c9732bc69ca9b256eb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c3faf562012f0ce8a5c176a6455d96f05751cda</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6be8a09fcaaaa572dae690d5b68724e23f40bd7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Core Command-Line Interface (CLI) Tools | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>An overview of the Command-Line Interface (CLI) tools and features.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CLI, CLI tools, .NET, .NET Core</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>.NET Core command-line interface (CLI) tools</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET Core command-line interface (CLI) is a new cross-platform toolchain for developing .NET applications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The CLI is a foundation upon which higher-level tools, such as Integrated Development Environments (IDEs), editors, and build orchestrators, can rest.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Installation</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Either use the native installers or use the installation shell scripts:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The native installers are primarily used on developer's machines and use each supported platform's native install mechanism, for instance, DEB packages on Ubuntu or MSI bundles on Windows.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These installers install and configure the environment for immediate use by the developer but require administrative privileges on the machine.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can view the installation instructions in the <bpt id="p1">[</bpt>.NET Core installation guide<ept id="p1">](https://aka.ms/dotnetcoregs)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Shell scripts are primarily used for setting up build servers or when you wish to install the tools without administrative privileges.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Install scripts don't install prerequisites on the machine, which must be installed manually.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>install script reference topic<ept id="p1">](dotnet-install-script.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For information on how to set up CLI on your continuous integration (CI) build server, see <bpt id="p1">[</bpt>Using .NET Core SDK and tools in Continuous Integration (CI)<ept id="p1">](using-ci-with-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>By default, the CLI installs in a side-by-side (SxS) manner, so multiple versions of the CLI tools can coexist on a single machine.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Determining which version is used on a machine where multiple versions are installed is explained in more detail in the <bpt id="p1">[</bpt>Driver<ept id="p1">](#driver)</ept> section.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CLI commands</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following commands are installed by default:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Basic commands</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>new<ept id="p1">](dotnet-new.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>restore<ept id="p1">](dotnet-restore.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>build<ept id="p1">](dotnet-build.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>publish<ept id="p1">](dotnet-publish.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>run<ept id="p1">](dotnet-run.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>test<ept id="p1">](dotnet-test.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>vstest<ept id="p1">](dotnet-vstest.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pack<ept id="p1">](dotnet-pack.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>migrate<ept id="p1">](dotnet-migrate.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>clean<ept id="p1">](dotnet-clean.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sln<ept id="p1">](dotnet-sln.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Project modification commands</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>add package<ept id="p1">](dotnet-add-package.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>add reference<ept id="p1">](dotnet-add-reference.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>remove package<ept id="p1">](dotnet-remove-package.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>remove reference<ept id="p1">](dotnet-remove-reference.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>list reference<ept id="p1">](dotnet-list-reference.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Advanced commands</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nuget delete<ept id="p1">](dotnet-nuget-delete.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nuget locals<ept id="p1">](dotnet-nuget-locals.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nuget push<ept id="p1">](dotnet-nuget-push.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>msbuild<ept id="p1">](dotnet-msbuild.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dotnet install script<ept id="p1">](dotnet-install-script.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The CLI adopts an extensibility model that allows you to specify additional tools for your projects.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>.NET Core CLI extensibility model<ept id="p1">](extensibility.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Command structure</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CLI command structure consists of the <bpt id="p1">[</bpt>the driver ("dotnet")<ept id="p1">](#driver)</ept>, <bpt id="p2">[</bpt>the command (or "verb")<ept id="p2">](#command-verb)</ept>, and possibly command <bpt id="p3">[</bpt>arguments<ept id="p3">](#arguments)</ept> and <bpt id="p4">[</bpt>options<ept id="p4">](#options)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You see this pattern in most CLI operations, such as creating a new console app and running it from the command line as the following commands show when executed from a directory named <bpt id="p1">*</bpt>my_app<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Driver</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The driver is named <bpt id="p1">[</bpt>dotnet<ept id="p1">](dotnet.md)</ept> and has two responsibilities, either running a <bpt id="p2">[</bpt>framework-dependent app<ept id="p2">](../deploying/index.md)</ept> or executing a command.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The only time <ph id="ph1">`dotnet`</ph> is used without a command is when it's used to start an application.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To run a framework-dependent app, specify the app after the driver, for example, <ph id="ph1">`dotnet /path/to/my_app.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When executing the command from the folder where the app's DLL resides, simply execute <ph id="ph1">`dotnet my_app.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When you supply a command to the driver, <ph id="ph1">`dotnet.exe`</ph> starts the CLI command execution process.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>First, the driver determines the version of the tooling to use.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the version isn't specified in the command options, the driver uses the latest version available.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To specify a version other than the latest installed version, use the <ph id="ph1">`--fx-version &lt;VERSION&gt;`</ph> option (see the <bpt id="p1">[</bpt>dotnet command<ept id="p1">](dotnet.md)</ept> reference).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Once the SDK version is determined, the driver executes the command.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Command ("verb")</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The command (or "verb") is simply a command that performs an action.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`dotnet build`</ph> builds your code.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet publish`</ph> publishes your code.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The commands are implemented as a console application using a <ph id="ph1">`dotnet-{verb}`</ph> convention.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The arguments you pass on the command line are the arguments to the command invoked.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example when you execute <ph id="ph1">`dotnet publish my_app.csproj`</ph>, the <ph id="ph2">`my_app.csproj`</ph> argument indicates the project to publish and is passed to the <ph id="ph3">`publish`</ph> command.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Options</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The options you pass on the command line are the options to the command invoked.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example when you execute <ph id="ph1">`dotnet publish --output /build_output`</ph>, the <ph id="ph2">`--output`</ph> option and its value are passed to the <ph id="ph3">`publish`</ph> command.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Migration from project.json</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you used Preview 2 tooling to produce <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>-based projects, consult the <bpt id="p2">[</bpt>dotnet migrate<ept id="p2">](dotnet-migrate.md)</ept> topic for information on migrating your project to MSBuild/<bpt id="p3">*</bpt>.csproj<ept id="p3">*</ept> for use with release tooling.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For .NET Core projects created prior to the release of Preview 2 tooling, either manually update the the project following the guidance in <bpt id="p1">[</bpt>Migrating from DNX to .NET Core CLI (project.json)<ept id="p1">](../migration/from-dnx.md)</ept> and then use <ph id="ph1">`dotnet migrate`</ph> or directly upgrade your projects.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Additional resources</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>dotnet/CLI GitHub Repository<ept id="p1">](https://github.com/dotnet/cli/)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core installation guide<ept id="p1">](https://aka.ms/dotnetcoregs)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>