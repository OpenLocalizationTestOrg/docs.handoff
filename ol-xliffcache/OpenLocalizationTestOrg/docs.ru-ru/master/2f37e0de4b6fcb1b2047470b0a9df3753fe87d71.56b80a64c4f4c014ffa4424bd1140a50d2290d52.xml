{"content":"---\ntitle: Runtime package store\ndescription: Learn how to use the runtime package store to target manifests used by .NET Core.\nauthor: bleroy\nms.date: 08/12/2017\nms.custom: seodec18\n---\n# Runtime package store\n\nStarting with .NET Core 2.0, it's possible to package and deploy apps against a known set of packages that exist in the target environment. The benefits are faster deployments, lower disk space usage, and improved startup performance in some cases.\n\nThis feature is implemented as a *runtime package store*, which is a directory on disk where packages are stored (typically at */usr/local/share/dotnet/store* on macOS/Linux and *C:/Program Files/dotnet/store* on Windows). Under this directory, there are subdirectories for architectures and [target frameworks](../../standard/frameworks.md). The file layout is similar to the way that [NuGet assets are laid out on disk](/nuget/create-packages/supporting-multiple-target-frameworks#framework-version-folder-structure):\n\n```\n\\dotnet\n    \\store\n        \\x64\n            \\netcoreapp2.0\n                \\microsoft.applicationinsights\n                \\microsoft.aspnetcore\n                ...\n        \\x86\n            \\netcoreapp2.0\n                \\microsoft.applicationinsights\n                \\microsoft.aspnetcore\n                ...\n```\n\nA *target manifest* file lists the packages in the runtime package store. Developers can target this manifest when publishing their app. The target manifest is typically provided by the owner of the targeted production environment.\n\n## Preparing a runtime environment\n\nThe administrator of a runtime environment can optimize apps for faster deployments and lower disk space use by building a runtime package store and the corresponding target manifest.\n\nThe first step is to create a *package store manifest* that lists the packages that compose the runtime package store. This file format is compatible with the project file format (*csproj*).\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"<NUGET_PACKAGE>\" Version=\"<VERSION>\" />\n    <!-- Include additional packages here -->\n  </ItemGroup>\n</Project>\n```\n\n**Example**\n\nThe following example package store manifest (*packages.csproj*) is used to add [`Newtonsoft.Json`](https://www.nuget.org/packages/Newtonsoft.Json/) and [`Moq`](https://www.nuget.org/packages/moq/) to a runtime package store:\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\n    <PackageReference Include=\"Moq\" Version=\"4.7.63\" />\n  </ItemGroup>\n</Project>\n```\n\nProvision the runtime package store by executing `dotnet store` with the package store manifest, runtime, and framework:\n\n```console\ndotnet store --manifest <PATH_TO_MANIFEST_FILE> --runtime <RUNTIME_IDENTIFIER> --framework <FRAMEWORK>\n```\n\n**Example**\n\n```console\ndotnet store --manifest packages.csproj --runtime win10-x64 --framework netcoreapp2.0 --framework-version 2.0.0\n```\n\nYou can pass multiple target package store manifest paths to a single [`dotnet store`](../tools/dotnet-store.md) command by repeating the option and path in the command.\n\nBy default, the output of the command is a package store under the *.dotnet/store* subdirectory of the user's profile. You can specify a different location using the `--output <OUTPUT_DIRECTORY>` option. The root directory of the store contains a target manifest *artifact.xml* file. This file can be made available for download and be used by app authors who want to target this store when publishing.\n\n**Example**\n\nThe following *artifact.xml* file is produced after running the previous example. Note that [`Castle.Core`](https://www.nuget.org/packages/Castle.Core/) is a dependency of `Moq`, so it's included automatically and appears in the *artifacts.xml* manifest file.\n\n```xml\n<StoreArtifacts>\n  <Package Id=\"Newtonsoft.Json\" Version=\"10.0.3\" />\n  <Package Id=\"Castle.Core\" Version=\"4.1.0\" />\n  <Package Id=\"Moq\" Version=\"4.7.63\" />\n</StoreArtifacts>\n```\n\n## Publishing an app against a target manifest\n\nIf you have a target manifest file on disk, you specify the path to the file when publishing your app with the [`dotnet publish`](../tools/dotnet-publish.md) command:\n\n```console\ndotnet publish --manifest <PATH_TO_MANIFEST_FILE>\n```\n\n**Example**\n\n```console\ndotnet publish --manifest manifest.xml\n```\n\nYou deploy the resulting published app to an environment that has the packages described in the target manifest. Failing to do so results in the app failing to start.\n\nSpecify multiple target manifests when publishing an app by repeating the option and path (for example, `--manifest manifest1.xml --manifest manifest2.xml`). When you do so, the app is trimmed for the union of packages specified in the target manifest files provided to the command.\n\n## Specifying target manifests in the project file\n\nAn alternative to specifying target manifests with the [`dotnet publish`](../tools/dotnet-publish.md) command is to specify them in the project file as a semicolon-separated list of paths under a **\\<TargetManifestFiles>** tag.\n\n```xml\n<PropertyGroup>\n  <TargetManifestFiles>manifest1.xml;manifest2.xml</TargetManifestFiles>\n</PropertyGroup>\n```\n\nSpecify the target manifests in the project file only when the target environment for the app is well-known, such as for .NET Core projects. This isn't the case for open-source projects. The users of an open-source project typically deploy it to different production environments. These production environments generally have different sets of packages pre-installed. You can't make assumptions about the target manifest in such environments, so you should use the `--manifest` option of [`dotnet publish`](../tools/dotnet-publish.md).\n\n## ASP.NET Core implicit store\n\nThe ASP.NET Core implicit store applies only to ASP.NET Core 2.0. We strongly recommend applications use ASP.NET Core 2.1 and later, which does **not** use the implicit store. ASP.NET Core 2.1 and later use the shared framework.\n\nThe runtime package store feature is used implicitly by an ASP.NET Core app when the app is deployed as a [framework-dependent deployment (FDD)](index.md#framework-dependent-deployments-fdd) app. The targets in [`Microsoft.NET.Sdk.Web`](https://github.com/aspnet/websdk) include manifests referencing the implicit package store on the target system. Additionally, any FDD app that depends on the `Microsoft.AspNetCore.All` package results in a published app that contains only the app and its assets and not the packages listed in the `Microsoft.AspNetCore.All` metapackage. It's assumed that those packages are present on the target system.\n\nThe runtime package store is installed on the host when the .NET Core SDK is installed. Other installers may provide the runtime package store, including Zip/tarball installations of the .NET Core SDK, `apt-get`, Red Hat Yum, the .NET Core Windows Server Hosting bundle, and manual runtime package store installations.\n\nWhen deploying a [framework-dependent deployment (FDD)](index.md#framework-dependent-deployments-fdd) app, make sure that the target environment has the .NET Core SDK installed. If the app is deployed to an environment that doesn't include ASP.NET Core, you can opt out of the implicit store by specifying  **\\<PublishWithAspNetCoreTargetManifest>** set to `false` in the project file as in the following example:\n\n```xml\n<PropertyGroup>\n  <PublishWithAspNetCoreTargetManifest>false</PublishWithAspNetCoreTargetManifest>\n</PropertyGroup>\n```\n\n> [!NOTE]\n> For [self-contained deployment (SCD)](index.md#self-contained-deployments-scd) apps, it's assumed that the target system doesn't necessarily contain the required manifest packages. Therefore, **\\<PublishWithAspNetCoreTargetManifest>** cannot be set to `true` for an SCD app.\n\nIf you deploy an application with a manifest dependency that's present in the deployment (the assembly is present in the *bin* folder), the runtime package store *isn't used* on the host for that assembly. The *bin* folder assembly is used regardless of its presence in the runtime package store on the host.\n\nThe version of the dependency indicated in the manifest must match the version of the dependency in the runtime package store. If you have a version mismatch between the dependency in the target manifest and the version that exists in the runtime package store and the app doesn't include the required version of the package in its deployment, the app fails to start. The exception includes the name of the target manifest that called for the runtime package store assembly, which helps you troubleshoot the mismatch.\n\nWhen the deployment is *trimmed* on publish, only the specific versions of the manifest packages you indicate are withheld from the published output. The packages at the versions indicated must be present on the host for the app to start.\n\n## See also\n\n- [dotnet-publish](../tools/dotnet-publish.md)\n- [dotnet-store](../tools/dotnet-store.md)\n","nodes":[{"pos":[4,182],"embed":true,"restype":"x-metadata","content":"title: Runtime package store\ndescription: Learn how to use the runtime package store to target manifests used by .NET Core.\nauthor: bleroy\nms.date: 08/12/2017\nms.custom: seodec18","nodes":[{"content":"Runtime package store","nodes":[{"pos":[0,21],"content":"Runtime package store","nodes":[{"content":"Runtime package store","pos":[0,21]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to use the runtime package store to target manifests used by .NET Core.","nodes":[{"pos":[0,81],"content":"Learn how to use the runtime package store to target manifests used by .NET Core.","nodes":[{"content":"Learn how to use the runtime package store to target manifests used by .NET Core.","pos":[0,81]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[189,210],"content":"Runtime package store","linkify":"Runtime package store","nodes":[{"content":"Runtime package store","pos":[0,21]}]},{"content":"Starting with .NET Core 2.0, it's possible to package and deploy apps against a known set of packages that exist in the target environment.","pos":[212,351]},{"content":"The benefits are faster deployments, lower disk space usage, and improved startup performance in some cases.","pos":[352,460]},{"content":"This feature is implemented as a <bpt id=\"p1\">*</bpt>runtime package store<ept id=\"p1\">*</ept>, which is a directory on disk where packages are stored (typically at <bpt id=\"p2\">*</bpt>/usr/local/share/dotnet/store<ept id=\"p2\">*</ept> on macOS/Linux and <bpt id=\"p3\">*</bpt>C:/Program Files/dotnet/store<ept id=\"p3\">*</ept> on Windows).","pos":[462,684],"source":"This feature is implemented as a *runtime package store*, which is a directory on disk where packages are stored (typically at */usr/local/share/dotnet/store* on macOS/Linux and *C:/Program Files/dotnet/store* on Windows)."},{"content":"Under this directory, there are subdirectories for architectures and <bpt id=\"p1\">[</bpt>target frameworks<ept id=\"p1\">](../../standard/frameworks.md)</ept>.","pos":[685,804],"source":" Under this directory, there are subdirectories for architectures and [target frameworks](../../standard/frameworks.md)."},{"content":"The file layout is similar to the way that <bpt id=\"p1\">[</bpt>NuGet assets are laid out on disk<ept id=\"p1\">](/nuget/create-packages/supporting-multiple-target-frameworks#framework-version-folder-structure)</ept>:","pos":[805,981],"source":" The file layout is similar to the way that [NuGet assets are laid out on disk](/nuget/create-packages/supporting-multiple-target-frameworks#framework-version-folder-structure):"},{"content":"A <bpt id=\"p1\">*</bpt>target manifest<ept id=\"p1\">*</ept> file lists the packages in the runtime package store.","pos":[1301,1374],"source":"A *target manifest* file lists the packages in the runtime package store."},{"content":"Developers can target this manifest when publishing their app.","pos":[1375,1437]},{"content":"The target manifest is typically provided by the owner of the targeted production environment.","pos":[1438,1532]},{"pos":[1537,1568],"content":"Preparing a runtime environment","linkify":"Preparing a runtime environment","nodes":[{"content":"Preparing a runtime environment","pos":[0,31]}]},{"content":"The administrator of a runtime environment can optimize apps for faster deployments and lower disk space use by building a runtime package store and the corresponding target manifest.","pos":[1570,1753]},{"content":"The first step is to create a <bpt id=\"p1\">*</bpt>package store manifest<ept id=\"p1\">*</ept> that lists the packages that compose the runtime package store.","pos":[1755,1873],"source":"The first step is to create a *package store manifest* that lists the packages that compose the runtime package store."},{"content":"This file format is compatible with the project file format (<bpt id=\"p1\">*</bpt>csproj<ept id=\"p1\">*</ept>).","pos":[1874,1945],"source":" This file format is compatible with the project file format (*csproj*)."},{"pos":[2150,2161],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[2163,2388],"content":"The following example package store manifest (<bpt id=\"p1\">*</bpt>packages.csproj<ept id=\"p1\">*</ept>) is used to add <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`Newtonsoft.Json`</ph><ept id=\"p2\">](https://www.nuget.org/packages/Newtonsoft.Json/)</ept> and <bpt id=\"p3\">[</bpt><ph id=\"ph2\">`Moq`</ph><ept id=\"p3\">](https://www.nuget.org/packages/moq/)</ept> to a runtime package store:","source":"The following example package store manifest (*packages.csproj*) is used to add [`Newtonsoft.Json`](https://www.nuget.org/packages/Newtonsoft.Json/) and [`Moq`](https://www.nuget.org/packages/moq/) to a runtime package store:"},{"pos":[2600,2720],"content":"Provision the runtime package store by executing <ph id=\"ph1\">`dotnet store`</ph> with the package store manifest, runtime, and framework:","source":"Provision the runtime package store by executing `dotnet store` with the package store manifest, runtime, and framework:"},{"pos":[2841,2852],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[2982,3151],"content":"You can pass multiple target package store manifest paths to a single <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet store`</ph><ept id=\"p1\">](../tools/dotnet-store.md)</ept> command by repeating the option and path in the command.","source":"You can pass multiple target package store manifest paths to a single [`dotnet store`](../tools/dotnet-store.md) command by repeating the option and path in the command."},{"content":"By default, the output of the command is a package store under the <bpt id=\"p1\">*</bpt>.dotnet/store<ept id=\"p1\">*</ept> subdirectory of the user's profile.","pos":[3153,3271],"source":"By default, the output of the command is a package store under the *.dotnet/store* subdirectory of the user's profile."},{"content":"You can specify a different location using the <ph id=\"ph1\">`--output &lt;OUTPUT_DIRECTORY&gt;`</ph> option.","pos":[3272,3356],"source":" You can specify a different location using the `--output <OUTPUT_DIRECTORY>` option."},{"content":"The root directory of the store contains a target manifest <bpt id=\"p1\">*</bpt>artifact.xml<ept id=\"p1\">*</ept> file.","pos":[3357,3436],"source":" The root directory of the store contains a target manifest *artifact.xml* file."},{"content":"This file can be made available for download and be used by app authors who want to target this store when publishing.","pos":[3437,3555]},{"pos":[3557,3568],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"content":"The following <bpt id=\"p1\">*</bpt>artifact.xml<ept id=\"p1\">*</ept> file is produced after running the previous example.","pos":[3570,3651],"source":"The following *artifact.xml* file is produced after running the previous example."},{"content":"Note that <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Castle.Core`</ph><ept id=\"p1\">](https://www.nuget.org/packages/Castle.Core/)</ept> is a dependency of <ph id=\"ph2\">`Moq`</ph>, so it's included automatically and appears in the <bpt id=\"p2\">*</bpt>artifacts.xml<ept id=\"p2\">*</ept> manifest file.","pos":[3652,3829],"source":" Note that [`Castle.Core`](https://www.nuget.org/packages/Castle.Core/) is a dependency of `Moq`, so it's included automatically and appears in the *artifacts.xml* manifest file."},{"pos":[4020,4063],"content":"Publishing an app against a target manifest","linkify":"Publishing an app against a target manifest","nodes":[{"content":"Publishing an app against a target manifest","pos":[0,43]}]},{"pos":[4065,4231],"content":"If you have a target manifest file on disk, you specify the path to the file when publishing your app with the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet publish`</ph><ept id=\"p1\">](../tools/dotnet-publish.md)</ept> command:","source":"If you have a target manifest file on disk, you specify the path to the file when publishing your app with the [`dotnet publish`](../tools/dotnet-publish.md) command:"},{"pos":[4299,4310],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"content":"You deploy the resulting published app to an environment that has the packages described in the target manifest.","pos":[4367,4479]},{"content":"Failing to do so results in the app failing to start.","pos":[4480,4533]},{"content":"Specify multiple target manifests when publishing an app by repeating the option and path (for example, <ph id=\"ph1\">`--manifest manifest1.xml --manifest manifest2.xml`</ph>).","pos":[4535,4692],"source":"Specify multiple target manifests when publishing an app by repeating the option and path (for example, `--manifest manifest1.xml --manifest manifest2.xml`)."},{"content":"When you do so, the app is trimmed for the union of packages specified in the target manifest files provided to the command.","pos":[4693,4817]},{"pos":[4822,4869],"content":"Specifying target manifests in the project file","linkify":"Specifying target manifests in the project file","nodes":[{"content":"Specifying target manifests in the project file","pos":[0,47]}]},{"pos":[4871,5098],"content":"An alternative to specifying target manifests with the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet publish`</ph><ept id=\"p1\">](../tools/dotnet-publish.md)</ept> command is to specify them in the project file as a semicolon-separated list of paths under a <bpt id=\"p2\">**</bpt><ph id=\"ph2\">\\&lt;</ph>TargetManifestFiles&gt;<ept id=\"p2\">**</ept> tag.","source":"An alternative to specifying target manifests with the [`dotnet publish`](../tools/dotnet-publish.md) command is to specify them in the project file as a semicolon-separated list of paths under a **\\<TargetManifestFiles>** tag."},{"content":"Specify the target manifests in the project file only when the target environment for the app is well-known, such as for .NET Core projects.","pos":[5218,5358]},{"content":"This isn't the case for open-source projects.","pos":[5359,5404]},{"content":"The users of an open-source project typically deploy it to different production environments.","pos":[5405,5498]},{"content":"These production environments generally have different sets of packages pre-installed.","pos":[5499,5585]},{"content":"You can't make assumptions about the target manifest in such environments, so you should use the <ph id=\"ph1\">`--manifest`</ph> option of <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`dotnet publish`</ph><ept id=\"p1\">](../tools/dotnet-publish.md)</ept>.","pos":[5586,5753],"source":" You can't make assumptions about the target manifest in such environments, so you should use the `--manifest` option of [`dotnet publish`](../tools/dotnet-publish.md)."},{"pos":[5758,5785],"content":"ASP.NET Core implicit store","linkify":"ASP.NET Core implicit store","nodes":[{"content":"ASP.NET Core implicit store","pos":[0,27]}]},{"content":"The ASP.NET Core implicit store applies only to ASP.NET Core 2.0.","pos":[5787,5852]},{"content":"We strongly recommend applications use ASP.NET Core 2.1 and later, which does <bpt id=\"p1\">**</bpt>not<ept id=\"p1\">**</ept> use the implicit store.","pos":[5853,5962],"source":" We strongly recommend applications use ASP.NET Core 2.1 and later, which does **not** use the implicit store."},{"content":"ASP.NET Core 2.1 and later use the shared framework.","pos":[5963,6015]},{"content":"The runtime package store feature is used implicitly by an ASP.NET Core app when the app is deployed as a <bpt id=\"p1\">[</bpt>framework-dependent deployment (FDD)<ept id=\"p1\">](index.md#framework-dependent-deployments-fdd)</ept> app.","pos":[6017,6212],"source":"The runtime package store feature is used implicitly by an ASP.NET Core app when the app is deployed as a [framework-dependent deployment (FDD)](index.md#framework-dependent-deployments-fdd) app."},{"content":"The targets in <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Microsoft.NET.Sdk.Web`</ph><ept id=\"p1\">](https://github.com/aspnet/websdk)</ept> include manifests referencing the implicit package store on the target system.","pos":[6213,6366],"source":" The targets in [`Microsoft.NET.Sdk.Web`](https://github.com/aspnet/websdk) include manifests referencing the implicit package store on the target system."},{"content":"Additionally, any FDD app that depends on the <ph id=\"ph1\">`Microsoft.AspNetCore.All`</ph> package results in a published app that contains only the app and its assets and not the packages listed in the <ph id=\"ph2\">`Microsoft.AspNetCore.All`</ph> metapackage.","pos":[6367,6591],"source":" Additionally, any FDD app that depends on the `Microsoft.AspNetCore.All` package results in a published app that contains only the app and its assets and not the packages listed in the `Microsoft.AspNetCore.All` metapackage."},{"content":"It's assumed that those packages are present on the target system.","pos":[6592,6658]},{"content":"The runtime package store is installed on the host when the .NET Core SDK is installed.","pos":[6660,6747]},{"content":"Other installers may provide the runtime package store, including Zip/tarball installations of the .NET Core SDK, <ph id=\"ph1\">`apt-get`</ph>, Red Hat Yum, the .NET Core Windows Server Hosting bundle, and manual runtime package store installations.","pos":[6748,6978],"source":" Other installers may provide the runtime package store, including Zip/tarball installations of the .NET Core SDK, `apt-get`, Red Hat Yum, the .NET Core Windows Server Hosting bundle, and manual runtime package store installations."},{"content":"When deploying a <bpt id=\"p1\">[</bpt>framework-dependent deployment (FDD)<ept id=\"p1\">](index.md#framework-dependent-deployments-fdd)</ept> app, make sure that the target environment has the .NET Core SDK installed.","pos":[6980,7157],"source":"When deploying a [framework-dependent deployment (FDD)](index.md#framework-dependent-deployments-fdd) app, make sure that the target environment has the .NET Core SDK installed."},{"content":"If the app is deployed to an environment that doesn't include ASP.NET Core, you can opt out of the implicit store by specifying  <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>PublishWithAspNetCoreTargetManifest&gt;<ept id=\"p1\">**</ept> set to <ph id=\"ph2\">`false`</ph> in the project file as in the following example:","pos":[7158,7393],"source":" If the app is deployed to an environment that doesn't include ASP.NET Core, you can opt out of the implicit store by specifying  **\\<PublishWithAspNetCoreTargetManifest>** set to `false` in the project file as in the following example:"},{"pos":[7525,7809],"content":"[!NOTE]\nFor [self-contained deployment (SCD)](index.md#self-contained-deployments-scd) apps, it's assumed that the target system doesn't necessarily contain the required manifest packages. Therefore, **\\<PublishWithAspNetCoreTargetManifest>** cannot be set to `true` for an SCD app.","leadings":["","> "],"nodes":[{"content":"For [self-contained deployment (SCD)](index.md#self-contained-deployments-scd) apps, it's assumed that the target system doesn't necessarily contain the required manifest packages. Therefore, **\\<PublishWithAspNetCoreTargetManifest>** cannot be set to `true` for an SCD app.","pos":[8,282],"nodes":[{"content":"For <bpt id=\"p1\">[</bpt>self-contained deployment (SCD)<ept id=\"p1\">](index.md#self-contained-deployments-scd)</ept> apps, it's assumed that the target system doesn't necessarily contain the required manifest packages.","pos":[0,180],"source":"For [self-contained deployment (SCD)](index.md#self-contained-deployments-scd) apps, it's assumed that the target system doesn't necessarily contain the required manifest packages."},{"content":"Therefore, <bpt id=\"p1\">**</bpt><ph id=\"ph1\">\\&lt;</ph>PublishWithAspNetCoreTargetManifest&gt;<ept id=\"p1\">**</ept> cannot be set to <ph id=\"ph2\">`true`</ph> for an SCD app.","pos":[181,274],"source":" Therefore, **\\<PublishWithAspNetCoreTargetManifest>** cannot be set to `true` for an SCD app."}]}]},{"content":"If you deploy an application with a manifest dependency that's present in the deployment (the assembly is present in the <bpt id=\"p1\">*</bpt>bin<ept id=\"p1\">*</ept> folder), the runtime package store <bpt id=\"p2\">*</bpt>isn't used<ept id=\"p2\">*</ept> on the host for that assembly.","pos":[7811,8016],"source":"If you deploy an application with a manifest dependency that's present in the deployment (the assembly is present in the *bin* folder), the runtime package store *isn't used* on the host for that assembly."},{"content":"The <bpt id=\"p1\">*</bpt>bin<ept id=\"p1\">*</ept> folder assembly is used regardless of its presence in the runtime package store on the host.","pos":[8017,8119],"source":" The *bin* folder assembly is used regardless of its presence in the runtime package store on the host."},{"content":"The version of the dependency indicated in the manifest must match the version of the dependency in the runtime package store.","pos":[8121,8247]},{"content":"If you have a version mismatch between the dependency in the target manifest and the version that exists in the runtime package store and the app doesn't include the required version of the package in its deployment, the app fails to start.","pos":[8248,8488]},{"content":"The exception includes the name of the target manifest that called for the runtime package store assembly, which helps you troubleshoot the mismatch.","pos":[8489,8638]},{"content":"When the deployment is <bpt id=\"p1\">*</bpt>trimmed<ept id=\"p1\">*</ept> on publish, only the specific versions of the manifest packages you indicate are withheld from the published output.","pos":[8640,8789],"source":"When the deployment is *trimmed* on publish, only the specific versions of the manifest packages you indicate are withheld from the published output."},{"content":"The packages at the versions indicated must be present on the host for the app to start.","pos":[8790,8878]},{"pos":[8883,8891],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8895,8939],"content":"<bpt id=\"p1\">[</bpt>dotnet-publish<ept id=\"p1\">](../tools/dotnet-publish.md)</ept>","source":"[dotnet-publish](../tools/dotnet-publish.md)"},{"pos":[8942,8982],"content":"<bpt id=\"p1\">[</bpt>dotnet-store<ept id=\"p1\">](../tools/dotnet-store.md)</ept>","source":"[dotnet-store](../tools/dotnet-store.md)"}]}