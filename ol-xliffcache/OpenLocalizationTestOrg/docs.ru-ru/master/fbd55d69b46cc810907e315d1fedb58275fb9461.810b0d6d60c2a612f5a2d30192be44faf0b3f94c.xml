{"content":"---\ntitle: \"UShort Data Type (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2017-04-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.ushort\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"numbers, whole\"\n  - \"literal type characters, US\"\n  - \"whole numbers\"\n  - \"integral data types\"\n  - \"integer numbers\"\n  - \"numbers, integer\"\n  - \"integers, data types\"\n  - \"integers, types\"\n  - \"data types [Visual Basic], integral\"\n  - \"UShort data type\"\n  - \"US literal type characters\"\nms.assetid: 138db892-665d-4ba8-9cae-d8d91c4a8f39\ncaps.latest.revision: 16\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# UShort data type (Visual Basic)\n\nHolds unsigned 16-bit (2-byte) integers ranging in value from 0 through 65,535.  \n  \n## Remarks\n\n Use the `UShort` data type to contain binary data too large for `Byte`.  \n  \n The default value of `UShort` is 0.  \n\n# Literal assignments\n\nYou can declare and initialize a `UShort` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal. If the integer literal is outside the range of `UShort` (that is, if it is less than <xref:System.UInt16.MinValue?displayProperty=fullName> or greater than <xref:System.UInt16.MaxValue?displayProperty=fullName>, a compilation error occurs.\n\nIn the following example, integers equal to 65,034 that are represented as decimal, hexadecimal, and binary literals are assigned to `UShort` values.\n  \n[!code-vb[UShort](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#UShort)]\n\n> [!NOTE]\n> You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.\n\nStarting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-vb[UShort](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#UShortS)]\n\nNumeric literals can also include the `US` or `us` [type character](../../programming-guide\\language-features\\data-types/type-characters.md) to denote the `UShort` data type, as the following example shows.\n\n```vb\nDim number = &H035826us\n```\n\n## Programming tips\n  \n-   **Negative Numbers.** Because `UShort` is an unsigned type, it cannot represent a negative number. If you use the unary minus (`-`) operator on an expression that evaluates to type `UShort`, Visual Basic converts the expression to `Integer` first.  \n  \n-   **CLS Compliance.** The `UShort` data type is not part of the [Common Language Specification](http://www.ecma-international.org/publications/standards/Ecma-335.htm) (CLS), so CLS-compliant code cannot consume a component that uses it.\n  \n-   **Widening.** The `UShort` data type widens to `Integer`, `UInteger`, `Long`, `ULong`, `Decimal`, `Single`, and `Double`. This means you can convert `UShort` to any of these types without encountering a <xref:System.OverflowException?displayProperty=fullName> error.  \n  \n-   **Type Characters.** Appending the literal type characters `US` to a literal forces it to the `UShort` data type. `UShort` has no identifier type character.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.UInt16?displayProperty=fullName> structure.  \n  \n## See Also  \n <xref:System.UInt16>   \n [Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)   \n [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)   \n [How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)   \n [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)","nodes":[{"pos":[4,839],"embed":true,"restype":"x-metadata","content":"title: \"UShort Data Type (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2017-04-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.ushort\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"numbers, whole\"\n  - \"literal type characters, US\"\n  - \"whole numbers\"\n  - \"integral data types\"\n  - \"integer numbers\"\n  - \"numbers, integer\"\n  - \"integers, data types\"\n  - \"integers, types\"\n  - \"data types [Visual Basic], integral\"\n  - \"UShort data type\"\n  - \"US literal type characters\"\nms.assetid: 138db892-665d-4ba8-9cae-d8d91c4a8f39\ncaps.latest.revision: 16\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"UShort Data Type (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,48],"content":"UShort Data Type (Visual Basic) | Microsoft Docs","nodes":[{"content":"UShort Data Type (Visual Basic) | Microsoft Docs","pos":[0,48]}]}],"path":["title"]}],"yml":true},{"pos":[846,877],"content":"UShort data type (Visual Basic)","linkify":"UShort data type (Visual Basic)","nodes":[{"content":"UShort data type (Visual Basic)","pos":[0,31]}]},{"content":"Holds unsigned 16-bit (2-byte) integers ranging in value from 0 through 65,535.","pos":[879,958]},{"pos":[967,974],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[977,1048],"content":"Use the <ph id=\"ph1\">`UShort`</ph> data type to contain binary data too large for <ph id=\"ph2\">`Byte`</ph>.","source":"Use the `UShort` data type to contain binary data too large for `Byte`."},{"pos":[1055,1090],"content":"The default value of <ph id=\"ph1\">`UShort`</ph> is 0.","source":"The default value of `UShort` is 0."},{"pos":[1096,1115],"content":"Literal assignments","linkify":"Literal assignments","nodes":[{"content":"Literal assignments","pos":[0,19]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`UShort`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.","pos":[1117,1298],"source":"You can declare and initialize a `UShort` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`UShort`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.UInt16.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[1299,1538],"source":" If the integer literal is outside the range of `UShort` (that is, if it is less than <xref:System.UInt16.MinValue?displayProperty=fullName> or greater than <xref:System.UInt16.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"pos":[1540,1689],"content":"In the following example, integers equal to 65,034 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`UShort`</ph> values.","source":"In the following example, integers equal to 65,034 that are represented as decimal, hexadecimal, and binary literals are assigned to `UShort` values."},{"pos":[1814,2029],"content":"[!NOTE]\nYou use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","pos":[8,213],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`&amp;h`</ph> or <ph id=\"ph2\">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id=\"ph3\">`&amp;b`</ph> or <ph id=\"ph4\">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id=\"ph5\">`&amp;o`</ph> or <ph id=\"ph6\">`&amp;O`</ph> to denote an octal literal.","pos":[0,172],"source":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal."},{"content":"Decimal literals have no prefix.","pos":[173,205]}]}]},{"pos":[2031,2188],"content":"Starting with Visual Basic 2017, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"pos":[2310,2516],"content":"Numeric literals can also include the <ph id=\"ph1\">`US`</ph> or <ph id=\"ph2\">`us`</ph> <bpt id=\"p1\">[</bpt>type character<ept id=\"p1\">](../../programming-guide\\language-features\\data-types/type-characters.md)</ept> to denote the <ph id=\"ph3\">`UShort`</ph> data type, as the following example shows.","source":"Numeric literals can also include the `US` or `us` [type character](../../programming-guide\\language-features\\data-types/type-characters.md) to denote the `UShort` data type, as the following example shows."},{"pos":[2556,2572],"content":"Programming tips","linkify":"Programming tips","nodes":[{"content":"Programming tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Negative Numbers.<ept id=\"p1\">**</ept>","pos":[2580,2601],"source":"**Negative Numbers.**"},{"content":"Because <ph id=\"ph1\">`UShort`</ph> is an unsigned type, it cannot represent a negative number.","pos":[2602,2678],"source":" Because `UShort` is an unsigned type, it cannot represent a negative number."},{"content":"If you use the unary minus (<ph id=\"ph1\">`-`</ph>) operator on an expression that evaluates to type <ph id=\"ph2\">`UShort`</ph>, Visual Basic converts the expression to <ph id=\"ph3\">`Integer`</ph> first.","pos":[2679,2827],"source":" If you use the unary minus (`-`) operator on an expression that evaluates to type `UShort`, Visual Basic converts the expression to `Integer` first."},{"content":"<bpt id=\"p1\">**</bpt>CLS Compliance.<ept id=\"p1\">**</ept>","pos":[2837,2856],"source":"**CLS Compliance.**"},{"content":"The <ph id=\"ph1\">`UShort`</ph> data type is not part of the <bpt id=\"p1\">[</bpt>Common Language Specification<ept id=\"p1\">](http://www.ecma-international.org/publications/standards/Ecma-335.htm)</ept> (CLS), so CLS-compliant code cannot consume a component that uses it.","pos":[2857,3071],"source":" The `UShort` data type is not part of the [Common Language Specification](http://www.ecma-international.org/publications/standards/Ecma-335.htm) (CLS), so CLS-compliant code cannot consume a component that uses it."},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[3079,3092],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`UShort`</ph> data type widens to <ph id=\"ph2\">`Integer`</ph>, <ph id=\"ph3\">`UInteger`</ph>, <ph id=\"ph4\">`Long`</ph>, <ph id=\"ph5\">`ULong`</ph>, <ph id=\"ph6\">`Decimal`</ph>, <ph id=\"ph7\">`Single`</ph>, and <ph id=\"ph8\">`Double`</ph>.","pos":[3093,3200],"source":" The `UShort` data type widens to `Integer`, `UInteger`, `Long`, `ULong`, `Decimal`, `Single`, and `Double`."},{"content":"This means you can convert <ph id=\"ph1\">`UShort`</ph> to any of these types without encountering a <ph id=\"ph2\">&lt;xref:System.OverflowException?displayProperty=fullName&gt;</ph> error.","pos":[3201,3345],"source":" This means you can convert `UShort` to any of these types without encountering a <xref:System.OverflowException?displayProperty=fullName> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[3355,3375],"source":"**Type Characters.**"},{"content":"Appending the literal type characters <ph id=\"ph1\">`US`</ph> to a literal forces it to the <ph id=\"ph2\">`UShort`</ph> data type.","pos":[3376,3468],"source":" Appending the literal type characters `US` to a literal forces it to the `UShort` data type."},{"content":"<ph id=\"ph1\">`UShort`</ph> has no identifier type character.","pos":[3469,3511],"source":"`UShort` has no identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[3521,3540],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.UInt16?displayProperty=fullName&gt;</ph> structure.","pos":[3541,3649],"source":" The corresponding type in the .NET Framework is the <xref:System.UInt16?displayProperty=fullName> structure."},{"pos":[3658,3666],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.UInt16&gt;</ph>","pos":[3670,3690],"source":"<xref:System.UInt16> "},{"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[3695,3782],"source":"[Data Types](../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3786,3895],"source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[3899,3993],"source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id=\"p1\">](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[3997,4170],"source":"[How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","pos":[4174,4304],"source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}