{"content":"---\ntitle: \"How to: Compare strings - C# Guide\"\ndescription: Learn how to compare and order string values, with or without case, with or without culture specific ordering\nms.date: 10/03/2018\nhelpviewer_keywords: \n  - \"strings [C#], comparison\"\n  - \"comparing strings [C#]\"\n---\n# How to compare strings in C\\#\n\nYou compare strings to answer one of two questions: \"Are these two strings\nequal?\" or \"In what order should these strings be placed when sorting them?\"\n\nThose two questions are complicated by factors that affect string comparisons:\n\n- You can choose an ordinal or linguistic comparison.\n- You can choose if case matters.\n- You can choose culture-specific comparisons.\n- Linguistic comparisons are culture and platform-dependent.\n\n[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]\n\nWhen you compare strings, you define an order among them. Comparisons are\nused to sort a sequence of strings. Once the sequence is in a known order,\nit is easier to search, both for software and for humans. Other comparisons\nmay check if strings are the same. These sameness checks are similar to\nequality, but some differences, such as case differences, may be ignored.\n\n## Default ordinal comparisons\n\nThe most common operations:\n\n- <xref:System.String.CompareTo%2A?displayProperty=nameWithType>\n- <xref:System.String.Equals%2A?displayProperty=nameWithType>\n- <xref:System.String.op_Equality%2A?displayProperty=nameWithType> \n\nuse an ordinal comparison, a case-sensitive comparison, and use the current culture. The results are shown in the following example:\n\n[!code-csharp-interactive[Comparing strings using an ordinal comparison](../../../samples/snippets/csharp/how-to/strings/CompareStrings.cs#1)]\n\nThe default ordinal comparison does not take linguistic rules into account when comparing\nstrings. It compares the binary value of each <xref:System.Char> object in two strings. As a result, the default ordinal comparison is also case-sensitive. \n\nNote that the test for equality with <xref:System.String.Equals%2A?displayProperty=nameWithType> and <xref:System.String.op_Equality%2A?displayProperty=nameWithType> differs from string comparison using the <xref:System.String.CompareTo%2A?displayProperty=nameWithType> and <xref:System.String.Compare(System.String,System.String)?displayProperty=nameWithType)> methods. While the tests for equality perform a case-sensitive ordinal comparison, the comparison method perform a case-sensitive, culture-sensitive comparison using the current culture. Because the default comparison methods often perform different types of comparisons, we recommend that you always make the intent of your code clear by calling an overload that explicitly specifies the type of comparison to perform.\n\n## Case-insensitive ordinal comparisons\n\nThe <xref:System.String.Equals(System.String,System.StringComparison)?displayProperty=nameWithType> method\nenables you to specify a <xref:System.StringComparison> value of\n<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>\nfor a case-insensitive ordinal comparison. There is also a static\n<xref:System.String.Compare(System.String,System.String,System.StringComparison)?displayProperty=nameWithType> method that performs a case-insensitive ordinal comparison if you specify a value of <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> for the <xref:System.StringComparison> argument. These are shown in the following code:\n\n[!code-csharp-interactive[Comparing strings ignoring case](../../../samples/snippets/csharp/how-to/strings/CompareStrings.cs#2)]\n\nWhen performing a case-insensitive ordinal comparison, these methods use the casing conventions of the [invariant culture](xref:System.Globalization.CultureInfo.InvariantCulture).\n\n## Linguistic comparisons\n\nStrings can also be ordered using linguistic rules for the current culture.\nThis is sometimes referred to as \"word sort order.\" When you perform a\nlinguistic comparison, some nonalphanumeric Unicode characters might have\nspecial weights assigned. For example, the hyphen \"-\" may have a very small\nweight assigned to it so that \"co-op\" and \"coop\" appear next to each other\nin sort order. In addition, some Unicode characters may be equivalent to a\nsequence of <xref:System.Char> instances. The following example uses the phrase\n\"They dance in the street.\" in German with the \"ss\" (U+0073 U+0073) in one string and 'ß' (U+00DF) in another. Linguistically\n(in Windows), \"ss\" is equal to the German Esszet: 'ß' character in both the \"en-US\"\nand \"de-DE\" cultures.\n\n[!code-csharp-interactive[Comparing strings using linguistic rules](../../../samples/snippets/csharp/how-to/strings/CompareStrings.cs#3)]\n\nThis sample demonstrates the operating system-dependent nature of linguistic\ncomparisons. The host for the interactive window is a Linux host. The\nlinguistic and ordinal comparisons produce the same results. If you\nran this same sample on a Windows host, you would see the following output:\n\n```console\n<coop> is less than <co-op> using invariant culture\n<coop> is greater than <co-op> using ordinal comparison\n<coop> is less than <cop> using invariant culture\n<coop> is less than <cop> using ordinal comparison\n<co-op> is less than <cop> using invariant culture\n<co-op> is less than <cop> using ordinal comparison\n```\n\nOn Windows, the sort order of \"cop\", \"coop\", and \"co-op\" change when you\nchange from a linguistic comparison to an ordinal comparison. The two\nGerman sentences also compare differently using the different comparison types.\n\n## Comparisons using specific cultures\n\nThis sample stores <xref:System.Globalization.CultureInfo> objects for the en-US and de-DE cultures.\nThe comparisons are performed using a <xref:System.Globalization.CultureInfo> object to ensure a culture-specific comparison.\n\nThe culture used affects linguistic comparisons. The following example\nshows the results of comparing the two German sentences using the \"en-US\" culture\nand the \"de-DE\" culture:\n\n[!code-csharp-interactive[Comparing strings across cultures](../../../samples/snippets/csharp/how-to/strings/CompareStrings.cs#4)]\n\nCulture-sensitive comparisons are typically used to compare and sort strings input by users with other strings input by users. The characters and sorting conventions of these strings might vary depending on the locale of the user's computer. Even strings that contain identical characters might sort differently depending on the culture of the current thread. In addition, try this sample code locally on a Windows machine, and you will the following results:\n\n```console\n<coop> is less than <co-op> using en-US culture\n<coop> is greater than <co-op> using ordinal comparison\n<coop> is less than <cop> using en-US culture\n<coop> is less than <cop> using ordinal comparison\n<co-op> is less than <cop> using en-US culture\n<co-op> is less than <cop> using ordinal comparison\n```\n\nLinguistic comparisons are dependent on the current culture, and are OS dependent. You must take that into account when you work with string comparisons.\n\n## Linguistic sorting and searching strings in arrays\n\nThe following examples show how to sort and search for strings in an array using a linguistic comparison dependent on the current culture. You use the static <xref:System.Array> methods that take a <xref:System.StringComparer?displayProperty=nameWithType> parameter.\n\nThis example shows how to sort an array of strings using the current culture:\n\n[!code-csharp-interactive[Sorting an array of strings](../../../samples/snippets/csharp/how-to/strings/CompareStrings.cs#5)]\n\nOnce the array is sorted, you can search for entries using a binary search. A binary search starts in the middle of the collection to determine which half of the collection would contain the sought string. Each subsequent comparison subdivides the remaining part of the collection in half.  The array is sorted using the <xref:System.StringComparer.CurrentCulture?displayProperty=nameWithType>. The local function `ShowWhere` displays information about where the string was found. If the string was not found, the returned value indicates where it would be if it were found.\n\n[!code-csharp-interactive[Searching in a sorted array](../../../samples/snippets/csharp/how-to/strings/CompareStrings.cs#6)]\n\n## Ordinal sorting and searching in collections\n\nThe following code uses the <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> collection class to store strings. The strings are sorted using the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> method. This method needs a delegate that compares and orders two strings. The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method provides that comparison function. Run the sample and observe the order. This sort operation uses an ordinal case sensitive sort. You would use the static <xref:System.String.Compare%2A?displayProperty=nameWithType> methods to specify different comparison rules.\n\n[!code-csharp-interactive[Sorting a list of strings](../../../samples/snippets/csharp/how-to/strings/CompareStrings.cs#7)]\n\nOnce sorted, the list of strings can be searched using a binary search. The following sample shows how to search the sorted listed using the same comparison function. The local function `ShowWhere` shows where the sought text is or would be:\n\n[!code-csharp-interactive[csProgGuideStrings#11](../../../samples/snippets/csharp/how-to/strings/CompareStrings.cs#8)]\n\nAlways make sure to use the same type of comparison for sorting and searching. Using different comparison types for sorting and searching produces unexpected results.\n\nCollection classes such as <xref:System.Collections.Hashtable?displayProperty=nameWithType>, <xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> have constructors that take a <xref:System.StringComparer?displayProperty=nameWithType> parameter when the type of the elements or keys is `string`. In general, you should use these constructors whenever possible, and specify either <xref:System.StringComparer.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase?displayProperty=nameWithType>.\n\n## Reference equality and string interning\n\nNone of the samples have used <xref:System.Object.ReferenceEquals%2A>. This method determines if two strings\nare the same object. This can lead to inconsistent results in string comparisons. The following example demonstrates the *string interning* feature of C#. When a program declares two or more identical string variables, the compiler stores them all in the same location. By calling the <xref:System.Object.ReferenceEquals%2A> method, you can see that the two strings actually refer to the same object in memory. Use the <xref:System.String.Copy%2A?displayProperty=nameWithType> method to avoid interning. After the copy has been made, the two strings have different storage locations, even though they have the same value. Run the following sample to show that strings `a` and `b` are *interned* meaning they share the same storage. The strings `a` and `c` are not.\n\n[!code-csharp-interactive[Demonstrating string interning](../../../samples/snippets/csharp/how-to/strings/CompareStrings.cs#9)]\n\n> [!NOTE]\n> When you test for equality of strings, you should use the methods that explicitly specify what kind of comparison you intend to perform. Your code is much more maintainable and readable. Use the overloads of the methods of the <xref:System.String?displayProperty=nameWithType> and <xref:System.Array?displayProperty=nameWithType> classes that take a <xref:System.StringComparison> enumeration parameter. You specify which type of comparison to perform. Avoid using the `==` and `!=` operators when you test for equality. The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> instance methods always perform an ordinal case-sensitive comparison. They are primarily suited for ordering strings alphabetically.\n\nYou can intern a string or retrieve a reference to an existing interned string by calling the <xref:System.String.Intern%2A?displayProperty=nameWithType> method. To determine whether a string is interned, call the <xref:System.String.IsInterned%2A?displayProperty=nameWithType> method.\n\n## See also\n\n- <xref:System.Globalization.CultureInfo?displayProperty=nameWithType>\n- <xref:System.StringComparer?displayProperty=nameWithType>\n- [Strings](../programming-guide/strings/index.md)\n- [Comparing Strings](../../standard/base-types/comparing.md)\n- [Globalizing and Localizing Applications](/visualstudio/ide/globalizing-and-localizing-applications)\n","nodes":[{"pos":[4,272],"embed":true,"restype":"x-metadata","content":"title: \"How to: Compare strings - C# Guide\"\ndescription: Learn how to compare and order string values, with or without case, with or without culture specific ordering\nms.date: 10/03/2018\nhelpviewer_keywords: \n  - \"strings [C#], comparison\"\n  - \"comparing strings [C#]\"","nodes":[{"content":"How to: Compare strings - C# Guide","nodes":[{"pos":[0,34],"content":"How to: Compare strings - C# Guide","nodes":[{"content":"How to: Compare strings - C# Guide","pos":[0,34]}]}],"path":["title"],"nosxs":false},{"content":"Learn how to compare and order string values, with or without case, with or without culture specific ordering","nodes":[{"pos":[0,109],"content":"Learn how to compare and order string values, with or without case, with or without culture specific ordering","nodes":[{"content":"Learn how to compare and order string values, with or without case, with or without culture specific ordering","pos":[0,109]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[279,308],"content":"How to compare strings in C\\#","linkify":"How to compare strings in C\\#","nodes":[{"content":"How to compare strings in C<ph id=\"ph1\">\\#</ph>","pos":[0,29],"source":"How to compare strings in C\\#"}]},{"content":"You compare strings to answer one of two questions: \"Are these two strings equal?\"","pos":[310,392],"source":"You compare strings to answer one of two questions: \"Are these two strings\nequal?\""},{"content":"or \"In what order should these strings be placed when sorting them?\"","pos":[393,461]},{"content":"Those two questions are complicated by factors that affect string comparisons:","pos":[463,541]},{"content":"You can choose an ordinal or linguistic comparison.","pos":[545,596]},{"content":"You can choose if case matters.","pos":[599,630]},{"content":"You can choose culture-specific comparisons.","pos":[633,677]},{"content":"Linguistic comparisons are culture and platform-dependent.","pos":[680,738]},{"content":"When you compare strings, you define an order among them.","pos":[809,866]},{"content":"Comparisons are used to sort a sequence of strings.","pos":[867,918],"source":" Comparisons are\nused to sort a sequence of strings."},{"content":"Once the sequence is in a known order, it is easier to search, both for software and for humans.","pos":[919,1015],"source":" Once the sequence is in a known order,\nit is easier to search, both for software and for humans."},{"content":"Other comparisons may check if strings are the same.","pos":[1016,1068],"source":" Other comparisons\nmay check if strings are the same."},{"content":"These sameness checks are similar to equality, but some differences, such as case differences, may be ignored.","pos":[1069,1179],"source":" These sameness checks are similar to\nequality, but some differences, such as case differences, may be ignored."},{"pos":[1184,1211],"content":"Default ordinal comparisons","linkify":"Default ordinal comparisons","nodes":[{"content":"Default ordinal comparisons","pos":[0,27]}]},{"content":"The most common operations:","pos":[1213,1240]},{"content":"use an ordinal comparison, a case-sensitive comparison, and use the current culture.","pos":[1438,1522]},{"content":"The results are shown in the following example:","pos":[1523,1570]},{"content":"The default ordinal comparison does not take linguistic rules into account when comparing strings.","pos":[1716,1814],"source":"The default ordinal comparison does not take linguistic rules into account when comparing\nstrings."},{"content":"It compares the binary value of each <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object in two strings.","pos":[1815,1893],"source":" It compares the binary value of each <xref:System.Char> object in two strings."},{"content":"As a result, the default ordinal comparison is also case-sensitive.","pos":[1894,1961]},{"content":"Note that the test for equality with <ph id=\"ph1\">&lt;xref:System.String.Equals%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String.op_Equality%2A?displayProperty=nameWithType&gt;</ph> differs from string comparison using the <ph id=\"ph3\">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.String.Compare(System.String,System.String)?displayProperty=nameWithType)&gt;</ph> methods.","pos":[1964,2334],"source":"Note that the test for equality with <xref:System.String.Equals%2A?displayProperty=nameWithType> and <xref:System.String.op_Equality%2A?displayProperty=nameWithType> differs from string comparison using the <xref:System.String.CompareTo%2A?displayProperty=nameWithType> and <xref:System.String.Compare(System.String,System.String)?displayProperty=nameWithType)> methods."},{"content":"While the tests for equality perform a case-sensitive ordinal comparison, the comparison method perform a case-sensitive, culture-sensitive comparison using the current culture.","pos":[2335,2512]},{"content":"Because the default comparison methods often perform different types of comparisons, we recommend that you always make the intent of your code clear by calling an overload that explicitly specifies the type of comparison to perform.","pos":[2513,2745]},{"pos":[2750,2786],"content":"Case-insensitive ordinal comparisons","linkify":"Case-insensitive ordinal comparisons","nodes":[{"content":"Case-insensitive ordinal comparisons","pos":[0,36]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Equals(System.String,System.StringComparison)?displayProperty=nameWithType&gt;</ph> method enables you to specify a <ph id=\"ph2\">&lt;xref:System.StringComparison&gt;</ph> value of <ph id=\"ph3\">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>","pos":[2788,3037],"source":"The <xref:System.String.Equals(System.String,System.StringComparison)?displayProperty=nameWithType> method\nenables you to specify a <xref:System.StringComparison> value of\n<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>"},{"content":"for a case-insensitive ordinal comparison.","pos":[3038,3080],"source":"\nfor a case-insensitive ordinal comparison."},{"content":"There is also a static <ph id=\"ph1\">&lt;xref:System.String.Compare(System.String,System.String,System.StringComparison)?displayProperty=nameWithType&gt;</ph> method that performs a case-insensitive ordinal comparison if you specify a value of <ph id=\"ph2\">&lt;xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph> for the <ph id=\"ph3\">&lt;xref:System.StringComparison&gt;</ph> argument.","pos":[3081,3426],"source":" There is also a static\n<xref:System.String.Compare(System.String,System.String,System.StringComparison)?displayProperty=nameWithType> method that performs a case-insensitive ordinal comparison if you specify a value of <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> for the <xref:System.StringComparison> argument."},{"content":"These are shown in the following code:","pos":[3427,3465]},{"pos":[3597,3776],"content":"When performing a case-insensitive ordinal comparison, these methods use the casing conventions of the <bpt id=\"p1\">[</bpt>invariant culture<ept id=\"p1\">](xref:System.Globalization.CultureInfo.InvariantCulture)</ept>.","source":"When performing a case-insensitive ordinal comparison, these methods use the casing conventions of the [invariant culture](xref:System.Globalization.CultureInfo.InvariantCulture)."},{"pos":[3781,3803],"content":"Linguistic comparisons","linkify":"Linguistic comparisons","nodes":[{"content":"Linguistic comparisons","pos":[0,22]}]},{"content":"Strings can also be ordered using linguistic rules for the current culture.","pos":[3805,3880]},{"content":"This is sometimes referred to as \"word sort order.\"","pos":[3881,3932],"source":"\nThis is sometimes referred to as \"word sort order.\""},{"content":"When you perform a linguistic comparison, some nonalphanumeric Unicode characters might have special weights assigned.","pos":[3933,4051],"source":" When you perform a\nlinguistic comparison, some nonalphanumeric Unicode characters might have\nspecial weights assigned."},{"content":"For example, the hyphen \"-\" may have a very small weight assigned to it so that \"co-op\" and \"coop\" appear next to each other in sort order.","pos":[4052,4191],"source":" For example, the hyphen \"-\" may have a very small\nweight assigned to it so that \"co-op\" and \"coop\" appear next to each other\nin sort order."},{"content":"In addition, some Unicode characters may be equivalent to a sequence of <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> instances.","pos":[4192,4293],"source":" In addition, some Unicode characters may be equivalent to a\nsequence of <xref:System.Char> instances."},{"content":"The following example uses the phrase \"They dance in the street.\"","pos":[4294,4359],"source":" The following example uses the phrase\n\"They dance in the street.\""},{"content":"in German with the \"ss\" (U+0073 U+0073) in one string and 'ß' (U+00DF) in another.","pos":[4360,4442]},{"content":"Linguistically (in Windows), \"ss\" is equal to the German Esszet: 'ß' character in both the \"en-US\" and \"de-DE\" cultures.","pos":[4443,4563],"source":" Linguistically\n(in Windows), \"ss\" is equal to the German Esszet: 'ß' character in both the \"en-US\"\nand \"de-DE\" cultures."},{"content":"This sample demonstrates the operating system-dependent nature of linguistic comparisons.","pos":[4704,4793],"source":"This sample demonstrates the operating system-dependent nature of linguistic\ncomparisons."},{"content":"The host for the interactive window is a Linux host.","pos":[4794,4846]},{"content":"The linguistic and ordinal comparisons produce the same results.","pos":[4847,4911],"source":" The\nlinguistic and ordinal comparisons produce the same results."},{"content":"If you ran this same sample on a Windows host, you would see the following output:","pos":[4912,4994],"source":" If you\nran this same sample on a Windows host, you would see the following output:"},{"content":"On Windows, the sort order of \"cop\", \"coop\", and \"co-op\" change when you change from a linguistic comparison to an ordinal comparison.","pos":[5324,5458],"source":"On Windows, the sort order of \"cop\", \"coop\", and \"co-op\" change when you\nchange from a linguistic comparison to an ordinal comparison."},{"content":"The two German sentences also compare differently using the different comparison types.","pos":[5459,5546],"source":" The two\nGerman sentences also compare differently using the different comparison types."},{"pos":[5551,5586],"content":"Comparisons using specific cultures","linkify":"Comparisons using specific cultures","nodes":[{"content":"Comparisons using specific cultures","pos":[0,35]}]},{"content":"This sample stores <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objects for the en-US and de-DE cultures.","pos":[5588,5688],"source":"This sample stores <xref:System.Globalization.CultureInfo> objects for the en-US and de-DE cultures."},{"content":"The comparisons are performed using a <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object to ensure a culture-specific comparison.","pos":[5689,5814],"source":"\nThe comparisons are performed using a <xref:System.Globalization.CultureInfo> object to ensure a culture-specific comparison."},{"content":"The culture used affects linguistic comparisons.","pos":[5816,5864]},{"content":"The following example shows the results of comparing the two German sentences using the \"en-US\" culture and the \"de-DE\" culture:","pos":[5865,5993],"source":" The following example\nshows the results of comparing the two German sentences using the \"en-US\" culture\nand the \"de-DE\" culture:"},{"content":"Culture-sensitive comparisons are typically used to compare and sort strings input by users with other strings input by users.","pos":[6127,6253]},{"content":"The characters and sorting conventions of these strings might vary depending on the locale of the user's computer.","pos":[6254,6368]},{"content":"Even strings that contain identical characters might sort differently depending on the culture of the current thread.","pos":[6369,6486]},{"content":"In addition, try this sample code locally on a Windows machine, and you will the following results:","pos":[6487,6586]},{"content":"Linguistic comparisons are dependent on the current culture, and are OS dependent.","pos":[6904,6986]},{"content":"You must take that into account when you work with string comparisons.","pos":[6987,7057]},{"pos":[7062,7112],"content":"Linguistic sorting and searching strings in arrays","linkify":"Linguistic sorting and searching strings in arrays","nodes":[{"content":"Linguistic sorting and searching strings in arrays","pos":[0,50]}]},{"content":"The following examples show how to sort and search for strings in an array using a linguistic comparison dependent on the current culture.","pos":[7114,7252]},{"content":"You use the static <ph id=\"ph1\">&lt;xref:System.Array&gt;</ph> methods that take a <ph id=\"ph2\">&lt;xref:System.StringComparer?displayProperty=nameWithType&gt;</ph> parameter.","pos":[7253,7380],"source":" You use the static <xref:System.Array> methods that take a <xref:System.StringComparer?displayProperty=nameWithType> parameter."},{"content":"This example shows how to sort an array of strings using the current culture:","pos":[7382,7459]},{"content":"Once the array is sorted, you can search for entries using a binary search.","pos":[7587,7662]},{"content":"A binary search starts in the middle of the collection to determine which half of the collection would contain the sought string.","pos":[7663,7792]},{"content":"Each subsequent comparison subdivides the remaining part of the collection in half.","pos":[7793,7876]},{"content":"The array is sorted using the <ph id=\"ph1\">&lt;xref:System.StringComparer.CurrentCulture?displayProperty=nameWithType&gt;</ph>.","pos":[7878,7981],"source":"  The array is sorted using the <xref:System.StringComparer.CurrentCulture?displayProperty=nameWithType>."},{"content":"The local function <ph id=\"ph1\">`ShowWhere`</ph> displays information about where the string was found.","pos":[7982,8067],"source":" The local function `ShowWhere` displays information about where the string was found."},{"content":"If the string was not found, the returned value indicates where it would be if it were found.","pos":[8068,8161]},{"pos":[8292,8336],"content":"Ordinal sorting and searching in collections","linkify":"Ordinal sorting and searching in collections","nodes":[{"content":"Ordinal sorting and searching in collections","pos":[0,44]}]},{"content":"The following code uses the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601?displayProperty=nameWithType&gt;</ph> collection class to store strings.","pos":[8338,8472],"source":"The following code uses the <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> collection class to store strings."},{"content":"The strings are sorted using the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[8473,8593],"source":" The strings are sorted using the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> method."},{"content":"This method needs a delegate that compares and orders two strings.","pos":[8594,8660]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> method provides that comparison function.","pos":[8661,8769],"source":" The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> method provides that comparison function."},{"content":"Run the sample and observe the order.","pos":[8770,8807]},{"content":"This sort operation uses an ordinal case sensitive sort.","pos":[8808,8864]},{"content":"You would use the static <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=nameWithType&gt;</ph> methods to specify different comparison rules.","pos":[8865,8997],"source":" You would use the static <xref:System.String.Compare%2A?displayProperty=nameWithType> methods to specify different comparison rules."},{"content":"Once sorted, the list of strings can be searched using a binary search.","pos":[9123,9194]},{"content":"The following sample shows how to search the sorted listed using the same comparison function.","pos":[9195,9289]},{"content":"The local function <ph id=\"ph1\">`ShowWhere`</ph> shows where the sought text is or would be:","pos":[9290,9364],"source":" The local function `ShowWhere` shows where the sought text is or would be:"},{"content":"Always make sure to use the same type of comparison for sorting and searching.","pos":[9486,9564]},{"content":"Using different comparison types for sorting and searching produces unexpected results.","pos":[9565,9652]},{"content":"Collection classes such as <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWithType&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601?displayProperty=nameWithType&gt;</ph> have constructors that take a <ph id=\"ph4\">&lt;xref:System.StringComparer?displayProperty=nameWithType&gt;</ph> parameter when the type of the elements or keys is <ph id=\"ph5\">`string`</ph>.","pos":[9654,10050],"source":"Collection classes such as <xref:System.Collections.Hashtable?displayProperty=nameWithType>, <xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601?displayProperty=nameWithType> have constructors that take a <xref:System.StringComparer?displayProperty=nameWithType> parameter when the type of the elements or keys is `string`."},{"content":"In general, you should use these constructors whenever possible, and specify either <ph id=\"ph1\">&lt;xref:System.StringComparer.Ordinal?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.StringComparer.OrdinalIgnoreCase?displayProperty=nameWithType&gt;</ph>.","pos":[10051,10280],"source":" In general, you should use these constructors whenever possible, and specify either <xref:System.StringComparer.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase?displayProperty=nameWithType>."},{"pos":[10285,10324],"content":"Reference equality and string interning","linkify":"Reference equality and string interning","nodes":[{"content":"Reference equality and string interning","pos":[0,39]}]},{"content":"None of the samples have used <ph id=\"ph1\">&lt;xref:System.Object.ReferenceEquals%2A&gt;</ph>.","pos":[10326,10396],"source":"None of the samples have used <xref:System.Object.ReferenceEquals%2A>."},{"content":"This method determines if two strings are the same object.","pos":[10397,10455],"source":" This method determines if two strings\nare the same object."},{"content":"This can lead to inconsistent results in string comparisons.","pos":[10456,10516]},{"content":"The following example demonstrates the <bpt id=\"p1\">*</bpt>string interning<ept id=\"p1\">*</ept> feature of C#.","pos":[10517,10589],"source":" The following example demonstrates the *string interning* feature of C#."},{"content":"When a program declares two or more identical string variables, the compiler stores them all in the same location.","pos":[10590,10704]},{"content":"By calling the <ph id=\"ph1\">&lt;xref:System.Object.ReferenceEquals%2A&gt;</ph> method, you can see that the two strings actually refer to the same object in memory.","pos":[10705,10845],"source":" By calling the <xref:System.Object.ReferenceEquals%2A> method, you can see that the two strings actually refer to the same object in memory."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.String.Copy%2A?displayProperty=nameWithType&gt;</ph> method to avoid interning.","pos":[10846,10938],"source":" Use the <xref:System.String.Copy%2A?displayProperty=nameWithType> method to avoid interning."},{"content":"After the copy has been made, the two strings have different storage locations, even though they have the same value.","pos":[10939,11056]},{"content":"Run the following sample to show that strings <ph id=\"ph1\">`a`</ph> and <ph id=\"ph2\">`b`</ph> are <bpt id=\"p1\">*</bpt>interned<ept id=\"p1\">*</ept> meaning they share the same storage.","pos":[11057,11166],"source":" Run the following sample to show that strings `a` and `b` are *interned* meaning they share the same storage."},{"content":"The strings <ph id=\"ph1\">`a`</ph> and <ph id=\"ph2\">`c`</ph> are not.","pos":[11167,11199],"source":" The strings `a` and `c` are not."},{"pos":[11332,12062],"content":"[!NOTE]\nWhen you test for equality of strings, you should use the methods that explicitly specify what kind of comparison you intend to perform. Your code is much more maintainable and readable. Use the overloads of the methods of the <xref:System.String?displayProperty=nameWithType> and <xref:System.Array?displayProperty=nameWithType> classes that take a <xref:System.StringComparison> enumeration parameter. You specify which type of comparison to perform. Avoid using the `==` and `!=` operators when you test for equality. The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> instance methods always perform an ordinal case-sensitive comparison. They are primarily suited for ordering strings alphabetically.","leadings":["","> "],"nodes":[{"content":"When you test for equality of strings, you should use the methods that explicitly specify what kind of comparison you intend to perform. Your code is much more maintainable and readable. Use the overloads of the methods of the <xref:System.String?displayProperty=nameWithType> and <xref:System.Array?displayProperty=nameWithType> classes that take a <xref:System.StringComparison> enumeration parameter. You specify which type of comparison to perform. Avoid using the `==` and `!=` operators when you test for equality. The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> instance methods always perform an ordinal case-sensitive comparison. They are primarily suited for ordering strings alphabetically.","pos":[8,728],"nodes":[{"content":"When you test for equality of strings, you should use the methods that explicitly specify what kind of comparison you intend to perform.","pos":[0,136]},{"content":"Your code is much more maintainable and readable.","pos":[137,186]},{"content":"Use the overloads of the methods of the <ph id=\"ph1\">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph> classes that take a <ph id=\"ph3\">&lt;xref:System.StringComparison&gt;</ph> enumeration parameter.","pos":[187,403],"source":" Use the overloads of the methods of the <xref:System.String?displayProperty=nameWithType> and <xref:System.Array?displayProperty=nameWithType> classes that take a <xref:System.StringComparison> enumeration parameter."},{"content":"You specify which type of comparison to perform.","pos":[404,452]},{"content":"Avoid using the <ph id=\"ph1\">`==`</ph> and <ph id=\"ph2\">`!=`</ph> operators when you test for equality.","pos":[453,520],"source":" Avoid using the `==` and `!=` operators when you test for equality."},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.CompareTo%2A?displayProperty=nameWithType&gt;</ph> instance methods always perform an ordinal case-sensitive comparison.","pos":[521,657],"source":" The <xref:System.String.CompareTo%2A?displayProperty=nameWithType> instance methods always perform an ordinal case-sensitive comparison."},{"content":"They are primarily suited for ordering strings alphabetically.","pos":[658,720]}]}]},{"content":"You can intern a string or retrieve a reference to an existing interned string by calling the <ph id=\"ph1\">&lt;xref:System.String.Intern%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[12064,12225],"source":"You can intern a string or retrieve a reference to an existing interned string by calling the <xref:System.String.Intern%2A?displayProperty=nameWithType> method."},{"content":"To determine whether a string is interned, call the <ph id=\"ph1\">&lt;xref:System.String.IsInterned%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[12226,12349],"source":" To determine whether a string is interned, call the <xref:System.String.IsInterned%2A?displayProperty=nameWithType> method."},{"pos":[12354,12362],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[12497,12545],"content":"<bpt id=\"p1\">[</bpt>Strings<ept id=\"p1\">](../programming-guide/strings/index.md)</ept>","source":"[Strings](../programming-guide/strings/index.md)"},{"pos":[12548,12607],"content":"<bpt id=\"p1\">[</bpt>Comparing Strings<ept id=\"p1\">](../../standard/base-types/comparing.md)</ept>","source":"[Comparing Strings](../../standard/base-types/comparing.md)"},{"pos":[12610,12710],"content":"<bpt id=\"p1\">[</bpt>Globalizing and Localizing Applications<ept id=\"p1\">](/visualstudio/ide/globalizing-and-localizing-applications)</ept>","source":"[Globalizing and Localizing Applications](/visualstudio/ide/globalizing-and-localizing-applications)"}]}