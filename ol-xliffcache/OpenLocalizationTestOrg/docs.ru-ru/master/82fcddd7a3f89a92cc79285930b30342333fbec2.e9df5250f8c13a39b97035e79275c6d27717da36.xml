{"content":"---\ntitle: \"ISymUnmanagedAsyncMethodPropertiesWriter Interface\"\nms.date: \"03/30/2017\"\nms.assetid: caa71820-8058-4b6a-93a2-25ee757d92d3\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# ISymUnmanagedAsyncMethodPropertiesWriter Interface\nAllows you to define optional async method information for each method symbol. Always use with an opened method; that is, between calls to the [OpenMethod Method](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-openmethod-method.md) and the [CloseMethod Method](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-closemethod-method.md).  \n  \n## Syntax  \n  \n```idl  \n[object,uuid(FC073774-1739-4232-BD56-A027294BEC15),pointer_default(unique)]interface ISymUnmanagedAsyncMethodPropertiesWriter : IUnknown  \n```  \n  \n## Methods  \n This interface contains the following methods:  \n  \n|Method|Description|  \n|------------|-----------------|  \n|[DefineAsyncStepInfo Method](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedasyncmethodpropertieswriter-defineasyncstepinfo-method.md)|Define a group of async await operations in the current method.<br /><br /> Each yield offset matches an await's return instruction, identifying a potential yield. Each `breakpointMethod`/`breakpointOffset` pair identifies where the asynchronous operation will resume; it may be in a different method.|  \n|[DefineCatchHandlerILOffset Method](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedasyncmethodpropertieswriter-definecatchhandleriloffset-method.md)|Sets the IL offset for the compiler-generated catch handler that wraps an async method.<br /><br /> The IL offset of the generated catch is used by the debugger to handle the catch as if it were non-user code, even though it may occur in a user code method. In particular, it is used in response to a **CatchHandlerFound** exception event.|  \n|[DefineKickoffMethod Method](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedasyncmethodpropertieswriter-definekickoffmethod-method.md)|Sets the starting method that initiates the async operation.|  \n  \n## Requirements  \n **Header:** CorSym.idl, CorSym.h  \n  \n## See also\n\n- [Diagnostics Symbol Store Interfaces](../../../../docs/framework/unmanaged-api/diagnostics/diagnostics-symbol-store-interfaces.md)\n","nodes":[{"pos":[4,174],"embed":true,"restype":"x-metadata","content":"title: \"ISymUnmanagedAsyncMethodPropertiesWriter Interface\"\nms.date: \"03/30/2017\"\nms.assetid: caa71820-8058-4b6a-93a2-25ee757d92d3\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"ISymUnmanagedAsyncMethodPropertiesWriter Interface","nodes":[{"pos":[0,50],"content":"ISymUnmanagedAsyncMethodPropertiesWriter Interface","nodes":[{"content":"ISymUnmanagedAsyncMethodPropertiesWriter Interface","pos":[0,50]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[181,231],"content":"ISymUnmanagedAsyncMethodPropertiesWriter Interface","linkify":"ISymUnmanagedAsyncMethodPropertiesWriter Interface","nodes":[{"content":"ISymUnmanagedAsyncMethodPropertiesWriter Interface","pos":[0,50]}]},{"content":"Allows you to define optional async method information for each method symbol.","pos":[232,310]},{"content":"Always use with an opened method; that is, between calls to the <bpt id=\"p1\">[</bpt>OpenMethod Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-openmethod-method.md)</ept> and the <bpt id=\"p2\">[</bpt>CloseMethod Method<ept id=\"p2\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-closemethod-method.md)</ept>.","pos":[311,615],"source":" Always use with an opened method; that is, between calls to the [OpenMethod Method](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-openmethod-method.md) and the [CloseMethod Method](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-closemethod-method.md)."},{"pos":[624,630],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[796,803],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"This interface contains the following methods:","pos":[807,853]},{"content":"Method","pos":[860,866]},{"content":"Description","pos":[867,878]},{"pos":[918,1071],"content":"<bpt id=\"p1\">[</bpt>DefineAsyncStepInfo Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedasyncmethodpropertieswriter-defineasyncstepinfo-method.md)</ept>","source":"[DefineAsyncStepInfo Method](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedasyncmethodpropertieswriter-defineasyncstepinfo-method.md)"},{"content":"Define a group of async await operations in the current method.","pos":[1072,1135]},{"content":"Each yield offset matches an await's return instruction, identifying a potential yield.","pos":[1148,1235]},{"content":"Each <ph id=\"ph1\">`breakpointMethod`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`breakpointOffset`</ph> pair identifies where the asynchronous operation will resume; it may be in a different method.","pos":[1236,1373],"source":" Each `breakpointMethod`/`breakpointOffset` pair identifies where the asynchronous operation will resume; it may be in a different method."},{"pos":[1378,1545],"content":"<bpt id=\"p1\">[</bpt>DefineCatchHandlerILOffset Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedasyncmethodpropertieswriter-definecatchhandleriloffset-method.md)</ept>","source":"[DefineCatchHandlerILOffset Method](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedasyncmethodpropertieswriter-definecatchhandleriloffset-method.md)"},{"content":"Sets the IL offset for the compiler-generated catch handler that wraps an async method.","pos":[1546,1633]},{"content":"The IL offset of the generated catch is used by the debugger to handle the catch as if it were non-user code, even though it may occur in a user code method.","pos":[1646,1803]},{"content":"In particular, it is used in response to a <bpt id=\"p1\">**</bpt>CatchHandlerFound<ept id=\"p1\">**</ept> exception event.","pos":[1804,1885],"source":" In particular, it is used in response to a **CatchHandlerFound** exception event."},{"pos":[1890,2043],"content":"<bpt id=\"p1\">[</bpt>DefineKickoffMethod Method<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedasyncmethodpropertieswriter-definekickoffmethod-method.md)</ept>","source":"[DefineKickoffMethod Method](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedasyncmethodpropertieswriter-definekickoffmethod-method.md)"},{"content":"Sets the starting method that initiates the async operation.","pos":[2044,2104]},{"pos":[2114,2126],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2130,2162],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorSym.idl, CorSym.h","source":"**Header:** CorSym.idl, CorSym.h"},{"pos":[2171,2179],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2183,2313],"content":"<bpt id=\"p1\">[</bpt>Diagnostics Symbol Store Interfaces<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/diagnostics-symbol-store-interfaces.md)</ept>","source":"[Diagnostics Symbol Store Interfaces](../../../../docs/framework/unmanaged-api/diagnostics/diagnostics-symbol-store-interfaces.md)"}]}