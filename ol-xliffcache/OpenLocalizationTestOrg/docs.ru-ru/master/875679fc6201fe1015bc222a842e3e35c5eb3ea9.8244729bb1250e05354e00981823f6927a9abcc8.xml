{"content":"---\ntitle: \"How to: Distinguish Between Clicks and Double-Clicks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"mouse, click\"\n  - \"mouse, double-click\"\n  - \"mouse clicks, single versus double\"\nms.assetid: d836ac8c-85bc-4f3a-a761-8aee03dc682c\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Distinguish Between Clicks and Double-Clicks\nTypically, a single *click* initiates a user interface (UI) action and a *double-click* extends the action. For example, one click usually selects an item, and a double-click edits the selected item. However, the Windows Forms click events do not easily accommodate a scenario where a click and a double-click perform incompatible actions, because an action tied to the <xref:System.Windows.Forms.Control.Click> or <xref:System.Windows.Forms.Control.MouseClick> event is performed before the action tied to the <xref:System.Windows.Forms.Control.DoubleClick> or <xref:System.Windows.Forms.Control.MouseDoubleClick> event. This topic demonstrates two solutions to this problem. One solution is to handle the double-click event and roll back the actions in the handling of the click event. In rare situations you may need to simulate click and double-click behavior by handling the <xref:System.Windows.Forms.Control.MouseDown> event and by using the <xref:System.Windows.Forms.SystemInformation.DoubleClickTime%2A> and <xref:System.Windows.Forms.SystemInformation.DoubleClickSize%2A> properties of the <xref:System.Windows.Forms.SystemInformation> class. You measure the time between clicks and if a second click occurs before the value of <xref:System.Windows.Forms.SystemInformation.DoubleClickTime%2A> is reached and the click is within a rectangle defined by <xref:System.Windows.Forms.SystemInformation.DoubleClickSize%2A>, perform the double-click action; otherwise, perform the click action.  \n  \n### To roll back a click action  \n  \n-   Ensure that the control you are working with has standard double-click behavior. If not, enable the control with the <xref:System.Windows.Forms.Control.SetStyle%2A> method. Handle the double-click event and roll back the click action as well as the double-click action. The following code example demonstrates a how to create a custom button with double-click enabled, as well as how to roll back the click action in the double-click event handling code.  \n  \n     [!code-csharp[System.Windows.Forms.ButtonDoubleClick#1](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ButtonDoubleClick/CS/Form1.cs#1)]\n     [!code-vb[System.Windows.Forms.ButtonDoubleClick#1](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ButtonDoubleClick/VB/Form1.vb#1)]  \n  \n### To distinguish between clicks in the MouseDown event  \n  \n-   Handle the <xref:System.Windows.Forms.Control.MouseDown> event and determine the location and time span between clicks using the appropriate <xref:System.Windows.Forms.SystemInformation> properties and a <xref:System.Windows.Forms.Timer> component. Perform the appropriate action depending on whether a click or double-click takes place. The following code example demonstrates how this can be done.  \n  \n     [!code-cpp[System.Windows.Forms.SingleVersusDoubleClick#0](../../../samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SingleVersusDoubleClick/cpp/form1.cpp#0)]\n     [!code-csharp[System.Windows.Forms.SingleVersusDoubleClick#0](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SingleVersusDoubleClick/CS/form1.cs#0)]\n     [!code-vb[System.Windows.Forms.SingleVersusDoubleClick#0](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SingleVersusDoubleClick/VB/form1.vb#0)]  \n  \n## Compiling the Code  \n These examples require:  \n  \n-   References to the System, System.Drawing, and System.Windows.Forms assemblies.  \n  \n For information about building these examples from the command line for [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)] or [!INCLUDE[csprcs](../../../includes/csprcs-md.md)], see [Building from the Command Line](~/docs/visual-basic/reference/command-line-compiler/building-from-the-command-line.md) or [Command-line Building With csc.exe](~/docs/csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md). You can also build these examples in [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)] by pasting the code into new projects.  Also see [How to: Compile and Run a Complete Windows Forms Code Example Using Visual Studio](http://msdn.microsoft.com/library/Bb129228\\(v=vs.110\\)).  \n  \n## See Also  \n [Mouse Input in a Windows Forms Application](../../../docs/framework/winforms/mouse-input-in-a-windows-forms-application.md)","nodes":[{"pos":[4,520],"embed":true,"restype":"x-metadata","content":"title: \"How to: Distinguish Between Clicks and Double-Clicks | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"mouse, click\"\n  - \"mouse, double-click\"\n  - \"mouse clicks, single versus double\"\nms.assetid: d836ac8c-85bc-4f3a-a761-8aee03dc682c\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","nodes":[{"content":"How to: Distinguish Between Clicks and Double-Clicks | Microsoft Docs","nodes":[{"pos":[0,69],"content":"How to: Distinguish Between Clicks and Double-Clicks | Microsoft Docs","nodes":[{"content":"How to: Distinguish Between Clicks and Double-Clicks | Microsoft Docs","pos":[0,69]}]}],"path":["title"]}],"yml":true},{"pos":[527,579],"content":"How to: Distinguish Between Clicks and Double-Clicks","linkify":"How to: Distinguish Between Clicks and Double-Clicks","nodes":[{"content":"How to: Distinguish Between Clicks and Double-Clicks","pos":[0,52]}]},{"content":"Typically, a single <bpt id=\"p1\">*</bpt>click<ept id=\"p1\">*</ept> initiates a user interface (UI) action and a <bpt id=\"p2\">*</bpt>double-click<ept id=\"p2\">*</ept> extends the action.","pos":[580,687],"source":"Typically, a single *click* initiates a user interface (UI) action and a *double-click* extends the action."},{"content":"For example, one click usually selects an item, and a double-click edits the selected item.","pos":[688,779]},{"content":"However, the Windows Forms click events do not easily accommodate a scenario where a click and a double-click perform incompatible actions, because an action tied to the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event is performed before the action tied to the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> event.","pos":[780,1201],"source":" However, the Windows Forms click events do not easily accommodate a scenario where a click and a double-click perform incompatible actions, because an action tied to the <xref:System.Windows.Forms.Control.Click> or <xref:System.Windows.Forms.Control.MouseClick> event is performed before the action tied to the <xref:System.Windows.Forms.Control.DoubleClick> or <xref:System.Windows.Forms.Control.MouseDoubleClick> event."},{"content":"This topic demonstrates two solutions to this problem.","pos":[1202,1256]},{"content":"One solution is to handle the double-click event and roll back the actions in the handling of the click event.","pos":[1257,1367]},{"content":"In rare situations you may need to simulate click and double-click behavior by handling the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event and by using the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.SystemInformation.DoubleClickTime%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Forms.SystemInformation.DoubleClickSize%2A&gt;</ph> properties of the <ph id=\"ph4\">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> class.","pos":[1368,1733],"source":" In rare situations you may need to simulate click and double-click behavior by handling the <xref:System.Windows.Forms.Control.MouseDown> event and by using the <xref:System.Windows.Forms.SystemInformation.DoubleClickTime%2A> and <xref:System.Windows.Forms.SystemInformation.DoubleClickSize%2A> properties of the <xref:System.Windows.Forms.SystemInformation> class."},{"content":"You measure the time between clicks and if a second click occurs before the value of <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SystemInformation.DoubleClickTime%2A&gt;</ph> is reached and the click is within a rectangle defined by <ph id=\"ph2\">&lt;xref:System.Windows.Forms.SystemInformation.DoubleClickSize%2A&gt;</ph>, perform the double-click action; otherwise, perform the click action.","pos":[1734,2077],"source":" You measure the time between clicks and if a second click occurs before the value of <xref:System.Windows.Forms.SystemInformation.DoubleClickTime%2A> is reached and the click is within a rectangle defined by <xref:System.Windows.Forms.SystemInformation.DoubleClickSize%2A>, perform the double-click action; otherwise, perform the click action."},{"pos":[2087,2114],"content":"To roll back a click action","linkify":"To roll back a click action","nodes":[{"content":"To roll back a click action","pos":[0,27]}]},{"content":"Ensure that the control you are working with has standard double-click behavior.","pos":[2124,2204]},{"content":"If not, enable the control with the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> method.","pos":[2205,2296],"source":" If not, enable the control with the <xref:System.Windows.Forms.Control.SetStyle%2A> method."},{"content":"Handle the double-click event and roll back the click action as well as the double-click action.","pos":[2297,2393]},{"content":"The following code example demonstrates a how to create a custom button with double-click enabled, as well as how to roll back the click action in the double-click event handling code.","pos":[2394,2578]},{"pos":[2589,2924],"content":"[!code-csharp[System.Windows.Forms.ButtonDoubleClick#1](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ButtonDoubleClick/CS/Form1.cs#1)]\n [!code-vb[System.Windows.Forms.ButtonDoubleClick#1](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ButtonDoubleClick/VB/Form1.vb#1)]","leadings":["","    "],"nodes":[]},{"pos":[2934,2986],"content":"To distinguish between clicks in the MouseDown event","linkify":"To distinguish between clicks in the MouseDown event","nodes":[{"content":"To distinguish between clicks in the MouseDown event","pos":[0,52]}]},{"content":"Handle the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event and determine the location and time span between clicks using the appropriate <ph id=\"ph2\">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> properties and a <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component.","pos":[2996,3244],"source":"Handle the <xref:System.Windows.Forms.Control.MouseDown> event and determine the location and time span between clicks using the appropriate <xref:System.Windows.Forms.SystemInformation> properties and a <xref:System.Windows.Forms.Timer> component."},{"content":"Perform the appropriate action depending on whether a click or double-click takes place.","pos":[3245,3333]},{"content":"The following code example demonstrates how this can be done.","pos":[3334,3395]},{"pos":[3406,3943],"content":"[!code-cpp[System.Windows.Forms.SingleVersusDoubleClick#0](../../../samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SingleVersusDoubleClick/cpp/form1.cpp#0)]\n [!code-csharp[System.Windows.Forms.SingleVersusDoubleClick#0](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SingleVersusDoubleClick/CS/form1.cs#0)]\n [!code-vb[System.Windows.Forms.SingleVersusDoubleClick#0](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SingleVersusDoubleClick/VB/form1.vb#0)]","leadings":["","    ","    "],"nodes":[]},{"pos":[3952,3970],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"These examples require:","pos":[3974,3997]},{"content":"References to the System, System.Drawing, and System.Windows.Forms assemblies.","pos":[4007,4085]},{"content":"For information about building these examples from the command line for <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph> or <ph id=\"ph2\">[!INCLUDE[csprcs](../../../includes/csprcs-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Building from the Command Line<ept id=\"p1\">](~/docs/visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept> or <bpt id=\"p2\">[</bpt>Command-line Building With csc.exe<ept id=\"p2\">](~/docs/csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>.","pos":[4092,4523],"source":"For information about building these examples from the command line for [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)] or [!INCLUDE[csprcs](../../../includes/csprcs-md.md)], see [Building from the Command Line](~/docs/visual-basic/reference/command-line-compiler/building-from-the-command-line.md) or [Command-line Building With csc.exe](~/docs/csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)."},{"content":"You can also build these examples in <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> by pasting the code into new projects.","pos":[4524,4650],"source":" You can also build these examples in [!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)] by pasting the code into new projects."},{"content":"Also see <bpt id=\"p1\">[</bpt>How to: Compile and Run a Complete Windows Forms Code Example Using Visual Studio<ept id=\"p1\">](http://msdn.microsoft.com/library/Bb129228\\(v=vs.110\\))</ept>.","pos":[4652,4801],"source":"  Also see [How to: Compile and Run a Complete Windows Forms Code Example Using Visual Studio](http://msdn.microsoft.com/library/Bb129228\\(v=vs.110\\))."},{"pos":[4810,4818],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4822,4946],"content":"<bpt id=\"p1\">[</bpt>Mouse Input in a Windows Forms Application<ept id=\"p1\">](../../../docs/framework/winforms/mouse-input-in-a-windows-forms-application.md)</ept>","source":"[Mouse Input in a Windows Forms Application](../../../docs/framework/winforms/mouse-input-in-a-windows-forms-application.md)"}]}