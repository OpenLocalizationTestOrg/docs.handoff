<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="threading-model.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8725967f2f2f9d8b481c72063f89af1dd1ce8f32</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\threading-model.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec8673a53153ffad021244c8c8527c46f38c1c3b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5dd2b3120e9d939df10aa3b2a355213211221f2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Threading Model | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Threading Model</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> is designed to save developers from the difficulties of threading.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, the majority of              <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> developers won't have to write an interface that uses more than one thread.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Because multithreaded programs are complex and difficult to debug, they should be avoided when single-threaded solutions exist.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>No matter how well architected, however, no              <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> framework will ever be able to provide a single-threaded solution for every sort of problem.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> comes close, but there are still situations where multiple threads improve              <ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> responsiveness or application performance.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>After discussing some background material, this paper explores some of these situations and then concludes with a discussion of some lower-level details.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic discusses threading by using the                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> method for asynchronous calls.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also make asynchronous calls by calling the                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.InvokeAsync%2A&gt;</ph> method, which take an                  <ph id="ph2">&lt;xref:System.Action&gt;</ph> or                  <ph id="ph3">&lt;xref:System.Func%601&gt;</ph> as a parameter.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.InvokeAsync%2A&gt;</ph> method returns a                  <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> or                  <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherOperation%601&gt;</ph>, which has a                  <ph id="ph4">&lt;xref:System.Windows.Threading.DispatcherOperation.Task%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use the                  <ph id="ph1">`await`</ph> keyword with either the                  <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> or the associated                  <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you need to wait synchronously for the                  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> that is returned by a                  <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> or                  <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherOperation%601&gt;</ph>, call the                  <ph id="ph4">&lt;xref:System.Windows.Threading.TaskExtensions.DispatcherOperationWait%2A&gt;</ph> extension method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Calling                  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName&gt;</ph> will result in a deadlock.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about using a                  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> to perform asynchronous operations, see Task Parallelism.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> method also has overloads that take an                  <ph id="ph2">&lt;xref:System.Action&gt;</ph> or                  <ph id="ph3">&lt;xref:System.Func%601&gt;</ph> as a parameter.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use the                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> method to make synchronous calls by passing in a delegate,                  <ph id="ph2">&lt;xref:System.Action&gt;</ph> or                  <ph id="ph3">&lt;xref:System.Func%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Overview and the Dispatcher</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Typically,                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications start with two threads: one for handling rendering and another for managing the                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The rendering thread effectively runs hidden in the background while the                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread receives input, handles events, paints the screen, and runs application code.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Most applications use a single                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread, although in some situations it is best to use several.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Weâ€™ll discuss this with an example later.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread queues work items inside an object called a                  <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> selects work items on a priority basis and runs each one to completion.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Every                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread must have at least one                  <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>, and each                  <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> can execute work items in exactly one thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The trick to building responsive, user-friendly applications is to maximize the                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> throughput by keeping the work items small.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This way items never get stale sitting in the                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> queue waiting for processing.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Any perceivable delay between input and response can frustrate a user.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>How then are                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications supposed to handle big operations?</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>What if your code involves a large calculation or needs to query a database on some remote server?</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Usually, the answer is to handle the big operation in a separate thread, leaving the                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread free to tend to items in the                  <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> queue.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When the big operation is complete, it can report its result back to the                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread for display.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Historically,                  <ph id="ph1">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph> allows                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> elements to be accessed only by the thread that created them.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This means that a background thread in charge of some long-running task cannot update a text box when it is finished.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph> does this to ensure the integrity of                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> components.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A list box could look strange if its contents were updated by a background thread during painting.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> has a built-in mutual exclusion mechanism that enforces this coordination.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Most classes in                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> derive from                  <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>At construction, a                  <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> stores a reference to the                  <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> linked to the currently running thread.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In effect, the                  <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> associates with the thread that creates it.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>During program execution, a                  <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> can call its public                  <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A&gt;</ph> examines the                  <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the current thread and compares it to the                  <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> reference stored during construction.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If they donâ€™t match,                  <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A&gt;</ph> throws an exception.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A&gt;</ph> is intended to be called at the beginning of every method belonging to a                  <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If only one thread can modify the                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, how do background threads interact with the user?</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A background thread can ask the                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread to perform an operation on its behalf.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It does this by registering a work item with the                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> of the                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> class provides two methods for registering work items:                  <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> and                  <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Both methods schedule a delegate for execution.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous call â€“ that is, it doesnâ€™t return until the                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread actually finishes executing the delegate.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous and returns immediately.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> orders the elements in its queue by priority.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>There are ten levels that may be specified when adding an element to the                  <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> queue.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These priorities are maintained in the                  <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Detailed information about                  <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> levels can be found in the                  <ph id="ph2">[!INCLUDE[TLA2#tla_winfxsdk](../../../../includes/tla2sharptla-winfxsdk-md.md)]</ph> documentation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Threads in Action: The Samples</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A Single-Threaded Application with a Long-Running Calculation</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Most                          <ph id="ph1">[!INCLUDE[TLA#tla_gui#plural](../../../../includes/tlasharptla-guisharpplural-md.md)]</ph> spend a large portion of their time idle while waiting for events that are generated in response to user interactions.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>With careful programming this idle time can be used constructively, without affecting the responsiveness of the                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> threading model doesnâ€™t allow input to interrupt an operation happening in the                          <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This means you must be sure to return to the                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> periodically to process pending input events before they get stale.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Prime numbers screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/threadingprimenumberscreenshot.PNG "</bpt>ThreadingPrimeNumberScreenShot<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This simple application counts upwards from three, searching for prime numbers.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When the user clicks the                          <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button, the search begins.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When the program finds a prime, it updates the user interface with its discovery.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>At any point, the user can stop the search.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Although simple enough, the prime number search could go on forever, which presents some difficulties.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If we handled the entire search inside of the click event handler of the button, we would never give the                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread a chance to handle other events.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> would be unable to respond to input or process messages.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It would never repaint and never respond to button clicks.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>We could conduct the prime number search in a separate thread, but then we would need to deal with synchronization issues.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>With a single-threaded approach, we can directly update the label that lists the largest prime found.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If we break up the task of calculation into manageable chunks, we can periodically return to the                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> and process events.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>We can give                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> an opportunity to repaint and process input.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The best way to split processing time between calculation and event handling is to manage calculation from the                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>By using the                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> method, we can schedule prime number checks in the same queue that                          <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> events are drawn from.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In our example, we schedule only a single prime number check at a time.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>After the prime number check is complete, we schedule the next check immediately.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This check proceeds only after pending                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> events have been handled.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Dispatcher queue illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/threadingdispatcherqueue.PNG "</bpt>ThreadingDispatcherQueue<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_word](../../../../includes/tlasharptla-word-md.md)]</ph> accomplishes spell checking using this mechanism.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Spell checking is done in the background using the idle time of the                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Let's take a look at the code.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following example shows the XAML that creates the user interface.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following example shows the code-behind.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following example shows the event handler for the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Besides updating the text on the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, this handler is responsible for scheduling the first prime number check by adding a delegate to the                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> queue.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Sometime after this event handler has completed its work, the                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> will select this delegate for execution.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>As we mentioned earlier,                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is the                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> member used to schedule a delegate for execution.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In this case, we choose the                          <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> priority.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> will execute this delegate only when there are no important events to process.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> responsiveness is more important than number checking.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>We also pass a new delegate representing the number-checking routine.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This method checks if the next odd number is prime.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If it is prime, the method directly updates the                          <ph id="ph1">`bigPrime`</ph><ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> to reflect its discovery.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>We can do this because the calculation is occurring in the same thread that was used to create the component.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Had we chosen to use a separate thread for the calculation, we would have to use a more complicated synchronization mechanism and execute the update in the                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Weâ€™ll demonstrate this situation next.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For the complete source code for this sample, see the                          <bpt id="p1">[</bpt>Single-Threaded Application with Long-Running Calculation Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160038)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Handling a Blocking Operation with a Background Thread</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Handling blocking operations in a graphical application can be difficult.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>We donâ€™t want to call blocking methods from event handlers because the application will appear to freeze up.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>We can use a separate thread to handle these operations, but when weâ€™re done, we have to synchronize with the                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread because we canâ€™t directly modify the                          <ph id="ph2">[!INCLUDE[TLA2#tla_gui](../../../../includes/tla2sharptla-gui-md.md)]</ph> from our worker thread.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>We can use                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> to insert delegates into the                          <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> of the                          <ph id="ph4">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Eventually, these delegates will be executed with permission to modify                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> elements.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In this example, we mimic a remote procedure call that retrieves a weather forecast.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>We use a separate worker thread to execute this call, and we schedule an update method in the                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> of the                          <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread when weâ€™re finished.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Weather UI screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/threadingweatheruiscreenshot.PNG "</bpt>ThreadingWeatherUIScreenShot<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following are some of the details to be noted.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Creating the Button Handler</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When the button is clicked, we display the clock drawing and start animating it.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>We disable the button.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>We invoke the                          <ph id="ph1">`FetchWeatherFromServer`</ph> method in a new thread, and then we return, allowing the                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> to process events while we wait to collect the weather forecast.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Fetching the Weather</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To keep things simple, we donâ€™t actually have any networking code in this example.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Instead, we simulate the delay of network access by putting our new thread to sleep for four seconds.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>In this time, the original                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread is still running and responding to events.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To show this, weâ€™ve left an animation running, and the minimize and maximize buttons also continue to work.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>When the delay is finished, and weâ€™ve randomly selected our weather forecast, itâ€™s time to report back to the                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>We do this by scheduling a call to                          <ph id="ph1">`UpdateUserInterface`</ph> in the                          <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread using that threadâ€™s                          <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>We pass a string describing the weather to this scheduled method call.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Updating the                                  <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>When the                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> in the                          <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread has time, it executes the scheduled call to                          <ph id="ph3">`UpdateUserInterface`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This method stops the clock animation and chooses an image to describe the weather.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>It displays this image and restores the "fetch forecast" button.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Multiple Windows, Multiple Threads</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Some                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications require multiple top-level windows.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>It is perfectly acceptable for one Thread/                         <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> combination to manage multiple windows, but sometimes several threads do a better job.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This is especially true if there is any chance that one of the windows will monopolize the thread.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph> Explorer works in this fashion.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Each new Explorer window belongs to the original process, but it is created under the control of an independent thread.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>By using a                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph><ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph> control, we can display Web pages.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>We can easily create a simple                          <ph id="ph1">[!INCLUDE[TLA2#tla_ie](../../../../includes/tla2sharptla-ie-md.md)]</ph> substitute.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>We start with an important feature: the ability to open a new explorer window.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When the user clicks the "new window" button, we launch a copy of our window in a separate thread.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This way, long-running or blocking operations in one of the windows wonâ€™t lock all the other windows.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>In reality, the Web browser model has its own complicated threading model.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Weâ€™ve chosen it because it should be familiar to most readers.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following example shows the code.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The following threading segments of this code are the most interesting to us in this context:</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This method is called when the "new window" button is clicked.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>It creates a new thread and starts it asynchronously.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This method is the starting point for the new thread.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>We create a new window under the control of this thread.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> automatically creates a new                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> to manage the new thread.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>All we have to do to make the window functional is to start the                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Technical Details and Stumbling Points</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Writing Components Using Threading</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">[!INCLUDE[TLA#tla_netframewk](../../../../includes/tlasharptla-netframewk-md.md)]</ph> Developer's Guide describes a pattern for how a component can expose asynchronous behavior to its clients (see                          <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](../../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For instance, suppose we wanted to package the                          <ph id="ph1">`FetchWeatherFromServer`</ph> method into a reusable, nongraphical component.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Following the standard                          <ph id="ph1">[!INCLUDE[TLA#tla_netframewk](../../../../includes/tlasharptla-netframewk-md.md)]</ph> pattern, this would look something like the following.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetWeatherAsync`</ph> would use one of the techniques described earlier, such as creating a background thread, to do the work asynchronously, not blocking the calling thread.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>One of the most important parts of this pattern is calling the                          <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Completed`</ph> method on the same thread that called the                          <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph2">`Async`</ph> method to begin with.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You could do this using                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> fairly easily, by storing                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;</ph>â€”but then the nongraphical component could only be used in                          <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications, not in                          <ph id="ph4">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> or                          <ph id="ph5">[!INCLUDE[TLA#tla_aspnet](../../../../includes/tlasharptla-aspnet-md.md)]</ph> programs.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherSynchronizationContext&gt;</ph> class addresses this needâ€”think of it as a simplified version of                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that works with other                          <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> frameworks as well.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Nested Pumping</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Sometimes it is not feasible to completely lock up the                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Letâ€™s consider the                          <ph id="ph1">&lt;xref:System.Windows.MessageBox.Show%2A&gt;</ph> method of the                          <ph id="ph2">&lt;xref:System.Windows.MessageBox&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.MessageBox.Show%2A&gt;</ph> doesnâ€™t return until the user clicks the OK button.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>It does, however, create a window that must have a message loop in order to be interactive.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>While we are waiting for the user to click OK, the original application window does not respond to user input.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>It does, however, continue to process paint messages.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The original window redraws itself when covered and revealed.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>MessageBox with an "OK" button<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/threadingnestedpumping.png "</bpt>ThreadingNestedPumping<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Some thread must be in charge of the message box window.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> could create a new thread just for the message box window, but this thread would be unable to paint the disabled elements in the original window (remember the earlier discussion of mutual exclusion).</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Instead,                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> uses a nested message processing system.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> class includes a special method called                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.PushFrame%2A&gt;</ph>, which stores an applicationâ€™s current execution point then begins a new message loop.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>When the nested message loop finishes, execution resumes after the original                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.PushFrame%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>In this case,                          <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.PushFrame%2A&gt;</ph> maintains the program context at the call to                          <ph id="ph2">&lt;xref:System.Windows.MessageBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.MessageBox.Show%2A&gt;</ph>, and it starts a new message loop to repaint the background window and handle input to the message box window.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>When the user clicks OK and clears the pop-up window, the nested loop exits and control resumes after the call to                          <ph id="ph1">&lt;xref:System.Windows.MessageBox.Show%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Stale Routed Events</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The routed event system in                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> notifies entire trees when events are raised.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>When the left mouse button is pressed over the ellipse,                          <ph id="ph1">`handler2`</ph> is executed.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>After                          <ph id="ph1">`handler2`</ph> finishes, the event is passed along to the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> object, which uses                          <ph id="ph3">`handler1`</ph> to process it.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This happens only if                          <ph id="ph1">`handler2`</ph> does not explicitly mark the event object as handled.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Itâ€™s possible that                          <ph id="ph1">`handler2`</ph> will take a great deal of time processing this event.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`handler2`</ph> might use                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.PushFrame%2A&gt;</ph> to begin a nested message loop that doesnâ€™t return for hours.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>If                          <ph id="ph1">`handler2`</ph> does not mark the event as handled when this message loop is complete, the event is passed up the tree even though it is very old.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Reentrancy and Locking</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The locking mechanism of the                          <ph id="ph1">[!INCLUDE[TLA#tla_clr](../../../../includes/tlasharptla-clr-md.md)]</ph> doesnâ€™t behave exactly as one might imagine; one might expect a thread to cease operation completely when requesting a lock.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>In actuality, the thread continues to receive and process high-priority messages.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>This helps prevent deadlocks and make interfaces minimally responsive, but it introduces the possibility for subtle bugs.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The vast majority of the time you donâ€™t need to know anything about this, but under rare circumstances (usually involving                          <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window messages or COM STA components) this can be worth knowing.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Most interfaces are not built with thread safety in mind because developers work under the assumption that a                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> is never accessed by more than one thread.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>In this case, that single thread may make environmental changes at unexpected times, causing those ill effects that the                          <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> mutual exclusion mechanism is supposed to solve.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Consider the following pseudocode:</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Threading reentrancy diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/threadingreentrancy.png "</bpt>ThreadingReentrancy<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Most of the time thatâ€™s the right thing, but there are times in                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> where such unexpected reentrancy can really cause problems.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>So, at certain key times,                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> calls                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</ph>, which changes the lock instruction for that thread to use the                          <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> reentrancy-free lock, instead of the usual                          <ph id="ph4">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> lock.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>So why did the                          <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> team choose this behavior?</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>It had to do with COM STA objects and the finalization thread.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>When an object is garbage collected, its                          <ph id="ph1">`Finalize`</ph> method is run on the dedicated finalizer thread, not the                          <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>And therein lies the problem, because a COM STA object that was created on the                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread can only be disposed on the                          <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> does the equivalent of a                          <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> (in this case using Win32â€™s                          <ph id="ph3">`SendMessage`</ph>).</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>But if the                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread is busy, the finalizer thread is stalled and the COM STA object canâ€™t be disposed, which creates a serious memory leak.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>So the                          <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> team made the tough call to make locks work the way they do.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The task for                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> is to avoid unexpected reentrancy without reintroducing the memory leak, which is why we donâ€™t block reentrancy everywhere.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single-Threaded Application with Long-Running Calculation Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160038)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>