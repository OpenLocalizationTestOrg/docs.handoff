{"content":"---\ntitle: \"var (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"var\"\n  - \"var_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"var keyword [C#]\"\nms.assetid: 0777850a-2691-4e3e-927f-0c850f5efe15\ncaps.latest.revision: 13\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# var (C# Reference)\nBeginning in Visual C# 3.0, variables that are declared at method scope can have an implicit \"type\" `var`. An implicitly typed local variable is strongly typed just as if you had declared the type yourself, but the compiler determines the type. The following two declarations of `i` are functionally equivalent:  \n  \n```  \nvar i = 10; // implicitly typed  \nint i = 10; //explicitly typed  \n```  \n  \n For more information, see [Implicitly Typed Local Variables](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md) and [Type Relationships in LINQ Query Operations](../../../csharp/programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md).  \n  \n## Example  \n The following example shows two query expressions. In the first expression, the use of `var` is permitted but is not required, because the type of the query result can be stated explicitly as an `IEnumerable<string>`. However, in the second expression, `var` must be used because the result is a collection of anonymous types, and the name of that type is not accessible except to the compiler itself. Note that in Example #2, the `foreach` iteration variable `item` must also be implicitly typed.  \n  \n [!code-cs[csrefKeywordsTypes#18](../../../csharp/language-reference/keywords/codesnippet/CSharp/var_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Implicitly Typed Local Variables](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)\n","nodes":[{"pos":[4,556],"embed":true,"restype":"x-metadata","content":"title: \"var (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"var\"\n  - \"var_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"var keyword [C#]\"\nms.assetid: 0777850a-2691-4e3e-927f-0c850f5efe15\ncaps.latest.revision: 13\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"var (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,35],"content":"var (C# Reference) | Microsoft Docs","nodes":[{"content":"var (C# Reference) | Microsoft Docs","pos":[0,35]}]}],"path":["title"]}],"yml":true},{"pos":[563,581],"content":"var (C# Reference)","linkify":"var (C# Reference)","nodes":[{"content":"var (C# Reference)","pos":[0,18]}]},{"content":"Beginning in Visual C# 3.0, variables that are declared at method scope can have an implicit \"type\" <ph id=\"ph1\">`var`</ph>.","pos":[582,688],"source":"Beginning in Visual C# 3.0, variables that are declared at method scope can have an implicit \"type\" `var`."},{"content":"An implicitly typed local variable is strongly typed just as if you had declared the type yourself, but the compiler determines the type.","pos":[689,826]},{"content":"The following two declarations of <ph id=\"ph1\">`i`</ph> are functionally equivalent:","pos":[827,893],"source":" The following two declarations of `i` are functionally equivalent:"},{"pos":[982,1280],"content":"For more information, see <bpt id=\"p1\">[</bpt>Implicitly Typed Local Variables<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept> and <bpt id=\"p2\">[</bpt>Type Relationships in LINQ Query Operations<ept id=\"p2\">](../../../csharp/programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md)</ept>.","source":"For more information, see [Implicitly Typed Local Variables](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md) and [Type Relationships in LINQ Query Operations](../../../csharp/programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md)."},{"pos":[1289,1296],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows two query expressions.","pos":[1300,1350]},{"content":"In the first expression, the use of <ph id=\"ph1\">`var`</ph> is permitted but is not required, because the type of the query result can be stated explicitly as an <ph id=\"ph2\">`IEnumerable&lt;string&gt;`</ph>.","pos":[1351,1517],"source":" In the first expression, the use of `var` is permitted but is not required, because the type of the query result can be stated explicitly as an `IEnumerable<string>`."},{"content":"However, in the second expression, <ph id=\"ph1\">`var`</ph> must be used because the result is a collection of anonymous types, and the name of that type is not accessible except to the compiler itself.","pos":[1518,1701],"source":" However, in the second expression, `var` must be used because the result is a collection of anonymous types, and the name of that type is not accessible except to the compiler itself."},{"content":"Note that in Example #2, the <ph id=\"ph1\">`foreach`</ph> iteration variable <ph id=\"ph2\">`item`</ph> must also be implicitly typed.","pos":[1702,1797],"source":" Note that in Example #2, the `foreach` iteration variable `item` must also be implicitly typed."},{"pos":[1919,1927],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1931,1991],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1995,2062],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Implicitly Typed Local Variables<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>","pos":[2066,2191],"source":"[Implicitly Typed Local Variables](../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)"}]}