{"content":"---\ntitle: \"How to: Define Abstract Properties (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"properties [C#], abstract\"\n  - \"abstract properties [C#]\"\nms.assetid: 672a90eb-47b9-4ae0-9914-af53852fddcb\ncaps.latest.revision: 13\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Define Abstract Properties (C# Programming Guide)\nThe following example shows how to define [abstract](../../../csharp/language-reference/keywords/abstract.md) properties. An abstract property declaration does not provide an implementation of the property accessors -- it declares that the class supports properties, but leaves the accessor implementation to derived classes. The following example demonstrates how to implement the abstract properties inherited from a base class.  \n  \n This sample consists of three files, each of which is compiled individually and its resulting assembly is referenced by the next compilation:  \n  \n-   abstractshape.cs: the `Shape` class that contains an abstract `Area` property.  \n  \n-   shapes.cs: The subclasses of the `Shape` class.  \n  \n-   shapetest.cs: A test program to display the areas of some `Shape`-derived objects.  \n  \n To compile the example, use the following command:  \n  \n `csc abstractshape.cs shapes.cs shapetest.cs`  \n  \n This will create the executable file shapetest.exe.  \n  \n## Example  \n This file declares the `Shape` class that contains the `Area` property of the type `double`.  \n  \n [!code-cs[csProgGuideInheritance#1](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-define-abstract-properties_1.cs)]  \n  \n-   Modifiers on the property are placed on the property declaration itself. For example:  \n  \n    ```  \n    public abstract double Area  \n    ```  \n  \n-   When declaring an abstract property (such as `Area` in this example), you simply indicate what property accessors are available, but do not implement them. In this example, only a [get](../../../csharp/language-reference/keywords/get.md) accessor is available, so the property is read-only.  \n  \n## Example  \n The following code shows three subclasses of `Shape` and how they override the `Area` property to provide their own implementation.  \n  \n [!code-cs[csProgGuideInheritance#2](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-define-abstract-properties_2.cs)]  \n  \n## Example  \n The following code shows a test program that creates a number of `Shape`-derived objects and prints out their areas.  \n  \n [!code-cs[csProgGuideInheritance#3](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-define-abstract-properties_3.cs)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)   \n [Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)   \n [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)   \n [How to: Create and Use Assemblies Using the Command Line](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)","nodes":[{"pos":[4,592],"embed":true,"restype":"x-metadata","content":"title: \"How to: Define Abstract Properties (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"properties [C#], abstract\"\n  - \"abstract properties [C#]\"\nms.assetid: 672a90eb-47b9-4ae0-9914-af53852fddcb\ncaps.latest.revision: 13\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Define Abstract Properties (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,74],"content":"How to: Define Abstract Properties (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"How to: Define Abstract Properties (C# Programming Guide) | Microsoft Docs","pos":[0,74]}]}],"path":["title"]}],"yml":true},{"pos":[599,656],"content":"How to: Define Abstract Properties (C# Programming Guide)","linkify":"How to: Define Abstract Properties (C# Programming Guide)","nodes":[{"content":"How to: Define Abstract Properties (C# Programming Guide)","pos":[0,57]}]},{"content":"The following example shows how to define <bpt id=\"p1\">[</bpt>abstract<ept id=\"p1\">](../../../csharp/language-reference/keywords/abstract.md)</ept> properties.","pos":[657,778],"source":"The following example shows how to define [abstract](../../../csharp/language-reference/keywords/abstract.md) properties."},{"content":"An abstract property declaration does not provide an implementation of the property accessors -- it declares that the class supports properties, but leaves the accessor implementation to derived classes.","pos":[779,982]},{"content":"The following example demonstrates how to implement the abstract properties inherited from a base class.","pos":[983,1087]},{"content":"This sample consists of three files, each of which is compiled individually and its resulting assembly is referenced by the next compilation:","pos":[1094,1235]},{"pos":[1245,1323],"content":"abstractshape.cs: the <ph id=\"ph1\">`Shape`</ph> class that contains an abstract <ph id=\"ph2\">`Area`</ph> property.","source":"abstractshape.cs: the `Shape` class that contains an abstract `Area` property."},{"pos":[1333,1380],"content":"shapes.cs: The subclasses of the <ph id=\"ph1\">`Shape`</ph> class.","source":"shapes.cs: The subclasses of the `Shape` class."},{"pos":[1390,1472],"content":"shapetest.cs: A test program to display the areas of some <ph id=\"ph1\">`Shape`</ph>-derived objects.","source":"shapetest.cs: A test program to display the areas of some `Shape`-derived objects."},{"content":"To compile the example, use the following command:","pos":[1479,1529]},{"content":"This will create the executable file shapetest.exe.","pos":[1588,1639]},{"pos":[1648,1655],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1659,1751],"content":"This file declares the <ph id=\"ph1\">`Shape`</ph> class that contains the <ph id=\"ph2\">`Area`</ph> property of the type <ph id=\"ph3\">`double`</ph>.","source":"This file declares the `Shape` class that contains the `Area` property of the type `double`."},{"content":"Modifiers on the property are placed on the property declaration itself.","pos":[1917,1989]},{"content":"For example:","pos":[1990,2002]},{"content":"When declaring an abstract property (such as <ph id=\"ph1\">`Area`</ph> in this example), you simply indicate what property accessors are available, but do not implement them.","pos":[2069,2224],"source":"When declaring an abstract property (such as `Area` in this example), you simply indicate what property accessors are available, but do not implement them."},{"content":"In this example, only a <bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](../../../csharp/language-reference/keywords/get.md)</ept> accessor is available, so the property is read-only.","pos":[2225,2359],"source":" In this example, only a [get](../../../csharp/language-reference/keywords/get.md) accessor is available, so the property is read-only."},{"pos":[2368,2375],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2379,2510],"content":"The following code shows three subclasses of <ph id=\"ph1\">`Shape`</ph> and how they override the <ph id=\"ph2\">`Area`</ph> property to provide their own implementation.","source":"The following code shows three subclasses of `Shape` and how they override the `Area` property to provide their own implementation."},{"pos":[2675,2682],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2686,2802],"content":"The following code shows a test program that creates a number of <ph id=\"ph1\">`Shape`</ph>-derived objects and prints out their areas.","source":"The following code shows a test program that creates a number of `Shape`-derived objects and prints out their areas."},{"pos":[2967,2975],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2979,3046],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Classes and Structs<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3050,3136],"source":"[Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Abstract and Sealed Classes and Class Members<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept><ph id=\"ph1\"> </ph>","pos":[3140,3292],"source":"[Abstract and Sealed Classes and Class Members](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md) "},{"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept><ph id=\"ph1\"> </ph>","pos":[3296,3378],"source":"[Properties](../../../csharp/programming-guide/classes-and-structs/properties.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Create and Use Assemblies Using the Command Line<ept id=\"p1\">](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)</ept>","pos":[3382,3512],"source":"[How to: Create and Use Assemblies Using the Command Line](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)"}]}