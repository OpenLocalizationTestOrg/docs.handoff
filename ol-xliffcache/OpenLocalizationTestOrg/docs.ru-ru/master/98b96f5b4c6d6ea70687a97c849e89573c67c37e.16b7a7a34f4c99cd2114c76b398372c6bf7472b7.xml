{"content":"---\ntitle: \"Equality operators - C# Reference\"\nms.date: 03/28/2019\nauthor: pkulikov\nf1_keywords: \n  - \"==_CSharpKeyword\"\n  - \"!=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"equality operator [C#]\"\n  - \"equals operator [C#]\"\n  - \"== operator [C#]\"\n  - \"inequality operator [C#]\"\n  - \"not equals operator [C#]\"\n  - \"!= operator [C#]\"\n---\n# Equality operators (C# Reference)\n\nThe [`==` (equality)](#equality-operator-) and [`!=` (inequality)](#inequality-operator-) operators check if their operands are equal or not.\n\n## Equality operator ==\n\nThe equality operator `==` returns `true` if its operands are equal, `false` otherwise.\n\n### Value types equality\n\nOperands of the [built-in value types](../keywords/value-types-table.md) are equal if their values are equal:\n\n[!code-csharp-interactive[value types equality](~/samples/snippets/csharp/language-reference/operators/EqualityAndNonEqualityExamples.cs#ValueTypesEquality)]\n\n> [!NOTE]\n> For equality and relational operators `==`, `>`, `<`, `>=`, and `<=`, if any of the operands is not a number (<xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType>), the result of operation is `false`. That means that the `NaN` value is neither greater than, less than, nor equal to any other `double` (or `float`) value, including `NaN`. For more information and examples, see the <xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType> reference article.\n\nTwo operands of the same [enum](../keywords/enum.md) type are equal if the corresponding values of the underlying integral type are equal.\n\nUser-defined [struct](../keywords/struct.md) types don't support the `==` operator by default. To support the `==` operator, a user-defined struct must [overload](#operator-overloadability) it.\n\nBeginning with C# 7.3, the `==` and `!=` operators are supported by C# [tuples](../../tuples.md). For more information, see the [Equality and tuples](../../tuples.md#equality-and-tuples) section of the [C# tuple types](../../tuples.md) article.\n\n### String equality\n\nTwo [string](../keywords/string.md) operands are equal when both of them are `null` or both string instances are of the same length and have identical characters in each character position:\n\n[!code-csharp-interactive[string equality](~/samples/snippets/csharp/language-reference/operators/EqualityAndNonEqualityExamples.cs#StringEquality)]\n\nThat is case-sensitive ordinal comparison. For more information about string comparison, see [How to compare strings in C#](../../how-to/compare-strings.md).\n\n### Reference types equality\n\nTwo other than `string` reference type operands are equal when they refer to the same object:\n\n[!code-csharp-interactive[reference type equality](~/samples/snippets/csharp/language-reference/operators/EqualityAndNonEqualityExamples.cs#ReferenceTypesEquality)]\n\nAs the example shows, user-defined reference types support the `==` operator by default. However, a user-defined reference type can overload the `==` operator. If a reference type overloads the `==` operator, use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to check if two references of that type refer to the same object.\n\n## Inequality operator !=\n\nThe inequality operator `!=` returns `true` if its operands are not equal, `false` otherwise. For the operands of the [built-in types](../keywords/built-in-types-table.md), the expression `x != y` produces the same result as the expression `!(x == y)`. For more information about type equality, see the [Equality operator](#equality-operator-) section.\n\nThe following example demonstrates the usage of the `!=` operator:\n\n[!code-csharp-interactive[non-equality examples](~/samples/snippets/csharp/language-reference/operators/EqualityAndNonEqualityExamples.cs#NonEquality)]\n\n## Operator overloadability\n\nUser-defined types can [overload](../keywords/operator.md) the `==` and `!=` operators. If a type overloads one of the two operators, it must also overload another one.\n\n## C# language specification\n\nFor more information, see the [Relational and type-testing operators](~/_csharplang/spec/expressions.md#relational-and-type-testing-operators) section of the [C# language specification](~/_csharplang/spec/introduction.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- <xref:System.IEquatable%601?displayProperty=nameWithType>\n- <xref:System.Object.Equals%2A?displayProperty=nameWithType>\n- <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>\n- [Equality comparisons](../../programming-guide/statements-expressions-operators/equality-comparisons.md)\n","nodes":[{"pos":[4,329],"embed":true,"restype":"x-metadata","content":"title: \"Equality operators - C# Reference\"\nms.date: 03/28/2019\nauthor: pkulikov\nf1_keywords: \n  - \"==_CSharpKeyword\"\n  - \"!=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"equality operator [C#]\"\n  - \"equals operator [C#]\"\n  - \"== operator [C#]\"\n  - \"inequality operator [C#]\"\n  - \"not equals operator [C#]\"\n  - \"!= operator [C#]\"","nodes":[{"content":"Equality operators - C# Reference","nodes":[{"pos":[0,33],"content":"Equality operators - C# Reference","nodes":[{"content":"Equality operators - C# Reference","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[336,369],"content":"Equality operators (C# Reference)","linkify":"Equality operators (C# Reference)","nodes":[{"content":"Equality operators (C# Reference)","pos":[0,33]}]},{"pos":[371,512],"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`==`</ph> (equality)<ept id=\"p1\">](#equality-operator-)</ept> and <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`!=`</ph> (inequality)<ept id=\"p2\">](#inequality-operator-)</ept> operators check if their operands are equal or not.","source":"The [`==` (equality)](#equality-operator-) and [`!=` (inequality)](#inequality-operator-) operators check if their operands are equal or not."},{"pos":[517,537],"content":"Equality operator ==","linkify":"Equality operator ==","nodes":[{"content":"Equality operator ==","pos":[0,20]}]},{"pos":[539,626],"content":"The equality operator <ph id=\"ph1\">`==`</ph> returns <ph id=\"ph2\">`true`</ph> if its operands are equal, <ph id=\"ph3\">`false`</ph> otherwise.","source":"The equality operator `==` returns `true` if its operands are equal, `false` otherwise."},{"pos":[632,652],"content":"Value types equality","linkify":"Value types equality","nodes":[{"content":"Value types equality","pos":[0,20]}]},{"pos":[654,763],"content":"Operands of the <bpt id=\"p1\">[</bpt>built-in value types<ept id=\"p1\">](../keywords/value-types-table.md)</ept> are equal if their values are equal:","source":"Operands of the [built-in value types](../keywords/value-types-table.md) are equal if their values are equal:"},{"pos":[926,1504],"content":"[!NOTE]\nFor equality and relational operators `==`, `>`, `<`, `>=`, and `<=`, if any of the operands is not a number (<xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType>), the result of operation is `false`. That means that the `NaN` value is neither greater than, less than, nor equal to any other `double` (or `float`) value, including `NaN`. For more information and examples, see the <xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType> reference article.","leadings":["","> "],"nodes":[{"content":"For equality and relational operators `==`, `>`, `<`, `>=`, and `<=`, if any of the operands is not a number (<xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType>), the result of operation is `false`. That means that the `NaN` value is neither greater than, less than, nor equal to any other `double` (or `float`) value, including `NaN`. For more information and examples, see the <xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType> reference article.","pos":[8,576],"nodes":[{"content":"For equality and relational operators <ph id=\"ph1\">`==`</ph>, <ph id=\"ph2\">`&gt;`</ph>, <ph id=\"ph3\">`&lt;`</ph>, <ph id=\"ph4\">`&gt;=`</ph>, and <ph id=\"ph5\">`&lt;=`</ph>, if any of the operands is not a number (<ph id=\"ph6\">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph7\">&lt;xref:System.Single.NaN?displayProperty=nameWithType&gt;</ph>), the result of operation is <ph id=\"ph8\">`false`</ph>.","pos":[0,258],"source":"For equality and relational operators `==`, `>`, `<`, `>=`, and `<=`, if any of the operands is not a number (<xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType>), the result of operation is `false`."},{"content":"That means that the <ph id=\"ph1\">`NaN`</ph> value is neither greater than, less than, nor equal to any other <ph id=\"ph2\">`double`</ph> (or <ph id=\"ph3\">`float`</ph>) value, including <ph id=\"ph4\">`NaN`</ph>.","pos":[259,395],"source":" That means that the `NaN` value is neither greater than, less than, nor equal to any other `double` (or `float`) value, including `NaN`."},{"content":"For more information and examples, see the <ph id=\"ph1\">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Single.NaN?displayProperty=nameWithType&gt;</ph> reference article.","pos":[396,568],"source":" For more information and examples, see the <xref:System.Double.NaN?displayProperty=nameWithType> or <xref:System.Single.NaN?displayProperty=nameWithType> reference article."}]}]},{"pos":[1506,1644],"content":"Two operands of the same <bpt id=\"p1\">[</bpt>enum<ept id=\"p1\">](../keywords/enum.md)</ept> type are equal if the corresponding values of the underlying integral type are equal.","source":"Two operands of the same [enum](../keywords/enum.md) type are equal if the corresponding values of the underlying integral type are equal."},{"content":"User-defined <bpt id=\"p1\">[</bpt>struct<ept id=\"p1\">](../keywords/struct.md)</ept> types don't support the <ph id=\"ph1\">`==`</ph> operator by default.","pos":[1646,1740],"source":"User-defined [struct](../keywords/struct.md) types don't support the `==` operator by default."},{"content":"To support the <ph id=\"ph1\">`==`</ph> operator, a user-defined struct must <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](#operator-overloadability)</ept> it.","pos":[1741,1839],"source":" To support the `==` operator, a user-defined struct must [overload](#operator-overloadability) it."},{"content":"Beginning with C# 7.3, the <ph id=\"ph1\">`==`</ph> and <ph id=\"ph2\">`!=`</ph> operators are supported by C# <bpt id=\"p1\">[</bpt>tuples<ept id=\"p1\">](../../tuples.md)</ept>.","pos":[1841,1938],"source":"Beginning with C# 7.3, the `==` and `!=` operators are supported by C# [tuples](../../tuples.md)."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Equality and tuples<ept id=\"p1\">](../../tuples.md#equality-and-tuples)</ept> section of the <bpt id=\"p2\">[</bpt>C# tuple types<ept id=\"p2\">](../../tuples.md)</ept> article.","pos":[1939,2085],"source":" For more information, see the [Equality and tuples](../../tuples.md#equality-and-tuples) section of the [C# tuple types](../../tuples.md) article."},{"pos":[2091,2106],"content":"String equality","linkify":"String equality","nodes":[{"content":"String equality","pos":[0,15]}]},{"pos":[2108,2297],"content":"Two <bpt id=\"p1\">[</bpt>string<ept id=\"p1\">](../keywords/string.md)</ept> operands are equal when both of them are <ph id=\"ph1\">`null`</ph> or both string instances are of the same length and have identical characters in each character position:","source":"Two [string](../keywords/string.md) operands are equal when both of them are `null` or both string instances are of the same length and have identical characters in each character position:"},{"content":"That is case-sensitive ordinal comparison.","pos":[2449,2491]},{"content":"For more information about string comparison, see <bpt id=\"p1\">[</bpt>How to compare strings in C#<ept id=\"p1\">](../../how-to/compare-strings.md)</ept>.","pos":[2492,2606],"source":" For more information about string comparison, see [How to compare strings in C#](../../how-to/compare-strings.md)."},{"pos":[2612,2636],"content":"Reference types equality","linkify":"Reference types equality","nodes":[{"content":"Reference types equality","pos":[0,24]}]},{"pos":[2638,2731],"content":"Two other than <ph id=\"ph1\">`string`</ph> reference type operands are equal when they refer to the same object:","source":"Two other than `string` reference type operands are equal when they refer to the same object:"},{"content":"As the example shows, user-defined reference types support the <ph id=\"ph1\">`==`</ph> operator by default.","pos":[2899,2987],"source":"As the example shows, user-defined reference types support the `==` operator by default."},{"content":"However, a user-defined reference type can overload the <ph id=\"ph1\">`==`</ph> operator.","pos":[2988,3058],"source":" However, a user-defined reference type can overload the `==` operator."},{"content":"If a reference type overloads the <ph id=\"ph1\">`==`</ph> operator, use the <ph id=\"ph2\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> method to check if two references of that type refer to the same object.","pos":[3059,3257],"source":" If a reference type overloads the `==` operator, use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to check if two references of that type refer to the same object."},{"pos":[3262,3284],"content":"Inequality operator !=","linkify":"Inequality operator !=","nodes":[{"content":"Inequality operator !=","pos":[0,22]}]},{"content":"The inequality operator <ph id=\"ph1\">`!=`</ph> returns <ph id=\"ph2\">`true`</ph> if its operands are not equal, <ph id=\"ph3\">`false`</ph> otherwise.","pos":[3286,3379],"source":"The inequality operator `!=` returns `true` if its operands are not equal, `false` otherwise."},{"content":"For the operands of the <bpt id=\"p1\">[</bpt>built-in types<ept id=\"p1\">](../keywords/built-in-types-table.md)</ept>, the expression <ph id=\"ph1\">`x != y`</ph> produces the same result as the expression <ph id=\"ph2\">`!(x == y)`</ph>.","pos":[3380,3538],"source":" For the operands of the [built-in types](../keywords/built-in-types-table.md), the expression `x != y` produces the same result as the expression `!(x == y)`."},{"content":"For more information about type equality, see the <bpt id=\"p1\">[</bpt>Equality operator<ept id=\"p1\">](#equality-operator-)</ept> section.","pos":[3539,3638],"source":" For more information about type equality, see the [Equality operator](#equality-operator-) section."},{"pos":[3640,3706],"content":"The following example demonstrates the usage of the <ph id=\"ph1\">`!=`</ph> operator:","source":"The following example demonstrates the usage of the `!=` operator:"},{"pos":[3864,3888],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"User-defined types can <bpt id=\"p1\">[</bpt>overload<ept id=\"p1\">](../keywords/operator.md)</ept> the <ph id=\"ph1\">`==`</ph> and <ph id=\"ph2\">`!=`</ph> operators.","pos":[3890,3977],"source":"User-defined types can [overload](../keywords/operator.md) the `==` and `!=` operators."},{"content":"If a type overloads one of the two operators, it must also overload another one.","pos":[3978,4058]},{"pos":[4063,4088],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[4090,4312],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Relational and type-testing operators<ept id=\"p1\">](~/_csharplang/spec/expressions.md#relational-and-type-testing-operators)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](~/_csharplang/spec/introduction.md)</ept>.","source":"For more information, see the [Relational and type-testing operators](~/_csharplang/spec/expressions.md#relational-and-type-testing-operators) section of the [C# language specification](~/_csharplang/spec/introduction.md)."},{"pos":[4317,4325],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4329,4356],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[4359,4415],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[4418,4442],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[4638,4742],"content":"<bpt id=\"p1\">[</bpt>Equality comparisons<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/equality-comparisons.md)</ept>","source":"[Equality comparisons](../../programming-guide/statements-expressions-operators/equality-comparisons.md)"}]}