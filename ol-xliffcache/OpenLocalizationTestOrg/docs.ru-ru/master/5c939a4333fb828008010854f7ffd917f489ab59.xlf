<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c939a4333fb828008010854f7ffd917f489ab59</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\linq\group-query-results.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f420a892a07aeadf135730529f17b281528eccef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4817b11ead67b263bd823b3086c75120813ab8d1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Group query results</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to group results.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, C#</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Group query results</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Grouping is one of the most powerful capabilities of LINQ.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following examples show how to group data in various ways:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>By a single property.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>By the first letter of a string property.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By a computed numeric range.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By Boolean predicate or other expression.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By a compound key.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In addition, the last two queries project their results into a new anonymous type that contains only the student's first and last name.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>group clause<ept id="p1">](../language-reference/keywords/group-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>All the examples in this topic use the following helper classes and data sources.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideLINQ#15<ept id="p2">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example shows how to group source elements by using a single property of the element as the group key.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this case the key is a <ph id="ph1">`string`</ph>, the student's last name.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It is also possible to use a substring for the key.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The grouping operation uses the default equality comparer for the type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Paste the following method into the <ph id="ph1">`StudentClass`</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Change the calling statement in the <ph id="ph1">`Main`</ph> method to <ph id="ph2">`sc.GroupBySingleProperty()`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideLINQ#17<ept id="p2">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows how to group source elements by using something other than a property of the object for the group key.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this example, the key is the first letter of the student's last name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Paste the following method into the <ph id="ph1">`StudentClass`</ph> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Change the calling statement in the <ph id="ph1">`Main`</ph> method to <ph id="ph2">`sc.GroupBySubstring()`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideLINQ#18<ept id="p2">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example shows how to group source elements by using a numeric range as a group key.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The query then projects the results into an anonymous type that contains only the first and last name and the percentile range to which the student belongs.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An anonymous type is used because it is not necessary to use the complete <ph id="ph1">`Student`</ph> object to display the results.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetPercentile`</ph> is a helper function that calculates a percentile based on the student's average score.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The method returns an integer between 0 and 10.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideLINQ#50<ept id="p2">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Paste the following method into the <ph id="ph1">`StudentClass`</ph> class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Change the calling statement in the <ph id="ph1">`Main`</ph> method to <ph id="ph2">`sc.GroupByRange()`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideLINQ#19<ept id="p2">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example shows how to group source elements by using a Boolean comparison expression.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this example, the Boolean expression tests whether a student's average exam score is greater than 75.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As in previous examples, the results are projected into an anonymous type because the complete source element is not needed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that the properties in the anonymous type become properties on the <ph id="ph1">`Key`</ph> member and can be accessed by name when the query is executed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Paste the following method into the <ph id="ph1">`StudentClass`</ph> class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Change the calling statement in the <ph id="ph1">`Main`</ph> method to <ph id="ph2">`sc.GroupByBoolean()`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideLINQ#20<ept id="p2">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_6.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example shows how to use an anonymous type to encapsulate a key that contains multiple values.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In this example, the first key value is the first letter of the student's last name.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The second key value is a Boolean that specifies whether the student scored over 85 on the first exam.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can order the groups by any property in the key.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Paste the following method into the <ph id="ph1">`StudentClass`</ph> class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Change the calling statement in the <ph id="ph1">`Main`</ph> method to <ph id="ph2">`sc.GroupByCompositeKey()`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideLINQ#21<ept id="p2">](../../../samples/snippets/csharp/concepts/linq/how-to-group-query-results_7.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ Query Expressions<ept id="p1">](index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>group clause<ept id="p1">](../language-reference/keywords/group-clause.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../programming-guide/classes-and-structs/anonymous-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Perform a Subquery on a Grouping Operation<ept id="p1">](perform-a-subquery-on-a-grouping-operation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a Nested Group<ept id="p1">](create-a-nested-group.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Grouping Data<ept id="p1">](../programming-guide/concepts/linq/grouping-data.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>