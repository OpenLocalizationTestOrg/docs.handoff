<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="string.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">737a0902a0cb010a74b59560abe43f5cfb6550db</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\string.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bdf9d7186130abd5cfdb2e24f98e877e7c0756ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b2be191d3c4894ccde4569101c29e80ffea0b2f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>string (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>string (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`string`</ph> type represents a sequence of zero or more Unicode characters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`string`</ph> is an alias for <ph id="ph2">&lt;xref:System.String&gt;</ph> in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">`string`</ph> is a reference type, the equality operators (<ph id="ph2">`==`</ph> and <ph id="ph3">`!=`</ph>) are defined to compare the values of <ph id="ph4">`string`</ph> objects, not references.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This makes testing for string equality more intuitive.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This displays "True" and then "False" because the content of the strings are equivalent, but <ph id="ph1">`a`</ph> and <ph id="ph2">`b`</ph> do not refer to the same string instance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The + operator concatenates strings:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This creates a string object that contains "good morning".</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Strings are <bpt id="p1">*</bpt>immutable<ept id="p1">*</ept>--the contents of a string object cannot be changed after the object is created, although the syntax makes it appear as if you can do this.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, when you write this code, the compiler actually creates a new string object to hold the new sequence of characters, and that new object is assigned to b.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The string "h" is then eligible for garbage collection.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The [] operator can be used for readonly access to individual characters of a <ph id="ph1">`string`</ph>:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>String literals are of type <ph id="ph1">`string`</ph> and can be written in two forms, quoted and <ph id="ph2">@-quoted</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Quoted string literals are enclosed in double quotation marks ("):</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>String literals can contain any character literal.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Escape sequences are included.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example uses escape sequence <ph id="ph1">`\\`</ph> for backslash, <ph id="ph2">`\u0066`</ph> for the letter f, and <ph id="ph3">`\n`</ph> for newline.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The escape code <ph id="ph1">`\`</ph>u<ph id="ph2">`dddd`</ph> (where <ph id="ph3">`dddd`</ph> is a four-digit number) represents the Unicode character U+<ph id="ph4">`dddd`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Eight-digit Unicode escape codes are also recognized: <ph id="ph1">`\Udddddddd`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Verbatim string literals start with @ and are also enclosed in double quotation marks.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The advantage of verbatim strings is that escape sequences are <bpt id="p1">*</bpt>not<ept id="p1">*</ept> processed, which makes it easy to write, for example, a fully qualified file name:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To include a double quotation mark in an <ph id="ph1">@-quoted</ph> string, double it:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Another use of the @ symbol is to use referenced (<bpt id="p1">[</bpt>/reference<ept id="p1">](../../../csharp/language-reference/compiler-options/reference-compiler-option.md)</ept>) identifiers that are C# keywords.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information about strings in C#, see <bpt id="p1">[</bpt>Strings<ept id="p1">](../../../csharp/programming-guide/strings/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Best Practices for Using Strings<ept id="p1">](../../../standard/base-types/best-practices-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reference Types<ept id="p1">](../../../csharp/language-reference/keywords/reference-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Value Types<ept id="p1">](../../../csharp/language-reference/keywords/value-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basic String Operations<ept id="p1">](../../../standard/base-types/basic-string-operations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating New Strings<ept id="p1">](../../../standard/base-types/creating-new.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Formatting Numeric Results Table<ept id="p1">](../../../csharp/language-reference/keywords/formatting-numeric-results-table.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>