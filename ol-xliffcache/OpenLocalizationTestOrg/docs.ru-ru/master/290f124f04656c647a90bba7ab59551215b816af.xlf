<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">290f124f04656c647a90bba7ab59551215b816af</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\xml-document-object-model-dom.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a19c6140d283af1b9744b1e8dc7ddb5e2acd3446</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df52ae0cf88758d981209c174856226c9596bc0c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>XML Document Object Model (DOM) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XML Document Object Model (DOM)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The XML Document Object Model (DOM) class is an in-memory representation of an XML document.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The DOM allows you to programmatically read, manipulate, and modify an XML document.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XmlReader<ept id="p1">**</ept> class also reads XML; however, it provides non-cached, forward-only, read-only access.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This means that there are no capabilities to edit the values of an attribute or content of an element, or the ability to insert and remove nodes with the <bpt id="p1">**</bpt>XmlReader<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Editing is the primary function of the DOM.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It is the common and structured way that XML data is represented in memory, although the actual XML data is stored in a linear fashion when in a file or coming in from another object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following is XML data.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Input</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following illustration shows how memory is structured when this XML data is read into the DOM structure.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>XML document structure<ept id="p1">](../../../../docs/standard/data/xml/media/xml-to-domtree.gif "XML_To_DOMTree")</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>XML document structure</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Within the XML document structure, each circle in this illustration represents a node, which is called an <bpt id="p1">**</bpt>XmlNode<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XmlNode<ept id="p1">**</ept> object is the basic object in the DOM tree.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XmlDocument<ept id="p1">**</ept> class, which extends <bpt id="p2">**</bpt>XmlNode<ept id="p2">**</ept>, supports methods for performing operations on the document as a whole (for example, loading it into memory or saving the XML to a file.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In addition, <bpt id="p1">**</bpt>XmlDocument<ept id="p1">**</ept> provides a means to view and manipulate the nodes in the entire XML document.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Both <bpt id="p1">**</bpt>XmlNode<ept id="p1">**</ept> and <bpt id="p2">**</bpt>XmlDocument<ept id="p2">**</ept> have performance and usability enhancements and have methods and properties to:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Access and modify nodes specific to the DOM, such as element nodes, entity reference nodes, and so on.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Retrieve entire nodes, in addition to the information the node contains, such as the text in an element node.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If an application does not require the structure or editing capabilities provided by the DOM, the <bpt id="p1">**</bpt>XmlReader<ept id="p1">**</ept> and <bpt id="p2">**</bpt>XmlWriter<ept id="p2">**</ept> classes provide non-cached, forward-only stream access to XML.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Node<ept id="p1">**</ept> objects have a set of methods and properties, as well as basic and well-defined characteristics.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Some of these characteristics are:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Nodes have a single parent node, a parent node being a node directly above them.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The only nodes that do not have a parent is the Document root, as it is the top-level node and contains the document itself and document fragments.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Most nodes can have multiple child nodes, which are nodes directly below them.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following is a list of node types that can have child nodes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Document<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DocumentFragment<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EntityReference<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Element<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Attribute<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XmlDeclaration<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Notation<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Entity<ept id="p3">**</ept>, <bpt id="p4">**</bpt>CDATASection<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Text<ept id="p5">**</ept>, <bpt id="p6">**</bpt>Comment<ept id="p6">**</ept>, <bpt id="p7">**</bpt>ProcessingInstruction<ept id="p7">**</ept>, and <bpt id="p8">**</bpt>DocumentType<ept id="p8">**</ept> nodes do not have child nodes.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Nodes that are at the same level, represented in the diagram by the <bpt id="p1">**</bpt>book<ept id="p1">**</ept> and <bpt id="p2">**</bpt>pubinfo<ept id="p2">**</ept> nodes, are siblings.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>One characteristic of the DOM is how it handles attributes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Attributes are not nodes that are part of the parent, child, and sibling relationships.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Attributes are considered a property of the element node and are made up of a name and a value pair.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, if you have XML data consisting of <ph id="ph1">`format="dollar`</ph>" associated with the element <ph id="ph2">`price`</ph>, the word <ph id="ph3">`format`</ph> is the name, and the value of the <ph id="ph4">`format`</ph> attribute is <ph id="ph5">`dollar`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To retrieve the <ph id="ph1">`format="dollar"`</ph> attribute of the <bpt id="p1">**</bpt>price<ept id="p1">**</ept> node, you call the <bpt id="p2">**</bpt>GetAttribute<ept id="p2">**</ept> method when the cursor is located at the <ph id="ph2">`price`</ph> element node.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Accessing Attributes in the DOM<ept id="p1">](../../../../docs/standard/data/xml/accessing-attributes-in-the-dom.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>As XML is read into memory, nodes are created.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, not all nodes are the same type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An element in XML has different rules and syntax than a processing instruction.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Therefore, as various data is read, a node type is assigned to each node.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This node type determines the characteristics and functionality of the node.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information on the types of nodes generated in memory, see <bpt id="p1">[</bpt>Types of XML Nodes<ept id="p1">](../../../../docs/standard/data/xml/types-of-xml-nodes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information on the objects created in the node tree, see <bpt id="p1">[</bpt>Mapping the Object Hierarchy to XML Data<ept id="p1">](../../../../docs/standard/data/xml/mapping-the-object-hierarchy-to-xml-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Microsoft has extended the APIs that are available in the World Wide Web Consortium (W3C) DOM Level 1 and Level 2 to make it easier to work with an XML document.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>While fully supporting the W3C standards, the additional classes, methods, and properties add functionality beyond what can be done using the W3C XML DOM.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>New classes enable you to access relational data, giving you methods for synchronizing with ADO.NET data, simultaneously exposing data as XML.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Synchronizing a DataSet with an XmlDataDocument<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/dataset-and-xmldatadocument-synchronization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The DOM is most useful for reading XML data into memory to change its structure, to add or remove nodes, or to modify the data held by a node as in the text contained by an element.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, other classes are available that are faster than the DOM in other scenarios.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For fast, non-cached, forward-only stream access to XML, use the <bpt id="p1">**</bpt>XmlReader<ept id="p1">**</ept> and <bpt id="p2">**</bpt>XmlWriter<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you need random access with a cursor model and <bpt id="p1">**</bpt>XPath<ept id="p1">**</ept>, use the <bpt id="p2">**</bpt>XPathNavigator<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types of XML Nodes<ept id="p1">](../../../../docs/standard/data/xml/types-of-xml-nodes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Mapping the Object Hierarchy to XML Data<ept id="p1">](../../../../docs/standard/data/xml/mapping-the-object-hierarchy-to-xml-data.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>