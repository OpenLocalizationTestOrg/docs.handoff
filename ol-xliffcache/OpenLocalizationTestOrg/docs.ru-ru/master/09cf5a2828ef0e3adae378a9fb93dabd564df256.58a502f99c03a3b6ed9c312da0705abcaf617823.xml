{"content":"---\ntitle: \"-&gt; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"->_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"member access operator (->) [C#]\"\n  - \"-> operator [C#]\"\nms.assetid: e39ccdc1-f1ff-4a92-bf1d-ac2c8c11316a\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# -&gt; Operator (C# Reference)\nThe `->` operator combines pointer dereferencing and member access.  \n  \n## Remarks  \n An expression of the form,  \n  \n```  \nx->y  \n```  \n  \n (where `x` is a pointer of type `T*` and `y` is a member of `T`) is equivalent to,  \n  \n```  \n(*x).y  \n```  \n  \n The `->` operator can be used only in code that is marked as [unsafe](../../../csharp/language-reference/keywords/unsafe.md).  \n  \n The `->` operator cannot be overloaded.  \n  \n## Example  \n [!code-cs[csRefOperators#15](../../../csharp/language-reference/operators/codesnippet/CSharp/dereference-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[4,595],"embed":true,"restype":"x-metadata","content":"title: \"-&gt; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"->_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"member access operator (->) [C#]\"\n  - \"-> operator [C#]\"\nms.assetid: e39ccdc1-f1ff-4a92-bf1d-ac2c8c11316a\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"-&gt; Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"-&gt; Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">-</ph><ph id=\"ph2\">&amp;gt;</ph> Operator (C# Reference) | Microsoft Docs","pos":[0,46],"source":"-&gt; Operator (C# Reference) | Microsoft Docs"}]}],"path":["title"]}],"yml":true},{"pos":[602,631],"content":"-&gt; Operator (C# Reference)","linkify":"-&gt; Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">-</ph><ph id=\"ph2\">&amp;gt;</ph> Operator (C# Reference)","pos":[0,29],"source":"-&gt; Operator (C# Reference)"}]},{"pos":[632,699],"content":"The <ph id=\"ph1\">`-&gt;`</ph> operator combines pointer dereferencing and member access.","source":"The `->` operator combines pointer dereferencing and member access."},{"pos":[708,715],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An expression of the form,","pos":[719,745]},{"pos":[774,856],"content":"(where <ph id=\"ph1\">`x`</ph> is a pointer of type <ph id=\"ph2\">`T*`</ph> and <ph id=\"ph3\">`y`</ph> is a member of <ph id=\"ph4\">`T`</ph>) is equivalent to,","source":"(where `x` is a pointer of type `T*` and `y` is a member of `T`) is equivalent to,"},{"pos":[887,1012],"content":"The <ph id=\"ph1\">`-&gt;`</ph> operator can be used only in code that is marked as <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept>.","source":"The `->` operator can be used only in code that is marked as [unsafe](../../../csharp/language-reference/keywords/unsafe.md)."},{"pos":[1019,1058],"content":"The <ph id=\"ph1\">`-&gt;`</ph> operator cannot be overloaded.","source":"The `->` operator cannot be overloaded."},{"pos":[1067,1074],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1207,1215],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1219,1279],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1283,1350],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1354,1423],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"}]}