{"content":"---\ntitle: \"Skip While Clause (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.QuerySkipWhile\"\nhelpviewer_keywords: \n  - \"Skip While statement [Visual Basic]\"\n  - \"Skip While clause [Visual Basic]\"\n  - \"queries [Visual Basic], Skip While\"\nms.assetid: 5dee8350-7520-4f1a-b00d-590cacd572d6\n---\n# Skip While Clause (Visual Basic)\nBypasses elements in a collection as long as a specified condition is `true` and then returns the remaining elements.  \n  \n## Syntax  \n  \n```  \nSkip While expression  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`expression`|Required. An expression that represents a condition to test elements for. The expression must return a `Boolean` value or a functional equivalent, such as an `Integer` to be evaluated as a `Boolean`.|  \n  \n## Remarks  \n The `Skip While` clause bypasses elements from the beginning of a query result until the supplied `expression` returns `false`. After `expression` returns `false`, the query returns all the remaining elements. The `expression` is ignored for the remaining results.  \n  \n The `Skip While` clause differs from the `Where` clause in that the `Where` clause can be used to exclude all elements from a query that do not meet a particular condition. The `Skip While` clause excludes elements only until the first time that the condition is not satisfied. The `Skip While` clause is most useful when you are working with an ordered query result.  \n  \n You can bypass a specific number of results from the beginning of a query result by using the `Skip` clause.  \n  \n## Example  \n The following code example uses the `Skip While` clause to bypass results until the first customer from the United States is found.  \n  \n [!code-vb[VbSimpleQuerySamples#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbSimpleQuerySamples/VB/QuerySamples1.vb#3)]  \n  \n## See also\n\n- [Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)\n- [Queries](../../../visual-basic/language-reference/queries/index.md)\n- [Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)\n- [From Clause](../../../visual-basic/language-reference/queries/from-clause.md)\n- [Skip Clause](../../../visual-basic/language-reference/queries/skip-clause.md)\n- [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md)\n- [Where Clause](../../../visual-basic/language-reference/queries/where-clause.md)\n","nodes":[{"pos":[4,296],"embed":true,"restype":"x-metadata","content":"title: \"Skip While Clause (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.QuerySkipWhile\"\nhelpviewer_keywords: \n  - \"Skip While statement [Visual Basic]\"\n  - \"Skip While clause [Visual Basic]\"\n  - \"queries [Visual Basic], Skip While\"\nms.assetid: 5dee8350-7520-4f1a-b00d-590cacd572d6","nodes":[{"content":"Skip While Clause (Visual Basic)","nodes":[{"pos":[0,32],"content":"Skip While Clause (Visual Basic)","nodes":[{"content":"Skip While Clause (Visual Basic)","pos":[0,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[303,335],"content":"Skip While Clause (Visual Basic)","linkify":"Skip While Clause (Visual Basic)","nodes":[{"content":"Skip While Clause (Visual Basic)","pos":[0,32]}]},{"pos":[336,453],"content":"Bypasses elements in a collection as long as a specified condition is <ph id=\"ph1\">`true`</ph> and then returns the remaining elements.","source":"Bypasses elements in a collection as long as a specified condition is `true` and then returns the remaining elements."},{"pos":[462,468],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[516,521],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[528,532]},{"content":"Definition","pos":[533,543]},{"content":"Required.","pos":[573,582]},{"content":"An expression that represents a condition to test elements for.","pos":[583,646]},{"content":"The expression must return a <ph id=\"ph1\">`Boolean`</ph> value or a functional equivalent, such as an <ph id=\"ph2\">`Integer`</ph> to be evaluated as a <ph id=\"ph3\">`Boolean`</ph>.","pos":[647,772],"source":" The expression must return a `Boolean` value or a functional equivalent, such as an `Integer` to be evaluated as a `Boolean`."},{"pos":[782,789],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Skip While`</ph> clause bypasses elements from the beginning of a query result until the supplied <ph id=\"ph2\">`expression`</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[793,920],"source":"The `Skip While` clause bypasses elements from the beginning of a query result until the supplied `expression` returns `false`."},{"content":"After <ph id=\"ph1\">`expression`</ph> returns <ph id=\"ph2\">`false`</ph>, the query returns all the remaining elements.","pos":[921,1002],"source":" After `expression` returns `false`, the query returns all the remaining elements."},{"content":"The <ph id=\"ph1\">`expression`</ph> is ignored for the remaining results.","pos":[1003,1057],"source":" The `expression` is ignored for the remaining results."},{"content":"The <ph id=\"ph1\">`Skip While`</ph> clause differs from the <ph id=\"ph2\">`Where`</ph> clause in that the <ph id=\"ph3\">`Where`</ph> clause can be used to exclude all elements from a query that do not meet a particular condition.","pos":[1064,1236],"source":"The `Skip While` clause differs from the `Where` clause in that the `Where` clause can be used to exclude all elements from a query that do not meet a particular condition."},{"content":"The <ph id=\"ph1\">`Skip While`</ph> clause excludes elements only until the first time that the condition is not satisfied.","pos":[1237,1341],"source":" The `Skip While` clause excludes elements only until the first time that the condition is not satisfied."},{"content":"The <ph id=\"ph1\">`Skip While`</ph> clause is most useful when you are working with an ordered query result.","pos":[1342,1431],"source":" The `Skip While` clause is most useful when you are working with an ordered query result."},{"pos":[1438,1546],"content":"You can bypass a specific number of results from the beginning of a query result by using the <ph id=\"ph1\">`Skip`</ph> clause.","source":"You can bypass a specific number of results from the beginning of a query result by using the `Skip` clause."},{"pos":[1555,1562],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1566,1697],"content":"The following code example uses the <ph id=\"ph1\">`Skip While`</ph> clause to bypass results until the first customer from the United States is found.","source":"The following code example uses the `Skip While` clause to bypass results until the first customer from the United States is found."},{"pos":[1843,1851],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1855,1981],"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>","source":"[Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)"},{"pos":[1984,2052],"content":"<bpt id=\"p1\">[</bpt>Queries<ept id=\"p1\">](../../../visual-basic/language-reference/queries/index.md)</ept>","source":"[Queries](../../../visual-basic/language-reference/queries/index.md)"},{"pos":[2055,2137],"content":"<bpt id=\"p1\">[</bpt>Select Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/select-clause.md)</ept>","source":"[Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)"},{"pos":[2140,2218],"content":"<bpt id=\"p1\">[</bpt>From Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/from-clause.md)</ept>","source":"[From Clause](../../../visual-basic/language-reference/queries/from-clause.md)"},{"pos":[2221,2299],"content":"<bpt id=\"p1\">[</bpt>Skip Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/skip-clause.md)</ept>","source":"[Skip Clause](../../../visual-basic/language-reference/queries/skip-clause.md)"},{"pos":[2302,2392],"content":"<bpt id=\"p1\">[</bpt>Take While Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/take-while-clause.md)</ept>","source":"[Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md)"},{"pos":[2395,2475],"content":"<bpt id=\"p1\">[</bpt>Where Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/where-clause.md)</ept>","source":"[Where Clause](../../../visual-basic/language-reference/queries/where-clause.md)"}]}