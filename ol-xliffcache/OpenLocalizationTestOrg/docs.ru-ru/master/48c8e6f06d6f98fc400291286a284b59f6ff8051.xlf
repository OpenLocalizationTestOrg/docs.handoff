<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-map-database-relationships.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48c8e6f06d6f98fc400291286a284b59f6ff8051</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\how-to-map-database-relationships.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">256bb4cb4e70c50be59c3c7b81cfebad9dd67f4e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e98e0c36c753a7be5be5f134d711ec9dcf625ec9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Map Database Relationships | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Map Database Relationships</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can encode as property references in your entity class any data relationships that will always be the same.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the Northwind sample database, for example, because customers typically place orders, there is always a relationship in the model between customers and their orders.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>defines an <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.AssociationAttribute&gt;</ph> attribute to help represent such relationships.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This attribute is used together with the <ph id="ph1">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.Linq.EntityRef%601&gt;</ph> types to represent what would be a foreign key relationship in a database.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see the Association Attribute section of <bpt id="p1">[</bpt>Attribute-Based Mapping<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/attribute-based-mapping.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>AssociationAttribute and ColumnAttribute Storage property values are case sensitive.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, ensure that values used in the attribute for the AssociationAttribute.Storage property match the case for the corresponding property names used elsewhere in the code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This applies to all .NET programming languages, even those which are not typically case sensitive, including <ph id="ph1">[!INCLUDE[vb_current_short](../../../../../../includes/vb-current-short-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about the Storage property, see <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.DataAttribute.Storage%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Most relationships are one-to-many, as in the example later in this topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can also represent one-to-one and many-to-many relationships as follows:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>One-to-one: Represent this kind of relationship by including <ph id="ph1">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> on both sides.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, consider a <ph id="ph1">`Customer`</ph><ph id="ph2">-</ph><ph id="ph3">`SecurityCode`</ph> relationship, created so that the customer's security code will not be found in the <ph id="ph4">`Customer`</ph> table and can be accessed only by authorized persons.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Many-to-many: In many-to-many relationships, the primary key of the link table (also named the <bpt id="p1">*</bpt>junction<ept id="p1">*</ept> table) is often formed by a composite of the foreign keys from the other two tables.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, consider an <ph id="ph1">`Employee`</ph><ph id="ph2">-</ph><ph id="ph3">`Project`</ph> many-to-many relationship formed by using link table <ph id="ph4">`EmployeeProject`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> requires that such a relationship be modeled by using three classes: <ph id="ph2">`Employee`</ph>, <ph id="ph3">`Project`</ph>, and <ph id="ph4">`EmployeeProject`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this case, changing the relationship between an <ph id="ph1">`Employee`</ph> and a <ph id="ph2">`Project`</ph> can appear to require an update of the primary key <ph id="ph3">`EmployeeProject`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, this situation is best modeled as deleting an existing <ph id="ph1">`EmployeeProject`</ph> and the creating a new <ph id="ph2">`EmployeeProject`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Relationships in relational databases are typically modeled as foreign key values that refer to primary keys in other tables.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To navigate between them you explicitly associate the two tables by using a relational <bpt id="p1">*</bpt>join<ept id="p1">*</ept> operation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Objects in <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>, on the other hand, refer to each other by using property references or collections of references that you navigate by using <bpt id="p1">*</bpt>dot<ept id="p1">*</ept> notation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the following one-to-many example, the <ph id="ph1">`Customer`</ph> class has a property that declares the relationship between customers and their orders.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Orders`</ph> property is of type <ph id="ph2">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This type signifies that this relationship is one-to-many (one customer to many orders).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.AssociationAttribute.OtherKey%2A&gt;</ph> property is used to describe how this association is accomplished, namely, by specifying the name of the property in the related class to be compared with this one.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`CustomerID`</ph> property is compared, just as a database <bpt id="p1">*</bpt>join<ept id="p1">*</ept> would compare that column value.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you are using <ph id="ph1">[!INCLUDE[vs_current_short](../../../../../../includes/vs-current-short-md.md)]</ph>, you can use the <ph id="ph2">[!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)]</ph> to create an association between classes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can also reverse the situation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Instead of using the <ph id="ph1">`Customer`</ph> class to describe the association between customers and orders, you can use the <ph id="ph2">`Order`</ph> class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Order`</ph> class uses the <ph id="ph2">&lt;xref:System.Data.Linq.EntityRef%601&gt;</ph> type to describe the relationship back to the customer, as in the following code example.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.EntityRef%601&gt;</ph> class supports <bpt id="p1">*</bpt>deferred loading<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, <bpt id="p1">*</bpt>see<ept id="p1">*</ept> <bpt id="p2">[</bpt>Deferred versus Immediate Loading<ept id="p2">](../../../../../../docs/framework/data/adonet/sql/linq/deferred-versus-immediate-loading.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Customize Entity Classes by Using the Code Editor<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/how-to-customize-entity-classes-by-using-the-code-editor.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The LINQ to SQL Object Model<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/the-linq-to-sql-object-model.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>