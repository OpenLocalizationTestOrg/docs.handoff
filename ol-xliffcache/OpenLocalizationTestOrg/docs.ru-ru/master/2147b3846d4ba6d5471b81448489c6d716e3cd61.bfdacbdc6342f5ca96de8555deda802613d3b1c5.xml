{"content":"---\ntitle: \"Identifier names\"\ndescription: \"Learn the rules for valid identifier names in the C# programming language.\"\nms.date: 08/21/2018\n---\n# Identifier names\n\nAn **identifier** is the name you assign to a type (class, interface, struct, delegate, or enum), member, variable, or namespace. Valid identifiers must follow these rules:\n\n- Identifiers must start with a letter, or `_`.\n- Identifiers may contain Unicode letter characters, decimal digit characters, Unicode connecting characters, Unicode combining characters, or Unicode formatting characters. For more information on Unicode categories, see the [Unicode Category Database](https://www.unicode.org/reports/tr44/).\nYou can declare identifiers that match C# keywords by using the `@` prefix on the identifier. The `@` is not part of the identifier name. For example, `@if` declares an identifier named `if`. These [verbatim identifiers](../../language-reference/tokens/verbatim.md) are primarily for interoperability with identifiers declared in other languages.\n\nFor a complete definition of valid identifiers, see the [Identifiers topic in the C# Language Specification](../../../../_csharplang/spec/lexical-structure.md#identifiers).\n\n## Naming conventions\n\nIn addition to the rules, there are a number of identifier [naming conventions](../../../standard/design-guidelines/naming-guidelines.md) used throughout the .NET APIs. By convention, C# programs use `PascalCase` for type names, namespaces, and all public members. In addition, the following conventions are common:\n\n- Interface names start with a capital `I`.\n- Attribute types end with the word `Attribute`.\n- Enum types use a singular noun for non-flags, and a plural noun for flags.\n- Identifiers should not contain two consecutive `_` characters. Those names are reserved for compiler generated identifiers.\n\n## C# Language Specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n  \n## See also\n\n- [C# Programming Guide](../index.md)\n- [Inside a C# Program](../inside-a-program/index.md)\n- [C# Reference](../../language-reference/index.md)\n- [Classes](../classes-and-structs/classes.md)\n- [Structs](../classes-and-structs/structs.md)\n- [Namespaces](../namespaces/index.md)\n- [Interfaces](../interfaces/index.md)\n- [Delegates](../delegates/index.md)\n","nodes":[{"pos":[4,139],"embed":true,"restype":"x-metadata","content":"title: \"Identifier names\"\ndescription: \"Learn the rules for valid identifier names in the C# programming language.\"\nms.date: 08/21/2018","nodes":[{"content":"Identifier names","nodes":[{"pos":[0,16],"content":"Identifier names","nodes":[{"content":"Identifier names","pos":[0,16]}]}],"path":["title"],"nosxs":false},{"content":"Learn the rules for valid identifier names in the C# programming language.","nodes":[{"pos":[0,74],"content":"Learn the rules for valid identifier names in the C# programming language.","nodes":[{"content":"Learn the rules for valid identifier names in the C# programming language.","pos":[0,74]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[146,162],"content":"Identifier names","linkify":"Identifier names","nodes":[{"content":"Identifier names","pos":[0,16]}]},{"content":"An <bpt id=\"p1\">**</bpt>identifier<ept id=\"p1\">**</ept> is the name you assign to a type (class, interface, struct, delegate, or enum), member, variable, or namespace.","pos":[164,293],"source":"An **identifier** is the name you assign to a type (class, interface, struct, delegate, or enum), member, variable, or namespace."},{"content":"Valid identifiers must follow these rules:","pos":[294,336]},{"pos":[340,385],"content":"Identifiers must start with a letter, or <ph id=\"ph1\">`_`</ph>.","source":"Identifiers must start with a letter, or `_`."},{"content":"Identifiers may contain Unicode letter characters, decimal digit characters, Unicode connecting characters, Unicode combining characters, or Unicode formatting characters.","pos":[388,559]},{"content":"For more information on Unicode categories, see the <bpt id=\"p1\">[</bpt>Unicode Category Database<ept id=\"p1\">](https://www.unicode.org/reports/tr44/)</ept>.","pos":[560,679],"source":" For more information on Unicode categories, see the [Unicode Category Database](https://www.unicode.org/reports/tr44/)."},{"content":"You can declare identifiers that match C# keywords by using the <ph id=\"ph1\">`@`</ph> prefix on the identifier.","pos":[680,773],"source":"\nYou can declare identifiers that match C# keywords by using the `@` prefix on the identifier."},{"content":"The <ph id=\"ph1\">`@`</ph> is not part of the identifier name.","pos":[774,817],"source":" The `@` is not part of the identifier name."},{"content":"For example, <ph id=\"ph1\">`@if`</ph> declares an identifier named <ph id=\"ph2\">`if`</ph>.","pos":[818,871],"source":" For example, `@if` declares an identifier named `if`."},{"content":"These <bpt id=\"p1\">[</bpt>verbatim identifiers<ept id=\"p1\">](../../language-reference/tokens/verbatim.md)</ept> are primarily for interoperability with identifiers declared in other languages.","pos":[872,1026],"source":" These [verbatim identifiers](../../language-reference/tokens/verbatim.md) are primarily for interoperability with identifiers declared in other languages."},{"pos":[1028,1200],"content":"For a complete definition of valid identifiers, see the <bpt id=\"p1\">[</bpt>Identifiers topic in the C# Language Specification<ept id=\"p1\">](../../../../_csharplang/spec/lexical-structure.md#identifiers)</ept>.","source":"For a complete definition of valid identifiers, see the [Identifiers topic in the C# Language Specification](../../../../_csharplang/spec/lexical-structure.md#identifiers)."},{"pos":[1205,1223],"content":"Naming conventions","linkify":"Naming conventions","nodes":[{"content":"Naming conventions","pos":[0,18]}]},{"content":"In addition to the rules, there are a number of identifier <bpt id=\"p1\">[</bpt>naming conventions<ept id=\"p1\">](../../../standard/design-guidelines/naming-guidelines.md)</ept> used throughout the .NET APIs.","pos":[1225,1393],"source":"In addition to the rules, there are a number of identifier [naming conventions](../../../standard/design-guidelines/naming-guidelines.md) used throughout the .NET APIs."},{"content":"By convention, C# programs use <ph id=\"ph1\">`PascalCase`</ph> for type names, namespaces, and all public members.","pos":[1394,1489],"source":" By convention, C# programs use `PascalCase` for type names, namespaces, and all public members."},{"content":"In addition, the following conventions are common:","pos":[1490,1540]},{"pos":[1544,1585],"content":"Interface names start with a capital <ph id=\"ph1\">`I`</ph>.","source":"Interface names start with a capital `I`."},{"pos":[1588,1634],"content":"Attribute types end with the word <ph id=\"ph1\">`Attribute`</ph>.","source":"Attribute types end with the word `Attribute`."},{"content":"Enum types use a singular noun for non-flags, and a plural noun for flags.","pos":[1637,1711]},{"content":"Identifiers should not contain two consecutive <ph id=\"ph1\">`_`</ph> characters.","pos":[1714,1776],"source":"Identifiers should not contain two consecutive `_` characters."},{"content":"Those names are reserved for compiler generated identifiers.","pos":[1777,1837]},{"pos":[1842,1867],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[1937,1945],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1949,1984],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../index.md)</ept>","source":"[C# Programming Guide](../index.md)"},{"pos":[1987,2038],"content":"<bpt id=\"p1\">[</bpt>Inside a C# Program<ept id=\"p1\">](../inside-a-program/index.md)</ept>","source":"[Inside a C# Program](../inside-a-program/index.md)"},{"pos":[2041,2090],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../language-reference/index.md)</ept>","source":"[C# Reference](../../language-reference/index.md)"},{"pos":[2093,2137],"content":"<bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](../classes-and-structs/classes.md)</ept>","source":"[Classes](../classes-and-structs/classes.md)"},{"pos":[2140,2184],"content":"<bpt id=\"p1\">[</bpt>Structs<ept id=\"p1\">](../classes-and-structs/structs.md)</ept>","source":"[Structs](../classes-and-structs/structs.md)"},{"pos":[2187,2223],"content":"<bpt id=\"p1\">[</bpt>Namespaces<ept id=\"p1\">](../namespaces/index.md)</ept>","source":"[Namespaces](../namespaces/index.md)"},{"pos":[2226,2262],"content":"<bpt id=\"p1\">[</bpt>Interfaces<ept id=\"p1\">](../interfaces/index.md)</ept>","source":"[Interfaces](../interfaces/index.md)"},{"pos":[2265,2299],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../delegates/index.md)</ept>","source":"[Delegates](../delegates/index.md)"}]}