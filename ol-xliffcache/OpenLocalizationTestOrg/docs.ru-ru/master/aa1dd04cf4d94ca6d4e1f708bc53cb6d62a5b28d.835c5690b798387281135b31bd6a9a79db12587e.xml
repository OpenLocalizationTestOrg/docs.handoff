{"content":"---\ntitle: Building a complete .NET Core solution on Windows, using Visual Studio 2017 | Microsoft Docs\ndescription: Building a complete .NET Core solution on Windows, using Visual Studio 2017\nkeywords: .NET, .NET Core\nauthor: bleroy\nms.author: mairaw\nms.date: 11/16/2016\nms.topic: article\nms.prod: .net-core\nms.devlang: dotnet\nms.assetid: ba7e082c-a7c8-431e-a342-f67734b660f6\n---\n\n# Building a complete .NET Core solution on Windows, using Visual Studio 2017\n\nVisual Studio 2017 provides a full-featured development environment for developing .NET Core applications. The procedures in this document describe the steps necessary to build a typical .NET Core solution that includes reusable libraries, testing, and using third-party libraries. \n\n## Prerequisites\n\nFollow the instructions on [our prerequisites page](../windows-prerequisites.md) to update your environment.\n\n## A solution using only .NET Core projects\n\n### Writing the library\n\n1. In Visual Studio, choose **File**, **New**, **Project**. In the **New Project** dialog, expand the **Visual C#** node and choose the **.NET Core** node, and then choose **Class Library (.NET Standard)**. \n\n2. Name the project \"Library\" and the solution \"Golden\". Leave **Create directory for solution** checked. Click **OK**.\n\n3. In Solution Explorer, open the context menu for the **Dependencies** node and choose **Manage NuGet Packages**.\n\n4. Choose \"nuget.org\" as the **Package source**, and choose the **Browse** tab. Browse for **Newtonsoft.Json**. Click **Install**, and accept the license agreement. The package should now appear under **Dependencies/NuGet** and be automatically restored.\n\n5. Rename the `Class1.cs` file to `Thing.cs`. Accept the rename of the class. Add a method: `public int Get(int number) => Newtonsoft.Json.JsonConvert.DeserializeObject<int>($\"{number}\");`\n\n7. On the **Build** menu, choose **Build Solution**.\n\n   The solution should build without error.\n\n### Writing the test project\n\n1. In Solution Explorer, open the context menu for the **Solution** node and choose **Add**, **New Project**. In the **New Project** dialog, under **Visual C# / .NET Core**, choose **Unit Test Project (.NET Core)**. Name it \"TestLibrary\" and click OK. \n\n2. In the **TestLibrary** project, open the context menu for the **Dependencies** node and choose **Add Reference**. Click **Projects**, then check the Library project and click OK. This adds a reference to your library from the test project.\n\n3. Rename the `UnitTest1.cs` file to `LibraryTests.cs` and accept the class rename. Add `using Library;` to the top of the file, and replace the `TestMethod1` method with the following code:\n    ```csharp\n    [TestMethod]\n    public void ThingGetsObjectValFromNumber()\n    {\n        Assert.AreEqual(42, new Thing().Get(42));\n    }\n    ```\n\n   You should now be able to build the solution. \n   \n4. On the **Test** menu, choose **Windows**, **Test Explorer** in order to get the test explorer window into your workspace. After a few seconds, the `ThingGetsObjectValFromNumber` test should appear in the test explorer. Choose **Run All**.\n   \n   The test should pass.\n\n### Writing the console app\n\n1. In Solution Explorer, open the context menu for the solution, and add a new **Console App (.NET Core)** project. Name it \"App\".\n\n2. In the **App** project, open the context menu for the **Dependencies** node and choose **Add**,  **Reference**. \n\n3. In the **Reference Manager** dialog, check **Library** under the **Projects**, **Solution** node, and then click **OK**\n\n6. Open the context menu for the **App** node and choose **Set as StartUp Project**. This ensures that hitting F5 or CTRL+F5 will start the console app.\n\n7. Open the `Program.cs` file, add a `using Library;` directive to the top of the file, and then add `Console.WriteLine($\"The answer is {new Thing().Get(42)}.\");` to the `Main` method.\n\n8. Set a breakpoint after the line that you just added.\n\n9. Press F5 to run the application..\n\n   The application should build without error, and should hit the breakpoint. You should also be able to check that the application output \"The answer is 42.\".\n","nodes":[{"pos":[11,103],"content":"Building a complete .NET Core solution on Windows, using Visual Studio 2017 | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"Building a complete .NET Core solution on Windows, using Visual Studio 2017 | Microsoft Docs","pos":[0,92]}]},{"pos":[117,192],"content":"Building a complete .NET Core solution on Windows, using Visual Studio 2017","needQuote":true,"needEscape":true,"nodes":[{"content":"Building a complete .NET Core solution on Windows, using Visual Studio 2017","pos":[0,75]}]},{"pos":[203,218],"content":".NET, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"pos":[384,459],"content":"Building a complete .NET Core solution on Windows, using Visual Studio 2017","linkify":"Building a complete .NET Core solution on Windows, using Visual Studio 2017","nodes":[{"content":"Building a complete .NET Core solution on Windows, using Visual Studio 2017","pos":[0,75]}]},{"content":"Visual Studio 2017 provides a full-featured development environment for developing .NET Core applications.","pos":[461,567]},{"content":"The procedures in this document describe the steps necessary to build a typical .NET Core solution that includes reusable libraries, testing, and using third-party libraries.","pos":[568,742]},{"pos":[748,761],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"pos":[763,871],"content":"Follow the instructions on <bpt id=\"p1\">[</bpt>our prerequisites page<ept id=\"p1\">](../windows-prerequisites.md)</ept> to update your environment.","source":"Follow the instructions on [our prerequisites page](../windows-prerequisites.md) to update your environment."},{"pos":[876,916],"content":"A solution using only .NET Core projects","linkify":"A solution using only .NET Core projects","nodes":[{"content":"A solution using only .NET Core projects","pos":[0,40]}]},{"pos":[922,941],"content":"Writing the library","linkify":"Writing the library","nodes":[{"content":"Writing the library","pos":[0,19]}]},{"content":"In Visual Studio, choose <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","pos":[946,1002],"source":"In Visual Studio, choose **File**, **New**, **Project**."},{"content":"In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog, expand the <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept> node and choose the <bpt id=\"p3\">**</bpt>.NET Core<ept id=\"p3\">**</ept> node, and then choose <bpt id=\"p4\">**</bpt>Class Library (.NET Standard)<ept id=\"p4\">**</ept>.","pos":[1003,1149],"source":" In the **New Project** dialog, expand the **Visual C#** node and choose the **.NET Core** node, and then choose **Class Library (.NET Standard)**."},{"content":"Name the project \"Library\" and the solution \"Golden\".","pos":[1155,1208]},{"content":"Leave <bpt id=\"p1\">**</bpt>Create directory for solution<ept id=\"p1\">**</ept> checked.","pos":[1209,1257],"source":" Leave **Create directory for solution** checked."},{"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","pos":[1258,1271],"source":" Click **OK**."},{"pos":[1276,1387],"content":"In Solution Explorer, open the context menu for the <bpt id=\"p1\">**</bpt>Dependencies<ept id=\"p1\">**</ept> node and choose <bpt id=\"p2\">**</bpt>Manage NuGet Packages<ept id=\"p2\">**</ept>.","source":"In Solution Explorer, open the context menu for the **Dependencies** node and choose **Manage NuGet Packages**."},{"content":"Choose \"nuget.org\" as the <bpt id=\"p1\">**</bpt>Package source<ept id=\"p1\">**</ept>, and choose the <bpt id=\"p2\">**</bpt>Browse<ept id=\"p2\">**</ept> tab.","pos":[1392,1468],"source":"Choose \"nuget.org\" as the **Package source**, and choose the **Browse** tab."},{"content":"Browse for <bpt id=\"p1\">**</bpt>Newtonsoft.Json<ept id=\"p1\">**</ept>.","pos":[1469,1500],"source":" Browse for **Newtonsoft.Json**."},{"content":"Click <bpt id=\"p1\">**</bpt>Install<ept id=\"p1\">**</ept>, and accept the license agreement.","pos":[1501,1553],"source":" Click **Install**, and accept the license agreement."},{"content":"The package should now appear under <bpt id=\"p1\">**</bpt>Dependencies/NuGet<ept id=\"p1\">**</ept> and be automatically restored.","pos":[1554,1643],"source":" The package should now appear under **Dependencies/NuGet** and be automatically restored."},{"content":"Rename the <ph id=\"ph1\">`Class1.cs`</ph> file to <ph id=\"ph2\">`Thing.cs`</ph>.","pos":[1648,1690],"source":"Rename the `Class1.cs` file to `Thing.cs`."},{"content":"Accept the rename of the class.","pos":[1691,1722]},{"content":"Add a method: <ph id=\"ph1\">`public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($\"{number}\");`</ph>","pos":[1723,1833],"source":" Add a method: `public int Get(int number) => Newtonsoft.Json.JsonConvert.DeserializeObject<int>($\"{number}\");`"},{"pos":[1838,1887],"content":"On the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> menu, choose <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept>.","source":"On the **Build** menu, choose **Build Solution**."},{"content":"The solution should build without error.","pos":[1892,1932]},{"pos":[1938,1962],"content":"Writing the test project","linkify":"Writing the test project","nodes":[{"content":"Writing the test project","pos":[0,24]}]},{"content":"In Solution Explorer, open the context menu for the <bpt id=\"p1\">**</bpt>Solution<ept id=\"p1\">**</ept> node and choose <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>New Project<ept id=\"p3\">**</ept>.","pos":[1967,2073],"source":"In Solution Explorer, open the context menu for the **Solution** node and choose **Add**, **New Project**."},{"content":"In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog, under <bpt id=\"p2\">**</bpt>Visual C# / .NET Core<ept id=\"p2\">**</ept>, choose <bpt id=\"p3\">**</bpt>Unit Test Project (.NET Core)<ept id=\"p3\">**</ept>.","pos":[2074,2179],"source":" In the **New Project** dialog, under **Visual C# / .NET Core**, choose **Unit Test Project (.NET Core)**."},{"content":"Name it \"TestLibrary\" and click OK.","pos":[2180,2215]},{"content":"In the <bpt id=\"p1\">**</bpt>TestLibrary<ept id=\"p1\">**</ept> project, open the context menu for the <bpt id=\"p2\">**</bpt>Dependencies<ept id=\"p2\">**</ept> node and choose <bpt id=\"p3\">**</bpt>Add Reference<ept id=\"p3\">**</ept>.","pos":[2221,2334],"source":"In the **TestLibrary** project, open the context menu for the **Dependencies** node and choose **Add Reference**."},{"content":"Click <bpt id=\"p1\">**</bpt>Projects<ept id=\"p1\">**</ept>, then check the Library project and click OK.","pos":[2335,2399],"source":" Click **Projects**, then check the Library project and click OK."},{"content":"This adds a reference to your library from the test project.","pos":[2400,2460]},{"content":"Rename the <ph id=\"ph1\">`UnitTest1.cs`</ph> file to <ph id=\"ph2\">`LibraryTests.cs`</ph> and accept the class rename.","pos":[2465,2545],"source":"Rename the `UnitTest1.cs` file to `LibraryTests.cs` and accept the class rename."},{"content":"Add <ph id=\"ph1\">`using Library;`</ph> to the top of the file, and replace the <ph id=\"ph2\">`TestMethod1`</ph> method with the following code:","pos":[2546,2652],"source":" Add `using Library;` to the top of the file, and replace the `TestMethod1` method with the following code:"},{"content":"You should now be able to build the solution.","pos":[2805,2850]},{"content":"On the <bpt id=\"p1\">**</bpt>Test<ept id=\"p1\">**</ept> menu, choose <bpt id=\"p2\">**</bpt>Windows<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Test Explorer<ept id=\"p3\">**</ept> in order to get the test explorer window into your workspace.","pos":[2859,2980],"source":"On the **Test** menu, choose **Windows**, **Test Explorer** in order to get the test explorer window into your workspace."},{"content":"After a few seconds, the <ph id=\"ph1\">`ThingGetsObjectValFromNumber`</ph> test should appear in the test explorer.","pos":[2981,3077],"source":" After a few seconds, the `ThingGetsObjectValFromNumber` test should appear in the test explorer."},{"content":"Choose <bpt id=\"p1\">**</bpt>Run All<ept id=\"p1\">**</ept>.","pos":[3078,3097],"source":" Choose **Run All**."},{"content":"The test should pass.","pos":[3105,3126]},{"pos":[3132,3155],"content":"Writing the console app","linkify":"Writing the console app","nodes":[{"content":"Writing the console app","pos":[0,23]}]},{"content":"In Solution Explorer, open the context menu for the solution, and add a new <bpt id=\"p1\">**</bpt>Console App (.NET Core)<ept id=\"p1\">**</ept> project.","pos":[3160,3272],"source":"In Solution Explorer, open the context menu for the solution, and add a new **Console App (.NET Core)** project."},{"content":"Name it \"App\".","pos":[3273,3287]},{"pos":[3292,3403],"content":"In the <bpt id=\"p1\">**</bpt>App<ept id=\"p1\">**</ept> project, open the context menu for the <bpt id=\"p2\">**</bpt>Dependencies<ept id=\"p2\">**</ept> node and choose <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>,  <bpt id=\"p4\">**</bpt>Reference<ept id=\"p4\">**</ept>.","source":"In the **App** project, open the context menu for the **Dependencies** node and choose **Add**,  **Reference**."},{"pos":[3409,3528],"content":"In the <bpt id=\"p1\">**</bpt>Reference Manager<ept id=\"p1\">**</ept> dialog, check <bpt id=\"p2\">**</bpt>Library<ept id=\"p2\">**</ept> under the <bpt id=\"p3\">**</bpt>Projects<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Solution<ept id=\"p4\">**</ept> node, and then click <bpt id=\"p5\">**</bpt>OK<ept id=\"p5\">**</ept>","source":"In the **Reference Manager** dialog, check **Library** under the **Projects**, **Solution** node, and then click **OK**"},{"content":"Open the context menu for the <bpt id=\"p1\">**</bpt>App<ept id=\"p1\">**</ept> node and choose <bpt id=\"p2\">**</bpt>Set as StartUp Project<ept id=\"p2\">**</ept>.","pos":[3533,3614],"source":"Open the context menu for the **App** node and choose **Set as StartUp Project**."},{"content":"This ensures that hitting F5 or CTRL+F5 will start the console app.","pos":[3615,3682]},{"pos":[3687,3868],"content":"Open the <ph id=\"ph1\">`Program.cs`</ph> file, add a <ph id=\"ph2\">`using Library;`</ph> directive to the top of the file, and then add <ph id=\"ph3\">`Console.WriteLine($\"The answer is {new Thing().Get(42)}.\");`</ph> to the <ph id=\"ph4\">`Main`</ph> method.","source":"Open the `Program.cs` file, add a `using Library;` directive to the top of the file, and then add `Console.WriteLine($\"The answer is {new Thing().Get(42)}.\");` to the `Main` method."},{"content":"Set a breakpoint after the line that you just added.","pos":[3873,3925]},{"content":"Press F5 to run the application..","pos":[3930,3963]},{"content":"The application should build without error, and should hit the breakpoint.","pos":[3968,4042]},{"content":"You should also be able to check that the application output \"The answer is 42.\".","pos":[4043,4124]}]}