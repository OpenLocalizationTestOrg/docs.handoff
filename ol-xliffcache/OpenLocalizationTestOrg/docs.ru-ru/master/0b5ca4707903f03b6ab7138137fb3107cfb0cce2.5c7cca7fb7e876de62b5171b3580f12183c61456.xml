{"content":"---\ntitle: \"Indexers (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2017-03-10\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"cs.indexers\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"indexers [C#]\"\n  - \"C# language, indexers\"\nms.assetid: 022cd27d-d5e0-4cfe-8b97-dc018cc3355d\ncaps.latest.revision: 29\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Indexers (C# Programming Guide)\n\nIndexers allow instances of a class or struct to be indexed just like arrays. The indexed value can be set or retrieved without explicitly specifying a type or instance member. Indexers resemble [properties](../../../csharp/programming-guide/classes-and-structs/properties.md) except that their accessors take parameters.  \n \n The following example defines a generic class with simple [get](../../../csharp/language-reference/keywords/get.md) and [set](../../../csharp/language-reference/keywords/set.md) accessor methods to assign and retrieve values. The `Program` class creates an instance of this class for storing strings.  \n  \n [!code-cs[indexers#1](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-1.cs)]  \n  \n> [!NOTE]\n>  For more examples, see [Related Sections](../../../csharp/programming-guide/indexers/index.md#BKMK_RelatedSections).  \n  \n## Expression Body Definitions  \n \nIt is common for an indexer's get or set accessor to consist of a single statement that either returns or sets a value. Expression-bodied members provide a simplified syntax to support this scenario. Starting with C# 6, a read-only indexer can be implemented as an expression-bodied member, as the following example shows.\n\n[!code-cs[indexers#2](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-2.cs)]  \n\nNote that `=>` introduces the expression body, and that the `get` keyword is not used. \n\nStarting with C# 7, both the get and set accessor can be an implemented as expression-bodied members. In this case, both `get` and `set` keywords must be used. For example:\n\n[!code-cs[indexers#3](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-3.cs)]  \n  \n## Indexers Overview  \n  \n-   Indexers enable objects to be indexed in a similar manner to arrays.  \n  \n-   A `get` accessor returns a value. A `set` accessor assigns a value.  \n  \n-   The [this](../../../csharp/language-reference/keywords/this.md) keyword is used to define the indexer.  \n  \n-   The [value](../../../csharp/language-reference/keywords/value.md) keyword is used to define the value being assigned by the `set` indexer.  \n  \n-   Indexers do not have to be indexed by an integer value; it is up to you how to define the specific look-up mechanism.  \n  \n-   Indexers can be overloaded.  \n  \n-   Indexers can have more than one formal parameter, for example, when accessing a two-dimensional array.  \n  \n##  <a name=\"BKMK_RelatedSections\"></a> Related Sections  \n  \n-   [Using Indexers](../../../csharp/programming-guide/indexers/using-indexers.md)  \n  \n-   [Indexers in Interfaces](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)  \n  \n-   [Comparison Between Properties and Indexers](../../../csharp/programming-guide/indexers/comparison-between-properties-and-indexers.md)  \n  \n-   [Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)","nodes":[{"pos":[12,60],"content":"Indexers (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Indexers (C# Programming Guide) | Microsoft Docs","pos":[0,48]}]},{"pos":[586,617],"content":"Indexers (C# Programming Guide)","linkify":"Indexers (C# Programming Guide)","nodes":[{"content":"Indexers (C# Programming Guide)","pos":[0,31]}]},{"content":"Indexers allow instances of a class or struct to be indexed just like arrays.","pos":[619,696]},{"content":"The indexed value can be set or retrieved without explicitly specifying a type or instance member.","pos":[697,795]},{"content":"Indexers resemble <bpt id=\"p1\">[</bpt>properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept> except that their accessors take parameters.","pos":[796,940],"source":" Indexers resemble [properties](../../../csharp/programming-guide/classes-and-structs/properties.md) except that their accessors take parameters."},{"content":"The following example defines a generic class with simple <bpt id=\"p1\">[</bpt>get<ept id=\"p1\">](../../../csharp/language-reference/keywords/get.md)</ept> and <bpt id=\"p2\">[</bpt>set<ept id=\"p2\">](../../../csharp/language-reference/keywords/set.md)</ept> accessor methods to assign and retrieve values.","pos":[946,1171],"source":"The following example defines a generic class with simple [get](../../../csharp/language-reference/keywords/get.md) and [set](../../../csharp/language-reference/keywords/set.md) accessor methods to assign and retrieve values."},{"content":"The <ph id=\"ph1\">`Program`</ph> class creates an instance of this class for storing strings.","pos":[1172,1246],"source":" The `Program` class creates an instance of this class for storing strings."},{"pos":[1253,1352],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>indexers#1<ept id=\"p2\">](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[indexers#1](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-1.cs)]"},{"pos":[1360,1487],"content":"[!NOTE]\n For more examples, see [Related Sections](../../../csharp/programming-guide/indexers/index.md#BKMK_RelatedSections).","leadings":["","> "],"nodes":[{"content":"For more examples, see <bpt id=\"p1\">[</bpt>Related Sections<ept id=\"p1\">](../../../csharp/programming-guide/indexers/index.md#BKMK_RelatedSections)</ept>.","pos":[9,125],"source":" For more examples, see [Related Sections](../../../csharp/programming-guide/indexers/index.md#BKMK_RelatedSections)."}]},{"pos":[1496,1523],"content":"Expression Body Definitions","linkify":"Expression Body Definitions","nodes":[{"content":"Expression Body Definitions","pos":[0,27]}]},{"content":"It is common for an indexer's get or set accessor to consist of a single statement that either returns or sets a value.","pos":[1528,1647]},{"content":"Expression-bodied members provide a simplified syntax to support this scenario.","pos":[1648,1727]},{"content":"Starting with C# 6, a read-only indexer can be implemented as an expression-bodied member, as the following example shows.","pos":[1728,1850]},{"pos":[1852,1951],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>indexers#2<ept id=\"p2\">](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[indexers#2](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-2.cs)]"},{"pos":[1955,2041],"content":"Note that <ph id=\"ph1\">`=&gt;`</ph> introduces the expression body, and that the <ph id=\"ph2\">`get`</ph> keyword is not used.","source":"Note that `=>` introduces the expression body, and that the `get` keyword is not used."},{"content":"Starting with C# 7, both the get and set accessor can be an implemented as expression-bodied members.","pos":[2044,2145]},{"content":"In this case, both <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> keywords must be used.","pos":[2146,2203],"source":" In this case, both `get` and `set` keywords must be used."},{"content":"For example:","pos":[2204,2216]},{"pos":[2218,2317],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>indexers#3<ept id=\"p2\">](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[indexers#3](../../../../samples/snippets/csharp/programming-guide/indexers/indexer-3.cs)]"},{"pos":[2326,2343],"content":"Indexers Overview","linkify":"Indexers Overview","nodes":[{"content":"Indexers Overview","pos":[0,17]}]},{"content":"Indexers enable objects to be indexed in a similar manner to arrays.","pos":[2353,2421]},{"content":"A <ph id=\"ph1\">`get`</ph> accessor returns a value.","pos":[2431,2464],"source":"A `get` accessor returns a value."},{"content":"A <ph id=\"ph1\">`set`</ph> accessor assigns a value.","pos":[2465,2498],"source":" A `set` accessor assigns a value."},{"pos":[2508,2610],"content":"The <bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](../../../csharp/language-reference/keywords/this.md)</ept> keyword is used to define the indexer.","source":"The [this](../../../csharp/language-reference/keywords/this.md) keyword is used to define the indexer."},{"pos":[2620,2758],"content":"The <bpt id=\"p1\">[</bpt>value<ept id=\"p1\">](../../../csharp/language-reference/keywords/value.md)</ept> keyword is used to define the value being assigned by the <ph id=\"ph1\">`set`</ph> indexer.","source":"The [value](../../../csharp/language-reference/keywords/value.md) keyword is used to define the value being assigned by the `set` indexer."},{"content":"Indexers do not have to be indexed by an integer value; it is up to you how to define the specific look-up mechanism.","pos":[2768,2885]},{"content":"Indexers can be overloaded.","pos":[2895,2922]},{"content":"Indexers can have more than one formal parameter, for example, when accessing a two-dimensional array.","pos":[2932,3034]},{"pos":[3044,3096],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_RelatedSections\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Related Sections","linkify":"<a name=\"BKMK_RelatedSections\"></a> Related Sections","source":"<a name=\"BKMK_RelatedSections\"></a> Related Sections"},{"pos":[3106,3184],"content":"<bpt id=\"p1\">[</bpt>Using Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/using-indexers.md)</ept>","source":"[Using Indexers](../../../csharp/programming-guide/indexers/using-indexers.md)"},{"pos":[3194,3288],"content":"<bpt id=\"p1\">[</bpt>Indexers in Interfaces<ept id=\"p1\">](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)</ept>","source":"[Indexers in Interfaces](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)"},{"pos":[3298,3432],"content":"<bpt id=\"p1\">[</bpt>Comparison Between Properties and Indexers<ept id=\"p1\">](../../../csharp/programming-guide/indexers/comparison-between-properties-and-indexers.md)</ept>","source":"[Comparison Between Properties and Indexers](../../../csharp/programming-guide/indexers/comparison-between-properties-and-indexers.md)"},{"pos":[3442,3571],"content":"<bpt id=\"p1\">[</bpt>Restricting Accessor Accessibility<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)</ept>","source":"[Restricting Accessor Accessibility](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)"},{"pos":[3580,3605],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3719,3727],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3731,3798],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","pos":[3801,3883],"source":" [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"}]}