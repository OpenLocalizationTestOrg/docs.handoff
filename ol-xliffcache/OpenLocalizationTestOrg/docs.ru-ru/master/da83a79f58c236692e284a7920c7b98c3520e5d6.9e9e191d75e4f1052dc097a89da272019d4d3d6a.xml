{"content":"---\ntitle: \"How to: Concatenate Multiple Strings (C# Guide)\"\ndescription: There are multiple ways to concatenate strings in C#. Learn the options and the reasons behind different choices.\nms.date: 02/20/2018\nhelpviewer_keywords: \n  - \"joining strings [C#]\"\n  - \"concatenating strings [C#]\"\n  - \"strings [C#], concatenation\"\nms.assetid: 8e16736f-4096-4f3f-be0f-9d4c3ff63520\n---\n# How to: Concatenate Multiple Strings (C# Guide)\n\n*Concatenation* is the process of appending one string to the end of another string. You concatenate strings by using the `+` operator. For string literals and string constants, concatenation occurs at compile time; no run-time concatenation occurs. For string variables, concatenation occurs only at run time.\n\n[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]\n\nThe following example uses concatenation to split a long string literal into smaller strings in order to improve readability in the source code. These parts are concatenated into a single string at compile time. There is no run-time performance cost regardless of the number of strings involved.  \n  \n [!code-csharp-interactive[Combining strings at compile time](../../../samples/snippets/csharp/how-to/strings/Concatenate.cs#1)]  \n\nTo concatenate string variables, you can use the `+` or `+=` operators, [string interpolation](../language-reference/tokens/interpolated.md) or the <xref:System.String.Format%2A?displayProperty=nameWithType>, <xref:System.String.Concat%2A?displayProperty=nameWithType>, <xref:System.String.Join%2A?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.Append%2A?displayProperty=nameWithType> methods. The `+` operator is easy to use and makes for intuitive code. Even if you use several `+` operators in one statement, the string content is copied only once. The following code shows examples of using the `+` and `+=` operators to concatenate strings:\n\n[!code-csharp-interactive[combining strings using +](../../../samples/snippets/csharp/how-to/strings/Concatenate.cs#2)]  \n\nIn some expressions, it's easier to concatenate strings using string interpolation, as the following code shows:\n  \n[!code-csharp-interactive[building strings using string interpolation](../../../samples/snippets/csharp/how-to/strings/Concatenate.cs#3)]  \n  \n> [!NOTE]\n> In string concatenation operations, the C# compiler treats a null string the same as an empty string.\n\nOther method to concatenate strings is <xref:System.String.Format%2A?displayProperty=nameWithType>. This method works well when you are building a string from a small number of component strings.\n\nIn other cases you may be combining strings in a loop, where you don't know how many source strings you are combining, and the actual number of source strings may be quite large. The <xref:System.Text.StringBuilder> class was designed for these scenarios. The following code uses the <xref:System.Text.StringBuilder.Append%2A> method of the <xref:System.Text.StringBuilder> class to concatenate strings.  \n  \n[!code-csharp-interactive[string concatenation using string builder](../../../samples/snippets/csharp/how-to/strings/Concatenate.cs#4)]  \n\nYou can read more about the [reasons to choose string concatenation or the `StringBuilder` class](xref:System.Text.StringBuilder#StringAndSB)\n\nAnother option to join strings from a collection is to use <xref:System.String.Concat%2A?displayProperty=nameWithType> method. Use <xref:System.String.Join%2A?displayProperty=nameWithType> method if source strings should be separated by a delimeter. The following code combines an array of words using both methods:\n\n[!code-csharp-interactive[concatenation of string collection](../../../samples/snippets/csharp/how-to/strings/Concatenate.cs#5)]\n\nAt last, you can use [LINQ](../programming-guide/concepts/linq/index.md)\nand the <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType> method to join strings from a collection. This method combines\nthe source strings using a lambda expression. The lambda expression does the\nwork to add each string to the existing accumulation. The following example\ncombines an array of words by adding a space between each word in the array:\n\n[!code-csharp-interactive[string concatenation using LINQ expressions](../../../samples/snippets/csharp/how-to/strings/Concatenate.cs#6)]  \n\nYou can try these samples by looking at the code in our [GitHub repository](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings). Or you can download the samples [as a zip file](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip).\n\n## See also\n\n- <xref:System.String>\n- <xref:System.Text.StringBuilder>\n- [C# Programming Guide](../programming-guide/index.md)\n- [Strings](../programming-guide/strings/index.md)\n","nodes":[{"pos":[4,372],"embed":true,"restype":"x-metadata","content":"title: \"How to: Concatenate Multiple Strings (C# Guide)\"\ndescription: There are multiple ways to concatenate strings in C#. Learn the options and the reasons behind different choices.\nms.date: 02/20/2018\nhelpviewer_keywords: \n  - \"joining strings [C#]\"\n  - \"concatenating strings [C#]\"\n  - \"strings [C#], concatenation\"\nms.assetid: 8e16736f-4096-4f3f-be0f-9d4c3ff63520","nodes":[{"content":"How to: Concatenate Multiple Strings (C# Guide)","nodes":[{"pos":[0,47],"content":"How to: Concatenate Multiple Strings (C# Guide)","nodes":[{"content":"How to: Concatenate Multiple Strings (C# Guide)","pos":[0,47]}]}],"path":["title"],"nosxs":false},{"content":"There are multiple ways to concatenate strings in C#. Learn the options and the reasons behind different choices.","nodes":[{"pos":[0,113],"content":"There are multiple ways to concatenate strings in C#. Learn the options and the reasons behind different choices.","nodes":[{"content":"There are multiple ways to concatenate strings in C#. Learn the options and the reasons behind different choices.","pos":[0,113],"nodes":[{"content":"There are multiple ways to concatenate strings in C#.","pos":[0,53]},{"content":"Learn the options and the reasons behind different choices.","pos":[54,113]}]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[379,426],"content":"How to: Concatenate Multiple Strings (C# Guide)","linkify":"How to: Concatenate Multiple Strings (C# Guide)","nodes":[{"content":"How to: Concatenate Multiple Strings (C# Guide)","pos":[0,47]}]},{"content":"<bpt id=\"p1\">*</bpt>Concatenation<ept id=\"p1\">*</ept> is the process of appending one string to the end of another string.","pos":[428,512],"source":"*Concatenation* is the process of appending one string to the end of another string."},{"content":"You concatenate strings by using the <ph id=\"ph1\">`+`</ph> operator.","pos":[513,563],"source":" You concatenate strings by using the `+` operator."},{"content":"For string literals and string constants, concatenation occurs at compile time; no run-time concatenation occurs.","pos":[564,677]},{"content":"For string variables, concatenation occurs only at run time.","pos":[678,738]},{"content":"The following example uses concatenation to split a long string literal into smaller strings in order to improve readability in the source code.","pos":[809,953]},{"content":"These parts are concatenated into a single string at compile time.","pos":[954,1020]},{"content":"There is no run-time performance cost regardless of the number of strings involved.","pos":[1021,1104]},{"content":"To concatenate string variables, you can use the <ph id=\"ph1\">`+`</ph> or <ph id=\"ph2\">`+=`</ph> operators, <bpt id=\"p1\">[</bpt>string interpolation<ept id=\"p1\">](../language-reference/tokens/interpolated.md)</ept> or the <ph id=\"ph3\">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.String.Concat%2A?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.String.Join%2A?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph6\">&lt;xref:System.Text.StringBuilder.Append%2A?displayProperty=nameWithType&gt;</ph> methods.","pos":[1242,1653],"source":"To concatenate string variables, you can use the `+` or `+=` operators, [string interpolation](../language-reference/tokens/interpolated.md) or the <xref:System.String.Format%2A?displayProperty=nameWithType>, <xref:System.String.Concat%2A?displayProperty=nameWithType>, <xref:System.String.Join%2A?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.Append%2A?displayProperty=nameWithType> methods."},{"content":"The <ph id=\"ph1\">`+`</ph> operator is easy to use and makes for intuitive code.","pos":[1654,1715],"source":" The `+` operator is easy to use and makes for intuitive code."},{"content":"Even if you use several <ph id=\"ph1\">`+`</ph> operators in one statement, the string content is copied only once.","pos":[1716,1811],"source":" Even if you use several `+` operators in one statement, the string content is copied only once."},{"content":"The following code shows examples of using the <ph id=\"ph1\">`+`</ph> and <ph id=\"ph2\">`+=`</ph> operators to concatenate strings:","pos":[1812,1905],"source":" The following code shows examples of using the `+` and `+=` operators to concatenate strings:"},{"content":"In some expressions, it's easier to concatenate strings using string interpolation, as the following code shows:","pos":[2030,2142]},{"pos":[2291,2402],"content":"[!NOTE]\nIn string concatenation operations, the C# compiler treats a null string the same as an empty string.","leadings":["","> "],"nodes":[{"content":"In string concatenation operations, the C# compiler treats a null string the same as an empty string.","pos":[8,109]}]},{"content":"Other method to concatenate strings is <ph id=\"ph1\">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph>.","pos":[2404,2503],"source":"Other method to concatenate strings is <xref:System.String.Format%2A?displayProperty=nameWithType>."},{"content":"This method works well when you are building a string from a small number of component strings.","pos":[2504,2599]},{"content":"In other cases you may be combining strings in a loop, where you don't know how many source strings you are combining, and the actual number of source strings may be quite large.","pos":[2601,2779]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class was designed for these scenarios.","pos":[2780,2856],"source":" The <xref:System.Text.StringBuilder> class was designed for these scenarios."},{"content":"The following code uses the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> class to concatenate strings.","pos":[2857,3004],"source":" The following code uses the <xref:System.Text.StringBuilder.Append%2A> method of the <xref:System.Text.StringBuilder> class to concatenate strings."},{"pos":[3149,3290],"content":"You can read more about the <bpt id=\"p1\">[</bpt>reasons to choose string concatenation or the <ph id=\"ph1\">`StringBuilder`</ph> class<ept id=\"p1\">](xref:System.Text.StringBuilder#StringAndSB)</ept>","source":"You can read more about the [reasons to choose string concatenation or the `StringBuilder` class](xref:System.Text.StringBuilder#StringAndSB)"},{"content":"Another option to join strings from a collection is to use <ph id=\"ph1\">&lt;xref:System.String.Concat%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[3292,3418],"source":"Another option to join strings from a collection is to use <xref:System.String.Concat%2A?displayProperty=nameWithType> method."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.String.Join%2A?displayProperty=nameWithType&gt;</ph> method if source strings should be separated by a delimeter.","pos":[3419,3541],"source":" Use <xref:System.String.Join%2A?displayProperty=nameWithType> method if source strings should be separated by a delimeter."},{"content":"The following code combines an array of words using both methods:","pos":[3542,3607]},{"content":"At last, you can use <bpt id=\"p1\">[</bpt>LINQ<ept id=\"p1\">](../programming-guide/concepts/linq/index.md)</ept> and the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType&gt;</ph> method to join strings from a collection.","pos":[3739,3933],"source":"At last, you can use [LINQ](../programming-guide/concepts/linq/index.md)\nand the <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType> method to join strings from a collection."},{"content":"This method combines the source strings using a lambda expression.","pos":[3934,4000],"source":" This method combines\nthe source strings using a lambda expression."},{"content":"The lambda expression does the work to add each string to the existing accumulation.","pos":[4001,4085],"source":" The lambda expression does the\nwork to add each string to the existing accumulation."},{"content":"The following example combines an array of words by adding a space between each word in the array:","pos":[4086,4184],"source":" The following example\ncombines an array of words by adding a space between each word in the array:"},{"content":"You can try these samples by looking at the code in our <bpt id=\"p1\">[</bpt>GitHub repository<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings)</ept>.","pos":[4327,4481],"source":"You can try these samples by looking at the code in our [GitHub repository](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings)."},{"content":"Or you can download the samples <bpt id=\"p1\">[</bpt>as a zip file<ept id=\"p1\">](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip)</ept>.","pos":[4482,4611],"source":" Or you can download the samples [as a zip file](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip)."},{"pos":[4616,4624],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4686,4739],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../programming-guide/index.md)"},{"pos":[4742,4790],"content":"<bpt id=\"p1\">[</bpt>Strings<ept id=\"p1\">](../programming-guide/strings/index.md)</ept>","source":"[Strings](../programming-guide/strings/index.md)"}]}