{"content":"---\ntitle: \"Cannot copy the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument because type &#39;&lt;typename1&gt;&#39; cannot be converted to type &#39;&lt;typename2&gt;&#39; | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vbc33037\"\n  - \"BC33037\"\nhelpviewer_keywords: \n  - \"BC33037\"\nms.assetid: 3ff137e2-e062-4e54-abf5-e902e2d18968\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Cannot copy the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument because type &#39;&lt;typename1&gt;&#39; cannot be converted to type &#39;&lt;typename2&gt;&#39;\nA procedure is declared with a parameter type which cannot be converted back to the calling argument type.  \n  \n When you define a class or structure, you can define one or more conversion operators to convert that class or structure type to other types. You can also define reverse conversion operators to convert those other types back to your class or structure type. When you use your class or structure type in a procedure call, [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] can use these conversion operators to convert the type of an argument to the type of its corresponding parameter.  \n  \n If you pass the argument [ByRef](../../visual-basic/language-reference/modifiers/byref.md), [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] sometimes copies the argument value into a local variable in the procedure instead of passing a reference. In such a case, when the procedure returns, [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] must then copy the local variable value back into the argument in the calling code.  \n  \n If a `ByRef` argument value is copied into the procedure and the argument and parameter are of the same type, no conversion is necessary. But if the types are different, [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] must convert in both directions. If one of the types is your class or structure type, [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] must convert it both to and from the other type. This means you must define conversion operators in both directions.  \n  \n **Error ID:** BC33037  \n  \n## To correct this error  \n  \n-   If possible, use a calling argument of the same type as the procedure parameter, so [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] does not need to do any conversion.  \n  \n-   If you need to call the procedure with an argument type different from the parameter type but do not need to return a value into the calling argument, define the parameter to be [ByVal](../../visual-basic/language-reference/modifiers/byval.md) instead of `ByRef`.  \n  \n-   If you need to return a value into the calling argument, define the reverse conversion operator so [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] can convert back to the calling argument type.  \n  \n## See Also  \n [Procedures](../../visual-basic/programming-guide/language-features/procedures/index.md)   \n [Procedure Parameters and Arguments](../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md)   \n [Passing Arguments by Value and by Reference](../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)   \n [Operator Procedures](../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)   \n [Operator Statement](../../visual-basic/language-reference/statements/operator-statement.md)   \n [How to: Define an Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)   \n [How to: Define a Conversion Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)","nodes":[{"pos":[12,238],"content":"Cannot copy the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument because type &#39;&lt;typename1&gt;&#39; cannot be converted to type &#39;&lt;typename2&gt;&#39; | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Cannot copy the value of &amp;#39;ByRef&amp;#39; parameter &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>parametername<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; back to the matching argument because type &amp;#39;<ph id=\"ph3\">&amp;lt;</ph>typename1<ph id=\"ph4\">&amp;gt;</ph>&amp;#39; cannot be converted to type &amp;#39;<ph id=\"ph5\">&amp;lt;</ph>typename2<ph id=\"ph6\">&amp;gt;</ph>&amp;#39; | Microsoft Docs","pos":[0,226],"source":"Cannot copy the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument because type &#39;&lt;typename1&gt;&#39; cannot be converted to type &#39;&lt;typename2&gt;&#39; | Microsoft Docs"}]},{"pos":[754,963],"content":"Cannot copy the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument because type &#39;&lt;typename1&gt;&#39; cannot be converted to type &#39;&lt;typename2&gt;&#39;","linkify":"Cannot copy the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument because type &#39;&lt;typename1&gt;&#39; cannot be converted to type &#39;&lt;typename2&gt;&#39;","nodes":[{"content":"Cannot copy the value of &amp;#39;ByRef&amp;#39; parameter &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>parametername<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; back to the matching argument because type &amp;#39;<ph id=\"ph3\">&amp;lt;</ph>typename1<ph id=\"ph4\">&amp;gt;</ph>&amp;#39; cannot be converted to type &amp;#39;<ph id=\"ph5\">&amp;lt;</ph>typename2<ph id=\"ph6\">&amp;gt;</ph>&amp;#39;","pos":[0,209],"source":"Cannot copy the value of &#39;ByRef&#39; parameter &#39;&lt;parametername&gt;&#39; back to the matching argument because type &#39;&lt;typename1&gt;&#39; cannot be converted to type &#39;&lt;typename2&gt;&#39;"}]},{"content":"A procedure is declared with a parameter type which cannot be converted back to the calling argument type.","pos":[964,1070]},{"content":"When you define a class or structure, you can define one or more conversion operators to convert that class or structure type to other types.","pos":[1077,1218]},{"content":"You can also define reverse conversion operators to convert those other types back to your class or structure type.","pos":[1219,1334]},{"content":"When you use your class or structure type in a procedure call, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> can use these conversion operators to convert the type of an argument to the type of its corresponding parameter.","pos":[1335,1598],"source":" When you use your class or structure type in a procedure call, [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] can use these conversion operators to convert the type of an argument to the type of its corresponding parameter."},{"content":"If you pass the argument <bpt id=\"p1\">[</bpt>ByRef<ept id=\"p1\">](../../visual-basic/language-reference/modifiers/byref.md)</ept>, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> sometimes copies the argument value into a local variable in the procedure instead of passing a reference.","pos":[1605,1890],"source":"If you pass the argument [ByRef](../../visual-basic/language-reference/modifiers/byref.md), [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] sometimes copies the argument value into a local variable in the procedure instead of passing a reference."},{"content":"In such a case, when the procedure returns, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> must then copy the local variable value back into the argument in the calling code.","pos":[1891,2105],"source":" In such a case, when the procedure returns, [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] must then copy the local variable value back into the argument in the calling code."},{"content":"If a <ph id=\"ph1\">`ByRef`</ph> argument value is copied into the procedure and the argument and parameter are of the same type, no conversion is necessary.","pos":[2112,2249],"source":"If a `ByRef` argument value is copied into the procedure and the argument and parameter are of the same type, no conversion is necessary."},{"content":"But if the types are different, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> must convert in both directions.","pos":[2250,2401],"source":" But if the types are different, [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] must convert in both directions."},{"content":"If one of the types is your class or structure type, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> must convert it both to and from the other type.","pos":[2402,2590],"source":" If one of the types is your class or structure type, [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] must convert it both to and from the other type."},{"content":"This means you must define conversion operators in both directions.","pos":[2591,2658]},{"pos":[2665,2686],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC33037","source":"**Error ID:** BC33037"},{"pos":[2695,2716],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[2726,2932],"content":"If possible, use a calling argument of the same type as the procedure parameter, so <ph id=\"ph1\">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> does not need to do any conversion.","source":"If possible, use a calling argument of the same type as the procedure parameter, so [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] does not need to do any conversion."},{"pos":[2942,3205],"content":"If you need to call the procedure with an argument type different from the parameter type but do not need to return a value into the calling argument, define the parameter to be <bpt id=\"p1\">[</bpt>ByVal<ept id=\"p1\">](../../visual-basic/language-reference/modifiers/byval.md)</ept> instead of <ph id=\"ph1\">`ByRef`</ph>.","source":"If you need to call the procedure with an argument type different from the parameter type but do not need to return a value into the calling argument, define the parameter to be [ByVal](../../visual-basic/language-reference/modifiers/byval.md) instead of `ByRef`."},{"pos":[3215,3447],"content":"If you need to return a value into the calling argument, define the reverse conversion operator so <ph id=\"ph1\">[!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> can convert back to the calling argument type.","source":"If you need to return a value into the calling argument, define the reverse conversion operator so [!INCLUDE[vbprvb](../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] can convert back to the calling argument type."},{"pos":[3456,3464],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3468,3557],"source":"[Procedures](../../visual-basic/programming-guide/language-features/procedures/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[3560,3703],"source":" [Procedure Parameters and Arguments](../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Passing Arguments by Value and by Reference<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)</ept><ph id=\"ph1\"> </ph>","pos":[3706,3867],"source":" [Passing Arguments by Value and by Reference](../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Procedures<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[3870,3983],"source":" [Operator Procedures](../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/operator-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[3986,4080],"source":" [Operator Statement](../../visual-basic/language-reference/statements/operator-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Define an Operator<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[4083,4209],"source":" [How to: Define an Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>","pos":[4212,4357],"source":" [How to: Define a Conversion Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)"}]}