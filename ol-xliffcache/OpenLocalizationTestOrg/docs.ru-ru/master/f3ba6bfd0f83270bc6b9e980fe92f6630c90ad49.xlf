<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="compiled-queries-linq-to-entities.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3ba6bfd0f83270bc6b9e980fe92f6630c90ad49</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\language-reference\compiled-queries-linq-to-entities.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f8e76ea94f8845a0f7074b6eca5a6a2a1fe32d0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f763f500b9d12d3bf9628d021e02b9fa414f17b7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Compiled Queries  (LINQ to Entities)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiled Queries  (LINQ to Entities)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you have an application that executes structurally similar queries many times in the Entity Framework, you can frequently increase performance by compiling the query one time and executing it several times with different parameters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, an application might have to retrieve all the customers in a particular city; the city is specified at runtime by the user in a form.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>LINQ to Entities supports using compiled queries for this purpose.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4.5, LINQ queries are cached automatically.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, you can still use compiled LINQ queries to reduce this cost in later executions and compiled queries can be more efficient than LINQ queries that are automatically cached.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Note that LINQ to Entities queries that apply the <ph id="ph1">`Enumerable.Contains`</ph> operator to in-memory collections are not automatically cached.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Also parameterizing in-memory collections in compiled LINQ queries is not allowed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Objects.CompiledQuery&gt;</ph> class provides compilation and caching of queries for reuse.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Conceptually, this class contains a <ph id="ph1">&lt;xref:System.Data.Objects.CompiledQuery&gt;</ph>'s <ph id="ph2">`Compile`</ph> method with several overloads.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`Compile`</ph> method to create a new delegate to represent the compiled query.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Compile`</ph> methods, provided with a <ph id="ph2">&lt;xref:System.Data.Objects.ObjectContext&gt;</ph> and parameter values, return a delegate that produces some result (such as an <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph> instance).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The query compiles once during only the first execution.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The merge options set for the query at the time of the compilation cannot be changed later.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Once the query is compiled you can only supply parameters of primitive type but you cannot replace parts of the query that would change the generated SQL.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Entity Framework Merge Options and Compiled Queries<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=199591)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[linq_entities](../../../../../../includes/linq-entities-md.md)]</ph> query expression that the <ph id="ph2">&lt;xref:System.Data.Objects.CompiledQuery&gt;</ph>'s <ph id="ph3">`Compile`</ph> method compiles is represented by one of the generic <ph id="ph4">`Func`</ph> delegates, such as <ph id="ph5">&lt;xref:System.Func%605&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>At most, the query expression can encapsulate an <ph id="ph1">`ObjectContext`</ph> parameter, a return parameter, and 16 query parameters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If more than 16 query parameters are required, you can create a structure whose properties represent query parameters.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can then use the properties on the structure in the query expression after you set the properties.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example compiles and then invokes a query that accepts a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> input parameter and returns a sequence of orders where the total due is greater than or equal to $200.00:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example compiles and then invokes a query that returns an <ph id="ph1">&lt;xref:System.Data.Objects.ObjectQuery%601&gt;</ph> instance:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example compiles and then invokes a query that returns the average of the product list prices as a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example compiles and then invokes a query that accepts a <ph id="ph1">&lt;xref:System.String&gt;</ph> input parameter and then returns a <ph id="ph2">`Contact`</ph> whose email address starts with the specified string:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example compiles and then invokes a query that accepts <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> input parameters and returns a sequence of orders where the order date is later than March 8, 2003, and the total due is less than $300.00:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example compiles and then invokes a query that accepts a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> input parameter and returns a sequence of orders where the order date is later than March 8, 2004.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This query returns the order information as a sequence of anonymous types.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Anonymous types are inferred by the compiler, so you cannot specify type parameters in the <ph id="ph1">&lt;xref:System.Data.Objects.CompiledQuery&gt;</ph>'s <ph id="ph2">`Compile`</ph> method and the type is defined in the query itself.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example compiles and then invokes a query that accepts a user-defined structure input parameter and returns a sequence of orders.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The structure defines start date, end date, and total due query parameters, and the query returns orders shipped between March 3 and March 8, 2003 with a total due greater than $700.00.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The structure that defines the query parameters:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Entity Framework<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to Entities<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Entity Framework Merge Options and Compiled Queries<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=199591)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>