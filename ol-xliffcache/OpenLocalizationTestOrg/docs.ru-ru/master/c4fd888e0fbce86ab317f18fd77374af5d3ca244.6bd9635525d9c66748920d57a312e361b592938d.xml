{"content":"---\ntitle: Use the Windows Compatibility Pack to port code to .NET Core\ndescription: Learn about the Windows Compatibility Pack and how can you use it to port existing .NET Framework code to .NET Core\nauthor: terrajobst\nms.date: 12/07/2018\nms.custom: seodec18\n---\n# Use the Windows Compatibility Pack to port code to .NET Core\n\nSome of the most common issues found when porting existing\ncode to .NET Core are dependencies on APIs and technologies that are only\nfound in the .NET Framework. The *Windows Compatibility Pack* provides many\nof these technologies, so it's much easier to build .NET Core applications and .NET\nStandard libraries.\n\nThis package is a logical [extension of .NET Standard 2.0](../whats-new/dotnet-core-2-0.md#api-changes-and-library-support)\nthat significantly increases API set and existing code compiles with almost no\nmodifications. But in order to keep the promise of .NET Standard (\"it is the set\nof APIs that all .NET implementations provide\"), this didn't include\ntechnologies that can't work across all platforms, such as registry, Windows\nManagement Instrumentation (WMI), or reflection emit APIs.\n\nThe *Windows Compatibility Pack* sits on top of .NET Standard and provides\naccess to technologies that are Windows only. It's especially useful for\ncustomers that want to move to .NET Core but plan to stay on Windows as a first\nstep. In that scenario, not being able to use Windows-only technologies is only\na migration hurdle with zero architectural benefits.\n\n## Package contents\n\nThe *Windows Compatibility Pack* is provided via the NuGet Package\n[Microsoft.Windows.Compatibility](https://www.nuget.org/packages/Microsoft.Windows.Compatibility)\nand can be referenced from projects targeting .NET Core or .NET Standard.\n\nIt provides about 20,000 APIs, including Windows-only as well as cross-platform\nAPIs from the following technology areas:\n\n* Code Pages\n* CodeDom\n* Configuration\n* Directory Services\n* Drawing\n* ODBC\n* Permissions\n* Ports\n* Windows Access Control Lists (ACL)\n* Windows Communication Foundation (WCF)\n* Windows Cryptography\n* Windows EventLog\n* Windows Management Instrumentation (WMI)\n* Windows Performance Counters\n* Windows Registry\n* Windows Runtime Caching\n* Windows Services\n\nFor more information, see the [spec of the compatibility pack](https://github.com/dotnet/designs/blob/master/accepted/compat-pack/compat-pack.md).\n\n## Get started\n\n1. Before porting, make sure to take a look at the [Porting Process](index.md).\n\n2. When porting existing code to .NET Core or .NET Standard, install the NuGet\n   package [Microsoft.Windows.Compatibility](https://www.nuget.org/packages/Microsoft.Windows.Compatibility).\n\n3. If you want to stay on Windows, you're all set.\n\n4. If you want to run the .NET Core application or .NET Standard library on\n   Linux or macOS, use the [API Analyzer](https://devblogs.microsoft.com/dotnet/introducing-api-analyzer/)\n   to find usage of APIs that won't work cross-platform.\n\n5. Either remove the usages of those APIs, replace them with cross-platform\n   alternatives, or guard them using a platform check, like:\n\n    ```csharp\n    private static string GetLoggingPath()\n    {\n        // Verify the code is running on Windows.\n        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n        {\n            using (var key = Registry.CurrentUser.OpenSubKey(@\"Software\\Fabrikam\\AssetManagement\"))\n            {\n                if (key?.GetValue(\"LoggingDirectoryPath\") is string configuredPath)\n                    return configuredPath;\n            }\n        }\n\n        // This is either not running on Windows or no logging path was configured,\n        // so just use the path for non-roaming user-specific data files.\n        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);\n        return Path.Combine(appDataPath, \"Fabrikam\", \"AssetManagement\", \"Logging\");\n    }\n    ```\n\nFor a demo, check out the [Channel 9 video of the Windows Compatibility Pack](https://channel9.msdn.com/Events/Connect/2017/T123).\n","nodes":[{"pos":[4,259],"embed":true,"restype":"x-metadata","content":"title: Use the Windows Compatibility Pack to port code to .NET Core\ndescription: Learn about the Windows Compatibility Pack and how can you use it to port existing .NET Framework code to .NET Core\nauthor: terrajobst\nms.date: 12/07/2018\nms.custom: seodec18","nodes":[{"content":"Use the Windows Compatibility Pack to port code to .NET Core","nodes":[{"pos":[0,60],"content":"Use the Windows Compatibility Pack to port code to .NET Core","nodes":[{"content":"Use the Windows Compatibility Pack to port code to .NET Core","pos":[0,60]}]}],"path":["title"],"nosxs":false},{"content":"Learn about the Windows Compatibility Pack and how can you use it to port existing .NET Framework code to .NET Core","nodes":[{"pos":[0,115],"content":"Learn about the Windows Compatibility Pack and how can you use it to port existing .NET Framework code to .NET Core","nodes":[{"content":"Learn about the Windows Compatibility Pack and how can you use it to port existing .NET Framework code to .NET Core","pos":[0,115]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[266,326],"content":"Use the Windows Compatibility Pack to port code to .NET Core","linkify":"Use the Windows Compatibility Pack to port code to .NET Core","nodes":[{"content":"Use the Windows Compatibility Pack to port code to .NET Core","pos":[0,60]}]},{"content":"Some of the most common issues found when porting existing code to .NET Core are dependencies on APIs and technologies that are only found in the .NET Framework.","pos":[328,489],"source":"Some of the most common issues found when porting existing\ncode to .NET Core are dependencies on APIs and technologies that are only\nfound in the .NET Framework."},{"content":"The <bpt id=\"p1\">*</bpt>Windows Compatibility Pack<ept id=\"p1\">*</ept> provides many of these technologies, so it's much easier to build .NET Core applications and .NET Standard libraries.","pos":[490,640],"source":" The *Windows Compatibility Pack* provides many\nof these technologies, so it's much easier to build .NET Core applications and .NET\nStandard libraries."},{"content":"This package is a logical <bpt id=\"p1\">[</bpt>extension of .NET Standard 2.0<ept id=\"p1\">](../whats-new/dotnet-core-2-0.md#api-changes-and-library-support)</ept> that significantly increases API set and existing code compiles with almost no modifications.","pos":[642,859],"source":"This package is a logical [extension of .NET Standard 2.0](../whats-new/dotnet-core-2-0.md#api-changes-and-library-support)\nthat significantly increases API set and existing code compiles with almost no\nmodifications."},{"content":"But in order to keep the promise of .NET Standard (\"it is the set of APIs that all .NET implementations provide\"), this didn't include technologies that can't work across all platforms, such as registry, Windows Management Instrumentation (WMI), or reflection emit APIs.","pos":[860,1130],"source":" But in order to keep the promise of .NET Standard (\"it is the set\nof APIs that all .NET implementations provide\"), this didn't include\ntechnologies that can't work across all platforms, such as registry, Windows\nManagement Instrumentation (WMI), or reflection emit APIs."},{"content":"The <bpt id=\"p1\">*</bpt>Windows Compatibility Pack<ept id=\"p1\">*</ept> sits on top of .NET Standard and provides access to technologies that are Windows only.","pos":[1132,1252],"source":"The *Windows Compatibility Pack* sits on top of .NET Standard and provides\naccess to technologies that are Windows only."},{"content":"It's especially useful for customers that want to move to .NET Core but plan to stay on Windows as a first step.","pos":[1253,1365],"source":" It's especially useful for\ncustomers that want to move to .NET Core but plan to stay on Windows as a first\nstep."},{"content":"In that scenario, not being able to use Windows-only technologies is only a migration hurdle with zero architectural benefits.","pos":[1366,1492],"source":" In that scenario, not being able to use Windows-only technologies is only\na migration hurdle with zero architectural benefits."},{"pos":[1497,1513],"content":"Package contents","linkify":"Package contents","nodes":[{"content":"Package contents","pos":[0,16]}]},{"pos":[1515,1753],"content":"The <bpt id=\"p1\">*</bpt>Windows Compatibility Pack<ept id=\"p1\">*</ept> is provided via the NuGet Package <bpt id=\"p2\">[</bpt>Microsoft.Windows.Compatibility<ept id=\"p2\">](https://www.nuget.org/packages/Microsoft.Windows.Compatibility)</ept> and can be referenced from projects targeting .NET Core or .NET Standard.","source":"The *Windows Compatibility Pack* is provided via the NuGet Package\n[Microsoft.Windows.Compatibility](https://www.nuget.org/packages/Microsoft.Windows.Compatibility)\nand can be referenced from projects targeting .NET Core or .NET Standard."},{"pos":[1755,1876],"content":"It provides about 20,000 APIs, including Windows-only as well as cross-platform APIs from the following technology areas:","source":"It provides about 20,000 APIs, including Windows-only as well as cross-platform\nAPIs from the following technology areas:"},{"content":"Code Pages","pos":[1880,1890]},{"content":"CodeDom","pos":[1893,1900]},{"content":"Configuration","pos":[1903,1916]},{"content":"Directory Services","pos":[1919,1937]},{"content":"Drawing","pos":[1940,1947]},{"content":"ODBC","pos":[1950,1954]},{"content":"Permissions","pos":[1957,1968]},{"content":"Ports","pos":[1971,1976]},{"content":"Windows Access Control Lists (ACL)","pos":[1979,2013]},{"content":"Windows Communication Foundation (WCF)","pos":[2016,2054]},{"content":"Windows Cryptography","pos":[2057,2077]},{"content":"Windows EventLog","pos":[2080,2096]},{"content":"Windows Management Instrumentation (WMI)","pos":[2099,2139]},{"content":"Windows Performance Counters","pos":[2142,2170]},{"content":"Windows Registry","pos":[2173,2189]},{"content":"Windows Runtime Caching","pos":[2192,2215]},{"content":"Windows Services","pos":[2218,2234]},{"pos":[2236,2382],"content":"For more information, see the <bpt id=\"p1\">[</bpt>spec of the compatibility pack<ept id=\"p1\">](https://github.com/dotnet/designs/blob/master/accepted/compat-pack/compat-pack.md)</ept>.","source":"For more information, see the [spec of the compatibility pack](https://github.com/dotnet/designs/blob/master/accepted/compat-pack/compat-pack.md)."},{"pos":[2387,2398],"content":"Get started","linkify":"Get started","nodes":[{"content":"Get started","pos":[0,11]}]},{"pos":[2403,2479],"content":"Before porting, make sure to take a look at the <bpt id=\"p1\">[</bpt>Porting Process<ept id=\"p1\">](index.md)</ept>.","source":"Before porting, make sure to take a look at the [Porting Process](index.md)."},{"pos":[2484,2669],"content":"When porting existing code to .NET Core or .NET Standard, install the NuGet package <bpt id=\"p1\">[</bpt>Microsoft.Windows.Compatibility<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Windows.Compatibility)</ept>.","leadings":["","   "],"source":"When porting existing code to .NET Core or .NET Standard, install the NuGet\npackage [Microsoft.Windows.Compatibility](https://www.nuget.org/packages/Microsoft.Windows.Compatibility)."},{"content":"If you want to stay on Windows, you're all set.","pos":[2674,2721]},{"pos":[2726,2962],"content":"If you want to run the .NET Core application or .NET Standard library on Linux or macOS, use the <bpt id=\"p1\">[</bpt>API Analyzer<ept id=\"p1\">](https://devblogs.microsoft.com/dotnet/introducing-api-analyzer/)</ept> to find usage of APIs that won't work cross-platform.","leadings":["","   ","   "],"source":"If you want to run the .NET Core application or .NET Standard library on\nLinux or macOS, use the [API Analyzer](https://devblogs.microsoft.com/dotnet/introducing-api-analyzer/)\nto find usage of APIs that won't work cross-platform."},{"pos":[2967,3100],"content":"Either remove the usages of those APIs, replace them with cross-platform alternatives, or guard them using a platform check, like:","leadings":["","   "],"source":"Either remove the usages of those APIs, replace them with cross-platform\nalternatives, or guard them using a platform check, like:"},{"pos":[3914,4044],"content":"For a demo, check out the <bpt id=\"p1\">[</bpt>Channel 9 video of the Windows Compatibility Pack<ept id=\"p1\">](https://channel9.msdn.com/Events/Connect/2017/T123)</ept>.","source":"For a demo, check out the [Channel 9 video of the Windows Compatibility Pack](https://channel9.msdn.com/Events/Connect/2017/T123)."}]}