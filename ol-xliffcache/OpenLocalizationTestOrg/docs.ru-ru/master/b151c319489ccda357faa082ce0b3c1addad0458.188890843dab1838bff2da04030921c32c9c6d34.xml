{"content":"---\ntitle: \"How to: Force an Argument to Be Passed by Value (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"procedures, arguments\"\n  - \"procedures, parameters\"\n  - \"procedure arguments\"\n  - \"Visual Basic code, procedures\"\n  - \"arguments [Visual Basic], ByVal\"\n  - \"arguments [Visual Basic], passing by value\"\n  - \"procedure parameters\"\n  - \"procedures, calling\"\n  - \"arguments [Visual Basic], in parentheses\"\n  - \"procedure arguments, in parentheses\"\n  - \"arguments [Visual Basic], changing value\"\nms.assetid: 77b4f2d2-1055-4c2f-a521-874d1db86946\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Force an Argument to Be Passed by Value (Visual Basic)\nThe procedure declaration determines the passing mechanism. If a parameter is declared [ByRef](../../../../visual-basic/language-reference/modifiers/byref.md), [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] expects to pass the corresponding argument by reference. This allows the procedure to change the value of the programming element underlying the argument in the calling code. If you wish to protect the underlying element against such change, you can override the `ByRef` passing mechanism in the procedure call by enclosing the argument name in parentheses. These parentheses are in addition to the parentheses enclosing the argument list in the call.  \n  \n The calling code cannot override a [ByVal](../../../../visual-basic/language-reference/modifiers/byval.md) mechanism.  \n  \n### To force an argument to be passed by value  \n  \n-   If the corresponding parameter is declared `ByVal` in the procedure, you do not need to take any additional steps. [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] already expects to pass the argument by value.  \n  \n-   If the corresponding parameter is declared `ByRef` in the procedure, enclose the argument in parentheses in the procedure call.  \n  \n## Example  \n The following example overrides a `ByRef` parameter declaration. In the call that forces `ByVal`, note the two levels of parentheses.  \n  \n [!code-vb[VbVbcnProcedures#39](./codesnippet/VisualBasic/how-to-force-an-argument-to-be-passed-by-value_1.vb)]  \n  \n [!code-vb[VbVbcnProcedures#40](./codesnippet/VisualBasic/how-to-force-an-argument-to-be-passed-by-value_2.vb)]  \n  \n When `str` is enclosed in extra parentheses within the argument list, the `setNewString` procedure cannot change its value in the calling code, and `MsgBox` displays \"Cannot be replaced if passed ByVal\". When `str` is not enclosed in extra parentheses, the procedure can change it, and `MsgBox` displays \"This is a new value for the inString argument.\"  \n  \n## Compiling the Code  \n When you pass a variable by reference, you must use the `ByRef` keyword to specify this mechanism.  \n  \n The default in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] is to pass arguments by value. However, it is good programming practice to include either the [ByVal](../../../../visual-basic/language-reference/modifiers/byval.md) or [ByRef](../../../../visual-basic/language-reference/modifiers/byref.md) keyword with every declared parameter. This makes your code easier to read.  \n  \n## Robust Programming  \n If a procedure declares a parameter [ByRef](../../../../visual-basic/language-reference/modifiers/byref.md), the correct execution of the code might depend on being able to change the underlying element in the calling code. If the calling code overrides this calling mechanism by enclosing the argument in parentheses, or if it passes a nonmodifiable argument, the procedure cannot change the underlying element. This might produce unexpected results in the calling code.  \n  \n## .NET Framework Security  \n There is always a potential risk in allowing a procedure to change the value underlying an argument in the calling code. Make sure you expect this value to be changed, and be prepared to check it for validity before using it.  \n  \n## See Also  \n [Procedures](./index.md)   \n [Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)   \n [How to: Pass Arguments to a Procedure](./how-to-pass-arguments-to-a-procedure.md)   \n [Passing Arguments by Value and by Reference](./passing-arguments-by-value-and-by-reference.md)   \n [Differences Between Modifiable and Nonmodifiable Arguments](./differences-between-modifiable-and-nonmodifiable-arguments.md)   \n [Differences Between Passing an Argument By Value and By Reference](./differences-between-passing-an-argument-by-value-and-by-reference.md)   \n [How to: Change the Value of a Procedure Argument](./how-to-change-the-value-of-a-procedure-argument.md)   \n [How to: Protect a Procedure Argument Against Value Changes](./how-to-protect-a-procedure-argument-against-value-changes.md)   \n [Passing Arguments by Position and by Name](./passing-arguments-by-position-and-by-name.md)   \n [Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)","nodes":[{"pos":[4,974],"embed":true,"restype":"x-metadata","content":"title: \"How to: Force an Argument to Be Passed by Value (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"procedures, arguments\"\n  - \"procedures, parameters\"\n  - \"procedure arguments\"\n  - \"Visual Basic code, procedures\"\n  - \"arguments [Visual Basic], ByVal\"\n  - \"arguments [Visual Basic], passing by value\"\n  - \"procedure parameters\"\n  - \"procedures, calling\"\n  - \"arguments [Visual Basic], in parentheses\"\n  - \"procedure arguments, in parentheses\"\n  - \"arguments [Visual Basic], changing value\"\nms.assetid: 77b4f2d2-1055-4c2f-a521-874d1db86946\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Force an Argument to Be Passed by Value (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,79],"content":"How to: Force an Argument to Be Passed by Value (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Force an Argument to Be Passed by Value (Visual Basic) | Microsoft Docs","pos":[0,79]}]}],"path":["title"]}],"yml":true},{"pos":[981,1043],"content":"How to: Force an Argument to Be Passed by Value (Visual Basic)","linkify":"How to: Force an Argument to Be Passed by Value (Visual Basic)","nodes":[{"content":"How to: Force an Argument to Be Passed by Value (Visual Basic)","pos":[0,62]}]},{"content":"The procedure declaration determines the passing mechanism.","pos":[1044,1103]},{"content":"If a parameter is declared <bpt id=\"p1\">[</bpt>ByRef<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> expects to pass the corresponding argument by reference.","pos":[1104,1353],"source":" If a parameter is declared [ByRef](../../../../visual-basic/language-reference/modifiers/byref.md), [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] expects to pass the corresponding argument by reference."},{"content":"This allows the procedure to change the value of the programming element underlying the argument in the calling code.","pos":[1354,1471]},{"content":"If you wish to protect the underlying element against such change, you can override the <ph id=\"ph1\">`ByRef`</ph> passing mechanism in the procedure call by enclosing the argument name in parentheses.","pos":[1472,1654],"source":" If you wish to protect the underlying element against such change, you can override the `ByRef` passing mechanism in the procedure call by enclosing the argument name in parentheses."},{"content":"These parentheses are in addition to the parentheses enclosing the argument list in the call.","pos":[1655,1748]},{"pos":[1755,1872],"content":"The calling code cannot override a <bpt id=\"p1\">[</bpt>ByVal<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> mechanism.","source":"The calling code cannot override a [ByVal](../../../../visual-basic/language-reference/modifiers/byval.md) mechanism."},{"pos":[1882,1924],"content":"To force an argument to be passed by value","linkify":"To force an argument to be passed by value","nodes":[{"content":"To force an argument to be passed by value","pos":[0,42]}]},{"content":"If the corresponding parameter is declared <ph id=\"ph1\">`ByVal`</ph> in the procedure, you do not need to take any additional steps.","pos":[1934,2048],"source":"If the corresponding parameter is declared `ByVal` in the procedure, you do not need to take any additional steps."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> already expects to pass the argument by value.","pos":[2049,2188],"source":"[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] already expects to pass the argument by value."},{"pos":[2198,2325],"content":"If the corresponding parameter is declared <ph id=\"ph1\">`ByRef`</ph> in the procedure, enclose the argument in parentheses in the procedure call.","source":"If the corresponding parameter is declared `ByRef` in the procedure, enclose the argument in parentheses in the procedure call."},{"pos":[2334,2341],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example overrides a <ph id=\"ph1\">`ByRef`</ph> parameter declaration.","pos":[2345,2409],"source":"The following example overrides a `ByRef` parameter declaration."},{"content":"In the call that forces <ph id=\"ph1\">`ByVal`</ph>, note the two levels of parentheses.","pos":[2410,2478],"source":" In the call that forces `ByVal`, note the two levels of parentheses."},{"content":"When <ph id=\"ph1\">`str`</ph> is enclosed in extra parentheses within the argument list, the <ph id=\"ph2\">`setNewString`</ph> procedure cannot change its value in the calling code, and <ph id=\"ph3\">`MsgBox`</ph> displays \"Cannot be replaced if passed ByVal\".","pos":[2719,2922],"source":"When `str` is enclosed in extra parentheses within the argument list, the `setNewString` procedure cannot change its value in the calling code, and `MsgBox` displays \"Cannot be replaced if passed ByVal\"."},{"content":"When <ph id=\"ph1\">`str`</ph> is not enclosed in extra parentheses, the procedure can change it, and <ph id=\"ph2\">`MsgBox`</ph> displays \"This is a new value for the inString argument.\"","pos":[2923,3071],"source":" When `str` is not enclosed in extra parentheses, the procedure can change it, and `MsgBox` displays \"This is a new value for the inString argument.\""},{"pos":[3080,3098],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[3102,3200],"content":"When you pass a variable by reference, you must use the <ph id=\"ph1\">`ByRef`</ph> keyword to specify this mechanism.","source":"When you pass a variable by reference, you must use the `ByRef` keyword to specify this mechanism."},{"content":"The default in <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is to pass arguments by value.","pos":[3207,3345],"source":"The default in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] is to pass arguments by value."},{"content":"However, it is good programming practice to include either the <bpt id=\"p1\">[</bpt>ByVal<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> or <bpt id=\"p2\">[</bpt>ByRef<ept id=\"p2\">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept> keyword with every declared parameter.","pos":[3346,3594],"source":" However, it is good programming practice to include either the [ByVal](../../../../visual-basic/language-reference/modifiers/byval.md) or [ByRef](../../../../visual-basic/language-reference/modifiers/byref.md) keyword with every declared parameter."},{"content":"This makes your code easier to read.","pos":[3595,3631]},{"pos":[3640,3658],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"If a procedure declares a parameter <bpt id=\"p1\">[</bpt>ByRef<ept id=\"p1\">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>, the correct execution of the code might depend on being able to change the underlying element in the calling code.","pos":[3662,3885],"source":"If a procedure declares a parameter [ByRef](../../../../visual-basic/language-reference/modifiers/byref.md), the correct execution of the code might depend on being able to change the underlying element in the calling code."},{"content":"If the calling code overrides this calling mechanism by enclosing the argument in parentheses, or if it passes a nonmodifiable argument, the procedure cannot change the underlying element.","pos":[3886,4074]},{"content":"This might produce unexpected results in the calling code.","pos":[4075,4133]},{"pos":[4142,4165],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"content":"There is always a potential risk in allowing a procedure to change the value underlying an argument in the calling code.","pos":[4169,4289]},{"content":"Make sure you expect this value to be changed, and be prepared to check it for validity before using it.","pos":[4290,4394]},{"pos":[4403,4411],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Procedures<ept id=\"p1\">](./index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4415,4440],"source":"[Procedures](./index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](./procedure-parameters-and-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[4444,4522],"source":"[Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Pass Arguments to a Procedure<ept id=\"p1\">](./how-to-pass-arguments-to-a-procedure.md)</ept><ph id=\"ph1\"> </ph>","pos":[4526,4609],"source":"[How to: Pass Arguments to a Procedure](./how-to-pass-arguments-to-a-procedure.md) "},{"content":"<bpt id=\"p1\">[</bpt>Passing Arguments by Value and by Reference<ept id=\"p1\">](./passing-arguments-by-value-and-by-reference.md)</ept><ph id=\"ph1\"> </ph>","pos":[4613,4709],"source":"[Passing Arguments by Value and by Reference](./passing-arguments-by-value-and-by-reference.md) "},{"content":"<bpt id=\"p1\">[</bpt>Differences Between Modifiable and Nonmodifiable Arguments<ept id=\"p1\">](./differences-between-modifiable-and-nonmodifiable-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[4713,4839],"source":"[Differences Between Modifiable and Nonmodifiable Arguments](./differences-between-modifiable-and-nonmodifiable-arguments.md) "},{"content":"<bpt id=\"p1\">[</bpt>Differences Between Passing an Argument By Value and By Reference<ept id=\"p1\">](./differences-between-passing-an-argument-by-value-and-by-reference.md)</ept><ph id=\"ph1\"> </ph>","pos":[4843,4983],"source":"[Differences Between Passing an Argument By Value and By Reference](./differences-between-passing-an-argument-by-value-and-by-reference.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Change the Value of a Procedure Argument<ept id=\"p1\">](./how-to-change-the-value-of-a-procedure-argument.md)</ept><ph id=\"ph1\"> </ph>","pos":[4987,5092],"source":"[How to: Change the Value of a Procedure Argument](./how-to-change-the-value-of-a-procedure-argument.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Protect a Procedure Argument Against Value Changes<ept id=\"p1\">](./how-to-protect-a-procedure-argument-against-value-changes.md)</ept><ph id=\"ph1\"> </ph>","pos":[5096,5221],"source":"[How to: Protect a Procedure Argument Against Value Changes](./how-to-protect-a-procedure-argument-against-value-changes.md) "},{"content":"<bpt id=\"p1\">[</bpt>Passing Arguments by Position and by Name<ept id=\"p1\">](./passing-arguments-by-position-and-by-name.md)</ept><ph id=\"ph1\"> </ph>","pos":[5225,5317],"source":"[Passing Arguments by Position and by Name](./passing-arguments-by-position-and-by-name.md) "},{"content":"<bpt id=\"p1\">[</bpt>Value Types and Reference Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>","pos":[5321,5462],"source":"[Value Types and Reference Types](../../../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)"}]}