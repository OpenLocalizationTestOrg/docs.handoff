{"content":"---\ntitle: \"try-finally - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"finally\"\n  - \"finally_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"finally keyword [C#]\"\n  - \"try-finally statement [C#]\"\nms.assetid: c27623fb-7261-4464-862c-7a369d3c8f0a\n---\n# try-finally (C# Reference)\n\nBy using a `finally` block, you can clean up any resources that are allocated in a [try](try-catch.md) block, and you can run code even if an exception occurs in the `try` block. Typically, the statements of a `finally` block run when control leaves a `try` statement. The transfer of control can occur as a result of normal execution, of execution of a `break`, `continue`, `goto`, or `return` statement, or of propagation of an exception out of the `try` statement.\n\nWithin a handled exception, the associated `finally` block is guaranteed to be run. However, if the exception is unhandled, execution of the `finally` block is dependent on how the exception unwind operation is triggered. That, in turn, is dependent on how your computer is set up.\n\nUsually, when an unhandled exception ends an application, whether or not the `finally` block is run is not important. However, if you have statements in a `finally` block that must be run even in that situation, one solution is to add a `catch` block to the `try`-`finally` statement. Alternatively, you can catch the exception that might be thrown in the `try` block of a `try`-`finally` statement higher up the call stack. That is, you can catch the exception in the method that calls the method that contains the `try`-`finally` statement, or in the method that calls that method, or in any method in the call stack. If the exception is not caught, execution of the `finally` block depends on whether the operating system chooses to trigger an exception unwind operation.\n\n## Example\n\nIn the following example, an invalid conversion statement causes a `System.InvalidCastException` exception. The exception is unhandled.\n\n[!code-csharp[csrefKeywordsExceptions#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsExceptions/CS/csrefKeywordsExceptions.cs#4)]\n\nIn the following example, an exception from the `TryCast` method is caught in a method farther up the call stack.\n\n[!code-csharp[csrefKeywordsExceptions#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsExceptions/CS/csrefKeywordsExceptions.cs#6)]\n\nFor more information about `finally`, see [try-catch-finally](try-catch-finally.md).\n\nC# also contains the [using statement](using-statement.md), which provides similar functionality for <xref:System.IDisposable> objects in a convenient syntax.\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [try, throw, and catch Statements (C++)](/cpp/cpp/try-throw-and-catch-statements-cpp)\n- [Exception Handling Statements](exception-handling-statements.md)\n- [throw](throw.md)\n- [try-catch](try-catch.md)\n- [How to: Explicitly Throw Exceptions](../../../standard/exceptions/how-to-explicitly-throw-exceptions.md)","nodes":[{"pos":[4,267],"embed":true,"restype":"x-metadata","content":"title: \"try-finally - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"finally\"\n  - \"finally_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"finally keyword [C#]\"\n  - \"try-finally statement [C#]\"\nms.assetid: c27623fb-7261-4464-862c-7a369d3c8f0a","nodes":[{"content":"try-finally - C# Reference","nodes":[{"pos":[0,26],"content":"try-finally - C# Reference","nodes":[{"content":"try-finally - C# Reference","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[274,300],"content":"try-finally (C# Reference)","linkify":"try-finally (C# Reference)","nodes":[{"content":"try-finally (C# Reference)","pos":[0,26]}]},{"content":"By using a <ph id=\"ph1\">`finally`</ph> block, you can clean up any resources that are allocated in a <bpt id=\"p1\">[</bpt>try<ept id=\"p1\">](try-catch.md)</ept> block, and you can run code even if an exception occurs in the <ph id=\"ph2\">`try`</ph> block.","pos":[302,480],"source":"By using a `finally` block, you can clean up any resources that are allocated in a [try](try-catch.md) block, and you can run code even if an exception occurs in the `try` block."},{"content":"Typically, the statements of a <ph id=\"ph1\">`finally`</ph> block run when control leaves a <ph id=\"ph2\">`try`</ph> statement.","pos":[481,570],"source":" Typically, the statements of a `finally` block run when control leaves a `try` statement."},{"content":"The transfer of control can occur as a result of normal execution, of execution of a <ph id=\"ph1\">`break`</ph>, <ph id=\"ph2\">`continue`</ph>, <ph id=\"ph3\">`goto`</ph>, or <ph id=\"ph4\">`return`</ph> statement, or of propagation of an exception out of the <ph id=\"ph5\">`try`</ph> statement.","pos":[571,769],"source":" The transfer of control can occur as a result of normal execution, of execution of a `break`, `continue`, `goto`, or `return` statement, or of propagation of an exception out of the `try` statement."},{"content":"Within a handled exception, the associated <ph id=\"ph1\">`finally`</ph> block is guaranteed to be run.","pos":[771,854],"source":"Within a handled exception, the associated `finally` block is guaranteed to be run."},{"content":"However, if the exception is unhandled, execution of the <ph id=\"ph1\">`finally`</ph> block is dependent on how the exception unwind operation is triggered.","pos":[855,992],"source":" However, if the exception is unhandled, execution of the `finally` block is dependent on how the exception unwind operation is triggered."},{"content":"That, in turn, is dependent on how your computer is set up.","pos":[993,1052]},{"content":"Usually, when an unhandled exception ends an application, whether or not the <ph id=\"ph1\">`finally`</ph> block is run is not important.","pos":[1054,1171],"source":"Usually, when an unhandled exception ends an application, whether or not the `finally` block is run is not important."},{"content":"However, if you have statements in a <ph id=\"ph1\">`finally`</ph> block that must be run even in that situation, one solution is to add a <ph id=\"ph2\">`catch`</ph> block to the <ph id=\"ph3\">`try`</ph><ph id=\"ph4\">-</ph><ph id=\"ph5\">`finally`</ph> statement.","pos":[1172,1338],"source":" However, if you have statements in a `finally` block that must be run even in that situation, one solution is to add a `catch` block to the `try`-`finally` statement."},{"content":"Alternatively, you can catch the exception that might be thrown in the <ph id=\"ph1\">`try`</ph> block of a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">-</ph><ph id=\"ph4\">`finally`</ph> statement higher up the call stack.","pos":[1339,1478],"source":" Alternatively, you can catch the exception that might be thrown in the `try` block of a `try`-`finally` statement higher up the call stack."},{"content":"That is, you can catch the exception in the method that calls the method that contains the <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">-</ph><ph id=\"ph3\">`finally`</ph> statement, or in the method that calls that method, or in any method in the call stack.","pos":[1479,1673],"source":" That is, you can catch the exception in the method that calls the method that contains the `try`-`finally` statement, or in the method that calls that method, or in any method in the call stack."},{"content":"If the exception is not caught, execution of the <ph id=\"ph1\">`finally`</ph> block depends on whether the operating system chooses to trigger an exception unwind operation.","pos":[1674,1828],"source":" If the exception is not caught, execution of the `finally` block depends on whether the operating system chooses to trigger an exception unwind operation."},{"pos":[1833,1840],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, an invalid conversion statement causes a <ph id=\"ph1\">`System.InvalidCastException`</ph> exception.","pos":[1842,1949],"source":"In the following example, an invalid conversion statement causes a `System.InvalidCastException` exception."},{"content":"The exception is unhandled.","pos":[1950,1977]},{"pos":[2126,2239],"content":"In the following example, an exception from the <ph id=\"ph1\">`TryCast`</ph> method is caught in a method farther up the call stack.","source":"In the following example, an exception from the `TryCast` method is caught in a method farther up the call stack."},{"pos":[2388,2472],"content":"For more information about <ph id=\"ph1\">`finally`</ph>, see <bpt id=\"p1\">[</bpt>try-catch-finally<ept id=\"p1\">](try-catch-finally.md)</ept>.","source":"For more information about `finally`, see [try-catch-finally](try-catch-finally.md)."},{"pos":[2474,2632],"content":"C# also contains the <bpt id=\"p1\">[</bpt>using statement<ept id=\"p1\">](using-statement.md)</ept>, which provides similar functionality for <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> objects in a convenient syntax.","source":"C# also contains the [using statement](using-statement.md), which provides similar functionality for <xref:System.IDisposable> objects in a convenient syntax."},{"pos":[2637,2662],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2728,2736],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2740,2767],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2770,2826],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[2829,2852],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[2855,2940],"content":"<bpt id=\"p1\">[</bpt>try, throw, and catch Statements (C++)<ept id=\"p1\">](/cpp/cpp/try-throw-and-catch-statements-cpp)</ept>","source":"[try, throw, and catch Statements (C++)](/cpp/cpp/try-throw-and-catch-statements-cpp)"},{"pos":[2943,3008],"content":"<bpt id=\"p1\">[</bpt>Exception Handling Statements<ept id=\"p1\">](exception-handling-statements.md)</ept>","source":"[Exception Handling Statements](exception-handling-statements.md)"},{"pos":[3011,3028],"content":"<bpt id=\"p1\">[</bpt>throw<ept id=\"p1\">](throw.md)</ept>","source":"[throw](throw.md)"},{"pos":[3031,3056],"content":"<bpt id=\"p1\">[</bpt>try-catch<ept id=\"p1\">](try-catch.md)</ept>","source":"[try-catch](try-catch.md)"},{"pos":[3059,3164],"content":"<bpt id=\"p1\">[</bpt>How to: Explicitly Throw Exceptions<ept id=\"p1\">](../../../standard/exceptions/how-to-explicitly-throw-exceptions.md)</ept>","source":"[How to: Explicitly Throw Exceptions](../../../standard/exceptions/how-to-explicitly-throw-exceptions.md)"}]}