{"content":"---\ntitle: \"International Fonts in Windows Forms and Controls | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"fonts, international\"\n  - \"international applications [Windows Forms], character display\"\n  - \"fonts, globalization considerations\"\n  - \"localization [Windows Forms], fonts\"\n  - \"Windows Forms controls, labels\"\n  - \"font fallback in Windows Forms\"\n  - \"globalization [Windows Forms], character sets\"\nms.assetid: 2c3066df-9bac-479a-82b2-79e484b346a3\ncaps.latest.revision: 6\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# International Fonts in Windows Forms and Controls\nIn International applications the recommended method of selecting fonts is to use font fallback wherever possible. Font fallback means that the system determines what script the character belongs to.  \n  \n## Using Font Fallback  \n To take advantage of this feature, do not set the <xref:System.Drawing.Font> property for your form or any other element. The application will automatically use the default system font, which differs from one localized language of the operating system to another. When the application runs, the system will automatically provide the correct font for the culture selected in the operating system.  \n  \n There is an exception to the rule of not setting the font, which is for changing the font style. This might be important for an application in which the user clicks a button to make text in a text box appear in boldface. To do that, you would write a function to change the text box's font style to bold, based on whatever the form's font is. It is important to call this function in two places: in the button's <xref:System.Windows.Forms.Control.Click> event handler and in the <xref:System.Windows.Forms.Control.FontChanged> event handler. If the function is called only in the <xref:System.Windows.Forms.Control.Click> event handler and some other piece of code changes the font family of the entire form, the text box will not change with the rest of the form.  \n  \n```  \n' Visual Basic  \nPrivate Sub MakeBold()  \n   ' Change the TextBox to a bold version of the form font  \n   TextBox1.Font = New Font(Me.Font, FontStyle.Bold)  \nEnd Sub  \n  \nPrivate Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click  \n   ' Clicking this button makes the TextBox bold  \n   MakeBold()  \nEnd Sub  \n  \nPrivate Sub Form1_FontChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.FontChanged  \n   ' If the TextBox is already bold and the form's font changes,  \n   ' change the TextBox to a bold version of the new form font  \n   If (TextBox1.Font.Style = FontStyle.Bold) Then  \n      MakeBold()  \n   End If  \nEnd Sub  \n  \n// C#  \nprivate void button1_Click(object sender, System.EventArgs e)  \n{  \n   // Clicking this button makes the TextBox bold  \n   MakeBold();  \n}  \n  \nprivate void MakeBold()   \n{  \n   // Change the TextBox to a bold version of the form's font  \n   textBox1.Font = new Font(this.Font, FontStyle.Bold);  \n}  \n  \nprivate void Form1_FontChanged(object sender, System.EventArgs e)  \n{  \n   // If the TextBox is already bold and the form's font changes,  \n   // change the TextBox to a bold version of the new form font  \n   if (textBox1.Font.Style == FontStyle.Bold)   \n   {  \n      MakeBold();  \n   }  \n}  \n```  \n  \n However, when you localize your application, the bold font may display poorly for certain languages. If this is a concern, you want the localizers to have the option of switching the font from bold to regular text. Since localizers are typically not developers and do not have access to source code, only to resource files, this option needs to be set in the resource files. To do this, you would set the <xref:System.Drawing.Font.Bold%2A> property to `true`. This results in the font setting being written out to the resource files, where localizers can edit it. You then write code after the `InitializeComponent` method to reset the font based on whatever the form's font is, but using the font style specified in the resource file.  \n  \n```  \n' Visual Basic  \nTextBox1.Font = New System.Drawing.Font(Me.Font, TextBox1.Font.Style)  \n  \n// C#  \ntextBox1.Font = new System.Drawing.Font(this.Font, textBox1.Font.Style);  \n```  \n  \n## See Also  \n [Globalizing Windows Forms](../../../../docs/framework/winforms/advanced/globalizing-windows-forms.md)   \n [Using Fonts and Text](../../../../docs/framework/winforms/advanced/using-fonts-and-text.md)","nodes":[{"pos":[12,78],"content":"International Fonts in Windows Forms and Controls | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"International Fonts in Windows Forms and Controls | Microsoft Docs","pos":[0,66]}]},{"pos":[742,791],"content":"International Fonts in Windows Forms and Controls","linkify":"International Fonts in Windows Forms and Controls","nodes":[{"content":"International Fonts in Windows Forms and Controls","pos":[0,49]}]},{"content":"In International applications the recommended method of selecting fonts is to use font fallback wherever possible.","pos":[792,906]},{"content":"Font fallback means that the system determines what script the character belongs to.","pos":[907,991]},{"pos":[1000,1019],"content":"Using Font Fallback","linkify":"Using Font Fallback","nodes":[{"content":"Using Font Fallback","pos":[0,19]}]},{"content":"To take advantage of this feature, do not set the <ph id=\"ph1\">&lt;xref:System.Drawing.Font&gt;</ph> property for your form or any other element.","pos":[1023,1144],"source":"To take advantage of this feature, do not set the <xref:System.Drawing.Font> property for your form or any other element."},{"content":"The application will automatically use the default system font, which differs from one localized language of the operating system to another.","pos":[1145,1286]},{"content":"When the application runs, the system will automatically provide the correct font for the culture selected in the operating system.","pos":[1287,1418]},{"content":"There is an exception to the rule of not setting the font, which is for changing the font style.","pos":[1425,1521]},{"content":"This might be important for an application in which the user clicks a button to make text in a text box appear in boldface.","pos":[1522,1645]},{"content":"To do that, you would write a function to change the text box's font style to bold, based on whatever the form's font is.","pos":[1646,1767]},{"content":"It is important to call this function in two places: in the button's <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler and in the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.FontChanged&gt;</ph> event handler.","pos":[1768,1966],"source":" It is important to call this function in two places: in the button's <xref:System.Windows.Forms.Control.Click> event handler and in the <xref:System.Windows.Forms.Control.FontChanged> event handler."},{"content":"If the function is called only in the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler and some other piece of code changes the font family of the entire form, the text box will not change with the rest of the form.","pos":[1967,2189],"source":" If the function is called only in the <xref:System.Windows.Forms.Control.Click> event handler and some other piece of code changes the font family of the entire form, the text box will not change with the rest of the form."},{"content":"However, when you localize your application, the bold font may display poorly for certain languages.","pos":[3517,3617]},{"content":"If this is a concern, you want the localizers to have the option of switching the font from bold to regular text.","pos":[3618,3731]},{"content":"Since localizers are typically not developers and do not have access to source code, only to resource files, this option needs to be set in the resource files.","pos":[3732,3891]},{"content":"To do this, you would set the <ph id=\"ph1\">&lt;xref:System.Drawing.Font.Bold%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[3892,3976],"source":" To do this, you would set the <xref:System.Drawing.Font.Bold%2A> property to `true`."},{"content":"This results in the font setting being written out to the resource files, where localizers can edit it.","pos":[3977,4080]},{"content":"You then write code after the <ph id=\"ph1\">`InitializeComponent`</ph> method to reset the font based on whatever the form's font is, but using the font style specified in the resource file.","pos":[4081,4252],"source":" You then write code after the `InitializeComponent` method to reset the font based on whatever the form's font is, but using the font style specified in the resource file."},{"pos":[4451,4459],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Globalizing Windows Forms<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/globalizing-windows-forms.md)</ept><ph id=\"ph1\"> </ph>","pos":[4463,4566],"source":"[Globalizing Windows Forms](../../../../docs/framework/winforms/advanced/globalizing-windows-forms.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Using Fonts and Text<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/using-fonts-and-text.md)</ept>","pos":[4569,4662],"source":" [Using Fonts and Text](../../../../docs/framework/winforms/advanced/using-fonts-and-text.md)"}]}