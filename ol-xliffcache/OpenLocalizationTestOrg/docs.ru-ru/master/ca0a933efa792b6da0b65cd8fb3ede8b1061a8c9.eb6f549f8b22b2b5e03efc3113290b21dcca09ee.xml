{"content":"---\ntitle: \"How to: Filter on an Attribute (XPath-LINQ to XML) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 208d6256-1bd7-4237-b2c9-909f26dfd0e2\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Filter on an Attribute (XPath-LINQ to XML) (C#)\nThis topic shows how to get the descendant elements with a specified name, and with an attribute with a specified value.  \n  \n The XPath expression is:  \n  \n `.//Address[@Type='Shipping']`  \n  \n## Example  \n This example finds all descendants elements with the name of `Address`, and with a `Type` attribute with a value of \"Shipping\".  \n  \n This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md).  \n  \n```csharp  \nXDocument po = XDocument.Load(\"PurchaseOrders.xml\");  \n  \n// LINQ to XML query  \nIEnumerable<XElement> list1 =  \n    from el in po.Descendants(\"Address\")  \n    where (string)el.Attribute(\"Type\") == \"Shipping\"  \n    select el;  \n  \n// XPath expression  \nIEnumerable<XElement> list2 = po.XPathSelectElements(\".//Address[@Type='Shipping']\");  \n  \nif (list1.Count() == list2.Count() &&  \n        list1.Intersect(list2).Count() == list1.Count())  \n    Console.WriteLine(\"Results are identical\");  \nelse  \n    Console.WriteLine(\"Results differ\");  \nforeach (XElement el in list1)  \n    Console.WriteLine(el);  \n```  \n  \n This example produces the following output:  \n  \n```  \nResults are identical  \n<Address Type=\"Shipping\">  \n  <Name>Ellen Adams</Name>  \n  <Street>123 Maple Street</Street>  \n  <City>Mill Valley</City>  \n  <State>CA</State>  \n  <Zip>10999</Zip>  \n  <Country>USA</Country>  \n</Address>  \n<Address Type=\"Shipping\">  \n  <Name>Cristian Osorio</Name>  \n  <Street>456 Main Street</Street>  \n  <City>Buffalo</City>  \n  <State>NY</State>  \n  <Zip>98112</Zip>  \n  <Country>USA</Country>  \n</Address>  \n<Address Type=\"Shipping\">  \n  <Name>Jessica Arnold</Name>  \n  <Street>4055 Madison Ave</Street>  \n  <City>Seattle</City>  \n  <State>WA</State>  \n  <Zip>98112</Zip>  \n  <Country>USA</Country>  \n</Address>  \n```  \n  \n## See Also  \n [LINQ to XML for XPath Users (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)","nodes":[{"pos":[12,84],"content":"How to: Filter on an Attribute (XPath-LINQ to XML) (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Filter on an Attribute (XPath-LINQ to XML) (C#) | Microsoft Docs","pos":[0,72]}]},{"pos":[369,424],"content":"How to: Filter on an Attribute (XPath-LINQ to XML) (C#)","linkify":"How to: Filter on an Attribute (XPath-LINQ to XML) (C#)","nodes":[{"content":"How to: Filter on an Attribute (XPath-LINQ to XML) (C#)","pos":[0,55]}]},{"content":"This topic shows how to get the descendant elements with a specified name, and with an attribute with a specified value.","pos":[425,545]},{"content":"The XPath expression is:","pos":[552,576]},{"pos":[622,629],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[633,760],"content":"This example finds all descendants elements with the name of <ph id=\"ph1\">`Address`</ph>, and with a <ph id=\"ph2\">`Type`</ph> attribute with a value of \"Shipping\".","source":"This example finds all descendants elements with the name of `Address`, and with a `Type` attribute with a value of \"Shipping\"."},{"pos":[767,979],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Multiple Purchase Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Multiple Purchase Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-multiple-purchase-orders-linq-to-xml.md)."},{"content":"This example produces the following output:","pos":[1612,1655]},{"pos":[2322,2330],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2334,2451],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML for XPath Users (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)</ept>","source":"[LINQ to XML for XPath Users (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)"}]}