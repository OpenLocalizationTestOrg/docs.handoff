{"content":"---\ntitle: \"- Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Negate\"\n  - \"vb.-\"\nhelpviewer_keywords: \n  - \"operator [Visual Basic]\"\n  - \"operators [Visual Basic], subtraction\"\n  - \"operators [Visual Basic], difference\"\n  - \"negation operator [Visual Basic]\"\n  - \"operators [Visual Basic], arithmetic\"\n  - \"subtraction operator [Visual Basic], syntax\"\n  - \"arithmetic operators [Visual Basic], subtraction\"\n  - \"difference operator [Visual Basic]\"\n  - \"math operators [Visual Basic]\"\n  - \"operators [Visual Basic], negation\"\n  - \"minus operator [Visual Basic]\"\nms.assetid: bff2c368-662d-4c92-ac87-1d9bdfd3426a\n---\n# - Operator (Visual Basic)\nReturns the difference between two numeric expressions or the negative value of a numeric expression.  \n  \n## Syntax  \n  \n```  \n      expression1 – expression2  \n- or -  \n– expression1  \n```  \n  \n## Parts  \n `expression1`  \n Required. Any numeric expression.  \n  \n `expression2`  \n Required unless the `–` operator is calculating a negative value. Any numeric expression.  \n  \n## Result  \n The result is the difference between `expression1` and `expression2`, or the negated value of `expression1`.  \n  \n The result data type is a numeric type appropriate for the data types of `expression1` and `expression2`. See the \"Integer Arithmetic\" tables in [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md).  \n  \n## Supported Types  \n All numeric types. This includes the unsigned and floating-point types and `Decimal`.  \n  \n## Remarks  \n In the first usage shown in the syntax shown previously, the `–` operator is the *binary* arithmetic subtraction operator for the difference between two numeric expressions.  \n  \n In the second usage shown in the syntax shown previously, the `–` operator is the *unary* negation operator for the negative value of an expression. In this sense, the negation consists of reversing the sign of `expression1` so that the result is positive if `expression1` is negative.  \n  \n If either expression evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), the `–` operator treats it as zero.  \n  \n> [!NOTE]\n>  The `–` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, make sure that you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `–` operator to calculate and return the difference between two numbers, and then to negate a number.  \n  \n [!code-vb[VbVbalrOperators#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#10)]  \n  \n Following the execution of these statements, `binaryResult` contains 124.45 and `unaryResult` contains –334.90.  \n  \n## See also\n\n- [-= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/subtraction-assignment-operator.md)\n- [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)\n","nodes":[{"pos":[4,628],"embed":true,"restype":"x-metadata","content":"title: \"- Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Negate\"\n  - \"vb.-\"\nhelpviewer_keywords: \n  - \"operator [Visual Basic]\"\n  - \"operators [Visual Basic], subtraction\"\n  - \"operators [Visual Basic], difference\"\n  - \"negation operator [Visual Basic]\"\n  - \"operators [Visual Basic], arithmetic\"\n  - \"subtraction operator [Visual Basic], syntax\"\n  - \"arithmetic operators [Visual Basic], subtraction\"\n  - \"difference operator [Visual Basic]\"\n  - \"math operators [Visual Basic]\"\n  - \"operators [Visual Basic], negation\"\n  - \"minus operator [Visual Basic]\"\nms.assetid: bff2c368-662d-4c92-ac87-1d9bdfd3426a","nodes":[{"content":"- Operator (Visual Basic)","nodes":[{"pos":[2,25],"content":"Operator (Visual Basic)","nodes":[{"content":"Operator (Visual Basic)","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[635,660],"content":"- Operator (Visual Basic)","linkify":"- Operator (Visual Basic)","nodes":[{"content":"- Operator (Visual Basic)","pos":[0,25]}]},{"content":"Returns the difference between two numeric expressions or the negative value of a numeric expression.","pos":[661,762]},{"pos":[771,777],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[860,865],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[886,895]},{"content":"Any numeric expression.","pos":[896,919]},{"content":"Required unless the <ph id=\"ph1\">`–`</ph> operator is calculating a negative value.","pos":[943,1008],"source":"Required unless the `–` operator is calculating a negative value."},{"content":"Any numeric expression.","pos":[1009,1032]},{"pos":[1041,1047],"content":"Result","linkify":"Result","nodes":[{"content":"Result","pos":[0,6]}]},{"pos":[1051,1159],"content":"The result is the difference between <ph id=\"ph1\">`expression1`</ph> and <ph id=\"ph2\">`expression2`</ph>, or the negated value of <ph id=\"ph3\">`expression1`</ph>.","source":"The result is the difference between `expression1` and `expression2`, or the negated value of `expression1`."},{"content":"The result data type is a numeric type appropriate for the data types of <ph id=\"ph1\">`expression1`</ph> and <ph id=\"ph2\">`expression2`</ph>.","pos":[1166,1271],"source":"The result data type is a numeric type appropriate for the data types of `expression1` and `expression2`."},{"content":"See the \"Integer Arithmetic\" tables in <bpt id=\"p1\">[</bpt>Data Types of Operator Results<ept id=\"p1\">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept>.","pos":[1272,1430],"source":" See the \"Integer Arithmetic\" tables in [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)."},{"pos":[1439,1454],"content":"Supported Types","linkify":"Supported Types","nodes":[{"content":"Supported Types","pos":[0,15]}]},{"content":"All numeric types.","pos":[1458,1476]},{"content":"This includes the unsigned and floating-point types and <ph id=\"ph1\">`Decimal`</ph>.","pos":[1477,1543],"source":" This includes the unsigned and floating-point types and `Decimal`."},{"pos":[1552,1559],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1563,1736],"content":"In the first usage shown in the syntax shown previously, the <ph id=\"ph1\">`–`</ph> operator is the <bpt id=\"p1\">*</bpt>binary<ept id=\"p1\">*</ept> arithmetic subtraction operator for the difference between two numeric expressions.","source":"In the first usage shown in the syntax shown previously, the `–` operator is the *binary* arithmetic subtraction operator for the difference between two numeric expressions."},{"content":"In the second usage shown in the syntax shown previously, the <ph id=\"ph1\">`–`</ph> operator is the <bpt id=\"p1\">*</bpt>unary<ept id=\"p1\">*</ept> negation operator for the negative value of an expression.","pos":[1743,1891],"source":"In the second usage shown in the syntax shown previously, the `–` operator is the *unary* negation operator for the negative value of an expression."},{"content":"In this sense, the negation consists of reversing the sign of <ph id=\"ph1\">`expression1`</ph> so that the result is positive if <ph id=\"ph2\">`expression1`</ph> is negative.","pos":[1892,2028],"source":" In this sense, the negation consists of reversing the sign of `expression1` so that the result is positive if `expression1` is negative."},{"pos":[2035,2168],"content":"If either expression evaluates to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept>, the <ph id=\"ph1\">`–`</ph> operator treats it as zero.","source":"If either expression evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), the `–` operator treats it as zero."},{"pos":[2176,2603],"content":"[!NOTE]\n The `–` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, make sure that you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":"The `–` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, make sure that you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[9,425],"nodes":[{"content":"The <ph id=\"ph1\">`–`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[0,158],"source":"The `–` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, make sure that you understand its redefined behavior.","pos":[159,274]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[275,416],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[2612,2619],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2623,2755],"content":"The following example uses the <ph id=\"ph1\">`–`</ph> operator to calculate and return the difference between two numbers, and then to negate a number.","source":"The following example uses the `–` operator to calculate and return the difference between two numbers, and then to negate a number."},{"pos":[2886,2997],"content":"Following the execution of these statements, <ph id=\"ph1\">`binaryResult`</ph> contains 124.45 and <ph id=\"ph2\">`unaryResult`</ph> contains –334.90.","source":"Following the execution of these statements, `binaryResult` contains 124.45 and `unaryResult` contains –334.90."},{"pos":[3006,3014],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3018,3133],"content":"<bpt id=\"p1\">[</bpt>-= Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/subtraction-assignment-operator.md)</ept>","source":"[-= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/subtraction-assignment-operator.md)"},{"pos":[3136,3234],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)"},{"pos":[3237,3349],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[3352,3476],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[3479,3626],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","source":"[Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"}]}