{"content":"---\ntitle: \"Data Tracing in ADO.NET\"\nms.date: \"03/30/2017\"\nms.assetid: a6a752a5-d2a9-4335-a382-b58690ccb79f\n---\n\n# Data Tracing in ADO.NET\n\nADO.NET features built-in data tracing functionality that is supported by the .NET data providers for SQL Server, Oracle, OLE DB and ODBC, as well as the ADO.NET <xref:System.Data.DataSet>, and the SQL Server network protocols.\n\nTracing data access API calls can help diagnose the following problems:\n\n- Schema mismatch between client program and the database.\n\n- Database unavailability or network library problems.\n\n- Incorrect SQL whether hard coded or generated by an application.\n\n- Incorrect programming logic.\n\n- Issues resulting from the interaction between multiple ADO.NET components or between ADO.NET and your own components.\n\nTo support different trace technologies, tracing is extensible, so a developer can trace a problem at any level of the application stack. Although tracing is not an ADO.NET-only feature, Microsoft providers take advantage of generalized tracing and instrumentation APIs.\n\nFor more information about setting and configuring managed tracing in ADO.NET, see [Tracing Data Access](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh880086(v=msdn.10)).\n\n## Accessing Diagnostic Information in the Extended Events Log\n\nIn the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] Data Provider for SQL Server, data access tracing ([Data Access Tracing](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh880086(v=msdn.10))) has been updated to make it easier to easier to correlate client events with diagnostic information, such as connection failures, from the server's connectivity ring buffer and application performance information in the extended events log. For information about reading the extended events log, see [View Event Session Data](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh710068(v=sql.110)).\n\nFor connection operations, ADO.NET will send a client connection ID. If the connection fails, you can access the connectivity ring buffer ([Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer](https://go.microsoft.com/fwlink/?LinkId=207752)) and find the `ClientConnectionID` field and get diagnostic information about the connection failure. Client connection IDs are logged in the ring buffer only if an error occurs. (If a connection fails before sending the prelogin packet, a client connection ID will not be generated.) The client connection ID is a 16-byte GUID. You can also find the client connection ID in the extended events target output, if the `client_connection_id` action is added to events in an extended events session. You can enable data access tracing and rerun the connection command and observe the `ClientConnectionID` field in the data access trace, if you need further client driver diagnostic assistance.\n\nYou can get the client connection ID programmatically by using the `SqlConnection.ClientConnectionID` property.\n\nThe `ClientConnectionID` is available for a <xref:System.Data.SqlClient.SqlConnection> object that successfully establishes  a connection. If a connection attempt fails, `ClientConnectionID` may be available via `SqlException.ToString`.\n\nADO.NET also sends a thread-specific activity ID. The activity ID is captured in the extended events sessions if the sessions are started with the TRACK_CAUSALITY option enabled. For performance issues with an active connection, you can get the activity ID from the client's data access trace (`ActivityID` field) and then locate the activity ID in the extended events output. The activity ID in extended events is a 16-byte GUID (not the same as the GUID for the client connection ID) appended with a four-byte sequence number. The sequence number represents the order of a request within a thread and indicates the relative ordering of batch and RPC statements for the thread. The `ActivityID` is currently optionally sent for SQL batch statements and RPC requests when data access tracing is enabled on and the 18th bit in the data access tracing configuration word is turned ON.\n\nThe following is a sample that uses [!INCLUDE[tsql](../../../../includes/tsql-md.md)] to start an extended events session that will be stored in a ring buffer and will record the activity ID sent from a client on RPC and batch operations.\n\n```sql\ncreate event session MySession on server\nadd event connectivity_ring_buffer_recorded,\nadd event sql_statement_starting (action (client_connection_id)),\nadd event sql_statement_completed (action (client_connection_id)),\nadd event rpc_starting (action (client_connection_id)),\nadd event rpc_completed (action (client_connection_id))\nadd target ring_buffer with (track_causality=on)\n```\n\n## See also\n\n- [Network Tracing in the .NET Framework](../../../../docs/framework/network-programming/network-tracing.md)\n- [Tracing and Instrumenting Applications](../../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,107],"embed":true,"restype":"x-metadata","content":"title: \"Data Tracing in ADO.NET\"\nms.date: \"03/30/2017\"\nms.assetid: a6a752a5-d2a9-4335-a382-b58690ccb79f","nodes":[{"content":"Data Tracing in ADO.NET","nodes":[{"pos":[0,23],"content":"Data Tracing in ADO.NET","nodes":[{"content":"Data Tracing in ADO.NET","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[115,138],"content":"Data Tracing in ADO.NET","linkify":"Data Tracing in ADO.NET","nodes":[{"content":"Data Tracing in ADO.NET","pos":[0,23]}]},{"pos":[140,367],"content":"ADO.NET features built-in data tracing functionality that is supported by the .NET data providers for SQL Server, Oracle, OLE DB and ODBC, as well as the ADO.NET <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph>, and the SQL Server network protocols.","source":"ADO.NET features built-in data tracing functionality that is supported by the .NET data providers for SQL Server, Oracle, OLE DB and ODBC, as well as the ADO.NET <xref:System.Data.DataSet>, and the SQL Server network protocols."},{"content":"Tracing data access API calls can help diagnose the following problems:","pos":[369,440]},{"content":"Schema mismatch between client program and the database.","pos":[444,500]},{"content":"Database unavailability or network library problems.","pos":[504,556]},{"content":"Incorrect SQL whether hard coded or generated by an application.","pos":[560,624]},{"content":"Incorrect programming logic.","pos":[628,656]},{"content":"Issues resulting from the interaction between multiple ADO.NET components or between ADO.NET and your own components.","pos":[660,777]},{"content":"To support different trace technologies, tracing is extensible, so a developer can trace a problem at any level of the application stack.","pos":[779,916]},{"content":"Although tracing is not an ADO.NET-only feature, Microsoft providers take advantage of generalized tracing and instrumentation APIs.","pos":[917,1049]},{"pos":[1051,1242],"content":"For more information about setting and configuring managed tracing in ADO.NET, see <bpt id=\"p1\">[</bpt>Tracing Data Access<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh880086(v=msdn.10))</ept>.","source":"For more information about setting and configuring managed tracing in ADO.NET, see [Tracing Data Access](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh880086(v=msdn.10))."},{"pos":[1247,1306],"content":"Accessing Diagnostic Information in the Extended Events Log","linkify":"Accessing Diagnostic Information in the Extended Events Log","nodes":[{"content":"Accessing Diagnostic Information in the Extended Events Log","pos":[0,59]}]},{"content":"In the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> Data Provider for SQL Server, data access tracing (<bpt id=\"p1\">[</bpt>Data Access Tracing<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh880086(v=msdn.10))</ept>) has been updated to make it easier to easier to correlate client events with diagnostic information, such as connection failures, from the server's connectivity ring buffer and application performance information in the extended events log.","pos":[1308,1779],"source":"In the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] Data Provider for SQL Server, data access tracing ([Data Access Tracing](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh880086(v=msdn.10))) has been updated to make it easier to easier to correlate client events with diagnostic information, such as connection failures, from the server's connectivity ring buffer and application performance information in the extended events log."},{"content":"For information about reading the extended events log, see <bpt id=\"p1\">[</bpt>View Event Session Data<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh710068(v=sql.110))</ept>.","pos":[1780,1951],"source":" For information about reading the extended events log, see [View Event Session Data](https://docs.microsoft.com/previous-versions/sql/sql-server-2012/hh710068(v=sql.110))."},{"content":"For connection operations, ADO.NET will send a client connection ID.","pos":[1953,2021]},{"content":"If the connection fails, you can access the connectivity ring buffer (<bpt id=\"p1\">[</bpt>Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=207752)</ept>) and find the <ph id=\"ph1\">`ClientConnectionID`</ph> field and get diagnostic information about the connection failure.","pos":[2022,2325],"source":" If the connection fails, you can access the connectivity ring buffer ([Connectivity troubleshooting in SQL Server 2008 with the Connectivity Ring Buffer](https://go.microsoft.com/fwlink/?LinkId=207752)) and find the `ClientConnectionID` field and get diagnostic information about the connection failure."},{"content":"Client connection IDs are logged in the ring buffer only if an error occurs.","pos":[2326,2402]},{"content":"(If a connection fails before sending the prelogin packet, a client connection ID will not be generated.) The client connection ID is a 16-byte GUID.","pos":[2403,2552]},{"content":"You can also find the client connection ID in the extended events target output, if the <ph id=\"ph1\">`client_connection_id`</ph> action is added to events in an extended events session.","pos":[2553,2720],"source":" You can also find the client connection ID in the extended events target output, if the `client_connection_id` action is added to events in an extended events session."},{"content":"You can enable data access tracing and rerun the connection command and observe the <ph id=\"ph1\">`ClientConnectionID`</ph> field in the data access trace, if you need further client driver diagnostic assistance.","pos":[2721,2914],"source":" You can enable data access tracing and rerun the connection command and observe the `ClientConnectionID` field in the data access trace, if you need further client driver diagnostic assistance."},{"pos":[2916,3027],"content":"You can get the client connection ID programmatically by using the <ph id=\"ph1\">`SqlConnection.ClientConnectionID`</ph> property.","source":"You can get the client connection ID programmatically by using the `SqlConnection.ClientConnectionID` property."},{"content":"The <ph id=\"ph1\">`ClientConnectionID`</ph> is available for a <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> object that successfully establishes  a connection.","pos":[3029,3167],"source":"The `ClientConnectionID` is available for a <xref:System.Data.SqlClient.SqlConnection> object that successfully establishes  a connection."},{"content":"If a connection attempt fails, <ph id=\"ph1\">`ClientConnectionID`</ph> may be available via <ph id=\"ph2\">`SqlException.ToString`</ph>.","pos":[3168,3265],"source":" If a connection attempt fails, `ClientConnectionID` may be available via `SqlException.ToString`."},{"content":"ADO.NET also sends a thread-specific activity ID.","pos":[3267,3316]},{"content":"The activity ID is captured in the extended events sessions if the sessions are started with the TRACK_CAUSALITY option enabled.","pos":[3317,3445]},{"content":"For performance issues with an active connection, you can get the activity ID from the client's data access trace (<ph id=\"ph1\">`ActivityID`</ph> field) and then locate the activity ID in the extended events output.","pos":[3446,3643],"source":" For performance issues with an active connection, you can get the activity ID from the client's data access trace (`ActivityID` field) and then locate the activity ID in the extended events output."},{"content":"The activity ID in extended events is a 16-byte GUID (not the same as the GUID for the client connection ID) appended with a four-byte sequence number.","pos":[3644,3795]},{"content":"The sequence number represents the order of a request within a thread and indicates the relative ordering of batch and RPC statements for the thread.","pos":[3796,3945]},{"content":"The <ph id=\"ph1\">`ActivityID`</ph> is currently optionally sent for SQL batch statements and RPC requests when data access tracing is enabled on and the 18th bit in the data access tracing configuration word is turned ON.","pos":[3946,4149],"source":" The `ActivityID` is currently optionally sent for SQL batch statements and RPC requests when data access tracing is enabled on and the 18th bit in the data access tracing configuration word is turned ON."},{"pos":[4151,4389],"content":"The following is a sample that uses <ph id=\"ph1\">[!INCLUDE[tsql](../../../../includes/tsql-md.md)]</ph> to start an extended events session that will be stored in a ring buffer and will record the activity ID sent from a client on RPC and batch operations.","source":"The following is a sample that uses [!INCLUDE[tsql](../../../../includes/tsql-md.md)] to start an extended events session that will be stored in a ring buffer and will record the activity ID sent from a client on RPC and batch operations."},{"pos":[4786,4794],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4798,4904],"content":"<bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](../../../../docs/framework/network-programming/network-tracing.md)</ept>","source":"[Network Tracing in the .NET Framework](../../../../docs/framework/network-programming/network-tracing.md)"},{"pos":[4907,5037],"content":"<bpt id=\"p1\">[</bpt>Tracing and Instrumenting Applications<ept id=\"p1\">](../../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)</ept>","source":"[Tracing and Instrumenting Applications](../../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)"},{"pos":[5040,5144],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}