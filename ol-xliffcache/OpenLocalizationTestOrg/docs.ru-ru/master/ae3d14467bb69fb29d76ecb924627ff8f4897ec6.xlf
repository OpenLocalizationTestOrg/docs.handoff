<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="authoring-workflows-activities-and-expressions-using-imperative-code.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae3d14467bb69fb29d76ecb924627ff8f4897ec6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\authoring-workflows-activities-and-expressions-using-imperative-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76d42e0503d2474051c8827859a5cfbf5f5fbc82</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad143114d969bc949c8af53ec0a7c884678a011c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Authoring Workflows, Activities, and Expressions Using Imperative Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Authoring Workflows, Activities, and Expressions Using Imperative Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A workflow definition is a tree of configured activity objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tree of activities can be defined many ways, including by hand-editing XAML or by using the Workflow Designer to produce XAML.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Use of XAML, however, is not a requirement.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Workflow definitions can also be created programmatically.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of creating workflow definitions, activities, and expressions by using code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For examples of working with XAML workflows using code, see <bpt id="p1">[</bpt>Serializing Workflows and Activities to and from XAML<ept id="p1">](../../../docs/framework/windows-workflow-foundation/serializing-workflows-and-activities-to-and-from-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating Workflow Definitions</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A workflow definition can be created by instantiating an instance of an activity type and configuring the activity object’s properties.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For activities that do not contain child activities, this can be accomplished using a few lines of code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The examples in this topic use <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> to run the sample workflows.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> invoking workflows, passing arguments, and the different hosting choices that are available, see <bpt id="p1">[</bpt>Using WorkflowInvoker and WorkflowApplication<ept id="p1">](../../../docs/framework/windows-workflow-foundation/using-workflowinvoker-and-workflowapplication.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this example, a workflow that consists of a single <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity is created.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity’s <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine.Text%2A&gt;</ph> argument is set, and the workflow is invoked.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If an activity contains child activities, the method of construction is similar.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity that contains two <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Using Object Initializers</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The examples in this topic use object initialization syntax.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Object initialization syntax can be a useful way to create workflow definitions in code because it provides a hierarchical view of the activities in the workflow and shows the relationship between the activities.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There is no requirement to use object initialization syntax when you programmatically create workflows.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example is functionally equivalent to the previous example.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>object initializers, see <bpt id="p1">[</bpt>How to: Initialize Objects without Calling a Constructor (C# Programming Guide)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=161015)</ept> and <bpt id="p2">[</bpt>How to: Declare an Object by Using an Object Initializer<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=161016)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Working with Variables, Literal Values, and Expressions</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When creating a workflow definition using code, be aware of what code executes as part of the creation of the workflow definition and what code executes as part of the execution of an instance of that workflow.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, the following workflow is intended to generate a random number and write it to the console.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When this workflow definition code is executed, the call to <ph id="ph1">`Random.Next`</ph> is made and the result is stored in the workflow definition as a literal value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Many instances of this workflow can be invoked, and all would display the same number.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To have the random number generation occur during workflow execution, an expression must be used that is evaluated each time the workflow runs.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the following example, a Visual Basic expression is used with a <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The expression in the previous example could also be implemented using a <ph id="ph1">&lt;xref:Microsoft.CSharp.Activities.CSharpValue%601&gt;</ph> and a C# expression.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>C# expressions must be compiled before the workflow containing them is invoked.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the C# expressions are not compiled, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown when the workflow is invoked with a message similar to the following: <ph id="ph2">`Expression Activity type 'CSharpValue`</ph>1' requires compilation in order to run.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Please ensure that the workflow has been compiled.` In most scenarios involving workflows created in Visual Studio the C# expressions are compiled automatically, but in some scenarios, such as code workflows, the C# expressions must be manually compiled.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For an example of how to compile C# expressions, see the <bpt id="p1">[</bpt>Using C# expressions in code workflows<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#CodeWorkflows)</ept> section of the <bpt id="p2">[</bpt>C# Expressions<ept id="p2">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph> represents an expression in Visual Basic syntax that can be used as an r-value in an expression, and a <ph id="ph2">&lt;xref:Microsoft.CSharp.Activities.CSharpValue%601&gt;</ph> represents an expression in C# syntax that can be used as an r-value in an expression.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These expressions are evaluated each time the containing activity is executed.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The result of the expression is assigned to the workflow variable <ph id="ph1">`n`</ph>, and these results are used by the next activity in the workflow.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To access the value of the workflow variable <ph id="ph1">`n`</ph> at runtime, the <ph id="ph2">&lt;xref:System.Activities.ActivityContext&gt;</ph> is required.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This can be accessed by using the following lambda expression.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Note that both of these code are examples are using C# as the programming language, but one uses a <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph> and one uses a <ph id="ph2">&lt;xref:Microsoft.CSharp.Activities.CSharpValue%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph> and <ph id="ph2">&lt;xref:Microsoft.CSharp.Activities.CSharpValue%601&gt;</ph> can be used in both Visual Basic and C# projects.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>By default, expressions created in the workflow designer match the language of the hosting project.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When creating workflows in code, the desired language is at the discretion of the workflow author.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In these examples the result of the expression is assigned to the workflow variable <ph id="ph1">`n`</ph>, and these results are used by the next activity in the workflow.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To access the value of the workflow variable <ph id="ph1">`n`</ph> at runtime, the <ph id="ph2">&lt;xref:System.Activities.ActivityContext&gt;</ph> is required.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This can be accessed by using the following lambda expression.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions (C# Programming Guide)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=152436)</ept> or <bpt id="p2">[</bpt>Lambda Expressions (Visual Basic)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=152437)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Lambda expressions are not serializable to XAML format.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If an attempt to serialize a workflow with lambda expressions is made, a <ph id="ph1">&lt;xref:System.Activities.Expressions.LambdaSerializationException&gt;</ph> is thrown with the following message: "This workflow contains lambda expressions specified in code.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These expressions are not XAML serializable.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In order to make your workflow XAML-serializable, either use VisualBasicValue/VisualBasicReference or ExpressionServices.Convert(lambda).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This will convert your lambda expressions into expression activities."</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To make this expression compatible with XAML, use <ph id="ph1">&lt;xref:System.Activities.Expressions.ExpressionServices&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.Expressions.ExpressionServices.Convert%2A&gt;</ph>, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph> could also be used.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Note that no lambda expression is required when using a Visual Basic expression.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>At run time, Visual Basic expressions are compiled into LINQ expressions.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Both of the previous examples are serializable to XAML, but if the serialized XAML is intended to be viewed and edited in the workflow designer, use <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Activities.VisualBasicValue%601&gt;</ph> for your expressions.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Serialized workflows that use <ph id="ph1">`ExpressionServices.Convert`</ph> can be opened in the designer, but the value of the expression will be blank.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> serializing workflows to XAML, see <bpt id="p1">[</bpt>Serializing Workflows and Activities to and from XAML<ept id="p1">](../../../docs/framework/windows-workflow-foundation/serializing-workflows-and-activities-to-and-from-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Literal Expressions and Reference Types</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Literal expressions are represented in workflows by the <ph id="ph1">&lt;xref:System.Activities.Expressions.Literal%601&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities are functionally equivalent.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It is invalid to initialize a literal expression with any reference type except <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the following example, an <ph id="ph1">&lt;xref:System.Activities.Statements.Assign&gt;</ph> activity's <ph id="ph2">&lt;xref:System.Activities.Statements.Assign.Value%2A&gt;</ph> property is initialized with a literal expression using a <ph id="ph3">`List&lt;string&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When the workflow containing this activity is validated, the following validation error is returned: "Literal only supports value types and the immutable type System.String.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The type System.Collections.Generic.List`1[System.String] cannot be used as a literal."</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If the workflow is invoked, an <ph id="ph1">&lt;xref:System.Activities.InvalidWorkflowException&gt;</ph> is thrown that contains the text of the validation error.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This is a validation error because creating a literal expression with a reference type does not create a new instance of the reference type for each instance of the workflow.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To resolve this, replace the literal expression with one that creates and returns a new instance of the reference type.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>expressions, see <bpt id="p1">[</bpt>Expressions<ept id="p1">](../../../docs/framework/windows-workflow-foundation/expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Invoking Methods on Objects using Expressions and the InvokeMethod Activity</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> activity can be used to invoke static and instance methods of classes in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In a previous example in this topic, a random number was generated using the <ph id="ph1">&lt;xref:System.Random&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> activity could also have been used to call the <ph id="ph2">&lt;xref:System.Random.Next%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Random&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">&lt;xref:System.Random.Next%2A&gt;</ph> is not a static method, an instance of the <ph id="ph2">&lt;xref:System.Random&gt;</ph> class is supplied for the <ph id="ph3">&lt;xref:System.Activities.Expressions.InvokeMethod%601.TargetObject%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In this example a new instance is created using a Visual Basic expression, but it could also have been created previously and stored in a workflow variable.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this example, it would be simpler to use the <ph id="ph1">&lt;xref:System.Activities.Statements.Assign%601&gt;</ph> activity instead of the <ph id="ph2">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the method call ultimately invoked by either the <ph id="ph1">&lt;xref:System.Activities.Statements.Assign%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> activities is long running, <ph id="ph3">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> has an advantage since it has a <ph id="ph4">&lt;xref:System.Activities.Expressions.InvokeMethod%601.RunAsynchronously%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When this property is set to <ph id="ph1">`true`</ph>, the invoked method will run asynchronously with regard to the workflow.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If other activities are in parallel, they will not be blocked while the method is asynchronously executing.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Also, if the method to be invoked has no return value, then <ph id="ph1">&lt;xref:System.Activities.Expressions.InvokeMethod%601&gt;</ph> is the appropriate way to invoke the method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Arguments and Dynamic Activities</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A workflow definition is created in code by assembling activities into an activity tree and configuring any properties and arguments.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Existing arguments can be bound, but new arguments cannot be added to activities.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This includes workflow arguments passed to the root activity.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In imperative code, workflow arguments are specified as properties on a new CLR type, and in XAML they are declared by using <ph id="ph1">`x:Class`</ph> and <ph id="ph2">`x:Member`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Because there is no new CLR type created when a workflow definition is created as a tree of in-memory objects, arguments cannot be added.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>However, arguments can be added to a <ph id="ph1">&lt;xref:System.Activities.DynamicActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In this example, a <ph id="ph1">&lt;xref:System.Activities.DynamicActivity%601&gt;</ph> is created that takes two integer arguments, adds them together, and returns the result.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Activities.DynamicActivityProperty&gt;</ph> is created for each argument, and the result of the operation is assigned to the <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> argument of the <ph id="ph3">&lt;xref:System.Activities.DynamicActivity%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>dynamic activities, see <bpt id="p1">[</bpt>Creating an Activity at Runtime<ept id="p1">](../../../docs/framework/windows-workflow-foundation/creating-an-activity-at-runtime-with-dynamicactivity.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Compiled Activities</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Dynamic activities are one way to define an activity that contains arguments using code, but activities can also be created in code and compiled into types.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Simple activities can be created that derive from <ph id="ph1">&lt;xref:System.Activities.CodeActivity&gt;</ph>, and asynchronous activities that derive from <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>These activities can have arguments, return values, and define their logic using imperative code.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For examples of creating these types of activities, see <bpt id="p1">[</bpt>CodeActivity Base Class<ept id="p1">](../../../docs/framework/windows-workflow-foundation/workflow-activity-authoring-using-the-codeactivity-class.md)</ept> and <bpt id="p2">[</bpt>Creating Asynchronous Activities<ept id="p2">](../../../docs/framework/windows-workflow-foundation/creating-asynchronous-activities-in-wf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Activities that derive from <ph id="ph1">&lt;xref:System.Activities.NativeActivity&gt;</ph> can define their logic using imperative code and they can also contain child activities that define the logic.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>They also have full access to the features of the runtime such as creating bookmarks.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For examples of creating a <ph id="ph1">&lt;xref:System.Activities.NativeActivity&gt;</ph>-based activity, see <bpt id="p1">[</bpt>NativeActivity Base Class<ept id="p1">](../../../docs/framework/windows-workflow-foundation/nativeactivity-base-class.md)</ept>, <bpt id="p2">[</bpt>How to: Create an Activity<ept id="p2">](../../../docs/framework/windows-workflow-foundation/how-to-create-an-activity.md)</ept>, and the <bpt id="p3">[</bpt>Custom Composite using Native Activity<ept id="p3">](../../../docs/framework/windows-workflow-foundation/samples/custom-composite-using-native-activity.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Activities that derive from <ph id="ph1">&lt;xref:System.Activities.Activity&gt;</ph> define their logic solely through the use of child activities.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>These activities are typically created by using the workflow designer, but can also be defined by using code.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">`Square`</ph> activity is defined that derives from <ph id="ph2">`Activity&lt;int&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Square`</ph> activity has a single <ph id="ph2">&lt;xref:System.Activities.InArgument%601&gt;</ph> named <ph id="ph3">`Value`</ph>, and defines its logic by specifying a <ph id="ph4">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity using the <ph id="ph5">&lt;xref:System.Activities.Activity.Implementation%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity contains a <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity and an <ph id="ph3">&lt;xref:System.Activities.Statements.Assign%601&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Together, these three activities implement the logic of the <ph id="ph1">`Square`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In the following example, a workflow definition consisting of a single <ph id="ph1">`Square`</ph> activity is invoked using <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When the workflow is invoked, the following output is displayed to the console:</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Squaring the value: 5<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Result: 25<ept id="p1">**</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>