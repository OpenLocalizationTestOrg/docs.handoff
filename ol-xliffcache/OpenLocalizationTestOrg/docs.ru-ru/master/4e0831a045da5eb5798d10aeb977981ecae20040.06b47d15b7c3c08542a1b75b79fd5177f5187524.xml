{"content":"---\ntitle: \"Value Types and Reference Types\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"reference data types [Visual Basic]\"\n  - \"reference types [Visual Basic]\"\n  - \"value types [Visual Basic]\"\n  - \"value data types [Visual Basic]\"\n  - \"types [Visual Basic]\"\n  - \"data types [Visual Basic], value types\"\n  - \"data types [Visual Basic], reference types\"\nms.assetid: fc82ce15-5a40-4c5c-a1e1-a556830e7391\n---\n# Value Types and Reference Types\nIn Visual Basic, data types are implemented based on their classification. The Visual Basic data types can be classified according to whether a variable of a particular type stores its own data or a pointer to the data. If it stores its own data it is a *value type*; if it holds a pointer to data elsewhere in memory it is a *reference type*.  \n  \n## Value Types  \n A data type is a *value type* if it holds the data within its own memory allocation. Value types include the following:  \n  \n-   All numeric data types  \n  \n-   `Boolean`, `Char`, and `Date`  \n  \n-   All structures, even if their members are reference types  \n  \n-   Enumerations, since their underlying type is always `SByte`, `Short`, `Integer`, `Long`, `Byte`, `UShort`, `UInteger`, or `ULong`  \n  \n Every structure is a value type, even if it contains reference type members. For this reason, value types such as `Char` and `Integer` are implemented by .NET Framework structures.  \n  \n You can declare a value type by using the reserved keyword, for example, `Decimal`. You can also use the `New` keyword to initialize a value type. This is especially useful if the type has a constructor that takes parameters. An example of this is the <xref:System.Decimal.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Byte%29> constructor, which builds a new `Decimal` value from the supplied parts.  \n  \n## Reference Types  \n A *reference type* contains a pointer to another memory location that holds the data. Reference types include the following:  \n  \n-   `String`  \n  \n-   All arrays, even if their elements are value types  \n  \n-   Class types, such as <xref:System.Windows.Forms.Form>  \n  \n-   Delegates  \n  \n A class is a *reference type*. For this reason, reference types such as `Object` and `String` are supported by [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] classes. Note that every array is a reference type, even if its members are value types.  \n  \n Since every reference type represents an underlying .NET Framework class, you must use the [New Operator](../../../../visual-basic/language-reference/operators/new-operator.md) keyword when you initialize it. The following statement initializes an array.  \n  \n```  \nDim totals() As Single = New Single(8) {}  \n```  \n  \n## Elements That Are Not Types  \n The following programming elements do not qualify as types, because you cannot specify any of them as a data type for a declared element:  \n  \n-   Namespaces  \n  \n-   Modules  \n  \n-   Events  \n  \n-   Properties and procedures  \n  \n-   Variables, constants, and fields  \n  \n## Working with the Object Data Type  \n You can assign either a reference type or a value type to a variable of the `Object` data type. An `Object` variable always holds a pointer to the data, never the data itself. However, if you assign a value type to an `Object` variable, it behaves as if it holds its own data. For more information, see [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md).  \n  \n You can find out whether an `Object` variable is acting as a reference type or a value type by passing it to the <xref:Microsoft.VisualBasic.Information.IsReference%2A> method in the <xref:Microsoft.VisualBasic.Information> class of the <xref:Microsoft.VisualBasic?displayProperty=nameWithType> namespace. <xref:Microsoft.VisualBasic.Information.IsReference%2A?displayProperty=nameWithType> returns `True` if the content of the `Object` variable represents a reference type.  \n  \n## See also\n\n- [Nullable Value Types](../../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)\n- [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)\n- [Structure Statement](../../../../visual-basic/language-reference/statements/structure-statement.md)\n- [Efficient Use of Data Types](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n- [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)\n- [Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)\n","nodes":[{"pos":[4,406],"embed":true,"restype":"x-metadata","content":"title: \"Value Types and Reference Types\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"reference data types [Visual Basic]\"\n  - \"reference types [Visual Basic]\"\n  - \"value types [Visual Basic]\"\n  - \"value data types [Visual Basic]\"\n  - \"types [Visual Basic]\"\n  - \"data types [Visual Basic], value types\"\n  - \"data types [Visual Basic], reference types\"\nms.assetid: fc82ce15-5a40-4c5c-a1e1-a556830e7391","nodes":[{"content":"Value Types and Reference Types","nodes":[{"pos":[0,31],"content":"Value Types and Reference Types","nodes":[{"content":"Value Types and Reference Types","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[413,444],"content":"Value Types and Reference Types","linkify":"Value Types and Reference Types","nodes":[{"content":"Value Types and Reference Types","pos":[0,31]}]},{"content":"In Visual Basic, data types are implemented based on their classification.","pos":[445,519]},{"content":"The Visual Basic data types can be classified according to whether a variable of a particular type stores its own data or a pointer to the data.","pos":[520,664]},{"content":"If it stores its own data it is a <bpt id=\"p1\">*</bpt>value type<ept id=\"p1\">*</ept>; if it holds a pointer to data elsewhere in memory it is a <bpt id=\"p2\">*</bpt>reference type<ept id=\"p2\">*</ept>.","pos":[665,788],"source":" If it stores its own data it is a *value type*; if it holds a pointer to data elsewhere in memory it is a *reference type*."},{"pos":[797,808],"content":"Value Types","linkify":"Value Types","nodes":[{"content":"Value Types","pos":[0,11]}]},{"content":"A data type is a <bpt id=\"p1\">*</bpt>value type<ept id=\"p1\">*</ept> if it holds the data within its own memory allocation.","pos":[812,896],"source":"A data type is a *value type* if it holds the data within its own memory allocation."},{"content":"Value types include the following:","pos":[897,931]},{"content":"All numeric data types","pos":[941,963]},{"pos":[973,1002],"content":"<ph id=\"ph1\">`Boolean`</ph>, <ph id=\"ph2\">`Char`</ph>, and <ph id=\"ph3\">`Date`</ph>","source":"`Boolean`, `Char`, and `Date`"},{"content":"All structures, even if their members are reference types","pos":[1012,1069]},{"pos":[1079,1208],"content":"Enumerations, since their underlying type is always <ph id=\"ph1\">`SByte`</ph>, <ph id=\"ph2\">`Short`</ph>, <ph id=\"ph3\">`Integer`</ph>, <ph id=\"ph4\">`Long`</ph>, <ph id=\"ph5\">`Byte`</ph>, <ph id=\"ph6\">`UShort`</ph>, <ph id=\"ph7\">`UInteger`</ph>, or <ph id=\"ph8\">`ULong`</ph>","source":"Enumerations, since their underlying type is always `SByte`, `Short`, `Integer`, `Long`, `Byte`, `UShort`, `UInteger`, or `ULong`"},{"content":"Every structure is a value type, even if it contains reference type members.","pos":[1215,1291]},{"content":"For this reason, value types such as <ph id=\"ph1\">`Char`</ph> and <ph id=\"ph2\">`Integer`</ph> are implemented by .NET Framework structures.","pos":[1292,1395],"source":" For this reason, value types such as `Char` and `Integer` are implemented by .NET Framework structures."},{"content":"You can declare a value type by using the reserved keyword, for example, <ph id=\"ph1\">`Decimal`</ph>.","pos":[1402,1485],"source":"You can declare a value type by using the reserved keyword, for example, `Decimal`."},{"content":"You can also use the <ph id=\"ph1\">`New`</ph> keyword to initialize a value type.","pos":[1486,1548],"source":" You can also use the `New` keyword to initialize a value type."},{"content":"This is especially useful if the type has a constructor that takes parameters.","pos":[1549,1627]},{"content":"An example of this is the <ph id=\"ph1\">&lt;xref:System.Decimal.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Byte%29&gt;</ph> constructor, which builds a new <ph id=\"ph2\">`Decimal`</ph> value from the supplied parts.","pos":[1628,1835],"source":" An example of this is the <xref:System.Decimal.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Byte%29> constructor, which builds a new `Decimal` value from the supplied parts."},{"pos":[1844,1859],"content":"Reference Types","linkify":"Reference Types","nodes":[{"content":"Reference Types","pos":[0,15]}]},{"content":"A <bpt id=\"p1\">*</bpt>reference type<ept id=\"p1\">*</ept> contains a pointer to another memory location that holds the data.","pos":[1863,1948],"source":"A *reference type* contains a pointer to another memory location that holds the data."},{"content":"Reference types include the following:","pos":[1949,1987]},{"content":"All arrays, even if their elements are value types","pos":[2015,2065]},{"pos":[2075,2128],"content":"Class types, such as <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form&gt;</ph>","source":"Class types, such as <xref:System.Windows.Forms.Form>"},{"content":"Delegates","pos":[2138,2147]},{"content":"A class is a <bpt id=\"p1\">*</bpt>reference type<ept id=\"p1\">*</ept>.","pos":[2154,2184],"source":"A class is a *reference type*."},{"content":"For this reason, reference types such as <ph id=\"ph1\">`Object`</ph> and <ph id=\"ph2\">`String`</ph> are supported by <ph id=\"ph3\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> classes.","pos":[2185,2327],"source":" For this reason, reference types such as `Object` and `String` are supported by [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] classes."},{"content":"Note that every array is a reference type, even if its members are value types.","pos":[2328,2407]},{"content":"Since every reference type represents an underlying .NET Framework class, you must use the <bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept> keyword when you initialize it.","pos":[2414,2622],"source":"Since every reference type represents an underlying .NET Framework class, you must use the [New Operator](../../../../visual-basic/language-reference/operators/new-operator.md) keyword when you initialize it."},{"content":"The following statement initializes an array.","pos":[2623,2668]},{"pos":[2736,2763],"content":"Elements That Are Not Types","linkify":"Elements That Are Not Types","nodes":[{"content":"Elements That Are Not Types","pos":[0,27]}]},{"content":"The following programming elements do not qualify as types, because you cannot specify any of them as a data type for a declared element:","pos":[2767,2904]},{"content":"Namespaces","pos":[2914,2924]},{"content":"Modules","pos":[2934,2941]},{"content":"Events","pos":[2951,2957]},{"content":"Properties and procedures","pos":[2967,2992]},{"content":"Variables, constants, and fields","pos":[3002,3034]},{"pos":[3043,3076],"content":"Working with the Object Data Type","linkify":"Working with the Object Data Type","nodes":[{"content":"Working with the Object Data Type","pos":[0,33]}]},{"content":"You can assign either a reference type or a value type to a variable of the <ph id=\"ph1\">`Object`</ph> data type.","pos":[3080,3175],"source":"You can assign either a reference type or a value type to a variable of the `Object` data type."},{"content":"An <ph id=\"ph1\">`Object`</ph> variable always holds a pointer to the data, never the data itself.","pos":[3176,3255],"source":" An `Object` variable always holds a pointer to the data, never the data itself."},{"content":"However, if you assign a value type to an <ph id=\"ph1\">`Object`</ph> variable, it behaves as if it holds its own data.","pos":[3256,3356],"source":" However, if you assign a value type to an `Object` variable, it behaves as if it holds its own data."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>.","pos":[3357,3478],"source":" For more information, see [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)."},{"content":"You can find out whether an <ph id=\"ph1\">`Object`</ph> variable is acting as a reference type or a value type by passing it to the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Information.IsReference%2A&gt;</ph> method in the <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Information&gt;</ph> class of the <ph id=\"ph4\">&lt;xref:Microsoft.VisualBasic?displayProperty=nameWithType&gt;</ph> namespace.","pos":[3485,3790],"source":"You can find out whether an `Object` variable is acting as a reference type or a value type by passing it to the <xref:Microsoft.VisualBasic.Information.IsReference%2A> method in the <xref:Microsoft.VisualBasic.Information> class of the <xref:Microsoft.VisualBasic?displayProperty=nameWithType> namespace."},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Information.IsReference%2A?displayProperty=nameWithType&gt;</ph> returns <ph id=\"ph2\">`True`</ph> if the content of the <ph id=\"ph3\">`Object`</ph> variable represents a reference type.","pos":[3791,3959],"source":"<xref:Microsoft.VisualBasic.Information.IsReference%2A?displayProperty=nameWithType> returns `True` if the content of the `Object` variable represents a reference type."},{"pos":[3968,3976],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3980,4099],"content":"<bpt id=\"p1\">[</bpt>Nullable Value Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept>","source":"[Nullable Value Types](../../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)"},{"pos":[4102,4229],"content":"<bpt id=\"p1\">[</bpt>Type Conversions in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>","source":"[Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)"},{"pos":[4232,4332],"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/structure-statement.md)</ept>","source":"[Structure Statement](../../../../visual-basic/language-reference/statements/structure-statement.md)"},{"pos":[4335,4468],"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","source":"[Efficient Use of Data Types](../../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"},{"pos":[4471,4565],"content":"<bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>","source":"[Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md)"},{"pos":[4568,4662],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept>","source":"[Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)"}]}