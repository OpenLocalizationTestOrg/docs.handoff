{"content":"---\ntitle: \"Filtering Data (C#)\"\nms.date: 07/20/2015\nms.assetid: fbaece0d-0f23-47f7-89c5-f3ea8db692b6\n---\n# Filtering Data (C#)\nFiltering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition. It is also known as selection.  \n  \n The following illustration shows the results of filtering a sequence of characters. The predicate for the filtering operation specifies that the character must be 'A'.  \n  \n ![Diagram that shows a LINQ filtering operation](./media/filtering-data/linq-filter-operation.png)  \n  \n The standard query operator methods that perform selection are listed in the following section.  \n  \n## Methods  \n  \n|Method Name|Description|C# Query Expression Syntax|More Information|  \n|-----------------|-----------------|---------------------------------|----------------------|  \n|OfType|Selects values, depending on their ability to be cast to a specified type.|Not applicable.|<xref:System.Linq.Enumerable.OfType%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.OfType%2A?displayProperty=nameWithType>|  \n|Where|Selects values that are based on a predicate function.|`where`|<xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType><br /><br /> <xref:System.Linq.Queryable.Where%2A?displayProperty=nameWithType>|  \n  \n## Query Expression Syntax Example  \n The following example uses the `where` clause to filter from an array those strings that have a specific length.  \n  \n```csharp  \nstring[] words = { \"the\", \"quick\", \"brown\", \"fox\", \"jumps\" };  \n  \nIEnumerable<string> query = from word in words  \n                            where word.Length == 3  \n                            select word;  \n  \nforeach (string str in query)  \n    Console.WriteLine(str);  \n  \n/* This code produces the following output:  \n  \n    the  \n    fox  \n*/  \n```  \n  \n## See also\n\n- <xref:System.Linq>\n- [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)\n- [where clause](../../../../csharp/language-reference/keywords/where-clause.md)\n- [How to: Dynamically Specify Predicate Filters at Runtime](../../../../csharp/programming-guide/linq-query-expressions/how-to-dynamically-specify-predicate-filters-at-runtime.md)\n- [How to: Query An Assembly's Metadata with Reflection (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-assembly-s-metadata-with-reflection-linq.md)\n- [How to: Query for Files with a Specified Attribute or Name (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-query-for-files-with-a-specified-attribute-or-name.md)\n- [How to: Sort or Filter Text Data by Any Word or Field (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)\n","nodes":[{"pos":[4,101],"embed":true,"restype":"x-metadata","content":"title: \"Filtering Data (C#)\"\nms.date: 07/20/2015\nms.assetid: fbaece0d-0f23-47f7-89c5-f3ea8db692b6","nodes":[{"content":"Filtering Data (C#)","nodes":[{"pos":[0,19],"content":"Filtering Data (C#)","nodes":[{"content":"Filtering Data (C#)","pos":[0,19]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[108,127],"content":"Filtering Data (C#)","linkify":"Filtering Data (C#)","nodes":[{"content":"Filtering Data (C#)","pos":[0,19]}]},{"content":"Filtering refers to the operation of restricting the result set to contain only those elements that satisfy a specified condition.","pos":[128,258]},{"content":"It is also known as selection.","pos":[259,289]},{"content":"The following illustration shows the results of filtering a sequence of characters.","pos":[296,379]},{"content":"The predicate for the filtering operation specifies that the character must be 'A'.","pos":[380,463]},{"content":"Diagram that shows a LINQ filtering operation","pos":[472,517]},{"content":"The standard query operator methods that perform selection are listed in the following section.","pos":[575,670]},{"pos":[679,686],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method Name","pos":[693,704]},{"content":"Description","pos":[705,716]},{"content":"C# Query Expression Syntax","pos":[717,743]},{"content":"More Information","pos":[744,760]},{"content":"OfType","pos":[862,868]},{"content":"Selects values, depending on their ability to be cast to a specified type.","pos":[869,943]},{"content":"Not applicable.","pos":[944,959]},{"content":"Where","pos":[1113,1118]},{"content":"Selects values that are based on a predicate function.","pos":[1119,1173]},{"pos":[1338,1369],"content":"Query Expression Syntax Example","linkify":"Query Expression Syntax Example","nodes":[{"content":"Query Expression Syntax Example","pos":[0,31]}]},{"pos":[1373,1485],"content":"The following example uses the <ph id=\"ph1\">`where`</ph> clause to filter from an array those strings that have a specific length.","source":"The following example uses the `where` clause to filter from an array those strings that have a specific length."},{"pos":[1869,1877],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1902,2031],"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>","source":"[Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)"},{"pos":[2034,2112],"content":"<bpt id=\"p1\">[</bpt>where clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/where-clause.md)</ept>","source":"[where clause](../../../../csharp/language-reference/keywords/where-clause.md)"},{"pos":[2115,2293],"content":"<bpt id=\"p1\">[</bpt>How to: Dynamically Specify Predicate Filters at Runtime<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/how-to-dynamically-specify-predicate-filters-at-runtime.md)</ept>","source":"[How to: Dynamically Specify Predicate Filters at Runtime](../../../../csharp/programming-guide/linq-query-expressions/how-to-dynamically-specify-predicate-filters-at-runtime.md)"},{"pos":[2296,2474],"content":"<bpt id=\"p1\">[</bpt>How to: Query An Assembly's Metadata with Reflection (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-assembly-s-metadata-with-reflection-linq.md)</ept>","source":"[How to: Query An Assembly's Metadata with Reflection (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-assembly-s-metadata-with-reflection-linq.md)"},{"pos":[2477,2655],"content":"<bpt id=\"p1\">[</bpt>How to: Query for Files with a Specified Attribute or Name (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-query-for-files-with-a-specified-attribute-or-name.md)</ept>","source":"[How to: Query for Files with a Specified Attribute or Name (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-query-for-files-with-a-specified-attribute-or-name.md)"},{"pos":[2658,2838],"content":"<bpt id=\"p1\">[</bpt>How to: Sort or Filter Text Data by Any Word or Field (LINQ) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)</ept>","source":"[How to: Sort or Filter Text Data by Any Word or Field (LINQ) (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-sort-or-filter-text-data-by-any-word-or-field-linq.md)"}]}