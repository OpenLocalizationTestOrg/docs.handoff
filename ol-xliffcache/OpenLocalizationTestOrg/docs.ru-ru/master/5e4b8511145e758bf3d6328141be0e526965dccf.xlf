<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="inheritance-basics.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e4b8511145e758bf3d6328141be0e526965dccf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\objects-and-classes\inheritance-basics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a2519212d71bbf06dc6aa508d245486f5435d66</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec14f01e849b8bf7eb19f990004e82ce2797c4f4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Inheritance Basics (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Inheritance Basics (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Inherits`</ph> statement is used to declare a new class, called a <bpt id="p1">*</bpt>derived class<ept id="p1">*</ept>, based on an existing class, known as a <bpt id="p2">*</bpt>base class<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Derived classes inherit, and can extend, the properties, methods, events, fields, and constants defined in the base class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following section describes some of the rules for inheritance, and the modifiers you can use to change the way classes inherit or are inherited:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By default, all classes are inheritable unless marked with the <ph id="ph1">`NotInheritable`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Classes can inherit from other classes in your project or from classes in other assemblies that your project references.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Unlike languages that allow multiple inheritance, Visual Basic allows only single inheritance in classes; that is, derived classes can have only one base class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Although multiple inheritance is not allowed in classes, classes can implement multiple interfaces, which can effectively accomplish the same ends.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To prevent exposing restricted items in a base class, the access type of a derived class must be equal to or more restrictive than its base class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`Public`</ph> class cannot inherit a <ph id="ph2">`Friend`</ph> or a <ph id="ph3">`Private`</ph> class, and a <ph id="ph4">`Friend`</ph> class cannot inherit a <ph id="ph5">`Private`</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Inheritance Modifiers</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Visual Basic introduces the following class-level statements and modifiers to support inheritance:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Inherits`</ph> statement — Specifies the base class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NotInheritable`</ph> modifier — Prevents programmers from using the class as a base class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustInherit`</ph> modifier — Specifies that the class is intended for use as a base class only.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Instances of <ph id="ph1">`MustInherit`</ph> classes cannot be created directly; they can only be created as base class instances of a derived class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(Other programming languages, such as C++ and C#, use the term <bpt id="p1">*</bpt>abstract class<ept id="p1">*</ept> to describe such a class.)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Overriding Properties and Methods in Derived Classes</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By default, a derived class inherits properties and methods from its base class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If an inherited property or method has to behave differently in the derived class it can be <bpt id="p1">*</bpt>overridden<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>That is, you can define a new implementation of the method in the derived class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following modifiers are used to control how properties and methods are overridden:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Overridable`</ph> — Allows a property or method in a class to be overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Overrides`</ph> — Overrides an <ph id="ph2">`Overridable`</ph> property or method defined in the base class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NotOverridable`</ph> — Prevents a property or method from being overridden in an inheriting class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`Public`</ph> methods are <ph id="ph2">`NotOverridable`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustOverride`</ph> — Requires that a derived class override the property or method.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`MustOverride`</ph> keyword is used, the method definition consists of just the <ph id="ph2">`Sub`</ph>, <ph id="ph3">`Function`</ph>, or <ph id="ph4">`Property`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>No other statements are allowed, and specifically there is no <ph id="ph1">`End Sub`</ph> or <ph id="ph2">`End Function`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MustOverride`</ph> methods must be declared in <ph id="ph2">`MustInherit`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Suppose you want to define classes to handle payroll.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You could define a generic <ph id="ph1">`Payroll`</ph> class that contains a <ph id="ph2">`RunPayroll`</ph> method that calculates payroll for a typical week.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You could then use <ph id="ph1">`Payroll`</ph> as a base class for a more specialized <ph id="ph2">`BonusPayroll`</ph> class, which could be used when distributing employee bonuses.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BonusPayroll`</ph> class can inherit, and override, the <ph id="ph2">`PayEmployee`</ph> method defined in the base <ph id="ph3">`Payroll`</ph> class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example defines a base class, <ph id="ph1">`Payroll,`</ph> and a derived class, <ph id="ph2">`BonusPayroll`</ph>, which overrides an inherited method, <ph id="ph3">`PayEmployee`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A procedure, <ph id="ph1">`RunPayroll`</ph>, creates and then passes a <ph id="ph2">`Payroll`</ph> object and a <ph id="ph3">`BonusPayroll`</ph> object to a function, <ph id="ph4">`Pay`</ph>, that executes the <ph id="ph5">`PayEmployee`</ph> method of both objects.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The MyBase Keyword</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyBase`</ph> keyword behaves like an object variable that refers to the base class of the current instance of a class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> is frequently used to access base class members that are overridden or shadowed in a derived class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In particular, <ph id="ph1">`MyBase.New`</ph> is used to explicitly call a base class constructor from a derived class constructor.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, suppose you are designing a derived class that overrides a method inherited from the base class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The overridden method can call the method in the base class and modify the return value as shown in the following code fragment:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following list describes restrictions on using <ph id="ph1">`MyBase`</ph>:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> refers to the immediate base class and its inherited members.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It cannot be used to access <ph id="ph1">`Private`</ph> members in the class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> is a keyword, not a real object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be assigned to a variable, passed to procedures, or used in an <ph id="ph2">`Is`</ph> comparison.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The method that <ph id="ph1">`MyBase`</ph> qualifies does not have to be defined in the immediate base class; it may instead be defined in an indirectly inherited base class.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In order for a reference qualified by <ph id="ph1">`MyBase`</ph> to compile correctly, some base class must contain a method matching the name and types of parameters that appear in the call.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You cannot use <ph id="ph1">`MyBase`</ph> to call <ph id="ph2">`MustOverride`</ph> base class methods.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used to qualify itself.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Therefore, the following code is not valid:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used in modules.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyBase`</ph> cannot be used to access base class members that are marked as <ph id="ph2">`Friend`</ph> if the base class is in a different assembly.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information and another example, see <bpt id="p1">[</bpt>How to: Access a Variable Hidden by a Derived Class<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-access-a-variable-hidden-by-a-derived-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The MyClass Keyword</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyClass`</ph> keyword behaves like an object variable that refers to the current instance of a class as originally implemented.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> resembles <ph id="ph2">`Me`</ph>, but every method and property call on <ph id="ph3">`MyClass`</ph> is treated as if the method or property were <bpt id="p1">[</bpt>NotOverridable<ept id="p1">](../../../../visual-basic/language-reference/modifiers/notoverridable.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Therefore, the method or property is not affected by overriding in a derived class.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> is a keyword, not a real object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be assigned to a variable, passed to procedures, or used in an <ph id="ph2">`Is`</ph> comparison.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> refers to the containing class and its inherited members.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> can be used as a qualifier for <ph id="ph2">`Shared`</ph> members.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be used inside a <ph id="ph2">`Shared`</ph> method, but can be used inside an instance method to access a shared member of a class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> cannot be used in standard modules.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyClass`</ph> can be used to qualify a method that is defined in a base class and that has no implementation of the method provided in that class.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Such a reference has the same meaning as <ph id="ph1">`MyBase.`</ph><bpt id="p1">*</bpt>Method<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example compares <ph id="ph1">`Me`</ph> and <ph id="ph2">`MyClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Even though <ph id="ph1">`derivedClass`</ph> overrides <ph id="ph2">`testMethod`</ph>, the <ph id="ph3">`MyClass`</ph> keyword in <ph id="ph4">`useMyClass`</ph> nullifies the effects of overriding, and the compiler resolves the call to the base class version of <ph id="ph5">`testMethod`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inherits Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/inherits-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Me, My, MyBase, and MyClass<ept id="p1">](../../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>