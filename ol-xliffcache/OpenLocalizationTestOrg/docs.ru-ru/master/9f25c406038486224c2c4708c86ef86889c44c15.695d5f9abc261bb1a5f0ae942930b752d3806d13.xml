{"content":"---\ntitle: \"IsFalse Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.isfalse\"\nhelpviewer_keywords: \n  - \"AndAlso operator [Visual Basic]\"\n  - \"IsFalse operator [Visual Basic]\"\nms.assetid: 37fc9dbf-e5cc-4570-b93f-7213447974df\n---\n# IsFalse Operator (Visual Basic)\nDetermines whether an expression is `False`.  \n  \n You cannot call `IsFalse` explicitly in your code, but the Visual Basic compiler can use it to generate code from `AndAlso` clauses. If you define a class or structure and then use a variable of that type in an `AndAlso` clause, you must define `IsFalse` on that class or structure.  \n  \n The compiler considers the `IsFalse` and `IsTrue` operators as a *matched pair*. This means that if you define one of them, you must also define the other one.  \n  \n> [!NOTE]\n>  The `IsFalse` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following code example defines the outline of a structure that includes definitions for the `IsFalse` and `IsTrue` operators.  \n  \n [!code-vb[VbVbalrOperators#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#28)]  \n  \n## See also\n\n- [IsTrue Operator](../../../visual-basic/language-reference/operators/istrue-operator.md)\n- [How to: Define an Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)\n- [AndAlso Operator](../../../visual-basic/language-reference/operators/andalso-operator.md)\n","nodes":[{"pos":[4,242],"embed":true,"restype":"x-metadata","content":"title: \"IsFalse Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.isfalse\"\nhelpviewer_keywords: \n  - \"AndAlso operator [Visual Basic]\"\n  - \"IsFalse operator [Visual Basic]\"\nms.assetid: 37fc9dbf-e5cc-4570-b93f-7213447974df","nodes":[{"content":"IsFalse Operator (Visual Basic)","nodes":[{"pos":[0,31],"content":"IsFalse Operator (Visual Basic)","nodes":[{"content":"IsFalse Operator (Visual Basic)","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[249,280],"content":"IsFalse Operator (Visual Basic)","linkify":"IsFalse Operator (Visual Basic)","nodes":[{"content":"IsFalse Operator (Visual Basic)","pos":[0,31]}]},{"pos":[281,325],"content":"Determines whether an expression is <ph id=\"ph1\">`False`</ph>.","source":"Determines whether an expression is `False`."},{"content":"You cannot call <ph id=\"ph1\">`IsFalse`</ph> explicitly in your code, but the Visual Basic compiler can use it to generate code from <ph id=\"ph2\">`AndAlso`</ph> clauses.","pos":[332,464],"source":"You cannot call `IsFalse` explicitly in your code, but the Visual Basic compiler can use it to generate code from `AndAlso` clauses."},{"content":"If you define a class or structure and then use a variable of that type in an <ph id=\"ph1\">`AndAlso`</ph> clause, you must define <ph id=\"ph2\">`IsFalse`</ph> on that class or structure.","pos":[465,614],"source":" If you define a class or structure and then use a variable of that type in an `AndAlso` clause, you must define `IsFalse` on that class or structure."},{"content":"The compiler considers the <ph id=\"ph1\">`IsFalse`</ph> and <ph id=\"ph2\">`IsTrue`</ph> operators as a <bpt id=\"p1\">*</bpt>matched pair<ept id=\"p1\">*</ept>.","pos":[621,701],"source":"The compiler considers the `IsFalse` and `IsTrue` operators as a *matched pair*."},{"content":"This means that if you define one of them, you must also define the other one.","pos":[702,780]},{"pos":[788,1215],"content":"[!NOTE]\n The `IsFalse` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":"The `IsFalse` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[9,425],"nodes":[{"content":"The <ph id=\"ph1\">`IsFalse`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure.","pos":[0,165],"source":"The `IsFalse` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[166,274]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[275,416],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[1224,1231],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1235,1364],"content":"The following code example defines the outline of a structure that includes definitions for the <ph id=\"ph1\">`IsFalse`</ph> and <ph id=\"ph2\">`IsTrue`</ph> operators.","source":"The following code example defines the outline of a structure that includes definitions for the `IsFalse` and `IsTrue` operators."},{"pos":[1497,1505],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1509,1597],"content":"<bpt id=\"p1\">[</bpt>IsTrue Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/istrue-operator.md)</ept>","source":"[IsTrue Operator](../../../visual-basic/language-reference/operators/istrue-operator.md)"},{"pos":[1600,1727],"content":"<bpt id=\"p1\">[</bpt>How to: Define an Operator<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept>","source":"[How to: Define an Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)"},{"pos":[1730,1820],"content":"<bpt id=\"p1\">[</bpt>AndAlso Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/andalso-operator.md)</ept>","source":"[AndAlso Operator](../../../visual-basic/language-reference/operators/andalso-operator.md)"}]}