{"content":"---\ntitle: \"How to: Reorder the Fields of a Delimited File (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: 4e62d82c-61b7-4f18-b9a1-86723746d7d2\n---\n# How to: Reorder the Fields of a Delimited File (LINQ) (C#)\nA comma-separated value (CSV) file is a text file that is often used to store spreadsheet data or other tabular data that is represented by rows and columns. By using the <xref:System.String.Split%2A> method to separate the fields, it is very easy to query and manipulate CSV files by using LINQ. In fact, the same technique can be used to reorder the parts of any structured line of text; it is not limited to CSV files.  \n  \n In the following example, assume that the three columns represent students' \"last name,\" \"first name\", and \"ID.\" The fields are in alphabetical order based on the students' last names. The query produces a new sequence in which the ID column appears first, followed by a second column that combines the student's first name and last name. The lines are reordered according to the ID field. The results are saved into a new file and the original data is not modified.  \n  \n### To create the data file  \n  \n1.  Copy the following lines into a plain text file that is named spreadsheet1.csv. Save the file in your project folder.  \n  \n    ```  \n    Adams,Terry,120  \n    Fakhouri,Fadi,116  \n    Feng,Hanying,117  \n    Garcia,Cesar,114  \n    Garcia,Debra,115  \n    Garcia,Hugo,118  \n    Mortensen,Sven,113  \n    O'Donnell,Claire,112  \n    Omelchenko,Svetlana,111  \n    Tucker,Lance,119  \n    Tucker,Michael,122  \n    Zabokritski,Eugene,121  \n    ```  \n  \n## Example  \n  \n```csharp  \nclass CSVFiles  \n{  \n    static void Main(string[] args)  \n    {  \n        // Create the IEnumerable data source  \n        string[] lines = System.IO.File.ReadAllLines(@\"../../../spreadsheet1.csv\");  \n  \n        // Create the query. Put field 2 first, then  \n        // reverse and combine fields 0 and 1 from the old field  \n        IEnumerable<string> query =  \n            from line in lines  \n            let x = line.Split(',')  \n            orderby x[2]  \n            select x[2] + \", \" + (x[1] + \" \" + x[0]);  \n  \n        // Execute the query and write out the new file. Note that WriteAllLines  \n        // takes a string[], so ToArray is called on the query.  \n        System.IO.File.WriteAllLines(@\"../../../spreadsheet2.csv\", query.ToArray());  \n  \n        Console.WriteLine(\"Spreadsheet2.csv written to disk. Press any key to exit\");  \n        Console.ReadKey();  \n    }  \n}  \n/* Output to spreadsheet2.csv:  \n111, Svetlana Omelchenko  \n112, Claire O'Donnell  \n113, Sven Mortensen  \n114, Cesar Garcia  \n115, Debra Garcia  \n116, Fadi Fakhouri  \n117, Hanying Feng  \n118, Hugo Garcia  \n119, Lance Tucker  \n120, Terry Adams  \n121, Eugene Zabokritski  \n122, Michael Tucker  \n */  \n```  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces.  \n  \n## See also\n\n- [LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)\n- [LINQ and File Directories (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)\n- [How to: Generate XML from CSV Files (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files.md)\n","nodes":[{"pos":[4,140],"embed":true,"restype":"x-metadata","content":"title: \"How to: Reorder the Fields of a Delimited File (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: 4e62d82c-61b7-4f18-b9a1-86723746d7d2","nodes":[{"content":"How to: Reorder the Fields of a Delimited File (LINQ) (C#)","nodes":[{"pos":[0,58],"content":"How to: Reorder the Fields of a Delimited File (LINQ) (C#)","nodes":[{"content":"How to: Reorder the Fields of a Delimited File (LINQ) (C#)","pos":[0,58]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[147,205],"content":"How to: Reorder the Fields of a Delimited File (LINQ) (C#)","linkify":"How to: Reorder the Fields of a Delimited File (LINQ) (C#)","nodes":[{"content":"How to: Reorder the Fields of a Delimited File (LINQ) (C#)","pos":[0,58]}]},{"content":"A comma-separated value (CSV) file is a text file that is often used to store spreadsheet data or other tabular data that is represented by rows and columns.","pos":[206,363]},{"content":"By using the <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph> method to separate the fields, it is very easy to query and manipulate CSV files by using LINQ.","pos":[364,502],"source":" By using the <xref:System.String.Split%2A> method to separate the fields, it is very easy to query and manipulate CSV files by using LINQ."},{"content":"In fact, the same technique can be used to reorder the parts of any structured line of text; it is not limited to CSV files.","pos":[503,627]},{"content":"In the following example, assume that the three columns represent students' \"last name,\" \"first name\", and \"ID.\"","pos":[634,746]},{"content":"The fields are in alphabetical order based on the students' last names.","pos":[747,818]},{"content":"The query produces a new sequence in which the ID column appears first, followed by a second column that combines the student's first name and last name.","pos":[819,972]},{"content":"The lines are reordered according to the ID field.","pos":[973,1023]},{"content":"The results are saved into a new file and the original data is not modified.","pos":[1024,1100]},{"pos":[1110,1133],"content":"To create the data file","linkify":"To create the data file","nodes":[{"content":"To create the data file","pos":[0,23]}]},{"content":"Copy the following lines into a plain text file that is named spreadsheet1.csv.","pos":[1143,1222]},{"content":"Save the file in your project folder.","pos":[1223,1260]},{"pos":[1588,1595],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2813,2831],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[2835,3012],"content":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <ph id=\"ph1\">`using`</ph> directives for the System.Linq and System.IO namespaces.","source":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces."},{"pos":[3021,3029],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3033,3128],"content":"<bpt id=\"p1\">[</bpt>LINQ and Strings (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)</ept>","source":"[LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)"},{"pos":[3131,3244],"content":"<bpt id=\"p1\">[</bpt>LINQ and File Directories (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)</ept>","source":"[LINQ and File Directories (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)"},{"pos":[3247,3379],"content":"<bpt id=\"p1\">[</bpt>How to: Generate XML from CSV Files (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files.md)</ept>","source":"[How to: Generate XML from CSV Files (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files.md)"}]}