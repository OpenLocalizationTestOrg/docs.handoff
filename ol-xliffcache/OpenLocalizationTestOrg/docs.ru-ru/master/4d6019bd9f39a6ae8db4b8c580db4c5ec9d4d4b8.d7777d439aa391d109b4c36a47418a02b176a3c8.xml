{"content":"---\ntitle: \"How to: read from fixed-width text Files in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"fixed-width text file\"\n  - \"reading text files [Visual Basic], fixed-width\"\n  - \"files [Visual Basic], parsing\"\n  - \"text files [Visual Basic], tasks\"\n  - \"text files [Visual Basic], reading\"\nms.assetid: 99be5692-967a-4e85-993e-cd18139a5a69\n---\n# How to: read from fixed-width text files in Visual Basic\nThe `TextFieldParser` object provides a way to easily and efficiently parse structured text files, such as logs.  \n  \n The `TextFieldType` property defines whether the parsed file is a delimited file or one that has fixed-width fields of text. In a fixed-width text file, the field at the end can have a variable width. To specify that the field at the end has a variable width, define it to have a width less than or equal to zero.  \n  \n### To parse a fixed-width text file  \n  \n1.  Create a new `TextFieldParser`. The following code creates the `TextFieldParser` named `Reader` and opens the file `test.log`.  \n  \n     [!code-vb[VbFileIORead#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbFileIORead/VB/Class1.vb#9)]  \n  \n2.  Define the `TextFieldType` property as `FixedWidth`, defining the width and format. The following code defines the columns of text; the first is 5 characters wide, the second 10, the third 11, and the fourth is of variable width.  \n  \n     [!code-vb[VbFileIORead#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbFileIORead/VB/Class1.vb#10)]  \n  \n3.  Loop through the fields in the file. If any lines are corrupted, report an error and continue parsing.  \n  \n     [!code-vb[VbFileIORead#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbFileIORead/VB/Class1.vb#11)]  \n  \n4.  Close the `While` and `Using` blocks with `End While` and `End Using`.  \n  \n     [!code-vb[VbFileIORead#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbFileIORead/VB/Class1.vb#12)]  \n  \n## Example  \n This example reads from the file `test.log`.  \n  \n [!code-vb[VbFileIORead#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbFileIORead/VB/Class1.vb#13)]  \n  \n## Robust programming  \n The following conditions may cause an exception:  \n  \n-   A row cannot be parsed using the specified format (<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>). The exception message specifies the line causing the exception, while the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property is assigned to the text contained in the line.  \n  \n-   The specified file does not exist (<xref:System.IO.FileNotFoundException>).  \n  \n-   A partial-trust situation in which the user does not have sufficient permissions to access the file. (<xref:System.Security.SecurityException>).  \n  \n-   The path is too long (<xref:System.IO.PathTooLongException>).  \n  \n-   The user does not have sufficient permissions to access the file (<xref:System.UnauthorizedAccessException>).  \n  \n## See also\n\n- <xref:Microsoft.VisualBasic.FileIO.TextFieldParser?displayProperty=nameWithType>\n- [How to: Read From Comma-Delimited Text Files](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)\n- [How to: Read From Text Files with Multiple Formats](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)\n- [Parsing Text Files with the TextFieldParser Object](../../../../visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)\n- [Walkthrough: Manipulating Files and Directories in Visual Basic](../../../../visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)\n- [Troubleshooting: Reading from and Writing to Text Files](../../../../visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files.md)\n","nodes":[{"pos":[4,357],"embed":true,"restype":"x-metadata","content":"title: \"How to: read from fixed-width text Files in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"fixed-width text file\"\n  - \"reading text files [Visual Basic], fixed-width\"\n  - \"files [Visual Basic], parsing\"\n  - \"text files [Visual Basic], tasks\"\n  - \"text files [Visual Basic], reading\"\nms.assetid: 99be5692-967a-4e85-993e-cd18139a5a69","nodes":[{"content":"How to: read from fixed-width text Files in Visual Basic","nodes":[{"pos":[0,56],"content":"How to: read from fixed-width text Files in Visual Basic","nodes":[{"content":"How to: read from fixed-width text Files in Visual Basic","pos":[0,56]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[364,420],"content":"How to: read from fixed-width text files in Visual Basic","linkify":"How to: read from fixed-width text files in Visual Basic","nodes":[{"content":"How to: read from fixed-width text files in Visual Basic","pos":[0,56]}]},{"pos":[421,533],"content":"The <ph id=\"ph1\">`TextFieldParser`</ph> object provides a way to easily and efficiently parse structured text files, such as logs.","source":"The `TextFieldParser` object provides a way to easily and efficiently parse structured text files, such as logs."},{"content":"The <ph id=\"ph1\">`TextFieldType`</ph> property defines whether the parsed file is a delimited file or one that has fixed-width fields of text.","pos":[540,664],"source":"The `TextFieldType` property defines whether the parsed file is a delimited file or one that has fixed-width fields of text."},{"content":"In a fixed-width text file, the field at the end can have a variable width.","pos":[665,740]},{"content":"To specify that the field at the end has a variable width, define it to have a width less than or equal to zero.","pos":[741,853]},{"pos":[863,895],"content":"To parse a fixed-width text file","linkify":"To parse a fixed-width text file","nodes":[{"content":"To parse a fixed-width text file","pos":[0,32]}]},{"content":"Create a new <ph id=\"ph1\">`TextFieldParser`</ph>.","pos":[905,936],"source":"Create a new `TextFieldParser`."},{"content":"The following code creates the <ph id=\"ph1\">`TextFieldParser`</ph> named <ph id=\"ph2\">`Reader`</ph> and opens the file <ph id=\"ph3\">`test.log`</ph>.","pos":[937,1031],"source":" The following code creates the `TextFieldParser` named `Reader` and opens the file `test.log`."},{"content":"Define the <ph id=\"ph1\">`TextFieldType`</ph> property as <ph id=\"ph2\">`FixedWidth`</ph>, defining the width and format.","pos":[1159,1242],"source":"Define the `TextFieldType` property as `FixedWidth`, defining the width and format."},{"content":"The following code defines the columns of text; the first is 5 characters wide, the second 10, the third 11, and the fourth is of variable width.","pos":[1243,1388]},{"content":"Loop through the fields in the file.","pos":[1518,1554]},{"content":"If any lines are corrupted, report an error and continue parsing.","pos":[1555,1620]},{"pos":[1750,1820],"content":"Close the <ph id=\"ph1\">`While`</ph> and <ph id=\"ph2\">`Using`</ph> blocks with <ph id=\"ph3\">`End While`</ph> and <ph id=\"ph4\">`End Using`</ph>.","source":"Close the `While` and `Using` blocks with `End While` and `End Using`."},{"pos":[1949,1956],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1960,2004],"content":"This example reads from the file <ph id=\"ph1\">`test.log`</ph>.","source":"This example reads from the file `test.log`."},{"pos":[2129,2147],"content":"Robust programming","linkify":"Robust programming","nodes":[{"content":"Robust programming","pos":[0,18]}]},{"content":"The following conditions may cause an exception:","pos":[2151,2199]},{"content":"A row cannot be parsed using the specified format (<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph>).","pos":[2209,2320],"source":"A row cannot be parsed using the specified format (<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>)."},{"content":"The exception message specifies the line causing the exception, while the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A&gt;</ph> property is assigned to the text contained in the line.","pos":[2321,2515],"source":" The exception message specifies the line causing the exception, while the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property is assigned to the text contained in the line."},{"pos":[2525,2600],"content":"The specified file does not exist (<ph id=\"ph1\">&lt;xref:System.IO.FileNotFoundException&gt;</ph>).","source":"The specified file does not exist (<xref:System.IO.FileNotFoundException>)."},{"content":"A partial-trust situation in which the user does not have sufficient permissions to access the file.","pos":[2610,2710]},{"content":"(<ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph>).","pos":[2711,2754],"source":" (<xref:System.Security.SecurityException>)."},{"pos":[2764,2825],"content":"The path is too long (<ph id=\"ph1\">&lt;xref:System.IO.PathTooLongException&gt;</ph>).","source":"The path is too long (<xref:System.IO.PathTooLongException>)."},{"pos":[2835,2944],"content":"The user does not have sufficient permissions to access the file (<ph id=\"ph1\">&lt;xref:System.UnauthorizedAccessException&gt;</ph>).","source":"The user does not have sufficient permissions to access the file (<xref:System.UnauthorizedAccessException>)."},{"pos":[2953,2961],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3048,3220],"content":"<bpt id=\"p1\">[</bpt>How to: Read From Comma-Delimited Text Files<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept>","source":"[How to: Read From Comma-Delimited Text Files](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)"},{"pos":[3223,3407],"content":"<bpt id=\"p1\">[</bpt>How to: Read From Text Files with Multiple Formats<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)</ept>","source":"[How to: Read From Text Files with Multiple Formats](../../../../visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)"},{"pos":[3410,3595],"content":"<bpt id=\"p1\">[</bpt>Parsing Text Files with the TextFieldParser Object<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)</ept>","source":"[Parsing Text Files with the TextFieldParser Object](../../../../visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)"},{"pos":[3598,3792],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Manipulating Files and Directories in Visual Basic<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)</ept>","source":"[Walkthrough: Manipulating Files and Directories in Visual Basic](../../../../visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)"},{"pos":[3795,3989],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting: Reading from and Writing to Text Files<ept id=\"p1\">](../../../../visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files.md)</ept>","source":"[Troubleshooting: Reading from and Writing to Text Files](../../../../visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files.md)"}]}