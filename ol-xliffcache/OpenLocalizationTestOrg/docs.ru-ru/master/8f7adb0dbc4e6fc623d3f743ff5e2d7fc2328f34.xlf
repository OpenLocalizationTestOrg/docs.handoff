<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="poison-message-handling.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f7adb0dbc4e6fc623d3f743ff5e2d7fc2328f34</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\poison-message-handling.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1233a604cda86cef8174e7e6bc87689e033492d8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b7c63c0dbea0d96c6ed3f569f83f0ec44ed67a9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Poison Message Handling | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Poison Message Handling</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>poison message<ept id="p1">*</ept> is a message that has exceeded the maximum number of delivery attempts to the application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This situation can arise when a queue-based application cannot process a message because of errors.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To meet reliability demands, a queued application receives messages under a transaction.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Aborting the transaction in which a queued message was received leaves the message in the queue so that the message is retried under a new transaction.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If the problem that caused the transaction to abort is not corrected, the receiving application can get stuck in a loop receiving and aborting the same message until the maximum number of delivery attempts has been exceeded and a poison message results.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A message can become a poison message for many reasons.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The most common reasons are application specific.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, if an application reads a message from a queue and performs some database processing, the application may fail to get a lock on the database, causing it to abort the transaction.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because the database transaction was aborted, the message remains in the queue, which causes the application to reread the message a second time and make another attempt to acquire a lock on the database.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Messages can also become poison if they contain invalid information.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, a purchase order may contain an invalid customer number.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In these cases, the application may voluntarily abort the transaction and force the message to become a poison message.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>On rare occasions, messages can fail to get dispatched to the application.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> layer may find a problem with the message, such as if the message has the wrong frame, invalid message credentials attached to it, or an invalid action header.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In these cases, the application never receives the message; however, the message can still become a poison message and be processed manually.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Handling Poison Messages</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, poison message handling provides a mechanism for a receiving application to deal with messages that cannot be dispatched to the application, or messages that are dispatched to the application but which fail to be processed because of application-specific reasons.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Poison message handling is configured by the following properties in each of the available queued bindings:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ReceiveRetryCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An integer value that indicates the maximum number of times to retry delivery of a message from the application queue to the application.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The default value is 5.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is sufficient in cases where an immediate retry fixes the problem, such as with a temporary deadlock on a database.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxRetryCycles`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An integer value that indicates the maximum number of retry cycles.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A retry cycle consists of transferring a message from the application queue to the retry subqueue and, after a configurable delay, from the retry subqueue back into the application queue to reattempt delivery.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The default value is 2.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>On <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>, the message is tried a maximum of (<ph id="ph2">`ReceiveRetryCount`</ph> +1) * (<ph id="ph3">`MaxRetryCycles`</ph> + 1) times.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxRetryCycles`</ph> is ignored on <ph id="ph2">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> and <ph id="ph3">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RetryCycleDelay`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The time delay between retry cycles.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The default value is 30 minutes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxRetryCycles`</ph> and <ph id="ph2">`RetryCycleDelay`</ph> together provide a mechanism to address the problem where a retry after a periodic delay fixes the problem.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, this handles a locked row set in SQL Server pending transaction commit.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ReceiveErrorHandling`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An enumeration that indicates the action to take for a message that has failed delivery after the maximum number of retries has been attempted.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The values can be Fault, Drop, Reject, and Move.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default option is Fault.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Fault.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This option sends a fault to the listener that caused the <ph id="ph1">`ServiceHost`</ph> to fault.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The message must be removed from the application queue by some external mechanism before the application can continue to process messages from the queue.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Drop.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This option drops the poison message and the message is never delivered to the application.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the message's <ph id="ph1">`TimeToLive`</ph> property has expired at this point, then the message may appear in the sender's dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If not, the message does not appear anywhere.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This option indicates that the user has not specified what to do if the message is lost.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Reject.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This option is available only on <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This instructs Message Queuing (MSMQ) to send a negative acknowledgement back to the sending queue manager that the application cannot receive the message.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The message is placed in the sending queue manager's dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Move.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This option is available only on <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This moves the poison message to a poison-message queue for later processing by a poison-message handling application.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The poison-message queue is a subqueue of the application queue.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A poison-message handling application can be a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service that reads messages out of the poison queue.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The poison queue is a subqueue of the application queue and can be addressed as net.msmq://<ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>machine-name<ept id="p1">*</ept><ph id="ph2">&gt;/</ph><bpt id="p2">*</bpt>applicationQueue<ept id="p2">*</ept>;poison, where <bpt id="p3">*</bpt>machine-name<ept id="p3">*</ept> is the name of the computer on which the queue resides and the <bpt id="p4">*</bpt>applicationQueue<ept id="p4">*</ept> is the name of the application-specific queue.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following are the maximum number of delivery attempts made for a message:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>((ReceiveRetryCount+1) * (MaxRetryCycles + 1)) on <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>(ReceiveRetryCount + 1) on <ph id="ph1">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>No retries are made for a message that is delivered successfully.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To keep track of the number of times a message read is attempted, <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph> maintains a durable message property that counts the number of aborts and a move count property that counts the number of times the message moves between the application queue and subqueues.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> channel uses these to compute the receive retry count and the retry cycles count.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>On <ph id="ph1">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>, the abort count is maintained in memory by the <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> channel and is reset if the application fails.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Also, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> channel can hold the abort counts for up to 256 messages in memory at any time.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If a 257th message is read, then the oldest message's abort count is reset.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The abort count and move count properties are available to the service operation through the operation context.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following code example shows how to access them.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>provides two standard queued bindings:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> binding suitable for performing queue-based communication with other <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoints.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A binding suitable for communicating with existing Message Queuing applications.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can alter properties in these bindings based on the requirements of your <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The entire poison message handling mechanism is local to the receiving application.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The process is invisible to the sending application unless the receiving application ultimately stops and sends a negative acknowledgment back to the sender.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In that case, the message is moved to the sender's dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Best Practice: Handling MsmqPoisonMessageException</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When the service determines that a message is poison, the queued transport throws a <ph id="ph1">&lt;xref:System.ServiceModel.MsmqPoisonMessageException&gt;</ph> that contains the <ph id="ph2">`LookupId`</ph> of the poison message.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A receiving application can implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> interface to handle any errors that the application requires.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Extending Control Over Error Handling and Reporting<ept id="p1">](../../../../docs/framework/wcf/samples/extending-control-over-error-handling-and-reporting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The application may require some kind of automated handling of poison messages that moves the poison messages to a poison message queue so that the service can access the rest of the messages in the queue.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The only scenario for using the error-handler mechanism to listen for poison-message exceptions is when the <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.MsmqBindingElementBase.ReceiveErrorHandling%2A&gt;</ph> setting is set to <ph id="ph2">&lt;xref:System.ServiceModel.ReceiveErrorHandling&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The poison-message sample for Message Queuing 3.0 demonstrates this behavior.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following outlines the steps to take to handle poison messages, including best practices:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Ensure your poison settings reflect the requirements of your application.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When working with the settings, ensure that you understand the differences between the capabilities of Message Queuing on <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>, <ph id="ph2">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph>, and <ph id="ph3">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If required, implement the <ph id="ph1">`IErrorHandler`</ph> to handle poison-message errors.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Because setting <ph id="ph1">`ReceiveErrorHandling`</ph> to <ph id="ph2">`Fault`</ph> requires a manual mechanism to move the poison message out of the queue or to correct an external dependent issue, the typical usage is to implement <ph id="ph3">`IErrorHandler`</ph> when <ph id="ph4">`ReceiveErrorHandling`</ph> is set to <ph id="ph5">`Fault`</ph>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`PoisonBehaviorAttribute`</ph> that the service behavior can use.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The behavior installs the <ph id="ph1">`IErrorHandler`</ph> on the dispatcher.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See the following code example.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Ensure that your service is annotated with the poison behavior attribute.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In addition, if the <ph id="ph1">`ReceiveErrorHandling`</ph> is set to <ph id="ph2">`Fault`</ph>, the <ph id="ph3">`ServiceHost`</ph> faults when encountering the poison message.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You can hook up to the faulted event and shut down the service, take corrective actions, and restart.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`LookupId`</ph> in the <ph id="ph2">&lt;xref:System.ServiceModel.MsmqPoisonMessageException&gt;</ph> propagated to the <ph id="ph3">`IErrorHandler`</ph> can be noted and when the service host faults, you could use the <ph id="ph4">`System.Messaging`</ph> API to receive the message from the queue using the <ph id="ph5">`LookupId`</ph> to remove the message from the queue and store the message in some external store or another queue.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can then restart <ph id="ph1">`ServiceHost`</ph> to resume normal processing.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Poison Message Handling in MSMQ 4.0<ept id="p1">](../../../../docs/framework/wcf/samples/poison-message-handling-in-msmq-4-0.md)</ept> demonstrates this behavior.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Transaction Time-Out and Poison Messages</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A class of errors can occur between the queued transport channel and the user code.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>These errors can be detected by layers in-between, such as the message security layer or the service dispatching logic.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, a missing X.509 certificate detected in the SOAP security layer and a missing action are cases where the message does get dispatched to the application.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When this happens, the service model drops the message.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Because the message is read in a transaction and an outcome for that transaction cannot be provided, the transaction eventually times out, aborts, and the message is put back into the queue.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In other words, for a certain class of errors, the transaction does not immediately abort but waits until the transaction times out. You can modify the transaction time-out for a service using <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To change the transaction time-out on a computer-wide basis, modify the machine.config file and set the appropriate transaction time-out. It is important to note that, depending on the time-out set in the transaction, the transaction eventually aborts and goes back to the queue and its abort count is incremented.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Eventually, the message becomes poison and the right disposition is made according to the user settings.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Sessions and Poison Messages</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A session undergoes the same retry and poison-message handling procedures as a single message.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The properties previously listed for poison messages apply to the entire session.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This means that the entire session is retried and goes to a final poison-message queue or the sender’s dead-letter queue if the message is rejected.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Batching and Poison Messages</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If a message becomes a poison message and is part of a batch, then the entire batch is rolled back and the channel returns to reading one message at a time.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> batching, see <bpt id="p1">[</bpt>Batching Messages in a Transaction<ept id="p1">](../../../../docs/framework/wcf/feature-details/batching-messages-in-a-transaction.md)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Poison-message Handling for Messages in a Poison Queue</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Poison-message handling does not end when a message is placed in the poison-message queue.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Messages in the poison-message queue must still be read and handled.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You can use a subset of the poison-message handling settings when reading messages from the final poison subqueue.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The applicable settings are <ph id="ph1">`ReceiveRetryCount`</ph> and <ph id="ph2">`ReceiveErrorHandling`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You can set <ph id="ph1">`ReceiveErrorHandling`</ph> to Drop, Reject, or Fault.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxRetryCycles`</ph> is ignored and an exception is thrown if <ph id="ph2">`ReceiveErrorHandling`</ph> is set to Move.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Windows Vista, Windows Server 2003, and Windows XP Differences</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>As noted earlier, not all poison-message handling settings apply to <ph id="ph1">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following key differences between Message Queuing on <ph id="ph1">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph>, <ph id="ph2">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>, and <ph id="ph3">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph> are relevant to poison-message handling:</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Message Queuing in <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph> supports subqueues, while <ph id="ph2">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> and <ph id="ph3">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph> do not support subqueues.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Subqueues are used in poison-message handling.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The retry queues and the poison queue are subqueues to the application queue that is created based on the poison-message handling settings.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MaxRetryCycles`</ph> dictates how many retry subqueues to create.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Therefore, when running on <ph id="ph1">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> or <ph id="ph2">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>, <ph id="ph3">`MaxRetryCycles`</ph> are ignored and <ph id="ph4">`ReceiveErrorHandling.Move`</ph> is not allowed.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Message Queuing in <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph> supports negative acknowledgment, while <ph id="ph2">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> and <ph id="ph3">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph> do not.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A negative acknowledgment from the receiving queue manager causes the sending queue manager to place the rejected message in the dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>As such, <ph id="ph1">`ReceiveErrorHandling.Reject`</ph> is not allowed with <ph id="ph2">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> and <ph id="ph3">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Message Queuing in <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph> supports a message property that keeps count of the number of times message delivery is attempted.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This abort count property is not available on <ph id="ph1">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> maintains the abort count in memory, so it is possible that this property may not contain an accurate value when the same message is read by more than one <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service in a farm.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Queues Overview<ept id="p1">](../../../../docs/framework/wcf/feature-details/queues-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Differences in Queuing Features in Windows Vista, Windows Server 2003, and Windows XP<ept id="p1">](../../../../docs/framework/wcf/feature-details/diff-in-queue-in-vista-server-2003-windows-xp.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](../../../../docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>