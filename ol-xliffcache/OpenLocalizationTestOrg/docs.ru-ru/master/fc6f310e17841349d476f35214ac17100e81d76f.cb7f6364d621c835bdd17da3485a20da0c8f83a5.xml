{"content":"---\ntitle: \"remove contextual keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"remove_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"remove event accessor [C#]\"\nms.assetid: c8223426-c17b-4fe2-8406-01564cf1dd2b\n---\n# remove (C# Reference)\n\nThe `remove` contextual keyword is used to define a custom event accessor that is invoked when client code unsubscribes from your [event](event.md). If you supply a custom `remove` accessor, you must also supply an [add](add.md) accessor.\n\n## Example\n\nThe following example shows an event with custom [add](add.md) and `remove` accessors. For the full example, see [How to:  Implement Interface Events](../../programming-guide/events/how-to-implement-interface-events.md).\n\n [!code-csharp[csrefKeywordsContextual#15](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsContextual/CS/csrefKeywordsContextual.cs#15)]\n\nYou do not typically need to provide your own custom event accessors. The accessors that are automatically generated by the compiler when you declare an event are sufficient for most scenarios.\n\n## See also\n\n- [Events](../../programming-guide/events/index.md)","nodes":[{"pos":[4,239],"embed":true,"restype":"x-metadata","content":"title: \"remove contextual keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"remove_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"remove event accessor [C#]\"\nms.assetid: c8223426-c17b-4fe2-8406-01564cf1dd2b","nodes":[{"content":"remove contextual keyword - C# Reference","nodes":[{"pos":[0,40],"content":"remove contextual keyword - C# Reference","nodes":[{"content":"remove contextual keyword - C# Reference","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[246,267],"content":"remove (C# Reference)","linkify":"remove (C# Reference)","nodes":[{"content":"remove (C# Reference)","pos":[0,21]}]},{"content":"The <ph id=\"ph1\">`remove`</ph> contextual keyword is used to define a custom event accessor that is invoked when client code unsubscribes from your <bpt id=\"p1\">[</bpt>event<ept id=\"p1\">](event.md)</ept>.","pos":[269,417],"source":"The `remove` contextual keyword is used to define a custom event accessor that is invoked when client code unsubscribes from your [event](event.md)."},{"content":"If you supply a custom <ph id=\"ph1\">`remove`</ph> accessor, you must also supply an <bpt id=\"p1\">[</bpt>add<ept id=\"p1\">](add.md)</ept> accessor.","pos":[418,507],"source":" If you supply a custom `remove` accessor, you must also supply an [add](add.md) accessor."},{"pos":[512,519],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows an event with custom <bpt id=\"p1\">[</bpt>add<ept id=\"p1\">](add.md)</ept> and <ph id=\"ph1\">`remove`</ph> accessors.","pos":[521,607],"source":"The following example shows an event with custom [add](add.md) and `remove` accessors."},{"content":"For the full example, see <bpt id=\"p1\">[</bpt>How to:  Implement Interface Events<ept id=\"p1\">](../../programming-guide/events/how-to-implement-interface-events.md)</ept>.","pos":[608,741],"source":" For the full example, see [How to:  Implement Interface Events](../../programming-guide/events/how-to-implement-interface-events.md)."},{"content":"You do not typically need to provide your own custom event accessors.","pos":[893,962]},{"content":"The accessors that are automatically generated by the compiler when you declare an event are sufficient for most scenarios.","pos":[963,1086]},{"pos":[1091,1099],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1103,1152],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../programming-guide/events/index.md)</ept>","source":"[Events](../../programming-guide/events/index.md)"}]}