<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-secure-a-service-with-windows-credentials.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70b8e2f28559d5fc54736db1319d2309aa5b86a7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\how-to-secure-a-service-with-windows-credentials.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55014376398b8e707551470ebee1896293119c0b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8f0099925e8fb80ede66f4a79057e19bcda7892</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Secure a Service with Windows Credentials</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Secure a Service with Windows Credentials</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic shows how to enable transport security on a Windows Communication Foundation (WCF) service that resides in a Windows domain and is called by clients in the same domain.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information about this scenario, see <bpt id="p1">[</bpt>Transport Security with Windows Authentication<ept id="p1">](../../../docs/framework/wcf/feature-details/transport-security-with-windows-authentication.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For a sample application, see the <bpt id="p1">[</bpt>WSHttpBinding<ept id="p1">](../../../docs/framework/wcf/samples/wshttpbinding.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic assumes you have an existing contract interface and implementation already defined, and adds on to that.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can also modify an existing service and client.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can secure a service with Windows credentials completely in code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Alternatively, you can omit some of the code by using a configuration file.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic shows both ways.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Be sure you only use one of the ways, not both.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The first three procedures show how to secure the service using code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The fourth and fifth procedure shows how to do it with a configuration file.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using Code</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The complete code for the service and the client is in the Example section at the end of this topic.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The first procedure walks through creating and configuring a <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph> class in code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The binding uses the HTTP transport.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The same binding is used on the client.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To create a WSHttpBinding that uses Windows credentials and message security</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This procedure's code is inserted at the beginning of the <ph id="ph1">`Run`</ph> method of the <ph id="ph2">`Test`</ph> class in the service code in the Example section.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create an instance of the <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpSecurity.Mode%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.WSHttpSecurity&gt;</ph> class to <ph id="ph3">&lt;xref:System.ServiceModel.SecurityMode.Message&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.MessageSecurityOverHttp&gt;</ph> class to <ph id="ph3">&lt;xref:System.ServiceModel.MessageCredentialType.Windows&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The code for this procedure is as follows:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Using the Binding in a Service</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is the second procedure, which shows how to use the binding in a self-hosted service.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information about hosting services see <bpt id="p1">[</bpt>Hosting Services<ept id="p1">](../../../docs/framework/wcf/hosting-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To use a binding in a service</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Insert this procedure's code after the code from the preceding procedure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">&lt;xref:System.Type&gt;</ph> variable named <ph id="ph2">`contractType`</ph> and assign it the type of the interface (<ph id="ph3">`ICalculator`</ph>).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When using Visual Basic, use the <ph id="ph1">`GetType`</ph> operator; when using C#, use the <ph id="ph2">`typeof`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create a second <ph id="ph1">&lt;xref:System.Type&gt;</ph> variable named <ph id="ph2">`serviceType`</ph> and assign it the type of the implemented contract (<ph id="ph3">`Calculator`</ph>).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Create an instance of the <ph id="ph1">&lt;xref:System.Uri&gt;</ph> class named <ph id="ph2">`baseAddress`</ph> with the base address of the service.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The base address must have a scheme that matches the transport.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this case, the transport scheme is HTTP, and the address includes the special Uniform Resource Identifier (URI) "localhost" and a port number (8036) as well as a base endpoint address ("serviceModelSamples/): <ph id="ph1">`http://localhost:8036/serviceModelSamples/`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Create an instance of the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class with the <ph id="ph2">`serviceType`</ph> and <ph id="ph3">`baseAddress`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Add an endpoint to the service using the <ph id="ph1">`contractType`</ph>, binding, and an endpoint name (secureCalculator).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A client must concatenate the base address and the endpoint name when initiating a call to the service.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CommunicationObject.Open%2A&gt;</ph> method to start the service.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The code for this procedure is shown here:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Using the Binding in a Client</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This procedure shows how to generate a proxy that communicates with the service.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The proxy is generated with the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> which uses the service metadata to create the proxy.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This procedure also creates an instance of the <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph> class to communicate with the service, and then calls the service.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This example uses only code to create the client.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>As an alternative, you can use a configuration file, which is shown in the section following this procedure.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To use a binding in a client with code</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use the SvcUtil.exe tool to generate the proxy code from the service's metadata.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create a Client<ept id="p1">](../../../docs/framework/wcf/how-to-create-a-wcf-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The generated proxy code inherits from the <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> class, which ensures that every client has the necessary constructors, methods, and properties to communicate with a WCF service.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In this example, the generated code includes the <ph id="ph1">`CalculatorClient`</ph> class, which implements the <ph id="ph2">`ICalculator`</ph> interface, enabling compatibility with the service code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This procedure's code is inserted at the beginning of the <ph id="ph1">`Main`</ph> method of the client program.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Create an instance of the <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph> class and set its security mode to <ph id="ph2">`Message`</ph> and its client credential type to <ph id="ph3">`Windows`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The example names the variable <ph id="ph1">`clientBinding`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Create an instance of the <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> class named <ph id="ph2">`serviceAddress`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Initialize the instance with the base address concatenated with the endpoint name.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Create an instance of the generated client class with the <ph id="ph1">`serviceAddress`</ph> and the <ph id="ph2">`clientBinding`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601.Open%2A&gt;</ph> method, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Call the service and display the results.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Using the Configuration File</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Instead of creating the binding with procedural code, you can use the following code shown for the bindings section of the configuration file.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you do not already have a service defined, see <bpt id="p1">[</bpt>Designing and Implementing Services<ept id="p1">](../../../docs/framework/wcf/designing-and-implementing-services.md)</ept>, and <bpt id="p2">[</bpt>Configuring Services<ept id="p2">](../../../docs/framework/wcf/configuring-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This configuration code is used in both the service and client configuration files.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To enable transfer security on a service in a Windows domain using configuration</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>wsHttpBinding&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/wcf/wshttpbinding.md)</ept> element to the <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>bindings&gt;<ept id="p2">](../../../docs/framework/configure-apps/file-schema/wcf/bindings.md)</ept> element section of the configuration file.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Add a &lt;<ph id="ph1">`binding`</ph>&gt; element to the &lt;<ph id="ph2">`WSHttpBinding`</ph>&gt; element and set the <ph id="ph3">`configurationName`</ph> attribute to a value appropriate to your application.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Add a &lt;<ph id="ph1">`security`</ph>&gt; element and set the <ph id="ph2">`mode`</ph> attribute to Message.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Add a &lt;<ph id="ph1">`message`</ph>&gt; element and set the <ph id="ph2">`clientCredentialType`</ph> attribute to Windows.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In the service's configuration file, replace the <ph id="ph1">`&lt;bindings&gt;`</ph> section with the following code.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you do not already have a service configuration file, see <bpt id="p1">[</bpt>Using Bindings to Configure Services and Clients<ept id="p1">](../../../docs/framework/wcf/using-bindings-to-configure-services-and-clients.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Using the Binding in a Client</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This procedure shows how to generate two files: a proxy that communicates with the service and a configuration file.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It also describes changes to the client program, which is the third file used on the client.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To use a binding in a client with configuration</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Use the SvcUtil.exe tool to generate the proxy code and configuration file from the service's metadata.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create a Client<ept id="p1">](../../../docs/framework/wcf/how-to-create-a-wcf-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Replace the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>bindings&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/wcf/bindings.md)</ept> section of the generated configuration file with the configuration code from the preceding section.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Procedural code is inserted at the beginning of the <ph id="ph1">`Main`</ph> method of the client program.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Create an instance of the generated client class passing the name of the binding in the configuration file as an input parameter.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601.Open%2A&gt;</ph> method, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Call the service and display the results.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Client<ept id="p1">](../../../docs/framework/wcf/how-to-create-a-wcf-client.md)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Securing Services<ept id="p1">](../../../docs/framework/wcf/securing-services.md)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Overview<ept id="p1">](../../../docs/framework/wcf/feature-details/security-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>