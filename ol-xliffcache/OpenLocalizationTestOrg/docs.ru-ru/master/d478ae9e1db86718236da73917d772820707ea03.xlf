<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="backreference-constructs-in-regular-expressions.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d478ae9e1db86718236da73917d772820707ea03</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\backreference-constructs-in-regular-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67b6d067bc27205f90e9f934837924dae74a90bc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c10a25ab099def592579fd99c8b4ee5a268969c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Backreference Constructs in .NET Regular Expressions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to identify repeated text elements by using backreference constructs in a regular expression.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Backreference Constructs in Regular Expressions</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Backreferences provide a convenient way to identify a repeated character or substring within a string.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, if the input string contains multiple occurrences of an arbitrary substring, you can match the first occurrence with a capturing group, and then use a backreference to match subsequent occurrences of the substring.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A separate syntax is used to refer to named and numbered capturing groups in replacement strings.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substitutions<ept id="p1">](substitutions-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>.NET defines separate language elements to refer to numbered and named capturing groups.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about capturing groups, see <bpt id="p1">[</bpt>Grouping Constructs<ept id="p1">](../../../docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Numbered Backreferences</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A numbered backreference uses the following syntax:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\`</ph> <bpt id="p1">*</bpt>number<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>number<ept id="p1">*</ept> is the ordinal position of the capturing group in the regular expression.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\4`</ph> matches the contents of the fourth capturing group.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>number<ept id="p1">*</ept> is not defined in the regular expression pattern, a parsing error occurs, and the regular expression engine throws an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, the regular expression <ph id="ph1">`\b(\w+)\s\1`</ph> is valid, because <ph id="ph2">`(\w+)`</ph> is the first and only capturing group in the expression.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>On the other hand, <ph id="ph1">`\b(\w+)\s\2`</ph> is invalid and throws an argument exception, because there is no capturing group numbered <ph id="ph2">`\2`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In addition, if <bpt id="p1">*</bpt>number<ept id="p1">*</ept> identifies a capturing group in a particular ordinal position, but that capturing group has been assigned a numeric name different than its ordinal position, the regular expression parser also throws an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note the ambiguity between octal escape codes (such as <ph id="ph1">`\16`</ph>) and <ph id="ph2">`\`</ph><bpt id="p1">*</bpt>number<ept id="p1">*</ept> backreferences that use the same notation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This ambiguity is resolved as follows:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The expressions <ph id="ph1">`\1`</ph> through <ph id="ph2">`\9`</ph> are always interpreted as backreferences, and not as octal codes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the first digit of a multidigit expression is 8 or 9 (such as <ph id="ph1">`\80`</ph> or <ph id="ph2">`\91`</ph>), the expression as interpreted as a literal.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Expressions from <ph id="ph1">`\10`</ph> and greater are considered backreferences if there is a backreference corresponding to that number; otherwise, they are interpreted as octal codes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If a regular expression contains a backreference to an undefined group number, a parsing error occurs, and the regular expression engine throws an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the ambiguity is a problem, you can use the <ph id="ph1">`\k&lt;`</ph><bpt id="p1">*</bpt>name<ept id="p1">*</ept><ph id="ph2">`&gt;`</ph> notation, which is unambiguous and cannot be confused with octal character codes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Similarly, hexadecimal codes such as <ph id="ph1">`\xdd`</ph> are unambiguous and cannot be confused with backreferences.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example finds doubled word characters in a string.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It defines a regular expression, <ph id="ph1">`(\w)\1`</ph>, which consists of the following elements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Match a word character and assign it to the first capturing group.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Match the next character that is the same as the value of the first capturing group.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Named Backreferences</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A named backreference is defined by using the following syntax:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\k&lt;`</ph> <bpt id="p1">*</bpt>name<ept id="p1">*</ept> <ph id="ph2">`&gt;`</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>or:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\k'`</ph> <bpt id="p1">*</bpt>name<ept id="p1">*</ept> <ph id="ph2">`'`</ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is the name of a capturing group defined in the regular expression pattern.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is not defined in the regular expression pattern, a parsing error occurs, and the regular expression engine throws an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example finds doubled word characters in a string.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It defines a regular expression, <ph id="ph1">`(?&lt;char&gt;\w)\k&lt;char&gt;`</ph>, which consists of the following elements.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Match a word character and assign it to a capturing group named <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Match the next character that is the same as the value of the <ph id="ph1">`char`</ph> capturing group.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Named numeric backreferences</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In a named backreference with <ph id="ph1">`\k`</ph>, <bpt id="p1">*</bpt>name<ept id="p1">*</ept> can also be the string representation of a number.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, the following example uses the regular expression <ph id="ph1">`(?&lt;2&gt;\w)\k&lt;2&gt;`</ph> to find doubled word characters in a string.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this case, the example defines a capturing group that is explicitly named "2", and the backreference is correspondingly named "2".</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is the string representation of a number, and no capturing group has that name, <ph id="ph1">`\k&lt;`</ph><bpt id="p2">*</bpt>name<ept id="p2">*</ept><ph id="ph2">`&gt;`</ph> is the same as the backreference <ph id="ph3">`\`</ph><bpt id="p3">*</bpt>number<ept id="p3">*</ept>, where <bpt id="p4">*</bpt>number<ept id="p4">*</ept> is the ordinal position of the capture.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the following example, there is a single capturing group named <ph id="ph1">`char`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The backreference construct refers to it as <ph id="ph1">`\k&lt;1&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As the output from the example shows, the call to the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%2A?displayProperty=nameWithType&gt;</ph> succeeds because <ph id="ph2">`char`</ph> is the first capturing group.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, if <bpt id="p1">*</bpt>name<ept id="p1">*</ept> is the string representation of a number and the capturing group in that position has been explicitly assigned a numeric name, the regular expression parser cannot identify the capturing group by its ordinal position.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Instead, it throws an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.The only capturing group in the following example is named "2".</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`\k`</ph> construct is used to define a backreference named "1", the regular expression parser is unable to identify the first capturing group and throws an exception.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>What Backreferences Match</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A backreference refers to the most recent definition of a group (the definition most immediately to the left, when matching left to right).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When a group makes multiple captures, a backreference refers to the most recent capture.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example includes a regular expression pattern, <ph id="ph1">`(?&lt;1&gt;a)(?&lt;1&gt;\1b)*`</ph>, which redefines the \1 named group.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following table describes each pattern in the regular expression.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Match the character "a" and assign the result to the capturing group named <ph id="ph1">`1`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Match zero or more occurrences of the group named <ph id="ph1">`1`</ph> along with a "b", and assign the result to the capturing group named <ph id="ph2">`1`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In comparing the regular expression with the input string ("aababb"), the regular expression engine performs the following operations:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It starts at the beginning of the string, and successfully matches "a" with the expression <ph id="ph1">`(?&lt;1&gt;a)`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`1`</ph> group is now "a".</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>It advances to the second character, and successfully matches the string "ab" with the expression <ph id="ph1">`\1b`</ph>, or "ab".</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It then assigns the result, "ab" to <ph id="ph1">`\1`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It advances to the fourth character.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The expression <ph id="ph1">`(?&lt;1&gt;\1b)*`</ph> is to be matched zero or more times, so it successfully matches the string "abb" with the expression <ph id="ph2">`\1b`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It assigns the result, "abb", back to <ph id="ph1">`\1`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`*`</ph> is a looping quantifier -- it is evaluated repeatedly until the regular expression engine cannot match the pattern it defines.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Looping quantifiers do not clear group definitions.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If a group has not captured any substrings, a backreference to that group is undefined and never matches.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is illustrated by the regular expression pattern <ph id="ph1">`\b(\p{Lu}{2})(\d{2})?(\p{Lu}{2})\b`</ph>, which is defined as follows:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Begin the match on a word boundary.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Match two uppercase letters.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Match zero or one occurrence of two decimal digits.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Match two uppercase letters.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This is the third capturing group.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>End the match on a word boundary.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>An input string can match this regular expression even if the two decimal digits that are defined by the second capturing group are not present.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following example shows that even though the match is successful, an empty capturing group is found between two successful capturing groups.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>