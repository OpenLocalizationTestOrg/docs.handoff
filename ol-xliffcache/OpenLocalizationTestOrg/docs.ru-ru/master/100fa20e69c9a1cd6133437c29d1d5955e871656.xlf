<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">100fa20e69c9a1cd6133437c29d1d5955e871656</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\unsafe-code-pointers\pointer-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70d4f6eefb6996d64f8331e31c549fab26441e49</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6803775f4551c75683ffae5f230b7b919c470e77</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Pointer types (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Pointer types (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In an unsafe context, a type may be a pointer type, a value type, or a reference type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A pointer type declaration takes one of the following forms:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Any of the following types may be a pointer type:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>sbyte<ept id="p1">](../../../csharp/language-reference/keywords/sbyte.md)</ept>, <bpt id="p2">[</bpt>byte<ept id="p2">](../../../csharp/language-reference/keywords/byte.md)</ept>, <bpt id="p3">[</bpt>short<ept id="p3">](../../../csharp/language-reference/keywords/short.md)</ept>, <bpt id="p4">[</bpt>ushort<ept id="p4">](../../../csharp/language-reference/keywords/ushort.md)</ept>, <bpt id="p5">[</bpt>int<ept id="p5">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id="p6">[</bpt>uint<ept id="p6">](../../../csharp/language-reference/keywords/uint.md)</ept>, <bpt id="p7">[</bpt>long<ept id="p7">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id="p8">[</bpt>ulong<ept id="p8">](../../../csharp/language-reference/keywords/ulong.md)</ept>, <bpt id="p9">[</bpt>char<ept id="p9">](../../../csharp/language-reference/keywords/char.md)</ept>, <bpt id="p10">[</bpt>float<ept id="p10">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id="p11">[</bpt>double<ept id="p11">](../../../csharp/language-reference/keywords/double.md)</ept>, <bpt id="p12">[</bpt>decimal<ept id="p12">](../../../csharp/language-reference/keywords/decimal.md)</ept>, or <bpt id="p13">[</bpt>bool<ept id="p13">](../../../csharp/language-reference/keywords/bool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Any <bpt id="p1">[</bpt>enum<ept id="p1">](../../../csharp/language-reference/keywords/enum.md)</ept> type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Any pointer type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any user-defined struct type that contains fields of unmanaged types only.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Pointer types do not inherit from <bpt id="p1">[</bpt>object<ept id="p1">](../../../csharp/language-reference/keywords/object.md)</ept> and no conversions exist between pointer types and <ph id="ph1">`object`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Also, boxing and unboxing do not support pointers.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, you can convert between different pointer types and between pointer types and integral types.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you declare multiple pointers in the same declaration, the asterisk (*) is written together with the underlying type only; it is not used as a prefix to each pointer name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A pointer cannot point to a reference or to a <bpt id="p1">[</bpt>struct<ept id="p1">](../../../csharp/language-reference/keywords/struct.md)</ept> that contains references, because an object reference can be garbage collected even if a pointer is pointing to it.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The garbage collector does not keep track of whether an object is being pointed to by any pointer types.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The value of the pointer variable of type <ph id="ph1">`myType*`</ph> is the address of a variable of type <ph id="ph2">`myType`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following are examples of pointer type declarations:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`p`</ph> is a pointer to an integer.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`p`</ph> is a pointer to a pointer to an integer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`p`</ph> is a single-dimensional array of pointers to integers.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`p`</ph> is a pointer to a char.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`p`</ph> is a pointer to an unknown type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The pointer indirection operator * can be used to access the contents at the location pointed to by the pointer variable.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, consider the following declaration:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The expression <ph id="ph1">`*myVariable`</ph> denotes the <ph id="ph2">`int`</ph> variable found at the address contained in <ph id="ph3">`myVariable`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There are several examples of pointers in the topics <bpt id="p1">[</bpt>fixed Statement<ept id="p1">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept> and <bpt id="p2">[</bpt>Pointer Conversions<ept id="p2">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-conversions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows the need for the <ph id="ph1">`unsafe`</ph> keyword and the <ph id="ph2">`fixed`</ph> statement, and how to increment an interior pointer.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can paste this code into the Main function of a console application to run it.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>(Remember to enable unsafe code in the <bpt id="p1">**</bpt>Project Designer<ept id="p1">**</ept>; choose <bpt id="p2">**</bpt>Project<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept> on the menu bar, and then select <bpt id="p4">**</bpt>Allow unsafe code<ept id="p4">**</ept> in the <bpt id="p5">**</bpt>Build<ept id="p5">**</ept> tab.)</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You cannot apply the indirection operator to a pointer of type <ph id="ph1">`void*`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, you can use a cast to convert a void pointer to any other pointer type, and vice versa.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A pointer can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Applying the indirection operator to a null pointer causes an implementation-defined behavior.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Be aware that passing pointers between methods can cause undefined behavior.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Examples are returning a pointer to a local variable through an Out or Ref parameter or as the function result.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the pointer was set in a fixed block, the variable to which it points may no longer be fixed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following table lists the operators and statements that can operate on pointers in an unsafe context:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Operator/Statement</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Performs pointer indirection.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Accesses a member of a struct through a pointer.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>[]</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Indexes a pointer.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Obtains the address of a variable.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>++ and --</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Increments and decrements pointers.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>+ and -</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Performs pointer arithmetic.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>==, !=, <ph id="ph1">\&lt;</ph>, &gt;, <ph id="ph2">\&lt;</ph>=, and &gt;=</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Compares pointers.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Allocates memory on the stack.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`fixed`</ph> statement</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Temporarily fixes a variable so that its address may be found.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Unsafe Code and Pointers<ept id="p1">](../../../csharp/programming-guide/unsafe-code-pointers/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Pointer Conversions<ept id="p1">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-conversions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Pointer Expressions<ept id="p1">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Types<ept id="p1">](../../../csharp/language-reference/keywords/types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>unsafe<ept id="p1">](../../../csharp/language-reference/keywords/unsafe.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>fixed Statement<ept id="p1">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>stackalloc<ept id="p1">](../../../csharp/language-reference/keywords/stackalloc.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Boxing and Unboxing<ept id="p1">](../../../csharp/programming-guide/types/boxing-and-unboxing.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>