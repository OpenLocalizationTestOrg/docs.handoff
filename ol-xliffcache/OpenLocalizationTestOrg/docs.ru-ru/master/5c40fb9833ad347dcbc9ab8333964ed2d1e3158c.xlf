<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-convert-numeric-user-input-in-web-controls-to-numbers.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c40fb9833ad347dcbc9ab8333964ed2d1e3158c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\how-to-convert-numeric-user-input-in-web-controls-to-numbers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f3b888d9fddc3c833d073a715c451448ac3f5ba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eda589237a909d1d04e70d8db0637d6a0cf3fd85</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Convert Numeric User Input in Web Controls to Numbers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Convert Numeric User Input in Web Controls to Numbers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Because a Web page can be displayed anywhere in the world, users can input numeric data into a <ph id="ph1">&lt;xref:System.Web.UI.WebControls.TextBox&gt;</ph> control in an almost unlimited number of formats.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, it is very important to determine the locale and culture of the Web page's user.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you parse user input, you can then apply the formatting conventions defined by the user's locale and culture.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To convert numeric input from a Web TextBox control to a number</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Determine whether the string array returned by the <ph id="ph1">&lt;xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=fullName&gt;</ph> property is populated.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If it is not, continue to step 6.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the string array returned by the <ph id="ph1">&lt;xref:System.Web.HttpRequest.UserLanguages%2A&gt;</ph> property is populated, retrieve its first element.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first element indicates the user's default or preferred language and region.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Instantiate a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the user's preferred culture by calling the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=fullName&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Call either the <ph id="ph1">`TryParse`</ph> or the <ph id="ph2">`Parse`</ph> method of the numeric type that you want to convert the user's input to.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use an overload of the <ph id="ph1">`TryParse`</ph> or the <ph id="ph2">`Parse`</ph> method with a <ph id="ph3">`provider`</ph> parameter, and pass it either of the following:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object created in step 3.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that is returned by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.NumberFormat%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object created in step 3.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the conversion fails, repeat steps 2 through 4 for each remaining element in the string array returned by the <ph id="ph1">&lt;xref:System.Web.HttpRequest.UserLanguages%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the conversion still fails or if the string array returned by the <ph id="ph1">&lt;xref:System.Web.HttpRequest.UserLanguages%2A&gt;</ph> property is empty, parse the string by using the invariant culture, which is returned by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example is the complete code-behind page for a Web form that asks the user to enter a numeric value in a <ph id="ph1">&lt;xref:System.Web.UI.WebControls.TextBox&gt;</ph> control and converts it to a number.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>That number is then doubled and displayed by using the same formatting rules as the original input.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.HowTo.ParseNumericInput#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.ParseNumericInput/cs/NumericUserInput1.aspx.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>Formatting.HowTo.ParseNumericInput#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.ParseNumericInput/vb/NumericUserInput1.aspx.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=fullName&gt;</ph> property is populated from the culture names that are contained in <ph id="ph2">`Accept-Language`</ph> headers included in an HTTP request.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, not all browsers include <ph id="ph1">`Accept-Language`</ph> headers in their requests, and users can also suppress the headers completely.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This makes it important to have a fallback culture when parsing user input.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Typically, the fallback culture is the invariant culture returned by <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Users can also provide Internet Explorer with culture names that they input in a text box, which creates the possibility that the culture names may not be valid.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This makes it important to use exception handling when instantiating a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When retrieved from an HTTP request submitted by Internet Explorer, the <ph id="ph1">&lt;xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=fullName&gt;</ph> array is populated in order of user preference.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The first element in the array contains the name of the user's primary culture/region.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the array contains any additional items, Internet Explorer arbitrarily assigns them a quality specifier, which is delimited from the culture name by a semicolon.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, an entry for the fr-FR culture might take the form <ph id="ph1">`fr-FR;q=0.7`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.%23ctor%2A&gt;</ph> constructor with its <ph id="ph2">`useUserOverride`</ph> parameter set to <ph id="ph3">`false`</ph> to create a new <ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This ensures that, if the culture name is the default culture name on the server, the new <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object created by the class constructor contains a culture's default settings and does not reflect any settings overridden by using the server's <bpt id="p1">**</bpt>Regional and Language Options<ept id="p1">**</ept> application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The values from any overridden settings on the server are unlikely to exist on the user's system or to be reflected in the user's input.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Your code can call either the <ph id="ph1">`Parse`</ph> or the <ph id="ph2">`TryParse`</ph> method of the numeric type that the user's input will be converted to.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Repeated calls to a parse method may be required for a single parsing operation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As a result, the <ph id="ph1">`TryParse`</ph> method is better, because it returns <ph id="ph2">`false`</ph> if a parse operation fails.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In contrast, handling the repeated exceptions that may be thrown by the <ph id="ph1">`Parse`</ph> method can be a very expensive proposition in a Web application.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To compile the code, copy it into an <ph id="ph1">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph> code-behind page so that it replaces all the existing code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph> Web page should contain the following controls:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Label&gt;</ph> control, which is not referenced in code.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Set its <ph id="ph1">&lt;xref:System.Web.UI.WebControls.TextBox.Text%2A&gt;</ph> property to "Enter a Number:".</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.WebControls.TextBox&gt;</ph> control named <ph id="ph2">`NumericString`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control named <ph id="ph2">`OKButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Set its <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Text%2A&gt;</ph> property to "OK".</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Change the name of the class from <ph id="ph1">`NumericUserInput`</ph> to the name of the class that is defined by the <ph id="ph2">`Inherits`</ph> attribute of the <ph id="ph3">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph> page's <ph id="ph4">`Page`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Change the name of the <ph id="ph1">`NumericInput`</ph> object reference to the name defined by the <ph id="ph2">`id`</ph> attribute of the <ph id="ph3">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph> page's <ph id="ph4">`form`</ph> tag.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>.NET Framework Security</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To prevent a user from injecting script into the HTML stream, user input should never be directly echoed back in the server response.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Instead, it should be encoded by using the <ph id="ph1">&lt;xref:System.Web.HttpServerUtility.HtmlEncode%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performing Formatting Operations<ept id="p1">](../../../docs/standard/base-types/performing-formatting-operations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing Numeric Strings<ept id="p1">](../../../docs/standard/base-types/parsing-numeric.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>