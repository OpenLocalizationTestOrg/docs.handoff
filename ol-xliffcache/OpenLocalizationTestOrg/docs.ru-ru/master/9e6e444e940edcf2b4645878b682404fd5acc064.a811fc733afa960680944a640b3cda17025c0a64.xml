{"content":"---\ntitle: \"Windows Workflow Overview | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: fc44adbe-1412-49ae-81af-0298be44aae6\ncaps.latest.revision: 17\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Windows Workflow Overview\nA workflow is a set of elemental units called *activities* that are stored as a model that describes a real-world process. Workflows provide a way of describing the order of execution and dependent relationships between pieces of short- or long-running work. This work passes through the model from start to finish, and activities might be executed by people or by system functions.  \n  \n## Workflow Run-time Engine  \n Every running workflow instance is created and maintained by an in-process run-time engine that the host process interacts with through one of the following:  \n  \n-   A <xref:System.Activities.WorkflowInvoker>, which invokes the workflow like a method.  \n  \n-   A <xref:System.Activities.WorkflowApplication> for explicit control over the execution of a single workflow instance.  \n  \n-   A <xref:System.ServiceModel.WorkflowServiceHost> for message-based interactions in multi-instance scenarios.  \n  \n Each of these classes wraps the core activity runtime represented as a <xref:System.Activities.ActivityInstance> responsible for activity execution. There can be several <xref:System.Activities.ActivityInstance> objects within an application domain running concurrently.  \n  \n Each of the preceding three host interaction objects is created from a tree of activities referred to as a workflow program. Using these types or a custom host that wraps <xref:System.Activities.ActivityInstance>, workflows can be executed inside any Windows process including console applications, forms-based applications, Windows Services, [!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)] Web sites, and [!INCLUDE[indigo1](../../../includes/indigo1-md.md)]services.  \n  \n ![Workflow components in the host process](../../../docs/framework/windows-workflow-foundation/media/44c79d1d-178b-4487-87ed-3e33015a3842.gif \"44c79d1d-178b-4487-87ed-3e33015a3842\")  \nWorkflow components in the host process  \n  \n## Interaction between Workflow Components  \n The following diagram demonstrates how workflow components interact with one another.  \n  \n ![Workflow interaction](../../../docs/framework/windows-workflow-foundation/media/workflowinteraction.gif \"WorkflowInteraction\")  \n  \n In the preceding diagram, the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method of the <xref:System.Activities.WorkflowInvoker> class is used to invoke several workflow instances. <xref:System.Activities.WorkflowInvoker> is used for lightweight workflows that do not need management from the host; workflows that need management from the host (such as <xref:System.Activities.Bookmark> resumption) must be executed using <xref:System.Activities.WorkflowApplication.Run%2A> instead. It isnâ€™t required to wait for one workflow instance to complete before invoking another; the runtime engine supports running multiple workflow instances simultaneously.  The workflows invoked are as follows:  \n  \n-   A <xref:System.Activities.Statements.Sequence> activity that contains a <xref:System.Activities.Statements.WriteLine> child activity. A <xref:System.Activities.Variable> of the parent activity is bound to an <xref:System.Activities.InArgument> of the child activity. [!INCLUDE[crabout](../../../includes/crabout-md.md)]on variables, arguments, and binding, see [Variables and Arguments](../../../docs/framework/windows-workflow-foundation/variables-and-arguments.md).  \n  \n-   A custom activity called `ReadLine`. An <xref:System.Activities.OutArgument> of the `ReadLine` activity is returned to the calling <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.  \n  \n-   A custom activity that derives from the <xref:System.Activities.CodeActivity> abstract class. The <xref:System.Activities.CodeActivity> can access run-time features (such as tracking and properties) using the <xref:System.Activities.CodeActivityContext> that is available as a parameter of the <xref:System.Activities.CodeActivity.Execute%2A> method. [!INCLUDE[crabout](../../../includes/crabout-md.md)] these run-time features, see [Workflow Tracking and Tracing](../../../docs/framework/windows-workflow-foundation/workflow-tracking-and-tracing.md) and [Workflow Execution Properties](../../../docs/framework/windows-workflow-foundation/workflow-execution-properties.md).  \n  \n## See Also  \n [BizTalk Server 2006 or WF? Choosing the Right Workflow Tool for Your Project](http://go.microsoft.com/fwlink/?LinkId=154901)","nodes":[{"pos":[12,54],"content":"Windows Workflow Overview | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Windows Workflow Overview | Microsoft Docs","pos":[0,42]}]},{"pos":[320,345],"content":"Windows Workflow Overview","linkify":"Windows Workflow Overview","nodes":[{"content":"Windows Workflow Overview","pos":[0,25]}]},{"content":"A workflow is a set of elemental units called <bpt id=\"p1\">*</bpt>activities<ept id=\"p1\">*</ept> that are stored as a model that describes a real-world process.","pos":[346,468],"source":"A workflow is a set of elemental units called *activities* that are stored as a model that describes a real-world process."},{"content":"Workflows provide a way of describing the order of execution and dependent relationships between pieces of short- or long-running work.","pos":[469,604]},{"content":"This work passes through the model from start to finish, and activities might be executed by people or by system functions.","pos":[605,728]},{"pos":[737,761],"content":"Workflow Run-time Engine","linkify":"Workflow Run-time Engine","nodes":[{"content":"Workflow Run-time Engine","pos":[0,24]}]},{"content":"Every running workflow instance is created and maintained by an in-process run-time engine that the host process interacts with through one of the following:","pos":[765,922]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>, which invokes the workflow like a method.","pos":[932,1017],"source":"A <xref:System.Activities.WorkflowInvoker>, which invokes the workflow like a method."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> for explicit control over the execution of a single workflow instance.","pos":[1027,1144],"source":"A <xref:System.Activities.WorkflowApplication> for explicit control over the execution of a single workflow instance."},{"content":"A <ph id=\"ph1\">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> for message-based interactions in multi-instance scenarios.","pos":[1154,1262],"source":"A <xref:System.ServiceModel.WorkflowServiceHost> for message-based interactions in multi-instance scenarios."},{"content":"Each of these classes wraps the core activity runtime represented as a <ph id=\"ph1\">&lt;xref:System.Activities.ActivityInstance&gt;</ph> responsible for activity execution.","pos":[1269,1417],"source":"Each of these classes wraps the core activity runtime represented as a <xref:System.Activities.ActivityInstance> responsible for activity execution."},{"content":"There can be several <ph id=\"ph1\">&lt;xref:System.Activities.ActivityInstance&gt;</ph> objects within an application domain running concurrently.","pos":[1418,1539],"source":" There can be several <xref:System.Activities.ActivityInstance> objects within an application domain running concurrently."},{"content":"Each of the preceding three host interaction objects is created from a tree of activities referred to as a workflow program.","pos":[1546,1670]},{"content":"Using these types or a custom host that wraps <ph id=\"ph1\">&lt;xref:System.Activities.ActivityInstance&gt;</ph>, workflows can be executed inside any Windows process including console applications, forms-based applications, Windows Services, <ph id=\"ph2\">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph> Web sites, and <ph id=\"ph3\">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph>services.","pos":[1671,2020],"source":" Using these types or a custom host that wraps <xref:System.Activities.ActivityInstance>, workflows can be executed inside any Windows process including console applications, forms-based applications, Windows Services, [!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)] Web sites, and [!INCLUDE[indigo1](../../../includes/indigo1-md.md)]services."},{"content":"<bpt id=\"p1\">![</bpt>Workflow components in the host process<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/media/44c79d1d-178b-4487-87ed-3e33015a3842.gif \"44c79d1d-178b-4487-87ed-3e33015a3842\")</ept>","pos":[2027,2208],"source":"![Workflow components in the host process](../../../docs/framework/windows-workflow-foundation/media/44c79d1d-178b-4487-87ed-3e33015a3842.gif \"44c79d1d-178b-4487-87ed-3e33015a3842\")"},{"content":"Workflow components in the host process","pos":[2211,2250]},{"pos":[2259,2298],"content":"Interaction between Workflow Components","linkify":"Interaction between Workflow Components","nodes":[{"content":"Interaction between Workflow Components","pos":[0,39]}]},{"content":"The following diagram demonstrates how workflow components interact with one another.","pos":[2302,2387]},{"pos":[2394,2522],"content":"<bpt id=\"p1\">![</bpt>Workflow interaction<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../docs/framework/windows-workflow-foundation/media/workflowinteraction.gif \"</bpt>WorkflowInteraction<ept id=\"p2\">\")</ept>","source":"![Workflow interaction](../../../docs/framework/windows-workflow-foundation/media/workflowinteraction.gif \"WorkflowInteraction\")"},{"content":"In the preceding diagram, the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> class is used to invoke several workflow instances.","pos":[2529,2716],"source":"In the preceding diagram, the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method of the <xref:System.Activities.WorkflowInvoker> class is used to invoke several workflow instances."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> is used for lightweight workflows that do not need management from the host; workflows that need management from the host (such as <ph id=\"ph2\">&lt;xref:System.Activities.Bookmark&gt;</ph> resumption) must be executed using <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph> instead.","pos":[2717,3018],"source":"<xref:System.Activities.WorkflowInvoker> is used for lightweight workflows that do not need management from the host; workflows that need management from the host (such as <xref:System.Activities.Bookmark> resumption) must be executed using <xref:System.Activities.WorkflowApplication.Run%2A> instead."},{"content":"It isnâ€™t required to wait for one workflow instance to complete before invoking another; the runtime engine supports running multiple workflow instances simultaneously.","pos":[3019,3187]},{"content":"The workflows invoked are as follows:","pos":[3189,3226]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity that contains a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> child activity.","pos":[3236,3369],"source":"A <xref:System.Activities.Statements.Sequence> activity that contains a <xref:System.Activities.Statements.WriteLine> child activity."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Activities.Variable&gt;</ph> of the parent activity is bound to an <ph id=\"ph2\">&lt;xref:System.Activities.InArgument&gt;</ph> of the child activity.","pos":[3370,3502],"source":" A <xref:System.Activities.Variable> of the parent activity is bound to an <xref:System.Activities.InArgument> of the child activity."},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph>on variables, arguments, and binding, see <bpt id=\"p1\">[</bpt>Variables and Arguments<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/variables-and-arguments.md)</ept>.","pos":[3503,3703],"source":"[!INCLUDE[crabout](../../../includes/crabout-md.md)]on variables, arguments, and binding, see [Variables and Arguments](../../../docs/framework/windows-workflow-foundation/variables-and-arguments.md)."},{"content":"A custom activity called <ph id=\"ph1\">`ReadLine`</ph>.","pos":[3713,3749],"source":"A custom activity called `ReadLine`."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Activities.OutArgument&gt;</ph> of the <ph id=\"ph2\">`ReadLine`</ph> activity is returned to the calling <ph id=\"ph3\">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> method.","pos":[3750,3902],"source":" An <xref:System.Activities.OutArgument> of the `ReadLine` activity is returned to the calling <xref:System.Activities.WorkflowInvoker.Invoke%2A> method."},{"content":"A custom activity that derives from the <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivity&gt;</ph> abstract class.","pos":[3912,4005],"source":"A custom activity that derives from the <xref:System.Activities.CodeActivity> abstract class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.CodeActivity&gt;</ph> can access run-time features (such as tracking and properties) using the <ph id=\"ph2\">&lt;xref:System.Activities.CodeActivityContext&gt;</ph> that is available as a parameter of the <ph id=\"ph3\">&lt;xref:System.Activities.CodeActivity.Execute%2A&gt;</ph> method.","pos":[4006,4262],"source":" The <xref:System.Activities.CodeActivity> can access run-time features (such as tracking and properties) using the <xref:System.Activities.CodeActivityContext> that is available as a parameter of the <xref:System.Activities.CodeActivity.Execute%2A> method."},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> these run-time features, see <bpt id=\"p1\">[</bpt>Workflow Tracking and Tracing<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/workflow-tracking-and-tracing.md)</ept> and <bpt id=\"p2\">[</bpt>Workflow Execution Properties<ept id=\"p2\">](../../../docs/framework/windows-workflow-foundation/workflow-execution-properties.md)</ept>.","pos":[4263,4585],"source":"[!INCLUDE[crabout](../../../includes/crabout-md.md)] these run-time features, see [Workflow Tracking and Tracing](../../../docs/framework/windows-workflow-foundation/workflow-tracking-and-tracing.md) and [Workflow Execution Properties](../../../docs/framework/windows-workflow-foundation/workflow-execution-properties.md)."},{"pos":[4594,4602],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[4606,4731],"content":"<bpt id=\"p1\">[</bpt>BizTalk Server 2006 or WF? Choosing the Right Workflow Tool for Your Project<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=154901)</ept>","source":"[BizTalk Server 2006 or WF? Choosing the Right Workflow Tool for Your Project](http://go.microsoft.com/fwlink/?LinkId=154901)"}]}