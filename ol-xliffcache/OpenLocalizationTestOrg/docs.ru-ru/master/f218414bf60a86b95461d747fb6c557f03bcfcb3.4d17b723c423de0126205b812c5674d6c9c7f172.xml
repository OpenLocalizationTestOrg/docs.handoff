{"content":"---\ntitle: \"typeof - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"typeof\"\n  - \"typeof_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"typeof keyword [C#]\"\nms.assetid: 0c08d880-515e-46bb-8cd2-48b8dd62c08d\n---\n# typeof (C# Reference)\n\nUsed to obtain the <xref:System.Type?displayProperty=nameWithType> object for a type. A `typeof` expression takes the following form:\n\n```csharp\nSystem.Type type = typeof(int);\n```\n\n## Remarks\n\nTo obtain the run-time type of an expression, you can use the .NET Framework method <xref:System.Object.GetType%2A>, as in the following example:\n\n```csharp\nint i = 0;\nSystem.Type type = i.GetType();\n```\n\nThe `typeof` operator cannot be overloaded.\n\nThe `typeof` operator can also be used on open generic types. Types with more than one type parameter must have the appropriate number of commas in the specification. For example, the <xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWIthType> has two type arguments, so you use one comma:\n\n```csharp\nType t = typeof(System.Collection.Generic.Dictionary<,>);\n```\n\nThe following example shows how to determine whether the return type of a method is a generic <xref:System.Collections.Generic.IEnumerable%601>. <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> will return `null` if the return type is not an <xref:System.Collections.Generic.IEnumerable%601> generic type.\n\n[!code-csharp[typeof_3.cs](~/samples/snippets/csharp/keywords/typeof/typeof_3.cs)]\n\n## Example\n\n[!code-csharp[csrefKeywordsOperator#12](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsOperator/CS/csrefKeywordsOperators.cs#12)] \n\n## Example\n\nThis sample uses the <xref:System.Object.GetType%2A> method to determine the type that is used to contain the result of a numeric calculation. This depends on the storage requirements of the resulting number.\n\n[!code-csharp[csrefKeywordsOperator#13](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsOperator/CS/csrefKeywordsOperators.cs#13)]\n\n## C# language specification\n\nFor more information, see [The typeof operator](~/_csharplang/spec/expressions.md#the-typeof-operator) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- <xref:System.Type?displayProperty=nameWithType>\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [is](../../../csharp/language-reference/keywords/is.md)\n- [Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)\n","nodes":[{"pos":[4,226],"embed":true,"restype":"x-metadata","content":"title: \"typeof - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"typeof\"\n  - \"typeof_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"typeof keyword [C#]\"\nms.assetid: 0c08d880-515e-46bb-8cd2-48b8dd62c08d","nodes":[{"content":"typeof - C# Reference","nodes":[{"pos":[0,21],"content":"typeof - C# Reference","nodes":[{"content":"typeof - C# Reference","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[233,254],"content":"typeof (C# Reference)","linkify":"typeof (C# Reference)","nodes":[{"content":"typeof (C# Reference)","pos":[0,21]}]},{"content":"Used to obtain the <ph id=\"ph1\">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> object for a type.","pos":[256,341],"source":"Used to obtain the <xref:System.Type?displayProperty=nameWithType> object for a type."},{"content":"A <ph id=\"ph1\">`typeof`</ph> expression takes the following form:","pos":[342,389],"source":" A `typeof` expression takes the following form:"},{"pos":[441,448],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[450,595],"content":"To obtain the run-time type of an expression, you can use the .NET Framework method <ph id=\"ph1\">&lt;xref:System.Object.GetType%2A&gt;</ph>, as in the following example:","source":"To obtain the run-time type of an expression, you can use the .NET Framework method <xref:System.Object.GetType%2A>, as in the following example:"},{"pos":[655,698],"content":"The <ph id=\"ph1\">`typeof`</ph> operator cannot be overloaded.","source":"The `typeof` operator cannot be overloaded."},{"content":"The <ph id=\"ph1\">`typeof`</ph> operator can also be used on open generic types.","pos":[700,761],"source":"The `typeof` operator can also be used on open generic types."},{"content":"Types with more than one type parameter must have the appropriate number of commas in the specification.","pos":[762,866]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWIthType&gt;</ph> has two type arguments, so you use one comma:","pos":[867,1007],"source":" For example, the <xref:System.Collections.Generic.Dictionary%602?displayProperty=nameWIthType> has two type arguments, so you use one comma:"},{"content":"The following example shows how to determine whether the return type of a method is a generic <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[1082,1226],"source":"The following example shows how to determine whether the return type of a method is a generic <xref:System.Collections.Generic.IEnumerable%601>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Type.GetInterface%2A?displayProperty=nameWithType&gt;</ph> will return <ph id=\"ph2\">`null`</ph> if the return type is not an <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> generic type.","pos":[1227,1402],"source":"<xref:System.Type.GetInterface%2A?displayProperty=nameWithType> will return `null` if the return type is not an <xref:System.Collections.Generic.IEnumerable%601> generic type."},{"pos":[1491,1498],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1648,1655],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This sample uses the <ph id=\"ph1\">&lt;xref:System.Object.GetType%2A&gt;</ph> method to determine the type that is used to contain the result of a numeric calculation.","pos":[1657,1799],"source":"This sample uses the <xref:System.Object.GetType%2A> method to determine the type that is used to contain the result of a numeric calculation."},{"content":"This depends on the storage requirements of the resulting number.","pos":[1800,1865]},{"pos":[2014,2039],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>The typeof operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#the-typeof-operator)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[2041,2215],"source":"For more information, see [The typeof operator](~/_csharplang/spec/expressions.md#the-typeof-operator) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[2216,2292]},{"pos":[2297,2305],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2359,2418],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[2421,2487],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2490,2557],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[2560,2615],"content":"<bpt id=\"p1\">[</bpt>is<ept id=\"p1\">](../../../csharp/language-reference/keywords/is.md)</ept>","source":"[is](../../../csharp/language-reference/keywords/is.md)"},{"pos":[2618,2703],"content":"<bpt id=\"p1\">[</bpt>Operator Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept>","source":"[Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)"}]}