<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="csharp-7-1.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">565db102284424f9d8f6fa04ec9c74b52c9da0e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\whats-new\csharp-7-1.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd1c2970b627a52db90c2c9a728faa9159f86b1d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b5530e83cc170fd1927c8eb10075a416d21f139</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>What's new in C# 7.1</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>An overview of new features in C# 7.1.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>What's new in C# 7.1</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>C# 7.1 is the first point release to the C# language.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It marks an increased release cadence for the language.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use the new features sooner, ideally when each new feature is ready.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>C# 7.1 adds the ability to configure the compiler to match a specified version of the language.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>That enables you to separate the decision to upgrade tools from the decision to upgrade language versions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>C# 7.1 adds the <bpt id="p1">[</bpt>language version selection<ept id="p1">](../language-reference/configure-language-version.md)</ept> configuration element, three new language features and new compiler behavior.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The new language features in this release are:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`async`</ph> <ph id="ph2">`Main`</ph> method<ept id="p1">](#async-main)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The entry point for an application can have the <ph id="ph1">`async`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`default`</ph> literal expressions<ept id="p1">](#default-literal-expressions)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use default literal expressions in default value expressions when the target type can be inferred.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inferred tuple element names<ept id="p1">](#inferred-tuple-element-names)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The names of tuple elements can be inferred from tuple initialization in many cases.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Finally, the compiler has two options <ph id="ph1">`/refout`</ph> and <ph id="ph2">`/refonly`</ph> that control <bpt id="p1">[</bpt>reference assembly generation<ept id="p1">](#reference-assembly-generation)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To use the latest features in a point release, you need to <bpt id="p1">[</bpt>configure the compiler language version<ept id="p1">](../language-reference/configure-language-version.md)</ept> and select the version.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Async main</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>async main<ept id="p1">*</ept> method enables you to use <ph id="ph1">`await`</ph> in your <ph id="ph2">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Previously you would need to write:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can now write:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If your program doesn't return an exit code, you can declare a <ph id="ph1">`Main`</ph> method that returns a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can read more about the details in the <bpt id="p1">[</bpt>async main<ept id="p1">](../programming-guide/main-and-command-args/index.md)</ept> topic in the programming guide.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Default literal expressions</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Default literal expressions are an enhancement to default value expressions.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>These expressions initialize a variable to the default value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Where you previously would write:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can now omit the type on the right-hand side of the initialization:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can learn more about this enhancement in the C# Programming Guide topic on <bpt id="p1">[</bpt>default value expressions<ept id="p1">](../programming-guide/statements-expressions-operators/default-value-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This enhancement also changes some of the parsing rules for the <bpt id="p1">[</bpt>default keyword<ept id="p1">](../language-reference/keywords/default.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Inferred tuple element names</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This feature is a small enhancement to the tuples feature introduced in C# 7.0.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Many times when you initialize a tuple, the variables used for the right side of the assignment are the same as the names you'd like for the tuple elements:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The names of tuple elements can be inferred from the variables used to initialize the tuple in C# 7.1:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can learn more about this feature in the <bpt id="p1">[</bpt>Tuples<ept id="p1">](../tuples.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Reference assembly generation</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>There are two new compiler options that generate <bpt id="p1">*</bpt>reference-only assemblies<ept id="p1">*</ept>: <bpt id="p2">[</bpt>/refout<ept id="p2">](../language-reference/compiler-options/refout-compiler-option.md)</ept> and <bpt id="p3">[</bpt>/refonly<ept id="p3">](../language-reference/compiler-options/refonly-compiler-option.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The linked topics explain these options and reference assemblies in more detail.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>