{"content":"---\ntitle: dotnet build command\ndescription: The dotnet build command builds a project and all of its dependencies.\nms.date: 12/04/2018\n---\n# dotnet build\n\n[!INCLUDE [topic-appliesto-net-core-all](../../../includes/topic-appliesto-net-core-all.md)]\n\n## Name\n\n`dotnet build` - Builds a project and all of its dependencies.\n\n## Synopsis\n\n# [.NET Core 2.x](#tab/netcore2x)\n```\ndotnet build [<PROJECT>|<SOLUTION>] [-c|--configuration] [-f|--framework] [--force] [--no-dependencies] [--no-incremental]\n    [--no-restore] [-o|--output] [-r|--runtime] [-v|--verbosity] [--version-suffix]\n\ndotnet build [-h|--help]\n```\n# [.NET Core 1.x](#tab/netcore1x)\n```\ndotnet build [<PROJECT>|<SOLUTION>] [-c|--configuration] [-f|--framework] [--no-dependencies] [--no-incremental] [-o|--output]\n    [-r|--runtime] [-v|--verbosity] [--version-suffix]\n\ndotnet build [-h|--help]\n```\n---\n\n## Description\n\nThe `dotnet build` command builds the project and its dependencies into a set of binaries. The binaries include the project's code in Intermediate Language (IL) files with a *.dll* extension and symbol files used for debugging with a *.pdb* extension. A dependencies JSON file (*\\*.deps.json*) is produced that lists the dependencies of the application. A *\\*.runtimeconfig.json* file is produced, which specifies the shared runtime and its version for the application.\n\nIf the project has third-party dependencies, such as libraries from NuGet, they're resolved from the NuGet cache and aren't available with the project's built output. With that in mind, the product of `dotnet build` isn't ready to be transferred to another machine to run. This is in contrast to the behavior of the .NET Framework in which building an executable project (an application) produces output that's runnable on any machine where the .NET Framework is installed. To have a similar experience with .NET Core, you need to use the [dotnet publish](dotnet-publish.md) command. For more information, see [.NET Core Application Deployment](../deploying/index.md).\n\nBuilding requires the *project.assets.json* file, which lists the dependencies of your application. The file is created when [`dotnet restore`](dotnet-restore.md) is executed. Without the assets file in place, the tooling cannot resolve reference assemblies, which results in errors. With .NET Core 1.x SDK, you needed to explicitly run the `dotnet restore` before running `dotnet build`. Starting with .NET Core 2.0 SDK, `dotnet restore` runs implicitly when you run `dotnet build`. If you want to disable implicit restore when running the build command, you can pass the `--no-restore` option.\n\n[!INCLUDE[dotnet restore note + options](~/includes/dotnet-restore-note-options.md)]\n\nWhether the project is executable or not is determined by the `<OutputType>` property in the project file. The following example shows a project that produces executable code:\n\n```xml\n<PropertyGroup>\n  <OutputType>Exe</OutputType>\n</PropertyGroup>\n```\n\nIn order to produce a library, omit the `<OutputType>` property. The main difference in built output is that the IL DLL for a library doesn't contain entry points and can't be executed.\n\n### MSBuild\n\n`dotnet build` uses MSBuild to build the project, so it supports both parallel and incremental builds. For more information, see [Incremental Builds](/visualstudio/msbuild/incremental-builds).\n\nIn addition to its options, the `dotnet build` command accepts MSBuild options, such as `-p` for setting properties or `-l` to define a logger. For more information about these options, see the [MSBuild Command-Line Reference](/visualstudio/msbuild/msbuild-command-line-reference). Or you can also use the [dotnet msbuild](dotnet-msbuild.md) command.\n\nRunning `dotnet build` is equivalent to `dotnet msbuild -restore -target:Build`.\n\n## Arguments\n\n`PROJECT | SOLUTION`\n\nThe project or solution file to build. If a project or solution file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in either *proj* or *sln* and uses that file.\n\n## Options\n\n# [.NET Core 2.x](#tab/netcore2x)\n\n* **`-c|--configuration {Debug|Release}`**\n\n  Defines the build configuration. The default value is `Debug`.\n\n* **`-f|--framework <FRAMEWORK>`**\n\n  Compiles for a specific [framework](../../standard/frameworks.md). The framework must be defined in the [project file](csproj.md).\n\n* **`--force`**\n\n  Forces all dependencies to be resolved even if the last restore was successful. Specifying this flag is the same as deleting the *project.assets.json* file.\n\n* **`-h|--help`**\n\n  Prints out a short help for the command.\n\n* **`--no-dependencies`**\n\n  Ignores project-to-project (P2P) references and only builds the specified root project.\n\n* **`--no-incremental`**\n\n  Marks the build as unsafe for incremental build. This flag turns off incremental compilation and forces a clean rebuild of the project's dependency graph.\n\n* **`--no-restore`**\n\n  Doesn't execute an implicit restore during build.\n\n* **`-o|--output <OUTPUT_DIRECTORY>`**\n\n  Directory in which to place the built binaries. You also need to define `--framework` when you specify this option. If not specified, the default path is `./bin/<configuration>/<framework>/`.\n\n* **`-r|--runtime <RUNTIME_IDENTIFIER>`**\n\n  Specifies the target runtime. For a list of Runtime Identifiers (RIDs), see the [RID catalog](../rid-catalog.md).\n\n* **`-v|--verbosity <LEVEL>`**\n\n  Sets the verbosity level of the command. Allowed values are `q[uiet]`, `m[inimal]`, `n[ormal]`, `d[etailed]`, and `diag[nostic]`.\n\n* **`--version-suffix <VERSION_SUFFIX>`**\n\n  Defines the version suffix for an asterisk (`*`) in the version field of the project file. The format follows NuGet's version guidelines.\n\n# [.NET Core 1.x](#tab/netcore1x)\n\n* **`-c|--configuration {Debug|Release}`**\n\n  Defines the build configuration. The default value is `Debug`.\n\n* **`-f|--framework <FRAMEWORK>`**\n\n  Compiles for a specific [framework](../../standard/frameworks.md). The framework must be defined in the [project file](csproj.md).\n\n* **`-h|--help`**\n\n  Prints out a short help for the command.\n\n* **`--no-dependencies`**\n\n  Ignores project-to-project (P2P) references and only builds the specified root project.\n\n* **`--no-incremental`**\n\n  Marks the build as unsafe for incremental build. This flag turns off incremental compilation and forces a clean rebuild of the project's dependency graph.\n\n* **`-o|--output <OUTPUT_DIRECTORY>`**\n\n  Directory in which to place the built binaries. You also need to define `--framework` when you specify this option.\n\n* **`-r|--runtime <RUNTIME_IDENTIFIER>`**\n\n  Specifies the target runtime. For a list of Runtime Identifiers (RIDs), see the [RID catalog](../rid-catalog.md).\n\n* **`-v|--verbosity <LEVEL>`**\n\n  Sets the verbosity level of the command. Allowed values are `q[uiet]`, `m[inimal]`, `n[ormal]`, `d[etailed]`, and `diag[nostic]`.\n\n* **`--version-suffix <VERSION_SUFFIX>`**\n\n  Defines the version suffix for an asterisk (`*`) in the version field of the project file. The format follows NuGet's version guidelines.\n\n---\n\n## Examples\n\n* Build a project and its dependencies:\n\n  ```console\n  dotnet build\n  ```\n\n* Build a project and its dependencies using Release configuration:\n\n  ```console\n  dotnet build --configuration Release\n  ```\n\n* Build a project and its dependencies for a specific runtime (in this example, Ubuntu 16.04):\n\n  ```console\n  dotnet build --runtime ubuntu.16.04-x64\n  ```\n\n* Build the project and use the specified NuGet package source during the restore operation (.NET Core 2.0 SDK and later versions):\n\n  ```console\n  dotnet build --source c:\\packages\\mypackages\n  ```\n\n* Build the project and set 1.2.3.4 version as a build parameter:\n\n  ```console\n  dotnet build -p:Version=1.2.3.4\n  ```","nodes":[{"pos":[4,135],"embed":true,"restype":"x-metadata","content":"title: dotnet build command\ndescription: The dotnet build command builds a project and all of its dependencies.\nms.date: 12/04/2018","nodes":[{"content":"dotnet build command","nodes":[{"pos":[0,20],"content":"dotnet build command","nodes":[{"content":"dotnet build command","pos":[0,20]}]}],"path":["title"],"nosxs":false},{"content":"The dotnet build command builds a project and all of its dependencies.","nodes":[{"pos":[0,70],"content":"The dotnet build command builds a project and all of its dependencies.","nodes":[{"content":"The dotnet build command builds a project and all of its dependencies.","pos":[0,70]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[142,154],"content":"dotnet build","linkify":"dotnet build","nodes":[{"content":"dotnet build","pos":[0,12]}]},{"pos":[253,257],"content":"Name","linkify":"Name","nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[259,321],"content":"<ph id=\"ph1\">`dotnet build`</ph> - Builds a project and all of its dependencies.","source":"`dotnet build` - Builds a project and all of its dependencies."},{"pos":[326,334],"content":"Synopsis","linkify":"Synopsis","nodes":[{"content":"Synopsis","pos":[0,8]}]},{"pos":[338,369],"content":"<bpt id=\"p1\">[</bpt>.NET Core 2.x<ept id=\"p1\">](#tab/netcore2x)</ept>","linkify":"[.NET Core 2.x](#tab/netcore2x)","source":"[.NET Core 2.x](#tab/netcore2x)"},{"pos":[613,644],"content":"<bpt id=\"p1\">[</bpt>.NET Core 1.x<ept id=\"p1\">](#tab/netcore1x)</ept>","linkify":"[.NET Core 1.x](#tab/netcore1x)","source":"[.NET Core 1.x](#tab/netcore1x)"},{"pos":[869,880],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`dotnet build`</ph> command builds the project and its dependencies into a set of binaries.","pos":[882,972],"source":"The `dotnet build` command builds the project and its dependencies into a set of binaries."},{"content":"The binaries include the project's code in Intermediate Language (IL) files with a <bpt id=\"p1\">*</bpt>.dll<ept id=\"p1\">*</ept> extension and symbol files used for debugging with a <bpt id=\"p2\">*</bpt>.pdb<ept id=\"p2\">*</ept> extension.","pos":[973,1133],"source":" The binaries include the project's code in Intermediate Language (IL) files with a *.dll* extension and symbol files used for debugging with a *.pdb* extension."},{"content":"A dependencies JSON file (<bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph>.deps.json<ept id=\"p1\">*</ept>) is produced that lists the dependencies of the application.","pos":[1134,1235],"source":" A dependencies JSON file (*\\*.deps.json*) is produced that lists the dependencies of the application."},{"content":"A <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph>.runtimeconfig.json<ept id=\"p1\">*</ept> file is produced, which specifies the shared runtime and its version for the application.","pos":[1236,1351],"source":" A *\\*.runtimeconfig.json* file is produced, which specifies the shared runtime and its version for the application."},{"content":"If the project has third-party dependencies, such as libraries from NuGet, they're resolved from the NuGet cache and aren't available with the project's built output.","pos":[1353,1519]},{"content":"With that in mind, the product of <ph id=\"ph1\">`dotnet build`</ph> isn't ready to be transferred to another machine to run.","pos":[1520,1625],"source":" With that in mind, the product of `dotnet build` isn't ready to be transferred to another machine to run."},{"content":"This is in contrast to the behavior of the .NET Framework in which building an executable project (an application) produces output that's runnable on any machine where the .NET Framework is installed.","pos":[1626,1826]},{"content":"To have a similar experience with .NET Core, you need to use the <bpt id=\"p1\">[</bpt>dotnet publish<ept id=\"p1\">](dotnet-publish.md)</ept> command.","pos":[1827,1936],"source":" To have a similar experience with .NET Core, you need to use the [dotnet publish](dotnet-publish.md) command."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>.NET Core Application Deployment<ept id=\"p1\">](../deploying/index.md)</ept>.","pos":[1937,2021],"source":" For more information, see [.NET Core Application Deployment](../deploying/index.md)."},{"content":"Building requires the <bpt id=\"p1\">*</bpt>project.assets.json<ept id=\"p1\">*</ept> file, which lists the dependencies of your application.","pos":[2023,2122],"source":"Building requires the *project.assets.json* file, which lists the dependencies of your application."},{"content":"The file is created when <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet restore`</ph><ept id=\"p1\">](dotnet-restore.md)</ept> is executed.","pos":[2123,2198],"source":" The file is created when [`dotnet restore`](dotnet-restore.md) is executed."},{"content":"Without the assets file in place, the tooling cannot resolve reference assemblies, which results in errors.","pos":[2199,2306]},{"content":"With .NET Core 1.x SDK, you needed to explicitly run the <ph id=\"ph1\">`dotnet restore`</ph> before running <ph id=\"ph2\">`dotnet build`</ph>.","pos":[2307,2411],"source":" With .NET Core 1.x SDK, you needed to explicitly run the `dotnet restore` before running `dotnet build`."},{"content":"Starting with .NET Core 2.0 SDK, <ph id=\"ph1\">`dotnet restore`</ph> runs implicitly when you run <ph id=\"ph2\">`dotnet build`</ph>.","pos":[2412,2506],"source":" Starting with .NET Core 2.0 SDK, `dotnet restore` runs implicitly when you run `dotnet build`."},{"content":"If you want to disable implicit restore when running the build command, you can pass the <ph id=\"ph1\">`--no-restore`</ph> option.","pos":[2507,2618],"source":" If you want to disable implicit restore when running the build command, you can pass the `--no-restore` option."},{"content":"Whether the project is executable or not is determined by the <ph id=\"ph1\">`&lt;OutputType&gt;`</ph> property in the project file.","pos":[2706,2812],"source":"Whether the project is executable or not is determined by the `<OutputType>` property in the project file."},{"content":"The following example shows a project that produces executable code:","pos":[2813,2881]},{"content":"In order to produce a library, omit the <ph id=\"ph1\">`&lt;OutputType&gt;`</ph> property.","pos":[2959,3023],"source":"In order to produce a library, omit the `<OutputType>` property."},{"content":"The main difference in built output is that the IL DLL for a library doesn't contain entry points and can't be executed.","pos":[3024,3144]},{"pos":[3150,3157],"content":"MSBuild","linkify":"MSBuild","nodes":[{"content":"MSBuild","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`dotnet build`</ph> uses MSBuild to build the project, so it supports both parallel and incremental builds.","pos":[3159,3261],"source":"`dotnet build` uses MSBuild to build the project, so it supports both parallel and incremental builds."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Incremental Builds<ept id=\"p1\">](/visualstudio/msbuild/incremental-builds)</ept>.","pos":[3262,3351],"source":" For more information, see [Incremental Builds](/visualstudio/msbuild/incremental-builds)."},{"content":"In addition to its options, the <ph id=\"ph1\">`dotnet build`</ph> command accepts MSBuild options, such as <ph id=\"ph2\">`-p`</ph> for setting properties or <ph id=\"ph3\">`-l`</ph> to define a logger.","pos":[3353,3496],"source":"In addition to its options, the `dotnet build` command accepts MSBuild options, such as `-p` for setting properties or `-l` to define a logger."},{"content":"For more information about these options, see the <bpt id=\"p1\">[</bpt>MSBuild Command-Line Reference<ept id=\"p1\">](/visualstudio/msbuild/msbuild-command-line-reference)</ept>.","pos":[3497,3634],"source":" For more information about these options, see the [MSBuild Command-Line Reference](/visualstudio/msbuild/msbuild-command-line-reference)."},{"content":"Or you can also use the <bpt id=\"p1\">[</bpt>dotnet msbuild<ept id=\"p1\">](dotnet-msbuild.md)</ept> command.","pos":[3635,3703],"source":" Or you can also use the [dotnet msbuild](dotnet-msbuild.md) command."},{"pos":[3705,3785],"content":"Running <ph id=\"ph1\">`dotnet build`</ph> is equivalent to <ph id=\"ph2\">`dotnet msbuild -restore -target:Build`</ph>.","source":"Running `dotnet build` is equivalent to `dotnet msbuild -restore -target:Build`."},{"pos":[3790,3799],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"The project or solution file to build.","pos":[3823,3861]},{"content":"If a project or solution file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in either <bpt id=\"p1\">*</bpt>proj<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>sln<ept id=\"p2\">*</ept> and uses that file.","pos":[3862,4049],"source":" If a project or solution file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in either *proj* or *sln* and uses that file."},{"pos":[4054,4061],"content":"Options","linkify":"Options","nodes":[{"content":"Options","pos":[0,7]}]},{"pos":[4065,4096],"content":"<bpt id=\"p1\">[</bpt>.NET Core 2.x<ept id=\"p1\">](#tab/netcore2x)</ept>","linkify":"[.NET Core 2.x](#tab/netcore2x)","source":"[.NET Core 2.x](#tab/netcore2x)"},{"content":"Defines the build configuration.","pos":[4144,4176]},{"content":"The default value is <ph id=\"ph1\">`Debug`</ph>.","pos":[4177,4206],"source":" The default value is `Debug`."},{"content":"Compiles for a specific <bpt id=\"p1\">[</bpt>framework<ept id=\"p1\">](../../standard/frameworks.md)</ept>.","pos":[4246,4312],"source":"Compiles for a specific [framework](../../standard/frameworks.md)."},{"content":"The framework must be defined in the <bpt id=\"p1\">[</bpt>project file<ept id=\"p1\">](csproj.md)</ept>.","pos":[4313,4376],"source":" The framework must be defined in the [project file](csproj.md)."},{"content":"Forces all dependencies to be resolved even if the last restore was successful.","pos":[4397,4476]},{"content":"Specifying this flag is the same as deleting the <bpt id=\"p1\">*</bpt>project.assets.json<ept id=\"p1\">*</ept> file.","pos":[4477,4553],"source":" Specifying this flag is the same as deleting the *project.assets.json* file."},{"content":"Prints out a short help for the command.","pos":[4576,4616]},{"content":"Ignores project-to-project (P2P) references and only builds the specified root project.","pos":[4647,4734]},{"content":"Marks the build as unsafe for incremental build.","pos":[4764,4812]},{"content":"This flag turns off incremental compilation and forces a clean rebuild of the project's dependency graph.","pos":[4813,4918]},{"content":"Doesn't execute an implicit restore during build.","pos":[4944,4993]},{"content":"Directory in which to place the built binaries.","pos":[5037,5084]},{"content":"You also need to define <ph id=\"ph1\">`--framework`</ph> when you specify this option.","pos":[5085,5152],"source":" You also need to define `--framework` when you specify this option."},{"content":"If not specified, the default path is <ph id=\"ph1\">`./bin/&lt;configuration&gt;/&lt;framework&gt;/`</ph>.","pos":[5153,5228],"source":" If not specified, the default path is `./bin/<configuration>/<framework>/`."},{"content":"Specifies the target runtime.","pos":[5275,5304]},{"content":"For a list of Runtime Identifiers (RIDs), see the <bpt id=\"p1\">[</bpt>RID catalog<ept id=\"p1\">](../rid-catalog.md)</ept>.","pos":[5305,5388],"source":" For a list of Runtime Identifiers (RIDs), see the [RID catalog](../rid-catalog.md)."},{"content":"Sets the verbosity level of the command.","pos":[5424,5464]},{"content":"Allowed values are <ph id=\"ph1\">`q[uiet]`</ph>, <ph id=\"ph2\">`m[inimal]`</ph>, <ph id=\"ph3\">`n[ormal]`</ph>, <ph id=\"ph4\">`d[etailed]`</ph>, and <ph id=\"ph5\">`diag[nostic]`</ph>.","pos":[5465,5553],"source":" Allowed values are `q[uiet]`, `m[inimal]`, `n[ormal]`, `d[etailed]`, and `diag[nostic]`."},{"content":"Defines the version suffix for an asterisk (<ph id=\"ph1\">`*`</ph>) in the version field of the project file.","pos":[5600,5690],"source":"Defines the version suffix for an asterisk (`*`) in the version field of the project file."},{"content":"The format follows NuGet's version guidelines.","pos":[5691,5737]},{"pos":[5741,5772],"content":"<bpt id=\"p1\">[</bpt>.NET Core 1.x<ept id=\"p1\">](#tab/netcore1x)</ept>","linkify":"[.NET Core 1.x](#tab/netcore1x)","source":"[.NET Core 1.x](#tab/netcore1x)"},{"content":"Defines the build configuration.","pos":[5820,5852]},{"content":"The default value is <ph id=\"ph1\">`Debug`</ph>.","pos":[5853,5882],"source":" The default value is `Debug`."},{"content":"Compiles for a specific <bpt id=\"p1\">[</bpt>framework<ept id=\"p1\">](../../standard/frameworks.md)</ept>.","pos":[5922,5988],"source":"Compiles for a specific [framework](../../standard/frameworks.md)."},{"content":"The framework must be defined in the <bpt id=\"p1\">[</bpt>project file<ept id=\"p1\">](csproj.md)</ept>.","pos":[5989,6052],"source":" The framework must be defined in the [project file](csproj.md)."},{"content":"Prints out a short help for the command.","pos":[6075,6115]},{"content":"Ignores project-to-project (P2P) references and only builds the specified root project.","pos":[6146,6233]},{"content":"Marks the build as unsafe for incremental build.","pos":[6263,6311]},{"content":"This flag turns off incremental compilation and forces a clean rebuild of the project's dependency graph.","pos":[6312,6417]},{"content":"Directory in which to place the built binaries.","pos":[6461,6508]},{"content":"You also need to define <ph id=\"ph1\">`--framework`</ph> when you specify this option.","pos":[6509,6576],"source":" You also need to define `--framework` when you specify this option."},{"content":"Specifies the target runtime.","pos":[6623,6652]},{"content":"For a list of Runtime Identifiers (RIDs), see the <bpt id=\"p1\">[</bpt>RID catalog<ept id=\"p1\">](../rid-catalog.md)</ept>.","pos":[6653,6736],"source":" For a list of Runtime Identifiers (RIDs), see the [RID catalog](../rid-catalog.md)."},{"content":"Sets the verbosity level of the command.","pos":[6772,6812]},{"content":"Allowed values are <ph id=\"ph1\">`q[uiet]`</ph>, <ph id=\"ph2\">`m[inimal]`</ph>, <ph id=\"ph3\">`n[ormal]`</ph>, <ph id=\"ph4\">`d[etailed]`</ph>, and <ph id=\"ph5\">`diag[nostic]`</ph>.","pos":[6813,6901],"source":" Allowed values are `q[uiet]`, `m[inimal]`, `n[ormal]`, `d[etailed]`, and `diag[nostic]`."},{"content":"Defines the version suffix for an asterisk (<ph id=\"ph1\">`*`</ph>) in the version field of the project file.","pos":[6948,7038],"source":"Defines the version suffix for an asterisk (`*`) in the version field of the project file."},{"content":"The format follows NuGet's version guidelines.","pos":[7039,7085]},{"pos":[7095,7103],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Build a project and its dependencies:","pos":[7107,7144]},{"content":"Build a project and its dependencies using Release configuration:","pos":[7183,7248]},{"content":"Build a project and its dependencies for a specific runtime (in this example, Ubuntu 16.04):","pos":[7311,7403]},{"content":"Build the project and use the specified NuGet package source during the restore operation (.NET Core 2.0 SDK and later versions):","pos":[7469,7598]},{"content":"Build the project and set 1.2.3.4 version as a build parameter:","pos":[7669,7732]}]}