{"content":"---\ntitle: \">>= operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/12/2019\nf1_keywords: \n  - \">>=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"right shift assignment operator (>>=) [C#]\"\n  - \">>= operator (right-shift assignment) [C#]\"\nms.assetid: b593778c-b9b4-440d-8b29-c1ac22cb81c0\n---\n# >>= operator (C# Reference)\n\nThe right-shift assignment operator.\n\nAn expression using the `>>=` operator, such as\n\n```csharp\nx >>= y\n```\n\nis equivalent to\n\n```csharp\nx = x >> y\n```\n\nexcept that `x` is only evaluated once.\n\nThe [`>>` operator](right-shift-operator.md) shifts its first operand right by the number of bits defined by its second operand.\n\nThe following example demonstrates the usage of the `>>=` operator:\n\n[!code-csharp-interactive[right shift assignment](~/samples/snippets/csharp/language-reference/operators/ShiftOperatorsExamples.cs#RightShiftAssignment)]\n\n## Operator overloadability\n\nIf a user-defined type [overloads](../keywords/operator.md) the [`>>` operator](right-shift-operator.md), the right-shift assignment operator `>>=` is implicitly overloaded. A user-defined type cannot explicitly overload the right-shift assignment operator.\n\n## C# language specification\n\nFor more information, see the [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# operators](index.md)","nodes":[{"pos":[4,287],"embed":true,"restype":"x-metadata","content":"title: \">>= operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/12/2019\nf1_keywords: \n  - \">>=_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"right shift assignment operator (>>=) [C#]\"\n  - \">>= operator (right-shift assignment) [C#]\"\nms.assetid: b593778c-b9b4-440d-8b29-c1ac22cb81c0","nodes":[{"content":">>= operator - C# Reference","nodes":[{"pos":[2,27],"content":"= operator - C# Reference","nodes":[{"content":"= operator - C# Reference","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[294,321],"content":">>= operator (C# Reference)","linkify":">>= operator (C# Reference)","nodes":[{"content":"&gt;&gt;= operator (C# Reference)","pos":[0,27],"source":">>= operator (C# Reference)"}]},{"content":"The right-shift assignment operator.","pos":[323,359]},{"pos":[361,408],"content":"An expression using the <ph id=\"ph1\">`&gt;&gt;=`</ph> operator, such as","source":"An expression using the `>>=` operator, such as"},{"content":"is equivalent to","pos":[433,449]},{"pos":[477,516],"content":"except that <ph id=\"ph1\">`x`</ph> is only evaluated once.","source":"except that `x` is only evaluated once."},{"pos":[518,646],"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`&gt;&gt;`</ph> operator<ept id=\"p1\">](right-shift-operator.md)</ept> shifts its first operand right by the number of bits defined by its second operand.","source":"The [`>>` operator](right-shift-operator.md) shifts its first operand right by the number of bits defined by its second operand."},{"pos":[648,715],"content":"The following example demonstrates the usage of the <ph id=\"ph1\">`&gt;&gt;=`</ph> operator:","source":"The following example demonstrates the usage of the `>>=` operator:"},{"pos":[875,899],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"content":"If a user-defined type <bpt id=\"p1\">[</bpt>overloads<ept id=\"p1\">](../keywords/operator.md)</ept> the <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`&gt;&gt;`</ph> operator<ept id=\"p2\">](right-shift-operator.md)</ept>, the right-shift assignment operator <ph id=\"ph2\">`&gt;&gt;=`</ph> is implicitly overloaded.","pos":[901,1074],"source":"If a user-defined type [overloads](../keywords/operator.md) the [`>>` operator](right-shift-operator.md), the right-shift assignment operator `>>=` is implicitly overloaded."},{"content":"A user-defined type cannot explicitly overload the right-shift assignment operator.","pos":[1075,1158]},{"pos":[1163,1188],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1190,1376],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Compound assignment<ept id=\"p1\">](~/_csharplang/spec/expressions.md#compound-assignment)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Compound assignment](~/_csharplang/spec/expressions.md#compound-assignment) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1381,1389],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1393,1420],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1423,1479],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1482,1506],"content":"<bpt id=\"p1\">[</bpt>C# operators<ept id=\"p1\">](index.md)</ept>","source":"[C# operators](index.md)"}]}