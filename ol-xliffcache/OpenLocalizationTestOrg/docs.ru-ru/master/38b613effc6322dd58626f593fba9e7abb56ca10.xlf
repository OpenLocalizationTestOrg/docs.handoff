<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38b613effc6322dd58626f593fba9e7abb56ca10</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\how-keyboard-input-works.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c024cd236c6d080467ea36c6c4174bb36afbdddc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">990db7c2be4cf58d3daac9da15713de76b390285</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How Keyboard Input Works | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How Keyboard Input Works</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows Forms processes keyboard input by raising keyboard events in response to Windows messages.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Most Windows Forms applications process keyboard input exclusively by handling the keyboard events.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, you need to understand how keyboard messages work so you can implement more advanced keyboard-input scenarios, such as intercepting keys before they reach a control.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic describes the types of key data that Windows Forms recognizes and provides an overview of how keyboard messages are routed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For information about keyboard events, see <bpt id="p1">[</bpt>Using Keyboard Events<ept id="p1">](../../../docs/framework/winforms/using-keyboard-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Types of Keys</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows Forms identifies keyboard input as virtual-key codes that are represented by the bitwise <ph id="ph1">&lt;xref:System.Windows.Forms.Keys&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>With the <ph id="ph1">&lt;xref:System.Windows.Forms.Keys&gt;</ph> enumeration, you can combine a series of pressed keys to result in a single value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These values correspond to the values that accompany the WM_KEYDOWN and WM_SYSKEYDOWN Windows messages.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can detect most physical key presses by handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Character keys are a subset of the <ph id="ph1">&lt;xref:System.Windows.Forms.Keys&gt;</ph> enumeration and correspond to the values that accompany the WM_CHAR and WM_SYSCHAR Windows messages.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the combination of pressed keys results in a character, you can detect the character by handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Devices.Keyboard&gt;</ph>, exposed by Visual Basic programming interface, to discover which keys were pressed and send keys.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Accessing the Keyboard<ept id="p1">](~/docs/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Order of Keyboard Events</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As listed previously, there are 3 keyboard related events that can occur on a control.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following sequence shows the general order of the events:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The user pushes the "a" key, the key is preprocessed, dispatched, and a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event occurs.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The user holds the "a" key, the key is preprocessed, dispatched, and a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event occurs.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This event occurs multiple times as the user holds a key.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The user releases the "a" key, the key is preprocessed, dispatched and a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> event occurs.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Preprocessing Keys</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Like other messages, keyboard messages are processed in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method of a form or control.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, before keyboard messages are processed, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph> method calls one or more methods that can be overridden to handle special character keys and physical keys.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can override these methods to detect and filter certain keys before the messages are processed by the control.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following table shows the action that is being performed and the related method that occurs, in the order that the method occurs.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Preprocessing for a KeyDown event</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Related method</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Check for a command key such as an accelerator or menu shortcut.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This method processes a command key, which takes precedence over regular keys.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If this method returns <ph id="ph1">`true`</ph>, the key message is not dispatched and a key event does not occur.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If it returns <ph id="ph1">`false`</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> is called<ph id="ph3">`.`</ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Check for a special key that requires preprocessing or a normal character key that should raise a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event and be dispatched to a control.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the method returns <ph id="ph1">`true`</ph>, it means the control is a regular character and a <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  To ensure a control gets a key or combination of keys, you can handle the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event and set <ph id="ph2">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> of the <ph id="ph3">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs&gt;</ph> to <ph id="ph4">`true`</ph> for the key or keys you want.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Check for a navigation key (ESC, TAB, Return, or arrow keys).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This method processes a physical key that employs special functionality within the control, such as switching focus between the control and its parent.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the immediate control does not handle the key, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> is called on the parent control and so on to the topmost control in the hierarchy.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If this method returns <ph id="ph1">`true`</ph>, preprocessing is complete and a key event is not generated.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If it returns <ph id="ph1">`false`</ph>, a <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event occurs.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Preprocessing for a KeyPress Event</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Related method</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Check to see the key is a normal character that should be processed by the control</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the character is a normal character, this method returns <ph id="ph1">`true`</ph>, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event is raised and no further preprocessing occurs.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Otherwise <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph> will be called.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Check to see if the character is a mnemonic (such as &amp;OK on a button)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This method, similar to <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph>, will be called up the control hierarchy.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If the control is a container control, it checks for mnemonics by calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessMnemonic%2A&gt;</ph> on itself and its child controls.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, a <ph id="ph3">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event does not occur.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Processing Keyboard Messages</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>After keyboard messages reach the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method of a form or control, they are processed by a set of methods that can be overridden.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Each of these methods returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value specifying whether the keyboard message has been processed and consumed by the control.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If one of the methods returns <ph id="ph1">`true`</ph>, then the message is considered handled, and it is not passed to the control's base or parent for further processing.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Otherwise, the message stays in the message queue and may be processed in another method in the control's base or parent.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following table presents the methods that process keyboard messages.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This method processes all keyboard messages that are received by the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method of the control.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This method sends the keyboard message to the control's parent.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, no key event is generated, otherwise <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> events, as appropriate.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Overriding Keyboard Methods</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>There are many methods available for overriding when a keyboard message is preprocessed and processed; however, some methods are much better choices than others.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Following table shows tasks you might want to accomplish and the best way to override the keyboard methods.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information on overriding methods, see <bpt id="p1">[</bpt>NOT IN BUILD: Overriding Properties and Methods<ept id="p1">](http://msdn.microsoft.com/en-us/2167e8f5-1225-4b13-9ebd-02591ba90213)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Task</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Intercept a navigation key and raise a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example you want TAB and Return to be handled in a text box.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  Alternatively, you can handle the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event and set <ph id="ph2">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> of the <ph id="ph3">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs&gt;</ph> to <ph id="ph4">`true`</ph> for the key or keys you want.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Perform special input or navigation handling on a control.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, you want the use of arrow keys in your list control to change the selected item.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Intercept a navigation key and raise a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For example in a spin-box control you want multiple arrow key presses to accelerate progression through the items.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Perform special input or navigation handling during a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For example, in a list control holding down the "r" key skips between items that begin with the letter r.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Perform custom mnemonic handling; for example, you want to handle mnemonics on owner-drawn buttons contained in a toolbar.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessMnemonic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Keys&gt;</ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>My.Computer.Keyboard Object<ept id="p1">](~/docs/visual-basic/language-reference/objects/my-computer-keyboard-object.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Accessing the Keyboard<ept id="p1">](~/docs/visual-basic/developing-apps/programming/computer-resources/accessing-the-keyboard.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Keyboard Events<ept id="p1">](../../../docs/framework/winforms/using-keyboard-events.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>