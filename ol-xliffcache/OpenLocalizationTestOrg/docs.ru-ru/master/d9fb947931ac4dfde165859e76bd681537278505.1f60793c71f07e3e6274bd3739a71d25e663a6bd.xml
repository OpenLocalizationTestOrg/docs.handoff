{"content":"---\ntitle: \"InvokeMethod | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 04988eb3-65f8-456d-b1bd-509f5d05a57c\ncaps.latest.revision: 6\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# InvokeMethod\nThis sample shows the different ways of using the <xref:System.Activities.Statements.InvokeMethod> activity to invoke methods of a class.  \n  \n A method belongs to a class and represents a contained set of operations. The <xref:System.Activities.Statements.InvokeMethod> activity gives you the ability to call methods against objects or types, pass in parameters, and get the return value. Methods can be invoked synchronously or asynchronously.  \n  \n## Sample Details  \n This sample uses the <xref:System.Activities.Statements.InvokeMethod> activity to perform the following scenarios:  \n  \n1.  Invoke an instance method without parameters.  \n  \n2.  Invoke an instance method with two parameters (<xref:System.String> and <xref:System.Int32>).  \n  \n3.  Invoke an instance method with two parameters (<xref:System.String> and <xref:System.Int32>) and a parameter array of type <xref:System.String>[].  \n  \n4.  Invoke an instance method with two parameters of type <xref:System.Int32> and a result of type <xref:System.Int32>. In this scenario, the result value is bound to a variable and used in another activity. It is displayed in the console using the <xref:System.Activities.Statements.WriteLine> activity.  \n  \n5.  Invoke a static method with two parameters of type <xref:System.String> and <xref:System.Int32>.  \n  \n6.  Invoke an instance method with one generic parameter of type <xref:System.String>.  \n  \n7.  Invoke a static method with two generic parameters of type <xref:System.String> and <xref:System.Int32>.  \n  \n8.  Invoke an instance method that has one parameter passed by reference of type <xref:System.String>. In this scenario, the reference parameter is bound to a variable (`outParam`) and used in another activity. It is displayed on the console using the <xref:System.Activities.Statements.WriteLine> activity.  \n  \n9. Invoke an asynchronous instance method.  \n  \n10. Invoke two different methods on the same instance of an object using two <xref:System.Activities.Statements.InvokeMethod> activities.  \n  \n11. Store a value in an instance of an object.  \n  \n12. Retrieve a value from an instance of an object.  \n  \n## To use this sample  \n This sample is provided in two versions. The first version of this sample demonstrates the usage of <xref:System.Activities.Statements.InvokeMethod> through C# code using the [!INCLUDE[wf](../../../../includes/wf-md.md)] programming model and can be found under the CodedWorkflow\\CS folder. The second version demonstrates the usage of <xref:System.Activities.Statements.InvokeMethod> using XAML and can be found under the DesignerWorkflow\\CS folder.  \n  \n#### To run the coded workflow sample  \n  \n1.  Using [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)], open the InvokeMethodUsage.sln solution file in the CodedWorkflow\\CS folder.  \n  \n2.  To build the solution, press CTRL+SHIFT+B.  \n  \n3.  To run the solution, press CTRL+F5.  \n  \n#### To run the designer workflow sample  \n  \n1.  Using [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)], open the InvokeMethodUsage.sln solution file in the DesignerWorkflow\\CS folder.  \n  \n2.  To build the solution, press CTRL+SHIFT+B.  \n  \n3.  To run the solution, press CTRL+F5.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Basic\\Built-InActivities\\InvokeMethod`  \n  \n## See Also","nodes":[{"pos":[12,41],"content":"InvokeMethod | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"InvokeMethod | Microsoft Docs","pos":[0,29]}]},{"pos":[306,318],"content":"InvokeMethod","linkify":"InvokeMethod","nodes":[{"content":"InvokeMethod","pos":[0,12]}]},{"content":"This sample shows the different ways of using the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> activity to invoke methods of a class.","pos":[319,456],"source":"This sample shows the different ways of using the <xref:System.Activities.Statements.InvokeMethod> activity to invoke methods of a class."},{"content":"A method belongs to a class and represents a contained set of operations.","pos":[463,536]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> activity gives you the ability to call methods against objects or types, pass in parameters, and get the return value.","pos":[537,708],"source":" The <xref:System.Activities.Statements.InvokeMethod> activity gives you the ability to call methods against objects or types, pass in parameters, and get the return value."},{"content":"Methods can be invoked synchronously or asynchronously.","pos":[709,764]},{"pos":[773,787],"content":"Sample Details","linkify":"Sample Details","nodes":[{"content":"Sample Details","pos":[0,14]}]},{"content":"This sample uses the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> activity to perform the following scenarios:","pos":[791,905],"source":"This sample uses the <xref:System.Activities.Statements.InvokeMethod> activity to perform the following scenarios:"},{"content":"Invoke an instance method without parameters.","pos":[915,960]},{"content":"Invoke an instance method with two parameters (<ph id=\"ph1\">&lt;xref:System.String&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>).","pos":[970,1063],"source":"Invoke an instance method with two parameters (<xref:System.String> and <xref:System.Int32>)."},{"content":"Invoke an instance method with two parameters (<ph id=\"ph1\">&lt;xref:System.String&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>) and a parameter array of type <ph id=\"ph3\">&lt;xref:System.String&gt;</ph>[].","pos":[1073,1219],"source":"Invoke an instance method with two parameters (<xref:System.String> and <xref:System.Int32>) and a parameter array of type <xref:System.String>[]."},{"content":"Invoke an instance method with two parameters of type <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph> and a result of type <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>.","pos":[1229,1344],"source":"Invoke an instance method with two parameters of type <xref:System.Int32> and a result of type <xref:System.Int32>."},{"content":"In this scenario, the result value is bound to a variable and used in another activity.","pos":[1345,1432]},{"content":"It is displayed in the console using the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity.","pos":[1433,1529],"source":" It is displayed in the console using the <xref:System.Activities.Statements.WriteLine> activity."},{"content":"Invoke a static method with two parameters of type <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>.","pos":[1539,1635],"source":"Invoke a static method with two parameters of type <xref:System.String> and <xref:System.Int32>."},{"content":"Invoke an instance method with one generic parameter of type <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>.","pos":[1645,1727],"source":"Invoke an instance method with one generic parameter of type <xref:System.String>."},{"content":"Invoke a static method with two generic parameters of type <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>.","pos":[1737,1841],"source":"Invoke a static method with two generic parameters of type <xref:System.String> and <xref:System.Int32>."},{"content":"Invoke an instance method that has one parameter passed by reference of type <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>.","pos":[1851,1949],"source":"Invoke an instance method that has one parameter passed by reference of type <xref:System.String>."},{"content":"In this scenario, the reference parameter is bound to a variable (<ph id=\"ph1\">`outParam`</ph>) and used in another activity.","pos":[1950,2057],"source":" In this scenario, the reference parameter is bound to a variable (`outParam`) and used in another activity."},{"content":"It is displayed on the console using the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity.","pos":[2058,2154],"source":" It is displayed on the console using the <xref:System.Activities.Statements.WriteLine> activity."},{"content":"Invoke an asynchronous instance method.","pos":[2163,2202]},{"content":"Invoke two different methods on the same instance of an object using two <ph id=\"ph1\">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> activities.","pos":[2212,2345],"source":"Invoke two different methods on the same instance of an object using two <xref:System.Activities.Statements.InvokeMethod> activities."},{"content":"Store a value in an instance of an object.","pos":[2355,2397]},{"content":"Retrieve a value from an instance of an object.","pos":[2407,2454]},{"pos":[2463,2481],"content":"To use this sample","linkify":"To use this sample","nodes":[{"content":"To use this sample","pos":[0,18]}]},{"content":"This sample is provided in two versions.","pos":[2485,2525]},{"content":"The first version of this sample demonstrates the usage of <ph id=\"ph1\">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> through C# code using the <ph id=\"ph2\">[!INCLUDE[wf](../../../../includes/wf-md.md)]</ph> programming model and can be found under the CodedWorkflow\\CS folder.","pos":[2526,2775],"source":" The first version of this sample demonstrates the usage of <xref:System.Activities.Statements.InvokeMethod> through C# code using the [!INCLUDE[wf](../../../../includes/wf-md.md)] programming model and can be found under the CodedWorkflow\\CS folder."},{"content":"The second version demonstrates the usage of <ph id=\"ph1\">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> using XAML and can be found under the DesignerWorkflow\\CS folder.","pos":[2776,2935],"source":" The second version demonstrates the usage of <xref:System.Activities.Statements.InvokeMethod> using XAML and can be found under the DesignerWorkflow\\CS folder."},{"pos":[2946,2978],"content":"To run the coded workflow sample","linkify":"To run the coded workflow sample","nodes":[{"content":"To run the coded workflow sample","pos":[0,32]}]},{"pos":[2988,3125],"content":"Using <ph id=\"ph1\">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>, open the InvokeMethodUsage.sln solution file in the CodedWorkflow\\CS folder.","source":"Using [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)], open the InvokeMethodUsage.sln solution file in the CodedWorkflow\\CS folder."},{"content":"To build the solution, press CTRL+SHIFT+B.","pos":[3135,3177]},{"content":"To run the solution, press CTRL+F5.","pos":[3187,3222]},{"pos":[3233,3268],"content":"To run the designer workflow sample","linkify":"To run the designer workflow sample","nodes":[{"content":"To run the designer workflow sample","pos":[0,35]}]},{"pos":[3278,3418],"content":"Using <ph id=\"ph1\">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>, open the InvokeMethodUsage.sln solution file in the DesignerWorkflow\\CS folder.","source":"Using [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)], open the InvokeMethodUsage.sln solution file in the DesignerWorkflow\\CS folder."},{"content":"To build the solution, press CTRL+SHIFT+B.","pos":[3428,3470]},{"content":"To run the solution, press CTRL+F5.","pos":[3480,3515]},{"pos":[3523,3655],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[13,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[1,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[3709,4035],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[4036,4086]},{"pos":[4179,4187],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}