{"content":"---\ntitle: \"How to: Find Related Elements (XPath-LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 6b0ef058-d704-48a5-98cd-33f00d088af9\n---\n# How to: Find Related Elements (XPath-LINQ to XML) (Visual Basic)\nThis topic shows how to get an element selecting on an attribute that is referred to by the value of another element.  \n  \n The XPath expression is:  \n  \n `.//Customer[@CustomerID=/Root/Orders/Order[12]/CustomerID]`  \n  \n## Example  \n This example finds the 12th `Order` element, and then finds the customer for that order.  \n  \n Note that indexing into a list in .NET is 'zero' based. Indexing into a collection of nodes in an XPath predicate is 'one' based. This example reflects this difference.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md).  \n  \n```vb  \nDim co As XDocument = XDocument.Load(\"CustomersOrders.xml\")  \n  \n' LINQ to XML query  \nDim customer1 As XElement = ( _  \n    From el In co...<Customer> _  \n    Where el.@CustomerID = co.<Root>.<Orders>.<Order>. _  \n        ToList()(11).<CustomerID>(0).Value _  \n    Select el).First()  \n  \n' An alternate way to write the query that avoids creation  \n' of a System.Collections.Generic.List:  \nDim customer2 As XElement = ( _  \n    From el In co...<Customer> _  \n    Where el.@CustomerID = co.<Root>.<Orders>.<Order>. _  \n        Skip(11).First().<CustomerID>(0).Value _  \n    Select el).First()  \n  \n' XPath expression  \nDim customer3 As XElement = co.XPathSelectElement _  \n    (\".//Customer[@CustomerID=/Root/Orders/Order[12]/CustomerID]\")  \n  \nIf customer1 Is customer2 And customer1 Is customer3 Then  \n    Console.WriteLine(\"Results are identical\")  \nElse  \n    Console.WriteLine(\"Results differ\")  \nEnd If  \nConsole.WriteLine(customer1)  \n```  \n  \n This example produces the following output:  \n  \n```  \nResults are identical  \n<Customer CustomerID=\"HUNGC\">  \n  <CompanyName>Hungry Coyote Import Store</CompanyName>  \n  <ContactName>Yoshi Latimer</ContactName>  \n  <ContactTitle>Sales Representative</ContactTitle>  \n  <Phone>(503) 555-6874</Phone>  \n  <Fax>(503) 555-2376</Fax>  \n  <FullAddress>  \n    <Address>City Center Plaza 516 Main St.</Address>  \n    <City>Elgin</City>  \n    <Region>OR</Region>  \n    <PostalCode>97827</PostalCode>  \n    <Country>USA</Country>  \n  </FullAddress>  \n</Customer>  \n```  \n  \n## See also\n\n- [LINQ to XML for XPath Users (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)\n","nodes":[{"pos":[4,146],"embed":true,"restype":"x-metadata","content":"title: \"How to: Find Related Elements (XPath-LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: 6b0ef058-d704-48a5-98cd-33f00d088af9","nodes":[{"content":"How to: Find Related Elements (XPath-LINQ to XML) (Visual Basic)","nodes":[{"pos":[0,64],"content":"How to: Find Related Elements (XPath-LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Find Related Elements (XPath-LINQ to XML) (Visual Basic)","pos":[0,64]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[153,217],"content":"How to: Find Related Elements (XPath-LINQ to XML) (Visual Basic)","linkify":"How to: Find Related Elements (XPath-LINQ to XML) (Visual Basic)","nodes":[{"content":"How to: Find Related Elements (XPath-LINQ to XML) (Visual Basic)","pos":[0,64]}]},{"content":"This topic shows how to get an element selecting on an attribute that is referred to by the value of another element.","pos":[218,335]},{"content":"The XPath expression is:","pos":[342,366]},{"pos":[442,449],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[453,541],"content":"This example finds the 12th <ph id=\"ph1\">`Order`</ph> element, and then finds the customer for that order.","source":"This example finds the 12th `Order` element, and then finds the customer for that order."},{"content":"Note that indexing into a list in .NET is 'zero' based.","pos":[548,603]},{"content":"Indexing into a collection of nodes in an XPath predicate is 'one' based.","pos":[604,677]},{"content":"This example reflects this difference.","pos":[678,716]},{"pos":[723,933],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)."},{"content":"This example produces the following output:","pos":[1902,1945]},{"pos":[2470,2478],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2482,2615],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML for XPath Users (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)</ept>","source":"[LINQ to XML for XPath Users (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-to-xml-for-xpath-users.md)"}]}