{"content":"---\ntitle: \"Long Data Type (Visual Basic)\"\nms.date: 01/31/2018\nf1_keywords: \n  - \"vb.Long\"\nhelpviewer_keywords: \n  - \"identifier type characters [Visual Basic], &\"\n  - \"numbers [Visual Basic], whole\"\n  - \"whole numbers\"\n  - \"integral data types [Visual Basic]\"\n  - \"& identifier type character\"\n  - \"integer numbers\"\n  - \"literal type characters [Visual Basic], L\"\n  - \"numbers [Visual Basic], integer\"\n  - \"integers [Visual Basic], data types\"\n  - \"L literal type character [Visual Basic]\"\n  - \"integers [Visual Basic], types\"\n  - \"Long keyword [Visual Basic]\"\n  - \"data types [Visual Basic], integral\"\n  - \"data types [Visual Basic], assigning\"\n  - \"Long data type\"\nms.assetid: b4770c34-1804-4f8c-b512-c10b0893e516\n---\n# Long data type (Visual Basic)\n\nHolds signed 64-bit (8-byte) integers ranging in value from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807 (9.2...E+18).  \n  \n## Remarks\n\n Use the `Long` data type to contain integer numbers that are too large to fit in the `Integer` data type.  \n  \n The default value of `Long` is 0.\n\n## Literal assignments \n\nYou can declare and initialize a `Long` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal. If the integer literal is outside the range of `Long` (that is, if it is less than <xref:System.Int64.MinValue?displayProperty=nameWithType> or greater than <xref:System.Int64.MaxValue?displayProperty=nameWithType>, a compilation error occurs.\n\nIn the following example, integers equal to 4,294,967,296 that are represented as decimal, hexadecimal, and binary literals are assigned to `Long` values.\n  \n[!code-vb[long](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#Long)]  \n\n> [!NOTE]\n> You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.\n\nStarting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-vb[long](../../../../samples/snippets/visualbasic/language-reference/data-types/numeric-literals.vb#LongS)]\n\nStarting with Visual Basic 15.5, you can also use the underscore character (`_`) as a leading separator between the prefix and the hexadecimal, binary, or octal digits. For example:\n\n```vb\nDim number As Long = &H_0FAC_0326_1489_D68C\n```\n\n[!INCLUDE [supporting-underscores](../../../../includes/vb-separator-langversion.md)]\n\nNumeric literals can also include the `L` [type character](../../programming-guide/language-features/data-types/type-characters.md) to denote the `Long` data type, as the following example shows.\n\n```vb\nDim number = &H_0FAC_0326_1489_D68CL\n```\n\n## Programming tips\n\n-   **Interop Considerations.** If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, remember that `Long` has a different data width (32 bits) in other environments. If you are passing a 32-bit argument to such a component, declare it as `Integer` instead of `Long` in your new Visual Basic code.  \n  \n-   **Widening.** The `Long` data type widens to `Decimal`, `Single`, or `Double`. This means you can convert `Long` to any one of these types without encountering a <xref:System.OverflowException?displayProperty=nameWithType> error.  \n  \n-   **Type Characters.** Appending the literal type character `L` to a literal forces it to the `Long` data type. Appending the identifier type character `&` to any identifier forces it to `Long`.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.Int64?displayProperty=nameWithType> structure.  \n\n## See also\n\n- <xref:System.Int64>\n- [Data Types](../../../visual-basic/language-reference/data-types/index.md)\n- [Integer Data Type](../../../visual-basic/language-reference/data-types/integer-data-type.md)\n- [Short Data Type](../../../visual-basic/language-reference/data-types/short-data-type.md)\n- [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)\n- [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n","nodes":[{"pos":[4,716],"embed":true,"restype":"x-metadata","content":"title: \"Long Data Type (Visual Basic)\"\nms.date: 01/31/2018\nf1_keywords: \n  - \"vb.Long\"\nhelpviewer_keywords: \n  - \"identifier type characters [Visual Basic], &\"\n  - \"numbers [Visual Basic], whole\"\n  - \"whole numbers\"\n  - \"integral data types [Visual Basic]\"\n  - \"& identifier type character\"\n  - \"integer numbers\"\n  - \"literal type characters [Visual Basic], L\"\n  - \"numbers [Visual Basic], integer\"\n  - \"integers [Visual Basic], data types\"\n  - \"L literal type character [Visual Basic]\"\n  - \"integers [Visual Basic], types\"\n  - \"Long keyword [Visual Basic]\"\n  - \"data types [Visual Basic], integral\"\n  - \"data types [Visual Basic], assigning\"\n  - \"Long data type\"\nms.assetid: b4770c34-1804-4f8c-b512-c10b0893e516","nodes":[{"content":"Long Data Type (Visual Basic)","nodes":[{"pos":[0,29],"content":"Long Data Type (Visual Basic)","nodes":[{"content":"Long Data Type (Visual Basic)","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[723,752],"content":"Long data type (Visual Basic)","linkify":"Long data type (Visual Basic)","nodes":[{"content":"Long data type (Visual Basic)","pos":[0,29]}]},{"content":"Holds signed 64-bit (8-byte) integers ranging in value from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807 (9.2...E+18).","pos":[754,888]},{"pos":[897,904],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[907,1012],"content":"Use the <ph id=\"ph1\">`Long`</ph> data type to contain integer numbers that are too large to fit in the <ph id=\"ph2\">`Integer`</ph> data type.","source":"Use the `Long` data type to contain integer numbers that are too large to fit in the `Integer` data type."},{"pos":[1019,1052],"content":"The default value of <ph id=\"ph1\">`Long`</ph> is 0.","source":"The default value of `Long` is 0."},{"pos":[1057,1076],"content":"Literal assignments","linkify":"Literal assignments","nodes":[{"content":"Literal assignments","pos":[0,19]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`Long`</ph> variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal.","pos":[1079,1258],"source":"You can declare and initialize a `Long` variable by assigning it a decimal literal, a hexadecimal literal, an octal literal, or (starting with Visual Basic 2017) a binary literal."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`Long`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Int64.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Int64.MaxValue?displayProperty=nameWithType&gt;</ph>, a compilation error occurs.","pos":[1259,1502],"source":" If the integer literal is outside the range of `Long` (that is, if it is less than <xref:System.Int64.MinValue?displayProperty=nameWithType> or greater than <xref:System.Int64.MaxValue?displayProperty=nameWithType>, a compilation error occurs."},{"pos":[1504,1658],"content":"In the following example, integers equal to 4,294,967,296 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`Long`</ph> values.","source":"In the following example, integers equal to 4,294,967,296 that are represented as decimal, hexadecimal, and binary literals are assigned to `Long` values."},{"pos":[1781,1996],"content":"[!NOTE]\nYou use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal. Decimal literals have no prefix.","pos":[8,213],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`&amp;h`</ph> or <ph id=\"ph2\">`&amp;H`</ph> to denote a hexadecimal literal, the prefix <ph id=\"ph3\">`&amp;b`</ph> or <ph id=\"ph4\">`&amp;B`</ph> to denote a binary literal, and the prefix <ph id=\"ph5\">`&amp;o`</ph> or <ph id=\"ph6\">`&amp;O`</ph> to denote an octal literal.","pos":[0,172],"source":"You use the prefix `&h` or `&H` to denote a hexadecimal literal, the prefix `&b` or `&B` to denote a binary literal, and the prefix `&o` or `&O` to denote an octal literal."},{"content":"Decimal literals have no prefix.","pos":[173,205]}]}]},{"pos":[1998,2155],"content":"Starting with Visual Basic 2017, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with Visual Basic 2017, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"content":"Starting with Visual Basic 15.5, you can also use the underscore character (<ph id=\"ph1\">`_`</ph>) as a leading separator between the prefix and the hexadecimal, binary, or octal digits.","pos":[2273,2441],"source":"Starting with Visual Basic 15.5, you can also use the underscore character (`_`) as a leading separator between the prefix and the hexadecimal, binary, or octal digits."},{"content":"For example:","pos":[2442,2454]},{"pos":[2598,2793],"content":"Numeric literals can also include the <ph id=\"ph1\">`L`</ph> <bpt id=\"p1\">[</bpt>type character<ept id=\"p1\">](../../programming-guide/language-features/data-types/type-characters.md)</ept> to denote the <ph id=\"ph2\">`Long`</ph> data type, as the following example shows.","source":"Numeric literals can also include the `L` [type character](../../programming-guide/language-features/data-types/type-characters.md) to denote the `Long` data type, as the following example shows."},{"pos":[2846,2862],"content":"Programming tips","linkify":"Programming tips","nodes":[{"content":"Programming tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Interop Considerations.<ept id=\"p1\">**</ept>","pos":[2868,2895],"source":"**Interop Considerations.**"},{"content":"If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, remember that <ph id=\"ph1\">`Long`</ph> has a different data width (32 bits) in other environments.","pos":[2896,3090],"source":" If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, remember that `Long` has a different data width (32 bits) in other environments."},{"content":"If you are passing a 32-bit argument to such a component, declare it as <ph id=\"ph1\">`Integer`</ph> instead of <ph id=\"ph2\">`Long`</ph> in your new Visual Basic code.","pos":[3091,3221],"source":" If you are passing a 32-bit argument to such a component, declare it as `Integer` instead of `Long` in your new Visual Basic code."},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[3231,3244],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`Long`</ph> data type widens to <ph id=\"ph2\">`Decimal`</ph>, <ph id=\"ph3\">`Single`</ph>, or <ph id=\"ph4\">`Double`</ph>.","pos":[3245,3309],"source":" The `Long` data type widens to `Decimal`, `Single`, or `Double`."},{"content":"This means you can convert <ph id=\"ph1\">`Long`</ph> to any one of these types without encountering a <ph id=\"ph2\">&lt;xref:System.OverflowException?displayProperty=nameWithType&gt;</ph> error.","pos":[3310,3460],"source":" This means you can convert `Long` to any one of these types without encountering a <xref:System.OverflowException?displayProperty=nameWithType> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[3470,3490],"source":"**Type Characters.**"},{"content":"Appending the literal type character <ph id=\"ph1\">`L`</ph> to a literal forces it to the <ph id=\"ph2\">`Long`</ph> data type.","pos":[3491,3579],"source":" Appending the literal type character `L` to a literal forces it to the `Long` data type."},{"content":"Appending the identifier type character <ph id=\"ph1\">`&amp;`</ph> to any identifier forces it to <ph id=\"ph2\">`Long`</ph>.","pos":[3580,3662],"source":" Appending the identifier type character `&` to any identifier forces it to `Long`."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[3672,3691],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.Int64?displayProperty=nameWithType&gt;</ph> structure.","pos":[3692,3803],"source":" The corresponding type in the .NET Framework is the <xref:System.Int64?displayProperty=nameWithType> structure."},{"pos":[3810,3818],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3844,3918],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[3921,4014],"content":"<bpt id=\"p1\">[</bpt>Integer Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept>","source":"[Integer Data Type](../../../visual-basic/language-reference/data-types/integer-data-type.md)"},{"pos":[4017,4106],"content":"<bpt id=\"p1\">[</bpt>Short Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/short-data-type.md)</ept>","source":"[Short Data Type](../../../visual-basic/language-reference/data-types/short-data-type.md)"},{"pos":[4109,4217],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[4220,4313],"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept>","source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)"},{"pos":[4316,4446],"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}