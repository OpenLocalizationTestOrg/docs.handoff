<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="collection-type-dependency-properties.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d86237d65dc0416423e60fdea9f1991bceb2f33</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\collection-type-dependency-properties.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3fa2ea2f231cca063bd3e0723a75ae7863de3af8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e44c55781a18d379ecd60733f46465cd314dfe7f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Collection-Type Dependency Properties | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Collection-Type Dependency Properties</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic provides guidance and suggested patterns for how to implement a dependency property where the type of the property is a collection type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Implementing a Collection-Type Dependency Property</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For a dependency property in general, the implementation pattern that you follow is that you define a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> property wrapper, where that property is backed by a <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> identifier rather than a field or other construct.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You follow this same pattern when you implement a collection-type property.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, a collection-type property introduces some complexity to the pattern whenever the type that is contained within the collection is itself a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> derived class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializing the Collection Beyond the Default Value</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you create a dependency property, you do not specify the property default value as the initial field value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Instead, you specify the default value through the dependency property metadata.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If your property is a reference type, the default value specified in dependency property metadata is not a default value per instance; instead it is a default value that applies to all instances of the type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Therefore you must be careful to not use the singular static collection defined by the collection property metadata as the working default value for newly created instances of your type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Instead, you must make sure that you deliberately set the collection value to a unique (instance) collection as part of your class constructor logic.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Otherwise you will have created an unintentional singleton class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Consider the following example.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following section of the example shows the definition for a class <ph id="ph1">`Aquarium`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The class defines the collection type dependency property <ph id="ph1">`AquariumObjects`</ph>, which uses the generic <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> type with a <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> type constraint.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%28System.String%2CSystem.Type%2CSystem.Type%2CSystem.Windows.PropertyMetadata%29&gt;</ph> call for the dependency property, the metadata establishes the default value to be a new generic <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, if you just left the code as shown, that single list default value is shared for all instances of <ph id="ph1">`Aquarium`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you ran the following test code, which is intended to show how you would instantiate two separate <ph id="ph1">`Aquarium`</ph> instances and add a single different <ph id="ph2">`Fish`</ph> to each of them, you would see a surprising result:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Instead of each collection having a count of one, each collection has a count of two!</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is because each <ph id="ph1">`Aquarium`</ph> added its <ph id="ph2">`Fish`</ph> to the default value collection, which resulted from a single constructor call in the metadata and is therefore shared between all instances.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This situation is almost never what you want.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To correct this problem, you must reset the collection dependency property value to a unique instance, as part of the class constructor call.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Because the property is a read-only dependency property, you use the <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29&gt;</ph> method to set it, using the <ph id="ph2">&lt;xref:System.Windows.DependencyPropertyKey&gt;</ph> that is only accessible within the class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Now, if you ran that same test code again, you could see more expected results, where each <ph id="ph1">`Aquarium`</ph> supported its own unique collection.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>There would be a slight variation on this pattern if you chose to have your collection property be read-write.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In that case, you could call the public set accessor from the constructor to do the initialization, which would still be calling the nonkey signature of <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyProperty%2CSystem.Object%29&gt;</ph> within your set wrapper, using a public <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> identifier.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Reporting Binding Value Changes from Collection Properties</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A collection property that is itself a dependency property does not automatically report changes to its subproperties.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you are creating bindings into a collection, this can prevent the binding from reporting changes, thus invalidating some data binding scenarios.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, if you use the collection type <ph id="ph1">&lt;xref:System.Windows.FreezableCollection%601&gt;</ph> as your collection type, then subproperty changes to contained elements in the collection are properly reported, and binding works as expected.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To enable subproperty binding in a dependency object collection, create the collection property as type <ph id="ph1">&lt;xref:System.Windows.FreezableCollection%601&gt;</ph>, with a type constraint for that collection to any <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph> derived class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FreezableCollection%601&gt;</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML and Custom Classes for WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](../../../../docs/framework/wpf/advanced/custom-dependency-properties.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-metadata.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>