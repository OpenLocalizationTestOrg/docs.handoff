{"content":"---\ntitle: \"Constant and Literal Data Types (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"declaring constants, literal data types\"\n  - \"data types [Visual Basic], declaring\"\n  - \"constants, declaring\"\n  - \"explicit declarations\"\n  - \"literals, coercing data type\"\n  - \"declarations, data types\"\nms.assetid: 057206d2-3a5b-40b9-b3af-57446f9b52fa\ncaps.latest.revision: 19\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Constant and Literal Data Types (Visual Basic)\nA literal is a value that is expressed as itself rather than as a variable's value or the result of an expression, such as the number 3 or the string \"Hello\". A constant is a meaningful name that takes the place of a literal and retains this same value throughout the program, as opposed to a variable, whose value may change.  \n  \n When [Option Infer](../../../../visual-basic/language-reference/statements/option-infer-statement.md) is `Off` and [Option Strict](../../../../visual-basic/language-reference/statements/option-strict-statement.md) is `On`, you must declare all constants explicitly with a data type. In the following example, the data type of `MyByte` is explicitly declared as data type `Byte`:  \n  \n [!code-vb[VbVbalrConstants#1](../../../../visual-basic/programming-guide/language-features/constants-enums/codesnippet/VisualBasic/constant-and-literal-data-types_1.vb)]  \n  \n When `Option Infer` is `On` or `Option Strict` is `Off`, you can declare a constant without specifying a data type with an `As` clause. The compiler determines the type of the constant from the type of the expression. A numeric integer literal is cast by default to the `Integer` data type. The default data type for floating-point numbers is `Double`, and the keywords `True` and `False` specify a `Boolean` constant.  \n  \n## Literals and Type Coercion  \n In some cases, you might want to force a literal to a particular data type; for example, when assigning a particularly large integral literal value to a variable of type `Decimal`. The following example produces an error:  \n  \n```  \nDim myDecimal as Decimal  \nmyDecimal = 100000000000000000000   ' This causes a compiler error.  \n```  \n  \n The error results from the representation of the literal. The `Decimal` data type can hold a value this large, but the literal is implicitly represented as a `Long`, which cannot.  \n  \n You can coerce a literal to a particular data type in two ways: by appending a type character to it, or by placing it within enclosing characters. A type character or enclosing characters must immediately precede and/or follow the literal, with no intervening space or characters of any kind.  \n  \n To make the previous example work, you can append the `D` type character to the literal, which causes it to be represented as a `Decimal`:  \n  \n [!code-vb[VbVbalrConstants#2](../../../../visual-basic/programming-guide/language-features/constants-enums/codesnippet/VisualBasic/constant-and-literal-data-types_2.vb)]  \n  \n The following example demonstrates correct usage of type characters and enclosing characters:  \n  \n [!code-vb[VbVbalrConstants#3](../../../../visual-basic/programming-guide/language-features/constants-enums/codesnippet/VisualBasic/constant-and-literal-data-types_3.vb)]  \n  \n The following table shows the enclosing characters and type characters available in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)].  \n  \n|Data type|Enclosing character|Appended type character|  \n|---|---|---|  \n|`Boolean`|(none)|(none)|  \n|`Byte`|(none)|(none)|  \n|`Char`|\"|C|  \n|`Date`|#|(none)|  \n|`Decimal`|(none)|D or @|  \n|`Double`|(none)|R or #|  \n|`Integer`|(none)|I or %|  \n|`Long`|(none)|L or &|  \n|`Short`|(none)|S|  \n|`Single`|(none)|F or !|  \n|`String`|\"|(none)|  \n  \n## See Also  \n [User-Defined Constants](../../../../visual-basic/programming-guide/language-features/constants-enums/user-defined-constants.md)   \n [How to: Declare A Constant](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-a-constant.md)   \n [Constants Overview](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)   \n [Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md)   \n [Option Explicit Statement](../../../../visual-basic/language-reference/statements/option-explicit-statement.md)   \n [Enumerations Overview](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-overview.md)   \n [How to: Declare an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md)   \n [Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)   \n [Data Types](../../../../visual-basic/language-reference/data-types/data-type-summary.md)   \n [Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)","nodes":[{"pos":[12,75],"content":"Constant and Literal Data Types (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Constant and Literal Data Types (Visual Basic) | Microsoft Docs","pos":[0,63]}]},{"pos":[780,826],"content":"Constant and Literal Data Types (Visual Basic)","linkify":"Constant and Literal Data Types (Visual Basic)","nodes":[{"content":"Constant and Literal Data Types (Visual Basic)","pos":[0,46]}]},{"content":"A literal is a value that is expressed as itself rather than as a variable's value or the result of an expression, such as the number 3 or the string \"Hello\".","pos":[827,985]},{"content":"A constant is a meaningful name that takes the place of a literal and retains this same value throughout the program, as opposed to a variable, whose value may change.","pos":[986,1153]},{"content":"When <bpt id=\"p1\">[</bpt>Option Infer<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> is <ph id=\"ph1\">`Off`</ph> and <bpt id=\"p2\">[</bpt>Option Strict<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept> is <ph id=\"ph2\">`On`</ph>, you must declare all constants explicitly with a data type.","pos":[1160,1442],"source":"When [Option Infer](../../../../visual-basic/language-reference/statements/option-infer-statement.md) is `Off` and [Option Strict](../../../../visual-basic/language-reference/statements/option-strict-statement.md) is `On`, you must declare all constants explicitly with a data type."},{"content":"In the following example, the data type of <ph id=\"ph1\">`MyByte`</ph> is explicitly declared as data type <ph id=\"ph2\">`Byte`</ph>:","pos":[1443,1538],"source":" In the following example, the data type of `MyByte` is explicitly declared as data type `Byte`:"},{"pos":[1545,1714],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrConstants#1<ept id=\"p2\">](../../../../visual-basic/programming-guide/language-features/constants-enums/codesnippet/VisualBasic/constant-and-literal-data-types_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrConstants#1](../../../../visual-basic/programming-guide/language-features/constants-enums/codesnippet/VisualBasic/constant-and-literal-data-types_1.vb)]"},{"content":"When <ph id=\"ph1\">`Option Infer`</ph> is <ph id=\"ph2\">`On`</ph> or <ph id=\"ph3\">`Option Strict`</ph> is <ph id=\"ph4\">`Off`</ph>, you can declare a constant without specifying a data type with an <ph id=\"ph5\">`As`</ph> clause.","pos":[1721,1856],"source":"When `Option Infer` is `On` or `Option Strict` is `Off`, you can declare a constant without specifying a data type with an `As` clause."},{"content":"The compiler determines the type of the constant from the type of the expression.","pos":[1857,1938]},{"content":"A numeric integer literal is cast by default to the <ph id=\"ph1\">`Integer`</ph> data type.","pos":[1939,2011],"source":" A numeric integer literal is cast by default to the `Integer` data type."},{"content":"The default data type for floating-point numbers is <ph id=\"ph1\">`Double`</ph>, and the keywords <ph id=\"ph2\">`True`</ph> and <ph id=\"ph3\">`False`</ph> specify a <ph id=\"ph4\">`Boolean`</ph> constant.","pos":[2012,2139],"source":" The default data type for floating-point numbers is `Double`, and the keywords `True` and `False` specify a `Boolean` constant."},{"pos":[2148,2174],"content":"Literals and Type Coercion","linkify":"Literals and Type Coercion","nodes":[{"content":"Literals and Type Coercion","pos":[0,26]}]},{"content":"In some cases, you might want to force a literal to a particular data type; for example, when assigning a particularly large integral literal value to a variable of type <ph id=\"ph1\">`Decimal`</ph>.","pos":[2178,2358],"source":"In some cases, you might want to force a literal to a particular data type; for example, when assigning a particularly large integral literal value to a variable of type `Decimal`."},{"content":"The following example produces an error:","pos":[2359,2399]},{"content":"The error results from the representation of the literal.","pos":[2518,2575]},{"content":"The <ph id=\"ph1\">`Decimal`</ph> data type can hold a value this large, but the literal is implicitly represented as a <ph id=\"ph2\">`Long`</ph>, which cannot.","pos":[2576,2697],"source":" The `Decimal` data type can hold a value this large, but the literal is implicitly represented as a `Long`, which cannot."},{"content":"You can coerce a literal to a particular data type in two ways: by appending a type character to it, or by placing it within enclosing characters.","pos":[2704,2850]},{"content":"A type character or enclosing characters must immediately precede and/or follow the literal, with no intervening space or characters of any kind.","pos":[2851,2996]},{"pos":[3003,3141],"content":"To make the previous example work, you can append the <ph id=\"ph1\">`D`</ph> type character to the literal, which causes it to be represented as a <ph id=\"ph2\">`Decimal`</ph>:","source":"To make the previous example work, you can append the `D` type character to the literal, which causes it to be represented as a `Decimal`:"},{"pos":[3148,3317],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrConstants#2<ept id=\"p2\">](../../../../visual-basic/programming-guide/language-features/constants-enums/codesnippet/VisualBasic/constant-and-literal-data-types_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrConstants#2](../../../../visual-basic/programming-guide/language-features/constants-enums/codesnippet/VisualBasic/constant-and-literal-data-types_2.vb)]"},{"content":"The following example demonstrates correct usage of type characters and enclosing characters:","pos":[3324,3417]},{"pos":[3424,3593],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrConstants#3<ept id=\"p2\">](../../../../visual-basic/programming-guide/language-features/constants-enums/codesnippet/VisualBasic/constant-and-literal-data-types_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrConstants#3](../../../../visual-basic/programming-guide/language-features/constants-enums/codesnippet/VisualBasic/constant-and-literal-data-types_3.vb)]"},{"pos":[3600,3777],"content":"The following table shows the enclosing characters and type characters available in <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.","source":"The following table shows the enclosing characters and type characters available in [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]."},{"content":"Data type","pos":[3784,3793]},{"content":"Enclosing character","pos":[3794,3813]},{"content":"Appended type character","pos":[3814,3837]},{"content":"(none)","pos":[3868,3874]},{"content":"(none)","pos":[3875,3881]},{"content":"(none)","pos":[3893,3899]},{"content":"(none)","pos":[3900,3906]},{"content":"\"","pos":[3918,3919]},{"content":"C","pos":[3920,3921]},{"content":"(none)","pos":[3935,3941]},{"content":"(none)","pos":[3956,3962]},{"content":"D or @","pos":[3963,3969]},{"content":"(none)","pos":[3983,3989]},{"content":"R or #","pos":[3990,3996]},{"content":"(none)","pos":[4011,4017]},{"content":"I or %","pos":[4018,4024]},{"content":"(none)","pos":[4036,4042]},{"content":"L or &amp;","pos":[4043,4049],"source":"L or &"},{"content":"(none)","pos":[4062,4068]},{"content":"S","pos":[4069,4070]},{"content":"(none)","pos":[4084,4090]},{"content":"F or !","pos":[4091,4097]},{"content":"\"","pos":[4111,4112]},{"content":"(none)","pos":[4113,4119]},{"pos":[4129,4137],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>User-Defined Constants<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/user-defined-constants.md)</ept><ph id=\"ph1\"> </ph>","pos":[4141,4270],"source":"[User-Defined Constants](../../../../visual-basic/programming-guide/language-features/constants-enums/user-defined-constants.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Declare A Constant<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-a-constant.md)</ept><ph id=\"ph1\"> </ph>","pos":[4273,4410],"source":" [How to: Declare A Constant](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-a-constant.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Constants Overview<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[4413,4535],"source":" [Constants Overview](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Option Strict Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[4538,4648],"source":" [Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Option Explicit Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-explicit-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[4651,4765],"source":" [Option Explicit Statement](../../../../visual-basic/language-reference/statements/option-explicit-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Enumerations Overview<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[4768,4896],"source":" [Enumerations Overview](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-overview.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Declare an Enumeration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md)</ept><ph id=\"ph1\"> </ph>","pos":[4899,5042],"source":" [How to: Declare an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Enumerations and Name Qualification<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept><ph id=\"ph1\"> </ph>","pos":[5045,5201],"source":" [Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id=\"ph1\"> </ph>","pos":[5204,5295],"source":" [Data Types](../../../../visual-basic/language-reference/data-types/data-type-summary.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Constants and Enumerations<ept id=\"p1\">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept>","pos":[5298,5402],"source":" [Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)"}]}