<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e67f30bb72d14d832dc24071bce12f9226c412aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\transactions\committing-a-transaction-in-single-phase-and-multi-phase.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">113bbd9b0c63b53c6dfcf893d0c4816370a2ced5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d93cdc8483ac82baafd63ea37511d44e02cbcc2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Committing a Transaction in Single-Phase and Multi-Phase | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Committing a Transaction in Single-Phase and Multi-Phase</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Each resource used in a transaction is managed by a resource manager (RM), whose actions are coordinated by a transaction manager (TM).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Enlisting Resources as Participants in a Transaction<ept id="p1">](../../../../docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md)</ept> topic discusses how a resource (or multiple resources) can be enlisted in a transaction.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic discusses how transaction commitment can be coordinated among enlisted resources.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>At the end of the transaction, the application requests the transaction to be either committed or rolled back.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The transaction manager must eliminate risks like some resource managers voting to commit while others voting to roll back the transaction.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If your transaction involves more than one resource, you must perform a two-phase commit (2PC).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The two-phase commit protocol (the prepare phase and the commit phase) ensures that when the transaction ends, all changes to all resources are either totally committed or fully rolled back.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>All the participants are then informed of the final result.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a detailed discussion of the two-phase commit protocol, please consult the book "<bpt id="p1">*</bpt>Transaction Processing : Concepts and Techniques (Morgan Kaufmann Series in Data Management Systems) ISBN:1558601902<ept id="p1">*</ept>" by Jim Gray.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can also optimize your transaction's performance by taking part in the Single Phase Commit protocol.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Optimization using Single Phase Commit and Promotable Single Phase Notification<ept id="p1">](../../../../docs/framework/data/transactions/optimization-spc-and-promotable-spn.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you just want to be informed of a transaction's outcome, and do not want to participate in voting, you should register for the <ph id="ph1">&lt;xref:System.Transactions.Transaction.TransactionCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Two-phase Commit (2PC)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the first transaction phase, the transaction manager queries each resource to determine whether a transaction should be committed or rolled back.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the second transaction phase, the transaction manager notifies each resource of the outcome of its queries, allowing it to perform any necessary cleanup.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To participate in this kind of transaction, a resource manager must implement the <ph id="ph1">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> interface, which provides methods that are called by the TM as notifications during a 2PC.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following sample shows an example of such implementation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Tx_Enlist#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Tx_Enlist#2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Prepare phase (Phase 1)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Upon receiving a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> request from the application, the transaction manager begins the Prepare phase of all the enlisted participants by calling the <ph id="ph2">&lt;xref:System.Transactions.IEnlistmentNotification.Prepare%2A&gt;</ph> method on each enlisted resource, in order to obtain each resource's vote on the transaction.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Your resource manager that implements the <ph id="ph1">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> interface should first implement the <ph id="ph2">&lt;xref:System.Transactions.IEnlistmentNotification.Prepare%28System.Transactions.PreparingEnlistment%29&gt;</ph> method as the following simple example shows.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the durable resource manager receives this call, it should log the transaction's recovery information (available by retrieving the <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A&gt;</ph> property) and whatever information is necessary to complete the transaction on commit.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This does not need to be performed within the <ph id="ph1">&lt;xref:System.Transactions.IEnlistmentNotification.Prepare%2A&gt;</ph> method because the RM can do this on a worker thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the RM has finished its prepare work, it should vote to commit or roll back by calling the <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Transactions.PreparingEnlistment.ForceRollback%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment&gt;</ph> class inherits a <ph id="ph2">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method from the <ph id="ph3">&lt;xref:System.Transactions.Enlistment&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you call this method on the <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment&gt;</ph> callback during the Prepare phase, it informs the TM that it is a Read-Only enlistment (that is, resource managers that can read but cannot update transaction-protected data) and the RM receives no further notifications from the transaction manager as to the outcome of the transaction in phase 2.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The application is told of the successful commitment of the transaction after all the resource managers vote <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Commit phase (Phase 2)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the second phase of the transaction, if the transaction manager receives successful prepares from all the resource managers (all the resource managers have invoked <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> at the end of phase 1), it invokes the <ph id="ph2">&lt;xref:System.Transactions.IEnlistmentNotification.Commit%2A&gt;</ph> method for each resource manager.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The resource managers can then make the changes durable and complete the commit.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If any resource manager reported a failure to prepare in phase 1, the transaction manager invokes the <ph id="ph1">&lt;xref:System.Transactions.IEnlistmentNotification.Rollback%2A&gt;</ph> method for each resource manager and indicates the failure of the commit to the application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Thus, your resource manager should implement the following methods.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The RM should perform any work necessary to finish the transaction based on the notification type, and inform the TM that it has finished by calling <ph id="ph1">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.Transactions.Enlistment&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This work can be done on a worker thread.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that the phase 2 notifications can happen inline on the same thread that called the <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> method in phase 1.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As such, you should not do any work after the <ph id="ph1">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Implementing InDoubt</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Finally, you should implement the <ph id="ph1">&lt;xref:System.Transactions.IEnlistmentNotification.InDoubt%2A&gt;</ph> method for the volatile resource manager.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This method is called if the transaction manager loses contact with one or more participants, so their status is unknown.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If this occurs, you should log this fact so that you can investigate later whether any of the transaction participants has been left in an inconsistent state.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Single Phase Commit Optimization</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The Single Phase Commit protocol is more efficient at run time because all updates are done without any explicit coordination.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information on this protocol, see <bpt id="p1">[</bpt>Optimization using Single Phase Commit and Promotable Single Phase Notification<ept id="p1">](../../../../docs/framework/data/transactions/optimization-spc-and-promotable-spn.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Optimization using Single Phase Commit and Promotable Single Phase Notification<ept id="p1">](../../../../docs/framework/data/transactions/optimization-spc-and-promotable-spn.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Enlisting Resources as Participants in a Transaction<ept id="p1">](../../../../docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>