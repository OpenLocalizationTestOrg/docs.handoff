{"content":"---\ntitle: \"double (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"double\"\n  - \"double_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"double data type [C#]\"\nms.assetid: 0980e11b-6004-4102-abcf-cfc280fc6991\ncaps.latest.revision: 26\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# double (C# Reference)\nThe `double` keyword signifies a simple type that stores 64-bit floating-point values. The following table shows the precision and approximate range for the `double` type.  \n  \n|Type|Approximate range|Precision|.NET Framework type|  \n|----------|-----------------------|---------------|-------------------------|  \n|`double`|±5.0 × 10<sup>−324</sup> to ±1.7 × 10<sup>308</sup>|15-16 digits|<xref:System.Double?displayProperty=fullName>|  \n  \n## Literals  \n By default, a real numeric literal on the right side of the assignment operator is treated as `double`. However, if you want an integer number to be treated as `double`, use the suffix d or D, for example:  \n  \n```  \n  \ndouble x = 3D;  \n```  \n  \n## Conversions  \n You can mix numeric integral types and floating-point types in an expression. In this case, the integral types are converted to floating-point types. The evaluation of the expression is performed according to the following rules:  \n  \n-   If one of the floating-point types is `double`, the expression evaluates to `double`, or [bool](../../../csharp/language-reference/keywords/bool.md) in relational or Boolean expressions.  \n  \n-   If there is no `double` type in the expression, it evaluates to [float](../../../csharp/language-reference/keywords/float.md), or [bool](../../../csharp/language-reference/keywords/bool.md) in relational or Boolean expressions.  \n  \n A floating-point expression can contain the following sets of values:  \n  \n-   Positive and negative zero.  \n  \n-   Positive and negative infinity.  \n  \n-   Not-a-Number value (NaN).  \n  \n-   The finite set of nonzero values.  \n  \n For more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the [IEEE](http://go.microsoft.com/fwlink/?LinkId=26269) Web site.  \n  \n## Example  \n In the following example, an [int](../../../csharp/language-reference/keywords/int.md), a [short](../../../csharp/language-reference/keywords/short.md), a [float](../../../csharp/language-reference/keywords/float.md), and a `double` are added together giving a `double` result.  \n  \n [!code-cs[csrefKeywordsTypes#9](../../../csharp/language-reference/keywords/codesnippet/CSharp/double_1.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Floating-Point Types Table](../../../csharp/language-reference/keywords/floating-point-types-table.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)","nodes":[{"pos":[12,50],"content":"double (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"double (C# Reference) | Microsoft Docs","pos":[0,38]}]},{"pos":[577,598],"content":"double (C# Reference)","linkify":"double (C# Reference)","nodes":[{"content":"double (C# Reference)","pos":[0,21]}]},{"content":"The <ph id=\"ph1\">`double`</ph> keyword signifies a simple type that stores 64-bit floating-point values.","pos":[599,685],"source":"The `double` keyword signifies a simple type that stores 64-bit floating-point values."},{"content":"The following table shows the precision and approximate range for the <ph id=\"ph1\">`double`</ph> type.","pos":[686,770],"source":" The following table shows the precision and approximate range for the `double` type."},{"content":"Type","pos":[777,781]},{"content":"Approximate range","pos":[782,799]},{"content":"Precision","pos":[800,809]},{"content":".NET Framework type","pos":[810,829]},{"pos":[924,975],"content":"±5.0 × 10<bpt id=\"p1\">&lt;sup&gt;</bpt>−324<ept id=\"p1\">&lt;/sup&gt;</ept> to ±1.7 × 10<bpt id=\"p2\">&lt;sup&gt;</bpt>308<ept id=\"p2\">&lt;/sup&gt;</ept>","source":"±5.0 × 10<sup>−324</sup> to ±1.7 × 10<sup>308</sup>"},{"content":"15-16 digits","pos":[976,988]},{"pos":[1044,1052],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"By default, a real numeric literal on the right side of the assignment operator is treated as <ph id=\"ph1\">`double`</ph>.","pos":[1056,1159],"source":"By default, a real numeric literal on the right side of the assignment operator is treated as `double`."},{"content":"However, if you want an integer number to be treated as <ph id=\"ph1\">`double`</ph>, use the suffix d or D, for example:","pos":[1160,1261],"source":" However, if you want an integer number to be treated as `double`, use the suffix d or D, for example:"},{"pos":[1305,1316],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"You can mix numeric integral types and floating-point types in an expression.","pos":[1320,1397]},{"content":"In this case, the integral types are converted to floating-point types.","pos":[1398,1469]},{"content":"The evaluation of the expression is performed according to the following rules:","pos":[1470,1549]},{"pos":[1559,1745],"content":"If one of the floating-point types is <ph id=\"ph1\">`double`</ph>, the expression evaluates to <ph id=\"ph2\">`double`</ph>, or <bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../../../csharp/language-reference/keywords/bool.md)</ept> in relational or Boolean expressions.","source":"If one of the floating-point types is `double`, the expression evaluates to `double`, or [bool](../../../csharp/language-reference/keywords/bool.md) in relational or Boolean expressions."},{"pos":[1755,1982],"content":"If there is no <ph id=\"ph1\">`double`</ph> type in the expression, it evaluates to <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept>, or <bpt id=\"p2\">[</bpt>bool<ept id=\"p2\">](../../../csharp/language-reference/keywords/bool.md)</ept> in relational or Boolean expressions.","source":"If there is no `double` type in the expression, it evaluates to [float](../../../csharp/language-reference/keywords/float.md), or [bool](../../../csharp/language-reference/keywords/bool.md) in relational or Boolean expressions."},{"content":"A floating-point expression can contain the following sets of values:","pos":[1989,2058]},{"content":"Positive and negative zero.","pos":[2068,2095]},{"content":"Positive and negative infinity.","pos":[2105,2136]},{"content":"Not-a-Number value (NaN).","pos":[2146,2171]},{"content":"The finite set of nonzero values.","pos":[2181,2214]},{"pos":[2221,2397],"content":"For more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the <bpt id=\"p1\">[</bpt>IEEE<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=26269)</ept> Web site.","source":"For more information about these values, see IEEE Standard for Binary Floating-Point Arithmetic, available on the [IEEE](http://go.microsoft.com/fwlink/?LinkId=26269) Web site."},{"pos":[2406,2413],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2417,2694],"content":"In the following example, an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>, a <bpt id=\"p2\">[</bpt>short<ept id=\"p2\">](../../../csharp/language-reference/keywords/short.md)</ept>, a <bpt id=\"p3\">[</bpt>float<ept id=\"p3\">](../../../csharp/language-reference/keywords/float.md)</ept>, and a <ph id=\"ph1\">`double`</ph> are added together giving a <ph id=\"ph2\">`double`</ph> result.","source":"In the following example, an [int](../../../csharp/language-reference/keywords/int.md), a [short](../../../csharp/language-reference/keywords/short.md), a [float](../../../csharp/language-reference/keywords/float.md), and a `double` are added together giving a `double` result."},{"pos":[2701,2809],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsTypes#9<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/double_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsTypes#9](../../../csharp/language-reference/keywords/codesnippet/CSharp/double_1.cs)]"},{"pos":[2818,2843],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2957,2965],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2969,3029],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3032,3100],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3103,3172],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Default Values Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/default-values-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3175,3268],"source":" [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3271,3364],"source":" [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Floating-Point Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/floating-point-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3367,3472],"source":" [Floating-Point Types Table](../../../csharp/language-reference/keywords/floating-point-types-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3475,3596],"source":" [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","pos":[3599,3719],"source":" [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}