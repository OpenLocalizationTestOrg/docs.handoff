{"content":"---\ntitle: \"BackgroundWorker Component Overview\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nf1_keywords: \n  - \"BackgroundWorker\"\nhelpviewer_keywords: \n  - \"BackgroundWorker component\"\n  - \"background tasks\"\n  - \"Asynchronous Pattern\"\n  - \"forms [Windows Forms], multithreading\"\n  - \"components [Windows Forms], asynchronous\"\n  - \"forms [Windows Forms], background operations\"\n  - \"threading [Windows Forms], background operations\"\n  - \"background operations\"\nms.assetid: 64e9b3ab-7443-4a77-ab17-b8b8c0cb3f62\n---\n# BackgroundWorker Component Overview\nThere are many commonly performed operations that can take a long time to execute. For example:  \n  \n-   Image downloads  \n  \n-   Web service invocations  \n  \n-   File downloads and uploads (including for peer-to-peer applications)  \n  \n-   Complex local computations  \n  \n-   Database transactions  \n  \n-   Local disk access, given its slow speed relative to memory access  \n  \n Operations like these can cause your user interface to hang while they are running. When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> component provides a convenient solution.  \n  \n The <xref:System.ComponentModel.BackgroundWorker> component gives you the ability to execute time-consuming operations asynchronously (\"in the background\"), on a thread different from your application's main UI thread. To use a <xref:System.ComponentModel.BackgroundWorker>, you simply tell it what time-consuming worker method to execute in the background, and then you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method. Your calling thread continues to run normally while the worker method runs asynchronously. When the method is finished, the <xref:System.ComponentModel.BackgroundWorker> alerts the calling thread by firing the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event, which optionally contains the results of the operation.  \n  \n The <xref:System.ComponentModel.BackgroundWorker> component is available from the **Toolbox**, in the **Components** tab. To add a <xref:System.ComponentModel.BackgroundWorker> to your form, drag the <xref:System.ComponentModel.BackgroundWorker> component onto your form. It appears in the component tray, and its properties appear in the **Properties** window.  \n  \n To start your asynchronous operation, use the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method. <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> takes an optional `object` parameter, which can be used to pass arguments to your worker method. The <xref:System.ComponentModel.BackgroundWorker> class exposes the <xref:System.ComponentModel.BackgroundWorker.DoWork> event, to which your worker thread is attached through a <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.  \n  \n The <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler takes a <xref:System.ComponentModel.DoWorkEventArgs> parameter, which has an <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A> property. This property receives the parameter from <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> and can be passed to your worker method, which will be called in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. The following example shows how to assign a result from a worker method called `ComputeFibonacci`. It is part of a larger example, which you can find at [How to: Implement a Form That Uses a Background Operation](how-to-implement-a-form-that-uses-a-background-operation.md).  \n  \n [!code-cpp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]\n [!code-csharp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]\n [!code-vb[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]  \n  \n For more information on using event handlers, see [Events](../../../standard/events/index.md).  \n  \n> [!CAUTION]\n>  When using multithreading of any sort, you potentially expose yourself to very serious and complex bugs. Consult the [Managed Threading Best Practices](../../../standard/threading/managed-threading-best-practices.md) before implementing any solution that uses multithreading.  \n  \n For more information on using the <xref:System.ComponentModel.BackgroundWorker> class, see [How to: Run an Operation in the Background](how-to-run-an-operation-in-the-background.md).  \n  \n## See also\n\n- [Managed Threading](../../../standard/threading/index.md)\n- [Event-based Asynchronous Pattern Overview](../../../standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)\n- [How to: Implement a Form That Uses a Background Operation](how-to-implement-a-form-that-uses-a-background-operation.md)\n","nodes":[{"pos":[4,530],"embed":true,"restype":"x-metadata","content":"title: \"BackgroundWorker Component Overview\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nf1_keywords: \n  - \"BackgroundWorker\"\nhelpviewer_keywords: \n  - \"BackgroundWorker component\"\n  - \"background tasks\"\n  - \"Asynchronous Pattern\"\n  - \"forms [Windows Forms], multithreading\"\n  - \"components [Windows Forms], asynchronous\"\n  - \"forms [Windows Forms], background operations\"\n  - \"threading [Windows Forms], background operations\"\n  - \"background operations\"\nms.assetid: 64e9b3ab-7443-4a77-ab17-b8b8c0cb3f62","nodes":[{"content":"BackgroundWorker Component Overview","nodes":[{"pos":[0,35],"content":"BackgroundWorker Component Overview","nodes":[{"content":"BackgroundWorker Component Overview","pos":[0,35]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[537,572],"content":"BackgroundWorker Component Overview","linkify":"BackgroundWorker Component Overview","nodes":[{"content":"BackgroundWorker Component Overview","pos":[0,35]}]},{"content":"There are many commonly performed operations that can take a long time to execute.","pos":[573,655]},{"content":"For example:","pos":[656,668]},{"content":"Image downloads","pos":[678,693]},{"content":"Web service invocations","pos":[703,726]},{"content":"File downloads and uploads (including for peer-to-peer applications)","pos":[736,804]},{"content":"Complex local computations","pos":[814,840]},{"content":"Database transactions","pos":[850,871]},{"content":"Local disk access, given its slow speed relative to memory access","pos":[881,946]},{"content":"Operations like these can cause your user interface to hang while they are running.","pos":[953,1036]},{"content":"When you want a responsive UI and you are faced with long delays associated with such operations, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component provides a convenient solution.","pos":[1037,1226],"source":" When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> component provides a convenient solution."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component gives you the ability to execute time-consuming operations asynchronously (\"in the background\"), on a thread different from your application's main UI thread.","pos":[1233,1451],"source":"The <xref:System.ComponentModel.BackgroundWorker> component gives you the ability to execute time-consuming operations asynchronously (\"in the background\"), on a thread different from your application's main UI thread."},{"content":"To use a <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, you simply tell it what time-consuming worker method to execute in the background, and then you call the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method.","pos":[1452,1684],"source":" To use a <xref:System.ComponentModel.BackgroundWorker>, you simply tell it what time-consuming worker method to execute in the background, and then you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method."},{"content":"Your calling thread continues to run normally while the worker method runs asynchronously.","pos":[1685,1775]},{"content":"When the method is finished, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> alerts the calling thread by firing the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event, which optionally contains the results of the operation.","pos":[1776,2022],"source":" When the method is finished, the <xref:System.ComponentModel.BackgroundWorker> alerts the calling thread by firing the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event, which optionally contains the results of the operation."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component is available from the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, in the <bpt id=\"p2\">**</bpt>Components<ept id=\"p2\">**</ept> tab. To add a <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to your form, drag the <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component onto your form.","pos":[2029,2300],"source":"The <xref:System.ComponentModel.BackgroundWorker> component is available from the **Toolbox**, in the **Components** tab. To add a <xref:System.ComponentModel.BackgroundWorker> to your form, drag the <xref:System.ComponentModel.BackgroundWorker> component onto your form."},{"content":"It appears in the component tray, and its properties appear in the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window.","pos":[2301,2390],"source":" It appears in the component tray, and its properties appear in the **Properties** window."},{"content":"To start your asynchronous operation, use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method.","pos":[2397,2514],"source":"To start your asynchronous operation, use the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> takes an optional <ph id=\"ph2\">`object`</ph> parameter, which can be used to pass arguments to your worker method.","pos":[2515,2675],"source":"<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> takes an optional `object` parameter, which can be used to pass arguments to your worker method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class exposes the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event, to which your worker thread is attached through a <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.","pos":[2676,2921],"source":" The <xref:System.ComponentModel.BackgroundWorker> class exposes the <xref:System.ComponentModel.BackgroundWorker.DoWork> event, to which your worker thread is attached through a <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler takes a <ph id=\"ph2\">&lt;xref:System.ComponentModel.DoWorkEventArgs&gt;</ph> parameter, which has an <ph id=\"ph3\">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A&gt;</ph> property.","pos":[2928,3142],"source":"The <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler takes a <xref:System.ComponentModel.DoWorkEventArgs> parameter, which has an <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A> property."},{"content":"This property receives the parameter from <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> and can be passed to your worker method, which will be called in the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.","pos":[3143,3385],"source":" This property receives the parameter from <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> and can be passed to your worker method, which will be called in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler."},{"content":"The following example shows how to assign a result from a worker method called <ph id=\"ph1\">`ComputeFibonacci`</ph>.","pos":[3386,3484],"source":" The following example shows how to assign a result from a worker method called `ComputeFibonacci`."},{"content":"It is part of a larger example, which you can find at <bpt id=\"p1\">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id=\"p1\">](how-to-implement-a-form-that-uses-a-background-operation.md)</ept>.","pos":[3485,3660],"source":" It is part of a larger example, which you can find at [How to: Implement a Form That Uses a Background Operation](how-to-implement-a-form-that-uses-a-background-operation.md)."},{"pos":[3667,4163],"content":"[!code-cpp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]\n[!code-csharp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]\n[!code-vb[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]","leadings":[""," "," "],"nodes":[]},{"pos":[4170,4264],"content":"For more information on using event handlers, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../standard/events/index.md)</ept>.","source":"For more information on using event handlers, see [Events](../../../standard/events/index.md)."},{"pos":[4272,4561],"content":"[!CAUTION]\n When using multithreading of any sort, you potentially expose yourself to very serious and complex bugs. Consult the [Managed Threading Best Practices](../../../standard/threading/managed-threading-best-practices.md) before implementing any solution that uses multithreading.","leadings":["","> "],"nodes":[{"content":"When using multithreading of any sort, you potentially expose yourself to very serious and complex bugs. Consult the [Managed Threading Best Practices](../../../standard/threading/managed-threading-best-practices.md) before implementing any solution that uses multithreading.","pos":[12,287],"nodes":[{"content":"When using multithreading of any sort, you potentially expose yourself to very serious and complex bugs.","pos":[0,104]},{"content":"Consult the <bpt id=\"p1\">[</bpt>Managed Threading Best Practices<ept id=\"p1\">](../../../standard/threading/managed-threading-best-practices.md)</ept> before implementing any solution that uses multithreading.","pos":[105,275],"source":" Consult the [Managed Threading Best Practices](../../../standard/threading/managed-threading-best-practices.md) before implementing any solution that uses multithreading."}]}]},{"pos":[4568,4750],"content":"For more information on using the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class, see <bpt id=\"p1\">[</bpt>How to: Run an Operation in the Background<ept id=\"p1\">](how-to-run-an-operation-in-the-background.md)</ept>.","source":"For more information on using the <xref:System.ComponentModel.BackgroundWorker> class, see [How to: Run an Operation in the Background](how-to-run-an-operation-in-the-background.md)."},{"pos":[4759,4767],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4771,4828],"content":"<bpt id=\"p1\">[</bpt>Managed Threading<ept id=\"p1\">](../../../standard/threading/index.md)</ept>","source":"[Managed Threading](../../../standard/threading/index.md)"},{"pos":[4831,4972],"content":"<bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](../../../standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>","source":"[Event-based Asynchronous Pattern Overview](../../../standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)"},{"pos":[4975,5095],"content":"<bpt id=\"p1\">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id=\"p1\">](how-to-implement-a-form-that-uses-a-background-operation.md)</ept>","source":"[How to: Implement a Form That Uses a Background Operation](how-to-implement-a-form-that-uses-a-background-operation.md)"}]}