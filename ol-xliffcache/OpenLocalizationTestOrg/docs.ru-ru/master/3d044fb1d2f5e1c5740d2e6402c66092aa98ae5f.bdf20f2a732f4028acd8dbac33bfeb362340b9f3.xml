{"content":"---\ntitle: \"How to: Populate an XML Tree from the File System (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 2aa2ccac-4a22-47ae-9107-3bb8df232576\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Populate an XML Tree from the File System (C#)\nA common and useful application of XML trees is as a hierarchical name/value data store. You can populate an XML tree with hierarchical data, and then query it, transform it, and if necessary, serialize it. In this usage scenario, many of the XML specific semantics, such as namespaces and white space behavior, are not important. Instead, you are using the XML tree as a small, in memory, single user hierarchical database.  \n  \n## Example  \n The following example populates an XML tree from the local file system using recursion. It then queries the tree, calculating the total of the sizes of all files in the tree.  \n  \n```csharp  \nclass Program  \n{  \n    static XElement CreateFileSystemXmlTree(string source)  \n    {  \n        DirectoryInfo di = new DirectoryInfo(source);  \n        return new XElement(\"Dir\",  \n            new XAttribute(\"Name\", di.Name),  \n            from d in Directory.GetDirectories(source)  \n            select CreateFileSystemXmlTree(d),  \n            from fi in di.GetFiles()  \n            select new XElement(\"File\",  \n                new XElement(\"Name\", fi.Name),  \n                new XElement(\"Length\", fi.Length)  \n            )  \n        );  \n    }  \n  \n    static void Main(string[] args)  \n    {  \n        XElement fileSystemTree = CreateFileSystemXmlTree(\"C:/Tmp\");  \n        Console.WriteLine(fileSystemTree);  \n        Console.WriteLine(\"------\");  \n        long totalFileSize =  \n            (from f in fileSystemTree.Descendants(\"File\")  \n             select (long)f.Element(\"Length\")).Sum();  \n        Console.WriteLine(\"Total File Size:{0}\", totalFileSize);  \n    }  \n}  \n```  \n  \n This example produces output similar to the following:  \n  \n```xml  \n<Dir Name=\"Tmp\">  \n  <Dir Name=\"ConsoleApplication1\">  \n    <Dir Name=\"bin\">  \n      <Dir Name=\"Debug\">  \n        <File>  \n          <Name>ConsoleApplication1.exe</Name>  \n          <Length>4608</Length>  \n        </File>  \n        <File>  \n          <Name>ConsoleApplication1.pdb</Name>  \n          <Length>11776</Length>  \n        </File>  \n        <File>  \n          <Name>ConsoleApplication1.vshost.exe</Name>  \n          <Length>9568</Length>  \n        </File>  \n        <File>  \n          <Name>ConsoleApplication1.vshost.exe.manifest</Name>  \n          <Length>473</Length>  \n        </File>  \n      </Dir>  \n    </Dir>  \n    <Dir Name=\"obj\">  \n      <Dir Name=\"Debug\">  \n        <Dir Name=\"TempPE\" />  \n        <File>  \n          <Name>ConsoleApplication1.csproj.FileListAbsolute.txt</Name>  \n          <Length>322</Length>  \n        </File>  \n        <File>  \n          <Name>ConsoleApplication1.exe</Name>  \n          <Length>4608</Length>  \n        </File>  \n        <File>  \n          <Name>ConsoleApplication1.pdb</Name>  \n          <Length>11776</Length>  \n        </File>  \n      </Dir>  \n    </Dir>  \n    <Dir Name=\"Properties\">  \n      <File>  \n        <Name>AssemblyInfo.cs</Name>  \n        <Length>1454</Length>  \n      </File>  \n    </Dir>  \n    <File>  \n      <Name>ConsoleApplication1.csproj</Name>  \n      <Length>2546</Length>  \n    </File>  \n    <File>  \n      <Name>ConsoleApplication1.sln</Name>  \n      <Length>937</Length>  \n    </File>  \n    <File>  \n      <Name>ConsoleApplication1.suo</Name>  \n      <Length>10752</Length>  \n    </File>  \n    <File>  \n      <Name>Program.cs</Name>  \n      <Length>269</Length>  \n    </File>  \n  </Dir>  \n</Dir>  \n------  \nTotal File Size:59089  \n```  \n  \n## See Also  \n [Advanced Query Techniques (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)","nodes":[{"pos":[12,83],"content":"How to: Populate an XML Tree from the File System (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Populate an XML Tree from the File System (C#) | Microsoft Docs","pos":[0,71]}]},{"pos":[368,422],"content":"How to: Populate an XML Tree from the File System (C#)","linkify":"How to: Populate an XML Tree from the File System (C#)","nodes":[{"content":"How to: Populate an XML Tree from the File System (C#)","pos":[0,54]}]},{"content":"A common and useful application of XML trees is as a hierarchical name/value data store.","pos":[423,511]},{"content":"You can populate an XML tree with hierarchical data, and then query it, transform it, and if necessary, serialize it.","pos":[512,629]},{"content":"In this usage scenario, many of the XML specific semantics, such as namespaces and white space behavior, are not important.","pos":[630,753]},{"content":"Instead, you are using the XML tree as a small, in memory, single user hierarchical database.","pos":[754,847]},{"pos":[856,863],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example populates an XML tree from the local file system using recursion.","pos":[867,954]},{"content":"It then queries the tree, calculating the total of the sizes of all files in the tree.","pos":[955,1041]},{"content":"This example produces output similar to the following:","pos":[2053,2107]},{"pos":[3846,3854],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3858,3997],"content":"<bpt id=\"p1\">[</bpt>Advanced Query Techniques (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)</ept>","source":"[Advanced Query Techniques (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)"}]}