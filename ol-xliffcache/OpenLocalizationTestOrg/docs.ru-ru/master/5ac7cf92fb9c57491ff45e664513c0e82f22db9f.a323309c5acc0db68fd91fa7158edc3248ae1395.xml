{"content":"---\ntitle: \"CertTimestampAuthenticodeLicense Function\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"CertTimestampAuthenticodeLicense\"\napi_location: \n  - \"clr.dll\"\napi_type: \n  - \"DLLExport\"\nms.assetid: d468325a-21c5-43ce-8567-84e342b22308\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# CertTimestampAuthenticodeLicense Function\nTime-stamps an Authenticode XrML license.  \n  \n## Syntax  \n  \n```  \nHRESULT CertTimestampAuthenticodeLicense (  \n    [in]  PCRYPT_DATA_BLOB   pSignedLicenseBlob,  \n    [in]  LPCWSTR            pwszTimestampURI,  \n    [out] PCRYPT_DATA_BLOB   pTimestampSignatureBlob  \n);  \n```  \n  \n## Parameters  \n `pSignedLicenseBlob`  \n [in] The signed Authenticode XrML license to be time-stamped. See the [CRYPTOAPI_BLOB](/windows/desktop/api/dpapi/ns-dpapi-_cryptoapi_blob) structure.  \n  \n `pwszTimestampURI`  \n [in] The time-stamp server's URI.  \n  \n `pTimestampSignatureBlob`  \n [out] A pointer to CRYPT_DATA_BLOB to receive the base64-encoded time-stamp signature. It is the caller's responsibility to free `pTimestampSignatureBlob`->`pbData` with `HepFree()` after use. See the [CRYPTOAPI_BLOB](/windows/desktop/api/dpapi/ns-dpapi-_cryptoapi_blob) structure.  \n  \n## Remarks  \n The time-stamp signature is actually a PKCS #7 SignedData message whose content is the binary form of the SignatureValue from the license's signature. Basically, this acts as a counter-signature of the license.  \n  \n## Return Value  \n `S_OK` if the function succeeds. Otherwise, returns an error code.  \n  \n## See also\n\n- [Authenticode](../../../../docs/framework/unmanaged-api/authenticode/index.md)\n","nodes":[{"pos":[4,271],"embed":true,"restype":"x-metadata","content":"title: \"CertTimestampAuthenticodeLicense Function\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"CertTimestampAuthenticodeLicense\"\napi_location: \n  - \"clr.dll\"\napi_type: \n  - \"DLLExport\"\nms.assetid: d468325a-21c5-43ce-8567-84e342b22308\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"CertTimestampAuthenticodeLicense Function","nodes":[{"pos":[0,41],"content":"CertTimestampAuthenticodeLicense Function","nodes":[{"content":"CertTimestampAuthenticodeLicense Function","pos":[0,41]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[278,319],"content":"CertTimestampAuthenticodeLicense Function","linkify":"CertTimestampAuthenticodeLicense Function","nodes":[{"content":"CertTimestampAuthenticodeLicense Function","pos":[0,41]}]},{"content":"Time-stamps an Authenticode XrML license.","pos":[320,361]},{"pos":[370,376],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[605,615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The signed Authenticode XrML license to be time-stamped.","pos":[643,704]},{"content":"See the <bpt id=\"p1\">[</bpt>CRYPTOAPI_BLOB<ept id=\"p1\">](/windows/desktop/api/dpapi/ns-dpapi-_cryptoapi_blob)</ept> structure.","pos":[705,793],"source":" See the [CRYPTOAPI_BLOB](/windows/desktop/api/dpapi/ns-dpapi-_cryptoapi_blob) structure."},{"content":"[in] The time-stamp server's URI.","pos":[822,855]},{"content":"[out] A pointer to CRYPT_DATA_BLOB to receive the base64-encoded time-stamp signature.","pos":[891,977]},{"content":"It is the caller's responsibility to free <ph id=\"ph1\">`pTimestampSignatureBlob`</ph><ph id=\"ph2\">-&gt;</ph><ph id=\"ph3\">`pbData`</ph> with <ph id=\"ph4\">`HepFree()`</ph> after use.","pos":[978,1083],"source":" It is the caller's responsibility to free `pTimestampSignatureBlob`->`pbData` with `HepFree()` after use."},{"content":"See the <bpt id=\"p1\">[</bpt>CRYPTOAPI_BLOB<ept id=\"p1\">](/windows/desktop/api/dpapi/ns-dpapi-_cryptoapi_blob)</ept> structure.","pos":[1084,1172],"source":" See the [CRYPTOAPI_BLOB](/windows/desktop/api/dpapi/ns-dpapi-_cryptoapi_blob) structure."},{"pos":[1181,1188],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The time-stamp signature is actually a PKCS #7 SignedData message whose content is the binary form of the SignatureValue from the license's signature.","pos":[1192,1342]},{"content":"Basically, this acts as a counter-signature of the license.","pos":[1343,1402]},{"pos":[1411,1423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"<ph id=\"ph1\">`S_OK`</ph> if the function succeeds.","pos":[1427,1459],"source":"`S_OK` if the function succeeds."},{"content":"Otherwise, returns an error code.","pos":[1460,1493]},{"pos":[1502,1510],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1514,1592],"content":"<bpt id=\"p1\">[</bpt>Authenticode<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/authenticode/index.md)</ept>","source":"[Authenticode](../../../../docs/framework/unmanaged-api/authenticode/index.md)"}]}