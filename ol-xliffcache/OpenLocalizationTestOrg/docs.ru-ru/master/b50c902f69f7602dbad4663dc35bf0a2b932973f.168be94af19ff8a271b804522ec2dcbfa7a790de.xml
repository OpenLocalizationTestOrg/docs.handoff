{"content":"---\ntitle: \"Char Data Type (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Char\"\nhelpviewer_keywords: \n  - \"literal type characters [Visual Basic], C\"\n  - \"Char data type\"\n  - \"C literal type character [Visual Basic]\"\n  - \"data types [Visual Basic], assigning\"\n  - \"Char data type [Visual Basic], character literals\"\nms.assetid: cd7547a9-7855-4e8e-b216-35d74a362657\n---\n# Char Data Type (Visual Basic)\nHolds unsigned 16-bit (2-byte) code points ranging in value from 0 through 65535. Each *code point*, or character code, represents a single Unicode character.  \n  \n## Remarks  \n Use the `Char` data type when you need to hold only a single character and do not need the overhead of `String`. In some cases you can use `Char()`, an array of `Char` elements, to hold multiple characters.  \n  \n The default value of `Char` is the character with a code point of 0.  \n  \n## Unicode Characters  \n The first 128 code points (0–127) of Unicode correspond to the letters and symbols on a standard U.S. keyboard. These first 128 code points are the same as those the ASCII character set defines. The second 128 code points (128–255) represent special characters, such as Latin-based alphabet letters, accents, currency symbols, and fractions. Unicode uses the remaining code points (256-65535) for a wide variety of symbols, including worldwide textual characters, diacritics, and mathematical and technical symbols.  \n  \n You can use methods like <xref:System.Char.IsDigit%2A> and <xref:System.Char.IsPunctuation%2A> on a `Char` variable to determine its Unicode classification.  \n  \n## Type Conversions  \n Visual Basic does not convert directly between `Char` and the numeric types. You can use the <xref:Microsoft.VisualBasic.Strings.Asc%2A> or <xref:Microsoft.VisualBasic.Strings.AscW%2A> function to convert a `Char` value to an `Integer` that represents its code point. You can use the <xref:Microsoft.VisualBasic.Strings.Chr%2A> or <xref:Microsoft.VisualBasic.Strings.ChrW%2A> function to convert an `Integer` value to a `Char` that has that code point.  \n  \n If the type checking switch ([Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)) is on, you must append the literal type character to a single-character string literal to identify it as the `Char` data type. The following example illustrates this.  \n  \n```  \nOption Strict On  \nDim charVar As Char  \n' The following statement attempts to convert a String literal to Char.  \n' Because Option Strict is On, it generates a compiler error.  \ncharVar = \"Z\"  \n' The following statement succeeds because it specifies a Char literal.  \ncharVar = \"Z\"C  \n```  \n  \n## Programming Tips  \n  \n-   **Negative Numbers.** `Char` is an unsigned type and cannot represent a negative value. In any case, you should not use `Char` to hold numeric values.  \n  \n-   **Interop Considerations.** If you interface with components not written for the .NET Framework, for example Automation or COM objects, remember that character types have a different data width (8 bits) in other environments. If you pass an 8-bit argument to such a component, declare it as `Byte` instead of `Char` in your new Visual Basic code.  \n  \n-   **Widening.** The `Char` data type widens to `String`. This means you can convert `Char` to `String` and will not encounter a <xref:System.OverflowException?displayProperty=nameWithType> error.  \n  \n-   **Type Characters.** Appending the literal type character `C` to a single-character string literal forces it to the `Char` data type. `Char` has no identifier type character.  \n  \n-   **Framework Type.** The corresponding type in the .NET Framework is the <xref:System.Char?displayProperty=nameWithType> structure.  \n  \n## See also\n\n- <xref:System.Char?displayProperty=nameWithType>\n- <xref:Microsoft.VisualBasic.Strings.Asc%2A>\n- <xref:Microsoft.VisualBasic.Strings.AscW%2A>\n- <xref:Microsoft.VisualBasic.Strings.Chr%2A>\n- <xref:Microsoft.VisualBasic.Strings.ChrW%2A>\n- [Data Types](../../../visual-basic/language-reference/data-types/index.md)\n- [String Data Type](../../../visual-basic/language-reference/data-types/string-data-type.md)\n- [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)\n- [How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)\n- [Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)\n","nodes":[{"pos":[4,375],"embed":true,"restype":"x-metadata","content":"title: \"Char Data Type (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Char\"\nhelpviewer_keywords: \n  - \"literal type characters [Visual Basic], C\"\n  - \"Char data type\"\n  - \"C literal type character [Visual Basic]\"\n  - \"data types [Visual Basic], assigning\"\n  - \"Char data type [Visual Basic], character literals\"\nms.assetid: cd7547a9-7855-4e8e-b216-35d74a362657","nodes":[{"content":"Char Data Type (Visual Basic)","nodes":[{"pos":[0,29],"content":"Char Data Type (Visual Basic)","nodes":[{"content":"Char Data Type (Visual Basic)","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[382,411],"content":"Char Data Type (Visual Basic)","linkify":"Char Data Type (Visual Basic)","nodes":[{"content":"Char Data Type (Visual Basic)","pos":[0,29]}]},{"content":"Holds unsigned 16-bit (2-byte) code points ranging in value from 0 through 65535.","pos":[412,493]},{"content":"Each <bpt id=\"p1\">*</bpt>code point<ept id=\"p1\">*</ept>, or character code, represents a single Unicode character.","pos":[494,570],"source":" Each *code point*, or character code, represents a single Unicode character."},{"pos":[579,586],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the <ph id=\"ph1\">`Char`</ph> data type when you need to hold only a single character and do not need the overhead of <ph id=\"ph2\">`String`</ph>.","pos":[590,702],"source":"Use the `Char` data type when you need to hold only a single character and do not need the overhead of `String`."},{"content":"In some cases you can use <ph id=\"ph1\">`Char()`</ph>, an array of <ph id=\"ph2\">`Char`</ph> elements, to hold multiple characters.","pos":[703,796],"source":" In some cases you can use `Char()`, an array of `Char` elements, to hold multiple characters."},{"pos":[803,871],"content":"The default value of <ph id=\"ph1\">`Char`</ph> is the character with a code point of 0.","source":"The default value of `Char` is the character with a code point of 0."},{"pos":[880,898],"content":"Unicode Characters","linkify":"Unicode Characters","nodes":[{"content":"Unicode Characters","pos":[0,18]}]},{"content":"The first 128 code points (0–127) of Unicode correspond to the letters and symbols on a standard U.S. keyboard.","pos":[902,1013]},{"content":"These first 128 code points are the same as those the ASCII character set defines.","pos":[1014,1096]},{"content":"The second 128 code points (128–255) represent special characters, such as Latin-based alphabet letters, accents, currency symbols, and fractions.","pos":[1097,1243]},{"content":"Unicode uses the remaining code points (256-65535) for a wide variety of symbols, including worldwide textual characters, diacritics, and mathematical and technical symbols.","pos":[1244,1417]},{"pos":[1424,1580],"content":"You can use methods like <ph id=\"ph1\">&lt;xref:System.Char.IsDigit%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Char.IsPunctuation%2A&gt;</ph> on a <ph id=\"ph3\">`Char`</ph> variable to determine its Unicode classification.","source":"You can use methods like <xref:System.Char.IsDigit%2A> and <xref:System.Char.IsPunctuation%2A> on a `Char` variable to determine its Unicode classification."},{"pos":[1589,1605],"content":"Type Conversions","linkify":"Type Conversions","nodes":[{"content":"Type Conversions","pos":[0,16]}]},{"content":"Visual Basic does not convert directly between <ph id=\"ph1\">`Char`</ph> and the numeric types.","pos":[1609,1685],"source":"Visual Basic does not convert directly between `Char` and the numeric types."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Asc%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Strings.AscW%2A&gt;</ph> function to convert a <ph id=\"ph3\">`Char`</ph> value to an <ph id=\"ph4\">`Integer`</ph> that represents its code point.","pos":[1686,1876],"source":" You can use the <xref:Microsoft.VisualBasic.Strings.Asc%2A> or <xref:Microsoft.VisualBasic.Strings.AscW%2A> function to convert a `Char` value to an `Integer` that represents its code point."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Chr%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Strings.ChrW%2A&gt;</ph> function to convert an <ph id=\"ph3\">`Integer`</ph> value to a <ph id=\"ph4\">`Char`</ph> that has that code point.","pos":[1877,2061],"source":" You can use the <xref:Microsoft.VisualBasic.Strings.Chr%2A> or <xref:Microsoft.VisualBasic.Strings.ChrW%2A> function to convert an `Integer` value to a `Char` that has that code point."},{"content":"If the type checking switch (<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>) is on, you must append the literal type character to a single-character string literal to identify it as the <ph id=\"ph1\">`Char`</ph> data type.","pos":[2068,2330],"source":"If the type checking switch ([Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)) is on, you must append the literal type character to a single-character string literal to identify it as the `Char` data type."},{"content":"The following example illustrates this.","pos":[2331,2370]},{"pos":[2680,2696],"content":"Programming Tips","linkify":"Programming Tips","nodes":[{"content":"Programming Tips","pos":[0,16]}]},{"content":"<bpt id=\"p1\">**</bpt>Negative Numbers.<ept id=\"p1\">**</ept>","pos":[2706,2727],"source":"**Negative Numbers.**"},{"content":"<ph id=\"ph1\">`Char`</ph> is an unsigned type and cannot represent a negative value.","pos":[2728,2793],"source":"`Char` is an unsigned type and cannot represent a negative value."},{"content":"In any case, you should not use <ph id=\"ph1\">`Char`</ph> to hold numeric values.","pos":[2794,2856],"source":" In any case, you should not use `Char` to hold numeric values."},{"content":"<bpt id=\"p1\">**</bpt>Interop Considerations.<ept id=\"p1\">**</ept>","pos":[2866,2893],"source":"**Interop Considerations.**"},{"content":"If you interface with components not written for the .NET Framework, for example Automation or COM objects, remember that character types have a different data width (8 bits) in other environments.","pos":[2894,3091]},{"content":"If you pass an 8-bit argument to such a component, declare it as <ph id=\"ph1\">`Byte`</ph> instead of <ph id=\"ph2\">`Char`</ph> in your new Visual Basic code.","pos":[3092,3212],"source":" If you pass an 8-bit argument to such a component, declare it as `Byte` instead of `Char` in your new Visual Basic code."},{"content":"<bpt id=\"p1\">**</bpt>Widening.<ept id=\"p1\">**</ept>","pos":[3222,3235],"source":"**Widening.**"},{"content":"The <ph id=\"ph1\">`Char`</ph> data type widens to <ph id=\"ph2\">`String`</ph>.","pos":[3236,3276],"source":" The `Char` data type widens to `String`."},{"content":"This means you can convert <ph id=\"ph1\">`Char`</ph> to <ph id=\"ph2\">`String`</ph> and will not encounter a <ph id=\"ph3\">&lt;xref:System.OverflowException?displayProperty=nameWithType&gt;</ph> error.","pos":[3277,3415],"source":" This means you can convert `Char` to `String` and will not encounter a <xref:System.OverflowException?displayProperty=nameWithType> error."},{"content":"<bpt id=\"p1\">**</bpt>Type Characters.<ept id=\"p1\">**</ept>","pos":[3425,3445],"source":"**Type Characters.**"},{"content":"Appending the literal type character <ph id=\"ph1\">`C`</ph> to a single-character string literal forces it to the <ph id=\"ph2\">`Char`</ph> data type.","pos":[3446,3558],"source":" Appending the literal type character `C` to a single-character string literal forces it to the `Char` data type."},{"content":"<ph id=\"ph1\">`Char`</ph> has no identifier type character.","pos":[3559,3599],"source":"`Char` has no identifier type character."},{"content":"<bpt id=\"p1\">**</bpt>Framework Type.<ept id=\"p1\">**</ept>","pos":[3609,3628],"source":"**Framework Type.**"},{"content":"The corresponding type in the .NET Framework is the <ph id=\"ph1\">&lt;xref:System.Char?displayProperty=nameWithType&gt;</ph> structure.","pos":[3629,3739],"source":" The corresponding type in the .NET Framework is the <xref:System.Char?displayProperty=nameWithType> structure."},{"pos":[3748,3756],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3996,4070],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[4073,4164],"content":"<bpt id=\"p1\">[</bpt>String Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/string-data-type.md)</ept>","source":"[String Data Type](../../../visual-basic/language-reference/data-types/string-data-type.md)"},{"pos":[4167,4275],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[4278,4371],"content":"<bpt id=\"p1\">[</bpt>Conversion Summary<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept>","source":"[Conversion Summary](../../../visual-basic/language-reference/keywords/conversion-summary.md)"},{"pos":[4374,4546],"content":"<bpt id=\"p1\">[</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id=\"p1\">](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept>","source":"[How to: Call a Windows Function that Takes Unsigned Types](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)"},{"pos":[4549,4679],"content":"<bpt id=\"p1\">[</bpt>Efficient Use of Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept>","source":"[Efficient Use of Data Types](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)"}]}