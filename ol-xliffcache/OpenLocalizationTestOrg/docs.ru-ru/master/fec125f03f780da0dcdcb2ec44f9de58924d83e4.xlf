<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fec125f03f780da0dcdcb2ec44f9de58924d83e4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\queuing-in-wcf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">141fc961a915e7ba5153f142c8889efa4c8454c4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04e95d6ac9dd674ce003a5bffe6a6bff5dd2739b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Queuing in WCF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Queuing in WCF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This section describes how to use queued communication in <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Queues as a WCF transport binding</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, the contracts specify what is being exchanged.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Contracts are business-dependent or application-specific message exchanges.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The mechanism used to exchange messages (or the "how") is specified in the bindings.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Bindings in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> encapsulate details of the message exchange.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>They expose configuration knobs for the user to control various aspects of the transport or the protocol that the bindings represent.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Queuing in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> is treated like any other transport binding, which is a big advantage for many queuing applications.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Today, many queuing applications are written differently from other remote procedure call (RPC)-style distributed applications, making it harder to follow and maintain.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, the style of writing a distributed application is much the same, making it easier to follow and maintain.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Moreover, by factoring out the mechanism of exchange separately from the business logic, it is easier to configure the transport or make changes to it without affecting application specific code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following figure illustrates the structure of a WCF service and client using MSMQ as a transport.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Queued Application Diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wcf/feature-details/media/distributed-queue-figure.jpg "</bpt>Distributed-Queue-Figure<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As you can see from the preceding figure, the client and service must define only the application semantics, that is, the contract and implementation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The service configures a queued binding with preferred settings.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The client uses the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> to generate a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client to the service and to generate a configuration file that describes the bindings to use to send messages to the service.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Thus, to send a queued message, the client instantiates a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client and invokes an operation on it.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This causes the message to be sent to the transmission queue and transferred to the target queue.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All the complexities of queued communication are hidden from the application that is sending and receiving messages.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Caveats about queued binding in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> include:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>All service operations must be one-way because the default queued binding in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not support duplex communication using queues.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A two-way communication sample (<bpt id="p1">[</bpt>Two-Way Communication<ept id="p1">](../../../../docs/framework/wcf/samples/two-way-communication.md)</ept>) illustrates how to use two one-way contracts to implement duplex communication using queues.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To generate a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client using metadata exchange requires an additional HTTP endpoint on the service so that it can be queried directly to generate the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client and obtain binding information to appropriately configure queued communication.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Based on the queued binding, extra configuration outside of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> is required.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding&gt;</ph> class that is shipped with <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> requires you to configure the bindings as well as minimally configure Message Queuing (MSMQ).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following sections describe the specific queued bindings shipped with <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, which are based on MSMQ.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>MSMQ</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The queued transport in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses MSMQ for its queued communication.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>MSMQ ships as an optional component with Windows and runs as an NT service.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It captures messages for transmission in a transmission queue and for delivery in a target queue.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The MSMQ queue managers implement a reliable message-transfer protocol so that messages are not lost in transmission.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The protocol can be either native or SOAP-based, such as the SOAP Reliable Message Protocol (SRMP).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In MSMQ, queues can be transactional or non-transactional.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A transactional queue allows messages to be captured and delivered in a transaction and then stored durably in the queue.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Messages sent to a transactional queue are transferred exactly once in order.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can use a non-transactional queue to send both volatile and durable messages.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A message sent to a non-transactional queue does not carry any reliable transfer assurances; thus, messages can be lost.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>MSMQ queues can also be secured using a Windows identity registered with the Active Directory directory service.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When installing MSMQ, you can install Active Directory integration, which requires the computer to be part of a Windows domain network.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> MSMQ, see <bpt id="p1">[</bpt>Installing Message Queuing (MSMQ)<ept id="p1">](../../../../docs/framework/wcf/samples/installing-message-queuing-msmq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>NetMsmqBinding</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>netMsmqBinding&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/netmsmqbinding.md)</ept> is the queued binding <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides for two <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoints to communicate using MSMQ.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The binding, therefore, exposes properties that are specific to MSMQ.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, not all MSMQ features and properties are exposed in the <ph id="ph1">`NetMsmqBinding`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The compact <ph id="ph1">`NetMsmqBinding`</ph> is designed with an optimal set of features that most customers should find sufficient.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NetMsmqBinding`</ph> manifests the core queuing concepts discussed thus far in the form of properties on the bindings.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These properties, in turn, communicate to MSMQ how to transfer and deliver the messages.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A discussion of the property categories is in the following sections.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> the conceptual topics that describe specific properties more completely.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>ExactlyOnce and Durable Properties</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ExactlyOnce`</ph> and <ph id="ph2">`Durable`</ph> properties affect how messages are transferred between queues:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ExactlyOnce`</ph>: When set to <ph id="ph2">`true`</ph> (the default), the queued channel ensures that the message, if delivered, is not duplicated.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It also ensures that the message is not lost.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the message cannot be delivered, or the message Time-To Live expires before the message can be delivered, the failed message along with the delivery failure reason is recorded in a dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When set to <ph id="ph1">`false`</ph>, the queued channel makes an effort to transfer the message.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this case, you can optionally choose a dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Durable:`</ph> When set to <ph id="ph2">`true`</ph> (the default), the queued channel ensures that MSMQ stores the message durably on disk.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Thus, if the MSMQ service were to stop and restart, the messages on disk is transferred to the target queue or delivered to the service.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When set to <ph id="ph1">`false`</ph>, the messages are stored in volatile store and are lost on stopping and restarting the MSMQ service.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`ExactlyOnce`</ph> reliable transfer, MSMQ requires the queue to be transactional.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Also, MSMQ requires a transaction to read from a transactional queue.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>As such, when you use the <ph id="ph1">`NetMsmqBinding`</ph>, remember that a transaction is required to send or receive messages when <ph id="ph2">`ExactlyOnce`</ph> is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Similarly, MSMQ requires the queue to be non-transactional for best-effort assurances, such as when <ph id="ph1">`ExactlyOnce`</ph> is <ph id="ph2">`false`</ph> and for volatile messaging.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Thus, when setting <ph id="ph1">`ExactlyOnce`</ph> to <ph id="ph2">`false`</ph> or durable to <ph id="ph3">`false`</ph>, you cannot send or receive using a transaction.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Ensure that the correct queue (transactional or non-transactional) is created based on settings in the bindings.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`ExactlyOnce`</ph> is <ph id="ph2">`true`</ph>, use a transactional queue; otherwise, use a non-transactional queue.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Dead-Letter Queue Properties</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The dead-letter queue is used to store messages that fail delivery.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The user can write compensating logic that reads messages out of the dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Many queuing systems provide for a system-wide dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>MSMQ provides a system-wide non-transactional dead-letter queue for messages that fail delivery to non-transactional queues and a system-wide transactional dead-letter queue for messages that fail delivery to transactional queues.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If multiple clients sending messages to different target queues share the MSMQ service, all messages sent by the clients go to the same dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This is not always preferable.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For better isolation, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> and MSMQ in <ph id="ph2">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph> provide a custom dead-letter queue (or application-specific dead-letter queue) that the user can specify to store messages that fail delivery.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Therefore, different clients do not share the same dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The binding has two properties of interest:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DeadLetterQueue`</ph>: This property is an enumeration that indicates whether a dead-letter queue is requested.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The enumeration also contains the kind of dead-letter queue, if one is requested.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The values are <ph id="ph1">`None`</ph>, <ph id="ph2">`System`</ph>, and <ph id="ph3">`Custom`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> the interpretation of these properties, see <bpt id="p1">[</bpt>Using Dead-Letter Queues to Handle Message Transfer Failures<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-dead-letter-queues-to-handle-message-transfer-failures.md)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CustomDeadLetterQueue`</ph>: This property is the Uniform Resource Identifier (URI) address of the application-specific dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This is required if <ph id="ph1">`DeadLetterQueue`</ph>.<ph id="ph2">`Custom`</ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>is chosen.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Poison Message Handling properties</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When the service reads messages from the target queue under a transaction, the service may fail to process the message for various reasons.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The message is then put back into the queue to be read again.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To deal with messages that fail repeatedly, a set of poison-message handling properties can be configured in the binding.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>There are four properties: <ph id="ph1">`ReceiveRetryCount`</ph>, <ph id="ph2">`MaxRetryCycles`</ph>, <ph id="ph3">`RetryCycleDelay`</ph>, and <ph id="ph4">`ReceiveErrorHandling`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> these properties, see <bpt id="p1">[</bpt>Poison Message Handling<ept id="p1">](../../../../docs/framework/wcf/feature-details/poison-message-handling.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Security Properties</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>MSMQ exposes its own security model, such as access control lists (ACLs) on a queue or sending authenticated messages.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NetMsmqBinding`</ph> exposes these security properties as part of its transport security settings.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>There are two properties in the binding for transport security: <ph id="ph1">`MsmqAuthenticationMode`</ph> and <ph id="ph2">`MsmqProtectionLevel`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Settings in these properties depend on how MSMQ is configured.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Securing Messages Using Transport Security<ept id="p1">](../../../../docs/framework/wcf/feature-details/securing-messages-using-transport-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In addition to transport security, the actual SOAP message itself can be secured using message security.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Securing Messages Using Message Security<ept id="p1">](../../../../docs/framework/wcf/feature-details/securing-messages-using-message-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MsmqTransportSecurity`</ph> also exposes two properties, <ph id="ph2">`MsmqEncryptionAlgorithm`</ph> and <ph id="ph3">`MsmqHashAlgorithm`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>These are enumerations of different algorithms to choose for queue-to-queue transfer encryption of messages and hashing of the signatures.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Other Properties</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In addition to the preceding properties, other MSMQ-specific properties exposed in the binding include:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UseSourceJournal`</ph>: A property to indicate that source journaling is turned on.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Source journaling is an MSMQ feature that keeps track of messages that have been successfully transmitted from the transmission queue.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UseMsmqTracing`</ph>: A property to indicate that MSMQ tracing is turned on.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>MSMQ tracing sends report messages to a report queue each time a message leaves or arrives at a machine hosting an MSMQ queue manager.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`QueueTransferProtocol`</ph>: An enumeration of the protocol to use for queue-to-queue message transfers.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>MSMQ implements a native queue-to-queue transfer protocol and a SOAP-based protocol called SOAP Reliable Messaging Protocol (SRMP).</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>SRMP is used when using HTTP transport for queue-to-queue transfers.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>SRMP secure is used when using HTTPS for queue-to-queue transfers.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UseActiveDirectory`</ph>: A Boolean value to indicate whether the Active Directory must be used for queue address resolution.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>By default, this is off.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Service Endpoints and Queue Addressing<ept id="p1">](../../../../docs/framework/wcf/feature-details/service-endpoints-and-queue-addressing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>MsmqIntegrationBinding</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MsmqIntegrationBinding`</ph> is used when you want a <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint to communicate with an existing MSMQ application written in C, C++, COM, or System.Messaging APIs.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The binding properties are the same as for <ph id="ph1">`NetMsmqBinding`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>However, the following differences apply:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The operation contract for <ph id="ph1">`MsmqIntegrationBinding`</ph> is restricted to taking a single parameter of type <ph id="ph2">&lt;xref:System.ServiceModel.MsmqIntegration.MsmqMessage%601&gt;</ph> where the type parameter is the body type.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Much of MSMQ native message properties are exposed in the <ph id="ph1">&lt;xref:System.ServiceModel.MsmqIntegration.MsmqMessage%601&gt;</ph> for use.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>To help with serialization and deserialization of the message body, serializers such as XML and ActiveX are provided.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Sample Code</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For step by step instructions on how to write WCF services that use MSMQ see the following topics:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Exchange Messages with WCF Endpoints and Message Queuing Applications<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-exchange-messages-with-wcf-endpoints-and-message-queuing-applications.md)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Exchange Queued Messages with WCF Endpoints<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-exchange-queued-messages-with-wcf-endpoints.md)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For a completed code sample illustrating the use of MSMQ in WCF see the following topics:</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Transacted MSMQ Binding<ept id="p1">](../../../../docs/framework/wcf/samples/transacted-msmq-binding.md)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Volatile Queued Communication<ept id="p1">](../../../../docs/framework/wcf/samples/volatile-queued-communication.md)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dead Letter Queues<ept id="p1">](../../../../docs/framework/wcf/samples/dead-letter-queues.md)</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sessions and Queues<ept id="p1">](../../../../docs/framework/wcf/samples/sessions-and-queues.md)</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Two-Way Communication<ept id="p1">](../../../../docs/framework/wcf/samples/two-way-communication.md)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Transacted Batching<ept id="p1">](../../../../docs/framework/wcf/samples/transacted-batching.md)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SRMP<ept id="p1">](../../../../docs/framework/wcf/samples/srmp.md)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Message Security over Message Queuing<ept id="p1">](../../../../docs/framework/wcf/samples/message-security-over-message-queuing.md)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Service Endpoints and Queue Addressing<ept id="p1">](../../../../docs/framework/wcf/feature-details/service-endpoints-and-queue-addressing.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Web Hosting a Queued Application<ept id="p1">](../../../../docs/framework/wcf/feature-details/web-hosting-a-queued-application.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>