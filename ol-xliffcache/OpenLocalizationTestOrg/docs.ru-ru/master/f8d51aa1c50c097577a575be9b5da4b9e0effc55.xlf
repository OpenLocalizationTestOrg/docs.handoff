<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="thread-synchronization.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8d51aa1c50c097577a575be9b5da4b9e0effc55</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\threading\thread-synchronization.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6948e15de8824214d3c1b85673803945718c0b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2ac35772befdb30accc0f32ae06f78b6948568f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Thread Synchronization (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Thread Synchronization (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following sections describe features and classes that can be used to synchronize access to resources in multithreaded applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>One of the benefits of using multiple threads in an application is that each thread executes asynchronously.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows applications, this allows time-consuming tasks to be performed in the background while the application window and controls remain responsive.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For server applications, multithreading provides the ability to handle each incoming request with a different thread.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Otherwise, each new request would not get serviced until the previous request had been fully satisfied.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, the asynchronous nature of threads means that access to resources such as file handles, network connections, and memory must be coordinated.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Otherwise, two or more threads could access the same resource at the same time, each unaware of the other's actions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The result is unpredictable data corruption.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For simple operations on integral numeric data types, synchronizing threads can be accomplished with members of the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For all other data types and non thread-safe resources, multithreading can only be safely performed using the constructs in this topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For background information on multithreaded programming, see:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managed Threading Basics<ept id="p1">](../../../../standard/threading/managed-threading-basics.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Threads and Threading<ept id="p1">](../../../../standard/threading/using-threads-and-threading.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](../../../../standard/threading/managed-threading-best-practices.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The lock Keyword</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The C# <ph id="ph1">`lock`</ph> statement can be used to ensure that a block of code runs to completion without interruption by other threads.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is accomplished by obtaining a mutual-exclusion lock for a given object for the duration of the code block.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`lock`</ph> statement is given an object as an argument, and is followed by a code block that is to be executed by only one thread at a time.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The argument provided to the <ph id="ph1">`lock`</ph> keyword must be an object based on a reference type, and is used to define the scope of the lock.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the example above, the lock scope is limited to this function because no references to the object <ph id="ph1">`lockThis`</ph> exist outside the function.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If such a reference did exist, lock scope would extend to that object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Strictly speaking, the object provided is used solely to uniquely identify the resource being shared among multiple threads, so it can be an arbitrary class instance.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In practice, however, this object usually represents the resource for which thread synchronization is necessary.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, if a container object is to be used by multiple threads, then the container can be passed to lock, and the synchronized code block following the lock would access the container.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As long as other threads locks on the same contain before accessing it, then access to the object is safely synchronized.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Generally, it is best to avoid locking on a <ph id="ph1">`public`</ph> type, or on object instances beyond the control of your application.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`lock(this)`</ph> can be problematic if the instance can be accessed publicly, because code beyond your control may lock on the object as well.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This could create deadlock situations where two or more threads wait for the release of the same object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Locking on a public data type, as opposed to an object, can cause problems for the same reason.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Locking on literal strings is especially risky because literal strings are <bpt id="p1">*</bpt>interned<ept id="p1">*</ept> by the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This means that there is one instance of any given string literal for the entire program, the exact same object represents the literal in all running application domains, on all threads.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>As a result, a lock placed on a string with the same contents anywhere in the application process locks all instances of that string in the application.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>As a result, it is best to lock a private or protected member that is not interned.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Some classes provide members specifically for locking.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Array&gt;</ph> type, for example, provides <ph id="ph2">&lt;xref:System.Array.SyncRoot%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Many collection types provide a <ph id="ph1">`SyncRoot`</ph> member as well.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`lock`</ph> statement, see the following topics:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>lock Statement<ept id="p1">](../../../../csharp/language-reference/keywords/lock-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Monitors</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Like the <ph id="ph1">`lock`</ph> keyword, monitors prevent blocks of code from simultaneous execution by multiple threads.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> method allows one and only one thread to proceed into the following statements; all other threads are blocked until the executing thread calls <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is just like using the <ph id="ph1">`lock`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`lock`</ph>keyword is generally preferred over using the <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> class directly, both because <ph id="ph3">`lock`</ph> is more concise, and because <ph id="ph4">`lock`</ph> insures that the underlying monitor is released, even if the protected code throws an exception.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is accomplished with the <ph id="ph1">`finally`</ph> keyword, which executes its associated code block regardless of whether an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Synchronization Events and Wait Handles</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Using a lock or monitor is useful for preventing the simultaneous execution of thread-sensitive blocks of code, but these constructs do not allow one thread to communicate an event to another.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This requires <bpt id="p1">*</bpt>synchronization events<ept id="p1">*</ept>, which are objects that have one of two states, signaled and un-signaled, that can be used to activate and suspend threads.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Threads can be suspended by being made to wait on a synchronization event that is unsignaled, and can be activated by changing the event state to signaled.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If a thread attempts to wait on an event that is already signaled, then the thread continues to execute without delay.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>There are two kinds of synchronization events: <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, and <ph id="ph2">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>They differ only in that <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> changes from signaled to unsignaled automatically any time it activates a thread.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Conversely, a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> allows any number of threads to be activated by its signaled state, and will only revert to an unsignaled state when its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Threads can be made to wait on events by calling one of the wait methods, such as <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName&gt;</ph> causes the thread to wait until a single event becomes signaled, <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=fullName&gt;</ph> blocks a thread until one or more indicated events become signaled, and <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=fullName&gt;</ph> blocks the thread until all of the indicated events become signaled.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An event becomes signaled when its <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the following example, a thread is created and started by the <ph id="ph1">`Main`</ph> function.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The new thread waits on an event using the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The thread is suspended until the event becomes signaled by the primary thread that is executing the <ph id="ph1">`Main`</ph> function.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Once the event becomes signaled, the auxiliary thread returns.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this case, because the event is only used for one thread activation, either the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> classes could be used.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Mutex Object</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>mutex<ept id="p1">*</ept> is similar to a monitor; it prevents the simultaneous execution of a block of code by more than one thread at a time.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In fact, the name "mutex" is a shortened form of the term "mutually exclusive."</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Unlike monitors, however, a mutex can be used to synchronize threads across processes.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A mutex is represented by the <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When used for inter-process synchronization, a mutex is called a <bpt id="p1">*</bpt>named mutex<ept id="p1">*</ept> because it is to be used in another application, and therefore it cannot be shared by means of a global or static variable.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It must be given a name so that both applications can access the same mutex object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Although a mutex can be used for intra-process thread synchronization, using <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> is generally preferred, because monitors were designed specifically for the .NET Framework and therefore make better use of resources.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> class is a wrapper to a Win32 construct.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>While it is more powerful than a monitor, a mutex requires interop transitions that are more computationally expensive than those required by the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For an example of using a mutex, see <bpt id="p1">[</bpt>Mutexes<ept id="p1">](../../../../standard/threading/mutexes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Interlocked Class</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can use the methods of the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class to prevent problems that can occur when multiple threads attempt to simultaneously update or compare the same value.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The methods of this class let you safely increment, decrement, exchange, and compare values from any thread.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ReaderWriter Locks</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to lock a resource only when data is being written and permit multiple clients to simultaneously read data when data is not being updated.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ReaderWriterLock&gt;</ph> class enforces exclusive access to a resource while a thread is modifying the resource, but it allows non-exclusive access when reading the resource.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>ReaderWriter locks are a useful alternative to exclusive locks, which cause other threads to wait, even when those threads do not need to update data.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Deadlocks</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Thread synchronization is invaluable in multithreaded applications, but there is always the danger of creating a <ph id="ph1">`deadlock`</ph>, where multiple threads are waiting for each other and the application comes to a halt.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A deadlock is analogous to a situation in which cars are stopped at a four-way stop and each person is waiting for the other to go.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Avoiding deadlocks is important; the key is careful planning.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can often predict deadlock situations by diagramming multithreaded applications before you start coding.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Multithreaded Applications (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/multithreaded-applications.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>lock Statement<ept id="p1">](../../../../csharp/language-reference/keywords/lock-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Mutexes<ept id="p1">](../../../../standard/threading/mutexes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">@System.Threading.Monitor</ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interlocked Operations<ept id="p1">](../../../../standard/threading/interlocked-operations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](../../../../standard/threading/autoresetevent.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Synchronizing Data for Multithreading<ept id="p1">](../../../../standard/threading/synchronizing-data-for-multithreading.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>