<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="out-generic-modifier.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1316228a186976f313bb9f10032262974243a3ae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\out-generic-modifier.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f96ff15326de1221028029158cdb6e769e3758d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">368fe8508744dbed124ce2d0b730d12403fee7e3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>out keyword (generic modifier) - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>out (generic modifier) (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For generic type parameters, the <ph id="ph1">`out`</ph> keyword specifies that the type parameter is covariant.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`out`</ph> keyword in generic interfaces and delegates.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Covariance enables you to use a more derived type than that specified by the generic parameter.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This allows for implicit conversion of classes that implement covariant interfaces and implicit conversion of delegate types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Covariance and contravariance are supported for reference types, but they are not supported for value types.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An interface that has a covariant type parameter enables its methods to return more derived types than those specified by the type parameter.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, because in .NET Framework 4, in <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, type T is covariant, you can assign an object of the <ph id="ph2">`IEnumerable(Of String)`</ph> type to an object of the <ph id="ph3">`IEnumerable(Of Object)`</ph> type without using any special conversion methods.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A covariant delegate can be assigned another delegate of the same type, but with a more derived generic type parameter.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Covariance and Contravariance<ept id="p1">](../../programming-guide/concepts/covariance-contravariance/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example - covariant generic interface</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example shows how to declare, extend, and implement a covariant generic interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It also shows how to use implicit conversion for classes that implement a covariant interface.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In a generic interface, a type parameter can be declared covariant if it satisfies the following conditions:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The type parameter is used only as a return type of interface methods and not used as a type of method arguments.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If in a covariant interface you have a contravariant generic delegate as a method parameter, you can use the covariant type as a generic type parameter for this delegate.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about covariant and contravariant generic delegates, see <bpt id="p1">[</bpt>Variance in Delegates<ept id="p1">](../../programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept> and <bpt id="p2">[</bpt>Using Variance for Func and Action Generic Delegates<ept id="p2">](../../programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The type parameter is not used as a generic constraint for the interface methods.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example - covariant generic delegate</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example shows how to declare, instantiate, and invoke a covariant generic delegate.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It also shows how to implicitly convert delegate types.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In a generic delegate, a type can be declared covariant if it is used only as a method return type and not used for method arguments.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variance in Generic Interfaces<ept id="p1">](../../programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>in<ept id="p1">](in-generic-modifier.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Modifiers<ept id="p1">](modifiers.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>