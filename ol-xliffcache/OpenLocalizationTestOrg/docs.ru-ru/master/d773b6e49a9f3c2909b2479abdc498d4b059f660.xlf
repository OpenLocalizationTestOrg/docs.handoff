<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="comparing-guid-and-uniqueidentifier-values.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d773b6e49a9f3c2909b2479abdc498d4b059f660</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\comparing-guid-and-uniqueidentifier-values.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6156b93528a05584894d6bb37cfe18e5528b9863</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd458bbf3560b6f489dbe6bd9eab9bb90c42b75a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Comparing GUID and uniqueidentifier Values</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Comparing GUID and uniqueidentifier Values</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The globally unique identifier (GUID) data type in SQL Server is represented by the <ph id="ph1">`uniqueidentifier`</ph> data type, which stores a 16-byte binary value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A GUID is a binary number, and its main use is as an identifier that must be unique in a network that has many computers at many sites.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>GUIDs can be generated by calling the Transact-SQL NEWID function, and is guaranteed to be unique throughout the world.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>uniqueidentifier (Transact-SQL)<ept id="p1">](/sql/t-sql/data-types/uniqueidentifier-transact-sql)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Working with SqlGuid Values</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because GUIDs values are long and obscure, they are not meaningful for users.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If randomly generated GUIDs are used for key values and you insert a lot of rows, you get random I/O into your indexes, which can negatively impact performance.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>GUIDs are also relatively large when compared to other data types.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In general we recommend using GUIDs only for very narrow scenarios for which no other data type is suitable.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Comparing GUID Values</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Comparison operators can be used with <ph id="ph1">`uniqueidentifier`</ph> values.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, ordering is not implemented by comparing the bit patterns of the two values.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The only operations that are allowed against a <ph id="ph1">`uniqueidentifier`</ph> value are comparisons (=, &lt;&gt;, <ph id="ph2">\&lt;</ph>, &gt;, <ph id="ph3">\&lt;</ph>=, &gt;=) and checking for NULL (IS NULL and IS NOT NULL).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>No other arithmetic operators are allowed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">&lt;xref:System.Guid&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.SqlTypes.SqlGuid&gt;</ph> have a <ph id="ph3">`CompareTo`</ph> method for comparing different GUID values.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`System.Guid.CompareTo`</ph> and <ph id="ph2">`SqlTypes.SqlGuid.CompareTo`</ph> are implemented differently.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Data.SqlTypes.SqlGuid&gt;</ph> implements <ph id="ph2">`CompareTo`</ph> using SQL Server behavior, in the last six bytes of a value are most significant.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Guid&gt;</ph> evaluates all 16 bytes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this behavioral difference.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The first section of code displays unsorted <ph id="ph1">&lt;xref:System.Guid&gt;</ph> values, and the second section of code shows the sorted <ph id="ph2">&lt;xref:System.Guid&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The third section shows the sorted <ph id="ph1">&lt;xref:System.Data.SqlTypes.SqlGuid&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The output is displayed beneath the code listing.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This example produces the following results.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SQL Server Data Types and ADO.NET<ept id="p1">](sql-server-data-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Overview<ept id="p1">](../ado-net-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>