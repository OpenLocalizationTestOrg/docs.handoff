{"content":"---\ntitle: \"How to: Find a Single Descendant Using the Descendants Method (C#)\"\nms.date: 07/20/2015\nms.assetid: 6f735be9-0293-4680-8007-ca9d96bfebed\n---\n# How to: Find a Single Descendant Using the Descendants Method (C#)\nYou can use the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis method to quickly write code to find a single uniquely named element. This technique is especially useful when you want to find a particular descendant with a specific name. You could write the code to navigate to the desired element, but it is often faster and easier to write the code using the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis.  \n  \n## Example  \n This example uses the <xref:System.Linq.Enumerable.First%2A> standard query operator.  \n  \n```csharp  \nXElement root = XElement.Parse(@\"<Root>  \n  <Child1>  \n    <GrandChild1>GC1 Value</GrandChild1>  \n  </Child1>  \n  <Child2>  \n    <GrandChild2>GC2 Value</GrandChild2>  \n  </Child2>  \n  <Child3>  \n    <GrandChild3>GC3 Value</GrandChild3>  \n  </Child3>  \n  <Child4>  \n    <GrandChild4>GC4 Value</GrandChild4>  \n  </Child4>  \n</Root>\");  \nstring grandChild3 = (string)  \n    (from el in root.Descendants(\"GrandChild3\")  \n    select el).First();  \nConsole.WriteLine(grandChild3);  \n```  \n  \n This code produces the following output:  \n  \n```  \nGC3 Value  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n```csharp  \nXElement root = XElement.Parse(@\"<aw:Root xmlns:aw='http://www.adventure-works.com'>  \n  <aw:Child1>  \n    <aw:GrandChild1>GC1 Value</aw:GrandChild1>  \n  </aw:Child1>  \n  <aw:Child2>  \n    <aw:GrandChild2>GC2 Value</aw:GrandChild2>  \n  </aw:Child2>  \n  <aw:Child3>  \n    <aw:GrandChild3>GC3 Value</aw:GrandChild3>  \n  </aw:Child3>  \n  <aw:Child4>  \n    <aw:GrandChild4>GC4 Value</aw:GrandChild4>  \n  </aw:Child4>  \n</aw:Root>\");  \nXNamespace aw = \"http://www.adventure-works.com\";  \nstring grandChild3 = (string)  \n    (from el in root.Descendants(aw + \"GrandChild3\")  \n     select el).First();  \nConsole.WriteLine(grandChild3);  \n```  \n  \n This code produces the following output:  \n  \n```  \nGC3 Value  \n```  \n  \n## See also\n\n- [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)\n","nodes":[{"pos":[4,148],"embed":true,"restype":"x-metadata","content":"title: \"How to: Find a Single Descendant Using the Descendants Method (C#)\"\nms.date: 07/20/2015\nms.assetid: 6f735be9-0293-4680-8007-ca9d96bfebed","nodes":[{"content":"How to: Find a Single Descendant Using the Descendants Method (C#)","nodes":[{"pos":[0,66],"content":"How to: Find a Single Descendant Using the Descendants Method (C#)","nodes":[{"content":"How to: Find a Single Descendant Using the Descendants Method (C#)","pos":[0,66]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[155,221],"content":"How to: Find a Single Descendant Using the Descendants Method (C#)","linkify":"How to: Find a Single Descendant Using the Descendants Method (C#)","nodes":[{"content":"How to: Find a Single Descendant Using the Descendants Method (C#)","pos":[0,66]}]},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> axis method to quickly write code to find a single uniquely named element.","pos":[222,361],"source":"You can use the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis method to quickly write code to find a single uniquely named element."},{"content":"This technique is especially useful when you want to find a particular descendant with a specific name.","pos":[362,465]},{"content":"You could write the code to navigate to the desired element, but it is often faster and easier to write the code using the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph> axis.","pos":[466,643],"source":" You could write the code to navigate to the desired element, but it is often faster and easier to write the code using the <xref:System.Xml.Linq.XContainer.Descendants%2A> axis."},{"pos":[652,659],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[663,748],"content":"This example uses the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.First%2A&gt;</ph> standard query operator.","source":"This example uses the <xref:System.Linq.Enumerable.First%2A> standard query operator."},{"content":"This code produces the following output:","pos":[1253,1293]},{"pos":[1329,1336],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1340,1414]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[1415,1559],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"content":"This code produces the following output:","pos":[2218,2258]},{"pos":[2294,2302],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2306,2421],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}