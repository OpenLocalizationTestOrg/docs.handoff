{"content":"---\ntitle: \"How to: Write a Query that Finds Elements Based on Context (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 0b085290-ddc1-4126-aaa0-e4c95a3d9a09\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# How to: Write a Query that Finds Elements Based on Context (Visual Basic)\nSometimes you might have to write a query that selects elements based on their context. You might want to filter based on preceding or following sibling elements. You might want to filter based on child or ancestor elements.  \n  \n You can do this by writing a query and using the results of the query in the `where` clause. If you have to first test against null, and then test the value, it is more convenient to do the query in a `let` clause, and then use the results in the `where` clause.  \n  \n## Example  \n The following example selects all `p` elements that are immediately followed by a `ul` element.  \n  \n```vb  \nDim doc As XElement = _  \n    <Root>  \n        <p id='1'/>  \n        <ul>abc</ul>  \n        <Child>  \n            <p id='2'/>  \n            <notul/>  \n            <p id='3'/>  \n            <ul>def</ul>  \n            <p id='4'/>  \n        </Child>  \n        <Child>  \n            <p id='5'/>  \n            <notul/>  \n            <p id='6'/>  \n            <ul>abc</ul>  \n            <p id='7'/>  \n        </Child>  \n    </Root>  \n  \nDim items As IEnumerable(Of XElement) = _  \n    From e In doc...<p> _  \n    Let z = e.ElementsAfterSelf().FirstOrDefault() _  \n    Where z IsNot Nothing AndAlso z.Name.LocalName = \"ul\" _  \n    Select e  \n  \nFor Each e As XElement In items  \n    Console.WriteLine(\"id = {0}\", e.@<id>)  \nNext  \n  \n```  \n  \n This code produces the following output:  \n  \n```  \nid = 1  \nid = 3  \nid = 6  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n```vb  \nImports <xmlns='http://www.adatum.com'>  \n  \nModule Module1  \n    Sub Main()  \n        Dim doc As XElement = _  \n            <Root>  \n                <p id='1'/>  \n                <ul>abc</ul>  \n                <Child>  \n                    <p id='2'/>  \n                    <notul/>  \n                    <p id='3'/>  \n                    <ul>def</ul>  \n                    <p id='4'/>  \n                </Child>  \n                <Child>  \n                    <p id='5'/>  \n                    <notul/>  \n                    <p id='6'/>  \n                    <ul>abc</ul>  \n                    <p id='7'/>  \n                </Child>  \n            </Root>  \n  \n        Dim items As IEnumerable(Of XElement) = _  \n            From e In doc...<p> _  \n            Let z = e.ElementsAfterSelf().FirstOrDefault() _  \n            Where z IsNot Nothing AndAlso z.Name = GetXmlNamespace().GetName(\"ul\") _  \n            Select e  \n  \n        For Each e As XElement In items  \n            Console.WriteLine(\"id = {0}\", e.@<id>)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This code produces the following output:  \n  \n```  \nid = 1  \nid = 3  \nid = 6  \n```  \n  \n## See Also  \n <xref:System.Xml.Linq.XElement.Parse%2A>   \n <xref:System.Xml.Linq.XContainer.Descendants%2A>   \n <xref:System.Xml.Linq.XNode.ElementsAfterSelf%2A>   \n <xref:System.Linq.Enumerable.FirstOrDefault%2A>   \n [Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)","nodes":[{"pos":[12,102],"content":"How to: Write a Query that Finds Elements Based on Context (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Write a Query that Finds Elements Based on Context (Visual Basic) | Microsoft Docs","pos":[0,90]}]},{"pos":[409,482],"content":"How to: Write a Query that Finds Elements Based on Context (Visual Basic)","linkify":"How to: Write a Query that Finds Elements Based on Context (Visual Basic)","nodes":[{"content":"How to: Write a Query that Finds Elements Based on Context (Visual Basic)","pos":[0,73]}]},{"content":"Sometimes you might have to write a query that selects elements based on their context.","pos":[483,570]},{"content":"You might want to filter based on preceding or following sibling elements.","pos":[571,645]},{"content":"You might want to filter based on child or ancestor elements.","pos":[646,707]},{"content":"You can do this by writing a query and using the results of the query in the <ph id=\"ph1\">`where`</ph> clause.","pos":[714,806],"source":"You can do this by writing a query and using the results of the query in the `where` clause."},{"content":"If you have to first test against null, and then test the value, it is more convenient to do the query in a <ph id=\"ph1\">`let`</ph> clause, and then use the results in the <ph id=\"ph2\">`where`</ph> clause.","pos":[807,976],"source":" If you have to first test against null, and then test the value, it is more convenient to do the query in a `let` clause, and then use the results in the `where` clause."},{"pos":[985,992],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[996,1091],"content":"The following example selects all <ph id=\"ph1\">`p`</ph> elements that are immediately followed by a <ph id=\"ph2\">`ul`</ph> element.","source":"The following example selects all `p` elements that are immediately followed by a `ul` element."},{"content":"This code produces the following output:","pos":[1842,1882]},{"pos":[1933,1940],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[1944,2018]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[2019,2179],"source":" For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"content":"This code produces the following output:","pos":[3266,3306]},{"pos":[3357,3365],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>Basic Queries (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","pos":[3572,3704],"source":" [Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}