{"content":"---\ntitle: \"How to: Create a Lambda Expression (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"lambda expressions [Visual Basic]\"\n  - \"expressions [Visual Basic], lambda\"\nms.assetid: 3279bd5c-80f7-410a-a7ba-f7085ed36aa5\ncaps.latest.revision: 27\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Create a Lambda Expression (Visual Basic)\nA *lambda expression* is a function or subroutine that does not have a name. A lambda expression can be used wherever a delegate type is valid.  \n  \n### To create a single-line lambda expression function  \n  \n1.  In any situation where a delegate type could be used, type the keyword `Function`, as in the following example:  \n  \n     `Dim add1 =`   `Function`  \n  \n2.  In parentheses, directly after `Function`, type the parameters of the function. Notice that you do not specify a name after `Function`.  \n  \n     `Dim add1 = Function`   `(num As Integer)`  \n  \n3.  Following the parameter list, type a single expression as the body of the function. The value that the expression evaluates to is the value returned by the function. You do not use an `As` clause to specify the return type.  \n  \n     [!code-vb[VbVbalrLambdas#1](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_1.vb)]  \n  \n     You call the lambda expression by passing in an integer argument.  \n  \n     [!code-vb[VbVbalrLambdas#2](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_2.vb)]  \n  \n4.  Alternatively, the same result is accomplished by the following example:  \n  \n     [!code-vb[VbVbalrLambdas#3](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_3.vb)]  \n  \n### To create a single-line lambda expression subroutine  \n  \n1.  In any situation where a delegate type could be used, type the keyword `Sub`, as shown in the following example.  \n  \n     `Dim add1 =`   `Sub`  \n  \n2.  In parentheses, directly after `Sub`, type the parameters of the subroutine. Notice that you do not specify a name after `Sub`.  \n  \n     `Dim add1 = Sub`   `(msg As String)`  \n  \n3.  Following the parameter list, type a single statement as the body of the subroutine.  \n  \n     [!code-vb[VbVbalrLambdas#17](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_4.vb)]  \n  \n     You call the lambda expression by passing in a string argument.  \n  \n     [!code-vb[VbVbalrLambdas#18](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_5.vb)]  \n  \n### To create a multiline lambda expression function  \n  \n1.  In any situation where a delegate type could be used, type the keyword `Function`, as shown in the following example.  \n  \n     `Dim add1 =`   `Function`  \n  \n2.  In parentheses, directly after `Function`, type the parameters of the function. Notice that you do not specify a name after `Function`.  \n  \n     `Dim add1 = Function`   `(index As Integer)`  \n  \n3.  Press ENTER. The `End Function` statement is automatically added.  \n  \n4.  Within the body of the function, add the following code to create an expression and return the value. You do not use an `As` clause to specify the return type.  \n  \n     [!code-vb[VbVbalrLambdas#19](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_6.vb)]  \n  \n     You call the lambda expression by passing in an integer argument.  \n  \n     [!code-vb[VbVbalrLambdas#20](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_7.vb)]  \n  \n### To create a multiline lambda expression subroutine  \n  \n1.  In any situation where a delegate type could be used, type the keyword `Sub`, as shown in the following example:  \n  \n     `Dim add1 =`   `Sub`  \n  \n2.  In parentheses, directly after `Sub`, type the parameters of the subroutine. Notice that you do not specify a name after `Sub`.  \n  \n     `Dim add1 = Sub`  `(msg As String)`  \n  \n3.  Press ENTER. The `End Sub` statement is automatically added.  \n  \n4.  Within the body of the function, add the following code to execute when the subroutine is invoked.  \n  \n     [!code-vb[VbVbalrLambdas#21](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_8.vb)]  \n  \n     You call the lambda expression by passing in a string argument.  \n  \n     [!code-vb[VbVbalrLambdas#22](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_9.vb)]  \n  \n## Example  \n A common use of lambda expressions is to define a function that can be passed in as the argument for a parameter whose type is `Delegate`. In the following example, the <xref:System.Diagnostics.Process.GetProcesses%2A> method returns an array of the processes running on the local computer. The <xref:System.Linq.Enumerable.Where%2A> method from the <xref:System.Linq.Enumerable> class requires a `Boolean` delegate as its argument. The lambda expression in the example is used for that purpose. It returns `True` for each process that has only one thread, and those are selected in `filteredList`.  \n  \n [!code-vb[VbVbalrLambdas#10](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_10.vb)]  \n  \n The previous example is equivalent to the following code, which is written in [!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)] syntax:  \n  \n [!code-vb[VbVbalrLambdas#11](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-create-a-lambda-expression_11.vb)]  \n  \n## See Also  \n <xref:System.Linq.Enumerable>   \n [Lambda Expressions](./lambda-expressions.md)   \n [Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md)   \n [Sub Statement](../../../../visual-basic/language-reference/statements/sub-statement.md)   \n [Delegates](../../../../visual-basic/programming-guide/language-features/delegates/index.md)   \n [How to: Pass Procedures to Another Procedure in Visual Basic](../../../../visual-basic/programming-guide/language-features/delegates/how-to-pass-procedures-to-another-procedure.md)   \n [Delegate Statement](../../../../visual-basic/language-reference/statements/delegate-statement.md)   \n [Introduction to LINQ in Visual Basic](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)","nodes":[{"pos":[4,647],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create a Lambda Expression (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"lambda expressions [Visual Basic]\"\n  - \"expressions [Visual Basic], lambda\"\nms.assetid: 3279bd5c-80f7-410a-a7ba-f7085ed36aa5\ncaps.latest.revision: 27\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Create a Lambda Expression (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,66],"content":"How to: Create a Lambda Expression (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Create a Lambda Expression (Visual Basic) | Microsoft Docs","pos":[0,66]}]}],"path":["title"]}],"yml":true},{"pos":[654,703],"content":"How to: Create a Lambda Expression (Visual Basic)","linkify":"How to: Create a Lambda Expression (Visual Basic)","nodes":[{"content":"How to: Create a Lambda Expression (Visual Basic)","pos":[0,49]}]},{"content":"A <bpt id=\"p1\">*</bpt>lambda expression<ept id=\"p1\">*</ept> is a function or subroutine that does not have a name.","pos":[704,780],"source":"A *lambda expression* is a function or subroutine that does not have a name."},{"content":"A lambda expression can be used wherever a delegate type is valid.","pos":[781,847]},{"pos":[857,907],"content":"To create a single-line lambda expression function","linkify":"To create a single-line lambda expression function","nodes":[{"content":"To create a single-line lambda expression function","pos":[0,50]}]},{"pos":[917,1028],"content":"In any situation where a delegate type could be used, type the keyword <ph id=\"ph1\">`Function`</ph>, as in the following example:","source":"In any situation where a delegate type could be used, type the keyword `Function`, as in the following example:"},{"pos":[1039,1064],"content":"<ph id=\"ph1\">`Dim add1 =`</ph>   <ph id=\"ph2\">`Function`</ph>","source":"`Dim add1 =`   `Function`"},{"content":"In parentheses, directly after <ph id=\"ph1\">`Function`</ph>, type the parameters of the function.","pos":[1074,1153],"source":"In parentheses, directly after `Function`, type the parameters of the function."},{"content":"Notice that you do not specify a name after <ph id=\"ph1\">`Function`</ph>.","pos":[1154,1209],"source":" Notice that you do not specify a name after `Function`."},{"pos":[1220,1262],"content":"<ph id=\"ph1\">`Dim add1 = Function`</ph>   <ph id=\"ph2\">`(num As Integer)`</ph>","source":"`Dim add1 = Function`   `(num As Integer)`"},{"content":"Following the parameter list, type a single expression as the body of the function.","pos":[1272,1355]},{"content":"The value that the expression evaluates to is the value returned by the function.","pos":[1356,1437]},{"content":"You do not use an <ph id=\"ph1\">`As`</ph> clause to specify the return type.","pos":[1438,1495],"source":" You do not use an `As` clause to specify the return type."},{"content":"You call the lambda expression by passing in an integer argument.","pos":[1663,1728]},{"content":"Alternatively, the same result is accomplished by the following example:","pos":[1895,1967]},{"pos":[2134,2186],"content":"To create a single-line lambda expression subroutine","linkify":"To create a single-line lambda expression subroutine","nodes":[{"content":"To create a single-line lambda expression subroutine","pos":[0,52]}]},{"pos":[2196,2308],"content":"In any situation where a delegate type could be used, type the keyword <ph id=\"ph1\">`Sub`</ph>, as shown in the following example.","source":"In any situation where a delegate type could be used, type the keyword `Sub`, as shown in the following example."},{"pos":[2319,2339],"content":"<ph id=\"ph1\">`Dim add1 =`</ph>   <ph id=\"ph2\">`Sub`</ph>","source":"`Dim add1 =`   `Sub`"},{"content":"In parentheses, directly after <ph id=\"ph1\">`Sub`</ph>, type the parameters of the subroutine.","pos":[2349,2425],"source":"In parentheses, directly after `Sub`, type the parameters of the subroutine."},{"content":"Notice that you do not specify a name after <ph id=\"ph1\">`Sub`</ph>.","pos":[2426,2476],"source":" Notice that you do not specify a name after `Sub`."},{"pos":[2487,2523],"content":"<ph id=\"ph1\">`Dim add1 = Sub`</ph>   <ph id=\"ph2\">`(msg As String)`</ph>","source":"`Dim add1 = Sub`   `(msg As String)`"},{"content":"Following the parameter list, type a single statement as the body of the subroutine.","pos":[2533,2617]},{"content":"You call the lambda expression by passing in a string argument.","pos":[2786,2849]},{"pos":[3017,3065],"content":"To create a multiline lambda expression function","linkify":"To create a multiline lambda expression function","nodes":[{"content":"To create a multiline lambda expression function","pos":[0,48]}]},{"pos":[3075,3192],"content":"In any situation where a delegate type could be used, type the keyword <ph id=\"ph1\">`Function`</ph>, as shown in the following example.","source":"In any situation where a delegate type could be used, type the keyword `Function`, as shown in the following example."},{"pos":[3203,3228],"content":"<ph id=\"ph1\">`Dim add1 =`</ph>   <ph id=\"ph2\">`Function`</ph>","source":"`Dim add1 =`   `Function`"},{"content":"In parentheses, directly after <ph id=\"ph1\">`Function`</ph>, type the parameters of the function.","pos":[3238,3317],"source":"In parentheses, directly after `Function`, type the parameters of the function."},{"content":"Notice that you do not specify a name after <ph id=\"ph1\">`Function`</ph>.","pos":[3318,3373],"source":" Notice that you do not specify a name after `Function`."},{"pos":[3384,3428],"content":"<ph id=\"ph1\">`Dim add1 = Function`</ph>   <ph id=\"ph2\">`(index As Integer)`</ph>","source":"`Dim add1 = Function`   `(index As Integer)`"},{"content":"Press ENTER.","pos":[3438,3450]},{"content":"The <ph id=\"ph1\">`End Function`</ph> statement is automatically added.","pos":[3451,3503],"source":" The `End Function` statement is automatically added."},{"content":"Within the body of the function, add the following code to create an expression and return the value.","pos":[3513,3614]},{"content":"You do not use an <ph id=\"ph1\">`As`</ph> clause to specify the return type.","pos":[3615,3672],"source":" You do not use an `As` clause to specify the return type."},{"content":"You call the lambda expression by passing in an integer argument.","pos":[3841,3906]},{"pos":[4074,4124],"content":"To create a multiline lambda expression subroutine","linkify":"To create a multiline lambda expression subroutine","nodes":[{"content":"To create a multiline lambda expression subroutine","pos":[0,50]}]},{"pos":[4134,4246],"content":"In any situation where a delegate type could be used, type the keyword <ph id=\"ph1\">`Sub`</ph>, as shown in the following example:","source":"In any situation where a delegate type could be used, type the keyword `Sub`, as shown in the following example:"},{"pos":[4257,4277],"content":"<ph id=\"ph1\">`Dim add1 =`</ph>   <ph id=\"ph2\">`Sub`</ph>","source":"`Dim add1 =`   `Sub`"},{"content":"In parentheses, directly after <ph id=\"ph1\">`Sub`</ph>, type the parameters of the subroutine.","pos":[4287,4363],"source":"In parentheses, directly after `Sub`, type the parameters of the subroutine."},{"content":"Notice that you do not specify a name after <ph id=\"ph1\">`Sub`</ph>.","pos":[4364,4414],"source":" Notice that you do not specify a name after `Sub`."},{"pos":[4425,4460],"content":"<ph id=\"ph1\">`Dim add1 = Sub`</ph>  <ph id=\"ph2\">`(msg As String)`</ph>","source":"`Dim add1 = Sub`  `(msg As String)`"},{"content":"Press ENTER.","pos":[4470,4482]},{"content":"The <ph id=\"ph1\">`End Sub`</ph> statement is automatically added.","pos":[4483,4530],"source":" The `End Sub` statement is automatically added."},{"content":"Within the body of the function, add the following code to execute when the subroutine is invoked.","pos":[4540,4638]},{"content":"You call the lambda expression by passing in a string argument.","pos":[4807,4870]},{"pos":[5037,5044],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"A common use of lambda expressions is to define a function that can be passed in as the argument for a parameter whose type is <ph id=\"ph1\">`Delegate`</ph>.","pos":[5048,5186],"source":"A common use of lambda expressions is to define a function that can be passed in as the argument for a parameter whose type is `Delegate`."},{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> method returns an array of the processes running on the local computer.","pos":[5187,5338],"source":" In the following example, the <xref:System.Diagnostics.Process.GetProcesses%2A> method returns an array of the processes running on the local computer."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> method from the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable&gt;</ph> class requires a <ph id=\"ph3\">`Boolean`</ph> delegate as its argument.","pos":[5339,5480],"source":" The <xref:System.Linq.Enumerable.Where%2A> method from the <xref:System.Linq.Enumerable> class requires a `Boolean` delegate as its argument."},{"content":"The lambda expression in the example is used for that purpose.","pos":[5481,5543]},{"content":"It returns <ph id=\"ph1\">`True`</ph> for each process that has only one thread, and those are selected in <ph id=\"ph2\">`filteredList`</ph>.","pos":[5544,5646],"source":" It returns `True` for each process that has only one thread, and those are selected in `filteredList`."},{"pos":[5808,5982],"content":"The previous example is equivalent to the following code, which is written in <ph id=\"ph1\">[!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph> syntax:","source":"The previous example is equivalent to the following code, which is written in [!INCLUDE[vbteclinqext](../../../../csharp/getting-started/includes/vbteclinqext_md.md)] syntax:"},{"pos":[6146,6154],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable&gt;</ph>","pos":[6158,6187],"source":"<xref:System.Linq.Enumerable> "},{"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](./lambda-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[6192,6238],"source":"[Lambda Expressions](./lambda-expressions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6242,6341],"source":"[Function Statement](../../../../visual-basic/language-reference/statements/function-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6345,6434],"source":"[Sub Statement](../../../../visual-basic/language-reference/statements/sub-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[6438,6531],"source":"[Delegates](../../../../visual-basic/programming-guide/language-features/delegates/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Pass Procedures to Another Procedure in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/delegates/how-to-pass-procedures-to-another-procedure.md)</ept><ph id=\"ph1\"> </ph>","pos":[6535,6717],"source":"[How to: Pass Procedures to Another Procedure in Visual Basic](../../../../visual-basic/programming-guide/language-features/delegates/how-to-pass-procedures-to-another-procedure.md) "},{"content":"<bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/delegate-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6721,6820],"source":"[Delegate Statement](../../../../visual-basic/language-reference/statements/delegate-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>","pos":[6824,6953],"source":"[Introduction to LINQ in Visual Basic](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)"}]}