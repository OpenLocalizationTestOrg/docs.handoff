{"content":"---\ntitle: \"out keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/01/2017\nf1_keywords: \n  - \"out_CSharpKeyword\"\n  - \"out\"\nhelpviewer_keywords: \n  - \"out [C#]\"\n  - \"out keyword [C#]\"\nms.assetid: 7e911a0c-3f98-4536-87be-d539b7536ca8\n---\n# out (C# Reference)\n\nYou can use the `out` keyword in two contexts:\n\n- As a [parameter modifier](out-parameter-modifier.md), which lets you pass an argument to a method by reference rather than by value.\n\n- In [generic type parameter declarations](out-generic-modifier.md) for interfaces and delegates, which specifies that a type parameter is covariant.\n\n## See also\n\n- [C# Reference](../index.md)\n","nodes":[{"pos":[4,237],"embed":true,"restype":"x-metadata","content":"title: \"out keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/01/2017\nf1_keywords: \n  - \"out_CSharpKeyword\"\n  - \"out\"\nhelpviewer_keywords: \n  - \"out [C#]\"\n  - \"out keyword [C#]\"\nms.assetid: 7e911a0c-3f98-4536-87be-d539b7536ca8","nodes":[{"content":"out keyword - C# Reference","nodes":[{"pos":[0,26],"content":"out keyword - C# Reference","nodes":[{"content":"out keyword - C# Reference","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[244,262],"content":"out (C# Reference)","linkify":"out (C# Reference)","nodes":[{"content":"out (C# Reference)","pos":[0,18]}]},{"pos":[264,310],"content":"You can use the <ph id=\"ph1\">`out`</ph> keyword in two contexts:","source":"You can use the `out` keyword in two contexts:"},{"pos":[314,446],"content":"As a <bpt id=\"p1\">[</bpt>parameter modifier<ept id=\"p1\">](out-parameter-modifier.md)</ept>, which lets you pass an argument to a method by reference rather than by value.","source":"As a [parameter modifier](out-parameter-modifier.md), which lets you pass an argument to a method by reference rather than by value."},{"pos":[450,597],"content":"In <bpt id=\"p1\">[</bpt>generic type parameter declarations<ept id=\"p1\">](out-generic-modifier.md)</ept> for interfaces and delegates, which specifies that a type parameter is covariant.","source":"In [generic type parameter declarations](out-generic-modifier.md) for interfaces and delegates, which specifies that a type parameter is covariant."},{"pos":[602,610],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[614,641],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"}]}