{"content":"---\ntitle: Organizing and testing projects with the .NET Core command line\ndescription: This tutorial explains how to organize and test .NET Core projects from the command line.\nauthor: cartermp\nms.date: 09/10/2018\nms.custom: \"seodec18\"\n---\n\n# Organizing and testing projects with the .NET Core command line\n\nThis tutorial follows [Get started with .NET Core on Windows/Linux/macOS using the command line](using-with-xplat-cli.md), taking you beyond the creation of a simple console app to develop advanced and well-organized applications. After showing you how to use folders to organize your code, this tutorial shows you how to extend a console application with the [xUnit](https://xunit.github.io/) testing framework.\n\n## Using folders to organize code\n\nIf you want to introduce new types into a console app, you can do so by adding files containing the types to the app. For example if you add files containing `AccountInformation` and `MonthlyReportRecords` types to your project, the project file structure is flat and easy to navigate:\n\n```\n/MyProject\n|__AccountInformation.cs\n|__MonthlyReportRecords.cs\n|__MyProject.csproj\n|__Program.cs\n```\n\nHowever, this only works well when the size of your project is relatively small. Can you imagine what will happen if you add 20 types to the project? The project definitely wouldn't be easy to navigate and maintain with that many files littering the project's root directory.\n\nTo organize the project, create a new folder and name it *Models* to hold the type files. Place the type files into the *Models* folder:\n\n```\n/MyProject\n|__/Models\n   |__AccountInformation.cs\n   |__MonthlyReportRecords.cs\n|__MyProject.csproj\n|__Program.cs\n```\n\nProjects that logically group files into folders are easy to navigate and maintain. In the next section, you create a more complex sample with folders and unit testing.\n\n## Organizing and testing using the NewTypes Pets Sample\n\n### Building the sample\n\nFor the following steps, you can either follow along using the [NewTypes Pets Sample](https://github.com/dotnet/samples/tree/master/core/console-apps/NewTypesMsBuild) or create your own files and folders. The types are logically organized into a folder structure that permits the addition of more types later, and tests are also logically placed in folders permitting the addition of more tests later.\n\nThe sample contains two types, `Dog` and `Cat`, and has them implement a common interface, `IPet`. For the `NewTypes` project, your goal is to organize the pet-related types into a *Pets* folder. If another set of types is added later, *WildAnimals* for example, they're placed in the *NewTypes* folder alongside the *Pets* folder. The *WildAnimals* folder may contain types for animals that aren't pets, such as `Squirrel` and `Rabbit` types. In this way as types are added, the project remains well organized.\n\nCreate the following folder structure with file content indicated:\n\n```\n/NewTypes\n|__/src\n   |__/NewTypes\n      |__/Pets\n         |__Dog.cs\n         |__Cat.cs\n         |__IPet.cs\n      |__Program.cs\n      |__NewTypes.csproj\n```\n\n*IPet.cs*:\n\n[!code-csharp[IPet interface](../../../samples/core/console-apps/NewTypesMsBuild/src/NewTypes/Pets/IPet.cs)]\n\n*Dog.cs*:\n\n[!code-csharp[Dog class](../../../samples/core/console-apps/NewTypesMsBuild/src/NewTypes/Pets/Dog.cs)]\n\n*Cat.cs*:\n\n[!code-csharp[Cat class](../../../samples/core/console-apps/NewTypesMsBuild/src/NewTypes/Pets/Cat.cs)]\n\n*Program.cs*:\n\n[!code-csharp[Main](../../../samples/core/console-apps/NewTypesMsBuild/src/NewTypes/Program.cs)]\n\n*NewTypes.csproj*:\n\n[!code-xml[NewTypes csproj](../../../samples/core/console-apps/NewTypesMsBuild/src/NewTypes/NewTypes.csproj)]\n\nExecute the following command:\n\n```console\ndotnet run\n```\n\nObtain the following output:\n\n```console\nWoof!\nMeow!\n```\n\nOptional exercise: You can add a new pet type, such as a `Bird`, by extending this project. Make the bird's `TalkToOwner` method give a `Tweet!` to the owner. Run the app again. The output will include `Tweet!`\n\n### Testing the sample\n\nThe `NewTypes` project is in place, and you've organized it by keeping the pets-related types in a folder. Next, create your test project and start writing tests with the [xUnit](https://xunit.github.io/) test framework. Unit testing allows you to automatically check the behavior of your pet types to confirm that they're operating properly.\n\nNavigate back to the *src* folder and create a *test* folder with a *NewTypesTests* folder within it. At a command prompt from the *NewTypesTests* folder, execute `dotnet new xunit`. This produces two files: *NewTypesTests.csproj* and *UnitTest1.cs*.\n\nThe test project cannot currently test the types in `NewTypes` and requires a project reference to the `NewTypes` project. To add a project reference, use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:\n\n```\ndotnet add reference ../../NewTypes/NewTypes.csproj\n```\n\nOr, you also have the option of manually adding the project reference by adding an `<ItemGroup>` node to the *NewTypesTests.csproj* file:\n\n```xml\n<ItemGroup>\n  <ProjectReference Include=\"../../NewTypes/NewTypes.csproj\" />\n</ItemGroup>\n```\n\n*NewTypesTests.csproj*:\n\n[!code-xml[NewTypesTests csproj](../../../samples/core/console-apps/NewTypesMsBuild/test/NewTypesTests/NewTypesTests.csproj)]\n\nThe *NewTypesTests.csproj* file contains the following:\n\n* Package reference to `Microsoft.NET.Test.Sdk`, the .NET testing infrastructure\n* Package reference to `xunit`, the xUnit testing framework\n* Package reference to `xunit.runner.visualstudio`, the test runner\n* Project reference to `NewTypes`, the code to test\n\nChange the name of *UnitTest1.cs* to *PetTests.cs* and replace the code in the file with the following:\n\n```csharp\nusing System;\nusing Xunit;\nusing Pets;\n\npublic class PetTests\n{\n    [Fact]\n    public void DogTalkToOwnerReturnsWoof()\n    {\n        string expected = \"Woof!\";\n        string actual = new Dog().TalkToOwner();\n\n        Assert.NotEqual(expected, actual);\n    }\n\n    [Fact]\n    public void CatTalkToOwnerReturnsMeow()\n    {\n        string expected = \"Meow!\";\n        string actual = new Cat().TalkToOwner();\n\n        Assert.NotEqual(expected, actual);\n    }\n}\n```\n\nOptional exercise: If you added a `Bird` type earlier that yields a `Tweet!` to the owner, add a test method to the *PetTests.cs* file, `BirdTalkToOwnerReturnsTweet`, to check that the `TalkToOwner` method works correctly for the `Bird` type.\n\n> [!NOTE]\n> Although you expect that the `expected` and `actual` values are equal, an initial assertion with the `Assert.NotEqual` check specifies that these values are *not equal*. Always initially create a test to fail in order to check the logic of the test. After you confirm that the test fails, adjust the assertion to allow the test to pass.\n\nThe following shows the complete project structure:\n\n```\n/NewTypes\n|__/src\n   |__/NewTypes\n      |__/Pets\n         |__Dog.cs\n         |__Cat.cs\n         |__IPet.cs\n      |__Program.cs\n      |__NewTypes.csproj\n|__/test\n   |__NewTypesTests\n      |__PetTests.cs\n      |__NewTypesTests.csproj\n```\n\nStart in the *test/NewTypesTests* directory. Restore the test project with the [`dotnet restore`](../tools/dotnet-restore.md)\n command. Run the tests with the [`dotnet test`](../tools/dotnet-test.md) command. This command starts the test runner specified in the project file.\n\n[!INCLUDE[DotNet Restore Note](~/includes/dotnet-restore-note.md)]\n\nAs expected, testing fails, and the console displays the following output:\n\n```\nTest run for c:\\Users\\ronpet\\repos\\samples\\core\\console-apps\\NewTypesMsBuild\\test\\NewTypesTests\\bin\\Debug\\netcoreapp2.1\\NewTypesTests.dll(.NETCoreApp,Version=v2.1)\nMicrosoft (R) Test Execution Command Line Tool Version 15.8.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nStarting test execution, please wait...\n[xUnit.net 00:00:00.77]     PetTests.DogTalkToOwnerReturnsWoof [FAIL]\n[xUnit.net 00:00:00.78]     PetTests.CatTalkToOwnerReturnsMeow [FAIL]\nFailed   PetTests.DogTalkToOwnerReturnsWoof\nError Message:\n Assert.NotEqual() Failure\nExpected: Not \"Woof!\"\nActual:   \"Woof!\"\nStack Trace:\n   at PetTests.DogTalkToOwnerReturnsWoof() in c:\\Users\\ronpet\\repos\\samples\\core\\console-apps\\NewTypesMsBuild\\test\\NewTypesTests\\PetTests.cs:line 13\nFailed   PetTests.CatTalkToOwnerReturnsMeow\nError Message:\n Assert.NotEqual() Failure\nExpected: Not \"Meow!\"\nActual:   \"Meow!\"\nStack Trace:\n   at PetTests.CatTalkToOwnerReturnsMeow() in c:\\Users\\ronpet\\repos\\samples\\core\\console-apps\\NewTypesMsBuild\\test\\NewTypesTests\\PetTests.cs:line 22\n\nTotal tests: 2. Passed: 0. Failed: 2. Skipped: 0.\nTest Run Failed.\nTest execution time: 1.7000 Seconds\n```\n\nChange the assertions of your tests from `Assert.NotEqual` to `Assert.Equal`:\n\n[!code-csharp[PetTests class](../../../samples/core/console-apps/NewTypesMsBuild/test/NewTypesTests/PetTests.cs)]\n\nRe-run the tests with the `dotnet test` command and obtain the following output:\n\n```\nTest run for c:\\Users\\ronpet\\repos\\samples\\core\\console-apps\\NewTypesMsBuild\\test\\NewTypesTests\\bin\\Debug\\netcoreapp2.1\\NewTypesTests.dll(.NETCoreApp,Version=v2.1)\nMicrosoft (R) Test Execution Command Line Tool Version 15.8.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nStarting test execution, please wait...\n\nTotal tests: 2. Passed: 2. Failed: 0. Skipped: 0.\nTest Run Successful.\nTest execution time: 1.6029 Seconds\n```\n\nTesting passes. The pet types' methods return the correct values when talking to the owner.\n\nYou've learned techniques for organizing and testing projects using xUnit. Go forward with these techniques applying them in your own projects. *Happy coding!*\n","nodes":[{"pos":[4,236],"embed":true,"restype":"x-metadata","content":"title: Organizing and testing projects with the .NET Core command line\ndescription: This tutorial explains how to organize and test .NET Core projects from the command line.\nauthor: cartermp\nms.date: 09/10/2018\nms.custom: \"seodec18\"","nodes":[{"content":"Organizing and testing projects with the .NET Core command line","nodes":[{"pos":[0,63],"content":"Organizing and testing projects with the .NET Core command line","nodes":[{"content":"Organizing and testing projects with the .NET Core command line","pos":[0,63]}]}],"path":["title"],"nosxs":false},{"content":"This tutorial explains how to organize and test .NET Core projects from the command line.","nodes":[{"pos":[0,89],"content":"This tutorial explains how to organize and test .NET Core projects from the command line.","nodes":[{"content":"This tutorial explains how to organize and test .NET Core projects from the command line.","pos":[0,89]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[244,307],"content":"Organizing and testing projects with the .NET Core command line","linkify":"Organizing and testing projects with the .NET Core command line","nodes":[{"content":"Organizing and testing projects with the .NET Core command line","pos":[0,63]}]},{"content":"This tutorial follows <bpt id=\"p1\">[</bpt>Get started with .NET Core on Windows/Linux/macOS using the command line<ept id=\"p1\">](using-with-xplat-cli.md)</ept>, taking you beyond the creation of a simple console app to develop advanced and well-organized applications.","pos":[309,539],"source":"This tutorial follows [Get started with .NET Core on Windows/Linux/macOS using the command line](using-with-xplat-cli.md), taking you beyond the creation of a simple console app to develop advanced and well-organized applications."},{"content":"After showing you how to use folders to organize your code, this tutorial shows you how to extend a console application with the <bpt id=\"p1\">[</bpt>xUnit<ept id=\"p1\">](https://xunit.github.io/)</ept> testing framework.","pos":[540,721],"source":" After showing you how to use folders to organize your code, this tutorial shows you how to extend a console application with the [xUnit](https://xunit.github.io/) testing framework."},{"pos":[726,756],"content":"Using folders to organize code","linkify":"Using folders to organize code","nodes":[{"content":"Using folders to organize code","pos":[0,30]}]},{"content":"If you want to introduce new types into a console app, you can do so by adding files containing the types to the app.","pos":[758,875]},{"content":"For example if you add files containing <ph id=\"ph1\">`AccountInformation`</ph> and <ph id=\"ph2\">`MonthlyReportRecords`</ph> types to your project, the project file structure is flat and easy to navigate:","pos":[876,1043],"source":" For example if you add files containing `AccountInformation` and `MonthlyReportRecords` types to your project, the project file structure is flat and easy to navigate:"},{"content":"However, this only works well when the size of your project is relatively small.","pos":[1151,1231]},{"content":"Can you imagine what will happen if you add 20 types to the project?","pos":[1232,1300]},{"content":"The project definitely wouldn't be easy to navigate and maintain with that many files littering the project's root directory.","pos":[1301,1426]},{"content":"To organize the project, create a new folder and name it <bpt id=\"p1\">*</bpt>Models<ept id=\"p1\">*</ept> to hold the type files.","pos":[1428,1517],"source":"To organize the project, create a new folder and name it *Models* to hold the type files."},{"content":"Place the type files into the <bpt id=\"p1\">*</bpt>Models<ept id=\"p1\">*</ept> folder:","pos":[1518,1564],"source":" Place the type files into the *Models* folder:"},{"content":"Projects that logically group files into folders are easy to navigate and maintain.","pos":[1689,1772]},{"content":"In the next section, you create a more complex sample with folders and unit testing.","pos":[1773,1857]},{"pos":[1862,1915],"content":"Organizing and testing using the NewTypes Pets Sample","linkify":"Organizing and testing using the NewTypes Pets Sample","nodes":[{"content":"Organizing and testing using the NewTypes Pets Sample","pos":[0,53]}]},{"pos":[1921,1940],"content":"Building the sample","linkify":"Building the sample","nodes":[{"content":"Building the sample","pos":[0,19]}]},{"content":"For the following steps, you can either follow along using the <bpt id=\"p1\">[</bpt>NewTypes Pets Sample<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/core/console-apps/NewTypesMsBuild)</ept> or create your own files and folders.","pos":[1942,2146],"source":"For the following steps, you can either follow along using the [NewTypes Pets Sample](https://github.com/dotnet/samples/tree/master/core/console-apps/NewTypesMsBuild) or create your own files and folders."},{"content":"The types are logically organized into a folder structure that permits the addition of more types later, and tests are also logically placed in folders permitting the addition of more tests later.","pos":[2147,2343]},{"content":"The sample contains two types, <ph id=\"ph1\">`Dog`</ph> and <ph id=\"ph2\">`Cat`</ph>, and has them implement a common interface, <ph id=\"ph3\">`IPet`</ph>.","pos":[2345,2443],"source":"The sample contains two types, `Dog` and `Cat`, and has them implement a common interface, `IPet`."},{"content":"For the <ph id=\"ph1\">`NewTypes`</ph> project, your goal is to organize the pet-related types into a <bpt id=\"p1\">*</bpt>Pets<ept id=\"p1\">*</ept> folder.","pos":[2444,2540],"source":" For the `NewTypes` project, your goal is to organize the pet-related types into a *Pets* folder."},{"content":"If another set of types is added later, <bpt id=\"p1\">*</bpt>WildAnimals<ept id=\"p1\">*</ept> for example, they're placed in the <bpt id=\"p2\">*</bpt>NewTypes<ept id=\"p2\">*</ept> folder alongside the <bpt id=\"p3\">*</bpt>Pets<ept id=\"p3\">*</ept> folder.","pos":[2541,2676],"source":" If another set of types is added later, *WildAnimals* for example, they're placed in the *NewTypes* folder alongside the *Pets* folder."},{"content":"The <bpt id=\"p1\">*</bpt>WildAnimals<ept id=\"p1\">*</ept> folder may contain types for animals that aren't pets, such as <ph id=\"ph1\">`Squirrel`</ph> and <ph id=\"ph2\">`Rabbit`</ph> types.","pos":[2677,2788],"source":" The *WildAnimals* folder may contain types for animals that aren't pets, such as `Squirrel` and `Rabbit` types."},{"content":"In this way as types are added, the project remains well organized.","pos":[2789,2856]},{"content":"Create the following folder structure with file content indicated:","pos":[2858,2924]},{"pos":[3087,3097],"content":"<bpt id=\"p1\">*</bpt>IPet.cs<ept id=\"p1\">*</ept>:","source":"*IPet.cs*:"},{"pos":[3209,3218],"content":"<bpt id=\"p1\">*</bpt>Dog.cs<ept id=\"p1\">*</ept>:","source":"*Dog.cs*:"},{"pos":[3324,3333],"content":"<bpt id=\"p1\">*</bpt>Cat.cs<ept id=\"p1\">*</ept>:","source":"*Cat.cs*:"},{"pos":[3439,3452],"content":"<bpt id=\"p1\">*</bpt>Program.cs<ept id=\"p1\">*</ept>:","source":"*Program.cs*:"},{"pos":[3552,3570],"content":"<bpt id=\"p1\">*</bpt>NewTypes.csproj<ept id=\"p1\">*</ept>:","source":"*NewTypes.csproj*:"},{"content":"Execute the following command:","pos":[3683,3713]},{"content":"Obtain the following output:","pos":[3742,3770]},{"content":"Optional exercise: You can add a new pet type, such as a <ph id=\"ph1\">`Bird`</ph>, by extending this project.","pos":[3800,3891],"source":"Optional exercise: You can add a new pet type, such as a `Bird`, by extending this project."},{"content":"Make the bird's <ph id=\"ph1\">`TalkToOwner`</ph> method give a <ph id=\"ph2\">`Tweet!`</ph> to the owner.","pos":[3892,3958],"source":" Make the bird's `TalkToOwner` method give a `Tweet!` to the owner."},{"content":"Run the app again.","pos":[3959,3977]},{"content":"The output will include <ph id=\"ph1\">`Tweet!`</ph>","pos":[3978,4010],"source":" The output will include `Tweet!`"},{"pos":[4016,4034],"content":"Testing the sample","linkify":"Testing the sample","nodes":[{"content":"Testing the sample","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">`NewTypes`</ph> project is in place, and you've organized it by keeping the pets-related types in a folder.","pos":[4036,4142],"source":"The `NewTypes` project is in place, and you've organized it by keeping the pets-related types in a folder."},{"content":"Next, create your test project and start writing tests with the <bpt id=\"p1\">[</bpt>xUnit<ept id=\"p1\">](https://xunit.github.io/)</ept> test framework.","pos":[4143,4256],"source":" Next, create your test project and start writing tests with the [xUnit](https://xunit.github.io/) test framework."},{"content":"Unit testing allows you to automatically check the behavior of your pet types to confirm that they're operating properly.","pos":[4257,4378]},{"content":"Navigate back to the <bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept> folder and create a <bpt id=\"p2\">*</bpt>test<ept id=\"p2\">*</ept> folder with a <bpt id=\"p3\">*</bpt>NewTypesTests<ept id=\"p3\">*</ept> folder within it.","pos":[4380,4481],"source":"Navigate back to the *src* folder and create a *test* folder with a *NewTypesTests* folder within it."},{"content":"At a command prompt from the <bpt id=\"p1\">*</bpt>NewTypesTests<ept id=\"p1\">*</ept> folder, execute <ph id=\"ph1\">`dotnet new xunit`</ph>.","pos":[4482,4562],"source":" At a command prompt from the *NewTypesTests* folder, execute `dotnet new xunit`."},{"content":"This produces two files: <bpt id=\"p1\">*</bpt>NewTypesTests.csproj<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>UnitTest1.cs<ept id=\"p2\">*</ept>.","pos":[4563,4630],"source":" This produces two files: *NewTypesTests.csproj* and *UnitTest1.cs*."},{"content":"The test project cannot currently test the types in <ph id=\"ph1\">`NewTypes`</ph> and requires a project reference to the <ph id=\"ph2\">`NewTypes`</ph> project.","pos":[4632,4754],"source":"The test project cannot currently test the types in `NewTypes` and requires a project reference to the `NewTypes` project."},{"content":"To add a project reference, use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet add reference`</ph><ept id=\"p1\">](../tools/dotnet-add-reference.md)</ept> command:","pos":[4755,4858],"source":" To add a project reference, use the [`dotnet add reference`](../tools/dotnet-add-reference.md) command:"},{"pos":[4921,5058],"content":"Or, you also have the option of manually adding the project reference by adding an <ph id=\"ph1\">`&lt;ItemGroup&gt;`</ph> node to the <bpt id=\"p1\">*</bpt>NewTypesTests.csproj<ept id=\"p1\">*</ept> file:","source":"Or, you also have the option of manually adding the project reference by adding an `<ItemGroup>` node to the *NewTypesTests.csproj* file:"},{"pos":[5161,5184],"content":"<bpt id=\"p1\">*</bpt>NewTypesTests.csproj<ept id=\"p1\">*</ept>:","source":"*NewTypesTests.csproj*:"},{"pos":[5313,5368],"content":"The <bpt id=\"p1\">*</bpt>NewTypesTests.csproj<ept id=\"p1\">*</ept> file contains the following:","source":"The *NewTypesTests.csproj* file contains the following:"},{"pos":[5372,5450],"content":"Package reference to <ph id=\"ph1\">`Microsoft.NET.Test.Sdk`</ph>, the .NET testing infrastructure","source":"Package reference to `Microsoft.NET.Test.Sdk`, the .NET testing infrastructure"},{"pos":[5453,5510],"content":"Package reference to <ph id=\"ph1\">`xunit`</ph>, the xUnit testing framework","source":"Package reference to `xunit`, the xUnit testing framework"},{"pos":[5513,5578],"content":"Package reference to <ph id=\"ph1\">`xunit.runner.visualstudio`</ph>, the test runner","source":"Package reference to `xunit.runner.visualstudio`, the test runner"},{"pos":[5581,5630],"content":"Project reference to <ph id=\"ph1\">`NewTypes`</ph>, the code to test","source":"Project reference to `NewTypes`, the code to test"},{"pos":[5632,5735],"content":"Change the name of <bpt id=\"p1\">*</bpt>UnitTest1.cs<ept id=\"p1\">*</ept> to <bpt id=\"p2\">*</bpt>PetTests.cs<ept id=\"p2\">*</ept> and replace the code in the file with the following:","source":"Change the name of *UnitTest1.cs* to *PetTests.cs* and replace the code in the file with the following:"},{"pos":[6209,6451],"content":"Optional exercise: If you added a <ph id=\"ph1\">`Bird`</ph> type earlier that yields a <ph id=\"ph2\">`Tweet!`</ph> to the owner, add a test method to the <bpt id=\"p1\">*</bpt>PetTests.cs<ept id=\"p1\">*</ept> file, <ph id=\"ph3\">`BirdTalkToOwnerReturnsTweet`</ph>, to check that the <ph id=\"ph4\">`TalkToOwner`</ph> method works correctly for the <ph id=\"ph5\">`Bird`</ph> type.","source":"Optional exercise: If you added a `Bird` type earlier that yields a `Tweet!` to the owner, add a test method to the *PetTests.cs* file, `BirdTalkToOwnerReturnsTweet`, to check that the `TalkToOwner` method works correctly for the `Bird` type."},{"pos":[6455,6801],"content":"[!NOTE]\nAlthough you expect that the `expected` and `actual` values are equal, an initial assertion with the `Assert.NotEqual` check specifies that these values are *not equal*. Always initially create a test to fail in order to check the logic of the test. After you confirm that the test fails, adjust the assertion to allow the test to pass.","leadings":["","> "],"nodes":[{"content":"Although you expect that the `expected` and `actual` values are equal, an initial assertion with the `Assert.NotEqual` check specifies that these values are *not equal*. Always initially create a test to fail in order to check the logic of the test. After you confirm that the test fails, adjust the assertion to allow the test to pass.","pos":[8,344],"nodes":[{"content":"Although you expect that the <ph id=\"ph1\">`expected`</ph> and <ph id=\"ph2\">`actual`</ph> values are equal, an initial assertion with the <ph id=\"ph3\">`Assert.NotEqual`</ph> check specifies that these values are <bpt id=\"p1\">*</bpt>not equal<ept id=\"p1\">*</ept>.","pos":[0,169],"source":"Although you expect that the `expected` and `actual` values are equal, an initial assertion with the `Assert.NotEqual` check specifies that these values are *not equal*."},{"content":"Always initially create a test to fail in order to check the logic of the test.","pos":[170,249]},{"content":"After you confirm that the test fails, adjust the assertion to allow the test to pass.","pos":[250,336]}]}]},{"content":"The following shows the complete project structure:","pos":[6803,6854]},{"content":"Start in the <bpt id=\"p1\">*</bpt>test/NewTypesTests<ept id=\"p1\">*</ept> directory.","pos":[7097,7141],"source":"Start in the *test/NewTypesTests* directory."},{"content":"Restore the test project with the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet restore`</ph><ept id=\"p1\">](../tools/dotnet-restore.md)</ept> command.","pos":[7142,7232],"source":" Restore the test project with the [`dotnet restore`](../tools/dotnet-restore.md)\n command."},{"content":"Run the tests with the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`dotnet test`</ph><ept id=\"p1\">](../tools/dotnet-test.md)</ept> command.","pos":[7233,7305],"source":" Run the tests with the [`dotnet test`](../tools/dotnet-test.md) command."},{"content":"This command starts the test runner specified in the project file.","pos":[7306,7372]},{"content":"As expected, testing fails, and the console displays the following output:","pos":[7442,7516]},{"pos":[8673,8750],"content":"Change the assertions of your tests from <ph id=\"ph1\">`Assert.NotEqual`</ph> to <ph id=\"ph2\">`Assert.Equal`</ph>:","source":"Change the assertions of your tests from `Assert.NotEqual` to `Assert.Equal`:"},{"pos":[8867,8947],"content":"Re-run the tests with the <ph id=\"ph1\">`dotnet test`</ph> command and obtain the following output:","source":"Re-run the tests with the `dotnet test` command and obtain the following output:"},{"content":"Testing passes.","pos":[9392,9407]},{"content":"The pet types' methods return the correct values when talking to the owner.","pos":[9408,9483]},{"content":"You've learned techniques for organizing and testing projects using xUnit.","pos":[9485,9559]},{"content":"Go forward with these techniques applying them in your own projects.","pos":[9560,9628]},{"content":"<bpt id=\"p1\">*</bpt>Happy coding!<ept id=\"p1\">*</ept>","pos":[9629,9644],"source":"*Happy coding!*"}]}