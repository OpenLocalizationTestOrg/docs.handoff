<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="xslt-stylesheet-scripting-using-msxsl-script.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">78dec0d4c3c6e7cab6e179be9dbe61cfd01dc7fc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\xslt-stylesheet-scripting-using-msxsl-script.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47ad64e57fe988e2501c7df01be1d6f7a290bb06</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15458696bdf89e2564cd9acf5f7db55fbaa19cd0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>XSLT Stylesheet Scripting Using &lt;msxsl:script&gt;</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XSLT Stylesheet Scripting Using <ph id="ph1">\&lt;</ph>msxsl:script&gt;</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class supports embedded scripting using the <ph id="ph2">`script`</ph> element.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](../../../../includes/dnprdnext-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can perform Extensible Stylesheet Language for Transformations (XSLT) transformations using the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Using the XslCompiledTransform Class<ept id="p1">](../../../../docs/standard/data/xml/using-the-xslcompiledtransform-class.md)</ept> and <bpt id="p2">[</bpt>Migrating From the XslTransform Class<ept id="p2">](../../../../docs/standard/data/xml/migrating-from-the-xsltransform-class.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class supports embedded scripting using the <ph id="ph2">`script`</ph> element.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When the style sheet is loaded, any defined functions are compiled to Microsoft intermediate language (MSIL) by being wrapped in a class definition and have no performance loss as a result.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;msxsl:script&gt;`</ph> element is defined below:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`msxsl`</ph> is a prefix bound to the namespace <ph id="ph2">`urn:schemas-microsoft-com:xslt`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`language`</ph> attribute is not mandatory, but if specified, its value must be one of the following: C#, VB, JScript, JavaScript, VisualBasic, or CSharp.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If not specified, the language defaults to JScript.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`language-name`</ph> is not case-sensitive, so 'JavaScript' and 'javascript' are equivalent.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`implements-prefix`</ph> attribute is mandatory.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This attribute is used to declare a namespace and associate it with the script block.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The value of this attribute is the prefix that represents the namespace.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This namespace can be defined somewhere in a style sheet.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`msxsl:script`</ph> element belongs to the namespace <ph id="ph2">`urn:schemas-microsoft-com:xslt`</ph>, the style sheet must include the namespace declaration <ph id="ph3">`xmlns:msxsl=urn:schemas-microsoft-com:xslt`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the caller of the script does not have <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;</ph> access permission, then the script in a style sheet will never compile and the call to <ph id="ph2">&lt;xref:System.Xml.Xsl.XslTransform.Load%2A&gt;</ph> will fail.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the caller has <ph id="ph1">`UnmanagedCode`</ph> permission, the script compiles, but the operations that are allowed are dependent on the evidence that is supplied at load time.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you are using one of the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform.Load%2A&gt;</ph> methods that take an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> to load the style sheet, you need to use the <ph id="ph4">&lt;xref:System.Xml.Xsl.XslTransform.Load%2A&gt;</ph> overload that takes an <ph id="ph5">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter as one of its arguments.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To provide evidence, the caller must have <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;</ph> permission to supply <ph id="ph2">`Evidence`</ph> for the script assembly.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the caller does not have this permission, then they can set the <ph id="ph1">`Evidence`</ph> parameter to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This causes the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform.Load%2A&gt;</ph> function to fail if it finds script.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ControlEvidence`</ph> permission is considered a very powerful permission that should only be granted to highly trusted code.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To get the evidence from your assembly, use <ph id="ph1">`this.GetType().Assembly.Evidence`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To get the evidence from a Uniform Resource Identifier (URI), use <ph id="ph1">`Evidence e = XmlSecureResolver.CreateEvidenceForUrl(stylesheetURI)`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform.Load%2A&gt;</ph> methods that take an <ph id="ph2">&lt;xref:System.Xml.XmlResolver&gt;</ph> but no <ph id="ph3">`Evidence`</ph>, the security zone for the assembly defaults to Full Trust.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.SecurityZone&gt;</ph> and <bpt id="p1">[</bpt>Named Permission Sets<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/4652tyx7(v=vs.100))</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Functions can be declared within the <ph id="ph1">`msxsl:script`</ph> element.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following table shows the namespaces that are supported by default.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use classes outside the listed namespaces.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, these classes must be fully qualified.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Default Namespaces</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>System</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>System class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>System.Collection</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Collection classes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>System.Text</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Text classes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>System.Text.RegularExpressions</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Regular expression classes.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>System.Xml</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Core XML classes.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>System.Xml.Xsl</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>XSLT classes.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>System.Xml.XPath</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>XML Path Language (XPath) classes.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Microsoft.VisualBasic</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Classes for Microsoft Visual Basic scripts.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When a function is declared, it is contained in a script block.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Style sheets can contain multiple script blocks, each operating independent of the other.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>That means that if you are executing inside a script block, you cannot call a function that you defined in another script block unless it is declared to have the same namespace and the same scripting language.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Because each script block can be in its own language, and the block is parsed according to the grammar rules of that language parser, you must use the correct syntax for the language in use.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, if you are in a C# script block, then it is an error to use an XML comment node <ph id="ph1">`&lt;!-- an XML comment --&gt;`</ph> in the block.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The supplied arguments and return values defined by the script functions must be one of the World Wide Web Consortium (W3C) XPath or XSLT types.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following table shows the corresponding W3C types, the equivalent .NET Framework classes (Type), and whether the W3C type is an XPath type or XSLT type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Equivalent .NET Framework Class (Type)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>XPath type or XSLT type</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>String</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>System.String</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>XPath</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Boolean</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>System.Boolean</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>XPath</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Number</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>System.Double</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>XPath</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Result Tree Fragment</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>System.Xml.XPath.XPathNavigator</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>XSLT</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Node Set</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>System.Xml.XPath.XPathNodeIterator</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>XPath</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If the script function utilizes one of the following numeric types: Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, or Decimal, they are forced to Double, which maps to the W3C XPath type number.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>All other types are forced to a string by calling the <ph id="ph1">`ToString`</ph> method.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the script function utilizes a type other than the ones mentioned above, or if the function does not compile when the style sheet is loaded into the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> object, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When using the <ph id="ph1">`msxsl:script`</ph> element, it is highly recommended that the script, regardless of language, be placed inside a CDATA section.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, the following XML shows the template of the CDATA section where your code is placed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It is highly recommended that all script content be placed in a CDATA section, because operators, identifiers, or delimiters for a given language have the potential of being misinterpreted as XML.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following example shows the use of the logical AND operator in script.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This throws an exception because the ampersands are not escaped.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The document is loaded as XML, and no special treatment is applied to the text between the <ph id="ph1">`msxsl:script`</ph> element tags.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following example uses an embedded script to calculate the circumference of a circle given its radius.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Input</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>number.xml</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>calc.xsl</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XslTransform Class Implements the XSLT Processor<ept id="p1">](../../../../docs/standard/data/xml/xsltransform-class-implements-the-xslt-processor.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>