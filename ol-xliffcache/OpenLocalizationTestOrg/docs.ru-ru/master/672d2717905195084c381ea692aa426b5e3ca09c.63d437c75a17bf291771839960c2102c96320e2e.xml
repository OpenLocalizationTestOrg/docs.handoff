{"content":"---\ntitle: \"Creating the GamePieceCollection Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: e4b037ee-1201-4a55-b198-0d6532ed6f35\ncaps.latest.revision: 8\nauthor: \"wadepickett\"\nms.author: \"wpickett\"\nmanager: \"wpickett\"\n---\n# Creating the GamePieceCollection Class\nThe **GamePieceCollection** class derives from the generic List class, and introduces methods to more easily manage multiple **GamePiece** objects.  \n  \n## Creating the Code  \n The constructor of the **GamePieceCollection** class initializes the private member *capturedIndex*. This field is used to track which of the game pieces currently has the mouse capture.  \n  \n [!code-csharp[ManipulationXNA#_GamePieceCollection_PrivateMembersAndConstructor](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiececollection.cs#_gamepiececollection_privatemembersandconstructor)]  \n  \n The **ProcessInertia** and the **Draw** methods simplify the code needed in the game [Game.Update](http://msdn.microsoft.com/library/microsoft.xna.framework.game.update.aspx) and [Game.Draw](http://msdn.microsoft.com/library/microsoft.xna.framework.game.draw.aspx) methods by enumerating all of the game pieces in the collection and calling the respective method on each **GamePiece** object.  \n  \n [!code-csharp[ManipulationXNA#_GamePieceCollection_ProcessInertiaAndDraw](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiececollection.cs#_gamepiececollection_processinertiaanddraw)]  \n  \n The **UpdateFromMouse** method is also called during game update. It enables only one game piece to have the mouse capture by first checking to see if the current capture (if any) is still in effect. If so, no other piece is allowed to check for capture.  \n  \n If no piece currently has the capture, the **UpdateFromMouse** method enumerates each game piece from last to first, and checks to see if that piece reports a mouse capture. If so, that piece becomes the current captured piece, and no further processing takes place. The **UpdateFromMouse** method checks the last item in the collection first so that if two pieces are overlapped, the one with the higher Z-order will obtain the capture. Z-order is not explicit nor changeable; it is governed simply by the order in which game pieces are added to the collection.  \n  \n [!code-csharp[ManipulationXNA#_GamePieceCollection_UpdateFromMouse](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiececollection.cs#_gamepiececollection_updatefrommouse)]  \n  \n## See Also  \n [Manipulations and Inertia](../../../docs/framework/common-client-technologies/manipulations-and-inertia.md)   \n [Using Manipulations and Inertia in an XNA Application](../../../docs/framework/common-client-technologies/use-manipulations-and-inertia-in-an-xna-application.md)   \n [Creating the GamePiece Class](../../../docs/framework/common-client-technologies/creating-the-gamepiece-class.md)   \n [Creating the Game1 Class](../../../docs/framework/common-client-technologies/creating-the-game1-class.md)   \n [Full Code Listings](../../../docs/framework/common-client-technologies/full-code-listings.md)","nodes":[{"pos":[4,367],"nodes":[{"content":"Creating the GamePieceCollection Class | Microsoft Docs","nodes":[{"pos":[0,55],"content":"Creating the GamePieceCollection Class | Microsoft Docs","nodes":[{"content":"Creating the GamePieceCollection Class | Microsoft Docs","pos":[0,55]}]}],"pos":[6,64],"yaml":true}],"content":"title: \"Creating the GamePieceCollection Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: e4b037ee-1201-4a55-b198-0d6532ed6f35\ncaps.latest.revision: 8\nauthor: \"wadepickett\"\nms.author: \"wpickett\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[374,412],"content":"Creating the GamePieceCollection Class","linkify":"Creating the GamePieceCollection Class","nodes":[{"content":"Creating the GamePieceCollection Class","pos":[0,38]}]},{"pos":[413,560],"content":"The <bpt id=\"p1\">**</bpt>GamePieceCollection<ept id=\"p1\">**</ept> class derives from the generic List class, and introduces methods to more easily manage multiple <bpt id=\"p2\">**</bpt>GamePiece<ept id=\"p2\">**</ept> objects.","source":"The **GamePieceCollection** class derives from the generic List class, and introduces methods to more easily manage multiple **GamePiece** objects."},{"pos":[569,586],"content":"Creating the Code","linkify":"Creating the Code","nodes":[{"content":"Creating the Code","pos":[0,17]}]},{"content":"The constructor of the <bpt id=\"p1\">**</bpt>GamePieceCollection<ept id=\"p1\">**</ept> class initializes the private member <bpt id=\"p2\">*</bpt>capturedIndex<ept id=\"p2\">*</ept>.","pos":[590,690],"source":"The constructor of the **GamePieceCollection** class initializes the private member *capturedIndex*."},{"content":"This field is used to track which of the game pieces currently has the mouse capture.","pos":[691,776]},{"pos":[783,1007],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePieceCollection_PrivateMembersAndConstructor<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiececollection.cs#_gamepiececollection_privatemembersandconstructor)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePieceCollection_PrivateMembersAndConstructor](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiececollection.cs#_gamepiececollection_privatemembersandconstructor)]"},{"pos":[1014,1406],"content":"The <bpt id=\"p1\">**</bpt>ProcessInertia<ept id=\"p1\">**</ept> and the <bpt id=\"p2\">**</bpt>Draw<ept id=\"p2\">**</ept> methods simplify the code needed in the game <bpt id=\"p3\">[</bpt>Game.Update<ept id=\"p3\">](http://msdn.microsoft.com/library/microsoft.xna.framework.game.update.aspx)</ept> and <bpt id=\"p4\">[</bpt>Game.Draw<ept id=\"p4\">](http://msdn.microsoft.com/library/microsoft.xna.framework.game.draw.aspx)</ept> methods by enumerating all of the game pieces in the collection and calling the respective method on each <bpt id=\"p5\">**</bpt>GamePiece<ept id=\"p5\">**</ept> object.","source":"The **ProcessInertia** and the **Draw** methods simplify the code needed in the game [Game.Update](http://msdn.microsoft.com/library/microsoft.xna.framework.game.update.aspx) and [Game.Draw](http://msdn.microsoft.com/library/microsoft.xna.framework.game.draw.aspx) methods by enumerating all of the game pieces in the collection and calling the respective method on each **GamePiece** object."},{"pos":[1413,1623],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePieceCollection_ProcessInertiaAndDraw<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiececollection.cs#_gamepiececollection_processinertiaanddraw)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePieceCollection_ProcessInertiaAndDraw](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiececollection.cs#_gamepiececollection_processinertiaanddraw)]"},{"content":"The <bpt id=\"p1\">**</bpt>UpdateFromMouse<ept id=\"p1\">**</ept> method is also called during game update.","pos":[1630,1695],"source":"The **UpdateFromMouse** method is also called during game update."},{"content":"It enables only one game piece to have the mouse capture by first checking to see if the current capture (if any) is still in effect.","pos":[1696,1829]},{"content":"If so, no other piece is allowed to check for capture.","pos":[1830,1884]},{"content":"If no piece currently has the capture, the <bpt id=\"p1\">**</bpt>UpdateFromMouse<ept id=\"p1\">**</ept> method enumerates each game piece from last to first, and checks to see if that piece reports a mouse capture.","pos":[1891,2064],"source":"If no piece currently has the capture, the **UpdateFromMouse** method enumerates each game piece from last to first, and checks to see if that piece reports a mouse capture."},{"content":"If so, that piece becomes the current captured piece, and no further processing takes place.","pos":[2065,2157]},{"content":"The <bpt id=\"p1\">**</bpt>UpdateFromMouse<ept id=\"p1\">**</ept> method checks the last item in the collection first so that if two pieces are overlapped, the one with the higher Z-order will obtain the capture.","pos":[2158,2328],"source":" The **UpdateFromMouse** method checks the last item in the collection first so that if two pieces are overlapped, the one with the higher Z-order will obtain the capture."},{"content":"Z-order is not explicit nor changeable; it is governed simply by the order in which game pieces are added to the collection.","pos":[2329,2453]},{"pos":[2460,2658],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>ManipulationXNA#_GamePieceCollection_UpdateFromMouse<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiececollection.cs#_gamepiececollection_updatefrommouse)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[ManipulationXNA#_GamePieceCollection_UpdateFromMouse](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiececollection.cs#_gamepiececollection_updatefrommouse)]"},{"pos":[2667,2675],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Manipulations and Inertia<ept id=\"p1\">](../../../docs/framework/common-client-technologies/manipulations-and-inertia.md)</ept><ph id=\"ph1\"> </ph>","pos":[2679,2788],"source":"[Manipulations and Inertia](../../../docs/framework/common-client-technologies/manipulations-and-inertia.md) "},{"content":"<bpt id=\"p1\">[</bpt>Using Manipulations and Inertia in an XNA Application<ept id=\"p1\">](../../../docs/framework/common-client-technologies/use-manipulations-and-inertia-in-an-xna-application.md)</ept><ph id=\"ph1\"> </ph>","pos":[2792,2955],"source":"[Using Manipulations and Inertia in an XNA Application](../../../docs/framework/common-client-technologies/use-manipulations-and-inertia-in-an-xna-application.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating the GamePiece Class<ept id=\"p1\">](../../../docs/framework/common-client-technologies/creating-the-gamepiece-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[2959,3074],"source":"[Creating the GamePiece Class](../../../docs/framework/common-client-technologies/creating-the-gamepiece-class.md) "},{"content":"<bpt id=\"p1\">[</bpt>Creating the Game1 Class<ept id=\"p1\">](../../../docs/framework/common-client-technologies/creating-the-game1-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[3078,3185],"source":"[Creating the Game1 Class](../../../docs/framework/common-client-technologies/creating-the-game1-class.md) "},{"content":"<bpt id=\"p1\">[</bpt>Full Code Listings<ept id=\"p1\">](../../../docs/framework/common-client-technologies/full-code-listings.md)</ept>","pos":[3189,3283],"source":"[Full Code Listings](../../../docs/framework/common-client-technologies/full-code-listings.md)"}]}