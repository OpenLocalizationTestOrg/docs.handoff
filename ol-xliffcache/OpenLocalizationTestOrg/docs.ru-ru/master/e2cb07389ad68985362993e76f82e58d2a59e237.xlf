<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="resgen-exe-resource-file-generator.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2cb07389ad68985362993e76f82e58d2a59e237</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\tools\resgen-exe-resource-file-generator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">162f15c8725f93756c27cf4c988cb94685758dc1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24eba43cabddd43ff4c3b47c0457dc9c9735fc15</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Resgen.exe (Resource File Generator)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Resgen.exe (Resource File Generator)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Resource File Generator (Resgen.exe) converts text (.txt or .restext) files and XML-based resource format (.resx) files to common language runtime binary (.resources) files that can be embedded in a runtime binary executable or satellite assembly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Resgen.exe is a general-purpose resource conversion utility that performs the following tasks:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Converts .txt or .restext files to .resources or .resx files.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>(The format of .restext files is identical to the format of .txt files.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, the .restext extension helps you identify text files that contain resource definitions more easily.)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Converts .resources files to text or .resx files.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Converts .resx files to text or .resources files.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Extracts the string resources from an assembly into a .resw file that is suitable for use in a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creates a strongly typed class that provides access to individual named resources and to the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If Resgen.exe fails for any reason, the return value is â€“1.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To get help with Resgen,exe, you can use the following command, with no options specified, to display the command syntax and options for Resgen.exe:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`/?`</ph> switch:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you use Resgen,exe to generate binary .resources files, you can use a language compiler to embed the binary files into executable assemblies, or you can use the <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept> to compile them into satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This tool is automatically installed with Visual Studio.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To run the tool, use the Developer Command Prompt for Visual Studio (or the Visual Studio Command Prompt in Windows 7).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>At the command prompt, type the following:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Parameter or switch</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/define:`</ph> <bpt id="p1">*</bpt>symbol1<ept id="p1">*</ept>[, <bpt id="p2">*</bpt>symbol2<ept id="p2">*</ept>,...]</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, supports conditional compilation in text-based (.txt or .restext) resource files.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>symbol<ept id="p1">*</ept> corresponds to a symbol included in the input text file within a <ph id="ph1">`#ifdef`</ph> construct, the associated string resource is included in the .resources file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the input text file includes an <ph id="ph1">`#if !`</ph> statement with a symbol that is not defined by the <ph id="ph2">`/define`</ph> switch, the associated string resource is included in the resources file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/define`</ph> is ignored if it is used with non-text files.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Symbols are case-sensitive.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about this option, see <bpt id="p1">[</bpt>Conditionally Compiling Resources<ept id="p1">](#Conditional)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Specifies that the input file's current directory is to be used to resolve relative file paths.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Enables you to specify multiple .resx or text files to convert to multiple .resources files in a single bulk operation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you do not specify this option, you can specify only one input file argument.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Output files are named <bpt id="p1">*</bpt>filename<ept id="p1">*</ept>.resources.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This option cannot be used with the <ph id="ph1">`/str:`</ph> option.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information about this option, see <bpt id="p1">[</bpt>Compiling or Converting Multiple Files<ept id="p1">](#Multiple)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/r:`</ph> <ph id="ph2">`assembly`</ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>References metadata from the specified assembly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is used when converting .resx files and allows Resgen.exe to serialize or deserialize object resources.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It is similar to the <ph id="ph1">`/reference:`</ph> or <ph id="ph2">`/r:`</ph> options for the C# and Visual Basic compilers.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Specifies the name of the input file to convert.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you're using the first, lengthier command-line syntax presented before this table,  <ph id="ph1">`extension`</ph> must be one of the following:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>.txt or .restext</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A text file to convert to a .resources or a .resx file.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Text files can contain only string resources.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For information about the file format, see the "Resources in Text Files" section of <bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>.resx</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An XML-based resource file to convert to a .resources or a text (.txt or .restext) file.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>.resources</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A binary resource file to convert to a .resx or a text (.txt or .restext) file.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you're using the second, shorter command-line syntax presented before this table, <ph id="ph1">`extension`</ph> must be the following:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>.exe or .dll</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A .NET Framework assembly (executable or library) whose string resources are to be extracted to a .resw file for use in developing <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Specifies the name and type of the resource file to create.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This argument is optional when converting from a .txt, .restext, or .resx file to a .resources file.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you do not specify <ph id="ph1">`outputFilename`</ph>, Resgen.exe appends a .resources extension to the input <ph id="ph2">`filename`</ph> and writes the file to the directory that contains <ph id="ph3">`filename,extension`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`outputFilename.extension`</ph> argument is mandatory when converting from a .resources file.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specify a file name with the .resx extension when converting a .resources file to an XML-based resource file.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Specify a file name with the .txt or .restext extension when converting a .resources file to a text file.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You should convert a .resources file to a .txt file only when the .resources file contains only string values.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps, specifies the directory in which a .resw file that contains the string resources in <ph id="ph2">`filename.extension`</ph> will be written.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`outputDirectory`</ph> must already exist.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/str:`</ph> <ph id="ph2">`language[,namespace[,classname[,filename]]]`</ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Creates a strongly typed resource class file in the programming language specified in the <ph id="ph1">`language`</ph> option.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`language`</ph> can consist of one of the following literals:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>-   For C#: <ph id="ph1">`c#`</ph>, <ph id="ph2">`cs`</ph>, or <ph id="ph3">`csharp`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-   For Visual Basic: <ph id="ph1">`vb`</ph> or <ph id="ph2">`visualbasic`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-   For VBScript: <ph id="ph1">`vbs`</ph> or <ph id="ph2">`vbscript`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-   For C++: <ph id="ph1">`c++`</ph>, <ph id="ph2">`mc`</ph>, or <ph id="ph3">`cpp`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>-   For JavaScript: <ph id="ph1">`js`</ph>, <ph id="ph2">`jscript`</ph>, or <ph id="ph3">`javascript`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`namespace`</ph> option specifies the project's default namespace, the <ph id="ph2">`classname`</ph> option specifies the name of the generated class, and the <ph id="ph3">`filename`</ph> option specifies the name of the class file.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/str:`</ph> option allows only one input file, so it cannot be used with the <ph id="ph2">`/compile`</ph> option.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`namespace`</ph> is specified but <ph id="ph2">`classname`</ph> is not, the class name is derived from the output file name (for example, underscores are substituted for periods).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The strongly typed resources might not work correctly as a result.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To avoid this, specify both class name and output file name.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information about this option, see <bpt id="p1">[</bpt>Generating a Strongly Typed Resource Class<ept id="p1">](#Strong)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Creates a strongly typed resource class as a public class.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>By default, the resource class is <ph id="ph1">`internal`</ph> in C# and <ph id="ph2">`Friend`</ph> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This option is ignored if the <ph id="ph1">`/str:`</ph> option is not used.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Resgen.exe and Resource File Types</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In order for Resgen.exe to successfully convert resources, text and .resx files must follow the correct format.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Text (.txt and .restext) Files</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Text (.txt or .restext) files may contain only string resources.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>String resources are useful if you are writing an application that must have strings translated into several languages.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For example, you can easily regionalize menu strings by using the appropriate string resource.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Resgen.exe reads text files that contain name/value pairs, where the name is a string that describes the resource and the value is the resource string itself.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For information about the format of .txt and .restext files, see the "Resources in Text Files" section of <bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A text file that contains resources must be saved with UTF-8 or Unicode (UTF-16) encoding unless it contains only characters in the Basic Latin range (to U+007F).</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Resgen.exe removes extended ANSI characters when it processes a text file that is saved using ANSI encoding.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Resgen.exe checks the text file for duplicate resource names.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If the text file contains duplicate resource names, Resgen.exe will emit a warning and ignore the second value.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>.resx Files</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The .resx resource file format consists of XML entries.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You can specify string resources within these XML entries, as you would in text files.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A primary advantage of .resx files over text files is that you can also specify or embed objects.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When you view a .resx file, you can see the binary form of an embedded object (for example, a picture) when this binary information is a part of the resource manifest.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>As with text files, you can open a .resx file with a text editor (such as Notepad or Microsoft Word) and write, parse, and manipulate its contents.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Note that this requires a good knowledge of XML tags and the .resx file structure.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For more details on the .resx file format, see the "Resources in .resx Files" section of <bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In order to create a .resources file that contains embedded nonstring objects, you must either use Resgen.exe to convert a .resx file containing objects or add the object resources to your file directly from code by calling the methods provided by the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If your .resx or .resources file contains objects and you use Resgen.exe to convert it to a text file, all the string resources will be converted correctly, but the data types of the nonstring objects will also be written to the file as strings.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You will lose the embedded objects in the conversion, and Resgen.exe will report that an error occurred in retrieving the resources.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Converting Between Resources File Types</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>When you convert between different resource file types, Resgen.exe may not be able to perform the conversion or may lose information about specific resources, depending on the source and target file types.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following table specifies the types of conversions that are successful when converting from one resource file type to another.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Convert from</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To text file</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To .resx file</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To .resw file</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>To .resources file</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Text (.txt or .restext) file</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>No issues</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Not supported</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>No issues</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>.resx file</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Conversion fails if file contains non-string resources (including file links)</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Not supported</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>No issues</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>.resources file</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Conversion fails if file contains non-string resources (including file links)</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>No issues</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Not supported</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>.exe or .dll assembly</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Not supported</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Not supported</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Only string resources (including path names) are recognized as resources</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Not supported</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Performing Specific Resgen.exe Tasks</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You can use Resgen.exe in diverse ways: to compile a text-based or XML-based resource file into a binary file, to convert between resource file formats, and to generate a class that wraps <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> functionality and provides access to resources.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This section provides detailed information about each task:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Compiling Resources into a Binary File<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md#Compiling)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Converting Between Resource File Types<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md#Convert)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Compiling or Converting Multiple Files<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md#Multiple)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exporting Resources to a .resw File<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md#Exporting)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conditionally Compiling Resources<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md#Conditional)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generating a Strongly Typed Resource Class<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md#Strong)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Compiling Resources into a Binary File</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The most common use of Resgen.exe is to compile a text-based resource file (a .txt or .restext file) or an XML-based resource file (a .resx file) into a binary .resources file.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The output file then can be embedded in a main assembly by a language compiler or in a satellite assembly by <bpt id="p1">[</bpt>Assembly Linker (AL.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The syntax to compile a resource file is:</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>where the parameters are:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The file name, including the extension, of the resource file to compile.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Resgen.exe only compiles files with extensions of .txt, .restext, or .resx.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The name of the output file.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If you omit <ph id="ph1">`outputFilename`</ph>, Resgen.exe creates a .resources file with the root file name of <ph id="ph2">`inputFilename`</ph> in the same directory as <ph id="ph3">`inputFilename`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`outputFilename`</ph> includes a directory path, the directory must exist.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You provide a fully qualified namespace for the .resources file by specifying it in the file name and separating it from the root file name by a period.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`outputFilename`</ph> is <ph id="ph2">`MyCompany.Libraries.Strings.resources`</ph>, the namespace is MyCompany.Libraries.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following command reads the name/value pairs in Resources.txt and writes a binary .resources file named Resources.resources.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Because the output file name is not specified explicitly, it receives the same name as the input file by default.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The following command reads the name/value pairs in Resources.restext and writes a binary resources file named StringResources.resources.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following command reads an XML-based input file named Resources.resx and writes a binary .resources file named Resources.resources.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Converting Between Resource File Types</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>In addition to compiling text-based or XML-based resource files into binary .resources files, Resgen.exe can convert any supported file type to any other supported file type.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This means that it can perform the following conversions:</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>.txt and .restext files to .resx files.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>.resx files to .txt and .restext files.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>.resources files to .txt and .restext files.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>.resources files to .resx files.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The syntax is the same as that shown in the previous section.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In addition, you can use Resgen.exe to convert embedded resources in a .NET Framework assembly to a .resw file tor <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The following command reads a binary resources file Resources.resources and writes an XML-based output file named Resources.resx.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The following command reads a text-based resources file named StringResources.txt and writes an XML-based resources file named LibraryResources.resx.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>In addition to containing string resources, the .resx file could also be used to store non-string resources.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The following two commands read an XML-based resources file named Resources.resx and write text files named Resources.txt and Resources.restext.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Note that if the .resx file contains any embedded objects, they will not be accurately converted into the text files.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Compiling or Converting Multiple Files</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`/compile`</ph> switch to convert a list of resource files from one format to another in a single operation.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The syntax is:</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The following command compiles three files, StringResources.txt, TableResources.resw, and ImageResources.resw, into separate .resources files named StringResources.resources, TableResources.resources, and ImageResources.resources.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Exporting Resources to a .resw File</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If you're developing a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app, you may want to use resources from an existing desktop app.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>However, the two kinds of applications support different file formats.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>In desktop apps, resources in text (.txt or .restext) or .resx files are compiled into binary .resources files.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps, .resw files are compiled into binary package resource index (PRI) files.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>You can use Resgen.exe to bridge this gap by extracting resources from an executable or a satellite assembly and writing them to one or more .resw files that can be used when developing a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Visual Studio automatically handles all conversions necessary for incorporating the resources in a portable library into a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Using Resgen.exe directly to convert the resources in an assembly to .resw file format is of interest only to developers who want to develop a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app outside of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The syntax to generate .resw files from an assembly is:</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>where the parameters are:</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The name of a .NET Framework assembly (an executable or .DLL).</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If the file contains no resources, Resgen.exe does not create any files.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The existing directory to which to write the .resw files.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`outputDirectory`</ph> is omitted, .resw files are written to the current directory.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Resgen.exe creates one .resw file for each .resources file in the assembly.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The root file name of the .resw file is the same as the root name of the .resources file.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The following command creates a .resw file in the Win8Resources directory for each .resources file embedded in MyApp.exe:</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Conditionally Compiling Resources</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, Resgen.exe supports conditional compilation of string resources in text (.txt and .restext) files.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This enables you to use a single text-based resource file in multiple build configurations.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>In a .txt or .restext file, you use the <ph id="ph1">`#ifdef`</ph>â€¦<ph id="ph2">`#endif`</ph></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>construct to include a resource in the binary .resources file if a symbol is defined, and you use the <ph id="ph1">`#if !`</ph>... <ph id="ph2">`#endif`</ph> construct to include a resource if a symbol is not defined.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>At compile time, you then define symbols by using the <ph id="ph1">`/define:`</ph> option followed by a comma-delimited list of symbols.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The comparison is cased-sensitive; the case of symbols defined by <ph id="ph1">`/define`</ph> must match the case of symbols in the text files to be compiled.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For example, the following file named UIResources.rext includes a string resource named <ph id="ph1">`AppTitle`</ph> that can take one of three values, depending on whether symbols named <ph id="ph2">`PRODUCTION`</ph>, <ph id="ph3">`CONSULT`</ph>, or <ph id="ph4">`RETAIL`</ph> are defined.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The file can then be compiled into a binary .resources file with the following command:</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>This produces a .resources file that contains two string resources.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`AppTitle`</ph> resource is "My Consulting Company Project Manager".</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Generating a Strongly Typed Resource Class</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Resgen.exe supports strongly typed resources, which encapsulates access to resources by creating classes that contain a set of static read-only properties.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This provides an alternative to calling the methods of the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class directly to retrieve resources.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>You can enable strongly typed resource support by using the <ph id="ph1">`/str`</ph> option in Resgen.exe, which wraps the functionality of the <ph id="ph2">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>When you specify the <ph id="ph1">`/str`</ph> option, the output of Resgen.exe is a class that contains strongly typed properties that match the resources that are referenced in the input parameter.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This class provides strongly typed read-only access to the resources that are available in the file processed.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The syntax to create a strongly typed resource is:</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The parameters and switches are:</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The file name, including the extension, of the resource file for which to generate a strongly typed resource class.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The file can be a text-based, XML-based, or binary .resources file; it can have an extension of .txt, .restext, .resw, or .resources.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The name of the output file.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`outputFilename`</ph> includes a directory path, the directory must exist.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>If you omit <ph id="ph1">`outputFilename`</ph>, Resgen.exe creates a .resources file with the root file name of <ph id="ph2">`inputFilename`</ph> in the same directory as <ph id="ph3">`inputFilename`</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`outputFilename`</ph> can be a text-based, XML-based, or binary .resources file.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If the file extension of <ph id="ph1">`outputFilename`</ph> is different from the file extension of <ph id="ph2">`inputFilename`</ph>, Resgen.exe performs the file conversion.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`inputFilename`</ph> is a .resources file, Resgen.exe copies the .resources file if <ph id="ph2">`outputFilename`</ph> is also a .resources file.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`outputFilename`</ph> is omitted, Resgen.exe overwrites <ph id="ph2">`inputFilename`</ph> with an identical .resources file.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>language<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The language in which to generate source code for the strongly-typed resource class.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Possible values are <ph id="ph1">`cs`</ph>, <ph id="ph2">`C#`</ph>, and <ph id="ph3">`csharp`</ph> for C# code, <ph id="ph4">`vb`</ph> and <ph id="ph5">`visualbasic`</ph> for Visual Basic code, <ph id="ph6">`vbs`</ph> and <ph id="ph7">`vbscript`</ph> for VBScript code, and <ph id="ph8">`c++`</ph>, <ph id="ph9">`mc`</ph>, and <ph id="ph10">`cpp`</ph> for C++ code.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>namespace<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The namespace that contains the strongly typed resource class.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The .resources file and the resource class should have the same namespace.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>For information about specifying the namespace in the <ph id="ph1">`outputFilename`</ph>, see <bpt id="p1">[</bpt>Compiling Resources into a Binary File<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md#Compiling)</ept>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>namespace<ept id="p1">*</ept> is omitted, the resource class is not contained in a namespace.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>classname<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The name of the strongly typed resource class.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>This should correspond to the root name of the .resources file.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>For example, if Resgen.exe generates a .resources file named MyCompany.Libraries.Strings.resources, the name of the strongly typed resource class is Strings.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>classname<ept id="p1">*</ept> is omitted, the generated class is derived from the root name of <ph id="ph1">`outputFilename`</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`outputFilename`</ph> is omitted, the generated class is derived from the root name of <ph id="ph2">`inputFilename`</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>classname<ept id="p1">*</ept> cannot contain invalid characters such as embedded spaces.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>classname<ept id="p1">*</ept> contains embedded spaces, or if <bpt id="p2">*</bpt>classname<ept id="p2">*</ept> is generated by default from <bpt id="p3">*</bpt>inputFilename<ept id="p3">*</ept>, and <bpt id="p4">*</bpt>inputFilename<ept id="p4">*</ept> contains embedded spaces, Resgen.exe replaces all invalid characters with an underscore (_).</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>filename<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The name of the class file.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Makes the strongly typed resource class public rather than <ph id="ph1">`internal`</ph> (in C#) or <ph id="ph2">`Friend`</ph> (in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This allows the resources to be accessed from outside the assembly in which they are embedded.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>When you create a strongly typed resource class, the name of your .resources file must match the namespace and class name of the generated code.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>However, Resgen.exe allows you to specify options that produce a .resources file that has an incompatible name.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>To work around this behavior, rename the output file after it has been generated.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The strongly typed resource class has the following members:</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A parameterless constructor, which can be used to instantiate the strongly typed resource class..</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`static`</ph> (C#) or <ph id="ph2">`Shared`</ph> (Visual Basic) and read-only <ph id="ph3">`ResourceManager`</ph> property, which returns the <ph id="ph4">&lt;xref:System.Resources.ResourceManager&gt;</ph> instance that manages the strongly typed resource.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>A static <ph id="ph1">`Culture`</ph> property, which allows you to set the culture used for resource retrieval.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>By default, its value is <ph id="ph1">`null`</ph>, which means that the current UI culture is used.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>One <ph id="ph1">`static`</ph> (C#) or <ph id="ph2">`Shared`</ph> (Visual Basic) and read-only property for each resource in the .resources file.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The name of the property is the name of the resource.-</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>For example, the following command compiles a resource file named StringResources.txt into StringResources.resources and generates a class named <ph id="ph1">`StringResources`</ph> in a Visual Basic source code file named StringResources.vb that can be used to access the Resource Manager.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tools<ept id="p1">](../../../docs/framework/tools/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resources in Desktop Apps<ept id="p1">](../../../docs/framework/resources/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Al.exe (Assembly Linker)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>