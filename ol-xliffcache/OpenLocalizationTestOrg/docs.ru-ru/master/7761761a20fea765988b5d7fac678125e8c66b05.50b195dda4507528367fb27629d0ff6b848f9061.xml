{"content":"---\ntitle: \"Windows Communication Foundation to Message Queuing\"\nms.date: \"03/30/2017\"\nms.assetid: 78d0d0c9-648e-4d4a-8f0a-14d9cafeead9\n---\n# Windows Communication Foundation to Message Queuing\nThis sample demonstrates how a Windows Communication Foundation (WCF) application can send a message to a Message Queuing (MSMQ) application. The service is a self-hosted console application to enable you to observe the service receiving queued messages. The service and client do not have to be running at the same time.\n\n The service receives messages from the queue and processes orders. The service creates a transactional queue and sets up a message received message handler, as shown in the following sample code.\n\n```csharp\nstatic void Main(string[] args)\n{\n    if (!MessageQueue.Exists(\n              ConfigurationManager.AppSettings[\"queueName\"]))\n       MessageQueue.Create(\n           ConfigurationManager.AppSettings[\"queueName\"], true);\n        //Connect to the queue\n        MessageQueue Queue = new\n    MessageQueue(ConfigurationManager.AppSettings[\"queueName\"]);\n    Queue.ReceiveCompleted +=\n                 new ReceiveCompletedEventHandler(ProcessOrder);\n    Queue.BeginReceive();\n    Console.WriteLine(\"Order Service is running\");\n    Console.ReadLine();\n}\n```\n\n When a message is received in the queue, the message handler `ProcessOrder` is invoked.\n\n```csharp\npublic static void ProcessOrder(Object source,\n    ReceiveCompletedEventArgs asyncResult)\n{\n    try\n    {\n        // Connect to the queue.\n        MessageQueue Queue = (MessageQueue)source;\n        // End the asynchronous receive operation.\n        System.Messaging.Message msg =\n                     Queue.EndReceive(asyncResult.AsyncResult);\n        msg.Formatter = new System.Messaging.XmlMessageFormatter(\n                                new Type[] { typeof(PurchaseOrder) });\n        PurchaseOrder po = (PurchaseOrder) msg.Body;\n        Random statusIndexer = new Random();\n        po.Status = PurchaseOrder.OrderStates[statusIndexer.Next(3)];\n        Console.WriteLine(\"Processing {0} \", po);\n        Queue.BeginReceive();\n    }\n    catch (System.Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n    }\n\n}\n```\n\n The service extracts the `ProcessOrder` from the MSMQ message body, and processes the order.\n\n The MSMQ queue name is specified in an appSettings section of the configuration file, as shown in the following sample configuration.\n\n```xml\n<appSettings>\n    <add key=\"orderQueueName\" value=\".\\private$\\Orders\" />\n</appSettings>\n```\n\n> [!NOTE]\n>  The queue name uses a dot (.) for the local computer and backslash separators in its path.\n\n The client creates a purchase order and submits the purchase order within the scope of a transaction, as shown in the following sample code.\n\n```csharp\n// Create the purchase order\nPurchaseOrder po = new PurchaseOrder();\n// Fill in the details\n...\n\nOrderProcessorClient client = new OrderProcessorClient(\"OrderResponseEndpoint\");\n\nMsmqMessage<PurchaseOrder> ordermsg = new MsmqMessage<PurchaseOrder>(po);\nusing (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required))\n{\n    client.SubmitPurchaseOrder(ordermsg);\n    scope.Complete();\n}\nConsole.WriteLine(\"Order has been submitted:{0}\", po);\n\n//Closing the client gracefully closes the connection and cleans up resources\nclient.Close();\n```\n\n The client uses a custom client in-order to send the MSMQ message to the queue. Because the application that receives and processes the message is an MSMQ application and not a WCF application, there is no implicit service contract between the two applications. So, we cannot create a proxy using the Svcutil.exe tool in this scenario.\n\n The custom client is essentially the same for all WCF applications that use the `MsmqIntegration` binding to send messages. Unlike other clients, it does not include a range of service operations. It is a submit message operation only.\n\n```csharp\n[System.ServiceModel.ServiceContractAttribute(Namespace = \"http://Microsoft.ServiceModel.Samples\")]\npublic interface IOrderProcessor\n{\n    [OperationContract(IsOneWay = true, Action = \"*\")]\n    void SubmitPurchaseOrder(MsmqMessage<PurchaseOrder> msg);\n}\n\npublic partial class OrderProcessorClient : System.ServiceModel.ClientBase<IOrderProcessor>, IOrderProcessor\n{\n    public OrderProcessorClient(){}\n\n    public OrderProcessorClient(string configurationName)\n        : base(configurationName)\n    { }\n\n    public OrderProcessorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress address)\n        : base(binding, address)\n    { }\n\n    public void SubmitPurchaseOrder(MsmqMessage<PurchaseOrder> msg)\n    {\n        base.Channel.SubmitPurchaseOrder(msg);\n    }\n}\n```\n\n When you run the sample, the client and service activities are displayed in both the service and client console windows. You can see the service receive messages from the client. Press ENTER in each console window to shut down the service and client. Note that because queuing is in use, the client and service do not have to be up and running at the same time. For example, you could run the client, shut it down, and then start up the service and it would still receive its messages.\n\n> [!NOTE]\n>  This sample requires the installation of Message Queuing. See the installation instructions in [Message Queuing](https://go.microsoft.com/fwlink/?LinkId=94968).  \n  \n### To setup, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  If the service is run first, it will check to ensure that the queue is present. If the queue is not present, the service will create one. You can run the service first to create the queue, or you can create one via the MSMQ Queue Manager. Follow these steps to create a queue in Windows 2008.  \n  \n    1.  Open Server Manager in Visual Studio 2012.  \n  \n    2.  Expand the **Features** tab.  \n  \n    3.  Right-click **Private Message Queues**, and select **New**, **Private Queue**.  \n  \n    4.  Check the **Transactional** box.  \n  \n    5.  Enter `ServiceModelSamplesTransacted` as the name of the new queue.  \n  \n3.  To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n4.  To run the sample in a single-computer configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md).  \n  \n### To run the sample across computers  \n  \n1.  Copy the service program files from the \\service\\bin\\ folder, under the language-specific folder, to the service computer.  \n  \n2.  Copy the client program files from the \\client\\bin\\ folder, under the language-specific folder, to the client computer.  \n  \n3.  In the Client.exe.config file, change the client endpoint address to specify the service computer name instead of \".\".  \n  \n4.  On the service computer, launch Service.exe from a command prompt.  \n  \n5.  On the client computer, launch Client.exe from a command prompt.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your computer. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Basic\\Binding\\MSMQIntegration\\WcfToMsmq`  \n  \n## See also\n\n- [How to: Exchange Messages with WCF Endpoints and Message Queuing Applications](../../../../docs/framework/wcf/feature-details/how-to-exchange-messages-with-wcf-endpoints-and-message-queuing-applications.md)\n- [Message Queuing](https://go.microsoft.com/fwlink/?LinkId=94968)\n","nodes":[{"pos":[4,135],"embed":true,"restype":"x-metadata","content":"title: \"Windows Communication Foundation to Message Queuing\"\nms.date: \"03/30/2017\"\nms.assetid: 78d0d0c9-648e-4d4a-8f0a-14d9cafeead9","nodes":[{"content":"Windows Communication Foundation to Message Queuing","nodes":[{"pos":[0,51],"content":"Windows Communication Foundation to Message Queuing","nodes":[{"content":"Windows Communication Foundation to Message Queuing","pos":[0,51]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[142,193],"content":"Windows Communication Foundation to Message Queuing","linkify":"Windows Communication Foundation to Message Queuing","nodes":[{"content":"Windows Communication Foundation to Message Queuing","pos":[0,51]}]},{"content":"This sample demonstrates how a Windows Communication Foundation (WCF) application can send a message to a Message Queuing (MSMQ) application.","pos":[194,335]},{"content":"The service is a self-hosted console application to enable you to observe the service receiving queued messages.","pos":[336,448]},{"content":"The service and client do not have to be running at the same time.","pos":[449,515]},{"content":"The service receives messages from the queue and processes orders.","pos":[518,584]},{"content":"The service creates a transactional queue and sets up a message received message handler, as shown in the following sample code.","pos":[585,713]},{"pos":[1277,1364],"content":"When a message is received in the queue, the message handler <ph id=\"ph1\">`ProcessOrder`</ph> is invoked.","source":"When a message is received in the queue, the message handler `ProcessOrder` is invoked."},{"pos":[2203,2295],"content":"The service extracts the <ph id=\"ph1\">`ProcessOrder`</ph> from the MSMQ message body, and processes the order.","source":"The service extracts the `ProcessOrder` from the MSMQ message body, and processes the order."},{"content":"The MSMQ queue name is specified in an appSettings section of the configuration file, as shown in the following sample configuration.","pos":[2298,2431]},{"pos":[2535,2636],"content":"[!NOTE]\n The queue name uses a dot (.) for the local computer and backslash separators in its path.","leadings":["","> "],"nodes":[{"content":"The queue name uses a dot (.) for the local computer and backslash separators in its path.","pos":[9,99]}]},{"content":"The client creates a purchase order and submits the purchase order within the scope of a transaction, as shown in the following sample code.","pos":[2639,2779]},{"content":"The client uses a custom client in-order to send the MSMQ message to the queue.","pos":[3355,3434]},{"content":"Because the application that receives and processes the message is an MSMQ application and not a WCF application, there is no implicit service contract between the two applications.","pos":[3435,3616]},{"content":"So, we cannot create a proxy using the Svcutil.exe tool in this scenario.","pos":[3617,3690]},{"content":"The custom client is essentially the same for all WCF applications that use the <ph id=\"ph1\">`MsmqIntegration`</ph> binding to send messages.","pos":[3693,3816],"source":"The custom client is essentially the same for all WCF applications that use the `MsmqIntegration` binding to send messages."},{"content":"Unlike other clients, it does not include a range of service operations.","pos":[3817,3889]},{"content":"It is a submit message operation only.","pos":[3890,3928]},{"content":"When you run the sample, the client and service activities are displayed in both the service and client console windows.","pos":[4744,4864]},{"content":"You can see the service receive messages from the client.","pos":[4865,4922]},{"content":"Press ENTER in each console window to shut down the service and client.","pos":[4923,4994]},{"content":"Note that because queuing is in use, the client and service do not have to be up and running at the same time.","pos":[4995,5105]},{"content":"For example, you could run the client, shut it down, and then start up the service and it would still receive its messages.","pos":[5106,5229]},{"pos":[5233,5404],"content":"[!NOTE]\n This sample requires the installation of Message Queuing. See the installation instructions in [Message Queuing](https://go.microsoft.com/fwlink/?LinkId=94968).","leadings":["","> "],"nodes":[{"content":"This sample requires the installation of Message Queuing. See the installation instructions in [Message Queuing](https://go.microsoft.com/fwlink/?LinkId=94968).","pos":[9,169],"nodes":[{"content":"This sample requires the installation of Message Queuing.","pos":[0,57]},{"content":"See the installation instructions in <bpt id=\"p1\">[</bpt>Message Queuing<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=94968)</ept>.","pos":[58,160],"source":" See the installation instructions in [Message Queuing](https://go.microsoft.com/fwlink/?LinkId=94968)."}]}]},{"pos":[5414,5449],"content":"To setup, build, and run the sample","linkify":"To setup, build, and run the sample","nodes":[{"content":"To setup, build, and run the sample","pos":[0,35]}]},{"pos":[5459,5658],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"content":"If the service is run first, it will check to ensure that the queue is present.","pos":[5668,5747]},{"content":"If the queue is not present, the service will create one.","pos":[5748,5805]},{"content":"You can run the service first to create the queue, or you can create one via the MSMQ Queue Manager.","pos":[5806,5906]},{"content":"Follow these steps to create a queue in Windows 2008.","pos":[5907,5960]},{"content":"Open Server Manager in Visual Studio 2012.","pos":[5974,6016]},{"pos":[6030,6058],"content":"Expand the <bpt id=\"p1\">**</bpt>Features<ept id=\"p1\">**</ept> tab.","source":"Expand the **Features** tab."},{"pos":[6072,6150],"content":"Right-click <bpt id=\"p1\">**</bpt>Private Message Queues<ept id=\"p1\">**</ept>, and select <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Private Queue<ept id=\"p3\">**</ept>.","source":"Right-click **Private Message Queues**, and select **New**, **Private Queue**."},{"pos":[6164,6196],"content":"Check the <bpt id=\"p1\">**</bpt>Transactional<ept id=\"p1\">**</ept> box.","source":"Check the **Transactional** box."},{"pos":[6210,6277],"content":"Enter <ph id=\"ph1\">`ServiceModelSamplesTransacted`</ph> as the name of the new queue.","source":"Enter `ServiceModelSamplesTransacted` as the name of the new queue."},{"pos":[6287,6496],"content":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[6506,6705],"content":"To run the sample in a single-computer configuration, follow the instructions in <bpt id=\"p1\">[</bpt>Running the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.","source":"To run the sample in a single-computer configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md)."},{"pos":[6715,6749],"content":"To run the sample across computers","linkify":"To run the sample across computers","nodes":[{"content":"To run the sample across computers","pos":[0,34]}]},{"content":"Copy the service program files from the \\service\\bin\\ folder, under the language-specific folder, to the service computer.","pos":[6759,6881]},{"content":"Copy the client program files from the \\client\\bin\\ folder, under the language-specific folder, to the client computer.","pos":[6891,7010]},{"content":"In the Client.exe.config file, change the client endpoint address to specify the service computer name instead of \".\".","pos":[7020,7138]},{"content":"On the service computer, launch Service.exe from a command prompt.","pos":[7148,7214]},{"content":"On the client computer, launch Client.exe from a command prompt.","pos":[7224,7288]},{"pos":[7296,7429],"content":"[!IMPORTANT]\n The samples may already be installed on your computer. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your computer. Check for the following (default) directory before continuing.","pos":[14,131],"nodes":[{"content":"The samples may already be installed on your computer.","pos":[0,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id=\"ph1\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[7483,7793],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[7794,7844]},{"pos":[7940,7948],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7952,8159],"content":"<bpt id=\"p1\">[</bpt>How to: Exchange Messages with WCF Endpoints and Message Queuing Applications<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-exchange-messages-with-wcf-endpoints-and-message-queuing-applications.md)</ept>","source":"[How to: Exchange Messages with WCF Endpoints and Message Queuing Applications](../../../../docs/framework/wcf/feature-details/how-to-exchange-messages-with-wcf-endpoints-and-message-queuing-applications.md)"},{"pos":[8162,8226],"content":"<bpt id=\"p1\">[</bpt>Message Queuing<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=94968)</ept>","source":"[Message Queuing](https://go.microsoft.com/fwlink/?LinkId=94968)"}]}