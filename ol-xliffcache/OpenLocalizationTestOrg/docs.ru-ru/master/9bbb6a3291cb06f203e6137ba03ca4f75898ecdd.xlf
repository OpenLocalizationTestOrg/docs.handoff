<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9bbb6a3291cb06f203e6137ba03ca4f75898ecdd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\misc\security-transparent-code-level-2.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">793a73e37e09695955871fb5790cc507e7ff2ce5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a7b4e9030d22b97428446fd0e1c565910d801d4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Security-Transparent Code, Level 2 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Security-Transparent Code, Level 2</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="top"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> <ph id="ph1">[!INCLUDE[net_security_note](../../../includes/net-security-note-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Level 2 transparency was introduced in the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The three tenets of this model are transparent code, security-safe-critical code, and security-critical code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Transparent code, including code that is running as full trust, can call other transparent code or security-safe-critical code only.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It can only perform actions allowed by the domainâ€™s partial trust permission set (if one exists).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Transparent code cannot do the following:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Perform an <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> or elevation of privilege.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Contain unsafe or unverifiable code.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Directly call critical code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Call native code or code with the <ph id="ph1">&lt;xref:System.Security.SuppressUnmanagedCodeSecurityAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Call a member that is protected by a <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Inherit from critical types.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In addition, transparent methods cannot override critical virtual methods or implement critical interface methods.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Safe-critical code is fully trusted but is callable by transparent code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It exposes a limited surface area of full-trust code; correctness and security verifications happen in safe-critical code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Security-critical code can call any code and is fully trusted, but it cannot be called by transparent code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This topic contains the following sections:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Usage Examples and Behaviors<ept id="p1">](#examples)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Override Patterns<ept id="p1">](#override)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inheritance Rules<ept id="p1">](#inheritance)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Additional Information and Rules<ept id="p1">](#additional)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Usage Examples and Behaviors</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To specify <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph> rules (level 2 transparency), use the following annotation for an assembly:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To lock into the .NET Framework 2.0 rules (level 1 transparency), use the following annotation:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you do not annotate an assembly, the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph> rules are used by default.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, the recommended best practice is to use the <ph id="ph1">&lt;xref:System.Security.SecurityRulesAttribute&gt;</ph> attribute instead of depending on the default.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Assembly-wide Annotation</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following rules apply to the use of attributes at the assembly level:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>No attributes: If you do not specify any attributes, the runtime interprets all code as security-critical, except where being security-critical violates an inheritance rule (for example, when overriding or implementing a transparent virtual or interface method).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In those cases, the methods are safe-critical.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Specifying no attribute causes the common language runtime to determine the transparency rules for you.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SecurityTransparent`</ph>: All code is transparent; the entire assembly will not do anything privileged or unsafe.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SecurityCritical`</ph>: All code that is introduced by types in this assembly is critical; all other code is transparent.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This scenario is similar to not specifying any attributes; however, the common language runtime does not automatically determine the transparency rules.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, if you override a virtual or abstract method or implement an interface method, by default, that method is transparent.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You must explicitly annotate the method as <ph id="ph1">`SecurityCritical`</ph> or <ph id="ph2">`SecuritySafeCritical`</ph>; otherwise, a <ph id="ph3">&lt;xref:System.TypeLoadException&gt;</ph> will be thrown at load time.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This rule also applies when both the base class and the derived class are in the same assembly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AllowPartiallyTrustedCallers`</ph> (level 2 only): All code defaults to transparent.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, individual types and members can have other attributes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following table compares the assembly level behavior for Level 2 with Level 1 .</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Assembly attribute</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Level 2</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Level 1</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>No attribute on a partially trusted assembly</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Types and members are by default transparent, but can be security-critical or security-safe-critical.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>All types and members are transparent.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>No attribute</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Specifying no attribute causes the common language runtime to determine the transparency rules for you.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>All types and members are security-critical, except where being security-critical violates an inheritance rule.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>On a fully trusted assembly (in the global assembly cache or identified as full trust in the <ph id="ph1">`AppDomain`</ph>) all types are transparent and all members are security-safe-critical.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>All types and members are transparent.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>All types and members are transparent.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>All types and members are security-critical.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>All code that is introduced by types in this assembly is critical; all other code is transparent.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you override a virtual or abstract method or implement an interface method, you must explicitly annotate the method as <ph id="ph1">`SecurityCritical`</ph> or <ph id="ph2">`SecuritySafeCritical`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>All code defaults to transparent.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>However, individual types and members can have other attributes.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Type and Member Annotation</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The security attributes that are applied to a type also apply to the members that are introduced by the type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, they do not apply to virtual or abstract overrides of the base class or interface implementations.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following rules apply to the use of attributes at the type and member level:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SecurityCritical`</ph>: The type or member is critical and can be called only by full-trust code.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Methods that are introduced in a security-critical type are critical.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Virtual and abstract methods that are introduced in base classes or interfaces, and overridden or implemented in a security-critical class are transparent by default.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>They must be identified as either <ph id="ph1">`SecuritySafeCritical`</ph> or <ph id="ph2">`SecurityCritical`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SecuritySafeCritical`</ph>: The type or member is safe-critical.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, the type or member can be called from transparent (partially trusted) code and is as capable as any other critical code.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The code must be audited for security.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Override Patterns</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following table shows the method overrides allowed for level 2 transparency.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Base virtual/interface member</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Override/interface</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Inheritance Rules</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In this section, the following order is assigned to <ph id="ph1">`Transparent`</ph>, <ph id="ph2">`Critical`</ph>, and <ph id="ph3">`SafeCritical`</ph> code based on access and capabilities:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Rules for types: Going from left to right, access becomes more restrictive.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Derived types must be at least as restrictive as the base type.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Rules for methods: Derived methods cannot change accessibility from the base method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For default behavior, all derived methods that are not annotated are <ph id="ph1">`Transparent`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Derivatives of critical types cause an exception to be thrown if the overridden method is not explicitly annotated as <ph id="ph1">`SecurityCritical`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following table shows the allowed type inheritance patterns.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Base class</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Derived class can be</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following table shows the disallowed type inheritance patterns.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Base class</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Derived class cannot be</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following table shows the allowed method inheritance patterns.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Base method</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Derived method can be</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following table shows the disallowed method inheritance patterns.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Base method</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Derived method cannot be</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>These inheritance rules apply to level 2 types and members.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Types in level 1 assemblies can inherit from level 2 security-critical types and members.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Therefore, level 2 types and members must have separate inheritance demands for level 1 inheritors.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Additional Information and Rules</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>LinkDemand Support</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The level 2 transparency model replaces the <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In legacy (level 1) code, a <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction&gt;</ph> is automatically treated as a <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityAction&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Reflection</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Invoking a critical method or reading a critical field triggers a demand for full trust (just as if you were invoking a private method or field).</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Therefore, full-trust code can invoke a critical method, whereas partial-trust code cannot.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following properties have been added to the <ph id="ph1">&lt;xref:System.Reflection&gt;</ph> namespace to determine whether the type, method, or field is <ph id="ph2">`SecurityCritical`</ph>, <ph id="ph3">`SecuritySafeCritical`</ph>, or <ph id="ph4">`SecurityTransparent`</ph>:  <ph id="ph5">&lt;xref:System.Type.IsSecurityCritical%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsSecurityTransparent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Use these properties to determine transparency by using reflection instead of checking for the presence of the attribute.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The transparency rules are complex, and checking for the attribute may not be sufficient.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`SafeCritical`</ph> method returns <ph id="ph2">`true`</ph> for both <ph id="ph3">&lt;xref:System.Type.IsSecurityCritical%2A&gt;</ph>and <ph id="ph4">&lt;xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A&gt;</ph>, because <ph id="ph5">`SafeCritical`</ph> is indeed critical (it has the same capabilities as critical code, but it can be called from transparent code).</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Dynamic methods inherit the transparency of the modules they are attached to; they do not inherit the transparency of the type (if they are attached to a type).</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Skip Verification in Full Trust</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can skip verification for fully trusted transparent assemblies by setting the <ph id="ph1">&lt;xref:System.Security.SecurityRulesAttribute.SkipVerificationInFullTrust%2A&gt;</ph> property to <ph id="ph2">`true`</ph> in the <ph id="ph3">&lt;xref:System.Security.SecurityRulesAttribute&gt;</ph> attribute:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecurityRulesAttribute.SkipVerificationInFullTrust%2A&gt;</ph> property is <ph id="ph2">`false`</ph> by default, so the property must be set to <ph id="ph3">`true`</ph> to skip verification.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This should be done for optimization purposes only.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You should ensure that the transparent code in the assembly is verifiable by using the <ph id="ph1">`transparent`</ph> option in the <bpt id="p1">[</bpt>PEVerify tool<ept id="p1">](../../../docs/framework/tools/peverify-exe-peverify-tool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security-Transparent Code, Level 1<ept id="p1">](../../../docs/framework/misc/security-transparent-code-level-1.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Security Changes<ept id="p1">](../../../docs/framework/security/security-changes.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>