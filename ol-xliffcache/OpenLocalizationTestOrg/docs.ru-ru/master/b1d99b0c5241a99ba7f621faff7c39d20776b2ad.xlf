<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="knowing-when-to-use-override-and-new-keywords.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1d99b0c5241a99ba7f621faff7c39d20776b2ad</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\knowing-when-to-use-override-and-new-keywords.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3eb28a25b0d702bd9f84e5b153c068a29cef755c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d57d97e218f100d92b7fff5c36cb46f0e0cde01b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Knowing When to Use Override and New Keywords - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Knowing When to Use Override and New Keywords (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In C#, a method in a derived class can have the same name as a method in the base class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can specify how the methods interact by using the <bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new.md)</ept> and <bpt id="p2">[</bpt>override<ept id="p2">](../../../csharp/language-reference/keywords/override.md)</ept> keywords.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`override`</ph> modifier <bpt id="p1">*</bpt>extends<ept id="p1">*</ept> the base class method, and the <ph id="ph2">`new`</ph> modifier <bpt id="p2">*</bpt>hides<ept id="p2">*</ept> it.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The difference is illustrated in the examples in this topic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In a console application, declare the following two classes, <ph id="ph1">`BaseClass`</ph> and <ph id="ph2">`DerivedClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DerivedClass`</ph> inherits from <ph id="ph2">`BaseClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Main`</ph> method, declare variables <ph id="ph2">`bc`</ph>, <ph id="ph3">`dc`</ph>, and <ph id="ph4">`bcdc`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`bc`</ph> is of type <ph id="ph2">`BaseClass`</ph>, and its value is of type <ph id="ph3">`BaseClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dc`</ph> is of type <ph id="ph2">`DerivedClass`</ph>, and its value is of type <ph id="ph3">`DerivedClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`bcdc`</ph> is of type <ph id="ph2">`BaseClass`</ph>, and its value is of type <ph id="ph3">`DerivedClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This is the variable to pay attention to.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`bc`</ph> and <ph id="ph2">`bcdc`</ph> have type <ph id="ph3">`BaseClass`</ph>, they can only directly access <ph id="ph4">`Method1`</ph>, unless you use casting.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Variable <ph id="ph1">`dc`</ph> can access both <ph id="ph2">`Method1`</ph> and <ph id="ph3">`Method2`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These relationships are shown in the following code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Next, add the following <ph id="ph1">`Method2`</ph> method to <ph id="ph2">`BaseClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The signature of this method matches the signature of the <ph id="ph1">`Method2`</ph> method in <ph id="ph2">`DerivedClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`BaseClass`</ph> now has a <ph id="ph2">`Method2`</ph> method, a second calling statement can be added for <ph id="ph3">`BaseClass`</ph> variables <ph id="ph4">`bc`</ph> and <ph id="ph5">`bcdc`</ph>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When you build the project, you see that the addition of the <ph id="ph1">`Method2`</ph> method in <ph id="ph2">`BaseClass`</ph> causes a warning.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The warning says that the <ph id="ph1">`Method2`</ph> method in <ph id="ph2">`DerivedClass`</ph> hides the <ph id="ph3">`Method2`</ph> method in <ph id="ph4">`BaseClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You are advised to use the <ph id="ph1">`new`</ph> keyword in the <ph id="ph2">`Method2`</ph> definition if you intend to cause that result.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Alternatively, you could rename one of the <ph id="ph1">`Method2`</ph> methods to resolve the warning, but that is not always practical.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Before adding <ph id="ph1">`new`</ph>, run the program to see the output produced by the additional calling statements.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following results are displayed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`new`</ph> keyword preserves the relationships that produce that output, but it suppresses the warning.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The variables that have type <ph id="ph1">`BaseClass`</ph> continue to access the members of <ph id="ph2">`BaseClass`</ph>, and the variable that has type <ph id="ph3">`DerivedClass`</ph> continues to access members in <ph id="ph4">`DerivedClass`</ph> first, and then to consider members inherited from <ph id="ph5">`BaseClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To suppress the warning, add the <ph id="ph1">`new`</ph> modifier to the definition of <ph id="ph2">`Method2`</ph> in <ph id="ph3">`DerivedClass`</ph>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The modifier can be added before or after <ph id="ph1">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Run the program again to verify that the output has not changed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Also verify that the warning no longer appears.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>By using <ph id="ph1">`new`</ph>, you are asserting that you are aware that the member that it modifies hides a member that is inherited from the base class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about name hiding through inheritance, see <bpt id="p1">[</bpt>new Modifier<ept id="p1">](../../../csharp/language-reference/keywords/new-modifier.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To contrast this behavior to the effects of using <ph id="ph1">`override`</ph>, add the following method to <ph id="ph2">`DerivedClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`override`</ph> modifier can be added before or after <ph id="ph2">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">`virtual`</ph> modifier to the definition of <ph id="ph2">`Method1`</ph> in <ph id="ph3">`BaseClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`virtual`</ph> modifier can be added before or after <ph id="ph2">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Run the project again.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Notice especially the last two lines of the following output.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The use of the <ph id="ph1">`override`</ph> modifier enables <ph id="ph2">`bcdc`</ph> to access the <ph id="ph3">`Method1`</ph> method that is defined in <ph id="ph4">`DerivedClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Typically, that is the desired behavior in inheritance hierarchies.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You want objects that have values that are created from the derived class to use the methods that are defined in the derived class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You achieve that behavior by using <ph id="ph1">`override`</ph> to extend the base class method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following code contains the full example.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example illustrates similar behavior in a different context.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The example defines three classes: a base class named <ph id="ph1">`Car`</ph> and two classes that are derived from it, <ph id="ph2">`ConvertibleCar`</ph> and <ph id="ph3">`Minivan`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The base class contains a <ph id="ph1">`DescribeCar`</ph> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The method displays a basic description of a car, and then calls <ph id="ph1">`ShowDetails`</ph> to provide additional information.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Each of the three classes defines a <ph id="ph1">`ShowDetails`</ph> method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`new`</ph> modifier is used to define <ph id="ph2">`ShowDetails`</ph> in the <ph id="ph3">`ConvertibleCar`</ph> class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`override`</ph> modifier is used to define <ph id="ph2">`ShowDetails`</ph> in the <ph id="ph3">`Minivan`</ph> class.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The example tests which version of <ph id="ph1">`ShowDetails`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following method, <ph id="ph1">`TestCars1`</ph>, declares an instance of each class, and then calls <ph id="ph2">`DescribeCar`</ph> on each instance.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TestCars1`</ph> produces the following output.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Notice especially the results for <ph id="ph1">`car2`</ph>, which probably are not what you expected.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The type of the object is <ph id="ph1">`ConvertibleCar`</ph>, but <ph id="ph2">`DescribeCar`</ph> does not access the version of <ph id="ph3">`ShowDetails`</ph> that is defined in the <ph id="ph4">`ConvertibleCar`</ph> class because that method is declared with the <ph id="ph5">`new`</ph> modifier, not the <ph id="ph6">`override`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>As a result, a <ph id="ph1">`ConvertibleCar`</ph> object displays the same description as a <ph id="ph2">`Car`</ph> object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Contrast the results for <ph id="ph1">`car3`</ph>, which is a <ph id="ph2">`Minivan`</ph> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`ShowDetails`</ph> method that is declared in the <ph id="ph2">`Minivan`</ph> class overrides the <ph id="ph3">`ShowDetails`</ph> method that is declared in the <ph id="ph4">`Car`</ph> class, and the description that is displayed describes a minivan.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TestCars2`</ph> creates a list of objects that have type <ph id="ph2">`Car`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The values of the objects are instantiated from the <ph id="ph1">`Car`</ph>, <ph id="ph2">`ConvertibleCar`</ph>, and <ph id="ph3">`Minivan`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DescribeCar`</ph> is called on each element of the list.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following code shows the definition of <ph id="ph1">`TestCars2`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following output is displayed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Notice that it is the same as the output that is displayed by <ph id="ph1">`TestCars1`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ShowDetails`</ph> method of the <ph id="ph2">`ConvertibleCar`</ph> class is not called, regardless of whether the type of the object is <ph id="ph3">`ConvertibleCar`</ph>, as in <ph id="ph4">`TestCars1`</ph>, or <ph id="ph5">`Car`</ph>, as in <ph id="ph6">`TestCars2`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Conversely, <ph id="ph1">`car3`</ph> calls the <ph id="ph2">`ShowDetails`</ph> method from the <ph id="ph3">`Minivan`</ph> class in both cases, whether it has type <ph id="ph4">`Minivan`</ph> or type <ph id="ph5">`Car`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Methods <ph id="ph1">`TestCars3`</ph> and <ph id="ph2">`TestCars4`</ph> complete the example.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>These methods call <ph id="ph1">`ShowDetails`</ph> directly, first from objects declared to have type <ph id="ph2">`ConvertibleCar`</ph> and <ph id="ph3">`Minivan`</ph> (<ph id="ph4">`TestCars3`</ph>), then from objects declared to have type <ph id="ph5">`Car`</ph> (<ph id="ph6">`TestCars4`</ph>).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following code defines these two methods.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The methods produce the following output, which corresponds to the results from the first example in this topic.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following code shows the complete project and its output.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes and Structs<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Versioning with the Override and New Keywords<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords.md)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>base<ept id="p1">](../../../csharp/language-reference/keywords/base.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>abstract<ept id="p1">](../../../csharp/language-reference/keywords/abstract.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>