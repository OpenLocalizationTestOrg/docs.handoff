<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87427c58484037e6ac49f03af8573618c197427c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\accessing-services-using-a-wcf-client.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6f2bc39285caa21ee9d3500267bbeda80a8b6dc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3dd32ddb6b2ab727ac3c9a1caa6ad4040d67d95</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Accessing Services Using a WCF Client | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Accessing Services Using a WCF Client</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>After you create a service, the next step is to create a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client proxy.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A client application uses the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client proxy to communicate with the service.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Client applications usually import a service's metadata to generate <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client code that can be used to invoke the service.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The basic steps for creating a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client include the following:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Compile the service code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Generate the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client proxy.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Instantiate the WCF client proxy.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The WCF client proxy can be generated manually by using the Service Model Metadata Utility Tool (SvcUtil.exe) for more information see, <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The WCF client proxy can also be generated within Visual Studio using the Add Service Reference  feature.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To generate the WCF client proxy using either method the service must be running.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the service is self-hosted you must run the host.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the service is hosted in IIS/WAS you do not need to do anything else.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>ServiceModel Metadata Utility Tool</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> is a command-line tool for generating code from metadata.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following use is an example of a basic Svcutil.exe command.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use Svcutil.exe with Web Services Description Language (WSDL) and XML Schema definition language (XSD) files on the file system.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The result is a code file that contains <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client code that the client application can use to invoke the service.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also use the tool to generate configuration files.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If only one file name is given, that is the name of the output file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If two file names are given, then the first file is an input configuration file whose contents are merged with the generated configuration and written out into the second file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> configuration, see <bpt id="p1">[</bpt>Configuring Bindings for Services<ept id="p1">](../../../docs/framework/wcf/configuring-bindings-for-wcf-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Unsecured metadata requests pose certain risks in the same way that any unsecured network request does: If you are not certain that the endpoint you are communicating with is who it says it is, the information you retrieve might be metadata from a malicious service.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add Service Reference in Visual Studio</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>With the service running, right click the project that will contain the WCF client proxy and select <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add Service Reference Dialog<ept id="p1">**</ept> type in the URL to the service you want to call and click the <bpt id="p2">**</bpt>Go<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The dialog will display a list of services available at the address you specify.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Double click the service to see the contracts and operations available, specify a namespace for the generated code and click the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following code example shows a service contract created for a service.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The ServiceModel Metadata utility tool and Add Service Reference in Visual Studio generates the following <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The class inherits from the generic <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> class and implements the <ph id="ph2">`ICalculator`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The tool also generates the <ph id="ph1">`ICalculator`</ph> interface (not shown here).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Using the WCF Client</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To use the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client, create an instance of the <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client, and then call its methods, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Debugging Exceptions Thrown by a Client</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Many exceptions thrown by a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client are caused by an exception on the service.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Some examples of this are:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>: An existing connection was forcibly closed by the remote host.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>: The underlying connection was closed unexpectedly.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationObjectAbortedException&gt;</ph>: The socket connection was aborted.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This could be caused by an error processing your message, a receive time-out being exceeded by the remote host, or an underlying network resource issue.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When these types of exceptions occur, the best way to solve the problem is to turn on tracing on the service side and determine what exception occurred there.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> tracing, see <bpt id="p1">[</bpt>Tracing<ept id="p1">](../../../docs/framework/wcf/diagnostics/tracing/index.md)</ept> and <bpt id="p2">[</bpt>Using Tracing to Troubleshoot Your Application<ept id="p2">](../../../docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Client<ept id="p1">](../../../docs/framework/wcf/how-to-create-a-wcf-client.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Access Services with a Duplex Contract<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-access-services-with-a-duplex-contract.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Call Service Operations Asynchronously<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Access Services with One-Way and Request-Reply Contracts<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-access-wcf-services-with-one-way-and-request-reply-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Access a WSE 3.0 Service<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-access-a-wse-3-0-service-with-a-wcf-client.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Understanding Generated Client Code<ept id="p1">](../../../docs/framework/wcf/feature-details/understanding-generated-client-code.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Improve the Startup Time of WCF Client Applications using the XmlSerializer<ept id="p1">](../../../docs/framework/wcf/feature-details/startup-time-of-wcf-client-applications-using-the-xmlserializer.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Specifying Client Run-Time Behavior<ept id="p1">](../../../docs/framework/wcf/specifying-client-run-time-behavior.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Configuring Client Behaviors<ept id="p1">](../../../docs/framework/wcf/configuring-client-behaviors.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>