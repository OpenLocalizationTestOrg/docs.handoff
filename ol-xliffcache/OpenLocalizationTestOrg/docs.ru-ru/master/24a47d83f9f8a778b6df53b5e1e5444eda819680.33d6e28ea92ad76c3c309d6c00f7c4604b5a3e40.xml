{"content":"---\ntitle: \"uint (C# Reference) | Microsoft Docs\"\nms.date: \"2017-03-14\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"uint\"\n  - \"uint_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"uint keyword [C#]\"\nms.assetid: e93e42c6-ec72-4b0b-89df-2fd8d36f7a7b\ncaps.latest.revision: 18\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# uint (C# Reference)\n\nThe `uint` keyword signifies an integral type that stores values according to the size and range shown in the following table.  \n  \n|Type|Range|Size|.NET Framework type|  \n|----------|-----------|----------|-------------------------|  \n|`uint`|0 to 4,294,967,295|Unsigned 32-bit integer|<xref:System.UInt32?displayProperty=fullName>|  \n  \n **Note** The `uint` type is not CLS-compliant. Use `int` whenever possible.  \n  \n## Literals  \n\nYou can declare and initialize a `uint` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it. If the integer literal is outside the range of `uint` (that is, if it is less than <xref:System.UInt32.MinValue?displayProperty=fullName> or greater than <xref:System.UInt32.MaxValue?displayProperty=fullName>, a compilation error occurs.\n\nIn the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to `uint` values.  \n  \n[!code-cs[uint](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UInt)]  \n\n> [!NOTE] \n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix. \n\nStarting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows.\n\n[!code-cs[uint](../../../../samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#UIntS)]  \n \n Integer literals can also include a suffix that denotes the type. The suffix `U` or 'u' denotes either a `uint` or a `ulong`, depending on the numeric value of the literal. The following example uses the `u` suffix to denote an unsigned integer of both types. Note that the first literal is a `uint` because its value is less than <xref:System.UInt32.MaxValue?displayProperty=fullName>, while the second is a `ulong` because its value is greater than <xref:System.UInt32.MaxValue?displayProperty=fullName>.\n\n[!code-cs[usuffix](../../../../samples/snippets/csharp/language-reference/keywords/numeric-suffixes.cs#1)]  \n \nIf an integer literal has no suffix, its type is the first of the following types in which its value can be represented: \n\n1. [int](int.md)\n2. `uint`\n3. [long](../../../csharp/language-reference/keywords/long.md)\n4. [ulong](../../../csharp/language-reference/keywords/ulong.md) \n  \n## Conversions  \n There is a predefined implicit conversion from `uint` to [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md). For example:  \n  \n```csharp  \nfloat myFloat = 4294967290;   // OK: implicit conversion to float  \n```  \n  \n There is a predefined implicit conversion from [byte](../../../csharp/language-reference/keywords/byte.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), or [char](../../../csharp/language-reference/keywords/char.md) to `uint`. Otherwise you must use a cast. For example, the following assignment statement will produce a compilation error without a cast:  \n  \n```csharp  \nlong aLong = 22;  \n// Error -- no implicit conversion from long:  \nuint uInt1 = aLong;   \n// OK -- explicit conversion:  \nuint uInt2 = (uint)aLong;  \n```  \n  \n Notice also that there is no implicit conversion from floating-point types to `uint`. For example, the following statement generates a compiler error unless an explicit cast is used:  \n  \n```csharp  \n// Error -- no implicit conversion from double:  \nuint x = 3.0;  \n// OK -- explicit conversion:  \nuint y = (uint)3.0;   \n```  \n  \n For information about arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md).  \n  \n For more information about implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md).  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n <xref:System.UInt32>   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)","nodes":[{"pos":[4,560],"embed":true,"restype":"x-metadata","content":"title: \"uint (C# Reference) | Microsoft Docs\"\nms.date: \"2017-03-14\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"uint\"\n  - \"uint_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"uint keyword [C#]\"\nms.assetid: e93e42c6-ec72-4b0b-89df-2fd8d36f7a7b\ncaps.latest.revision: 18\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"uint (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,36],"content":"uint (C# Reference) | Microsoft Docs","nodes":[{"content":"uint (C# Reference) | Microsoft Docs","pos":[0,36]}]}],"path":["title"]}],"yml":true},{"pos":[567,586],"content":"uint (C# Reference)","linkify":"uint (C# Reference)","nodes":[{"content":"uint (C# Reference)","pos":[0,19]}]},{"pos":[588,714],"content":"The <ph id=\"ph1\">`uint`</ph> keyword signifies an integral type that stores values according to the size and range shown in the following table.","source":"The `uint` keyword signifies an integral type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[721,725]},{"content":"Range","pos":[726,731]},{"content":"Size","pos":[732,736]},{"content":".NET Framework type","pos":[737,756]},{"content":"0 to 4,294,967,295","pos":[832,850]},{"content":"Unsigned 32-bit integer","pos":[851,874]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> The <ph id=\"ph1\">`uint`</ph> type is not CLS-compliant.","pos":[928,974],"source":"**Note** The `uint` type is not CLS-compliant."},{"content":"Use <ph id=\"ph1\">`int`</ph> whenever possible.","pos":[975,1003],"source":" Use `int` whenever possible."},{"pos":[1012,1020],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`uint`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.","pos":[1024,1175],"source":"You can declare and initialize a `uint` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`uint`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.UInt32.MinValue?displayProperty=fullName&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;</ph>, a compilation error occurs.","pos":[1176,1413],"source":" If the integer literal is outside the range of `uint` (that is, if it is less than <xref:System.UInt32.MinValue?displayProperty=fullName> or greater than <xref:System.UInt32.MaxValue?displayProperty=fullName>, a compilation error occurs."},{"pos":[1415,1569],"content":"In the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to <ph id=\"ph1\">`uint`</ph> values.","source":"In the following example, integers equal to 3,000,000,000 that are represented as decimal, hexadecimal, and binary literals are assigned to `uint` values."},{"pos":[1687,1850],"content":"[!NOTE] \nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[9,161],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"pos":[1853,1997],"content":"Starting with C# 7, you can also use the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator to enhance readability, as the following example shows.","source":"Starting with C# 7, you can also use the underscore character, `_`, as a digit separator to enhance readability, as the following example shows."},{"content":"Integer literals can also include a suffix that denotes the type.","pos":[2112,2177]},{"content":"The suffix <ph id=\"ph1\">`U`</ph> or 'u' denotes either a <ph id=\"ph2\">`uint`</ph> or a <ph id=\"ph3\">`ulong`</ph>, depending on the numeric value of the literal.","pos":[2178,2284],"source":" The suffix `U` or 'u' denotes either a `uint` or a `ulong`, depending on the numeric value of the literal."},{"content":"The following example uses the <ph id=\"ph1\">`u`</ph> suffix to denote an unsigned integer of both types.","pos":[2285,2371],"source":" The following example uses the `u` suffix to denote an unsigned integer of both types."},{"content":"Note that the first literal is a <ph id=\"ph1\">`uint`</ph> because its value is less than <ph id=\"ph2\">&lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;</ph>, while the second is a <ph id=\"ph3\">`ulong`</ph> because its value is greater than <ph id=\"ph4\">&lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;</ph>.","pos":[2372,2618],"source":" Note that the first literal is a `uint` because its value is less than <xref:System.UInt32.MaxValue?displayProperty=fullName>, while the second is a `ulong` because its value is greater than <xref:System.UInt32.MaxValue?displayProperty=fullName>."},{"content":"If an integer literal has no suffix, its type is the first of the following types in which its value can be represented:","pos":[2731,2851]},{"pos":[2857,2870],"content":"<bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>","source":"[int](int.md)"},{"pos":[2884,2943],"content":"<bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept>","source":"[long](../../../csharp/language-reference/keywords/long.md)"},{"pos":[2947,3008],"content":"<bpt id=\"p1\">[</bpt>ulong<ept id=\"p1\">](../../../csharp/language-reference/keywords/ulong.md)</ept>","source":"[ulong](../../../csharp/language-reference/keywords/ulong.md)"},{"pos":[3016,3027],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`uint`</ph> to <bpt id=\"p1\">[</bpt>long<ept id=\"p1\">](../../../csharp/language-reference/keywords/long.md)</ept>, <bpt id=\"p2\">[</bpt>ulong<ept id=\"p2\">](../../../csharp/language-reference/keywords/ulong.md)</ept>, <bpt id=\"p3\">[</bpt>float<ept id=\"p3\">](../../../csharp/language-reference/keywords/float.md)</ept>, <bpt id=\"p4\">[</bpt>double<ept id=\"p4\">](../../../csharp/language-reference/keywords/double.md)</ept>, or <bpt id=\"p5\">[</bpt>decimal<ept id=\"p5\">](../../../csharp/language-reference/keywords/decimal.md)</ept>.","pos":[3031,3409],"source":"There is a predefined implicit conversion from `uint` to [long](../../../csharp/language-reference/keywords/long.md), [ulong](../../../csharp/language-reference/keywords/ulong.md), [float](../../../csharp/language-reference/keywords/float.md), [double](../../../csharp/language-reference/keywords/double.md), or [decimal](../../../csharp/language-reference/keywords/decimal.md)."},{"content":"For example:","pos":[3410,3422]},{"content":"There is a predefined implicit conversion from <bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](../../../csharp/language-reference/keywords/byte.md)</ept>, <bpt id=\"p2\">[</bpt>ushort<ept id=\"p2\">](../../../csharp/language-reference/keywords/ushort.md)</ept>, or <bpt id=\"p3\">[</bpt>char<ept id=\"p3\">](../../../csharp/language-reference/keywords/char.md)</ept> to <ph id=\"ph1\">`uint`</ph>.","pos":[3518,3764],"source":"There is a predefined implicit conversion from [byte](../../../csharp/language-reference/keywords/byte.md), [ushort](../../../csharp/language-reference/keywords/ushort.md), or [char](../../../csharp/language-reference/keywords/char.md) to `uint`."},{"content":"Otherwise you must use a cast.","pos":[3765,3795]},{"content":"For example, the following assignment statement will produce a compilation error without a cast:","pos":[3796,3892]},{"content":"Notice also that there is no implicit conversion from floating-point types to <ph id=\"ph1\">`uint`</ph>.","pos":[4070,4155],"source":"Notice also that there is no implicit conversion from floating-point types to `uint`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[4156,4252]},{"pos":[4401,4632],"content":"For information about arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](../../../csharp/language-reference/keywords/double.md)</ept>.","source":"For information about arithmetic expressions with mixed floating-point types and integral types, see [float](../../../csharp/language-reference/keywords/float.md) and [double](../../../csharp/language-reference/keywords/double.md)."},{"pos":[4639,4829],"content":"For more information about implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.","source":"For more information about implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)."},{"pos":[4838,4863],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[4977,4985],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.UInt32&gt;</ph>","pos":[4989,5009],"source":"<xref:System.UInt32> "},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5014,5074],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5078,5145],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5149,5217],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5221,5313],"source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5317,5409],"source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[5413,5533],"source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","pos":[5537,5656],"source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}