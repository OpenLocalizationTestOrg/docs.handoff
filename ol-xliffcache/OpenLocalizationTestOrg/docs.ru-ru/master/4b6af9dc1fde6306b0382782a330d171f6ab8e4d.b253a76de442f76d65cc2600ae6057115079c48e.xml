{"content":"---\ntitle: \"Function Expression (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Function expression [Visual Basic]\"\n  - \"functions [Visual Basic], function expressions\"\n  - \"lambda expressions [Visual Basic], function expression\"\nms.assetid: e8a47a45-4b8a-4f45-a623-7653625dffbc\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Function Expression (Visual Basic)\nDeclares the parameters and code that define a function lambda expression.  \n  \n## Syntax  \n  \n```  \nFunction ( [ parameterlist ] ) expression  \n- or -  \nFunction ( [ parameterlist ] )  \n  [ statements ]  \nEnd Function  \n  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`parameterlist`|Optional. A list of local variable names that represent the parameters of this procedure. The parentheses must be present even when the list is empty. See [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md).|  \n|`expression`|Required. A single expression. The type of the expression is the return type of the function.|  \n|`statements`|Required. A list of statements that returns a value by using the `Return` statement. (See [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md).) The type of the value returned is the return type of the function.|  \n  \n## Remarks  \n A *lambda expression* is a function without a name that calculates and returns a value. You can use a lambda expression anywhere you can use a delegate type, except as an argument to `RemoveHandler`. For more information about delegates, and the use of lambda expressions with delegates, see [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md) and [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md).  \n  \n## Lambda Expression Syntax  \n The syntax of a lambda expression resembles that of a standard function. The differences are as follows:  \n  \n-   A lambda expression does not have a name.  \n  \n-   Lambda expressions cannot have modifiers, such as `Overloads` or `Overrides`.  \n  \n-   Lambda expressions do not use an `As` clause to designate the return type of the function. Instead, the type is inferred from the value that the body of a single-line lambda expression evaluates to, or the return value of a multiline lambda expression. For example, if the body of a single-line lambda expression is `Where cust.City = \"London\"`, its return type is `Boolean`.  \n  \n-   The body of a single-line lambda expression must be an expression, not a statement. The body can consist of a call to a function procedure, but not a call to a sub procedure.  \n  \n-   Either all parameters must have specified data types or all must be inferred.  \n  \n-   Optional and Paramarray parameters are not permitted.  \n  \n-   Generic parameters are not permitted.  \n  \n## Example  \n The following examples show two ways to create simple lambda expressions. The first uses a `Dim` to provide a name for the function. To call the function, you send in a value for the parameter.  \n  \n [!code-vb[VbVbalrLambdas#1](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_1.vb)]  \n  \n [!code-vb[VbVbalrLambdas#2](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_2.vb)]  \n  \n## Example  \n Alternatively, you can declare and run the function at the same time.  \n  \n [!code-vb[VbVbalrLambdas#3](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_3.vb)]  \n  \n## Example  \n Following is an example of a lambda expression that increments its argument and returns the value. The example shows both the single-line and multiline lambda expression syntax for a function. For more examples, see [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md).  \n  \n [!code-vb[VbVbalrLambdas#14](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/function-expression_4.vb)]  \n  \n## Example  \n Lambda expressions underlie many of the query operators in [!INCLUDE[vbteclinqext](../../../csharp/getting-started/includes/vbteclinqext_md.md)], and can be used explicitly in method-based queries. The following example shows a typical [!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)] query, followed by the translation of the query into method format.  \n  \n```vb  \nDim londonCusts = From cust In db.Customers  \n                       Where cust.City = \"London\"  \n                       Select cust  \n  \n' This query is compiled to the following code:  \nDim londonCusts = db.Customers.  \n                  Where(Function(cust) cust.City = \"London\").  \n                  Select(Function(cust) cust)  \n```  \n  \n For more information about query methods, see [Queries](../../../visual-basic/language-reference/queries/queries.md). For more information about standard query operators, see [Standard Query Operators Overview](http://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2).  \n  \n## See Also  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)   \n [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)   \n [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)   \n [Statements](../../../visual-basic/programming-guide/language-features/statements.md)   \n [Value Comparisons](../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)   \n [Boolean Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)   \n [If Operator](../../../visual-basic/language-reference/operators/if-operator.md)   \n [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)\n","nodes":[{"pos":[4,693],"embed":true,"restype":"x-metadata","content":"title: \"Function Expression (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Function expression [Visual Basic]\"\n  - \"functions [Visual Basic], function expressions\"\n  - \"lambda expressions [Visual Basic], function expression\"\nms.assetid: e8a47a45-4b8a-4f45-a623-7653625dffbc\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Function Expression (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,51],"content":"Function Expression (Visual Basic) | Microsoft Docs","nodes":[{"content":"Function Expression (Visual Basic) | Microsoft Docs","pos":[0,51]}]}],"path":["title"]}],"yml":true},{"pos":[700,734],"content":"Function Expression (Visual Basic)","linkify":"Function Expression (Visual Basic)","nodes":[{"content":"Function Expression (Visual Basic)","pos":[0,34]}]},{"content":"Declares the parameters and code that define a function lambda expression.","pos":[735,809]},{"pos":[818,824],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[971,976],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[983,987]},{"content":"Definition","pos":[988,998]},{"content":"Optional.","pos":[1031,1040]},{"content":"A list of local variable names that represent the parameters of this procedure.","pos":[1041,1120]},{"content":"The parentheses must be present even when the list is empty.","pos":[1121,1181]},{"content":"See <bpt id=\"p1\">[</bpt>Parameter List<ept id=\"p1\">](../../../visual-basic/language-reference/statements/parameter-list.md)</ept>.","pos":[1182,1274],"source":" See [Parameter List](../../../visual-basic/language-reference/statements/parameter-list.md)."},{"content":"Required.","pos":[1292,1301]},{"content":"A single expression.","pos":[1302,1322]},{"content":"The type of the expression is the return type of the function.","pos":[1323,1385]},{"content":"Required.","pos":[1403,1412]},{"content":"A list of statements that returns a value by using the <ph id=\"ph1\">`Return`</ph> statement.","pos":[1413,1487],"source":" A list of statements that returns a value by using the `Return` statement."},{"content":"(See <bpt id=\"p1\">[</bpt>Return Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/return-statement.md)</ept>.) The type of the value returned is the return type of the function.","pos":[1488,1653],"source":" (See [Return Statement](../../../visual-basic/language-reference/statements/return-statement.md).) The type of the value returned is the return type of the function."},{"pos":[1663,1670],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A <bpt id=\"p1\">*</bpt>lambda expression<ept id=\"p1\">*</ept> is a function without a name that calculates and returns a value.","pos":[1674,1761],"source":"A *lambda expression* is a function without a name that calculates and returns a value."},{"content":"You can use a lambda expression anywhere you can use a delegate type, except as an argument to <ph id=\"ph1\">`RemoveHandler`</ph>.","pos":[1762,1873],"source":" You can use a lambda expression anywhere you can use a delegate type, except as an argument to `RemoveHandler`."},{"content":"For more information about delegates, and the use of lambda expressions with delegates, see <bpt id=\"p1\">[</bpt>Delegate Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept> and <bpt id=\"p2\">[</bpt>Relaxed Delegate Conversion<ept id=\"p2\">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>.","pos":[1874,2196],"source":" For more information about delegates, and the use of lambda expressions with delegates, see [Delegate Statement](../../../visual-basic/language-reference/statements/delegate-statement.md) and [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)."},{"pos":[2205,2229],"content":"Lambda Expression Syntax","linkify":"Lambda Expression Syntax","nodes":[{"content":"Lambda Expression Syntax","pos":[0,24]}]},{"content":"The syntax of a lambda expression resembles that of a standard function.","pos":[2233,2305]},{"content":"The differences are as follows:","pos":[2306,2337]},{"content":"A lambda expression does not have a name.","pos":[2347,2388]},{"pos":[2398,2475],"content":"Lambda expressions cannot have modifiers, such as <ph id=\"ph1\">`Overloads`</ph> or <ph id=\"ph2\">`Overrides`</ph>.","source":"Lambda expressions cannot have modifiers, such as `Overloads` or `Overrides`."},{"content":"Lambda expressions do not use an <ph id=\"ph1\">`As`</ph> clause to designate the return type of the function.","pos":[2485,2575],"source":"Lambda expressions do not use an `As` clause to designate the return type of the function."},{"content":"Instead, the type is inferred from the value that the body of a single-line lambda expression evaluates to, or the return value of a multiline lambda expression.","pos":[2576,2737]},{"content":"For example, if the body of a single-line lambda expression is <ph id=\"ph1\">`Where cust.City = \"London\"`</ph>, its return type is <ph id=\"ph2\">`Boolean`</ph>.","pos":[2738,2860],"source":" For example, if the body of a single-line lambda expression is `Where cust.City = \"London\"`, its return type is `Boolean`."},{"content":"The body of a single-line lambda expression must be an expression, not a statement.","pos":[2870,2953]},{"content":"The body can consist of a call to a function procedure, but not a call to a sub procedure.","pos":[2954,3044]},{"content":"Either all parameters must have specified data types or all must be inferred.","pos":[3054,3131]},{"content":"Optional and Paramarray parameters are not permitted.","pos":[3141,3194]},{"content":"Generic parameters are not permitted.","pos":[3204,3241]},{"pos":[3250,3257],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following examples show two ways to create simple lambda expressions.","pos":[3261,3334]},{"content":"The first uses a <ph id=\"ph1\">`Dim`</ph> to provide a name for the function.","pos":[3335,3393],"source":" The first uses a `Dim` to provide a name for the function."},{"content":"To call the function, you send in a value for the parameter.","pos":[3394,3454]},{"pos":[3735,3742],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Alternatively, you can declare and run the function at the same time.","pos":[3746,3815]},{"pos":[3960,3967],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Following is an example of a lambda expression that increments its argument and returns the value.","pos":[3971,4069]},{"content":"The example shows both the single-line and multiline lambda expression syntax for a function.","pos":[4070,4163]},{"content":"For more examples, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>.","pos":[4164,4300],"source":" For more examples, see [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)."},{"pos":[4446,4453],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Lambda expressions underlie many of the query operators in <ph id=\"ph1\">[!INCLUDE[vbteclinqext](../../../csharp/getting-started/includes/vbteclinqext_md.md)]</ph>, and can be used explicitly in method-based queries.","pos":[4457,4654],"source":"Lambda expressions underlie many of the query operators in [!INCLUDE[vbteclinqext](../../../csharp/getting-started/includes/vbteclinqext_md.md)], and can be used explicitly in method-based queries."},{"content":"The following example shows a typical <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph> query, followed by the translation of the query into method format.","pos":[4655,4824],"source":" The following example shows a typical [!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)] query, followed by the translation of the query into method format."},{"content":"For more information about query methods, see <bpt id=\"p1\">[</bpt>Queries<ept id=\"p1\">](../../../visual-basic/language-reference/queries/queries.md)</ept>.","pos":[5182,5299],"source":"For more information about query methods, see [Queries](../../../visual-basic/language-reference/queries/queries.md)."},{"content":"For more information about standard query operators, see <bpt id=\"p1\">[</bpt>Standard Query Operators Overview<ept id=\"p1\">](http://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2)</ept>.","pos":[5300,5465],"source":" For more information about standard query operators, see [Standard Query Operators Overview](http://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2)."},{"pos":[5474,5482],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[5486,5582],"source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[5586,5699],"source":"[Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5703,5825],"source":"[Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept><ph id=\"ph1\"> </ph>","pos":[5829,5915],"source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md) "},{"content":"<bpt id=\"p1\">[</bpt>Value Comparisons<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md)</ept><ph id=\"ph1\"> </ph>","pos":[5919,6045],"source":"[Value Comparisons](../../../visual-basic/programming-guide/language-features/operators-and-expressions/value-comparisons.md) "},{"content":"<bpt id=\"p1\">[</bpt>Boolean Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[6049,6179],"source":"[Boolean Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md) "},{"content":"<bpt id=\"p1\">[</bpt>If Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/if-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[6183,6264],"source":"[If Operator](../../../visual-basic/language-reference/operators/if-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Relaxed Delegate Conversion<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept>","pos":[6268,6397],"source":"[Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)"}]}