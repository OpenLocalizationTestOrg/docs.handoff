<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="custom-lifetime.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be6013d568e3625c5eac7e0c145db7df1c6917e3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\custom-lifetime.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4620366ec5ead41c2ca7eef0fa82fccdc37a20eb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d847137edda8f7c3a48c4ad2f8d27af5b2cd4432</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Custom lifetime</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Custom lifetime</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to write a Windows Communication Foundation (WCF) extension to provide custom lifetime services for shared WCF service instances.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The setup procedure and build instructions for this sample are located at the end of this article.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Shared instancing</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>WCF offers several instancing modes for your service instances.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The shared instancing mode covered in this article provides a way to share a service instance between multiple channels.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Clients can contact a factory method in the service and create a new channel to start communication.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following code snippet shows how a client application creates a new channel to an existing service instance:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Unlike other instancing modes, the shared instancing mode has a unique way of releasing the service instances.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By default, when all the channels are closed for an <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>, the WCF service runtime checks to see if the service <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> is configured to <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContextMode.PerCall&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.PerSession&gt;</ph>, and if so releases the instance and claims the resources.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If a custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> is being used, WCF invokes the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method of the provider implementation before releasing the instance.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> returns <ph id="ph2">`true`</ph> the instance is released, otherwise the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> implementation is responsible for notifying the <ph id="ph4">`Dispatcher`</ph> of the idle state by using a callback method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is done by calling the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how you can delay releasing the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> with an idle timeout of 20 seconds.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Extending the InstanceContext</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In WCF, <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is the link between the service instance and the <ph id="ph2">`Dispatcher`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>WCF allows you to extend this runtime component by adding new state or behavior by using its extensible object pattern.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The extensible object pattern is used in WCF to either extend existing runtime classes with new functionality or to add new state features to an object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There are three interfaces in the extensible object pattern: <ph id="ph1">&lt;xref:System.ServiceModel.IExtensibleObject%601&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.IExtensionCollection%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.IExtensibleObject%601&gt;</ph> interface is implemented by objects to allow extensions that customize their functionality.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> interface is implemented by objects that can be extensions of classes of type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>And finally, the <ph id="ph1">&lt;xref:System.ServiceModel.IExtensionCollection%601&gt;</ph> interface is a collection of <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> implementations that allows for retrieving an implementation of <ph id="ph3">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> by their type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Therefore, in order to extend the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>, you must implement the <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this sample project, the <ph id="ph1">`CustomLeaseExtension`</ph> class contains this implementation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.IExtension%601&gt;</ph> interface has two methods <ph id="ph2">&lt;xref:System.ServiceModel.IExtension%601.Attach%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.IExtension%601.Detach%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As their names imply, these two methods are called when the runtime attaches and detaches the extension to an instance of the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this sample, the <ph id="ph1">`Attach`</ph> method is used to keep track of the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object that belongs to the current instance of the extension.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In addition, you must add the necessary implementation to the extension to provide the extended lifetime support.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`ICustomLease`</ph> interface is declared with the desired methods and is implemented in the <ph id="ph2">`CustomLeaseExtension`</ph> class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When WCF invokes the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method in the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> implementation, this call is routed to the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method of the <ph id="ph4">`CustomLeaseExtension`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Then, the <ph id="ph1">`CustomLeaseExtension`</ph> checks its private state to see whether the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is idle.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If it is idle, it returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Otherwise, it starts a timer for a specified amount of extended lifetime.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the timer’s <ph id="ph1">`Elapsed`</ph> event, the callback function in the Dispatcher is called in order to start another clean-up cycle.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>There's no way to renew the running timer when a new message arrives for the instance being moved to the idle state.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The sample implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> to intercept the calls to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method and route them to the <ph id="ph3">`CustomLeaseExtension`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> implementation is contained in <ph id="ph2">`CustomLifetimeLease`</ph> class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method is invoked when WCF is about to release the service instance.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, there is only one instance of a particular <ph id="ph1">`ISharedSessionInstance`</ph> implementation in the ServiceBehavior’s <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This means there's no way of knowing if the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed at the time WCF checks the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Therefore, this sample uses thread locking to serialize requests to the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Using thread locking is not a recommended approach because serialization can severely affect the performance of your application.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A private member field is used in the <ph id="ph1">`CustomLifetimeLease`</ph> class to track the idle state and is returned by the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Each time the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method is called, the <ph id="ph2">`isIdle`</ph> field is returned and reset to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It is essential to set this value to <ph id="ph1">`false`</ph> in order to make sure the Dispatcher calls the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A?displayProperty=nameWithType&gt;</ph> method returns <ph id="ph2">`false`</ph>, the Dispatcher registers a callback function by using the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This method receives a reference to the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> being released.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Therefore, the sample code can query the <ph id="ph1">`ICustomLease`</ph> type extension and check the <ph id="ph2">`ICustomLease.IsIdle`</ph> property in the extended state.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Before the <ph id="ph1">`ICustomLease.IsIdle`</ph> property is checked, the Callback property needs to be set as this is essential for <ph id="ph2">`CustomLeaseExtension`</ph> to notify the Dispatcher when it becomes idle.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`ICustomLease.IsIdle`</ph> returns <ph id="ph2">`true`</ph>, the <ph id="ph3">`isIdle`</ph> private member is simply set in <ph id="ph4">`CustomLifetimeLease`</ph> to <ph id="ph5">`true`</ph> and calls the callback method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Because the code holds a lock, other threads can't change the value of this private member.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>And the next time Dispatcher calls the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A?displayProperty=nameWithType&gt;</ph>, it returns <ph id="ph2">`true`</ph> and lets Dispatcher release the instance.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Now that the groundwork for the custom extension is completed, it has to be hooked up to the service model.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To hook up the <ph id="ph1">`CustomLeaseExtension`</ph> implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>, WCF provides the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer&gt;</ph> interface to perform the bootstrapping of <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the sample, the <ph id="ph1">`CustomLeaseInitializer`</ph> class implements this interface and adds an instance of <ph id="ph2">`CustomLeaseExtension`</ph> to the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext.Extensions%2A&gt;</ph> collection from the only method initialization.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This method is called by Dispatcher while initializing the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Finally the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> implementation is hooked up to the service model by using the <ph id="ph2">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This implementation is placed in the <ph id="ph1">`CustomLeaseTimeAttribute`</ph> class and it also derives from the <ph id="ph2">&lt;xref:System.Attribute&gt;</ph> base class to expose this behavior as an attribute.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This behavior can be added to a sample service class by annotating it with the <ph id="ph1">`CustomLeaseTime`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When you run the sample, the operation requests and responses are displayed in both the service and client console windows.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Press ENTER in each console window to shut down the service and client.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Ensure that you've performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id="p1">[</bpt>Running the Windows Communication Foundation Samples<ept id="p1">](running-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id="ph1">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>