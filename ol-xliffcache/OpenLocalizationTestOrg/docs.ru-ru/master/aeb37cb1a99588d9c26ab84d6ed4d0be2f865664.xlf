<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aeb37cb1a99588d9c26ab84d6ed4d0be2f865664</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4ecde7fe9bc181460816088026470aef361b10c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">69c7e252465710b010bcd5a0010cfa2996cc5f32</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Implement a Client of the Event-based Asynchronous Pattern | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Implement a Client of the Event-based Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to use a component that adheres to the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The form for this example uses the <ph id="ph1">`PrimeNumberCalculator`</ph> component described in <bpt id="p1">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/component-that-supports-the-event-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you run a project that uses this example, you will see a "Prime Number Calculator" form with a grid and two buttons: <bpt id="p1">**</bpt>Start New Task<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can click the <bpt id="p1">**</bpt>Start New Task<ept id="p1">**</ept> button several times in succession, and for each click, an asynchronous operation will begin a computation to determine if a randomly generated test number is prime.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The form will periodically display progress and incremental results.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each operation is assigned a unique task ID.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The result of the computation is displayed in the <bpt id="p1">**</bpt>Result<ept id="p1">**</ept> column; if the test number is not prime, it is labeled as <bpt id="p2">**</bpt>Composite,<ept id="p2">**</ept> and its first divisor is displayed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Any pending operation can be canceled with the <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Multiple selections can be made.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Most numbers will not be prime.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you have not found a prime number after several completed operations, simply start more tasks, and eventually you will find some prime numbers.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ComponentModel.AsyncOperationManager#10<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#10)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.ComponentModel.AsyncOperationManager#10<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#10)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>