{"content":"---\ntitle: \"How to: Round-trip Date and Time Values | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"round-trip date and time values\"\n  - \"dates [.NET Framework], round-trip values\"\n  - \"time zones [.NET Framework], round-trip date and time values\"\n  - \"time [.NET Framework], round-trip values\"\n  - \"formatting strings [.NET Framework], round-trip values\"\nms.assetid: b609b277-edc6-4c74-b03e-ea73324ecbdb\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# How to: Round-trip Date and Time Values\nIn many applications, a date and time value is intended to unambiguously identify a single point in time. This topic shows how to save and restore a <xref:System.DateTime> value, a <xref:System.DateTimeOffset> value, and a date and time value with time zone information so that the restored value identifies the same time as the saved value.  \n  \n### To round-trip a DateTime value  \n  \n1.  Convert the <xref:System.DateTime> value to its string representation by calling the <xref:System.DateTime.ToString%28System.String%29?displayProperty=fullName> method with the \"o\" format specifier.  \n  \n2.  Save the string representation of the <xref:System.DateTime> value to a file, or pass it across a process, application domain, or machine boundary.  \n  \n3.  Retrieve the string that represents the <xref:System.DateTime> value.  \n  \n4.  Call the <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName> method, and pass <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> as the value of the `styles` parameter.  \n  \n The following example illustrates how to round-trip a <xref:System.DateTime> value.  \n  \n [!code-csharp[Formatting.HowTo.RoundTrip#1](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#1)]\n [!code-vb[Formatting.HowTo.RoundTrip#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#1)]  \n  \n When round-tripping a <xref:System.DateTime> value, this technique successfully preserves the time for all local and universal times. For example, if a local <xref:System.DateTime> value is saved on a system in the U.S. Pacific Standard Time zone and is restored on a system in the U.S. Central Standard Time zone, the restored date and time will be two hours later than the original time, which reflects the time difference between the two time zones. However, this technique is not necessarily accurate for unspecified times. All <xref:System.DateTime> values whose <xref:System.DateTime.Kind%2A> property is <xref:System.DateTimeKind> are treated as if they are local times. If this is not the case, the <xref:System.DateTime> will not successfully identify the correct point in time. The workaround for this limitation is to tightly couple a date and time value with its time zone for the save and restore operation.  \n  \n### To round-trip a DateTimeOffset value  \n  \n1.  Convert the <xref:System.DateTimeOffset> value to its string representation by calling the <xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=fullName> method with the \"o\" format specifier.  \n  \n2.  Save the string representation of the <xref:System.DateTimeOffset> value to a file, or pass it across a process, application domain, or machine boundary.  \n  \n3.  Retrieve the string that represents the <xref:System.DateTimeOffset> value.  \n  \n4.  Call the <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName> method, and pass <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> as the value of the `styles` parameter.  \n  \n The following example illustrates how to round-trip a <xref:System.DateTimeOffset> value.  \n  \n [!code-csharp[Formatting.HowTo.RoundTrip#2](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#2)]\n [!code-vb[Formatting.HowTo.RoundTrip#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#2)]  \n  \n This technique always unambiguously identifies a <xref:System.DateTimeOffset> value as a single point in time. The value can then be converted to Coordinated Universal Time (UTC) by calling the <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName> method, or it can be converted to the time in a particular time zone by calling the <xref:System.DateTimeOffset.ToOffset%2A?displayProperty=fullName> or <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=fullName> method. The major limitation of this technique is that date and time arithmetic, when performed on a <xref:System.DateTimeOffset> value that represents the time in a particular time zone, may not produce accurate results for that time zone. This is because when a <xref:System.DateTimeOffset> value is instantiated, it is disassociated from its time zone. Therefore, that time zone's adjustment rules can no longer be applied when you perform date and time calculations. You can work around this problem by defining a custom type that includes both a date and time value and its accompanying time zone.  \n  \n### To round-trip a date and time value with its time zone  \n  \n1.  Define a class or a structure with two fields. The first field is either a <xref:System.DateTime> or a <xref:System.DateTimeOffset> object, and the second is a <xref:System.TimeZoneInfo> object. The following example is a simple version of such a type.  \n  \n     [!code-csharp[Formatting.HowTo.RoundTrip#3](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#3)]\n     [!code-vb[Formatting.HowTo.RoundTrip#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#3)]  \n  \n2.  Mark the class with the <xref:System.SerializableAttribute> attribute.  \n  \n3.  Serialize the object using the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize%2A?displayProperty=fullName> method.  \n  \n4.  Restore the object using the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A> method.  \n  \n5.  Cast (in C#) or convert (in Visual Basic) the deserialized object to an object of the appropriate type.  \n  \n The following example illustrates how to round-trip an object that stores both date and time and time zone information.  \n  \n [!code-csharp[Formatting.HowTo.RoundTrip#4](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#4)]\n [!code-vb[Formatting.HowTo.RoundTrip#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#4)]  \n  \n This technique should always unambiguously reflect the correct point of time both before and after it is saved and restored, provided that the implementation of the combined date and time and time zone object does not allow the date value to become out of sync with the time zone value.  \n  \n## Compiling the Code  \n These examples require:  \n  \n-   That the following namespaces be imported with C# `using` statements or [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)] `Imports` statements:  \n  \n    -   <xref:System> (C# only).  \n  \n    -   <xref:System.Globalization?displayProperty=fullName>.  \n  \n    -   <xref:System.IO?displayProperty=fullName>.  \n  \n    -   <xref:System.Runtime.Serialization?displayProperty=fullName>.  \n  \n    -   <xref:System.Runtime.Serialization.Formatters.Binary?displayProperty=fullName>.  \n  \n-   A reference to System.Core.dll.  \n  \n-   Each code example, other than the `DateInTimeZone` class, should be included in a class or Visual Basic module, wrapped in methods, and called from the `Main` method.  \n  \n## See Also  \n [Performing Formatting Operations](../../../docs/standard/base-types/performing-formatting-operations.md)   \n [Choosing Between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo](../../../docs/standard/datetime/choosing-between-datetime.md)   \n [Standard Date and Time Format Strings](../../../docs/standard/base-types/standard-date-and-time-format-strings.md)","nodes":[{"pos":[12,68],"content":"How to: Round-trip Date and Time Values | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Round-trip Date and Time Values | Microsoft Docs","pos":[0,56]}]},{"pos":[643,682],"content":"How to: Round-trip Date and Time Values","linkify":"How to: Round-trip Date and Time Values","nodes":[{"content":"How to: Round-trip Date and Time Values","pos":[0,39]}]},{"content":"In many applications, a date and time value is intended to unambiguously identify a single point in time.","pos":[683,788]},{"content":"This topic shows how to save and restore a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value, a <ph id=\"ph2\">&lt;xref:System.DateTimeOffset&gt;</ph> value, and a date and time value with time zone information so that the restored value identifies the same time as the saved value.","pos":[789,1024],"source":" This topic shows how to save and restore a <xref:System.DateTime> value, a <xref:System.DateTimeOffset> value, and a date and time value with time zone information so that the restored value identifies the same time as the saved value."},{"pos":[1034,1064],"content":"To round-trip a DateTime value","linkify":"To round-trip a DateTime value","nodes":[{"content":"To round-trip a DateTime value","pos":[0,30]}]},{"content":"Convert the <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value to its string representation by calling the <ph id=\"ph2\">&lt;xref:System.DateTime.ToString%28System.String%29?displayProperty=fullName&gt;</ph> method with the \"o\" format specifier.","pos":[1074,1272],"source":"Convert the <xref:System.DateTime> value to its string representation by calling the <xref:System.DateTime.ToString%28System.String%29?displayProperty=fullName> method with the \"o\" format specifier."},{"content":"Save the string representation of the <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value to a file, or pass it across a process, application domain, or machine boundary.","pos":[1282,1429],"source":"Save the string representation of the <xref:System.DateTime> value to a file, or pass it across a process, application domain, or machine boundary."},{"content":"Retrieve the string that represents the <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value.","pos":[1439,1508],"source":"Retrieve the string that represents the <xref:System.DateTime> value."},{"pos":[1518,1787],"content":"Call the <ph id=\"ph1\">&lt;xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName&gt;</ph> method, and pass <ph id=\"ph2\">&lt;xref:System.Globalization.DateTimeStyles?displayProperty=fullName&gt;</ph> as the value of the <ph id=\"ph3\">`styles`</ph> parameter.","source":"Call the <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName> method, and pass <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> as the value of the `styles` parameter."},{"content":"The following example illustrates how to round-trip a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value.","pos":[1794,1877],"source":"The following example illustrates how to round-trip a <xref:System.DateTime> value."},{"pos":[1884,2165],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Formatting.HowTo.RoundTrip#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Formatting.HowTo.RoundTrip#1<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[Formatting.HowTo.RoundTrip#1](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#1)]\n[!code-vb[Formatting.HowTo.RoundTrip#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#1)]"},{"content":"When round-tripping a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value, this technique successfully preserves the time for all local and universal times.","pos":[2172,2305],"source":"When round-tripping a <xref:System.DateTime> value, this technique successfully preserves the time for all local and universal times."},{"content":"For example, if a local <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value is saved on a system in the U.S. Pacific Standard Time zone and is restored on a system in the U.S. Central Standard Time zone, the restored date and time will be two hours later than the original time, which reflects the time difference between the two time zones.","pos":[2306,2624],"source":" For example, if a local <xref:System.DateTime> value is saved on a system in the U.S. Pacific Standard Time zone and is restored on a system in the U.S. Central Standard Time zone, the restored date and time will be two hours later than the original time, which reflects the time difference between the two time zones."},{"content":"However, this technique is not necessarily accurate for unspecified times.","pos":[2625,2699]},{"content":"All <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> values whose <ph id=\"ph2\">&lt;xref:System.DateTime.Kind%2A&gt;</ph> property is <ph id=\"ph3\">&lt;xref:System.DateTimeKind&gt;</ph> are treated as if they are local times.","pos":[2700,2849],"source":" All <xref:System.DateTime> values whose <xref:System.DateTime.Kind%2A> property is <xref:System.DateTimeKind> are treated as if they are local times."},{"content":"If this is not the case, the <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> will not successfully identify the correct point in time.","pos":[2850,2959],"source":" If this is not the case, the <xref:System.DateTime> will not successfully identify the correct point in time."},{"content":"The workaround for this limitation is to tightly couple a date and time value with its time zone for the save and restore operation.","pos":[2960,3092]},{"pos":[3102,3138],"content":"To round-trip a DateTimeOffset value","linkify":"To round-trip a DateTimeOffset value","nodes":[{"content":"To round-trip a DateTimeOffset value","pos":[0,36]}]},{"content":"Convert the <ph id=\"ph1\">&lt;xref:System.DateTimeOffset&gt;</ph> value to its string representation by calling the <ph id=\"ph2\">&lt;xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=fullName&gt;</ph> method with the \"o\" format specifier.","pos":[3148,3358],"source":"Convert the <xref:System.DateTimeOffset> value to its string representation by calling the <xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=fullName> method with the \"o\" format specifier."},{"content":"Save the string representation of the <ph id=\"ph1\">&lt;xref:System.DateTimeOffset&gt;</ph> value to a file, or pass it across a process, application domain, or machine boundary.","pos":[3368,3521],"source":"Save the string representation of the <xref:System.DateTimeOffset> value to a file, or pass it across a process, application domain, or machine boundary."},{"content":"Retrieve the string that represents the <ph id=\"ph1\">&lt;xref:System.DateTimeOffset&gt;</ph> value.","pos":[3531,3606],"source":"Retrieve the string that represents the <xref:System.DateTimeOffset> value."},{"pos":[3616,3891],"content":"Call the <ph id=\"ph1\">&lt;xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName&gt;</ph> method, and pass <ph id=\"ph2\">&lt;xref:System.Globalization.DateTimeStyles?displayProperty=fullName&gt;</ph> as the value of the <ph id=\"ph3\">`styles`</ph> parameter.","source":"Call the <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName> method, and pass <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> as the value of the `styles` parameter."},{"content":"The following example illustrates how to round-trip a <ph id=\"ph1\">&lt;xref:System.DateTimeOffset&gt;</ph> value.","pos":[3898,3987],"source":"The following example illustrates how to round-trip a <xref:System.DateTimeOffset> value."},{"pos":[3994,4275],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Formatting.HowTo.RoundTrip#2<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Formatting.HowTo.RoundTrip#2<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#2)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[Formatting.HowTo.RoundTrip#2](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#2)]\n[!code-vb[Formatting.HowTo.RoundTrip#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#2)]"},{"content":"This technique always unambiguously identifies a <ph id=\"ph1\">&lt;xref:System.DateTimeOffset&gt;</ph> value as a single point in time.","pos":[4282,4392],"source":"This technique always unambiguously identifies a <xref:System.DateTimeOffset> value as a single point in time."},{"content":"The value can then be converted to Coordinated Universal Time (UTC) by calling the <ph id=\"ph1\">&lt;xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName&gt;</ph> method, or it can be converted to the time in a particular time zone by calling the <ph id=\"ph2\">&lt;xref:System.DateTimeOffset.ToOffset%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=fullName&gt;</ph> method.","pos":[4393,4822],"source":" The value can then be converted to Coordinated Universal Time (UTC) by calling the <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName> method, or it can be converted to the time in a particular time zone by calling the <xref:System.DateTimeOffset.ToOffset%2A?displayProperty=fullName> or <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=fullName> method."},{"content":"The major limitation of this technique is that date and time arithmetic, when performed on a <ph id=\"ph1\">&lt;xref:System.DateTimeOffset&gt;</ph> value that represents the time in a particular time zone, may not produce accurate results for that time zone.","pos":[4823,5055],"source":" The major limitation of this technique is that date and time arithmetic, when performed on a <xref:System.DateTimeOffset> value that represents the time in a particular time zone, may not produce accurate results for that time zone."},{"content":"This is because when a <ph id=\"ph1\">&lt;xref:System.DateTimeOffset&gt;</ph> value is instantiated, it is disassociated from its time zone.","pos":[5056,5170],"source":" This is because when a <xref:System.DateTimeOffset> value is instantiated, it is disassociated from its time zone."},{"content":"Therefore, that time zone's adjustment rules can no longer be applied when you perform date and time calculations.","pos":[5171,5285]},{"content":"You can work around this problem by defining a custom type that includes both a date and time value and its accompanying time zone.","pos":[5286,5417]},{"pos":[5427,5481],"content":"To round-trip a date and time value with its time zone","linkify":"To round-trip a date and time value with its time zone","nodes":[{"content":"To round-trip a date and time value with its time zone","pos":[0,54]}]},{"content":"Define a class or a structure with two fields.","pos":[5491,5537]},{"content":"The first field is either a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> or a <ph id=\"ph2\">&lt;xref:System.DateTimeOffset&gt;</ph> object, and the second is a <ph id=\"ph3\">&lt;xref:System.TimeZoneInfo&gt;</ph> object.","pos":[5538,5685],"source":" The first field is either a <xref:System.DateTime> or a <xref:System.DateTimeOffset> object, and the second is a <xref:System.TimeZoneInfo> object."},{"content":"The following example is a simple version of such a type.","pos":[5686,5743]},{"pos":[5754,6039],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Formatting.HowTo.RoundTrip#3<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#3)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Formatting.HowTo.RoundTrip#3<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#3)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[Formatting.HowTo.RoundTrip#3](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#3)]\n [!code-vb[Formatting.HowTo.RoundTrip#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#3)]"},{"content":"Mark the class with the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.","pos":[6049,6119],"source":"Mark the class with the <xref:System.SerializableAttribute> attribute."},{"content":"Serialize the object using the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize%2A?displayProperty=fullName&gt;</ph> method.","pos":[6129,6275],"source":"Serialize the object using the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize%2A?displayProperty=fullName> method."},{"content":"Restore the object using the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A&gt;</ph> method.","pos":[6285,6406],"source":"Restore the object using the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A> method."},{"content":"Cast (in C#) or convert (in Visual Basic) the deserialized object to an object of the appropriate type.","pos":[6416,6519]},{"content":"The following example illustrates how to round-trip an object that stores both date and time and time zone information.","pos":[6526,6645]},{"pos":[6652,6933],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>Formatting.HowTo.RoundTrip#4<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Formatting.HowTo.RoundTrip#4<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#4)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[Formatting.HowTo.RoundTrip#4](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/cs/RoundTrip.cs#4)]\n[!code-vb[Formatting.HowTo.RoundTrip#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.HowTo.RoundTrip/vb/RoundTrip.vb#4)]"},{"content":"This technique should always unambiguously reflect the correct point of time both before and after it is saved and restored, provided that the implementation of the combined date and time and time zone object does not allow the date value to become out of sync with the time zone value.","pos":[6940,7226]},{"pos":[7235,7253],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"These examples require:","pos":[7257,7280]},{"pos":[7290,7434],"content":"That the following namespaces be imported with C# <ph id=\"ph1\">`using`</ph> statements or <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph> <ph id=\"ph3\">`Imports`</ph> statements:","source":"That the following namespaces be imported with C# `using` statements or [!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)] `Imports` statements:"},{"content":"<ph id=\"ph1\">&lt;xref:System&gt;</ph> (C# only).","pos":[7448,7472],"source":"<xref:System> (C# only)."},{"content":"<ph id=\"ph1\">&lt;xref:System.Globalization?displayProperty=fullName&gt;</ph>.","pos":[7486,7539],"source":"<xref:System.Globalization?displayProperty=fullName>."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO?displayProperty=fullName&gt;</ph>.","pos":[7553,7595],"source":"<xref:System.IO?displayProperty=fullName>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization?displayProperty=fullName&gt;</ph>.","pos":[7609,7670],"source":"<xref:System.Runtime.Serialization?displayProperty=fullName>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatters.Binary?displayProperty=fullName&gt;</ph>.","pos":[7684,7763],"source":"<xref:System.Runtime.Serialization.Formatters.Binary?displayProperty=fullName>."},{"content":"A reference to System.Core.dll.","pos":[7773,7804]},{"pos":[7814,7980],"content":"Each code example, other than the <ph id=\"ph1\">`DateInTimeZone`</ph> class, should be included in a class or Visual Basic module, wrapped in methods, and called from the <ph id=\"ph2\">`Main`</ph> method.","source":"Each code example, other than the `DateInTimeZone` class, should be included in a class or Visual Basic module, wrapped in methods, and called from the `Main` method."},{"pos":[7989,7997],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Performing Formatting Operations<ept id=\"p1\">](../../../docs/standard/base-types/performing-formatting-operations.md)</ept><ph id=\"ph1\"> </ph>","pos":[8001,8107],"source":"[Performing Formatting Operations](../../../docs/standard/base-types/performing-formatting-operations.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Choosing Between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo<ept id=\"p1\">](../../../docs/standard/datetime/choosing-between-datetime.md)</ept><ph id=\"ph1\"> </ph>","pos":[8110,8245],"source":" [Choosing Between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo](../../../docs/standard/datetime/choosing-between-datetime.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](../../../docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>","pos":[8248,8364],"source":" [Standard Date and Time Format Strings](../../../docs/standard/base-types/standard-date-and-time-format-strings.md)"}]}