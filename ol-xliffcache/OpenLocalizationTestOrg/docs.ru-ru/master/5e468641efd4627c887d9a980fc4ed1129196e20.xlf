<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-nullable-types.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e468641efd4627c887d9a980fc4ed1129196e20</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\nullable-types\using-nullable-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72f80c1968b9f85f3eb6676d95581e5258d9c7ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b1857b4b145065d6fac938863cd0e7f866caf06</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using nullable types - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to work with C# nullable types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using nullable types (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Nullable types are types that represent all the values of an underlying value type <ph id="ph1">`T`</ph>, and an additional <bpt id="p1">[</bpt>null<ept id="p1">](../../language-reference/keywords/null.md)</ept> value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Nullable types<ept id="p1">](index.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can refer to a nullable type in any of the following forms: <ph id="ph1">`Nullable&lt;T&gt;`</ph> or <ph id="ph2">`T?`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These two forms are interchangeable.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Declaration and assignment</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As a value type can be implicitly converted to the corresponding nullable type, you assign a value to a nullable type as you would for its underlying value type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You also can assign the <ph id="ph1">`null`</ph> value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Examination of a nullable type value</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use the following readonly properties to examine an instance of a nullable type for null and retrieve a value of an underlying type:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType&gt;</ph> indicates whether an instance of a nullable type has a value of its underlying type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Nullable%601.Value%2A?displayProperty=nameWithType&gt;</ph> gets the value of an underlying type if <ph id="ph2">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property throws an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The code in the following example uses the <ph id="ph1">`HasValue`</ph> property to test whether the variable contains a value before displaying it:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You also can compare a nullable type variable with <ph id="ph1">`null`</ph> instead of using the <ph id="ph2">`HasValue`</ph> property, as the following example shows:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Beginning with C# 7.0, you can use <bpt id="p1">[</bpt>pattern matching<ept id="p1">](../../pattern-matching.md)</ept> to both examine and get a value of a nullable type:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Conversion from a nullable type to an underlying type</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you need to assign a nullable type value to a non-nullable type, use the <bpt id="p1">[</bpt>null-coalescing operator <ph id="ph1">`??`</ph><ept id="p1">](../../language-reference/operators/null-coalescing-operator.md)</ept> to specify the value to be assigned if a nullable type value is null (you also can use the <ph id="ph2">&lt;xref:System.Nullable%601.GetValueOrDefault(%600)?displayProperty=nameWithType&gt;</ph> method to do that):</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Nullable%601.GetValueOrDefault?displayProperty=nameWithType&gt;</ph> method if the value to be used when a nullable type value is null should be the default value of the underlying value type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can explicitly cast a nullable type to a non-nullable type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>At run time, if the value of a nullable type is null, the explicit cast throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A non-nullable value type is implicitly converted to the corresponding nullable type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The predefined unary and binary operators and any user-defined operators that exist for value types may also be used by nullable types.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These operators produce a null value if one or both operands are null; otherwise, the operator uses the contained values to calculate the result.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For the relational operators (<ph id="ph1">`&lt;`</ph>, <ph id="ph2">`&gt;`</ph>, <ph id="ph3">`&lt;=`</ph>, <ph id="ph4">`&gt;=`</ph>), if one or both operands are null, the result is <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Do not assume that because a particular comparison (for example, <ph id="ph1">`&lt;=`</ph>) returns <ph id="ph2">`false`</ph>, the opposite comparison (<ph id="ph3">`&gt;`</ph>) returns <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example shows that 10 is</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>neither greater than or equal to null,</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>nor less than null.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The above example also shows that an equality comparison of two nullable types that are both null evaluates to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Boxing and unboxing</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A nullable value type is <bpt id="p1">[</bpt>boxed<ept id="p1">](../types/boxing-and-unboxing.md)</ept> by the following rules:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, the null reference is produced.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, a value of the underlying value type <ph id="ph3">`T`</ph> is boxed, not the instance of <ph id="ph4">&lt;xref:System.Nullable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can unbox the boxed value type to the corresponding nullable type, as the following example shows:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The bool? type</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bool?`</ph> nullable type can contain three different values: <bpt id="p1">[</bpt>true<ept id="p1">](../../language-reference/keywords/true-literal.md)</ept>, <bpt id="p2">[</bpt>false<ept id="p2">](../../language-reference/keywords/false-literal.md)</ept>, and <bpt id="p3">[</bpt>null<ept id="p3">](../../language-reference/keywords/null.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bool?`</ph> type is like the Boolean variable type that is used in SQL.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To ensure that the results produced by the <ph id="ph1">`&amp;`</ph> and <ph id="ph2">`|`</ph> operators are consistent with the three-valued Boolean type in SQL, the following predefined operators are provided:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The semantics of these operators is defined by the following table:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>x</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>x&amp;y</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>x&amp;#124;y</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note that these two operators don't follow the rules described in the <bpt id="p1">[</bpt>Operators<ept id="p1">](#operators)</ept> section: the result of an operator evaluation can be non-null even if one of the operands is null.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable types<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>What exactly does 'lifted' mean?<ept id="p1">](https://blogs.msdn.microsoft.com/ericlippert/2007/06/27/what-exactly-does-lifted-mean/)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>