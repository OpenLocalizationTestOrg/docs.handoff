{"content":"---\ntitle: \"Jagged Arrays (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"jagged arrays [C#]\"\n  - \"arrays [C#], jagged\"\nms.assetid: 537c65a6-0e0a-4a00-a2b8-086f38519c70\ncaps.latest.revision: 24\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Jagged Arrays (C# Programming Guide)\nA jagged array is an array whose elements are arrays. The elements of a jagged array can be of different dimensions and sizes. A jagged array is sometimes called an \"array of arrays.\" The following examples show how to declare, initialize, and access jagged arrays.  \n  \n The following is a declaration of a single-dimensional array that has three elements, each of which is a single-dimensional array of integers:  \n  \n [!code-cs[csProgGuideArrays#19](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_1.cs)]  \n  \n Before you can use `jaggedArray`, its elements must be initialized. You can initialize the elements like this:  \n  \n [!code-cs[csProgGuideArrays#20](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_2.cs)]  \n  \n Each of the elements is a single-dimensional array of integers. The first element is an array of 5 integers, the second is an array of 4 integers, and the third is an array of 2 integers.  \n  \n It is also possible to use initializers to fill the array elements with values, in which case you do not need the array size. For example:  \n  \n [!code-cs[csProgGuideArrays#21](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_3.cs)]  \n  \n You can also initialize the array upon declaration like this:  \n  \n [!code-cs[csProgGuideArrays#22](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_4.cs)]  \n  \n You can use the following shorthand form. Notice that you cannot omit the `new` operator from the elements initialization because there is no default initialization for the elements:  \n  \n [!code-cs[csProgGuideArrays#23](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_5.cs)]  \n  \n A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to `null`.  \n  \n You can access individual array elements like these examples:  \n  \n [!code-cs[csProgGuideArrays#24](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_6.cs)]  \n  \n It is possible to mix jagged and multidimensional arrays. The following is a declaration and initialization of a single-dimensional jagged array that contains three two-dimensional array elements of different sizes. For more information about two-dimensional arrays, see [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md).  \n  \n [!code-cs[csProgGuideArrays#25](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_7.cs)]  \n  \n You can access individual elements as shown in this example, which displays the value of the element `[1,0]` of the first array (value `5`):  \n  \n [!code-cs[csProgGuideArrays#26](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_8.cs)]  \n  \n The method `Length` returns the number of arrays contained in the jagged array. For example, assuming you have declared the previous array, this line:  \n  \n [!code-cs[csProgGuideArrays#27](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_9.cs)]  \n  \n returns a value of 3.  \n  \n## Example  \n This example builds an array whose elements are themselves arrays. Each one of the array elements has a different size.  \n  \n [!code-cs[csProgGuideArrays#18](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_10.cs)]  \n  \n## See Also  \n <xref:System.Array>   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Arrays](../../../csharp/programming-guide/arrays/index.md)   \n [Single-Dimensional Arrays](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)   \n [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)","nodes":[{"pos":[12,65],"content":"Jagged Arrays (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Jagged Arrays (C# Programming Guide) | Microsoft Docs","pos":[0,53]}]},{"pos":[566,602],"content":"Jagged Arrays (C# Programming Guide)","linkify":"Jagged Arrays (C# Programming Guide)","nodes":[{"content":"Jagged Arrays (C# Programming Guide)","pos":[0,36]}]},{"content":"A jagged array is an array whose elements are arrays.","pos":[603,656]},{"content":"The elements of a jagged array can be of different dimensions and sizes.","pos":[657,729]},{"content":"A jagged array is sometimes called an \"array of arrays.\"","pos":[730,786]},{"content":"The following examples show how to declare, initialize, and access jagged arrays.","pos":[787,868]},{"content":"The following is a declaration of a single-dimensional array that has three elements, each of which is a single-dimensional array of integers:","pos":[875,1017]},{"pos":[1024,1136],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#19<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#19](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_1.cs)]"},{"content":"Before you can use <ph id=\"ph1\">`jaggedArray`</ph>, its elements must be initialized.","pos":[1143,1210],"source":"Before you can use `jaggedArray`, its elements must be initialized."},{"content":"You can initialize the elements like this:","pos":[1211,1253]},{"pos":[1260,1372],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#20<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#20](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_2.cs)]"},{"content":"Each of the elements is a single-dimensional array of integers.","pos":[1379,1442]},{"content":"The first element is an array of 5 integers, the second is an array of 4 integers, and the third is an array of 2 integers.","pos":[1443,1566]},{"content":"It is also possible to use initializers to fill the array elements with values, in which case you do not need the array size.","pos":[1573,1698]},{"content":"For example:","pos":[1699,1711]},{"pos":[1718,1830],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#21<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#21](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_3.cs)]"},{"content":"You can also initialize the array upon declaration like this:","pos":[1837,1898]},{"pos":[1905,2017],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#22<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#22](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_4.cs)]"},{"content":"You can use the following shorthand form.","pos":[2024,2065]},{"content":"Notice that you cannot omit the <ph id=\"ph1\">`new`</ph> operator from the elements initialization because there is no default initialization for the elements:","pos":[2066,2206],"source":" Notice that you cannot omit the `new` operator from the elements initialization because there is no default initialization for the elements:"},{"pos":[2213,2325],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#23<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_5.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#23](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_5.cs)]"},{"pos":[2332,2447],"content":"A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to <ph id=\"ph1\">`null`</ph>.","source":"A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to `null`."},{"content":"You can access individual array elements like these examples:","pos":[2454,2515]},{"pos":[2522,2634],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#24<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_6.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#24](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_6.cs)]"},{"content":"It is possible to mix jagged and multidimensional arrays.","pos":[2641,2698]},{"content":"The following is a declaration and initialization of a single-dimensional jagged array that contains three two-dimensional array elements of different sizes.","pos":[2699,2856]},{"content":"For more information about two-dimensional arrays, see <bpt id=\"p1\">[</bpt>Multidimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)</ept>.","pos":[2857,3007],"source":" For more information about two-dimensional arrays, see [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)."},{"pos":[3014,3126],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#25<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_7.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#25](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_7.cs)]"},{"pos":[3133,3273],"content":"You can access individual elements as shown in this example, which displays the value of the element <ph id=\"ph1\">`[1,0]`</ph> of the first array (value <ph id=\"ph2\">`5`</ph>):","source":"You can access individual elements as shown in this example, which displays the value of the element `[1,0]` of the first array (value `5`):"},{"pos":[3280,3392],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#26<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_8.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#26](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_8.cs)]"},{"content":"The method <ph id=\"ph1\">`Length`</ph> returns the number of arrays contained in the jagged array.","pos":[3399,3478],"source":"The method `Length` returns the number of arrays contained in the jagged array."},{"content":"For example, assuming you have declared the previous array, this line:","pos":[3479,3549]},{"pos":[3556,3668],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#27<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_9.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#27](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_9.cs)]"},{"content":"returns a value of 3.","pos":[3675,3696]},{"pos":[3705,3712],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example builds an array whose elements are themselves arrays.","pos":[3716,3782]},{"content":"Each one of the array elements has a different size.","pos":[3783,3835]},{"pos":[3842,3955],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideArrays#18<ept id=\"p2\">](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_10.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideArrays#18](../../../csharp/programming-guide/arrays/codesnippet/CSharp/jagged-arrays_10.cs)]"},{"pos":[3964,3972],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3999,4067],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4070,4131],"source":" [Arrays](../../../csharp/programming-guide/arrays/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Single-Dimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md)</ept><ph id=\"ph1\"> </ph>","pos":[4134,4234],"source":" [Single-Dimensional Arrays](../../../csharp/programming-guide/arrays/single-dimensional-arrays.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Multidimensional Arrays<ept id=\"p1\">](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)</ept>","pos":[4237,4332],"source":" [Multidimensional Arrays](../../../csharp/programming-guide/arrays/multidimensional-arrays.md)"}]}