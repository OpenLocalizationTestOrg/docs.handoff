{"content":"---\ntitle: \"Null-conditional Operators (C# and Visual Basic) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 9c7b2c8f-a785-44ca-836c-407bfb6d27f5\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Null-conditional Operators (C# and Visual Basic)\nUsed to test for null before performing a member access (`?.`) or index (`?[`) operation.  These operators help you write less code to handle null checks, especially for descending into data structures.  \n  \n```csharp  \nint? length = customers?.Length; // null if customers is null   \nCustomer first = customers?[0];  // null if customers is null  \nint? count = customers?[0]?.Orders?.Count();  // null if customers, the first customer, or Orders is null  \n```  \n  \n```vb  \nDim length = customers?.Length  ' null if customers is null  \nDim first as Customer = customers?(0)  ' null if customers is null  \nDim count as Integer? = customers?(0)?.Orders?.Count()  ' null if customers, the first customer, or Orders is null  \n```  \n  \n The last example demonstrates that the null-condition operators are short-circuiting.  If one operation in a chain of conditional member access and index operation returns null, then the rest of the chain’s execution stops.  Other operations with lower precedence in the expression continue.  For example, `E` in the following always executes, and the `??` and `==` operations execute.  \n  \n```csharp\nA?.B?.C?[0] ?? E  \nA?.B?.C?[0] == E  \n```\n\n```vb\nA?.B?.C?(0) ?? E  \nA?.B?.C?(0) == E  \n```  \n  \n Another use for the null-condition member access is invoking delegates in a thread-safe way with much less code.  The old way requires code like the following:  \n  \n```csharp  \nvar handler = this.PropertyChanged;  \nif (handler != null)  \n    handler(…);\n```  \n  \n```vb  \nDim handler = AddressOf(Me.PropertyChanged)  \nIf handler IsNot Nothing  \n    Call handler(…)  \n```  \n  \n The new way is much simpler:  \n  \n```csharp\nPropertyChanged?.Invoke(e)  \n```  \n\n```vb\nPropertyChanged?.Invoke(e)\n```  \n  \n The new way is thread-safe because the compiler generates code to evaluate `PropertyChanged` one time only, keeping the result in a temporary variable.  \n  \n You need to explicitly call the `Invoke` method because there is no null-conditional delegate invocation syntax `PropertyChanged?(e)`.  There were too many ambiguous parsing situations to allow it.  \n  \n## Language Specifications  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n For more information, see the [Visual Basic Language Reference](../../../visual-basic/language-reference/index.md).  \n  \n## See Also  \n [?? (null-coalescing operator)](null-conditional-operator.md)   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Visual Basic Language Reference](../../../visual-basic/language-reference/index.md)   \n [Visual Basic Programming Guide](../../../visual-basic/programming-guide/index.md)\n","nodes":[{"pos":[12,77],"content":"Null-conditional Operators (C# and Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Null-conditional Operators (C# and Visual Basic) | Microsoft Docs","pos":[0,65]}]},{"pos":[499,547],"content":"Null-conditional Operators (C# and Visual Basic)","linkify":"Null-conditional Operators (C# and Visual Basic)","nodes":[{"content":"Null-conditional Operators (C# and Visual Basic)","pos":[0,48]}]},{"content":"Used to test for null before performing a member access (<ph id=\"ph1\">`?.`</ph>) or index (<ph id=\"ph2\">`?[`</ph>) operation.","pos":[548,637],"source":"Used to test for null before performing a member access (`?.`) or index (`?[`) operation."},{"content":"These operators help you write less code to handle null checks, especially for descending into data structures.","pos":[639,750]},{"content":"The last example demonstrates that the null-condition operators are short-circuiting.","pos":[1280,1365]},{"content":"If one operation in a chain of conditional member access and index operation returns null, then the rest of the chain’s execution stops.","pos":[1367,1503]},{"content":"Other operations with lower precedence in the expression continue.","pos":[1505,1571]},{"content":"For example, <ph id=\"ph1\">`E`</ph> in the following always executes, and the <ph id=\"ph2\">`??`</ph> and <ph id=\"ph3\">`==`</ph> operations execute.","pos":[1573,1665],"source":"  For example, `E` in the following always executes, and the `??` and `==` operations execute."},{"content":"Another use for the null-condition member access is invoking delegates in a thread-safe way with much less code.","pos":[1778,1890]},{"content":"The old way requires code like the following:","pos":[1892,1937]},{"content":"The new way is much simpler:","pos":[2154,2182]},{"pos":[2277,2428],"content":"The new way is thread-safe because the compiler generates code to evaluate <ph id=\"ph1\">`PropertyChanged`</ph> one time only, keeping the result in a temporary variable.","source":"The new way is thread-safe because the compiler generates code to evaluate `PropertyChanged` one time only, keeping the result in a temporary variable."},{"content":"You need to explicitly call the <ph id=\"ph1\">`Invoke`</ph> method because there is no null-conditional delegate invocation syntax <ph id=\"ph2\">`PropertyChanged?(e)`</ph>.","pos":[2435,2569],"source":"You need to explicitly call the `Invoke` method because there is no null-conditional delegate invocation syntax `PropertyChanged?(e)`."},{"content":"There were too many ambiguous parsing situations to allow it.","pos":[2571,2632]},{"pos":[2641,2664],"content":"Language Specifications","linkify":"Language Specifications","nodes":[{"content":"Language Specifications","pos":[0,23]}]},{"pos":[2776,2891],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Visual Basic Language Reference<ept id=\"p1\">](../../../visual-basic/language-reference/index.md)</ept>.","source":"For more information, see the [Visual Basic Language Reference](../../../visual-basic/language-reference/index.md)."},{"pos":[2900,2908],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>?? (null-coalescing operator)<ept id=\"p1\">](null-conditional-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2912,2974],"source":"[?? (null-coalescing operator)](null-conditional-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2977,3038],"source":" [C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3041,3109],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Visual Basic Language Reference<ept id=\"p1\">](../../../visual-basic/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3112,3198],"source":" [Visual Basic Language Reference](../../../visual-basic/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Visual Basic Programming Guide<ept id=\"p1\">](../../../visual-basic/programming-guide/index.md)</ept>","pos":[3201,3284],"source":" [Visual Basic Programming Guide](../../../visual-basic/programming-guide/index.md)"}]}