{"content":"---\ntitle: \"Aggregate Canonical Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: 3bcff826-ca90-41b3-a791-04d6ff0e5085\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Aggregate Canonical Functions\nAggregates are expressions that reduce a series of input values into, for example, a single value. Aggregates are normally used in conjunction with the GROUP BY clause of the SELECT expression, and there are constraints on where they can be used.  \n  \n The following table shows the aggregate [!INCLUDE[esql](../../../../../../includes/esql-md.md)] canonical functions.  \n  \n|Function|Description|  \n|--------------|-----------------|  \n|`Avg(` `expression` `)`|Returns the average of the non-null values.<br /><br /> **Arguments**<br /><br /> An `Int32`, `Int64`, `Double`, and `Decimal`.<br /><br /> **Return Value**<br /><br /> The type of `expression`. `Null`, if all input values are `null` values.<br /><br /> **Example**<br /><br /> [!code-csharp[DP EntityServices Concepts#EDM_AVG](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#edm_avg)]\n [!code-sql[DP EntityServices Concepts#EDM_AVG](../../../../../../samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#edm_avg)]|  \n|`BigCount(` `expression` `)`|Returns the size of the aggregate including null and duplicate values.<br /><br /> **Arguments**<br /><br /> Any type.<br /><br /> **Return Value**<br /><br /> An `Int64`.<br /><br /> **Example**<br /><br /> [!code-csharp[DP EntityServices Concepts#EDM_BIGCOUNT](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#edm_bigcount)]\n [!code-sql[DP EntityServices Concepts#EDM_BIGCOUNT](../../../../../../samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#edm_bigcount)]|  \n|`Count(` `expression` `)`|Returns the size of the aggregate including null and duplicate values.<br /><br /> **Arguments**<br /><br /> Any type.<br /><br /> **Return Value**<br /><br /> An `Int32`.<br /><br /> **Example**<br /><br /> [!code-csharp[DP EntityServices Concepts#EDM_COUNT](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#edm_count)]\n [!code-sql[DP EntityServices Concepts#EDM_COUNT](../../../../../../samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#edm_count)]|  \n|`Max(` `expression` `)`|Returns the maximum of the non-null values.<br /><br /> **Arguments**<br /><br /> A`Byte`, `Int16`, `Int32`, `Int64`, `Byte`, `Single`, `Double`, `Decimal`, `DateTime`, `DateTimeOffset`, `Time`, `String`, `Binary`.<br /><br /> **Return Value**<br /><br /> The type of `expression`. `Null`, if all input values are `null` values.<br /><br /> **Example**<br /><br /> [!code-csharp[DP EntityServices Concepts#EDM_MAX](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#edm_max)]\n [!code-sql[DP EntityServices Concepts#EDM_MAX](../../../../../../samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#edm_max)]|  \n|`Min(` `expression` `)`|Returns the minimum of the non-null values.<br /><br /> **Arguments**<br /><br /> A `Byte`, `Int16`, `Int32`, `Int64`, `Byte`, `Single`, `Double`, `Decimal`, `DateTime`, `DateTimeOffset`, `Time`, `String`, `Binary`.<br /><br /> **Return Value**<br /><br /> The type of `expression`. `Null`, if all input values are `null` values.<br /><br /> **Example**<br /><br /> [!code-csharp[DP EntityServices Concepts#EDM_MIN](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#edm_min)]\n [!code-sql[DP EntityServices Concepts#EDM_MIN](../../../../../../samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#edm_min)]|  \n|`StDev(` `expression` `)`|Returns the standard deviation of the non-null values.<br /><br /> **Arguments**<br /><br /> An `Int32`, `Int64`, `Double`, `Decimal`.<br /><br /> **Return Value**<br /><br /> A `Double`. `Null`, if all input values are `null` values.<br /><br /> **Example**<br /><br /> [!code-csharp[DP EntityServices Concepts#EDM_STDEV](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#edm_stdev)]\n [!code-sql[DP EntityServices Concepts#EDM_STDEV](../../../../../../samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#edm_stdev)]|  \n|`StDevP(` `expression` `)`|Returns the standard deviation for the population of all values.<br /><br /> **Arguments**<br /><br /> An `Int32`, `Int64`, `Double`, `Decimal`.<br /><br /> **Return Value**<br /><br /> A `Double`. `Null`, if all input values are `null` values.<br /><br /> **Example**<br /><br /> [!code-csharp[DP EntityServices Concepts#EDM_STDEVP](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#edm_stdevp)]\n [!code-sql[DP EntityServices Concepts#EDM_STDEVP](../../../../../../samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#edm_stdevp)]|  \n|`Sum(` `expression` `)`|Returns the sum of the non-null values.<br /><br /> **Arguments**<br /><br /> An `Int32`, `Int64`, `Double`, `Decimal`.<br /><br /> **Return Value**<br /><br /> A `Double`. `Null`, if all input values are `null` values.<br /><br /> **Example**<br /><br /> [!code-csharp[DP EntityServices Concepts#EDM_SUM](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#edm_sum)]\n [!code-sql[DP EntityServices Concepts#EDM_SUM](../../../../../../samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#edm_sum)]|  \n|`Var(` `expression` `)`|Returns the variance of all non-null values.<br /><br /> **Arguments**<br /><br /> An `Int32`, `Int64`, `Double`, `Decimal`.<br /><br /> **Return Value**<br /><br /> A `Double`. `Null`, if all input values are `null` values.<br /><br /> **Example**<br /><br /> [!code-csharp[DP EntityServices Concepts#EDM_VAR](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#edm_var)]\n [!code-sql[DP EntityServices Concepts#EDM_VAR](../../../../../../samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#edm_var)]|  \n|`VarP(` `expression` `)`|Returns the variance for the population of all non-null values.<br /><br /> **Arguments**<br /><br /> An `Int32`, `Int64`, `Double`, `Decimal`.<br /><br /> **Return Value**<br /><br /> A `Double`. `Null`, if all input values are `null` values.<br /><br /> **Example**<br /><br /> [!code-csharp[DP EntityServices Concepts#EDM_VARP](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts/cs/entitysql.cs#edm_varp)]\n [!code-sql[DP EntityServices Concepts#EDM_VARP](../../../../../../samples/snippets/tsql/VS_Snippets_Data/dp entityservices concepts/tsql/entitysql.sql#edm_varp)]|  \n  \n Equivalent functionality is available in the Microsoft SQL Client Managed Provider. For more information, see [SqlClient for Entity Framework Functions](../../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md).  \n  \n## Collection-Based Aggregates  \n Collection-based aggregates (collection functions) operate on collections and return a value. For example, if ORDERS is a collection of all orders, you can calculate the earliest ship date with the following expression:  \n  \n```  \nmin(select value o.ShipDate from LOB.Orders as o)  \n```  \n  \n Expressions inside collection-based aggregates are evaluated within the current ambient name-resolution scope.  \n  \n## Group-Based Aggregates  \n Group-based aggregates are calculated over a group as defined by the GROUP BY clause. For each group in the result, a separate aggregate is calculated by using the elements in each group as input to the aggregate calculation. When a group-by clause is used in a select expression, only grouping expression names, aggregates, or constant expressions can be present in the projection or order-by clause.  \n  \n The following example calculates the average quantity ordered for each product:  \n  \n```  \nselect p, avg(ol.Quantity) from LOB.OrderLines as ol  \n  group by ol.Product as p  \n```  \n  \n It is possible to have a group-based aggregate without an explicit group-by clause in the SELECT expression. In this case, all elements will be treated as a single group. This is equivalent to the case of specifying a grouping based on constant. Take, for example, the following expression:  \n  \n```  \nselect avg(ol.Quantity) from LOB.OrderLines as ol  \n```  \n  \n This is equivalent to the following:  \n  \n```  \nselect avg(ol.Quantity) from LOB.OrderLines as ol group by 1  \n```  \n  \n Expressions inside the group-based aggregate are evaluated within the name-resolution scope that would be visible to the WHERE clause expression.  \n  \n Like in [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)], group-based aggregates can also specify an ALL or DISTINCT modifier. If the DISTINCT modifier is specified, duplicates are eliminated from the aggregate input collection, before the aggregate is computed. If the ALL modifier is specified (or if no modifier is specified), no duplicate elimination is performed.  \n  \n## See Also  \n [Canonical Functions](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)","nodes":[{"pos":[4,404],"embed":true,"restype":"x-metadata","content":"title: \"Aggregate Canonical Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\nms.assetid: 3bcff826-ca90-41b3-a791-04d6ff0e5085\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Aggregate Canonical Functions | Microsoft Docs","nodes":[{"pos":[0,46],"content":"Aggregate Canonical Functions | Microsoft Docs","nodes":[{"content":"Aggregate Canonical Functions | Microsoft Docs","pos":[0,46]}]}],"path":["title"]}],"yml":true},{"pos":[411,440],"content":"Aggregate Canonical Functions","linkify":"Aggregate Canonical Functions","nodes":[{"content":"Aggregate Canonical Functions","pos":[0,29]}]},{"content":"Aggregates are expressions that reduce a series of input values into, for example, a single value.","pos":[441,539]},{"content":"Aggregates are normally used in conjunction with the GROUP BY clause of the SELECT expression, and there are constraints on where they can be used.","pos":[540,687]},{"pos":[694,810],"content":"The following table shows the aggregate <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> canonical functions.","source":"The following table shows the aggregate [!INCLUDE[esql](../../../../../../includes/esql-md.md)] canonical functions."},{"content":"Function","pos":[817,825]},{"content":"Description","pos":[826,837]},{"pos":[879,902],"content":"<ph id=\"ph1\">`Avg(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`Avg(` `expression` `)`"},{"content":"Returns the average of the non-null values.","pos":[903,946]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[959,972],"source":"**Arguments**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, and <ph id=\"ph4\">`Decimal`</ph>.","pos":[985,1030],"source":"An `Int32`, `Int64`, `Double`, and `Decimal`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[1043,1059],"source":"**Return Value**"},{"content":"The type of <ph id=\"ph1\">`expression`</ph>.","pos":[1072,1097],"source":"The type of `expression`."},{"content":"<ph id=\"ph1\">`Null`</ph>, if all input values are <ph id=\"ph2\">`null`</ph> values.","pos":[1098,1144],"source":"`Null`, if all input values are `null` values."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1157,1168],"source":"**Example**"},{"pos":[1508,1536],"content":"<ph id=\"ph1\">`BigCount(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`BigCount(` `expression` `)`"},{"content":"Returns the size of the aggregate including null and duplicate values.","pos":[1537,1607]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1620,1633],"source":"**Arguments**"},{"content":"Any type.","pos":[1646,1655]},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[1668,1684],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int64`</ph>.","pos":[1697,1708],"source":"An `Int64`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1721,1732],"source":"**Example**"},{"pos":[2092,2117],"content":"<ph id=\"ph1\">`Count(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`Count(` `expression` `)`"},{"content":"Returns the size of the aggregate including null and duplicate values.","pos":[2118,2188]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[2201,2214],"source":"**Arguments**"},{"content":"Any type.","pos":[2227,2236]},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[2249,2265],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>.","pos":[2278,2289],"source":"An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[2302,2313],"source":"**Example**"},{"pos":[2661,2684],"content":"<ph id=\"ph1\">`Max(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`Max(` `expression` `)`"},{"content":"Returns the maximum of the non-null values.","pos":[2685,2728]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[2741,2754],"source":"**Arguments**"},{"content":"A<ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, <ph id=\"ph4\">`Int64`</ph>, <ph id=\"ph5\">`Byte`</ph>, <ph id=\"ph6\">`Single`</ph>, <ph id=\"ph7\">`Double`</ph>, <ph id=\"ph8\">`Decimal`</ph>, <ph id=\"ph9\">`DateTime`</ph>, <ph id=\"ph10\">`DateTimeOffset`</ph>, <ph id=\"ph11\">`Time`</ph>, <ph id=\"ph12\">`String`</ph>, <ph id=\"ph13\">`Binary`</ph>.","pos":[2767,2899],"source":"A`Byte`, `Int16`, `Int32`, `Int64`, `Byte`, `Single`, `Double`, `Decimal`, `DateTime`, `DateTimeOffset`, `Time`, `String`, `Binary`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[2912,2928],"source":"**Return Value**"},{"content":"The type of <ph id=\"ph1\">`expression`</ph>.","pos":[2941,2966],"source":"The type of `expression`."},{"content":"<ph id=\"ph1\">`Null`</ph>, if all input values are <ph id=\"ph2\">`null`</ph> values.","pos":[2967,3013],"source":"`Null`, if all input values are `null` values."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[3026,3037],"source":"**Example**"},{"pos":[3377,3400],"content":"<ph id=\"ph1\">`Min(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`Min(` `expression` `)`"},{"content":"Returns the minimum of the non-null values.","pos":[3401,3444]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[3457,3470],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`Byte`</ph>, <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, <ph id=\"ph4\">`Int64`</ph>, <ph id=\"ph5\">`Byte`</ph>, <ph id=\"ph6\">`Single`</ph>, <ph id=\"ph7\">`Double`</ph>, <ph id=\"ph8\">`Decimal`</ph>, <ph id=\"ph9\">`DateTime`</ph>, <ph id=\"ph10\">`DateTimeOffset`</ph>, <ph id=\"ph11\">`Time`</ph>, <ph id=\"ph12\">`String`</ph>, <ph id=\"ph13\">`Binary`</ph>.","pos":[3483,3616],"source":"A `Byte`, `Int16`, `Int32`, `Int64`, `Byte`, `Single`, `Double`, `Decimal`, `DateTime`, `DateTimeOffset`, `Time`, `String`, `Binary`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[3629,3645],"source":"**Return Value**"},{"content":"The type of <ph id=\"ph1\">`expression`</ph>.","pos":[3658,3683],"source":"The type of `expression`."},{"content":"<ph id=\"ph1\">`Null`</ph>, if all input values are <ph id=\"ph2\">`null`</ph> values.","pos":[3684,3730],"source":"`Null`, if all input values are `null` values."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[3743,3754],"source":"**Example**"},{"pos":[4094,4119],"content":"<ph id=\"ph1\">`StDev(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`StDev(` `expression` `)`"},{"content":"Returns the standard deviation of the non-null values.","pos":[4120,4174]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[4187,4200],"source":"**Arguments**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, <ph id=\"ph4\">`Decimal`</ph>.","pos":[4213,4254],"source":"An `Int32`, `Int64`, `Double`, `Decimal`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[4267,4283],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`Double`</ph>.","pos":[4296,4307],"source":"A `Double`."},{"content":"<ph id=\"ph1\">`Null`</ph>, if all input values are <ph id=\"ph2\">`null`</ph> values.","pos":[4308,4354],"source":"`Null`, if all input values are `null` values."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[4367,4378],"source":"**Example**"},{"pos":[4726,4752],"content":"<ph id=\"ph1\">`StDevP(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`StDevP(` `expression` `)`"},{"content":"Returns the standard deviation for the population of all values.","pos":[4753,4817]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[4830,4843],"source":"**Arguments**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, <ph id=\"ph4\">`Decimal`</ph>.","pos":[4856,4897],"source":"An `Int32`, `Int64`, `Double`, `Decimal`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[4910,4926],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`Double`</ph>.","pos":[4939,4950],"source":"A `Double`."},{"content":"<ph id=\"ph1\">`Null`</ph>, if all input values are <ph id=\"ph2\">`null`</ph> values.","pos":[4951,4997],"source":"`Null`, if all input values are `null` values."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[5010,5021],"source":"**Example**"},{"pos":[5373,5396],"content":"<ph id=\"ph1\">`Sum(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`Sum(` `expression` `)`"},{"content":"Returns the sum of the non-null values.","pos":[5397,5436]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[5449,5462],"source":"**Arguments**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, <ph id=\"ph4\">`Decimal`</ph>.","pos":[5475,5516],"source":"An `Int32`, `Int64`, `Double`, `Decimal`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[5529,5545],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`Double`</ph>.","pos":[5558,5569],"source":"A `Double`."},{"content":"<ph id=\"ph1\">`Null`</ph>, if all input values are <ph id=\"ph2\">`null`</ph> values.","pos":[5570,5616],"source":"`Null`, if all input values are `null` values."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[5629,5640],"source":"**Example**"},{"pos":[5980,6003],"content":"<ph id=\"ph1\">`Var(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`Var(` `expression` `)`"},{"content":"Returns the variance of all non-null values.","pos":[6004,6048]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[6061,6074],"source":"**Arguments**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, <ph id=\"ph4\">`Decimal`</ph>.","pos":[6087,6128],"source":"An `Int32`, `Int64`, `Double`, `Decimal`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[6141,6157],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`Double`</ph>.","pos":[6170,6181],"source":"A `Double`."},{"content":"<ph id=\"ph1\">`Null`</ph>, if all input values are <ph id=\"ph2\">`null`</ph> values.","pos":[6182,6228],"source":"`Null`, if all input values are `null` values."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6241,6252],"source":"**Example**"},{"pos":[6592,6616],"content":"<ph id=\"ph1\">`VarP(`</ph> <ph id=\"ph2\">`expression`</ph> <ph id=\"ph3\">`)`</ph>","source":"`VarP(` `expression` `)`"},{"content":"Returns the variance for the population of all non-null values.","pos":[6617,6680]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[6693,6706],"source":"**Arguments**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>, <ph id=\"ph2\">`Int64`</ph>, <ph id=\"ph3\">`Double`</ph>, <ph id=\"ph4\">`Decimal`</ph>.","pos":[6719,6760],"source":"An `Int32`, `Int64`, `Double`, `Decimal`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[6773,6789],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`Double`</ph>.","pos":[6802,6813],"source":"A `Double`."},{"content":"<ph id=\"ph1\">`Null`</ph>, if all input values are <ph id=\"ph2\">`null`</ph> values.","pos":[6814,6860],"source":"`Null`, if all input values are `null` values."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6873,6884],"source":"**Example**"},{"content":"Equivalent functionality is available in the Microsoft SQL Client Managed Provider.","pos":[7231,7314]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>SqlClient for Entity Framework Functions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md)</ept>.","pos":[7315,7463],"source":" For more information, see [SqlClient for Entity Framework Functions](../../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md)."},{"pos":[7472,7499],"content":"Collection-Based Aggregates","linkify":"Collection-Based Aggregates","nodes":[{"content":"Collection-Based Aggregates","pos":[0,27]}]},{"content":"Collection-based aggregates (collection functions) operate on collections and return a value.","pos":[7503,7596]},{"content":"For example, if ORDERS is a collection of all orders, you can calculate the earliest ship date with the following expression:","pos":[7597,7722]},{"content":"Expressions inside collection-based aggregates are evaluated within the current ambient name-resolution scope.","pos":[7796,7906]},{"pos":[7915,7937],"content":"Group-Based Aggregates","linkify":"Group-Based Aggregates","nodes":[{"content":"Group-Based Aggregates","pos":[0,22]}]},{"content":"Group-based aggregates are calculated over a group as defined by the GROUP BY clause.","pos":[7941,8026]},{"content":"For each group in the result, a separate aggregate is calculated by using the elements in each group as input to the aggregate calculation.","pos":[8027,8166]},{"content":"When a group-by clause is used in a select expression, only grouping expression names, aggregates, or constant expressions can be present in the projection or order-by clause.","pos":[8167,8342]},{"content":"The following example calculates the average quantity ordered for each product:","pos":[8349,8428]},{"content":"It is possible to have a group-based aggregate without an explicit group-by clause in the SELECT expression.","pos":[8534,8642]},{"content":"In this case, all elements will be treated as a single group.","pos":[8643,8704]},{"content":"This is equivalent to the case of specifying a grouping based on constant.","pos":[8705,8779]},{"content":"Take, for example, the following expression:","pos":[8780,8824]},{"content":"This is equivalent to the following:","pos":[8898,8934]},{"content":"Expressions inside the group-based aggregate are evaluated within the name-resolution scope that would be visible to the WHERE clause expression.","pos":[9019,9164]},{"content":"Like in <ph id=\"ph1\">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>, group-based aggregates can also specify an ALL or DISTINCT modifier.","pos":[9171,9304],"source":"Like in [!INCLUDE[tsql](../../../../../../includes/tsql-md.md)], group-based aggregates can also specify an ALL or DISTINCT modifier."},{"content":"If the DISTINCT modifier is specified, duplicates are eliminated from the aggregate input collection, before the aggregate is computed.","pos":[9305,9440]},{"content":"If the ALL modifier is specified (or if no modifier is specified), no duplicate elimination is performed.","pos":[9441,9546]},{"pos":[9555,9563],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[9567,9679],"content":"<bpt id=\"p1\">[</bpt>Canonical Functions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)</ept>","source":"[Canonical Functions](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)"}]}