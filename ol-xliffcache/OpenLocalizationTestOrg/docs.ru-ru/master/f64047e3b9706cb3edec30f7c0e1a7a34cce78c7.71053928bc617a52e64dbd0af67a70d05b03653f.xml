{"content":"---\ntitle: \"Windows Forms Visual Inheritance | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"base forms\"\n  - \"inheritance, forms\"\n  - \"inherited forms, Windows Forms\"\n  - \"inheritance\"\n  - \"inherited forms\"\n  - \"form inheritance\"\n  - \"Windows Forms, inheritance\"\nms.assetid: 857eb737-3602-4d49-bd8b-f70d33ace345\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Windows Forms Visual Inheritance\nOccasionally, you may decide that a project calls for a form similar to one that you have created in a previous project. Or, you may want to create a basic form with settings such as a watermark or certain control layout that you will then use again within a project, with each iteration containing modifications to the original form template. Form inheritance enables you to create a base form and then inherit from it and make modifications while preserving whatever original settings you need.  \n  \n You can create derived-class forms programmatically or by using the Visual Inheritance picker.  \n  \n## In This Section  \n [How to: Inherit Windows Forms](../../../../docs/framework/winforms/advanced/how-to-inherit-windows-forms.md)  \n Gives directions for creating inherited forms in code.  \n  \n [How to: Inherit Forms Using the Inheritance Picker Dialog Box](../../../../docs/framework/winforms/advanced/how-to-inherit-forms-using-the-inheritance-picker-dialog-box.md)  \n Gives directions for creating inherited forms with the Inheritance Picker.  \n  \n [Effects of Modifying a Base Form's Appearance](../../../../docs/framework/winforms/advanced/effects-of-modifying-base-form-appearance.md)  \n Gives directions for changing a base form's controls and their properties.  \n  \n [Walkthrough: Demonstrating Visual Inheritance](../../../../docs/framework/winforms/advanced/walkthrough-demonstrating-visual-inheritance.md)  \n Describes how to create a base Windows Form and compile it into a class library. You will import this class library into another project, and create a new form that inherits from the base form.  \n  \n [How to: Use the Modifiers and GenerateMember Properties](../../../../docs/framework/winforms/advanced/how-to-use-the-modifiers-and-generatemember-properties.md)  \n Gives directions for using the `GenerateMember` and `Modifiers` properties, which are relevant when the Windows Forms Designer generates a member variable for a component.  \n  \n## Related Sections  \n [NOT IN BUILD: Inheritance in Visual Basic](http://msdn.microsoft.com/en-us/e5e6e240-ed31-4657-820c-079b7c79313c)  \n Describes how to define Visual Basic classes that serve as the basis for other classes.  \n  \n [class](~/docs/csharp/language-reference/keywords/class.md)  \n Describes the C# approach of classes, in which single inheritance is allowed.  \n  \n [Troubleshooting Inherited Event Handlers in Visual Basic](~/docs/visual-basic/programming-guide/language-features/events/troubleshooting-inherited-event-handlers.md)  \n Lists common issues that arise with event handlers in inherited components","nodes":[{"pos":[12,61],"content":"Windows Forms Visual Inheritance | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Windows Forms Visual Inheritance | Microsoft Docs","pos":[0,49]}]},{"pos":[595,627],"content":"Windows Forms Visual Inheritance","linkify":"Windows Forms Visual Inheritance","nodes":[{"content":"Windows Forms Visual Inheritance","pos":[0,32]}]},{"content":"Occasionally, you may decide that a project calls for a form similar to one that you have created in a previous project.","pos":[628,748]},{"content":"Or, you may want to create a basic form with settings such as a watermark or certain control layout that you will then use again within a project, with each iteration containing modifications to the original form template.","pos":[749,971]},{"content":"Form inheritance enables you to create a base form and then inherit from it and make modifications while preserving whatever original settings you need.","pos":[972,1124]},{"content":"You can create derived-class forms programmatically or by using the Visual Inheritance picker.","pos":[1131,1225]},{"pos":[1234,1249],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"content":"<bpt id=\"p1\">[</bpt>How to: Inherit Windows Forms<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/how-to-inherit-windows-forms.md)</ept>","pos":[1253,1362],"source":"[How to: Inherit Windows Forms](../../../../docs/framework/winforms/advanced/how-to-inherit-windows-forms.md)"},{"content":"Gives directions for creating inherited forms in code.","pos":[1366,1420]},{"content":"<bpt id=\"p1\">[</bpt>How to: Inherit Forms Using the Inheritance Picker Dialog Box<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/how-to-inherit-forms-using-the-inheritance-picker-dialog-box.md)</ept>","pos":[1427,1600],"source":"[How to: Inherit Forms Using the Inheritance Picker Dialog Box](../../../../docs/framework/winforms/advanced/how-to-inherit-forms-using-the-inheritance-picker-dialog-box.md)"},{"content":"Gives directions for creating inherited forms with the Inheritance Picker.","pos":[1604,1678]},{"content":"<bpt id=\"p1\">[</bpt>Effects of Modifying a Base Form's Appearance<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/effects-of-modifying-base-form-appearance.md)</ept>","pos":[1685,1823],"source":"[Effects of Modifying a Base Form's Appearance](../../../../docs/framework/winforms/advanced/effects-of-modifying-base-form-appearance.md)"},{"content":"Gives directions for changing a base form's controls and their properties.","pos":[1827,1901]},{"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Demonstrating Visual Inheritance<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/walkthrough-demonstrating-visual-inheritance.md)</ept>","pos":[1908,2049],"source":"[Walkthrough: Demonstrating Visual Inheritance](../../../../docs/framework/winforms/advanced/walkthrough-demonstrating-visual-inheritance.md)"},{"content":"Describes how to create a base Windows Form and compile it into a class library.","pos":[2053,2133]},{"content":"You will import this class library into another project, and create a new form that inherits from the base form.","pos":[2134,2246]},{"content":"<bpt id=\"p1\">[</bpt>How to: Use the Modifiers and GenerateMember Properties<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/how-to-use-the-modifiers-and-generatemember-properties.md)</ept>","pos":[2253,2414],"source":"[How to: Use the Modifiers and GenerateMember Properties](../../../../docs/framework/winforms/advanced/how-to-use-the-modifiers-and-generatemember-properties.md)"},{"content":"Gives directions for using the <ph id=\"ph1\">`GenerateMember`</ph> and <ph id=\"ph2\">`Modifiers`</ph> properties, which are relevant when the Windows Forms Designer generates a member variable for a component.","pos":[2418,2589],"source":" Gives directions for using the `GenerateMember` and `Modifiers` properties, which are relevant when the Windows Forms Designer generates a member variable for a component."},{"pos":[2598,2614],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"<bpt id=\"p1\">[</bpt>NOT IN BUILD: Inheritance in Visual Basic<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e5e6e240-ed31-4657-820c-079b7c79313c)</ept>","pos":[2618,2731],"source":"[NOT IN BUILD: Inheritance in Visual Basic](http://msdn.microsoft.com/en-us/e5e6e240-ed31-4657-820c-079b7c79313c)"},{"content":"Describes how to define Visual Basic classes that serve as the basis for other classes.","pos":[2735,2822]},{"content":"<bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/class.md)</ept>","pos":[2829,2888],"source":"[class](~/docs/csharp/language-reference/keywords/class.md)"},{"content":"Describes the C# approach of classes, in which single inheritance is allowed.","pos":[2892,2969]},{"content":"<bpt id=\"p1\">[</bpt>Troubleshooting Inherited Event Handlers in Visual Basic<ept id=\"p1\">](~/docs/visual-basic/programming-guide/language-features/events/troubleshooting-inherited-event-handlers.md)</ept>","pos":[2976,3142],"source":"[Troubleshooting Inherited Event Handlers in Visual Basic](~/docs/visual-basic/programming-guide/language-features/events/troubleshooting-inherited-event-handlers.md)"},{"content":"Lists common issues that arise with event handlers in inherited components","pos":[3146,3220]}]}