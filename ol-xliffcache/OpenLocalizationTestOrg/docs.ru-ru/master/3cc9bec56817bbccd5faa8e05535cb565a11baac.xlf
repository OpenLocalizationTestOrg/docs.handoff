<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cc9bec56817bbccd5faa8e05535cb565a11baac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\developing-apps\programming\log-info\working-with-application-logs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c5946d80899de6764ead90244bf5c2fc5ffad05</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e808c70d5c9195865e4a748267bc16a070c7fe3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working with Application Logs in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Working with Application Logs in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My.Applicaton.Log`</ph> and <ph id="ph2">`My.Log`</ph> objects make it easy to write logging and tracing information to logs.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How Messages are Logged</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>First, the severity of the message is checked with the <ph id="ph1">&lt;xref:System.Diagnostics.TraceSource.Switch%2A&gt;</ph> property of the log's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By default, only messages of severity "Information" and higher are passed on to the trace listeners, specified in the log's <ph id="ph1">`TraceListener`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Then, each listener compares the severity of the message to the listener's <ph id="ph1">&lt;xref:System.Diagnostics.TraceSource.Switch%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the message's severity is high enough, the listener writes out the message.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following diagram shows how a message written to the <ph id="ph1">`WriteEntry`</ph> method gets passed to the <ph id="ph2">`WriteLine`</ph> methods of the log's trace listeners:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>My Log Call<ept id="p1">]</ept><bpt id="p2">(../../../../visual-basic/developing-apps/programming/log-info/media/mylogcall.png "</bpt>MyLogCall<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can change the behavior of the log and the trace listeners by changing the application's configuration file.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following diagram shows the correspondence between the parts of the log and the configuration file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>My Log Configuration<ept id="p1">]</ept><bpt id="p2">(../../../../visual-basic/developing-apps/programming/log-info/media/mylogconfig.png "</bpt>MyLogConfig<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Where Messages are Logged</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the assembly has no configuration file, the <ph id="ph1">`My.Application.Log`</ph> and <ph id="ph2">`My.Log`</ph> objects write to the application's debug output (through the <ph id="ph3">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`My.Application.Log`</ph> object writes to the assembly's log file (through the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class), while the <ph id="ph3">`My.Log`</ph> object writes to the ASP.NET Web page's output (through the <ph id="ph4">&lt;xref:System.Web.WebPageTraceListener&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The debug output can be viewed in the <ph id="ph1">[!INCLUDE[vsprvs](../../../../csharp/includes/vsprvs_md.md)]</ph> <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window when running your application in debug mode.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To open the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window, click the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu item, point to <bpt id="p3">**</bpt>Windows<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>Output<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window, select <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> from the <bpt id="p3">**</bpt>Show output from<ept id="p3">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`My.Application.Log`</ph> writes the log file in the path for the user's application data.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can get the path from the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter%2A&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The format of that path is as follows:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A typical value for <ph id="ph1">`BasePath`</ph> is as follows.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>C:\Documents and Settings<ph id="ph1">\\</ph><ph id="ph2">`username`</ph>\Application Data</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The values of <ph id="ph1">`CompanyName`</ph>, <ph id="ph2">`ProductName`</ph>, and <ph id="ph3">`ProductVersion`</ph> come from the application's assembly information.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The form of the log file name is <bpt id="p1">*</bpt>AssemblyName<ept id="p1">*</ept>.log, where <bpt id="p2">*</bpt>AssemblyName<ept id="p2">*</ept> is the file name of the assembly without the extension.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If more than one log file is needed, such as when the original log is unavailable when the application attempts to write to the log, the form for the log file name is <bpt id="p1">*</bpt>AssemblyName<ept id="p1">*</ept><ph id="ph1">-</ph><bpt id="p2">*</bpt>iteration<ept id="p2">*</ept>.log, where <ph id="ph2">`iteration`</ph> is a positive <ph id="ph3">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can override the default behavior by adding or changing the computer's and the application's configuration files.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Walkthrough: Changing Where My.Application.Log Writes Information<ept id="p1">](../../../../visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Configuring Log Settings</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Log`</ph> object has a default implementation that works without an application configuration file, app.config.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To change the defaults, you must add a configuration file with the new settings.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Walkthrough: Filtering My.Application.Log Output<ept id="p1">](../../../../visual-basic/developing-apps/programming/log-info/walkthrough-filtering-my-application-log-output.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The log configuration sections are located in the <ph id="ph1">`&lt;system.diagnostics&gt;`</ph> node in the main <ph id="ph2">`&lt;configuration&gt;`</ph> node of the app.config file.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Log information is defined in several nodes:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The listeners for the <ph id="ph1">`Log`</ph> object are defined in the <ph id="ph2">`&lt;sources&gt;`</ph> node named DefaultSource.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The severity filter for the <ph id="ph1">`Log`</ph> object is defined in the <ph id="ph2">`&lt;switches&gt;`</ph> node named DefaultSwitch.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The log listeners are defined in the <ph id="ph1">`&lt;sharedListeners&gt;`</ph> node.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Examples of <ph id="ph1">`&lt;sources&gt;`</ph>, <ph id="ph2">`&lt;switches&gt;`</ph>, and <ph id="ph3">`&lt;sharedListeners&gt;`</ph> nodes are shown in the following code:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Changing Log Settings after Deployment</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When you develop an application, its configuration settings are stored in the app.config file, as shown in the examples above.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>After you deploy your application, you can still configure the log by editing the configuration file.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In a Windows-based application, this file's name is <bpt id="p1">*</bpt>applicationName<ept id="p1">*</ept>.exe.config, and it must reside in the same folder as the executable file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For a Web application, this is the Web.config file associated with the project.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When your application executes the code that creates an instance of a class for the first time, it checks the configuration file for information about the object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`Log`</ph> object, this happens the first time the <ph id="ph2">`Log`</ph> object is accessed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The system examines the configuration file only once for any particular object—the first time your application creates the object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Therefore, you may need to restart the application for the changes to take effect.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In a deployed application, you enable trace code by reconfiguring switch objects before your application starts.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Typically, this involves turning the switch objects on and off or by changing the tracing levels, and then restarting your application.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Consider the following when writing data to the log:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Avoid leaking user information.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Ensure that your application writes only approved information to the log.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, it may be acceptable for the application log to contain user names, but not user passwords.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Make log locations secure.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Any log that contains potentially sensitive information should be stored in a secure location.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Avoid misleading information.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In general, your application should validate all data entered by a user before using that data.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This includes writing data to the application log.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Avoid denial of service.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If your application writes too much information to the log, it could fill the log or make finding important information difficult.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.Logging.Log?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Logging Information from the Application<ept id="p1">](../../../../visual-basic/developing-apps/programming/log-info/logging-information-from-the-application.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>