{"content":"---\ntitle: \"Enumerations and Name Qualification (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"declarations, enumerations\"\n  - \"Imports statement, namespace declarations\"\n  - \"declaring namespaces, enumerations\"\n  - \"name collisions\"\n  - \"ambiguous names, enumerations\"\n  - \"enumerations [Visual Basic], name qualification\"\n  - \"names, avoiding conflicts\"\n  - \"namespaces, declaring\"\n  - \"naming conflicts, enumerations\"\n  - \"naming conflicts, qualifying names\"\n  - \"declaring enumerations\"\n  - \"references, enumeration members\"\n  - \"naming conventions, naming conflicts\"\n  - \"declarations, namespaces\"\nms.assetid: 08ba2738-df52-4140-bc55-f57c871c9b73\ncaps.latest.revision: 20\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Enumerations and Name Qualification (Visual Basic)\nNormally, when referring to a member of an enumeration, you must qualify the member name with the enumeration name. For example, to refer to the `Sunday` member of your `Days` enumeration, you would use the following syntax:  \n  \n [!code-vb[VbEnumsTask#18](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_1.vb)]  \n  \n## Using the Imports Statement  \n You can avoid using fully qualified names by adding an `Imports` statement to the namespace declarations section of your code, as in the following example:  \n  \n [!code-vb[VbEnumsTask#22](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_2.vb)]  \n  \n An `Imports` statement imports namespace names from referenced projects and assemblies and from within the same project as the module in which the statement appears. Once this statement is added, you can refer to your enumeration members without qualification, as in the following example:  \n  \n [!code-vb[VbEnumsTask#24](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_3.vb)]  \n  \n By organizing sets of related constants in enumerations, you can use the same constant names in different contexts. For example, you can use the same names for the weekday constants in the `Days` and `WorkDays` enumerations. If you use the `Imports` statement with your enumerations, you must be careful to avoid ambiguous references. Consider the following example:  \n  \n [!code-vb[VbEnumsTask#22](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_2.vb)]  \n  \n [!code-vb[VbEnumsTask#25](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_4.vb)]  \n  \n Assuming that `Monday` is a member of both the `Days` enumeration and the `Workdays` enumeration, this code generates a compiler error. To avoid ambiguous references when referring to an individual constant, qualify the constant name with its enumeration. The following code refers to the `Saturday` constants in the `Days` and `WorkDays` enumerations.  \n  \n [!code-vb[VbEnumsTask#32](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_5.vb)]  \n  \n## See Also  \n [Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)   \n [How to: Declare an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md)   \n [How to: Refer to an Enumeration Member](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md)   \n [How to: Iterate Through An Enumeration in Visual Basic](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md)   \n [How to: Determine the String Associated with an Enumeration Value](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md)   \n [When to Use an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/when-to-use-an-enumeration.md)   \n [Constant and Literal Data Types](../../../../visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md)   \n [Enum Statement](../../../../visual-basic/language-reference/statements/enum-statement.md)   \n [Imports Statement (.NET Namespace and Type)](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)   \n [Data Types](../../../../visual-basic/language-reference/data-types/data-type-summary.md)","nodes":[{"pos":[12,79],"content":"Enumerations and Name Qualification (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Enumerations and Name Qualification (Visual Basic) | Microsoft Docs","pos":[0,67]}]},{"pos":[1087,1137],"content":"Enumerations and Name Qualification (Visual Basic)","linkify":"Enumerations and Name Qualification (Visual Basic)","nodes":[{"content":"Enumerations and Name Qualification (Visual Basic)","pos":[0,50]}]},{"content":"Normally, when referring to a member of an enumeration, you must qualify the member name with the enumeration name.","pos":[1138,1253]},{"content":"For example, to refer to the <ph id=\"ph1\">`Sunday`</ph> member of your <ph id=\"ph2\">`Days`</ph> enumeration, you would use the following syntax:","pos":[1254,1362],"source":" For example, to refer to the `Sunday` member of your `Days` enumeration, you would use the following syntax:"},{"pos":[1369,1516],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbEnumsTask#18<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbEnumsTask#18](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_1.vb)]"},{"pos":[1525,1552],"content":"Using the Imports Statement","linkify":"Using the Imports Statement","nodes":[{"content":"Using the Imports Statement","pos":[0,27]}]},{"pos":[1556,1711],"content":"You can avoid using fully qualified names by adding an <ph id=\"ph1\">`Imports`</ph> statement to the namespace declarations section of your code, as in the following example:","source":"You can avoid using fully qualified names by adding an `Imports` statement to the namespace declarations section of your code, as in the following example:"},{"pos":[1718,1865],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbEnumsTask#22<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbEnumsTask#22](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_2.vb)]"},{"content":"An <ph id=\"ph1\">`Imports`</ph> statement imports namespace names from referenced projects and assemblies and from within the same project as the module in which the statement appears.","pos":[1872,2037],"source":"An `Imports` statement imports namespace names from referenced projects and assemblies and from within the same project as the module in which the statement appears."},{"content":"Once this statement is added, you can refer to your enumeration members without qualification, as in the following example:","pos":[2038,2161]},{"pos":[2168,2315],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbEnumsTask#24<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbEnumsTask#24](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_3.vb)]"},{"content":"By organizing sets of related constants in enumerations, you can use the same constant names in different contexts.","pos":[2322,2437]},{"content":"For example, you can use the same names for the weekday constants in the <ph id=\"ph1\">`Days`</ph> and <ph id=\"ph2\">`WorkDays`</ph> enumerations.","pos":[2438,2546],"source":" For example, you can use the same names for the weekday constants in the `Days` and `WorkDays` enumerations."},{"content":"If you use the <ph id=\"ph1\">`Imports`</ph> statement with your enumerations, you must be careful to avoid ambiguous references.","pos":[2547,2656],"source":" If you use the `Imports` statement with your enumerations, you must be careful to avoid ambiguous references."},{"content":"Consider the following example:","pos":[2657,2688]},{"pos":[2695,2842],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbEnumsTask#22<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbEnumsTask#22](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_2.vb)]"},{"pos":[2849,2996],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbEnumsTask#25<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_4.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbEnumsTask#25](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_4.vb)]"},{"content":"Assuming that <ph id=\"ph1\">`Monday`</ph> is a member of both the <ph id=\"ph2\">`Days`</ph> enumeration and the <ph id=\"ph3\">`Workdays`</ph> enumeration, this code generates a compiler error.","pos":[3003,3138],"source":"Assuming that `Monday` is a member of both the `Days` enumeration and the `Workdays` enumeration, this code generates a compiler error."},{"content":"To avoid ambiguous references when referring to an individual constant, qualify the constant name with its enumeration.","pos":[3139,3258]},{"content":"The following code refers to the <ph id=\"ph1\">`Saturday`</ph> constants in the <ph id=\"ph2\">`Days`</ph> and <ph id=\"ph3\">`WorkDays`</ph> enumerations.","pos":[3259,3355],"source":" The following code refers to the `Saturday` constants in the `Days` and `WorkDays` enumerations."},{"pos":[3362,3509],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbEnumsTask#32<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_5.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbEnumsTask#32](../../../../visual-basic/language-reference/statements/codesnippet/VisualBasic/enumerations-and-name-qualification_5.vb)]"},{"pos":[3518,3526],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Constants and Enumerations<ept id=\"p1\">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept><ph id=\"ph1\"> </ph>","pos":[3530,3634],"source":"[Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Declare an Enumeration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md)</ept><ph id=\"ph1\"> </ph>","pos":[3637,3780],"source":" [How to: Declare an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Refer to an Enumeration Member<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md)</ept><ph id=\"ph1\"> </ph>","pos":[3783,3944],"source":" [How to: Refer to an Enumeration Member](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Iterate Through An Enumeration in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md)</ept><ph id=\"ph1\"> </ph>","pos":[3947,4124],"source":" [How to: Iterate Through An Enumeration in Visual Basic](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Determine the String Associated with an Enumeration Value<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md)</ept><ph id=\"ph1\"> </ph>","pos":[4127,4342],"source":" [How to: Determine the String Associated with an Enumeration Value](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md) "},{"content":"<bpt id=\"p1\"> [</bpt>When to Use an Enumeration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/when-to-use-an-enumeration.md)</ept><ph id=\"ph1\"> </ph>","pos":[4345,4483],"source":" [When to Use an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/when-to-use-an-enumeration.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Constant and Literal Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[4486,4634],"source":" [Constant and Literal Data Types](../../../../visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Enum Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/enum-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[4637,4729],"source":" [Enum Statement](../../../../visual-basic/language-reference/statements/enum-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Imports Statement (.NET Namespace and Type)<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[4732,4879],"source":" [Imports Statement (.NET Namespace and Type)](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept>","pos":[4882,4972],"source":" [Data Types](../../../../visual-basic/language-reference/data-types/data-type-summary.md)"}]}