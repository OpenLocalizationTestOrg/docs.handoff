{"content":"---\ntitle: \"IMetaDataInfo::GetFileMapping Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"IMetaDataInfo.GetFileMapping\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IMetaDataInfo::GetFileMapping\"\nhelpviewer_keywords: \n  - \"IMetaDataInfo::GetFileMapping method [.NET Framework metadata]\"\n  - \"GetFileMapping method [.NET Framework metadata]\"\nms.assetid: 2868dfec-c992-4606-88bb-a8e0b6b18271\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# IMetaDataInfo::GetFileMapping Method\nGets the memory region of the mapped file, and the type of mapping.  \n  \n## Syntax  \n  \n```  \nHRESULT GetFileMapping (  \n    [out] const void           **ppvData,   \n    [out] ULONGLONG            *pcbData,   \n    [out] DWORD                *pdwMappingType  \n);  \n```  \n  \n## Parameters  \n `ppvData`  \n [out] A pointer to the start of the mapped file.  \n  \n `pcbData`  \n [out] The size of the mapped region. If `pdwMappingType` is `fmFlat`, this is the size of the file.  \n  \n `pdwMappingType`  \n [out] A [CorFileMapping](../../../../docs/framework/unmanaged-api/metadata/corfilemapping-enumeration.md) value that indicates the type of mapping. The current implementation of the common language runtime (CLR) always returns `fmFlat`. Other values are reserved for future use. However, you should always verify the returned value, because other values may be enabled in future versions or service releases.  \n  \n## Return Value  \n  \n|HRESULT|Description|  \n|-------------|-----------------|  \n|`S_OK`|All outputs are filled.|  \n|`E_INVALIDARG`|NULL was passed as an argument value.|  \n|`COR_E_NOTSUPPORTED`|The CLR implementation cannot provide information about the memory region. This can happen for the following reasons:<br /><br /> -   The metadata scope was opened with the `ofWrite` or `ofCopyMemory` flag.<br />-   The metadata scope was opened without the `ofReadOnly` flag.<br />-   The [IMetaDataDispenser::OpenScopeOnMemory](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenser-openscopeonmemory-method.md) method was used to open only the metadata portion of the file.<br />-   The file is not a portable executable (PE) file. **Note:**  These conditions depend on the CLR implementation, and are likely to be weakened in future versions of the CLR.|  \n  \n## Remarks  \n The memory that `ppvData` points to is valid only as long as the underlying metadata scope is open.  \n  \n In order for this method to work, when you map the metadata of an on-disk file into memory by calling the [IMetaDataDispenser::OpenScope](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenser-openscope-method.md) method, you must specify the `ofReadOnly` flag and you must not specify the `ofWrite` or `ofCopyMemory` flag.  \n  \n The choice of file mapping type for each scope is specific to a given implementation of the CLR. It cannot be set by the user. The current implementation of the CLR always returns `fmFlat` in `pdwMappingType`, but this can change in future versions of the CLR or in future service releases of a given version. You should always check the returned value in `pdwMappingType`, because different types will have different layouts and offsets.  \n  \n Passing NULL for any of the three parameters is not supported. The method returns `E_INVALIDARG`, and none of the outputs are filled. Ignoring the mapping type or the size of the region can result in abnormal program termination.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** Cor.h  \n  \n **Library:** Used as a resource in MsCorEE.dll  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v40plus](../../../../includes/net-current-v40plus-md.md)]  \n  \n## See also\n\n- [IMetaDataInfo Interface](../../../../docs/framework/unmanaged-api/metadata/imetadatainfo-interface.md)\n- [CorFileMapping Enumeration](../../../../docs/framework/unmanaged-api/metadata/corfilemapping-enumeration.md)\n","nodes":[{"pos":[4,478],"embed":true,"restype":"x-metadata","content":"title: \"IMetaDataInfo::GetFileMapping Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"IMetaDataInfo.GetFileMapping\"\napi_location: \n  - \"mscoree.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"IMetaDataInfo::GetFileMapping\"\nhelpviewer_keywords: \n  - \"IMetaDataInfo::GetFileMapping method [.NET Framework metadata]\"\n  - \"GetFileMapping method [.NET Framework metadata]\"\nms.assetid: 2868dfec-c992-4606-88bb-a8e0b6b18271\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"IMetaDataInfo::GetFileMapping Method","nodes":[{"pos":[0,36],"content":"IMetaDataInfo::GetFileMapping Method","nodes":[{"content":"IMetaDataInfo::GetFileMapping Method","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[485,521],"content":"IMetaDataInfo::GetFileMapping Method","linkify":"IMetaDataInfo::GetFileMapping Method","nodes":[{"content":"IMetaDataInfo::GetFileMapping Method","pos":[0,36]}]},{"content":"Gets the memory region of the mapped file, and the type of mapping.","pos":[522,589]},{"pos":[598,604],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[798,808],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[out] A pointer to the start of the mapped file.","pos":[825,873]},{"content":"[out] The size of the mapped region.","pos":[893,929]},{"content":"If <ph id=\"ph1\">`pdwMappingType`</ph> is <ph id=\"ph2\">`fmFlat`</ph>, this is the size of the file.","pos":[930,992],"source":" If `pdwMappingType` is `fmFlat`, this is the size of the file."},{"content":"[out] A <bpt id=\"p1\">[</bpt>CorFileMapping<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/corfilemapping-enumeration.md)</ept> value that indicates the type of mapping.","pos":[1019,1166],"source":"[out] A [CorFileMapping](../../../../docs/framework/unmanaged-api/metadata/corfilemapping-enumeration.md) value that indicates the type of mapping."},{"content":"The current implementation of the common language runtime (CLR) always returns <ph id=\"ph1\">`fmFlat`</ph>.","pos":[1167,1255],"source":" The current implementation of the common language runtime (CLR) always returns `fmFlat`."},{"content":"Other values are reserved for future use.","pos":[1256,1297]},{"content":"However, you should always verify the returned value, because other values may be enabled in future versions or service releases.","pos":[1298,1427]},{"pos":[1436,1448],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"HRESULT","pos":[1455,1462]},{"content":"Description","pos":[1463,1474]},{"content":"All outputs are filled.","pos":[1522,1545]},{"content":"NULL was passed as an argument value.","pos":[1565,1602]},{"content":"The CLR implementation cannot provide information about the memory region.","pos":[1628,1702]},{"content":"This can happen for the following reasons:","pos":[1703,1745]},{"content":"-   The metadata scope was opened with the <ph id=\"ph1\">`ofWrite`</ph> or <ph id=\"ph2\">`ofCopyMemory`</ph> flag.","pos":[1758,1834],"source":"-   The metadata scope was opened with the `ofWrite` or `ofCopyMemory` flag."},{"content":"-   The metadata scope was opened without the <ph id=\"ph1\">`ofReadOnly`</ph> flag.","pos":[1840,1904],"source":"-   The metadata scope was opened without the `ofReadOnly` flag."},{"content":"-   The <bpt id=\"p1\">[</bpt>IMetaDataDispenser::OpenScopeOnMemory<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenser-openscopeonmemory-method.md)</ept> method was used to open only the metadata portion of the file.","pos":[1910,2118],"source":"-   The [IMetaDataDispenser::OpenScopeOnMemory](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenser-openscopeonmemory-method.md) method was used to open only the metadata portion of the file."},{"content":"-   The file is not a portable executable (PE) file.","pos":[2124,2176]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept>  These conditions depend on the CLR implementation, and are likely to be weakened in future versions of the CLR.","pos":[2177,2299],"source":"**Note:**  These conditions depend on the CLR implementation, and are likely to be weakened in future versions of the CLR."},{"pos":[2309,2316],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2320,2419],"content":"The memory that <ph id=\"ph1\">`ppvData`</ph> points to is valid only as long as the underlying metadata scope is open.","source":"The memory that `ppvData` points to is valid only as long as the underlying metadata scope is open."},{"pos":[2426,2763],"content":"In order for this method to work, when you map the metadata of an on-disk file into memory by calling the <bpt id=\"p1\">[</bpt>IMetaDataDispenser::OpenScope<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenser-openscope-method.md)</ept> method, you must specify the <ph id=\"ph1\">`ofReadOnly`</ph> flag and you must not specify the <ph id=\"ph2\">`ofWrite`</ph> or <ph id=\"ph3\">`ofCopyMemory`</ph> flag.","source":"In order for this method to work, when you map the metadata of an on-disk file into memory by calling the [IMetaDataDispenser::OpenScope](../../../../docs/framework/unmanaged-api/metadata/imetadatadispenser-openscope-method.md) method, you must specify the `ofReadOnly` flag and you must not specify the `ofWrite` or `ofCopyMemory` flag."},{"content":"The choice of file mapping type for each scope is specific to a given implementation of the CLR.","pos":[2770,2866]},{"content":"It cannot be set by the user.","pos":[2867,2896]},{"content":"The current implementation of the CLR always returns <ph id=\"ph1\">`fmFlat`</ph> in <ph id=\"ph2\">`pdwMappingType`</ph>, but this can change in future versions of the CLR or in future service releases of a given version.","pos":[2897,3079],"source":" The current implementation of the CLR always returns `fmFlat` in `pdwMappingType`, but this can change in future versions of the CLR or in future service releases of a given version."},{"content":"You should always check the returned value in <ph id=\"ph1\">`pdwMappingType`</ph>, because different types will have different layouts and offsets.","pos":[3080,3208],"source":" You should always check the returned value in `pdwMappingType`, because different types will have different layouts and offsets."},{"content":"Passing NULL for any of the three parameters is not supported.","pos":[3215,3277]},{"content":"The method returns <ph id=\"ph1\">`E_INVALIDARG`</ph>, and none of the outputs are filled.","pos":[3278,3348],"source":" The method returns `E_INVALIDARG`, and none of the outputs are filled."},{"content":"Ignoring the mapping type or the size of the region can result in abnormal program termination.","pos":[3349,3444]},{"pos":[3453,3465],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3469,3573],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3580,3597],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> Cor.h","source":"**Header:** Cor.h"},{"pos":[3604,3650],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> Used as a resource in MsCorEE.dll","source":"**Library:** Used as a resource in MsCorEE.dll"},{"pos":[3657,3765],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v40plus](../../../../includes/net-current-v40plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v40plus](../../../../includes/net-current-v40plus-md.md)]"},{"pos":[3774,3782],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3786,3889],"content":"<bpt id=\"p1\">[</bpt>IMetaDataInfo Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/imetadatainfo-interface.md)</ept>","source":"[IMetaDataInfo Interface](../../../../docs/framework/unmanaged-api/metadata/imetadatainfo-interface.md)"},{"pos":[3892,4001],"content":"<bpt id=\"p1\">[</bpt>CorFileMapping Enumeration<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/metadata/corfilemapping-enumeration.md)</ept>","source":"[CorFileMapping Enumeration](../../../../docs/framework/unmanaged-api/metadata/corfilemapping-enumeration.md)"}]}