{"content":"---\ntitle: \"How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 1ff5562b-0d30-46d1-b426-a04e8f78c840\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#)\nSometimes files that have the same name may be located in more than one folder. For example, under the Visual Studio installation folder, several folders have a readme.htm file. This example shows how to query for such duplicate file names under a specified root folder. The second example shows how to query for files whose size and creation times also match.  \n  \n## Example  \n  \n```csharp  \nclass QueryDuplicateFileNames  \n{  \n    static void Main(string[] args)  \n    {  \n        // Uncomment QueryDuplicates2 to run that query.  \n        QueryDuplicates();  \n        // QueryDuplicates2();  \n  \n        // Keep the console window open in debug mode.  \n        Console.WriteLine(\"Press any key to exit.\");  \n        Console.ReadKey();  \n    }  \n  \n    static void QueryDuplicates()  \n    {  \n        // Change the root drive or folder if necessary  \n        string startFolder = @\"c:\\program files\\Microsoft Visual Studio 9.0\\\";  \n  \n        // Take a snapshot of the file system.  \n        System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(startFolder);  \n  \n        // This method assumes that the application has discovery permissions  \n        // for all folders under the specified path.  \n        IEnumerable<System.IO.FileInfo> fileList = dir.GetFiles(\"*.*\", System.IO.SearchOption.AllDirectories);  \n  \n        // used in WriteLine to keep the lines shorter  \n        int charsToSkip = startFolder.Length;  \n  \n        // var can be used for convenience with groups.  \n        var queryDupNames =  \n            from file in fileList  \n            group file.FullName.Substring(charsToSkip) by file.Name into fileGroup  \n            where fileGroup.Count() > 1  \n            select fileGroup;  \n  \n        // Pass the query to a method that will  \n        // output one page at a time.  \n        PageOutput<string, string>(queryDupNames);  \n    }  \n  \n    // A Group key that can be passed to a separate method.  \n    // Override Equals and GetHashCode to define equality for the key.  \n    // Override ToString to provide a friendly name for Key.ToString()  \n    class PortableKey  \n    {  \n        public string Name { get; set; }  \n        public DateTime CreationTime { get; set; }  \n        public long Length { get; set; }  \n  \n        public override bool Equals(object obj)  \n        {  \n            PortableKey other = (PortableKey)obj;  \n            return other.CreationTime == this.CreationTime &&  \n                   other.Length == this.Length &&  \n                   other.Name == this.Name;  \n        }  \n  \n        public override int GetHashCode()  \n        {  \n            string str = String.Format(\"{0}{1}{2}\", this.CreationTime, this.Length, this.Name);  \n            return str.GetHashCode();  \n        }  \n        public override string ToString()  \n        {  \n            return String.Format(\"{0} {1} {2}\", this.Name, this.Length, this.CreationTime);  \n        }  \n    }  \n    static void QueryDuplicates2()  \n    {  \n        // Change the root drive or folder if necessary.  \n        string startFolder = @\"c:\\program files\\Microsoft Visual Studio 9.0\\Common7\";  \n  \n        // Make the the lines shorter for the console display  \n        int charsToSkip = startFolder.Length;  \n  \n        // Take a snapshot of the file system.  \n        System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(startFolder);  \n        IEnumerable<System.IO.FileInfo> fileList = dir.GetFiles(\"*.*\", System.IO.SearchOption.AllDirectories);  \n  \n        // Note the use of a compound key. Files that match  \n        // all three properties belong to the same group.  \n        // A named type is used to enable the query to be  \n        // passed to another method. Anonymous types can also be used  \n        // for composite keys but cannot be passed across method boundaries  \n        //   \n        var queryDupFiles =  \n            from file in fileList  \n            group file.FullName.Substring(charsToSkip) by  \n                new PortableKey { Name = file.Name, CreationTime = file.CreationTime, Length = file.Length } into fileGroup  \n            where fileGroup.Count() > 1  \n            select fileGroup;  \n  \n        var list = queryDupFiles.ToList();  \n  \n        int i = queryDupFiles.Count();  \n  \n        PageOutput<PortableKey, string>(queryDupFiles);  \n    }  \n  \n    // A generic method to page the output of the QueryDuplications methods  \n    // Here the type of the group must be specified explicitly. \"var\" cannot  \n    // be used in method signatures. This method does not display more than one  \n    // group per page.  \n    private static void PageOutput<K, V>(IEnumerable<System.Linq.IGrouping<K, V>> groupByExtList)  \n    {  \n        // Flag to break out of paging loop.  \n        bool goAgain = true;  \n  \n        // \"3\" = 1 line for extension + 1 for \"Press any key\" + 1 for input cursor.  \n        int numLines = Console.WindowHeight - 3;  \n  \n        // Iterate through the outer collection of groups.  \n        foreach (var filegroup in groupByExtList)  \n        {  \n            // Start a new extension at the top of a page.  \n            int currentLine = 0;  \n  \n            // Output only as many lines of the current group as will fit in the window.  \n            do  \n            {  \n                Console.Clear();  \n                Console.WriteLine(\"Filename = {0}\", filegroup.Key.ToString() == String.Empty ? \"[none]\" : filegroup.Key.ToString());  \n  \n                // Get 'numLines' number of items starting at number 'currentLine'.  \n                var resultPage = filegroup.Skip(currentLine).Take(numLines);  \n  \n                //Execute the resultPage query  \n                foreach (var fileName in resultPage)  \n                {  \n                    Console.WriteLine(\"\\t{0}\", fileName);  \n                }  \n  \n                // Increment the line counter.  \n                currentLine += numLines;  \n  \n                // Give the user a chance to escape.  \n                Console.WriteLine(\"Press any key to continue or the 'End' key to break...\");  \n                ConsoleKey key = Console.ReadKey().Key;  \n                if (key == ConsoleKey.End)  \n                {  \n                    goAgain = false;  \n                    break;  \n                }  \n            } while (currentLine < filegroup.Count());  \n  \n            if (goAgain == false)  \n                break;  \n        }  \n    }  \n}  \n```  \n  \n The first query uses a simple key to determine a match; this finds files that have the same name but whose contents might be different. The second query uses a compound key to match against three properties of the <xref:System.IO.FileInfo> object. This query is much more likely to find files that have the same name and similar or identical content.  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces.  \n  \n## See Also  \n [LINQ to Objects (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)   \n [LINQ and File Directories (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)","nodes":[{"pos":[4,446],"nodes":[{"content":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#) | Microsoft Docs","nodes":[{"pos":[0,82],"content":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#) | Microsoft Docs","nodes":[{"content":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#) | Microsoft Docs","pos":[0,82]}]}],"pos":[6,91],"yaml":true}],"content":"title: \"How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 1ff5562b-0d30-46d1-b426-a04e8f78c840\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[453,518],"content":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#)","linkify":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#)","nodes":[{"content":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#)","pos":[0,65]}]},{"content":"Sometimes files that have the same name may be located in more than one folder.","pos":[519,598]},{"content":"For example, under the Visual Studio installation folder, several folders have a readme.htm file.","pos":[599,696]},{"content":"This example shows how to query for such duplicate file names under a specified root folder.","pos":[697,789]},{"content":"The second example shows how to query for files whose size and creation times also match.","pos":[790,879]},{"pos":[888,895],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The first query uses a simple key to determine a match; this finds files that have the same name but whose contents might be different.","pos":[6932,7067]},{"content":"The second query uses a compound key to match against three properties of the <ph id=\"ph1\">&lt;xref:System.IO.FileInfo&gt;</ph> object.","pos":[7068,7179],"source":" The second query uses a compound key to match against three properties of the <xref:System.IO.FileInfo> object."},{"content":"This query is much more likely to find files that have the same name and similar or identical content.","pos":[7180,7282]},{"pos":[7291,7309],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[7313,7490],"content":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <ph id=\"ph1\">`using`</ph> directives for the System.Linq and System.IO namespaces.","source":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces."},{"pos":[7499,7507],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept><ph id=\"ph1\"> </ph>","pos":[7511,7605],"source":"[LINQ to Objects (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md) "},{"content":"<bpt id=\"p1\">[</bpt>LINQ and File Directories (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)</ept>","pos":[7609,7722],"source":"[LINQ and File Directories (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)"}]}