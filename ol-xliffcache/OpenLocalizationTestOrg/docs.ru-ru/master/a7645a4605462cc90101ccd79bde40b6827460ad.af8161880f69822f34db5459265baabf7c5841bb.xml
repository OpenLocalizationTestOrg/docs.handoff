{"content":"---\ntitle: \"== Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"==_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"== operator [C#]\"\n  - \"equality operator [C#]\"\nms.assetid: 34c6b597-caa2-4855-a7cd-38ecdd11bd07\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# == Operator (C# Reference)\nFor predefined value types, the equality operator (`==`) returns true if the values of its operands are equal, `false` otherwise. For reference types other than [string](../../../csharp/language-reference/keywords/string.md), `==` returns `true` if its two operands refer to the same object. For the `string` type, `==` compares the values of the strings.  \n  \n## Remarks  \n User-defined value types can overload the `==` operator (see [operator](../../../csharp/language-reference/keywords/operator.md)). So can user-defined reference types, although by default `==` behaves as described above for both predefined and user-defined reference types. If `==` is overloaded, [!=](../../../csharp/language-reference/operators/not-equal-operator.md) must also be overloaded. Operations on integral types are generally allowed on enumeration.  \n  \n## Example  \n [!code-cs[csRefOperators#36](../../../csharp/language-reference/operators/codesnippet/CSharp/equality-comparison-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[12,55],"content":"== Operator (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"== Operator (C# Reference) | Microsoft Docs","pos":[0,43]}]},{"pos":[589,615],"content":"== Operator (C# Reference)","linkify":"== Operator (C# Reference)","nodes":[{"content":"== Operator (C# Reference)","pos":[0,26]}]},{"content":"For predefined value types, the equality operator (<ph id=\"ph1\">`==`</ph>) returns true if the values of its operands are equal, <ph id=\"ph2\">`false`</ph> otherwise.","pos":[616,745],"source":"For predefined value types, the equality operator (`==`) returns true if the values of its operands are equal, `false` otherwise."},{"content":"For reference types other than <bpt id=\"p1\">[</bpt>string<ept id=\"p1\">](../../../csharp/language-reference/keywords/string.md)</ept>, <ph id=\"ph1\">`==`</ph> returns <ph id=\"ph2\">`true`</ph> if its two operands refer to the same object.","pos":[746,907],"source":" For reference types other than [string](../../../csharp/language-reference/keywords/string.md), `==` returns `true` if its two operands refer to the same object."},{"content":"For the <ph id=\"ph1\">`string`</ph> type, <ph id=\"ph2\">`==`</ph> compares the values of the strings.","pos":[908,971],"source":" For the `string` type, `==` compares the values of the strings."},{"pos":[980,987],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"User-defined value types can overload the <ph id=\"ph1\">`==`</ph> operator (see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","pos":[991,1121],"source":"User-defined value types can overload the `==` operator (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"content":"So can user-defined reference types, although by default <ph id=\"ph1\">`==`</ph> behaves as described above for both predefined and user-defined reference types.","pos":[1122,1264],"source":" So can user-defined reference types, although by default `==` behaves as described above for both predefined and user-defined reference types."},{"content":"If <ph id=\"ph1\">`==`</ph> is overloaded, <bpt id=\"p1\">[</bpt>!=<ept id=\"p1\">](../../../csharp/language-reference/operators/not-equal-operator.md)</ept> must also be overloaded.","pos":[1265,1385],"source":" If `==` is overloaded, [!=](../../../csharp/language-reference/operators/not-equal-operator.md) must also be overloaded."},{"content":"Operations on integral types are generally allowed on enumeration.","pos":[1386,1452]},{"pos":[1461,1468],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1472,1600],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#36<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/equality-comparison-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#36](../../../csharp/language-reference/operators/codesnippet/CSharp/equality-comparison-operator_1.cs)]"},{"pos":[1609,1617],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1621,1681],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1684,1752],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1755,1825],"source":" [C# Operators](../../../csharp/language-reference/operators/index.md)"}]}