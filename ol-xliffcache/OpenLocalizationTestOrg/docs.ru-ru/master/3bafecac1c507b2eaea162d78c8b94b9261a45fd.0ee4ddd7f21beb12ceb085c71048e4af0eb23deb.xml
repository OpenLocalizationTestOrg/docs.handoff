{"content":"---\ntitle: \"Type List (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"StructureConstraint\"\n  - \"vb.StructureConstraint\"\n  - \"ClassConstraint\"\n  - \"vb.ClassConstraint\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"class constraint\"\n  - \"constraints, Visual Basic generic types\"\n  - \"generic parameters\"\n  - \"generics [Visual Basic], constraints\"\n  - \"generics [Visual Basic], type list\"\n  - \"structure constraint\"\n  - \"constraints, in type parameters\"\n  - \"generics [Visual Basic], generic types\"\n  - \"parameters, type\"\n  - \"constraints, Structure keyword\"\n  - \"type parameters, constraints\"\n  - \"types [Visual Basic], generic\"\n  - \"parameters, generic\"\n  - \"generics [Visual Basic], type parameters\"\n  - \"type parameters\"\n  - \"constraints, Class keyword\"\nms.assetid: 56db947a-2ae8-40f2-a70a-960764e9d0db\ncaps.latest.revision: 33\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Type List (Visual Basic)\nSpecifies the *type parameters* for a *generic* programming element. Multiple parameters are separated by commas. Following is the syntax for one type parameter.  \n  \n## Syntax  \n  \n```  \n  \n[genericmodifier] typename [ As constraintlist ]  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`genericmodifier`|Optional. Can be used only in generic interfaces and delegates. You can declare a type covariant by using the [Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md) keyword or contravariant by using the [In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md) keyword. See [Covariance and Contravariance](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8).|  \n|`typename`|Required. Name of the type parameter. This is a placeholder, to be replaced by a defined type supplied by the corresponding type argument.|  \n|`constraintlist`|Optional. List of requirements that constrain the data type that can be supplied for `typename`. If you have multiple constraints, enclose them in curly braces (`{ }`) and separate them with commas. You must introduce the constraint list with the [As](../../../visual-basic/language-reference/statements/as-clause.md) keyword. You use `As` only once, at the beginning of the list.|  \n  \n## Remarks  \n Every generic programming element must take at least one type parameter. A type parameter is a placeholder for a specific type (a *constructed element*) that client code specifies when it creates an instance of the generic type. You can define a generic class, structure, interface, procedure, or delegate.  \n  \n For more information on when to define a generic type, see [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md). For more information on type parameter names, see [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md).  \n  \n## Rules  \n  \n-   **Parentheses.** If you supply a type parameter list, you must enclose it in parentheses, and you must introduce the list with the [Of](../../../visual-basic/language-reference/statements/of-clause.md) keyword. You use `Of` only once, at the beginning of the list.  \n  \n-   **Constraints.** A list of *constraints* on a type parameter can include the following items in any combination:  \n  \n    -   Any number of interfaces. The supplied type must implement every interface in this list.  \n  \n    -   At most one class. The supplied type must inherit from that class.  \n  \n    -   The `New` keyword. The supplied type must expose a parameterless constructor that your generic type can access. This is useful if you constrain a type parameter by one or more interfaces. A type that implements interfaces does not necessarily expose a constructor, and depending on the access level of a constructor, the code within the generic type might not be able to access it.  \n  \n    -   Either the `Class` keyword or the `Structure` keyword. The `Class` keyword constrains a generic type parameter to require that any type argument passed to it be a reference type, for example a string, array, or delegate, or an object created from a class. The `Structure` keyword constrains a generic type parameter to require that any type argument passed to it be a value type, for example a structure, enumeration, or elementary data type. You cannot include both `Class` and `Structure` in the same `constraintlist`.  \n  \n     The supplied type must satisfy every requirement you include in `constraintlist`.  \n  \n     Constraints on each type parameter are independent of constraints on other type parameters.  \n  \n## Behavior  \n  \n-   **Compile-Time Substitution.** When you create a constructed type from a generic programming element, you supply a defined type for each type parameter. The Visual Basic compiler substitutes that supplied type for every occurrence of `typename` within the generic element.  \n  \n-   **Absence of Constraints.** If you do not specify any constraints on a type parameter, your code is limited to the operations and members supported by the [Object Data Type](../../../visual-basic/language-reference/data-types/object-data-type.md) for that type parameter.  \n  \n## Example  \n The following example shows a skeleton definition of a generic dictionary class, including a skeleton function to add a new entry to the dictionary.  \n  \n [!code-vb[VbVbalrStatements#3](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/type-list_1.vb)]  \n  \n## Example  \n Because `dictionary` is generic, the code that uses it can create a variety of objects from it, each having the same functionality but acting on a different data type. The following example shows a line of code that creates a `dictionary` object with `String` entries and `Integer` keys.  \n  \n [!code-vb[VbVbalrStatements#4](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/type-list_2.vb)]  \n  \n## Example  \n The following example shows the equivalent skeleton definition generated by the preceding example.  \n  \n [!code-vb[VbVbalrStatements#5](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/type-list_3.vb)]  \n  \n## See Also  \n [Of](../../../visual-basic/language-reference/statements/of-clause.md)   \n [New Operator](../../../visual-basic/language-reference/operators/new-operator.md)   \n [Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)   \n [Object Data Type](../../../visual-basic/language-reference/data-types/object-data-type.md)   \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)   \n [Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md)   \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)   \n [How to: Use a Generic Class](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)   \n [Covariance and Contravariance](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8)   \n [In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)   \n [Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)\n","nodes":[{"pos":[4,1191],"embed":true,"restype":"x-metadata","content":"title: \"Type List (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"StructureConstraint\"\n  - \"vb.StructureConstraint\"\n  - \"ClassConstraint\"\n  - \"vb.ClassConstraint\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"class constraint\"\n  - \"constraints, Visual Basic generic types\"\n  - \"generic parameters\"\n  - \"generics [Visual Basic], constraints\"\n  - \"generics [Visual Basic], type list\"\n  - \"structure constraint\"\n  - \"constraints, in type parameters\"\n  - \"generics [Visual Basic], generic types\"\n  - \"parameters, type\"\n  - \"constraints, Structure keyword\"\n  - \"type parameters, constraints\"\n  - \"types [Visual Basic], generic\"\n  - \"parameters, generic\"\n  - \"generics [Visual Basic], type parameters\"\n  - \"type parameters\"\n  - \"constraints, Class keyword\"\nms.assetid: 56db947a-2ae8-40f2-a70a-960764e9d0db\ncaps.latest.revision: 33\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Type List (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,41],"content":"Type List (Visual Basic) | Microsoft Docs","nodes":[{"content":"Type List (Visual Basic) | Microsoft Docs","pos":[0,41]}]}],"path":["title"]}],"yml":true},{"pos":[1198,1222],"content":"Type List (Visual Basic)","linkify":"Type List (Visual Basic)","nodes":[{"content":"Type List (Visual Basic)","pos":[0,24]}]},{"content":"Specifies the <bpt id=\"p1\">*</bpt>type parameters<ept id=\"p1\">*</ept> for a <bpt id=\"p2\">*</bpt>generic<ept id=\"p2\">*</ept> programming element.","pos":[1223,1291],"source":"Specifies the *type parameters* for a *generic* programming element."},{"content":"Multiple parameters are separated by commas.","pos":[1292,1336]},{"content":"Following is the syntax for one type parameter.","pos":[1337,1384]},{"pos":[1393,1399],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1477,1482],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[1489,1493]},{"content":"Definition","pos":[1494,1504]},{"content":"Optional.","pos":[1539,1548]},{"content":"Can be used only in generic interfaces and delegates.","pos":[1549,1602]},{"content":"You can declare a type covariant by using the <bpt id=\"p1\">[</bpt>Out<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept> keyword or contravariant by using the <bpt id=\"p2\">[</bpt>In<ept id=\"p2\">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept> keyword.","pos":[1603,1857],"source":" You can declare a type covariant by using the [Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md) keyword or contravariant by using the [In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md) keyword."},{"content":"See <bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8)</ept>.","pos":[1858,1966],"source":" See [Covariance and Contravariance](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8)."},{"content":"Required.","pos":[1982,1991]},{"content":"Name of the type parameter.","pos":[1992,2019]},{"content":"This is a placeholder, to be replaced by a defined type supplied by the corresponding type argument.","pos":[2020,2120]},{"content":"Optional.","pos":[2142,2151]},{"content":"List of requirements that constrain the data type that can be supplied for <ph id=\"ph1\">`typename`</ph>.","pos":[2152,2238],"source":" List of requirements that constrain the data type that can be supplied for `typename`."},{"content":"If you have multiple constraints, enclose them in curly braces (<ph id=\"ph1\">`{ }`</ph>) and separate them with commas.","pos":[2239,2340],"source":" If you have multiple constraints, enclose them in curly braces (`{ }`) and separate them with commas."},{"content":"You must introduce the constraint list with the <bpt id=\"p1\">[</bpt>As<ept id=\"p1\">](../../../visual-basic/language-reference/statements/as-clause.md)</ept> keyword.","pos":[2341,2468],"source":" You must introduce the constraint list with the [As](../../../visual-basic/language-reference/statements/as-clause.md) keyword."},{"content":"You use <ph id=\"ph1\">`As`</ph> only once, at the beginning of the list.","pos":[2469,2522],"source":" You use `As` only once, at the beginning of the list."},{"pos":[2532,2539],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Every generic programming element must take at least one type parameter.","pos":[2543,2615]},{"content":"A type parameter is a placeholder for a specific type (a <bpt id=\"p1\">*</bpt>constructed element<ept id=\"p1\">*</ept>) that client code specifies when it creates an instance of the generic type.","pos":[2616,2771],"source":" A type parameter is a placeholder for a specific type (a *constructed element*) that client code specifies when it creates an instance of the generic type."},{"content":"You can define a generic class, structure, interface, procedure, or delegate.","pos":[2772,2849]},{"content":"For more information on when to define a generic type, see <bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>.","pos":[2856,3034],"source":"For more information on when to define a generic type, see [Generic Types in Visual Basic](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)."},{"content":"For more information on type parameter names, see <bpt id=\"p1\">[</bpt>Declared Element Names<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.","pos":[3035,3213],"source":" For more information on type parameter names, see [Declared Element Names](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)."},{"pos":[3222,3227],"content":"Rules","linkify":"Rules","nodes":[{"content":"Rules","pos":[0,5]}]},{"content":"<bpt id=\"p1\">**</bpt>Parentheses.<ept id=\"p1\">**</ept>","pos":[3237,3253],"source":"**Parentheses.**"},{"content":"If you supply a type parameter list, you must enclose it in parentheses, and you must introduce the list with the <bpt id=\"p1\">[</bpt>Of<ept id=\"p1\">](../../../visual-basic/language-reference/statements/of-clause.md)</ept> keyword.","pos":[3254,3447],"source":" If you supply a type parameter list, you must enclose it in parentheses, and you must introduce the list with the [Of](../../../visual-basic/language-reference/statements/of-clause.md) keyword."},{"content":"You use <ph id=\"ph1\">`Of`</ph> only once, at the beginning of the list.","pos":[3448,3501],"source":" You use `Of` only once, at the beginning of the list."},{"content":"<bpt id=\"p1\">**</bpt>Constraints.<ept id=\"p1\">**</ept>","pos":[3511,3527],"source":"**Constraints.**"},{"content":"A list of <bpt id=\"p1\">*</bpt>constraints<ept id=\"p1\">*</ept> on a type parameter can include the following items in any combination:","pos":[3528,3623],"source":" A list of *constraints* on a type parameter can include the following items in any combination:"},{"content":"Any number of interfaces.","pos":[3637,3662]},{"content":"The supplied type must implement every interface in this list.","pos":[3663,3725]},{"content":"At most one class.","pos":[3739,3757]},{"content":"The supplied type must inherit from that class.","pos":[3758,3805]},{"content":"The <ph id=\"ph1\">`New`</ph> keyword.","pos":[3819,3837],"source":"The `New` keyword."},{"content":"The supplied type must expose a parameterless constructor that your generic type can access.","pos":[3838,3930]},{"content":"This is useful if you constrain a type parameter by one or more interfaces.","pos":[3931,4006]},{"content":"A type that implements interfaces does not necessarily expose a constructor, and depending on the access level of a constructor, the code within the generic type might not be able to access it.","pos":[4007,4200]},{"content":"Either the <ph id=\"ph1\">`Class`</ph> keyword or the <ph id=\"ph2\">`Structure`</ph> keyword.","pos":[4214,4268],"source":"Either the `Class` keyword or the `Structure` keyword."},{"content":"The <ph id=\"ph1\">`Class`</ph> keyword constrains a generic type parameter to require that any type argument passed to it be a reference type, for example a string, array, or delegate, or an object created from a class.","pos":[4269,4469],"source":" The `Class` keyword constrains a generic type parameter to require that any type argument passed to it be a reference type, for example a string, array, or delegate, or an object created from a class."},{"content":"The <ph id=\"ph1\">`Structure`</ph> keyword constrains a generic type parameter to require that any type argument passed to it be a value type, for example a structure, enumeration, or elementary data type.","pos":[4470,4656],"source":" The `Structure` keyword constrains a generic type parameter to require that any type argument passed to it be a value type, for example a structure, enumeration, or elementary data type."},{"content":"You cannot include both <ph id=\"ph1\">`Class`</ph> and <ph id=\"ph2\">`Structure`</ph> in the same <ph id=\"ph3\">`constraintlist`</ph>.","pos":[4657,4734],"source":" You cannot include both `Class` and `Structure` in the same `constraintlist`."},{"pos":[4745,4826],"content":"The supplied type must satisfy every requirement you include in <ph id=\"ph1\">`constraintlist`</ph>.","source":"The supplied type must satisfy every requirement you include in `constraintlist`."},{"content":"Constraints on each type parameter are independent of constraints on other type parameters.","pos":[4837,4928]},{"pos":[4937,4945],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"content":"<bpt id=\"p1\">**</bpt>Compile-Time Substitution.<ept id=\"p1\">**</ept>","pos":[4955,4985],"source":"**Compile-Time Substitution.**"},{"content":"When you create a constructed type from a generic programming element, you supply a defined type for each type parameter.","pos":[4986,5107]},{"content":"The Visual Basic compiler substitutes that supplied type for every occurrence of <ph id=\"ph1\">`typename`</ph> within the generic element.","pos":[5108,5227],"source":" The Visual Basic compiler substitutes that supplied type for every occurrence of `typename` within the generic element."},{"content":"<bpt id=\"p1\">**</bpt>Absence of Constraints.<ept id=\"p1\">**</ept>","pos":[5237,5264],"source":"**Absence of Constraints.**"},{"content":"If you do not specify any constraints on a type parameter, your code is limited to the operations and members supported by the <bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/object-data-type.md)</ept> for that type parameter.","pos":[5265,5508],"source":" If you do not specify any constraints on a type parameter, your code is limited to the operations and members supported by the [Object Data Type](../../../visual-basic/language-reference/data-types/object-data-type.md) for that type parameter."},{"pos":[5517,5524],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows a skeleton definition of a generic dictionary class, including a skeleton function to add a new entry to the dictionary.","pos":[5528,5676]},{"pos":[5819,5826],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Because <ph id=\"ph1\">`dictionary`</ph> is generic, the code that uses it can create a variety of objects from it, each having the same functionality but acting on a different data type.","pos":[5830,5997],"source":"Because `dictionary` is generic, the code that uses it can create a variety of objects from it, each having the same functionality but acting on a different data type."},{"content":"The following example shows a line of code that creates a <ph id=\"ph1\">`dictionary`</ph> object with <ph id=\"ph2\">`String`</ph> entries and <ph id=\"ph3\">`Integer`</ph> keys.","pos":[5998,6117],"source":" The following example shows a line of code that creates a `dictionary` object with `String` entries and `Integer` keys."},{"pos":[6260,6267],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the equivalent skeleton definition generated by the preceding example.","pos":[6271,6369]},{"pos":[6512,6520],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Of<ept id=\"p1\">](../../../visual-basic/language-reference/statements/of-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[6524,6595],"source":"[Of](../../../visual-basic/language-reference/statements/of-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/new-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[6599,6682],"source":"[New Operator](../../../visual-basic/language-reference/operators/new-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Access Levels in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept><ph id=\"ph1\"> </ph>","pos":[6686,6812],"source":"[Access Levels in Visual Basic](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md) "},{"content":"<bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/object-data-type.md)</ept><ph id=\"ph1\"> </ph>","pos":[6816,6908],"source":"[Object Data Type](../../../visual-basic/language-reference/data-types/object-data-type.md) "},{"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[6912,7008],"source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Structure Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[7012,7110],"source":"[Structure Statement](../../../visual-basic/language-reference/statements/structure-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[7114,7200],"source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Use a Generic Class<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[7204,7334],"source":"[How to: Use a Generic Class](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md) "},{"content":"<bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8)</ept><ph id=\"ph1\"> </ph>","pos":[7338,7442],"source":"[Covariance and Contravariance](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8) "},{"content":"<bpt id=\"p1\">[</bpt>In<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept><ph id=\"ph1\"> </ph>","pos":[7446,7526],"source":"[In](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md) "},{"content":"<bpt id=\"p1\">[</bpt>Out<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept>","pos":[7530,7611],"source":"[Out](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)"}]}