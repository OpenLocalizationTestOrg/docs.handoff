{"content":"---\ntitle: \"Refactoring Using a Pure Function (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: af0ea62f-4f57-4868-b624-a85524055935\n---\n# Refactoring Using a Pure Function (Visual Basic)\nThe following example refactors the previous example, [Refactoring Using an Extension Method (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md), to use a pure function In this example, the code to find the text of a paragraph is moved to the pure static method `ParagraphText`.  \n  \n## Example  \n This example processes a WordprocessingML document, retrieving the paragraph nodes from a WordprocessingML document. It also identifies the style of each paragraph. This example builds on the previous examples in this tutorial. The refactored code is called out in comments in the code below.  \n  \n For instructions for creating the source document for this example, see [Creating the Source Office Open XML Document (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md).  \n  \n This example uses classes from the WindowsBase assembly. It uses types in the <xref:System.IO.Packaging?displayProperty=nameWithType> namespace.  \n  \n```vb  \nImports <xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\">  \nModule Module1  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(ByVal source As IEnumerable(Of String)) As String  \n        Dim sb = New StringBuilder()  \n        For Each s In source  \n            sb.Append(s)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String)) As String  \n        Dim sb = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item))  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal separator As String) As String  \n        Dim sb = New StringBuilder()  \n        For Each s As T In source  \n            sb.Append(s).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    <System.Runtime.CompilerServices.Extension()> _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String), ByVal separator As String) As String  \n        Dim sb = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item)).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n  \n    ' This is a new method that assembles the paragraph text.  \n    Public Function ParagraphText(ByVal e As XElement) As String  \n        Dim w = e.Name.Namespace  \n        Return (e.<w:r>.<w:t>).StringConcatenate(Function(element) CStr(element))  \n    End Function  \n  \n    ' Following function is required because VB does not support short circuit evaluation  \n    Private Function GetStyleOfParagraph(ByVal styleNode As XElement, _  \n                                         ByVal defaultStyle As String) As String  \n        If styleNode Is Nothing Then  \n            Return defaultStyle  \n        Else  \n            Return styleNode.@w:val  \n        End If  \n    End Function  \n  \n    Sub Main()  \n        Dim fileName = \"SampleDoc.docx\"  \n  \n        Dim documentRelationshipType = _  \n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"  \n        Dim stylesRelationshipType = _  \n          \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\"  \n        Dim wordmlNamespace = _  \n          \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"  \n        Dim xDoc As XDocument = Nothing  \n        Dim styleDoc As XDocument = Nothing  \n  \n        Using wdPackage As Package = Package.Open(fileName, FileMode.Open, FileAccess.Read)  \n            Dim docPackageRelationship As PackageRelationship = _  \n              wdPackage.GetRelationshipsByType(documentRelationshipType).FirstOrDefault()  \n            If (docPackageRelationship IsNot Nothing) Then  \n                Dim documentUri As Uri = PackUriHelper.ResolvePartUri(New Uri(\"/\", UriKind.Relative), _  \n                  docPackageRelationship.TargetUri)  \n                Dim documentPart As PackagePart = wdPackage.GetPart(documentUri)  \n  \n                '  Load the document XML in the part into an XDocument instance.  \n                xDoc = XDocument.Load(XmlReader.Create(documentPart.GetStream()))  \n  \n                '  Find the styles part. There will only be one.  \n                Dim styleRelation As PackageRelationship = _  \n                  documentPart.GetRelationshipsByType(stylesRelationshipType).FirstOrDefault()  \n                If styleRelation IsNot Nothing Then  \n                    Dim styleUri As Uri = _  \n                      PackUriHelper.ResolvePartUri(documentUri, styleRelation.TargetUri)  \n                    Dim stylePart As PackagePart = wdPackage.GetPart(styleUri)  \n  \n                    '  Load the style XML in the part into an XDocument instance.  \n                    styleDoc = XDocument.Load(XmlReader.Create(stylePart.GetStream()))  \n                End If  \n            End If  \n        End Using  \n  \n        Dim defaultStyle = _  \n            ( _  \n                From style In styleDoc.Root.<w:style> _  \n                Where style.@w:type = \"paragraph\" And _  \n                      style.@w:default = \"1\" _  \n                Select style _  \n            ).First().@w:styleId  \n  \n        ' Find all paragraphs in the document.  \n        Dim paragraphs = _  \n            From para In xDoc.Root.<w:body>...<w:p> _  \n        Let styleNode = para.<w:pPr>.<w:pStyle>.FirstOrDefault _  \n        Select New With { _  \n            .ParagraphNode = para, _  \n            .StyleName = GetStyleOfParagraph(styleNode, defaultStyle) _  \n        }  \n  \n        ' Retrieve the text of each paragraph.  \n        Dim paraWithText = _  \n            From para In paragraphs _  \n            Select New With { _  \n                .ParagraphNode = para.ParagraphNode, _  \n                .StyleName = para.StyleName, _  \n                .Text = ParagraphText(para.ParagraphNode) _  \n            }  \n  \n        For Each p In paraWithText  \n            Console.WriteLine(\"StyleName:{0} >{1}<\", p.StyleName, p.Text)  \n        Next  \n    End Sub  \nEnd Module   \n```  \n  \n This example produces the same output as before the refactoring:  \n  \n```  \nStyleName:Heading1 >Parsing WordprocessingML with LINQ to XML<  \nStyleName:Normal ><  \nStyleName:Normal >The following example prints to the console.<  \nStyleName:Normal ><  \nStyleName:Code >Imports System<  \nStyleName:Code ><  \nStyleName:Code >Class Program<  \nStyleName:Code >    Public Shared  Sub Main(ByVal args() As String)<  \nStyleName:Code >        Console.WriteLine(\"Hello World\")<  \nStyleName:Code >   End Sub<  \nStyleName:Code >End Class<  \nStyleName:Normal ><  \nStyleName:Normal >This example produces the following output:<  \nStyleName:Normal ><  \nStyleName:Code >Hello World<  \n```  \n  \n### Next Steps  \n The next example shows how to project XML into a different shape:  \n  \n-   [Projecting XML in a Different Shape (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projecting-xml-in-a-different-shape.md)  \n  \n## See also\n\n- [Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)\n- [Refactoring Using an Extension Method (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md)\n- [Refactoring Into Pure Functions (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/refactoring-into-pure-functions.md)\n","nodes":[{"pos":[4,130],"embed":true,"restype":"x-metadata","content":"title: \"Refactoring Using a Pure Function (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: af0ea62f-4f57-4868-b624-a85524055935","nodes":[{"content":"Refactoring Using a Pure Function (Visual Basic)","nodes":[{"pos":[0,48],"content":"Refactoring Using a Pure Function (Visual Basic)","nodes":[{"content":"Refactoring Using a Pure Function (Visual Basic)","pos":[0,48]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[137,185],"content":"Refactoring Using a Pure Function (Visual Basic)","linkify":"Refactoring Using a Pure Function (Visual Basic)","nodes":[{"content":"Refactoring Using a Pure Function (Visual Basic)","pos":[0,48]}]},{"pos":[186,527],"content":"The following example refactors the previous example, <bpt id=\"p1\">[</bpt>Refactoring Using an Extension Method (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md)</ept>, to use a pure function In this example, the code to find the text of a paragraph is moved to the pure static method <ph id=\"ph1\">`ParagraphText`</ph>.","source":"The following example refactors the previous example, [Refactoring Using an Extension Method (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md), to use a pure function In this example, the code to find the text of a paragraph is moved to the pure static method `ParagraphText`."},{"pos":[536,543],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example processes a WordprocessingML document, retrieving the paragraph nodes from a WordprocessingML document.","pos":[547,663]},{"content":"It also identifies the style of each paragraph.","pos":[664,711]},{"content":"This example builds on the previous examples in this tutorial.","pos":[712,774]},{"content":"The refactored code is called out in comments in the code below.","pos":[775,839]},{"pos":[846,1086],"content":"For instructions for creating the source document for this example, see <bpt id=\"p1\">[</bpt>Creating the Source Office Open XML Document (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)</ept>.","source":"For instructions for creating the source document for this example, see [Creating the Source Office Open XML Document (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-the-source-office-open-xml-document.md)."},{"content":"This example uses classes from the WindowsBase assembly.","pos":[1093,1149]},{"content":"It uses types in the <ph id=\"ph1\">&lt;xref:System.IO.Packaging?displayProperty=nameWithType&gt;</ph> namespace.","pos":[1150,1237],"source":" It uses types in the <xref:System.IO.Packaging?displayProperty=nameWithType> namespace."},{"content":"This example produces the same output as before the refactoring:","pos":[6655,6719]},{"pos":[7336,7346],"content":"Next Steps","linkify":"Next Steps","nodes":[{"content":"Next Steps","pos":[0,10]}]},{"content":"The next example shows how to project XML into a different shape:","pos":[7350,7415]},{"pos":[7425,7574],"content":"<bpt id=\"p1\">[</bpt>Projecting XML in a Different Shape (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/projecting-xml-in-a-different-shape.md)</ept>","source":"[Projecting XML in a Different Shape (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projecting-xml-in-a-different-shape.md)"},{"pos":[7583,7591],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7595,7795],"content":"<bpt id=\"p1\">[</bpt>Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)</ept>","source":"[Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/tutorial-manipulating-content-in-a-wordprocessingml-document.md)"},{"pos":[7798,7951],"content":"<bpt id=\"p1\">[</bpt>Refactoring Using an Extension Method (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md)</ept>","source":"[Refactoring Using an Extension Method (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md)"},{"pos":[7954,8095],"content":"<bpt id=\"p1\">[</bpt>Refactoring Into Pure Functions (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/refactoring-into-pure-functions.md)</ept>","source":"[Refactoring Into Pure Functions (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/refactoring-into-pure-functions.md)"}]}