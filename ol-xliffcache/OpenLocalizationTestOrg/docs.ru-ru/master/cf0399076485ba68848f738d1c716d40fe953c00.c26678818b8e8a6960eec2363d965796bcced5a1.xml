{"content":"---\ntitle: \"&gt;= Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \">=_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"greater than or equal to operator (>=) [C#]\"\n  - \">= operator [C#]\"\nms.assetid: 0db4dcaf-56a3-4884-a7ad-35f64978a58d\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &gt;= Operator (C# Reference)\nAll numeric and enumeration types define a \"greater than or equal\" relational operator, `>=` that returns `true` if the first operand is greater than or equal to the second, `false` otherwise.  \n  \n## Remarks  \n User-defined types can overload the `>=` operator. For more information, see [operator](../../../csharp/language-reference/keywords/operator.md). If `>=` is overloaded, [<=](../../../csharp/language-reference/operators/less-than-equal-operator.md) must also be overloaded. Operations on integral types are generally allowed on enumeration.  \n  \n## Example  \n [!code-cs[csRefOperators#39](../../../csharp/language-reference/operators/codesnippet/CSharp/greater-than-equal-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[4,606],"embed":true,"restype":"x-metadata","content":"title: \"&gt;= Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \">=_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"greater than or equal to operator (>=) [C#]\"\n  - \">= operator [C#]\"\nms.assetid: 0db4dcaf-56a3-4884-a7ad-35f64978a58d\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"&gt;= Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"&gt;= Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;gt;</ph>= Operator (C# Reference) | Microsoft Docs","pos":[0,46],"source":"&gt;= Operator (C# Reference) | Microsoft Docs"}]}],"path":["title"]}],"yml":true},{"pos":[613,642],"content":"&gt;= Operator (C# Reference)","linkify":"&gt;= Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;gt;</ph>= Operator (C# Reference)","pos":[0,29],"source":"&gt;= Operator (C# Reference)"}]},{"pos":[643,835],"content":"All numeric and enumeration types define a \"greater than or equal\" relational operator, <ph id=\"ph1\">`&gt;=`</ph> that returns <ph id=\"ph2\">`true`</ph> if the first operand is greater than or equal to the second, <ph id=\"ph3\">`false`</ph> otherwise.","source":"All numeric and enumeration types define a \"greater than or equal\" relational operator, `>=` that returns `true` if the first operand is greater than or equal to the second, `false` otherwise."},{"pos":[844,851],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"User-defined types can overload the <ph id=\"ph1\">`&gt;=`</ph> operator.","pos":[855,905],"source":"User-defined types can overload the `>=` operator."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>.","pos":[906,1000],"source":" For more information, see [operator](../../../csharp/language-reference/keywords/operator.md)."},{"content":"If <ph id=\"ph1\">`&gt;=`</ph> is overloaded, <bpt id=\"p1\">[</bpt><ph id=\"ph2\">&lt;=</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/less-than-equal-operator.md)</ept> must also be overloaded.","pos":[1001,1127],"source":" If `>=` is overloaded, [<=](../../../csharp/language-reference/operators/less-than-equal-operator.md) must also be overloaded."},{"content":"Operations on integral types are generally allowed on enumeration.","pos":[1128,1194]},{"pos":[1203,1210],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1350,1358],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1362,1422],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1426,1493],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1497,1566],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"}]}