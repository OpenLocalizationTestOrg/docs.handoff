{"content":"---\ntitle: \"IsNot Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.isnot\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"IsNot operator\"\nms.assetid: 8dd2bcdb-0166-48a2-9094-60dfb448f36c\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IsNot Operator (Visual Basic)\nCompares two object reference variables.  \n  \n## Syntax  \n  \n```  \n  \nresult = object1 IsNot object2  \n```  \n  \n## Parts  \n `result`  \n Required. A `Boolean` value.  \n  \n `object1`  \n Required. Any `Object` variable or expression.  \n  \n `object2`  \n Required. Any `Object` variable or expression.  \n  \n## Remarks  \n The `IsNot` operator determines if two object references refer to different objects. However, it does not perform value comparisons. If `object1` and `object2` both refer to the exact same object instance, `result` is `False`; if they do not, `result` is `True`.  \n  \n `IsNot` is the opposite of the `Is` operator. The advantage of `IsNot` is that you can avoid awkward syntax with `Not` and `Is`, which can be difficult to read.  \n  \n You can use the `Is` and `IsNot` operators to test both early-bound and late-bound objects.  \n  \n> [!NOTE]\n>  The `IsNot` operator cannot be used to compare expressions returned from the `TypeOf` operator. Instead, you must use the `Not` and `Is` operators.  \n  \n## Example  \n The following code example uses both the `Is` operator and the `IsNot` operator to accomplish the same comparison.  \n  \n [!code-vb[VbVbalrOperators#29](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/isnot-operator_1.vb)]  \n  \n## See Also  \n [Is Operator](../../../visual-basic/language-reference/operators/is-operator.md)   \n [TypeOf Operator](../../../visual-basic/language-reference/operators/typeof-operator.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [How to: Test Whether Two Objects Are the Same](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-test-whether-two-objects-are-the-same.md)","nodes":[{"pos":[4,583],"nodes":[{"content":"IsNot Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,46],"content":"IsNot Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"IsNot Operator (Visual Basic) | Microsoft Docs","pos":[0,46]}]}],"pos":[6,55],"yaml":true}],"content":"title: \"IsNot Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.isnot\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"IsNot operator\"\nms.assetid: 8dd2bcdb-0166-48a2-9094-60dfb448f36c\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[590,619],"content":"IsNot Operator (Visual Basic)","linkify":"IsNot Operator (Visual Basic)","nodes":[{"content":"IsNot Operator (Visual Basic)","pos":[0,29]}]},{"content":"Compares two object reference variables.","pos":[620,660]},{"pos":[669,675],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[735,740],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[756,765]},{"content":"A <ph id=\"ph1\">`Boolean`</ph> value.","pos":[766,784],"source":" A `Boolean` value."},{"content":"Required.","pos":[804,813]},{"content":"Any <ph id=\"ph1\">`Object`</ph> variable or expression.","pos":[814,850],"source":" Any `Object` variable or expression."},{"content":"Required.","pos":[870,879]},{"content":"Any <ph id=\"ph1\">`Object`</ph> variable or expression.","pos":[880,916],"source":" Any `Object` variable or expression."},{"pos":[925,932],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`IsNot`</ph> operator determines if two object references refer to different objects.","pos":[936,1020],"source":"The `IsNot` operator determines if two object references refer to different objects."},{"content":"However, it does not perform value comparisons.","pos":[1021,1068]},{"content":"If <ph id=\"ph1\">`object1`</ph> and <ph id=\"ph2\">`object2`</ph> both refer to the exact same object instance, <ph id=\"ph3\">`result`</ph> is <ph id=\"ph4\">`False`</ph>; if they do not, <ph id=\"ph5\">`result`</ph> is <ph id=\"ph6\">`True`</ph>.","pos":[1069,1198],"source":" If `object1` and `object2` both refer to the exact same object instance, `result` is `False`; if they do not, `result` is `True`."},{"content":"<ph id=\"ph1\">`IsNot`</ph> is the opposite of the <ph id=\"ph2\">`Is`</ph> operator.","pos":[1205,1250],"source":"`IsNot` is the opposite of the `Is` operator."},{"content":"The advantage of <ph id=\"ph1\">`IsNot`</ph> is that you can avoid awkward syntax with <ph id=\"ph2\">`Not`</ph> and <ph id=\"ph3\">`Is`</ph>, which can be difficult to read.","pos":[1251,1365],"source":" The advantage of `IsNot` is that you can avoid awkward syntax with `Not` and `Is`, which can be difficult to read."},{"pos":[1372,1463],"content":"You can use the <ph id=\"ph1\">`Is`</ph> and <ph id=\"ph2\">`IsNot`</ph> operators to test both early-bound and late-bound objects.","source":"You can use the `Is` and `IsNot` operators to test both early-bound and late-bound objects."},{"pos":[1471,1629],"content":"[!NOTE]\n The `IsNot` operator cannot be used to compare expressions returned from the `TypeOf` operator. Instead, you must use the `Not` and `Is` operators.","leadings":["","> "],"nodes":[{"content":"The `IsNot` operator cannot be used to compare expressions returned from the `TypeOf` operator. Instead, you must use the `Not` and `Is` operators.","pos":[9,156],"nodes":[{"content":"The <ph id=\"ph1\">`IsNot`</ph> operator cannot be used to compare expressions returned from the <ph id=\"ph2\">`TypeOf`</ph> operator.","pos":[0,95],"source":"The `IsNot` operator cannot be used to compare expressions returned from the `TypeOf` operator."},{"content":"Instead, you must use the <ph id=\"ph1\">`Not`</ph> and <ph id=\"ph2\">`Is`</ph> operators.","pos":[96,147],"source":" Instead, you must use the `Not` and `Is` operators."}]}]},{"pos":[1638,1645],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1649,1763],"content":"The following code example uses both the <ph id=\"ph1\">`Is`</ph> operator and the <ph id=\"ph2\">`IsNot`</ph> operator to accomplish the same comparison.","source":"The following code example uses both the `Is` operator and the `IsNot` operator to accomplish the same comparison."},{"pos":[1770,1897],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#29<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/isnot-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#29](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/isnot-operator_1.vb)]"},{"pos":[1906,1914],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Is Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/is-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[1918,1999],"source":"[Is Operator](../../../visual-basic/language-reference/operators/is-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>TypeOf Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/typeof-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2003,2092],"source":"[TypeOf Operator](../../../visual-basic/language-reference/operators/typeof-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[2096,2209],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Test Whether Two Objects Are the Same<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-test-whether-two-objects-are-the-same.md)</ept>","pos":[2213,2393],"source":"[How to: Test Whether Two Objects Are the Same](../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-test-whether-two-objects-are-the-same.md)"}]}