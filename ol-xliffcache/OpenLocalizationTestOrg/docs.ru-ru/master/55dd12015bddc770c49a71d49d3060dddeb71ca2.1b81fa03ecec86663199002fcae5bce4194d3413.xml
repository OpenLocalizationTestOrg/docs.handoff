{"content":"---\ntitle: \"How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 1428df4d-b18f-4e6d-bd4d-79ab3dd5147c\ncaps.latest.revision: 17\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF\nThis topic outlines procedures to migrate a basic ASP.NET AJAX service to an equivalent AJAX-enabled [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service. It shows how to create a functionally equivalent [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] version of an ASP.NET AJAX service. The two services can then be used side by side, or the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service can be used to replace the ASP.NET AJAX service.  \n  \n Migrating an existing ASP.NET AJAX service to a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] AJAX service gives you the following benefits:  \n  \n-   You can expose your AJAX service as a SOAP service with minimal extra configuration.  \n  \n-   You can benefit from [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] features such as tracing, and so on.  \n  \n The following procedures assume that you are using [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)].  \n  \n The code that results from the procedures outlined in this topic is provided in the example following the procedures.  \n  \n [!INCLUDE[crabout](../../../../includes/crabout-md.md)] exposing a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service through an AJAX-enabled endpoint, see the [How to: Use Configuration to Add an ASP.NET AJAX Endpoint](../../../../docs/framework/wcf/feature-details/how-to-use-configuration-to-add-an-aspnet-ajax-endpoint.md) topic.  \n  \n### To create and test the ASP.NET Web service application  \n  \n1.  Open [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)].  \n  \n2.  From the **File** menu, select **New**, then **Project**, then **Web**, and then select **ASP.NET Web Service Application**.  \n  \n3.  Name the project `ASPHello` and click **OK**.  \n  \n4.  Uncomment the line in the Service1.asmx.cs file that contains `System.Web.Script.Services.ScriptService]` to enable AJAX for this service.  \n  \n5.  From the **Build** menu, select **Build Solution**.  \n  \n6.  From the **Debug** menu, select **Start Without Debugging**.  \n  \n7.  On the Web page generated, select the `HelloWorld` operation.  \n  \n8.  Click the **Invoke** button on the `HelloWorld` test page. You should receive the following XML response.  \n  \n    ```  \n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n    <string xmlns=\"http://tempuri.org/\">Hello World</string>  \n    ```  \n  \n9. This response confirms that you now have a functioning ASP.NET AJAX service and, in particular, that the service has now exposed an endpoint at Service1.asmx/HelloWorld that responds to HTTP POST requests and returns XML.  \n  \n     Now you are ready to convert this service to use a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] AJAX service.  \n  \n### To create an equivalent WCF AJAX service application  \n  \n1.  Right-click the **ASPHello** project and select **Add**, then **New Item**, and then **AJAX-enabled WCF Service**.  \n  \n2.  Name the service `WCFHello` and click **Add**.  \n  \n3.  Open the WCFHello.svc.cs file.  \n  \n4.  From Service1.asmx.cs, copy the following implementation of the `HelloWorld` operation.  \n  \n    ```  \n    public string HelloWorld()  \n    {  \n         return \"Hello World\";  \n    }  \n    ```  \n  \n5.  Paste to copied implementation of the `HelloWorld` operation into the WCFHello.svc.cs file in place of the following code.  \n  \n    ```  \n    public void DoWork()  \n    {  \n          // Add your operation implementation here  \n          return;  \n    }  \n    ```  \n  \n6.  Specify the `Namespace` attribute for <xref:System.ServiceModel.ServiceContractAttribute> as `WCFHello`.  \n  \n    ```  \n    [ServiceContract(Namespace=\"WCFHello\")]  \n    [AspNetCompatibilityRequirements(RequirementsMode=AspNetCompatibilityRequirementsMode.Required)]  \n    public class WCFHello  \n    { â€¦ }  \n    ```  \n  \n7.  Add the <xref:System.ServiceModel.Web.WebInvokeAttribute> to the `HelloWorld` operation and set the <xref:System.ServiceModel.Web.WebInvokeAttribute.ResponseFormat%2A> property to return <xref:System.ServiceModel.Web.WebMessageFormat>. Note that, if not set, the default return type is <xref:System.ServiceModel.Web.WebMessageFormat>.  \n  \n    ```  \n    [OperationContract]  \n    [WebInvoke(ResponseFormat=WebMessageFormat.Xml)]  \n    public string HelloWorld()  \n    {  \n        return \"Hello World\";  \n    }  \n    ```  \n  \n8.  From the **Build** menu, select **Build Solution**.  \n  \n9. Open the WCFHello.svc file and from the **Debug** menu, select **Start Without Debugging**.  \n  \n10. The service now exposes an endpoint at `WCFHello.svc/HelloWorld`, which responds to HTTP POST requests. HTTP POST requests cannot be tested from the browser, but the endpoint returns XML following XML.  \n  \n    ```  \n    <string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/\">Hello World</string>  \n    ```  \n  \n11. The `WCFHello.svc/HelloWorld` and the `Service1.aspx/HelloWorld` endpoints are now functionally equivalent.  \n  \n## Example  \n The code that results from the procedures outlined in this topic is provided in the following example.  \n  \n```  \n//This is the ASP.NET code in the Service1.asmx.cs file.  \n  \nusing System;  \nusing System.Collections;  \nusing System.ComponentModel;  \nusing System.Data;  \nusing System.Linq;  \nusing System.Web;  \nusing System.Web.Services;  \nusing System.Web.Services.Protocols;  \nusing System.Xml.Linq;  \nusing System.Web.Script.Services;  \n  \nnamespace ASPHello  \n{  \n    /// <summary>  \n    /// Summary description for Service1.  \n    /// </summary>  \n    [WebService(Namespace = \"http://tempuri.org/\")]  \n    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]  \n    [ToolboxItem(false)]  \n    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line.   \n    [System.Web.Script.Services.ScriptService]  \n    public class Service1 : System.Web.Services.WebService  \n    {  \n  \n        [WebMethod]  \n        public string HelloWorld()  \n        {  \n            return \"Hello World\";  \n        }  \n    }  \n}   \n  \n//This is the WCF code in the WCFHello.svc.cs file.  \nusing System;  \nusing System.Linq;  \nusing System.Runtime.Serialization;  \nusing System.ServiceModel;  \nusing System.ServiceModel.Activation;  \nusing System.ServiceModel.Web;  \n  \nnamespace ASPHello  \n{  \n    [ServiceContract(Namespace = \"WCFHello\")]  \n    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]  \n    public class WCFHello  \n    {  \n        // Add [WebInvoke] attribute to use HTTP GET.  \n        [OperationContract]  \n        [WebInvoke(ResponseFormat=WebMessageFormat.Xml)]  \n        public string HelloWorld()  \n        {  \n            return \"Hello World\";  \n        }  \n  \n        // Add more operations here and mark them with [OperationContract].  \n    }  \n}  \n```  \n  \n The <xref:System.Xml.XmlDocument> type is not supported by the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> because it is not serializable by the <xref:System.Xml.Serialization.XmlSerializer>. You can use either an <xref:System.Xml.Linq.XDocument> type, or serialize the <xref:System.Xml.XmlDocument.DocumentElement%2A> instead.  \n  \n If ASMX Web services are being upgraded and migrated side-by-side to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services, avoid mapping two types to the same name on the client. This causes an exception in serializers if the same type is used in a <xref:System.Web.Services.WebMethodAttribute> and a <xref:System.ServiceModel.ServiceContractAttribute>:  \n  \n-   If [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service is added first, invoking the method on ASMX Web Service causes exception in <xref:System.Web.UI.ObjectConverter.ConvertValue%28System.Object%2CSystem.Type%2CSystem.String%29> because the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] style definition of the order in the proxy takes precedence.  \n  \n-   If ASMX Web Service is added first, invoking method on [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service causes exception in <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> because the Web Service style definition of the order in the proxy takes precedence.  \n  \n There are significant differences in behavior between the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> and the ASP.NET AJAX <xref:System.Web.Script.Serialization.JavaScriptSerializer>. For example, the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> represents a dictionary as an array of key/value pairs, whereas the ASP.NET AJAX <xref:System.Web.Script.Serialization.JavaScriptSerializer> represents a dictionary as actual JSON objects. So the following is the dictionary represented in ASP.NET AJAX.  \n  \n```  \nDictionary<string, int> d = new Dictionary<string, int>();  \nd.Add(\"one\", 1);  \nd.Add(\"two\", 2);  \n```  \n  \n This dictionary is represented in JSON objects as shown in the following list:  \n  \n-   [{\"Key\":\"one\",\"Value\":1},{\"Key\":\"two\",\"Value\":2}] by the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>  \n  \n-   {\"one\":1,\"two\":2} by the ASP.NET AJAX <xref:System.Web.Script.Serialization.JavaScriptSerializer>  \n  \n The <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> is more powerful in the sense that it can handle dictionaries where the key type is not string, while the <xref:System.Web.Script.Serialization.JavaScriptSerializer> cannot. But the latter is more JSON-friendly.  \n  \n The significant differences between these serializers are summarized in the following table.  \n  \n|Category of Differences|DataContractJsonSerializer|ASP.NET AJAX JavaScriptSerializer|  \n|-----------------------------|--------------------------------|---------------------------------------|  \n|Deserializing the empty buffer (new byte[0]) into <xref:System.Object> (or <xref:System.Uri>, or some other classes).|SerializationException|null|  \n|Serialization of <xref:System.DBNull.Value>|{} (or {\"__type\":\"#System\"})|Null|  \n|Serialization of the private members of [Serializable] types.|serialized|not serialized|  \n|Serialization of the public properties of <xref:System.Runtime.Serialization.ISerializable> types.|not serialized|serialized|  \n|\"Extensions\" of JSON|Adheres to the JSON specification, which requires quotes on object member names ({\"a\":\"hello\"}).|Supports the names of object members without quotes ({a:\"hello\"}).|  \n|<xref:System.DateTime> Coordinated Universal Time (UTC)|Does not support format \"\\\\/Date(123456789U)\\\\/\" or \"\\\\/Date\\\\(\\d+(U&#124;(\\\\+\\\\-[\\d{4}]))?\\\\)\\\\\\\\/)\".|Supports format \"\\\\/Date(123456789U)\\\\/\" and \"\\\\/Date\\\\(\\d+(U&#124;(\\\\+\\\\-[\\d{4}]))?\\\\)\\\\\\\\/)\" as DateTime values.|  \n|Representation of dictionaries|An array of KeyValuePair\\<K,V>, handles key types that are not strings.|As actual JSON objects - but only handles key types that are strings.|  \n|Escaped characters|Always with an escape forward slash (/); never allows un-escaped invalid JSON characters, such as \"\\n\".|With an escape forward slash (/) for DateTime values.|  \n  \n## See Also  \n [How to: Use Configuration to Add an ASP.NET AJAX Endpoint](../../../../docs/framework/wcf/feature-details/how-to-use-configuration-to-add-an-aspnet-ajax-endpoint.md)","nodes":[{"pos":[4,377],"embed":true,"restype":"x-metadata","content":"title: \"How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 1428df4d-b18f-4e6d-bd4d-79ab3dd5147c\ncaps.latest.revision: 17\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF | Microsoft Docs","nodes":[{"pos":[0,73],"content":"How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF | Microsoft Docs","nodes":[{"content":"How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF | Microsoft Docs","pos":[0,73]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[384,440],"content":"How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF","linkify":"How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF","nodes":[{"content":"How to: Migrate AJAX-Enabled ASP.NET Web Services to WCF","pos":[0,56]}]},{"content":"This topic outlines procedures to migrate a basic ASP.NET AJAX service to an equivalent AJAX-enabled <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> service.","pos":[441,606],"source":"This topic outlines procedures to migrate a basic ASP.NET AJAX service to an equivalent AJAX-enabled [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service."},{"content":"It shows how to create a functionally equivalent <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> version of an ASP.NET AJAX service.","pos":[607,747],"source":" It shows how to create a functionally equivalent [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] version of an ASP.NET AJAX service."},{"content":"The two services can then be used side by side, or the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service can be used to replace the ASP.NET AJAX service.","pos":[748,915],"source":" The two services can then be used side by side, or the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service can be used to replace the ASP.NET AJAX service."},{"pos":[922,1072],"content":"Migrating an existing ASP.NET AJAX service to a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> AJAX service gives you the following benefits:","source":"Migrating an existing ASP.NET AJAX service to a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] AJAX service gives you the following benefits:"},{"content":"You can expose your AJAX service as a SOAP service with minimal extra configuration.","pos":[1082,1166]},{"pos":[1176,1289],"content":"You can benefit from <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> features such as tracing, and so on.","source":"You can benefit from [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] features such as tracing, and so on."},{"pos":[1296,1419],"content":"The following procedures assume that you are using <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph>.","source":"The following procedures assume that you are using [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]."},{"content":"The code that results from the procedures outlined in this topic is provided in the example following the procedures.","pos":[1426,1543]},{"pos":[1550,1896],"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> exposing a <ph id=\"ph2\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service through an AJAX-enabled endpoint, see the <bpt id=\"p1\">[</bpt>How to: Use Configuration to Add an ASP.NET AJAX Endpoint<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-use-configuration-to-add-an-aspnet-ajax-endpoint.md)</ept> topic.","source":"[!INCLUDE[crabout](../../../../includes/crabout-md.md)] exposing a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service through an AJAX-enabled endpoint, see the [How to: Use Configuration to Add an ASP.NET AJAX Endpoint](../../../../docs/framework/wcf/feature-details/how-to-use-configuration-to-add-an-aspnet-ajax-endpoint.md) topic."},{"pos":[1906,1960],"content":"To create and test the ASP.NET Web service application","linkify":"To create and test the ASP.NET Web service application","nodes":[{"content":"To create and test the ASP.NET Web service application","pos":[0,54]}]},{"pos":[1970,2047],"content":"Open <ph id=\"ph1\">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph>.","source":"Open [!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]."},{"pos":[2057,2181],"content":"From the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, then <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>, then <bpt id=\"p4\">**</bpt>Web<ept id=\"p4\">**</ept>, and then select <bpt id=\"p5\">**</bpt>ASP.NET Web Service Application<ept id=\"p5\">**</ept>.","source":"From the **File** menu, select **New**, then **Project**, then **Web**, and then select **ASP.NET Web Service Application**."},{"pos":[2191,2236],"content":"Name the project <ph id=\"ph1\">`ASPHello`</ph> and click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","source":"Name the project `ASPHello` and click **OK**."},{"pos":[2246,2384],"content":"Uncomment the line in the Service1.asmx.cs file that contains <ph id=\"ph1\">`System.Web.Script.Services.ScriptService]`</ph> to enable AJAX for this service.","source":"Uncomment the line in the Service1.asmx.cs file that contains `System.Web.Script.Services.ScriptService]` to enable AJAX for this service."},{"pos":[2394,2445],"content":"From the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept>.","source":"From the **Build** menu, select **Build Solution**."},{"pos":[2455,2515],"content":"From the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>Start Without Debugging<ept id=\"p2\">**</ept>.","source":"From the **Debug** menu, select **Start Without Debugging**."},{"pos":[2525,2586],"content":"On the Web page generated, select the <ph id=\"ph1\">`HelloWorld`</ph> operation.","source":"On the Web page generated, select the `HelloWorld` operation."},{"content":"Click the <bpt id=\"p1\">**</bpt>Invoke<ept id=\"p1\">**</ept> button on the <ph id=\"ph1\">`HelloWorld`</ph> test page.","pos":[2596,2654],"source":"Click the **Invoke** button on the `HelloWorld` test page."},{"content":"You should receive the following XML response.","pos":[2655,2701]},{"content":"This response confirms that you now have a functioning ASP.NET AJAX service and, in particular, that the service has now exposed an endpoint at Service1.asmx/HelloWorld that responds to HTTP POST requests and returns XML.","pos":[2842,3063]},{"pos":[3074,3194],"content":"Now you are ready to convert this service to use a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> AJAX service.","source":"Now you are ready to convert this service to use a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] AJAX service."},{"pos":[3204,3256],"content":"To create an equivalent WCF AJAX service application","linkify":"To create an equivalent WCF AJAX service application","nodes":[{"content":"To create an equivalent WCF AJAX service application","pos":[0,52]}]},{"pos":[3266,3380],"content":"Right-click the <bpt id=\"p1\">**</bpt>ASPHello<ept id=\"p1\">**</ept> project and select <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, then <bpt id=\"p3\">**</bpt>New Item<ept id=\"p3\">**</ept>, and then <bpt id=\"p4\">**</bpt>AJAX-enabled WCF Service<ept id=\"p4\">**</ept>.","source":"Right-click the **ASPHello** project and select **Add**, then **New Item**, and then **AJAX-enabled WCF Service**."},{"pos":[3390,3436],"content":"Name the service <ph id=\"ph1\">`WCFHello`</ph> and click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>.","source":"Name the service `WCFHello` and click **Add**."},{"content":"Open the WCFHello.svc.cs file.","pos":[3446,3476]},{"pos":[3486,3573],"content":"From Service1.asmx.cs, copy the following implementation of the <ph id=\"ph1\">`HelloWorld`</ph> operation.","source":"From Service1.asmx.cs, copy the following implementation of the `HelloWorld` operation."},{"pos":[3688,3810],"content":"Paste to copied implementation of the <ph id=\"ph1\">`HelloWorld`</ph> operation into the WCFHello.svc.cs file in place of the following code.","source":"Paste to copied implementation of the `HelloWorld` operation into the WCFHello.svc.cs file in place of the following code."},{"pos":[3960,4064],"content":"Specify the <ph id=\"ph1\">`Namespace`</ph> attribute for <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> as <ph id=\"ph3\">`WCFHello`</ph>.","source":"Specify the `Namespace` attribute for <xref:System.ServiceModel.ServiceContractAttribute> as `WCFHello`."},{"content":"Add the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph> to the <ph id=\"ph2\">`HelloWorld`</ph> operation and set the <ph id=\"ph3\">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute.ResponseFormat%2A&gt;</ph> property to return <ph id=\"ph4\">&lt;xref:System.ServiceModel.Web.WebMessageFormat&gt;</ph>.","pos":[4286,4521],"source":"Add the <xref:System.ServiceModel.Web.WebInvokeAttribute> to the `HelloWorld` operation and set the <xref:System.ServiceModel.Web.WebInvokeAttribute.ResponseFormat%2A> property to return <xref:System.ServiceModel.Web.WebMessageFormat>."},{"content":"Note that, if not set, the default return type is <ph id=\"ph1\">&lt;xref:System.ServiceModel.Web.WebMessageFormat&gt;</ph>.","pos":[4522,4620],"source":" Note that, if not set, the default return type is <xref:System.ServiceModel.Web.WebMessageFormat>."},{"pos":[4815,4866],"content":"From the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept>.","source":"From the **Build** menu, select **Build Solution**."},{"pos":[4875,4966],"content":"Open the WCFHello.svc file and from the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>Start Without Debugging<ept id=\"p2\">**</ept>.","source":"Open the WCFHello.svc file and from the **Debug** menu, select **Start Without Debugging**."},{"content":"The service now exposes an endpoint at <ph id=\"ph1\">`WCFHello.svc/HelloWorld`</ph>, which responds to HTTP POST requests.","pos":[4976,5079],"source":"The service now exposes an endpoint at `WCFHello.svc/HelloWorld`, which responds to HTTP POST requests."},{"content":"HTTP POST requests cannot be tested from the browser, but the endpoint returns XML following XML.","pos":[5080,5177]},{"pos":[5305,5412],"content":"The <ph id=\"ph1\">`WCFHello.svc/HelloWorld`</ph> and the <ph id=\"ph2\">`Service1.aspx/HelloWorld`</ph> endpoints are now functionally equivalent.","source":"The `WCFHello.svc/HelloWorld` and the `Service1.aspx/HelloWorld` endpoints are now functionally equivalent."},{"pos":[5421,5428],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The code that results from the procedures outlined in this topic is provided in the following example.","pos":[5432,5534]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlDocument&gt;</ph> type is not supported by the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> because it is not serializable by the <ph id=\"ph3\">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.","pos":[7296,7511],"source":"The <xref:System.Xml.XmlDocument> type is not supported by the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> because it is not serializable by the <xref:System.Xml.Serialization.XmlSerializer>."},{"content":"You can use either an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> type, or serialize the <ph id=\"ph2\">&lt;xref:System.Xml.XmlDocument.DocumentElement%2A&gt;</ph> instead.","pos":[7512,7647],"source":" You can use either an <xref:System.Xml.Linq.XDocument> type, or serialize the <xref:System.Xml.XmlDocument.DocumentElement%2A> instead."},{"content":"If ASMX Web services are being upgraded and migrated side-by-side to <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services, avoid mapping two types to the same name on the client.","pos":[7654,7844],"source":"If ASMX Web services are being upgraded and migrated side-by-side to [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services, avoid mapping two types to the same name on the client."},{"content":"This causes an exception in serializers if the same type is used in a <ph id=\"ph1\">&lt;xref:System.Web.Services.WebMethodAttribute&gt;</ph> and a <ph id=\"ph2\">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>:","pos":[7845,8019],"source":" This causes an exception in serializers if the same type is used in a <xref:System.Web.Services.WebMethodAttribute> and a <xref:System.ServiceModel.ServiceContractAttribute>:"},{"pos":[8029,8399],"content":"If <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service is added first, invoking the method on ASMX Web Service causes exception in <ph id=\"ph2\">&lt;xref:System.Web.UI.ObjectConverter.ConvertValue%28System.Object%2CSystem.Type%2CSystem.String%29&gt;</ph> because the <ph id=\"ph3\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> style definition of the order in the proxy takes precedence.","source":"If [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service is added first, invoking the method on ASMX Web Service causes exception in <xref:System.Web.UI.ObjectConverter.ConvertValue%28System.Object%2CSystem.Type%2CSystem.String%29> because the [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] style definition of the order in the proxy takes precedence."},{"pos":[8409,8700],"content":"If ASMX Web Service is added first, invoking method on <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service causes exception in <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> because the Web Service style definition of the order in the proxy takes precedence.","source":"If ASMX Web Service is added first, invoking method on [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service causes exception in <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> because the Web Service style definition of the order in the proxy takes precedence."},{"content":"There are significant differences in behavior between the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> and the ASP.NET AJAX <ph id=\"ph2\">&lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt;</ph>.","pos":[8707,8914],"source":"There are significant differences in behavior between the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> and the ASP.NET AJAX <xref:System.Web.Script.Serialization.JavaScriptSerializer>."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> represents a dictionary as an array of key/value pairs, whereas the ASP.NET AJAX <ph id=\"ph2\">&lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt;</ph> represents a dictionary as actual JSON objects.","pos":[8915,9188],"source":" For example, the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> represents a dictionary as an array of key/value pairs, whereas the ASP.NET AJAX <xref:System.Web.Script.Serialization.JavaScriptSerializer> represents a dictionary as actual JSON objects."},{"content":"So the following is the dictionary represented in ASP.NET AJAX.","pos":[9189,9252]},{"content":"This dictionary is represented in JSON objects as shown in the following list:","pos":[9373,9451]},{"content":"[{\"Key\":\"one\",\"Value\":1},{\"Key\":\"two\",\"Value\":2}] by the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>","pos":[9461,9585],"source":"[{\"Key\":\"one\",\"Value\":1},{\"Key\":\"two\",\"Value\":2}] by the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>"},{"content":"{\"one\":1,\"two\":2} by the ASP.NET AJAX <ph id=\"ph1\">&lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt;</ph>","pos":[9595,9692],"source":"{\"one\":1,\"two\":2} by the ASP.NET AJAX <xref:System.Web.Script.Serialization.JavaScriptSerializer>"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> is more powerful in the sense that it can handle dictionaries where the key type is not string, while the <ph id=\"ph2\">&lt;xref:System.Web.Script.Serialization.JavaScriptSerializer&gt;</ph> cannot.","pos":[9699,9944],"source":"The <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> is more powerful in the sense that it can handle dictionaries where the key type is not string, while the <xref:System.Web.Script.Serialization.JavaScriptSerializer> cannot."},{"content":"But the latter is more JSON-friendly.","pos":[9945,9982]},{"content":"The significant differences between these serializers are summarized in the following table.","pos":[9989,10081]},{"content":"Category of Differences","pos":[10088,10111]},{"content":"DataContractJsonSerializer","pos":[10112,10138]},{"content":"ASP.NET AJAX JavaScriptSerializer","pos":[10139,10172]},{"content":"Deserializing the empty buffer (new byte[0]) into <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> (or <ph id=\"ph2\">&lt;xref:System.Uri&gt;</ph>, or some other classes).","pos":[10284,10401],"source":"Deserializing the empty buffer (new byte[0]) into <xref:System.Object> (or <xref:System.Uri>, or some other classes)."},{"content":"SerializationException","pos":[10402,10424]},{"content":"null","pos":[10425,10429]},{"content":"Serialization of <ph id=\"ph1\">&lt;xref:System.DBNull.Value&gt;</ph>","pos":[10434,10477],"source":"Serialization of <xref:System.DBNull.Value>"},{"content":"{} (or {\"__type\":\"#System\"})","pos":[10478,10506]},{"content":"Null","pos":[10507,10511]},{"content":"Serialization of the private members of [Serializable] types.","pos":[10516,10577]},{"content":"serialized","pos":[10578,10588]},{"content":"not serialized","pos":[10589,10603]},{"content":"Serialization of the public properties of <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> types.","pos":[10608,10706],"source":"Serialization of the public properties of <xref:System.Runtime.Serialization.ISerializable> types."},{"content":"not serialized","pos":[10707,10721]},{"content":"serialized","pos":[10722,10732]},{"content":"\"Extensions\" of JSON","pos":[10737,10757]},{"content":"Adheres to the JSON specification, which requires quotes on object member names ({\"a\":\"hello\"}).","pos":[10758,10854]},{"content":"Supports the names of object members without quotes ({a:\"hello\"}).","pos":[10855,10921]},{"content":"<ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> Coordinated Universal Time (UTC)","pos":[10926,10981],"source":"<xref:System.DateTime> Coordinated Universal Time (UTC)"},{"content":"Does not support format \"<ph id=\"ph1\">\\\\</ph>/Date(123456789U)<ph id=\"ph2\">\\\\</ph>/\" or \"<ph id=\"ph3\">\\\\</ph>/Date<ph id=\"ph4\">\\\\</ph>(\\d+(U&amp;#124;(<ph id=\"ph5\">\\\\</ph><ph id=\"ph6\">+</ph><ph id=\"ph7\">\\\\</ph>-[\\d{4}]))?<ph id=\"ph8\">\\\\</ph>)<ph id=\"ph9\">\\\\</ph><ph id=\"ph10\">\\\\</ph>/)\".","pos":[10982,11084],"source":"Does not support format \"\\\\/Date(123456789U)\\\\/\" or \"\\\\/Date\\\\(\\d+(U&#124;(\\\\+\\\\-[\\d{4}]))?\\\\)\\\\\\\\/)\"."},{"content":"Supports format \"<ph id=\"ph1\">\\\\</ph>/Date(123456789U)<ph id=\"ph2\">\\\\</ph>/\" and \"<ph id=\"ph3\">\\\\</ph>/Date<ph id=\"ph4\">\\\\</ph>(\\d+(U&amp;#124;(<ph id=\"ph5\">\\\\</ph><ph id=\"ph6\">+</ph><ph id=\"ph7\">\\\\</ph>-[\\d{4}]))?<ph id=\"ph8\">\\\\</ph>)<ph id=\"ph9\">\\\\</ph><ph id=\"ph10\">\\\\</ph>/)\" as DateTime values.","pos":[11085,11199],"source":"Supports format \"\\\\/Date(123456789U)\\\\/\" and \"\\\\/Date\\\\(\\d+(U&#124;(\\\\+\\\\-[\\d{4}]))?\\\\)\\\\\\\\/)\" as DateTime values."},{"content":"Representation of dictionaries","pos":[11204,11234]},{"content":"An array of KeyValuePair<ph id=\"ph1\">\\&lt;</ph>K,V&gt;, handles key types that are not strings.","pos":[11235,11306],"source":"An array of KeyValuePair\\<K,V>, handles key types that are not strings."},{"content":"As actual JSON objects - but only handles key types that are strings.","pos":[11307,11376]},{"content":"Escaped characters","pos":[11381,11399]},{"content":"Always with an escape forward slash (/); never allows un-escaped invalid JSON characters, such as \"\\n\".","pos":[11400,11503]},{"content":"With an escape forward slash (/) for DateTime values.","pos":[11504,11557]},{"pos":[11567,11575],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[11579,11745],"content":"<bpt id=\"p1\">[</bpt>How to: Use Configuration to Add an ASP.NET AJAX Endpoint<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/how-to-use-configuration-to-add-an-aspnet-ajax-endpoint.md)</ept>","source":"[How to: Use Configuration to Add an ASP.NET AJAX Endpoint](../../../../docs/framework/wcf/feature-details/how-to-use-configuration-to-add-an-aspnet-ajax-endpoint.md)"}]}