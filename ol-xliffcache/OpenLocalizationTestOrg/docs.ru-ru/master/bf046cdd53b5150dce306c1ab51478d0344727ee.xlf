<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf046cdd53b5150dce306c1ab51478d0344727ee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\dynamic-arguments.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01cb024725fa25c0241aaa2598e00dedf57e773f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2f31f2a0998cefd5064409ceeda15b668278776</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Dynamic Arguments | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dynamic Arguments</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to implement an activity for which the arguments are defined by the activity consumer rather than the activity author.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It does this by overriding the way the runtime constructs the activity’s metadata.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Sample details</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Prior to execution, the runtime builds a description of an activity by examining the public members of the activity type and automatically declaring arguments, variables, child activities, and activity delegates as part of an activity’s metadata.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It does this to ensure correct construction of a workflow as well as to manage run-time relationships and lifetime rules.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Typically an activity author defines the arguments of an activity by specifying public members on the activity type that derive from <ph id="ph1">&lt;xref:System.Activities.Argument&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For each public member that derives from <ph id="ph1">&lt;xref:System.Activities.Argument&gt;</ph>, the runtime creates a <ph id="ph2">&lt;xref:System.Activities.RuntimeArgument&gt;</ph> and binds it to the user-provided argument set on that member.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In some cases, however, the consumer of the activity provides some configuration that determines the set of arguments.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An activity author overrides <ph id="ph1">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph> to customize the way activity metadata is built, which includes the set of arguments associated with the activity.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to build an argument list dynamically for an activity that invokes a method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The activity consumer specifies the type and the method name they want to invoke along with a collection of arguments to be passed to that method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The purpose of this sample is to demonstrate how to override <ph id="ph1">&lt;xref:System.Activities.CodeActivity.CacheMetadata%2A&gt;</ph> and how to use <ph id="ph2">&lt;xref:System.Activities.RuntimeArgument&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are several caveats with respect to the kinds of methods that this activity can invoke.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, it does not work with generics or parameter arrays.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> activity that ships in.NET Framework handles these cases and more.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MethodInvoke`</ph> activity overrides <ph id="ph2">&lt;xref:System.Activities.CodeActivity.CacheMetadata%2A&gt;</ph> and begins by creating a <ph id="ph3">&lt;xref:System.Activities.RuntimeArgument&gt;</ph> to handle any result from the method invocation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It binds this <ph id="ph1">&lt;xref:System.Activities.RuntimeArgument&gt;</ph> to the publicly settable <ph id="ph2">&lt;xref:System.Activities.OutArgument&gt;</ph> named <ph id="ph3">`Result`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`MethodInvoke.Result`</ph> is <ph id="ph2">`null`</ph>, the runtime automatically populates it with an <ph id="ph3">&lt;xref:System.Activities.OutArgument&gt;</ph> configured with the default expression for its type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This behavior means an activity author never has to check whether an argument property is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Next, the <ph id="ph1">&lt;xref:System.Activities.CodeActivity.CacheMetadata%2A&gt;</ph> override determines the <ph id="ph2">`MethodInfo`</ph> it uses for invocation from the user-provided <ph id="ph3">`MethodName`</ph> and <ph id="ph4">`TargetType`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DetermineMethodInfo`</ph> method takes the <ph id="ph2">&lt;xref:System.Activities.CodeActivityMetadata&gt;</ph> parameter passed to the <ph id="ph3">&lt;xref:System.Activities.CodeActivity.CacheMetadata%2A&gt;</ph> override so that any configuration errors can be reported as validation errors.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is done by calling <ph id="ph1">`metadata.AddValidationError`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Once the <ph id="ph1">`MethodInfo`</ph> has been set, the sample iterates over the <ph id="ph2">`MethodInfo`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For each parameter, it creates a <ph id="ph1">&lt;xref:System.Activities.RuntimeArgument&gt;</ph> and binds it to the corresponding argument in the user-provided collection from the <ph id="ph2">`Parameters`</ph> property.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Finally, the collection of <ph id="ph1">&lt;xref:System.Activities.RuntimeArgument&gt;</ph>s is associated with the activity by calling <ph id="ph2">`metadata.SetArgumentsCollection`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note that argument resolution can be done using a <ph id="ph1">&lt;xref:System.Activities.RuntimeArgument&gt;</ph>, as in the case of <ph id="ph2">`resultArgument`</ph> or the user-provided argument, as in the case of the <ph id="ph3">`Parameters`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To use this sample</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>, open the DynamicArguments.sln file.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To build the solution, press CTRL+SHIFT+B.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To run the solution, press CTRL+F5.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>