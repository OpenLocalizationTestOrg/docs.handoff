<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="creating-wcf-ajax-services-without-aspnet.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f608280d08625cdb5396326c5d9b7fc4119922b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\creating-wcf-ajax-services-without-aspnet.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">882a5109621c8ee65f5057dd35d1bab8baf47370</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdd321bee191d099adf2daa484579ca6c6eda881</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Creating WCF AJAX Services without ASP.NET | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating WCF AJAX Services without ASP.NET</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>AJAX services can be accessed from any JavaScript-enabled Web page, without requiring ASP.NET AJAX.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes how to create such a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For instructions on using <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> with ASP.NET AJAX, see <bpt id="p1">[</bpt>Creating WCF Services for ASP.NET AJAX<ept id="p1">](../../../../docs/framework/wcf/feature-details/creating-wcf-services-for-aspnet-ajax.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are three parts to a creating a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> AJAX service:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating an AJAX endpoint that can be accessed from the browser.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating an AJAX-compatible service contract.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Accessing WCF AJAX services.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating an AJAX Endpoint</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The most basic way to enable AJAX support in a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service is to use the <ph id="ph2">&lt;xref:System.ServiceModel.Activation.WebServiceHostFactory&gt;</ph> in the .svc file associated with the service, as in the following example.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also use configuration to add an AJAX endpoint.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.WebHttpBinding&gt;</ph> on the service endpoint and configure that endpoint with the <ph id="ph2">&lt;xref:System.ServiceModel.Description.WebHttpBehavior&gt;</ph> as shown in the following code snippet.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For a working example, see the <bpt id="p1">[</bpt>AJAX Service with JSON and XML<ept id="p1">](../../../../docs/framework/wcf/samples/ajax-service-with-json-and-xml-sample.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creating an AJAX-Compatible Service Contract</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>By default, service contracts exposed over an AJAX endpoint return data in the XML format.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Also, by default service operations are accessible through HTTP POST requests to URLs that include the endpoint address followed by the operation name, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This operation is accessible using an HTTP POST to <ph id="ph1">`http://serviceaddress/endpointaddress/GetCities`</ph> and return an XML message.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use the full Web Programming Model to customize these basic aspects.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebGetAttribute&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph> attributes to control the HTTP verb to which the operation responds or use the <ph id="ph3">`UriTemplate`</ph> property of these respective attributes to specify custom URIs.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> the <bpt id="p1">[</bpt>WCF Web HTTP Programming Model<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The JSON data format is often used in AJAX services.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To create an operation that returns JSON instead of XML, set the <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebGetAttribute.ResponseFormat%2A&gt;</ph> (or the <ph id="ph2">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute.ResponseFormat%2A&gt;</ph>) property to <ph id="ph3">&lt;xref:System.ServiceModel.Web.WebMessageFormat&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Stand-Alone JSON Serialization<ept id="p1">](../../../../docs/framework/wcf/feature-details/stand-alone-json-serialization.md)</ept> topic shows how built-in .NET types and data contract types map to JSON.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Normally, JSON requests and responses consist of just one item.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For the preceding <ph id="ph1">`GetCities`</ph> operation, the request resembles the following statement.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The response to that request resembles the following statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the operation takes an extra parameter, the request style must be wrapped to wrap both parameters in a single JSON object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An example of this style JSON message is in the following example.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following contract accepts this message.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Accessing AJAX Services</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>AJAX endpoints always accept both JSON and XML requests.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>HTTP POST requests with a content-type of "application/json" are treated as JSON, and those with content-type that indicate XML (for example, "text/xml") are treated as XML.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>HTTP GET requests contain all the request parameters in the URL itself.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It is up to the user to decide how to create the HTTP request to the endpoint.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Also, the user has full control over constructing the JSON that forms the body of the request.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For an example of creating a request from JavaScript, see the <bpt id="p1">[</bpt>AJAX Service with JSON and XML<ept id="p1">](../../../../docs/framework/wcf/samples/ajax-service-with-json-and-xml-sample.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>