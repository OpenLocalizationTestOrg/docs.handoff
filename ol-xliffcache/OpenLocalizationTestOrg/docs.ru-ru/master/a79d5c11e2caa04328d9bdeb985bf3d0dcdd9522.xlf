<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="like-entity-sql.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a79d5c11e2caa04328d9bdeb985bf3d0dcdd9522</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\language-reference\like-entity-sql.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46e19830df3dd3c1a0887ae95f8df1ce90b807af</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfdea0c9560082c882d947dabdb6f05071d07034</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>LIKE (Entity SQL) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LIKE (Entity SQL)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Determines whether a specific character <ph id="ph1">`String`</ph> matches a specified pattern.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> expression that evaluates to a <ph id="ph2">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A pattern to match to the specified <ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An escape character.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>NOT</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Specifies that the result of LIKE be negated.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">`string`</ph> matches the pattern; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> expressions that use the LIKE operator are evaluated in much the same way as expressions that use equality as the filter criteria.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> expressions that use the LIKE operator can include both literals and wildcard characters.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following table describes the syntax of the pattern <ph id="ph1">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Wildcard Character</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">`string`</ph> of zero or more characters.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`title like '%computer%'`</ph> finds all titles with the word <ph id="ph2">`"computer"`</ph> anywhere in the title.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>_ (underscore)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Any single character.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`firstname like '_ean'`</ph> finds all four-letter first names that end with <ph id="ph2">`"ean`</ph>," such as Dean or Sean.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>[ ]</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Any single character in the specified range ([a-f]) or set ([abcdef]).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`lastname like '[C-P]arsen'`</ph> finds last names ending with "arsen" and beginning with any single character between C and P, such as Carsen or Larsen.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>[^]</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Any single character not in the specified range ([^a-f]) or set ([^abcdef]).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`lastname like 'de[^l]%'`</ph> finds all last names that begin with "de" and do not include "l" as the following letter.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> LIKE operator and ESCAPE clause cannot be applied to <ph id="ph2">`System.DateTime`</ph> or <ph id="ph3">`System.Guid`</ph> values.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>LIKE supports ASCII pattern matching and Unicode pattern matching.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When all parameters are ASCII characters, ASCII pattern matching is performed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If one or more of the arguments are Unicode, all arguments are converted to Unicode and Unicode pattern matching is performed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you use Unicode with LIKE, trailing blanks are significant; however, for non-Unicode, trailing blanks are not significant.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The pattern string syntax of <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> is the same as that of <ph id="ph2">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A pattern can include regular characters and wildcard characters.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>During pattern matching, regular characters must exactly match the characters specified in the character <ph id="ph1">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, wildcard characters can be matched with arbitrary fragments of the character string.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When it is used with wildcard characters, the LIKE operator is more flexible than the = and != string comparison operators.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You may use provider-specific extensions if you target a specific provider.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, such constructs may be treated differently by other providers, for example.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>SqlServer supports [first-last] and [^first-last] patterns where the former matches exactly one character between first and last, and the latter matches exactly one character that is not between first and last.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Escape</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>By using the ESCAPE clause, you can search for character strings that include one or more of the special wildcard characters described in the table in the previous section.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, assume several documents include the literal "100%" in the title and you want to search for all of those documents.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because the percent (%) character is a wildcard character, you must escape it using the <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> ESCAPE clause to successfully execute the search.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following is an example of this filter.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this search expression, the percent wildcard character (%) immediately following the exclamation point character (!) is treated as a literal, instead of as a wildcard character.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can use any character as an escape character except for the <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> wildcard characters and the square bracket (<ph id="ph2">`[ ]`</ph>) characters.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the previous example, the exclamation point (!) character is the escape character.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following two <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> queries use the LIKE and ESCAPE operators to determine whether a specific character string matches a specified pattern.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The first query searches for the <ph id="ph1">`Name`</ph> that starts with the characters <ph id="ph2">`Down_`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This query uses the ESCAPE option because the underscore (<ph id="ph1">`_`</ph>) is a wildcard character.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Without specifying the ESCAPE option, the query would search for any <ph id="ph1">`Name`</ph> values that start with the word <ph id="ph2">`Down`</ph> followed by any single character other than the underscore character.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The queries are based on the AdventureWorks Sales Model.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To compile and run this query, follow these steps:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Follow the procedure in <bpt id="p1">[</bpt>How to: Execute a Query that Returns PrimitiveType Results<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-primitivetype-results.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Pass the following query as an argument to the <ph id="ph1">`ExecutePrimitiveTypeQuery`</ph> method:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Entity SQL Reference<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>