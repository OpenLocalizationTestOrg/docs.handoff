{"content":"---\ntitle: \"GetType Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.GetType\"\nhelpviewer_keywords: \n  - \"GetType operator [Visual Basic]\"\n  - \"GetType keyword [Visual Basic]\"\nms.assetid: 4f733297-2503-4607-850c-15eba65fff90\n---\n# GetType Operator (Visual Basic)\nReturns a <xref:System.Type> object for the specified type. The <xref:System.Type> object provides information about the type such as its properties, methods, and events.  \n  \n## Syntax  \n  \n```  \nGetType(typename)  \n```  \n  \n## Parameters  \n  \n|Parameter|Description|  \n|---|---|  \n|`typename`|The name of the type for which you desire information.|  \n  \n## Remarks  \n The `GetType` operator returns the <xref:System.Type> object for the specified `typename`. You can pass the name of any defined type in `typename`. This includes the following:  \n  \n-   Any Visual Basic data type, such as `Boolean` or `Date`.  \n  \n-   Any .NET Framework class, structure, module, or interface, such as <xref:System.ArgumentException?displayProperty=nameWithType> or <xref:System.Double?displayProperty=nameWithType>.  \n  \n-   Any class, structure, module, or interface defined by your application.  \n  \n-   Any array defined by your application.  \n  \n-   Any delegate defined by your application.  \n  \n-   Any enumeration defined by Visual Basic, the .NET Framework, or your application.  \n  \n If you want to get the type object of an object variable, use the <xref:System.Type.GetType%2A?displayProperty=nameWithType> method.  \n  \n The `GetType` operator can be useful in the following circumstances:  \n  \n-   You must access the metadata for a type at run time. The <xref:System.Type> object supplies metadata such as type members and deployment information. You need this, for example, to reflect over an assembly. For more information, see <xref:System.Reflection?displayProperty=nameWithType>.  \n  \n-   You want to compare two object references to see if they refer to instances of the same type. If they do, `GetType` returns references to the same <xref:System.Type> object.  \n  \n## Example  \n The following examples show the `GetType` operator in use.  \n  \n [!code-vb[VbVbalrOperators#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#26)]  \n  \n## See also\n\n- [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)\n- [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)\n- [Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)\n","nodes":[{"pos":[4,241],"embed":true,"restype":"x-metadata","content":"title: \"GetType Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.GetType\"\nhelpviewer_keywords: \n  - \"GetType operator [Visual Basic]\"\n  - \"GetType keyword [Visual Basic]\"\nms.assetid: 4f733297-2503-4607-850c-15eba65fff90","nodes":[{"content":"GetType Operator (Visual Basic)","nodes":[{"pos":[0,31],"content":"GetType Operator (Visual Basic)","nodes":[{"content":"GetType Operator (Visual Basic)","pos":[0,31]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[248,279],"content":"GetType Operator (Visual Basic)","linkify":"GetType Operator (Visual Basic)","nodes":[{"content":"GetType Operator (Visual Basic)","pos":[0,31]}]},{"content":"Returns a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object for the specified type.","pos":[280,339],"source":"Returns a <xref:System.Type> object for the specified type."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object provides information about the type such as its properties, methods, and events.","pos":[340,450],"source":" The <xref:System.Type> object provides information about the type such as its properties, methods, and events."},{"pos":[459,465],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[509,519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[526,535]},{"content":"Description","pos":[536,547]},{"content":"The name of the type for which you desire information.","pos":[575,629]},{"pos":[639,646],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`GetType`</ph> operator returns the <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object for the specified <ph id=\"ph3\">`typename`</ph>.","pos":[650,740],"source":"The `GetType` operator returns the <xref:System.Type> object for the specified `typename`."},{"content":"You can pass the name of any defined type in <ph id=\"ph1\">`typename`</ph>.","pos":[741,797],"source":" You can pass the name of any defined type in `typename`."},{"content":"This includes the following:","pos":[798,826]},{"pos":[836,892],"content":"Any Visual Basic data type, such as <ph id=\"ph1\">`Boolean`</ph> or <ph id=\"ph2\">`Date`</ph>.","source":"Any Visual Basic data type, such as `Boolean` or `Date`."},{"pos":[902,1083],"content":"Any .NET Framework class, structure, module, or interface, such as <ph id=\"ph1\">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Double?displayProperty=nameWithType&gt;</ph>.","source":"Any .NET Framework class, structure, module, or interface, such as <xref:System.ArgumentException?displayProperty=nameWithType> or <xref:System.Double?displayProperty=nameWithType>."},{"content":"Any class, structure, module, or interface defined by your application.","pos":[1093,1164]},{"content":"Any array defined by your application.","pos":[1174,1212]},{"content":"Any delegate defined by your application.","pos":[1222,1263]},{"content":"Any enumeration defined by Visual Basic, the .NET Framework, or your application.","pos":[1273,1354]},{"pos":[1361,1493],"content":"If you want to get the type object of an object variable, use the <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> method.","source":"If you want to get the type object of an object variable, use the <xref:System.Type.GetType%2A?displayProperty=nameWithType> method."},{"pos":[1500,1568],"content":"The <ph id=\"ph1\">`GetType`</ph> operator can be useful in the following circumstances:","source":"The `GetType` operator can be useful in the following circumstances:"},{"content":"You must access the metadata for a type at run time.","pos":[1578,1630]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object supplies metadata such as type members and deployment information.","pos":[1631,1727],"source":" The <xref:System.Type> object supplies metadata such as type members and deployment information."},{"content":"You need this, for example, to reflect over an assembly.","pos":[1728,1784]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Reflection?displayProperty=nameWithType&gt;</ph>.","pos":[1785,1865],"source":" For more information, see <xref:System.Reflection?displayProperty=nameWithType>."},{"content":"You want to compare two object references to see if they refer to instances of the same type.","pos":[1875,1968]},{"content":"If they do, <ph id=\"ph1\">`GetType`</ph> returns references to the same <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object.","pos":[1969,2048],"source":" If they do, `GetType` returns references to the same <xref:System.Type> object."},{"pos":[2057,2064],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2068,2126],"content":"The following examples show the <ph id=\"ph1\">`GetType`</ph> operator in use.","source":"The following examples show the `GetType` operator in use."},{"pos":[2259,2267],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2271,2383],"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept>","source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)"},{"pos":[2386,2510],"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept>","source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)"},{"pos":[2513,2634],"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept>","source":"[Operators and Expressions](../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)"}]}