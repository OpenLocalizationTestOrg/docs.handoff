<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="main-return-values.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f515268af13ef95b8b6d9a79f71c49d5d4a98d05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\main-and-command-args\main-return-values.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f41d4b2f3601e02a399f4f3419f9b78d6617e1c1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecf77f6f1ecdea034f780cb19b0b7853e7727615</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Main() Return Values - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Main() return values (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Main`</ph> method can return <ph id="ph2">`void`</ph>:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It can also return an <ph id="ph1">`int`</ph>:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the return value from <ph id="ph1">`Main`</ph> is not used, returning <ph id="ph2">`void`</ph> allows for slightly simpler code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, returning an integer enables the program to communicate status information to other programs or scripts that invoke the executable file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The return value from <ph id="ph1">`Main`</ph> is treated as the exit code for the process.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows how the return value from <ph id="ph1">`Main`</ph> can be accessed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example uses <bpt id="p1">[</bpt>.NET Core<ept id="p1">](../../../core/index.md)</ept> command line tools.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you are unfamiliar with .NET Core command line tools, you can learn about them in this <bpt id="p1">[</bpt>Get started topic<ept id="p1">](../../../core/tutorials/using-with-xplat-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`Main`</ph> method in <bpt id="p1">*</bpt>program.cs<ept id="p1">*</ept> as follows:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When a program is executed in Windows, any value returned from the <ph id="ph1">`Main`</ph> function is stored in an environment variable.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This environment variable can be retrieved using <ph id="ph1">`ERRORLEVEL`</ph> from a batch file, or <ph id="ph2">`$LastExitCode`</ph> from powershell.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can build the application using the <bpt id="p1">[</bpt>dotnet CLI<ept id="p1">](../../../core/tools/dotnet.md)</ept> <ph id="ph1">`dotnet build`</ph> command.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Next, create a Powershell script to run the application and display the result.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Paste the following code into a text file and save it as <ph id="ph1">`test.ps1`</ph> in the folder that contains the project.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Run the powershell script by typing <ph id="ph1">`test.ps1`</ph> at the powershell prompt.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the code returns zero, the batch file will report success.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, if you change MainReturnValTest.cs to return a non-zero value and then re-compile the program, subsequent execution of the powershell script will report failure.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Sample output</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Async Main return values</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Async Main return values move the boilerplate code necessary for calling asynchronous methods in <ph id="ph1">`Main`</ph> to code generated by the compiler.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Previously, you would need to write this construct to call asynchronous code and ensure your program ran until the asynchronous operation completed:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Now, this can be replaced by:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The advantage of the new syntax is that the compiler always generates the correct code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Compiler generated code</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When the application entry point returns a <ph id="ph1">`Task`</ph> or <ph id="ph2">`Task&lt;int&gt;`</ph>, the compiler generates a new entry point that calls the entry point method declared in the application code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Assuming that this entry point is called <ph id="ph1">`$GeneratedMain`</ph>, the compiler generates the following code for these entry points:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`static Task Main()`</ph> results in the compiler emitting the equivalent of <ph id="ph2">`private static void $GeneratedMain() =&gt; Main().GetAwaiter().GetResult();`</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`static Task Main(string[])`</ph> results in the compiler emitting the equivalent of <ph id="ph2">`private static void $GeneratedMain(string[] args) =&gt; Main(args).GetAwaiter().GetResult();`</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`static Task&lt;int&gt; Main()`</ph> results in the compiler emitting the equivalent of <ph id="ph2">`private static int $GeneratedMain() =&gt; Main().GetAwaiter().GetResult();`</ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`static Task&lt;int&gt; Main(string[])`</ph> results in the compiler emitting the equivalent of <ph id="ph2">`private static int $GeneratedMain(string[] args) =&gt; Main(args).GetAwaiter().GetResult();`</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the examples used <ph id="ph1">`async`</ph> modifier on the <ph id="ph2">`Main`</ph> method, the compiler would generate the same code.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Main() and Command-Line Arguments<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Display Command Line Arguments<ept id="p1">](../../programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Access Command-Line Arguments Using foreach<ept id="p1">](../../programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>