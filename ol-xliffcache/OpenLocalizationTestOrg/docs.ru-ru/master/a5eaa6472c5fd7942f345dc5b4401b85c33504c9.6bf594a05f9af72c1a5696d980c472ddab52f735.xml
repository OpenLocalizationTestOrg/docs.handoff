{"content":"---\ntitle: \"Enabling a Data Source for LINQ Querying1 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: d2ef04a5-31a6-45cb-af9a-a5ce7732662c\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Enabling a Data Source for LINQ Querying\nThere are various ways to extend [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] to enable any data source to be queried in the [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] pattern. The data source might be a data structure, a Web service, a file system, or a database, to name some. The [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] pattern makes it easy for clients to query a data source for which [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] querying is enabled, because the syntax and pattern of the query does not change. The ways in which [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] can be extended to these data sources include the following:  \n  \n-   Implementing the <xref:System.Collections.Generic.IEnumerable%601> interface in a type to enable [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] to Objects querying of that type.  \n  \n-   Creating standard query operator methods such as <xref:System.Linq.Enumerable.Where%2A> and <xref:System.Linq.Enumerable.Select%2A> that extend a type, to enable custom [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] querying of that type.  \n  \n-   Creating a provider for your data source that implements the <xref:System.Linq.IQueryable%601> interface. A provider that implements this interface receives [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] queries in the form of expression trees, which it can execute in a custom way, for example remotely.  \n  \n-   Creating a provider for your data source that takes advantage of an existing [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] technology. Such a provider would enable not only querying, but also insert, update, and delete operations and mapping for user-defined types.  \n  \n This topic discusses these options.  \n  \n## How to Enable LINQ Querying of Your Data Source  \n  \n### In-Memory Data  \n There are two ways you can enable [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] querying of in-memory data. If the data is of a type that implements <xref:System.Collections.Generic.IEnumerable%601>, you can query the data by using [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] to Objects. If it does not make sense to enable enumeration of your type by implementing the <xref:System.Collections.Generic.IEnumerable%601> interface, you can define [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] standard query operator methods in that type or create [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] standard query operator methods that extend the type. Custom implementations of the standard query operators should use deferred execution to return the results.  \n  \n### Remote Data  \n The best option for enabling [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] querying of a remote data source is to implement the <xref:System.Linq.IQueryable%601> interface. However, this differs from extending a provider such as [!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)] for a data source. No provider models for extending existing [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] technologies, such as [!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)], to other types of data source are available in [!INCLUDE[vs_orcas_long](../../../../csharp/misc/includes/vs_orcas_long_md.md)].  \n  \n## IQueryable LINQ Providers  \n [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] providers that implement <xref:System.Linq.IQueryable%601> can vary widely in their complexity. This section discusses the different levels of complexity.  \n  \n A less complex `IQueryable` provider might interface with a single method of a Web service. This type of provider is very specific because it expects specific information in the queries that it handles. It has a closed type system, perhaps exposing a single result type. Most of the execution of the query occurs locally, for example by using the <xref:System.Linq.Enumerable> implementations of the standard query operators. A less complex provider might examine only one method call expression in the expression tree that represents the query, and let the remaining logic of the query be handled elsewhere.  \n  \n An `IQueryable` provider of medium complexity might target a data source that has a partially expressive query language. If it targets a Web service, it might interface with more than one method of the Web service and select the method to call based on the question that the query poses. A provider of medium complexity would have a richer type system than a simple provider, but it would still be a fixed type system. For example, the provider might expose types that have one-to-many relationships that can be traversed, but it would not provide mapping technology for user-defined types.  \n  \n A complex `IQueryable` provider, such as the [!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)] provider, might translate complete [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] queries to an expressive query language, such as SQL. A complex provider is more general than a less complex provider, because it can handle a wider variety of questions in the query. It also has an open type system and therefore must contain extensive infrastructure to map user-defined types. Developing a complex provider requires a significant amount of effort.  \n  \n## See Also  \n <xref:System.Linq.IQueryable%601>   \n <xref:System.Collections.Generic.IEnumerable%601>   \n <xref:System.Linq.Enumerable>   \n [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)   \n [LINQ to Objects (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)","nodes":[{"pos":[4,422],"embed":true,"restype":"x-metadata","content":"title: \"Enabling a Data Source for LINQ Querying1 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: d2ef04a5-31a6-45cb-af9a-a5ce7732662c\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","nodes":[{"content":"Enabling a Data Source for LINQ Querying1 | Microsoft Docs","nodes":[{"pos":[0,58],"content":"Enabling a Data Source for LINQ Querying1 | Microsoft Docs","nodes":[{"content":"Enabling a Data Source for LINQ Querying1 | Microsoft Docs","pos":[0,58]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[429,469],"content":"Enabling a Data Source for LINQ Querying","linkify":"Enabling a Data Source for LINQ Querying","nodes":[{"content":"Enabling a Data Source for LINQ Querying","pos":[0,40]}]},{"content":"There are various ways to extend <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> to enable any data source to be queried in the <ph id=\"ph2\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> pattern.","pos":[470,692],"source":"There are various ways to extend [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] to enable any data source to be queried in the [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] pattern."},{"content":"The data source might be a data structure, a Web service, a file system, or a database, to name some.","pos":[693,794]},{"content":"The <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> pattern makes it easy for clients to query a data source for which <ph id=\"ph2\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> querying is enabled, because the syntax and pattern of the query does not change.","pos":[795,1081],"source":" The [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] pattern makes it easy for clients to query a data source for which [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] querying is enabled, because the syntax and pattern of the query does not change."},{"content":"The ways in which <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> can be extended to these data sources include the following:","pos":[1082,1227],"source":" The ways in which [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] can be extended to these data sources include the following:"},{"pos":[1237,1434],"content":"Implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface in a type to enable <ph id=\"ph2\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> to Objects querying of that type.","source":"Implementing the <xref:System.Collections.Generic.IEnumerable%601> interface in a type to enable [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] to Objects querying of that type."},{"pos":[1444,1702],"content":"Creating standard query operator methods such as <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> that extend a type, to enable custom <ph id=\"ph3\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> querying of that type.","source":"Creating standard query operator methods such as <xref:System.Linq.Enumerable.Where%2A> and <xref:System.Linq.Enumerable.Select%2A> that extend a type, to enable custom [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] querying of that type."},{"content":"Creating a provider for your data source that implements the <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface.","pos":[1712,1817],"source":"Creating a provider for your data source that implements the <xref:System.Linq.IQueryable%601> interface."},{"content":"A provider that implements this interface receives <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries in the form of expression trees, which it can execute in a custom way, for example remotely.","pos":[1818,2036],"source":" A provider that implements this interface receives [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] queries in the form of expression trees, which it can execute in a custom way, for example remotely."},{"content":"Creating a provider for your data source that takes advantage of an existing <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> technology.","pos":[2046,2201],"source":"Creating a provider for your data source that takes advantage of an existing [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] technology."},{"content":"Such a provider would enable not only querying, but also insert, update, and delete operations and mapping for user-defined types.","pos":[2202,2332]},{"content":"This topic discusses these options.","pos":[2339,2374]},{"pos":[2383,2430],"content":"How to Enable LINQ Querying of Your Data Source","linkify":"How to Enable LINQ Querying of Your Data Source","nodes":[{"content":"How to Enable LINQ Querying of Your Data Source","pos":[0,47]}]},{"pos":[2440,2454],"content":"In-Memory Data","linkify":"In-Memory Data","nodes":[{"content":"In-Memory Data","pos":[0,14]}]},{"content":"There are two ways you can enable <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> querying of in-memory data.","pos":[2458,2586],"source":"There are two ways you can enable [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] querying of in-memory data."},{"content":"If the data is of a type that implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can query the data by using <ph id=\"ph2\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> to Objects.","pos":[2587,2789],"source":" If the data is of a type that implements <xref:System.Collections.Generic.IEnumerable%601>, you can query the data by using [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] to Objects."},{"content":"If it does not make sense to enable enumeration of your type by implementing the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, you can define <ph id=\"ph2\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> standard query operator methods in that type or create <ph id=\"ph3\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> standard query operator methods that extend the type.","pos":[2790,3189],"source":" If it does not make sense to enable enumeration of your type by implementing the <xref:System.Collections.Generic.IEnumerable%601> interface, you can define [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] standard query operator methods in that type or create [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] standard query operator methods that extend the type."},{"content":"Custom implementations of the standard query operators should use deferred execution to return the results.","pos":[3190,3297]},{"pos":[3307,3318],"content":"Remote Data","linkify":"Remote Data","nodes":[{"content":"Remote Data","pos":[0,11]}]},{"content":"The best option for enabling <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> querying of a remote data source is to implement the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface.","pos":[3322,3515],"source":"The best option for enabling [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] querying of a remote data source is to implement the <xref:System.Linq.IQueryable%601> interface."},{"content":"However, this differs from extending a provider such as <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> for a data source.","pos":[3516,3659],"source":" However, this differs from extending a provider such as [!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)] for a data source."},{"content":"No provider models for extending existing <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> technologies, such as <ph id=\"ph2\">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph>, to other types of data source are available in <ph id=\"ph3\">[!INCLUDE[vs_orcas_long](../../../../csharp/misc/includes/vs_orcas_long_md.md)]</ph>.","pos":[3660,3988],"source":" No provider models for extending existing [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] technologies, such as [!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)], to other types of data source are available in [!INCLUDE[vs_orcas_long](../../../../csharp/misc/includes/vs_orcas_long_md.md)]."},{"pos":[3997,4022],"content":"IQueryable LINQ Providers","linkify":"IQueryable LINQ Providers","nodes":[{"content":"IQueryable LINQ Providers","pos":[0,25]}]},{"content":"providers that implement <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> can vary widely in their complexity.","pos":[4093,4188],"source":" providers that implement <xref:System.Linq.IQueryable%601> can vary widely in their complexity."},{"content":"This section discusses the different levels of complexity.","pos":[4189,4247]},{"content":"A less complex <ph id=\"ph1\">`IQueryable`</ph> provider might interface with a single method of a Web service.","pos":[4254,4345],"source":"A less complex `IQueryable` provider might interface with a single method of a Web service."},{"content":"This type of provider is very specific because it expects specific information in the queries that it handles.","pos":[4346,4456]},{"content":"It has a closed type system, perhaps exposing a single result type.","pos":[4457,4524]},{"content":"Most of the execution of the query occurs locally, for example by using the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable&gt;</ph> implementations of the standard query operators.","pos":[4525,4679],"source":" Most of the execution of the query occurs locally, for example by using the <xref:System.Linq.Enumerable> implementations of the standard query operators."},{"content":"A less complex provider might examine only one method call expression in the expression tree that represents the query, and let the remaining logic of the query be handled elsewhere.","pos":[4680,4862]},{"content":"An <ph id=\"ph1\">`IQueryable`</ph> provider of medium complexity might target a data source that has a partially expressive query language.","pos":[4869,4989],"source":"An `IQueryable` provider of medium complexity might target a data source that has a partially expressive query language."},{"content":"If it targets a Web service, it might interface with more than one method of the Web service and select the method to call based on the question that the query poses.","pos":[4990,5156]},{"content":"A provider of medium complexity would have a richer type system than a simple provider, but it would still be a fixed type system.","pos":[5157,5287]},{"content":"For example, the provider might expose types that have one-to-many relationships that can be traversed, but it would not provide mapping technology for user-defined types.","pos":[5288,5459]},{"content":"A complex <ph id=\"ph1\">`IQueryable`</ph> provider, such as the <ph id=\"ph2\">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> provider, might translate complete <ph id=\"ph3\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries to an expressive query language, such as SQL.","pos":[5466,5735],"source":"A complex `IQueryable` provider, such as the [!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)] provider, might translate complete [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] queries to an expressive query language, such as SQL."},{"content":"A complex provider is more general than a less complex provider, because it can handle a wider variety of questions in the query.","pos":[5736,5865]},{"content":"It also has an open type system and therefore must contain extensive infrastructure to map user-defined types.","pos":[5866,5976]},{"content":"Developing a complex provider requires a significant amount of effort.","pos":[5977,6047]},{"pos":[6056,6064],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph>","pos":[6068,6101],"source":"<xref:System.Linq.IQueryable%601> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>","pos":[6106,6155],"source":"<xref:System.Collections.Generic.IEnumerable%601> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable&gt;</ph>","pos":[6160,6189],"source":"<xref:System.Linq.Enumerable> "},{"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[6194,6324],"source":"[Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept>","pos":[6328,6421],"source":"[LINQ to Objects (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)"}]}