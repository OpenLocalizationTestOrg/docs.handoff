{"content":"---\ntitle: \"Obtaining a DbProviderFactory\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: a16e4a4d-6a5b-45db-8635-19570e4572ae\n---\n# Obtaining a DbProviderFactory\nThe process of obtaining a <xref:System.Data.Common.DbProviderFactory> involves passing information about a data provider to the <xref:System.Data.Common.DbProviderFactories> class. Based on this information, the <xref:System.Data.Common.DbProviderFactories.GetFactory%2A> method creates a strongly typed provider factory. For example, to create a <xref:System.Data.SqlClient.SqlClientFactory>, you can pass `GetFactory` a string with the provider name specified as \"System.Data.SqlClient\". The other overload of `GetFactory` takes a <xref:System.Data.DataRow>. Once you create the provider factory, you can then use its methods to create additional objects. Some of the methods of a `SqlClientFactory` include <xref:System.Data.SqlClient.SqlClientFactory.CreateConnection%2A>, <xref:System.Data.SqlClient.SqlClientFactory.CreateCommand%2A>, and <xref:System.Data.SqlClient.SqlClientFactory.CreateDataAdapter%2A>.  \n  \n> [!NOTE]\n>  The .NET Framework <xref:System.Data.OracleClient.OracleClientFactory>, <xref:System.Data.Odbc.OdbcFactory>, and <xref:System.Data.OleDb.OleDbFactory> classes also provide similar functionality.  \n  \n## Registering DbProviderFactories  \n Each .NET Framework data provider that supports a factory-based class registers configuration information in the **DbProviderFactories** section of the **machine.config** file on the local computer. The following configuration file fragment shows the syntax and format for <xref:System.Data.SqlClient>.  \n  \n```xml  \n<system.data>  \n  <DbProviderFactories>  \n    <add name=\"SqlClient Data Provider\"  \n     invariant=\"System.Data.SqlClient\"   \n     description=\".Net Framework Data Provider for SqlServer\"   \n     type=\"System.Data.SqlClient.SqlClientFactory, System.Data,   \n     Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"  \n    />  \n  </DbProviderFactories>  \n</system.data>  \n```  \n  \n The **invariant** attribute identifies the underlying data provider. This three-part naming syntax is also used when creating a new factory and for identifying the provider in an application configuration file so that the provider name, along with its associated connection string, can be retrieved at run time.  \n  \n## Retrieving Provider Information  \n You can retrieve information about all of the data providers installed on the local computer by using the <xref:System.Data.Common.DbProviderFactories.GetFactoryClasses%2A> method. It returns a <xref:System.Data.DataTable> named **DbProviderFactories** that contains the columns described in the following table.  \n  \n|Column ordinal|Column name|Example output|Description|  \n|--------------------|-----------------|--------------------|-----------------|  \n|0|**Name**|SqlClient Data Provider|Readable name for the data provider|  \n|1|**Description**|.Net Framework Data Provider for SqlServer|Readable description of the data provider|  \n|2|**InvariantName**|System.Data.SqlClient|Name that can be used programmatically to refer to the data provider|  \n|3|**AssemblyQualifiedName**|System.Data.SqlClient.SqlClientFactory, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089|Fully qualified name of the factory class, which contains enough information to instantiate the object|  \n  \n This `DataTable` can be used to enable a user to select a <xref:System.Data.DataRow> at run time. The selected `DataRow` can then be passed to the <xref:System.Data.Common.DbProviderFactories.GetFactory%2A> method to create a strongly typed <xref:System.Data.Common.DbProviderFactory>. A selected <xref:System.Data.DataRow> can be passed to the `GetFactory` method to create the desired `DbProviderFactory` object.  \n  \n## Listing the Installed Provider Factory Classes  \n This example demonstrates how to use the <xref:System.Data.Common.DbProviderFactories.GetFactoryClasses%2A> method to return a <xref:System.Data.DataTable> containing information about the installed providers. The code iterates through each row in the `DataTable`, displaying information for each installed provider in the console window.  \n  \n [!code-csharp[DataWorks DbProviderFactories#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DbProviderFactories/CS/source.cs#1)]\n [!code-vb[DataWorks DbProviderFactories#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DbProviderFactories/VB/source.vb#1)]  \n  \n## Using Application Configuration Files to Store Factory Information  \n The design pattern used for working with factories entails storing provider and connection string information in an application configuration file, such as **app.config** for a Windows application, and **web.config** for an ASP.NET application.  \n  \n The following configuration file fragment demonstrates how to save two named connection strings, \"NorthwindSQL\" for a connection to the Northwind database in SQL Server, and \"NorthwindAccess\" for a connection to the Northwind database in Access/Jet. The **invariant** name is used for the **providerName** attribute.  \n  \n```xml  \n<configuration>  \n  <connectionStrings>  \n    <clear/>  \n    <add name=\"NorthwindSQL\"   \n     providerName=\"System.Data.SqlClient\"   \n     connectionString=  \n     \"Data Source=MSSQL1;Initial Catalog=Northwind;Integrated Security=true\"  \n    />  \n  \n    <add name=\"NorthwindAccess\"   \n     providerName=\"System.Data.OleDb\"   \n     connectionString=  \n     \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\\Data\\Northwind.mdb;\"  \n    />  \n  </connectionStrings>  \n</configuration>  \n```  \n  \n### Retrieving a Connection String by Provider Name  \n In order to create a provider factory, you must supply a connection string as well as the provider name. This example demonstrates how to retrieve a connection string from an application configuration file by passing the provider name in the invariant format \"*System.Data.ProviderName*\". The code iterates through the <xref:System.Configuration.ConnectionStringSettingsCollection>. It returns the <xref:System.Configuration.ConnectionStringSettings.ProviderName%2A> on success; otherwise `null` (`Nothing` in Visual Basic). If there are multiple entries for a provider, the first one found is returned. For more information and examples of retrieving connection strings from configuration files, see [Connection Strings and Configuration Files](../../../../docs/framework/data/adonet/connection-strings-and-configuration-files.md).  \n  \n> [!NOTE]\n>  A reference to `System.Configuration.dll` is required in order for the code to run.  \n  \n [!code-csharp[DataWorks ConnectionStringSettings.RetrieveFromConfigByProvider#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks ConnectionStringSettings.RetrieveFromConfigByProvider/CS/source.cs#1)]\n [!code-vb[DataWorks ConnectionStringSettings.RetrieveFromConfigByProvider#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks ConnectionStringSettings.RetrieveFromConfigByProvider/VB/source.vb#1)]  \n  \n## Creating the DbProviderFactory and DbConnection  \n This example demonstrates how to create a <xref:System.Data.Common.DbProviderFactory> and <xref:System.Data.Common.DbConnection> object by passing it the provider name in the format \"*System.Data.ProviderName*\" and a connection string. A `DbConnection` object is returned on success; `null` (`Nothing` in Visual Basic) on any error.  \n  \n The code obtains the `DbProviderFactory` by calling <xref:System.Data.Common.DbProviderFactories.GetFactory%2A>. Then the <xref:System.Data.Common.DbProviderFactory.CreateConnection%2A> method creates the <xref:System.Data.Common.DbConnection> object and the <xref:System.Data.Common.DbConnection.ConnectionString%2A> property is set to the connection string.  \n  \n [!code-csharp[DataWorks DbProviderFactories.GetFactory#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DbProviderFactories.GetFactory/CS/source.cs#1)]\n [!code-vb[DataWorks DbProviderFactories.GetFactory#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DbProviderFactories.GetFactory/VB/source.vb#1)]  \n  \n## See also\n\n- [DbProviderFactories](../../../../docs/framework/data/adonet/dbproviderfactories.md)\n- [Connection Strings](../../../../docs/framework/data/adonet/connection-strings.md)\n- [Using the Configuration Classes](https://docs.microsoft.com/previous-versions/aspnet/ms228063(v=vs.100))\n- [ADO.NET Overview](ado-net-overview.md)\n","nodes":[{"pos":[4,147],"embed":true,"restype":"x-metadata","content":"title: \"Obtaining a DbProviderFactory\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nms.assetid: a16e4a4d-6a5b-45db-8635-19570e4572ae","nodes":[{"content":"Obtaining a DbProviderFactory","nodes":[{"pos":[0,29],"content":"Obtaining a DbProviderFactory","nodes":[{"content":"Obtaining a DbProviderFactory","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[154,183],"content":"Obtaining a DbProviderFactory","linkify":"Obtaining a DbProviderFactory","nodes":[{"content":"Obtaining a DbProviderFactory","pos":[0,29]}]},{"content":"The process of obtaining a <ph id=\"ph1\">&lt;xref:System.Data.Common.DbProviderFactory&gt;</ph> involves passing information about a data provider to the <ph id=\"ph2\">&lt;xref:System.Data.Common.DbProviderFactories&gt;</ph> class.","pos":[184,365],"source":"The process of obtaining a <xref:System.Data.Common.DbProviderFactory> involves passing information about a data provider to the <xref:System.Data.Common.DbProviderFactories> class."},{"content":"Based on this information, the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbProviderFactories.GetFactory%2A&gt;</ph> method creates a strongly typed provider factory.","pos":[366,506],"source":" Based on this information, the <xref:System.Data.Common.DbProviderFactories.GetFactory%2A> method creates a strongly typed provider factory."},{"content":"For example, to create a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlClientFactory&gt;</ph>, you can pass <ph id=\"ph2\">`GetFactory`</ph> a string with the provider name specified as \"System.Data.SqlClient\".","pos":[507,674],"source":" For example, to create a <xref:System.Data.SqlClient.SqlClientFactory>, you can pass `GetFactory` a string with the provider name specified as \"System.Data.SqlClient\"."},{"content":"The other overload of <ph id=\"ph1\">`GetFactory`</ph> takes a <ph id=\"ph2\">&lt;xref:System.Data.DataRow&gt;</ph>.","pos":[675,745],"source":" The other overload of `GetFactory` takes a <xref:System.Data.DataRow>."},{"content":"Once you create the provider factory, you can then use its methods to create additional objects.","pos":[746,842]},{"content":"Some of the methods of a <ph id=\"ph1\">`SqlClientFactory`</ph> include <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlClientFactory.CreateConnection%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Data.SqlClient.SqlClientFactory.CreateCommand%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Data.SqlClient.SqlClientFactory.CreateDataAdapter%2A&gt;</ph>.","pos":[843,1097],"source":" Some of the methods of a `SqlClientFactory` include <xref:System.Data.SqlClient.SqlClientFactory.CreateConnection%2A>, <xref:System.Data.SqlClient.SqlClientFactory.CreateCommand%2A>, and <xref:System.Data.SqlClient.SqlClientFactory.CreateDataAdapter%2A>."},{"pos":[1105,1310],"content":"[!NOTE]\n The .NET Framework <xref:System.Data.OracleClient.OracleClientFactory>, <xref:System.Data.Odbc.OdbcFactory>, and <xref:System.Data.OleDb.OleDbFactory> classes also provide similar functionality.","leadings":["","> "],"nodes":[{"content":"The .NET Framework <ph id=\"ph1\">&lt;xref:System.Data.OracleClient.OracleClientFactory&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Data.Odbc.OdbcFactory&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Data.OleDb.OleDbFactory&gt;</ph> classes also provide similar functionality.","pos":[9,203],"source":"The .NET Framework <xref:System.Data.OracleClient.OracleClientFactory>, <xref:System.Data.Odbc.OdbcFactory>, and <xref:System.Data.OleDb.OleDbFactory> classes also provide similar functionality."}]},{"pos":[1319,1350],"content":"Registering DbProviderFactories","linkify":"Registering DbProviderFactories","nodes":[{"content":"Registering DbProviderFactories","pos":[0,31]}]},{"content":"Each .NET Framework data provider that supports a factory-based class registers configuration information in the <bpt id=\"p1\">**</bpt>DbProviderFactories<ept id=\"p1\">**</ept> section of the <bpt id=\"p2\">**</bpt>machine.config<ept id=\"p2\">**</ept> file on the local computer.","pos":[1354,1552],"source":"Each .NET Framework data provider that supports a factory-based class registers configuration information in the **DbProviderFactories** section of the **machine.config** file on the local computer."},{"content":"The following configuration file fragment shows the syntax and format for <ph id=\"ph1\">&lt;xref:System.Data.SqlClient&gt;</ph>.","pos":[1553,1656],"source":" The following configuration file fragment shows the syntax and format for <xref:System.Data.SqlClient>."},{"content":"The <bpt id=\"p1\">**</bpt>invariant<ept id=\"p1\">**</ept> attribute identifies the underlying data provider.","pos":[2066,2134],"source":"The **invariant** attribute identifies the underlying data provider."},{"content":"This three-part naming syntax is also used when creating a new factory and for identifying the provider in an application configuration file so that the provider name, along with its associated connection string, can be retrieved at run time.","pos":[2135,2377]},{"pos":[2386,2417],"content":"Retrieving Provider Information","linkify":"Retrieving Provider Information","nodes":[{"content":"Retrieving Provider Information","pos":[0,31]}]},{"content":"You can retrieve information about all of the data providers installed on the local computer by using the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbProviderFactories.GetFactoryClasses%2A&gt;</ph> method.","pos":[2421,2601],"source":"You can retrieve information about all of the data providers installed on the local computer by using the <xref:System.Data.Common.DbProviderFactories.GetFactoryClasses%2A> method."},{"content":"It returns a <ph id=\"ph1\">&lt;xref:System.Data.DataTable&gt;</ph> named <bpt id=\"p1\">**</bpt>DbProviderFactories<ept id=\"p1\">**</ept> that contains the columns described in the following table.","pos":[2602,2733],"source":" It returns a <xref:System.Data.DataTable> named **DbProviderFactories** that contains the columns described in the following table."},{"content":"Column ordinal","pos":[2740,2754]},{"content":"Column name","pos":[2755,2766]},{"content":"Example output","pos":[2767,2781]},{"content":"Description","pos":[2782,2793]},{"content":"0","pos":[2880,2881]},{"pos":[2882,2890],"content":"<bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept>","source":"**Name**"},{"content":"SqlClient Data Provider","pos":[2891,2914]},{"content":"Readable name for the data provider","pos":[2915,2950]},{"content":"1","pos":[2955,2956]},{"pos":[2957,2972],"content":"<bpt id=\"p1\">**</bpt>Description<ept id=\"p1\">**</ept>","source":"**Description**"},{"content":".Net Framework Data Provider for SqlServer","pos":[2973,3015]},{"content":"Readable description of the data provider","pos":[3016,3057]},{"content":"2","pos":[3062,3063]},{"pos":[3064,3081],"content":"<bpt id=\"p1\">**</bpt>InvariantName<ept id=\"p1\">**</ept>","source":"**InvariantName**"},{"content":"System.Data.SqlClient","pos":[3082,3103]},{"content":"Name that can be used programmatically to refer to the data provider","pos":[3104,3172]},{"content":"3","pos":[3177,3178]},{"pos":[3179,3204],"content":"<bpt id=\"p1\">**</bpt>AssemblyQualifiedName<ept id=\"p1\">**</ept>","source":"**AssemblyQualifiedName**"},{"content":"System.Data.SqlClient.SqlClientFactory, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","pos":[3205,3323]},{"content":"Fully qualified name of the factory class, which contains enough information to instantiate the object","pos":[3324,3426]},{"content":"This <ph id=\"ph1\">`DataTable`</ph> can be used to enable a user to select a <ph id=\"ph2\">&lt;xref:System.Data.DataRow&gt;</ph> at run time.","pos":[3434,3531],"source":"This `DataTable` can be used to enable a user to select a <xref:System.Data.DataRow> at run time."},{"content":"The selected <ph id=\"ph1\">`DataRow`</ph> can then be passed to the <ph id=\"ph2\">&lt;xref:System.Data.Common.DbProviderFactories.GetFactory%2A&gt;</ph> method to create a strongly typed <ph id=\"ph3\">&lt;xref:System.Data.Common.DbProviderFactory&gt;</ph>.","pos":[3532,3719],"source":" The selected `DataRow` can then be passed to the <xref:System.Data.Common.DbProviderFactories.GetFactory%2A> method to create a strongly typed <xref:System.Data.Common.DbProviderFactory>."},{"content":"A selected <ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph> can be passed to the <ph id=\"ph2\">`GetFactory`</ph> method to create the desired <ph id=\"ph3\">`DbProviderFactory`</ph> object.","pos":[3720,3848],"source":" A selected <xref:System.Data.DataRow> can be passed to the `GetFactory` method to create the desired `DbProviderFactory` object."},{"pos":[3857,3903],"content":"Listing the Installed Provider Factory Classes","linkify":"Listing the Installed Provider Factory Classes","nodes":[{"content":"Listing the Installed Provider Factory Classes","pos":[0,46]}]},{"content":"This example demonstrates how to use the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbProviderFactories.GetFactoryClasses%2A&gt;</ph> method to return a <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> containing information about the installed providers.","pos":[3907,4116],"source":"This example demonstrates how to use the <xref:System.Data.Common.DbProviderFactories.GetFactoryClasses%2A> method to return a <xref:System.Data.DataTable> containing information about the installed providers."},{"content":"The code iterates through each row in the <ph id=\"ph1\">`DataTable`</ph>, displaying information for each installed provider in the console window.","pos":[4117,4245],"source":" The code iterates through each row in the `DataTable`, displaying information for each installed provider in the console window."},{"pos":[4562,4628],"content":"Using Application Configuration Files to Store Factory Information","linkify":"Using Application Configuration Files to Store Factory Information","nodes":[{"content":"Using Application Configuration Files to Store Factory Information","pos":[0,66]}]},{"pos":[4632,4876],"content":"The design pattern used for working with factories entails storing provider and connection string information in an application configuration file, such as <bpt id=\"p1\">**</bpt>app.config<ept id=\"p1\">**</ept> for a Windows application, and <bpt id=\"p2\">**</bpt>web.config<ept id=\"p2\">**</ept> for an ASP.NET application.","source":"The design pattern used for working with factories entails storing provider and connection string information in an application configuration file, such as **app.config** for a Windows application, and **web.config** for an ASP.NET application."},{"content":"The following configuration file fragment demonstrates how to save two named connection strings, \"NorthwindSQL\" for a connection to the Northwind database in SQL Server, and \"NorthwindAccess\" for a connection to the Northwind database in Access/Jet.","pos":[4883,5132]},{"content":"The <bpt id=\"p1\">**</bpt>invariant<ept id=\"p1\">**</ept> name is used for the <bpt id=\"p2\">**</bpt>providerName<ept id=\"p2\">**</ept> attribute.","pos":[5133,5199],"source":" The **invariant** name is used for the **providerName** attribute."},{"pos":[5708,5755],"content":"Retrieving a Connection String by Provider Name","linkify":"Retrieving a Connection String by Provider Name","nodes":[{"content":"Retrieving a Connection String by Provider Name","pos":[0,47]}]},{"content":"In order to create a provider factory, you must supply a connection string as well as the provider name.","pos":[5759,5863]},{"content":"This example demonstrates how to retrieve a connection string from an application configuration file by passing the provider name in the invariant format \"<bpt id=\"p1\">*</bpt>System.Data.ProviderName<ept id=\"p1\">*</ept>\".","pos":[5864,6047],"source":" This example demonstrates how to retrieve a connection string from an application configuration file by passing the provider name in the invariant format \"*System.Data.ProviderName*\"."},{"content":"The code iterates through the <ph id=\"ph1\">&lt;xref:System.Configuration.ConnectionStringSettingsCollection&gt;</ph>.","pos":[6048,6141],"source":" The code iterates through the <xref:System.Configuration.ConnectionStringSettingsCollection>."},{"content":"It returns the <ph id=\"ph1\">&lt;xref:System.Configuration.ConnectionStringSettings.ProviderName%2A&gt;</ph> on success; otherwise <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph> in Visual Basic).","pos":[6142,6283],"source":" It returns the <xref:System.Configuration.ConnectionStringSettings.ProviderName%2A> on success; otherwise `null` (`Nothing` in Visual Basic)."},{"content":"If there are multiple entries for a provider, the first one found is returned.","pos":[6284,6362]},{"content":"For more information and examples of retrieving connection strings from configuration files, see <bpt id=\"p1\">[</bpt>Connection Strings and Configuration Files<ept id=\"p1\">](../../../../docs/framework/data/adonet/connection-strings-and-configuration-files.md)</ept>.","pos":[6363,6591],"source":" For more information and examples of retrieving connection strings from configuration files, see [Connection Strings and Configuration Files](../../../../docs/framework/data/adonet/connection-strings-and-configuration-files.md)."},{"pos":[6599,6693],"content":"[!NOTE]\n A reference to `System.Configuration.dll` is required in order for the code to run.","leadings":["","> "],"nodes":[{"content":"A reference to <ph id=\"ph1\">`System.Configuration.dll`</ph> is required in order for the code to run.","pos":[9,92],"source":"A reference to `System.Configuration.dll` is required in order for the code to run."}]},{"pos":[7146,7193],"content":"Creating the DbProviderFactory and DbConnection","linkify":"Creating the DbProviderFactory and DbConnection","nodes":[{"content":"Creating the DbProviderFactory and DbConnection","pos":[0,47]}]},{"content":"This example demonstrates how to create a <ph id=\"ph1\">&lt;xref:System.Data.Common.DbProviderFactory&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.Common.DbConnection&gt;</ph> object by passing it the provider name in the format \"<bpt id=\"p1\">*</bpt>System.Data.ProviderName<ept id=\"p1\">*</ept>\" and a connection string.","pos":[7197,7432],"source":"This example demonstrates how to create a <xref:System.Data.Common.DbProviderFactory> and <xref:System.Data.Common.DbConnection> object by passing it the provider name in the format \"*System.Data.ProviderName*\" and a connection string."},{"content":"A <ph id=\"ph1\">`DbConnection`</ph> object is returned on success; <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph> in Visual Basic) on any error.","pos":[7433,7529],"source":" A `DbConnection` object is returned on success; `null` (`Nothing` in Visual Basic) on any error."},{"content":"The code obtains the <ph id=\"ph1\">`DbProviderFactory`</ph> by calling <ph id=\"ph2\">&lt;xref:System.Data.Common.DbProviderFactories.GetFactory%2A&gt;</ph>.","pos":[7536,7648],"source":"The code obtains the `DbProviderFactory` by calling <xref:System.Data.Common.DbProviderFactories.GetFactory%2A>."},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbProviderFactory.CreateConnection%2A&gt;</ph> method creates the <ph id=\"ph2\">&lt;xref:System.Data.Common.DbConnection&gt;</ph> object and the <ph id=\"ph3\">&lt;xref:System.Data.Common.DbConnection.ConnectionString%2A&gt;</ph> property is set to the connection string.","pos":[7649,7895],"source":" Then the <xref:System.Data.Common.DbProviderFactory.CreateConnection%2A> method creates the <xref:System.Data.Common.DbConnection> object and the <xref:System.Data.Common.DbConnection.ConnectionString%2A> property is set to the connection string."},{"pos":[8256,8264],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8268,8352],"content":"<bpt id=\"p1\">[</bpt>DbProviderFactories<ept id=\"p1\">](../../../../docs/framework/data/adonet/dbproviderfactories.md)</ept>","source":"[DbProviderFactories](../../../../docs/framework/data/adonet/dbproviderfactories.md)"},{"pos":[8355,8437],"content":"<bpt id=\"p1\">[</bpt>Connection Strings<ept id=\"p1\">](../../../../docs/framework/data/adonet/connection-strings.md)</ept>","source":"[Connection Strings](../../../../docs/framework/data/adonet/connection-strings.md)"},{"pos":[8440,8545],"content":"<bpt id=\"p1\">[</bpt>Using the Configuration Classes<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/aspnet/ms228063(v=vs.100))</ept>","source":"[Using the Configuration Classes](https://docs.microsoft.com/previous-versions/aspnet/ms228063(v=vs.100))"},{"pos":[8548,8587],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Overview<ept id=\"p1\">](ado-net-overview.md)</ept>","source":"[ADO.NET Overview](ado-net-overview.md)"}]}