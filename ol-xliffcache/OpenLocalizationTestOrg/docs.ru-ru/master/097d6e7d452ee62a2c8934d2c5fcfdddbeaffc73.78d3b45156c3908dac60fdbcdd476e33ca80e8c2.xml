{"content":"---\ntitle: \"ISOF (Entity SQL)\"\nms.date: \"03/30/2017\"\nms.assetid: 5b2b0d34-d0a7-4bcd-baf2-58aa8456d00b\n---\n# ISOF (Entity SQL)\nDetermines whether the type of an expression is of the specified type or one of its subtypes.  \n  \n## Syntax  \n  \n```  \nexpression IS [ NOT ] OF ( [ ONLY ] type )  \n```  \n  \n## Arguments  \n `expression`  \n Any valid query expression to determine the type of.  \n  \n NOT  \n Negates the EDM.Boolean result of IS OF.  \n  \n ONLY  \n Specifies that IS OF returns `true` only if `expression` is of type `type` and not any of one its subtypes.  \n  \n `type`  \n The type to test `expression` against. The type must be namespace-qualified.  \n  \n## Return Value  \n `true` if `expression` is of type T and T is either a base type, or a derived type of `type`; null if `expression` is null at runtime; otherwise, `false`.  \n  \n## Remarks  \n The expressions `expression IS NOT OF (type)` and `expression IS NOT OF (ONLY type)` are syntactically equivalent to `NOT (expression IS OF (type))` and `NOT (expression IS OF (ONLY type))`, respectively.  \n  \n The following table shows the behavior of `IS OF` operator over some typical- and corner patterns. All exceptions are thrown from the client side before the provider gets invoked:  \n  \n|Pattern|Behavior|  \n|-------------|--------------|  \n|null IS OF (EntityType)|Throws|  \n|null IS OF (ComplexType)|Throws|  \n|null IS OF (RowType)|Throws|  \n|TREAT (null AS EntityType) IS OF (EntityType)|Returns DBNull|  \n|TREAT (null AS ComplexType) IS OF (ComplexType)|Throws|  \n|TREAT (null AS RowType) IS OF (RowType)|Throws|  \n|EntityType IS OF (EntityType)|Returns true/false|  \n|ComplexType IS OF (ComplexType)|Throws|  \n|RowType IS OF (RowType)|Throws|  \n  \n## Example  \n The following [!INCLUDE[esql](../../../../../../includes/esql-md.md)] query uses the IS OF operator to determine the type of a query expression, and then uses the TREAT operator to convert an object of the type Course to a collection of objects of the type OnsiteCourse. The query is based on the [School Model](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896300(v=vs.100)).  \n  \n [!code-csharp[DP EntityServices Concepts 2#TREAT_ISOF](../../../../../../samples/snippets/csharp/VS_Snippets_Data/dp entityservices concepts 2/cs/entitysql.cs#treat_isof)]  \n  \n## See also\n\n- [Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)\n","nodes":[{"pos":[4,101],"embed":true,"restype":"x-metadata","content":"title: \"ISOF (Entity SQL)\"\nms.date: \"03/30/2017\"\nms.assetid: 5b2b0d34-d0a7-4bcd-baf2-58aa8456d00b","nodes":[{"content":"ISOF (Entity SQL)","nodes":[{"pos":[0,17],"content":"ISOF (Entity SQL)","nodes":[{"content":"ISOF (Entity SQL)","pos":[0,17]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[108,125],"content":"ISOF (Entity SQL)","linkify":"ISOF (Entity SQL)","nodes":[{"content":"ISOF (Entity SQL)","pos":[0,17]}]},{"content":"Determines whether the type of an expression is of the specified type or one of its subtypes.","pos":[126,219]},{"pos":[228,234],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[303,312],"content":"Arguments","linkify":"Arguments","nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"Any valid query expression to determine the type of.","pos":[332,384]},{"content":"NOT","pos":[391,394]},{"content":"Negates the EDM.Boolean result of IS OF.","pos":[398,438]},{"content":"ONLY","pos":[445,449]},{"content":"Specifies that IS OF returns <ph id=\"ph1\">`true`</ph> only if <ph id=\"ph2\">`expression`</ph> is of type <ph id=\"ph3\">`type`</ph> and not any of one its subtypes.","pos":[453,560],"source":"Specifies that IS OF returns `true` only if `expression` is of type `type` and not any of one its subtypes."},{"content":"The type to test <ph id=\"ph1\">`expression`</ph> against.","pos":[577,615],"source":"The type to test `expression` against."},{"content":"The type must be namespace-qualified.","pos":[616,653]},{"pos":[662,674],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[678,832],"content":"<ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`expression`</ph> is of type T and T is either a base type, or a derived type of <ph id=\"ph3\">`type`</ph>; null if <ph id=\"ph4\">`expression`</ph> is null at runtime; otherwise, <ph id=\"ph5\">`false`</ph>.","source":"`true` if `expression` is of type T and T is either a base type, or a derived type of `type`; null if `expression` is null at runtime; otherwise, `false`."},{"pos":[841,848],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[852,1056],"content":"The expressions <ph id=\"ph1\">`expression IS NOT OF (type)`</ph> and <ph id=\"ph2\">`expression IS NOT OF (ONLY type)`</ph> are syntactically equivalent to <ph id=\"ph3\">`NOT (expression IS OF (type))`</ph> and <ph id=\"ph4\">`NOT (expression IS OF (ONLY type))`</ph>, respectively.","source":"The expressions `expression IS NOT OF (type)` and `expression IS NOT OF (ONLY type)` are syntactically equivalent to `NOT (expression IS OF (type))` and `NOT (expression IS OF (ONLY type))`, respectively."},{"content":"The following table shows the behavior of <ph id=\"ph1\">`IS OF`</ph> operator over some typical- and corner patterns.","pos":[1063,1161],"source":"The following table shows the behavior of `IS OF` operator over some typical- and corner patterns."},{"content":"All exceptions are thrown from the client side before the provider gets invoked:","pos":[1162,1242]},{"content":"Pattern","pos":[1249,1256]},{"content":"Behavior","pos":[1257,1265]},{"content":"null IS OF (EntityType)","pos":[1303,1326]},{"content":"Throws","pos":[1327,1333]},{"content":"null IS OF (ComplexType)","pos":[1338,1362]},{"content":"Throws","pos":[1363,1369]},{"content":"null IS OF (RowType)","pos":[1374,1394]},{"content":"Throws","pos":[1395,1401]},{"content":"TREAT (null AS EntityType) IS OF (EntityType)","pos":[1406,1451]},{"content":"Returns DBNull","pos":[1452,1466]},{"content":"TREAT (null AS ComplexType) IS OF (ComplexType)","pos":[1471,1518]},{"content":"Throws","pos":[1519,1525]},{"content":"TREAT (null AS RowType) IS OF (RowType)","pos":[1530,1569]},{"content":"Throws","pos":[1570,1576]},{"content":"EntityType IS OF (EntityType)","pos":[1581,1610]},{"content":"Returns true/false","pos":[1611,1629]},{"content":"ComplexType IS OF (ComplexType)","pos":[1634,1665]},{"content":"Throws","pos":[1666,1672]},{"content":"RowType IS OF (RowType)","pos":[1677,1700]},{"content":"Throws","pos":[1701,1707]},{"pos":[1717,1724],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> query uses the IS OF operator to determine the type of a query expression, and then uses the TREAT operator to convert an object of the type Course to a collection of objects of the type OnsiteCourse.","pos":[1728,1998],"source":"The following [!INCLUDE[esql](../../../../../../includes/esql-md.md)] query uses the IS OF operator to determine the type of a query expression, and then uses the TREAT operator to convert an object of the type Course to a collection of objects of the type OnsiteCourse."},{"content":"The query is based on the <bpt id=\"p1\">[</bpt>School Model<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896300(v=vs.100))</ept>.","pos":[1999,2129],"source":" The query is based on the [School Model](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896300(v=vs.100))."},{"pos":[2316,2324],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2328,2442],"content":"<bpt id=\"p1\">[</bpt>Entity SQL Reference<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept>","source":"[Entity SQL Reference](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)"}]}