{"content":"---\ntitle: How to create a .NET Core Global Tool\ndescription: Describes how to create a Global Tool. The Global Tool is a console application that is installed through the .NET Core CLI.\nauthor: Thraka\nms.author: adegeo\nms.date: 08/22/2018\n---\n\n# Create a .NET Core Global Tool using the .NET Core CLI\n\nThis article teaches you how to create and package a .NET Core Global Tool. The .NET Core CLI allows you to create a console application as a Global Tool, which others can easily install and run. .NET Core Global Tools are NuGet packages that are installed from the .NET Core CLI. For more information about Global Tools, see [.NET Core Global Tools overview](global-tools.md).\n\n[!INCLUDE [topic-appliesto-net-core-21plus.md](../../../includes/topic-appliesto-net-core-21plus.md)]\n\n## Create a project\n\nThis article uses the .NET Core CLI to create and manage a project.\n\nOur example tool will be a console application that generates an ASCII bot and prints a message. First, create a new .NET Core Console Application.\n\n```console\ndotnet new console -o botsay\n```\n\nNavigate to the `botsay` directory created by the previous command.\n\n## Add the code\n\nOpen the `Program.cs` file with your favorite text editor, such as `vim` or [Visual Studio Code](https://code.visualstudio.com/).\n\nAdd the following `using` directive to the top of the file, this helps shorten the code to display the version information of the application.\n\n```csharp\nusing System.Reflection;\n```\n\nNext, move down to the `Main` method. Replace the method with the following code to process the command-line arguments for your application. If no arguments were passed, a short help message is displayed. Otherwise, all of those arguments are transformed into a string and printed with the bot.\n\n```csharp\nstatic void Main(string[] args)\n{\n    if (args.Length == 0)\n    {\n        var versionString = Assembly.GetEntryAssembly()\n                                .GetCustomAttribute<AssemblyInformationalVersionAttribute>()\n                                .InformationalVersion\n                                .ToString();\n\n        Console.WriteLine($\"botsay v{versionString}\");\n        Console.WriteLine(\"-------------\");\n        Console.WriteLine(\"\\nUsage:\");\n        Console.WriteLine(\"  botsay <message>\");\n        return;\n    }\n\n    ShowBot(string.Join(' ', args));\n}\n```\n\n### Create the bot\n\nNext, add a new method named `ShowBot` that takes a string parameter. This method prints out the message and the ASCII bot. The ASCII bot code was taken from the [dotnetbot](https://github.com/dotnet/core/blob/master/samples/dotnetsay/Program.cs) sample.\n\n```csharp\nstatic void ShowBot(string message)\n{\n    string bot = $\"\\n        {message}\";\n    bot += @\"\n    __________________\n                      \\\n                       \\\n                          ....\n                          ....'\n                           ....\n                        ..........\n                    .............'..'..\n                 ................'..'.....\n               .......'..........'..'..'....\n              ........'..........'..'..'.....\n             .'....'..'..........'..'.......'.\n             .'..................'...   ......\n             .  ......'.........         .....\n             .    _            __        ......\n            ..    #            ##        ......\n           ....       .                 .......\n           ......  .......          ............\n            ................  ......................\n            ........................'................\n           ......................'..'......    .......\n        .........................'..'.....       .......\n     ........    ..'.............'..'....      ..........\n   ..'..'...      ...............'.......      ..........\n  ...'......     ...... ..........  ......         .......\n ...........   .......              ........        ......\n.......        '...'.'.              '.'.'.'         ....\n.......       .....'..               ..'.....\n   ..       ..........               ..'........\n          ............               ..............\n         .............               '..............\n        ...........'..              .'.'............\n       ...............              .'.'.............\n      .............'..               ..'..'...........\n      ...............                 .'..............\n       .........                        ..............\n        .....\n\";\n    Console.WriteLine(bot);\n}\n```\n\n### Test the tool\n\nRun the project and see the output. Try these variations of the command-line to see different results:\n\n```csharp\ndotnet run\ndotnet run -- \"Hello from the bot\"\ndotnet run -- hello from the bot\n```\n\nAll arguments after the `--` delimiter are passed to your application.\n\n## Setup the global tool\n\nBefore you can pack and distribute the application as a Global Tool, you need to modify the project file. Open the `botsay.csproj` file and add three new XML nodes to the `<Project><PropertyGroup>` node:\n\n- `<PackAsTool>`\\\n[REQUIRED] Indicates that the application will be packaged for install as a Global Tool.\n\n- `<ToolCommandName>`\\\n[OPTIONAL] An alternative name for the tool, otherwise the command name for the tool will be named after the project file. You can have multiple tools in a package, choosing a unique and friendly name helps differentiate from other tools in the same package.\n\n- `<PackageOutputPath>`\\\n[OPTIONAL] Where the NuGet package will be produced. The NuGet package is what the .NET Core CLI Global Tools uses to install your tool.\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp2.1</TargetFramework>\n\n    <PackAsTool>true</PackAsTool>\n    <ToolCommandName>botsay</ToolCommandName>\n    <PackageOutputPath>./nupkg</PackageOutputPath>\n\n  </PropertyGroup>\n\n</Project>\n```\n\nEven though `<PackageOutputPath>` is optional, use it in this example. Make sure you set it: `<PackageOutputPath>./nupkg</PackageOutputPath>`.\n\nNext, create a NuGet package for your application.\n\n```console\ndotnet pack\n```\n\nThe `botsay.1.0.0.nupkg` file is created in the folder identified by the `<PackageOutputPath>` XML value from the `botsay.csproj` file, which in this example is the `./nupkg` folder. This makes it easy to install and test. When you want to release a tool publicly, upload it to [https://www.nuget.org](https://www.nuget.org). Once the tool is available on NuGet, developers can perform a user-wide installation of the tool using the `--global` option of the [dotnet tool install](dotnet-tool-install.md) command.\n\nNow that you have a package, install the tool from that package:\n\n```console\ndotnet tool install --global --add-source ./nupkg botsay\n```\n\nThe `--add-source` parameter tells the .NET Core CLI to temporarily use the `./nupkg` folder (our `<PackageOutputPath>` folder) as an additional source feed for NuGet packages. For more information about installing Global Tools, see [.NET Core Global Tools overview](global-tools.md).\n\nIf installation is successful, a message is displayed showing the command used to call the tool and the version installed, similar to the following example:\n\n```\nYou can invoke the tool using the following command: botsay\nTool 'botsay' (version '1.0.0') was successfully installed.\n```\n\nYou should now be able to type `botsay` and get a response from the tool.\n\n> [!NOTE]\n> If the install was successful, but you cannot use the `botsay` command, you may need to open a new terminal to refresh the PATH.\n\n## Remove the tool\n\nOnce you're done experimenting with the tool, you can remove it with the following command:\n\n```console\ndotnet tool uninstall -g botsay\n```\n","nodes":[{"pos":[4,239],"embed":true,"restype":"x-metadata","content":"title: How to create a .NET Core Global Tool\ndescription: Describes how to create a Global Tool. The Global Tool is a console application that is installed through the .NET Core CLI.\nauthor: Thraka\nms.author: adegeo\nms.date: 08/22/2018","nodes":[{"content":"How to create a .NET Core Global Tool","nodes":[{"pos":[0,37],"content":"How to create a .NET Core Global Tool","nodes":[{"content":"How to create a .NET Core Global Tool","pos":[0,37]}]}],"path":["title"],"nosxs":false},{"content":"Describes how to create a Global Tool. The Global Tool is a console application that is installed through the .NET Core CLI.","nodes":[{"pos":[0,124],"content":"Describes how to create a Global Tool. The Global Tool is a console application that is installed through the .NET Core CLI.","nodes":[{"content":"Describes how to create a Global Tool. The Global Tool is a console application that is installed through the .NET Core CLI.","pos":[0,124],"nodes":[{"content":"Describes how to create a Global Tool.","pos":[0,38]},{"content":"The Global Tool is a console application that is installed through the .NET Core CLI.","pos":[39,124]}]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[247,301],"content":"Create a .NET Core Global Tool using the .NET Core CLI","linkify":"Create a .NET Core Global Tool using the .NET Core CLI","nodes":[{"content":"Create a .NET Core Global Tool using the .NET Core CLI","pos":[0,54]}]},{"content":"This article teaches you how to create and package a .NET Core Global Tool.","pos":[303,378]},{"content":"The .NET Core CLI allows you to create a console application as a Global Tool, which others can easily install and run.","pos":[379,498]},{"content":".NET Core Global Tools are NuGet packages that are installed from the .NET Core CLI.","pos":[499,583]},{"content":"For more information about Global Tools, see <bpt id=\"p1\">[</bpt>.NET Core Global Tools overview<ept id=\"p1\">](global-tools.md)</ept>.","pos":[584,680],"source":" For more information about Global Tools, see [.NET Core Global Tools overview](global-tools.md)."},{"pos":[788,804],"content":"Create a project","linkify":"Create a project","nodes":[{"content":"Create a project","pos":[0,16]}]},{"content":"This article uses the .NET Core CLI to create and manage a project.","pos":[806,873]},{"content":"Our example tool will be a console application that generates an ASCII bot and prints a message.","pos":[875,971]},{"content":"First, create a new .NET Core Console Application.","pos":[972,1022]},{"pos":[1069,1136],"content":"Navigate to the <ph id=\"ph1\">`botsay`</ph> directory created by the previous command.","source":"Navigate to the `botsay` directory created by the previous command."},{"pos":[1141,1153],"content":"Add the code","linkify":"Add the code","nodes":[{"content":"Add the code","pos":[0,12]}]},{"pos":[1155,1284],"content":"Open the <ph id=\"ph1\">`Program.cs`</ph> file with your favorite text editor, such as <ph id=\"ph2\">`vim`</ph> or <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](https://code.visualstudio.com/)</ept>.","source":"Open the `Program.cs` file with your favorite text editor, such as `vim` or [Visual Studio Code](https://code.visualstudio.com/)."},{"pos":[1286,1428],"content":"Add the following <ph id=\"ph1\">`using`</ph> directive to the top of the file, this helps shorten the code to display the version information of the application.","source":"Add the following `using` directive to the top of the file, this helps shorten the code to display the version information of the application."},{"content":"Next, move down to the <ph id=\"ph1\">`Main`</ph> method.","pos":[1470,1507],"source":"Next, move down to the `Main` method."},{"content":"Replace the method with the following code to process the command-line arguments for your application.","pos":[1508,1610]},{"content":"If no arguments were passed, a short help message is displayed.","pos":[1611,1674]},{"content":"Otherwise, all of those arguments are transformed into a string and printed with the bot.","pos":[1675,1764]},{"pos":[2349,2363],"content":"Create the bot","linkify":"Create the bot","nodes":[{"content":"Create the bot","pos":[0,14]}]},{"content":"Next, add a new method named <ph id=\"ph1\">`ShowBot`</ph> that takes a string parameter.","pos":[2365,2434],"source":"Next, add a new method named `ShowBot` that takes a string parameter."},{"content":"This method prints out the message and the ASCII bot.","pos":[2435,2488]},{"content":"The ASCII bot code was taken from the <bpt id=\"p1\">[</bpt>dotnetbot<ept id=\"p1\">](https://github.com/dotnet/core/blob/master/samples/dotnetsay/Program.cs)</ept> sample.","pos":[2489,2619],"source":" The ASCII bot code was taken from the [dotnetbot](https://github.com/dotnet/core/blob/master/samples/dotnetsay/Program.cs) sample."},{"pos":[4473,4486],"content":"Test the tool","linkify":"Test the tool","nodes":[{"content":"Test the tool","pos":[0,13]}]},{"content":"Run the project and see the output.","pos":[4488,4523]},{"content":"Try these variations of the command-line to see different results:","pos":[4524,4590]},{"pos":[4686,4756],"content":"All arguments after the <ph id=\"ph1\">`--`</ph> delimiter are passed to your application.","source":"All arguments after the `--` delimiter are passed to your application."},{"pos":[4761,4782],"content":"Setup the global tool","linkify":"Setup the global tool","nodes":[{"content":"Setup the global tool","pos":[0,21]}]},{"content":"Before you can pack and distribute the application as a Global Tool, you need to modify the project file.","pos":[4784,4889]},{"content":"Open the <ph id=\"ph1\">`botsay.csproj`</ph> file and add three new XML nodes to the <ph id=\"ph2\">`&lt;Project&gt;&lt;PropertyGroup&gt;`</ph> node:","pos":[4890,4987],"source":" Open the `botsay.csproj` file and add three new XML nodes to the `<Project><PropertyGroup>` node:"},{"content":"[REQUIRED] Indicates that the application will be packaged for install as a Global Tool.","pos":[5007,5095]},{"content":"[OPTIONAL] An alternative name for the tool, otherwise the command name for the tool will be named after the project file.","pos":[5120,5242]},{"content":"You can have multiple tools in a package, choosing a unique and friendly name helps differentiate from other tools in the same package.","pos":[5243,5378]},{"content":"[OPTIONAL] Where the NuGet package will be produced.","pos":[5405,5457]},{"content":"The NuGet package is what the .NET Core CLI Global Tools uses to install your tool.","pos":[5458,5541]},{"content":"Even though <ph id=\"ph1\">`&lt;PackageOutputPath&gt;`</ph> is optional, use it in this example.","pos":[5858,5928],"source":"Even though `<PackageOutputPath>` is optional, use it in this example."},{"content":"Make sure you set it: <ph id=\"ph1\">`&lt;PackageOutputPath&gt;./nupkg&lt;/PackageOutputPath&gt;`</ph>.","pos":[5929,6000],"source":" Make sure you set it: `<PackageOutputPath>./nupkg</PackageOutputPath>`."},{"content":"Next, create a NuGet package for your application.","pos":[6002,6052]},{"content":"The <ph id=\"ph1\">`botsay.1.0.0.nupkg`</ph> file is created in the folder identified by the <ph id=\"ph2\">`&lt;PackageOutputPath&gt;`</ph> XML value from the <ph id=\"ph3\">`botsay.csproj`</ph> file, which in this example is the <ph id=\"ph4\">`./nupkg`</ph> folder.","pos":[6082,6264],"source":"The `botsay.1.0.0.nupkg` file is created in the folder identified by the `<PackageOutputPath>` XML value from the `botsay.csproj` file, which in this example is the `./nupkg` folder."},{"content":"This makes it easy to install and test.","pos":[6265,6304]},{"content":"When you want to release a tool publicly, upload it to <bpt id=\"p1\">[</bpt><ph id=\"ph1\">https://www.nuget.org</ph><ept id=\"p1\">](https://www.nuget.org)</ept>. Once the tool is available on NuGet, developers can perform a user-wide installation of the tool using the <ph id=\"ph2\">`--global`</ph> option of the <bpt id=\"p2\">[</bpt>dotnet tool install<ept id=\"p2\">](dotnet-tool-install.md)</ept> command.","pos":[6305,6594],"source":" When you want to release a tool publicly, upload it to [https://www.nuget.org](https://www.nuget.org). Once the tool is available on NuGet, developers can perform a user-wide installation of the tool using the `--global` option of the [dotnet tool install](dotnet-tool-install.md) command."},{"content":"Now that you have a package, install the tool from that package:","pos":[6596,6660]},{"content":"The <ph id=\"ph1\">`--add-source`</ph> parameter tells the .NET Core CLI to temporarily use the <ph id=\"ph2\">`./nupkg`</ph> folder (our <ph id=\"ph3\">`&lt;PackageOutputPath&gt;`</ph> folder) as an additional source feed for NuGet packages.","pos":[6735,6911],"source":"The `--add-source` parameter tells the .NET Core CLI to temporarily use the `./nupkg` folder (our `<PackageOutputPath>` folder) as an additional source feed for NuGet packages."},{"content":"For more information about installing Global Tools, see <bpt id=\"p1\">[</bpt>.NET Core Global Tools overview<ept id=\"p1\">](global-tools.md)</ept>.","pos":[6912,7019],"source":" For more information about installing Global Tools, see [.NET Core Global Tools overview](global-tools.md)."},{"content":"If installation is successful, a message is displayed showing the command used to call the tool and the version installed, similar to the following example:","pos":[7021,7177]},{"pos":[7308,7381],"content":"You should now be able to type <ph id=\"ph1\">`botsay`</ph> and get a response from the tool.","source":"You should now be able to type `botsay` and get a response from the tool."},{"pos":[7385,7523],"content":"[!NOTE]\nIf the install was successful, but you cannot use the `botsay` command, you may need to open a new terminal to refresh the PATH.","leadings":["","> "],"nodes":[{"content":"If the install was successful, but you cannot use the <ph id=\"ph1\">`botsay`</ph> command, you may need to open a new terminal to refresh the PATH.","pos":[8,136],"source":"If the install was successful, but you cannot use the `botsay` command, you may need to open a new terminal to refresh the PATH."}]},{"pos":[7528,7543],"content":"Remove the tool","linkify":"Remove the tool","nodes":[{"content":"Remove the tool","pos":[0,15]}]},{"content":"Once you're done experimenting with the tool, you can remove it with the following command:","pos":[7545,7636]}]}