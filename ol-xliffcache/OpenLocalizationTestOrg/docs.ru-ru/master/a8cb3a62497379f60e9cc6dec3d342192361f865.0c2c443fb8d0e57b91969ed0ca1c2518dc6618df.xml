{"content":"---\ntitle: \"How to: Parse Strings Using String.Split (C# Guide)\"\ndescription: String.Split returns an array of strings split from a set of delimiters. It's an easy way to parse strings.\nms.date: 01/03/2018\nhelpviewer_keywords: \n  - \"splitting strings [C#]\"\n  - \"Split method [C#]\"\n  - \"strings [C#], splitting\"\n  - \"parse strings\"\nms.assetid: 729c2923-4169-41c6-9c90-ef176c1e2953\nms.custom: mvc\n---\n# How to: Parse Strings Using String.Split (C# Guide)\n\nThe <xref:System.String.Split%2A?displayProperty=nameWithType> method creates an\narray of substrings by splitting the input string based on one or more delimiters. It is often the easiest way to separate a string on word boundaries. It is also used\nto split strings on other specific characters or strings.\n\n[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]\n\nThe following code splits a common phrase into an array of strings for each word.\n\n[!code-csharp-interactive[split strings on word boundaries](../../../samples/snippets/csharp/how-to/strings/ParseStringsUsingSplit.cs#1)]\n\nEvery instance of a separator character produces a value in the\nreturned array. Consecutive separator characters produce the empty string\nas a value in the returned array.  You can see this in the following example,\nwhich uses space as a separator:\n\n[!code-csharp-interactive[split strings with repeated separators](../../../samples/snippets/csharp/how-to/strings/ParseStringsUsingSplit.cs#2)]\n\nThis behavior makes it easier for formats like comma separated values (CSV)\nfiles representing tabular data. Consecutive commas represent a blank column.\n\nYou can pass an optional <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> parameter to\nexclude any empty strings in the returned array. For more complicated processing of the returned\ncollection, you can use [LINQ](../programming-guide/concepts/linq/index.md) to manipulate\nthe result sequence.\n\n<xref:System.String.Split%2A?displayProperty=nameWithType> can use multiple separator characters.\nThe following example uses spaces, commas, periods, colons, and tabs, all passed in an array containing these separating characters, to <xref:System.String.Split%2A>.\nThe loop at the bottom of the code displays each of the words in the returned array.  \n\n[!code-csharp-interactive[split strings using multiple separators](../../../samples/snippets/csharp/how-to/strings/ParseStringsUsingSplit.cs#3)]\n\nConsecutive instances of any separator produce the empty string in the output array:\n\n[!code-csharp-interactive[split strings using multiple consecutive separators](../../../samples/snippets/csharp/how-to/strings/ParseStringsUsingSplit.cs#4)]\n\n<xref:System.String.Split%2A?displayProperty=nameWithType> can take an array of strings (character sequences that act as separators for parsing the target string, instead of single characters).  \n  \n[!code-csharp-interactive[split strings using strings as separators](../../../samples/snippets/csharp/how-to/strings/ParseStringsUsingSplit.cs#5)]\n\nYou can try these samples by looking at the code in our [GitHub repository](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings). Or you can download the samples [as a zip file](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip).\n\n## See also\n\n- [C# Programming Guide](../programming-guide/index.md)\n- [Strings](../programming-guide/strings/index.md)\n- [.NET Regular Expressions](../../standard/base-types/regular-expressions.md)\n","nodes":[{"pos":[4,394],"embed":true,"restype":"x-metadata","content":"title: \"How to: Parse Strings Using String.Split (C# Guide)\"\ndescription: String.Split returns an array of strings split from a set of delimiters. It's an easy way to parse strings.\nms.date: 01/03/2018\nhelpviewer_keywords: \n  - \"splitting strings [C#]\"\n  - \"Split method [C#]\"\n  - \"strings [C#], splitting\"\n  - \"parse strings\"\nms.assetid: 729c2923-4169-41c6-9c90-ef176c1e2953\nms.custom: mvc","nodes":[{"content":"How to: Parse Strings Using String.Split (C# Guide)","nodes":[{"pos":[0,51],"content":"How to: Parse Strings Using String.Split (C# Guide)","nodes":[{"content":"How to: Parse Strings Using String.Split (C# Guide)","pos":[0,51]}]}],"path":["title"],"nosxs":false},{"content":"String.Split returns an array of strings split from a set of delimiters. It's an easy way to parse strings.","nodes":[{"pos":[0,107],"content":"String.Split returns an array of strings split from a set of delimiters. It's an easy way to parse strings.","nodes":[{"content":"String.Split returns an array of strings split from a set of delimiters. It's an easy way to parse strings.","pos":[0,107],"nodes":[{"content":"String.Split returns an array of strings split from a set of delimiters.","pos":[0,72]},{"content":"It's an easy way to parse strings.","pos":[73,107]}]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[401,452],"content":"How to: Parse Strings Using String.Split (C# Guide)","linkify":"How to: Parse Strings Using String.Split (C# Guide)","nodes":[{"content":"How to: Parse Strings Using String.Split (C# Guide)","pos":[0,51]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph> method creates an array of substrings by splitting the input string based on one or more delimiters.","pos":[454,617],"source":"The <xref:System.String.Split%2A?displayProperty=nameWithType> method creates an\narray of substrings by splitting the input string based on one or more delimiters."},{"content":"It is often the easiest way to separate a string on word boundaries.","pos":[618,686]},{"content":"It is also used to split strings on other specific characters or strings.","pos":[687,760],"source":" It is also used\nto split strings on other specific characters or strings."},{"content":"The following code splits a common phrase into an array of strings for each word.","pos":[831,912]},{"content":"Every instance of a separator character produces a value in the returned array.","pos":[1053,1132],"source":"Every instance of a separator character produces a value in the\nreturned array."},{"content":"Consecutive separator characters produce the empty string as a value in the returned array.","pos":[1133,1224],"source":" Consecutive separator characters produce the empty string\nas a value in the returned array."},{"content":"You can see this in the following example, which uses space as a separator:","pos":[1226,1301],"source":"  You can see this in the following example,\nwhich uses space as a separator:"},{"content":"This behavior makes it easier for formats like comma separated values (CSV) files representing tabular data.","pos":[1448,1556],"source":"This behavior makes it easier for formats like comma separated values (CSV)\nfiles representing tabular data."},{"content":"Consecutive commas represent a blank column.","pos":[1557,1601]},{"content":"You can pass an optional <ph id=\"ph1\">&lt;xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType&gt;</ph> parameter to exclude any empty strings in the returned array.","pos":[1603,1770],"source":"You can pass an optional <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> parameter to\nexclude any empty strings in the returned array."},{"content":"For more complicated processing of the returned collection, you can use <bpt id=\"p1\">[</bpt>LINQ<ept id=\"p1\">](../programming-guide/concepts/linq/index.md)</ept> to manipulate the result sequence.","pos":[1771,1929],"source":" For more complicated processing of the returned\ncollection, you can use [LINQ](../programming-guide/concepts/linq/index.md) to manipulate\nthe result sequence."},{"content":"<ph id=\"ph1\">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph> can use multiple separator characters.","pos":[1931,2028],"source":"<xref:System.String.Split%2A?displayProperty=nameWithType> can use multiple separator characters."},{"content":"The following example uses spaces, commas, periods, colons, and tabs, all passed in an array containing these separating characters, to <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph>.","pos":[2029,2195],"source":"\nThe following example uses spaces, commas, periods, colons, and tabs, all passed in an array containing these separating characters, to <xref:System.String.Split%2A>."},{"content":"The loop at the bottom of the code displays each of the words in the returned array.","pos":[2196,2280],"source":"\nThe loop at the bottom of the code displays each of the words in the returned array."},{"content":"Consecutive instances of any separator produce the empty string in the output array:","pos":[2430,2514]},{"pos":[2674,2867],"content":"<ph id=\"ph1\">&lt;xref:System.String.Split%2A?displayProperty=nameWithType&gt;</ph> can take an array of strings (character sequences that act as separators for parsing the target string, instead of single characters).","source":"<xref:System.String.Split%2A?displayProperty=nameWithType> can take an array of strings (character sequences that act as separators for parsing the target string, instead of single characters)."},{"content":"You can try these samples by looking at the code in our <bpt id=\"p1\">[</bpt>GitHub repository<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings)</ept>.","pos":[3021,3175],"source":"You can try these samples by looking at the code in our [GitHub repository](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings)."},{"content":"Or you can download the samples <bpt id=\"p1\">[</bpt>as a zip file<ept id=\"p1\">](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip)</ept>.","pos":[3176,3305],"source":" Or you can download the samples [as a zip file](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip)."},{"pos":[3310,3318],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3322,3375],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../programming-guide/index.md)"},{"pos":[3378,3426],"content":"<bpt id=\"p1\">[</bpt>Strings<ept id=\"p1\">](../programming-guide/strings/index.md)</ept>","source":"[Strings](../programming-guide/strings/index.md)"},{"pos":[3429,3505],"content":"<bpt id=\"p1\">[</bpt>.NET Regular Expressions<ept id=\"p1\">](../../standard/base-types/regular-expressions.md)</ept>","source":"[.NET Regular Expressions](../../standard/base-types/regular-expressions.md)"}]}