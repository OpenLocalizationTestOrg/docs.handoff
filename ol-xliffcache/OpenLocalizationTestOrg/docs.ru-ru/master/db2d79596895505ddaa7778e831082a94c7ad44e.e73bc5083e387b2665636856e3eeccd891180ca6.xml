{"content":"---\ntitle: \"Skip Clause (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.QuerySkip\"\nhelpviewer_keywords: \n  - \"queries [Visual Basic], Skip\"\n  - \"Skip statement [Visual Basic]\"\n  - \"Skip clause [Visual Basic]\"\nms.assetid: f00eb172-3907-4c43-9745-d8546ab86234\n---\n# Skip Clause (Visual Basic)\nBypasses a specified number of elements in a collection and then returns the remaining elements.  \n  \n## Syntax  \n  \n```  \nSkip count  \n```  \n  \n## Parts  \n `count`  \n Required. A value or an expression that evaluates to the number of elements of the sequence to skip.  \n  \n## Remarks  \n The `Skip` clause causes a query to bypass elements at the beginning of a results list and return the remaining elements. The number of elements to skip is identified by the `count` parameter.  \n  \n You can use the `Skip` clause with the `Take` clause to return a range of data from any segment of a query. To do this, pass the index of the first element of the range to the `Skip` clause and the size of the range to the `Take` clause.  \n  \n When you use the `Skip` clause in a query, you may also need to ensure that the results are returned in an order that will enable the `Skip` clause to bypass the intended results. For more information about ordering query results, see [Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md).  \n  \n You can use the `SkipWhile` clause to specify that only certain elements are ignored, depending on a supplied condition.  \n  \n## Example  \n The following code example uses the `Skip` clause together with the `Take` clause to return data from a query in pages. The `GetCustomers` function uses the `Skip` clause to bypass the customers in the list until the supplied starting index value, and uses the `Take` clause to return a page of customers starting from that index value.  \n  \n [!code-vb[VbSimpleQuerySamples#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbSimpleQuerySamples/VB/QuerySamples1.vb#1)]  \n  \n## See also\n\n- [Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)\n- [Queries](../../../visual-basic/language-reference/queries/index.md)\n- [Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)\n- [From Clause](../../../visual-basic/language-reference/queries/from-clause.md)\n- [Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md)\n- [Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md)\n- [Take Clause](../../../visual-basic/language-reference/queries/take-clause.md)\n","nodes":[{"pos":[4,267],"embed":true,"restype":"x-metadata","content":"title: \"Skip Clause (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.QuerySkip\"\nhelpviewer_keywords: \n  - \"queries [Visual Basic], Skip\"\n  - \"Skip statement [Visual Basic]\"\n  - \"Skip clause [Visual Basic]\"\nms.assetid: f00eb172-3907-4c43-9745-d8546ab86234","nodes":[{"content":"Skip Clause (Visual Basic)","nodes":[{"pos":[0,26],"content":"Skip Clause (Visual Basic)","nodes":[{"content":"Skip Clause (Visual Basic)","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[274,300],"content":"Skip Clause (Visual Basic)","linkify":"Skip Clause (Visual Basic)","nodes":[{"content":"Skip Clause (Visual Basic)","pos":[0,26]}]},{"content":"Bypasses a specified number of elements in a collection and then returns the remaining elements.","pos":[301,397]},{"pos":[406,412],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[449,454],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[469,478]},{"content":"A value or an expression that evaluates to the number of elements of the sequence to skip.","pos":[479,569]},{"pos":[578,585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Skip`</ph> clause causes a query to bypass elements at the beginning of a results list and return the remaining elements.","pos":[589,710],"source":"The `Skip` clause causes a query to bypass elements at the beginning of a results list and return the remaining elements."},{"content":"The number of elements to skip is identified by the <ph id=\"ph1\">`count`</ph> parameter.","pos":[711,781],"source":" The number of elements to skip is identified by the `count` parameter."},{"content":"You can use the <ph id=\"ph1\">`Skip`</ph> clause with the <ph id=\"ph2\">`Take`</ph> clause to return a range of data from any segment of a query.","pos":[788,895],"source":"You can use the `Skip` clause with the `Take` clause to return a range of data from any segment of a query."},{"content":"To do this, pass the index of the first element of the range to the <ph id=\"ph1\">`Skip`</ph> clause and the size of the range to the <ph id=\"ph2\">`Take`</ph> clause.","pos":[896,1025],"source":" To do this, pass the index of the first element of the range to the `Skip` clause and the size of the range to the `Take` clause."},{"content":"When you use the <ph id=\"ph1\">`Skip`</ph> clause in a query, you may also need to ensure that the results are returned in an order that will enable the <ph id=\"ph2\">`Skip`</ph> clause to bypass the intended results.","pos":[1032,1211],"source":"When you use the `Skip` clause in a query, you may also need to ensure that the results are returned in an order that will enable the `Skip` clause to bypass the intended results."},{"content":"For more information about ordering query results, see <bpt id=\"p1\">[</bpt>Order By Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/order-by-clause.md)</ept>.","pos":[1212,1354],"source":" For more information about ordering query results, see [Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md)."},{"pos":[1361,1481],"content":"You can use the <ph id=\"ph1\">`SkipWhile`</ph> clause to specify that only certain elements are ignored, depending on a supplied condition.","source":"You can use the `SkipWhile` clause to specify that only certain elements are ignored, depending on a supplied condition."},{"pos":[1490,1497],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example uses the <ph id=\"ph1\">`Skip`</ph> clause together with the <ph id=\"ph2\">`Take`</ph> clause to return data from a query in pages.","pos":[1501,1620],"source":"The following code example uses the `Skip` clause together with the `Take` clause to return data from a query in pages."},{"content":"The <ph id=\"ph1\">`GetCustomers`</ph> function uses the <ph id=\"ph2\">`Skip`</ph> clause to bypass the customers in the list until the supplied starting index value, and uses the <ph id=\"ph3\">`Take`</ph> clause to return a page of customers starting from that index value.","pos":[1621,1837],"source":" The `GetCustomers` function uses the `Skip` clause to bypass the customers in the list until the supplied starting index value, and uses the `Take` clause to return a page of customers starting from that index value."},{"pos":[1983,1991],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1995,2121],"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>","source":"[Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)"},{"pos":[2124,2192],"content":"<bpt id=\"p1\">[</bpt>Queries<ept id=\"p1\">](../../../visual-basic/language-reference/queries/index.md)</ept>","source":"[Queries](../../../visual-basic/language-reference/queries/index.md)"},{"pos":[2195,2277],"content":"<bpt id=\"p1\">[</bpt>Select Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/select-clause.md)</ept>","source":"[Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)"},{"pos":[2280,2358],"content":"<bpt id=\"p1\">[</bpt>From Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/from-clause.md)</ept>","source":"[From Clause](../../../visual-basic/language-reference/queries/from-clause.md)"},{"pos":[2361,2447],"content":"<bpt id=\"p1\">[</bpt>Order By Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/order-by-clause.md)</ept>","source":"[Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md)"},{"pos":[2450,2540],"content":"<bpt id=\"p1\">[</bpt>Skip While Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/skip-while-clause.md)</ept>","source":"[Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md)"},{"pos":[2543,2621],"content":"<bpt id=\"p1\">[</bpt>Take Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/take-clause.md)</ept>","source":"[Take Clause](../../../visual-basic/language-reference/queries/take-clause.md)"}]}