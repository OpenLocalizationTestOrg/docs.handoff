{"content":"---\ntitle: \"Nested Control Structures (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"Visual Basic code, control flow\"\n  - \"control structures [Visual Basic], nested\"\n  - \"conditional statements [Visual Basic], nested\"\n  - \"statements [Visual Basic], control flow\"\n  - \"control flow [Visual Basic], nested control statements\"\n  - \"structures [Visual Basic], nested control\"\n  - \"nested control statements [Visual Basic]\"\nms.assetid: cf60b061-65d9-44a8-81f2-b0bdccd23a05\n---\n# Nested Control Structures (Visual Basic)\nYou can place control statements inside other control statements, for example an `If...Then...Else` block within a `For...Next` loop. A control statement placed inside another control statement is said to be *nested*.  \n  \n## Nesting Levels  \n Control structures in Visual Basic can be nested to as many levels as you want. It is common practice to make nested structures more readable by indenting the body of each one. The integrated development environment (IDE) editor automatically does this.  \n  \n In the following example, the procedure `sumRows` adds together the positive elements of each row of the matrix.  \n  \n```vb\nPublic Sub sumRows(ByVal a(,) As Double, ByRef r() As Double)  \n    Dim i, j As Integer  \n    For i = 0 To UBound(a, 1)  \n        r(i) = 0  \n        For j = 0 To UBound(a, 2)  \n            If a(i, j) > 0 Then  \n                r(i) = r(i) + a(i, j)  \n            End If  \n        Next j  \n    Next i  \nEnd Sub  \n```  \n  \n In the preceding example, the first `Next` statement closes the inner `For` loop and the last `Next` statement closes the outer `For` loop.  \n  \n Likewise, in nested `If` statements, the `End If` statements automatically apply to the nearest prior `If` statement. Nested `Do` loops work in a similar fashion, with the innermost `Loop` statement matching the innermost `Do` statement.  \n  \n> [!NOTE]\n>  For many control structures, when you click a keyword, all of the keywords in the structure are highlighted. For instance, when you click `If` in an `If...Then...Else` construction, all instances of `If`, `Then`, `ElseIf`, `Else`, and `End If` in the construction are highlighted. To move to the next or previous highlighted keyword, press CTRL+SHIFT+DOWN ARROW or CTRL+SHIFT+UP ARROW.  \n  \n## Nesting Different Kinds of Control Structures  \n You can nest one kind of control structure within another kind. The following example uses a `With` block inside a `For Each` loop and nested `If` blocks inside the `With` block.  \n  \n```vb\nFor Each ctl As System.Windows.Forms.Control In Me.Controls  \n    With ctl  \n        .BackColor = System.Drawing.Color.Yellow  \n        .ForeColor = System.Drawing.Color.Black  \n        If .CanFocus Then  \n            .Text = \"Colors changed\"  \n            If Not .Focus() Then  \n                ' Insert code to process failed focus.  \n            End If  \n        End If  \n    End With  \nNext ctl  \n```  \n  \n## Overlapping Control Structures  \n You cannot overlap control structures. This means that any nested structure must be completely contained within the next innermost structure. For example, the following arrangement is invalid because the `For` loop terminates before the inner `With` block terminates.  \n  \n ![Diagram that shows an example of invalid nesting.](./media/nested-control-structures/example-invalid-nesting.gif) \n  \n The Visual Basic compiler detects such overlapping control structures and signals a compile-time error.  \n  \n## See also\n\n- [Control Flow](../../../../visual-basic/programming-guide/language-features/control-flow/index.md)\n- [Decision Structures](../../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)\n- [Loop Structures](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)\n- [Other Control Structures](../../../../visual-basic/programming-guide/language-features/control-flow/other-control-structures.md)\n","nodes":[{"pos":[4,484],"embed":true,"restype":"x-metadata","content":"title: \"Nested Control Structures (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"Visual Basic code, control flow\"\n  - \"control structures [Visual Basic], nested\"\n  - \"conditional statements [Visual Basic], nested\"\n  - \"statements [Visual Basic], control flow\"\n  - \"control flow [Visual Basic], nested control statements\"\n  - \"structures [Visual Basic], nested control\"\n  - \"nested control statements [Visual Basic]\"\nms.assetid: cf60b061-65d9-44a8-81f2-b0bdccd23a05","nodes":[{"content":"Nested Control Structures (Visual Basic)","nodes":[{"pos":[0,40],"content":"Nested Control Structures (Visual Basic)","nodes":[{"content":"Nested Control Structures (Visual Basic)","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[491,531],"content":"Nested Control Structures (Visual Basic)","linkify":"Nested Control Structures (Visual Basic)","nodes":[{"content":"Nested Control Structures (Visual Basic)","pos":[0,40]}]},{"content":"You can place control statements inside other control statements, for example an <ph id=\"ph1\">`If...Then...Else`</ph> block within a <ph id=\"ph2\">`For...Next`</ph> loop.","pos":[532,665],"source":"You can place control statements inside other control statements, for example an `If...Then...Else` block within a `For...Next` loop."},{"content":"A control statement placed inside another control statement is said to be <bpt id=\"p1\">*</bpt>nested<ept id=\"p1\">*</ept>.","pos":[666,749],"source":" A control statement placed inside another control statement is said to be *nested*."},{"pos":[758,772],"content":"Nesting Levels","linkify":"Nesting Levels","nodes":[{"content":"Nesting Levels","pos":[0,14]}]},{"content":"Control structures in Visual Basic can be nested to as many levels as you want.","pos":[776,855]},{"content":"It is common practice to make nested structures more readable by indenting the body of each one.","pos":[856,952]},{"content":"The integrated development environment (IDE) editor automatically does this.","pos":[953,1029]},{"pos":[1036,1148],"content":"In the following example, the procedure <ph id=\"ph1\">`sumRows`</ph> adds together the positive elements of each row of the matrix.","source":"In the following example, the procedure `sumRows` adds together the positive elements of each row of the matrix."},{"pos":[1482,1621],"content":"In the preceding example, the first <ph id=\"ph1\">`Next`</ph> statement closes the inner <ph id=\"ph2\">`For`</ph> loop and the last <ph id=\"ph3\">`Next`</ph> statement closes the outer <ph id=\"ph4\">`For`</ph> loop.","source":"In the preceding example, the first `Next` statement closes the inner `For` loop and the last `Next` statement closes the outer `For` loop."},{"content":"Likewise, in nested <ph id=\"ph1\">`If`</ph> statements, the <ph id=\"ph2\">`End If`</ph> statements automatically apply to the nearest prior <ph id=\"ph3\">`If`</ph> statement.","pos":[1628,1745],"source":"Likewise, in nested `If` statements, the `End If` statements automatically apply to the nearest prior `If` statement."},{"content":"Nested <ph id=\"ph1\">`Do`</ph> loops work in a similar fashion, with the innermost <ph id=\"ph2\">`Loop`</ph> statement matching the innermost <ph id=\"ph3\">`Do`</ph> statement.","pos":[1746,1865],"source":" Nested `Do` loops work in a similar fashion, with the innermost `Loop` statement matching the innermost `Do` statement."},{"pos":[1873,2269],"content":"[!NOTE]\n For many control structures, when you click a keyword, all of the keywords in the structure are highlighted. For instance, when you click `If` in an `If...Then...Else` construction, all instances of `If`, `Then`, `ElseIf`, `Else`, and `End If` in the construction are highlighted. To move to the next or previous highlighted keyword, press CTRL+SHIFT+DOWN ARROW or CTRL+SHIFT+UP ARROW.","leadings":["","> "],"nodes":[{"content":"For many control structures, when you click a keyword, all of the keywords in the structure are highlighted. For instance, when you click `If` in an `If...Then...Else` construction, all instances of `If`, `Then`, `ElseIf`, `Else`, and `End If` in the construction are highlighted. To move to the next or previous highlighted keyword, press CTRL+SHIFT+DOWN ARROW or CTRL+SHIFT+UP ARROW.","pos":[9,394],"nodes":[{"content":"For many control structures, when you click a keyword, all of the keywords in the structure are highlighted.","pos":[0,108]},{"content":"For instance, when you click <ph id=\"ph1\">`If`</ph> in an <ph id=\"ph2\">`If...Then...Else`</ph> construction, all instances of <ph id=\"ph3\">`If`</ph>, <ph id=\"ph4\">`Then`</ph>, <ph id=\"ph5\">`ElseIf`</ph>, <ph id=\"ph6\">`Else`</ph>, and <ph id=\"ph7\">`End If`</ph> in the construction are highlighted.","pos":[109,280],"source":" For instance, when you click `If` in an `If...Then...Else` construction, all instances of `If`, `Then`, `ElseIf`, `Else`, and `End If` in the construction are highlighted."},{"content":"To move to the next or previous highlighted keyword, press CTRL+SHIFT+DOWN ARROW or CTRL+SHIFT+UP ARROW.","pos":[281,385]}]}]},{"pos":[2278,2323],"content":"Nesting Different Kinds of Control Structures","linkify":"Nesting Different Kinds of Control Structures","nodes":[{"content":"Nesting Different Kinds of Control Structures","pos":[0,45]}]},{"content":"You can nest one kind of control structure within another kind.","pos":[2327,2390]},{"content":"The following example uses a <ph id=\"ph1\">`With`</ph> block inside a <ph id=\"ph2\">`For Each`</ph> loop and nested <ph id=\"ph3\">`If`</ph> blocks inside the <ph id=\"ph4\">`With`</ph> block.","pos":[2391,2505],"source":" The following example uses a `With` block inside a `For Each` loop and nested `If` blocks inside the `With` block."},{"pos":[2930,2960],"content":"Overlapping Control Structures","linkify":"Overlapping Control Structures","nodes":[{"content":"Overlapping Control Structures","pos":[0,30]}]},{"content":"You cannot overlap control structures.","pos":[2964,3002]},{"content":"This means that any nested structure must be completely contained within the next innermost structure.","pos":[3003,3105]},{"content":"For example, the following arrangement is invalid because the <ph id=\"ph1\">`For`</ph> loop terminates before the inner <ph id=\"ph2\">`With`</ph> block terminates.","pos":[3106,3231],"source":" For example, the following arrangement is invalid because the `For` loop terminates before the inner `With` block terminates."},{"content":"Diagram that shows an example of invalid nesting.","pos":[3240,3289]},{"content":"The Visual Basic compiler detects such overlapping control structures and signals a compile-time error.","pos":[3359,3462]},{"pos":[3471,3479],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3483,3581],"content":"<bpt id=\"p1\">[</bpt>Control Flow<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/index.md)</ept>","source":"[Control Flow](../../../../visual-basic/programming-guide/language-features/control-flow/index.md)"},{"pos":[3584,3703],"content":"<bpt id=\"p1\">[</bpt>Decision Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)</ept>","source":"[Decision Structures](../../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)"},{"pos":[3706,3817],"content":"<bpt id=\"p1\">[</bpt>Loop Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept>","source":"[Loop Structures](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)"},{"pos":[3820,3949],"content":"<bpt id=\"p1\">[</bpt>Other Control Structures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/control-flow/other-control-structures.md)</ept>","source":"[Other Control Structures](../../../../visual-basic/programming-guide/language-features/control-flow/other-control-structures.md)"}]}