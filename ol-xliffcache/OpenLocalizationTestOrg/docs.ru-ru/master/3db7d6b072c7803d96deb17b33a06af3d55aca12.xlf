<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="synchronous-and-asynchronous-operations.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3db7d6b072c7803d96deb17b33a06af3d55aca12</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\synchronous-and-asynchronous-operations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b57643438f202584999ccf1a28d6a8613d8b8a2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a040b333c41ddc96528ac4e83c11008325c689bb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Synchronous and Asynchronous Operations</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Synchronous and Asynchronous Operations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic discusses implementing and calling asynchronous service operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Many applications call methods asynchronously because it enables the application to continue doing useful work while the method call runs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Windows Communication Foundation (WCF) services and clients can participate in asynchronous operation calls at two distinct levels of the application, which provide WCF applications even more flexibility to maximize throughput balanced against interactivity.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Types of Asynchronous Operations</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>All service contracts in WCF, no matter the parameters types and return values, use WCF attributes to specify a particular message exchange pattern between client and service.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>WCF automatically routes inbound and outbound messages to the appropriate service operation or running client code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The client possesses only the service contract, which specifies the message exchange pattern for a particular operation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Clients can offer the developer any programming model they choose, so long as the underlying message exchange pattern is observed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>So, too, can services implement operations in any manner, so long as the specified message pattern is observed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The independence of the service contract from either the service or client implementation enables the following forms of asynchronous execution in WCF applications:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Clients can invoke request/response operations asynchronously using a synchronous message exchange.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Services can implement a request/response operation asynchronously using a synchronous message exchange.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Message exchanges can be one-way, regardless of the implementation of the client or service.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Suggested Asynchronous Scenarios</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use an asynchronous approach in a service operation implementation if the operation service implementation makes a blocking call, such as doing I/O work.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When you are in an asynchronous operation implementation, try to call asynchronous operations and methods to extend the asynchronous call path as far as possible.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, call a <ph id="ph1">`BeginOperationTwo()`</ph> from within <ph id="ph2">`BeginOperationOne()`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use an asynchronous approach in a client or calling application in the following cases:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you are invoking operations from a middle-tier application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>(For more information about such scenarios, see <bpt id="p1">[</bpt>Middle-Tier Client Applications<ept id="p1">](../../../docs/framework/wcf/feature-details/middle-tier-client-applications.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you are invoking operations within an ASP.NET page, use asynchronous pages.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you are invoking operations from any application that is single threaded, such as Windows Forms or Windows Presentation Foundation (WPF).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When using the event-based asynchronous calling model, the result event is raised on the UI thread, adding responsiveness to the application without requiring you to handle multiple threads yourself.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In general, if you have a choice between a synchronous and asynchronous call, choose the asynchronous call.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Implementing an Asynchronous Service Operation</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Asynchronous operations can be implemented by using one of the three following methods:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The task-based asynchronous pattern</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The event-based asynchronous pattern</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The IAsyncResult asynchronous pattern</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Task-Based Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The task-based asynchronous pattern is the preferred way to implement asynchronous operations because it is the easiest and most straight forward.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To use this method simply implement your service operation and specify a return type of Task<ph id="ph1">\&lt;</ph>T&gt;, where T is the type returned by the logical operation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The SampleMethodTaskAsync operation returns Task<ph id="ph1">\&lt;</ph>string&gt; because the logical operation returns a string.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information about the task-based asynchronous pattern, see <bpt id="p1">[</bpt>The Task-Based Asynchronous Pattern<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=232504)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When using the task-based asynchronous pattern, a T:System.AggregateException may be thrown if an exception occurs while waiting on the completion of the operation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This exception may occur on the client or services</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Event-Based Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A service that supports the Event-based Asynchronous Pattern will have one or more operations named MethodNameAsync.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>These methods may mirror synchronous versions, which perform the same operation on the current thread.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The class may also have a MethodNameCompleted event and it may have a MethodNameAsyncCancel (or simply CancelAsync) method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A client wishing to call the operation will define an event handler to be called when the operation completes,</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following code snippet illustrates how to declare asynchronous operations using the event-based asynchronous pattern.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about the Event-based Asynchronous Pattern, see <bpt id="p1">[</bpt>The Event-Based Asynchronous Pattern<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=232515)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>IAsyncResult Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A service operation can be implemented in an asynchronous fashion using the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> asynchronous programming pattern and marking the <ph id="ph2">`&lt;Begin&gt;`</ph> method with the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this case, the asynchronous operation is exposed in metadata in the same form as a synchronous operation: It is exposed as a single operation with a request message and a correlated response message.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Client programming models then have a choice.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>They can represent this pattern as a synchronous operation or as an asynchronous one, so long as when the service is invoked a request-response message exchange takes place.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In general, with the asynchronous nature of the systems, you should not take a dependency on the threads.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The most reliable way of passing data to various stages of operation dispatch processing is to use extensions.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Implement an Asynchronous Service Operation<ept id="p1">](../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To define a contract operation <ph id="ph1">`X`</ph> that is executed asynchronously regardless of how it is called in the client application:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Define two methods using the pattern <ph id="ph1">`BeginOperation`</ph> and <ph id="ph2">`EndOperation`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BeginOperation`</ph> method includes <ph id="ph2">`in`</ph> and <ph id="ph3">`ref`</ph> parameters for the operation and returns an <ph id="ph4">&lt;xref:System.IAsyncResult&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EndOperation`</ph> method includes an <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> parameter as well as the <ph id="ph3">`out`</ph> and <ph id="ph4">`ref`</ph> parameters and returns the operations return type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, see the following method.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To create an asynchronous operation, the two methods would be:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute is applied only to the <ph id="ph2">`BeginDoWork`</ph> method.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The resulting contract has one WSDL operation named <ph id="ph1">`DoWork`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Client-Side Asynchronous Invocations</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A WCF client application can use any of three asynchronous calling models described previously</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When using the task-based model, simply call the operation using the await keyword as shown in the following code snippet.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Using the event-based asynchronous pattern only requires adding an event handler to receive a notification of the response -- and the resulting event is raised on the user interface thread automatically.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To use this approach, specify both the <bpt id="p1">**</bpt>/async<ept id="p1">**</ept> and <bpt id="p2">**</bpt>/tcv:Version35<ept id="p2">**</ept> command options with the <bpt id="p3">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p3">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>, as in the following example.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When this is done, Svcutil.exe generates a WCF client class with the event infrastructure that enables the calling application to implement and assign an event handler to receive the response and take the appropriate action.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For a complete example, see <bpt id="p1">[</bpt>How to: Call Service Operations Asynchronously<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The event-based asynchronous model, however, is only available in <ph id="ph1">[!INCLUDE[netfx35_long](../../../includes/netfx35-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In addition, it is not supported even in <ph id="ph1">[!INCLUDE[netfx35_short](../../../includes/netfx35-short-md.md)]</ph> when a WCF client channel is created by using a <ph id="ph2">&lt;xref:System.ServiceModel.ChannelFactory%601?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>With WCF client channel objects, you must use <ph id="ph1">&lt;xref:System.IAsyncResult?displayProperty=nameWithType&gt;</ph> objects to invoke your operations asynchronously.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To use this approach, specify the <bpt id="p1">**</bpt>/async<ept id="p1">**</ept> command option with the <bpt id="p2">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p2">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>, as in the following example.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This generates a service contract in which each operation is modeled as a <ph id="ph1">`&lt;Begin&gt;`</ph> method with the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property set to <ph id="ph3">`true`</ph> and a corresponding <ph id="ph4">`&lt;End&gt;`</ph> method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For a complete example using a <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>, see <bpt id="p1">[</bpt>How to: Call Operations Asynchronously Using a Channel Factory<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-call-operations-asynchronously-using-a-channel-factory.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In either case, applications can invoke an operation asynchronously even if the service is implemented synchronously, in the same way that an application can use the same pattern to invoke asynchronously a local synchronous method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>How the operation is implemented is not significant to the client; when the response message arrives, its content is dispatched to the client's asynchronous &lt;<ph id="ph1">`End`</ph>&gt; method and the client retrieves the information.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>One-Way Message Exchange Patterns</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can also create an asynchronous message exchange pattern in which one-way operations (operations for which the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A?displayProperty=nameWithType&gt;</ph> is <ph id="ph2">`true`</ph> have no correlated response) can be sent in either direction by the client or service independently of the other side.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>(This uses the duplex message exchange pattern with one-way messages.) In this case, the service contract specifies a one-way message exchange that either side can implement as asynchronous calls or implementations, or not, as appropriate.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Generally, when the contract is an exchange of one-way messages, the implementations can largely be asynchronous because once a message is sent the application does not wait for a reply and can continue doing other work.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Event-based Asynchronous Clients and Message Contracts</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The design guidelines for the event-based asynchronous model state that if more than one value is returned, one value is returned as the <ph id="ph1">`Result`</ph> property and the others are returned as properties on the <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>One result of this is that if a client imports metadata using the event-based asynchronous command options and the operation returns more than one value, the default <ph id="ph1">&lt;xref:System.EventArgs&gt;</ph> object returns one value as the <ph id="ph2">`Result`</ph> property and the remainder are properties of the <ph id="ph3">&lt;xref:System.EventArgs&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you want to receive the message object as the <ph id="ph1">`Result`</ph> property and have the returned values as properties on that object, use the <bpt id="p1">**</bpt>/messageContract<ept id="p1">**</ept> command option.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This generates a signature that returns the response message as the <ph id="ph1">`Result`</ph> property on the <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>All internal return values are then properties of the response message object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>