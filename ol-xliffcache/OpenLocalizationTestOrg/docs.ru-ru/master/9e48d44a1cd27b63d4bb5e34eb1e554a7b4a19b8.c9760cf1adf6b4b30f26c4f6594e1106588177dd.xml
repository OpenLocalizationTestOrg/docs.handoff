{"content":"---\ntitle: \"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: a5ae8ced-61fe-4c10-bb8a-95630e50f603\n---\n# How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)\nThis example shows how to find sentences in a text file that contain matches for each of a specified set of words. Although the array of search terms is hard-coded in this example, it could also be populated dynamically at runtime. In this example, the query returns the sentences that contain the words \"Historically,\" \"data,\" and \"integrated.\"  \n  \n## Example  \n  \n```vb  \nClass FindSentences  \n  \n    Shared Sub Main()  \n        Dim text As String = \"Historically, the world of data and the world of objects \" &   \n        \"have not been well integrated. Programmers work in C# or Visual Basic \" &   \n        \"and also in SQL or XQuery. On the one side are concepts such as classes, \" &   \n        \"objects, fields, inheritance, and .NET Framework APIs. On the other side \" &   \n        \"are tables, columns, rows, nodes, and separate languages for dealing with \" &   \n        \"them. Data types often require translation between the two worlds; there are \" &   \n        \"different standard functions. Because the object world has no notion of query, a \" &   \n        \"query can only be represented as a string without compile-time type checking or \" &   \n        \"IntelliSense support in the IDE. Transferring data from SQL tables or XML trees to \" &   \n        \"objects in memory is often tedious and error-prone.\"  \n  \n        ' Split the text block into an array of sentences.  \n        Dim sentences As String() = text.Split(New Char() {\".\", \"?\", \"!\"})  \n  \n        ' Define the search terms. This list could also be dynamically populated at runtime  \n        Dim wordsToMatch As String() = {\"Historically\", \"data\", \"integrated\"}  \n  \n        ' Find sentences that contain all the terms in the wordsToMatch array  \n        ' Note that the number of terms to match is not specified at compile time  \n        Dim sentenceQuery = From sentence In sentences   \n                            Let w = sentence.Split(New Char() {\" \", \",\", \".\", \";\", \":\"},   \n                                                   StringSplitOptions.RemoveEmptyEntries)   \n                            Where w.Distinct().Intersect(wordsToMatch).Count = wordsToMatch.Count()   \n                            Select sentence  \n  \n        ' Execute the query  \n        For Each str As String In sentenceQuery  \n            Console.WriteLine(str)  \n        Next  \n  \n        ' Keep console window open in debug mode.  \n        Console.WriteLine(\"Press any key to exit.\")  \n        Console.ReadKey()  \n    End Sub  \n  \nEnd Class  \n' Output:  \n' Historically, the world of data and the world of objects have not been well integrated  \n```  \n  \n The query works by first splitting the text into sentences, and then splitting the sentences into an array of strings that hold each word. For each of these arrays, the <xref:System.Linq.Enumerable.Distinct%2A> method removes all duplicate words, and then the query performs an <xref:System.Linq.Enumerable.Intersect%2A> operation on the word array and the `wordsToMatch` array. If the count of the intersection is the same as the count of the `wordsToMatch` array, all words were found in the words and the original sentence is returned.  \n  \n In the call to <xref:System.String.Split%2A>, the punctuation marks are used as separators in order to remove them from the string. If you did not do this, for example you could have a string \"Historically,\" that would not match \"Historically\" in the `wordsToMatch` array. You may have to use additional separators, depending on the types of punctuation found in the source text.  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace.  \n  \n## See also\n\n- [LINQ and Strings (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)\n","nodes":[{"pos":[4,169],"embed":true,"restype":"x-metadata","content":"title: \"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: a5ae8ced-61fe-4c10-bb8a-95630e50f603","nodes":[{"content":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)","nodes":[{"pos":[0,87],"content":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)","nodes":[{"content":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)","pos":[0,87]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[176,263],"content":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)","linkify":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)","nodes":[{"content":"How to: Query for Sentences that Contain a Specified Set of Words (LINQ) (Visual Basic)","pos":[0,87]}]},{"content":"This example shows how to find sentences in a text file that contain matches for each of a specified set of words.","pos":[264,378]},{"content":"Although the array of search terms is hard-coded in this example, it could also be populated dynamically at runtime.","pos":[379,495]},{"content":"In this example, the query returns the sentences that contain the words \"Historically,\" \"data,\" and \"integrated.\"","pos":[496,609]},{"pos":[618,625],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The query works by first splitting the text into sentences, and then splitting the sentences into an array of strings that hold each word.","pos":[2876,3014]},{"content":"For each of these arrays, the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method removes all duplicate words, and then the query performs an <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> operation on the word array and the <ph id=\"ph3\">`wordsToMatch`</ph> array.","pos":[3015,3254],"source":" For each of these arrays, the <xref:System.Linq.Enumerable.Distinct%2A> method removes all duplicate words, and then the query performs an <xref:System.Linq.Enumerable.Intersect%2A> operation on the word array and the `wordsToMatch` array."},{"content":"If the count of the intersection is the same as the count of the <ph id=\"ph1\">`wordsToMatch`</ph> array, all words were found in the words and the original sentence is returned.","pos":[3255,3414],"source":" If the count of the intersection is the same as the count of the `wordsToMatch` array, all words were found in the words and the original sentence is returned."},{"content":"In the call to <ph id=\"ph1\">&lt;xref:System.String.Split%2A&gt;</ph>, the punctuation marks are used as separators in order to remove them from the string.","pos":[3421,3552],"source":"In the call to <xref:System.String.Split%2A>, the punctuation marks are used as separators in order to remove them from the string."},{"content":"If you did not do this, for example you could have a string \"Historically,\" that would not match \"Historically\" in the <ph id=\"ph1\">`wordsToMatch`</ph> array.","pos":[3553,3693],"source":" If you did not do this, for example you could have a string \"Historically,\" that would not match \"Historically\" in the `wordsToMatch` array."},{"content":"You may have to use additional separators, depending on the types of punctuation found in the source text.","pos":[3694,3800]},{"pos":[3809,3827],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[3831,3994],"content":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <ph id=\"ph1\">`Imports`</ph> statement for the System.Linq namespace.","source":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a `Imports` statement for the System.Linq namespace."},{"pos":[4003,4011],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4015,4126],"content":"<bpt id=\"p1\">[</bpt>LINQ and Strings (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)</ept>","source":"[LINQ and Strings (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/linq-and-strings.md)"}]}