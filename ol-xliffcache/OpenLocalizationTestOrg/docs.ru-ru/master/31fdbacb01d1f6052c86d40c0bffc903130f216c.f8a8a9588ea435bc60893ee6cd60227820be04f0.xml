{"content":"---\ntitle: \"stackalloc keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 04/12/2018\nf1_keywords: \n  - \"stackalloc_CSharpKeyword\"\n  - \"stackalloc\"\nhelpviewer_keywords: \n  - \"stackalloc keyword [C#]\"\n---\n# stackalloc (C# Reference)\n\nThe `stackalloc` keyword is used in an unsafe code context to allocate a block of memory on the stack.\n\n```csharp\nint* block = stackalloc int[100];\n```\n\n## Remarks\n\nThe keyword is valid only in local variable initializers. The following code causes compiler errors.\n\n```csharp\nint* block;\n// The following assignment statement causes compiler errors. You\n// can use stackalloc only when declaring and initializing a local\n// variable.\nblock = stackalloc int[100];\n```\n\nBeginning with C# 7.3, you can use array initializer syntax for `stackalloc` arrays. All the following declarations declare an array with three elements whose values are the integers `1`, `2`, and `3`:\n\n```csharp\n// Valid starting with C# 7.3\nint* first = stackalloc int[3] { 1, 2, 3 };\nint* second = stackalloc int[] { 1, 2, 3 };\nint* third = stackalloc[] { 1, 2, 3 };\n```\n\nBecause pointer types are involved, `stackalloc` requires an [unsafe](unsafe.md) context. For more information, see [Unsafe Code and Pointers](../../programming-guide/unsafe-code-pointers/index.md).\n\n`stackalloc` is like [_alloca](/cpp/c-runtime-library/reference/alloca) in the C run-time library.\n\n## Examples\n\nThe following example calculates and displays the first 20 numbers in the Fibonacci sequence. Each number is the sum of the previous two numbers. In the code, a block of memory of sufficient size to contain 20 elements of type `int` is allocated on the stack, not the heap. The address of the block is stored in the pointer `fib`. This memory is not subject to garbage collection and therefore does not have to be pinned (by using [fixed](fixed-statement.md)). The lifetime of the memory block is limited to the lifetime of the method that defines it. You cannot free the memory before the method returns.\n\n[!code-csharp[csrefKeywordsOperator#15](~/samples/snippets/csharp/keywords/StackAllocExamples.cs#1)]\n\nThe following example initializes a `stackalloc` array of integers to a bit mask with one bit set in each element. This demonstrates the new initializer syntax available starting in C# 7.3:\n\n[!code-csharp[csrefKeywordsOperator#15](~/samples/snippets/csharp/keywords/StackAllocExamples.cs#2)]\n\n## Security\n\nUnsafe code is less secure than safe alternatives. However, the use of `stackalloc` automatically enables buffer overrun detection features in the common language runtime (CLR). If a buffer overrun is detected, the process is terminated as quickly as possible to minimize the chance that malicious code is executed.\n\n## C# language specification\n\n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)\n- [Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)","nodes":[{"pos":[4,201],"embed":true,"restype":"x-metadata","content":"title: \"stackalloc keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 04/12/2018\nf1_keywords: \n  - \"stackalloc_CSharpKeyword\"\n  - \"stackalloc\"\nhelpviewer_keywords: \n  - \"stackalloc keyword [C#]\"","nodes":[{"content":"stackalloc keyword - C# Reference","nodes":[{"pos":[0,33],"content":"stackalloc keyword - C# Reference","nodes":[{"content":"stackalloc keyword - C# Reference","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[208,233],"content":"stackalloc (C# Reference)","linkify":"stackalloc (C# Reference)","nodes":[{"content":"stackalloc (C# Reference)","pos":[0,25]}]},{"pos":[235,337],"content":"The <ph id=\"ph1\">`stackalloc`</ph> keyword is used in an unsafe code context to allocate a block of memory on the stack.","source":"The `stackalloc` keyword is used in an unsafe code context to allocate a block of memory on the stack."},{"pos":[391,398],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The keyword is valid only in local variable initializers.","pos":[400,457]},{"content":"The following code causes compiler errors.","pos":[458,500]},{"content":"Beginning with C# 7.3, you can use array initializer syntax for <ph id=\"ph1\">`stackalloc`</ph> arrays.","pos":[704,788],"source":"Beginning with C# 7.3, you can use array initializer syntax for `stackalloc` arrays."},{"content":"All the following declarations declare an array with three elements whose values are the integers <ph id=\"ph1\">`1`</ph>, <ph id=\"ph2\">`2`</ph>, and <ph id=\"ph3\">`3`</ph>:","pos":[789,905],"source":" All the following declarations declare an array with three elements whose values are the integers `1`, `2`, and `3`:"},{"content":"Because pointer types are involved, <ph id=\"ph1\">`stackalloc`</ph> requires an <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](unsafe.md)</ept> context.","pos":[1079,1168],"source":"Because pointer types are involved, `stackalloc` requires an [unsafe](unsafe.md) context."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Unsafe Code and Pointers<ept id=\"p1\">](../../programming-guide/unsafe-code-pointers/index.md)</ept>.","pos":[1169,1277],"source":" For more information, see [Unsafe Code and Pointers](../../programming-guide/unsafe-code-pointers/index.md)."},{"pos":[1279,1377],"content":"<ph id=\"ph1\">`stackalloc`</ph> is like <bpt id=\"p1\">[</bpt>_alloca<ept id=\"p1\">](/cpp/c-runtime-library/reference/alloca)</ept> in the C run-time library.","source":"`stackalloc` is like [_alloca](/cpp/c-runtime-library/reference/alloca) in the C run-time library."},{"pos":[1382,1390],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example calculates and displays the first 20 numbers in the Fibonacci sequence.","pos":[1392,1485]},{"content":"Each number is the sum of the previous two numbers.","pos":[1486,1537]},{"content":"In the code, a block of memory of sufficient size to contain 20 elements of type <ph id=\"ph1\">`int`</ph> is allocated on the stack, not the heap.","pos":[1538,1665],"source":" In the code, a block of memory of sufficient size to contain 20 elements of type `int` is allocated on the stack, not the heap."},{"content":"The address of the block is stored in the pointer <ph id=\"ph1\">`fib`</ph>.","pos":[1666,1722],"source":" The address of the block is stored in the pointer `fib`."},{"content":"This memory is not subject to garbage collection and therefore does not have to be pinned (by using <bpt id=\"p1\">[</bpt>fixed<ept id=\"p1\">](fixed-statement.md)</ept>).","pos":[1723,1852],"source":" This memory is not subject to garbage collection and therefore does not have to be pinned (by using [fixed](fixed-statement.md))."},{"content":"The lifetime of the memory block is limited to the lifetime of the method that defines it.","pos":[1853,1943]},{"content":"You cannot free the memory before the method returns.","pos":[1944,1997]},{"content":"The following example initializes a <ph id=\"ph1\">`stackalloc`</ph> array of integers to a bit mask with one bit set in each element.","pos":[2101,2215],"source":"The following example initializes a `stackalloc` array of integers to a bit mask with one bit set in each element."},{"content":"This demonstrates the new initializer syntax available starting in C# 7.3:","pos":[2216,2290]},{"pos":[2397,2405],"content":"Security","linkify":"Security","nodes":[{"content":"Security","pos":[0,8]}]},{"content":"Unsafe code is less secure than safe alternatives.","pos":[2407,2457]},{"content":"However, the use of <ph id=\"ph1\">`stackalloc`</ph> automatically enables buffer overrun detection features in the common language runtime (CLR).","pos":[2458,2584],"source":" However, the use of `stackalloc` automatically enables buffer overrun detection features in the common language runtime (CLR)."},{"content":"If a buffer overrun is detected, the process is terminated as quickly as possible to minimize the chance that malicious code is executed.","pos":[2585,2722]},{"pos":[2727,2752],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2819,2827],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2831,2890],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[2893,2959],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2962,3029],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[3032,3117],"content":"<bpt id=\"p1\">[</bpt>Operator Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept>","source":"[Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)"},{"pos":[3120,3211],"content":"<bpt id=\"p1\">[</bpt>Unsafe Code and Pointers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/index.md)</ept>","source":"[Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)"}]}