{"content":"---\ntitle: \"How to: Add and Take Items Individually from a BlockingCollection | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"thread-safe collections, blocking dictionary\"\nms.assetid: 38f2f3d8-15e5-4bf4-9c83-2b5b6f22bad1\ncaps.latest.revision: 7\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# How to: Add and Take Items Individually from a BlockingCollection\nThis example shows how to add and remove items from a <xref:System.Collections.Concurrent.BlockingCollection%601> in both a blocking and non-blocking manner. For more information on <xref:System.Collections.Concurrent.BlockingCollection%601>, see [BlockingCollection Overview](../../../../docs/standard/collections/thread-safe/blockingcollection-overview.md).  \n  \n For an example of how to enumerate a <xref:System.Collections.Concurrent.BlockingCollection%601> until it is empty and no more elements will be added, see [How to: Use ForEach to Remove Items in a BlockingCollection](../../../../docs/standard/collections/thread-safe/how-to-use-foreach-to-remove.md)  \n  \n## Example  \n This first example shows how to add and take items so that the operations will block if the collection is either temporarily empty (when taking) or at maximum capacity (when adding), or a specified timeout period has elapsed. Note that blocking on maximum capacity is only enabled when the BlockingCollection has been created with a maximum capacity specified in the constructor.  \n  \n [!code-csharp[CDS_BlockingCollection#01](../../../../samples/snippets/csharp/VS_Snippets_Misc/cds_blockingcollection/cs/example01.cs#01)]\n [!code-vb[CDS_BlockingCollection#01](../../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_blockingcollection/vb/simpleblocking.vb#01)]  \n  \n## Example  \n This second example shows how to add and take items so that the operations will not block. If no item is present, or maximum capacity on a bounded collection has been reached, or the timeout period has elapsed, then the <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> operation returns false. This allows the thread to do some other useful work for awhile and then try again later to either retrieve a new item, or try to add the same item that could not be added previously. The program also demonstrates how to implement cancellation when accessing a <xref:System.Collections.Concurrent.BlockingCollection%601>.  \n  \n [!code-csharp[CDS_BlockingCollection#02](../../../../samples/snippets/csharp/VS_Snippets_Misc/cds_blockingcollection/cs/example02.cs#02)]\n [!code-vb[CDS_BlockingCollection#02](../../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_blockingcollection/vb/nonblockingbc.vb#02)]  \n  \n## See Also  \n <xref:System.Collections.Concurrent?displayProperty=fullName>   \n [BlockingCollection Overview](../../../../docs/standard/collections/thread-safe/blockingcollection-overview.md)","nodes":[{"pos":[12,94],"content":"How to: Add and Take Items Individually from a BlockingCollection | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Add and Take Items Individually from a BlockingCollection | Microsoft Docs","pos":[0,82]}]},{"pos":[455,520],"content":"How to: Add and Take Items Individually from a BlockingCollection","linkify":"How to: Add and Take Items Individually from a BlockingCollection","nodes":[{"content":"How to: Add and Take Items Individually from a BlockingCollection","pos":[0,65]}]},{"content":"This example shows how to add and remove items from a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> in both a blocking and non-blocking manner.","pos":[521,678],"source":"This example shows how to add and remove items from a <xref:System.Collections.Concurrent.BlockingCollection%601> in both a blocking and non-blocking manner."},{"content":"For more information on <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph>, see <bpt id=\"p1\">[</bpt>BlockingCollection Overview<ept id=\"p1\">](../../../../docs/standard/collections/thread-safe/blockingcollection-overview.md)</ept>.","pos":[679,880],"source":" For more information on <xref:System.Collections.Concurrent.BlockingCollection%601>, see [BlockingCollection Overview](../../../../docs/standard/collections/thread-safe/blockingcollection-overview.md)."},{"pos":[887,1186],"content":"For an example of how to enumerate a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> until it is empty and no more elements will be added, see <bpt id=\"p1\">[</bpt>How to: Use ForEach to Remove Items in a BlockingCollection<ept id=\"p1\">](../../../../docs/standard/collections/thread-safe/how-to-use-foreach-to-remove.md)</ept>","source":"For an example of how to enumerate a <xref:System.Collections.Concurrent.BlockingCollection%601> until it is empty and no more elements will be added, see [How to: Use ForEach to Remove Items in a BlockingCollection](../../../../docs/standard/collections/thread-safe/how-to-use-foreach-to-remove.md)"},{"pos":[1195,1202],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This first example shows how to add and take items so that the operations will block if the collection is either temporarily empty (when taking) or at maximum capacity (when adding), or a specified timeout period has elapsed.","pos":[1206,1431]},{"content":"Note that blocking on maximum capacity is only enabled when the BlockingCollection has been created with a maximum capacity specified in the constructor.","pos":[1432,1585]},{"pos":[1592,1874],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CDS_BlockingCollection#01<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Misc/cds_blockingcollection/cs/example01.cs#01)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>CDS_BlockingCollection#01<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_blockingcollection/vb/simpleblocking.vb#01)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[CDS_BlockingCollection#01](../../../../samples/snippets/csharp/VS_Snippets_Misc/cds_blockingcollection/cs/example01.cs#01)]\n [!code-vb[CDS_BlockingCollection#01](../../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_blockingcollection/vb/simpleblocking.vb#01)]"},{"pos":[1883,1890],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This second example shows how to add and take items so that the operations will not block.","pos":[1894,1984]},{"content":"If no item is present, or maximum capacity on a bounded collection has been reached, or the timeout period has elapsed, then the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A&gt;</ph> operation returns false.","pos":[1985,2282],"source":" If no item is present, or maximum capacity on a bounded collection has been reached, or the timeout period has elapsed, then the <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> operation returns false."},{"content":"This allows the thread to do some other useful work for awhile and then try again later to either retrieve a new item, or try to add the same item that could not be added previously.","pos":[2283,2465]},{"content":"The program also demonstrates how to implement cancellation when accessing a <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph>.","pos":[2466,2603],"source":" The program also demonstrates how to implement cancellation when accessing a <xref:System.Collections.Concurrent.BlockingCollection%601>."},{"pos":[2610,2891],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CDS_BlockingCollection#02<ept id=\"p2\">](../../../../samples/snippets/csharp/VS_Snippets_Misc/cds_blockingcollection/cs/example02.cs#02)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>CDS_BlockingCollection#02<ept id=\"p4\">](../../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_blockingcollection/vb/nonblockingbc.vb#02)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[CDS_BlockingCollection#02](../../../../samples/snippets/csharp/VS_Snippets_Misc/cds_blockingcollection/cs/example02.cs#02)]\n [!code-vb[CDS_BlockingCollection#02](../../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_blockingcollection/vb/nonblockingbc.vb#02)]"},{"pos":[2900,2908],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>BlockingCollection Overview<ept id=\"p1\">](../../../../docs/standard/collections/thread-safe/blockingcollection-overview.md)</ept>","pos":[2977,3089],"source":" [BlockingCollection Overview](../../../../docs/standard/collections/thread-safe/blockingcollection-overview.md)"}]}