{"content":"---\ntitle: \"Async (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Async\"\nhelpviewer_keywords: \n  - \"Async [Visual Basic]\"\n  - \"Async keyword [Visual Basic]\"\nms.assetid: 1be8b4b5-9689-41b5-bd33-b906bfd53bc5\n---\n# Async (Visual Basic)\nThe `Async` modifier indicates that the method or [lambda expression](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) that it modifies is asynchronous. Such methods are referred to as *async methods*.  \n  \n An async method provides a convenient way to do potentially long-running work without blocking the caller's thread. The caller of an async method can resume its work without waiting for the async method to finish.  \n  \n> [!NOTE]\n>  The `Async` and `Await` keywords were introduced in Visual Studio 2012. For an introduction to async programming, see [Asynchronous Programming with Async and Await](../../../visual-basic/programming-guide/concepts/async/index.md).  \n  \n The following example shows the structure of an async method. By convention, async method names end in \"Async.\"  \n  \n```vb  \nPublic Async Function ExampleMethodAsync() As Task(Of Integer)  \n    ' . . .  \n  \n    ' At the Await expression, execution in this method is suspended and,  \n    ' if AwaitedProcessAsync has not already finished, control returns  \n    ' to the caller of ExampleMethodAsync. When the awaited task is   \n    ' completed, this method resumes execution.   \n    Dim exampleInt As Integer = Await AwaitedProcessAsync()  \n  \n    ' . . .  \n  \n    ' The return statement completes the task. Any method that is   \n    ' awaiting ExampleMethodAsync can now get the integer result.  \n    Return exampleInt  \nEnd Function  \n```  \n  \n Typically, a method modified by the `Async` keyword contains at least one [Await](../../../visual-basic/language-reference/modifiers/async.md) expression or statement. The method runs synchronously until it reaches the first `Await`, at which point it suspends until the awaited task completes. In the meantime, control is returned to the caller of the method. If the method doesn’t contain an `Await` expression or statement, the method isn’t suspended and executes as a synchronous method does. A compiler warning alerts you to any async methods that don't contain `Await` because that situation might indicate an error. For more information, see the [compiler error](../../../visual-basic/language-reference/error-messages/because-this-call-is-not-awaited-the-current-method-continues-to-run.md).  \n  \n The `Async` keyword is an unreserved keyword. It is a keyword when it modifies a method or a lambda expression. In all other contexts, it is interpreted as an identifier.  \n  \n## Return Types  \n An async method is either a [Sub](../../../visual-basic/programming-guide/language-features/procedures/sub-procedures.md) procedure, or a [Function](../../../visual-basic/programming-guide/language-features/procedures/function-procedures.md) procedure that has a return type of <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>. The method cannot declare any [ByRef](../../../visual-basic/language-reference/modifiers/byref.md) parameters.  \n  \n You specify `Task(Of TResult)` for the return type of an async method if the [Return](../../../visual-basic/language-reference/statements/return-statement.md) statement of the method has an operand of type TResult. You use `Task` if no meaningful value is returned when the method is completed. That is, a call to the method returns a `Task`, but when the `Task` is completed, any `Await` statement that's awaiting the `Task` doesn’t produce a result value.  \n  \n Async subroutines are used primarily to define event handlers where a `Sub` procedure is required. The caller of an async subroutine can't await it and can't catch exceptions that the method throws.  \n  \n For more information and examples, see [Async Return Types](../../../visual-basic/programming-guide/concepts/async/async-return-types.md).  \n  \n## Example  \n The following examples show an async event handler, an async lambda expression, and an async method. For a full example that uses these elements, see [Walkthrough: Accessing the Web by Using Async and Await](../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md). You can download the walkthrough code from [Developer Code Samples](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f).  \n  \n```vb  \n' An event handler must be a Sub procedure.  \nAsync Sub button1_Click(sender As Object, e As RoutedEventArgs) Handles button1.Click  \n    textBox1.Clear()  \n    ' SumPageSizesAsync is a method that returns a Task.  \n    Await SumPageSizesAsync()  \n    textBox1.Text = vbCrLf & \"Control returned to button1_Click.\"  \nEnd Sub  \n  \n' The following async lambda expression creates an equivalent anonymous  \n' event handler.  \nAddHandler button1.Click, Async Sub(sender, e)  \n                              textBox1.Clear()  \n                              ' SumPageSizesAsync is a method that returns a Task.  \n                              Await SumPageSizesAsync()  \n                              textBox1.Text = vbCrLf & \"Control returned to button1_Click.\"  \n                          End Sub  \n  \n' The following async method returns a Task(Of T).  \n' A typical call awaits the Byte array result:  \n'      Dim result As Byte() = Await GetURLContents(\"http://msdn.com\")  \nPrivate Async Function GetURLContentsAsync(url As String) As Task(Of Byte())  \n  \n    ' The downloaded resource ends up in the variable named content.  \n    Dim content = New MemoryStream()  \n  \n    ' Initialize an HttpWebRequest for the current URL.  \n    Dim webReq = CType(WebRequest.Create(url), HttpWebRequest)  \n  \n    ' Send the request to the Internet resource and wait for  \n    ' the response.  \n    Using response As WebResponse = Await webReq.GetResponseAsync()  \n        ' Get the data stream that is associated with the specified URL.  \n        Using responseStream As Stream = response.GetResponseStream()  \n            ' Read the bytes in responseStream and copy them to content.    \n            ' CopyToAsync returns a Task, not a Task<T>.  \n            Await responseStream.CopyToAsync(content)  \n        End Using  \n    End Using  \n  \n    ' Return the result as a byte array.  \n    Return content.ToArray()  \nEnd Function  \n```  \n  \n## See also\n\n- <xref:System.Runtime.CompilerServices.AsyncStateMachineAttribute>\n- [Await Operator](../../../visual-basic/language-reference/operators/await-operator.md)\n- [Asynchronous Programming with Async and Await](../../../visual-basic/programming-guide/concepts/async/index.md)\n- [Walkthrough: Accessing the Web by Using Async and Await](../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)\n","nodes":[{"pos":[4,215],"embed":true,"restype":"x-metadata","content":"title: \"Async (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Async\"\nhelpviewer_keywords: \n  - \"Async [Visual Basic]\"\n  - \"Async keyword [Visual Basic]\"\nms.assetid: 1be8b4b5-9689-41b5-bd33-b906bfd53bc5","nodes":[{"content":"Async (Visual Basic)","nodes":[{"pos":[0,20],"content":"Async (Visual Basic)","nodes":[{"content":"Async (Visual Basic)","pos":[0,20]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[222,242],"content":"Async (Visual Basic)","linkify":"Async (Visual Basic)","nodes":[{"content":"Async (Visual Basic)","pos":[0,20]}]},{"content":"The <ph id=\"ph1\">`Async`</ph> modifier indicates that the method or <bpt id=\"p1\">[</bpt>lambda expression<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> that it modifies is asynchronous.","pos":[243,438],"source":"The `Async` modifier indicates that the method or [lambda expression](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) that it modifies is asynchronous."},{"content":"Such methods are referred to as <bpt id=\"p1\">*</bpt>async methods<ept id=\"p1\">*</ept>.","pos":[439,487],"source":" Such methods are referred to as *async methods*."},{"content":"An async method provides a convenient way to do potentially long-running work without blocking the caller's thread.","pos":[494,609]},{"content":"The caller of an async method can resume its work without waiting for the async method to finish.","pos":[610,707]},{"pos":[715,957],"content":"[!NOTE]\n The `Async` and `Await` keywords were introduced in Visual Studio 2012. For an introduction to async programming, see [Asynchronous Programming with Async and Await](../../../visual-basic/programming-guide/concepts/async/index.md).","leadings":["","> "],"nodes":[{"content":"The `Async` and `Await` keywords were introduced in Visual Studio 2012. For an introduction to async programming, see [Asynchronous Programming with Async and Await](../../../visual-basic/programming-guide/concepts/async/index.md).","pos":[9,240],"nodes":[{"content":"The <ph id=\"ph1\">`Async`</ph> and <ph id=\"ph2\">`Await`</ph> keywords were introduced in Visual Studio 2012.","pos":[0,71],"source":"The `Async` and `Await` keywords were introduced in Visual Studio 2012."},{"content":"For an introduction to async programming, see <bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.","pos":[72,231],"source":" For an introduction to async programming, see [Asynchronous Programming with Async and Await](../../../visual-basic/programming-guide/concepts/async/index.md)."}]}]},{"content":"The following example shows the structure of an async method.","pos":[964,1025]},{"content":"By convention, async method names end in \"Async.\"","pos":[1026,1075]},{"content":"Typically, a method modified by the <ph id=\"ph1\">`Async`</ph> keyword contains at least one <bpt id=\"p1\">[</bpt>Await<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/async.md)</ept> expression or statement.","pos":[1710,1877],"source":"Typically, a method modified by the `Async` keyword contains at least one [Await](../../../visual-basic/language-reference/modifiers/async.md) expression or statement."},{"content":"The method runs synchronously until it reaches the first <ph id=\"ph1\">`Await`</ph>, at which point it suspends until the awaited task completes.","pos":[1878,2004],"source":" The method runs synchronously until it reaches the first `Await`, at which point it suspends until the awaited task completes."},{"content":"In the meantime, control is returned to the caller of the method.","pos":[2005,2070]},{"content":"If the method doesn’t contain an <ph id=\"ph1\">`Await`</ph> expression or statement, the method isn’t suspended and executes as a synchronous method does.","pos":[2071,2206],"source":" If the method doesn’t contain an `Await` expression or statement, the method isn’t suspended and executes as a synchronous method does."},{"content":"A compiler warning alerts you to any async methods that don't contain <ph id=\"ph1\">`Await`</ph> because that situation might indicate an error.","pos":[2207,2332],"source":" A compiler warning alerts you to any async methods that don't contain `Await` because that situation might indicate an error."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>compiler error<ept id=\"p1\">](../../../visual-basic/language-reference/error-messages/because-this-call-is-not-awaited-the-current-method-continues-to-run.md)</ept>.","pos":[2333,2509],"source":" For more information, see the [compiler error](../../../visual-basic/language-reference/error-messages/because-this-call-is-not-awaited-the-current-method-continues-to-run.md)."},{"content":"The <ph id=\"ph1\">`Async`</ph> keyword is an unreserved keyword.","pos":[2516,2561],"source":"The `Async` keyword is an unreserved keyword."},{"content":"It is a keyword when it modifies a method or a lambda expression.","pos":[2562,2627]},{"content":"In all other contexts, it is interpreted as an identifier.","pos":[2628,2686]},{"pos":[2695,2707],"content":"Return Types","linkify":"Return Types","nodes":[{"content":"Return Types","pos":[0,12]}]},{"content":"An async method is either a <bpt id=\"p1\">[</bpt>Sub<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/sub-procedures.md)</ept> procedure, or a <bpt id=\"p2\">[</bpt>Function<ept id=\"p2\">](../../../visual-basic/programming-guide/language-features/procedures/function-procedures.md)</ept> procedure that has a return type of <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","pos":[2711,3066],"source":"An async method is either a [Sub](../../../visual-basic/programming-guide/language-features/procedures/sub-procedures.md) procedure, or a [Function](../../../visual-basic/programming-guide/language-features/procedures/function-procedures.md) procedure that has a return type of <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601>."},{"content":"The method cannot declare any <bpt id=\"p1\">[</bpt>ByRef<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/byref.md)</ept> parameters.","pos":[3067,3177],"source":" The method cannot declare any [ByRef](../../../visual-basic/language-reference/modifiers/byref.md) parameters."},{"content":"You specify <ph id=\"ph1\">`Task(Of TResult)`</ph> for the return type of an async method if the <bpt id=\"p1\">[</bpt>Return<ept id=\"p1\">](../../../visual-basic/language-reference/statements/return-statement.md)</ept> statement of the method has an operand of type TResult.","pos":[3184,3398],"source":"You specify `Task(Of TResult)` for the return type of an async method if the [Return](../../../visual-basic/language-reference/statements/return-statement.md) statement of the method has an operand of type TResult."},{"content":"You use <ph id=\"ph1\">`Task`</ph> if no meaningful value is returned when the method is completed.","pos":[3399,3478],"source":" You use `Task` if no meaningful value is returned when the method is completed."},{"content":"That is, a call to the method returns a <ph id=\"ph1\">`Task`</ph>, but when the <ph id=\"ph2\">`Task`</ph> is completed, any <ph id=\"ph3\">`Await`</ph> statement that's awaiting the <ph id=\"ph4\">`Task`</ph> doesn’t produce a result value.","pos":[3479,3641],"source":" That is, a call to the method returns a `Task`, but when the `Task` is completed, any `Await` statement that's awaiting the `Task` doesn’t produce a result value."},{"content":"Async subroutines are used primarily to define event handlers where a <ph id=\"ph1\">`Sub`</ph> procedure is required.","pos":[3648,3746],"source":"Async subroutines are used primarily to define event handlers where a `Sub` procedure is required."},{"content":"The caller of an async subroutine can't await it and can't catch exceptions that the method throws.","pos":[3747,3846]},{"pos":[3853,3991],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Async Return Types<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>.","source":"For more information and examples, see [Async Return Types](../../../visual-basic/programming-guide/concepts/async/async-return-types.md)."},{"pos":[4000,4007],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following examples show an async event handler, an async lambda expression, and an async method.","pos":[4011,4111]},{"content":"For a full example that uses these elements, see <bpt id=\"p1\">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.","pos":[4112,4333],"source":" For a full example that uses these elements, see [Walkthrough: Accessing the Web by Using Async and Await](../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)."},{"content":"You can download the walkthrough code from <bpt id=\"p1\">[</bpt>Developer Code Samples<ept id=\"p1\">](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)</ept>.","pos":[4334,4471],"source":" You can download the walkthrough code from [Developer Code Samples](https://code.msdn.microsoft.com/Async-Sample-Accessing-the-9c10497f)."},{"pos":[6410,6418],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6490,6576],"content":"<bpt id=\"p1\">[</bpt>Await Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/await-operator.md)</ept>","source":"[Await Operator](../../../visual-basic/language-reference/operators/await-operator.md)"},{"pos":[6579,6691],"content":"<bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/async/index.md)</ept>","source":"[Asynchronous Programming with Async and Await](../../../visual-basic/programming-guide/concepts/async/index.md)"},{"pos":[6694,6865],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>","source":"[Walkthrough: Accessing the Web by Using Async and Await](../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)"}]}