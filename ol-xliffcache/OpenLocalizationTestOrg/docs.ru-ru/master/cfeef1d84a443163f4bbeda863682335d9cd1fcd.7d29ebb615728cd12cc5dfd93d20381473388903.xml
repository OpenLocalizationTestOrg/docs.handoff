{"content":"---\ntitle: \"yield contextual keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"yield\"\n  - \"yield_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"yield keyword [C#]\"\nms.assetid: 1089194f-9e53-46a2-8642-53ccbe9d414d\n---\n# yield (C# Reference)\n\nWhen you use the `yield` [contextual keyword](index.md#contextual-keywords) in a statement, you indicate that the method, operator, or `get` accessor in which it appears is an iterator. Using `yield` to define an iterator removes the need for an explicit extra class (the class that holds the state for an enumeration, see <xref:System.Collections.Generic.IEnumerator%601> for an example) when you implement the <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> pattern for a custom collection type.\n\nThe following example shows the two forms of the `yield` statement.\n\n```csharp\nyield return <expression>;\nyield break;\n```\n\n## Remarks\n\nYou use a `yield return` statement to return each element one at a time.\n\nYou consume an iterator method by using a [foreach](foreach-in.md) statement or LINQ query. Each iteration of the `foreach` loop calls the iterator method. When a `yield return` statement is reached in the iterator method, `expression` is returned, and the current location in code is retained. Execution is restarted from that location the next time that the iterator function is called.\n\nYou can use a `yield break` statement to end the iteration.\n\nFor more information about iterators, see [Iterators](../../iterators.md).\n\n## Iterator methods and get accessors\n\nThe declaration of an iterator must meet the following requirements:\n\n- The return type must be <xref:System.Collections.IEnumerable>, <xref:System.Collections.Generic.IEnumerable%601>, <xref:System.Collections.IEnumerator>, or <xref:System.Collections.Generic.IEnumerator%601>.\n\n- The declaration can't have any [in](in-parameter-modifier.md) [ref](ref.md) or [out](out-parameter-modifier.md) parameters.\n\nThe `yield` type of an iterator that returns <xref:System.Collections.IEnumerable> or <xref:System.Collections.IEnumerator> is `object`.  If the iterator returns <xref:System.Collections.Generic.IEnumerable%601> or <xref:System.Collections.Generic.IEnumerator%601>, there must be an implicit conversion from the type of the expression in the `yield return` statement to the generic type parameter .\n\nYou can't include a `yield return` or `yield break` statement in methods that have the following characteristics:\n\n- Anonymous methods. For more information, see [Anonymous Methods](../../programming-guide/statements-expressions-operators/anonymous-methods.md).\n\n- Methods that contain unsafe blocks. For more information, see [unsafe](unsafe.md).\n\n## Exception handling\n\nA `yield return` statement can't be located in a try-catch block. A `yield return` statement can be located in the try block of a try-finally statement.\n\nA `yield break` statement can be located in a try block or a catch block but not a finally block.\n\nIf the `foreach` body (outside of the iterator method) throws an exception, a `finally` block in the iterator method is executed.\n\n## Technical implementation\n\nThe following code returns an `IEnumerable<string>` from an iterator method and then iterates through its elements.\n\n```csharp\nIEnumerable<string> elements = MyIteratorMethod();\nforeach (string element in elements)\n{\n   ...\n}\n```\n\nThe call to `MyIteratorMethod` doesn't execute the body of the method. Instead the call returns an `IEnumerable<string>` into the `elements` variable.\n\nOn an iteration of the `foreach` loop, the <xref:System.Collections.IEnumerator.MoveNext%2A> method is called for `elements`. This call executes the body of `MyIteratorMethod` until the next `yield return` statement is reached. The expression returned by the `yield return` statement determines not only the value of the `element` variable for consumption by the loop body but also the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property of `elements`, which is an `IEnumerable<string>`.\n\nOn each subsequent iteration of the `foreach` loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a `yield return` statement. The `foreach` loop completes when the end of the iterator method or a `yield break` statement is reached.\n\n## Example\n\nThe following example has a `yield return` statement that's inside a `for` loop. Each iteration of the `foreach` statement body in the `Main` method creates a call to the `Power` iterator function. Each call to the iterator function proceeds to the next execution of the `yield return` statement, which occurs during the next iteration of the `for` loop.\n\nThe return type of the iterator method is <xref:System.Collections.IEnumerable>, which is an iterator interface type. When the iterator method is called, it returns an enumerable object that contains the powers of a number.\n\n[!code-csharp[csrefKeywordsContextual#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsContextual/CS/csrefKeywordsContextual.cs#5)]\n\n## Example\n\nThe following example demonstrates a `get` accessor that is an iterator. In the example, each `yield return` statement returns an instance of a user-defined class.\n\n[!code-csharp[csrefKeywordsContextual#21](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsContextual/CS/csrefKeywordsContextual.cs#21)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../language-reference/index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [foreach, in](foreach-in.md)\n- [Iterators](../../iterators.md)","nodes":[{"pos":[4,241],"embed":true,"restype":"x-metadata","content":"title: \"yield contextual keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"yield\"\n  - \"yield_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"yield keyword [C#]\"\nms.assetid: 1089194f-9e53-46a2-8642-53ccbe9d414d","nodes":[{"content":"yield contextual keyword - C# Reference","nodes":[{"pos":[0,39],"content":"yield contextual keyword - C# Reference","nodes":[{"content":"yield contextual keyword - C# Reference","pos":[0,39]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[248,268],"content":"yield (C# Reference)","linkify":"yield (C# Reference)","nodes":[{"content":"yield (C# Reference)","pos":[0,20]}]},{"content":"When you use the <ph id=\"ph1\">`yield`</ph> <bpt id=\"p1\">[</bpt>contextual keyword<ept id=\"p1\">](index.md#contextual-keywords)</ept> in a statement, you indicate that the method, operator, or <ph id=\"ph2\">`get`</ph> accessor in which it appears is an iterator.","pos":[270,455],"source":"When you use the `yield` [contextual keyword](index.md#contextual-keywords) in a statement, you indicate that the method, operator, or `get` accessor in which it appears is an iterator."},{"content":"Using <ph id=\"ph1\">`yield`</ph> to define an iterator removes the need for an explicit extra class (the class that holds the state for an enumeration, see <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> for an example) when you implement the <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Collections.IEnumerator&gt;</ph> pattern for a custom collection type.","pos":[456,799],"source":" Using `yield` to define an iterator removes the need for an explicit extra class (the class that holds the state for an enumeration, see <xref:System.Collections.Generic.IEnumerator%601> for an example) when you implement the <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> pattern for a custom collection type."},{"pos":[801,868],"content":"The following example shows the two forms of the <ph id=\"ph1\">`yield`</ph> statement.","source":"The following example shows the two forms of the `yield` statement."},{"pos":[928,935],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[937,1009],"content":"You use a <ph id=\"ph1\">`yield return`</ph> statement to return each element one at a time.","source":"You use a `yield return` statement to return each element one at a time."},{"content":"You consume an iterator method by using a <bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](foreach-in.md)</ept> statement or LINQ query.","pos":[1011,1102],"source":"You consume an iterator method by using a [foreach](foreach-in.md) statement or LINQ query."},{"content":"Each iteration of the <ph id=\"ph1\">`foreach`</ph> loop calls the iterator method.","pos":[1103,1166],"source":" Each iteration of the `foreach` loop calls the iterator method."},{"content":"When a <ph id=\"ph1\">`yield return`</ph> statement is reached in the iterator method, <ph id=\"ph2\">`expression`</ph> is returned, and the current location in code is retained.","pos":[1167,1305],"source":" When a `yield return` statement is reached in the iterator method, `expression` is returned, and the current location in code is retained."},{"content":"Execution is restarted from that location the next time that the iterator function is called.","pos":[1306,1399]},{"pos":[1401,1460],"content":"You can use a <ph id=\"ph1\">`yield break`</ph> statement to end the iteration.","source":"You can use a `yield break` statement to end the iteration."},{"pos":[1462,1536],"content":"For more information about iterators, see <bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](../../iterators.md)</ept>.","source":"For more information about iterators, see [Iterators](../../iterators.md)."},{"pos":[1541,1575],"content":"Iterator methods and get accessors","linkify":"Iterator methods and get accessors","nodes":[{"content":"Iterator methods and get accessors","pos":[0,34]}]},{"content":"The declaration of an iterator must meet the following requirements:","pos":[1577,1645]},{"pos":[1649,1855],"content":"The return type must be <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>.","source":"The return type must be <xref:System.Collections.IEnumerable>, <xref:System.Collections.Generic.IEnumerable%601>, <xref:System.Collections.IEnumerator>, or <xref:System.Collections.Generic.IEnumerator%601>."},{"pos":[1859,1982],"content":"The declaration can't have any <bpt id=\"p1\">[</bpt>in<ept id=\"p1\">](in-parameter-modifier.md)</ept> <bpt id=\"p2\">[</bpt>ref<ept id=\"p2\">](ref.md)</ept> or <bpt id=\"p3\">[</bpt>out<ept id=\"p3\">](out-parameter-modifier.md)</ept> parameters.","source":"The declaration can't have any [in](in-parameter-modifier.md) [ref](ref.md) or [out](out-parameter-modifier.md) parameters."},{"content":"The <ph id=\"ph1\">`yield`</ph> type of an iterator that returns <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator&gt;</ph> is <ph id=\"ph4\">`object`</ph>.","pos":[1984,2120],"source":"The `yield` type of an iterator that returns <xref:System.Collections.IEnumerable> or <xref:System.Collections.IEnumerator> is `object`."},{"content":"If the iterator returns <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>, there must be an implicit conversion from the type of the expression in the <ph id=\"ph3\">`yield return`</ph> statement to the generic type parameter .","pos":[2122,2382],"source":"  If the iterator returns <xref:System.Collections.Generic.IEnumerable%601> or <xref:System.Collections.Generic.IEnumerator%601>, there must be an implicit conversion from the type of the expression in the `yield return` statement to the generic type parameter ."},{"pos":[2384,2497],"content":"You can't include a <ph id=\"ph1\">`yield return`</ph> or <ph id=\"ph2\">`yield break`</ph> statement in methods that have the following characteristics:","source":"You can't include a `yield return` or `yield break` statement in methods that have the following characteristics:"},{"content":"Anonymous methods.","pos":[2501,2519]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Anonymous Methods<ept id=\"p1\">](../../programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.","pos":[2520,2645],"source":" For more information, see [Anonymous Methods](../../programming-guide/statements-expressions-operators/anonymous-methods.md)."},{"content":"Methods that contain unsafe blocks.","pos":[2649,2684]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](unsafe.md)</ept>.","pos":[2685,2731],"source":" For more information, see [unsafe](unsafe.md)."},{"pos":[2736,2754],"content":"Exception handling","linkify":"Exception handling","nodes":[{"content":"Exception handling","pos":[0,18]}]},{"content":"A <ph id=\"ph1\">`yield return`</ph> statement can't be located in a try-catch block.","pos":[2756,2821],"source":"A `yield return` statement can't be located in a try-catch block."},{"content":"A <ph id=\"ph1\">`yield return`</ph> statement can be located in the try block of a try-finally statement.","pos":[2822,2908],"source":" A `yield return` statement can be located in the try block of a try-finally statement."},{"pos":[2910,3007],"content":"A <ph id=\"ph1\">`yield break`</ph> statement can be located in a try block or a catch block but not a finally block.","source":"A `yield break` statement can be located in a try block or a catch block but not a finally block."},{"pos":[3009,3138],"content":"If the <ph id=\"ph1\">`foreach`</ph> body (outside of the iterator method) throws an exception, a <ph id=\"ph2\">`finally`</ph> block in the iterator method is executed.","source":"If the `foreach` body (outside of the iterator method) throws an exception, a `finally` block in the iterator method is executed."},{"pos":[3143,3167],"content":"Technical implementation","linkify":"Technical implementation","nodes":[{"content":"Technical implementation","pos":[0,24]}]},{"pos":[3169,3284],"content":"The following code returns an <ph id=\"ph1\">`IEnumerable&lt;string&gt;`</ph> from an iterator method and then iterates through its elements.","source":"The following code returns an `IEnumerable<string>` from an iterator method and then iterates through its elements."},{"content":"The call to <ph id=\"ph1\">`MyIteratorMethod`</ph> doesn't execute the body of the method.","pos":[3400,3470],"source":"The call to `MyIteratorMethod` doesn't execute the body of the method."},{"content":"Instead the call returns an <ph id=\"ph1\">`IEnumerable&lt;string&gt;`</ph> into the <ph id=\"ph2\">`elements`</ph> variable.","pos":[3471,3550],"source":" Instead the call returns an `IEnumerable<string>` into the `elements` variable."},{"content":"On an iteration of the <ph id=\"ph1\">`foreach`</ph> loop, the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method is called for <ph id=\"ph3\">`elements`</ph>.","pos":[3552,3677],"source":"On an iteration of the `foreach` loop, the <xref:System.Collections.IEnumerator.MoveNext%2A> method is called for `elements`."},{"content":"This call executes the body of <ph id=\"ph1\">`MyIteratorMethod`</ph> until the next <ph id=\"ph2\">`yield return`</ph> statement is reached.","pos":[3678,3779],"source":" This call executes the body of `MyIteratorMethod` until the next `yield return` statement is reached."},{"content":"The expression returned by the <ph id=\"ph1\">`yield return`</ph> statement determines not only the value of the <ph id=\"ph2\">`element`</ph> variable for consumption by the loop body but also the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property of <ph id=\"ph4\">`elements`</ph>, which is an <ph id=\"ph5\">`IEnumerable&lt;string&gt;`</ph>.","pos":[3780,4057],"source":" The expression returned by the `yield return` statement determines not only the value of the `element` variable for consumption by the loop body but also the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property of `elements`, which is an `IEnumerable<string>`."},{"content":"On each subsequent iteration of the <ph id=\"ph1\">`foreach`</ph> loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a <ph id=\"ph2\">`yield return`</ph> statement.","pos":[4059,4238],"source":"On each subsequent iteration of the `foreach` loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a `yield return` statement."},{"content":"The <ph id=\"ph1\">`foreach`</ph> loop completes when the end of the iterator method or a <ph id=\"ph2\">`yield break`</ph> statement is reached.","pos":[4239,4344],"source":" The `foreach` loop completes when the end of the iterator method or a `yield break` statement is reached."},{"pos":[4349,4356],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example has a <ph id=\"ph1\">`yield return`</ph> statement that's inside a <ph id=\"ph2\">`for`</ph> loop.","pos":[4358,4438],"source":"The following example has a `yield return` statement that's inside a `for` loop."},{"content":"Each iteration of the <ph id=\"ph1\">`foreach`</ph> statement body in the <ph id=\"ph2\">`Main`</ph> method creates a call to the <ph id=\"ph3\">`Power`</ph> iterator function.","pos":[4439,4555],"source":" Each iteration of the `foreach` statement body in the `Main` method creates a call to the `Power` iterator function."},{"content":"Each call to the iterator function proceeds to the next execution of the <ph id=\"ph1\">`yield return`</ph> statement, which occurs during the next iteration of the <ph id=\"ph2\">`for`</ph> loop.","pos":[4556,4712],"source":" Each call to the iterator function proceeds to the next execution of the `yield return` statement, which occurs during the next iteration of the `for` loop."},{"content":"The return type of the iterator method is <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerable&gt;</ph>, which is an iterator interface type.","pos":[4714,4831],"source":"The return type of the iterator method is <xref:System.Collections.IEnumerable>, which is an iterator interface type."},{"content":"When the iterator method is called, it returns an enumerable object that contains the powers of a number.","pos":[4832,4937]},{"pos":[5089,5096],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates a <ph id=\"ph1\">`get`</ph> accessor that is an iterator.","pos":[5098,5170],"source":"The following example demonstrates a `get` accessor that is an iterator."},{"content":"In the example, each <ph id=\"ph1\">`yield return`</ph> statement returns an instance of a user-defined class.","pos":[5171,5261],"source":" In the example, each `yield return` statement returns an instance of a user-defined class."},{"pos":[5415,5440],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[5506,5514],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5518,5567],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../language-reference/index.md)</ept>","source":"[C# Reference](../../language-reference/index.md)"},{"pos":[5570,5626],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[5629,5657],"content":"<bpt id=\"p1\">[</bpt>foreach, in<ept id=\"p1\">](foreach-in.md)</ept>","source":"[foreach, in](foreach-in.md)"},{"pos":[5660,5691],"content":"<bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](../../iterators.md)</ept>","source":"[Iterators](../../iterators.md)"}]}