<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="tracking-participants.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee9c8b9de992ba406061f59c7d0427745a9a2eb9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\tracking-participants.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">230a50a4f6a734b61c92dfd9b1eb9bae5ef32422</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be2572cb6b1ce2d4f821b07b5869c12fe76f758a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Tracking Participants | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Tracking Participants</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Tracking participants are extensibility points that allow a workflow developer to access <ph id="ph1">&lt;xref:System.Activities.Tracking.InteropTrackingRecord.TrackingRecord%2A&gt;</ph> objects and process them.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)]</ph> includes a standard tracking participant that writes tracking records as Event Tracing for Windows (ETW) events.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If that does not meet your requirements, you can also write a custom tracking participant.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Tracking Participants</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The tracking infrastructure allows the application of a filter on the outgoing tracking records such that a participant can subscribe to a subset of the records.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The mechanism to apply a filter is through a tracking profile.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph> in <ph id="ph2">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> provides a tracking participant that writes the tracking records to an ETW session.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The participant is configured on a workflow service by adding a tracking-specific behavior in a configuration file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Enabling an ETW tracking participant allows tracking records to be viewed in the event viewer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The SDK sample for ETW-based tracking is a good way to get familiar with WF tracking using the ETW-based tracking participant.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>ETW Tracking Participant</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> includes an ETW Tracking Participant that writes the tracking records to an ETW session.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is done in a very efficient manner with minimal impact to the application’s performance or to the server’s throughput.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An advantage of using the standard ETW tracking participant is that the tracking records it receives can be viewed with the other application and system logs in the Windows Event Viewer.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The standard ETW tracking participant is configured in the Web.config file as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`trackingProfile`</ph> name is not specified, such as just <ph id="ph2">`&lt;etwTracking/&gt;`</ph> or <ph id="ph3">`&lt;etwTracking profileName=""/&gt;`</ph>, then the default tracking profile installed with the <ph id="ph4">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> in the Machine.config file is used.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the Machine.config file, the default tracking profile subscribes to workflow instance records and faults.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In ETW, events are written to the ETW session through a provider ID.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The provider ID that the ETW tracking participant uses for writing the tracking records to ETW is defined in the diagnostics section of the Web.config file (under <ph id="ph1">`&lt;system.serviceModel&gt;&lt;diagnostics&gt;`</ph>).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By default, the ETW tracking participant uses a default provider ID when one has not been specified, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following illustration shows the flow of tracking data through the ETW tracking participant.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once the tracking data reaches the ETW session, it can be accessed in a number of ways.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>One of the most useful ways to access these events is through Event Viewer, a common Windows tool used for viewing logs and traces from applications and services.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The flow of Tracking and ETW Tracking Provider<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/trackingdatathroughetwparticipant.gif "</bpt>TrackingDatathroughETWParticipant<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Tracking Participant Event Data</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A tracking participant serializes tracked event data to an ETW session in the format of one event per tracking record.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An event is identified using an ID within the range of 100 through 199.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For definitions of the tracking event records emitted by a tracking participant, see the <bpt id="p1">[</bpt>Tracking Events Reference<ept id="p1">](../../../docs/framework/windows-workflow-foundation/tracking-events-reference.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The size of an ETW event is limited by the ETW buffer size, or the by the maximum payload for an ETW event, whichever value is smaller.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the size of the event exceeds either of these ETW limits, the event is truncated and its content removed in an arbitrary manner.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Variables, arguments, annotations and custom data are not selectively removed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the case of truncation, all of these are truncated regardless of the value that caused the event size to exceed the ETW limit.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The removed data is replaced with <ph id="ph1">`&lt;item&gt;..&lt;item&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Complex types in variables, arguments, and custom data items are serialized to the ETW event record using the <bpt id="p1">[</bpt>NetDataContractSerializer Class<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=177537)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This class includes CLR-type information in the serialized XML steam.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Truncation of payload data due to ETW limits can result in duplicate tracking records being sent to an ETW session.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This can occur if more than one session is listening for the events and the sessions have different payload limits for the events.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For  the session with the lower limit the event may be truncated.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The ETW tracking participant does not have any knowledge of the number of sessions listening for the events; if an event is truncated for a session then the ETW participant retries sending the event once.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In this case the session that is configured to accept a larger payload size will get the event twice (the non-truncated and truncated event).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Duplication can be prevented by configuring all the ETW sessions with same buffer size limits.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Accessing Tracking Data from an ETW Participant in the Event Viewer</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Events that are written to an ETW session by the ETW tracking participant can be accessed through the Event Viewer (when using the default provider ID).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This allows for rapidly viewing of tracking records that have been emitted by the workflow.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Tracking record events emitted to an ETW session use event IDs in the range of 100 through 199.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To enable viewing the Tracking Records in Event Viewer</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Start the Event Viewer (EVENTVWR.EXE)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Event Viewer, Applications and Services Logs, Microsoft, Windows, Application Server-Applications<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Right-click and ensure that <bpt id="p1">**</bpt>View, Show Analytic and Debug logs<ept id="p1">**</ept> is selected.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If not, select it so the check mark appears next to it.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This displays the <bpt id="p1">**</bpt>Analytic<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Perf<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Debug<ept id="p3">**</ept> logs.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>Analytic<ept id="p1">**</ept> log and then select <bpt id="p2">**</bpt>Enable Log<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The log will exist in the %SystemRoot%\System32\Winevt\Logs\Microsoft-Windows-Application Server-Applications%4Analytic.etl file.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Custom Tracking Participant</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The tracking participant API allows extension of the tracking runtime with a user-provided tracking participant that can include custom logic to handle tracking records emitted by the workflow runtime.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To write a custom tracking participant, the developer must implement the <ph id="ph1">`Track`</ph> method on the <ph id="ph2">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This method is called when a tracking record is emitted by the workflow runtime.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Tracking participants derive from the <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The system-provided <ph id="ph1">&lt;xref:System.Activities.Tracking.EtwTrackingParticipant&gt;</ph> emits an Event Tracking for Windows (ETW) event for each tracking record that is received.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To create a custom tracking participant, a class is created that derives from <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To provide basic tracking functionality, override <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant.Track%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant.Track%2A&gt;</ph> is called when a tracking record is sent by the runtime and can be processed in the desired manner.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the following example, a custom tracking participant class is defined that emits all tracking records to the console window.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also implement a <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> object that processes the tracking records asynchronously using its <ph id="ph2">`BeginTrack`</ph> and <ph id="ph3">`EndTrack`</ph> methods</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To use a particular tracking participant, register it with the workflow instance that you want to track, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the following example, a workflow that consists of a <ph id="ph1">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity that contains a <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity is created.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ConsoleTrackingParticipant`</ph> is added to the extensions and the workflow is invoked.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Server App Fabric Monitoring<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=201273)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Monitoring Applications with App Fabric<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=201275)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>