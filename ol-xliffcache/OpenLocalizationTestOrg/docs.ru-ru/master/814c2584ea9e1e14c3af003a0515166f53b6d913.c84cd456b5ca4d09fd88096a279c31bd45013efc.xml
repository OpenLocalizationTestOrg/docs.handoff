{"content":"---\ntitle: \"How to: Create Unsigned Friend Assemblies (Visual Basic)\"\nms.date: 03/14/2018\nms.assetid: 5735eb79-9729-4c46-ac1f-537ada3acaa7\n---\n# How to: Create Unsigned Friend Assemblies (Visual Basic)\nThis example shows how to use friend assemblies with assemblies that are unsigned.  \n  \n### To create an assembly and a friend assembly  \n  \n1.  Open a command prompt.  \n  \n2.  Create a Visual Basic file named `friend_signed_A.` that contains the following code. The code uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to declare friend_signed_B as a friend assembly.  \n  \n    ```vb  \n    ' friend_unsigned_A.vb  \n    ' Compile with:   \n    ' vbc -target:library friend_unsigned_A.vb  \n    Imports System.Runtime.CompilerServices  \n    Imports System  \n  \n    <Assembly: InternalsVisibleTo(\"friend_unsigned_B\")>   \n  \n    ' Friend type.  \n    Friend Class Class1  \n        Public Sub Test()  \n            Console.WriteLine(\"Class1.Test\")  \n        End Sub  \n    End Class  \n  \n    ' Public type with Friend member.  \n    Public Class Class2  \n        Friend Sub Test()  \n            Console.WriteLine(\"Class2.Test\")  \n        End Sub  \n    End Class  \n    ```  \n  \n3.  Compile and sign friend_signed_A by using the following command.  \n  \n    ```console  \n    vbc -target:library friend_unsigned_A.vb  \n    ```  \n  \n4.  Create a Visual Basic file named `friend_unsigned_B` that contains the following code. Because friend_unsigned_A specifies friend_unsigned_B as a friend assembly, the code in friend_unsigned_B can access `Friend` types and members from friend_unsigned_A.  \n  \n    ```vb  \n    ' friend_unsigned_B.vb  \n    ' Compile with:   \n    ' vbc -r:friend_unsigned_A.dll friend_unsigned_B.vb  \n    Module Module1  \n        Sub Main()  \n            ' Access a Friend type.  \n            Dim inst1 As New Class1()  \n            inst1.Test()  \n  \n            Dim inst2 As New Class2()  \n            ' Access a Friend member of a public type.  \n            inst2.Test()  \n  \n            System.Console.ReadLine()  \n        End Sub  \n    End Module  \n    ```  \n  \n5.  Compile friend_signed_B by using the following command.  \n  \n    ```console\n    vbc -r:friend_unsigned_A.dll friend_unsigned_B.vb  \n    ```  \n  \n     The name of the assembly that is generated by the compiler must match the friend assembly name that is passed to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute. You can explicitly set the assembly by using the `/out` compiler option.  \n  \n6.  Run the friend_signed_B.exe file.  \n  \n     The program displays two strings: \"Class1.Test\" and \"Class2.Test\".  \n  \n## .NET Framework Security  \n There are similarities between the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute and the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The main difference is that <xref:System.Security.Permissions.StrongNameIdentityPermission> can demand security permissions to run a particular section of code, whereas the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute controls the visibility of `Friend` types and members.  \n  \n## See also\n\n- <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>\n- [Assemblies in .NET](../../../../standard/assembly/index.md)\n- [Friend Assemblies](../../../../standard/assembly/friend-assemblies.md)\n- [How to: Create Signed Friend Assemblies (Visual Basic)](../../../../visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-signed-friend-assemblies.md)\n- [Programming Guide Concepts](../../../../visual-basic/programming-guide/concepts/index.md)\n","nodes":[{"pos":[4,138],"embed":true,"restype":"x-metadata","content":"title: \"How to: Create Unsigned Friend Assemblies (Visual Basic)\"\nms.date: 03/14/2018\nms.assetid: 5735eb79-9729-4c46-ac1f-537ada3acaa7","nodes":[{"content":"How to: Create Unsigned Friend Assemblies (Visual Basic)","nodes":[{"pos":[0,56],"content":"How to: Create Unsigned Friend Assemblies (Visual Basic)","nodes":[{"content":"How to: Create Unsigned Friend Assemblies (Visual Basic)","pos":[0,56]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[145,201],"content":"How to: Create Unsigned Friend Assemblies (Visual Basic)","linkify":"How to: Create Unsigned Friend Assemblies (Visual Basic)","nodes":[{"content":"How to: Create Unsigned Friend Assemblies (Visual Basic)","pos":[0,56]}]},{"content":"This example shows how to use friend assemblies with assemblies that are unsigned.","pos":[202,284]},{"pos":[294,337],"content":"To create an assembly and a friend assembly","linkify":"To create an assembly and a friend assembly","nodes":[{"content":"To create an assembly and a friend assembly","pos":[0,43]}]},{"content":"Open a command prompt.","pos":[347,369]},{"content":"Create a Visual Basic file named <ph id=\"ph1\">`friend_signed_A.`</ph> that contains the following code.","pos":[379,464],"source":"Create a Visual Basic file named `friend_signed_A.` that contains the following code."},{"content":"The code uses the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to declare friend_signed_B as a friend assembly.","pos":[465,608],"source":" The code uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to declare friend_signed_B as a friend assembly."},{"content":"Compile and sign friend_signed_A by using the following command.","pos":[1210,1274]},{"content":"Create a Visual Basic file named <ph id=\"ph1\">`friend_unsigned_B`</ph> that contains the following code.","pos":[1361,1447],"source":"Create a Visual Basic file named `friend_unsigned_B` that contains the following code."},{"content":"Because friend_unsigned_A specifies friend_unsigned_B as a friend assembly, the code in friend_unsigned_B can access <ph id=\"ph1\">`Friend`</ph> types and members from friend_unsigned_A.","pos":[1448,1615],"source":" Because friend_unsigned_A specifies friend_unsigned_B as a friend assembly, the code in friend_unsigned_B can access `Friend` types and members from friend_unsigned_A."},{"content":"Compile friend_signed_B by using the following command.","pos":[2112,2167]},{"content":"The name of the assembly that is generated by the compiler must match the friend assembly name that is passed to the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute.","pos":[2262,2456],"source":"The name of the assembly that is generated by the compiler must match the friend assembly name that is passed to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute."},{"content":"You can explicitly set the assembly by using the <ph id=\"ph1\">`/out`</ph> compiler option.","pos":[2457,2529],"source":" You can explicitly set the assembly by using the `/out` compiler option."},{"content":"Run the friend_signed_B.exe file.","pos":[2539,2572]},{"content":"The program displays two strings: \"Class1.Test\" and \"Class2.Test\".","pos":[2583,2649]},{"pos":[2658,2681],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"content":"There are similarities between the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute and the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.StrongNameIdentityPermission&gt;</ph> class.","pos":[2685,2875],"source":"There are similarities between the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute and the <xref:System.Security.Permissions.StrongNameIdentityPermission> class."},{"content":"The main difference is that <ph id=\"ph1\">&lt;xref:System.Security.Permissions.StrongNameIdentityPermission&gt;</ph> can demand security permissions to run a particular section of code, whereas the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute controls the visibility of <ph id=\"ph3\">`Friend`</ph> types and members.","pos":[2876,3180],"source":" The main difference is that <xref:System.Security.Permissions.StrongNameIdentityPermission> can demand security permissions to run a particular section of code, whereas the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute controls the visibility of `Friend` types and members."},{"pos":[3189,3197],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3270,3330],"content":"<bpt id=\"p1\">[</bpt>Assemblies in .NET<ept id=\"p1\">](../../../../standard/assembly/index.md)</ept>","source":"[Assemblies in .NET](../../../../standard/assembly/index.md)"},{"pos":[3333,3404],"content":"<bpt id=\"p1\">[</bpt>Friend Assemblies<ept id=\"p1\">](../../../../standard/assembly/friend-assemblies.md)</ept>","source":"[Friend Assemblies](../../../../standard/assembly/friend-assemblies.md)"},{"pos":[3407,3573],"content":"<bpt id=\"p1\">[</bpt>How to: Create Signed Friend Assemblies (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-signed-friend-assemblies.md)</ept>","source":"[How to: Create Signed Friend Assemblies (Visual Basic)](../../../../visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-signed-friend-assemblies.md)"},{"pos":[3576,3666],"content":"<bpt id=\"p1\">[</bpt>Programming Guide Concepts<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/index.md)</ept>","source":"[Programming Guide Concepts](../../../../visual-basic/programming-guide/concepts/index.md)"}]}