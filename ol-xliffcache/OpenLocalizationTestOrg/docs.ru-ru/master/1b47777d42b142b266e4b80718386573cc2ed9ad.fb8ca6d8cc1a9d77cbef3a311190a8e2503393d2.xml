{"content":"---\ntitle: \"If...Then...Else Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.ElseIf\"\n  - \"vb.Then\"\n  - \"vb.If\"\n  - \"vb.EndIf\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"ElseIf statement, If...Then...Else\"\n  - \"Then statement, If...Then...Else\"\n  - \"control flow, branching\"\n  - \"execution, conditional\"\n  - \"TypeOf...Is expression, and If...Then...Else statements\"\n  - \"If...Then...Else statements\"\n  - \"If statement, If...Then...Else\"\n  - \"If statement\"\n  - \"Is operator [Visual Basic], in If...Then...Else statements\"\n  - \"If Operator [Visual Basic]\"\n  - \"branching, conditional\"\n  - \"IIf function, and If...Then...Else statements\"\n  - \"Else statement [Visual Basic]\"\nms.assetid: 790068a2-1307-4e28-8a72-be5ebda099e9\ncaps.latest.revision: 29\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# If...Then...Else Statement (Visual Basic)\nConditionally executes a group of statements, depending on the value of an expression.  \n  \n## Syntax  \n  \n```  \n' Multiple-line syntax:  \nIf condition [ Then ]  \n    [ statements ]  \n[ ElseIf elseifcondition [ Then ]  \n    [ elseifstatements ] ]  \n[ Else  \n    [ elsestatements ] ]  \nEnd If  \n  \n' Single-line syntax:  \nIf condition Then [ statements ] [ Else [ elsestatements ] ]  \n```  \n  \n## Parts  \n `condition`  \n Required. Expression. Must evaluate to `True` or `False`, or to a data type that is implicitly convertible to `Boolean`.  \n  \n If the expression is a [Nullable](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)`Boolean` variable that evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), the condition is treated as if the expression is not `True`, and the `Else` block is executed.  \n  \n `Then`  \n Required in the single-line syntax; optional in the multiple-line syntax.  \n  \n `statements`  \n Optional. One or more statements following `If`...`Then` that are executed if `condition` evaluates to `True`.  \n  \n `elseifcondition`  \n Required if `ElseIf` is present. Expression. Must evaluate to `True` or `False`, or to a data type that is implicitly convertible to `Boolean`.  \n  \n `elseifstatements`  \n Optional. One or more statements following `ElseIf`...`Then` that are executed if `elseifcondition` evaluates to `True`.  \n  \n `elsestatements`  \n Optional. One or more statements that are executed if no previous `condition` or `elseifcondition` expression evaluates to `True`.  \n  \n `End If`  \n Terminates the `If`...`Then`...`Else` block.  \n  \n## Remarks  \n  \n## Multiple-Line Syntax  \n When an `If`...`Then`...`Else` statement is encountered, `condition` is tested. If `condition` is `True`, the statements following `Then` are executed. If `condition` is `False`, each `ElseIf` statement (if there are any) is evaluated in order. When a `True``elseifcondition` is found, the statements immediately following the associated `ElseIf` are executed. If no `elseifcondition` evaluates to `True`, or if there are no `ElseIf` statements, the statements following `Else` are executed. After executing the statements following `Then`, `ElseIf`, or `Else`, execution continues with the statement following `End If`.  \n  \n The `ElseIf` and `Else` clauses are both optional. You can have as many `ElseIf` clauses as you want in an `If`...`Then`...`Else` statement, but no `ElseIf` clause can appear after an `Else` clause. `If`...`Then`...`Else` statements can be nested within each other.  \n  \n In the multiple-line syntax, the `If` statement must be the only statement on the first line. The `ElseIf`, `Else`, and `End If` statements can be preceded only by a line label. The `If`...`Then`...`Else` block must end with an `End If` statement.  \n  \n> [!TIP]\n>  The [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) might be more useful when you evaluate a single expression that has several possible values.  \n  \n## Single-Line Syntax  \n You can use the single-line syntax for short, simple tests. However, the multiple-line syntax provides more structure and flexibility and is usually easier to read, maintain, and debug.  \n  \n What follows the `Then` keyword is examined to determine whether a statement is a single-line `If`. If anything other than a comment appears after `Then` on the same line, the statement is treated as a single-line `If` statement. If `Then` is absent, it must be the start of a multiple-line `If`...`Then`...`Else`.  \n  \n In the single-line syntax, you can have multiple statements executed as the result of an `If`...`Then` decision. All statements must be on the same line and be separated by colons.  \n  \n## Example  \n The following example illustrates the use of the multiple-line syntax of the `If`...`Then`...`Else` statement.  \n  \n [!code-vb[VbVbalrStatements#101](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/if-then-else-statement_1.vb)]  \n  \n## Example  \n The following example contains nested `If`...`Then`...`Else` statements.  \n  \n [!code-vb[VbVbalrStatements#102](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/if-then-else-statement_2.vb)]  \n  \n## Example  \n The following example illustrates the use of the single-line syntax.  \n  \n [!code-vb[VbVbalrStatements#103](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/if-then-else-statement_3.vb)]  \n  \n## See Also  \n <xref:Microsoft.VisualBasic.Interaction.Choose%2A>   \n <xref:Microsoft.VisualBasic.Interaction.Switch%2A>   \n [#If...Then...#Else Directives](../../../visual-basic/language-reference/directives/if-then-else-directives.md)   \n [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md)   \n [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)   \n [Decision Structures](../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)   \n [Logical and Bitwise Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)   \n [If Operator](../../../visual-basic/language-reference/operators/if-operator.md)","nodes":[{"pos":[12,70],"content":"If...Then...Else Statement (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"If...Then...Else Statement (Visual Basic) | Microsoft Docs","pos":[0,58]}]},{"pos":[1129,1170],"content":"If...Then...Else Statement (Visual Basic)","linkify":"If...Then...Else Statement (Visual Basic)","nodes":[{"content":"If...Then...Else Statement (Visual Basic)","pos":[0,41]}]},{"content":"Conditionally executes a group of statements, depending on the value of an expression.","pos":[1171,1257]},{"pos":[1266,1272],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1567,1572],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1591,1600]},{"content":"Expression.","pos":[1601,1612]},{"content":"Must evaluate to <ph id=\"ph1\">`True`</ph> or <ph id=\"ph2\">`False`</ph>, or to a data type that is implicitly convertible to <ph id=\"ph3\">`Boolean`</ph>.","pos":[1613,1711],"source":" Must evaluate to `True` or `False`, or to a data type that is implicitly convertible to `Boolean`."},{"pos":[1718,2040],"content":"If the expression is a <bpt id=\"p1\">[</bpt>Nullable<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept><ph id=\"ph1\">`Boolean`</ph> variable that evaluates to <bpt id=\"p2\">[</bpt>Nothing<ept id=\"p2\">](../../../visual-basic/language-reference/nothing.md)</ept>, the condition is treated as if the expression is not <ph id=\"ph2\">`True`</ph>, and the <ph id=\"ph3\">`Else`</ph> block is executed.","source":"If the expression is a [Nullable](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)`Boolean` variable that evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md), the condition is treated as if the expression is not `True`, and the `Else` block is executed."},{"content":"Required in the single-line syntax; optional in the multiple-line syntax.","pos":[2057,2130]},{"content":"Optional.","pos":[2153,2162]},{"content":"One or more statements following <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph> that are executed if <ph id=\"ph3\">`condition`</ph> evaluates to <ph id=\"ph4\">`True`</ph>.","pos":[2163,2263],"source":" One or more statements following `If`...`Then` that are executed if `condition` evaluates to `True`."},{"content":"Required if <ph id=\"ph1\">`ElseIf`</ph> is present.","pos":[2291,2323],"source":" Required if `ElseIf` is present."},{"content":"Expression.","pos":[2324,2335]},{"content":"Must evaluate to <ph id=\"ph1\">`True`</ph> or <ph id=\"ph2\">`False`</ph>, or to a data type that is implicitly convertible to <ph id=\"ph3\">`Boolean`</ph>.","pos":[2336,2434],"source":" Must evaluate to `True` or `False`, or to a data type that is implicitly convertible to `Boolean`."},{"content":"Optional.","pos":[2463,2472]},{"content":"One or more statements following <ph id=\"ph1\">`ElseIf`</ph>...<ph id=\"ph2\">`Then`</ph> that are executed if <ph id=\"ph3\">`elseifcondition`</ph> evaluates to <ph id=\"ph4\">`True`</ph>.","pos":[2473,2583],"source":" One or more statements following `ElseIf`...`Then` that are executed if `elseifcondition` evaluates to `True`."},{"content":"Optional.","pos":[2610,2619]},{"content":"One or more statements that are executed if no previous <ph id=\"ph1\">`condition`</ph> or <ph id=\"ph2\">`elseifcondition`</ph> expression evaluates to <ph id=\"ph3\">`True`</ph>.","pos":[2620,2740],"source":" One or more statements that are executed if no previous `condition` or `elseifcondition` expression evaluates to `True`."},{"content":"Terminates the <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> block.","pos":[2759,2803],"source":" Terminates the `If`...`Then`...`Else` block."},{"pos":[2812,2819],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2828,2848],"content":"Multiple-Line Syntax","linkify":"Multiple-Line Syntax","nodes":[{"content":"Multiple-Line Syntax","pos":[0,20]}]},{"content":"When an <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> statement is encountered, <ph id=\"ph4\">`condition`</ph> is tested.","pos":[2852,2931],"source":"When an `If`...`Then`...`Else` statement is encountered, `condition` is tested."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`True`</ph>, the statements following <ph id=\"ph3\">`Then`</ph> are executed.","pos":[2932,3003],"source":" If `condition` is `True`, the statements following `Then` are executed."},{"content":"If <ph id=\"ph1\">`condition`</ph> is <ph id=\"ph2\">`False`</ph>, each <ph id=\"ph3\">`ElseIf`</ph> statement (if there are any) is evaluated in order.","pos":[3004,3096],"source":" If `condition` is `False`, each `ElseIf` statement (if there are any) is evaluated in order."},{"content":"When a <ph id=\"ph1\">`True``elseifcondition`</ph> is found, the statements immediately following the associated <ph id=\"ph2\">`ElseIf`</ph> are executed.","pos":[3097,3212],"source":" When a `True``elseifcondition` is found, the statements immediately following the associated `ElseIf` are executed."},{"content":"If no <ph id=\"ph1\">`elseifcondition`</ph> evaluates to <ph id=\"ph2\">`True`</ph>, or if there are no <ph id=\"ph3\">`ElseIf`</ph> statements, the statements following <ph id=\"ph4\">`Else`</ph> are executed.","pos":[3213,3343],"source":" If no `elseifcondition` evaluates to `True`, or if there are no `ElseIf` statements, the statements following `Else` are executed."},{"content":"After executing the statements following <ph id=\"ph1\">`Then`</ph>, <ph id=\"ph2\">`ElseIf`</ph>, or <ph id=\"ph3\">`Else`</ph>, execution continues with the statement following <ph id=\"ph4\">`End If`</ph>.","pos":[3344,3472],"source":" After executing the statements following `Then`, `ElseIf`, or `Else`, execution continues with the statement following `End If`."},{"content":"The <ph id=\"ph1\">`ElseIf`</ph> and <ph id=\"ph2\">`Else`</ph> clauses are both optional.","pos":[3479,3529],"source":"The `ElseIf` and `Else` clauses are both optional."},{"content":"You can have as many <ph id=\"ph1\">`ElseIf`</ph> clauses as you want in an <ph id=\"ph2\">`If`</ph>...<ph id=\"ph3\">`Then`</ph>...<ph id=\"ph4\">`Else`</ph> statement, but no <ph id=\"ph5\">`ElseIf`</ph> clause can appear after an <ph id=\"ph6\">`Else`</ph> clause.","pos":[3530,3677],"source":" You can have as many `ElseIf` clauses as you want in an `If`...`Then`...`Else` statement, but no `ElseIf` clause can appear after an `Else` clause."},{"content":"<ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> statements can be nested within each other.","pos":[3678,3744],"source":"`If`...`Then`...`Else` statements can be nested within each other."},{"content":"In the multiple-line syntax, the <ph id=\"ph1\">`If`</ph> statement must be the only statement on the first line.","pos":[3751,3844],"source":"In the multiple-line syntax, the `If` statement must be the only statement on the first line."},{"content":"The <ph id=\"ph1\">`ElseIf`</ph>, <ph id=\"ph2\">`Else`</ph>, and <ph id=\"ph3\">`End If`</ph> statements can be preceded only by a line label.","pos":[3845,3928],"source":" The `ElseIf`, `Else`, and `End If` statements can be preceded only by a line label."},{"content":"The <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> block must end with an <ph id=\"ph4\">`End If`</ph> statement.","pos":[3929,3998],"source":" The `If`...`Then`...`Else` block must end with an `End If` statement."},{"pos":[4006,4216],"content":"[!TIP]\n The [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) might be more useful when you evaluate a single expression that has several possible values.","leadings":["","> "],"nodes":[{"content":"The <bpt id=\"p1\">[</bpt>Select...Case Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/select-case-statement.md)</ept> might be more useful when you evaluate a single expression that has several possible values.","pos":[8,208],"source":" The [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) might be more useful when you evaluate a single expression that has several possible values."}]},{"pos":[4225,4243],"content":"Single-Line Syntax","linkify":"Single-Line Syntax","nodes":[{"content":"Single-Line Syntax","pos":[0,18]}]},{"content":"You can use the single-line syntax for short, simple tests.","pos":[4247,4306]},{"content":"However, the multiple-line syntax provides more structure and flexibility and is usually easier to read, maintain, and debug.","pos":[4307,4432]},{"content":"What follows the <ph id=\"ph1\">`Then`</ph> keyword is examined to determine whether a statement is a single-line <ph id=\"ph2\">`If`</ph>.","pos":[4439,4538],"source":"What follows the `Then` keyword is examined to determine whether a statement is a single-line `If`."},{"content":"If anything other than a comment appears after <ph id=\"ph1\">`Then`</ph> on the same line, the statement is treated as a single-line <ph id=\"ph2\">`If`</ph> statement.","pos":[4539,4668],"source":" If anything other than a comment appears after `Then` on the same line, the statement is treated as a single-line `If` statement."},{"content":"If <ph id=\"ph1\">`Then`</ph> is absent, it must be the start of a multiple-line <ph id=\"ph2\">`If`</ph>...<ph id=\"ph3\">`Then`</ph>...<ph id=\"ph4\">`Else`</ph>.","pos":[4669,4753],"source":" If `Then` is absent, it must be the start of a multiple-line `If`...`Then`...`Else`."},{"content":"In the single-line syntax, you can have multiple statements executed as the result of an <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph> decision.","pos":[4760,4872],"source":"In the single-line syntax, you can have multiple statements executed as the result of an `If`...`Then` decision."},{"content":"All statements must be on the same line and be separated by colons.","pos":[4873,4940]},{"pos":[4949,4956],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4960,5070],"content":"The following example illustrates the use of the multiple-line syntax of the <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> statement.","source":"The following example illustrates the use of the multiple-line syntax of the `If`...`Then`...`Else` statement."},{"pos":[5077,5219],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#101<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/if-then-else-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#101](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/if-then-else-statement_1.vb)]"},{"pos":[5228,5235],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5239,5311],"content":"The following example contains nested <ph id=\"ph1\">`If`</ph>...<ph id=\"ph2\">`Then`</ph>...<ph id=\"ph3\">`Else`</ph> statements.","source":"The following example contains nested `If`...`Then`...`Else` statements."},{"pos":[5318,5460],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#102<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/if-then-else-statement_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#102](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/if-then-else-statement_2.vb)]"},{"pos":[5469,5476],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example illustrates the use of the single-line syntax.","pos":[5480,5548]},{"pos":[5555,5697],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#103<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/if-then-else-statement_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#103](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/if-then-else-statement_3.vb)]"},{"pos":[5706,5714],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>#If...Then...#Else Directives<ept id=\"p1\">](../../../visual-basic/language-reference/directives/if-then-else-directives.md)</ept><ph id=\"ph1\"> </ph>","pos":[5827,5940],"source":" [#If...Then...#Else Directives](../../../visual-basic/language-reference/directives/if-then-else-directives.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Select...Case Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/select-case-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[5943,6048],"source":" [Select...Case Statement](../../../visual-basic/language-reference/statements/select-case-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Nested Control Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[6051,6181],"source":" [Nested Control Structures](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Decision Structures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md)</ept><ph id=\"ph1\"> </ph>","pos":[6184,6302],"source":" [Decision Structures](../../../visual-basic/programming-guide/language-features/control-flow/decision-structures.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Logical and Bitwise Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[6305,6472],"source":" [Logical and Bitwise Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>If Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/if-operator.md)</ept>","pos":[6475,6556],"source":" [If Operator](../../../visual-basic/language-reference/operators/if-operator.md)"}]}