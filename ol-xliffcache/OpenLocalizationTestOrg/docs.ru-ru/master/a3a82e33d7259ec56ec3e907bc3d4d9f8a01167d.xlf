<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="attributeusage.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3a82e33d7259ec56ec3e907bc3d4d9f8a01167d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\attributes\attributeusage.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3fe5721cdbeed9a0a4c5a1152f285c765fdc529f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">052fdafc359077ec86eeccf982b46469524ead94</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>AttributeUsage (C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>AttributeUsage (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Determines how a custom attribute class can be used.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.AttributeUsageAttribute&gt;</ph> is an attribute you apply to custom attribute definitions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AttributeUsage`</ph> attribute enables you to control:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Which program elements attribute may be applied to.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Unless you restrict its usage, an attribute may be applied to any of the following program elements:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>assembly</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>module</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>field</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>event</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>method</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>param</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>property</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>return</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>type</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Whether an attribute can be applied to a single program element multiple times.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Whether attributes are inherited by derived classes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default settings look like the following example when applied explicitly:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`NewAttribute`</ph> class can be applied to any supported program element.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>But it can be applied only once to each entity.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The attribute is inherited by derived classes when applied to a base class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.AttributeUsageAttribute.AllowMultiple&gt;</ph> and <ph id="ph2">&lt;xref:System.AttributeUsageAttribute.Inherited&gt;</ph> arguments are optional, so the following code has the same effect:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">&lt;xref:System.AttributeUsageAttribute&gt;</ph> argument must be one or more elements of the <ph id="ph2">&lt;xref:System.AttributeTargets&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Multiple target types can be linked together with the OR operator, like the following example shows:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Beginning in C# 7.3, attributes can be applied to either the property or the backing field for an auto-implemented property.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The attribute applies to the property, unless you specify the <ph id="ph1">`field`</ph> specifier on the attribute.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Both are shown in the following example:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.AttributeUsageAttribute.AllowMultiple&gt;</ph> argument is <ph id="ph2">`true`</ph>, then the resulting attribute can be applied more than once to a single entity, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">`MultiUseAttribute`</ph> can be applied repeatedly because <ph id="ph2">`AllowMultiple`</ph> is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Both formats shown for applying multiple attributes are valid.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.AttributeUsageAttribute.Inherited&gt;</ph> is <ph id="ph2">`false`</ph>, then the attribute isn't inherited by classes derived from an attributed class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In this case <ph id="ph1">`NonInheritedAttribute`</ph> isn't applied to <ph id="ph2">`DClass`</ph> via inheritance.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AttributeUsage`</ph> attribute is a single-use attribute--it can't be applied more than once to the same class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AttributeUsage`</ph> is an alias for <ph id="ph2">&lt;xref:System.AttributeUsageAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id="p1">](accessing-attributes-by-using-reflection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the effect of the <ph id="ph1">&lt;xref:System.AttributeUsageAttribute.Inherited&gt;</ph> and <ph id="ph2">&lt;xref:System.AttributeUsageAttribute.AllowMultiple&gt;</ph> arguments to the <ph id="ph3">&lt;xref:System.AttributeUsageAttribute&gt;</ph> attribute, and how the custom attributes applied to a class can be enumerated.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Sample Output</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../..//index.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](../../../..//standard/attributes/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reflection (C#)<ept id="p1">](../reflection.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Custom Attributes (C#)<ept id="p1">](creating-custom-attributes.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Accessing Attributes by Using Reflection (C#)<ept id="p1">](accessing-attributes-by-using-reflection.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>