<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-subscribe-to-and-unsubscribe-from-events.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">583168bc8cce2f4bee9a2dd35d1e59c7a0f380a6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\events\how-to-subscribe-to-and-unsubscribe-from-events.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">999ea86a19de3e95091fc5a62f92c69a1b8148fa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56df92e6ecbb708b29054b1858ebc55480cd21ff</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Subscribe to and Unsubscribe from Events (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Subscribe to and Unsubscribe from Events (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You subscribe to an event that is published by another class when you want to write custom code that is called when that event is raised.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you might subscribe to a button's <ph id="ph1">`click`</ph> event in order to make your application do something useful when the user clicks the button.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To subscribe to events by using the Visual Studio IDE</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you cannot see the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, in <bpt id="p2">**</bpt>Design<ept id="p2">**</ept> view, right-click the form or control for which you want to create an event handler, and select <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>On top of the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, click the <bpt id="p2">**</bpt>Events<ept id="p2">**</ept> icon.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Double-click the event that you want to create, for example the <ph id="ph1">`Load`</ph> event.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[csprcs](../../../csharp/includes/csprcs_md.md)]</ph> creates an empty event handler method and adds it to your code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Alternatively you can add the code manually in <bpt id="p1">**</bpt>Code<ept id="p1">**</ept> view.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, the following lines of code declare an event handler method that will be called when the <ph id="ph1">`Form`</ph> class raises the <ph id="ph2">`Load`</ph> event.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The line of code that is required to subscribe to the event is also automatically generated in the <ph id="ph1">`InitializeComponent`</ph> method in the Form1.Designer.cs file in your project.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It resembles this:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To subscribe to events programmatically</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Define an event handler method whose signature matches the delegate signature for the event.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, if the event is based on the <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> delegate type, the following code represents the method stub:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use the addition assignment operator (<ph id="ph1">`+=`</ph>) to attach your event handler to the event.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the following example, assume that an object named <ph id="ph1">`publisher`</ph> has an event named <ph id="ph2">`RaiseCustomEvent`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note that the subscriber class needs a reference to the publisher class in order to subscribe to its events.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Note that the previous syntax is new in C# 2.0.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is exactly equivalent to the C# 1.0 syntax in which the encapsulating delegate must be explicitly created by using the <ph id="ph1">`new`</ph> keyword:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An event handler can also be added by using a lambda expression:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Use Lambda Expressions Outside LINQ<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/how-to-use-lambda-expressions-outside-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To subscribe to events by using an anonymous method</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you will not have to unsubscribe to an event later, you can use the addition assignment operator (<ph id="ph1">`+=`</ph>) to attach an anonymous method to the event.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the following example, assume that an object named <ph id="ph1">`publisher`</ph> has an event named <ph id="ph2">`RaiseCustomEvent`</ph> and that a <ph id="ph3">`CustomEventArgs`</ph> class has also been defined to carry some kind of specialized event information.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that the subscriber class needs a reference to <ph id="ph1">`publisher`</ph> in order to subscribe to its events.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is important to notice that you cannot easily unsubscribe from an event if you used an anonymous function to subscribe to it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To unsubscribe in this scenario, it is necessary to go back to the code where you subscribe to the event, store the anonymous method in a delegate variable, and then add the delegate to the event.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In general, we recommend that you do not use anonymous functions to subscribe to events if you will have to unsubscribe from the event at some later point in your code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about anonymous functions, see <bpt id="p1">[</bpt>Anonymous Functions<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Unsubscribing</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To prevent your event handler from being invoked when the event is raised, unsubscribe from the event.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In order to prevent resource leaks, you should unsubscribe from events before you dispose of a subscriber object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Until you unsubscribe from an event, the multicast delegate that underlies the event in the publishing object has a reference to the delegate that encapsulates the subscriber's event handler.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>As long as the publishing object holds that reference, garbage collection will not delete your subscriber object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To unsubscribe from an event</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use the subtraction assignment operator (<ph id="ph1">`-=`</ph>) to unsubscribe from an event:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When all subscribers have unsubscribed from an event, the event instance in the publisher class is set to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](../../../csharp/programming-guide/events/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>event<ept id="p1">](../../../csharp/language-reference/keywords/event.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Publish Events that Conform to .NET Framework Guidelines<ept id="p1">](../../../csharp/programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>-= Operator (C# Reference)<ept id="p1">](../../language-reference/operators/subtraction-assignment-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>+= Operator<ept id="p1">](../../../csharp/language-reference/operators/addition-assignment-operator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>