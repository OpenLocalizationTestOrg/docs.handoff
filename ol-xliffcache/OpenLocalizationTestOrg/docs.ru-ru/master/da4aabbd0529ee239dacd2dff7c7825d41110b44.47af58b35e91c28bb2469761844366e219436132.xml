{"content":"---\ntitle: \"Boxing and Unboxing - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"cs.boxing\"\nhelpviewer_keywords: \n  - \"C# language, boxing\"\n  - \"C# language, unboxing\"\n  - \"unboxing [C#]\"\n  - \"boxing [C#]\"\nms.assetid: 8da9bbf4-bce9-4b08-b2e5-f64c11c56514\n---\n# Boxing and Unboxing (C# Programming Guide)\nBoxing is the process of converting a [value type](../../../csharp/language-reference/keywords/value-types.md) to the type `object` or to any interface type implemented by this value type. When the CLR boxes a value type, it wraps the value inside a System.Object and stores it on the managed heap. Unboxing extracts the value type from the object. Boxing is implicit; unboxing is explicit. The concept of boxing and unboxing underlies the C# unified view of the type system in which a value of any type can be treated as an object.  \n  \n In the following example, the integer variable `i` is *boxed* and assigned to object `o`.  \n  \n [!code-csharp[csProgGuideTypes#14](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#14)]  \n  \n The object `o` can then be unboxed and assigned to integer variable `i`:  \n  \n [!code-csharp[csProgGuideTypes#15](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#15)]  \n  \n The following examples illustrate how boxing is used in C#.  \n  \n [!code-csharp[csProgGuideTypes#47](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#47)]  \n  \n## Performance  \n In relation to simple assignments, boxing and unboxing are computationally expensive processes. When a value type is boxed, a new object must be allocated and constructed. To a lesser degree, the cast required for unboxing is also expensive computationally. For more information, see [Performance](../../../../docs/framework/performance/performance-tips.md).  \n  \n## Boxing  \n Boxing is used to store value types in the garbage-collected heap. Boxing is an implicit conversion of a [value type](../../../csharp/language-reference/keywords/value-types.md) to the type `object` or to any interface type implemented by this value type. Boxing a value type allocates an object instance on the heap and copies the value into the new object.  \n  \n Consider the following declaration of a value-type variable:  \n  \n [!code-csharp[csProgGuideTypes#17](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#17)]  \n  \n The following statement implicitly applies the boxing operation on the variable `i`:  \n  \n [!code-csharp[csProgGuideTypes#18](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#18)]  \n  \n The result of this statement is creating an object reference `o`, on the stack, that references a value of the type `int`, on the heap. This value is a copy of the value-type value assigned to the variable `i`. The difference between the two variables, `i` and `o`, is illustrated in the following image of boxing conversion:  \n  \n ![Graphic showing the difference between i and o variables.](./media/boxing-and-unboxing/boxing-operation-i-o-variables.gif)    \n  \n It is also possible to perform the boxing explicitly as in the following example, but explicit boxing is never required:  \n  \n [!code-csharp[csProgGuideTypes#19](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#19)]  \n  \n## Description  \n This example converts an integer variable `i` to an object `o` by using boxing. Then, the value stored in the variable `i` is changed from `123` to `456`. The example shows that the original value type and the boxed object use separate memory locations, and therefore can store different values.  \n  \n## Example  \n [!code-csharp[csProgGuideTypes#16](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#16)]  \n  \n## Unboxing  \n Unboxing is an explicit conversion from the type `object` to a [value type](../../../csharp/language-reference/keywords/value-types.md) or from an interface type to a value type that implements the interface. An unboxing operation consists of:  \n  \n-   Checking the object instance to make sure that it is a boxed value of the given value type.  \n  \n-   Copying the value from the instance into the value-type variable.  \n  \n The following statements demonstrate both boxing and unboxing operations:  \n  \n [!code-csharp[csProgGuideTypes#21](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#21)]  \n  \n The following figure demonstrates the result of the previous statements: \n  \n ![Graphic showing an unboxing conversion.](./media/boxing-and-unboxing/unboxing-conversion-operation.gif)\n  \n For the unboxing of value types to succeed at run time, the item being unboxed must be a reference to an object that was previously created by boxing an instance of that value type. Attempting to unbox `null` causes a <xref:System.NullReferenceException>. Attempting to unbox a reference to an incompatible value type causes an <xref:System.InvalidCastException>.  \n  \n## Example  \n The following example demonstrates a case of invalid unboxing and the resulting `InvalidCastException`. Using `try` and `catch`, an error message is displayed when the error occurs.  \n  \n [!code-csharp[csProgGuideTypes#20](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#20)]  \n  \n This program outputs:  \n  \n `Specified cast is not valid. Error: Incorrect unboxing.`  \n  \n If you change the statement:  \n  \n```csharp\nint j = (short) o;  \n```  \n  \n to:  \n  \n```csharp\nint j = (int) o;  \n```  \n  \n the conversion will be performed, and you will get the output:  \n  \n `Unboxing OK.`  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]  \n  \n## Related Sections  \n For more information:  \n  \n-   [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)  \n  \n-   [Value Types](../../../csharp/language-reference/keywords/value-types.md)  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n","nodes":[{"pos":[4,288],"embed":true,"restype":"x-metadata","content":"title: \"Boxing and Unboxing - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"cs.boxing\"\nhelpviewer_keywords: \n  - \"C# language, boxing\"\n  - \"C# language, unboxing\"\n  - \"unboxing [C#]\"\n  - \"boxing [C#]\"\nms.assetid: 8da9bbf4-bce9-4b08-b2e5-f64c11c56514","nodes":[{"content":"Boxing and Unboxing - C# Programming Guide","nodes":[{"pos":[0,42],"content":"Boxing and Unboxing - C# Programming Guide","nodes":[{"content":"Boxing and Unboxing - C# Programming Guide","pos":[0,42]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[295,337],"content":"Boxing and Unboxing (C# Programming Guide)","linkify":"Boxing and Unboxing (C# Programming Guide)","nodes":[{"content":"Boxing and Unboxing (C# Programming Guide)","pos":[0,42]}]},{"content":"Boxing is the process of converting a <bpt id=\"p1\">[</bpt>value type<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept> to the type <ph id=\"ph1\">`object`</ph> or to any interface type implemented by this value type.","pos":[338,526],"source":"Boxing is the process of converting a [value type](../../../csharp/language-reference/keywords/value-types.md) to the type `object` or to any interface type implemented by this value type."},{"content":"When the CLR boxes a value type, it wraps the value inside a System.Object and stores it on the managed heap.","pos":[527,636]},{"content":"Unboxing extracts the value type from the object.","pos":[637,686]},{"content":"Boxing is implicit; unboxing is explicit.","pos":[687,728]},{"content":"The concept of boxing and unboxing underlies the C# unified view of the type system in which a value of any type can be treated as an object.","pos":[729,870]},{"pos":[877,966],"content":"In the following example, the integer variable <ph id=\"ph1\">`i`</ph> is <bpt id=\"p1\">*</bpt>boxed<ept id=\"p1\">*</ept> and assigned to object <ph id=\"ph2\">`o`</ph>.","source":"In the following example, the integer variable `i` is *boxed* and assigned to object `o`."},{"pos":[1096,1168],"content":"The object <ph id=\"ph1\">`o`</ph> can then be unboxed and assigned to integer variable <ph id=\"ph2\">`i`</ph>:","source":"The object `o` can then be unboxed and assigned to integer variable `i`:"},{"content":"The following examples illustrate how boxing is used in C#.","pos":[1298,1357]},{"pos":[1489,1500],"content":"Performance","linkify":"Performance","nodes":[{"content":"Performance","pos":[0,11]}]},{"content":"In relation to simple assignments, boxing and unboxing are computationally expensive processes.","pos":[1504,1599]},{"content":"When a value type is boxed, a new object must be allocated and constructed.","pos":[1600,1675]},{"content":"To a lesser degree, the cast required for unboxing is also expensive computationally.","pos":[1676,1761]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Performance<ept id=\"p1\">](../../../../docs/framework/performance/performance-tips.md)</ept>.","pos":[1762,1862],"source":" For more information, see [Performance](../../../../docs/framework/performance/performance-tips.md)."},{"pos":[1871,1877],"content":"Boxing","linkify":"Boxing","nodes":[{"content":"Boxing","pos":[0,6]}]},{"content":"Boxing is used to store value types in the garbage-collected heap.","pos":[1881,1947]},{"content":"Boxing is an implicit conversion of a <bpt id=\"p1\">[</bpt>value type<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept> to the type <ph id=\"ph1\">`object`</ph> or to any interface type implemented by this value type.","pos":[1948,2136],"source":" Boxing is an implicit conversion of a [value type](../../../csharp/language-reference/keywords/value-types.md) to the type `object` or to any interface type implemented by this value type."},{"content":"Boxing a value type allocates an object instance on the heap and copies the value into the new object.","pos":[2137,2239]},{"content":"Consider the following declaration of a value-type variable:","pos":[2246,2306]},{"pos":[2436,2520],"content":"The following statement implicitly applies the boxing operation on the variable <ph id=\"ph1\">`i`</ph>:","source":"The following statement implicitly applies the boxing operation on the variable `i`:"},{"content":"The result of this statement is creating an object reference <ph id=\"ph1\">`o`</ph>, on the stack, that references a value of the type <ph id=\"ph2\">`int`</ph>, on the heap.","pos":[2650,2785],"source":"The result of this statement is creating an object reference `o`, on the stack, that references a value of the type `int`, on the heap."},{"content":"This value is a copy of the value-type value assigned to the variable <ph id=\"ph1\">`i`</ph>.","pos":[2786,2860],"source":" This value is a copy of the value-type value assigned to the variable `i`."},{"content":"The difference between the two variables, <ph id=\"ph1\">`i`</ph> and <ph id=\"ph2\">`o`</ph>, is illustrated in the following image of boxing conversion:","pos":[2861,2975],"source":" The difference between the two variables, `i` and `o`, is illustrated in the following image of boxing conversion:"},{"content":"Graphic showing the difference between i and o variables.","pos":[2984,3041]},{"content":"It is also possible to perform the boxing explicitly as in the following example, but explicit boxing is never required:","pos":[3115,3235]},{"pos":[3367,3378],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"This example converts an integer variable <ph id=\"ph1\">`i`</ph> to an object <ph id=\"ph2\">`o`</ph> by using boxing.","pos":[3382,3461],"source":"This example converts an integer variable `i` to an object `o` by using boxing."},{"content":"Then, the value stored in the variable <ph id=\"ph1\">`i`</ph> is changed from <ph id=\"ph2\">`123`</ph> to <ph id=\"ph3\">`456`</ph>.","pos":[3462,3536],"source":" Then, the value stored in the variable `i` is changed from `123` to `456`."},{"content":"The example shows that the original value type and the boxed object use separate memory locations, and therefore can store different values.","pos":[3537,3677]},{"pos":[3686,3693],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3822,3830],"content":"Unboxing","linkify":"Unboxing","nodes":[{"content":"Unboxing","pos":[0,8]}]},{"content":"Unboxing is an explicit conversion from the type <ph id=\"ph1\">`object`</ph> to a <bpt id=\"p1\">[</bpt>value type<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept> or from an interface type to a value type that implements the interface.","pos":[3834,4042],"source":"Unboxing is an explicit conversion from the type `object` to a [value type](../../../csharp/language-reference/keywords/value-types.md) or from an interface type to a value type that implements the interface."},{"content":"An unboxing operation consists of:","pos":[4043,4077]},{"content":"Checking the object instance to make sure that it is a boxed value of the given value type.","pos":[4087,4178]},{"content":"Copying the value from the instance into the value-type variable.","pos":[4188,4253]},{"content":"The following statements demonstrate both boxing and unboxing operations:","pos":[4260,4333]},{"content":"The following figure demonstrates the result of the previous statements:","pos":[4463,4535]},{"content":"Graphic showing an unboxing conversion.","pos":[4543,4582]},{"content":"For the unboxing of value types to succeed at run time, the item being unboxed must be a reference to an object that was previously created by boxing an instance of that value type.","pos":[4651,4832]},{"content":"Attempting to unbox <ph id=\"ph1\">`null`</ph> causes a <ph id=\"ph2\">&lt;xref:System.NullReferenceException&gt;</ph>.","pos":[4833,4906],"source":" Attempting to unbox `null` causes a <xref:System.NullReferenceException>."},{"content":"Attempting to unbox a reference to an incompatible value type causes an <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph>.","pos":[4907,5014],"source":" Attempting to unbox a reference to an incompatible value type causes an <xref:System.InvalidCastException>."},{"pos":[5023,5030],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates a case of invalid unboxing and the resulting <ph id=\"ph1\">`InvalidCastException`</ph>.","pos":[5034,5137],"source":"The following example demonstrates a case of invalid unboxing and the resulting `InvalidCastException`."},{"content":"Using <ph id=\"ph1\">`try`</ph> and <ph id=\"ph2\">`catch`</ph>, an error message is displayed when the error occurs.","pos":[5138,5215],"source":" Using `try` and `catch`, an error message is displayed when the error occurs."},{"content":"This program outputs:","pos":[5345,5366]},{"content":"If you change the statement:","pos":[5437,5465]},{"content":"to:","pos":[5512,5515]},{"content":"the conversion will be performed, and you will get the output:","pos":[5560,5622]},{"pos":[5652,5677],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[5749,5765],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"For more information:","pos":[5769,5790]},{"pos":[5800,5881],"content":"<bpt id=\"p1\">[</bpt>Reference Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept>","source":"[Reference Types](../../../csharp/language-reference/keywords/reference-types.md)"},{"pos":[5891,5964],"content":"<bpt id=\"p1\">[</bpt>Value Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/value-types.md)</ept>","source":"[Value Types](../../../csharp/language-reference/keywords/value-types.md)"},{"pos":[5973,5981],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5985,6051],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"}]}