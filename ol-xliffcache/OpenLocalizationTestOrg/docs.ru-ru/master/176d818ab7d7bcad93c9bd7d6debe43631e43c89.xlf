<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">176d818ab7d7bcad93c9bd7d6debe43631e43c89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\reflection.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1896b155ee07f078fa2ba2760c22bf9736582e83</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79307148fa094191618f1f24e01927fb8851ac09</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reflection in the .NET Framework | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Reflection in the .NET Framework</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The classes in the <ph id="ph1">&lt;xref:System.Reflection&gt;</ph> namespace, together with <ph id="ph2">&lt;xref:System.Type?displayProperty=fullName&gt;</ph>, enable you to obtain information about loaded <bpt id="p1">[</bpt>assemblies<ept id="p1">](../../../docs/framework/app-domains/assemblies-in-the-common-language-runtime.md)</ept> and the types defined within them, such as <bpt id="p2">[</bpt>classes<ept id="p2">](http://msdn.microsoft.com/en-us/ad7d3561-271e-4546-82fc-e00b059f27a9)</ept>, <bpt id="p3">[</bpt>interfaces<ept id="p3">](http://msdn.microsoft.com/en-us/fd9d5975-5363-4bc9-b883-609f887895e5)</ept>, and <bpt id="p4">[</bpt>value types<ept id="p4">](http://msdn.microsoft.com/en-us/c9c567f8-8ab1-4d88-834d-00f7d92418de)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can also use reflection to create type instances at run time, and to invoke and access them.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For topics about specific aspects of reflection, see <bpt id="p1">[</bpt>Related Topics<ept id="p1">](#related_topics)</ept> at the end of this overview.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>common language runtime<ept id="p1">](../../../docs/standard/clr.md)</ept> loader manages <bpt id="p2">[</bpt>application domains<ept id="p2">](../../../docs/framework/app-domains/application-domains.md)</ept>, which constitute defined boundaries around objects that have the same application scope.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This management includes loading each assembly into the appropriate application domain and controlling the memory layout of the type hierarchy within each assembly.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assemblies<ept id="p1">](../../../docs/framework/app-domains/assemblies-in-the-common-language-runtime.md)</ept> contain modules, modules contain types, and types contain members.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Reflection provides objects that encapsulate assemblies, modules, and types.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use reflection to dynamically create an instance of a type, bind the type to an existing object, or get the type from an existing object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can then invoke the type's methods or access its fields and properties.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Typical uses of reflection include the following:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> to define and load assemblies, load modules that are listed in the assembly manifest, and locate a type from this assembly and create an instance of it.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.Module&gt;</ph> to discover information such as the assembly that contains the module and the classes in the module.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can also get all global methods or other specific, nonglobal methods defined on the module.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> to discover information such as the name, parameters, access modifiers (such as <ph id="ph2">`public`</ph> or <ph id="ph3">`private`</ph>), and implementation details (such as <ph id="ph4">`abstract`</ph> or <ph id="ph5">`virtual`</ph>) of a constructor.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetConstructors%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Type.GetConstructor%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Type&gt;</ph> to invoke a specific constructor.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> to discover information such as the name, return type, parameters, access modifiers (such as <ph id="ph2">`public`</ph> or <ph id="ph3">`private`</ph>), and implementation details (such as <ph id="ph4">`abstract`</ph> or <ph id="ph5">`virtual`</ph>) of a method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetMethods%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Type.GetMethod%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Type&gt;</ph> to invoke a specific method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> to discover information such as the name, access modifiers (such as <ph id="ph2">`public`</ph> or <ph id="ph3">`private`</ph>) and implementation details (such as <ph id="ph4">`static`</ph>) of a field, and to get or set field values.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> to discover information such as the name, event-handler data type, custom attributes, declaring type, and reflected type of an event, and to add or remove event handlers.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> to discover information such as the name, data type, declaring type, reflected type, and read-only or writable status of a property, and to get or set property values.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> to discover information such as a parameter's name, data type, whether a parameter is an input or output parameter, and the position of the parameter in a method signature.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> to discover information about custom attributes when you are working in the reflection-only context of an application domain.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> allows you to examine attributes without creating instances of them.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The classes of the <ph id="ph1">&lt;xref:System.Reflection.Emit&gt;</ph> namespace provide a specialized form of reflection that enables you to build types at run time.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Reflection can also be used to create applications called type browsers, which enable users to select types and then view the information about those types.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>There are other uses for reflection.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Compilers for languages such as JScript use reflection to construct symbol tables.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The classes in the <ph id="ph1">&lt;xref:System.Runtime.Serialization&gt;</ph> namespace use reflection to access data and to determine which fields to persist.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The classes in the <ph id="ph1">&lt;xref:System.Runtime.Remoting&gt;</ph> namespace use reflection indirectly through serialization.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Runtime Types in Reflection</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Reflection provides classes, such as <ph id="ph1">&lt;xref:System.Type&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>, to represent types, members, parameters, and other code entities.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, when you use reflection you don't work directly with these classes, most of which are abstract (<ph id="ph1">`MustInherit`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Instead, you work with types provided by the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, when you use the C# <ph id="ph1">`typeof`</ph> operator (<ph id="ph2">`GetType`</ph> in Visual Basic) to obtain a <ph id="ph3">&lt;xref:System.Type&gt;</ph> object, the object is really a <ph id="ph4">`RuntimeType`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RuntimeType`</ph> derives from <ph id="ph2">&lt;xref:System.Type&gt;</ph>, and provides implementations of all the abstract methods.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>These runtime classes are <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>They are not documented separately from their base classes, because their behavior is described by the base class documentation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Viewing Type Information<ept id="p1">](../../../docs/framework/reflection-and-codedom/viewing-type-information.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Describes the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class and provides code examples that illustrate how to use <ph id="ph2">&lt;xref:System.Type&gt;</ph> with several reflection classes to obtain information about constructors, methods, fields, properties, and events.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reflection and Generic Types<ept id="p1">](../../../docs/framework/reflection-and-codedom/reflection-and-generic-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Explains how reflection handles the type parameters and type arguments of generic types and generic methods.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](../../../docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Describes the rules that determine to what degree reflection can be used to discover type information and access types.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dynamically Loading and Using Types<ept id="p1">](../../../docs/framework/reflection-and-codedom/dynamically-loading-and-using-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Describes the reflection custom-binding interface that supports late binding.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Describes the reflection-only load context.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Shows how to load an assembly, how to test the context, and how to examine attributes applied to an assembly in the reflection-only context.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Accessing Custom Attributes<ept id="p1">](../../../docs/framework/reflection-and-codedom/accessing-custom-attributes.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Demonstrates using reflection to query attribute existence and values.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying Fully Qualified Type Names<ept id="p1">](../../../docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Describes the format of fully qualified type names in terms of the Backus-Naur form (BNF), and the syntax required for specifying special characters, assembly names, pointers, references, and arrays.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Hook Up a Delegate Using Reflection<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-hook-up-a-delegate-using-reflection.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Explains how to create a delegate for a method and hook the delegate up to an event.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Explains how to create an event-handling method at run time using <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Emitting Dynamic Methods and Assemblies<ept id="p1">](../../../docs/framework/reflection-and-codedom/emitting-dynamic-methods-and-assemblies.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Explains how to generate dynamic assemblies and dynamic methods.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>