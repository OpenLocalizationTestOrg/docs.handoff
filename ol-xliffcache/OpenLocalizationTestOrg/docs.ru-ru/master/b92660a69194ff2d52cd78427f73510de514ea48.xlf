<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="preprocessor-if.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b92660a69194ff2d52cd78427f73510de514ea48</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\preprocessor-directives\preprocessor-if.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2519f21c648cc272daa459007c686504ccde3544</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdc6999687c5ebaba995e861a6419b496263eab5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>if preprocessor directive - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>#if (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When the C# compiler encounters an <ph id="ph1">`#if`</ph> directive, followed eventually by an <bpt id="p1">[</bpt>#endif<ept id="p1">](preprocessor-endif.md)</ept> directive, it compiles the code between the directives only if the specified symbol is defined.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unlike C and C++, you cannot assign a numeric value to a symbol.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The #if statement in C# is Boolean and only tests whether the symbol has been defined or not.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can use the operators <bpt id="p1">[</bpt><ph id="ph1">==</ph><ept id="p1">](../operators/equality-operators.md#equality-operator-)</ept> (equality) and <bpt id="p2">[</bpt>!=<ept id="p2">](../operators/equality-operators.md#inequality-operator-)</ept> (inequality) only to test for <bpt id="p3">[</bpt>true<ept id="p3">](../keywords/true.md)</ept> or <bpt id="p4">[</bpt>false<ept id="p4">](../keywords/false.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>True means the symbol is defined.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The statement <ph id="ph1">`#if DEBUG`</ph> has the same meaning as <ph id="ph2">`#if (DEBUG == true)`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use the operators <bpt id="p1">[</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p1">](../operators/conditional-and-operator.md)</ept> (and), <bpt id="p2">[</bpt>&amp;#124;&amp;#124;<ept id="p2">](../operators/conditional-or-operator.md)</ept> (or), and <bpt id="p3">[</bpt>!<ept id="p3">](../operators/logical-negation-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>(not) to evaluate whether multiple symbols have been defined.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can also group symbols and operators with parentheses.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#if`</ph>, along with the <bpt id="p1">[</bpt>#else<ept id="p1">](preprocessor-else.md)</ept>, <bpt id="p2">[</bpt>#elif<ept id="p2">](preprocessor-elif.md)</ept>, <bpt id="p3">[</bpt>#endif<ept id="p3">](preprocessor-endif.md)</ept>, <bpt id="p4">[</bpt>#define<ept id="p4">](preprocessor-define.md)</ept>, and <bpt id="p5">[</bpt>#undef<ept id="p5">](preprocessor-undef.md)</ept> directives, lets you include or exclude code based on the existence of one or more symbols.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This can be useful when compiling code for a debug build or when compiling for a specific configuration.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A conditional directive beginning with a <ph id="ph1">`#if`</ph> directive must explicitly be terminated with a <ph id="ph2">`#endif`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#define`</ph> lets you define a symbol.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By then using the symbol as the expression passed to the <ph id="ph1">`#if`</ph> directive, the expression evaluates to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can also define a symbol with the <bpt id="p1">[</bpt>-define<ept id="p1">](../compiler-options/define-compiler-option.md)</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can undefine a symbol with <bpt id="p1">[</bpt>#undef<ept id="p1">](preprocessor-undef.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A symbol that you define with <ph id="ph1">`-define`</ph> or with <ph id="ph2">`#define`</ph> doesn't conflict with a variable of the same name.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>That is, a variable name should not be passed to a preprocessor directive, and a symbol can only be evaluated by a preprocessor directive.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The scope of a symbol created with <ph id="ph1">`#define`</ph> is the file in which it was defined.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The build system is also aware of predefined preprocessor symbols representing different <bpt id="p1">[</bpt>target frameworks<ept id="p1">](../../../standard/frameworks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>They're useful when creating applications that can target more than one .NET implementation or version.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Other predefined symbols include the DEBUG and TRACE constants.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can override the values set for the project using <ph id="ph1">`#define`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The DEBUG symbol, for example, is automatically set depending on your build configuration properties ("Debug" or "Release" mode).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows you how to define a MYTEST symbol on a file and then test the values of the MYTEST and DEBUG symbols.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The output of this example depends on whether you built the project on Debug or Release configuration mode.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example shows you how to test for different target frameworks so you can use newer APIs when possible:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Preprocessor Directives<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Compile Conditionally with Trace and Debug<ept id="p1">](../../../framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>