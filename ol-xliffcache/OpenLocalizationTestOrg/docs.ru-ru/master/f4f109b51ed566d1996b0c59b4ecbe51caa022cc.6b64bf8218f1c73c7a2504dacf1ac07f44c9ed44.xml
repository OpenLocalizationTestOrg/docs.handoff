{"content":"---\ntitle: \"Geometry Overview\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"geometry classes [WPF]\"\n  - \"graphics [WPF], geometry classes\"\nms.assetid: 9fba8934-98b7-4af6-82f6-f4ef887f963a\n---\n# Geometry Overview\nThis overview describes how to use the [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] <xref:System.Windows.Media.Geometry> classes to describe shapes. This topic also contrasts the differences between <xref:System.Windows.Media.Geometry> objects and <xref:System.Windows.Shapes.Shape> elements.  \n\n<a name=\"wcpsdk_graphics_geometry_introduction\"></a>   \n## What Is a Geometry?  \n The <xref:System.Windows.Media.Geometry> class and the classes which derive from it, such as <xref:System.Windows.Media.EllipseGeometry>, <xref:System.Windows.Media.PathGeometry>, and <xref:System.Windows.Media.CombinedGeometry>, enable you to describe the geometry of a 2-D shape. These geometric descriptions have many uses, such defining a shape to paint to the screen or defining hit-test and clip regions. You can even use a geometry to define an animation path.  \n  \n <xref:System.Windows.Media.Geometry> objects can be simple, such as rectangles and circles, or composite, created from two or more geometry objects.  More complex geometries can be created by using the <xref:System.Windows.Media.PathGeometry> and <xref:System.Windows.Media.StreamGeometry> classes, which enable you to describe arcs and curves.  \n  \n Because a <xref:System.Windows.Media.Geometry> is a type of <xref:System.Windows.Freezable>, <xref:System.Windows.Media.Geometry> objects provide several special features: they can be declared as [resources](../advanced/xaml-resources.md), shared among multiple objects, made read-only to improve performance, cloned, and made thread-safe. For more information about the different features provided by <xref:System.Windows.Freezable> objects, see the [Freezable Objects Overview](../advanced/freezable-objects-overview.md).  \n  \n<a name=\"wcpsdk_graphics_geometry_geometryandshapes\"></a>   \n## Geometries vs. Shapes  \n The <xref:System.Windows.Media.Geometry> and <xref:System.Windows.Shapes.Shape> classes seem similar in that they both describe 2-D shapes (compare <xref:System.Windows.Media.EllipseGeometry> and <xref:System.Windows.Shapes.Ellipse> for example), but there are important differences.  \n  \n For one, the <xref:System.Windows.Media.Geometry> class inherits from the <xref:System.Windows.Freezable> class while the <xref:System.Windows.Shapes.Shape> class inherits from <xref:System.Windows.FrameworkElement>. Because they are elements, <xref:System.Windows.Shapes.Shape> objects can render themselves and participate in the layout system, while <xref:System.Windows.Media.Geometry> objects cannot.  \n  \n Although <xref:System.Windows.Shapes.Shape> objects are more readily usable than <xref:System.Windows.Media.Geometry> objects, <xref:System.Windows.Media.Geometry> objects are more versatile. While a <xref:System.Windows.Shapes.Shape> object is used to render 2-D graphics, a <xref:System.Windows.Media.Geometry> object can be used to define the geometric region for 2-D graphics, define a region for clipping, or define a region for hit testing, for example.  \n  \n### The Path Shape  \n One <xref:System.Windows.Shapes.Shape>, the <xref:System.Windows.Shapes.Path> class, actually uses a <xref:System.Windows.Media.Geometry> to describe its contents. By setting the <xref:System.Windows.Shapes.Path.Data%2A> property of the <xref:System.Windows.Shapes.Path> with a <xref:System.Windows.Media.Geometry> and setting its <xref:System.Windows.Shapes.Shape.Fill%2A> and <xref:System.Windows.Shapes.Shape.Stroke%2A> properties, you can render a <xref:System.Windows.Media.Geometry>.  \n  \n<a name=\"commonproperties\"></a>   \n## Common Properties That Take a Geometry  \n The preceding sections mentioned that Geometry objects can be used with other objects for a variety of purposes, such as drawing shapes, animating, and clipping. The following table lists several classes that have properties that take a <xref:System.Windows.Media.Geometry> object.  \n  \n|Type|Property|  \n|----------|--------------|  \n|<xref:System.Windows.Media.Animation.DoubleAnimationUsingPath>|<xref:System.Windows.Media.Animation.DoubleAnimationUsingPath.PathGeometry%2A>|  \n|<xref:System.Windows.Media.DrawingGroup>|<xref:System.Windows.Media.DrawingGroup.ClipGeometry%2A>|  \n|<xref:System.Windows.Media.GeometryDrawing>|<xref:System.Windows.Media.GeometryDrawing.Geometry%2A>|  \n|<xref:System.Windows.Shapes.Path>|<xref:System.Windows.Shapes.Path.Data%2A>|  \n|<xref:System.Windows.UIElement>|<xref:System.Windows.UIElement.Clip%2A>|  \n  \n<a name=\"wcpsdk_graphics_geometry_geometrytypes\"></a>   \n## Simple Geometry Types  \n The base class for all geometries is the abstract class <xref:System.Windows.Media.Geometry>.  The classes which derive from the <xref:System.Windows.Media.Geometry> class can be roughly grouped into three categories: simple geometries, path geometries, and composite geometries.  \n  \n Simple geometry classes include <xref:System.Windows.Media.LineGeometry>, <xref:System.Windows.Media.RectangleGeometry>, and <xref:System.Windows.Media.EllipseGeometry> and are used to create basic geometric shapes, such as lines, rectangles, and circles.  \n  \n-   A <xref:System.Windows.Media.LineGeometry> is defined by specifying the start point of the line and the end point.  \n  \n-   A <xref:System.Windows.Media.RectangleGeometry> is defined with a <xref:System.Windows.Rect> structure which specifies its relative position and its height and width. You can create a rounded rectangle by setting the <xref:System.Windows.Media.RectangleGeometry.RadiusX%2A> and <xref:System.Windows.Media.RectangleGeometry.RadiusY%2A> properties.  \n  \n-   An <xref:System.Windows.Media.EllipseGeometry> is defined by a center point, an x-radius and a y-radius.  The following examples show how to create simple geometries for rendering and for clipping.  \n  \n These same shapes, as well as more complex shapes, can be created using a <xref:System.Windows.Media.PathGeometry> or by combining geometry objects together, but these classes provide a simpler means for producing these basic geometric shapes.  \n  \n The following example shows how to create and render a <xref:System.Windows.Media.LineGeometry>.  As noted previously, a <xref:System.Windows.Media.Geometry> object is unable to draw itself, so the example uses a <xref:System.Windows.Shapes.Path> shape to render the line.  Because a line has no area, setting the <xref:System.Windows.Shapes.Shape.Fill%2A> property of the <xref:System.Windows.Shapes.Path> would have no effect; instead, only the <xref:System.Windows.Shapes.Shape.Stroke%2A> and <xref:System.Windows.Shapes.Shape.StrokeThickness%2A> properties are specified. The following illustration shows the output from the example.  \n  \n ![A LineGeometry](./media/graphicsmm-line.gif \"graphicsmm_line\")  \nA LineGeometry drawn from (10,20) to (100,130)  \n  \n [!code-xaml[GeometryOverviewSamples_snip#GraphicsMMLineGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_snip/CS/GeometryExamples.xaml#graphicsmmlinegeometryexample)]  \n  \n [!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMLineGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmlinegeometryexample)]\n [!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMLineGeometryExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmlinegeometryexample)]  \n  \n The next example shows how to create and render an <xref:System.Windows.Media.EllipseGeometry>.  The examples sets the <xref:System.Windows.Media.EllipseGeometry.Center%2A> of the <xref:System.Windows.Media.EllipseGeometry> is set to the point `50,50` and the x-radius and the y-radius are both set to `50`, which creates a circle with a diameter of 100.  The interior of the ellipse is painted by assigning a value to the Path element's Fill property, in this case <xref:System.Windows.Media.Brushes.Gold%2A>. The following illustration shows the output from the example.  \n  \n ![An EllipseGeometry](./media/graphicsmm-ellipse.gif \"graphicsmm_ellipse\")  \nAn EllipseGeometry drawn at (50,50)  \n  \n [!code-xaml[GeometryOverviewSamples_snip#GraphicsMMEllipseGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_snip/CS/GeometryExamples.xaml#graphicsmmellipsegeometryexample)]  \n  \n [!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMEllipseGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmellipsegeometryexample)]\n [!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMEllipseGeometryExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmellipsegeometryexample)]  \n  \n The following example shows how to create and render a <xref:System.Windows.Media.RectangleGeometry>.  The position and the dimensions of the rectangle are defined by a <xref:System.Windows.Rect> structure. The position is `50,50` and the height and width are both `25`, which creates a square. The following illustration shows the output from the example.  \n  \n ![A RectangleGeometry](./media/graphicsmm-rectangle.gif \"graphicsmm_rectangle\")  \nA RectangleGeometry drawn at 50,50  \n  \n [!code-xaml[GeometryOverviewSamples_snip#GraphicsMMRectangleGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_snip/CS/GeometryExamples.xaml#graphicsmmrectanglegeometryexample)]  \n  \n [!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMRectangleGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmrectanglegeometryexample)]\n [!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMRectangleGeometryExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmrectanglegeometryexample)]  \n  \n The following example shows how to use an <xref:System.Windows.Media.EllipseGeometry> as the clip region for an image.  An <xref:System.Windows.Controls.Image> object is defined with a <xref:System.Windows.FrameworkElement.Width%2A> of 200 and a <xref:System.Windows.FrameworkElement.Height%2A> of 150.  An <xref:System.Windows.Media.EllipseGeometry> with a <xref:System.Windows.Media.EllipseGeometry.RadiusX%2A> value of 100, a <xref:System.Windows.Media.EllipseGeometry.RadiusY%2A> value of 75, and a <xref:System.Windows.Media.EllipseGeometry.Center%2A> value of 100,75 is set to the <xref:System.Windows.UIElement.Clip%2A> property of the image.  Only the part of the image that is within the area of the ellipse will be displayed. The following illustration shows the output from the example.  \n  \n ![An Image with and without clipping](./media/graphicsmm-clipexample.png \"graphicsmm_clipexample\")  \nAn EllipseGeometry used to clip an Image control  \n  \n [!code-xaml[GeometryOverviewSamples_snip#GraphicsMMImageClipGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_snip/CS/GeometryExamples.xaml#graphicsmmimageclipgeometryexample)]  \n  \n [!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMImageClipGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmimageclipgeometryexample)]\n [!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMImageClipGeometryExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmimageclipgeometryexample)]  \n  \n<a name=\"wcpsdk_graphics_geometry_pathgeometry\"></a>   \n## Path Geometries  \n The <xref:System.Windows.Media.PathGeometry> class and its light-weight equivalent, the <xref:System.Windows.Media.StreamGeometry> class, provide the means to describe multiple complex figures composed of arcs, curves, and lines.  \n  \n At the heart of a <xref:System.Windows.Media.PathGeometry> is a collection of <xref:System.Windows.Media.PathFigure> objects, so named because each figure describes a discrete shape in the <xref:System.Windows.Media.PathGeometry>. Each <xref:System.Windows.Media.PathFigure> is itself comprised of one or more <xref:System.Windows.Media.PathSegment> objects, each of which describes a segment of the figure.  \n  \n There are many types of segments.  \n  \n|Segment Type|Description|Example|  \n|------------------|-----------------|-------------|  \n|<xref:System.Windows.Media.ArcSegment>|Creates an elliptical arc between two points.|[Create an Elliptical Arc](how-to-create-an-elliptical-arc.md).|  \n|<xref:System.Windows.Media.BezierSegment>|Creates a cubic Bezier curve between two points.|[Create a Cubic Bezier Curve](how-to-create-a-cubic-bezier-curve.md).|  \n|<xref:System.Windows.Media.LineSegment>|Creates a line between two points.|[Create a LineSegment in a PathGeometry](how-to-create-a-linesegment-in-a-pathgeometry.md)|  \n|<xref:System.Windows.Media.PolyBezierSegment>|Creates a series of cubic Bezier curves.|See the <xref:System.Windows.Media.PolyBezierSegment> type page.|  \n|<xref:System.Windows.Media.PolyLineSegment>|Creates a series of lines.|See the <xref:System.Windows.Media.PolyLineSegment> type page.|  \n|<xref:System.Windows.Media.PolyQuadraticBezierSegment>|Creates a series of quadratic Bezier curves.|See the <xref:System.Windows.Media.PolyQuadraticBezierSegment> page.|  \n|<xref:System.Windows.Media.QuadraticBezierSegment>|Creates a quadratic Bezier curve.|[Create a Quadratic Bezier Curve](how-to-create-a-quadratic-bezier-curve.md).|  \n  \n The segments within a <xref:System.Windows.Media.PathFigure> are combined into a single geometric shape with the end point of each segment being the start point of the next segment. The <xref:System.Windows.Media.PathFigure.StartPoint%2A> property of a <xref:System.Windows.Media.PathFigure> specifies the point from which the first segment is drawn. Each subsequent segment starts at the end point of the previous segment. For example, a vertical line from `10,50` to `10,150` can be defined by setting the <xref:System.Windows.Media.PathFigure.StartPoint%2A> property to `10,50` and creating a <xref:System.Windows.Media.LineSegment> with a <xref:System.Windows.Media.LineSegment.Point%2A> property setting of `10,150`.  \n  \n The following example creates a simple <xref:System.Windows.Media.PathGeometry> comprised of a single <xref:System.Windows.Media.PathFigure> with a <xref:System.Windows.Media.LineSegment> and displays it using a <xref:System.Windows.Shapes.Path> element. The <xref:System.Windows.Media.PathFigure> object's <xref:System.Windows.Media.PathFigure.StartPoint%2A> is set to `10,20` and a <xref:System.Windows.Media.LineSegment> is defined with an end point of `100,130`. The following illustration shows the <xref:System.Windows.Media.PathGeometry> created by this example.  \n  \n ![A LineGeometry](./media/graphicsmm-line.gif \"graphicsmm_line\")  \nA PathGeometry that contains a single LineSegment  \n  \n [!code-xaml[GeometryOverviewSamples_snip#GraphicsMMPathGeometryLineExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_snip/CS/GeometryExamples.xaml#graphicsmmpathgeometrylineexample)]  \n  \n [!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMPathGeometryLineExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmpathgeometrylineexample)]\n [!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMPathGeometryLineExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmpathgeometrylineexample)]  \n  \n It is worth contrasting this example with the preceding <xref:System.Windows.Media.LineGeometry> example.  The syntax used for a <xref:System.Windows.Media.PathGeometry> is much more verbose than that used for a simple <xref:System.Windows.Media.LineGeometry>, and it may make more sense to use the <xref:System.Windows.Media.LineGeometry> class in this case, but the verbose syntax of the <xref:System.Windows.Media.PathGeometry> allows for extremely intricate and complex geometric regions.  \n  \n More complex geometries can be created by using a combination of <xref:System.Windows.Media.PathSegment> objects.  \n  \n The next example uses a <xref:System.Windows.Media.BezierSegment>, a <xref:System.Windows.Media.LineSegment>, and an <xref:System.Windows.Media.ArcSegment> to create shape. The example first creates a cubic Bezier curve is by defining four points: a start point, which is the end point of the previous segment, an end point (<xref:System.Windows.Media.BezierSegment.Point3%2A>), and two control points (<xref:System.Windows.Media.BezierSegment.Point1%2A> and <xref:System.Windows.Media.BezierSegment.Point2%2A>).  The two control points of a cubic Bezier curve behave like magnets, attracting portions of what would otherwise be a straight line towards themselves, producing a curve. The first control point, <xref:System.Windows.Media.BezierSegment.Point1%2A>, affects the beginning portion of the curve; the second control point, <xref:System.Windows.Media.BezierSegment.Point2%2A>, affects the ending portion of the curve.  \n  \n The example then adds a <xref:System.Windows.Media.LineSegment>, which is drawn between the end point of the preceding <xref:System.Windows.Media.BezierSegment> that preceded it to the point specified by its <xref:System.Windows.Media.LineSegment> property.  \n  \n The example then adds an <xref:System.Windows.Media.ArcSegment>, which is drawn from the end point of the preceding <xref:System.Windows.Media.LineSegment> to the point specified by its <xref:System.Windows.Media.ArcSegment.Point%2A> property. The example also specifies the arc's x- and y-radius (<xref:System.Windows.Media.ArcSegment.Size%2A>), a rotation angle (<xref:System.Windows.Media.ArcSegment.RotationAngle%2A>), a flag indicating how large the angle of the resulting arc should be (<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>), and a value indicating in which direction the arc is drawn (<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>). The following illustration shows the shape created by this example.  \n  \n ![A PathGeometry](./media/graphicsmm-path2.gif \"graphicsmm_path2\")  \nA PathGeometry  \n  \n [!code-xaml[GeometryOverviewSamples_snip#GraphicsMMPathGeometryComplexExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_snip/CS/GeometryExamples.xaml#graphicsmmpathgeometrycomplexexample)]  \n  \n [!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMPathGeometryComplexExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmpathgeometrycomplexexample)]\n [!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMPathGeometryComplexExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmpathgeometrycomplexexample)]  \n  \n Even more complex geometries can be created by using multiple <xref:System.Windows.Media.PathFigure> objects within a <xref:System.Windows.Media.PathGeometry>.  \n  \n The following example creates a <xref:System.Windows.Media.PathGeometry> with two <xref:System.Windows.Media.PathFigure> objects, each of which contains multiple <xref:System.Windows.Media.PathSegment> objects.  The <xref:System.Windows.Media.PathFigure> from the above example and a <xref:System.Windows.Media.PathFigure> with a <xref:System.Windows.Media.PolyLineSegment> and a <xref:System.Windows.Media.QuadraticBezierSegment> are used.  A <xref:System.Windows.Media.PolyLineSegment> is defined with an array of points and the <xref:System.Windows.Media.QuadraticBezierSegment> is defined with a control point and an end point. The following illustration shows the shape created by this example.  \n  \n ![A PathGeometry](./media/graphicsmm-path.gif \"graphicsmm_path\")  \nA PathGeometry with multiple figures  \n  \n [!code-xaml[GeometryOverviewSamples_snip#GraphicsMMPathGeometryComplexMultiExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_snip/CS/GeometryExamples.xaml#graphicsmmpathgeometrycomplexmultiexample)]  \n  \n [!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMPathGeometryComplexMultiExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmpathgeometrycomplexmultiexample)]\n [!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMPathGeometryComplexMultiExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmpathgeometrycomplexmultiexample)]  \n  \n### StreamGeometry  \n Like the <xref:System.Windows.Media.PathGeometry> class, a <xref:System.Windows.Media.StreamGeometry> defines a complex geometric shape that may contain curves, arcs, and lines. Unlike a <xref:System.Windows.Media.PathGeometry>, the contents of a  <xref:System.Windows.Media.StreamGeometry> do not support data binding, animation, or modification. Use a <xref:System.Windows.Media.StreamGeometry> when you need to describe a complex geometry but do not want the overhead of supporting data binding, animation, or modification. Because of its efficiency, the <xref:System.Windows.Media.StreamGeometry> class is a good choice for describing adorners.  \n  \n For an example, see [Create a Shape Using a StreamGeometry](how-to-create-a-shape-using-a-streamgeometry.md).  \n  \n### Path Markup Syntax  \n The <xref:System.Windows.Media.PathGeometry> and <xref:System.Windows.Media.StreamGeometry> types support a [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] attribute syntax using a special series of move and draw commands. For more information, see [Path Markup Syntax](path-markup-syntax.md).  \n  \n<a name=\"wcpsdk_graphics_geometry_introduction2\"></a>   \n## Composite Geometries  \n Composite geometry objects can be created using a <xref:System.Windows.Media.GeometryGroup>, a <xref:System.Windows.Media.CombinedGeometry>, or by calling the static <xref:System.Windows.Media.Geometry> method <xref:System.Windows.Media.Geometry.Combine%2A>.  \n  \n-   The <xref:System.Windows.Media.CombinedGeometry> object and the <xref:System.Windows.Media.Geometry.Combine%2A> method performs a Boolean operation to combine the area defined by two geometries. <xref:System.Windows.Media.Geometry> objects that have no area are discarded. Only two <xref:System.Windows.Media.Geometry> objects can be combined (although these two geometries may also be composite geometries).  \n  \n-   The <xref:System.Windows.Media.GeometryGroup> class creates an amalgamation of the <xref:System.Windows.Media.Geometry> objects it contains without combining their area. Any number of <xref:System.Windows.Media.Geometry> objects can be added to a <xref:System.Windows.Media.GeometryGroup>. For an example, see [Create a Composite Shape](how-to-create-a-composite-shape.md).  \n  \n Because they do not perform a combine operation, using <xref:System.Windows.Media.GeometryGroup> objects provides performance benefits over using <xref:System.Windows.Media.CombinedGeometry> objects or the <xref:System.Windows.Media.Geometry.Combine%2A> method.  \n  \n<a name=\"combindgeometriessection\"></a>   \n## Combined Geometries  \n The preceding section mentioned the <xref:System.Windows.Media.CombinedGeometry> object and the <xref:System.Windows.Media.Geometry.Combine%2A> method combine the area defined by the geometries they contain. The <xref:System.Windows.Media.GeometryCombineMode> enumeration specifies how the geometries are combined. The possible values for the <xref:System.Windows.Media.CombinedGeometry.GeometryCombineMode%2A> property are: <xref:System.Windows.Media.GeometryCombineMode.Union>, <xref:System.Windows.Media.GeometryCombineMode.Intersect>, <xref:System.Windows.Media.GeometryCombineMode.Exclude>, and <xref:System.Windows.Media.GeometryCombineMode.Xor>.  \n  \n In the following example, a <xref:System.Windows.Media.CombinedGeometry> is defined with a combine mode of Union.  Both <xref:System.Windows.Media.CombinedGeometry.Geometry1%2A> and the <xref:System.Windows.Media.CombinedGeometry.Geometry2%2A> are defined as circles of the same radius, but with centers offset by 50.  \n  \n [!code-xaml[GeometrySample#23](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometrySample/CS/combininggeometriesexample.xaml#23)]  \n  \n ![Results of the Union combine mode](./media/mil-task-combined-geometry-union.PNG \"mil_task_combined_geometry_union\")  \n  \n In the following example, a <xref:System.Windows.Media.CombinedGeometry> is defined with a combine mode of <xref:System.Windows.Media.GeometryCombineMode.Xor>.  Both <xref:System.Windows.Media.CombinedGeometry.Geometry1%2A> and the <xref:System.Windows.Media.CombinedGeometry.Geometry2%2A> are defined as circles of the same radius, but with centers offset by 50.  \n  \n [!code-xaml[GeometrySample#24](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometrySample/CS/combininggeometriesexample.xaml#24)]  \n  \n ![Results of the Xor combine mode](./media/mil-task-combined-geometry-xor.PNG \"mil_task_combined_geometry_xor\")  \n  \n For additional examples, see [Create a Composite Shape](how-to-create-a-composite-shape.md) and [Create a Combined Geometry](how-to-create-a-combined-geometry.md).  \n  \n<a name=\"freezable_features\"></a>   \n## Freezable Features  \n Because it inherits from the <xref:System.Windows.Freezable> class, the <xref:System.Windows.Media.Geometry> class  provide several special features: <xref:System.Windows.Media.Geometry> objects can be declared as [XAML Resources](../advanced/xaml-resources.md), shared among multiple objects, made read-only to improve performance, cloned, and made thread-safe. For more information about the different features provided by <xref:System.Windows.Freezable> objects, see the [Freezable Objects Overview](../advanced/freezable-objects-overview.md).  \n  \n<a name=\"othergeometryfeatures\"></a>   \n## Other Geometry Features  \n The <xref:System.Windows.Media.Geometry> class also provides useful utility methods, such as the following:  \n  \n-   <xref:System.Windows.Media.Geometry.GetArea%2A> - Gets the area of the <xref:System.Windows.Media.Geometry>.  \n  \n-   <xref:System.Windows.Media.Geometry.FillContains%2A> - Determines whether the Geometry contains another <xref:System.Windows.Media.Geometry>.  \n  \n-   <xref:System.Windows.Media.Geometry.StrokeContains%2A> - Determines whether the stroke of a <xref:System.Windows.Media.Geometry> contains a specified point.  \n  \n See the <xref:System.Windows.Media.Geometry> class for a complete listing of its methods.  \n  \n## See also\n\n- <xref:System.Windows.Media.Geometry>\n- <xref:System.Windows.Media.PathGeometry>\n- <xref:System.Windows.Shapes.Path>\n- <xref:System.Windows.Media.GeometryDrawing>\n- [2D Graphics and Imaging](../advanced/optimizing-performance-2d-graphics-and-imaging.md)\n- [Path Markup Syntax](path-markup-syntax.md)\n- [How-to Topics](geometries-how-to-topics.md)\n- [Animation Overview](animation-overview.md)\n- [Shapes and Basic Drawing in WPF Overview](shapes-and-basic-drawing-in-wpf-overview.md)\n- [Drawing Objects Overview](drawing-objects-overview.md)\n","nodes":[{"pos":[4,225],"embed":true,"restype":"x-metadata","content":"title: \"Geometry Overview\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"geometry classes [WPF]\"\n  - \"graphics [WPF], geometry classes\"\nms.assetid: 9fba8934-98b7-4af6-82f6-f4ef887f963a","nodes":[{"content":"Geometry Overview","nodes":[{"pos":[0,17],"content":"Geometry Overview","nodes":[{"content":"Geometry Overview","pos":[0,17]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[232,249],"content":"Geometry Overview","linkify":"Geometry Overview","nodes":[{"content":"Geometry Overview","pos":[0,17]}]},{"content":"This overview describes how to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> classes to describe shapes.","pos":[250,433],"source":"This overview describes how to use the [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)] <xref:System.Windows.Media.Geometry> classes to describe shapes."},{"content":"This topic also contrasts the differences between <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects and <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> elements.","pos":[434,577],"source":" This topic also contrasts the differences between <xref:System.Windows.Media.Geometry> objects and <xref:System.Windows.Shapes.Shape> elements."},{"pos":[640,659],"content":"What Is a Geometry?","linkify":"What Is a Geometry?","nodes":[{"content":"What Is a Geometry?","pos":[0,19]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class and the classes which derive from it, such as <ph id=\"ph2\">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph>, enable you to describe the geometry of a 2-D shape.","pos":[663,944],"source":"The <xref:System.Windows.Media.Geometry> class and the classes which derive from it, such as <xref:System.Windows.Media.EllipseGeometry>, <xref:System.Windows.Media.PathGeometry>, and <xref:System.Windows.Media.CombinedGeometry>, enable you to describe the geometry of a 2-D shape."},{"content":"These geometric descriptions have many uses, such defining a shape to paint to the screen or defining hit-test and clip regions.","pos":[945,1073]},{"content":"You can even use a geometry to define an animation path.","pos":[1074,1130]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects can be simple, such as rectangles and circles, or composite, created from two or more geometry objects.","pos":[1137,1285],"source":"<xref:System.Windows.Media.Geometry> objects can be simple, such as rectangles and circles, or composite, created from two or more geometry objects."},{"content":"More complex geometries can be created by using the <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> classes, which enable you to describe arcs and curves.","pos":[1287,1481],"source":"  More complex geometries can be created by using the <xref:System.Windows.Media.PathGeometry> and <xref:System.Windows.Media.StreamGeometry> classes, which enable you to describe arcs and curves."},{"content":"Because a <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> is a type of <ph id=\"ph2\">&lt;xref:System.Windows.Freezable&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects provide several special features: they can be declared as <bpt id=\"p1\">[</bpt>resources<ept id=\"p1\">](../advanced/xaml-resources.md)</ept>, shared among multiple objects, made read-only to improve performance, cloned, and made thread-safe.","pos":[1488,1827],"source":"Because a <xref:System.Windows.Media.Geometry> is a type of <xref:System.Windows.Freezable>, <xref:System.Windows.Media.Geometry> objects provide several special features: they can be declared as [resources](../advanced/xaml-resources.md), shared among multiple objects, made read-only to improve performance, cloned, and made thread-safe."},{"content":"For more information about the different features provided by <ph id=\"ph1\">&lt;xref:System.Windows.Freezable&gt;</ph> objects, see the <bpt id=\"p1\">[</bpt>Freezable Objects Overview<ept id=\"p1\">](../advanced/freezable-objects-overview.md)</ept>.","pos":[1828,2011],"source":" For more information about the different features provided by <xref:System.Windows.Freezable> objects, see the [Freezable Objects Overview](../advanced/freezable-objects-overview.md)."},{"pos":[2081,2102],"content":"Geometries vs. Shapes","linkify":"Geometries vs. Shapes","nodes":[{"content":"Geometries vs. Shapes","pos":[0,21]}]},{"pos":[2106,2389],"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> classes seem similar in that they both describe 2-D shapes (compare <ph id=\"ph3\">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> for example), but there are important differences.","source":"The <xref:System.Windows.Media.Geometry> and <xref:System.Windows.Shapes.Shape> classes seem similar in that they both describe 2-D shapes (compare <xref:System.Windows.Media.EllipseGeometry> and <xref:System.Windows.Shapes.Ellipse> for example), but there are important differences."},{"content":"For one, the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class inherits from the <ph id=\"ph2\">&lt;xref:System.Windows.Freezable&gt;</ph> class while the <ph id=\"ph3\">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> class inherits from <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.","pos":[2396,2612],"source":"For one, the <xref:System.Windows.Media.Geometry> class inherits from the <xref:System.Windows.Freezable> class while the <xref:System.Windows.Shapes.Shape> class inherits from <xref:System.Windows.FrameworkElement>."},{"content":"Because they are elements, <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects can render themselves and participate in the layout system, while <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects cannot.","pos":[2613,2801],"source":" Because they are elements, <xref:System.Windows.Shapes.Shape> objects can render themselves and participate in the layout system, while <xref:System.Windows.Media.Geometry> objects cannot."},{"content":"Although <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects are more readily usable than <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects, <ph id=\"ph3\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects are more versatile.","pos":[2808,2999],"source":"Although <xref:System.Windows.Shapes.Shape> objects are more readily usable than <xref:System.Windows.Media.Geometry> objects, <xref:System.Windows.Media.Geometry> objects are more versatile."},{"content":"While a <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object is used to render 2-D graphics, a <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> object can be used to define the geometric region for 2-D graphics, define a region for clipping, or define a region for hit testing, for example.","pos":[3000,3267],"source":" While a <xref:System.Windows.Shapes.Shape> object is used to render 2-D graphics, a <xref:System.Windows.Media.Geometry> object can be used to define the geometric region for 2-D graphics, define a region for clipping, or define a region for hit testing, for example."},{"pos":[3277,3291],"content":"The Path Shape","linkify":"The Path Shape","nodes":[{"content":"The Path Shape","pos":[0,14]}]},{"content":"One <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Shape&gt;</ph>, the <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Path&gt;</ph> class, actually uses a <ph id=\"ph3\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> to describe its contents.","pos":[3295,3458],"source":"One <xref:System.Windows.Shapes.Shape>, the <xref:System.Windows.Shapes.Path> class, actually uses a <xref:System.Windows.Media.Geometry> to describe its contents."},{"content":"By setting the <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Path.Data%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Path&gt;</ph> with a <ph id=\"ph3\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> and setting its <ph id=\"ph4\">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> properties, you can render a <ph id=\"ph6\">&lt;xref:System.Windows.Media.Geometry&gt;</ph>.","pos":[3459,3784],"source":" By setting the <xref:System.Windows.Shapes.Path.Data%2A> property of the <xref:System.Windows.Shapes.Path> with a <xref:System.Windows.Media.Geometry> and setting its <xref:System.Windows.Shapes.Shape.Fill%2A> and <xref:System.Windows.Shapes.Shape.Stroke%2A> properties, you can render a <xref:System.Windows.Media.Geometry>."},{"pos":[3828,3866],"content":"Common Properties That Take a Geometry","linkify":"Common Properties That Take a Geometry","nodes":[{"content":"Common Properties That Take a Geometry","pos":[0,38]}]},{"content":"The preceding sections mentioned that Geometry objects can be used with other objects for a variety of purposes, such as drawing shapes, animating, and clipping.","pos":[3870,4031]},{"content":"The following table lists several classes that have properties that take a <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> object.","pos":[4032,4151],"source":" The following table lists several classes that have properties that take a <xref:System.Windows.Media.Geometry> object."},{"content":"Type","pos":[4158,4162]},{"content":"Property","pos":[4163,4171]},{"pos":[4776,4797],"content":"Simple Geometry Types","linkify":"Simple Geometry Types","nodes":[{"content":"Simple Geometry Types","pos":[0,21]}]},{"content":"The base class for all geometries is the abstract class <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph>.","pos":[4801,4894],"source":"The base class for all geometries is the abstract class <xref:System.Windows.Media.Geometry>."},{"content":"The classes which derive from the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class can be roughly grouped into three categories: simple geometries, path geometries, and composite geometries.","pos":[4896,5080],"source":"  The classes which derive from the <xref:System.Windows.Media.Geometry> class can be roughly grouped into three categories: simple geometries, path geometries, and composite geometries."},{"pos":[5087,5342],"content":"Simple geometry classes include <ph id=\"ph1\">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Media.RectangleGeometry&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> and are used to create basic geometric shapes, such as lines, rectangles, and circles.","source":"Simple geometry classes include <xref:System.Windows.Media.LineGeometry>, <xref:System.Windows.Media.RectangleGeometry>, and <xref:System.Windows.Media.EllipseGeometry> and are used to create basic geometric shapes, such as lines, rectangles, and circles."},{"pos":[5352,5466],"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph> is defined by specifying the start point of the line and the end point.","source":"A <xref:System.Windows.Media.LineGeometry> is defined by specifying the start point of the line and the end point."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Media.RectangleGeometry&gt;</ph> is defined with a <ph id=\"ph2\">&lt;xref:System.Windows.Rect&gt;</ph> structure which specifies its relative position and its height and width.","pos":[5476,5642],"source":"A <xref:System.Windows.Media.RectangleGeometry> is defined with a <xref:System.Windows.Rect> structure which specifies its relative position and its height and width."},{"content":"You can create a rounded rectangle by setting the <ph id=\"ph1\">&lt;xref:System.Windows.Media.RectangleGeometry.RadiusX%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Media.RectangleGeometry.RadiusY%2A&gt;</ph> properties.","pos":[5643,5822],"source":" You can create a rounded rectangle by setting the <xref:System.Windows.Media.RectangleGeometry.RadiusX%2A> and <xref:System.Windows.Media.RectangleGeometry.RadiusY%2A> properties."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> is defined by a center point, an x-radius and a y-radius.","pos":[5832,5936],"source":"An <xref:System.Windows.Media.EllipseGeometry> is defined by a center point, an x-radius and a y-radius."},{"content":"The following examples show how to create simple geometries for rendering and for clipping.","pos":[5938,6029]},{"pos":[6036,6279],"content":"These same shapes, as well as more complex shapes, can be created using a <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> or by combining geometry objects together, but these classes provide a simpler means for producing these basic geometric shapes.","source":"These same shapes, as well as more complex shapes, can be created using a <xref:System.Windows.Media.PathGeometry> or by combining geometry objects together, but these classes provide a simpler means for producing these basic geometric shapes."},{"content":"The following example shows how to create and render a <ph id=\"ph1\">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph>.","pos":[6286,6382],"source":"The following example shows how to create and render a <xref:System.Windows.Media.LineGeometry>."},{"content":"As noted previously, a <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> object is unable to draw itself, so the example uses a <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Path&gt;</ph> shape to render the line.","pos":[6384,6558],"source":"  As noted previously, a <xref:System.Windows.Media.Geometry> object is unable to draw itself, so the example uses a <xref:System.Windows.Shapes.Path> shape to render the line."},{"content":"Because a line has no area, setting the <ph id=\"ph1\">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Windows.Shapes.Path&gt;</ph> would have no effect; instead, only the <ph id=\"ph3\">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Shapes.Shape.StrokeThickness%2A&gt;</ph> properties are specified.","pos":[6560,6861],"source":"  Because a line has no area, setting the <xref:System.Windows.Shapes.Shape.Fill%2A> property of the <xref:System.Windows.Shapes.Path> would have no effect; instead, only the <xref:System.Windows.Shapes.Shape.Stroke%2A> and <xref:System.Windows.Shapes.Shape.StrokeThickness%2A> properties are specified."},{"content":"The following illustration shows the output from the example.","pos":[6862,6923]},{"content":"<bpt id=\"p1\">![</bpt>A LineGeometry<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/graphicsmm-line.gif \"</bpt>graphicsmm_line<ept id=\"p2\">\")</ept>","pos":[6930,6994],"source":"![A LineGeometry](./media/graphicsmm-line.gif \"graphicsmm_line\")"},{"content":"A LineGeometry drawn from (10,20) to (100,130)","pos":[6997,7043]},{"pos":[7256,7714],"content":"[!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMLineGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmlinegeometryexample)]\n[!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMLineGeometryExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmlinegeometryexample)]","leadings":[""," "],"nodes":[]},{"content":"The next example shows how to create and render an <ph id=\"ph1\">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph>.","pos":[7721,7816],"source":"The next example shows how to create and render an <xref:System.Windows.Media.EllipseGeometry>."},{"content":"The examples sets the <ph id=\"ph1\">&lt;xref:System.Windows.Media.EllipseGeometry.Center%2A&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> is set to the point <ph id=\"ph3\">`50,50`</ph> and the x-radius and the y-radius are both set to <ph id=\"ph4\">`50`</ph>, which creates a circle with a diameter of 100.","pos":[7818,8075],"source":"  The examples sets the <xref:System.Windows.Media.EllipseGeometry.Center%2A> of the <xref:System.Windows.Media.EllipseGeometry> is set to the point `50,50` and the x-radius and the y-radius are both set to `50`, which creates a circle with a diameter of 100."},{"content":"The interior of the ellipse is painted by assigning a value to the Path element's Fill property, in this case <ph id=\"ph1\">&lt;xref:System.Windows.Media.Brushes.Gold%2A&gt;</ph>.","pos":[8077,8231],"source":"  The interior of the ellipse is painted by assigning a value to the Path element's Fill property, in this case <xref:System.Windows.Media.Brushes.Gold%2A>."},{"content":"The following illustration shows the output from the example.","pos":[8232,8293]},{"content":"<bpt id=\"p1\">![</bpt>An EllipseGeometry<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/graphicsmm-ellipse.gif \"</bpt>graphicsmm_ellipse<ept id=\"p2\">\")</ept>","pos":[8300,8374],"source":"![An EllipseGeometry](./media/graphicsmm-ellipse.gif \"graphicsmm_ellipse\")"},{"content":"An EllipseGeometry drawn at (50,50)","pos":[8377,8412]},{"pos":[8631,9101],"content":"[!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMEllipseGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmellipsegeometryexample)]\n[!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMEllipseGeometryExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmellipsegeometryexample)]","leadings":[""," "],"nodes":[]},{"content":"The following example shows how to create and render a <ph id=\"ph1\">&lt;xref:System.Windows.Media.RectangleGeometry&gt;</ph>.","pos":[9108,9209],"source":"The following example shows how to create and render a <xref:System.Windows.Media.RectangleGeometry>."},{"content":"The position and the dimensions of the rectangle are defined by a <ph id=\"ph1\">&lt;xref:System.Windows.Rect&gt;</ph> structure.","pos":[9211,9314],"source":"  The position and the dimensions of the rectangle are defined by a <xref:System.Windows.Rect> structure."},{"content":"The position is <ph id=\"ph1\">`50,50`</ph> and the height and width are both <ph id=\"ph2\">`25`</ph>, which creates a square.","pos":[9315,9402],"source":" The position is `50,50` and the height and width are both `25`, which creates a square."},{"content":"The following illustration shows the output from the example.","pos":[9403,9464]},{"content":"<bpt id=\"p1\">![</bpt>A RectangleGeometry<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/graphicsmm-rectangle.gif \"</bpt>graphicsmm_rectangle<ept id=\"p2\">\")</ept>","pos":[9471,9550],"source":"![A RectangleGeometry](./media/graphicsmm-rectangle.gif \"graphicsmm_rectangle\")"},{"content":"A RectangleGeometry drawn at 50,50","pos":[9553,9587]},{"pos":[9810,10288],"content":"[!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMRectangleGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmrectanglegeometryexample)]\n[!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMRectangleGeometryExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmrectanglegeometryexample)]","leadings":[""," "],"nodes":[]},{"content":"The following example shows how to use an <ph id=\"ph1\">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> as the clip region for an image.","pos":[10295,10413],"source":"The following example shows how to use an <xref:System.Windows.Media.EllipseGeometry> as the clip region for an image."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Image&gt;</ph> object is defined with a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> of 200 and a <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> of 150.","pos":[10415,10597],"source":"  An <xref:System.Windows.Controls.Image> object is defined with a <xref:System.Windows.FrameworkElement.Width%2A> of 200 and a <xref:System.Windows.FrameworkElement.Height%2A> of 150."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> with a <ph id=\"ph2\">&lt;xref:System.Windows.Media.EllipseGeometry.RadiusX%2A&gt;</ph> value of 100, a <ph id=\"ph3\">&lt;xref:System.Windows.Media.EllipseGeometry.RadiusY%2A&gt;</ph> value of 75, and a <ph id=\"ph4\">&lt;xref:System.Windows.Media.EllipseGeometry.Center%2A&gt;</ph> value of 100,75 is set to the <ph id=\"ph5\">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> property of the image.","pos":[10599,10944],"source":"  An <xref:System.Windows.Media.EllipseGeometry> with a <xref:System.Windows.Media.EllipseGeometry.RadiusX%2A> value of 100, a <xref:System.Windows.Media.EllipseGeometry.RadiusY%2A> value of 75, and a <xref:System.Windows.Media.EllipseGeometry.Center%2A> value of 100,75 is set to the <xref:System.Windows.UIElement.Clip%2A> property of the image."},{"content":"Only the part of the image that is within the area of the ellipse will be displayed.","pos":[10946,11030]},{"content":"The following illustration shows the output from the example.","pos":[11031,11092]},{"content":"<bpt id=\"p1\">![</bpt>An Image with and without clipping<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/graphicsmm-clipexample.png \"</bpt>graphicsmm_clipexample<ept id=\"p2\">\")</ept>","pos":[11099,11197],"source":"![An Image with and without clipping](./media/graphicsmm-clipexample.png \"graphicsmm_clipexample\")"},{"content":"An EllipseGeometry used to clip an Image control","pos":[11200,11248]},{"pos":[11471,11949],"content":"[!code-csharp[GeometryOverviewSamples_procedural_snip#GraphicsMMImageClipGeometryExample](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/CSharp/GeometryExamples.cs#graphicsmmimageclipgeometryexample)]\n[!code-vb[GeometryOverviewSamples_procedural_snip#GraphicsMMImageClipGeometryExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryOverviewSamples_procedural_snip/visualbasic/geometryexamples.vb#graphicsmmimageclipgeometryexample)]","leadings":[""," "],"nodes":[]},{"pos":[12014,12029],"content":"Path Geometries","linkify":"Path Geometries","nodes":[{"content":"Path Geometries","pos":[0,15]}]},{"pos":[12033,12262],"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> class and its light-weight equivalent, the <ph id=\"ph2\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> class, provide the means to describe multiple complex figures composed of arcs, curves, and lines.","source":"The <xref:System.Windows.Media.PathGeometry> class and its light-weight equivalent, the <xref:System.Windows.Media.StreamGeometry> class, provide the means to describe multiple complex figures composed of arcs, curves, and lines."},{"content":"At the heart of a <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> is a collection of <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> objects, so named because each figure describes a discrete shape in the <ph id=\"ph3\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>.","pos":[12269,12499],"source":"At the heart of a <xref:System.Windows.Media.PathGeometry> is a collection of <xref:System.Windows.Media.PathFigure> objects, so named because each figure describes a discrete shape in the <xref:System.Windows.Media.PathGeometry>."},{"content":"Each <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> is itself comprised of one or more <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathSegment&gt;</ph> objects, each of which describes a segment of the figure.","pos":[12500,12676],"source":" Each <xref:System.Windows.Media.PathFigure> is itself comprised of one or more <xref:System.Windows.Media.PathSegment> objects, each of which describes a segment of the figure."},{"content":"There are many types of segments.","pos":[12683,12716]},{"content":"Segment Type","pos":[12723,12735]},{"content":"Description","pos":[12736,12747]},{"content":"Example","pos":[12748,12755]},{"content":"Creates an elliptical arc between two points.","pos":[12854,12899]},{"pos":[12900,12963],"content":"<bpt id=\"p1\">[</bpt>Create an Elliptical Arc<ept id=\"p1\">](how-to-create-an-elliptical-arc.md)</ept>.","source":"[Create an Elliptical Arc](how-to-create-an-elliptical-arc.md)."},{"content":"Creates a cubic Bezier curve between two points.","pos":[13010,13058]},{"pos":[13059,13128],"content":"<bpt id=\"p1\">[</bpt>Create a Cubic Bezier Curve<ept id=\"p1\">](how-to-create-a-cubic-bezier-curve.md)</ept>.","source":"[Create a Cubic Bezier Curve](how-to-create-a-cubic-bezier-curve.md)."},{"content":"Creates a line between two points.","pos":[13173,13207]},{"pos":[13208,13298],"content":"<bpt id=\"p1\">[</bpt>Create a LineSegment in a PathGeometry<ept id=\"p1\">](how-to-create-a-linesegment-in-a-pathgeometry.md)</ept>","source":"[Create a LineSegment in a PathGeometry](how-to-create-a-linesegment-in-a-pathgeometry.md)"},{"content":"Creates a series of cubic Bezier curves.","pos":[13349,13389]},{"pos":[13390,13454],"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Media.PolyBezierSegment&gt;</ph> type page.","source":"See the <xref:System.Windows.Media.PolyBezierSegment> type page."},{"content":"Creates a series of lines.","pos":[13503,13529]},{"pos":[13530,13592],"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Media.PolyLineSegment&gt;</ph> type page.","source":"See the <xref:System.Windows.Media.PolyLineSegment> type page."},{"content":"Creates a series of quadratic Bezier curves.","pos":[13652,13696]},{"pos":[13697,13765],"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Media.PolyQuadraticBezierSegment&gt;</ph> page.","source":"See the <xref:System.Windows.Media.PolyQuadraticBezierSegment> page."},{"content":"Creates a quadratic Bezier curve.","pos":[13821,13854]},{"pos":[13855,13932],"content":"<bpt id=\"p1\">[</bpt>Create a Quadratic Bezier Curve<ept id=\"p1\">](how-to-create-a-quadratic-bezier-curve.md)</ept>.","source":"[Create a Quadratic Bezier Curve](how-to-create-a-quadratic-bezier-curve.md)."},{"content":"The segments within a <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> are combined into a single geometric shape with the end point of each segment being the start point of the next segment.","pos":[13940,14121],"source":"The segments within a <xref:System.Windows.Media.PathFigure> are combined into a single geometric shape with the end point of each segment being the start point of the next segment."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathFigure.StartPoint%2A&gt;</ph> property of a <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> specifies the point from which the first segment is drawn.","pos":[14122,14290],"source":" The <xref:System.Windows.Media.PathFigure.StartPoint%2A> property of a <xref:System.Windows.Media.PathFigure> specifies the point from which the first segment is drawn."},{"content":"Each subsequent segment starts at the end point of the previous segment.","pos":[14291,14363]},{"content":"For example, a vertical line from <ph id=\"ph1\">`10,50`</ph> to <ph id=\"ph2\">`10,150`</ph> can be defined by setting the <ph id=\"ph3\">&lt;xref:System.Windows.Media.PathFigure.StartPoint%2A&gt;</ph> property to <ph id=\"ph4\">`10,50`</ph> and creating a <ph id=\"ph5\">&lt;xref:System.Windows.Media.LineSegment&gt;</ph> with a <ph id=\"ph6\">&lt;xref:System.Windows.Media.LineSegment.Point%2A&gt;</ph> property setting of <ph id=\"ph7\">`10,150`</ph>.","pos":[14364,14661],"source":" For example, a vertical line from `10,50` to `10,150` can be defined by setting the <xref:System.Windows.Media.PathFigure.StartPoint%2A> property to `10,50` and creating a <xref:System.Windows.Media.LineSegment> with a <xref:System.Windows.Media.LineSegment.Point%2A> property setting of `10,150`."},{"content":"The following example creates a simple <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> comprised of a single <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> with a <ph id=\"ph3\">&lt;xref:System.Windows.Media.LineSegment&gt;</ph> and displays it using a <ph id=\"ph4\">&lt;xref:System.Windows.Shapes.Path&gt;</ph> element.","pos":[14668,14922],"source":"The following example creates a simple <xref:System.Windows.Media.PathGeometry> comprised of a single <xref:System.Windows.Media.PathFigure> with a <xref:System.Windows.Media.LineSegment> and displays it using a <xref:System.Windows.Shapes.Path> element."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathFigure.StartPoint%2A&gt;</ph> is set to <ph id=\"ph3\">`10,20`</ph> and a <ph id=\"ph4\">&lt;xref:System.Windows.Media.LineSegment&gt;</ph> is defined with an end point of <ph id=\"ph5\">`100,130`</ph>.","pos":[14923,15134],"source":" The <xref:System.Windows.Media.PathFigure> object's <xref:System.Windows.Media.PathFigure.StartPoint%2A> is set to `10,20` and a <xref:System.Windows.Media.LineSegment> is defined with an end point of `100,130`."},{"content":"The following illustration shows the <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> created by this example.","pos":[15135,15237],"source":" The following illustration shows the <xref:System.Windows.Media.PathGeometry> created by this example."},{"content":"<bpt id=\"p1\">![</bpt>A LineGeometry<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/graphicsmm-line.gif \"</bpt>graphicsmm_line<ept id=\"p2\">\")</ept>","pos":[15244,15308],"source":"![A LineGeometry](./media/graphicsmm-line.gif \"graphicsmm_line\")"},{"content":"A PathGeometry that contains a single LineSegment","pos":[15311,15360]},{"content":"It is worth contrasting this example with the preceding <ph id=\"ph1\">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph> example.","pos":[16062,16167],"source":"It is worth contrasting this example with the preceding <xref:System.Windows.Media.LineGeometry> example."},{"content":"The syntax used for a <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> is much more verbose than that used for a simple <ph id=\"ph2\">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph>, and it may make more sense to use the <ph id=\"ph3\">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph> class in this case, but the verbose syntax of the <ph id=\"ph4\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> allows for extremely intricate and complex geometric regions.","pos":[16169,16554],"source":"  The syntax used for a <xref:System.Windows.Media.PathGeometry> is much more verbose than that used for a simple <xref:System.Windows.Media.LineGeometry>, and it may make more sense to use the <xref:System.Windows.Media.LineGeometry> class in this case, but the verbose syntax of the <xref:System.Windows.Media.PathGeometry> allows for extremely intricate and complex geometric regions."},{"pos":[16561,16674],"content":"More complex geometries can be created by using a combination of <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathSegment&gt;</ph> objects.","source":"More complex geometries can be created by using a combination of <xref:System.Windows.Media.PathSegment> objects."},{"content":"The next example uses a <ph id=\"ph1\">&lt;xref:System.Windows.Media.BezierSegment&gt;</ph>, a <ph id=\"ph2\">&lt;xref:System.Windows.Media.LineSegment&gt;</ph>, and an <ph id=\"ph3\">&lt;xref:System.Windows.Media.ArcSegment&gt;</ph> to create shape.","pos":[16681,16853],"source":"The next example uses a <xref:System.Windows.Media.BezierSegment>, a <xref:System.Windows.Media.LineSegment>, and an <xref:System.Windows.Media.ArcSegment> to create shape."},{"content":"The example first creates a cubic Bezier curve is by defining four points: a start point, which is the end point of the previous segment, an end point (<ph id=\"ph1\">&lt;xref:System.Windows.Media.BezierSegment.Point3%2A&gt;</ph>), and two control points (<ph id=\"ph2\">&lt;xref:System.Windows.Media.BezierSegment.Point1%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Media.BezierSegment.Point2%2A&gt;</ph>).","pos":[16854,17193],"source":" The example first creates a cubic Bezier curve is by defining four points: a start point, which is the end point of the previous segment, an end point (<xref:System.Windows.Media.BezierSegment.Point3%2A>), and two control points (<xref:System.Windows.Media.BezierSegment.Point1%2A> and <xref:System.Windows.Media.BezierSegment.Point2%2A>)."},{"content":"The two control points of a cubic Bezier curve behave like magnets, attracting portions of what would otherwise be a straight line towards themselves, producing a curve.","pos":[17195,17364]},{"content":"The first control point, <ph id=\"ph1\">&lt;xref:System.Windows.Media.BezierSegment.Point1%2A&gt;</ph>, affects the beginning portion of the curve; the second control point, <ph id=\"ph2\">&lt;xref:System.Windows.Media.BezierSegment.Point2%2A&gt;</ph>, affects the ending portion of the curve.","pos":[17365,17606],"source":" The first control point, <xref:System.Windows.Media.BezierSegment.Point1%2A>, affects the beginning portion of the curve; the second control point, <xref:System.Windows.Media.BezierSegment.Point2%2A>, affects the ending portion of the curve."},{"pos":[17613,17870],"content":"The example then adds a <ph id=\"ph1\">&lt;xref:System.Windows.Media.LineSegment&gt;</ph>, which is drawn between the end point of the preceding <ph id=\"ph2\">&lt;xref:System.Windows.Media.BezierSegment&gt;</ph> that preceded it to the point specified by its <ph id=\"ph3\">&lt;xref:System.Windows.Media.LineSegment&gt;</ph> property.","source":"The example then adds a <xref:System.Windows.Media.LineSegment>, which is drawn between the end point of the preceding <xref:System.Windows.Media.BezierSegment> that preceded it to the point specified by its <xref:System.Windows.Media.LineSegment> property."},{"content":"The example then adds an <ph id=\"ph1\">&lt;xref:System.Windows.Media.ArcSegment&gt;</ph>, which is drawn from the end point of the preceding <ph id=\"ph2\">&lt;xref:System.Windows.Media.LineSegment&gt;</ph> to the point specified by its <ph id=\"ph3\">&lt;xref:System.Windows.Media.ArcSegment.Point%2A&gt;</ph> property.","pos":[17877,18120],"source":"The example then adds an <xref:System.Windows.Media.ArcSegment>, which is drawn from the end point of the preceding <xref:System.Windows.Media.LineSegment> to the point specified by its <xref:System.Windows.Media.ArcSegment.Point%2A> property."},{"content":"The example also specifies the arc's x- and y-radius (<ph id=\"ph1\">&lt;xref:System.Windows.Media.ArcSegment.Size%2A&gt;</ph>), a rotation angle (<ph id=\"ph2\">&lt;xref:System.Windows.Media.ArcSegment.RotationAngle%2A&gt;</ph>), a flag indicating how large the angle of the resulting arc should be (<ph id=\"ph3\">&lt;xref:System.Windows.Media.ArcSegment.IsLargeArc%2A&gt;</ph>), and a value indicating in which direction the arc is drawn (<ph id=\"ph4\">&lt;xref:System.Windows.Media.ArcSegment.SweepDirection%2A&gt;</ph>).","pos":[18121,18543],"source":" The example also specifies the arc's x- and y-radius (<xref:System.Windows.Media.ArcSegment.Size%2A>), a rotation angle (<xref:System.Windows.Media.ArcSegment.RotationAngle%2A>), a flag indicating how large the angle of the resulting arc should be (<xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>), and a value indicating in which direction the arc is drawn (<xref:System.Windows.Media.ArcSegment.SweepDirection%2A>)."},{"content":"The following illustration shows the shape created by this example.","pos":[18544,18611]},{"content":"<bpt id=\"p1\">![</bpt>A PathGeometry<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/graphicsmm-path2.gif \"</bpt>graphicsmm_path2<ept id=\"p2\">\")</ept>","pos":[18618,18684],"source":"![A PathGeometry](./media/graphicsmm-path2.gif \"graphicsmm_path2\")"},{"content":"A PathGeometry","pos":[18687,18701]},{"pos":[19421,19580],"content":"Even more complex geometries can be created by using multiple <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> objects within a <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>.","source":"Even more complex geometries can be created by using multiple <xref:System.Windows.Media.PathFigure> objects within a <xref:System.Windows.Media.PathGeometry>."},{"content":"The following example creates a <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> with two <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> objects, each of which contains multiple <ph id=\"ph3\">&lt;xref:System.Windows.Media.PathSegment&gt;</ph> objects.","pos":[19587,19797],"source":"The following example creates a <xref:System.Windows.Media.PathGeometry> with two <xref:System.Windows.Media.PathFigure> objects, each of which contains multiple <xref:System.Windows.Media.PathSegment> objects."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> from the above example and a <ph id=\"ph2\">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> with a <ph id=\"ph3\">&lt;xref:System.Windows.Media.PolyLineSegment&gt;</ph> and a <ph id=\"ph4\">&lt;xref:System.Windows.Media.QuadraticBezierSegment&gt;</ph> are used.","pos":[19799,20027],"source":"  The <xref:System.Windows.Media.PathFigure> from the above example and a <xref:System.Windows.Media.PathFigure> with a <xref:System.Windows.Media.PolyLineSegment> and a <xref:System.Windows.Media.QuadraticBezierSegment> are used."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Media.PolyLineSegment&gt;</ph> is defined with an array of points and the <ph id=\"ph2\">&lt;xref:System.Windows.Media.QuadraticBezierSegment&gt;</ph> is defined with a control point and an end point.","pos":[20029,20218],"source":"  A <xref:System.Windows.Media.PolyLineSegment> is defined with an array of points and the <xref:System.Windows.Media.QuadraticBezierSegment> is defined with a control point and an end point."},{"content":"The following illustration shows the shape created by this example.","pos":[20219,20286]},{"content":"<bpt id=\"p1\">![</bpt>A PathGeometry<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/graphicsmm-path.gif \"</bpt>graphicsmm_path<ept id=\"p2\">\")</ept>","pos":[20293,20357],"source":"![A PathGeometry](./media/graphicsmm-path.gif \"graphicsmm_path\")"},{"content":"A PathGeometry with multiple figures","pos":[20360,20396]},{"pos":[21149,21163],"content":"StreamGeometry","linkify":"StreamGeometry","nodes":[{"content":"StreamGeometry","pos":[0,14]}]},{"content":"Like the <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> class, a <ph id=\"ph2\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> defines a complex geometric shape that may contain curves, arcs, and lines.","pos":[21167,21344],"source":"Like the <xref:System.Windows.Media.PathGeometry> class, a <xref:System.Windows.Media.StreamGeometry> defines a complex geometric shape that may contain curves, arcs, and lines."},{"content":"Unlike a <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>, the contents of a  <ph id=\"ph2\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> do not support data binding, animation, or modification.","pos":[21345,21514],"source":" Unlike a <xref:System.Windows.Media.PathGeometry>, the contents of a  <xref:System.Windows.Media.StreamGeometry> do not support data binding, animation, or modification."},{"content":"Use a <ph id=\"ph1\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> when you need to describe a complex geometry but do not want the overhead of supporting data binding, animation, or modification.","pos":[21515,21693],"source":" Use a <xref:System.Windows.Media.StreamGeometry> when you need to describe a complex geometry but do not want the overhead of supporting data binding, animation, or modification."},{"content":"Because of its efficiency, the <ph id=\"ph1\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> class is a good choice for describing adorners.","pos":[21694,21815],"source":" Because of its efficiency, the <xref:System.Windows.Media.StreamGeometry> class is a good choice for describing adorners."},{"pos":[21822,21931],"content":"For an example, see <bpt id=\"p1\">[</bpt>Create a Shape Using a StreamGeometry<ept id=\"p1\">](how-to-create-a-shape-using-a-streamgeometry.md)</ept>.","source":"For an example, see [Create a Shape Using a StreamGeometry](how-to-create-a-shape-using-a-streamgeometry.md)."},{"pos":[21941,21959],"content":"Path Markup Syntax","linkify":"Path Markup Syntax","nodes":[{"content":"Path Markup Syntax","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Media.StreamGeometry&gt;</ph> types support a <ph id=\"ph3\">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> attribute syntax using a special series of move and draw commands.","pos":[21963,22207],"source":"The <xref:System.Windows.Media.PathGeometry> and <xref:System.Windows.Media.StreamGeometry> types support a [!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)] attribute syntax using a special series of move and draw commands."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Path Markup Syntax<ept id=\"p1\">](path-markup-syntax.md)</ept>.","pos":[22208,22278],"source":" For more information, see [Path Markup Syntax](path-markup-syntax.md)."},{"pos":[22344,22364],"content":"Composite Geometries","linkify":"Composite Geometries","nodes":[{"content":"Composite Geometries","pos":[0,20]}]},{"pos":[22368,22626],"content":"Composite geometry objects can be created using a <ph id=\"ph1\">&lt;xref:System.Windows.Media.GeometryGroup&gt;</ph>, a <ph id=\"ph2\">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph>, or by calling the static <ph id=\"ph3\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> method <ph id=\"ph4\">&lt;xref:System.Windows.Media.Geometry.Combine%2A&gt;</ph>.","source":"Composite geometry objects can be created using a <xref:System.Windows.Media.GeometryGroup>, a <xref:System.Windows.Media.CombinedGeometry>, or by calling the static <xref:System.Windows.Media.Geometry> method <xref:System.Windows.Media.Geometry.Combine%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph> object and the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry.Combine%2A&gt;</ph> method performs a Boolean operation to combine the area defined by two geometries.","pos":[22636,22830],"source":"The <xref:System.Windows.Media.CombinedGeometry> object and the <xref:System.Windows.Media.Geometry.Combine%2A> method performs a Boolean operation to combine the area defined by two geometries."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects that have no area are discarded.","pos":[22831,22908],"source":"<xref:System.Windows.Media.Geometry> objects that have no area are discarded."},{"content":"Only two <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects can be combined (although these two geometries may also be composite geometries).","pos":[22909,23044],"source":" Only two <xref:System.Windows.Media.Geometry> objects can be combined (although these two geometries may also be composite geometries)."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.GeometryGroup&gt;</ph> class creates an amalgamation of the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects it contains without combining their area.","pos":[23054,23223],"source":"The <xref:System.Windows.Media.GeometryGroup> class creates an amalgamation of the <xref:System.Windows.Media.Geometry> objects it contains without combining their area."},{"content":"Any number of <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects can be added to a <ph id=\"ph2\">&lt;xref:System.Windows.Media.GeometryGroup&gt;</ph>.","pos":[23224,23343],"source":" Any number of <xref:System.Windows.Media.Geometry> objects can be added to a <xref:System.Windows.Media.GeometryGroup>."},{"content":"For an example, see <bpt id=\"p1\">[</bpt>Create a Composite Shape<ept id=\"p1\">](how-to-create-a-composite-shape.md)</ept>.","pos":[23344,23427],"source":" For an example, see [Create a Composite Shape](how-to-create-a-composite-shape.md)."},{"pos":[23434,23695],"content":"Because they do not perform a combine operation, using <ph id=\"ph1\">&lt;xref:System.Windows.Media.GeometryGroup&gt;</ph> objects provides performance benefits over using <ph id=\"ph2\">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph> objects or the <ph id=\"ph3\">&lt;xref:System.Windows.Media.Geometry.Combine%2A&gt;</ph> method.","source":"Because they do not perform a combine operation, using <xref:System.Windows.Media.GeometryGroup> objects provides performance benefits over using <xref:System.Windows.Media.CombinedGeometry> objects or the <xref:System.Windows.Media.Geometry.Combine%2A> method."},{"pos":[23747,23766],"content":"Combined Geometries","linkify":"Combined Geometries","nodes":[{"content":"Combined Geometries","pos":[0,19]}]},{"content":"The preceding section mentioned the <ph id=\"ph1\">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph> object and the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry.Combine%2A&gt;</ph> method combine the area defined by the geometries they contain.","pos":[23770,23977],"source":"The preceding section mentioned the <xref:System.Windows.Media.CombinedGeometry> object and the <xref:System.Windows.Media.Geometry.Combine%2A> method combine the area defined by the geometries they contain."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.GeometryCombineMode&gt;</ph> enumeration specifies how the geometries are combined.","pos":[23978,24084],"source":" The <xref:System.Windows.Media.GeometryCombineMode> enumeration specifies how the geometries are combined."},{"content":"The possible values for the <ph id=\"ph1\">&lt;xref:System.Windows.Media.CombinedGeometry.GeometryCombineMode%2A&gt;</ph> property are: <ph id=\"ph2\">&lt;xref:System.Windows.Media.GeometryCombineMode.Union&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Media.GeometryCombineMode.Intersect&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Media.GeometryCombineMode.Exclude&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Windows.Media.GeometryCombineMode.Xor&gt;</ph>.","pos":[24085,24422],"source":" The possible values for the <xref:System.Windows.Media.CombinedGeometry.GeometryCombineMode%2A> property are: <xref:System.Windows.Media.GeometryCombineMode.Union>, <xref:System.Windows.Media.GeometryCombineMode.Intersect>, <xref:System.Windows.Media.GeometryCombineMode.Exclude>, and <xref:System.Windows.Media.GeometryCombineMode.Xor>."},{"content":"In the following example, a <ph id=\"ph1\">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph> is defined with a combine mode of Union.","pos":[24429,24542],"source":"In the following example, a <xref:System.Windows.Media.CombinedGeometry> is defined with a combine mode of Union."},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Windows.Media.CombinedGeometry.Geometry1%2A&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Windows.Media.CombinedGeometry.Geometry2%2A&gt;</ph> are defined as circles of the same radius, but with centers offset by 50.","pos":[24544,24746],"source":"  Both <xref:System.Windows.Media.CombinedGeometry.Geometry1%2A> and the <xref:System.Windows.Media.CombinedGeometry.Geometry2%2A> are defined as circles of the same radius, but with centers offset by 50."},{"pos":[24887,25004],"content":"<bpt id=\"p1\">![</bpt>Results of the Union combine mode<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/mil-task-combined-geometry-union.PNG \"</bpt>mil_task_combined_geometry_union<ept id=\"p2\">\")</ept>","source":"![Results of the Union combine mode](./media/mil-task-combined-geometry-union.PNG \"mil_task_combined_geometry_union\")"},{"content":"In the following example, a <ph id=\"ph1\">&lt;xref:System.Windows.Media.CombinedGeometry&gt;</ph> is defined with a combine mode of <ph id=\"ph2\">&lt;xref:System.Windows.Media.GeometryCombineMode.Xor&gt;</ph>.","pos":[25011,25170],"source":"In the following example, a <xref:System.Windows.Media.CombinedGeometry> is defined with a combine mode of <xref:System.Windows.Media.GeometryCombineMode.Xor>."},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Windows.Media.CombinedGeometry.Geometry1%2A&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Windows.Media.CombinedGeometry.Geometry2%2A&gt;</ph> are defined as circles of the same radius, but with centers offset by 50.","pos":[25172,25374],"source":"  Both <xref:System.Windows.Media.CombinedGeometry.Geometry1%2A> and the <xref:System.Windows.Media.CombinedGeometry.Geometry2%2A> are defined as circles of the same radius, but with centers offset by 50."},{"pos":[25515,25626],"content":"<bpt id=\"p1\">![</bpt>Results of the Xor combine mode<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/mil-task-combined-geometry-xor.PNG \"</bpt>mil_task_combined_geometry_xor<ept id=\"p2\">\")</ept>","source":"![Results of the Xor combine mode](./media/mil-task-combined-geometry-xor.PNG \"mil_task_combined_geometry_xor\")"},{"pos":[25633,25796],"content":"For additional examples, see <bpt id=\"p1\">[</bpt>Create a Composite Shape<ept id=\"p1\">](how-to-create-a-composite-shape.md)</ept> and <bpt id=\"p2\">[</bpt>Create a Combined Geometry<ept id=\"p2\">](how-to-create-a-combined-geometry.md)</ept>.","source":"For additional examples, see [Create a Composite Shape](how-to-create-a-composite-shape.md) and [Create a Combined Geometry](how-to-create-a-combined-geometry.md)."},{"pos":[25842,25860],"content":"Freezable Features","linkify":"Freezable Features","nodes":[{"content":"Freezable Features","pos":[0,18]}]},{"content":"Because it inherits from the <ph id=\"ph1\">&lt;xref:System.Windows.Freezable&gt;</ph> class, the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class  provide several special features: <ph id=\"ph3\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects can be declared as <bpt id=\"p1\">[</bpt>XAML Resources<ept id=\"p1\">](../advanced/xaml-resources.md)</ept>, shared among multiple objects, made read-only to improve performance, cloned, and made thread-safe.","pos":[25864,26226],"source":"Because it inherits from the <xref:System.Windows.Freezable> class, the <xref:System.Windows.Media.Geometry> class  provide several special features: <xref:System.Windows.Media.Geometry> objects can be declared as [XAML Resources](../advanced/xaml-resources.md), shared among multiple objects, made read-only to improve performance, cloned, and made thread-safe."},{"content":"For more information about the different features provided by <ph id=\"ph1\">&lt;xref:System.Windows.Freezable&gt;</ph> objects, see the <bpt id=\"p1\">[</bpt>Freezable Objects Overview<ept id=\"p1\">](../advanced/freezable-objects-overview.md)</ept>.","pos":[26227,26410],"source":" For more information about the different features provided by <xref:System.Windows.Freezable> objects, see the [Freezable Objects Overview](../advanced/freezable-objects-overview.md)."},{"pos":[26459,26482],"content":"Other Geometry Features","linkify":"Other Geometry Features","nodes":[{"content":"Other Geometry Features","pos":[0,23]}]},{"pos":[26486,26593],"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class also provides useful utility methods, such as the following:","source":"The <xref:System.Windows.Media.Geometry> class also provides useful utility methods, such as the following:"},{"pos":[26603,26711],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry.GetArea%2A&gt;</ph> - Gets the area of the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry&gt;</ph>.","source":"<xref:System.Windows.Media.Geometry.GetArea%2A> - Gets the area of the <xref:System.Windows.Media.Geometry>."},{"pos":[26721,26862],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry.FillContains%2A&gt;</ph> - Determines whether the Geometry contains another <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry&gt;</ph>.","source":"<xref:System.Windows.Media.Geometry.FillContains%2A> - Determines whether the Geometry contains another <xref:System.Windows.Media.Geometry>."},{"pos":[26872,27028],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry.StrokeContains%2A&gt;</ph> - Determines whether the stroke of a <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> contains a specified point.","source":"<xref:System.Windows.Media.Geometry.StrokeContains%2A> - Determines whether the stroke of a <xref:System.Windows.Media.Geometry> contains a specified point."},{"pos":[27035,27124],"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> class for a complete listing of its methods.","source":"See the <xref:System.Windows.Media.Geometry> class for a complete listing of its methods."},{"pos":[27133,27141],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[27309,27397],"content":"<bpt id=\"p1\">[</bpt>2D Graphics and Imaging<ept id=\"p1\">](../advanced/optimizing-performance-2d-graphics-and-imaging.md)</ept>","source":"[2D Graphics and Imaging](../advanced/optimizing-performance-2d-graphics-and-imaging.md)"},{"pos":[27400,27443],"content":"<bpt id=\"p1\">[</bpt>Path Markup Syntax<ept id=\"p1\">](path-markup-syntax.md)</ept>","source":"[Path Markup Syntax](path-markup-syntax.md)"},{"pos":[27446,27490],"content":"<bpt id=\"p1\">[</bpt>How-to Topics<ept id=\"p1\">](geometries-how-to-topics.md)</ept>","source":"[How-to Topics](geometries-how-to-topics.md)"},{"pos":[27493,27536],"content":"<bpt id=\"p1\">[</bpt>Animation Overview<ept id=\"p1\">](animation-overview.md)</ept>","source":"[Animation Overview](animation-overview.md)"},{"pos":[27539,27626],"content":"<bpt id=\"p1\">[</bpt>Shapes and Basic Drawing in WPF Overview<ept id=\"p1\">](shapes-and-basic-drawing-in-wpf-overview.md)</ept>","source":"[Shapes and Basic Drawing in WPF Overview](shapes-and-basic-drawing-in-wpf-overview.md)"},{"pos":[27629,27684],"content":"<bpt id=\"p1\">[</bpt>Drawing Objects Overview<ept id=\"p1\">](drawing-objects-overview.md)</ept>","source":"[Drawing Objects Overview](drawing-objects-overview.md)"}]}