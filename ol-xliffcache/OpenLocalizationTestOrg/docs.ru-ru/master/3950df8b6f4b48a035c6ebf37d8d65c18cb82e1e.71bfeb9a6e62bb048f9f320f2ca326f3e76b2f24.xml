{"content":"---\ntitle: \"How to: Implement Binding Validation\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"validation of binding [WPF]\"\n  - \"data binding [WPF], validation of binding\"\n  - \"binding [WPF], validation of\"\nms.assetid: eb98b33d-9866-49ae-b981-bc5ff20d607a\n---\n# How to: Implement Binding Validation\nThis example shows how to use an <xref:System.Windows.Controls.Validation.ErrorTemplate%2A> and a style trigger to provide visual feedback to inform the user when an invalid value is entered, based on a custom validation rule.  \n  \n## Example  \n The text content of the <xref:System.Windows.Controls.TextBox> in the following example is bound to the `Age` property (of type int) of a binding source object named `ods`. The binding is set up to use a validation rule named `AgeRangeRule` so that if the user enters non-numeric characters or a value that is smaller than 21 or greater than 130, a red exclamation mark appears next to the text box and a tool tip with the error message appears when the user moves the mouse over the text box.  \n  \n [!code-xaml[BindValidation#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#2)]  \n  \n The following example shows the implementation of `AgeRangeRule`, which inherits from <xref:System.Windows.Controls.ValidationRule> and overrides the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. The Int32.Parse() method is called on the value to make sure that it does not contain any invalid characters. The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method returns a <xref:System.Windows.Controls.ValidationResult> that indicates if the value is valid based on whether an exception is caught during the parsing and whether the age value is outside of the lower and upper bounds.  \n  \n [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  \n  \n The following example shows the custom <xref:System.Windows.Controls.ControlTemplate> `validationTemplate` that creates a red exclamation mark to notify the user of a validation error. Control templates are used to redefine the appearance of a control.  \n  \n [!code-xaml[BindValidation#4](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#4)]  \n  \n As shown in the following example, the <xref:System.Windows.Controls.ToolTip> that shows the error message is created using the style named `textBoxInError`. If the value of <xref:System.Windows.Controls.Validation.HasError%2A> is `true`, the trigger sets the tool tip of the current <xref:System.Windows.Controls.TextBox> to its first validation error. The <xref:System.Windows.Data.Binding.RelativeSource%2A> is set to <xref:System.Windows.Data.RelativeSourceMode.Self>, referring to the current element.  \n  \n [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  \n  \n For the complete example, see [Binding Validation Sample](https://go.microsoft.com/fwlink/?LinkID=159972).  \n  \n Note that if you do not provide a custom <xref:System.Windows.Controls.Validation.ErrorTemplate%2A> the default error template appears to provide visual feedback to the user when there is a validation error. See \"Data Validation\" in [Data Binding Overview](data-binding-overview.md) for more information. Also, [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] provides a built-in validation rule that catches exceptions that are thrown during the update of the binding source property. For more information, see <xref:System.Windows.Controls.ExceptionValidationRule>.  \n  \n## See also\n\n- [Data Binding Overview](data-binding-overview.md)\n- [How-to Topics](data-binding-how-to-topics.md)\n","nodes":[{"pos":[4,259],"embed":true,"restype":"x-metadata","content":"title: \"How to: Implement Binding Validation\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"validation of binding [WPF]\"\n  - \"data binding [WPF], validation of binding\"\n  - \"binding [WPF], validation of\"\nms.assetid: eb98b33d-9866-49ae-b981-bc5ff20d607a","nodes":[{"content":"How to: Implement Binding Validation","nodes":[{"pos":[0,36],"content":"How to: Implement Binding Validation","nodes":[{"content":"How to: Implement Binding Validation","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[266,302],"content":"How to: Implement Binding Validation","linkify":"How to: Implement Binding Validation","nodes":[{"content":"How to: Implement Binding Validation","pos":[0,36]}]},{"pos":[303,529],"content":"This example shows how to use an <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A&gt;</ph> and a style trigger to provide visual feedback to inform the user when an invalid value is entered, based on a custom validation rule.","source":"This example shows how to use an <xref:System.Windows.Controls.Validation.ErrorTemplate%2A> and a style trigger to provide visual feedback to inform the user when an invalid value is entered, based on a custom validation rule."},{"pos":[538,545],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The text content of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> in the following example is bound to the <ph id=\"ph2\">`Age`</ph> property (of type int) of a binding source object named <ph id=\"ph3\">`ods`</ph>.","pos":[549,721],"source":"The text content of the <xref:System.Windows.Controls.TextBox> in the following example is bound to the `Age` property (of type int) of a binding source object named `ods`."},{"content":"The binding is set up to use a validation rule named <ph id=\"ph1\">`AgeRangeRule`</ph> so that if the user enters non-numeric characters or a value that is smaller than 21 or greater than 130, a red exclamation mark appears next to the text box and a tool tip with the error message appears when the user moves the mouse over the text box.","pos":[722,1042],"source":" The binding is set up to use a validation rule named `AgeRangeRule` so that if the user enters non-numeric characters or a value that is smaller than 21 or greater than 130, a red exclamation mark appears next to the text box and a tool tip with the error message appears when the user moves the mouse over the text box."},{"content":"The following example shows the implementation of <ph id=\"ph1\">`AgeRangeRule`</ph>, which inherits from <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> and overrides the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method.","pos":[1166,1381],"source":"The following example shows the implementation of `AgeRangeRule`, which inherits from <xref:System.Windows.Controls.ValidationRule> and overrides the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method."},{"content":"The Int32.Parse() method is called on the value to make sure that it does not contain any invalid characters.","pos":[1382,1491]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ValidationResult&gt;</ph> that indicates if the value is valid based on whether an exception is caught during the parsing and whether the age value is outside of the lower and upper bounds.","pos":[1492,1782],"source":" The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method returns a <xref:System.Windows.Controls.ValidationResult> that indicates if the value is valid based on whether an exception is caught during the parsing and whether the age value is outside of the lower and upper bounds."},{"content":"The following example shows the custom <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> <ph id=\"ph2\">`validationTemplate`</ph> that creates a red exclamation mark to notify the user of a validation error.","pos":[1911,2095],"source":"The following example shows the custom <xref:System.Windows.Controls.ControlTemplate> `validationTemplate` that creates a red exclamation mark to notify the user of a validation error."},{"content":"Control templates are used to redefine the appearance of a control.","pos":[2096,2163]},{"content":"As shown in the following example, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> that shows the error message is created using the style named <ph id=\"ph2\">`textBoxInError`</ph>.","pos":[2287,2444],"source":"As shown in the following example, the <xref:System.Windows.Controls.ToolTip> that shows the error message is created using the style named `textBoxInError`."},{"content":"If the value of <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Validation.HasError%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the trigger sets the tool tip of the current <ph id=\"ph3\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> to its first validation error.","pos":[2445,2640],"source":" If the value of <xref:System.Windows.Controls.Validation.HasError%2A> is `true`, the trigger sets the tool tip of the current <xref:System.Windows.Controls.TextBox> to its first validation error."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph> is set to <ph id=\"ph2\">&lt;xref:System.Windows.Data.RelativeSourceMode.Self&gt;</ph>, referring to the current element.","pos":[2641,2793],"source":" The <xref:System.Windows.Data.Binding.RelativeSource%2A> is set to <xref:System.Windows.Data.RelativeSourceMode.Self>, referring to the current element."},{"pos":[2917,3023],"content":"For the complete example, see <bpt id=\"p1\">[</bpt>Binding Validation Sample<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkID=159972)</ept>.","source":"For the complete example, see [Binding Validation Sample](https://go.microsoft.com/fwlink/?LinkID=159972)."},{"content":"Note that if you do not provide a custom <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Validation.ErrorTemplate%2A&gt;</ph> the default error template appears to provide visual feedback to the user when there is a validation error.","pos":[3030,3237],"source":"Note that if you do not provide a custom <xref:System.Windows.Controls.Validation.ErrorTemplate%2A> the default error template appears to provide visual feedback to the user when there is a validation error."},{"content":"See \"Data Validation\" in <bpt id=\"p1\">[</bpt>Data Binding Overview<ept id=\"p1\">](data-binding-overview.md)</ept> for more information.","pos":[3238,3334],"source":" See \"Data Validation\" in [Data Binding Overview](data-binding-overview.md) for more information."},{"content":"Also, <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides a built-in validation rule that catches exceptions that are thrown during the update of the binding source property.","pos":[3335,3548],"source":" Also, [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] provides a built-in validation rule that catches exceptions that are thrown during the update of the binding source property."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph>.","pos":[3549,3630],"source":" For more information, see <xref:System.Windows.Controls.ExceptionValidationRule>."},{"pos":[3639,3647],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3651,3700],"content":"<bpt id=\"p1\">[</bpt>Data Binding Overview<ept id=\"p1\">](data-binding-overview.md)</ept>","source":"[Data Binding Overview](data-binding-overview.md)"},{"pos":[3703,3749],"content":"<bpt id=\"p1\">[</bpt>How-to Topics<ept id=\"p1\">](data-binding-how-to-topics.md)</ept>","source":"[How-to Topics](data-binding-how-to-topics.md)"}]}