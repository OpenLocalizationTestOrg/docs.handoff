{"content":"---\ntitle: \"<summary> - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"<summary>\"\n  - \"summary\"\nhelpviewer_keywords: \n  - \"<summary> C# XML tag\"\n  - \"summary C# XML tag\"\nms.assetid: b4c43d92-2067-4eac-a59a-d32f5248c08b\n---\n# \\<summary> (C# Programming Guide)\n## Syntax  \n  \n```xml  \n<summary>description</summary>  \n```  \n  \n## Parameters  \n `description`  \n A summary of the object.  \n  \n## Remarks  \n The \\<summary> tag should be used to describe a type or a type member. Use [\\<remarks>](../../../csharp/programming-guide/xmldoc/remarks.md) to add supplemental information to a type description. Use the [cref Attribute](../../../csharp/programming-guide/xmldoc/cref-attribute.md) to enable documentation tools such as [DocFX](https://dotnet.github.io/docfx/) and [Sandcastle](https://github.com/EWSoftware/SHFB) to create internal hyperlinks to documentation pages for code elements.  \n  \n The text for the \\<summary> tag is the only source of information about the type in IntelliSense, and is also displayed in the Object Browser Window.  \n  \n Compile with [/doc](../../../csharp/language-reference/compiler-options/doc-compiler-option.md) to process documentation comments to a file. To create the final documentation based on the compiler-generated file, you can create a custom tool, or use a tool such as [DocFX](https://dotnet.github.io/docfx/) or [Sandcastle](https://github.com/EWSoftware/SHFB).  \n  \n## Example  \n [!code-csharp[csProgGuideDocComments#12](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideDocComments/CS/DocComments.cs#12)]  \n  \n The previous example produces the following XML file.  \n  \n```xml  \n<?xml version=\"1.0\"?>  \n<doc>  \n    <assembly>  \n        <name>YourNamespace</name>  \n    </assembly>  \n    <members>  \n        <member name=\"T:DotNetEvents.TestClass\">  \n            text for class TestClass  \n        </member>  \n        <member name=\"M:DotNetEvents.TestClass.DoWork(System.Int32)\">  \n            <summary>DoWork is a method in the TestClass class.  \n            <para>Here's how you could make a second paragraph in a description. <see cref=\"M:System.Console.WriteLine(System.String)\"/> for information about output statements.</para>  \n            <seealso cref=\"M:DotNetEvents.TestClass.Main\"/>  \n            </summary>  \n        </member>  \n        <member name=\"M:DotNetEvents.TestClass.Main\">  \n            text for Main  \n        </member>  \n    </members>  \n</doc>  \n```  \n  \n## Example  \n The following example shows how to make a `cref` reference to a generic type.  \n  \n [!code-csharp[csProgGuideDocComments#11](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideDocComments/CS/DocComments.cs#11)]  \n  \n The previous example produces the following XML file.  \n  \n```xml  \n<?xml version=\"1.0\"?>  \n<doc>  \n    <assembly>  \n        <name>YourNamespace</name>  \n    </assembly>  \n    <members>  \n        <member name=\"T:ExtensionMethodsDemo1.A\">  \n            <summary cref=\"T:ExtensionMethodsDemo1.C`1\">  \n            </summary>  \n        </member>  \n        <member name=\"T:ExtensionMethodsDemo1.B\">  \n            <summary cref=\"T:C`1\">  \n            </summary>  \n        </member>  \n        <member name=\"T:ExtensionMethodsDemo1.C`1\">  \n            <summary cref=\"T:ExtensionMethodsDemo1.A\">  \n            </summary>  \n            <typeparam name=\"T\"></typeparam>  \n        </member>  \n    </members>  \n</doc>  \n```  \n  \n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Recommended Tags for Documentation Comments](../../../csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)\n","nodes":[{"pos":[4,252],"embed":true,"restype":"x-metadata","content":"title: \"<summary> - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nf1_keywords: \n  - \"<summary>\"\n  - \"summary\"\nhelpviewer_keywords: \n  - \"<summary> C# XML tag\"\n  - \"summary C# XML tag\"\nms.assetid: b4c43d92-2067-4eac-a59a-d32f5248c08b","nodes":[{"content":"<summary> - C# Programming Guide","nodes":[{"pos":[0,32],"content":"<summary> - C# Programming Guide","nodes":[{"content":"- C# Programming Guide","pos":[10,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[259,292],"content":"\\<summary> (C# Programming Guide)","linkify":"\\<summary> (C# Programming Guide)","nodes":[{"content":"<ph id=\"ph1\">\\&lt;</ph>summary&gt; (C# Programming Guide)","pos":[0,33],"source":"\\<summary> (C# Programming Guide)"}]},{"pos":[296,302],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[362,372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"A summary of the object.","pos":[393,417]},{"pos":[426,433],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">\\&lt;</ph>summary&gt; tag should be used to describe a type or a type member.","pos":[437,507],"source":"The \\<summary> tag should be used to describe a type or a type member."},{"content":"Use <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>remarks&gt;<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/remarks.md)</ept> to add supplemental information to a type description.","pos":[508,632],"source":" Use [\\<remarks>](../../../csharp/programming-guide/xmldoc/remarks.md) to add supplemental information to a type description."},{"content":"Use the <bpt id=\"p1\">[</bpt>cref Attribute<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/cref-attribute.md)</ept> to enable documentation tools such as <bpt id=\"p2\">[</bpt>DocFX<ept id=\"p2\">](https://dotnet.github.io/docfx/)</ept> and <bpt id=\"p3\">[</bpt>Sandcastle<ept id=\"p3\">](https://github.com/EWSoftware/SHFB)</ept> to create internal hyperlinks to documentation pages for code elements.","pos":[633,921],"source":" Use the [cref Attribute](../../../csharp/programming-guide/xmldoc/cref-attribute.md) to enable documentation tools such as [DocFX](https://dotnet.github.io/docfx/) and [Sandcastle](https://github.com/EWSoftware/SHFB) to create internal hyperlinks to documentation pages for code elements."},{"content":"The text for the <ph id=\"ph1\">\\&lt;</ph>summary&gt; tag is the only source of information about the type in IntelliSense, and is also displayed in the Object Browser Window.","pos":[928,1077],"source":"The text for the \\<summary> tag is the only source of information about the type in IntelliSense, and is also displayed in the Object Browser Window."},{"content":"Compile with <bpt id=\"p1\">[</bpt>/doc<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/doc-compiler-option.md)</ept> to process documentation comments to a file.","pos":[1084,1224],"source":"Compile with [/doc](../../../csharp/language-reference/compiler-options/doc-compiler-option.md) to process documentation comments to a file."},{"content":"To create the final documentation based on the compiler-generated file, you can create a custom tool, or use a tool such as <bpt id=\"p1\">[</bpt>DocFX<ept id=\"p1\">](https://dotnet.github.io/docfx/)</ept> or <bpt id=\"p2\">[</bpt>Sandcastle<ept id=\"p2\">](https://github.com/EWSoftware/SHFB)</ept>.","pos":[1225,1442],"source":" To create the final documentation based on the compiler-generated file, you can create a custom tool, or use a tool such as [DocFX](https://dotnet.github.io/docfx/) or [Sandcastle](https://github.com/EWSoftware/SHFB)."},{"pos":[1451,1458],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The previous example produces the following XML file.","pos":[1602,1655]},{"pos":[2474,2481],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2485,2562],"content":"The following example shows how to make a <ph id=\"ph1\">`cref`</ph> reference to a generic type.","source":"The following example shows how to make a `cref` reference to a generic type."},{"content":"The previous example produces the following XML file.","pos":[2709,2762]},{"pos":[3428,3436],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3440,3506],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[3509,3643],"content":"<bpt id=\"p1\">[</bpt>Recommended Tags for Documentation Comments<ept id=\"p1\">](../../../csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)</ept>","source":"[Recommended Tags for Documentation Comments](../../../csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.md)"}]}