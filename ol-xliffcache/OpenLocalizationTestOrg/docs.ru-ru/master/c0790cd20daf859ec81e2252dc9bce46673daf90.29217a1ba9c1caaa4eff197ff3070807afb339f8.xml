{"content":"---\ntitle: \"Names of Classes, Structs, and Interfaces\"\nms.date: \"10/22/2008\"\nhelpviewer_keywords: \n  - \"type names, guidelines\"\n  - \"classes [.NET Framework], names\"\n  - \"enumerations [.NET Framework], names\"\n  - \"names [.NET Framework], interfaces\"\n  - \"common type names\"\n  - \"names [.NET Framework], type names\"\n  - \"names [.NET Framework], classes\"\n  - \"interfaces [.NET Framework], names\"\n  - \"generic type parameters\"\nms.assetid: 87a4b0da-ed64-43b1-ac43-968576c444ce\nauthor: \"KrzysztofCwalina\"\n---\n# Names of Classes, Structs, and Interfaces\nThe naming guidelines that follow apply to general type naming.  \n  \n **✓ DO** name classes and structs with nouns or noun phrases, using PascalCasing.  \n  \n This distinguishes type names from methods, which are named with verb phrases.  \n  \n **✓ DO** name interfaces with adjective phrases, or occasionally with nouns or noun phrases.  \n  \n Nouns and noun phrases should be used rarely and they might indicate that the type should be an abstract class, and not an interface.  \n  \n **X DO NOT** give class names a prefix (e.g., \"C\").  \n  \n **✓ CONSIDER** ending the name of derived classes with the name of the base class.  \n  \n This is very readable and explains the relationship clearly. Some examples of this in code are: `ArgumentOutOfRangeException`, which is a kind of `Exception`, and `SerializableAttribute`, which is a kind of `Attribute`. However, it is important to use reasonable judgment in applying this guideline; for example, the `Button` class is a kind of `Control` event, although `Control` doesn’t appear in its name.  \n  \n **✓ DO** prefix interface names with the letter I, to indicate that the type is an interface.  \n  \n For example, `IComponent` (descriptive noun), `ICustomAttributeProvider` (noun phrase), and `IPersistable` (adjective) are appropriate interface names. As with other type names, avoid abbreviations.  \n  \n **✓ DO** ensure that the names differ only by the \"I\" prefix on the interface name when you are defining a class–interface pair where the class is a standard implementation of the interface.  \n  \n## Names of Generic Type Parameters  \n Generics were added to .NET Framework 2.0. The feature introduced a new kind of identifier called *type parameter*.  \n  \n **✓ DO** name generic type parameters with descriptive names unless a single-letter name is completely self-explanatory and a descriptive name would not add value.  \n  \n **✓ CONSIDER** using `T` as the type parameter name for types with one single-letter type parameter.  \n  \n```  \npublic int IComparer<T> { ... }  \npublic delegate bool Predicate<T>(T item);  \npublic struct Nullable<T> where T:struct { ... }  \n```  \n  \n **✓ DO** prefix descriptive type parameter names with `T`.  \n  \n```  \npublic interface ISessionChannel<TSession> where TSession : ISession {  \n    TSession Session { get; }  \n}  \n```  \n  \n **✓ CONSIDER** indicating constraints placed on a type parameter in the name of the parameter.  \n  \n For example, a parameter constrained to `ISession` might be called `TSession`.  \n  \n## Names of Common Types  \n **✓ DO** follow the guidelines described in the following table when naming types derived from or implementing certain .NET Framework types.  \n  \n|Base Type|Derived/Implementing Type Guideline|  \n|---------------|------------------------------------------|  \n|`System.Attribute`|**✓ DO** add the suffix \"Attribute\" to names of custom attribute classes.|  \n|`System.Delegate`|**✓ DO** add the suffix \"EventHandler\" to names of delegates that are used in events.<br /><br /> **✓ DO** add the suffix \"Callback\" to names of delegates other than those used as event handlers.<br /><br /> **X DO NOT** add the suffix \"Delegate\" to a delegate.|  \n|`System.EventArgs`|**✓ DO** add the suffix \"EventArgs.\"|  \n|`System.Enum`|**X DO NOT** derive from this class; use the keyword supported by your language instead; for example, in C#, use the `enum` keyword.<br /><br /> **X DO NOT** add the suffix \"Enum\" or \"Flag.\"|  \n|`System.Exception`|**✓ DO** add the suffix \"Exception.\"|  \n|`IDictionary` <br /> `IDictionary<TKey,TValue>`|**✓ DO** add the suffix \"Dictionary.\" Note that `IDictionary` is a specific type of collection, but this guideline takes precedence over the more general collections guideline that follows.|  \n|`IEnumerable` <br /> `ICollection` <br /> `IList` <br /> `IEnumerable<T>` <br /> `ICollection<T>` <br /> `IList<T>`|**✓ DO** add the suffix \"Collection.\"|  \n|`System.IO.Stream`|**✓ DO** add the suffix \"Stream.\"|  \n|`CodeAccessPermission IPermission`|**✓ DO** add the suffix \"Permission.\"|  \n  \n## Naming Enumerations  \n Names of enumeration types (also called enums) in general should follow the standard type-naming rules (PascalCasing, etc.). However, there are additional guidelines that apply specifically to enums.  \n  \n **✓ DO** use a singular type name for an enumeration unless its values are bit fields.  \n  \n **✓ DO** use a plural type name for an enumeration with bit fields as values, also called flags enum.  \n  \n **X DO NOT** use an \"Enum\" suffix in enum type names.  \n  \n **X DO NOT** use \"Flag\" or \"Flags\" suffixes in enum type names.  \n  \n **X DO NOT** use a prefix on enumeration value names (e.g., \"ad\" for ADO enums, \"rtf\" for rich text enums, etc.).  \n  \n *Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*  \n  \n *Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*  \n  \n## See also\n\n- [Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)\n- [Naming Guidelines](../../../docs/standard/design-guidelines/naming-guidelines.md)\n","nodes":[{"pos":[4,499],"embed":true,"restype":"x-metadata","content":"title: \"Names of Classes, Structs, and Interfaces\"\nms.date: \"10/22/2008\"\nhelpviewer_keywords: \n  - \"type names, guidelines\"\n  - \"classes [.NET Framework], names\"\n  - \"enumerations [.NET Framework], names\"\n  - \"names [.NET Framework], interfaces\"\n  - \"common type names\"\n  - \"names [.NET Framework], type names\"\n  - \"names [.NET Framework], classes\"\n  - \"interfaces [.NET Framework], names\"\n  - \"generic type parameters\"\nms.assetid: 87a4b0da-ed64-43b1-ac43-968576c444ce\nauthor: \"KrzysztofCwalina\"","nodes":[{"content":"Names of Classes, Structs, and Interfaces","nodes":[{"pos":[0,41],"content":"Names of Classes, Structs, and Interfaces","nodes":[{"content":"Names of Classes, Structs, and Interfaces","pos":[0,41]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[506,547],"content":"Names of Classes, Structs, and Interfaces","linkify":"Names of Classes, Structs, and Interfaces","nodes":[{"content":"Names of Classes, Structs, and Interfaces","pos":[0,41]}]},{"content":"The naming guidelines that follow apply to general type naming.","pos":[548,611]},{"pos":[618,699],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name classes and structs with nouns or noun phrases, using PascalCasing.","source":"**✓ DO** name classes and structs with nouns or noun phrases, using PascalCasing."},{"content":"This distinguishes type names from methods, which are named with verb phrases.","pos":[706,784]},{"pos":[791,883],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name interfaces with adjective phrases, or occasionally with nouns or noun phrases.","source":"**✓ DO** name interfaces with adjective phrases, or occasionally with nouns or noun phrases."},{"content":"Nouns and noun phrases should be used rarely and they might indicate that the type should be an abstract class, and not an interface.","pos":[890,1023]},{"pos":[1030,1081],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> give class names a prefix (e.g., \"C\").","source":"**X DO NOT** give class names a prefix (e.g., \"C\")."},{"pos":[1088,1170],"content":"<bpt id=\"p1\">**</bpt>✓ CONSIDER<ept id=\"p1\">**</ept> ending the name of derived classes with the name of the base class.","source":"**✓ CONSIDER** ending the name of derived classes with the name of the base class."},{"content":"This is very readable and explains the relationship clearly.","pos":[1177,1237]},{"content":"Some examples of this in code are: <ph id=\"ph1\">`ArgumentOutOfRangeException`</ph>, which is a kind of <ph id=\"ph2\">`Exception`</ph>, and <ph id=\"ph3\">`SerializableAttribute`</ph>, which is a kind of <ph id=\"ph4\">`Attribute`</ph>.","pos":[1238,1396],"source":" Some examples of this in code are: `ArgumentOutOfRangeException`, which is a kind of `Exception`, and `SerializableAttribute`, which is a kind of `Attribute`."},{"content":"However, it is important to use reasonable judgment in applying this guideline; for example, the <ph id=\"ph1\">`Button`</ph> class is a kind of <ph id=\"ph2\">`Control`</ph> event, although <ph id=\"ph3\">`Control`</ph> doesn’t appear in its name.","pos":[1397,1585],"source":" However, it is important to use reasonable judgment in applying this guideline; for example, the `Button` class is a kind of `Control` event, although `Control` doesn’t appear in its name."},{"pos":[1592,1685],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> prefix interface names with the letter I, to indicate that the type is an interface.","source":"**✓ DO** prefix interface names with the letter I, to indicate that the type is an interface."},{"content":"For example, <ph id=\"ph1\">`IComponent`</ph> (descriptive noun), <ph id=\"ph2\">`ICustomAttributeProvider`</ph> (noun phrase), and <ph id=\"ph3\">`IPersistable`</ph> (adjective) are appropriate interface names.","pos":[1692,1843],"source":"For example, `IComponent` (descriptive noun), `ICustomAttributeProvider` (noun phrase), and `IPersistable` (adjective) are appropriate interface names."},{"content":"As with other type names, avoid abbreviations.","pos":[1844,1890]},{"pos":[1897,2087],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> ensure that the names differ only by the \"I\" prefix on the interface name when you are defining a class–interface pair where the class is a standard implementation of the interface.","source":"**✓ DO** ensure that the names differ only by the \"I\" prefix on the interface name when you are defining a class–interface pair where the class is a standard implementation of the interface."},{"pos":[2096,2128],"content":"Names of Generic Type Parameters","linkify":"Names of Generic Type Parameters","nodes":[{"content":"Names of Generic Type Parameters","pos":[0,32]}]},{"content":"Generics were added to .NET Framework 2.0.","pos":[2132,2174]},{"content":"The feature introduced a new kind of identifier called <bpt id=\"p1\">*</bpt>type parameter<ept id=\"p1\">*</ept>.","pos":[2175,2247],"source":" The feature introduced a new kind of identifier called *type parameter*."},{"pos":[2254,2417],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> name generic type parameters with descriptive names unless a single-letter name is completely self-explanatory and a descriptive name would not add value.","source":"**✓ DO** name generic type parameters with descriptive names unless a single-letter name is completely self-explanatory and a descriptive name would not add value."},{"pos":[2424,2524],"content":"<bpt id=\"p1\">**</bpt>✓ CONSIDER<ept id=\"p1\">**</ept> using <ph id=\"ph1\">`T`</ph> as the type parameter name for types with one single-letter type parameter.","source":"**✓ CONSIDER** using `T` as the type parameter name for types with one single-letter type parameter."},{"pos":[2676,2734],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> prefix descriptive type parameter names with <ph id=\"ph1\">`T`</ph>.","source":"**✓ DO** prefix descriptive type parameter names with `T`."},{"pos":[2865,2959],"content":"<bpt id=\"p1\">**</bpt>✓ CONSIDER<ept id=\"p1\">**</ept> indicating constraints placed on a type parameter in the name of the parameter.","source":"**✓ CONSIDER** indicating constraints placed on a type parameter in the name of the parameter."},{"pos":[2966,3044],"content":"For example, a parameter constrained to <ph id=\"ph1\">`ISession`</ph> might be called <ph id=\"ph2\">`TSession`</ph>.","source":"For example, a parameter constrained to `ISession` might be called `TSession`."},{"pos":[3053,3074],"content":"Names of Common Types","linkify":"Names of Common Types","nodes":[{"content":"Names of Common Types","pos":[0,21]}]},{"pos":[3078,3218],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> follow the guidelines described in the following table when naming types derived from or implementing certain .NET Framework types.","source":"**✓ DO** follow the guidelines described in the following table when naming types derived from or implementing certain .NET Framework types."},{"content":"Base Type","pos":[3225,3234]},{"content":"Derived/Implementing Type Guideline","pos":[3235,3270]},{"pos":[3357,3430],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> add the suffix \"Attribute\" to names of custom attribute classes.","source":"**✓ DO** add the suffix \"Attribute\" to names of custom attribute classes."},{"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> add the suffix \"EventHandler\" to names of delegates that are used in events.","pos":[3453,3538],"source":"**✓ DO** add the suffix \"EventHandler\" to names of delegates that are used in events."},{"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> add the suffix \"Callback\" to names of delegates other than those used as event handlers.","pos":[3551,3648],"source":"**✓ DO** add the suffix \"Callback\" to names of delegates other than those used as event handlers."},{"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> add the suffix \"Delegate\" to a delegate.","pos":[3661,3714],"source":"**X DO NOT** add the suffix \"Delegate\" to a delegate."},{"pos":[3738,3774],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> add the suffix \"EventArgs.\"","source":"**✓ DO** add the suffix \"EventArgs.\""},{"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> derive from this class; use the keyword supported by your language instead; for example, in C#, use the <ph id=\"ph1\">`enum`</ph> keyword.","pos":[3793,3925],"source":"**X DO NOT** derive from this class; use the keyword supported by your language instead; for example, in C#, use the `enum` keyword."},{"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> add the suffix \"Enum\" or \"Flag.\"","pos":[3938,3983],"source":"**X DO NOT** add the suffix \"Enum\" or \"Flag.\""},{"pos":[4007,4043],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> add the suffix \"Exception.\"","source":"**✓ DO** add the suffix \"Exception.\""},{"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> add the suffix \"Dictionary.\"","pos":[4096,4133],"source":"**✓ DO** add the suffix \"Dictionary.\""},{"content":"Note that <ph id=\"ph1\">`IDictionary`</ph> is a specific type of collection, but this guideline takes precedence over the more general collections guideline that follows.","pos":[4134,4285],"source":" Note that `IDictionary` is a specific type of collection, but this guideline takes precedence over the more general collections guideline that follows."},{"pos":[4406,4443],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> add the suffix \"Collection.\"","source":"**✓ DO** add the suffix \"Collection.\""},{"pos":[4467,4500],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> add the suffix \"Stream.\"","source":"**✓ DO** add the suffix \"Stream.\""},{"pos":[4540,4577],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> add the suffix \"Permission.\"","source":"**✓ DO** add the suffix \"Permission.\""},{"pos":[4587,4606],"content":"Naming Enumerations","linkify":"Naming Enumerations","nodes":[{"content":"Naming Enumerations","pos":[0,19]}]},{"content":"Names of enumeration types (also called enums) in general should follow the standard type-naming rules (PascalCasing, etc.).","pos":[4610,4734]},{"content":"However, there are additional guidelines that apply specifically to enums.","pos":[4735,4809]},{"pos":[4816,4902],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use a singular type name for an enumeration unless its values are bit fields.","source":"**✓ DO** use a singular type name for an enumeration unless its values are bit fields."},{"pos":[4909,5010],"content":"<bpt id=\"p1\">**</bpt>✓ DO<ept id=\"p1\">**</ept> use a plural type name for an enumeration with bit fields as values, also called flags enum.","source":"**✓ DO** use a plural type name for an enumeration with bit fields as values, also called flags enum."},{"pos":[5017,5070],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> use an \"Enum\" suffix in enum type names.","source":"**X DO NOT** use an \"Enum\" suffix in enum type names."},{"pos":[5077,5140],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> use \"Flag\" or \"Flags\" suffixes in enum type names.","source":"**X DO NOT** use \"Flag\" or \"Flags\" suffixes in enum type names."},{"pos":[5147,5260],"content":"<bpt id=\"p1\">**</bpt>X DO NOT<ept id=\"p1\">**</ept> use a prefix on enumeration value names (e.g., \"ad\" for ADO enums, \"rtf\" for rich text enums, etc.).","source":"**X DO NOT** use a prefix on enumeration value names (e.g., \"ad\" for ADO enums, \"rtf\" for rich text enums, etc.)."},{"pos":[5267,5334],"content":"<bpt id=\"p1\">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id=\"p1\">*</ept>","source":"*Portions © 2005, 2009 Microsoft Corporation. All rights reserved.*"},{"pos":[5341,5746],"content":"<bpt id=\"p1\">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id=\"p2\">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id=\"p2\">](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id=\"p1\">*</ept>","source":"*Reprinted by permission of Pearson Education, Inc. from [Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition](https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619) by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.*"},{"pos":[5755,5763],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5767,5847],"content":"<bpt id=\"p1\">[</bpt>Framework Design Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/index.md)</ept>","source":"[Framework Design Guidelines](../../../docs/standard/design-guidelines/index.md)"},{"pos":[5850,5932],"content":"<bpt id=\"p1\">[</bpt>Naming Guidelines<ept id=\"p1\">](../../../docs/standard/design-guidelines/naming-guidelines.md)</ept>","source":"[Naming Guidelines](../../../docs/standard/design-guidelines/naming-guidelines.md)"}]}