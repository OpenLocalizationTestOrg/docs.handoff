<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-querying-across-relationships-csharp.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">890958ae1a44bb171a0da94d314dcf8d79a311da</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\walkthrough-querying-across-relationships-csharp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">494c21acab21528e05ae0efd6eea263a1486c159</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec4880a9a76be377e1880c5fff5f4d5261354a9c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Querying Across Relationships (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Querying Across Relationships (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This walkthrough demonstrates the use of <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> <bpt id="p1">*</bpt>associations<ept id="p1">*</ept> to represent foreign-key relationships in the database.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This walkthrough was written by using Visual C# Development Settings.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You must have completed <bpt id="p1">[</bpt>Walkthrough: Simple Object Model and Query (C#)<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-simple-object-model-and-query-csharp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This walkthrough builds on that one, including the presence of the northwnd.mdf file in c:\linqtest5.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This walkthrough consists of three main tasks:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Adding an entity class to represent the Orders table in the sample Northwind database.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Supplementing annotations to the <ph id="ph1">`Customer`</ph> class to enhance the relationship between the <ph id="ph2">`Customer`</ph> and <ph id="ph3">`Order`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creating and running a query to test obtaining <ph id="ph1">`Order`</ph> information by using the <ph id="ph2">`Customer`</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Mapping Relationships Across Tables</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`Customer`</ph> class definition, create the <ph id="ph2">`Order`</ph> entity class definition that includes the following code, which indicates that <ph id="ph3">`Order.Customer`</ph> relates as a foreign key to <ph id="ph4">`Customer.CustomerID`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To add the Order entity class</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Type or paste the following code after the <ph id="ph1">`Customer`</ph> class:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Annotating the Customer Class</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this step, you annotate the <ph id="ph1">`Customer`</ph> class to indicate its relationship to the <ph id="ph2">`Order`</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>(This addition is not strictly necessary, because defining the relationship in either direction is sufficient to create the link.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>But adding this annotation does enable you to easily navigate objects in either direction.)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To annotate the Customer class</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Type or paste the following code into the <ph id="ph1">`Customer`</ph> class:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creating and Running a Query Across the Customer-Order Relationship</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can now access <ph id="ph1">`Order`</ph> objects directly from the <ph id="ph2">`Customer`</ph> objects, or in the opposite order.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You do not need an explicit <bpt id="p1">*</bpt>join<ept id="p1">*</ept> between customers and orders.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To access Order objects by using Customer objects</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`Main`</ph> method by typing or pasting the following code into the method:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Press F5 to debug your application.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can eliminate the SQL code in the Console window by commenting out <ph id="ph1">`db.Log = Console.Out;`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Press Enter in the Console window to stop debugging.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Creating a Strongly Typed View of Your Database</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It is much easier to start with a strongly typed view of your database.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>By strongly typing the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> object, you do not need calls to <ph id="ph2">&lt;xref:System.Data.Linq.DataContext.GetTable%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can use strongly typed tables in all your queries when you use the strongly typed <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the following steps, you will create <ph id="ph1">`Customers`</ph> as a strongly typed table that maps to the Customers table in the database.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To strongly type the DataContext object</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Add the following code above the <ph id="ph1">`Customer`</ph> class declaration.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`Main`</ph> method to use the strongly typed <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> as follows:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Press F5 to debug your application.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The Console window output is:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Press Enter in the console window to stop debugging.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The next walkthrough (<bpt id="p1">[</bpt>Walkthrough: Manipulating Data (C#)<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/walkthrough-manipulating-data-csharp.md)</ept>) demonstrates how to manipulate data.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>That walkthrough does not require that you save the two walkthroughs in this series that you have already completed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Learning by Walkthroughs<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/learning-by-walkthroughs.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>