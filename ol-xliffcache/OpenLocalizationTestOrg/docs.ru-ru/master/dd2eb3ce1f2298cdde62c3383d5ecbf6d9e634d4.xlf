<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd2eb3ce1f2298cdde62c3383d5ecbf6d9e634d4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\trees-in-wpf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b2bdf53414f7a47bf5afbc5b7696ba2364bde31</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">976c408a04b50af7debfca647eb762ac3fca7ea4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Trees in WPF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Trees in WPF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In many technologies, elements and components are organized in a tree structure where developers directly manipulate the object nodes in the tree to affect the rendering or behavior of an application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> also uses several tree structure metaphors to define relationships between program elements.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the most part WPF developers can create an application in code or define portions of the application in XAML while thinking conceptually about the object tree metaphor, but will be calling specific API or using specific markup to do so rather than some general object tree manipulation API such as you might use in XML DOM.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>WPF exposes two helper classes that provide a tree metaphor view, <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The terms visual tree and logical tree are also used in the WPF documentation because these same trees are useful for understanding the behavior of certain key WPF features.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic defines what the visual tree and logical tree represent, discusses how such trees relate to an overall object tree concept, and introduces <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>s</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Trees in WPF</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The most complete tree structure in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> is the object tree.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you define an application page in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> and then load the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, the tree structure is created based on the nesting relationships of the elements in the markup.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you define an application or a portion of the application in code, then the tree structure is created based on how you assign property values for properties that implement the content model for a given object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>, there are two ways that the complete object tree is conceptualized and can be reported to its public API: as the logical tree and as the visual tree.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The distinctions between logical tree and visual tree are not always necessarily important, but they can occasionally cause issues with certain <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> subsystems and affect choices you make in markup or code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Even though you do not always manipulate either the logical tree or the visual tree directly, understanding the concepts of how the trees interact is useful for understanding WPF as a technology.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Thinking of WPF as a tree metaphor of some kind is also crucial to understanding how property inheritance and event routing work in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because the object tree is more of a concept than an actual API, another way to think of the concept is as an object graph.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In practice, there are relationships between objects at run time where the tree metaphor will break down.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Nevertheless, particularly with XAML-defined UI, the tree metaphor is relevant enough that most WPF documentation will use the term object tree when referencing this general concept.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Logical Tree</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, you add content to UI elements by setting properties of the objects that back those elements.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, you add items to a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> control by manipulating its <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By doing this, you are placing items into the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemCollection&gt;</ph> that is the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Similarly, to add objects to a <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>, you manipulate its <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here, you are adding objects to the <ph id="ph1">&lt;xref:System.Windows.Controls.UIElementCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For a code example, see <bpt id="p1">[</bpt>Add an Element Dynamically<ept id="p1">](http://msdn.microsoft.com/en-us/d00f258a-7973-4de7-bc54-a3fc1f638419)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph>, when you place list items in a <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> or controls or other UI elements in a <ph id="ph3">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>, you also use the <ph id="ph4">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> properties, either explicitly or implicitly, as in the following example.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>TreeOvwsSupport#AllCode<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/TreeOvwsSupport/CS/page1.xaml#allcode)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you were to process this XAML as XML under a document object model, and if you had included the tags commented out as implicit (which would have been legal), then the resulting XML DOM tree would have included elements for <ph id="ph1">`&lt;ListBox.Items&gt;`</ph> and the other implicit items.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>But XAML does not process that way when you read the markup and write to objects, the resulting object graph does not literally include <ph id="ph1">`ListBox.Items`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It does however have a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> property named <ph id="ph2">`Items`</ph> that contains a <ph id="ph3">&lt;xref:System.Windows.Controls.ItemCollection&gt;</ph>, and that <ph id="ph4">&lt;xref:System.Windows.Controls.ItemCollection&gt;</ph> is initialized but empty when the <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> XAML is processed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Then, each child object element that exists as content for the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> is added to the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemCollection&gt;</ph> by parser calls to <ph id="ph3">`ItemCollection.Add`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This example of processing XAML into an object tree is so far seemingly an example where the created object tree is basically the logical tree.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, the logical tree is not the entire object graph that exists for your application UI at run time, even with the XAML implicit syntax items factored out.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The main reason for this is visuals and templates.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, consider the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The logical tree reports the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> object and also its string <ph id="ph2">`Content`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>But there is more to this button in the run-time object tree.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In particular, the button only appears on screen the way it does because a specific <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> control template was applied.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The visuals that come from an applied template (such as the template-defined <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> of dark gray around the visual button) are not reported in the logical tree, even if you are looking at the logical tree during run time (such as handling an input event from the visible UI and then reading the logical tree).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To find the template visuals, you would instead need to examine the visual tree.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about how <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> syntax maps to the created object graph, and implicit syntax in XAML, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept> or <bpt id="p2">[</bpt>XAML Overview (WPF)<ept id="p2">](../../../../docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The Purpose of the Logical Tree</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The logical tree exists so that content models can readily iterate over their possible child objects, and so that content models can be extensible.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Also, the logical tree provides a framework for certain notifications, such as when all objects in the logical tree are loaded.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Basically, the logical tree is an approximation of a run time object graph at the framework level, which excludes visuals, but is adequate for many querying operations against your own run time application's composition.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In addition, both static and dynamic resource references are resolved by looking upwards through the logical tree for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> collections on the initial requesting object, and then continuing up the logical tree and checking each <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> (or <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>) for another <ph id="ph4">`Resources`</ph> value that contains a <ph id="ph5">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, possibly containing that key.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The logical tree is used for resource lookup when both the logical tree and the visual tree are present.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information on resource dictionaries and lookup, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Composition of the Logical Tree</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The logical tree is defined at the WPF framework-level, which means that the WPF base element that is most relevant for logical tree operations is either <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, as you can see if you actually use the <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> API, the logical tree sometimes contains nodes that are not either <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For instance, the logical tree reports the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock.Text%2A&gt;</ph> value of a <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, which is a string.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Overriding the Logical Tree</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Advanced control authors can override the logical tree by overriding several <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> that define how a general object or content model adds or removes objects within the logical tree.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For an example of how to override the logical tree, see <bpt id="p1">[</bpt>Override the Logical Tree<ept id="p1">](../../../../docs/framework/wpf/advanced/how-to-override-the-logical-tree.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Property Value Inheritance</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Property value inheritance operates through a hybrid tree.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The actual metadata that contains the <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> property that enables property inheritance is the WPF framework-level <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Therefore, both the parent that holds the original value and the child object that inherits that value must both be <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>, and they must both be part of some logical tree.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>However, for existing WPF properties that support property inheritance, property value inheritance is able to perpetuate through an intervening object that is not in the logical tree.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Mainly this is relevant for having template elements use any inherited property values set either on the instance that is templated, or at still higher levels of page-level composition and therefore higher in the logical tree.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In order for property value inheritance to work consistently across such a boundary, the inheriting property must be registered as an attached property, and you should follow this pattern if you intend to define a custom dependency property with property inheritance behavior.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The exact tree used for property inheritance cannot be entirely anticipated by a helper class utility method, even at run time.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Property Value Inheritance<ept id="p1">](../../../../docs/framework/wpf/advanced/property-value-inheritance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The Visual Tree</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In addition to the concept of the logical tree, there is also the concept of the visual tree in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The visual tree describes the structure of visual objects, as represented by the <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> base class.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When you write a template for a control, you are defining or redefining the visual tree that applies for that control.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The visual tree is also of interest to developers who want lower-level control over drawing for performance and optimization reasons.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>One exposure of the visual tree as part of conventional <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application programming is that event routes for a routed event mostly travel along the visual tree, not the logical tree.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This subtlety of routed event behavior might not be immediately apparent unless you are a control author.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Routing events through the visual tree enables controls that implement composition at the visual level to handle events or create event setters.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Trees, Content Elements, and Content Hosts</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Content elements (classes that derive from <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) are not part of the visual tree; they do not inherit from <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph> and do not have a visual representation.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In order to appear in a UI at all, a <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> must be hosted in a content host that is both a <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph> and a logical tree participant.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Usually such an object is a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can conceptualize that the content host is somewhat like a "browser" for the content and chooses how to display that content within the screen region that the host controls.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When the content is hosted, the content can be made a participant in certain tree processes that are normally associated with the visual tree.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Generally, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> host class includes implementation code that adds any hosted <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> to the event route through subnodes of the content logical tree, even though the hosted content is not part of the true visual tree.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This is necessary so that a <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> can source a routed event that routes to any element other than itself.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Tree Traversal</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> class provides the <ph id="ph2">&lt;xref:System.Windows.LogicalTreeHelper.GetChildren%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.LogicalTreeHelper.GetParent%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> methods for logical tree traversal.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In most cases, you should not have to traverse the logical tree of existing controls, because these controls almost always expose their logical child elements as a dedicated collection property that supports collection access such as <ph id="ph1">`Add`</ph>, an indexer, and so on.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Tree traversal is mainly a scenario that is used by control authors who choose not to derive from intended control patterns such as <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph> where collection properties are already defined, and who intend to provide their own collection property support.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The visual tree also supports a helper class for visual tree traversal, <ph id="ph1">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The visual tree is not exposed as conveniently through control-specific properties, so the <ph id="ph1">&lt;xref:System.Windows.Media.VisualTreeHelper&gt;</ph> class is the recommended way to traverse the visual tree if that is necessary for your programming scenario.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WPF Graphics Rendering Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/wpf-graphics-rendering-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Sometimes it is necessary to examine the visual tree of an applied template.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You should be careful when using this technique.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Even if you are traversing a visual tree for a control where you define the template, consumers of your control can always change the template by setting the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Template%2A&gt;</ph> property on instances, and even the end user can influence the applied template by changing the system theme.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Routes for Routed Events as a "Tree"</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>As mentioned before, the route of any given routed event travels along a single and predetermined path of a tree that is a hybrid of the visual and logical tree representations.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The event route can travel either in the up or down directions within the tree depending on whether it is a tunneling or bubbling routed event.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The event route concept does not have a directly supporting helper class that could be used to "walk" the event route independently of raising an event that actually routes.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>There is a class that represents the route, <ph id="ph1">&lt;xref:System.Windows.EventRoute&gt;</ph>, but the methods of that class are generally for internal use only.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Resource Dictionaries and Trees</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Resource dictionary lookup for all <ph id="ph1">`Resources`</ph> defined in a page traverses basically the logical tree.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Objects that are not in the logical tree can reference keyed resources, but the resource lookup sequence begins at the point where that object is connected to the logical tree.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In WPF, only logical tree nodes can have a <ph id="ph1">`Resources`</ph> property that contains a <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, therefore there is no benefit in traversing the visual tree looking for keyed resources from a <ph id="ph3">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>However, resource lookup can also extend beyond the immediate logical tree.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For application markup, the resource lookup can then continue onward to application-level resource dictionaries and then to theme support and system values that are referenced as static properties or keys.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Themes themselves can also reference system values outside of the theme logical tree if the resource references are dynamic.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For more information on resource dictionaries and the lookup logic, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Input Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/input-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Graphics Rendering Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/wpf-graphics-rendering-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/routed-events-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Initialization for Object Elements Not in an Object Tree<ept id="p1">](../../../../docs/framework/wpf/advanced/initialization-for-object-elements-not-in-an-object-tree.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Architecture<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-architecture.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>