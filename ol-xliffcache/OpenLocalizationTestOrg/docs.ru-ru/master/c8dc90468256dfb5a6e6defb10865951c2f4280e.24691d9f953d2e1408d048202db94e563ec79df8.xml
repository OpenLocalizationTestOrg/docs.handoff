{"content":"---\ntitle: \"Compiler Error CS0311\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0311\"\nhelpviewer_keywords: \n  - \"CS0311\"\nms.assetid: d095f0fa-efd7-491c-a80b-4c5704a90de7\n---\n# Compiler Error CS0311\n\nThe type 'type1' cannot be used as type parameter 'T' in the generic type or method '\\<name>'. There is no implicit reference conversion from 'type1' to 'type2'.  \n  \n When a constraint is applied to a generic type parameter, an implicit identity or reference conversion must exist from the concrete argument to the type of the constraint.  \n  \n## To correct this error  \n  \n1.  Change the argument you are using to create the class.  \n  \n2.  If you own the class, you can remove the constraint or else do something to enable an implicit reference or identity conversion. For example, you can make the second type inherit from the first.  \n  \n## Example  \n  \n```csharp  \n// cs0311.cs  \nclass B {}  \nclass C {}  \nclass Test<T> where T : C  \n{ }  \n  \nclass Program  \n{  \n    static void Main()  \n    {  \n        Test<B> test = new Test<B>(); //CS0311  \n    }  \n}  \n```  \n  \n If this error occurs when trying to use a value-type argument, notice that an implicit numeric conversion, for example from `short` to `int`, does not satisfy a generic type parameter.  \n  \n## See also\n\n- [Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)\n","nodes":[{"pos":[4,165],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Error CS0311\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS0311\"\nhelpviewer_keywords: \n  - \"CS0311\"\nms.assetid: d095f0fa-efd7-491c-a80b-4c5704a90de7","nodes":[{"content":"Compiler Error CS0311","nodes":[{"pos":[0,21],"content":"Compiler Error CS0311","nodes":[{"content":"Compiler Error CS0311","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[172,193],"content":"Compiler Error CS0311","linkify":"Compiler Error CS0311","nodes":[{"content":"Compiler Error CS0311","pos":[0,21]}]},{"content":"The type 'type1' cannot be used as type parameter 'T' in the generic type or method '<ph id=\"ph1\">\\&lt;</ph>name&gt;'.","pos":[195,289],"source":"The type 'type1' cannot be used as type parameter 'T' in the generic type or method '\\<name>'."},{"content":"There is no implicit reference conversion from 'type1' to 'type2'.","pos":[290,356]},{"content":"When a constraint is applied to a generic type parameter, an implicit identity or reference conversion must exist from the concrete argument to the type of the constraint.","pos":[363,534]},{"pos":[543,564],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Change the argument you are using to create the class.","pos":[574,628]},{"content":"If you own the class, you can remove the constraint or else do something to enable an implicit reference or identity conversion.","pos":[638,766]},{"content":"For example, you can make the second type inherit from the first.","pos":[767,832]},{"pos":[841,848],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1068,1252],"content":"If this error occurs when trying to use a value-type argument, notice that an implicit numeric conversion, for example from <ph id=\"ph1\">`short`</ph> to <ph id=\"ph2\">`int`</ph>, does not satisfy a generic type parameter.","source":"If this error occurs when trying to use a value-type argument, notice that an implicit numeric conversion, for example from `short` to `int`, does not satisfy a generic type parameter."},{"pos":[1261,1269],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1273,1383],"content":"<bpt id=\"p1\">[</bpt>Constraints on Type Parameters<ept id=\"p1\">](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)</ept>","source":"[Constraints on Type Parameters](../../../csharp/programming-guide/generics/constraints-on-type-parameters.md)"}]}