{"content":"---\ntitle: \"Serialization2 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: a15ae411-8dc2-4ca3-84d2-01c9d5f1972a\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Serialization\nThis topic describes [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] serialization capabilities. The paragraphs that follow provide information about how to add serialization during code generation at design time and the run-time serialization behavior of [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] classes.  \n  \n You can add serialization code at design time by either of the following methods:  \n  \n-   In the [!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)], change the **Serialization Mode** property to **Unidirectional**.  \n  \n-   On the SQLMetal command line, add the **/serialization** option. For more information, see [SqlMetal.exe (Code Generation Tool)](../../../../../../docs/framework/tools/sqlmetal-exe-code-generation-tool.md).  \n  \n## Overview  \n The code generated by [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] provides deferred loading capabilities by default. Deferred loading is very convenient on the mid-tier for transparent loading of data on demand. However, it is problematic for serialization, because the serializer triggers deferred loading whether deferred loading is intended or not. In effect, when an object is serialized, its transitive closure under all outbound defer-loaded references is serialized.  \n  \n The [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] serialization feature addresses this problem, primarily through two mechanisms:  \n  \n-   A <xref:System.Data.Linq.DataContext> mode for turning off deferred loading (<xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A>). For more information, see <xref:System.Data.Linq.DataContext>.  \n  \n-   A code-generation switch to generate <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=fullName> and <xref:System.Runtime.Serialization.DataMemberAttribute?displayProperty=fullName> attributes on generated entities. This aspect, including the behavior of defer-loading classes under serialization, is the major subject of this topic.  \n  \n### Definitions  \n  \n-   *DataContract serializer*: Default serializer used by the Windows Communication Framework (WCF) component of the .NET Framework 3.0 or later versions.  \n  \n-   *Unidirectional serialization*: The serialized version of a class that contains only a one-way association property (to avoid a cycle). By convention, the property on the parent side of a primary-foreign key relationship is marked for serialization. The other side in a bidirectional association is not serialized.  \n  \n     Unidirectional serialization is the only type of serialization supported by [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)].  \n  \n## Code Example  \n The following code uses the traditional `Customer` and `Order` classes from the Northwind sample database, and shows how these classes are decorated with serialization attributes.  \n  \n [!code-csharp[DLinqSerialization#1](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqSerialization/cs/northwind-ser.cs#1)]\n [!code-vb[DLinqSerialization#1](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqSerialization/vb/northwind-ser.vb#1)]  \n  \n [!code-csharp[DLinqSerialization#2](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqSerialization/cs/northwind-ser.cs#2)]\n [!code-vb[DLinqSerialization#2](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqSerialization/vb/northwind-ser.vb#2)]  \n  \n [!code-csharp[DLinqSerialization#3](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqSerialization/cs/northwind-ser.cs#3)]\n [!code-vb[DLinqSerialization#3](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqSerialization/vb/northwind-ser.vb#3)]  \n  \n For the `Order` class in the following example, only the reverse association property corresponding to the `Customer` class is shown for brevity. It does not have a `DataMember` attribute to avoid a cycle.  \n  \n [!code-csharp[DLinqSerialization#4](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqSerialization/cs/northwind-ser.cs#4)]\n [!code-vb[DLinqSerialization#4](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqSerialization/vb/northwind-ser.vb#4)]  \n  \n [!code-csharp[DLinqSerialization#5](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqSerialization/cs/northwind-ser.cs#5)]\n [!code-vb[DLinqSerialization#5](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqSerialization/vb/northwind-ser.vb#5)]  \n  \n### How to Serialize the Entities  \n You can serialize the entities in the codes shown in the previous section as follows;  \n  \n [!code-csharp[DLinqSerialization#6](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqSerialization/cs/Program.cs#6)]\n [!code-vb[DLinqSerialization#6](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqSerialization/vb/Module1.vb#6)]  \n  \n### Self-Recursive Relationships  \n Self-recursive relationships follow the same pattern. The association property corresponding to the foreign key does not have a `DataMember` attribute, whereas the parent property does.  \n  \n Consider the following class that has two self-recursive relationships: Employee.Manager/Reports and Employee.Mentor/Mentees.  \n  \n [!code-csharp[DLinqSerialization#7](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqSerialization/cs/northwind-ser.cs#7)]\n [!code-vb[DLinqSerialization#7](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqSerialization/vb/northwind-ser.vb#7)]  \n  \n## See Also  \n [Background Information](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)   \n [SqlMetal.exe (Code Generation Tool)](../../../../../../docs/framework/tools/sqlmetal-exe-code-generation-tool.md)   \n [How to: Make Entities Serializable](../../../../../../docs/framework/data/adonet/sql/linq/how-to-make-entities-serializable.md)","nodes":[{"pos":[4,345],"embed":true,"restype":"x-metadata","content":"title: \"Serialization2 | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: a15ae411-8dc2-4ca3-84d2-01c9d5f1972a\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Serialization2 | Microsoft Docs","nodes":[{"pos":[0,31],"content":"Serialization2 | Microsoft Docs","nodes":[{"content":"Serialization2 | Microsoft Docs","pos":[0,31]}]}],"path":["title"]}],"yml":true},{"pos":[352,365],"content":"Serialization","linkify":"Serialization","nodes":[{"content":"Serialization","pos":[0,13]}]},{"content":"This topic describes <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> serialization capabilities.","pos":[366,482],"source":"This topic describes [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] serialization capabilities."},{"content":"The paragraphs that follow provide information about how to add serialization during code generation at design time and the run-time serialization behavior of <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> classes.","pos":[483,718],"source":" The paragraphs that follow provide information about how to add serialization during code generation at design time and the run-time serialization behavior of [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] classes."},{"content":"You can add serialization code at design time by either of the following methods:","pos":[725,806]},{"pos":[816,973],"content":"In the <ph id=\"ph1\">[!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)]</ph>, change the <bpt id=\"p1\">**</bpt>Serialization Mode<ept id=\"p1\">**</ept> property to <bpt id=\"p2\">**</bpt>Unidirectional<ept id=\"p2\">**</ept>.","source":"In the [!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)], change the **Serialization Mode** property to **Unidirectional**."},{"content":"On the SQLMetal command line, add the <bpt id=\"p1\">**</bpt>/serialization<ept id=\"p1\">**</ept> option.","pos":[983,1047],"source":"On the SQLMetal command line, add the **/serialization** option."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>SqlMetal.exe (Code Generation Tool)<ept id=\"p1\">](../../../../../../docs/framework/tools/sqlmetal-exe-code-generation-tool.md)</ept>.","pos":[1048,1189],"source":" For more information, see [SqlMetal.exe (Code Generation Tool)](../../../../../../docs/framework/tools/sqlmetal-exe-code-generation-tool.md)."},{"pos":[1198,1206],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"content":"The code generated by <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> provides deferred loading capabilities by default.","pos":[1210,1350],"source":"The code generated by [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] provides deferred loading capabilities by default."},{"content":"Deferred loading is very convenient on the mid-tier for transparent loading of data on demand.","pos":[1351,1445]},{"content":"However, it is problematic for serialization, because the serializer triggers deferred loading whether deferred loading is intended or not.","pos":[1446,1585]},{"content":"In effect, when an object is serialized, its transitive closure under all outbound defer-loaded references is serialized.","pos":[1586,1707]},{"pos":[1714,1865],"content":"The <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> serialization feature addresses this problem, primarily through two mechanisms:","source":"The [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] serialization feature addresses this problem, primarily through two mechanisms:"},{"content":"A <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph> mode for turning off deferred loading (<ph id=\"ph2\">&lt;xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A&gt;</ph>).","pos":[1875,2014],"source":"A <xref:System.Data.Linq.DataContext> mode for turning off deferred loading (<xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A>)."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.","pos":[2015,2077],"source":" For more information, see <xref:System.Data.Linq.DataContext>."},{"content":"A code-generation switch to generate <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataMemberAttribute?displayProperty=fullName&gt;</ph> attributes on generated entities.","pos":[2087,2325],"source":"A code-generation switch to generate <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=fullName> and <xref:System.Runtime.Serialization.DataMemberAttribute?displayProperty=fullName> attributes on generated entities."},{"content":"This aspect, including the behavior of defer-loading classes under serialization, is the major subject of this topic.","pos":[2326,2443]},{"pos":[2453,2464],"content":"Definitions","linkify":"Definitions","nodes":[{"content":"Definitions","pos":[0,11]}]},{"pos":[2474,2624],"content":"<bpt id=\"p1\">*</bpt>DataContract serializer<ept id=\"p1\">*</ept>: Default serializer used by the Windows Communication Framework (WCF) component of the .NET Framework 3.0 or later versions.","source":"*DataContract serializer*: Default serializer used by the Windows Communication Framework (WCF) component of the .NET Framework 3.0 or later versions."},{"content":"<bpt id=\"p1\">*</bpt>Unidirectional serialization<ept id=\"p1\">*</ept>: The serialized version of a class that contains only a one-way association property (to avoid a cycle).","pos":[2634,2769],"source":"*Unidirectional serialization*: The serialized version of a class that contains only a one-way association property (to avoid a cycle)."},{"content":"By convention, the property on the parent side of a primary-foreign key relationship is marked for serialization.","pos":[2770,2883]},{"content":"The other side in a bidirectional association is not serialized.","pos":[2884,2948]},{"pos":[2959,3103],"content":"Unidirectional serialization is the only type of serialization supported by <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>.","source":"Unidirectional serialization is the only type of serialization supported by [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]."},{"pos":[3112,3124],"content":"Code Example","linkify":"Code Example","nodes":[{"content":"Code Example","pos":[0,12]}]},{"pos":[3128,3307],"content":"The following code uses the traditional <ph id=\"ph1\">`Customer`</ph> and <ph id=\"ph2\">`Order`</ph> classes from the Northwind sample database, and shows how these classes are decorated with serialization attributes.","source":"The following code uses the traditional `Customer` and `Order` classes from the Northwind sample database, and shows how these classes are decorated with serialization attributes."},{"content":"For the <ph id=\"ph1\">`Order`</ph> class in the following example, only the reverse association property corresponding to the <ph id=\"ph2\">`Customer`</ph> class is shown for brevity.","pos":[4166,4311],"source":"For the `Order` class in the following example, only the reverse association property corresponding to the `Customer` class is shown for brevity."},{"content":"It does not have a <ph id=\"ph1\">`DataMember`</ph> attribute to avoid a cycle.","pos":[4312,4371],"source":" It does not have a `DataMember` attribute to avoid a cycle."},{"pos":[4949,4978],"content":"How to Serialize the Entities","linkify":"How to Serialize the Entities","nodes":[{"content":"How to Serialize the Entities","pos":[0,29]}]},{"content":"You can serialize the entities in the codes shown in the previous section as follows;","pos":[4982,5067]},{"pos":[5349,5377],"content":"Self-Recursive Relationships","linkify":"Self-Recursive Relationships","nodes":[{"content":"Self-Recursive Relationships","pos":[0,28]}]},{"content":"Self-recursive relationships follow the same pattern.","pos":[5381,5434]},{"content":"The association property corresponding to the foreign key does not have a <ph id=\"ph1\">`DataMember`</ph> attribute, whereas the parent property does.","pos":[5435,5566],"source":" The association property corresponding to the foreign key does not have a `DataMember` attribute, whereas the parent property does."},{"content":"Consider the following class that has two self-recursive relationships: Employee.Manager/Reports and Employee.Mentor/Mentees.","pos":[5573,5698]},{"pos":[5991,5999],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Background Information<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)</ept><ph id=\"ph1\"> </ph>","pos":[6003,6109],"source":"[Background Information](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md) "},{"content":"<bpt id=\"p1\">[</bpt>SqlMetal.exe (Code Generation Tool)<ept id=\"p1\">](../../../../../../docs/framework/tools/sqlmetal-exe-code-generation-tool.md)</ept><ph id=\"ph1\"> </ph>","pos":[6113,6228],"source":"[SqlMetal.exe (Code Generation Tool)](../../../../../../docs/framework/tools/sqlmetal-exe-code-generation-tool.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Make Entities Serializable<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/how-to-make-entities-serializable.md)</ept>","pos":[6232,6360],"source":"[How to: Make Entities Serializable](../../../../../../docs/framework/data/adonet/sql/linq/how-to-make-entities-serializable.md)"}]}