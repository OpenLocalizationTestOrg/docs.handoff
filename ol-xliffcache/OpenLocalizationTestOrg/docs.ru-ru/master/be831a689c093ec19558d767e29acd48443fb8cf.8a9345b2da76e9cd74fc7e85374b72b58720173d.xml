{"content":"---\ntitle: \"Option Strict On disallows implicit conversions from '<type1>' to '<type2>'\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc30512\"\n  - \"vbc30512\"\nhelpviewer_keywords: \n  - \"BC30512\"\nms.assetid: b9756d48-05fa-4027-8a80-b4a0ef92099d\n---\n# Option Strict On disallows implicit conversions from '\\<type1>' to '\\<type2>'\nYou have tried to convert a type to another type that may not be able to contain the value, such as a `Long` to an `Integer`, while the type checking switch ([Option Strict Statement](../../visual-basic/language-reference/statements/option-strict-statement.md)) is set to `On`.  \n  \n This type of conversion is called a *narrowing conversion*, and it is possible for it to fail at run time. For this reason, `Option Strict On` disallows implicit narrowing conversions.  \n  \n **Error ID:** BC30512  \n  \n## To correct this error  \n  \n1.  Determine whether a conversion of any type exists from `<type1>` to `<type2>`. If both are Visual Basic elementary types, or if both are instances of classes, you can usually make this determination by consulting the table in [Widening and Narrowing Conversions](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md).  \n  \n2.  If only a narrowing conversion exists from `<type1>` to `<type2>`, you should use explicit casting. The [CType Function](../../visual-basic/language-reference/functions/ctype-function.md) and [DirectCast Operator](../../visual-basic/language-reference/operators/directcast-operator.md) keywords throw a run-time exception if the conversion fails. The [TryCast Operator](../../visual-basic/language-reference/operators/trycast-operator.md) keyword applies only to reference types and returns [Nothing](../../visual-basic/language-reference/nothing.md) if the conversion fails.  \n  \n3.  If a narrowing conversion exists and your program can tolerate a run-time failure, or you are confident that a run-time failure is not possible, you can specify `Option Strict Off` at the beginning of your source code. But you should still enclose the conversion in a [Try...Catch...Finally Statement](../../visual-basic/language-reference/statements/try-catch-finally-statement.md) block to avoid unexpected results or early termination of your program.  \n  \n4.  If no conversion exists from `<type1>` to `<type2>`, you must re-evaluate your program logic. You might be able to write code that can assign values to `<type2>` corresponding to anticipated values of `<type1>`.  \n  \n5.  If no conversion exists from `<type1>` to `<type2>` and one of the types is a class or structure you have defined, you might be able to define a conversion operator from that type to or from the other type. For more information, see [How to: Define a Conversion Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md).  \n  \n6.  In all cases and as a general guideline, you should avoid using narrowing conversions unless you can trap failures in a `Catch` block and deal with them effectively.  \n  \n## See also\n\n- [Option Strict Statement](../../visual-basic/language-reference/statements/option-strict-statement.md)\n- [Widening and Narrowing Conversions](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)\n- [CType Function](../../visual-basic/language-reference/functions/ctype-function.md)\n- [DirectCast Operator](../../visual-basic/language-reference/operators/directcast-operator.md)\n- [TryCast Operator](../../visual-basic/language-reference/operators/trycast-operator.md)\n- [Nothing](../../visual-basic/language-reference/nothing.md)\n- [Try...Catch...Finally Statement](../../visual-basic/language-reference/statements/try-catch-finally-statement.md)\n- [How to: Define a Conversion Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)\n","nodes":[{"pos":[4,236],"embed":true,"restype":"x-metadata","content":"title: \"Option Strict On disallows implicit conversions from '<type1>' to '<type2>'\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc30512\"\n  - \"vbc30512\"\nhelpviewer_keywords: \n  - \"BC30512\"\nms.assetid: b9756d48-05fa-4027-8a80-b4a0ef92099d","nodes":[{"content":"Option Strict On disallows implicit conversions from '<type1>' to '<type2>'","nodes":[{"pos":[0,75],"content":"Option Strict On disallows implicit conversions from '<ph id=\"ph1\">&lt;type1&gt;</ph>' to '<ph id=\"ph2\">&lt;type2&gt;</ph>'","source":"Option Strict On disallows implicit conversions from '<type1>' to '<type2>'"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[243,320],"content":"Option Strict On disallows implicit conversions from '\\<type1>' to '\\<type2>'","linkify":"Option Strict On disallows implicit conversions from '\\<type1>' to '\\<type2>'","nodes":[{"content":"Option Strict On disallows implicit conversions from '<ph id=\"ph1\">\\&lt;</ph>type1&gt;' to '<ph id=\"ph2\">\\&lt;</ph>type2&gt;'","pos":[0,77],"source":"Option Strict On disallows implicit conversions from '\\<type1>' to '\\<type2>'"}]},{"pos":[321,598],"content":"You have tried to convert a type to another type that may not be able to contain the value, such as a <ph id=\"ph1\">`Long`</ph> to an <ph id=\"ph2\">`Integer`</ph>, while the type checking switch (<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>) is set to <ph id=\"ph3\">`On`</ph>.","source":"You have tried to convert a type to another type that may not be able to contain the value, such as a `Long` to an `Integer`, while the type checking switch ([Option Strict Statement](../../visual-basic/language-reference/statements/option-strict-statement.md)) is set to `On`."},{"content":"This type of conversion is called a <bpt id=\"p1\">*</bpt>narrowing conversion<ept id=\"p1\">*</ept>, and it is possible for it to fail at run time.","pos":[605,711],"source":"This type of conversion is called a *narrowing conversion*, and it is possible for it to fail at run time."},{"content":"For this reason, <ph id=\"ph1\">`Option Strict On`</ph> disallows implicit narrowing conversions.","pos":[712,789],"source":" For this reason, `Option Strict On` disallows implicit narrowing conversions."},{"pos":[796,817],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC30512","source":"**Error ID:** BC30512"},{"pos":[826,847],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Determine whether a conversion of any type exists from <ph id=\"ph1\">`&lt;type1&gt;`</ph> to <ph id=\"ph2\">`&lt;type2&gt;`</ph>.","pos":[857,935],"source":"Determine whether a conversion of any type exists from `<type1>` to `<type2>`."},{"content":"If both are Visual Basic elementary types, or if both are instances of classes, you can usually make this determination by consulting the table in <bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.","pos":[936,1225],"source":" If both are Visual Basic elementary types, or if both are instances of classes, you can usually make this determination by consulting the table in [Widening and Narrowing Conversions](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)."},{"content":"If only a narrowing conversion exists from <ph id=\"ph1\">`&lt;type1&gt;`</ph> to <ph id=\"ph2\">`&lt;type2&gt;`</ph>, you should use explicit casting.","pos":[1235,1334],"source":"If only a narrowing conversion exists from `<type1>` to `<type2>`, you should use explicit casting."},{"content":"The <bpt id=\"p1\">[</bpt>CType Function<ept id=\"p1\">](../../visual-basic/language-reference/functions/ctype-function.md)</ept> and <bpt id=\"p2\">[</bpt>DirectCast Operator<ept id=\"p2\">](../../visual-basic/language-reference/operators/directcast-operator.md)</ept> keywords throw a run-time exception if the conversion fails.","pos":[1335,1581],"source":" The [CType Function](../../visual-basic/language-reference/functions/ctype-function.md) and [DirectCast Operator](../../visual-basic/language-reference/operators/directcast-operator.md) keywords throw a run-time exception if the conversion fails."},{"content":"The <bpt id=\"p1\">[</bpt>TryCast Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/trycast-operator.md)</ept> keyword applies only to reference types and returns <bpt id=\"p2\">[</bpt>Nothing<ept id=\"p2\">](../../visual-basic/language-reference/nothing.md)</ept> if the conversion fails.","pos":[1582,1810],"source":" The [TryCast Operator](../../visual-basic/language-reference/operators/trycast-operator.md) keyword applies only to reference types and returns [Nothing](../../visual-basic/language-reference/nothing.md) if the conversion fails."},{"content":"If a narrowing conversion exists and your program can tolerate a run-time failure, or you are confident that a run-time failure is not possible, you can specify <ph id=\"ph1\">`Option Strict Off`</ph> at the beginning of your source code.","pos":[1820,2038],"source":"If a narrowing conversion exists and your program can tolerate a run-time failure, or you are confident that a run-time failure is not possible, you can specify `Option Strict Off` at the beginning of your source code."},{"content":"But you should still enclose the conversion in a <bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept> block to avoid unexpected results or early termination of your program.","pos":[2039,2274],"source":" But you should still enclose the conversion in a [Try...Catch...Finally Statement](../../visual-basic/language-reference/statements/try-catch-finally-statement.md) block to avoid unexpected results or early termination of your program."},{"content":"If no conversion exists from <ph id=\"ph1\">`&lt;type1&gt;`</ph> to <ph id=\"ph2\">`&lt;type2&gt;`</ph>, you must re-evaluate your program logic.","pos":[2284,2377],"source":"If no conversion exists from `<type1>` to `<type2>`, you must re-evaluate your program logic."},{"content":"You might be able to write code that can assign values to <ph id=\"ph1\">`&lt;type2&gt;`</ph> corresponding to anticipated values of <ph id=\"ph2\">`&lt;type1&gt;`</ph>.","pos":[2378,2495],"source":" You might be able to write code that can assign values to `<type2>` corresponding to anticipated values of `<type1>`."},{"content":"If no conversion exists from <ph id=\"ph1\">`&lt;type1&gt;`</ph> to <ph id=\"ph2\">`&lt;type2&gt;`</ph> and one of the types is a class or structure you have defined, you might be able to define a conversion operator from that type to or from the other type.","pos":[2505,2711],"source":"If no conversion exists from `<type1>` to `<type2>` and one of the types is a class or structure you have defined, you might be able to define a conversion operator from that type to or from the other type."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>.","pos":[2712,2883],"source":" For more information, see [How to: Define a Conversion Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)."},{"pos":[2893,3058],"content":"In all cases and as a general guideline, you should avoid using narrowing conversions unless you can trap failures in a <ph id=\"ph1\">`Catch`</ph> block and deal with them effectively.","source":"In all cases and as a general guideline, you should avoid using narrowing conversions unless you can trap failures in a `Catch` block and deal with them effectively."},{"pos":[3067,3075],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3079,3181],"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>","source":"[Option Strict Statement](../../visual-basic/language-reference/statements/option-strict-statement.md)"},{"pos":[3184,3325],"content":"<bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>","source":"[Widening and Narrowing Conversions](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)"},{"pos":[3328,3411],"content":"<bpt id=\"p1\">[</bpt>CType Function<ept id=\"p1\">](../../visual-basic/language-reference/functions/ctype-function.md)</ept>","source":"[CType Function](../../visual-basic/language-reference/functions/ctype-function.md)"},{"pos":[3414,3507],"content":"<bpt id=\"p1\">[</bpt>DirectCast Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/directcast-operator.md)</ept>","source":"[DirectCast Operator](../../visual-basic/language-reference/operators/directcast-operator.md)"},{"pos":[3510,3597],"content":"<bpt id=\"p1\">[</bpt>TryCast Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/trycast-operator.md)</ept>","source":"[TryCast Operator](../../visual-basic/language-reference/operators/trycast-operator.md)"},{"pos":[3600,3659],"content":"<bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../visual-basic/language-reference/nothing.md)</ept>","source":"[Nothing](../../visual-basic/language-reference/nothing.md)"},{"pos":[3662,3776],"content":"<bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>","source":"[Try...Catch...Finally Statement](../../visual-basic/language-reference/statements/try-catch-finally-statement.md)"},{"pos":[3779,3923],"content":"<bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>","source":"[How to: Define a Conversion Operator](../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)"}]}