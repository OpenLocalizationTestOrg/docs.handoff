{"content":"---\ntitle: \"Retrieve Metadata\"\nms.date: \"03/30/2017\"\nms.assetid: e8a6ef8c-a195-495a-a15e-7d92bdf0b28c\n---\n# Retrieve Metadata\nThis sample demonstrates how to implement a client that dynamically retrieves metadata from a service to choose an endpoint with which to communicate. This sample is based on the [Getting Started](../../../../docs/framework/wcf/samples/getting-started-sample.md). The service has been modified to expose two endpoints—an endpoint at the base address using the `basicHttpBinding` binding, and a secure endpoint at {*baseaddress*}/secure using the `wsHttpBinding` binding. Instead of configuring the client with the endpoint addresses and bindings, the client dynamically retrieves the metadata for the service using the <xref:System.ServiceModel.Description.MetadataExchangeClient> class and then imports the metadata as a <xref:System.ServiceModel.Description.ServiceEndpointCollection> using the <xref:System.ServiceModel.Description.WsdlImporter> class.  \n  \n> [!NOTE]\n>  The setup procedure and build instructions for this sample are located at the end of this topic.  \n  \n The client application uses the imported <xref:System.ServiceModel.Description.ServiceEndpointCollection> to create clients to communicate with the service. The client application iterates through each retrieved endpoint and communicates with each endpoint that implements the `ICalculator` contract. The appropriate address and binding are provided with the retrieved endpoint, so that the client is configured to communicate with each endpoint, as shown in the following sample code.  \n  \n```csharp   \n// Create a MetadataExchangeClient for retrieving metadata.  \nEndpointAddress mexAddress = new EndpointAddress(ConfigurationManager.AppSettings[\"mexAddress\"]);  \nMetadataExchangeClient mexClient = new MetadataExchangeClient(mexAddress);  \n  \n// Retrieve the metadata for all endpoints using metadata exchange protocol (mex).  \nMetadataSet metadataSet = mexClient.GetMetadata();  \n  \n//Convert the metadata into endpoints.  \nWsdlImporter importer = new WsdlImporter(metadataSet);  \nServiceEndpointCollection endpoints = importer.ImportAllEndpoints();  \n  \nCalculatorClient client = null;  \nContractDescription contract = ContractDescription.GetContract(typeof(ICalculator));  \n// Communicate with each endpoint that supports the ICalculator contract.  \nforeach (ServiceEndpoint ep in endpoints)  \n{  \n    if (ep.Contract.Namespace.Equals(contract.Namespace) && ep.Contract.Name.Equals(contract.Name))  \n    {  \n        // Create a client using the endpoint address and binding.  \n        client = new CalculatorClient(ep.Binding, new EndpointAddress(ep.Address.Uri));  \n        Console.WriteLine(\"Communicate with endpoint: \");  \n        Console.WriteLine(\"   AddressPath={0}\", ep.Address.Uri.PathAndQuery);  \n        Console.WriteLine(\"   Binding={0}\", ep.Binding.Name);  \n        // Call operations.  \n        DoCalculations(client);  \n  \n        //Closing the client gracefully closes the connection and cleans up resources.  \n        client.Close();  \n    }  \n}  \n```  \n  \n The client console window displays the operations sent to each of the endpoints, displaying the address path and binding name.  \n  \n### To set up, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  To build the C#, C++, or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n3.  To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md).  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your machine. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Basic\\Client\\RetrieveMetadata`  \n","nodes":[{"pos":[4,101],"embed":true,"restype":"x-metadata","content":"title: \"Retrieve Metadata\"\nms.date: \"03/30/2017\"\nms.assetid: e8a6ef8c-a195-495a-a15e-7d92bdf0b28c","nodes":[{"content":"Retrieve Metadata","nodes":[{"pos":[0,17],"content":"Retrieve Metadata","nodes":[{"content":"Retrieve Metadata","pos":[0,17]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[108,125],"content":"Retrieve Metadata","linkify":"Retrieve Metadata","nodes":[{"content":"Retrieve Metadata","pos":[0,17]}]},{"content":"This sample demonstrates how to implement a client that dynamically retrieves metadata from a service to choose an endpoint with which to communicate.","pos":[126,276]},{"content":"This sample is based on the <bpt id=\"p1\">[</bpt>Getting Started<ept id=\"p1\">](../../../../docs/framework/wcf/samples/getting-started-sample.md)</ept>.","pos":[277,389],"source":" This sample is based on the [Getting Started](../../../../docs/framework/wcf/samples/getting-started-sample.md)."},{"content":"The service has been modified to expose two endpoints—an endpoint at the base address using the <ph id=\"ph1\">`basicHttpBinding`</ph> binding, and a secure endpoint at {<bpt id=\"p1\">*</bpt>baseaddress<ept id=\"p1\">*</ept>}/secure using the <ph id=\"ph2\">`wsHttpBinding`</ph> binding.","pos":[390,596],"source":" The service has been modified to expose two endpoints—an endpoint at the base address using the `basicHttpBinding` binding, and a secure endpoint at {*baseaddress*}/secure using the `wsHttpBinding` binding."},{"content":"Instead of configuring the client with the endpoint addresses and bindings, the client dynamically retrieves the metadata for the service using the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient&gt;</ph> class and then imports the metadata as a <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.ServiceEndpointCollection&gt;</ph> using the <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.WsdlImporter&gt;</ph> class.","pos":[597,981],"source":" Instead of configuring the client with the endpoint addresses and bindings, the client dynamically retrieves the metadata for the service using the <xref:System.ServiceModel.Description.MetadataExchangeClient> class and then imports the metadata as a <xref:System.ServiceModel.Description.ServiceEndpointCollection> using the <xref:System.ServiceModel.Description.WsdlImporter> class."},{"pos":[989,1096],"content":"[!NOTE]\n The setup procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The setup procedure and build instructions for this sample are located at the end of this topic.","pos":[9,105]}]},{"content":"The client application uses the imported <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ServiceEndpointCollection&gt;</ph> to create clients to communicate with the service.","pos":[1103,1259],"source":"The client application uses the imported <xref:System.ServiceModel.Description.ServiceEndpointCollection> to create clients to communicate with the service."},{"content":"The client application iterates through each retrieved endpoint and communicates with each endpoint that implements the <ph id=\"ph1\">`ICalculator`</ph> contract.","pos":[1260,1403],"source":" The client application iterates through each retrieved endpoint and communicates with each endpoint that implements the `ICalculator` contract."},{"content":"The appropriate address and binding are provided with the retrieved endpoint, so that the client is configured to communicate with each endpoint, as shown in the following sample code.","pos":[1404,1588]},{"content":"The client console window displays the operations sent to each of the endpoints, displaying the address path and binding name.","pos":[3084,3210]},{"pos":[3220,3256],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[3266,3465],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[3475,3690],"content":"To build the C#, C++, or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C#, C++, or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[3700,3908],"content":"To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id=\"p1\">[</bpt>Running the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.","source":"To run the sample in a single- or cross-machine configuration, follow the instructions in [Running the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/running-the-samples.md)."},{"pos":[3916,4048],"content":"[!IMPORTANT]\n The samples may already be installed on your machine. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your machine. Check for the following (default) directory before continuing.","pos":[14,130],"nodes":[{"content":"The samples may already be installed on your machine.","pos":[0,53]},{"content":"Check for the following (default) directory before continuing.","pos":[54,116]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all Windows Communication Foundation (WCF) and <ph id=\"ph1\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[4102,4412],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](https://go.microsoft.com/fwlink/?LinkId=150780) to download all Windows Communication Foundation (WCF) and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[4413,4463]}]}