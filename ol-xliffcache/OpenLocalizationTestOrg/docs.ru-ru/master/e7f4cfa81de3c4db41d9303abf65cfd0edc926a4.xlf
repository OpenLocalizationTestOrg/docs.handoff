<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="async.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7f4cfa81de3c4db41d9303abf65cfd0edc926a4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\async.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a78f65ce33130f122babf43134f5f895a0040515</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6127b2c0928bcf6621a3a5fbebd6cfa678b38ddb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>async (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>async (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`async`</ph> modifier to specify that a method, <bpt id="p1">[</bpt>lambda expression<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>, or <bpt id="p2">[</bpt>anonymous method<ept id="p2">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you use this modifier on a method or expression, it's referred to as an async method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you're new to asynchronous programming or do not understand how an async method uses the <ph id="ph1">`await`</ph> keyword to do potentially long-running work without blocking the callerâ€™s thread, you should read the introduction in <bpt id="p1">[</bpt>Asynchronous Programming with async and await<ept id="p1">](../../../csharp/programming-guide/concepts/async/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The method runs synchronously until it reaches its first <ph id="ph1">`await`</ph> expression, at which point the method is suspended until the awaited task is complete.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the meantime, control returns to the caller of the method, as the example in the next section shows.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the method that the <ph id="ph1">`async`</ph> keyword modifies doesn't contain an <ph id="ph2">`await`</ph> expression or statement, the method executes synchronously.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A compiler warning alerts you to any async methods that don't contain <ph id="ph1">`await`</ph>, because that situation might indicate an error.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Compiler Warning (level 1) CS4014<ept id="p1">](../../../csharp/language-reference/compiler-messages/cs4014.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`async`</ph> keyword is contextual in that it's a keyword only when it modifies a method, a lambda expression, or an anonymous method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In all other contexts, it's interpreted as an identifier.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example shows the structure and flow of control between an async event handler, <ph id="ph1">`StartButton_Click`</ph>, and an async method, <ph id="ph2">`ExampleMethodAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The result from the async method is the length of a downloaded website.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The code is suitable for a Windows Presentation Foundation (WPF) app or Windows Store app that you create in Visual Studio; see the code comments for setting up the app.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about tasks and the code that executes while waiting for a task, see <bpt id="p1">[</bpt>Asynchronous Programming with async and await<ept id="p1">](../../../csharp/programming-guide/concepts/async/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For a full WPF example that uses similar elements, see <bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id="p1">](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can download the walkthrough code from <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255191)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Return Types</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An async method can have a return type of <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, or <bpt id="p1">[</bpt>void<ept id="p1">](../../../csharp/language-reference/keywords/void.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The method can't declare any <bpt id="p1">[</bpt>ref<ept id="p1">](../../../csharp/language-reference/keywords/ref.md)</ept> or <bpt id="p2">[</bpt>out<ept id="p2">](../../../csharp/language-reference/keywords/out.md)</ept> parameters, but it can call methods that have such parameters.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You specify <ph id="ph1">`Task&lt;TResult&gt;`</ph> as the return type of an async method if the <bpt id="p1">[</bpt>return<ept id="p1">](../../../csharp/language-reference/keywords/return.md)</ept> statement of the method specifies an operand of type <ph id="ph2">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">`Task`</ph> if no meaningful value is returned when the method is completed.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That is, a call to the method returns a <ph id="ph1">`Task`</ph>, but when the <ph id="ph2">`Task`</ph> is completed, any <ph id="ph3">`await`</ph> expression that's awaiting the <ph id="ph4">`Task`</ph> evaluates to <ph id="ph5">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">`void`</ph> return type primarily to define event handlers, which require that return type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The caller of a <ph id="ph1">`void`</ph>-returning async method can't await it and can't catch exceptions that the method throws.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information and examples, see <bpt id="p1">[</bpt>Async Return Types<ept id="p1">](../../../csharp/programming-guide/concepts/async/async-return-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>await<ept id="p1">](../../../csharp/language-reference/keywords/await.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id="p1">](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with async and await<ept id="p1">](../../../csharp/programming-guide/concepts/async/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>