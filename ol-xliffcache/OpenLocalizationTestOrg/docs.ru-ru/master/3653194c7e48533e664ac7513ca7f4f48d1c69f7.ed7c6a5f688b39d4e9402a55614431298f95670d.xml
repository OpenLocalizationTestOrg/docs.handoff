{"content":"---\ntitle: \"Return Values for the CStr Function (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"times [Visual Basic], CStr Function return values\"\n  - \"type conversion [Visual Basic]\"\n  - \"dates [Visual Basic], CStr Function return values\"\n  - \"CStr function\"\n  - \"strings [Visual Basic], return value\"\n  - \"Date data type [Visual Basic], converting\"\n  - \"dates [Visual Basic]\"\n  - \"String data type [Visual Basic], converting\"\nms.assetid: 3aa744e7-1419-45d5-85e3-e5abc2953673\n---\n# Return Values for the CStr Function (Visual Basic)\nThe following table describes the return values for `CStr` for different data types of `expression`.  \n  \n|If `expression` type is|`CStr` returns|  \n|-----------------------------|--------------------|  \n|[Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md)|A string containing \"True\" or \"False\".|  \n|[Date Data Type](../../../visual-basic/language-reference/data-types/date-data-type.md)|A string containing a `Date` value (date and time) in the short date format of your system.|  \n|[Numeric Data Types](../../../visual-basic/programming-guide/language-features/data-types/numeric-data-types.md)|A string representing the number.|  \n  \n## CStr and Date  \n The `Date` type always contains both date and time information. For purposes of type conversion, Visual Basic considers 1/1/0001 (January 1 of the year 1) to be a *neutral value* for the date, and 00:00:00 (midnight) to be a neutral value for the time. `CStr` does not include neutral values in the resulting string. For example, if you convert `#January 1, 0001 9:30:00#` to a string, the result is \"9:30:00 AM\"; the date information is suppressed. However, the date information is still present in the original `Date` value and can be recovered with functions such as <xref:Microsoft.VisualBasic.DateAndTime.DatePart%2A>.  \n  \n> [!NOTE]\n>  The `CStr` function performs its conversion based on the current culture settings for the application. To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method. For example, use <xref:System.Double.ToString%2A?displayProperty=nameWithType> when converting a value of type `Double` to a `String`.  \n  \n## See also\n\n- <xref:Microsoft.VisualBasic.DateAndTime.DatePart%2A>\n- [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md)\n- [Date Data Type](../../../visual-basic/language-reference/data-types/date-data-type.md)\n","nodes":[{"pos":[4,491],"embed":true,"restype":"x-metadata","content":"title: \"Return Values for the CStr Function (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"times [Visual Basic], CStr Function return values\"\n  - \"type conversion [Visual Basic]\"\n  - \"dates [Visual Basic], CStr Function return values\"\n  - \"CStr function\"\n  - \"strings [Visual Basic], return value\"\n  - \"Date data type [Visual Basic], converting\"\n  - \"dates [Visual Basic]\"\n  - \"String data type [Visual Basic], converting\"\nms.assetid: 3aa744e7-1419-45d5-85e3-e5abc2953673","nodes":[{"content":"Return Values for the CStr Function (Visual Basic)","nodes":[{"pos":[0,50],"content":"Return Values for the CStr Function (Visual Basic)","nodes":[{"content":"Return Values for the CStr Function (Visual Basic)","pos":[0,50]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[498,548],"content":"Return Values for the CStr Function (Visual Basic)","linkify":"Return Values for the CStr Function (Visual Basic)","nodes":[{"content":"Return Values for the CStr Function (Visual Basic)","pos":[0,50]}]},{"pos":[549,649],"content":"The following table describes the return values for <ph id=\"ph1\">`CStr`</ph> for different data types of <ph id=\"ph2\">`expression`</ph>.","source":"The following table describes the return values for `CStr` for different data types of `expression`."},{"pos":[656,679],"content":"If <ph id=\"ph1\">`expression`</ph> type is","source":"If `expression` type is"},{"pos":[680,694],"content":"<ph id=\"ph1\">`CStr`</ph> returns","source":"`CStr` returns"},{"pos":[754,847],"content":"<bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept>","source":"[Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md)"},{"content":"A string containing \"True\" or \"False\".","pos":[848,886]},{"pos":[891,978],"content":"<bpt id=\"p1\">[</bpt>Date Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/date-data-type.md)</ept>","source":"[Date Data Type](../../../visual-basic/language-reference/data-types/date-data-type.md)"},{"pos":[979,1070],"content":"A string containing a <ph id=\"ph1\">`Date`</ph> value (date and time) in the short date format of your system.","source":"A string containing a `Date` value (date and time) in the short date format of your system."},{"pos":[1075,1187],"content":"<bpt id=\"p1\">[</bpt>Numeric Data Types<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/numeric-data-types.md)</ept>","source":"[Numeric Data Types](../../../visual-basic/programming-guide/language-features/data-types/numeric-data-types.md)"},{"content":"A string representing the number.","pos":[1188,1221]},{"pos":[1231,1244],"content":"CStr and Date","linkify":"CStr and Date","nodes":[{"content":"CStr and Date","pos":[0,13]}]},{"content":"The <ph id=\"ph1\">`Date`</ph> type always contains both date and time information.","pos":[1248,1311],"source":"The `Date` type always contains both date and time information."},{"content":"For purposes of type conversion, Visual Basic considers 1/1/0001 (January 1 of the year 1) to be a <bpt id=\"p1\">*</bpt>neutral value<ept id=\"p1\">*</ept> for the date, and 00:00:00 (midnight) to be a neutral value for the time.","pos":[1312,1500],"source":" For purposes of type conversion, Visual Basic considers 1/1/0001 (January 1 of the year 1) to be a *neutral value* for the date, and 00:00:00 (midnight) to be a neutral value for the time."},{"content":"<ph id=\"ph1\">`CStr`</ph> does not include neutral values in the resulting string.","pos":[1501,1564],"source":"`CStr` does not include neutral values in the resulting string."},{"content":"For example, if you convert <ph id=\"ph1\">`#January 1, 0001 9:30:00#`</ph> to a string, the result is \"9:30:00 AM\"; the date information is suppressed.","pos":[1565,1697],"source":" For example, if you convert `#January 1, 0001 9:30:00#` to a string, the result is \"9:30:00 AM\"; the date information is suppressed."},{"content":"However, the date information is still present in the original <ph id=\"ph1\">`Date`</ph> value and can be recovered with functions such as <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.DateAndTime.DatePart%2A&gt;</ph>.","pos":[1698,1871],"source":" However, the date information is still present in the original `Date` value and can be recovered with functions such as <xref:Microsoft.VisualBasic.DateAndTime.DatePart%2A>."},{"pos":[1879,2250],"content":"[!NOTE]\n The `CStr` function performs its conversion based on the current culture settings for the application. To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method. For example, use <xref:System.Double.ToString%2A?displayProperty=nameWithType> when converting a value of type `Double` to a `String`.","leadings":["","> "],"nodes":[{"content":"The `CStr` function performs its conversion based on the current culture settings for the application. To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method. For example, use <xref:System.Double.ToString%2A?displayProperty=nameWithType> when converting a value of type `Double` to a `String`.","pos":[9,369],"nodes":[{"content":"The <ph id=\"ph1\">`CStr`</ph> function performs its conversion based on the current culture settings for the application.","pos":[0,102],"source":"The `CStr` function performs its conversion based on the current culture settings for the application."},{"content":"To get the string representation of a number in a particular culture, use the number's <ph id=\"ph1\">`ToString(IFormatProvider)`</ph> method.","pos":[103,225],"source":" To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method."},{"content":"For example, use <ph id=\"ph1\">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> when converting a value of type <ph id=\"ph2\">`Double`</ph> to a <ph id=\"ph3\">`String`</ph>.","pos":[226,360],"source":" For example, use <xref:System.Double.ToString%2A?displayProperty=nameWithType> when converting a value of type `Double` to a `String`."}]}]},{"pos":[2259,2267],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2326,2434],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[2437,2530],"content":"<bpt id=\"p1\">[</bpt>Boolean Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept>","source":"[Boolean Data Type](../../../visual-basic/language-reference/data-types/boolean-data-type.md)"},{"pos":[2533,2620],"content":"<bpt id=\"p1\">[</bpt>Date Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/date-data-type.md)</ept>","source":"[Date Data Type](../../../visual-basic/language-reference/data-types/date-data-type.md)"}]}