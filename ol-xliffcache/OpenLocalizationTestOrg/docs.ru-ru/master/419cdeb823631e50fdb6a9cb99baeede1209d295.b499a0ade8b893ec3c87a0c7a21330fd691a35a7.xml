{"content":"---\ntitle: \"How to: Sort Elements on Multiple Keys (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 0c4c1462-3047-4766-b9e2-7e0e9cc7f421\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# How to: Sort Elements on Multiple Keys (Visual Basic)\nThis topic shows how to sort on multiple keys.  \n  \n## Example  \n In this example, the results are ordered first by the shipping postal code, then by the order date.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md).  \n  \n```vb  \nDim co As XElement = XElement.Load(\"CustomersOrders.xml\")  \nDim result = _  \n    From c In co.<Orders>.<Order> _  \n    Order By c.<ShipInfo>.<ShipPostalCode>.Value, Convert.ToDateTime(c.<OrderDate>.Value) _  \n    Select New With { _  \n        .CustomerID = c.<CustomerID>.Value, _  \n        .EmployeeID = c.<EmployeeID>.Value, _  \n        .ShipPostalCode = c.<ShipInfo>.<ShipPostalCode>.Value, _  \n        .OrderDate = Convert.ToDateTime(c.<OrderDate>.Value) _  \n    }  \nFor Each r In result  \n    Console.WriteLine(\"CustomerID:{0} EmployeeID:{1} ShipPostalCode:{2} OrderDate:{3:d}\", _  \n                r.CustomerID, r.EmployeeID, r.ShipPostalCode, r.OrderDate)  \nNext  \n  \n```  \n  \n This code produces the following output:  \n  \n```  \nCustomerID:LETSS EmployeeID:1 ShipPostalCode:94117 OrderDate:6/25/1997  \nCustomerID:LETSS EmployeeID:8 ShipPostalCode:94117 OrderDate:10/27/1997  \nCustomerID:LETSS EmployeeID:6 ShipPostalCode:94117 OrderDate:11/10/1997  \nCustomerID:LETSS EmployeeID:4 ShipPostalCode:94117 OrderDate:2/12/1998  \nCustomerID:GREAL EmployeeID:6 ShipPostalCode:97403 OrderDate:5/6/1997  \nCustomerID:GREAL EmployeeID:8 ShipPostalCode:97403 OrderDate:7/4/1997  \nCustomerID:GREAL EmployeeID:1 ShipPostalCode:97403 OrderDate:7/31/1997  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:7/31/1997  \nCustomerID:GREAL EmployeeID:6 ShipPostalCode:97403 OrderDate:9/4/1997  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:9/25/1997  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:1/6/1998  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:3/9/1998  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:4/7/1998  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:4/22/1998  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:4/30/1998  \nCustomerID:HUNGC EmployeeID:3 ShipPostalCode:97827 OrderDate:12/6/1996  \nCustomerID:HUNGC EmployeeID:1 ShipPostalCode:97827 OrderDate:12/25/1996  \nCustomerID:HUNGC EmployeeID:3 ShipPostalCode:97827 OrderDate:1/15/1997  \nCustomerID:HUNGC EmployeeID:4 ShipPostalCode:97827 OrderDate:7/16/1997  \nCustomerID:HUNGC EmployeeID:8 ShipPostalCode:97827 OrderDate:9/8/1997  \nCustomerID:LAZYK EmployeeID:1 ShipPostalCode:99362 OrderDate:3/21/1997  \nCustomerID:LAZYK EmployeeID:8 ShipPostalCode:99362 OrderDate:5/22/1997  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders in a Namespace](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-in-a-namespace.md).  \n  \n```vb  \nImports <xmlns='http://www.adventure-works.com'>  \n  \nModule Module1  \n    Sub Main()  \n        Dim co As XElement = XElement.Load(\"CustomersOrdersInNamespace.xml\")  \n        Dim result = _  \n            From c In co.<Orders>.<Order> _  \n            Order By c.<ShipInfo>.<ShipPostalCode>.Value, Convert.ToDateTime(c.<OrderDate>.Value) _  \n            Select New With { _  \n                .CustomerID = c.<CustomerID>.Value, _  \n                .EmployeeID = c.<EmployeeID>.Value, _  \n                .ShipPostalCode = c.<ShipInfo>.<ShipPostalCode>.Value, _  \n                .OrderDate = Convert.ToDateTime(c.<OrderDate>.Value) _  \n            }  \n        For Each r In result  \n            Console.WriteLine(\"CustomerID:{0} EmployeeID:{1} ShipPostalCode:{2} OrderDate:{3:d}\", _  \n                        r.CustomerID, r.EmployeeID, r.ShipPostalCode, r.OrderDate)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This code produces the following output:  \n  \n```  \nCustomerID:LETSS EmployeeID:1 ShipPostalCode:94117 OrderDate:6/25/1997  \nCustomerID:LETSS EmployeeID:8 ShipPostalCode:94117 OrderDate:10/27/1997  \nCustomerID:LETSS EmployeeID:6 ShipPostalCode:94117 OrderDate:11/10/1997  \nCustomerID:LETSS EmployeeID:4 ShipPostalCode:94117 OrderDate:2/12/1998  \nCustomerID:GREAL EmployeeID:6 ShipPostalCode:97403 OrderDate:5/6/1997  \nCustomerID:GREAL EmployeeID:8 ShipPostalCode:97403 OrderDate:7/4/1997  \nCustomerID:GREAL EmployeeID:1 ShipPostalCode:97403 OrderDate:7/31/1997  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:7/31/1997  \nCustomerID:GREAL EmployeeID:6 ShipPostalCode:97403 OrderDate:9/4/1997  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:9/25/1997  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:1/6/1998  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:3/9/1998  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:4/7/1998  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:4/22/1998  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:4/30/1998  \nCustomerID:HUNGC EmployeeID:3 ShipPostalCode:97827 OrderDate:12/6/1996  \nCustomerID:HUNGC EmployeeID:1 ShipPostalCode:97827 OrderDate:12/25/1996  \nCustomerID:HUNGC EmployeeID:3 ShipPostalCode:97827 OrderDate:1/15/1997  \nCustomerID:HUNGC EmployeeID:4 ShipPostalCode:97827 OrderDate:7/16/1997  \nCustomerID:HUNGC EmployeeID:8 ShipPostalCode:97827 OrderDate:9/8/1997  \nCustomerID:LAZYK EmployeeID:1 ShipPostalCode:99362 OrderDate:3/21/1997  \nCustomerID:LAZYK EmployeeID:8 ShipPostalCode:99362 OrderDate:5/22/1997  \n```  \n  \n## See Also  \n [Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)","nodes":[{"pos":[12,82],"content":"How to: Sort Elements on Multiple Keys (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Sort Elements on Multiple Keys (Visual Basic) | Microsoft Docs","pos":[0,70]}]},{"pos":[389,442],"content":"How to: Sort Elements on Multiple Keys (Visual Basic)","linkify":"How to: Sort Elements on Multiple Keys (Visual Basic)","nodes":[{"content":"How to: Sort Elements on Multiple Keys (Visual Basic)","pos":[0,53]}]},{"content":"This topic shows how to sort on multiple keys.","pos":[443,489]},{"pos":[498,505],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the results are ordered first by the shipping postal code, then by the order date.","pos":[509,608]},{"pos":[615,825],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml.md)."},{"content":"This code produces the following output:","pos":[1524,1564]},{"pos":[3190,3197],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[3201,3275]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[3276,3436],"source":" For more information, see [Working with XML Namespaces (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[3443,3657],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders in a Namespace<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-in-a-namespace.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders in a Namespace](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-in-a-namespace.md)."},{"content":"This code produces the following output:","pos":[4591,4631]},{"pos":[6257,6265],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6269,6400],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}