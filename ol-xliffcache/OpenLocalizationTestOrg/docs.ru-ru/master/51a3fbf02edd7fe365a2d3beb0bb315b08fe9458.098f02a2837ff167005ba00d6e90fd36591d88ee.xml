{"content":"---\ntitle: \"+= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.+=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"+= operator [Visual Basic]\"\n  - \"assignment statements, compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"+= operator [Visual Basic], appending strings\"\n  - \"compound assignment statements\"\nms.assetid: d3e959f4-85d4-4e47-87c4-77b62335a5b3\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# += Operator (Visual Basic)\nAdds the value of a numeric expression to the value of a numeric variable or property and assigns the result to the variable or property. Can also be used to concatenate a `String` expression to a `String` variable or property and assign the result to the variable or property.  \n  \n## Syntax  \n  \n```  \n  \nvariableorproperty += expression  \n```  \n  \n## Parts  \n `variableorproperty`  \n Required. Any numeric or `String` variable or property.  \n  \n `expression`  \n Required. Any numeric or `String` expression.  \n  \n## Remarks  \n The element on the left side of the `+=` operator can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md).  \n  \n The `+=` operator adds the value on its right to the variable or property on its left, and assigns the result to the variable or property on its left. The `+=` operator can also be used to concatenate the `String` expression on its right to the `String` variable or property on its left, and assign the result to the variable or property on its left.  \n  \n> [!NOTE]\n>  When you use the `+=` operator, you might not be able to determine whether addition or string concatenation will occur. Use the `&=` operator for concatenation to eliminate ambiguity and to provide self-documenting code.  \n  \n This assignment operator implicitly performs widening but not narrowing conversions if the compilation environment enforces strict semantics. For more information on these conversions, see [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md). For more information on strict and permissive semantics, see [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md).  \n  \n If permissive semantics are allowed, the `+=` operator implicitly performs a variety of string and numeric conversions identical to those performed by the `+` operator. For details on these conversions, see [+ Operator](../../../visual-basic/language-reference/operators/addition-operator.md).  \n  \n## Overloading  \n The `+` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. Overloading the `+` operator affects the behavior of the `+=` operator. If your code uses `+=` on a class or structure that overloads `+`, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `+=` operator to combine the value of one variable with another. The first part uses `+=` with numeric variables to add one value to another. The second part uses `+=` with `String` variables to concatenate one value with another. In both cases, the result is assigned to the first variable.  \n  \n [!code-vb[VbVbalrOperators#7](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/addition-assignment-operator_1.vb)]  \n  \n [!code-vb[VbVbalrOperators#8](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/addition-assignment-operator_2.vb)]  \n  \n The value of `num1` is now 13, and the value of `str1` is now \"103\".  \n  \n## See Also  \n [+ Operator](../../../visual-basic/language-reference/operators/addition-operator.md)   \n [Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md)   \n [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)   \n [Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Statements](../../../visual-basic/programming-guide/language-features/statements.md)","nodes":[{"pos":[4,769],"embed":true,"restype":"x-metadata","content":"title: \"+= Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.+=\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"+= operator [Visual Basic]\"\n  - \"assignment statements, compound\"\n  - \"statements [Visual Basic], compound assignment\"\n  - \"+= operator [Visual Basic], appending strings\"\n  - \"compound assignment statements\"\nms.assetid: d3e959f4-85d4-4e47-87c4-77b62335a5b3\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"+= Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,43],"content":"+= Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"+= Operator (Visual Basic) | Microsoft Docs","pos":[0,43]}]}],"path":["title"]}],"yml":true},{"pos":[776,802],"content":"+= Operator (Visual Basic)","linkify":"+= Operator (Visual Basic)","nodes":[{"content":"+= Operator (Visual Basic)","pos":[0,26]}]},{"content":"Adds the value of a numeric expression to the value of a numeric variable or property and assigns the result to the variable or property.","pos":[803,940]},{"content":"Can also be used to concatenate a <ph id=\"ph1\">`String`</ph> expression to a <ph id=\"ph2\">`String`</ph> variable or property and assign the result to the variable or property.","pos":[941,1080],"source":" Can also be used to concatenate a `String` expression to a `String` variable or property and assign the result to the variable or property."},{"pos":[1089,1095],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1157,1162],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[1190,1199]},{"content":"Any numeric or <ph id=\"ph1\">`String`</ph> variable or property.","pos":[1200,1245],"source":" Any numeric or `String` variable or property."},{"content":"Required.","pos":[1268,1277]},{"content":"Any numeric or <ph id=\"ph1\">`String`</ph> expression.","pos":[1278,1313],"source":" Any numeric or `String` expression."},{"pos":[1322,1329],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the <ph id=\"ph1\">`+=`</ph> operator can be a simple scalar variable, a property, or an element of an array.","pos":[1333,1454],"source":"The element on the left side of the `+=` operator can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[1455,1565],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`+=`</ph> operator adds the value on its right to the variable or property on its left, and assigns the result to the variable or property on its left.","pos":[1572,1722],"source":"The `+=` operator adds the value on its right to the variable or property on its left, and assigns the result to the variable or property on its left."},{"content":"The <ph id=\"ph1\">`+=`</ph> operator can also be used to concatenate the <ph id=\"ph2\">`String`</ph> expression on its right to the <ph id=\"ph3\">`String`</ph> variable or property on its left, and assign the result to the variable or property on its left.","pos":[1723,1922],"source":" The `+=` operator can also be used to concatenate the `String` expression on its right to the `String` variable or property on its left, and assign the result to the variable or property on its left."},{"pos":[1930,2161],"content":"[!NOTE]\n When you use the `+=` operator, you might not be able to determine whether addition or string concatenation will occur. Use the `&=` operator for concatenation to eliminate ambiguity and to provide self-documenting code.","leadings":["","> "],"nodes":[{"content":"When you use the `+=` operator, you might not be able to determine whether addition or string concatenation will occur. Use the `&=` operator for concatenation to eliminate ambiguity and to provide self-documenting code.","pos":[9,229],"nodes":[{"content":"When you use the <ph id=\"ph1\">`+=`</ph> operator, you might not be able to determine whether addition or string concatenation will occur.","pos":[0,119],"source":"When you use the `+=` operator, you might not be able to determine whether addition or string concatenation will occur."},{"content":"Use the <ph id=\"ph1\">`&amp;=`</ph> operator for concatenation to eliminate ambiguity and to provide self-documenting code.","pos":[120,220],"source":" Use the `&=` operator for concatenation to eliminate ambiguity and to provide self-documenting code."}]}]},{"content":"This assignment operator implicitly performs widening but not narrowing conversions if the compilation environment enforces strict semantics.","pos":[2168,2309]},{"content":"For more information on these conversions, see <bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.","pos":[2310,2502],"source":" For more information on these conversions, see [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)."},{"content":"For more information on strict and permissive semantics, see <bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>.","pos":[2503,2670],"source":" For more information on strict and permissive semantics, see [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)."},{"content":"If permissive semantics are allowed, the <ph id=\"ph1\">`+=`</ph> operator implicitly performs a variety of string and numeric conversions identical to those performed by the <ph id=\"ph2\">`+`</ph> operator.","pos":[2677,2845],"source":"If permissive semantics are allowed, the `+=` operator implicitly performs a variety of string and numeric conversions identical to those performed by the `+` operator."},{"content":"For details on these conversions, see <bpt id=\"p1\">[</bpt>+ Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/addition-operator.md)</ept>.","pos":[2846,2970],"source":" For details on these conversions, see [+ Operator](../../../visual-basic/language-reference/operators/addition-operator.md)."},{"pos":[2979,2990],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`+`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[2994,3152],"source":"The `+` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"Overloading the <ph id=\"ph1\">`+`</ph> operator affects the behavior of the <ph id=\"ph2\">`+=`</ph> operator.","pos":[3153,3224],"source":" Overloading the `+` operator affects the behavior of the `+=` operator."},{"content":"If your code uses <ph id=\"ph1\">`+=`</ph> on a class or structure that overloads <ph id=\"ph2\">`+`</ph>, be sure you understand its redefined behavior.","pos":[3225,3338],"source":" If your code uses `+=` on a class or structure that overloads `+`, be sure you understand its redefined behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[3339,3480],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[3489,3496],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`+=`</ph> operator to combine the value of one variable with another.","pos":[3500,3595],"source":"The following example uses the `+=` operator to combine the value of one variable with another."},{"content":"The first part uses <ph id=\"ph1\">`+=`</ph> with numeric variables to add one value to another.","pos":[3596,3672],"source":" The first part uses `+=` with numeric variables to add one value to another."},{"content":"The second part uses <ph id=\"ph1\">`+=`</ph> with <ph id=\"ph2\">`String`</ph> variables to concatenate one value with another.","pos":[3673,3761],"source":" The second part uses `+=` with `String` variables to concatenate one value with another."},{"content":"In both cases, the result is assigned to the first variable.","pos":[3762,3822]},{"pos":[4123,4191],"content":"The value of <ph id=\"ph1\">`num1`</ph> is now 13, and the value of <ph id=\"ph2\">`str1`</ph> is now \"103\".","source":"The value of `num1` is now 13, and the value of `str1` is now \"103\"."},{"pos":[4200,4208],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>+ Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/addition-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[4212,4298],"source":"[+ Operator](../../../visual-basic/language-reference/operators/addition-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/assignment-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[4302,4401],"source":"[Assignment Operators](../../../visual-basic/language-reference/operators/assignment-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[4405,4504],"source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[4508,4613],"source":"[Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[4617,4730],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[4734,4859],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","pos":[4863,4948],"source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"}]}