{"content":"---\ntitle: \"Emitting User-Code Traces\"\nms.date: \"03/30/2017\"\nms.assetid: fa54186a-8ffa-4332-b0e7-63867126fd49\n---\n# Emitting User-Code Traces\n\nIn addition to enabling tracing in configuration to collect instrumentation data generated by Windows Communication Foundation (WCF), you can also emit traces programmatically in user code. In this way, you can proactively create instrumentation data that you can peruse later for diagnostic purpose. This topic discusses how you can do this.\n\nIn addition, the [Extending Tracing](../../../../../docs/framework/wcf/samples/extending-tracing.md) sample includes all the code demonstrated in the following sections.\n\n## Creating a Trace Source\n\nYou can use the following code to create a user trace source.\n\n```csharp\nTraceSource ts = new TraceSource(\"myUserTraceSource\");\n```\n\n## Creating Activities\n\nActivities are logical unit of processing. You can create one activity for each major processing unit in which you want traces to be grouped together. For example, you can create one activity for each request to the service. To do so, perform the following steps.\n\n1. Save the activity ID in scope.\n\n2. Create a new activity ID.\n\n3. Transfer from the activity in scope to the new one, set the new activity in scope and emit a start trace for that activity.\n\nThe following code demonstrates how to do this.\n\n```csharp\nGuid oldID = Trace.CorrelationManager.ActivityId;\nGuid traceID = Guid.NewGuid();\nts.TraceTransfer(0, \"transfer\", traceID);\nTrace.CorrelationManager.ActivityId = traceID; // Trace is static\nts.TraceEvent(TraceEventType.Start, 0, \"Add request\");\n```\n\n## Emitting Traces within a User Activity\n\nThe following code emits traces within a user activity.\n\n```csharp\ndouble value1 = 100.00D;\ndouble value2 = 15.99D;\nts.TraceInformation(\"Client sends message to Add \" + value1 + \", \" + value2);\ndouble result = client.Add(value1, value2);\nts.TraceInformation(\"Client receives Add response '\" + result + \"'\");\n```\n\n## Stopping the Activities\n\nTo stop the activities, transfer back to the old activity, stop the current activity id, and reset the old activity id in scope.\n\nThe following code demonstrates how to do this.\n\n```csharp\nts.TraceTransfer(0, \"transfer\", oldID);\nts.TraceEvent(TraceEventType.Stop, 0, \"Add request\");\nTrace.CorrelationManager.ActivityId = oldID;\n```\n\n## Propagating the Activity ID to A Service\n\nIf you set the `propagateActivity` attribute to `true` for the `System.ServiceModel` trace source in both the client and service configuration files, the service processing for the Add request occurs in the same activity as the one defined in the client. If the service defines its own activities and transfers, the service traces do not appear in the client-propagated activity. Instead, they appear in an activity correlated by transfer traces to the activity whose ID is propagated by the client.\n\n> [!NOTE]\n> If the `propagateActivity` attribute is set to `true` on both the client and service, the ambient activity in the operation scope of the service is set by WCF.\n\nYou can use the following code to check whether an activity was set in scope by WCF.\n\n```csharp\n// Check if an activity was set in scope by WCF, if it was\n// propagated from the client. If not, ( ambient activity is\n// equal to Guid.Empty), create a new one.\nif(Trace.CorrelationManager.ActivityId == Guid.Empty)\n{\n    Guid newGuid = Guid.NewGuid();\n    Trace.CorrelationManager.ActivityId = newGuid;\n}\n// Emit your Start trace.\nts.TraceEvent(TraceEventType.Start, 0, \"Add Activity\");\n\n// Emit the processing traces for that request.\nserviceTs.TraceInformation(\"Service receives Add \"\n                            + n1 + \", \" + n2);\n// double result = n1 + n2;\nserviceTs.TraceInformation(\"Service sends Add result\" + result);\n\n// Emit the Stop trace and exit the method scope.\nts.TraceEvent(TraceEventType.Stop, 0, \"Add Activity\");\n// return result;\n```\n\n## Tracing Exceptions Thrown in Code\n\nWhen you throw an exception in code, you can also trace the exception at Warning level or up using the following code.\n\n```csharp\nts.TraceEvent(TraceEventType.Warning, 0, \"Throwing exception \" + \"exceptionMessage\");\n```\n\n## Viewing User Traces in the Service Trace Viewer Tool\n\nThis section contains screenshots of traces generated by running the [Extending Tracing](../../../../../docs/framework/wcf/samples/extending-tracing.md) sample, when viewed using the [Service Trace Viewer Tool (SvcTraceViewer.exe)](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md).\n\nIn the following diagram, the \"Add request\" activity created previously is selected on the left panel. It is listed with three other Math operation activities (Divide, Subtract, Multiply) that constitute the application client program. The user code has defined one new activity for each operation to isolate potential error occurrences in different requests.\n\nTo demonstrate the use of transfers in the [Extending Tracing](../../../../../docs/framework/wcf/samples/extending-tracing.md) sample, a Calculator activity that encapsulates the four operation requests is also created. For each request, there is a transfer back and forth from the Calculator activity to the request activity (trace is highlighted in the upper right panel in the figure).\n\nWhen you select an activity on the left panel, the traces included by this activity are shown on the upper right panel. If `propagateActivity` is `true` at every endpoint in the request path, traces in the request activity are from all processes that participate in the request. In this example, you can see traces from both the client and service in the 4th column in the panel.\n\nThis activity shows the following order of processing:\n\n1. Client sends message to Add.\n\n2. Service receives Add request message.\n\n3. Service sends Add response.\n\n4. Client receives Add response.\n\nAll these traces were emitted at Information level. Clicking a trace in the upper-right panel shows the details of that trace in the lower-right panel.\n\nIn the following diagram, we also see transfer traces from and to the Calculator activity, as well as two pairs of Start and Stop traces per request activity, one for the client and one for the service (one for each trace source).\n\n![Trace Viewer: Emitting User&#45;code traces](../../../../../docs/framework/wcf/diagnostics/tracing/media/242c9358-475a-4baf-83f3-4227aa942fcd.gif \"242c9358-475a-4baf-83f3-4227aa942fcd\")\nList of activities by creation time (left panel) and their nested activities (upper-right panel)\n\nIf the service code throws an exception that causes the client to throw as well (for example, when the client did not get the response to its request), both the service and client warning or error messages occur in the same activity for direct correlation. In the following image, the service throws an exception that states \"The service refuses to process this request in user code.\" The client also throws an exception that states \"The server was unable to process the request due to an internal error.\"\n\nThe following images shows that errors across endpoints for a given request appear in the same activity if the request activity id was propagated:\n\n![Screenshot that shows errors across endpoints for a given request.](./media/emitting-user-code-traces/trace-viewer-endpoint-errors.gif)\n\nDouble-clicking the Multiply activity on the left panel shows the following graph, with the traces for the Multiply activity for each process involved. We can see a warning first occurred at the service (exception thrown), which is followed by warnings and errors on the client because the request could not be processed. Therefore, we can imply the causal error relationship between endpoints and derive the root cause of the error.\n\nThe following image shows a graph view of error correlation:\n\n![Screenshot that shows the graph view of error correlation.](./media/emitting-user-code-traces/trace-viewer-error-correlation.gif)\n\nTo obtain the previous traces, we set `ActivityTracing` for the user trace sources and `propagateActivity=true` for the `System.ServiceModel` trace source. We did not set `ActivityTracing` for the `System.ServiceModel` trace source to enable user code to user code activity propagation. (When ServiceModel activity tracing is on, the activity ID defined in the client is not propagated all the way to the service user code; Transfers, however, correlate the client and service user code activities to the intermediate WCF activities.)\n\nDefining activities and propagating the activity ID enables us to perform direct error correlation across endpoints. In this way, we can locate the root cause of an error more quickly.\n\n## See also\n\n- [Extending Tracing](../../../../../docs/framework/wcf/samples/extending-tracing.md)\n","nodes":[{"pos":[4,109],"embed":true,"restype":"x-metadata","content":"title: \"Emitting User-Code Traces\"\nms.date: \"03/30/2017\"\nms.assetid: fa54186a-8ffa-4332-b0e7-63867126fd49","nodes":[{"content":"Emitting User-Code Traces","nodes":[{"pos":[0,25],"content":"Emitting User-Code Traces","nodes":[{"content":"Emitting User-Code Traces","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[116,141],"content":"Emitting User-Code Traces","linkify":"Emitting User-Code Traces","nodes":[{"content":"Emitting User-Code Traces","pos":[0,25]}]},{"content":"In addition to enabling tracing in configuration to collect instrumentation data generated by Windows Communication Foundation (WCF), you can also emit traces programmatically in user code.","pos":[143,332]},{"content":"In this way, you can proactively create instrumentation data that you can peruse later for diagnostic purpose.","pos":[333,443]},{"content":"This topic discusses how you can do this.","pos":[444,485]},{"pos":[487,656],"content":"In addition, the <bpt id=\"p1\">[</bpt>Extending Tracing<ept id=\"p1\">](../../../../../docs/framework/wcf/samples/extending-tracing.md)</ept> sample includes all the code demonstrated in the following sections.","source":"In addition, the [Extending Tracing](../../../../../docs/framework/wcf/samples/extending-tracing.md) sample includes all the code demonstrated in the following sections."},{"pos":[661,684],"content":"Creating a Trace Source","linkify":"Creating a Trace Source","nodes":[{"content":"Creating a Trace Source","pos":[0,23]}]},{"content":"You can use the following code to create a user trace source.","pos":[686,747]},{"pos":[822,841],"content":"Creating Activities","linkify":"Creating Activities","nodes":[{"content":"Creating Activities","pos":[0,19]}]},{"content":"Activities are logical unit of processing.","pos":[843,885]},{"content":"You can create one activity for each major processing unit in which you want traces to be grouped together.","pos":[886,993]},{"content":"For example, you can create one activity for each request to the service.","pos":[994,1067]},{"content":"To do so, perform the following steps.","pos":[1068,1106]},{"content":"Save the activity ID in scope.","pos":[1111,1141]},{"content":"Create a new activity ID.","pos":[1146,1171]},{"content":"Transfer from the activity in scope to the new one, set the new activity in scope and emit a start trace for that activity.","pos":[1176,1299]},{"content":"The following code demonstrates how to do this.","pos":[1301,1348]},{"pos":[1612,1650],"content":"Emitting Traces within a User Activity","linkify":"Emitting Traces within a User Activity","nodes":[{"content":"Emitting Traces within a User Activity","pos":[0,38]}]},{"content":"The following code emits traces within a user activity.","pos":[1652,1707]},{"pos":[1968,1991],"content":"Stopping the Activities","linkify":"Stopping the Activities","nodes":[{"content":"Stopping the Activities","pos":[0,23]}]},{"content":"To stop the activities, transfer back to the old activity, stop the current activity id, and reset the old activity id in scope.","pos":[1993,2121]},{"content":"The following code demonstrates how to do this.","pos":[2123,2170]},{"pos":[2329,2369],"content":"Propagating the Activity ID to A Service","linkify":"Propagating the Activity ID to A Service","nodes":[{"content":"Propagating the Activity ID to A Service","pos":[0,40]}]},{"content":"If you set the <ph id=\"ph1\">`propagateActivity`</ph> attribute to <ph id=\"ph2\">`true`</ph> for the <ph id=\"ph3\">`System.ServiceModel`</ph> trace source in both the client and service configuration files, the service processing for the Add request occurs in the same activity as the one defined in the client.","pos":[2371,2625],"source":"If you set the `propagateActivity` attribute to `true` for the `System.ServiceModel` trace source in both the client and service configuration files, the service processing for the Add request occurs in the same activity as the one defined in the client."},{"content":"If the service defines its own activities and transfers, the service traces do not appear in the client-propagated activity.","pos":[2626,2750]},{"content":"Instead, they appear in an activity correlated by transfer traces to the activity whose ID is propagated by the client.","pos":[2751,2870]},{"pos":[2874,3043],"content":"[!NOTE]\nIf the `propagateActivity` attribute is set to `true` on both the client and service, the ambient activity in the operation scope of the service is set by WCF.","leadings":["","> "],"nodes":[{"content":"If the <ph id=\"ph1\">`propagateActivity`</ph> attribute is set to <ph id=\"ph2\">`true`</ph> on both the client and service, the ambient activity in the operation scope of the service is set by WCF.","pos":[8,167],"source":"If the `propagateActivity` attribute is set to `true` on both the client and service, the ambient activity in the operation scope of the service is set by WCF."}]},{"content":"You can use the following code to check whether an activity was set in scope by WCF.","pos":[3045,3129]},{"pos":[3902,3935],"content":"Tracing Exceptions Thrown in Code","linkify":"Tracing Exceptions Thrown in Code","nodes":[{"content":"Tracing Exceptions Thrown in Code","pos":[0,33]}]},{"content":"When you throw an exception in code, you can also trace the exception at Warning level or up using the following code.","pos":[3937,4055]},{"pos":[4161,4213],"content":"Viewing User Traces in the Service Trace Viewer Tool","linkify":"Viewing User Traces in the Service Trace Viewer Tool","nodes":[{"content":"Viewing User Traces in the Service Trace Viewer Tool","pos":[0,52]}]},{"pos":[4215,4530],"content":"This section contains screenshots of traces generated by running the <bpt id=\"p1\">[</bpt>Extending Tracing<ept id=\"p1\">](../../../../../docs/framework/wcf/samples/extending-tracing.md)</ept> sample, when viewed using the <bpt id=\"p2\">[</bpt>Service Trace Viewer Tool (SvcTraceViewer.exe)<ept id=\"p2\">](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)</ept>.","source":"This section contains screenshots of traces generated by running the [Extending Tracing](../../../../../docs/framework/wcf/samples/extending-tracing.md) sample, when viewed using the [Service Trace Viewer Tool (SvcTraceViewer.exe)](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)."},{"content":"In the following diagram, the \"Add request\" activity created previously is selected on the left panel.","pos":[4532,4634]},{"content":"It is listed with three other Math operation activities (Divide, Subtract, Multiply) that constitute the application client program.","pos":[4635,4767]},{"content":"The user code has defined one new activity for each operation to isolate potential error occurrences in different requests.","pos":[4768,4891]},{"content":"To demonstrate the use of transfers in the <bpt id=\"p1\">[</bpt>Extending Tracing<ept id=\"p1\">](../../../../../docs/framework/wcf/samples/extending-tracing.md)</ept> sample, a Calculator activity that encapsulates the four operation requests is also created.","pos":[4893,5112],"source":"To demonstrate the use of transfers in the [Extending Tracing](../../../../../docs/framework/wcf/samples/extending-tracing.md) sample, a Calculator activity that encapsulates the four operation requests is also created."},{"content":"For each request, there is a transfer back and forth from the Calculator activity to the request activity (trace is highlighted in the upper right panel in the figure).","pos":[5113,5281]},{"content":"When you select an activity on the left panel, the traces included by this activity are shown on the upper right panel.","pos":[5283,5402]},{"content":"If <ph id=\"ph1\">`propagateActivity`</ph> is <ph id=\"ph2\">`true`</ph> at every endpoint in the request path, traces in the request activity are from all processes that participate in the request.","pos":[5403,5561],"source":" If `propagateActivity` is `true` at every endpoint in the request path, traces in the request activity are from all processes that participate in the request."},{"content":"In this example, you can see traces from both the client and service in the 4th column in the panel.","pos":[5562,5662]},{"content":"This activity shows the following order of processing:","pos":[5664,5718]},{"content":"Client sends message to Add.","pos":[5723,5751]},{"content":"Service receives Add request message.","pos":[5756,5793]},{"content":"Service sends Add response.","pos":[5798,5825]},{"content":"Client receives Add response.","pos":[5830,5859]},{"content":"All these traces were emitted at Information level.","pos":[5861,5912]},{"content":"Clicking a trace in the upper-right panel shows the details of that trace in the lower-right panel.","pos":[5913,6012]},{"content":"In the following diagram, we also see transfer traces from and to the Calculator activity, as well as two pairs of Start and Stop traces per request activity, one for the client and one for the service (one for each trace source).","pos":[6014,6244]},{"pos":[6246,6530],"content":"<bpt id=\"p1\">![</bpt>Trace Viewer: Emitting User&amp;#45;code traces<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../../docs/framework/wcf/diagnostics/tracing/media/242c9358-475a-4baf-83f3-4227aa942fcd.gif \"</bpt>242c9358-475a-4baf-83f3-4227aa942fcd<ept id=\"p2\">\")</ept> List of activities by creation time (left panel) and their nested activities (upper-right panel)","source":"![Trace Viewer: Emitting User&#45;code traces](../../../../../docs/framework/wcf/diagnostics/tracing/media/242c9358-475a-4baf-83f3-4227aa942fcd.gif \"242c9358-475a-4baf-83f3-4227aa942fcd\")\nList of activities by creation time (left panel) and their nested activities (upper-right panel)"},{"content":"If the service code throws an exception that causes the client to throw as well (for example, when the client did not get the response to its request), both the service and client warning or error messages occur in the same activity for direct correlation.","pos":[6532,6788]},{"content":"In the following image, the service throws an exception that states \"The service refuses to process this request in user code.\"","pos":[6789,6916]},{"content":"The client also throws an exception that states \"The server was unable to process the request due to an internal error.\"","pos":[6917,7037]},{"content":"The following images shows that errors across endpoints for a given request appear in the same activity if the request activity id was propagated:","pos":[7039,7185]},{"content":"Screenshot that shows errors across endpoints for a given request.","pos":[7189,7255]},{"content":"Double-clicking the Multiply activity on the left panel shows the following graph, with the traces for the Multiply activity for each process involved.","pos":[7326,7477]},{"content":"We can see a warning first occurred at the service (exception thrown), which is followed by warnings and errors on the client because the request could not be processed.","pos":[7478,7647]},{"content":"Therefore, we can imply the causal error relationship between endpoints and derive the root cause of the error.","pos":[7648,7759]},{"content":"The following image shows a graph view of error correlation:","pos":[7761,7821]},{"content":"Screenshot that shows the graph view of error correlation.","pos":[7825,7883]},{"content":"To obtain the previous traces, we set <ph id=\"ph1\">`ActivityTracing`</ph> for the user trace sources and <ph id=\"ph2\">`propagateActivity=true`</ph> for the <ph id=\"ph3\">`System.ServiceModel`</ph> trace source.","pos":[7956,8111],"source":"To obtain the previous traces, we set `ActivityTracing` for the user trace sources and `propagateActivity=true` for the `System.ServiceModel` trace source."},{"content":"We did not set <ph id=\"ph1\">`ActivityTracing`</ph> for the <ph id=\"ph2\">`System.ServiceModel`</ph> trace source to enable user code to user code activity propagation.","pos":[8112,8242],"source":" We did not set `ActivityTracing` for the `System.ServiceModel` trace source to enable user code to user code activity propagation."},{"content":"(When ServiceModel activity tracing is on, the activity ID defined in the client is not propagated all the way to the service user code; Transfers, however, correlate the client and service user code activities to the intermediate WCF activities.)","pos":[8243,8490]},{"content":"Defining activities and propagating the activity ID enables us to perform direct error correlation across endpoints.","pos":[8492,8608]},{"content":"In this way, we can locate the root cause of an error more quickly.","pos":[8609,8676]},{"pos":[8681,8689],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[8693,8776],"content":"<bpt id=\"p1\">[</bpt>Extending Tracing<ept id=\"p1\">](../../../../../docs/framework/wcf/samples/extending-tracing.md)</ept>","source":"[Extending Tracing](../../../../../docs/framework/wcf/samples/extending-tracing.md)"}]}