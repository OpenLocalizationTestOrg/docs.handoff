<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="selecting-a-credential-type.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8aa959aa952e839039bebffddddd951fbc1eb0d4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\selecting-a-credential-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb5da727d9a850a220de33786d0edf3725f0bba9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eceee13aecc9d697141f3fc228f4532fc55af831</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Selecting a Credential Type</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Selecting a Credential Type</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Credentials<ept id="p1">*</ept> are the data Windows Communication Foundation (WCF) uses to establish either a claimed identity or capabilities.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, a passport is a credential a government issues to prove citizenship in a country or region.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In WCF, credentials can take many forms, such as user name tokens and X.509 certificates.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic discusses credentials, how they are used in WCF, and how to select the right credential for your application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In many countries and regions, a driver’s license is an example of a credential.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A license contains data that represents a person's identity and capabilities.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It contains proof of possession in the form of the possessor's picture.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The license is issued by a trusted authority, usually a governmental department of licensing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The license is sealed, and can contain a hologram, showing that it has not been tampered with or counterfeited.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Presenting a credential involves presenting both the data and proof of possession of the data.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>WCF supports a variety of credential types at both the transport and message security levels.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, consider two types of credentials supported in WCF: user name and (X.509) certificate credentials.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For the user name credential, the user name represents the claimed identity and the password provides proof of possession.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The trusted authority in this case is the system that validates the user name and password.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>With an X.509 certificate credential, the subject name, subject alternative name or specific fields within the certificate can be used as claims of identity, while other fields, such as the <ph id="ph1">`Valid From`</ph> and <ph id="ph2">`Valid To`</ph> fields, specify the validity of the certificate.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Transport Credential Types</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following table shows the possible types of client credentials that can be used by a binding in transport security mode.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When creating a service, set the <ph id="ph1">`ClientCredentialType`</ph> property to one of these values to specify the type of credential that the client must supply to communicate with your service.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can set the types in either code or configuration files.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Setting</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specifies that the client does not need to present any credential.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This translates to an anonymous client.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Basic</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specifies basic authentication for the client.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For additional information, see RFC2617—<bpt id="p1">[</bpt>HTTP Authentication: Basic and Digest Authentication<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=88313)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Digest</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Specifies digest authentication for the client.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For additional information, see RFC2617—<bpt id="p1">[</bpt>HTTP Authentication: Basic and Digest Authentication<ept id="p1">](https://go.microsoft.com/fwlink/?LinkID=88313)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Ntlm</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Specifies NT LAN Manager (NTLM) authentication.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is used when you cannot use Kerberos authentication for some reason.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can also disable its use as a fallback by setting the <ph id="ph1">&lt;xref:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm%2A&gt;</ph> property to <ph id="ph2">`false`</ph>, which causes WCF to make a best-effort to throw an exception if NTLM is used.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that setting this property to <ph id="ph1">`false`</ph> may not prevent NTLM credentials from being sent over the wire.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Windows</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Specifies Windows authentication.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To specify only the Kerberos protocol on a Windows domain, set the <ph id="ph1">&lt;xref:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm%2A&gt;</ph> property to <ph id="ph2">`false`</ph> (the default is <ph id="ph3">`true`</ph>).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Certificate</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Performs client authentication using an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Password</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>User must supply a user name and password.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Validate the user name/password pair using Windows authentication or another custom solution.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Message Client Credential Types</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following table shows the possible credential types that you can use when creating an application that uses message security.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can use these values in either code or configuration files.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Setting</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specifies that the client does not need to present a credential.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This translates to an anonymous client.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Windows</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Allows SOAP message exchanges to occur under the security context established with a Windows credential.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Username</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Allows the service to require that the client be authenticated with a user name credential.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Note that WCF does not allow any cryptographic operations with user names, such as generating a signature or encrypting data.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>WCF ensures that the transport is secured when using user name credentials.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Certificate</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Allows the service to require that the client be authenticated using an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Issued Token</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A custom token type configured according to a security policy.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The default token type is Security Assertions Markup Language (SAML).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The token is issued by a secure token service.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Federation and Issued Tokens<ept id="p1">](../../../../docs/framework/wcf/feature-details/federation-and-issued-tokens.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Negotiation Model of Service Credentials</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Negotiation<ept id="p1">*</ept> is the process of establishing trust between a client and a service by exchanging credentials.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The process is performed iteratively between the client and the service, so as to disclose only the information necessary for the next step in the negotiation process.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In practice, the end result is the delivery of a service's credential to the client to be used in subsequent operations.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>With one exception, by default the system-provided bindings in WCF negotiate the service credential automatically when using message-level security.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>(The exception is the <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph>, which does not enable security by default.) To disable this behavior, see the <ph id="ph2">&lt;xref:System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.FederatedMessageSecurityOverHttp.NegotiateServiceCredential%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When SSL security is used with .NET Framework 3.5 and later, a WCF client uses both the intermediate certificates in its certificate store and the intermediate certificates received during SSL negotiation to perform certificate chain validation on the service's certificate.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>.NET Framework 3.0 only uses the intermediate certificates installed in the local certificate store.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Out-of-Band Negotiation</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If automatic negotiation is disabled, the service credential must be provisioned at the client prior to sending any messages to the service.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is also known as an <bpt id="p1">*</bpt>out-of-band<ept id="p1">*</ept> provisioning.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, if the specified credential type is a certificate, and automatic negotiation is disabled, the client must contact the service owner to receive and install the certificate on the computer running the client application.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This can be done, for example, when you want to strictly control which clients can access a service in a business-to-business scenario.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This out-of-band-negotiation can be done in email, and the X.509 certificate is stored in Windows certificate store, using a tool such as the Microsoft Management Console (MMC) Certificates snap-in.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601.ClientCredentials%2A&gt;</ph> property is used to provide the service with a certificate that was attained through out-of-band negotiation.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This is necessary when using the <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph> class because the binding does not allow automated negotiation.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The property is also used in an uncorrelated duplex scenario.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This is a scenario where a server sends a message to the client without requiring the client to send a request to the server first.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Because the server does not have a request from the client, it must use the client's certificate to encrypt the message to the client.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Setting Credential Values</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Once you select a security mode, you must specify the actual credentials.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, if the credential type is set to "certificate," then you must associate a specific credential (such as a specific X.509 certificate) with the service or client.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Depending on whether you are programming a service or a client, the method for setting the credential value differs slightly.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Setting Service Credentials</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If you are using transport mode, and you are using HTTP as the transport, you must use either Internet Information Services (IIS) or configure the port with a certificate.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Transport Security Overview<ept id="p1">](../../../../docs/framework/wcf/feature-details/transport-security-overview.md)</ept> and <bpt id="p2">[</bpt>HTTP Transport Security<ept id="p2">](../../../../docs/framework/wcf/feature-details/http-transport-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To provision a service with credentials in code, create an instance of the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class and specify the appropriate credential using the <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceCredentials&gt;</ph> class, accessed through the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase.Credentials%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Setting a Certificate</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To provision a service with an X.509 certificate to be used to authenticate the service to clients, use the <ph id="ph1">&lt;xref:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.ServiceModel.Security.X509CertificateRecipientServiceCredential&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To provision a service with a client certificate, use the <ph id="ph1">&lt;xref:System.ServiceModel.Security.X509CertificateInitiatorClientCredential.SetCertificate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Setting Windows Credentials</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If the client specifies a valid user name and password, that credential is used to authenticate the client.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Otherwise, the current logged-on user's credentials are used.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Setting Client Credentials</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In WCF, client applications use a WCF client to connect to services.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Every client derives from the <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> class, and the <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601.ClientCredentials%2A&gt;</ph> property on the client allows the specification of various values of client credentials.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Setting a Certificate</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To provision a service with an X.509 certificate that is used to authenticate the client to a service, use the <ph id="ph1">&lt;xref:System.ServiceModel.Security.X509CertificateInitiatorClientCredential.SetCertificate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.ServiceModel.Security.X509CertificateInitiatorClientCredential&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>How Client Credentials Are Used to Authenticate a Client to the Service</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Client credential information required to communicate with a service is provided using either the <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601.ClientCredentials%2A&gt;</ph> property or the <ph id="ph2">&lt;xref:System.ServiceModel.ChannelFactory.Credentials%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The security channel uses this information to authenticate the client to the service.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Authentication is accomplished through one of two modes:</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The client credentials are used once before the first message is sent, using the WCF client instance to establish a security context.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>All application messages are then secured through the security context.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The client credentials are used to authenticate every application message sent to the service.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In this case, no context is established between the client and the service.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Established Identities Cannot Be Changed</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When the first method is used, the established context is permanently associated with the client identity.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>That is, once the security context has been established, the identity associated with the client cannot be changed.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>There is a situation to be aware of when the identity cannot be switched (that is, when establish security context is on, the default behavior).</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If you create a service that communicates with a second service, the identity used to open the WCF client to the second service cannot be changed.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This becomes a problem if multiple clients are allowed to use the first service and the service impersonates the clients when accessing the second service.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If the service reuses the same client for all callers, all calls to the second service are done under the identity of the first caller that was used to open the client to the second service.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>In other words, the service uses the identity of the first client for all its clients to communicate with the second service.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This can lead to the elevation of privilege.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If this is not the desired behavior of your service, you must track each caller and create a new client to the second service for every distinct caller, and ensure that the service uses only the right client for the right caller to communicate with the second service.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information about credentials and secure sessions, see <bpt id="p1">[</bpt>Security Considerations for Secure Sessions<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-for-secure-sessions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Concepts<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-concepts.md)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Securing Services and Clients<ept id="p1">](../../../../docs/framework/wcf/feature-details/securing-services-and-clients.md)</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming WCF Security<ept id="p1">](../../../../docs/framework/wcf/feature-details/programming-wcf-security.md)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>HTTP Transport Security<ept id="p1">](../../../../docs/framework/wcf/feature-details/http-transport-security.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>