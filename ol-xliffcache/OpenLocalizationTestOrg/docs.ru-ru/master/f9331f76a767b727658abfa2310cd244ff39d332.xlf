<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="imetadataemit-definemethod-method.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9331f76a767b727658abfa2310cd244ff39d332</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\metadata\imetadataemit-definemethod-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5341e7e8bad39524c65fb42632c85e89d152435a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97b1ced7266d8940b38ce621c5bfa8f1b0372943</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>IMetaDataEmit::DefineMethod Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>IMetaDataEmit::DefineMethod Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creates a definition for a method or global function with the specified signature, and returns a token to that method definition.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`mdTypedef`</ph> token of the parent class or parent interface of the method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">`td`</ph> to <ph id="ph2">`mdTokenNil`</ph>, if you are defining a global function.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>[in] The member name in Unicode.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[in] A value of the <bpt id="p1">[</bpt>CorMethodAttr<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/cormethodattr-enumeration.md)</ept> enumeration that specifies the attributes of the method or global function.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[in] The method signature.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The signature is persisted as supplied.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you need to specify additional information for any parameters, use the <bpt id="p1">[</bpt>IMetaDataEmit::SetParamProps<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-setparamprops-method.md)</ept> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[in] The count of bytes in <ph id="ph1">`pvSigBlob`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>[in] The address of the code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>[in] A value of the <bpt id="p1">[</bpt>CorMethodImpl<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/cormethodimpl-enumeration.md)</ept> enumeration that specifies the implementation features of the method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>[out] The member token.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The metadata API guarantees to persist methods in the same order as the caller emits them for a given enclosing class or interface, which is specified in the <ph id="ph1">`td`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Additional information regarding the use of <ph id="ph1">`DefineMethod`</ph> and particular parameter settings is given below.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Slots in the V-table</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The runtime uses method definitions to set up v-table slots.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the case where one or more slots need to be skipped, such as to preserve parity with a COM interface layout, a dummy method is defined to take up the slot or slots in the v-table; set the <ph id="ph1">`dwMethodFlags`</ph> to the <ph id="ph2">`mdRTSpecialName`</ph> value of the <bpt id="p1">[</bpt>CorMethodAttr<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/cormethodattr-enumeration.md)</ept> enumeration and specify the name as:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>_VtblGap<ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>SequenceNumber<ept id="p1">*</ept><ph id="ph2">&gt;</ph><ph id="ph3">\&lt;</ph><ph id="ph4">\_</ph><bpt id="p2">*</bpt>CountOfSlots<ept id="p2">*</ept><ph id="ph5">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>SequenceNumber<ept id="p1">*</ept> is the sequence number of the method and <bpt id="p2">*</bpt>CountOfSlots<ept id="p2">*</ept> is the number of slots to skip in the v-table.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>CountOfSlots<ept id="p1">*</ept> is omitted, 1 is assumed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These dummy methods are not callable from either managed or unmanaged code and any attempt to call them, from either managed or unmanaged code, generates an exception.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Their only purpose is to take up space in the v-table that the runtime generates for COM integration.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Duplicate Methods</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You should not define duplicate methods.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>That is, you should not call <ph id="ph1">`DefineMethod`</ph> with a duplicate set of values in the <ph id="ph2">`td`</ph>, <ph id="ph3">`wzName`</ph>, and <ph id="ph4">`pvSig`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>(These three parameters together uniquely define the method.).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, you can use a duplicate triple provided that, for one of the method definitions, you set the <ph id="ph1">`mdPrivateScope`</ph> bit in the <ph id="ph2">`dwMethodFlags`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>(The <ph id="ph1">`mdPrivateScope`</ph> bit means that the compiler will not emit a reference to this method definition.)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Method Implementation Information</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Information about the method implementation is often not known at the time the method is declared.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Therefore, you do not need to pass values in the <ph id="ph1">`ulCodeRVA`</ph> and <ph id="ph2">`dwImplFlags`</ph> parameters when calling <ph id="ph3">`DefineMethod`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The values can be supplied later through <bpt id="p1">[</bpt>IMetaDataEmit::SetMethodImplFlags<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-setmethodimplflags-method.md)</ept> or <bpt id="p2">[</bpt>IMetaDataEmit::SetRVA<ept id="p2">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-setrva-method.md)</ept>, as appropriate.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In some situations, such as platform invocation (PInvoke) or COM interop scenarios, the method body will not be supplied, and <ph id="ph1">`ulCodeRVA`</ph> should be set to zero.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In these situations, the method should not be tagged as abstract, because the runtime will locate the implementation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Defining a Method for PInvoke</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For each unmanaged function to be called through PInvoke, you must define a managed method that represents the target unmanaged function.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To define the managed method, use <ph id="ph1">`DefineMethod`</ph> with some of the parameters set to certain values, depending on the way in which PInvoke is used:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>True PInvoke - involves invocation of an external unmanaged method that resides in an unmanaged DLL.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Local PInvoke - involves invocation of a native unmanaged method that is embedded in the current managed module.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The parameter settings are given in the following table.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Values for true PInvoke</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Values for local PInvoke</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">`mdStatic`</ph>; clear <ph id="ph2">`mdSynchronized`</ph> and <ph id="ph3">`mdAbstract`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A valid common language runtime (CLR) method signature with parameters that are valid managed types.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A valid CLR method signature with parameters that are valid managed types.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">`miCil`</ph> and <ph id="ph2">`miManaged`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">`miNative`</ph> and <ph id="ph2">`miUnmanaged`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> Cor.h</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> Used as a resource in MSCorEE.dll</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept> <ph id="ph1">[!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IMetaDataEmit Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IMetaDataEmit2 Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit2-interface.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>