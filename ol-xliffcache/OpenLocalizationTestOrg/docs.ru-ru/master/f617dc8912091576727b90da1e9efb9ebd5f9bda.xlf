<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="nat-traversal-using-ipv6-and-teredo.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f617dc8912091576727b90da1e9efb9ebd5f9bda</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\network-programming\nat-traversal-using-ipv6-and-teredo.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f4c4c7a7ba6d1ea14d8c6d15790b28d6969a695</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc01c7d240100145294bf93f8c3289efa2debcd9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>NAT Traversal using IPv6 and Teredo</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>NAT Traversal using IPv6 and Teredo</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Enhancements were made that provide support for Network Address Translation (NAT) traversal.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These changes are designed for use with IPv6 and Teredo, but they are also applicable to other IP tunneling technologies.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These enhancements affect classes in the <ph id="ph1">&lt;xref:System.Net&gt;</ph> and related namespaces.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These changes can affect client and server applications that plan to use IP tunneling technologies.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The changes to support NAT traversal are available only for applications using .NET Framework version 4.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These features are not available on earlier versions of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Internet Protocol version 4 (IPv4) defined an IPv4 address as 32 bits long.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>As a result, IPv4 supports approximately 4 billion unique IP addresses (2^32).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As the number of computers and network devices on the Internet expanded in the 1990s, the limits of the IPv4 address space became apparent.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>One of several techniques used to extend the lifetime of IPv4 has been to deploy NAT to allow a single unique public IP address to represent a large number of private IP addresses (private Intranet).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The private IP addresses behind the NAT device share the single public IPv4 address.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The NAT device may be a dedicated hardware device (an inexpensive Wireless Access Point and router, for example) or a computer running a service to provide NAT.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A device or service for this public IP address translates IP network packets between the public Internet and the private Intranet.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This scheme works well for client applications running on the private Intranet that send requests to other IP addresses (usually servers) on the Internet.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The NAT device or server can keep a mapping of client requests so when a response is returned it knows where to send the response.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>But this scheme poses problems for applications running in the private Intranet behind the NAT device that want to provide services, listen for packets, and respond.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is particularly the case for peer-to-peer applications.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The IPv6 protocol defined an IPv4 address as 128 bits long.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>As a result, IPv6 supports very a large IP address space of 3.2 x 10^38 unique addresses (2^128).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With an address space of this size, it is possible for every device connected to the Internet to be given a unique address.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>But there are problems.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Much of the world is still using only IPv4.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In particular, many of the existing routers and wireless access points used by small companies, organizations, and households do not support IPv6.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Also some Internet service providers that serve these customers either do not support or have not configured support for IPv6.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Several IPv6 transition technologies have been developed to tunnel IPv6 addresses in an IPv4 packet.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These technologies include 6to4, ISATAP, and Teredo tunnels that provide address assignment and host-to-host automatic tunneling for unicast IPv6 traffic when IPv6 hosts must traverse IP4 networks to reach other IPv6 networks.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>IPv6 packets are sent tunneled as IPv4 packets.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Several tunneling techniques are being used that allow NAT traversal for IPv6 addresses through a NAT device.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Teredo is one of the IPv6 transition technologies which brings IPv6 connectivity to IPv4 networks.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Teredo is documented in RFC 4380 published by the Internet Engineering Task Force (IETF).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Windows XP SP2 and later provide support for a virtual Teredo adapter which can provide a public IPv6 address in the range 2001:0::/32.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This IPv6 address can be used to listen for incoming connections from the Internet and can be provided to IPv6 enabled clients that wish to connect to the listening service.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This frees an application from worrying about how to address a computer behind a NAT device, since the application can just connect to it using its IPv6 Teredo address.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Enhancements to Support NAT Traversal and Teredo</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Enhancements are added to the <ph id="ph1">&lt;xref:System.Net&gt;</ph>, <ph id="ph2">&lt;xref:System.Net.NetworkInformation&gt;</ph>, and <ph id="ph3">&lt;xref:System.Net.Sockets&gt;</ph> namespaces for supporting NAT traversal using IPv6 and Teredo.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Several methods are added to the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.IPGlobalProperties?displayProperty=nameWithType&gt;</ph> class to get the list of unicast IP addresses on the host.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses%2A&gt;</ph> method begins an asynchronous request to retrieve the stable unicast IP address table on the local computer.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses%2A&gt;</ph> method ends a pending asynchronous request to retrieve the stable unicast IP address table on the local computer.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses%2A&gt;</ph> method is a synchronous request to retrieve the stable unicast IP address table on the local computer, waiting until the address table stabilizes if necessary.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv6Teredo%2A?displayProperty=nameWithType&gt;</ph> property can be used to determine if an <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> is an IPv6 Teredo address.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Using these new <ph id="ph1">&lt;xref:System.Net.NetworkInformation.IPGlobalProperties&gt;</ph> class methods in combination with the <ph id="ph2">&lt;xref:System.Net.IPAddress.IsIPv6Teredo%2A&gt;</ph> property allows an application to easily find the Teredo address.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An application normally only needs to know the local Teredo address if it is communicating this information to remote applications.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, a peer-to-peer application might send all of its IPv6 addresses to a matchmaking server which can then forward them to others peers to enable direct communication.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An application should normally set its listening service to listen on <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Any?displayProperty=nameWithType&gt;</ph> rather than on the local Teredo address.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>So if a remote client or peer has a direct IPv6 route to the host of the listening service, the client or peer can connect directly using IPv6 and not have to use Teredo to tunnel packets.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For TCP applications, the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener?displayProperty=nameWithType&gt;</ph> class has an <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> method to enable NAT traversal.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For UDP applications, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient?displayProperty=nameWithType&gt;</ph> class has an <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A&gt;</ph> method to enable NAT traversal.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For applications that use the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket?displayProperty=nameWithType&gt;</ph> and related classes, the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.GetSocketOption%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.Sockets.Socket.SetSocketOption%2A&gt;</ph> methods can be used with the <ph id="ph4">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel?displayProperty=nameWithType&gt;</ph> socket option to query, enable, or disable NAT traversal.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>