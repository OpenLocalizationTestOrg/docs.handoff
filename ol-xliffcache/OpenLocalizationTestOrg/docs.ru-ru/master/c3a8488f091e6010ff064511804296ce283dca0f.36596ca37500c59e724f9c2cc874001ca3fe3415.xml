{"content":"---\ntitle: \"How to: Implement a Windows Communication Foundation Service Contract | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"service contracts [WCF], implementing\"\nms.assetid: d5ab51ba-61ae-403e-b3c8-e2669e326806\ncaps.latest.revision: 38\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Implement a Windows Communication Foundation Service Contract\nThis is the second of six tasks required to create a basic [!INCLUDE[indigo1](../../../includes/indigo1-md.md)] service and a client that can call the service. For an overview of all six tasks, see the [Getting Started Tutorial](../../../docs/framework/wcf/getting-started-tutorial.md) topic.  \n  \n The next step in creating a WCF application is to implement the service interface. This involves creating a class called `CalculatorService` that implements the user-defined `ICalculator` interface..  \n  \n### To implement a WCF service contract  \n  \n1.  Open the Service1.cs or Service1.vb file and add the following code:  \n  \n    ```csharp  \n    //Service1.cs  \n    using System;  \n    using System.Collections.Generic;  \n    using System.Linq;  \n    using System.Runtime.Serialization;  \n    using System.ServiceModel;  \n    using System.Text;  \n  \n    namespace GettingStartedLib  \n    {  \n        public class CalculatorService : ICalculator  \n        {  \n            public double Add(double n1, double n2)  \n            {  \n                double result = n1 + n2;  \n                Console.WriteLine(\"Received Add({0},{1})\", n1, n2);  \n                // Code added to write output to the console window.  \n                Console.WriteLine(\"Return: {0}\", result);  \n                return result;  \n            }  \n  \n            public double Subtract(double n1, double n2)  \n            {  \n                double result = n1 - n2;  \n                Console.WriteLine(\"Received Subtract({0},{1})\", n1, n2);  \n                Console.WriteLine(\"Return: {0}\", result);  \n                return result;  \n            }  \n  \n            public double Multiply(double n1, double n2)  \n            {  \n                double result = n1 * n2;  \n                Console.WriteLine(\"Received Multiply({0},{1})\", n1, n2);  \n                Console.WriteLine(\"Return: {0}\", result);  \n                return result;  \n            }  \n  \n            public double Divide(double n1, double n2)  \n            {  \n                double result = n1 / n2;  \n                Console.WriteLine(\"Received Divide({0},{1})\", n1, n2);  \n                Console.WriteLine(\"Return: {0}\", result);  \n                return result;  \n            }  \n        }  \n    }  \n  \n    ```  \n  \n    ```  \n    ‘Service1.vb  \n    Imports System  \n    Imports System.ServiceModel  \n  \n    Namespace GettingStartedLib  \n  \n        Public Class CalculatorService  \n            Implements ICalculator  \n  \n            Public Function Add(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Add  \n                Dim result As Double = n1 + n2  \n                ' Code added to write output to the console window.  \n                Console.WriteLine(\"Received Add({0},{1})\", n1, n2)  \n                Console.WriteLine(\"Return: {0}\", result)  \n                Return result  \n            End Function  \n  \n            Public Function Subtract(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Subtract  \n                Dim result As Double = n1 - n2  \n                Console.WriteLine(\"Received Subtract({0},{1})\", n1, n2)  \n                Console.WriteLine(\"Return: {0}\", result)  \n                Return result  \n  \n            End Function  \n  \n            Public Function Multiply(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Multiply  \n                Dim result As Double = n1 * n2  \n                Console.WriteLine(\"Received Multiply({0},{1})\", n1, n2)  \n                Console.WriteLine(\"Return: {0}\", result)  \n                Return result  \n  \n            End Function  \n  \n            Public Function Divide(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Divide  \n                Dim result As Double = n1 / n2  \n                Console.WriteLine(\"Received Divide({0},{1})\", n1, n2)  \n                Console.WriteLine(\"Return: {0}\", result)  \n                Return result  \n  \n            End Function  \n        End Class  \n    End Namespace  \n    ```  \n  \n     Each method implements the calculator operation and writes some text to the console to make testing easier.  \n  \n## Example  \n The following code shows both the interface that defines the contract and the implementation of the interface.  \n  \n```  \n// IService1.cs  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.Runtime.Serialization;  \nusing System.ServiceModel;  \nusing System.Text;  \n  \nnamespace GettingStartedLib  \n{  \n        [ServiceContract(Namespace = \"http://Microsoft.ServiceModel.Samples\")]  \n        public interface ICalculator  \n        {  \n            [OperationContract]  \n            double Add(double n1, double n2);  \n            [OperationContract]  \n            double Subtract(double n1, double n2);  \n            [OperationContract]  \n            double Multiply(double n1, double n2);  \n            [OperationContract]  \n            double Divide(double n1, double n2);  \n        }  \n}  \n  \n```  \n  \n```  \n// Service1.cs  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.Runtime.Serialization;  \nusing System.ServiceModel;  \nusing System.Text;  \n  \nnamespace GettingStartedLib  \n{  \n    public class CalculatorService : ICalculator  \n    {  \n        public double Add(double n1, double n2)  \n        {  \n            double result = n1 + n2;  \n            Console.WriteLine(\"Received Add({0},{1})\", n1, n2);  \n            // Code added to write output to the console window.  \n            Console.WriteLine(\"Return: {0}\", result);  \n            return result;  \n        }  \n  \n        public double Subtract(double n1, double n2)  \n        {  \n            double result = n1 - n2;  \n            Console.WriteLine(\"Received Subtract({0},{1})\", n1, n2);  \n            Console.WriteLine(\"Return: {0}\", result);  \n            return result;  \n        }  \n  \n        public double Multiply(double n1, double n2)  \n        {  \n            double result = n1 * n2;  \n            Console.WriteLine(\"Received Multiply({0},{1})\", n1, n2);  \n            Console.WriteLine(\"Return: {0}\", result);  \n            return result;  \n        }  \n  \n        public double Divide(double n1, double n2)  \n        {  \n            double result = n1 / n2;  \n            Console.WriteLine(\"Received Divide({0},{1})\", n1, n2);  \n            Console.WriteLine(\"Return: {0}\", result);  \n            return result;  \n        }  \n    }  \n}  \n  \n```  \n  \n```  \n‘IService.vb  \nImports System  \nImports System.ServiceModel  \n  \nNamespace GettingStartedLib  \n  \n    <ServiceContract(Namespace:=\"http://Microsoft.ServiceModel.Samples\")> _  \n    Public Interface ICalculator  \n  \n        <OperationContract()> _  \n        Function Add(ByVal n1 As Double, ByVal n2 As Double) As Double  \n        <OperationContract()> _  \n        Function Subtract(ByVal n1 As Double, ByVal n2 As Double) As Double  \n        <OperationContract()> _  \n        Function Multiply(ByVal n1 As Double, ByVal n2 As Double) As Double  \n        <OperationContract()> _  \n        Function Divide(ByVal n1 As Double, ByVal n2 As Double) As Double  \n    End Interface  \nEnd Namespace  \n```  \n  \n```  \nImports System  \nImports System.ServiceModel  \n  \nNamespace GettingStartedLib  \n  \n    Public Class CalculatorService  \n        Implements ICalculator  \n  \n        Public Function Add(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Add  \n            Dim result As Double = n1 + n2  \n            ' Code added to write output to the console window.  \n            Console.WriteLine(\"Received Add({0},{1})\", n1, n2)  \n            Console.WriteLine(\"Return: {0}\", result)  \n            Return result  \n        End Function  \n  \n        Public Function Subtract(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Subtract  \n            Dim result As Double = n1 - n2  \n            Console.WriteLine(\"Received Subtract({0},{1})\", n1, n2)  \n            Console.WriteLine(\"Return: {0}\", result)  \n            Return result  \n  \n        End Function  \n  \n        Public Function Multiply(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Multiply  \n            Dim result As Double = n1 * n2  \n            Console.WriteLine(\"Received Multiply({0},{1})\", n1, n2)  \n            Console.WriteLine(\"Return: {0}\", result)  \n            Return result  \n  \n        End Function  \n  \n        Public Function Divide(ByVal n1 As Double, ByVal n2 As Double) As Double Implements ICalculator.Divide  \n            Dim result As Double = n1 / n2  \n            Console.WriteLine(\"Received Divide({0},{1})\", n1, n2)  \n            Console.WriteLine(\"Return: {0}\", result)  \n            Return result  \n  \n        End Function  \n    End Class  \nEnd Namespace  \n```  \n  \n Now the service contract is created and implemented. Build the solution to ensure there are no compilation errors and then proceed to [How to: Host and Run a Basic Service](../../../docs/framework/wcf/how-to-host-and-run-a-basic-wcf-service.md) to run the service. For troubleshooting information, see [Troubleshooting the Getting Started Tutorial](../../../docs/framework/wcf/troubleshooting-the-getting-started-tutorial.md).  \n  \n## Compiling the Code  \n If you are using Visual Studio, on the Build menu click Build Solution (or press CTRL+SHIFT+B).  \n  \n## See Also  \n [Getting Started](../../../docs/framework/wcf/samples/getting-started-sample.md)   \n [Self-Host](../../../docs/framework/wcf/samples/self-host.md)","nodes":[{"pos":[4,490],"nodes":[{"content":"How to: Implement a Windows Communication Foundation Service Contract | Microsoft Docs","nodes":[{"pos":[0,86],"content":"How to: Implement a Windows Communication Foundation Service Contract | Microsoft Docs","nodes":[{"content":"How to: Implement a Windows Communication Foundation Service Contract | Microsoft Docs","pos":[0,86]}]}],"pos":[6,95],"yaml":true}],"content":"title: \"How to: Implement a Windows Communication Foundation Service Contract | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"service contracts [WCF], implementing\"\nms.assetid: d5ab51ba-61ae-403e-b3c8-e2669e326806\ncaps.latest.revision: 38\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[497,566],"content":"How to: Implement a Windows Communication Foundation Service Contract","linkify":"How to: Implement a Windows Communication Foundation Service Contract","nodes":[{"content":"How to: Implement a Windows Communication Foundation Service Contract","pos":[0,69]}]},{"content":"This is the second of six tasks required to create a basic <ph id=\"ph1\">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> service and a client that can call the service.","pos":[567,726],"source":"This is the second of six tasks required to create a basic [!INCLUDE[indigo1](../../../includes/indigo1-md.md)] service and a client that can call the service."},{"content":"For an overview of all six tasks, see the <bpt id=\"p1\">[</bpt>Getting Started Tutorial<ept id=\"p1\">](../../../docs/framework/wcf/getting-started-tutorial.md)</ept> topic.","pos":[727,859],"source":" For an overview of all six tasks, see the [Getting Started Tutorial](../../../docs/framework/wcf/getting-started-tutorial.md) topic."},{"content":"The next step in creating a WCF application is to implement the service interface.","pos":[866,948]},{"content":"This involves creating a class called <ph id=\"ph1\">`CalculatorService`</ph> that implements the user-defined <ph id=\"ph2\">`ICalculator`</ph> interface..","pos":[949,1065],"source":" This involves creating a class called `CalculatorService` that implements the user-defined `ICalculator` interface.."},{"pos":[1075,1110],"content":"To implement a WCF service contract","linkify":"To implement a WCF service contract","nodes":[{"content":"To implement a WCF service contract","pos":[0,35]}]},{"content":"Open the Service1.cs or Service1.vb file and add the following code:","pos":[1120,1188]},{"content":"Each method implements the calculator operation and writes some text to the console to make testing easier.","pos":[4615,4722]},{"pos":[4731,4738],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code shows both the interface that defines the contract and the implementation of the interface.","pos":[4742,4852]},{"content":"Now the service contract is created and implemented.","pos":[9368,9420]},{"content":"Build the solution to ensure there are no compilation errors and then proceed to <bpt id=\"p1\">[</bpt>How to: Host and Run a Basic Service<ept id=\"p1\">](../../../docs/framework/wcf/how-to-host-and-run-a-basic-wcf-service.md)</ept> to run the service.","pos":[9421,9632],"source":" Build the solution to ensure there are no compilation errors and then proceed to [How to: Host and Run a Basic Service](../../../docs/framework/wcf/how-to-host-and-run-a-basic-wcf-service.md) to run the service."},{"content":"For troubleshooting information, see <bpt id=\"p1\">[</bpt>Troubleshooting the Getting Started Tutorial<ept id=\"p1\">](../../../docs/framework/wcf/troubleshooting-the-getting-started-tutorial.md)</ept>.","pos":[9633,9794],"source":" For troubleshooting information, see [Troubleshooting the Getting Started Tutorial](../../../docs/framework/wcf/troubleshooting-the-getting-started-tutorial.md)."},{"pos":[9803,9821],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"If you are using Visual Studio, on the Build menu click Build Solution (or press CTRL+SHIFT+B).","pos":[9825,9920]},{"pos":[9929,9937],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Getting Started<ept id=\"p1\">](../../../docs/framework/wcf/samples/getting-started-sample.md)</ept><ph id=\"ph1\"> </ph>","pos":[9941,10022],"source":"[Getting Started](../../../docs/framework/wcf/samples/getting-started-sample.md) "},{"content":"<bpt id=\"p1\">[</bpt>Self-Host<ept id=\"p1\">](../../../docs/framework/wcf/samples/self-host.md)</ept>","pos":[10026,10087],"source":"[Self-Host](../../../docs/framework/wcf/samples/self-host.md)"}]}