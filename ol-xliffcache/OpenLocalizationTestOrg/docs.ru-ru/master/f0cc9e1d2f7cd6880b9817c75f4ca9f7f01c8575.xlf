<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="client-channel-factories-and-channels.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0cc9e1d2f7cd6880b9817c75f4ca9f7f01c8575</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\extending\client-channel-factories-and-channels.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">484b634e9faa3c86c7bf2468cfbe683e7089f120</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3323ee36753b44de0167e36cefa5db17b71dec8b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Client: Channel Factories and Channels | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Client: Channel Factories and Channels</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic discusses the creation of channel factories and channels.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Channel Factories and Channels</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Channel factories are responsible for creating channels.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Channels created by channel factories are used for sending messages.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These channels are responsible for getting the message from the layer above, performing whatever processing is necessary, then sending the message to the layer below.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following graphic illustrates this process.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Client Factories and Channels<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wcf/extending/media/wcfc-wcfchannelsigure2highlevelfactgoriesc.gif "</bpt>wcfc_WCFChannelsigure2HIghLevelFactgoriesc<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A channel factory creates channels.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When closed, channel factories are responsible for closing any channels they created that are not yet closed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Note that the model is asymmetric here because when a channel listener is closed, it only stops accepting new channels but leaves existing channels open so that they can continue receiving messages.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides base class helpers for this process.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>(For a diagram of the channel helper classes discussed in this topic, see <bpt id="p1">[</bpt>Channel Model Overview<ept id="p1">](../../../../docs/framework/wcf/extending/channel-model-overview.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CommunicationObject&gt;</ph> class implements <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> and enforces the state machine described in step 2 of <bpt id="p1">[</bpt>Developing Channels<ept id="p1">](../../../../docs/framework/wcf/extending/developing-channels.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The``<ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelManagerBase&gt;</ph> class implements <ph id="ph2">&lt;xref:System.ServiceModel.Channels.CommunicationObject&gt;</ph> and provides a unified base class for <ph id="ph3">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase?displayProperty=fullName&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceModel.Channels.ChannelListenerBase?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelManagerBase&gt;</ph> class works in conjunction with <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelBase&gt;</ph>, which is a base class that implements <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The``<ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase&gt;</ph> class implements <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelManagerBase&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IChannelFactory&gt;</ph> and consolidates the <ph id="ph4">`CreateChannel`</ph> overloads into one <ph id="ph5">`OnCreateChannel`</ph> abstract method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The``<ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelListenerBase&gt;</ph> class implements <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It takes care of basic state management.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following discussion is based upon the <bpt id="p1">[</bpt>Transport: UDP<ept id="p1">](../../../../docs/framework/wcf/samples/transport-udp.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creating a Channel Factory</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UdpChannelFactory`</ph> derives from <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The sample overrides <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty%2A&gt;</ph> to provide access to the message version of the message encoder.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The sample also overrides <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase.OnClose%2A&gt;</ph> to tear down our instance of <ph id="ph2">&lt;xref:System.ServiceModel.Channels.BufferManager&gt;</ph> when the state machine transitions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The UDP Output Channel</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UdpOutputChannel`</ph> implements <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IOutputChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The constructor validates the arguments and constructs a destination <ph id="ph1">&lt;xref:System.Net.EndPoint&gt;</ph> object based on the <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> that is passed in.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The override of <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CommunicationObject.OnOpen%2A&gt;</ph> creates a socket that is used to send messages to this <ph id="ph2">&lt;xref:System.Net.EndPoint&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The channel can be closed gracefully or ungracefully.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the channel is closed gracefully the socket is closed and a call is made to the base class <ph id="ph1">`OnClose`</ph> method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If this throws an exception, the infrastructure calls <ph id="ph1">`Abort`</ph> to ensure the channel is cleaned up.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Implement <ph id="ph1">`Send()`</ph> and <ph id="ph2">`BeginSend()`</ph><ph id="ph3">/</ph><ph id="ph4">`EndSend()`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This breaks down into two main sections.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>First serialize the message into a byte array:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Then send the resulting data on the wire:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Developing Channels<ept id="p1">](../../../../docs/framework/wcf/extending/developing-channels.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>