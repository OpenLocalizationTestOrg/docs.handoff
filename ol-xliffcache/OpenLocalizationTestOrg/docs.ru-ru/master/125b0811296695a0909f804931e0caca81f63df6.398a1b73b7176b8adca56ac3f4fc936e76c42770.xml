{"content":"---\ntitle: \"Querying an XDocument vs. Querying an XElement (C#)\"\nms.date: 07/20/2015\nms.assetid: 46221ff5-62ee-4de8-93ba-66465facb5c1\n---\n# Querying an XDocument vs. Querying an XElement (C#)\nWhen you load a document via <xref:System.Xml.Linq.XDocument.Load%2A?displayProperty=nameWithType>, you will notice that you have to write queries slightly differently than when you load via <xref:System.Xml.Linq.XElement.Load%2A?displayProperty=nameWithType>.  \n  \n## Comparison of XDocument.Load and XElement.Load  \n When you load an XML document into an <xref:System.Xml.Linq.XElement> via <xref:System.Xml.Linq.XElement.Load%2A?displayProperty=nameWithType>, the <xref:System.Xml.Linq.XElement> at the root of the XML tree contains the root element of the loaded document. However, when you load the same XML document into an <xref:System.Xml.Linq.XDocument> via <xref:System.Xml.Linq.XDocument.Load%2A?displayProperty=nameWithType>, the root of the tree is an <xref:System.Xml.Linq.XDocument> node, and the root element of the loaded document is the one allowed child <xref:System.Xml.Linq.XElement> node of the <xref:System.Xml.Linq.XDocument>. The [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] axes operate relative to the root node.  \n  \n This first example loads an XML tree using <xref:System.Xml.Linq.XElement.Load%2A>. It then queries for the child elements of the root of the tree.  \n  \n```csharp  \n// Create a simple document and write it to a file  \nFile.WriteAllText(\"Test.xml\", @\"<Root>  \n    <Child1>1</Child1>  \n    <Child2>2</Child2>  \n    <Child3>3</Child3>  \n</Root>\");  \n  \nConsole.WriteLine(\"Querying tree loaded with XElement.Load\");  \nConsole.WriteLine(\"----\");  \nXElement doc = XElement.Load(\"Test.xml\");  \nIEnumerable<XElement> childList =  \n    from el in doc.Elements()  \n    select el;  \nforeach (XElement e in childList)  \n    Console.WriteLine(e);  \n```  \n  \n As expected, this example produces the following output:  \n  \n```  \nQuerying tree loaded with XElement.Load  \n----  \n<Child1>1</Child1>  \n<Child2>2</Child2>  \n<Child3>3</Child3>  \n```  \n  \n The following example is the same as the one above, with the exception that the XML tree is loaded into an <xref:System.Xml.Linq.XDocument> instead of an <xref:System.Xml.Linq.XElement>.  \n  \n```csharp  \n// Create a simple document and write it to a file  \nFile.WriteAllText(\"Test.xml\", @\"<Root>  \n    <Child1>1</Child1>  \n    <Child2>2</Child2>  \n    <Child3>3</Child3>  \n</Root>\");  \n  \nConsole.WriteLine(\"Querying tree loaded with XDocument.Load\");  \nConsole.WriteLine(\"----\");  \nXDocument doc = XDocument.Load(\"Test.xml\");  \nIEnumerable<XElement> childList =  \n    from el in doc.Elements()  \n    select el;  \nforeach (XElement e in childList)  \n    Console.WriteLine(e);  \n```  \n  \n This example produces the following output:  \n  \n```  \nQuerying tree loaded with XDocument.Load  \n----  \n<Root>  \n  <Child1>1</Child1>  \n  <Child2>2</Child2>  \n  <Child3>3</Child3>  \n</Root>  \n```  \n  \n Notice that the same query returned the one `Root` node instead of the three child nodes.  \n  \n One approach to dealing with this is to use the <xref:System.Xml.Linq.XDocument.Root%2A> property before accessing the axes methods, as follows:  \n  \n```csharp  \n// Create a simple document and write it to a file  \nFile.WriteAllText(\"Test.xml\", @\"<Root>  \n    <Child1>1</Child1>  \n    <Child2>2</Child2>  \n    <Child3>3</Child3>  \n</Root>\");  \n  \nConsole.WriteLine(\"Querying tree loaded with XDocument.Load\");  \nConsole.WriteLine(\"----\");  \nXDocument doc = XDocument.Load(\"Test.xml\");  \nIEnumerable<XElement> childList =  \n    from el in doc.Root.Elements()  \n    select el;  \nforeach (XElement e in childList)  \n    Console.WriteLine(e);  \n```  \n  \n This query now performs in the same way as the query on the tree rooted in <xref:System.Xml.Linq.XElement>. The example produces the following output:  \n  \n```  \nQuerying tree loaded with XDocument.Load  \n----  \n<Child1>1</Child1>  \n<Child2>2</Child2>  \n<Child3>3</Child3>  \n```  \n  \n## See also\n\n- [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)\n","nodes":[{"pos":[4,133],"embed":true,"restype":"x-metadata","content":"title: \"Querying an XDocument vs. Querying an XElement (C#)\"\nms.date: 07/20/2015\nms.assetid: 46221ff5-62ee-4de8-93ba-66465facb5c1","nodes":[{"content":"Querying an XDocument vs. Querying an XElement (C#)","nodes":[{"pos":[0,51],"content":"Querying an XDocument vs. Querying an XElement (C#)","nodes":[{"content":"Querying an XDocument vs. Querying an XElement (C#)","pos":[0,51]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[140,191],"content":"Querying an XDocument vs. Querying an XElement (C#)","linkify":"Querying an XDocument vs. Querying an XElement (C#)","nodes":[{"content":"Querying an XDocument vs. Querying an XElement (C#)","pos":[0,51]}]},{"pos":[192,452],"content":"When you load a document via <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Load%2A?displayProperty=nameWithType&gt;</ph>, you will notice that you have to write queries slightly differently than when you load via <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement.Load%2A?displayProperty=nameWithType&gt;</ph>.","source":"When you load a document via <xref:System.Xml.Linq.XDocument.Load%2A?displayProperty=nameWithType>, you will notice that you have to write queries slightly differently than when you load via <xref:System.Xml.Linq.XElement.Load%2A?displayProperty=nameWithType>."},{"pos":[461,507],"content":"Comparison of XDocument.Load and XElement.Load","linkify":"Comparison of XDocument.Load and XElement.Load","nodes":[{"content":"Comparison of XDocument.Load and XElement.Load","pos":[0,46]}]},{"content":"When you load an XML document into an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> via <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement.Load%2A?displayProperty=nameWithType&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> at the root of the XML tree contains the root element of the loaded document.","pos":[511,768],"source":"When you load an XML document into an <xref:System.Xml.Linq.XElement> via <xref:System.Xml.Linq.XElement.Load%2A?displayProperty=nameWithType>, the <xref:System.Xml.Linq.XElement> at the root of the XML tree contains the root element of the loaded document."},{"content":"However, when you load the same XML document into an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> via <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XDocument.Load%2A?displayProperty=nameWithType&gt;</ph>, the root of the tree is an <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> node, and the root element of the loaded document is the one allowed child <ph id=\"ph4\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> node of the <ph id=\"ph5\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.","pos":[769,1142],"source":" However, when you load the same XML document into an <xref:System.Xml.Linq.XDocument> via <xref:System.Xml.Linq.XDocument.Load%2A?displayProperty=nameWithType>, the root of the tree is an <xref:System.Xml.Linq.XDocument> node, and the root element of the loaded document is the one allowed child <xref:System.Xml.Linq.XElement> node of the <xref:System.Xml.Linq.XDocument>."},{"content":"The <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> axes operate relative to the root node.","pos":[1143,1240],"source":" The [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] axes operate relative to the root node."},{"content":"This first example loads an XML tree using <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement.Load%2A&gt;</ph>.","pos":[1247,1330],"source":"This first example loads an XML tree using <xref:System.Xml.Linq.XElement.Load%2A>."},{"content":"It then queries for the child elements of the root of the tree.","pos":[1331,1394]},{"content":"As expected, this example produces the following output:","pos":[1893,1949]},{"pos":[2083,2269],"content":"The following example is the same as the one above, with the exception that the XML tree is loaded into an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> instead of an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","source":"The following example is the same as the one above, with the exception that the XML tree is loaded into an <xref:System.Xml.Linq.XDocument> instead of an <xref:System.Xml.Linq.XElement>."},{"content":"This example produces the following output:","pos":[2771,2814]},{"pos":[2974,3063],"content":"Notice that the same query returned the one <ph id=\"ph1\">`Root`</ph> node instead of the three child nodes.","source":"Notice that the same query returned the one `Root` node instead of the three child nodes."},{"pos":[3070,3214],"content":"One approach to dealing with this is to use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument.Root%2A&gt;</ph> property before accessing the axes methods, as follows:","source":"One approach to dealing with this is to use the <xref:System.Xml.Linq.XDocument.Root%2A> property before accessing the axes methods, as follows:"},{"content":"This query now performs in the same way as the query on the tree rooted in <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.","pos":[3721,3828],"source":"This query now performs in the same way as the query on the tree rooted in <xref:System.Xml.Linq.XElement>."},{"content":"The example produces the following output:","pos":[3829,3871]},{"pos":[4008,4016],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4020,4135],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}