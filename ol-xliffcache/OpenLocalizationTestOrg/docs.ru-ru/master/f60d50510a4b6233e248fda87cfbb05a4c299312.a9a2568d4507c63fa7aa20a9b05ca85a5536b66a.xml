{"content":"---\ntitle: \"&amp;&amp; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"&&_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"&& operator [C#]\"\n  - \"logical AND operator [C#]\"\nms.assetid: 2e4f0a1c-92a3-40f8-8e3b-17b607f20c31\ncaps.latest.revision: 18\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &amp;&amp; Operator (C# Reference)\nThe conditional-AND operator (`&&`) performs a logical-AND of its `bool` operands, but only evaluates its second operand if necessary.  \n  \n## Remarks  \n The operation  \n  \n```  \nx && y  \n```  \n  \n corresponds to the operation  \n  \n```  \nx & y  \n```  \n  \n except that if `x` is `false`, `y` is not evaluated, because the result of the AND operation is `false` no matter what the value of `y`  is. This is known as \"short-circuit\" evaluation.  \n  \n The conditional-AND operator cannot be overloaded, but overloads of the regular logical operators and operators [true](../../../csharp/language-reference/keywords/true.md) and [false](../../../csharp/language-reference/keywords/false.md) are, with certain restrictions, also considered overloads of the conditional logical operators.  \n  \n## Example  \n In the following example, the conditional expression in the second `if` statement evaluates only the first operand because the operand returns `false`.  \n  \n [!code-cs[csRefOperators#48](../../../csharp/language-reference/operators/codesnippet/CSharp/conditional-and-operator_1.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[4,593],"nodes":[{"content":"&amp;&amp; Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,51],"content":"&amp;&amp; Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph><ph id=\"ph2\">&amp;amp;</ph> Operator (C# Reference) | Microsoft Docs","pos":[0,51],"source":"&amp;&amp; Operator (C# Reference) | Microsoft Docs"}]}],"pos":[6,60],"yaml":true}],"content":"title: \"&amp;&amp; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"&&_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"&& operator [C#]\"\n  - \"logical AND operator [C#]\"\nms.assetid: 2e4f0a1c-92a3-40f8-8e3b-17b607f20c31\ncaps.latest.revision: 18\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[600,634],"content":"&amp;&amp; Operator (C# Reference)","linkify":"&amp;&amp; Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;amp;</ph><ph id=\"ph2\">&amp;amp;</ph> Operator (C# Reference)","pos":[0,34],"source":"&amp;&amp; Operator (C# Reference)"}]},{"pos":[635,769],"content":"The conditional-AND operator (<ph id=\"ph1\">`&amp;&amp;`</ph>) performs a logical-AND of its <ph id=\"ph2\">`bool`</ph> operands, but only evaluates its second operand if necessary.","source":"The conditional-AND operator (`&&`) performs a logical-AND of its `bool` operands, but only evaluates its second operand if necessary."},{"pos":[778,785],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The operation","pos":[789,802]},{"content":"corresponds to the operation","pos":[833,861]},{"content":"except that if <ph id=\"ph1\">`x`</ph> is <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">`y`</ph> is not evaluated, because the result of the AND operation is <ph id=\"ph4\">`false`</ph> no matter what the value of <ph id=\"ph5\">`y`</ph>  is.","pos":[891,1031],"source":"except that if `x` is `false`, `y` is not evaluated, because the result of the AND operation is `false` no matter what the value of `y`  is."},{"content":"This is known as \"short-circuit\" evaluation.","pos":[1032,1076]},{"pos":[1083,1416],"content":"The conditional-AND operator cannot be overloaded, but overloads of the regular logical operators and operators <bpt id=\"p1\">[</bpt>true<ept id=\"p1\">](../../../csharp/language-reference/keywords/true.md)</ept> and <bpt id=\"p2\">[</bpt>false<ept id=\"p2\">](../../../csharp/language-reference/keywords/false.md)</ept> are, with certain restrictions, also considered overloads of the conditional logical operators.","source":"The conditional-AND operator cannot be overloaded, but overloads of the regular logical operators and operators [true](../../../csharp/language-reference/keywords/true.md) and [false](../../../csharp/language-reference/keywords/false.md) are, with certain restrictions, also considered overloads of the conditional logical operators."},{"pos":[1425,1432],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1436,1587],"content":"In the following example, the conditional expression in the second <ph id=\"ph1\">`if`</ph> statement evaluates only the first operand because the operand returns <ph id=\"ph2\">`false`</ph>.","source":"In the following example, the conditional expression in the second `if` statement evaluates only the first operand because the operand returns `false`."},{"pos":[1594,1718],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#48<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/conditional-and-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#48](../../../csharp/language-reference/operators/codesnippet/CSharp/conditional-and-operator_1.cs)]"},{"pos":[1727,1752],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[1866,1874],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1878,1938],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1942,2009],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[2013,2082],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"}]}