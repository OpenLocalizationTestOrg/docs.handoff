{"content":"---\ntitle: \"How to: Match a String against a Pattern (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"comparison operators, comparing strings\"\n  - \"pattern matching\"\n  - \"strings [Visual Basic], comparing\"\n  - \"string comparison [Visual Basic], operators\"\n  - \"Visual Basic code, operators\"\n  - \"pattern matching, string comparison\"\n  - \"string comparison [Visual Basic]\"\n  - \"Like operator [Visual Basic], pattern matching\"\n  - \"pattern matching, empty strings\"\n  - \"operators [Visual Basic], comparison\"\nms.assetid: 19a83804-b5af-4739-928b-ac93e64e457f\ncaps.latest.revision: 8\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Match a String against a Pattern (Visual Basic)\nIf you want to find out if an expression of the [String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md) satisfies a pattern, then you can use the [Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md).  \n  \n `Like` takes two operands. The left operand is a string expression, and the right operand is a string containing the pattern to be used for matching. `Like` returns a `Boolean` value indicating whether the string expression satisfies the pattern.  \n  \n You can match each character in the string expression against a specific character, a wildcard character, a character list, or a character range. The positions of the specifications in the pattern string correspond to the positions of the characters to be matched in the string expression.  \n  \n### To match a character in the string expression against a specific character  \n  \n-   Put the specific character directly in the pattern string. Certain special characters must be enclosed in brackets (`[ ]`). For more information, see [Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md).  \n  \n     The following example tests whether `myString` consists exactly of the single character `H`.  \n  \n     [!code-vb[VbVbalrOperators#70](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-match-a-string-against-a-pattern_1.vb)]  \n  \n### To match a character in the string expression against a wildcard character  \n  \n-   Put a question mark (`?`) in the pattern string. Any valid character in this position makes a successful match.  \n  \n     The following example tests whether `myString` consists of the single character `W` followed by exactly two characters of any values.  \n  \n     [!code-vb[VbVbalrOperators#71](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-match-a-string-against-a-pattern_2.vb)]  \n  \n### To match a character in the string expression against a list of characters  \n  \n-   Put brackets (`[ ]`) in the pattern string, and inside the brackets put the list of characters. Do not separate the characters with commas or any other separator. Any single character in the list makes a successful match.  \n  \n     The following example tests whether `myString` consists of any valid character followed by exactly one of the characters `A`, `C`, or `E`.  \n  \n     [!code-vb[VbVbalrOperators#72](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-match-a-string-against-a-pattern_3.vb)]  \n  \n     Note that this match is case-sensitive.  \n  \n### To match a character in the string expression against a range of characters  \n  \n-   Put brackets (`[ ]`) in the pattern string, and inside the brackets put the lowest and highest characters in the range, separated by a hyphen (`–`). Any single character within the range makes a successful match.  \n  \n     The following example tests whether `myString` consists of the characters `num` followed by exactly one of the characters `i`, `j`, `k`, `l`, `m`, or `n`.  \n  \n     [!code-vb[VbVbalrOperators#73](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-match-a-string-against-a-pattern_4.vb)]  \n  \n     Note that this match is case-sensitive.  \n  \n## Matching Empty Strings  \n `Like` treats the sequence `[]` as a zero-length string (`\"\"`). You can use `[]` to test whether the entire string expression is empty, but you cannot use it to test if a particular position in the string expression is empty. If an empty position is one of the options you need to test for, you can use `Like` more than once.  \n  \n#### To match a character in the string expression against a list of characters or no character  \n  \n1.  Call the `Like` operator twice on the same string expression, and connect the two calls with either the [Or Operator](../../../../visual-basic/language-reference/operators/or-operator.md) or the [OrElse Operator](../../../../visual-basic/language-reference/operators/orelse-operator.md).  \n  \n2.  In the pattern string for the first `Like` clause, include the character list, enclosed in brackets (`[ ]`).  \n  \n3.  In the pattern string for the second `Like` clause, do not put any character at the position in question.  \n  \n     The following example tests the seven-digit telephone number `phoneNum` for exactly three numeric digits, followed by a space, a hyphen (`–`), a period (`.`), or no character at all, followed by exactly four numeric digits.  \n  \n     [!code-vb[VbVbalrOperators#74](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/how-to-match-a-string-against-a-pattern_5.vb)]  \n  \n## See Also  \n [Comparison Operators](../../../../visual-basic/language-reference/operators/comparison-operators.md)   \n [Operators and Expressions](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)   \n [Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md)   \n [String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md)","nodes":[{"pos":[4,980],"embed":true,"restype":"x-metadata","content":"title: \"How to: Match a String against a Pattern (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"comparison operators, comparing strings\"\n  - \"pattern matching\"\n  - \"strings [Visual Basic], comparing\"\n  - \"string comparison [Visual Basic], operators\"\n  - \"Visual Basic code, operators\"\n  - \"pattern matching, string comparison\"\n  - \"string comparison [Visual Basic]\"\n  - \"Like operator [Visual Basic], pattern matching\"\n  - \"pattern matching, empty strings\"\n  - \"operators [Visual Basic], comparison\"\nms.assetid: 19a83804-b5af-4739-928b-ac93e64e457f\ncaps.latest.revision: 8\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Match a String against a Pattern (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,72],"content":"How to: Match a String against a Pattern (Visual Basic) | Microsoft Docs","nodes":[{"content":"How to: Match a String against a Pattern (Visual Basic) | Microsoft Docs","pos":[0,72]}]}],"path":["title"]}],"yml":true},{"pos":[987,1042],"content":"How to: Match a String against a Pattern (Visual Basic)","linkify":"How to: Match a String against a Pattern (Visual Basic)","nodes":[{"content":"How to: Match a String against a Pattern (Visual Basic)","pos":[0,55]}]},{"pos":[1043,1316],"content":"If you want to find out if an expression of the <bpt id=\"p1\">[</bpt>String Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept> satisfies a pattern, then you can use the <bpt id=\"p2\">[</bpt>Like Operator<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept>.","source":"If you want to find out if an expression of the [String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md) satisfies a pattern, then you can use the [Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md)."},{"content":"<ph id=\"ph1\">`Like`</ph> takes two operands.","pos":[1323,1349],"source":"`Like` takes two operands."},{"content":"The left operand is a string expression, and the right operand is a string containing the pattern to be used for matching.","pos":[1350,1472]},{"content":"<ph id=\"ph1\">`Like`</ph> returns a <ph id=\"ph2\">`Boolean`</ph> value indicating whether the string expression satisfies the pattern.","pos":[1473,1569],"source":"`Like` returns a `Boolean` value indicating whether the string expression satisfies the pattern."},{"content":"You can match each character in the string expression against a specific character, a wildcard character, a character list, or a character range.","pos":[1576,1721]},{"content":"The positions of the specifications in the pattern string correspond to the positions of the characters to be matched in the string expression.","pos":[1722,1865]},{"pos":[1875,1949],"content":"To match a character in the string expression against a specific character","linkify":"To match a character in the string expression against a specific character","nodes":[{"content":"To match a character in the string expression against a specific character","pos":[0,74]}]},{"content":"Put the specific character directly in the pattern string.","pos":[1959,2017]},{"content":"Certain special characters must be enclosed in brackets (<ph id=\"ph1\">`[ ]`</ph>).","pos":[2018,2082],"source":" Certain special characters must be enclosed in brackets (`[ ]`)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Like Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept>.","pos":[2083,2197],"source":" For more information, see [Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md)."},{"pos":[2208,2300],"content":"The following example tests whether <ph id=\"ph1\">`myString`</ph> consists exactly of the single character <ph id=\"ph2\">`H`</ph>.","source":"The following example tests whether `myString` consists exactly of the single character `H`."},{"pos":[2476,2550],"content":"To match a character in the string expression against a wildcard character","linkify":"To match a character in the string expression against a wildcard character","nodes":[{"content":"To match a character in the string expression against a wildcard character","pos":[0,74]}]},{"content":"Put a question mark (<ph id=\"ph1\">`?`</ph>) in the pattern string.","pos":[2560,2608],"source":"Put a question mark (`?`) in the pattern string."},{"content":"Any valid character in this position makes a successful match.","pos":[2609,2671]},{"pos":[2682,2815],"content":"The following example tests whether <ph id=\"ph1\">`myString`</ph> consists of the single character <ph id=\"ph2\">`W`</ph> followed by exactly two characters of any values.","source":"The following example tests whether `myString` consists of the single character `W` followed by exactly two characters of any values."},{"pos":[2991,3065],"content":"To match a character in the string expression against a list of characters","linkify":"To match a character in the string expression against a list of characters","nodes":[{"content":"To match a character in the string expression against a list of characters","pos":[0,74]}]},{"content":"Put brackets (<ph id=\"ph1\">`[ ]`</ph>) in the pattern string, and inside the brackets put the list of characters.","pos":[3075,3170],"source":"Put brackets (`[ ]`) in the pattern string, and inside the brackets put the list of characters."},{"content":"Do not separate the characters with commas or any other separator.","pos":[3171,3237]},{"content":"Any single character in the list makes a successful match.","pos":[3238,3296]},{"pos":[3307,3445],"content":"The following example tests whether <ph id=\"ph1\">`myString`</ph> consists of any valid character followed by exactly one of the characters <ph id=\"ph2\">`A`</ph>, <ph id=\"ph3\">`C`</ph>, or <ph id=\"ph4\">`E`</ph>.","source":"The following example tests whether `myString` consists of any valid character followed by exactly one of the characters `A`, `C`, or `E`."},{"content":"Note that this match is case-sensitive.","pos":[3622,3661]},{"pos":[3671,3746],"content":"To match a character in the string expression against a range of characters","linkify":"To match a character in the string expression against a range of characters","nodes":[{"content":"To match a character in the string expression against a range of characters","pos":[0,75]}]},{"content":"Put brackets (<ph id=\"ph1\">`[ ]`</ph>) in the pattern string, and inside the brackets put the lowest and highest characters in the range, separated by a hyphen (<ph id=\"ph2\">`–`</ph>).","pos":[3756,3904],"source":"Put brackets (`[ ]`) in the pattern string, and inside the brackets put the lowest and highest characters in the range, separated by a hyphen (`–`)."},{"content":"Any single character within the range makes a successful match.","pos":[3905,3968]},{"pos":[3979,4133],"content":"The following example tests whether <ph id=\"ph1\">`myString`</ph> consists of the characters <ph id=\"ph2\">`num`</ph> followed by exactly one of the characters <ph id=\"ph3\">`i`</ph>, <ph id=\"ph4\">`j`</ph>, <ph id=\"ph5\">`k`</ph>, <ph id=\"ph6\">`l`</ph>, <ph id=\"ph7\">`m`</ph>, or <ph id=\"ph8\">`n`</ph>.","source":"The following example tests whether `myString` consists of the characters `num` followed by exactly one of the characters `i`, `j`, `k`, `l`, `m`, or `n`."},{"content":"Note that this match is case-sensitive.","pos":[4310,4349]},{"pos":[4358,4380],"content":"Matching Empty Strings","linkify":"Matching Empty Strings","nodes":[{"content":"Matching Empty Strings","pos":[0,22]}]},{"content":"<ph id=\"ph1\">`Like`</ph> treats the sequence <ph id=\"ph2\">`[]`</ph> as a zero-length string (<ph id=\"ph3\">`\"\"`</ph>).","pos":[4384,4447],"source":"`Like` treats the sequence `[]` as a zero-length string (`\"\"`)."},{"content":"You can use <ph id=\"ph1\">`[]`</ph> to test whether the entire string expression is empty, but you cannot use it to test if a particular position in the string expression is empty.","pos":[4448,4609],"source":" You can use `[]` to test whether the entire string expression is empty, but you cannot use it to test if a particular position in the string expression is empty."},{"content":"If an empty position is one of the options you need to test for, you can use <ph id=\"ph1\">`Like`</ph> more than once.","pos":[4610,4709],"source":" If an empty position is one of the options you need to test for, you can use `Like` more than once."},{"pos":[4720,4810],"content":"To match a character in the string expression against a list of characters or no character","linkify":"To match a character in the string expression against a list of characters or no character","nodes":[{"content":"To match a character in the string expression against a list of characters or no character","pos":[0,90]}]},{"pos":[4820,5107],"content":"Call the <ph id=\"ph1\">`Like`</ph> operator twice on the same string expression, and connect the two calls with either the <bpt id=\"p1\">[</bpt>Or Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/or-operator.md)</ept> or the <bpt id=\"p2\">[</bpt>OrElse Operator<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/orelse-operator.md)</ept>.","source":"Call the `Like` operator twice on the same string expression, and connect the two calls with either the [Or Operator](../../../../visual-basic/language-reference/operators/or-operator.md) or the [OrElse Operator](../../../../visual-basic/language-reference/operators/orelse-operator.md)."},{"pos":[5117,5225],"content":"In the pattern string for the first <ph id=\"ph1\">`Like`</ph> clause, include the character list, enclosed in brackets (<ph id=\"ph2\">`[ ]`</ph>).","source":"In the pattern string for the first `Like` clause, include the character list, enclosed in brackets (`[ ]`)."},{"pos":[5235,5340],"content":"In the pattern string for the second <ph id=\"ph1\">`Like`</ph> clause, do not put any character at the position in question.","source":"In the pattern string for the second `Like` clause, do not put any character at the position in question."},{"pos":[5351,5574],"content":"The following example tests the seven-digit telephone number <ph id=\"ph1\">`phoneNum`</ph> for exactly three numeric digits, followed by a space, a hyphen (<ph id=\"ph2\">`–`</ph>), a period (<ph id=\"ph3\">`.`</ph>), or no character at all, followed by exactly four numeric digits.","source":"The following example tests the seven-digit telephone number `phoneNum` for exactly three numeric digits, followed by a space, a hyphen (`–`), a period (`.`), or no character at all, followed by exactly four numeric digits."},{"pos":[5749,5757],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Comparison Operators<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/comparison-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[5761,5863],"source":"[Comparison Operators](../../../../visual-basic/language-reference/operators/comparison-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5867,5992],"source":"[Operators and Expressions](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Like Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[5996,6084],"source":"[Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>String Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept>","pos":[6088,6182],"source":"[String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md)"}]}