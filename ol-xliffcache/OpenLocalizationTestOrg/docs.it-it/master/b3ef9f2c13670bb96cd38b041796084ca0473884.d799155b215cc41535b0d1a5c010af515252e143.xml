{"content":"---\ntitle: \"Synchronous and Asynchronous Operations | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"service contracts [WCF], synchronous operations\"\n  - \"service contracts [WCF], asynchronous operations\"\nms.assetid: db8a51cb-67e6-411b-9035-e5821ed350c9\ncaps.latest.revision: 24\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Synchronous and Asynchronous Operations\nThis topic discusses implementing and calling asynchronous service operations.  \n  \n Many applications call methods asynchronously because it enables the application to continue doing useful work while the method call runs. [!INCLUDE[indigo1](../../../includes/indigo1-md.md)] services and clients can participate in asynchronous operation calls at two distinct levels of the application, which provide [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] applications even more flexibility to maximize throughput balanced against interactivity.  \n  \n## Types of Asynchronous Operations  \n All service contracts in [!INCLUDE[indigo2](../../../includes/indigo2-md.md)], no matter the parameters types and return values, use [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] attributes to specify a particular message exchange pattern between client and service. [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] automatically routes inbound and outbound messages to the appropriate service operation or running client code.  \n  \n The client possesses only the service contract, which specifies the message exchange pattern for a particular operation. Clients can offer the developer any programming model they choose, so long as the underlying message exchange pattern is observed. So, too, can services implement operations in any manner, so long as the specified message pattern is observed.  \n  \n The independence of the service contract from either the service or client implementation enables the following forms of asynchronous execution in [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] applications:  \n  \n-   Clients can invoke request/response operations asynchronously using a synchronous message exchange.  \n  \n-   Services can implement a request/response operation asynchronously using a synchronous message exchange.  \n  \n-   Message exchanges can be one-way, regardless of the implementation of the client or service.  \n  \n### Suggested Asynchronous Scenarios  \n Use an asynchronous approach in a service operation implementation if the operation service implementation makes a blocking call, such as doing I/O work. When you are in an asynchronous operation implementation, try to call asynchronous operations and methods to extend the asynchronous call path as far as possible. For example, call a `BeginOperationTwo()` from within `BeginOperationOne()`.  \n  \n-   Use an asynchronous approach in a client or calling application in the following cases:  \n  \n-   If you are invoking operations from a middle-tier application. ([!INCLUDE[crabout](../../../includes/crabout-md.md)] such scenarios, see [Middle-Tier Client Applications](../../../docs/framework/wcf/feature-details/middle-tier-client-applications.md).)  \n  \n-   If you are invoking operations within an ASP.NET page, use asynchronous pages.  \n  \n-   If you are invoking operations from any application that is single threaded, such as Windows Forms or [!INCLUDE[avalon1](../../../includes/avalon1-md.md)]. When using the event-based asynchronous calling model, the result event is raised on the UI thread, adding responsiveness to the application without requiring you to handle multiple threads yourself.  \n  \n-   In general, if you have a choice between a synchronous and asynchronous call, choose the asynchronous call.  \n  \n### Implementing an Asynchronous Service Operation  \n Asynchronous operations can be implemented by using one of the three following methods:  \n  \n1.  The task-based asynchronous pattern  \n  \n2.  The event-based asynchronous pattern  \n  \n3.  The IAsyncResult asynchronous pattern  \n  \n#### Task-Based Asynchronous Pattern  \n The task-based asynchronous pattern is the preferred way to implement asynchronous operations because it is the easiest and most straight forward. To use this method simply implement your service operation and specify a return type of Task\\<T>, where T is the type returned by the logical operation. For example:  \n  \n```csharp  \npublic class SampleService:ISampleService   \n{   \n   // ...  \n   public async Task<string> SampleMethodTaskAsync(string msg)   \n   {   \n      return Task<string>.Factory.StartNew(() =>   \n      {   \n         return msg;   \n      });   \n   }  \n   // ...  \n}  \n```  \n  \n The SampleMethodTaskAsync operation returns Task\\<string> because the logical operation returns a string. For more information about the task-based asynchronous pattern, see [The Task-Based Asynchronous Pattern](http://go.microsoft.com/fwlink/?LinkId=232504).  \n  \n> [!WARNING]\n>  When using the task-based asynchronous pattern, a T:System.AggregateException may be thrown if an exception occurs while waiting on the completion of the operation. This exception may occur on the client or services  \n  \n#### Event-Based Asynchronous Pattern  \n A service that supports the Event-based Asynchronous Pattern will have one or more operations named MethodNameAsync. These methods may mirror synchronous versions, which perform the same operation on the current thread. The class may also have a MethodNameCompleted event and it may have a MethodNameAsyncCancel (or simply CancelAsync) method. A client wishing to call the operation will define an event handler to be called when the operation completes,  \n  \n The following code snippet illustrates how to declare asynchronous operations using the event-based asynchronous pattern.  \n  \n```csharp  \npublic class AsyncExample  \n{  \n    // Synchronous methods.  \n    public int Method1(string param);  \n    public void Method2(double param);  \n  \n    // Asynchronous methods.  \n    public void Method1Async(string param);  \n    public void Method1Async(string param, object userState);  \n    public event Method1CompletedEventHandler Method1Completed;  \n  \n    public void Method2Async(double param);  \n    public void Method2Async(double param, object userState);  \n    public event Method2CompletedEventHandler Method2Completed;  \n  \n    public void CancelAsync(object userState);  \n  \n    public bool IsBusy { get; }  \n  \n    // Class implementation not shown.  \n}  \n```  \n  \n For more information about the Event-based Asynchronous Pattern, see [The Event-Based Asynchronous Pattern](http://go.microsoft.com/fwlink/?LinkId=232515).  \n  \n#### IAsyncResult Asynchronous Pattern  \n A service operation can be implemented in an asynchronous fashion using the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] asynchronous programming pattern and marking the `<Begin>` method with the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property set to `true`. In this case, the asynchronous operation is exposed in metadata in the same form as a synchronous operation: It is exposed as a single operation with a request message and a correlated response message. Client programming models then have a choice. They can represent this pattern as a synchronous operation or as an asynchronous one, so long as when the service is invoked a request-response message exchange takes place.  \n  \n In general, with the asynchronous nature of the systems, you should not take a dependency on the threads.  The most reliable way of passing data to various stages of operation dispatch processing is to use extensions.  \n  \n For an example, see [How to: Implement an Asynchronous Service Operation](../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md).  \n  \n To define a contract operation `X` that is executed asynchronously regardless of how it is called in the client application:  \n  \n-   Define two methods using the pattern `BeginOperation` and `EndOperation`.  \n  \n-   The `BeginOperation` method includes `in` and `ref` parameters for the operation and returns an <xref:System.IAsyncResult> type.  \n  \n-   The `EndOperation` method includes an <xref:System.IAsyncResult> parameter as well as the `out` and `ref` parameters and returns the operations return type.  \n  \n For example, see the following method.  \n  \n```csharp  \nint DoWork(string data, ref string inout, out string outonly)  \n```  \n  \n```vb  \nFunction DoWork(ByVal data As String, ByRef inout As String, _out outonly As out) As Integer  \n```  \n  \n To create an asynchronous operation, the two methods would be:  \n  \n```csharp  \n[OperationContract(AsyncPattern=true)]IAsyncResult BeginDoWork(string data,                           ref string inout,                           AsyncCallback callback,                           object state);int EndDoWork(ref string inout, out string outonly, IAsyncResult result);  \n```  \n  \n```vb  \n<OperationContract(AsyncPattern := True)>  _Function BeginDoWork(ByVal data As String, _                 ByRef inout As String, _                 ByVal callback As AsyncCallback, _                 ByVal state As Object) _As IAsyncResult Function EndDoWork(ByRef inout As String, _        ByRef outonly As String, _        ByVal result As IAsyncResult) _As Integer  \n```  \n  \n> [!NOTE]\n>  The <xref:System.ServiceModel.OperationContractAttribute> attribute is applied only to the `BeginDoWork` method. The resulting contract has one WSDL operation named `DoWork`.  \n  \n### Client-Side Asynchronous Invocations  \n A [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client application can use any of three asynchronous calling models described previously  \n  \n When using the task-based model, simply call the operation using the await keyword as shown in the following code snippet.  \n  \n```  \nawait simpleServiceClient.SampleMethodTaskAsync(\"hello, world\");  \n```  \n  \n Using the event-based asynchronous pattern only requires adding an event handler to receive a notification of the response -- and the resulting event is raised on the user interface thread automatically. To use this approach, specify both the **/async** and **/tcv:Version35** command options with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md), as in the following example.  \n  \n```  \nsvcutil http://localhost:8000/servicemodelsamples/service/mex /async /tcv:Version35  \n```  \n  \n When this is done, Svcutil.exe generates a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client class with the event infrastructure that enables the calling application to implement and assign an event handler to receive the response and take the appropriate action. For a complete example, see [How to: Call Service Operations Asynchronously](../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md).  \n  \n The event-based asynchronous model, however, is only available in [!INCLUDE[netfx35_long](../../../includes/netfx35-long-md.md)]. In addition, it is not supported even in [!INCLUDE[netfx35_short](../../../includes/netfx35-short-md.md)] when a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client channel is created by using a <xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName>. With [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client channel objects, you must use <xref:System.IAsyncResult?displayProperty=fullName> objects to invoke your operations asynchronously. To use this approach, specify the **/async** command option with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md), as in the following example.  \n  \n```  \nsvcutil http://localhost:8000/servicemodelsamples/service/mex /async   \n```  \n  \n This generates a service contract in which each operation is modeled as a `<Begin>` method with the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property set to `true` and a corresponding `<End>` method. For a complete example using a <xref:System.ServiceModel.ChannelFactory%601>, see [How to: Call Operations Asynchronously Using a Channel Factory](../../../docs/framework/wcf/feature-details/how-to-call-operations-asynchronously-using-a-channel-factory.md).  \n  \n In either case, applications can invoke an operation asynchronously even if the service is implemented synchronously, in the same way that an application can use the same pattern to invoke asynchronously a local synchronous method. How the operation is implemented is not significant to the client; when the response message arrives, its content is dispatched to the client's asynchronous <`End`> method and the client retrieves the information.  \n  \n### One-Way Message Exchange Patterns  \n You can also create an asynchronous message exchange pattern in which one-way operations (operations for which the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A?displayProperty=fullName> is `true` have no correlated response) can be sent in either direction by the client or service independently of the other side. (This uses the duplex message exchange pattern with one-way messages.) In this case, the service contract specifies a one-way message exchange that either side can implement as asynchronous calls or implementations, or not, as appropriate. Generally, when the contract is an exchange of one-way messages, the implementations can largely be asynchronous because once a message is sent the application does not wait for a reply and can continue doing other work.  \n  \n### Event-based Asynchronous Clients and Message Contracts  \n The design guidelines for the event-based asynchronous model state that if more than one value is returned, one value is returned as the `Result` property and the others are returned as properties on the <xref:System.EventArgs> object. One result of this is that if a client imports metadata using the event-based asynchronous command options and the operation returns more than one value, the default <xref:System.EventArgs> object returns one value as the `Result` property and the remainder are properties of the <xref:System.EventArgs> object.  \n  \n If you want to receive the message object as the `Result` property and have the returned values as properties on that object, use the **/messageContract** command option. This generates a signature that returns the response message as the `Result` property on the <xref:System.EventArgs> object. All internal return values are then properties of the response message object.  \n  \n## See Also  \n <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A>   \n <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A>","nodes":[{"pos":[12,68],"content":"Synchronous and Asynchronous Operations | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Synchronous and Asynchronous Operations | Microsoft Docs","pos":[0,56]}]},{"pos":[498,537],"content":"Synchronous and Asynchronous Operations","linkify":"Synchronous and Asynchronous Operations","nodes":[{"content":"Synchronous and Asynchronous Operations","pos":[0,39]}]},{"content":"This topic discusses implementing and calling asynchronous service operations.","pos":[538,616]},{"content":"Many applications call methods asynchronously because it enables the application to continue doing useful work while the method call runs.","pos":[623,761]},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> services and clients can participate in asynchronous operation calls at two distinct levels of the application, which provide <ph id=\"ph2\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> applications even more flexibility to maximize throughput balanced against interactivity.","pos":[762,1083],"source":"[!INCLUDE[indigo1](../../../includes/indigo1-md.md)] services and clients can participate in asynchronous operation calls at two distinct levels of the application, which provide [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] applications even more flexibility to maximize throughput balanced against interactivity."},{"pos":[1092,1124],"content":"Types of Asynchronous Operations","linkify":"Types of Asynchronous Operations","nodes":[{"content":"Types of Asynchronous Operations","pos":[0,32]}]},{"content":"All service contracts in <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph>, no matter the parameters types and return values, use <ph id=\"ph2\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> attributes to specify a particular message exchange pattern between client and service.","pos":[1128,1401],"source":"All service contracts in [!INCLUDE[indigo2](../../../includes/indigo2-md.md)], no matter the parameters types and return values, use [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] attributes to specify a particular message exchange pattern between client and service."},{"content":"<ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> automatically routes inbound and outbound messages to the appropriate service operation or running client code.","pos":[1402,1566],"source":"[!INCLUDE[indigo2](../../../includes/indigo2-md.md)] automatically routes inbound and outbound messages to the appropriate service operation or running client code."},{"content":"The client possesses only the service contract, which specifies the message exchange pattern for a particular operation.","pos":[1573,1693]},{"content":"Clients can offer the developer any programming model they choose, so long as the underlying message exchange pattern is observed.","pos":[1694,1824]},{"content":"So, too, can services implement operations in any manner, so long as the specified message pattern is observed.","pos":[1825,1936]},{"pos":[1943,2156],"content":"The independence of the service contract from either the service or client implementation enables the following forms of asynchronous execution in <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> applications:","source":"The independence of the service contract from either the service or client implementation enables the following forms of asynchronous execution in [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] applications:"},{"content":"Clients can invoke request/response operations asynchronously using a synchronous message exchange.","pos":[2166,2265]},{"content":"Services can implement a request/response operation asynchronously using a synchronous message exchange.","pos":[2275,2379]},{"content":"Message exchanges can be one-way, regardless of the implementation of the client or service.","pos":[2389,2481]},{"pos":[2491,2523],"content":"Suggested Asynchronous Scenarios","linkify":"Suggested Asynchronous Scenarios","nodes":[{"content":"Suggested Asynchronous Scenarios","pos":[0,32]}]},{"content":"Use an asynchronous approach in a service operation implementation if the operation service implementation makes a blocking call, such as doing I/O work.","pos":[2527,2680]},{"content":"When you are in an asynchronous operation implementation, try to call asynchronous operations and methods to extend the asynchronous call path as far as possible.","pos":[2681,2843]},{"content":"For example, call a <ph id=\"ph1\">`BeginOperationTwo()`</ph> from within <ph id=\"ph2\">`BeginOperationOne()`</ph>.","pos":[2844,2920],"source":" For example, call a `BeginOperationTwo()` from within `BeginOperationOne()`."},{"content":"Use an asynchronous approach in a client or calling application in the following cases:","pos":[2930,3017]},{"content":"If you are invoking operations from a middle-tier application.","pos":[3027,3089]},{"content":"(<ph id=\"ph1\">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> such scenarios, see <bpt id=\"p1\">[</bpt>Middle-Tier Client Applications<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/middle-tier-client-applications.md)</ept>.)","pos":[3090,3279],"source":" ([!INCLUDE[crabout](../../../includes/crabout-md.md)] such scenarios, see [Middle-Tier Client Applications](../../../docs/framework/wcf/feature-details/middle-tier-client-applications.md).)"},{"content":"If you are invoking operations within an ASP.NET page, use asynchronous pages.","pos":[3289,3367]},{"content":"If you are invoking operations from any application that is single threaded, such as Windows Forms or <ph id=\"ph1\">[!INCLUDE[avalon1](../../../includes/avalon1-md.md)]</ph>.","pos":[3377,3532],"source":"If you are invoking operations from any application that is single threaded, such as Windows Forms or [!INCLUDE[avalon1](../../../includes/avalon1-md.md)]."},{"content":"When using the event-based asynchronous calling model, the result event is raised on the UI thread, adding responsiveness to the application without requiring you to handle multiple threads yourself.","pos":[3533,3732]},{"content":"In general, if you have a choice between a synchronous and asynchronous call, choose the asynchronous call.","pos":[3742,3849]},{"pos":[3859,3905],"content":"Implementing an Asynchronous Service Operation","linkify":"Implementing an Asynchronous Service Operation","nodes":[{"content":"Implementing an Asynchronous Service Operation","pos":[0,46]}]},{"content":"Asynchronous operations can be implemented by using one of the three following methods:","pos":[3909,3996]},{"content":"The task-based asynchronous pattern","pos":[4006,4041]},{"content":"The event-based asynchronous pattern","pos":[4051,4087]},{"content":"The IAsyncResult asynchronous pattern","pos":[4097,4134]},{"pos":[4145,4176],"content":"Task-Based Asynchronous Pattern","linkify":"Task-Based Asynchronous Pattern","nodes":[{"content":"Task-Based Asynchronous Pattern","pos":[0,31]}]},{"content":"The task-based asynchronous pattern is the preferred way to implement asynchronous operations because it is the easiest and most straight forward.","pos":[4180,4326]},{"content":"To use this method simply implement your service operation and specify a return type of Task<ph id=\"ph1\">\\&lt;</ph>T&gt;, where T is the type returned by the logical operation.","pos":[4327,4479],"source":" To use this method simply implement your service operation and specify a return type of Task\\<T>, where T is the type returned by the logical operation."},{"content":"For example:","pos":[4480,4492]},{"content":"The SampleMethodTaskAsync operation returns Task<ph id=\"ph1\">\\&lt;</ph>string&gt; because the logical operation returns a string.","pos":[4779,4884],"source":"The SampleMethodTaskAsync operation returns Task\\<string> because the logical operation returns a string."},{"content":"For more information about the task-based asynchronous pattern, see <bpt id=\"p1\">[</bpt>The Task-Based Asynchronous Pattern<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=232504)</ept>.","pos":[4885,5038],"source":" For more information about the task-based asynchronous pattern, see [The Task-Based Asynchronous Pattern](http://go.microsoft.com/fwlink/?LinkId=232504)."},{"pos":[5046,5275],"content":"[!WARNING]\n When using the task-based asynchronous pattern, a T:System.AggregateException may be thrown if an exception occurs while waiting on the completion of the operation. This exception may occur on the client or services","leadings":["","> "],"nodes":[{"content":" When using the task-based asynchronous pattern, a T:System.AggregateException may be thrown if an exception occurs while waiting on the completion of the operation. This exception may occur on the client or services","pos":[11,227],"nodes":[{"content":"When using the task-based asynchronous pattern, a T:System.AggregateException may be thrown if an exception occurs while waiting on the completion of the operation.","pos":[1,165]},{"content":"This exception may occur on the client or services","pos":[166,216]}]}]},{"pos":[5286,5318],"content":"Event-Based Asynchronous Pattern","linkify":"Event-Based Asynchronous Pattern","nodes":[{"content":"Event-Based Asynchronous Pattern","pos":[0,32]}]},{"content":"A service that supports the Event-based Asynchronous Pattern will have one or more operations named MethodNameAsync.","pos":[5322,5438]},{"content":"These methods may mirror synchronous versions, which perform the same operation on the current thread.","pos":[5439,5541]},{"content":"The class may also have a MethodNameCompleted event and it may have a MethodNameAsyncCancel (or simply CancelAsync) method.","pos":[5542,5665]},{"content":"A client wishing to call the operation will define an event handler to be called when the operation completes,","pos":[5666,5776]},{"content":"The following code snippet illustrates how to declare asynchronous operations using the event-based asynchronous pattern.","pos":[5783,5904]},{"pos":[6601,6756],"content":"For more information about the Event-based Asynchronous Pattern, see <bpt id=\"p1\">[</bpt>The Event-Based Asynchronous Pattern<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=232515)</ept>.","source":"For more information about the Event-based Asynchronous Pattern, see [The Event-Based Asynchronous Pattern](http://go.microsoft.com/fwlink/?LinkId=232515)."},{"pos":[6767,6800],"content":"IAsyncResult Asynchronous Pattern","linkify":"IAsyncResult Asynchronous Pattern","nodes":[{"content":"IAsyncResult Asynchronous Pattern","pos":[0,33]}]},{"content":"A service operation can be implemented in an asynchronous fashion using the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> asynchronous programming pattern and marking the <ph id=\"ph2\">`&lt;Begin&gt;`</ph> method with the <ph id=\"ph3\">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property set to <ph id=\"ph4\">`true`</ph>.","pos":[6804,7109],"source":"A service operation can be implemented in an asynchronous fashion using the [!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)] asynchronous programming pattern and marking the `<Begin>` method with the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property set to `true`."},{"content":"In this case, the asynchronous operation is exposed in metadata in the same form as a synchronous operation: It is exposed as a single operation with a request message and a correlated response message.","pos":[7110,7312]},{"content":"Client programming models then have a choice.","pos":[7313,7358]},{"content":"They can represent this pattern as a synchronous operation or as an asynchronous one, so long as when the service is invoked a request-response message exchange takes place.","pos":[7359,7532]},{"content":"In general, with the asynchronous nature of the systems, you should not take a dependency on the threads.","pos":[7539,7644]},{"content":"The most reliable way of passing data to various stages of operation dispatch processing is to use extensions.","pos":[7646,7756]},{"pos":[7763,7920],"content":"For an example, see <bpt id=\"p1\">[</bpt>How to: Implement an Asynchronous Service Operation<ept id=\"p1\">](../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)</ept>.","source":"For an example, see [How to: Implement an Asynchronous Service Operation](../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)."},{"pos":[7927,8051],"content":"To define a contract operation <ph id=\"ph1\">`X`</ph> that is executed asynchronously regardless of how it is called in the client application:","source":"To define a contract operation `X` that is executed asynchronously regardless of how it is called in the client application:"},{"pos":[8061,8134],"content":"Define two methods using the pattern <ph id=\"ph1\">`BeginOperation`</ph> and <ph id=\"ph2\">`EndOperation`</ph>.","source":"Define two methods using the pattern `BeginOperation` and `EndOperation`."},{"pos":[8144,8272],"content":"The <ph id=\"ph1\">`BeginOperation`</ph> method includes <ph id=\"ph2\">`in`</ph> and <ph id=\"ph3\">`ref`</ph> parameters for the operation and returns an <ph id=\"ph4\">&lt;xref:System.IAsyncResult&gt;</ph> type.","source":"The `BeginOperation` method includes `in` and `ref` parameters for the operation and returns an <xref:System.IAsyncResult> type."},{"pos":[8282,8438],"content":"The <ph id=\"ph1\">`EndOperation`</ph> method includes an <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> parameter as well as the <ph id=\"ph3\">`out`</ph> and <ph id=\"ph4\">`ref`</ph> parameters and returns the operations return type.","source":"The `EndOperation` method includes an <xref:System.IAsyncResult> parameter as well as the `out` and `ref` parameters and returns the operations return type."},{"content":"For example, see the following method.","pos":[8445,8483]},{"content":"To create an asynchronous operation, the two methods would be:","pos":[8687,8749]},{"pos":[9447,9632],"content":"[!NOTE]\n The <xref:System.ServiceModel.OperationContractAttribute> attribute is applied only to the `BeginDoWork` method. The resulting contract has one WSDL operation named `DoWork`.","leadings":["","> "],"nodes":[{"content":" The <xref:System.ServiceModel.OperationContractAttribute> attribute is applied only to the `BeginDoWork` method. The resulting contract has one WSDL operation named `DoWork`.","pos":[8,183],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute is applied only to the <ph id=\"ph2\">`BeginDoWork`</ph> method.","pos":[1,113],"source":" The <xref:System.ServiceModel.OperationContractAttribute> attribute is applied only to the `BeginDoWork` method."},{"content":"The resulting contract has one WSDL operation named <ph id=\"ph1\">`DoWork`</ph>.","pos":[114,175],"source":" The resulting contract has one WSDL operation named `DoWork`."}]}]},{"pos":[9642,9678],"content":"Client-Side Asynchronous Invocations","linkify":"Client-Side Asynchronous Invocations","nodes":[{"content":"Client-Side Asynchronous Invocations","pos":[0,36]}]},{"pos":[9682,9825],"content":"A <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client application can use any of three asynchronous calling models described previously","source":"A [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client application can use any of three asynchronous calling models described previously"},{"content":"When using the task-based model, simply call the operation using the await keyword as shown in the following code snippet.","pos":[9832,9954]},{"content":"Using the event-based asynchronous pattern only requires adding an event handler to receive a notification of the response -- and the resulting event is raised on the user interface thread automatically.","pos":[10043,10246]},{"content":"To use this approach, specify both the <bpt id=\"p1\">**</bpt>/async<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>/tcv:Version35<ept id=\"p2\">**</ept> command options with the <bpt id=\"p3\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p3\">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>, as in the following example.","pos":[10247,10504],"source":" To use this approach, specify both the **/async** and **/tcv:Version35** command options with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md), as in the following example."},{"content":"When this is done, Svcutil.exe generates a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client class with the event infrastructure that enables the calling application to implement and assign an event handler to receive the response and take the appropriate action.","pos":[10612,10885],"source":"When this is done, Svcutil.exe generates a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client class with the event infrastructure that enables the calling application to implement and assign an event handler to receive the response and take the appropriate action."},{"content":"For a complete example, see <bpt id=\"p1\">[</bpt>How to: Call Service Operations Asynchronously<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)</ept>.","pos":[10886,11061],"source":" For a complete example, see [How to: Call Service Operations Asynchronously](../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)."},{"content":"The event-based asynchronous model, however, is only available in <ph id=\"ph1\">[!INCLUDE[netfx35_long](../../../includes/netfx35-long-md.md)]</ph>.","pos":[11068,11197],"source":"The event-based asynchronous model, however, is only available in [!INCLUDE[netfx35_long](../../../includes/netfx35-long-md.md)]."},{"content":"In addition, it is not supported even in <ph id=\"ph1\">[!INCLUDE[netfx35_short](../../../includes/netfx35-short-md.md)]</ph> when a <ph id=\"ph2\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client channel is created by using a <ph id=\"ph3\">&lt;xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName&gt;</ph>.","pos":[11198,11472],"source":" In addition, it is not supported even in [!INCLUDE[netfx35_short](../../../includes/netfx35-short-md.md)] when a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client channel is created by using a <xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName>."},{"content":"With <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client channel objects, you must use <ph id=\"ph2\">&lt;xref:System.IAsyncResult?displayProperty=fullName&gt;</ph> objects to invoke your operations asynchronously.","pos":[11473,11669],"source":" With [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client channel objects, you must use <xref:System.IAsyncResult?displayProperty=fullName> objects to invoke your operations asynchronously."},{"content":"To use this approach, specify the <bpt id=\"p1\">**</bpt>/async<ept id=\"p1\">**</ept> command option with the <bpt id=\"p2\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p2\">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>, as in the following example.","pos":[11670,11898],"source":" To use this approach, specify the **/async** command option with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md), as in the following example."},{"content":"This generates a service contract in which each operation is modeled as a <ph id=\"ph1\">`&lt;Begin&gt;`</ph> method with the <ph id=\"ph2\">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property set to <ph id=\"ph3\">`true`</ph> and a corresponding <ph id=\"ph4\">`&lt;End&gt;`</ph> method.","pos":[11992,12220],"source":"This generates a service contract in which each operation is modeled as a `<Begin>` method with the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property set to `true` and a corresponding `<End>` method."},{"content":"For a complete example using a <ph id=\"ph1\">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>, see <bpt id=\"p1\">[</bpt>How to: Call Operations Asynchronously Using a Channel Factory<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/how-to-call-operations-asynchronously-using-a-channel-factory.md)</ept>.","pos":[12221,12478],"source":" For a complete example using a <xref:System.ServiceModel.ChannelFactory%601>, see [How to: Call Operations Asynchronously Using a Channel Factory](../../../docs/framework/wcf/feature-details/how-to-call-operations-asynchronously-using-a-channel-factory.md)."},{"content":"In either case, applications can invoke an operation asynchronously even if the service is implemented synchronously, in the same way that an application can use the same pattern to invoke asynchronously a local synchronous method.","pos":[12485,12716]},{"content":"How the operation is implemented is not significant to the client; when the response message arrives, its content is dispatched to the client's asynchronous &lt;<ph id=\"ph1\">`End`</ph>&gt; method and the client retrieves the information.","pos":[12717,12930],"source":" How the operation is implemented is not significant to the client; when the response message arrives, its content is dispatched to the client's asynchronous <`End`> method and the client retrieves the information."},{"pos":[12940,12973],"content":"One-Way Message Exchange Patterns","linkify":"One-Way Message Exchange Patterns","nodes":[{"content":"One-Way Message Exchange Patterns","pos":[0,33]}]},{"content":"You can also create an asynchronous message exchange pattern in which one-way operations (operations for which the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A?displayProperty=fullName&gt;</ph> is <ph id=\"ph2\">`true`</ph> have no correlated response) can be sent in either direction by the client or service independently of the other side.","pos":[12977,13311],"source":"You can also create an asynchronous message exchange pattern in which one-way operations (operations for which the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A?displayProperty=fullName> is `true` have no correlated response) can be sent in either direction by the client or service independently of the other side."},{"content":"(This uses the duplex message exchange pattern with one-way messages.) In this case, the service contract specifies a one-way message exchange that either side can implement as asynchronous calls or implementations, or not, as appropriate.","pos":[13312,13551]},{"content":"Generally, when the contract is an exchange of one-way messages, the implementations can largely be asynchronous because once a message is sent the application does not wait for a reply and can continue doing other work.","pos":[13552,13772]},{"pos":[13782,13836],"content":"Event-based Asynchronous Clients and Message Contracts","linkify":"Event-based Asynchronous Clients and Message Contracts","nodes":[{"content":"Event-based Asynchronous Clients and Message Contracts","pos":[0,54]}]},{"content":"The design guidelines for the event-based asynchronous model state that if more than one value is returned, one value is returned as the <ph id=\"ph1\">`Result`</ph> property and the others are returned as properties on the <ph id=\"ph2\">&lt;xref:System.EventArgs&gt;</ph> object.","pos":[13840,14075],"source":"The design guidelines for the event-based asynchronous model state that if more than one value is returned, one value is returned as the `Result` property and the others are returned as properties on the <xref:System.EventArgs> object."},{"content":"One result of this is that if a client imports metadata using the event-based asynchronous command options and the operation returns more than one value, the default <ph id=\"ph1\">&lt;xref:System.EventArgs&gt;</ph> object returns one value as the <ph id=\"ph2\">`Result`</ph> property and the remainder are properties of the <ph id=\"ph3\">&lt;xref:System.EventArgs&gt;</ph> object.","pos":[14076,14387],"source":" One result of this is that if a client imports metadata using the event-based asynchronous command options and the operation returns more than one value, the default <xref:System.EventArgs> object returns one value as the `Result` property and the remainder are properties of the <xref:System.EventArgs> object."},{"content":"If you want to receive the message object as the <ph id=\"ph1\">`Result`</ph> property and have the returned values as properties on that object, use the <bpt id=\"p1\">**</bpt>/messageContract<ept id=\"p1\">**</ept> command option.","pos":[14394,14564],"source":"If you want to receive the message object as the `Result` property and have the returned values as properties on that object, use the **/messageContract** command option."},{"content":"This generates a signature that returns the response message as the <ph id=\"ph1\">`Result`</ph> property on the <ph id=\"ph2\">&lt;xref:System.EventArgs&gt;</ph> object.","pos":[14565,14689],"source":" This generates a signature that returns the response message as the `Result` property on the <xref:System.EventArgs> object."},{"content":"All internal return values are then properties of the response message object.","pos":[14690,14768]},{"pos":[14777,14785],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}