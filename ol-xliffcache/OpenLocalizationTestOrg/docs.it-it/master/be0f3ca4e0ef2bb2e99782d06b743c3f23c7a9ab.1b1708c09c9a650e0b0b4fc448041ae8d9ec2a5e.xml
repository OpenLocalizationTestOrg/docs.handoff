{"content":"---\ntitle: \"Callback Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"callback function\"\n  - \"platform invoke, calling unmanaged functions\"\nms.assetid: c0aa8533-3b3b-42e8-9f60-84919793098c\ncaps.latest.revision: 6\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Callback Functions\nA callback function is code within a managed application that helps an unmanaged DLL function complete a task. Calls to a callback function pass indirectly from a managed application, through a DLL function, and back to the managed implementation. Some of the many DLL functions called with platform invoke require a callback function in managed code to run properly.  \n  \n To call most DLL functions from managed code, you create a managed definition of the function and then call it. The process is straightforward.  \n  \n Using a DLL function that requires a callback function has some additional steps. First, you must determine whether the function requires a callback by looking at the documentation for the function. Next, you have to create the callback function in your managed application. Finally, you call the DLL function, passing a pointer to the callback function as an argument. The following illustration summarizes these steps.  \n  \n ![Platform invoke callback](../../../docs/framework/interop/media/pinvokecallback.gif \"pinvokecallback\")  \nCallback function and implementation  \n  \n Callback functions are ideal for use in situations in which a task is performed repeatedly. Another common usage is with enumeration functions, such as **EnumFontFamilies**, **EnumPrinters**, and **EnumWindows** in the Win32 API. The **EnumWindows** function enumerates through all existing windows on your computer, calling the callback function to perform a task on each window. For instructions and an example, see [How to: Implement Callback Functions](../../../docs/framework/interop/how-to-implement-callback-functions.md).  \n  \n## See Also  \n [How to: Implement Callback Functions](../../../docs/framework/interop/how-to-implement-callback-functions.md)   \n [Calling a DLL Function](../../../docs/framework/interop/calling-a-dll-function.md)","nodes":[{"pos":[4,497],"nodes":[{"content":"Callback Functions | Microsoft Docs","nodes":[{"pos":[0,35],"content":"Callback Functions | Microsoft Docs","nodes":[{"content":"Callback Functions | Microsoft Docs","pos":[0,35]}]}],"pos":[6,44],"yaml":true}],"content":"title: \"Callback Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"callback function\"\n  - \"platform invoke, calling unmanaged functions\"\nms.assetid: c0aa8533-3b3b-42e8-9f60-84919793098c\ncaps.latest.revision: 6\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[504,522],"content":"Callback Functions","linkify":"Callback Functions","nodes":[{"content":"Callback Functions","pos":[0,18]}]},{"content":"A callback function is code within a managed application that helps an unmanaged DLL function complete a task.","pos":[523,633]},{"content":"Calls to a callback function pass indirectly from a managed application, through a DLL function, and back to the managed implementation.","pos":[634,770]},{"content":"Some of the many DLL functions called with platform invoke require a callback function in managed code to run properly.","pos":[771,890]},{"content":"To call most DLL functions from managed code, you create a managed definition of the function and then call it.","pos":[897,1008]},{"content":"The process is straightforward.","pos":[1009,1040]},{"content":"Using a DLL function that requires a callback function has some additional steps.","pos":[1047,1128]},{"content":"First, you must determine whether the function requires a callback by looking at the documentation for the function.","pos":[1129,1245]},{"content":"Next, you have to create the callback function in your managed application.","pos":[1246,1321]},{"content":"Finally, you call the DLL function, passing a pointer to the callback function as an argument.","pos":[1322,1416]},{"content":"The following illustration summarizes these steps.","pos":[1417,1467]},{"content":"<bpt id=\"p1\">![</bpt>Platform invoke callback<ept id=\"p1\">](../../../docs/framework/interop/media/pinvokecallback.gif \"pinvokecallback\")</ept>","pos":[1474,1578],"source":"![Platform invoke callback](../../../docs/framework/interop/media/pinvokecallback.gif \"pinvokecallback\")"},{"content":"Callback function and implementation","pos":[1581,1617]},{"content":"Callback functions are ideal for use in situations in which a task is performed repeatedly.","pos":[1624,1715]},{"content":"Another common usage is with enumeration functions, such as <bpt id=\"p1\">**</bpt>EnumFontFamilies<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>EnumPrinters<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>EnumWindows<ept id=\"p3\">**</ept> in the Win32 API.","pos":[1716,1853],"source":" Another common usage is with enumeration functions, such as **EnumFontFamilies**, **EnumPrinters**, and **EnumWindows** in the Win32 API."},{"content":"The <bpt id=\"p1\">**</bpt>EnumWindows<ept id=\"p1\">**</ept> function enumerates through all existing windows on your computer, calling the callback function to perform a task on each window.","pos":[1854,2004],"source":" The **EnumWindows** function enumerates through all existing windows on your computer, calling the callback function to perform a task on each window."},{"content":"For instructions and an example, see <bpt id=\"p1\">[</bpt>How to: Implement Callback Functions<ept id=\"p1\">](../../../docs/framework/interop/how-to-implement-callback-functions.md)</ept>.","pos":[2005,2153],"source":" For instructions and an example, see [How to: Implement Callback Functions](../../../docs/framework/interop/how-to-implement-callback-functions.md)."},{"pos":[2162,2170],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>How to: Implement Callback Functions<ept id=\"p1\">](../../../docs/framework/interop/how-to-implement-callback-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[2174,2285],"source":"[How to: Implement Callback Functions](../../../docs/framework/interop/how-to-implement-callback-functions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Calling a DLL Function<ept id=\"p1\">](../../../docs/framework/interop/calling-a-dll-function.md)</ept>","pos":[2289,2372],"source":"[Calling a DLL Function](../../../docs/framework/interop/calling-a-dll-function.md)"}]}