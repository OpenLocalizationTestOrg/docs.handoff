<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-pass-procedures-to-another-procedure.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2305cd18cfaaa67355dfb342f22e39d37ae0e79</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\delegates\how-to-pass-procedures-to-another-procedure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca7864eb626d598954b38c1421c905eab1e62fe5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6178300ee675d825854bf49926e18a2720f84c79</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Pass Procedures to Another Procedure in Visual Basic</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Pass Procedures to Another Procedure in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows how to use delegates to pass a procedure to another procedure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A delegate is a type that you can use like any other type in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddressOf`</ph> operator returns a delegate object when applied to a procedure name.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This example has a procedure with a delegate parameter that can take a reference to another procedure, obtained with the <ph id="ph1">`AddressOf`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Create the delegate and matching procedures</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create a delegate named <ph id="ph1">`MathOperator`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create a procedure named <ph id="ph1">`AddNumbers`</ph> with parameters and return value that match those of <ph id="ph2">`MathOperator`</ph>, so that the signatures match.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Create a procedure named <ph id="ph1">`SubtractNumbers`</ph> with a signature that matches <ph id="ph2">`MathOperator`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create a procedure named <ph id="ph1">`DelegateTest`</ph> that takes a delegate as a parameter.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This procedure can accept a reference to <ph id="ph1">`AddNumbers`</ph> or <ph id="ph2">`SubtractNumbers`</ph>, because their signatures match the <ph id="ph3">`MathOperator`</ph> signature.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Create a procedure named <ph id="ph1">`Test`</ph> that calls <ph id="ph2">`DelegateTest`</ph> once with the delegate for <ph id="ph3">`AddNumbers`</ph> as a parameter, and again with the delegate for <ph id="ph4">`SubtractNumbers`</ph> as a parameter.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`Test`</ph> is called, it first displays the result of <ph id="ph2">`AddNumbers`</ph> acting on <ph id="ph3">`5`</ph> and <ph id="ph4">`3`</ph>, which is 8.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Then the result of <ph id="ph1">`SubtractNumbers`</ph> acting on <ph id="ph2">`9`</ph> and <ph id="ph3">`3`</ph> is displayed, which is 6.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](../../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AddressOf Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/addressof-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegate Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/delegate-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Invoke a Delegate Method<ept id="p1">](../../../../visual-basic/programming-guide/language-features/delegates/how-to-invoke-a-delegate-method.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>