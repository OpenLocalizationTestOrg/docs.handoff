{"content":"---\ntitle: .NET Glossary\ndescription: Find out the meaning of selected terms used in the .NET documentation.\nms.date: 01/22/2019\nms.technology: dotnet-standard\n---\n# .NET Glossary\n\nThe primary goal of this glossary is to clarify meanings of selected terms and acronyms that appear frequently in the .NET documentation without definitions.\n\n## AOT\n\nAhead-of-time compiler.\n\nSimilar to [JIT](#jit), this compiler also translates [IL](#il) to machine code. In contrast to JIT compilation, AOT compilation happens before the application is executed and is usually performed on a different machine. Because AOT tool chains don't compile at runtime, they don't have to minimize time spent compiling. That means they can spend more time optimizing. Since the context of AOT is the entire application, the AOT compiler also performs cross-module linking and whole-program analysis, which means that all references are followed and a single executable is produced.\n\nSee [CoreRT](#corert) and [.NET Native](#net-native).\n\n## ASP.NET \n\nThe original ASP.NET implementation that ships with the .NET Framework.\n\nSometimes ASP.NET is an umbrella term that refers to both ASP.NET implementations including ASP.NET Core. The meaning that the term carries in any given instance is determined by context. Refer to ASP.NET 4.x when you want to make it clear that youâ€™re not using ASP.NET to mean both implementations. \n\nSee [ASP.NET documentation](/aspnet/#pivot=aspnet).\n\n## ASP.NET Core\n\nA cross-platform, high-performance, open source implementation of ASP.NET built on .NET Core.\n\nSee [ASP.NET Core documentation](/aspnet/#pivot=core).\n\n## assembly\n\nA *.dll*/*.exe* file that can contain a collection of APIs that can be called by applications or other assemblies.\n\nAn assembly may include types such as interfaces, classes, structures, enumerations, and delegates. Assemblies in a project's *bin* folder are sometimes referred to as *binaries*. See also [library](#library).\n\n## CLR\n\nCommon Language Runtime.\n\nThe exact meaning depends on the context, but this usually refers to the runtime of the .NET Framework. The CLR handles memory allocation and management. The CLR is also a virtual machine that not only executes apps but also generates and compiles code on-the-fly using a [JIT](#jit) compiler. The current Microsoft CLR implementation is Windows only.\n\n## CoreCLR\n\n.NET Core Common Language Runtime.\n\nThis CLR is built from the same code base as the CLR. Originally, CoreCLR was the runtime of Silverlight and was designed to run on multiple platforms, specifically Windows and OS X. CoreCLR is now part of .NET Core and represents a simplified version of the CLR. It's still a [cross-platform](#cross-platform) runtime, now including support for many Linux distributions. CoreCLR is also a virtual machine with JIT and code execution capabilities.\n\n## CoreFX\n\n.NET Core Base Class Library (BCL)\n\nA set of libraries that comprise the System.* (and to a limited extent  Microsoft.*) namespaces. The BCL is a general purpose, lower-level framework that higher-level application frameworks, such as ASP.NET Core, build on. The source code of the .NET Core BCL is contained in the [CoreFX repository](https://github.com/dotnet/corefx). However, the majority of the .NET Core APIs are also available in the .NET Framework, so you can think of CoreFX as a fork of the .NET Framework BCL.\n\n## CoreRT\n\n.NET Core runtime.\n\nIn contrast to the CLR/CoreCLR, CoreRT is not a virtual machine, which means it doesn't include the facilities to generate and run code on-the-fly because it doesn't include a [JIT](#jit). It does, however, include the [GC](#gc) and the ability for runtime type identification (RTTI) and reflection. However, its type system is designed so that metadata for reflection isn't required. This enables having an [AOT](#aot) tool chain that can link away superfluous metadata and (more importantly) identify code that the app doesn't use. CoreRT is in development.\n\nSee [Intro to .NET Native and CoreRT](https://github.com/dotnet/corert/blob/master/Documentation/intro-to-corert.md)\n\n## cross-platform\n\nThe ability to develop and execute an application that can be used on multiple different operating systems, such as Linux, Windows and iOS, without having to re-write specifically for each one. This enables code re-use and consistency between applications on different platforms.\n\n## ecosystem\n\nAll of the runtime software, development tools, and community resources that are used to build and run applications for a given technology.\n\nThe term \".NET ecosystem\" differs from similar terms such as \".NET stack\" in its inclusion of third-party apps and libraries. Here's an example in a sentence:\n\n- \"The motivation behind the [.NET Standard](#net-standard) is to establish greater uniformity in the .NET ecosystem.\" \n\n## framework\n\nIn general, a comprehensive collection of APIs that facilitates development and deployment of applications that are based on a particular technology. In this general sense, ASP.NET Core and Windows Forms are examples of application frameworks. See also [library](#library).\n\nThe word \"framework\" has a more specific technical meaning in the following terms:\n* [.NET Framework](#net-framework)\n* [target framework](#target-framework)\n* [TFM (target framework moniker)](#tfm)\n\nIn the existing documentation, \"framework\" sometimes refers to an [implementation of .NET](#implementation-of-net). For example, an article may call .NET Core a framework. We plan to eliminate this confusing usage from the documentation.\n\n## GC\n\nGarbage collector.\n\nThe garbage collector is an implementation of automatic memory management.  The GC frees memory occupied by objects that are no longer in use. \n\nSee [Garbage Collection](garbage-collection/index.md).\n\n## IL\n\nIntermediate language.\n\nHigher-level .NET languages, such as C#, compile down to a hardware-agnostic instruction set, which is called Intermediate Language (IL). IL is sometimes referred to as MSIL (Microsoft IL) or CIL (Common IL).\n\n## JIT\n\nJust-in-time compiler.\n\nSimilar to [AOT](#aot), this compiler translates [IL](#il) to machine code that the processor understands. Unlike AOT, JIT compilation happens on demand and is performed on the same machine that the code needs to run on. Since JIT compilation occurs during execution of the application, compile time is part of the run time. Thus, JIT compilers have to balance time spent optimizing code against the savings that the resulting code can produce. But a JIT knows the actual hardware and can free developers from having to ship different implementations.\n\n## implementation of .NET\n\nAn implementation of .NET includes the following:\n\n- One or more runtimes. Examples: CLR, CoreCLR, CoreRT.\n- A class library that implements a version of the .NET Standard and may include additional APIs. Examples: .NET Framework Base Class Library, .NET Core Base Class Library.\n- Optionally, one or more application frameworks. Examples: ASP.NET, Windows Forms, and WPF are included in the .NET Framework.\n- Optionally, development tools. Some development tools are shared among multiple implementations.\n\nExamples of .NET implementations:\n\n- [.NET Framework](#net-framework)\n- [.NET Core](#net-core)\n- [Universal Windows Platform (UWP)](#uwp)\n\n## library\n\nA collection of APIs that can be called by apps or other libraries. A .NET library is composed of one or more [assemblies](#assembly).\n\nThe words library and [framework](#framework) are often used synonymously.\n\n## metapackage\n\nA NuGet package that has no library of its own but is only a list of dependencies. The included packages can optionally establish the API for a target framework.\n\nSee [Packages, Metapackages and Frameworks](../core/packages.md)\n\n## Mono\n\nMono is an open source, [cross-platform](#cross-platform) .NET implementation that is mainly used when a small runtime is required. It is the runtime that powers Xamarin applications on Android, Mac, iOS, tvOS and watchOS and is focused primarily on apps that require a small footprint.\n\nIt supports all of the currently published .NET Standard versions.\n\nHistorically, Mono implemented the larger API of the .NET Framework and emulated some of the most popular capabilities on Unix. It is sometimes used to run .NET applications that rely on those capabilities on Unix.\n\nMono is typically used with a just-in-time compiler, but it also features a full static compiler (ahead-of-time compilation) that is used on platforms like iOS.\n\nTo learn more about Mono, see the [Mono documentation](https://www.mono-project.com/docs/).\n\n## .NET\n\nThe umbrella term for [.NET Standard](#net-standard) and all [.NET implementations](#implementation-of-net) and workloads. Always capitalized, never \".Net\".\n\nSee the [.NET Guide](index.md)\n\n## .NET Core \n\nA cross-platform, high-performance, open source implementation of .NET. Includes the Core Common Language Runtime (CoreCLR), the Core AOT Runtime (CoreRT, in development), the Core Base Class Library, and the Core SDK.\n\nSee [.NET Core](../core/index.md).\n\n## .NET Core CLI\n\nA cross-platform toolchain for developing .NET Core applications.\n\nSee [.NET Core command-line interface (CLI) tools](../core/tools/index.md).\n\n## .NET Core SDK\n\nA set of libraries and tools that allow developers to create .NET Core applications and libraries. Includes the [.NET Core CLI](#net-core-cli) for building apps, .NET Core libraries and runtime for building and running apps, and the dotnet executable (*dotnet.exe*) that runs CLI commands and runs applications.\n\nSee [.NET Core SDK Overview](../core/sdk.md).\n\n## .NET Framework\n\nAn implementation of .NET that runs only on Windows. Includes the Common Language Runtime (CLR), the Base Class Library, and application framework libraries such as ASP.NET, Windows Forms, and WPF.\n\nSee [.NET Framework Guide](../framework/index.md).\n\n## .NET Native\n\nA compiler tool chain that produces native code ahead-of-time (AOT), as opposed to just-in-time (JIT).\n\nCompilation happens on the developer's machine similar to the way a C++ compiler and linker works. It removes unused code and spends more time optimizing it. It extracts code from libraries and merges them into the executable. The result is a single module that represents the entire app.\n\nUWP was the first application framework supported by .NET Native. Now, we support building native console apps for Windows, macOS, and Linux.\n\nSee [Intro to .NET Native and CoreRT](https://github.com/dotnet/corert/blob/master/Documentation/intro-to-corert.md)\n\n## .NET Standard\n\nA formal specification of .NET APIs that are available in each .NET implementation.\n\nThe .NET Standard specification is sometimes called a library in the documentation. Because a library includes API implementations, not only specifications (interfaces), it's misleading to call .NET Standard a \"library.\" We plan to eliminate that usage from the documentation, except in reference to the name of the .NET Standard metapackage (`NETStandard.Library`).\n\nSee [.NET Standard](net-standard.md).\n\n## NGEN\n\nNative (image) generation.\n\nYou can think of this technology as a persistent JIT compiler. It usually compiles code on the machine where the code is executed, but compilation typically occurs at install time.\n\n## package\n\nA NuGet package &mdash; or just a package &mdash; is a *.zip* file with one or more assemblies of the same name along with additional metadata such as the author name.\n\nThe *.zip* file has a *.nupkg* extension and may contain assets, such as *.dll* files and *.xml* files, for use with multiple target frameworks and versions. When installed in an app or library, the appropriate assets are selected based on the target framework specified by the app or library. The assets that define the interface are in the *ref* folder, and the assets that define the implementation are in the *lib* folder.\n\n## platform\n\nAn operating system and the hardware it runs on, such as Windows, macOS, Linux, iOS, and Android.\n\nHere are examples of usage in sentences:\n\n- \".NET Core is a cross-platform implementation of .NET.\" \n- \"PCL profiles represent Microsoft platforms, while the .NET Standard is agnostic to platform.\"\n\nThe .NET documentation frequently uses \".NET platform\" to mean either an implementation of .NET or the .NET stack including all implementations. Both of these usages tend to get confused with the primary (OS/hardware) meaning, so we plan to eliminate these usages from the documentation.\n\n## runtime\n\nThe execution environment for a managed program.\n\nThe OS is part of the runtime environment but is not part of the .NET runtime. Here are some examples of .NET runtimes:\n\n- Common Language Runtime (CLR)\n- Core Common Language Runtime (CoreCLR)\n- .NET Native (for UWP)\n- Mono runtime\n\nThe .NET documentation sometimes uses \"runtime\" to mean an implementation of .NET. For example, in the following sentences \"runtime\" should be replaced with \"implementation\":\n\n- \"The various .NET runtimes implement specific versions of .NET Standard.\"\n- \"Libraries that are intended to run on multiple runtimes should target this framework.\" (referring to .NET Standard)\n- \"The various .NET runtimes implement specific versions of .NET Standard. â€¦ Each .NET runtime version advertises the highest .NET Standard version it supports â€¦\"\n\nWe plan to eliminate this inconsistent usage. \n\n## stack\n\nA set of programming technologies that are used together to build and run applications.\n\n\"The .NET stack\" refers to the .NET Standard and all .NET implementations. The phrase \"a .NET stack\" may refer to one implementation of .NET. \n\n## target framework\n\nThe collection of APIs that a .NET app or library relies on.\n\nAn app or library can target a version of .NET Standard (for example, .NET Standard 2.0), which is specification for a standardized set of APIs across all .NET implementations. An app or library can also target a version of a specific .NET implementation, in which case it gets access to implementation-specific APIs. For example, an app that targets Xamarin.iOS gets access to Xamarin-provided iOS API wrappers.\n\nFor some target frameworks (for example, the .NET Framework) the available APIs are defined by the assemblies that a .NET implementation installs on a system, which may include application framework APIs (for example, ASP.NET, WinForms). For package-based target frameworks (such as .NET Standard and .NET Core), the framework APIs are defined by the packages installed in the app or library. In that case, the target framework implicitly specifies a metapackage that references all the packages that together make up the framework.\n\nSee [Target Frameworks](frameworks.md).\n\n## TFM\n\nTarget framework moniker.\n\nA standardized token format for specifying the target framework of a .NET app or library. Target frameworks are typically referenced by a short name, such as `net462`. Long-form TFMs (such as .NETFramework,Version=4.6.2) exist but are not generally used to specify a target framework.\n\nSee [Target Frameworks](frameworks.md).\n\n## UWP\n\nUniversal Windows Platform.\n\nAn implementation of .NET that is used for building modern, touch-enabled Windows applications and software for the Internet of Things (IoT). It's designed to unify the different types of devices that you may want to target, including PCs, tablets, phablets, phones, and even the Xbox. UWP provides many services, such as a centralized app store, an execution environment (AppContainer), and a set of Windows APIs to use instead of Win32 (WinRT). Apps can be written in C++, C#, VB.NET, and JavaScript. When using C# and VB.NET, the .NET APIs are provided by .NET Core.\n\n## See also\n\n- [.NET Guide](index.md)\n- [.NET Framework Guide](../framework/index.md)\n- [.NET Core](../core/index.md)\n- [ASP.NET Overview](/aspnet/index#pivot=aspnet)\n- [ASP.NET Core Overview](/aspnet/index#pivot=core)\n","nodes":[{"pos":[4,159],"embed":true,"restype":"x-metadata","content":"title: .NET Glossary\ndescription: Find out the meaning of selected terms used in the .NET documentation.\nms.date: 01/22/2019\nms.technology: dotnet-standard","nodes":[{"content":".NET Glossary","nodes":[{"pos":[0,13],"content":".NET Glossary","nodes":[{"content":".NET Glossary","pos":[0,13]}]}],"path":["title"],"nosxs":false},{"content":"Find out the meaning of selected terms used in the .NET documentation.","nodes":[{"pos":[0,70],"content":"Find out the meaning of selected terms used in the .NET documentation.","nodes":[{"content":"Find out the meaning of selected terms used in the .NET documentation.","pos":[0,70]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[166,179],"content":".NET Glossary","linkify":".NET Glossary","nodes":[{"content":".NET Glossary","pos":[0,13]}]},{"content":"The primary goal of this glossary is to clarify meanings of selected terms and acronyms that appear frequently in the .NET documentation without definitions.","pos":[181,338]},{"pos":[343,346],"content":"AOT","linkify":"AOT","nodes":[{"content":"AOT","pos":[0,3]}]},{"content":"Ahead-of-time compiler.","pos":[348,371]},{"content":"Similar to <bpt id=\"p1\">[</bpt>JIT<ept id=\"p1\">](#jit)</ept>, this compiler also translates <bpt id=\"p2\">[</bpt>IL<ept id=\"p2\">](#il)</ept> to machine code.","pos":[373,453],"source":"Similar to [JIT](#jit), this compiler also translates [IL](#il) to machine code."},{"content":"In contrast to JIT compilation, AOT compilation happens before the application is executed and is usually performed on a different machine.","pos":[454,593]},{"content":"Because AOT tool chains don't compile at runtime, they don't have to minimize time spent compiling.","pos":[594,693]},{"content":"That means they can spend more time optimizing.","pos":[694,741]},{"content":"Since the context of AOT is the entire application, the AOT compiler also performs cross-module linking and whole-program analysis, which means that all references are followed and a single executable is produced.","pos":[742,955]},{"pos":[957,1010],"content":"See <bpt id=\"p1\">[</bpt>CoreRT<ept id=\"p1\">](#corert)</ept> and <bpt id=\"p2\">[</bpt>.NET Native<ept id=\"p2\">](#net-native)</ept>.","source":"See [CoreRT](#corert) and [.NET Native](#net-native)."},{"pos":[1015,1022],"content":"ASP.NET","linkify":"ASP.NET","nodes":[{"content":"ASP.NET","pos":[0,7]}]},{"content":"The original ASP.NET implementation that ships with the .NET Framework.","pos":[1025,1096]},{"content":"Sometimes ASP.NET is an umbrella term that refers to both ASP.NET implementations including ASP.NET Core.","pos":[1098,1203]},{"content":"The meaning that the term carries in any given instance is determined by context.","pos":[1204,1285]},{"content":"Refer to ASP.NET 4.x when you want to make it clear that youâ€™re not using ASP.NET to mean both implementations.","pos":[1286,1397]},{"pos":[1400,1451],"content":"See <bpt id=\"p1\">[</bpt>ASP.NET documentation<ept id=\"p1\">](/aspnet/#pivot=aspnet)</ept>.","source":"See [ASP.NET documentation](/aspnet/#pivot=aspnet)."},{"pos":[1456,1468],"content":"ASP.NET Core","linkify":"ASP.NET Core","nodes":[{"content":"ASP.NET Core","pos":[0,12]}]},{"content":"A cross-platform, high-performance, open source implementation of ASP.NET built on .NET Core.","pos":[1470,1563]},{"pos":[1565,1619],"content":"See <bpt id=\"p1\">[</bpt>ASP.NET Core documentation<ept id=\"p1\">](/aspnet/#pivot=core)</ept>.","source":"See [ASP.NET Core documentation](/aspnet/#pivot=core)."},{"pos":[1624,1632],"content":"assembly","linkify":"assembly","nodes":[{"content":"assembly","pos":[0,8]}]},{"pos":[1634,1748],"content":"A <bpt id=\"p1\">*</bpt>.dll<ept id=\"p1\">*</ept><ph id=\"ph1\">/</ph><bpt id=\"p2\">*</bpt>.exe<ept id=\"p2\">*</ept> file that can contain a collection of APIs that can be called by applications or other assemblies.","source":"A *.dll*/*.exe* file that can contain a collection of APIs that can be called by applications or other assemblies."},{"content":"An assembly may include types such as interfaces, classes, structures, enumerations, and delegates.","pos":[1750,1849]},{"content":"Assemblies in a project's <bpt id=\"p1\">*</bpt>bin<ept id=\"p1\">*</ept> folder are sometimes referred to as <bpt id=\"p2\">*</bpt>binaries<ept id=\"p2\">*</ept>.","pos":[1850,1929],"source":" Assemblies in a project's *bin* folder are sometimes referred to as *binaries*."},{"content":"See also <bpt id=\"p1\">[</bpt>library<ept id=\"p1\">](#library)</ept>.","pos":[1930,1959],"source":" See also [library](#library)."},{"pos":[1964,1967],"content":"CLR","linkify":"CLR","nodes":[{"content":"CLR","pos":[0,3]}]},{"content":"Common Language Runtime.","pos":[1969,1993]},{"content":"The exact meaning depends on the context, but this usually refers to the runtime of the .NET Framework.","pos":[1995,2098]},{"content":"The CLR handles memory allocation and management.","pos":[2099,2148]},{"content":"The CLR is also a virtual machine that not only executes apps but also generates and compiles code on-the-fly using a <bpt id=\"p1\">[</bpt>JIT<ept id=\"p1\">](#jit)</ept> compiler.","pos":[2149,2288],"source":" The CLR is also a virtual machine that not only executes apps but also generates and compiles code on-the-fly using a [JIT](#jit) compiler."},{"content":"The current Microsoft CLR implementation is Windows only.","pos":[2289,2346]},{"pos":[2351,2358],"content":"CoreCLR","linkify":"CoreCLR","nodes":[{"content":"CoreCLR","pos":[0,7]}]},{"content":".NET Core Common Language Runtime.","pos":[2360,2394]},{"content":"This CLR is built from the same code base as the CLR.","pos":[2396,2449]},{"content":"Originally, CoreCLR was the runtime of Silverlight and was designed to run on multiple platforms, specifically Windows and OS X. CoreCLR is now part of .NET Core and represents a simplified version of the CLR.","pos":[2450,2659]},{"content":"It's still a <bpt id=\"p1\">[</bpt>cross-platform<ept id=\"p1\">](#cross-platform)</ept> runtime, now including support for many Linux distributions.","pos":[2660,2767],"source":" It's still a [cross-platform](#cross-platform) runtime, now including support for many Linux distributions."},{"content":"CoreCLR is also a virtual machine with JIT and code execution capabilities.","pos":[2768,2843]},{"pos":[2848,2854],"content":"CoreFX","linkify":"CoreFX","nodes":[{"content":"CoreFX","pos":[0,6]}]},{"content":".NET Core Base Class Library (BCL)","pos":[2856,2890]},{"content":"A set of libraries that comprise the System.* (and to a limited extent  Microsoft.*) namespaces.","pos":[2892,2988]},{"content":"The BCL is a general purpose, lower-level framework that higher-level application frameworks, such as ASP.NET Core, build on.","pos":[2989,3114]},{"content":"The source code of the .NET Core BCL is contained in the <bpt id=\"p1\">[</bpt>CoreFX repository<ept id=\"p1\">](https://github.com/dotnet/corefx)</ept>.","pos":[3115,3226],"source":" The source code of the .NET Core BCL is contained in the [CoreFX repository](https://github.com/dotnet/corefx)."},{"content":"However, the majority of the .NET Core APIs are also available in the .NET Framework, so you can think of CoreFX as a fork of the .NET Framework BCL.","pos":[3227,3376]},{"pos":[3381,3387],"content":"CoreRT","linkify":"CoreRT","nodes":[{"content":"CoreRT","pos":[0,6]}]},{"content":".NET Core runtime.","pos":[3389,3407]},{"content":"In contrast to the CLR/CoreCLR, CoreRT is not a virtual machine, which means it doesn't include the facilities to generate and run code on-the-fly because it doesn't include a <bpt id=\"p1\">[</bpt>JIT<ept id=\"p1\">](#jit)</ept>.","pos":[3409,3597],"source":"In contrast to the CLR/CoreCLR, CoreRT is not a virtual machine, which means it doesn't include the facilities to generate and run code on-the-fly because it doesn't include a [JIT](#jit)."},{"content":"It does, however, include the <bpt id=\"p1\">[</bpt>GC<ept id=\"p1\">](#gc)</ept> and the ability for runtime type identification (RTTI) and reflection.","pos":[3598,3708],"source":" It does, however, include the [GC](#gc) and the ability for runtime type identification (RTTI) and reflection."},{"content":"However, its type system is designed so that metadata for reflection isn't required.","pos":[3709,3793]},{"content":"This enables having an <bpt id=\"p1\">[</bpt>AOT<ept id=\"p1\">](#aot)</ept> tool chain that can link away superfluous metadata and (more importantly) identify code that the app doesn't use.","pos":[3794,3942],"source":" This enables having an [AOT](#aot) tool chain that can link away superfluous metadata and (more importantly) identify code that the app doesn't use."},{"content":"CoreRT is in development.","pos":[3943,3968]},{"pos":[3970,4086],"content":"See <bpt id=\"p1\">[</bpt>Intro to .NET Native and CoreRT<ept id=\"p1\">](https://github.com/dotnet/corert/blob/master/Documentation/intro-to-corert.md)</ept>","source":"See [Intro to .NET Native and CoreRT](https://github.com/dotnet/corert/blob/master/Documentation/intro-to-corert.md)"},{"pos":[4091,4105],"content":"cross-platform","linkify":"cross-platform","nodes":[{"content":"cross-platform","pos":[0,14]}]},{"content":"The ability to develop and execute an application that can be used on multiple different operating systems, such as Linux, Windows and iOS, without having to re-write specifically for each one.","pos":[4107,4300]},{"content":"This enables code re-use and consistency between applications on different platforms.","pos":[4301,4386]},{"pos":[4391,4400],"content":"ecosystem","linkify":"ecosystem","nodes":[{"content":"ecosystem","pos":[0,9]}]},{"content":"All of the runtime software, development tools, and community resources that are used to build and run applications for a given technology.","pos":[4402,4541]},{"content":"The term \".NET ecosystem\" differs from similar terms such as \".NET stack\" in its inclusion of third-party apps and libraries.","pos":[4543,4668]},{"content":"Here's an example in a sentence:","pos":[4669,4701]},{"pos":[4705,4821],"content":"\"The motivation behind the <bpt id=\"p1\">[</bpt>.NET Standard<ept id=\"p1\">](#net-standard)</ept> is to establish greater uniformity in the .NET ecosystem.\"","source":"\"The motivation behind the [.NET Standard](#net-standard) is to establish greater uniformity in the .NET ecosystem.\""},{"pos":[4827,4836],"content":"framework","linkify":"framework","nodes":[{"content":"framework","pos":[0,9]}]},{"content":"In general, a comprehensive collection of APIs that facilitates development and deployment of applications that are based on a particular technology.","pos":[4838,4987]},{"content":"In this general sense, ASP.NET Core and Windows Forms are examples of application frameworks.","pos":[4988,5081]},{"content":"See also <bpt id=\"p1\">[</bpt>library<ept id=\"p1\">](#library)</ept>.","pos":[5082,5111],"source":" See also [library](#library)."},{"content":"The word \"framework\" has a more specific technical meaning in the following terms:","pos":[5113,5195]},{"pos":[5198,5230],"content":"<bpt id=\"p1\">[</bpt>.NET Framework<ept id=\"p1\">](#net-framework)</ept>","source":"[.NET Framework](#net-framework)"},{"pos":[5233,5270],"content":"<bpt id=\"p1\">[</bpt>target framework<ept id=\"p1\">](#target-framework)</ept>","source":"[target framework](#target-framework)"},{"pos":[5273,5311],"content":"<bpt id=\"p1\">[</bpt>TFM (target framework moniker)<ept id=\"p1\">](#tfm)</ept>","source":"[TFM (target framework moniker)](#tfm)"},{"content":"In the existing documentation, \"framework\" sometimes refers to an <bpt id=\"p1\">[</bpt>implementation of .NET<ept id=\"p1\">](#implementation-of-net)</ept>.","pos":[5313,5428],"source":"In the existing documentation, \"framework\" sometimes refers to an [implementation of .NET](#implementation-of-net)."},{"content":"For example, an article may call .NET Core a framework.","pos":[5429,5484]},{"content":"We plan to eliminate this confusing usage from the documentation.","pos":[5485,5550]},{"pos":[5555,5557],"content":"GC","linkify":"GC","nodes":[{"content":"GC","pos":[0,2]}]},{"content":"Garbage collector.","pos":[5559,5577]},{"content":"The garbage collector is an implementation of automatic memory management.","pos":[5579,5653]},{"content":"The GC frees memory occupied by objects that are no longer in use.","pos":[5655,5721]},{"pos":[5724,5778],"content":"See <bpt id=\"p1\">[</bpt>Garbage Collection<ept id=\"p1\">](garbage-collection/index.md)</ept>.","source":"See [Garbage Collection](garbage-collection/index.md)."},{"pos":[5783,5785],"content":"IL","linkify":"IL","nodes":[{"content":"IL","pos":[0,2]}]},{"content":"Intermediate language.","pos":[5787,5809]},{"content":"Higher-level .NET languages, such as C#, compile down to a hardware-agnostic instruction set, which is called Intermediate Language (IL).","pos":[5811,5948]},{"content":"IL is sometimes referred to as MSIL (Microsoft IL) or CIL (Common IL).","pos":[5949,6019]},{"pos":[6024,6027],"content":"JIT","linkify":"JIT","nodes":[{"content":"JIT","pos":[0,3]}]},{"content":"Just-in-time compiler.","pos":[6029,6051]},{"content":"Similar to <bpt id=\"p1\">[</bpt>AOT<ept id=\"p1\">](#aot)</ept>, this compiler translates <bpt id=\"p2\">[</bpt>IL<ept id=\"p2\">](#il)</ept> to machine code that the processor understands.","pos":[6053,6159],"source":"Similar to [AOT](#aot), this compiler translates [IL](#il) to machine code that the processor understands."},{"content":"Unlike AOT, JIT compilation happens on demand and is performed on the same machine that the code needs to run on.","pos":[6160,6273]},{"content":"Since JIT compilation occurs during execution of the application, compile time is part of the run time.","pos":[6274,6377]},{"content":"Thus, JIT compilers have to balance time spent optimizing code against the savings that the resulting code can produce.","pos":[6378,6497]},{"content":"But a JIT knows the actual hardware and can free developers from having to ship different implementations.","pos":[6498,6604]},{"pos":[6609,6631],"content":"implementation of .NET","linkify":"implementation of .NET","nodes":[{"content":"implementation of .NET","pos":[0,22]}]},{"content":"An implementation of .NET includes the following:","pos":[6633,6682]},{"content":"One or more runtimes.","pos":[6686,6707]},{"content":"Examples: CLR, CoreCLR, CoreRT.","pos":[6708,6739]},{"content":"A class library that implements a version of the .NET Standard and may include additional APIs.","pos":[6742,6837]},{"content":"Examples: .NET Framework Base Class Library, .NET Core Base Class Library.","pos":[6838,6912]},{"content":"Optionally, one or more application frameworks.","pos":[6915,6962]},{"content":"Examples: ASP.NET, Windows Forms, and WPF are included in the .NET Framework.","pos":[6963,7040]},{"content":"Optionally, development tools.","pos":[7043,7073]},{"content":"Some development tools are shared among multiple implementations.","pos":[7074,7139]},{"content":"Examples of .NET implementations:","pos":[7141,7174]},{"pos":[7178,7210],"content":"<bpt id=\"p1\">[</bpt>.NET Framework<ept id=\"p1\">](#net-framework)</ept>","source":"[.NET Framework](#net-framework)"},{"pos":[7213,7235],"content":"<bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](#net-core)</ept>","source":"[.NET Core](#net-core)"},{"pos":[7238,7278],"content":"<bpt id=\"p1\">[</bpt>Universal Windows Platform (UWP)<ept id=\"p1\">](#uwp)</ept>","source":"[Universal Windows Platform (UWP)](#uwp)"},{"pos":[7283,7290],"content":"library","linkify":"library","nodes":[{"content":"library","pos":[0,7]}]},{"content":"A collection of APIs that can be called by apps or other libraries.","pos":[7292,7359]},{"content":"A .NET library is composed of one or more <bpt id=\"p1\">[</bpt>assemblies<ept id=\"p1\">](#assembly)</ept>.","pos":[7360,7426],"source":" A .NET library is composed of one or more [assemblies](#assembly)."},{"pos":[7428,7502],"content":"The words library and <bpt id=\"p1\">[</bpt>framework<ept id=\"p1\">](#framework)</ept> are often used synonymously.","source":"The words library and [framework](#framework) are often used synonymously."},{"pos":[7507,7518],"content":"metapackage","linkify":"metapackage","nodes":[{"content":"metapackage","pos":[0,11]}]},{"content":"A NuGet package that has no library of its own but is only a list of dependencies.","pos":[7520,7602]},{"content":"The included packages can optionally establish the API for a target framework.","pos":[7603,7681]},{"pos":[7683,7747],"content":"See <bpt id=\"p1\">[</bpt>Packages, Metapackages and Frameworks<ept id=\"p1\">](../core/packages.md)</ept>","source":"See [Packages, Metapackages and Frameworks](../core/packages.md)"},{"pos":[7752,7756],"content":"Mono","linkify":"Mono","nodes":[{"content":"Mono","pos":[0,4]}]},{"content":"Mono is an open source, <bpt id=\"p1\">[</bpt>cross-platform<ept id=\"p1\">](#cross-platform)</ept> .NET implementation that is mainly used when a small runtime is required.","pos":[7758,7889],"source":"Mono is an open source, [cross-platform](#cross-platform) .NET implementation that is mainly used when a small runtime is required."},{"content":"It is the runtime that powers Xamarin applications on Android, Mac, iOS, tvOS and watchOS and is focused primarily on apps that require a small footprint.","pos":[7890,8044]},{"content":"It supports all of the currently published .NET Standard versions.","pos":[8046,8112]},{"content":"Historically, Mono implemented the larger API of the .NET Framework and emulated some of the most popular capabilities on Unix.","pos":[8114,8241]},{"content":"It is sometimes used to run .NET applications that rely on those capabilities on Unix.","pos":[8242,8328]},{"content":"Mono is typically used with a just-in-time compiler, but it also features a full static compiler (ahead-of-time compilation) that is used on platforms like iOS.","pos":[8330,8490]},{"pos":[8492,8583],"content":"To learn more about Mono, see the <bpt id=\"p1\">[</bpt>Mono documentation<ept id=\"p1\">](https://www.mono-project.com/docs/)</ept>.","source":"To learn more about Mono, see the [Mono documentation](https://www.mono-project.com/docs/)."},{"pos":[8588,8592],"content":".NET","linkify":".NET","nodes":[{"content":".NET","pos":[0,4]}]},{"content":"The umbrella term for <bpt id=\"p1\">[</bpt>.NET Standard<ept id=\"p1\">](#net-standard)</ept> and all <bpt id=\"p2\">[</bpt>.NET implementations<ept id=\"p2\">](#implementation-of-net)</ept> and workloads.","pos":[8594,8716],"source":"The umbrella term for [.NET Standard](#net-standard) and all [.NET implementations](#implementation-of-net) and workloads."},{"content":"Always capitalized, never \".Net\".","pos":[8717,8750]},{"pos":[8752,8782],"content":"See the <bpt id=\"p1\">[</bpt>.NET Guide<ept id=\"p1\">](index.md)</ept>","source":"See the [.NET Guide](index.md)"},{"pos":[8787,8796],"content":".NET Core","linkify":".NET Core","nodes":[{"content":".NET Core","pos":[0,9]}]},{"content":"A cross-platform, high-performance, open source implementation of .NET.","pos":[8799,8870]},{"content":"Includes the Core Common Language Runtime (CoreCLR), the Core AOT Runtime (CoreRT, in development), the Core Base Class Library, and the Core SDK.","pos":[8871,9017]},{"pos":[9019,9053],"content":"See <bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](../core/index.md)</ept>.","source":"See [.NET Core](../core/index.md)."},{"pos":[9058,9071],"content":".NET Core CLI","linkify":".NET Core CLI","nodes":[{"content":".NET Core CLI","pos":[0,13]}]},{"content":"A cross-platform toolchain for developing .NET Core applications.","pos":[9073,9138]},{"pos":[9140,9215],"content":"See <bpt id=\"p1\">[</bpt>.NET Core command-line interface (CLI) tools<ept id=\"p1\">](../core/tools/index.md)</ept>.","source":"See [.NET Core command-line interface (CLI) tools](../core/tools/index.md)."},{"pos":[9220,9233],"content":".NET Core SDK","linkify":".NET Core SDK","nodes":[{"content":".NET Core SDK","pos":[0,13]}]},{"content":"A set of libraries and tools that allow developers to create .NET Core applications and libraries.","pos":[9235,9333]},{"content":"Includes the <bpt id=\"p1\">[</bpt>.NET Core CLI<ept id=\"p1\">](#net-core-cli)</ept> for building apps, .NET Core libraries and runtime for building and running apps, and the dotnet executable (<bpt id=\"p2\">*</bpt>dotnet.exe<ept id=\"p2\">*</ept>) that runs CLI commands and runs applications.","pos":[9334,9546],"source":" Includes the [.NET Core CLI](#net-core-cli) for building apps, .NET Core libraries and runtime for building and running apps, and the dotnet executable (*dotnet.exe*) that runs CLI commands and runs applications."},{"pos":[9548,9593],"content":"See <bpt id=\"p1\">[</bpt>.NET Core SDK Overview<ept id=\"p1\">](../core/sdk.md)</ept>.","source":"See [.NET Core SDK Overview](../core/sdk.md)."},{"pos":[9598,9612],"content":".NET Framework","linkify":".NET Framework","nodes":[{"content":".NET Framework","pos":[0,14]}]},{"content":"An implementation of .NET that runs only on Windows.","pos":[9614,9666]},{"content":"Includes the Common Language Runtime (CLR), the Base Class Library, and application framework libraries such as ASP.NET, Windows Forms, and WPF.","pos":[9667,9811]},{"pos":[9813,9863],"content":"See <bpt id=\"p1\">[</bpt>.NET Framework Guide<ept id=\"p1\">](../framework/index.md)</ept>.","source":"See [.NET Framework Guide](../framework/index.md)."},{"pos":[9868,9879],"content":".NET Native","linkify":".NET Native","nodes":[{"content":".NET Native","pos":[0,11]}]},{"content":"A compiler tool chain that produces native code ahead-of-time (AOT), as opposed to just-in-time (JIT).","pos":[9881,9983]},{"content":"Compilation happens on the developer's machine similar to the way a C++ compiler and linker works.","pos":[9985,10083]},{"content":"It removes unused code and spends more time optimizing it.","pos":[10084,10142]},{"content":"It extracts code from libraries and merges them into the executable.","pos":[10143,10211]},{"content":"The result is a single module that represents the entire app.","pos":[10212,10273]},{"content":"UWP was the first application framework supported by .NET Native.","pos":[10275,10340]},{"content":"Now, we support building native console apps for Windows, macOS, and Linux.","pos":[10341,10416]},{"pos":[10418,10534],"content":"See <bpt id=\"p1\">[</bpt>Intro to .NET Native and CoreRT<ept id=\"p1\">](https://github.com/dotnet/corert/blob/master/Documentation/intro-to-corert.md)</ept>","source":"See [Intro to .NET Native and CoreRT](https://github.com/dotnet/corert/blob/master/Documentation/intro-to-corert.md)"},{"pos":[10539,10552],"content":".NET Standard","linkify":".NET Standard","nodes":[{"content":".NET Standard","pos":[0,13]}]},{"content":"A formal specification of .NET APIs that are available in each .NET implementation.","pos":[10554,10637]},{"content":"The .NET Standard specification is sometimes called a library in the documentation.","pos":[10639,10722]},{"content":"Because a library includes API implementations, not only specifications (interfaces), it's misleading to call .NET Standard a \"library.\"","pos":[10723,10859]},{"content":"We plan to eliminate that usage from the documentation, except in reference to the name of the .NET Standard metapackage (<ph id=\"ph1\">`NETStandard.Library`</ph>).","pos":[10860,11005],"source":" We plan to eliminate that usage from the documentation, except in reference to the name of the .NET Standard metapackage (`NETStandard.Library`)."},{"pos":[11007,11044],"content":"See <bpt id=\"p1\">[</bpt>.NET Standard<ept id=\"p1\">](net-standard.md)</ept>.","source":"See [.NET Standard](net-standard.md)."},{"pos":[11049,11053],"content":"NGEN","linkify":"NGEN","nodes":[{"content":"NGEN","pos":[0,4]}]},{"content":"Native (image) generation.","pos":[11055,11081]},{"content":"You can think of this technology as a persistent JIT compiler.","pos":[11083,11145]},{"content":"It usually compiles code on the machine where the code is executed, but compilation typically occurs at install time.","pos":[11146,11263]},{"pos":[11268,11275],"content":"package","linkify":"package","nodes":[{"content":"package","pos":[0,7]}]},{"pos":[11277,11444],"content":"A NuGet package <ph id=\"ph1\">&amp;mdash;</ph> or just a package <ph id=\"ph2\">&amp;mdash;</ph> is a <bpt id=\"p1\">*</bpt>.zip<ept id=\"p1\">*</ept> file with one or more assemblies of the same name along with additional metadata such as the author name.","source":"A NuGet package &mdash; or just a package &mdash; is a *.zip* file with one or more assemblies of the same name along with additional metadata such as the author name."},{"content":"The <bpt id=\"p1\">*</bpt>.zip<ept id=\"p1\">*</ept> file has a <bpt id=\"p2\">*</bpt>.nupkg<ept id=\"p2\">*</ept> extension and may contain assets, such as <bpt id=\"p3\">*</bpt>.dll<ept id=\"p3\">*</ept> files and <bpt id=\"p4\">*</bpt>.xml<ept id=\"p4\">*</ept> files, for use with multiple target frameworks and versions.","pos":[11446,11603],"source":"The *.zip* file has a *.nupkg* extension and may contain assets, such as *.dll* files and *.xml* files, for use with multiple target frameworks and versions."},{"content":"When installed in an app or library, the appropriate assets are selected based on the target framework specified by the app or library.","pos":[11604,11739]},{"content":"The assets that define the interface are in the <bpt id=\"p1\">*</bpt>ref<ept id=\"p1\">*</ept> folder, and the assets that define the implementation are in the <bpt id=\"p2\">*</bpt>lib<ept id=\"p2\">*</ept> folder.","pos":[11740,11872],"source":" The assets that define the interface are in the *ref* folder, and the assets that define the implementation are in the *lib* folder."},{"pos":[11877,11885],"content":"platform","linkify":"platform","nodes":[{"content":"platform","pos":[0,8]}]},{"content":"An operating system and the hardware it runs on, such as Windows, macOS, Linux, iOS, and Android.","pos":[11887,11984]},{"content":"Here are examples of usage in sentences:","pos":[11986,12026]},{"content":"\".NET Core is a cross-platform implementation of .NET.\"","pos":[12030,12085]},{"content":"\"PCL profiles represent Microsoft platforms, while the .NET Standard is agnostic to platform.\"","pos":[12089,12183]},{"content":"The .NET documentation frequently uses \".NET platform\" to mean either an implementation of .NET or the .NET stack including all implementations.","pos":[12185,12329]},{"content":"Both of these usages tend to get confused with the primary (OS/hardware) meaning, so we plan to eliminate these usages from the documentation.","pos":[12330,12472]},{"pos":[12477,12484],"content":"runtime","linkify":"runtime","nodes":[{"content":"runtime","pos":[0,7]}]},{"content":"The execution environment for a managed program.","pos":[12486,12534]},{"content":"The OS is part of the runtime environment but is not part of the .NET runtime.","pos":[12536,12614]},{"content":"Here are some examples of .NET runtimes:","pos":[12615,12655]},{"content":"Common Language Runtime (CLR)","pos":[12659,12688]},{"content":"Core Common Language Runtime (CoreCLR)","pos":[12691,12729]},{"content":".NET Native (for UWP)","pos":[12732,12753]},{"content":"Mono runtime","pos":[12756,12768]},{"content":"The .NET documentation sometimes uses \"runtime\" to mean an implementation of .NET.","pos":[12770,12852]},{"content":"For example, in the following sentences \"runtime\" should be replaced with \"implementation\":","pos":[12853,12944]},{"content":"\"The various .NET runtimes implement specific versions of .NET Standard.\"","pos":[12948,13021]},{"content":"\"Libraries that are intended to run on multiple runtimes should target this framework.\"","pos":[13024,13111]},{"content":"(referring to .NET Standard)","pos":[13112,13140]},{"content":"\"The various .NET runtimes implement specific versions of .NET Standard.","pos":[13143,13215]},{"content":"â€¦","pos":[13216,13217]},{"content":"Each .NET runtime version advertises the highest .NET Standard version it supports â€¦\"","pos":[13218,13303]},{"content":"We plan to eliminate this inconsistent usage.","pos":[13305,13350]},{"pos":[13356,13361],"content":"stack","linkify":"stack","nodes":[{"content":"stack","pos":[0,5]}]},{"content":"A set of programming technologies that are used together to build and run applications.","pos":[13363,13450]},{"content":"\"The .NET stack\" refers to the .NET Standard and all .NET implementations.","pos":[13452,13526]},{"content":"The phrase \"a .NET stack\" may refer to one implementation of .NET.","pos":[13527,13593]},{"pos":[13599,13615],"content":"target framework","linkify":"target framework","nodes":[{"content":"target framework","pos":[0,16]}]},{"content":"The collection of APIs that a .NET app or library relies on.","pos":[13617,13677]},{"content":"An app or library can target a version of .NET Standard (for example, .NET Standard 2.0), which is specification for a standardized set of APIs across all .NET implementations.","pos":[13679,13855]},{"content":"An app or library can also target a version of a specific .NET implementation, in which case it gets access to implementation-specific APIs.","pos":[13856,13996]},{"content":"For example, an app that targets Xamarin.iOS gets access to Xamarin-provided iOS API wrappers.","pos":[13997,14091]},{"content":"For some target frameworks (for example, the .NET Framework) the available APIs are defined by the assemblies that a .NET implementation installs on a system, which may include application framework APIs (for example, ASP.NET, WinForms).","pos":[14093,14330]},{"content":"For package-based target frameworks (such as .NET Standard and .NET Core), the framework APIs are defined by the packages installed in the app or library.","pos":[14331,14485]},{"content":"In that case, the target framework implicitly specifies a metapackage that references all the packages that together make up the framework.","pos":[14486,14625]},{"pos":[14627,14666],"content":"See <bpt id=\"p1\">[</bpt>Target Frameworks<ept id=\"p1\">](frameworks.md)</ept>.","source":"See [Target Frameworks](frameworks.md)."},{"pos":[14671,14674],"content":"TFM","linkify":"TFM","nodes":[{"content":"TFM","pos":[0,3]}]},{"content":"Target framework moniker.","pos":[14676,14701]},{"content":"A standardized token format for specifying the target framework of a .NET app or library.","pos":[14703,14792]},{"content":"Target frameworks are typically referenced by a short name, such as <ph id=\"ph1\">`net462`</ph>.","pos":[14793,14870],"source":" Target frameworks are typically referenced by a short name, such as `net462`."},{"content":"Long-form TFMs (such as .NETFramework,Version=4.6.2) exist but are not generally used to specify a target framework.","pos":[14871,14987]},{"pos":[14989,15028],"content":"See <bpt id=\"p1\">[</bpt>Target Frameworks<ept id=\"p1\">](frameworks.md)</ept>.","source":"See [Target Frameworks](frameworks.md)."},{"pos":[15033,15036],"content":"UWP","linkify":"UWP","nodes":[{"content":"UWP","pos":[0,3]}]},{"content":"Universal Windows Platform.","pos":[15038,15065]},{"content":"An implementation of .NET that is used for building modern, touch-enabled Windows applications and software for the Internet of Things (IoT).","pos":[15067,15208]},{"content":"It's designed to unify the different types of devices that you may want to target, including PCs, tablets, phablets, phones, and even the Xbox.","pos":[15209,15352]},{"content":"UWP provides many services, such as a centralized app store, an execution environment (AppContainer), and a set of Windows APIs to use instead of Win32 (WinRT).","pos":[15353,15513]},{"content":"Apps can be written in C++, C#, VB.NET, and JavaScript.","pos":[15514,15569]},{"content":"When using C# and VB.NET, the .NET APIs are provided by .NET Core.","pos":[15570,15636]},{"pos":[15641,15649],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[15653,15675],"content":"<bpt id=\"p1\">[</bpt>.NET Guide<ept id=\"p1\">](index.md)</ept>","source":"[.NET Guide](index.md)"},{"pos":[15678,15723],"content":"<bpt id=\"p1\">[</bpt>.NET Framework Guide<ept id=\"p1\">](../framework/index.md)</ept>","source":"[.NET Framework Guide](../framework/index.md)"},{"pos":[15726,15755],"content":"<bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](../core/index.md)</ept>","source":"[.NET Core](../core/index.md)"},{"pos":[15758,15804],"content":"<bpt id=\"p1\">[</bpt>ASP.NET Overview<ept id=\"p1\">](/aspnet/index#pivot=aspnet)</ept>","source":"[ASP.NET Overview](/aspnet/index#pivot=aspnet)"},{"pos":[15807,15856],"content":"<bpt id=\"p1\">[</bpt>ASP.NET Core Overview<ept id=\"p1\">](/aspnet/index#pivot=core)</ept>","source":"[ASP.NET Core Overview](/aspnet/index#pivot=core)"}]}