<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="best-practices-for-security-in-wcf.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4a41ae1cf11772b2758285b4bfe3852a7ab087d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\best-practices-for-security-in-wcf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">28c8a712800b3f5e72f26e09efb91614c15b5f57</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7fbb014fc954f941c955f35910bb5d29151c0a40</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Best Practices for Security in WCF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Best Practices for Security in WCF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following sections list the best practices to consider when creating secure applications using <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> security, see <bpt id="p1">[</bpt>Security Considerations<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-in-wcf.md)</ept>, <bpt id="p2">[</bpt>Security Considerations for Data<ept id="p2">](../../../../docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>, and <bpt id="p3">[</bpt>Security Considerations with Metadata<ept id="p3">](../../../../docs/framework/wcf/feature-details/security-considerations-with-metadata.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Identify Services Performing Windows Authentication with SPNs</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Services can be identified with either user principal names (UPNs) or service principal names (SPNs).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Services running under machine accounts such as network service have an SPN identity corresponding to the machine they're running.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Services running under user accounts have a UPN identity corresponding to the user they're running as, although the <ph id="ph1">`setspn`</ph> tool can be used to assign an SPN to the user account.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Configuring a service so it can be identified via SPN and configuring the clients connecting to the service to use that SPN can make certain attacks more difficult.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This guidance applies to bindings using Kerberos or SSPI negotiation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Clients should still specify an SPN in the case where SSPI falls back to NTLM.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Verify Service Identities in WSDL</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>WS-SecurityPolicy allows services to publish information about their own identities in metadata.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When retrieved via <ph id="ph1">`svcutil`</ph> or other methods such as <ph id="ph2">&lt;xref:System.ServiceModel.Description.WsdlImporter&gt;</ph>, this identity information is translated to the identity properties of the <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service endpoint addresses.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Clients which do not verify that these service identities are correct and valid effectively bypass service authentication.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A malicious service can exploit such clients to execute credential forwarding and other "man in the middle" attacks by changing the identity claimed in its WSDL.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use X509 Certificates Instead of NTLM</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> offers two mechanisms for peer-to-peer authentication: X509 certificates (used by peer channel) and Windows authentication where an SSPI negotiation downgrades from Kerberos to NTLM.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Certificate-based authentication using key sizes of 1024 bits or more is preferred to NTLM for several reasons:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>the availability of mutual authentication,</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>the use of stronger cryptographic algorithms, and</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>the greater difficulty of utilizing forwarded X509 credentials.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For an overview of NTLM forwarding attacks, go to <bpt id="p1">[</bpt>http://msdn.microsoft.com/msdnmag/issues/06/09/SecureByDesign/default.aspx<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=109571)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Always Revert After Impersonation</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When using APIs that enable impersonation of a client, be sure to revert to the original identity.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, when using the <ph id="ph1">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.Principal.WindowsImpersonationContext&gt;</ph>, use the C# <ph id="ph3">`using`</ph> statement or the <ph id="ph4">[!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]</ph><ph id="ph5">`Using`</ph> statement, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Principal.WindowsImpersonationContext&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface, and therefore the common language runtime (CLR) automatically reverts to the original identity once the code leaves the <ph id="ph3">`using`</ph> block.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Impersonate Only as Needed</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">&lt;xref:System.Security.Principal.WindowsIdentity.Impersonate%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> class, it is possible to use impersonation in a very controlled scope.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is in contrast to using the <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.Impersonation%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.OperationBehaviorAttribute&gt;</ph>, which allows impersonation for the scope of the entire operation.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Whenever possible, control the scope of impersonation by using the more precise <ph id="ph1">&lt;xref:System.Security.Principal.WindowsIdentity.Impersonate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Obtain Metadata from Trusted Sources</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Be sure you trust the source of your metadata and make sure that no one has tampered with the metadata.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Metadata retrieved using the HTTP protocol is sent in clear text and can be tampered with.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the service uses the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetEnabled%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior.HttpsGetUrl%2A&gt;</ph> properties, use the URL supplied by the service creator to download the data using the HTTPS protocol.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Publish Metadata Using Security</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To prevent tampering with a service's published metadata, secure the metadata exchange endpoint with transport or message-level security.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Publishing Metadata Endpoints<ept id="p1">](../../../../docs/framework/wcf/publishing-metadata-endpoints.md)</ept> and <bpt id="p2">[</bpt>How to: Publish Metadata for a Service Using Code<ept id="p2">](../../../../docs/framework/wcf/feature-details/how-to-publish-metadata-for-a-service-using-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Ensure Use of Local Issuer</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If an issuer address and binding are specified for a given binding, the local issuer is not used for endpoints that use that binding.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Clients who expect to always use the local issuer should ensure that they do not use such a binding or that they modify the binding such that the issuer address is null.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>SAML Token Size Quotas</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When Security Assertions Markup Language (SAML) tokens are serialized in messages, either when they are issued by a Security Token Service (STS) or when clients present them to services as part of authentication, the maximum message size quota must be sufficiently large to accommodate the SAML token and the other message parts.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In normal cases, the default message size quotas are sufficient.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>However, in cases where a SAML token is large because it contains hundreds of claims, the quotas should be increased to accommodate the serialized token.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> quotas, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Set SecurityBindingElement.IncludeTimestamp to True on Custom Bindings</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you create a custom binding, you must set <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.IncludeTimestamp%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Otherwise, if <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.IncludeTimestamp%2A&gt;</ph> is set to <ph id="ph2">`false`</ph>, and the client is using an asymmetric key-based token such as an X509 certificate, the message will not be signed.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Considerations<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-in-wcf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Considerations with Metadata<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-with-metadata.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>