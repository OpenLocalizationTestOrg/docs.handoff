{"content":"---\ntitle: \"Erase Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Erase\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Erase keyword\"\n  - \"Erase statement\"\nms.assetid: 7a8133d7-b750-4d74-8b66-ba1dd9778d4b\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Erase Statement (Visual Basic)\nUsed to release array variables and deallocate the memory used for their elements.  \n  \n## Syntax  \n  \n```  \nErase arraylist  \n```  \n  \n## Parts  \n `arraylist`  \n Required. List of array variables to be erased. Multiple variables are separated by commas.  \n  \n## Remarks  \n The `Erase` statement can appear only at procedure level. This means you can release arrays inside a procedure but not at class or module level.  \n  \n The `Erase` statement is equivalent to assigning `Nothing` to each array variable.  \n  \n## Example  \n The following example uses the `Erase` statement to clear two arrays and free their memory (1000 and 100 storage elements, respectively). The `ReDim` statement then assigns a new array instance to the three-dimensional array.  \n  \n [!code-vb[VbVbalrStatements#19](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/erase-statement_1.vb)]  \n  \n## See Also  \n [Nothing](../../../visual-basic/language-reference/nothing.md)   \n [ReDim Statement](../../../visual-basic/language-reference/statements/redim-statement.md)","nodes":[{"pos":[4,604],"embed":true,"restype":"x-metadata","content":"title: \"Erase Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Erase\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Erase keyword\"\n  - \"Erase statement\"\nms.assetid: 7a8133d7-b750-4d74-8b66-ba1dd9778d4b\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Erase Statement (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,47],"content":"Erase Statement (Visual Basic) | Microsoft Docs","nodes":[{"content":"Erase Statement (Visual Basic) | Microsoft Docs","pos":[0,47]}]}],"path":["title"]}],"yml":true},{"pos":[611,641],"content":"Erase Statement (Visual Basic)","linkify":"Erase Statement (Visual Basic)","nodes":[{"content":"Erase Statement (Visual Basic)","pos":[0,30]}]},{"content":"Used to release array variables and deallocate the memory used for their elements.","pos":[642,724]},{"pos":[733,739],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[781,786],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[805,814]},{"content":"List of array variables to be erased.","pos":[815,852]},{"content":"Multiple variables are separated by commas.","pos":[853,896]},{"pos":[905,912],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Erase`</ph> statement can appear only at procedure level.","pos":[916,973],"source":"The `Erase` statement can appear only at procedure level."},{"content":"This means you can release arrays inside a procedure but not at class or module level.","pos":[974,1060]},{"pos":[1067,1149],"content":"The <ph id=\"ph1\">`Erase`</ph> statement is equivalent to assigning <ph id=\"ph2\">`Nothing`</ph> to each array variable.","source":"The `Erase` statement is equivalent to assigning `Nothing` to each array variable."},{"pos":[1158,1165],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`Erase`</ph> statement to clear two arrays and free their memory (1000 and 100 storage elements, respectively).","pos":[1169,1306],"source":"The following example uses the `Erase` statement to clear two arrays and free their memory (1000 and 100 storage elements, respectively)."},{"content":"The <ph id=\"ph1\">`ReDim`</ph> statement then assigns a new array instance to the three-dimensional array.","pos":[1307,1394],"source":" The `ReDim` statement then assigns a new array instance to the three-dimensional array."},{"pos":[1544,1552],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept><ph id=\"ph1\"> </ph>","pos":[1556,1619],"source":"[Nothing](../../../visual-basic/language-reference/nothing.md) "},{"content":"<bpt id=\"p1\">[</bpt>ReDim Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/redim-statement.md)</ept>","pos":[1623,1712],"source":"[ReDim Statement](../../../visual-basic/language-reference/statements/redim-statement.md)"}]}