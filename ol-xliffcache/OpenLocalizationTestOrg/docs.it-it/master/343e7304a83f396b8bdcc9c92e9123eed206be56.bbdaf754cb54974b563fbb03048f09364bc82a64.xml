{"content":"---\ntitle: \"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"numeric strings [C#]\"\n  - \"validating numeric input [C#]\"\n  - \"strings [C#], numeric\"\nms.assetid: a4e84e10-ea0a-489f-a868-503dded9d85f\ncaps.latest.revision: 9\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)\nTo determine whether a string is a valid representation of a specified numeric type, use the static `TryParse` method that is implemented by all primitive numeric types and also by types such as <xref:System.DateTime> and <xref:System.Net.IPAddress>. The following example shows how to determine whether \"108\" is a valid [int](../../../csharp/language-reference/keywords/int.md).  \n  \n```  \nint i = 0;   \nstring s = \"108\";  \nbool result = int.TryParse(s, out i); //i now = 108  \n```  \n  \n If the string contains nonnumeric characters or the numeric value is too large or too small for the particular type you have specified, `TryParse` returns false and sets the out parameter to zero. Otherwise, it returns true and sets the out parameter to the numeric value of the string.  \n  \n> [!NOTE]\n>  A string may contain only numeric characters and still not be valid for the type whose `TryParse` method that you use. For example, \"256\" is not a valid value for `byte` but it is valid for `int`. \"98.6\" is not a valid value for `int` but it is a valid `decimal`.  \n  \n## Example  \n The following examples show how to use `TryParse` with string representations of `long`, `byte`, and `decimal` values.  \n  \n [!code-cs[csProgGuideStrings#14](../../../csharp/programming-guide/strings/codesnippet/CSharp/how-to-determine-whether-a-string-represents-a-numeric-value_1.cs)]  \n  \n## Robust Programming  \n Primitive numeric types also implement the `Parse` static method, which throws an exception if the string is not a valid number. `TryParse` is generally more efficient because it just returns false if the number is not valid.  \n  \n## .NET Framework Security  \n Always use the `TryParse` or `Parse` methods to validate user input from controls such as text boxes and combo boxes.  \n  \n## See Also  \n [How to: Convert a byte Array to an int](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md)   \n [How to: Convert a String to a Number](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)   \n [How to: Convert Between Hexadecimal Strings and Numeric Types](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md)   \n [Parsing Numeric Strings](../../../standard/base-types/parsing-numeric.md)   \n [Formatting Types](../../../standard/base-types/formatting-types.md)","nodes":[{"pos":[4,646],"nodes":[{"content":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,101],"content":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide) | Microsoft Docs","pos":[0,101]}]}],"pos":[6,110],"yaml":true}],"content":"title: \"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"numeric strings [C#]\"\n  - \"validating numeric input [C#]\"\n  - \"strings [C#], numeric\"\nms.assetid: a4e84e10-ea0a-489f-a868-503dded9d85f\ncaps.latest.revision: 9\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[653,737],"content":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)","linkify":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)","nodes":[{"content":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)","pos":[0,84]}]},{"content":"To determine whether a string is a valid representation of a specified numeric type, use the static <ph id=\"ph1\">`TryParse`</ph> method that is implemented by all primitive numeric types and also by types such as <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Net.IPAddress&gt;</ph>.","pos":[738,988],"source":"To determine whether a string is a valid representation of a specified numeric type, use the static `TryParse` method that is implemented by all primitive numeric types and also by types such as <xref:System.DateTime> and <xref:System.Net.IPAddress>."},{"content":"The following example shows how to determine whether \"108\" is a valid <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>.","pos":[989,1117],"source":" The following example shows how to determine whether \"108\" is a valid [int](../../../csharp/language-reference/keywords/int.md)."},{"content":"If the string contains nonnumeric characters or the numeric value is too large or too small for the particular type you have specified, <ph id=\"ph1\">`TryParse`</ph> returns false and sets the out parameter to zero.","pos":[1227,1423],"source":"If the string contains nonnumeric characters or the numeric value is too large or too small for the particular type you have specified, `TryParse` returns false and sets the out parameter to zero."},{"content":"Otherwise, it returns true and sets the out parameter to the numeric value of the string.","pos":[1424,1513]},{"pos":[1521,1795],"content":"[!NOTE]\n A string may contain only numeric characters and still not be valid for the type whose `TryParse` method that you use. For example, \"256\" is not a valid value for `byte` but it is valid for `int`. \"98.6\" is not a valid value for `int` but it is a valid `decimal`.","leadings":["","> "],"nodes":[{"content":"A string may contain only numeric characters and still not be valid for the type whose `TryParse` method that you use. For example, \"256\" is not a valid value for `byte` but it is valid for `int`. \"98.6\" is not a valid value for `int` but it is a valid `decimal`.","pos":[9,272],"nodes":[{"content":"A string may contain only numeric characters and still not be valid for the type whose <ph id=\"ph1\">`TryParse`</ph> method that you use.","pos":[0,118],"source":"A string may contain only numeric characters and still not be valid for the type whose `TryParse` method that you use."},{"content":"For example, \"256\" is not a valid value for <ph id=\"ph1\">`byte`</ph> but it is valid for <ph id=\"ph2\">`int`</ph>.","pos":[119,196],"source":" For example, \"256\" is not a valid value for `byte` but it is valid for `int`."},{"content":"\"98.6\" is not a valid value for <ph id=\"ph1\">`int`</ph> but it is a valid <ph id=\"ph2\">`decimal`</ph>.","pos":[197,263],"source":" \"98.6\" is not a valid value for `int` but it is a valid `decimal`."}]}]},{"pos":[1804,1811],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1815,1933],"content":"The following examples show how to use <ph id=\"ph1\">`TryParse`</ph> with string representations of <ph id=\"ph2\">`long`</ph>, <ph id=\"ph3\">`byte`</ph>, and <ph id=\"ph4\">`decimal`</ph> values.","source":"The following examples show how to use `TryParse` with string representations of `long`, `byte`, and `decimal` values."},{"pos":[1940,2101],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideStrings#14<ept id=\"p2\">](../../../csharp/programming-guide/strings/codesnippet/CSharp/how-to-determine-whether-a-string-represents-a-numeric-value_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideStrings#14](../../../csharp/programming-guide/strings/codesnippet/CSharp/how-to-determine-whether-a-string-represents-a-numeric-value_1.cs)]"},{"pos":[2110,2128],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"Primitive numeric types also implement the <ph id=\"ph1\">`Parse`</ph> static method, which throws an exception if the string is not a valid number.","pos":[2132,2260],"source":"Primitive numeric types also implement the `Parse` static method, which throws an exception if the string is not a valid number."},{"content":"<ph id=\"ph1\">`TryParse`</ph> is generally more efficient because it just returns false if the number is not valid.","pos":[2261,2357],"source":"`TryParse` is generally more efficient because it just returns false if the number is not valid."},{"pos":[2366,2389],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"pos":[2393,2510],"content":"Always use the <ph id=\"ph1\">`TryParse`</ph> or <ph id=\"ph2\">`Parse`</ph> methods to validate user input from controls such as text boxes and combo boxes.","source":"Always use the `TryParse` or `Parse` methods to validate user input from controls such as text boxes and combo boxes."},{"pos":[2519,2527],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>How to: Convert a byte Array to an int<ept id=\"p1\">](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md)</ept><ph id=\"ph1\"> </ph>","pos":[2531,2654],"source":"[How to: Convert a byte Array to an int](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Convert a String to a Number<ept id=\"p1\">](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)</ept><ph id=\"ph1\"> </ph>","pos":[2658,2777],"source":"[How to: Convert a String to a Number](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Convert Between Hexadecimal Strings and Numeric Types<ept id=\"p1\">](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2781,2950],"source":"[How to: Convert Between Hexadecimal Strings and Numeric Types](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Parsing Numeric Strings<ept id=\"p1\">](../../../standard/base-types/parsing-numeric.md)</ept><ph id=\"ph1\"> </ph>","pos":[2954,3029],"source":"[Parsing Numeric Strings](../../../standard/base-types/parsing-numeric.md) "},{"content":"<bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](../../../standard/base-types/formatting-types.md)</ept>","pos":[3033,3101],"source":"[Formatting Types](../../../standard/base-types/formatting-types.md)"}]}