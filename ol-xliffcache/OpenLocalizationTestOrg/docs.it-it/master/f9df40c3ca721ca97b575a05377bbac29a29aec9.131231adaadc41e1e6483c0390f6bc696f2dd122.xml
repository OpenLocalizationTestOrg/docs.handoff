{"content":"---\ntitle: \"delegate - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"delegate_CSharpKeyword\"\n  - \"delegate\"\n  - \"CS0123\"\nhelpviewer_keywords: \n  - \"delegate keyword [C#]\"\n  - \"function pointers [C#]\"\nms.assetid: 0bb8cb6d-2f87-47c7-9d1f-d65c1cd01e9f\n---\n# delegate (C# Reference)\n\nThe declaration of a delegate type is similar to a method signature. It has a return value and any number of parameters of any type:\n\n```csharp\npublic delegate void TestDelegate(string message);\npublic delegate int TestDelegate(MyType m, long num);\n```\n\nA `delegate` is a reference type that can be used to encapsulate a named or an anonymous method. Delegates are similar to function pointers in C++; however, delegates are type-safe and secure. For applications of delegates, see [Delegates](../../../csharp/programming-guide/delegates/index.md) and [Generic Delegates](../../../csharp/programming-guide/generics/generic-delegates.md).\n\n## Remarks\n\nDelegates are the basis for [Events](../../../csharp/programming-guide/events/index.md).\n\nA delegate can be instantiated by associating it either with a named or anonymous method. For more information, see [Named Methods](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md) and [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).\n\nThe delegate must be instantiated with a method or lambda expression that has a compatible return type and input parameters. For more information on the degree of variance that is allowed in the method signature, see [Variance in Delegates](../../programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md). For use with anonymous methods, the delegate and the code to be associated with it are declared together. Both ways of instantiating delegates are discussed in this section.\n\n## Example\n\n[!code-csharp[csrefKeywordsTypes#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#8)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)\n- [Delegates](../../../csharp/programming-guide/delegates/index.md)\n- [Events](../../../csharp/programming-guide/events/index.md)\n- [Delegates with Named vs. Anonymous Methods](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md)\n- [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)\n- [Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)\n","nodes":[{"pos":[4,276],"embed":true,"restype":"x-metadata","content":"title: \"delegate - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"delegate_CSharpKeyword\"\n  - \"delegate\"\n  - \"CS0123\"\nhelpviewer_keywords: \n  - \"delegate keyword [C#]\"\n  - \"function pointers [C#]\"\nms.assetid: 0bb8cb6d-2f87-47c7-9d1f-d65c1cd01e9f","nodes":[{"content":"delegate - C# Reference","nodes":[{"pos":[0,23],"content":"delegate - C# Reference","nodes":[{"content":"delegate - C# Reference","pos":[0,23]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[283,306],"content":"delegate (C# Reference)","linkify":"delegate (C# Reference)","nodes":[{"content":"delegate (C# Reference)","pos":[0,23]}]},{"content":"The declaration of a delegate type is similar to a method signature.","pos":[308,376]},{"content":"It has a return value and any number of parameters of any type:","pos":[377,440]},{"content":"A <ph id=\"ph1\">`delegate`</ph> is a reference type that can be used to encapsulate a named or an anonymous method.","pos":[562,658],"source":"A `delegate` is a reference type that can be used to encapsulate a named or an anonymous method."},{"content":"Delegates are similar to function pointers in C++; however, delegates are type-safe and secure.","pos":[659,754]},{"content":"For applications of delegates, see <bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept> and <bpt id=\"p2\">[</bpt>Generic Delegates<ept id=\"p2\">](../../../csharp/programming-guide/generics/generic-delegates.md)</ept>.","pos":[755,945],"source":" For applications of delegates, see [Delegates](../../../csharp/programming-guide/delegates/index.md) and [Generic Delegates](../../../csharp/programming-guide/generics/generic-delegates.md)."},{"pos":[950,957],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[959,1047],"content":"Delegates are the basis for <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept>.","source":"Delegates are the basis for [Events](../../../csharp/programming-guide/events/index.md)."},{"content":"A delegate can be instantiated by associating it either with a named or anonymous method.","pos":[1049,1138]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Named Methods<ept id=\"p1\">](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md)</ept> and <bpt id=\"p2\">[</bpt>Anonymous Methods<ept id=\"p2\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.","pos":[1139,1384],"source":" For more information, see [Named Methods](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md) and [Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)."},{"content":"The delegate must be instantiated with a method or lambda expression that has a compatible return type and input parameters.","pos":[1386,1510]},{"content":"For more information on the degree of variance that is allowed in the method signature, see <bpt id=\"p1\">[</bpt>Variance in Delegates<ept id=\"p1\">](../../programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md)</ept>.","pos":[1511,1718],"source":" For more information on the degree of variance that is allowed in the method signature, see [Variance in Delegates](../../programming-guide/concepts/covariance-contravariance/using-variance-in-delegates.md)."},{"content":"For use with anonymous methods, the delegate and the code to be associated with it are declared together.","pos":[1719,1824]},{"content":"Both ways of instantiating delegates are discussed in this section.","pos":[1825,1892]},{"pos":[1897,1904],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2036,2061],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2127,2135],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2139,2198],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[2201,2267],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2270,2337],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[2340,2421],"content":"<bpt id=\"p1\">[</bpt>Reference Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept>","source":"[Reference Types](../../../csharp/language-reference/keywords/reference-types.md)"},{"pos":[2424,2489],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept>","source":"[Delegates](../../../csharp/programming-guide/delegates/index.md)"},{"pos":[2492,2551],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept>","source":"[Events](../../../csharp/programming-guide/events/index.md)"},{"pos":[2554,2688],"content":"<bpt id=\"p1\">[</bpt>Delegates with Named vs. Anonymous Methods<ept id=\"p1\">](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md)</ept>","source":"[Delegates with Named vs. Anonymous Methods](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md)"},{"pos":[2691,2799],"content":"<bpt id=\"p1\">[</bpt>Anonymous Methods<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>","source":"[Anonymous Methods](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)"},{"pos":[2802,2912],"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>","source":"[Lambda Expressions](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)"}]}