<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-the-codedom.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1712b3f06f9131b1e55ca34a1e40e83b63f280b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\using-the-codedom.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d280ba610f50f13f89a155bd20f580560fea6249</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94919cc0256f4c4664955d7b84c013f1e2782d47</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using the CodeDOM | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using the CodeDOM</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The CodeDOM provides types that represent many common types of source code elements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can design a program that builds a source code model using CodeDOM elements to assemble an object graph.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This object graph can be rendered as source code using a CodeDOM code generator for a supported programming language.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The CodeDOM can also be used to compile source code into a binary assembly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Some common uses for the CodeDOM include:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Templated code generation: generating code for ASP.NET, XML Web services client proxies, code wizards, designers, or other code-emitting mechanisms.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Dynamic compilation: supporting code compilation in single or multiple languages.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Building a CodeDOM Graph</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom&gt;</ph> namespace provides classes for representing the logical structure of source code, independent of language syntax.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Structure of a CodeDOM Graph</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The structure of a CodeDOM graph is like a tree of containers.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The top-most, or root, container of each compilable CodeDOM graph is a <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Every element of your source code model must be linked into the graph through a property of a <ph id="ph1">&lt;xref:System.CodeDom.CodeObject&gt;</ph> in the graph.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Building a Source Code Model for a Sample Hello World Program</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following walkthrough provides an example of how to build a CodeDOM object graph that represents the code for a simple Hello World application.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For the complete source code for this code example, see the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider?displayProperty=fullName&gt;</ph> topic.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creating a compile unit</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The CodeDOM defines an object called a <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>, which can reference a CodeDOM object graph that models the source code to compile.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>CodeCompileUnit<ept id="p1">**</ept> has properties for storing references to attributes, namespaces, and assemblies.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The CodeDom providers that derive from the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class contain methods that process the object graph referenced by a <bpt id="p1">**</bpt>CodeCompileUnit<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To create an object graph for a simple application, you must assemble the source code model and reference it from a <bpt id="p1">**</bpt>CodeCompileUnit<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can create a new compile unit with the syntax demonstrated in this example:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetCompileUnit&gt;</ph> can contain a section of source code that is already in the target language, but cannot be rendered to another language.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Defining a namespace</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To define a namespace, create a <ph id="ph1">&lt;xref:System.CodeDom.CodeNamespace&gt;</ph> and assign a name for it using the appropriate constructor or by setting its <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Importing a namespace</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To add a namespace import directive to the namespace, add a <ph id="ph1">&lt;xref:System.CodeDom.CodeNamespaceImport&gt;</ph> that indicates the namespace to import to the <bpt id="p1">**</bpt>CodeNamespace.Imports<ept id="p1">**</ept> collection.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code adds an import for the <bpt id="p1">**</bpt>System<ept id="p1">**</ept> namespace to the <bpt id="p2">**</bpt>Imports<ept id="p2">**</ept> collection of a <bpt id="p3">**</bpt>CodeNamespace<ept id="p3">**</ept> named <ph id="ph1">`samples`</ph>:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Linking code elements into the object graph</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>All code elements that form a CodeDOM graph must be linked to the <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> that is the root element of the tree by a series of references between elements directly referenced from the properties of the root object of the graph.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Set an object to a property of a container object to establish a reference from the container object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following statement adds the <ph id="ph1">`samples`</ph> <bpt id="p1">**</bpt>CodeNamespace<ept id="p1">**</ept> to the <bpt id="p2">**</bpt>Namespaces<ept id="p2">**</ept> collection property of the root <bpt id="p3">**</bpt>CodeCompileUnit<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Defining a type</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To declare a class, structure, interface, or enumeration using the CodeDOM, create a new <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>, and assign it a name.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this using a constructor overload to set the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> property:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To add a type to a namespace, add a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> that represents the type to add to the namespace to the <bpt id="p1">**</bpt>Types<ept id="p1">**</ept> collection of a <bpt id="p2">**</bpt>CodeNamespace<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to add a class named <ph id="ph1">`class1`</ph> to a <bpt id="p1">**</bpt>CodeNamespace<ept id="p1">**</ept> named <ph id="ph2">`samples`</ph>:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Adding class members to a class</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom&gt;</ph> namespace provides a variety of elements that can be used to represent class members.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each class member can be added to the <bpt id="p1">**</bpt>Members<ept id="p1">**</ept> collection of a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Defining a code entry point method for an executable</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you are building code for an executable program, it is necessary to indicate the entry point of a program by creating a <ph id="ph1">&lt;xref:System.CodeDom.CodeEntryPointMethod&gt;</ph> to represent the method at which program execution should begin.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to define an entry point method that contains a <ph id="ph1">&lt;xref:System.CodeDom.CodeMethodInvokeExpression&gt;</ph> that calls <bpt id="p1">**</bpt>System.Console.WriteLine<ept id="p1">**</ept> to print "Hello World!":</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following statement adds the entry point method named <ph id="ph1">`Start`</ph> to the <bpt id="p1">**</bpt>Members<ept id="p1">**</ept> collection of <ph id="ph2">`class1`</ph>:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Now the <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> named <ph id="ph2">`compileUnit`</ph> contains the CodeDOM graph for a simple Hello World program.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For information on generating and compiling code from a CodeDOM graph, see <bpt id="p1">[</bpt>Generating Source Code and Compiling a Program from a CodeDOM Graph<ept id="p1">](../../../docs/framework/reflection-and-codedom/generating-and-compiling-source-code-from-a-codedom-graph.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>More information on building a CodeDOM graph</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The CodeDOM supports the many common types of code elements found in programming languages that support the common language runtime.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The CodeDOM was not designed to provide elements to represent all possible programming language features.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Code that cannot be represented easily with CodeDOM elements can be encapsulated in a <ph id="ph1">&lt;xref:System.CodeDom.CodeSnippetExpression&gt;</ph>, a <ph id="ph2">&lt;xref:System.CodeDom.CodeSnippetStatement&gt;</ph>, a <ph id="ph3">&lt;xref:System.CodeDom.CodeSnippetTypeMember&gt;</ph>, or a <ph id="ph4">&lt;xref:System.CodeDom.CodeSnippetCompileUnit&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>However, snippets cannot be translated to other languages automatically by the CodeDOM.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For documentation for the each of the CodeDOM types, see the reference documentation for the <ph id="ph1">&lt;xref:System.CodeDom&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For a quick chart to locate the CodeDOM element that represents a specific type of code element, see the <bpt id="p1">[</bpt>CodeDOM Quick Reference<ept id="p1">](http://msdn.microsoft.com/en-us/c77b8bfd-0a32-4e36-b59a-4f687f32c524)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>