{"content":"---\ntitle: \"Application Security Scenarios in SQL Server\"\nms.date: \"03/30/2017\"\nms.assetid: 0164f3a4-406e-4693-bec3-03c8e18b46d7\n---\n# Application Security Scenarios in SQL Server\nThere is no single correct way to create a secure SQL Server client application. Every application is unique in its requirements, deployment environment, and user population. An application that is reasonably secure when it is initially deployed can become less secure over time. It is impossible to predict with any accuracy what threats may emerge in the future.  \n  \n SQL Server, as a product, has evolved over many versions to incorporate the latest security features that enable developers to create secure database applications. However, security doesn't come in the box; it requires continual monitoring and updating.  \n  \n## Common Threats  \n Developers need to understand security threats, the tools provided to counter them, and how to avoid self-inflicted security holes. Security can best be thought of as a chain, where a break in any one link compromises the strength of the whole. The following list includes some common security threats that are discussed in more detail in the topics in this section.  \n  \n### SQL Injection  \n SQL Injection is the process by which a malicious user enters Transact-SQL statements instead of valid input. If the input is passed directly to the server without being validated and if the application inadvertently executes the injected code, then the attack has the potential to damage or destroy data. You can thwart SQL Server injection attacks by using stored procedures and parameterized commands, avoiding dynamic SQL, and restricting permissions on all users.  \n  \n### Elevation of Privilege  \n Elevation of privilege attacks occur when a user is able to assume the privileges of a trusted account, such as an owner or administrator. Always run under least-privileged user accounts and assign only needed permissions. Avoid using administrative or owner accounts for executing code. This limits the amount of damage that can occur if an attack succeeds. When performing tasks that require additional permissions, use procedure signing or impersonation only for the duration of the task. You can sign stored procedures with certificates or use impersonation to temporarily assign permissions.  \n  \n### Probing and Intelligent Observation  \n A probing attack can use error messages generated by an application to search for security vulnerabilities. Implement error handling in all procedural code to prevent SQL Server error information from being returned to the end user.  \n  \n### Authentication  \n A connection string injection attack can occur when using SQL Server logins if a connection string based on user input is constructed at run time. If the connection string is not checked for valid keyword pairs, an attacker can insert extra characters, potentially accessing sensitive data or other resources on the server. Use Windows authentication wherever possible. If you must use SQL Server logins, use the <xref:System.Data.SqlClient.SqlConnectionStringBuilder> to create and validate connection strings at run time.  \n  \n### Passwords  \n Many attacks succeed because an intruder was able to obtain or guess a password for a privileged user. Passwords are your first line of defense against intruders, so setting strong passwords is essential to the security of your system. Create and enforce password policies for mixed mode authentication.  \n  \n Always assign a strong password to the `sa` account, even when using Windows Authentication.  \n  \n## In This Section  \n [Managing Permissions with Stored Procedures in SQL Server](../../../../../docs/framework/data/adonet/sql/managing-permissions-with-stored-procedures-in-sql-server.md)  \n Describes how to use stored procedures to manage permissions and control data access. Using stored procedures is an effective way to respond to many security threats.  \n  \n [Writing Secure Dynamic SQL in SQL Server](../../../../../docs/framework/data/adonet/sql/writing-secure-dynamic-sql-in-sql-server.md)  \n Describes techniques for writing secure dynamic SQL using stored procedures.  \n  \n [Signing Stored Procedures in SQL Server](../../../../../docs/framework/data/adonet/sql/signing-stored-procedures-in-sql-server.md)  \n Describes how to sign a stored procedure with a certificate to enable users to work with data they do not have direct access to. This enables stored procedures to perform operations that the caller does not have permissions to perform directly.  \n  \n [Customizing Permissions with Impersonation in SQL Server](../../../../../docs/framework/data/adonet/sql/customizing-permissions-with-impersonation-in-sql-server.md)  \n Describes how to use the EXECUTE AS clause to impersonate another user. Impersonation switches the execution context from the caller to the specified user.  \n  \n [Granting Row-Level Permissions in SQL Server](../../../../../docs/framework/data/adonet/sql/granting-row-level-permissions-in-sql-server.md)  \n Describes how to implement row-level permissions to restrict data access.  \n  \n [Creating Application Roles in SQL Server](../../../../../docs/framework/data/adonet/sql/creating-application-roles-in-sql-server.md)  \n Describes features and functionality of application roles.  \n  \n [Enabling Cross-Database Access in SQL Server](../../../../../docs/framework/data/adonet/sql/enabling-cross-database-access-in-sql-server.md)  \n Describes how to enable cross-database access without jeopardizing security.  \n  \n## See also\n\n- [SQL Server Security](../../../../../docs/framework/data/adonet/sql/sql-server-security.md)\n- [Overview of SQL Server Security](../../../../../docs/framework/data/adonet/sql/overview-of-sql-server-security.md)\n- [Securing ADO.NET Applications](../../../../../docs/framework/data/adonet/securing-ado-net-applications.md)\n- [ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)\n","nodes":[{"pos":[4,128],"embed":true,"restype":"x-metadata","content":"title: \"Application Security Scenarios in SQL Server\"\nms.date: \"03/30/2017\"\nms.assetid: 0164f3a4-406e-4693-bec3-03c8e18b46d7","nodes":[{"content":"Application Security Scenarios in SQL Server","nodes":[{"pos":[0,44],"content":"Application Security Scenarios in SQL Server","nodes":[{"content":"Application Security Scenarios in SQL Server","pos":[0,44]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[135,179],"content":"Application Security Scenarios in SQL Server","linkify":"Application Security Scenarios in SQL Server","nodes":[{"content":"Application Security Scenarios in SQL Server","pos":[0,44]}]},{"content":"There is no single correct way to create a secure SQL Server client application.","pos":[180,260]},{"content":"Every application is unique in its requirements, deployment environment, and user population.","pos":[261,354]},{"content":"An application that is reasonably secure when it is initially deployed can become less secure over time.","pos":[355,459]},{"content":"It is impossible to predict with any accuracy what threats may emerge in the future.","pos":[460,544]},{"content":"SQL Server, as a product, has evolved over many versions to incorporate the latest security features that enable developers to create secure database applications.","pos":[551,714]},{"content":"However, security doesn't come in the box; it requires continual monitoring and updating.","pos":[715,804]},{"pos":[813,827],"content":"Common Threats","linkify":"Common Threats","nodes":[{"content":"Common Threats","pos":[0,14]}]},{"content":"Developers need to understand security threats, the tools provided to counter them, and how to avoid self-inflicted security holes.","pos":[831,962]},{"content":"Security can best be thought of as a chain, where a break in any one link compromises the strength of the whole.","pos":[963,1075]},{"content":"The following list includes some common security threats that are discussed in more detail in the topics in this section.","pos":[1076,1197]},{"pos":[1207,1220],"content":"SQL Injection","linkify":"SQL Injection","nodes":[{"content":"SQL Injection","pos":[0,13]}]},{"content":"SQL Injection is the process by which a malicious user enters Transact-SQL statements instead of valid input.","pos":[1224,1333]},{"content":"If the input is passed directly to the server without being validated and if the application inadvertently executes the injected code, then the attack has the potential to damage or destroy data.","pos":[1334,1529]},{"content":"You can thwart SQL Server injection attacks by using stored procedures and parameterized commands, avoiding dynamic SQL, and restricting permissions on all users.","pos":[1530,1692]},{"pos":[1702,1724],"content":"Elevation of Privilege","linkify":"Elevation of Privilege","nodes":[{"content":"Elevation of Privilege","pos":[0,22]}]},{"content":"Elevation of privilege attacks occur when a user is able to assume the privileges of a trusted account, such as an owner or administrator.","pos":[1728,1866]},{"content":"Always run under least-privileged user accounts and assign only needed permissions.","pos":[1867,1950]},{"content":"Avoid using administrative or owner accounts for executing code.","pos":[1951,2015]},{"content":"This limits the amount of damage that can occur if an attack succeeds.","pos":[2016,2086]},{"content":"When performing tasks that require additional permissions, use procedure signing or impersonation only for the duration of the task.","pos":[2087,2219]},{"content":"You can sign stored procedures with certificates or use impersonation to temporarily assign permissions.","pos":[2220,2324]},{"pos":[2334,2369],"content":"Probing and Intelligent Observation","linkify":"Probing and Intelligent Observation","nodes":[{"content":"Probing and Intelligent Observation","pos":[0,35]}]},{"content":"A probing attack can use error messages generated by an application to search for security vulnerabilities.","pos":[2373,2480]},{"content":"Implement error handling in all procedural code to prevent SQL Server error information from being returned to the end user.","pos":[2481,2605]},{"pos":[2615,2629],"content":"Authentication","linkify":"Authentication","nodes":[{"content":"Authentication","pos":[0,14]}]},{"content":"A connection string injection attack can occur when using SQL Server logins if a connection string based on user input is constructed at run time.","pos":[2633,2779]},{"content":"If the connection string is not checked for valid keyword pairs, an attacker can insert extra characters, potentially accessing sensitive data or other resources on the server.","pos":[2780,2956]},{"content":"Use Windows authentication wherever possible.","pos":[2957,3002]},{"content":"If you must use SQL Server logins, use the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder&gt;</ph> to create and validate connection strings at run time.","pos":[3003,3156],"source":" If you must use SQL Server logins, use the <xref:System.Data.SqlClient.SqlConnectionStringBuilder> to create and validate connection strings at run time."},{"pos":[3166,3175],"content":"Passwords","linkify":"Passwords","nodes":[{"content":"Passwords","pos":[0,9]}]},{"content":"Many attacks succeed because an intruder was able to obtain or guess a password for a privileged user.","pos":[3179,3281]},{"content":"Passwords are your first line of defense against intruders, so setting strong passwords is essential to the security of your system.","pos":[3282,3414]},{"content":"Create and enforce password policies for mixed mode authentication.","pos":[3415,3482]},{"pos":[3489,3581],"content":"Always assign a strong password to the <ph id=\"ph1\">`sa`</ph> account, even when using Windows Authentication.","source":"Always assign a strong password to the `sa` account, even when using Windows Authentication."},{"pos":[3590,3605],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"content":"<bpt id=\"p1\">[</bpt>Managing Permissions with Stored Procedures in SQL Server<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/managing-permissions-with-stored-procedures-in-sql-server.md)</ept>","pos":[3609,3776],"source":"[Managing Permissions with Stored Procedures in SQL Server](../../../../../docs/framework/data/adonet/sql/managing-permissions-with-stored-procedures-in-sql-server.md)"},{"content":"Describes how to use stored procedures to manage permissions and control data access.","pos":[3780,3865]},{"content":"Using stored procedures is an effective way to respond to many security threats.","pos":[3866,3946]},{"content":"<bpt id=\"p1\">[</bpt>Writing Secure Dynamic SQL in SQL Server<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/writing-secure-dynamic-sql-in-sql-server.md)</ept>","pos":[3953,4086],"source":"[Writing Secure Dynamic SQL in SQL Server](../../../../../docs/framework/data/adonet/sql/writing-secure-dynamic-sql-in-sql-server.md)"},{"content":"Describes techniques for writing secure dynamic SQL using stored procedures.","pos":[4090,4166]},{"content":"<bpt id=\"p1\">[</bpt>Signing Stored Procedures in SQL Server<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/signing-stored-procedures-in-sql-server.md)</ept>","pos":[4173,4304],"source":"[Signing Stored Procedures in SQL Server](../../../../../docs/framework/data/adonet/sql/signing-stored-procedures-in-sql-server.md)"},{"content":"Describes how to sign a stored procedure with a certificate to enable users to work with data they do not have direct access to.","pos":[4308,4436]},{"content":"This enables stored procedures to perform operations that the caller does not have permissions to perform directly.","pos":[4437,4552]},{"content":"<bpt id=\"p1\">[</bpt>Customizing Permissions with Impersonation in SQL Server<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/customizing-permissions-with-impersonation-in-sql-server.md)</ept>","pos":[4559,4724],"source":"[Customizing Permissions with Impersonation in SQL Server](../../../../../docs/framework/data/adonet/sql/customizing-permissions-with-impersonation-in-sql-server.md)"},{"content":"Describes how to use the EXECUTE AS clause to impersonate another user.","pos":[4728,4799]},{"content":"Impersonation switches the execution context from the caller to the specified user.","pos":[4800,4883]},{"content":"<bpt id=\"p1\">[</bpt>Granting Row-Level Permissions in SQL Server<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/granting-row-level-permissions-in-sql-server.md)</ept>","pos":[4890,5031],"source":"[Granting Row-Level Permissions in SQL Server](../../../../../docs/framework/data/adonet/sql/granting-row-level-permissions-in-sql-server.md)"},{"content":"Describes how to implement row-level permissions to restrict data access.","pos":[5035,5108]},{"content":"<bpt id=\"p1\">[</bpt>Creating Application Roles in SQL Server<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/creating-application-roles-in-sql-server.md)</ept>","pos":[5115,5248],"source":"[Creating Application Roles in SQL Server](../../../../../docs/framework/data/adonet/sql/creating-application-roles-in-sql-server.md)"},{"content":"Describes features and functionality of application roles.","pos":[5252,5310]},{"content":"<bpt id=\"p1\">[</bpt>Enabling Cross-Database Access in SQL Server<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/enabling-cross-database-access-in-sql-server.md)</ept>","pos":[5317,5458],"source":"[Enabling Cross-Database Access in SQL Server](../../../../../docs/framework/data/adonet/sql/enabling-cross-database-access-in-sql-server.md)"},{"content":"Describes how to enable cross-database access without jeopardizing security.","pos":[5462,5538]},{"pos":[5547,5555],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5559,5650],"content":"<bpt id=\"p1\">[</bpt>SQL Server Security<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/sql-server-security.md)</ept>","source":"[SQL Server Security](../../../../../docs/framework/data/adonet/sql/sql-server-security.md)"},{"pos":[5653,5768],"content":"<bpt id=\"p1\">[</bpt>Overview of SQL Server Security<ept id=\"p1\">](../../../../../docs/framework/data/adonet/sql/overview-of-sql-server-security.md)</ept>","source":"[Overview of SQL Server Security](../../../../../docs/framework/data/adonet/sql/overview-of-sql-server-security.md)"},{"pos":[5771,5878],"content":"<bpt id=\"p1\">[</bpt>Securing ADO.NET Applications<ept id=\"p1\">](../../../../../docs/framework/data/adonet/securing-ado-net-applications.md)</ept>","source":"[Securing ADO.NET Applications](../../../../../docs/framework/data/adonet/securing-ado-net-applications.md)"},{"pos":[5881,5985],"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept>","source":"[ADO.NET Managed Providers and DataSet Developer Center](https://go.microsoft.com/fwlink/?LinkId=217917)"}]}