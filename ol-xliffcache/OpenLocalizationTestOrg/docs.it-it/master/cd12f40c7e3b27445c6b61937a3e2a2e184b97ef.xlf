<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd12f40c7e3b27445c6b61937a3e2a2e184b97ef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\misc\code-access-security.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb4a7f0b4bf4a7156cc1ead6c5a74210e0382d2c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0de0a98403fb6d1e9056edc4ed70e8de75f8209b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Code Access Security | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Code Access Security</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Today's highly connected computer systems are frequently exposed to code originating from various, possibly unknown sources.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Code can be attached to e-mail, contained in documents, or downloaded over the Internet.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Unfortunately, many computer users have experienced firsthand the effects of malicious mobile code, including viruses and worms, which can damage or destroy data and cost time and money.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Most common security mechanisms give rights to users based on their logon credentials (usually a password) and restrict resources (often directories and files) that the user is allowed to access.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, this approach fails to address several issues: users obtain code from many sources, some of which might be unreliable; code can contain bugs or vulnerabilities that enable it to be exploited by malicious code; and code sometimes does things that the user does not know it will do.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As a result, computer systems can be damaged and private data can be leaked when cautious and trustworthy users run malicious or error-filled software.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Most operating system security mechanisms require that every piece of code must be completely trusted in order to run, except perhaps for scripts on a Web page.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Therefore, there is still a need for a widely applicable security mechanism that allows code originating from one computer system to execute with protection on another system, even when there is no trust relationship between the systems.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides a security mechanism called code access security to help protect computer systems from malicious mobile code, to allow code from unknown origins to run with protection, and to help prevent trusted code from intentionally or accidentally compromising security.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Code access security enables code to be trusted to varying degrees depending on where the code originates and on other aspects of the code's identity.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Code access security also enforces the varying levels of trust on code, which minimizes the amount of code that must be fully trusted in order to run.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using code access security can reduce the likelihood that your code will be misused by malicious or error-filled code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It can reduce your liability, because you can specify the set of operations your code should be allowed to perform.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Code access security can also help minimize the damage that can result from security vulnerabilities in your code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Major changes have been made to code access security in the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The most notable change has been <bpt id="p1">[</bpt>security transparency<ept id="p1">](../../../docs/framework/misc/security-transparent-code.md)</ept>, but there are also other significant changes that affect code access security.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For information about these changes, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](../../../docs/framework/security/security-changes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Code access security primarily affects library code and partially trusted applications.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Library developers must protect their code from unauthorized access from partially trusted applications.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Partially trusted applications are applications that are loaded from external sources such as the Internet.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Applications that are installed on your desktop or on the local intranet run in full trust.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Full-trust applications are not affected by code access security unless they are marked as <bpt id="p1">[</bpt>security-transparent<ept id="p1">](../../../docs/framework/misc/security-transparent-code.md)</ept>, because they are fully trusted.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The only limitation for full-trust applications is that applications that are marked with the <ph id="ph1">&lt;xref:System.Security.SecurityTransparentAttribute&gt;</ph> attribute cannot call code that is marked with the <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Partially trusted applications must be run in a sandbox (for example, in Internet Explorer) so that code access security can be applied.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you download an application from the Internet and try to run it from your desktop, you will get a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> with the message: "An attempt was made to load an assembly from a network location which would have caused the assembly to be sandboxed in previous versions of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This release of the .NET Framework does not enable CAS policy by default, so this load may be dangerous."</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you are sure that the application can be trusted, you can enable it to be run as full trust by using the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>loadFromRemoteSources&gt; element<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For information about running an application in a sandbox, see <bpt id="p1">[</bpt>How to: Run Partially Trusted Code in a Sandbox<ept id="p1">](../../../docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All managed code that targets the common language runtime receives the benefits of code access security, even if that code does not make a single code access security call.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Code Access Security Basics<ept id="p1">](../../../docs/framework/misc/code-access-security-basics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Key Functions of Code Access Security</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Code access security helps limit the access that code has to protected resources and operations.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the .NET Framework, code access security performs the following functions:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Defines permissions and permission sets that represent the right to access various system resources.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Enables code to demand that its callers have specific permissions.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Enables code to demand that its callers possess a digital signature, thus allowing only callers from a particular organization or site to call the protected code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Enforces restrictions on code at run time by comparing the granted permissions of every caller on the call stack to the permissions that callers must have.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Walking the Call Stack</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To determine whether code is authorized to access a resource or perform an operation, the runtime's security system walks the call stack, comparing the granted permissions of each caller to the permission being demanded.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If any caller in the call stack does not have the demanded permission, a security exception is thrown and access is refused.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The stack walk is designed to help prevent luring attacks, in which less-trusted code calls highly trusted code and uses it to perform unauthorized actions.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Demanding permissions of all callers at run time affects performance, but it is essential to help protect code from luring attacks by less-trusted code.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To optimize performance, you can have your code perform fewer stack walks; however, you must be sure that you do not expose a security weakness whenever you do this.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following illustration shows the stack walk that results when a method in Assembly A4 demands that its callers have permission P.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Code access security<ept id="p1">](../../../docs/framework/misc/media/slide-10a.gif "slide_10a")</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Security stack walk</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Code Access Security Basics<ept id="p1">](../../../docs/framework/misc/code-access-security-basics.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Describes code access security and its most common uses.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security-Transparent Code, Level 2<ept id="p1">](../../../docs/framework/misc/security-transparent-code-level-2.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Describes the security transparency model in the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Libraries from Partially Trusted Code<ept id="p1">](../../../docs/framework/misc/using-libraries-from-partially-trusted-code.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Describes how to enable libraries for use with unmanaged code and how to use libraries from unmanaged code.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Key Security Concepts<ept id="p1">](../../../docs/standard/security/key-security-concepts.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Provides an overview of many of the key terms and concepts used in the .NET Framework security system.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Role-Based Security<ept id="p1">](../../../docs/standard/security/role-based-security.md)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Describes how to incorporate security based on roles.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cryptographic Services<ept id="p1">](../../../docs/standard/security/cryptographic-services.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Describes how to incorporate cryptography into your applications.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>