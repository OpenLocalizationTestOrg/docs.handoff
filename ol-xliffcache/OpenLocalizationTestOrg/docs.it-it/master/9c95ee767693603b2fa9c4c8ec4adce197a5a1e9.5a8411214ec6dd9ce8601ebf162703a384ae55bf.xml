{"content":"---\ntitle: \"DataAdapter Parameters | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: f21e6aba-b76d-46ad-a83e-2ad8e0af1e12\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# DataAdapter Parameters\nThe <xref:System.Data.Common.DbDataAdapter> has four properties that are used to retrieve data from and update data to the data source: the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> property returns data from the data source; and the <xref:System.Data.Common.DbDataAdapter.InsertCommand%2A> , <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A> properties are used to manage changes at the data source. The `SelectCommand` property must be set before you call the `Fill` method of the `DataAdapter`. The `InsertCommand`, `UpdateCommand`, or `DeleteCommand` properties must be set before the `Update` method of the `DataAdapter` is called, depending on what changes were made to the data in the <xref:System.Data.DataTable>. For example, if rows have been added, the `InsertCommand` must be set before you call `Update`. When `Update` is processing an inserted, updated, or deleted row, the `DataAdapter` uses the respective `Command` property to process the action. Current information about the modified row is passed to the `Command` object through the `Parameters` collection.  \n  \n When you update a row at the data source, you call the UPDATE statement, which uses a unique identifier to identify the row in the table be updated. The unique identifier is typically the value of a primary key field. The UPDATE statement uses parameters that contain both the unique identifier and the columns and values to be updated, as shown in the following Transact-SQL statement.  \n  \n```  \nUPDATE Customers SET CompanyName = @CompanyName   \n  WHERE CustomerID = @CustomerID  \n```  \n  \n> [!NOTE]\n>  The syntax for parameter placeholders depends on the data source. This example shows placeholders for a SQL Server data source. Use question mark (?) placeholders for <xref:System.Data.OleDb> and <xref:System.Data.Odbc> parameters.  \n  \n In this [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)] example, the `CompanyName` field is updated with the value of the `@CompanyName` parameter for the row where `CustomerID` equals the value of the `@CustomerID```parameter. The parameters retrieve information from the modified row using the <xref:System.Data.SqlClient.SqlParameter.SourceColumn%2A> property of the <xref:System.Data.SqlClient.SqlParameter> object. The following are the parameters for the previous sample UPDATE statement. The code assumes that the variable `adapter` represents a valid <xref:System.Data.SqlClient.SqlDataAdapter> object.  \n  \n```  \nadapter.Parameters.Add( _  \n  \"@CompanyName\", SqlDbType.NChar, 15, \"CompanyName\")  \nDim parameter As SqlParameter = _  \n  adapter.UpdateCommand.Parameters.Add(\"@CustomerID\", _  \n  SqlDbType.NChar, 5, \"CustomerID\")  \nparameter.SourceVersion = DataRowVersion.Original  \n```  \n  \n The `Add` method of the `Parameters` collection takes the name of the parameter, the data type, the size (if applicable to the type), and the name of the <xref:System.Data.Common.DbParameter.SourceColumn%2A> from the `DataTable`. Notice that the <xref:System.Data.Common.DbParameter.SourceVersion%2A> of the `@CustomerID` parameter is set to `Original`. This guarantees that the existing row in the data source is updated if the value of the identifying column or columns has been changed in the modified <xref:System.Data.DataRow>. In that case, the `Original` row value would match the current value at the data source, and the `Current` row value would contain the updated value. The `SourceVersion` for the `@CompanyName` parameter is not set and uses the default, `Current` row value.  \n  \n> [!NOTE]\n>  For both the `Fill` operations of the `DataAdapter` and the `Get` methods of the `DataReader`, the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] type is inferred from the type returned from the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] data provider. The inferred [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] types and accessor methods for Microsoft SQL Server, OLE DB, and ODBC data types are described in [Data Type Mappings in ADO.NET](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md).  \n  \n## Parameter.SourceColumn, Parameter.SourceVersion  \n The `SourceColumn` and `SourceVersion` may be passed as arguments to the `Parameter` constructor, or set as properties of an existing `Parameter`. The `SourceColumn` is the name of the <xref:System.Data.DataColumn> from the <xref:System.Data.DataRow> where the value of the `Parameter` will be retrieved. The `SourceVersion` specifies the `DataRow` version that the `DataAdapter` uses to retrieve the value.  \n  \n The following table shows the <xref:System.Data.DataRowVersion> enumeration values available for use with `SourceVersion`.  \n  \n|DataRowVersion Enumeration|Description|  \n|--------------------------------|-----------------|  \n|`Current`|The parameter uses the current value of the column. This is the default.|  \n|`Default`|The parameter uses the `DefaultValue` of the column.|  \n|`Original`|The parameter uses the original value of the column.|  \n|`Proposed`|The parameter uses a proposed value.|  \n  \n The `SqlClient` code example in the next section defines a parameter for an <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A> in which the `CustomerID` column is used as a `SourceColumn` for two parameters: `@CustomerID` (`SET CustomerID = @CustomerID`), and `@OldCustomerID` (`WHERE CustomerID = @OldCustomerID`). The `@CustomerID` parameter is used to update the **CustomerID** column to the current value in the `DataRow`. As a result, the `CustomerID` `SourceColumn` with a `SourceVersion` of `Current` is used. The *@OldCustomerID* parameter is used to identify the current row in the data source. Because the matching column value is found in the `Original` version of the row, the same `SourceColumn` (`CustomerID`) with a `SourceVersion` of `Original` is used.  \n  \n## Working with SqlClient Parameters  \n The following example demonstrates how to create a <xref:System.Data.SqlClient.SqlDataAdapter> and set the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> to <xref:System.Data.MissingSchemaAction> in order to retrieve additional schema information from the database. The <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties set and their corresponding <xref:System.Data.SqlClient.SqlParameter> objects added to the <xref:System.Data.SqlClient.SqlCommand.Parameters%2A> collection. The method returns a `SqlDataAdapter` object.  \n  \n [!code-csharp[Classic WebData SqlDataAdapter.SqlDataAdapter Example#1](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.SqlDataAdapter Example/CS/source.cs#1)]\n [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter Example#1](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.SqlDataAdapter Example/VB/source.vb#1)]  \n  \n## OleDb Parameter Placeholders  \n For the <xref:System.Data.OleDb.OleDbDataAdapter> and <xref:System.Data.Odbc.OdbcDataAdapter> objects, you must use question mark (?) placeholders to identify the parameters.  \n  \n```vb  \nDim selectSQL As String = _  \n  \"SELECT CustomerID, CompanyName FROM Customers \" & _  \n  \"WHERE CountryRegion = ? AND City = ?\"  \nDim insertSQL AS String = _  \n  \"INSERT INTO Customers (CustomerID, CompanyName) VALUES (?, ?)\"  \nDim updateSQL AS String = _  \n  \"UPDATE Customers SET CustomerID = ?, CompanyName = ? \" & _  \n  WHERE CustomerID = ?\"  \nDim deleteSQL As String = \"DELETE FROM Customers WHERE CustomerID = ?\"  \n```  \n  \n```csharp  \nstring selectSQL =   \n  \"SELECT CustomerID, CompanyName FROM Customers \" +  \n  \"WHERE CountryRegion = ? AND City = ?\";  \nstring insertSQL =   \n  \"INSERT INTO Customers (CustomerID, CompanyName) \" +  \n  \"VALUES (?, ?)\";  \nstring updateSQL =   \n  \"UPDATE Customers SET CustomerID = ?, CompanyName = ? \" +  \n  \"WHERE CustomerID = ? \";  \nstring deleteSQL = \"DELETE FROM Customers WHERE CustomerID = ?\";  \n```  \n  \n The parameterized query statements define which input and output parameters must be created. To create a parameter, use the `Parameters.Add` method or the `Parameter` constructor to specify the column name, data type, and size. For intrinsic data types, such as `Integer`, you do not have to include the size, or you can specify the default size.  \n  \n The following code example creates the parameters for a SQL statement and then fills a `DataSet`.  \n  \n## OleDb Example  \n  \n```vb  \n' Assumes that connection is a valid OleDbConnection object.  \nDim adapter As OleDbDataAdapter = New OleDbDataAdapter   \n  \nDim selectCMD AS OleDbCommand = New OleDbCommand(selectSQL, connection)  \nadapter.SelectCommand = selectCMD  \n  \n' Add parameters and set values.  \nselectCMD.Parameters.Add( _  \n  \"@CountryRegion\", OleDbType.VarChar, 15).Value = \"UK\"  \nselectCMD.Parameters.Add( _  \n  \"@City\", OleDbType.VarChar, 15).Value = \"London\"  \n  \nDim customers As DataSet = New DataSet  \nadapter.Fill(customers, \"Customers\")  \n  \n```  \n  \n```csharp  \n// Assumes that connection is a valid OleDbConnection object.  \nOleDbDataAdapter adapter = new OleDbDataAdapter();  \n  \nOleDbCommand selectCMD = new OleDbCommand(selectSQL, connection);  \nadapter.SelectCommand = selectCMD;  \n  \n// Add parameters and set values.  \nselectCMD.Parameters.Add(  \n  \"@CountryRegion\", OleDbType.VarChar, 15).Value = \"UK\";  \nselectCMD.Parameters.Add(  \n  \"@City\", OleDbType.VarChar, 15).Value = \"London\";  \n  \nDataSet customers = new DataSet();  \nadapter.Fill(customers, \"Customers\");  \n```  \n  \n## Odbc Parameters  \n  \n```vb  \n' Assumes that connection is a valid OdbcConnection object.  \nDim adapter As OdbcDataAdapter = New OdbcDataAdapter  \n  \nDim selectCMD AS OdbcCommand = New OdbcCommand(selectSQL, connection)  \nadapter.SelectCommand = selectCMD  \n  \n' Add Parameters and set values.  \nselectCMD.Parameters.Add(\"@CountryRegion\", OdbcType.VarChar, 15).Value = \"UK\"  \nselectCMD.Parameters.Add(\"@City\", OdbcType.VarChar, 15).Value = \"London\"  \n  \nDim customers As DataSet = New DataSet  \nadapter.Fill(customers, \"Customers\")  \n  \n```  \n  \n```csharp  \n// Assumes that connection is a valid OdbcConnection object.  \nOdbcDataAdapter adapter = new OdbcDataAdapter();  \n  \nOdbcCommand selectCMD = new OdbcCommand(selectSQL, connection);  \nadapter.SelectCommand = selectCMD;  \n  \n//Add Parameters and set values.  \nselectCMD.Parameters.Add(\"@CountryRegion\", OdbcType.VarChar, 15).Value = \"UK\";  \nselectCMD.Parameters.Add(\"@City\", OdbcType.VarChar, 15).Value = \"London\";  \n  \nDataSet customers = new DataSet();  \nadapter.Fill(customers, \"Customers\");  \n```  \n  \n> [!NOTE]\n>  If a parameter name is not supplied for a parameter, the parameter is given an incremental default name of Parameter*N* *,* starting with \"Parameter1\". We recommend that you avoid the Parameter*N* naming convention when you supply a parameter name, because the name that you supply might conflict with an existing default parameter name in the `ParameterCollection`. If the supplied name already exists, an exception is thrown.  \n  \n## See Also  \n [DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)   \n [Commands and Parameters](../../../../docs/framework/data/adonet/commands-and-parameters.md)   \n [Updating Data Sources with DataAdapters](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)   \n [Modifying Data with Stored Procedures](../../../../docs/framework/data/adonet/modifying-data-with-stored-procedures.md)   \n [Data Type Mappings in ADO.NET](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md)   \n [ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)","nodes":[{"pos":[4,353],"embed":true,"restype":"x-metadata","content":"title: \"DataAdapter Parameters | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: f21e6aba-b76d-46ad-a83e-2ad8e0af1e12\ncaps.latest.revision: 3\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"DataAdapter Parameters | Microsoft Docs","nodes":[{"pos":[0,39],"content":"DataAdapter Parameters | Microsoft Docs","nodes":[{"content":"DataAdapter Parameters | Microsoft Docs","pos":[0,39]}]}],"path":["title"]}],"yml":true},{"pos":[360,382],"content":"DataAdapter Parameters","linkify":"DataAdapter Parameters","nodes":[{"content":"DataAdapter Parameters","pos":[0,22]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> has four properties that are used to retrieve data from and update data to the data source: the <ph id=\"ph2\">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph> property returns data from the data source; and the <ph id=\"ph3\">&lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt;</ph> , <ph id=\"ph4\">&lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt;</ph> properties are used to manage changes at the data source.","pos":[383,867],"source":"The <xref:System.Data.Common.DbDataAdapter> has four properties that are used to retrieve data from and update data to the data source: the <xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> property returns data from the data source; and the <xref:System.Data.Common.DbDataAdapter.InsertCommand%2A> , <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A> properties are used to manage changes at the data source."},{"content":"The <ph id=\"ph1\">`SelectCommand`</ph> property must be set before you call the <ph id=\"ph2\">`Fill`</ph> method of the <ph id=\"ph3\">`DataAdapter`</ph>.","pos":[868,964],"source":" The `SelectCommand` property must be set before you call the `Fill` method of the `DataAdapter`."},{"content":"The <ph id=\"ph1\">`InsertCommand`</ph>, <ph id=\"ph2\">`UpdateCommand`</ph>, or <ph id=\"ph3\">`DeleteCommand`</ph> properties must be set before the <ph id=\"ph4\">`Update`</ph> method of the <ph id=\"ph5\">`DataAdapter`</ph> is called, depending on what changes were made to the data in the <ph id=\"ph6\">&lt;xref:System.Data.DataTable&gt;</ph>.","pos":[965,1188],"source":" The `InsertCommand`, `UpdateCommand`, or `DeleteCommand` properties must be set before the `Update` method of the `DataAdapter` is called, depending on what changes were made to the data in the <xref:System.Data.DataTable>."},{"content":"For example, if rows have been added, the <ph id=\"ph1\">`InsertCommand`</ph> must be set before you call <ph id=\"ph2\">`Update`</ph>.","pos":[1189,1284],"source":" For example, if rows have been added, the `InsertCommand` must be set before you call `Update`."},{"content":"When <ph id=\"ph1\">`Update`</ph> is processing an inserted, updated, or deleted row, the <ph id=\"ph2\">`DataAdapter`</ph> uses the respective <ph id=\"ph3\">`Command`</ph> property to process the action.","pos":[1285,1430],"source":" When `Update` is processing an inserted, updated, or deleted row, the `DataAdapter` uses the respective `Command` property to process the action."},{"content":"Current information about the modified row is passed to the <ph id=\"ph1\">`Command`</ph> object through the <ph id=\"ph2\">`Parameters`</ph> collection.","pos":[1431,1544],"source":" Current information about the modified row is passed to the `Command` object through the `Parameters` collection."},{"content":"When you update a row at the data source, you call the UPDATE statement, which uses a unique identifier to identify the row in the table be updated.","pos":[1551,1699]},{"content":"The unique identifier is typically the value of a primary key field.","pos":[1700,1768]},{"content":"The UPDATE statement uses parameters that contain both the unique identifier and the columns and values to be updated, as shown in the following Transact-SQL statement.","pos":[1769,1937]},{"pos":[2046,2288],"content":"[!NOTE]\n The syntax for parameter placeholders depends on the data source. This example shows placeholders for a SQL Server data source. Use question mark (?) placeholders for <xref:System.Data.OleDb> and <xref:System.Data.Odbc> parameters.","leadings":["","> "],"nodes":[{"content":"The syntax for parameter placeholders depends on the data source. This example shows placeholders for a SQL Server data source. Use question mark (?) placeholders for <xref:System.Data.OleDb> and <xref:System.Data.Odbc> parameters.","pos":[9,240],"nodes":[{"content":"The syntax for parameter placeholders depends on the data source.","pos":[0,65]},{"content":"This example shows placeholders for a SQL Server data source.","pos":[66,127]},{"content":"Use question mark (?) placeholders for <ph id=\"ph1\">&lt;xref:System.Data.OleDb&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.Odbc&gt;</ph> parameters.","pos":[128,231],"source":" Use question mark (?) placeholders for <xref:System.Data.OleDb> and <xref:System.Data.Odbc> parameters."}]}]},{"pos":[2295,2911],"content":"In this <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]</ph> example, the <ph id=\"ph2\">`CompanyName`</ph> field is updated with the value of the <ph id=\"ph3\">`@CompanyName`</ph> parameter for the row where <ph id=\"ph4\">`CustomerID`</ph> equals the value of the <ph id=\"ph5\">`@CustomerID```parameter. The parameters retrieve information from the modified row using the &lt;xref:System.Data.SqlClient.SqlParameter.SourceColumn%2A&gt; property of the &lt;xref:System.Data.SqlClient.SqlParameter&gt; object. The following are the parameters for the previous sample UPDATE statement. The code assumes that the variable `</ph>adapter` represents a valid <ph id=\"ph6\">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> object.","source":"In this [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)] example, the `CompanyName` field is updated with the value of the `@CompanyName` parameter for the row where `CustomerID` equals the value of the `@CustomerID```parameter. The parameters retrieve information from the modified row using the <xref:System.Data.SqlClient.SqlParameter.SourceColumn%2A> property of the <xref:System.Data.SqlClient.SqlParameter> object. The following are the parameters for the previous sample UPDATE statement. The code assumes that the variable `adapter` represents a valid <xref:System.Data.SqlClient.SqlDataAdapter> object."},{"content":"The <ph id=\"ph1\">`Add`</ph> method of the <ph id=\"ph2\">`Parameters`</ph> collection takes the name of the parameter, the data type, the size (if applicable to the type), and the name of the <ph id=\"ph3\">&lt;xref:System.Data.Common.DbParameter.SourceColumn%2A&gt;</ph> from the <ph id=\"ph4\">`DataTable`</ph>.","pos":[3201,3430],"source":"The `Add` method of the `Parameters` collection takes the name of the parameter, the data type, the size (if applicable to the type), and the name of the <xref:System.Data.Common.DbParameter.SourceColumn%2A> from the `DataTable`."},{"content":"Notice that the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbParameter.SourceVersion%2A&gt;</ph> of the <ph id=\"ph2\">`@CustomerID`</ph> parameter is set to <ph id=\"ph3\">`Original`</ph>.","pos":[3431,3554],"source":" Notice that the <xref:System.Data.Common.DbParameter.SourceVersion%2A> of the `@CustomerID` parameter is set to `Original`."},{"content":"This guarantees that the existing row in the data source is updated if the value of the identifying column or columns has been changed in the modified <ph id=\"ph1\">&lt;xref:System.Data.DataRow&gt;</ph>.","pos":[3555,3733],"source":" This guarantees that the existing row in the data source is updated if the value of the identifying column or columns has been changed in the modified <xref:System.Data.DataRow>."},{"content":"In that case, the <ph id=\"ph1\">`Original`</ph> row value would match the current value at the data source, and the <ph id=\"ph2\">`Current`</ph> row value would contain the updated value.","pos":[3734,3883],"source":" In that case, the `Original` row value would match the current value at the data source, and the `Current` row value would contain the updated value."},{"content":"The <ph id=\"ph1\">`SourceVersion`</ph> for the <ph id=\"ph2\">`@CompanyName`</ph> parameter is not set and uses the default, <ph id=\"ph3\">`Current`</ph> row value.","pos":[3884,3990],"source":" The `SourceVersion` for the `@CompanyName` parameter is not set and uses the default, `Current` row value."},{"pos":[3998,4580],"content":"[!NOTE]\n For both the `Fill` operations of the `DataAdapter` and the `Get` methods of the `DataReader`, the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] type is inferred from the type returned from the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] data provider. The inferred [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] types and accessor methods for Microsoft SQL Server, OLE DB, and ODBC data types are described in [Data Type Mappings in ADO.NET](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md).","leadings":["","> "],"nodes":[{"content":"For both the `Fill` operations of the `DataAdapter` and the `Get` methods of the `DataReader`, the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] type is inferred from the type returned from the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] data provider. The inferred [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] types and accessor methods for Microsoft SQL Server, OLE DB, and ODBC data types are described in [Data Type Mappings in ADO.NET](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md).","pos":[9,580],"nodes":[{"content":"For both the <ph id=\"ph1\">`Fill`</ph> operations of the <ph id=\"ph2\">`DataAdapter`</ph> and the <ph id=\"ph3\">`Get`</ph> methods of the <ph id=\"ph4\">`DataReader`</ph>, the <ph id=\"ph5\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> type is inferred from the type returned from the <ph id=\"ph6\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> data provider.","pos":[0,290],"source":"For both the `Fill` operations of the `DataAdapter` and the `Get` methods of the `DataReader`, the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] type is inferred from the type returned from the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] data provider."},{"content":"The inferred <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> types and accessor methods for Microsoft SQL Server, OLE DB, and ODBC data types are described in <bpt id=\"p1\">[</bpt>Data Type Mappings in ADO.NET<ept id=\"p1\">](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md)</ept>.","pos":[291,571],"source":" The inferred [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] types and accessor methods for Microsoft SQL Server, OLE DB, and ODBC data types are described in [Data Type Mappings in ADO.NET](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md)."}]}]},{"pos":[4589,4636],"content":"Parameter.SourceColumn, Parameter.SourceVersion","linkify":"Parameter.SourceColumn, Parameter.SourceVersion","nodes":[{"content":"Parameter.SourceColumn, Parameter.SourceVersion","pos":[0,47]}]},{"content":"The <ph id=\"ph1\">`SourceColumn`</ph> and <ph id=\"ph2\">`SourceVersion`</ph> may be passed as arguments to the <ph id=\"ph3\">`Parameter`</ph> constructor, or set as properties of an existing <ph id=\"ph4\">`Parameter`</ph>.","pos":[4640,4786],"source":"The `SourceColumn` and `SourceVersion` may be passed as arguments to the `Parameter` constructor, or set as properties of an existing `Parameter`."},{"content":"The <ph id=\"ph1\">`SourceColumn`</ph> is the name of the <ph id=\"ph2\">&lt;xref:System.Data.DataColumn&gt;</ph> from the <ph id=\"ph3\">&lt;xref:System.Data.DataRow&gt;</ph> where the value of the <ph id=\"ph4\">`Parameter`</ph> will be retrieved.","pos":[4787,4944],"source":" The `SourceColumn` is the name of the <xref:System.Data.DataColumn> from the <xref:System.Data.DataRow> where the value of the `Parameter` will be retrieved."},{"content":"The <ph id=\"ph1\">`SourceVersion`</ph> specifies the <ph id=\"ph2\">`DataRow`</ph> version that the <ph id=\"ph3\">`DataAdapter`</ph> uses to retrieve the value.","pos":[4945,5047],"source":" The `SourceVersion` specifies the `DataRow` version that the `DataAdapter` uses to retrieve the value."},{"pos":[5054,5176],"content":"The following table shows the <ph id=\"ph1\">&lt;xref:System.Data.DataRowVersion&gt;</ph> enumeration values available for use with <ph id=\"ph2\">`SourceVersion`</ph>.","source":"The following table shows the <xref:System.Data.DataRowVersion> enumeration values available for use with `SourceVersion`."},{"content":"DataRowVersion Enumeration","pos":[5183,5209]},{"content":"Description","pos":[5210,5221]},{"content":"The parameter uses the current value of the column.","pos":[5291,5342]},{"content":"This is the default.","pos":[5343,5363]},{"pos":[5378,5430],"content":"The parameter uses the <ph id=\"ph1\">`DefaultValue`</ph> of the column.","source":"The parameter uses the `DefaultValue` of the column."},{"content":"The parameter uses the original value of the column.","pos":[5446,5498]},{"content":"The parameter uses a proposed value.","pos":[5514,5550]},{"content":"The <ph id=\"ph1\">`SqlClient`</ph> code example in the next section defines a parameter for an <ph id=\"ph2\">&lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;</ph> in which the <ph id=\"ph3\">`CustomerID`</ph> column is used as a <ph id=\"ph4\">`SourceColumn`</ph> for two parameters: <ph id=\"ph5\">`@CustomerID`</ph> (<ph id=\"ph6\">`SET CustomerID = @CustomerID`</ph>), and <ph id=\"ph7\">`@OldCustomerID`</ph> (<ph id=\"ph8\">`WHERE CustomerID = @OldCustomerID`</ph>).","pos":[5558,5879],"source":"The `SqlClient` code example in the next section defines a parameter for an <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A> in which the `CustomerID` column is used as a `SourceColumn` for two parameters: `@CustomerID` (`SET CustomerID = @CustomerID`), and `@OldCustomerID` (`WHERE CustomerID = @OldCustomerID`)."},{"content":"The <ph id=\"ph1\">`@CustomerID`</ph> parameter is used to update the <bpt id=\"p1\">**</bpt>CustomerID<ept id=\"p1\">**</ept> column to the current value in the <ph id=\"ph2\">`DataRow`</ph>.","pos":[5880,5990],"source":" The `@CustomerID` parameter is used to update the **CustomerID** column to the current value in the `DataRow`."},{"content":"As a result, the <ph id=\"ph1\">`CustomerID`</ph> <ph id=\"ph2\">`SourceColumn`</ph> with a <ph id=\"ph3\">`SourceVersion`</ph> of <ph id=\"ph4\">`Current`</ph> is used.","pos":[5991,6080],"source":" As a result, the `CustomerID` `SourceColumn` with a `SourceVersion` of `Current` is used."},{"content":"The <bpt id=\"p1\">*</bpt><ph id=\"ph1\">@OldCustomerID</ph><ept id=\"p1\">*</ept> parameter is used to identify the current row in the data source.","pos":[6081,6167],"source":" The *@OldCustomerID* parameter is used to identify the current row in the data source."},{"content":"Because the matching column value is found in the <ph id=\"ph1\">`Original`</ph> version of the row, the same <ph id=\"ph2\">`SourceColumn`</ph> (<ph id=\"ph3\">`CustomerID`</ph>) with a <ph id=\"ph4\">`SourceVersion`</ph> of <ph id=\"ph5\">`Original`</ph> is used.","pos":[6168,6333],"source":" Because the matching column value is found in the `Original` version of the row, the same `SourceColumn` (`CustomerID`) with a `SourceVersion` of `Original` is used."},{"pos":[6342,6375],"content":"Working with SqlClient Parameters","linkify":"Working with SqlClient Parameters","nodes":[{"content":"Working with SqlClient Parameters","pos":[0,33]}]},{"content":"The following example demonstrates how to create a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> and set the <ph id=\"ph2\">&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;</ph> to <ph id=\"ph3\">&lt;xref:System.Data.MissingSchemaAction&gt;</ph> in order to retrieve additional schema information from the database.","pos":[6379,6658],"source":"The following example demonstrates how to create a <xref:System.Data.SqlClient.SqlDataAdapter> and set the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> to <xref:System.Data.MissingSchemaAction> in order to retrieve additional schema information from the database."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A&gt;</ph> properties set and their corresponding <ph id=\"ph5\">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> objects added to the <ph id=\"ph6\">&lt;xref:System.Data.SqlClient.SqlCommand.Parameters%2A&gt;</ph> collection.","pos":[6659,7081],"source":" The <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties set and their corresponding <xref:System.Data.SqlClient.SqlParameter> objects added to the <xref:System.Data.SqlClient.SqlCommand.Parameters%2A> collection."},{"content":"The method returns a <ph id=\"ph1\">`SqlDataAdapter`</ph> object.","pos":[7082,7127],"source":" The method returns a `SqlDataAdapter` object."},{"pos":[7540,7568],"content":"OleDb Parameter Placeholders","linkify":"OleDb Parameter Placeholders","nodes":[{"content":"OleDb Parameter Placeholders","pos":[0,28]}]},{"content":"For the <ph id=\"ph1\">&lt;xref:System.Data.OleDb.OleDbDataAdapter&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.Odbc.OdbcDataAdapter&gt;</ph> objects, you must use question mark (?) placeholders to identify the parameters.","pos":[7572,7746],"source":"For the <xref:System.Data.OleDb.OleDbDataAdapter> and <xref:System.Data.Odbc.OdbcDataAdapter> objects, you must use question mark (?) placeholders to identify the parameters."},{"content":"The parameterized query statements define which input and output parameters must be created.","pos":[8613,8705]},{"content":"To create a parameter, use the <ph id=\"ph1\">`Parameters.Add`</ph> method or the <ph id=\"ph2\">`Parameter`</ph> constructor to specify the column name, data type, and size.","pos":[8706,8840],"source":" To create a parameter, use the `Parameters.Add` method or the `Parameter` constructor to specify the column name, data type, and size."},{"content":"For intrinsic data types, such as <ph id=\"ph1\">`Integer`</ph>, you do not have to include the size, or you can specify the default size.","pos":[8841,8959],"source":" For intrinsic data types, such as `Integer`, you do not have to include the size, or you can specify the default size."},{"pos":[8966,9063],"content":"The following code example creates the parameters for a SQL statement and then fills a <ph id=\"ph1\">`DataSet`</ph>.","source":"The following code example creates the parameters for a SQL statement and then fills a `DataSet`."},{"pos":[9072,9085],"content":"OleDb Example","linkify":"OleDb Example","nodes":[{"content":"OleDb Example","pos":[0,13]}]},{"pos":[10174,10189],"content":"Odbc Parameters","linkify":"Odbc Parameters","nodes":[{"content":"Odbc Parameters","pos":[0,15]}]},{"pos":[11237,11675],"content":"[!NOTE]\n If a parameter name is not supplied for a parameter, the parameter is given an incremental default name of Parameter*N* *,* starting with \"Parameter1\". We recommend that you avoid the Parameter*N* naming convention when you supply a parameter name, because the name that you supply might conflict with an existing default parameter name in the `ParameterCollection`. If the supplied name already exists, an exception is thrown.","leadings":["","> "],"nodes":[{"content":"If a parameter name is not supplied for a parameter, the parameter is given an incremental default name of Parameter*N* *,* starting with \"Parameter1\". We recommend that you avoid the Parameter*N* naming convention when you supply a parameter name, because the name that you supply might conflict with an existing default parameter name in the `ParameterCollection`. If the supplied name already exists, an exception is thrown.","pos":[9,436],"nodes":[{"content":"If a parameter name is not supplied for a parameter, the parameter is given an incremental default name of Parameter<bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>,<ept id=\"p2\">*</ept> starting with \"Parameter1\".","pos":[0,151],"source":"If a parameter name is not supplied for a parameter, the parameter is given an incremental default name of Parameter*N* *,* starting with \"Parameter1\"."},{"content":"We recommend that you avoid the Parameter<bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept> naming convention when you supply a parameter name, because the name that you supply might conflict with an existing default parameter name in the <ph id=\"ph1\">`ParameterCollection`</ph>.","pos":[152,366],"source":" We recommend that you avoid the Parameter*N* naming convention when you supply a parameter name, because the name that you supply might conflict with an existing default parameter name in the `ParameterCollection`."},{"content":"If the supplied name already exists, an exception is thrown.","pos":[367,427]}]}]},{"pos":[11684,11692],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>DataAdapters and DataReaders<ept id=\"p1\">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept><ph id=\"ph1\"> </ph>","pos":[11696,11799],"source":"[DataAdapters and DataReaders](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md) "},{"content":"<bpt id=\"p1\">[</bpt>Commands and Parameters<ept id=\"p1\">](../../../../docs/framework/data/adonet/commands-and-parameters.md)</ept><ph id=\"ph1\"> </ph>","pos":[11803,11896],"source":"[Commands and Parameters](../../../../docs/framework/data/adonet/commands-and-parameters.md) "},{"content":"<bpt id=\"p1\">[</bpt>Updating Data Sources with DataAdapters<ept id=\"p1\">](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)</ept><ph id=\"ph1\"> </ph>","pos":[11900,12025],"source":"[Updating Data Sources with DataAdapters](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md) "},{"content":"<bpt id=\"p1\">[</bpt>Modifying Data with Stored Procedures<ept id=\"p1\">](../../../../docs/framework/data/adonet/modifying-data-with-stored-procedures.md)</ept><ph id=\"ph1\"> </ph>","pos":[12029,12150],"source":"[Modifying Data with Stored Procedures](../../../../docs/framework/data/adonet/modifying-data-with-stored-procedures.md) "},{"content":"<bpt id=\"p1\">[</bpt>Data Type Mappings in ADO.NET<ept id=\"p1\">](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md)</ept><ph id=\"ph1\"> </ph>","pos":[12154,12259],"source":"[Data Type Mappings in ADO.NET](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md) "},{"content":"<bpt id=\"p1\">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept>","pos":[12263,12366],"source":"[ADO.NET Managed Providers and DataSet Developer Center](http://go.microsoft.com/fwlink/?LinkId=217917)"}]}