{"content":"---\ntitle: \"How to: Execute Expression Trees (C#)\"\nms.date: 07/20/2015\nms.assetid: b8c40db5-2464-4bb9-9001-8c2bc7f006c5\n---\n# How to: Execute Expression Trees (C#)\nThis topic shows you how to execute an expression tree. Executing an expression tree may return a value, or it may just perform an action such as calling a method.  \n  \n Only expression trees that represent lambda expressions can be executed. Expression trees that represent lambda expressions are of type <xref:System.Linq.Expressions.LambdaExpression> or <xref:System.Linq.Expressions.Expression%601>. To execute these expression trees, call the <xref:System.Linq.Expressions.LambdaExpression.Compile%2A> method to create an executable delegate, and then invoke the delegate.  \n  \n> [!NOTE]\n>  If the type of the delegate is not known, that is, the lambda expression is of type <xref:System.Linq.Expressions.LambdaExpression> and not <xref:System.Linq.Expressions.Expression%601>, you must call the <xref:System.Delegate.DynamicInvoke%2A> method on the delegate instead of invoking it directly.  \n  \n If an expression tree does not represent a lambda expression, you can create a new lambda expression that has the original expression tree as its body, by calling the <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> method. Then, you can execute the lambda expression as described earlier in this section.  \n  \n## Example  \n The following code example demonstrates how to execute an expression tree that represents raising a number to a power by creating a lambda expression and executing it. The result, which represents the number raised to the power, is displayed.  \n  \n```csharp  \n// The expression tree to execute.  \nBinaryExpression be = Expression.Power(Expression.Constant(2D), Expression.Constant(3D));  \n  \n// Create a lambda expression.  \nExpression<Func<double>> le = Expression.Lambda<Func<double>>(be);  \n  \n// Compile the lambda expression.  \nFunc<double> compiledExpression = le.Compile();  \n  \n// Execute the lambda expression.  \ndouble result = compiledExpression();  \n  \n// Display the result.  \nConsole.WriteLine(result);  \n  \n// This code produces the following output:  \n// 8  \n```  \n  \n## Compiling the Code  \n  \n-   Add a project reference to System.Core.dll if it is not already referenced.  \n  \n-   Include the System.Linq.Expressions namespace.  \n  \n## See also\n\n- [Expression Trees (C#)](../../../../csharp/programming-guide/concepts/expression-trees/index.md)\n- [How to: Modify Expression Trees (C#)](../../../../csharp/programming-guide/concepts/expression-trees/how-to-modify-expression-trees.md)\n","nodes":[{"pos":[4,119],"embed":true,"restype":"x-metadata","content":"title: \"How to: Execute Expression Trees (C#)\"\nms.date: 07/20/2015\nms.assetid: b8c40db5-2464-4bb9-9001-8c2bc7f006c5","nodes":[{"content":"How to: Execute Expression Trees (C#)","nodes":[{"pos":[0,37],"content":"How to: Execute Expression Trees (C#)","nodes":[{"content":"How to: Execute Expression Trees (C#)","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[126,163],"content":"How to: Execute Expression Trees (C#)","linkify":"How to: Execute Expression Trees (C#)","nodes":[{"content":"How to: Execute Expression Trees (C#)","pos":[0,37]}]},{"content":"This topic shows you how to execute an expression tree.","pos":[164,219]},{"content":"Executing an expression tree may return a value, or it may just perform an action such as calling a method.","pos":[220,327]},{"content":"Only expression trees that represent lambda expressions can be executed.","pos":[334,406]},{"content":"Expression trees that represent lambda expressions are of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[407,567],"source":" Expression trees that represent lambda expressions are of type <xref:System.Linq.Expressions.LambdaExpression> or <xref:System.Linq.Expressions.Expression%601>."},{"content":"To execute these expression trees, call the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.LambdaExpression.Compile%2A&gt;</ph> method to create an executable delegate, and then invoke the delegate.","pos":[568,741],"source":" To execute these expression trees, call the <xref:System.Linq.Expressions.LambdaExpression.Compile%2A> method to create an executable delegate, and then invoke the delegate."},{"pos":[749,1060],"content":"[!NOTE]\n If the type of the delegate is not known, that is, the lambda expression is of type <xref:System.Linq.Expressions.LambdaExpression> and not <xref:System.Linq.Expressions.Expression%601>, you must call the <xref:System.Delegate.DynamicInvoke%2A> method on the delegate instead of invoking it directly.","leadings":["","> "],"nodes":[{"content":"If the type of the delegate is not known, that is, the lambda expression is of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> and not <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, you must call the <ph id=\"ph3\">&lt;xref:System.Delegate.DynamicInvoke%2A&gt;</ph> method on the delegate instead of invoking it directly.","pos":[9,309],"source":"If the type of the delegate is not known, that is, the lambda expression is of type <xref:System.Linq.Expressions.LambdaExpression> and not <xref:System.Linq.Expressions.Expression%601>, you must call the <xref:System.Delegate.DynamicInvoke%2A> method on the delegate instead of invoking it directly."}]},{"content":"If an expression tree does not represent a lambda expression, you can create a new lambda expression that has the original expression tree as its body, by calling the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29&gt;</ph> method.","pos":[1067,1427],"source":"If an expression tree does not represent a lambda expression, you can create a new lambda expression that has the original expression tree as its body, by calling the <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> method."},{"content":"Then, you can execute the lambda expression as described earlier in this section.","pos":[1428,1509]},{"pos":[1518,1525],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates how to execute an expression tree that represents raising a number to a power by creating a lambda expression and executing it.","pos":[1529,1696]},{"content":"The result, which represents the number raised to the power, is displayed.","pos":[1697,1771]},{"pos":[2316,2334],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"Add a project reference to System.Core.dll if it is not already referenced.","pos":[2344,2419]},{"content":"Include the System.Linq.Expressions namespace.","pos":[2429,2475]},{"pos":[2484,2492],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2496,2592],"content":"<bpt id=\"p1\">[</bpt>Expression Trees (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/expression-trees/index.md)</ept>","source":"[Expression Trees (C#)](../../../../csharp/programming-guide/concepts/expression-trees/index.md)"},{"pos":[2595,2731],"content":"<bpt id=\"p1\">[</bpt>How to: Modify Expression Trees (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/expression-trees/how-to-modify-expression-trees.md)</ept>","source":"[How to: Modify Expression Trees (C#)](../../../../csharp/programming-guide/concepts/expression-trees/how-to-modify-expression-trees.md)"}]}