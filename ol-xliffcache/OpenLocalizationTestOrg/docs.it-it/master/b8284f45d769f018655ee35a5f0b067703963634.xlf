<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="dataadapter-parameters.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8284f45d769f018655ee35a5f0b067703963634</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\dataadapter-parameters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a0fc02eb4369c7946deecfd9bb369625c1aa935</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2c2ab99437d7c421332d9a3e0816d37ed82d585</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>DataAdapter Parameters</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>DataAdapter Parameters</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph> has four properties that are used to retrieve data from and update data to the data source: the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.SelectCommand%2A&gt;</ph> property returns data from the data source; and the <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt;</ph> , <ph id="ph4">&lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt;</ph> properties are used to manage changes at the data source.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SelectCommand`</ph> property must be set before you call the <ph id="ph2">`Fill`</ph> method of the <ph id="ph3">`DataAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InsertCommand`</ph>, <ph id="ph2">`UpdateCommand`</ph>, or <ph id="ph3">`DeleteCommand`</ph> properties must be set before the <ph id="ph4">`Update`</ph> method of the <ph id="ph5">`DataAdapter`</ph> is called, depending on what changes were made to the data in the <ph id="ph6">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, if rows have been added, the <ph id="ph1">`InsertCommand`</ph> must be set before you call <ph id="ph2">`Update`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`Update`</ph> is processing an inserted, updated, or deleted row, the <ph id="ph2">`DataAdapter`</ph> uses the respective <ph id="ph3">`Command`</ph> property to process the action.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Current information about the modified row is passed to the <ph id="ph1">`Command`</ph> object through the <ph id="ph2">`Parameters`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you update a row at the data source, you call the UPDATE statement, which uses a unique identifier to identify the row in the table to be updated.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The unique identifier is typically the value of a primary key field.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The UPDATE statement uses parameters that contain both the unique identifier and the columns and values to be updated, as shown in the following Transact-SQL statement.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The syntax for parameter placeholders depends on the data source.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This example shows placeholders for a SQL Server data source.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use question mark (?) placeholders for <ph id="ph1">&lt;xref:System.Data.OleDb&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.Odbc&gt;</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this Visual Basic example, the <ph id="ph1">`CompanyName`</ph> field is updated with the value of the <ph id="ph2">`@CompanyName`</ph> parameter for the row where <ph id="ph3">`CustomerID`</ph> equals the value of the <ph id="ph4">`@CustomerID`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The parameters retrieve information from the modified row using the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameter.SourceColumn%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following are the parameters for the previous sample UPDATE statement.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The code assumes that the variable <ph id="ph1">`adapter`</ph> represents a valid <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Add`</ph> method of the <ph id="ph2">`Parameters`</ph> collection takes the name of the parameter, the data type, the size (if applicable to the type), and the name of the <ph id="ph3">&lt;xref:System.Data.Common.DbParameter.SourceColumn%2A&gt;</ph> from the <ph id="ph4">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Data.Common.DbParameter.SourceVersion%2A&gt;</ph> of the <ph id="ph2">`@CustomerID`</ph> parameter is set to <ph id="ph3">`Original`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This guarantees that the existing row in the data source is updated if the value of the identifying column or columns has been changed in the modified <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In that case, the <ph id="ph1">`Original`</ph> row value would match the current value at the data source, and the <ph id="ph2">`Current`</ph> row value would contain the updated value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SourceVersion`</ph> for the <ph id="ph2">`@CompanyName`</ph> parameter is not set and uses the default, <ph id="ph3">`Current`</ph> row value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For both the <ph id="ph1">`Fill`</ph> operations of the <ph id="ph2">`DataAdapter`</ph> and the <ph id="ph3">`Get`</ph> methods of the <ph id="ph4">`DataReader`</ph>, the <ph id="ph5">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> type is inferred from the type returned from the <ph id="ph6">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> data provider.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The inferred <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> types and accessor methods for Microsoft SQL Server, OLE DB, and ODBC data types are described in <bpt id="p1">[</bpt>Data Type Mappings in ADO.NET<ept id="p1">](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Parameter.SourceColumn, Parameter.SourceVersion</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SourceColumn`</ph> and <ph id="ph2">`SourceVersion`</ph> may be passed as arguments to the <ph id="ph3">`Parameter`</ph> constructor, or set as properties of an existing <ph id="ph4">`Parameter`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SourceColumn`</ph> is the name of the <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> from the <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> where the value of the <ph id="ph4">`Parameter`</ph> will be retrieved.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SourceVersion`</ph> specifies the <ph id="ph2">`DataRow`</ph> version that the <ph id="ph3">`DataAdapter`</ph> uses to retrieve the value.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following table shows the <ph id="ph1">&lt;xref:System.Data.DataRowVersion&gt;</ph> enumeration values available for use with <ph id="ph2">`SourceVersion`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>DataRowVersion Enumeration</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The parameter uses the current value of the column.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is the default.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The parameter uses the <ph id="ph1">`DefaultValue`</ph> of the column.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The parameter uses the original value of the column.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The parameter uses a proposed value.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SqlClient`</ph> code example in the next section defines a parameter for an <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;</ph> in which the <ph id="ph3">`CustomerID`</ph> column is used as a <ph id="ph4">`SourceColumn`</ph> for two parameters: <ph id="ph5">`@CustomerID`</ph> (<ph id="ph6">`SET CustomerID = @CustomerID`</ph>), and <ph id="ph7">`@OldCustomerID`</ph> (<ph id="ph8">`WHERE CustomerID = @OldCustomerID`</ph>).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`@CustomerID`</ph> parameter is used to update the <bpt id="p1">**</bpt>CustomerID<ept id="p1">**</ept> column to the current value in the <ph id="ph2">`DataRow`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>As a result, the <ph id="ph1">`CustomerID`</ph> <ph id="ph2">`SourceColumn`</ph> with a <ph id="ph3">`SourceVersion`</ph> of <ph id="ph4">`Current`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`@OldCustomerID`</ph> parameter is used to identify the current row in the data source.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because the matching column value is found in the <ph id="ph1">`Original`</ph> version of the row, the same <ph id="ph2">`SourceColumn`</ph> (<ph id="ph3">`CustomerID`</ph>) with a <ph id="ph4">`SourceVersion`</ph> of <ph id="ph5">`Original`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Working with SqlClient Parameters</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to create a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> and set the <ph id="ph2">&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Data.MissingSchemaAction.AddWithKey&gt;</ph> in order to retrieve additional schema information from the database.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A&gt;</ph> properties set and their corresponding <ph id="ph5">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> objects added to the <ph id="ph6">&lt;xref:System.Data.SqlClient.SqlCommand.Parameters%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The method returns a <ph id="ph1">`SqlDataAdapter`</ph> object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>OleDb Parameter Placeholders</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">&lt;xref:System.Data.OleDb.OleDbDataAdapter&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.Odbc.OdbcDataAdapter&gt;</ph> objects, you must use question mark (?) placeholders to identify the parameters.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The parameterized query statements define which input and output parameters must be created.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To create a parameter, use the <ph id="ph1">`Parameters.Add`</ph> method or the <ph id="ph2">`Parameter`</ph> constructor to specify the column name, data type, and size.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For intrinsic data types, such as <ph id="ph1">`Integer`</ph>, you do not have to include the size, or you can specify the default size.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following code example creates the parameters for a SQL statement and then fills a <ph id="ph1">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>OleDb Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Odbc Parameters</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If a parameter name is not supplied for a parameter, the parameter is given an incremental default name of Parameter<bpt id="p1">*</bpt>N<ept id="p1">*</ept> <bpt id="p2">*</bpt>,<ept id="p2">*</ept> starting with "Parameter1".</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>We recommend that you avoid the Parameter<bpt id="p1">*</bpt>N<ept id="p1">*</ept> naming convention when you supply a parameter name, because the name that you supply might conflict with an existing default parameter name in the <ph id="ph1">`ParameterCollection`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the supplied name already exists, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataAdapters and DataReaders<ept id="p1">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Commands and Parameters<ept id="p1">](../../../../docs/framework/data/adonet/commands-and-parameters.md)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Updating Data Sources with DataAdapters<ept id="p1">](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Modifying Data with Stored Procedures<ept id="p1">](../../../../docs/framework/data/adonet/modifying-data-with-stored-procedures.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Type Mappings in ADO.NET<ept id="p1">](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>