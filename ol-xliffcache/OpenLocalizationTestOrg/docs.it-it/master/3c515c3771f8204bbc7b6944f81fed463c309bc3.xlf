<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-on-mac-vs-full-solution.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c515c3771f8204bbc7b6944f81fed463c309bc3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-mac-vs-full-solution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ac655b3e761431f27aea6f657f0a0605d0cfcbd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e01ad395ea896701539cd1541b95c793fa6087d6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Building a complete .NET Core solution on macOS using Visual Studio for Mac</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This topic walks you through building a .NET Core solution that includes a reusable library and unit testing.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on macOS using Visual Studio for Mac</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac provides a full-featured Integrated Development Environment (IDE) for developing .NET Core applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic walks you through building a .NET Core solution that includes a reusable library and unit testing.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This tutorial shows you how to create an application that accepts a search word and a string of text from the user, counts the number of times the search word appears in the string using a method in a class library, and returns the result to the user.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The solution also includes unit testing for the class library as an introduction to unit testing concepts.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you prefer to proceed through the tutorial with a complete sample, download the <bpt id="p1">[</bpt>sample solution<ept id="p1">](https://github.com/dotnet/samples/blob/master/core/tutorials/using-on-mac-vs-full-solution/WordCounter)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For download instructions, see <bpt id="p1">[</bpt>Samples and Tutorials<ept id="p1">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Your feedback is highly valued.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are two ways you can provide feedback to the development team on Visual Studio for Mac:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In Visual Studio for Mac, select <bpt id="p1">**</bpt>Help<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Report a Problem<ept id="p2">**</ept> from the menu or <bpt id="p3">**</bpt>Report a Problem<ept id="p3">**</ept> from the Welcome screen, which opens a window for filing a bug report.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can track your feedback in the <bpt id="p1">[</bpt>Developer Community<ept id="p1">](https://developercommunity.visualstudio.com/spaces/41/index.html)</ept> portal.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To make a suggestion, select <bpt id="p1">**</bpt>Help<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Provide a Suggestion<ept id="p2">**</ept> from the menu or <bpt id="p3">**</bpt>Provide a Suggestion<ept id="p3">**</ept> from the Welcome screen, which takes you to the <bpt id="p4">[</bpt>Visual Studio for Mac Developer Community webpage<ept id="p4">](https://developercommunity.visualstudio.com/content/idea/post.html?space=41)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>OpenSSL (if running .NET Core 1.1): See the <bpt id="p1">[</bpt>Prerequisites for .NET Core on Mac<ept id="p1">](../macos-prerequisites.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core SDK 1.1 or later<ept id="p1">](https://www.microsoft.com/net/core#macos)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio 2017 for Mac<ept id="p1">](https://visualstudio.microsoft.com/vs/visual-studio-mac/)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information on prerequisites, see the <bpt id="p1">[</bpt>Prerequisites for .NET Core on Mac<ept id="p1">](../../core/macos-prerequisites.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For the full system requirements of Visual Studio 2017 for Mac, see <bpt id="p1">[</bpt>Visual Studio 2017 for Mac Product Family System Requirements<ept id="p1">](/visualstudio/productinfo/vs2017-system-requirements-mac)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Building a library</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>On the Welcome screen, select <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog under the <bpt id="p2">**</bpt>.NET Core<ept id="p2">**</ept> node, select the <bpt id="p3">**</bpt>.NET Standard Library<ept id="p3">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This creates a .NET Standard library that targets .NET Core as well as any other .NET implementation that supports version 2.0 of the <bpt id="p1">[</bpt>.NET Standard<ept id="p1">](../../standard/net-standard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac New project dialog</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Name the project "TextUtils" (a short name for "Text Utilities") and the solution "WordCounter".</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Create a project directory within the solution directory<ept id="p1">**</ept> checked.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac New project dialog options</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> sidebar, expand the <ph id="ph1">`TextUtils`</ph> node to reveal the class file provided by the template, <bpt id="p2">*</bpt>Class1.cs<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Right-click the file, select <bpt id="p1">**</bpt>Rename<ept id="p1">**</ept> from the context menu, and rename the file to <bpt id="p2">*</bpt>WordCount.cs<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Open the file and replace the contents with the following code:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Save the file by using any of three different methods: use the keyboard shortcut <bpt id="p1">&lt;kbd&gt;</bpt>&amp;#8984;<ept id="p1">&lt;/kbd&gt;</ept><ph id="ph1">+</ph><bpt id="p2">&lt;kbd&gt;</bpt>s<ept id="p2">&lt;/kbd&gt;</ept>, select <bpt id="p3">**</bpt>File<ept id="p3">**</ept><ph id="ph2"> &gt; </ph><bpt id="p4">**</bpt>Save<ept id="p4">**</ept> from the menu, or right-click on the file's tab and select <bpt id="p5">**</bpt>Save<ept id="p5">**</ept> from the contextual menu.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following image shows the IDE window:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac IDE window with class library file and method</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Errors<ept id="p1">**</ept> in the margin at the bottom of the IDE window to open the <bpt id="p2">**</bpt>Errors<ept id="p2">**</ept> panel.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Build Output<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Bottom margin of the Visual Studio Mac IDE showing the Errors button</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Build<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Build All<ept id="p2">**</ept> from the menu.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The solution builds.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The build output panel shows that the build is successful.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Visual Studio Mac Build output pane of the Errors panel with Build successful message</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Creating a test project</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Unit tests provide automated software testing during your development and publishing.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The testing framework that you use in this tutorial is <bpt id="p1">[</bpt>xUnit (version 2.2.0 or later)<ept id="p1">](https://xunit.github.io/)</ept>, which is installed automatically when the xUnit test project is added to the solution in the following steps:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> sidebar, right-click the <ph id="ph1">`WordCounter`</ph> solution and select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept><ph id="ph2"> &gt; </ph><bpt id="p3">**</bpt>Add New Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, select <bpt id="p2">**</bpt>Tests<ept id="p2">**</ept> from the <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept> node.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>xUnit Test Project<ept id="p1">**</ept> followed by <bpt id="p2">**</bpt>Next<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Visual Studio Mac New Project dialog creating xUnit test project</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Name the new project "TestLibrary" and select <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Visual Studio Mac New Project dialog providing project name</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In order for the test library to work with the <ph id="ph1">`WordCount`</ph> class, add a reference to the <ph id="ph2">`TextUtils`</ph> project.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> sidebar, right-click <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> under <bpt id="p3">**</bpt>TestLibrary<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Edit References<ept id="p1">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Edit References<ept id="p1">**</ept> dialog, select the <bpt id="p2">**</bpt>TextUtils<ept id="p2">**</ept> project on the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept> tab. Select <bpt id="p4">**</bpt>OK<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Visual Studio Mac Edit References dialog</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, rename the <bpt id="p2">*</bpt>UnitTest1.cs<ept id="p2">*</ept> file to <bpt id="p3">*</bpt>TextUtilsTests.cs<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Open the file and replace the code with the following:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following image shows the IDE with the unit test code in place.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Pay attention to the <ph id="ph1">`Assert.NotEqual`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac Initial unit test in the IDE main window</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It's important to make a new test fail once to confirm its testing logic is correct.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The method passes in the name "Jack" (uppercase) and a string with "Jack" and "jack" (uppercase and lowercase).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`GetWordCount`</ph> method is working properly, it returns a count of two instances of the search word.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In order to fail this test on purpose, you first implement the test asserting that two instances of the search word "Jack" aren't returned by the <ph id="ph1">`GetWordCount`</ph> method.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Continue to the next step to fail the test on purpose.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>Unit Tests<ept id="p1">**</ept> panel on the right side of the screen.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac Unit Tests panel</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Dock<ept id="p1">**</ept> icon to keep the panel open.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac Unit Tests panel dock icon</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Run All<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The test fails, which is the correct result.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The test method asserts that two instances of the <ph id="ph1">`inputString`</ph>, "Jack," aren't returned from the string "Jack jack" provided to the <ph id="ph2">`GetWordCount`</ph> method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Since word casing was factored out in the <ph id="ph1">`GetWordCount`</ph> method, two instances are returned.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The assertion that 2 <bpt id="p1">*</bpt>is not equal to<ept id="p1">*</ept> 2 fails.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is the correct outcome, and the logic of our test is good.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac test failure display</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`IgnoreCasing`</ph> test method by changing <ph id="ph2">`Assert.NotEqual`</ph> to <ph id="ph3">`Assert.Equal`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Save the file by using the keyboard shortcut <bpt id="p1">&lt;kbd&gt;</bpt>&amp;#8984;<ept id="p1">&lt;/kbd&gt;</ept><ph id="ph1">+</ph><bpt id="p2">&lt;kbd&gt;</bpt>s<ept id="p2">&lt;/kbd&gt;</ept>, <bpt id="p3">**</bpt>File<ept id="p3">**</ept><ph id="ph2"> &gt; </ph><bpt id="p4">**</bpt>Save<ept id="p4">**</ept> from the menu, or right-clicking on the file's tab and selecting <bpt id="p5">**</bpt>Save<ept id="p5">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You expect that the <ph id="ph1">`searchWord`</ph> "Jack" returns two instances with <ph id="ph2">`inputString`</ph> "Jack jack" passed into <ph id="ph3">`GetWordCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Run the test again by clicking the <bpt id="p1">**</bpt>Run Tests<ept id="p1">**</ept> button in the <bpt id="p2">**</bpt>Unit Tests<ept id="p2">**</ept> panel or the <bpt id="p3">**</bpt>Rerun Tests<ept id="p3">**</ept> button in the <bpt id="p4">**</bpt>Test Results<ept id="p4">**</ept> panel at the bottom of the screen.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The test passes.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>There are two instances of "Jack" in the string "Jack jack" (ignoring casing), and the test assertion is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac test pass display</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Testing individual return values with a <ph id="ph1">`Fact`</ph> is only the beginning of what you can do with unit testing.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Another powerful technique allows you to test several values at once using a <ph id="ph1">`Theory`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Add the following method to your <ph id="ph1">`TextUtils_GetWordCountShould`</ph> class.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You have two methods in the class after you add this method:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CountInstancesCorrectly`</ph> checks that the <ph id="ph2">`GetWordCount`</ph> method counts correctly.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InlineData`</ph> provides a count, a search word, and an input string to check.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The test method runs once for each line of data.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Note once again that you're asserting a failure first by using <ph id="ph1">`Assert.NotEqual`</ph>, even when you know that the counts in the data are correct and that the values match the counts returned by the <ph id="ph2">`GetWordCount`</ph> method.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Performing the step of failing the test on purpose might seem like a waste of time at first, but checking the logic of the test by failing it first is an important check on the logic of your tests.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When you come across a test method that passes when you expect it to fail, you've found a bug in the logic of the test.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>It's worth the effort to take this step every time you create a test method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Save the file and run the tests again.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The casing test passes but the three count tests fail.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This is exactly what you expect to happen.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac expected test failure</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`CountInstancesCorrectly`</ph> test method by changing <ph id="ph2">`Assert.NotEqual`</ph> to <ph id="ph3">`Assert.Equal`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Run the tests again.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>All tests pass.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac expected test pass</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Adding a console app</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> sidebar, right-click the <ph id="ph1">`WordCounter`</ph> solution.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Add a new <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept> project by selecting the template from the <bpt id="p2">**</bpt>.NET Core<ept id="p2">**</ept><ph id="ph1"> &gt; </ph><bpt id="p3">**</bpt>App<ept id="p3">**</ept> templates.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Name the project <bpt id="p1">**</bpt>WordCounterApp<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> to create the project in the solution.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solutions<ept id="p1">**</ept> sidebar, right-click the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node of the new <bpt id="p3">**</bpt>WordCounterApp<ept id="p3">**</ept> project.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Edit References<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>TextUtils<ept id="p2">**</ept> and select <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> file.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Replace the code with the following:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To run the app in a console window instead of the IDE, right-click the <ph id="ph1">`WordCounterApp`</ph> project, select <bpt id="p1">**</bpt>Options<ept id="p1">**</ept>, and open the <bpt id="p2">**</bpt>Default<ept id="p2">**</ept> node under <bpt id="p3">**</bpt>Configurations<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Check the box for <bpt id="p1">**</bpt>Run on external console<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Leave the <bpt id="p1">**</bpt>Pause console output<ept id="p1">**</ept> option checked.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This setting causes the app to spawn in a console window so that you can type input for the <ph id="ph1">`Console.ReadLine`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If you leave the app to run in the IDE, you can only see the output of <ph id="ph1">`Console.WriteLine`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Console.ReadLine`</ph> statements do not work in the IDE's <bpt id="p1">**</bpt>Application Output<ept id="p1">**</ept> panel.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac project options window</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Because the current version of Visual Studio for Mac cannot run the tests when the solution is run, you run the console app directly.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Right-click on the <ph id="ph1">`WordCounterApp`</ph> project and select <bpt id="p1">**</bpt>Run item<ept id="p1">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If you attempt to run the app with the Play button, the test runner and app fail to run.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information on the status of the work on this issue, see <bpt id="p1">[</bpt>xunit/xamarinstudio.xunit (#60)<ept id="p1">](https://github.com/xunit/xamarinstudio.xunit/issues/60)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>When you run the app, provide values for the search word and input string at the prompts in the console window.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The app indicates the number of times the search word appears in the string.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac console window showing your app running</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The last feature to explore is debugging with Visual Studio for Mac.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Set a breakpoint on the <ph id="ph1">`Console.WriteLine`</ph> statement: Select in the left margin of line 23, and you see a red circle appear next to the line of code.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Alternatively, select anywhere on the line of code and select <bpt id="p1">**</bpt>Run<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Toggle Breakpoint<ept id="p2">**</ept> from the menu.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac breakpoint set</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Right-click the <ph id="ph1">`WordCounterApp`</ph> project.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Start Debugging item<ept id="p1">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When the app runs, enter the search word "cat" and "The dog chased the cat, but the cat escaped."</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>for the string to search.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`Console.WriteLine`</ph> statement is reached, program execution halts before the statement is executed.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Locals<ept id="p1">**</ept> tab, you can see the <ph id="ph1">`searchWord`</ph>, <ph id="ph2">`inputString`</ph>, <ph id="ph3">`wordCount`</ph>, and <ph id="ph4">`pluralChar`</ph> values.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac debugger program execution stopped</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Immediate<ept id="p1">**</ept> pane, type "wordCount = 999;" and press Enter.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This assigns a nonsense value of 999 to the <ph id="ph1">`wordCount`</ph> variable showing that you can replace variable values while debugging.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac changing values in the immediate window</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>In the toolbar, click the <bpt id="p1">*</bpt>continue<ept id="p1">*</ept> arrow.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Look at the output in the console window.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>It reports the incorrect value of 999 that you set when you were debugging the app.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac continue button in the toolbar</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac console window output</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio 2017 for Mac Release Notes<ept id="p1">](/visualstudio/releasenotes/vs2017-mac-relnotes)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>