<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">981ea1ae43037df4385f2614fc1c34088ef0bef5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\control-flow-in-async-programs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5372d51cf43aec558691ac0356c9efe69f71ddb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21fef2dd13569f8ae75cb762c982f1a578529aa5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Control Flow in Async Programs (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Control Flow in Async Programs (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can write and maintain asynchronous programs more easily by using the <ph id="ph1">`Async`</ph> and <ph id="ph2">`Await`</ph> keywords.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, the results might surprise you if you don't understand how your program operates.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic traces the flow of control through a simple async program to show you when control moves from one method to another and what information is transferred each time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Async`</ph> and <ph id="ph2">`Await`</ph> keywords were introduced in Visual Studio 2012.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In general, you mark methods that contain asynchronous code with the <bpt id="p1">[</bpt>Async<ept id="p1">](../../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In a method that's marked with an async modifier, you can use an <bpt id="p1">[</bpt>Await (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator to specify where the method pauses to wait for a called asynchronous process to complete.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example uses async methods to download the contents of a specified website as a string and to display the length of the string.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The example contains the following two methods.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`startButton_Click`</ph>, which calls <ph id="ph2">`AccessTheWebAsync`</ph> and displays the result.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph>, which downloads the contents of a website as a string and returns the length of the string.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> uses an asynchronous <ph id="ph2">&lt;xref:System.Net.Http.HttpClient&gt;</ph> method, <ph id="ph3">&lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;</ph>, to download the contents.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Numbered display lines appear at strategic points throughout the program to help you understand how the program runs and to explain what happens at each point that is marked.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The display lines are labeled "ONE" through "SIX."</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The labels represent the order in which the program reaches these lines of code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following code shows an outline of the program.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each of the labeled locations, "ONE" through "SIX," displays information about the current state of the program.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following output is produced.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Set Up the Program</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can download the code that this topic uses from MSDN, or you can build it yourself.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To run the example, you must have Visual Studio 2012 or newer and  the .NET Framework 4.5 or newer installed on your computer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Download the Program</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can download the application for this topic from <bpt id="p1">[</bpt>Async Sample: Control Flow in Async Programs<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following steps open and run the program.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Unzip the downloaded file, and then start Visual Studio.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project/Solution<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Navigate to the folder that holds the unzipped sample code, open the solution (.sln) file, and then choose the F5 key to build and run the project.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Build the Program Yourself</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following Windows Presentation Foundation (WPF) project contains the code example for this topic.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To run the project, perform the following steps:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box opens.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> pane, choose <bpt id="p2">**</bpt>Visual Basic<ept id="p2">**</ept>, and then choose <bpt id="p3">**</bpt>WPF Application<ept id="p3">**</ept> from the list of project types.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Enter <ph id="ph1">`AsyncTracer`</ph> as the name of the project, and then choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The new project appears in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the Visual Studio Code Editor, choose the <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the tab isn’t visible, open the shortcut menu for MainWindow.xaml in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> view of MainWindow.xaml, replace the code with the following code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A simple window that contains a text box and a button appears in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> view of MainWindow.xaml.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Add a reference for <ph id="ph1">&lt;xref:System.Net.Http&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for MainWindow.xaml.vb, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In MainWindow.xaml.vb , replace the code with the following code.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following output should appear.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Trace the Program</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Steps ONE and TWO</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The first two display lines trace the path as <ph id="ph1">`startButton_Click`</ph> calls <ph id="ph2">`AccessTheWebAsync`</ph>, and <ph id="ph3">`AccessTheWebAsync`</ph> calls the asynchronous <ph id="ph4">&lt;xref:System.Net.Http.HttpClient&gt;</ph> method <ph id="ph5">&lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following image outlines the calls from method to method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Steps ONE and TWO<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-onetwo.png "</bpt>AsyncTrace-ONETWO<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The return type of both <ph id="ph1">`AccessTheWebAsync`</ph> and <ph id="ph2">`client.GetStringAsync`</ph> is <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`AccessTheWebAsync`</ph>, TResult is an integer.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`GetStringAsync`</ph>, TResult is a string.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information about async method return types, see <bpt id="p1">[</bpt>Async Return Types (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A task-returning async method returns a task instance when control shifts back to the caller.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Control returns from an async method to its caller either when an <ph id="ph1">`Await`</ph> operator is encountered in the called method or when the called method ends.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The display lines that are labeled "THREE" through "SIX" trace this part of the process.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Step THREE</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`AccessTheWebAsync`</ph>, the asynchronous method <ph id="ph2">&lt;xref:System.Net.Http.HttpClient.GetStringAsync%28System.String%29&gt;</ph> is called to download the contents of the target webpage.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Control returns from <ph id="ph1">`client.GetStringAsync`</ph> to <ph id="ph2">`AccessTheWebAsync`</ph> when <ph id="ph3">`client.GetStringAsync`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`client.GetStringAsync`</ph> method returns a task of string that’s assigned to the <ph id="ph2">`getStringTask`</ph> variable in <ph id="ph3">`AccessTheWebAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following line in the example program shows the call to <ph id="ph1">`client.GetStringAsync`</ph> and the assignment.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can think of the task as a promise by <ph id="ph1">`client.GetStringAsync`</ph> to produce an actual string eventually.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the meantime, if <ph id="ph1">`AccessTheWebAsync`</ph> has work to do that doesn't depend on the promised string from <ph id="ph2">`client.GetStringAsync`</ph>, that work can continue while  <ph id="ph3">`client.GetStringAsync`</ph> waits.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the example, the following lines of output, which are labeled "THREE," represent the opportunity to do independent work</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following statement suspends progress in <ph id="ph1">`AccessTheWebAsync`</ph> when <ph id="ph2">`getStringTask`</ph> is awaited.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following image shows the flow of control from <ph id="ph1">`client.GetStringAsync`</ph> to the assignment to <ph id="ph2">`getStringTask`</ph> and from the creation of <ph id="ph3">`getStringTask`</ph> to the application of an Await operator.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step THREE<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-three.png "</bpt>AsyncTrace-Three<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The await expression suspends <ph id="ph1">`AccessTheWebAsync`</ph> until <ph id="ph2">`client.GetStringAsync`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In the meantime, control returns to the caller of <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Typically, you await the call to an asynchronous method immediately.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, the following assignment could replace the previous code that creates and then awaits <ph id="ph1">`getStringTask`</ph>: <ph id="ph2">`Dim urlContents As String = Await client.GetStringAsync("http://msdn.microsoft.com")`</ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In this topic, the await operator is applied later to accommodate the output lines that mark the flow of control through the program.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Step FOUR</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The declared return type of <ph id="ph1">`AccessTheWebAsync`</ph> is <ph id="ph2">`Task(Of Integer)`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Therefore, when <ph id="ph1">`AccessTheWebAsync`</ph> is suspended, it returns a task of integer to <ph id="ph2">`startButton_Click`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You should understand that the returned task isn’t <ph id="ph1">`getStringTask`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The returned task is a new task of integer that represents what remains to be done in the suspended method, <ph id="ph1">`AccessTheWebAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The task is a promise from <ph id="ph1">`AccessTheWebAsync`</ph> to produce an integer when the task is complete.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following statement assigns this task to the <ph id="ph1">`getLengthTask`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>As in <ph id="ph1">`AccessTheWebAsync`</ph>, <ph id="ph2">`startButton_Click`</ph> can continue with work that doesn’t depend on the results of the asynchronous task (<ph id="ph3">`getLengthTask`</ph>) until the task is awaited.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following output lines represent that work.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Progress in <ph id="ph1">`startButton_Click`</ph> is suspended when <ph id="ph2">`getLengthTask`</ph> is awaited.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following assignment statement suspends <ph id="ph1">`startButton_Click`</ph> until <ph id="ph2">`AccessTheWebAsync`</ph> is complete.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In the following illustration, the arrows show the flow of control from the await expression in <ph id="ph1">`AccessTheWebAsync`</ph> to the assignment of a value to <ph id="ph2">`getLengthTask`</ph>, followed by normal processing in <ph id="ph3">`startButton_Click`</ph> until <ph id="ph4">`getLengthTask`</ph> is awaited.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step FOUR<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-four.png "</bpt>AsyncTrace-FOUR<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Step FIVE</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`client.GetStringAsync`</ph> signals that it’s complete, processing in <ph id="ph2">`AccessTheWebAsync`</ph> is released from suspension and can continue past the await statement.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following lines of output represent the resumption of processing.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The operand of the return statement, <ph id="ph1">`urlContents.Length`</ph>, is stored in the task that  <ph id="ph2">`AccessTheWebAsync`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The await expression retrieves that value from <ph id="ph1">`getLengthTask`</ph> in <ph id="ph2">`startButton_Click`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following image shows the transfer of control after <ph id="ph1">`client.GetStringAsync`</ph> (and <ph id="ph2">`getStringTask`</ph>) are complete.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step FIVE<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-five.png "</bpt>AsyncTrace-FIVE<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AccessTheWebAsync`</ph> runs to completion, and control returns to <ph id="ph2">`startButton_Click`</ph>, which is awaiting the completion.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Step SIX</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`AccessTheWebAsync`</ph> signals that it’s complete, processing can continue past the await statement in <ph id="ph2">`startButton_Async`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In fact, the program has nothing more to do.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following lines of output represent the resumption of processing in <ph id="ph1">`startButton_Async`</ph>:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The await expression retrieves from <ph id="ph1">`getLengthTask`</ph> the integer value that’s the operand of the return statement in <ph id="ph2">`AccessTheWebAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following statement assigns that value to the <ph id="ph1">`contentLength`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following image shows the return of control from <ph id="ph1">`AccessTheWebAsync`</ph> to <ph id="ph2">`startButton_Click`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Step SIX<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/async/media/asynctrace-six.png "</bpt>AsyncTrace-SIX<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Return Types (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/async-return-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Sample: Control Flow in Async Programs (C# and Visual Basic)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255285)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>