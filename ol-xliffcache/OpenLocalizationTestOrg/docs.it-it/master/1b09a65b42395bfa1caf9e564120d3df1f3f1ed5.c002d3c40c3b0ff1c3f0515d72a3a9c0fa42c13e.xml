{"content":"---\ntitle: Numbers in C# - Introduction to C# tutorial\ndescription: Learn C# by exploring numeric types, their properties and methods.\nms.date: 10/31/2017\nms.custom: mvc\n---\n\n# Manipulate integral and floating point numbers in C\\#\n\nThis tutorial teaches you about the numeric types in C# interactively. You'll write small amounts of code, then you'll compile and run that code. The tutorial contains a series of lessons that explore numbers and math operations in C#. These lessons teach you the fundamentals of the C# language.\n\nThis tutorial expects you to have a machine you can use for development. The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment on Mac, PC or Linux. A quick overview of the commands you'll use is in the [Become familiar with the development tools](local-environment.md) with links to more details.\n\n## Explore integer math\n\nCreate a directory named **numbers-quickstart**. Make that the current directory and run `dotnet new console -n NumbersInCSharp -o .`.\n\nOpen **Program.cs** in your favorite editor, and replace the line `Console.WriteLine(\"Hello World!\");` with the following:\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\nRun this code by typing `dotnet run` in your command window.\n\nYou've just seen one of the fundamental math operations with integers. The `int` type represents an **integer**, a positive or negative whole number. You use the `+` symbol for addition. Other common mathematical operations for integers include:\n\n- `-` for subtraction\n- `*` for multiplication\n- `/` for division\n\nStart by exploring those different operations. Add these lines after the line that writes the value of `c`:\n\n```csharp\nc = a - b;\nConsole.WriteLine(c);\nc = a * b;\nConsole.WriteLine(c);\nc = a / b;\nConsole.WriteLine(c);\n```\n\nRun this code by typing `dotnet run` in your command window.\n\nYou can also experiment by performing multiple mathematics operations in the same line, if you'd like. Try `c = a + b - 12 * 17;` for example. Mixing variables and constant numbers is allowed.\n\n> [!TIP]\n> As you explore C# (or any programming language), you'll\n> make mistakes when you write code. The **compiler** will\n> find those errors and report them to you. When the output\n> contains error messages, look closely at the example code\n> and the code in your window to see what to fix.\n> That exercise will help you learn the structure of C# code.\n\nYou've finished the first step. Before you start the next section, let's move the current code into a separate method. That makes it easier to start working with a new example. Rename your `Main` method to `WorkingWithIntegers` and write a new `Main` method that calls `WorkingWithIntegers`. When you have finished, your code should look like this:\n\n```csharp\nusing System;\n\nnamespace NumbersInCSharp\n{\n    class Program\n    {\n        static void WorkingWithIntegers()\n        {\n            int a = 18;\n            int b = 6;\n            int c = a + b;\n            Console.WriteLine(c);\n            c = a - b;\n            Console.WriteLine(c);\n            c = a * b;\n            Console.WriteLine(c);\n            c = a / b;\n            Console.WriteLine(c);\n        }\n\n        static void Main(string[] args)\n        {\n            WorkingWithIntegers();\n        }\n    }\n}\n```\n\n## Explore order of operations\n\nComment out the call to `WorkingWithIntegers()`. It will make the output less cluttered as you work in this section:\n\n```csharp\n//WorkingWithIntegers();\n```\n\nThe `//` starts a **comment** in C#. Comments are any text you want to keep in your source code but not execute as code. The compiler does not generate any executable code from comments.\n\nThe C# language defines the precedence of different mathematics operations\nwith rules consistent with the rules you learned in mathematics.\nMultiplication and division take precedence over addition and subtraction.\nExplore that by adding the following code to your `Main` method, and executing\n`dotnet run`:\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n ```\n\nThe output demonstrates that the multiplication is performed before the addition.\n\nYou can force a different order of operation by adding parentheses around\nthe operation or operations you want performed first. Add the following\nlines and run again:\n\n```csharp\nd = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\nExplore more by combining many different operations. Add something like\nthe following lines at the bottom of your `Main` method. Try `dotnet run` again.\n\n```csharp\nd = (a + b) - 6 * c + (12 * 4) / 3 + 12;\nConsole.WriteLine(d);\n```\n\nYou may have noticed an interesting behavior for integers. Integer\ndivision always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.\n\nIf you haven't seen this behavior, try the following code at the end\nof your `Main` method:\n\n```csharp\nint e = 7;\nint f = 4;\nint g = 3;\nint h = (e  + f) / g;\nConsole.WriteLine(h);\n```\n\nType `dotnet run` again to see the results.\n\nBefore moving on, let's take all the code you've written in this\nsection and put it in a new method. Call that new method `OrderPrecedence`.\nYou should end up with something like this:\n\n```csharp\nusing System;\n\nnamespace NumbersInCSharp\n{\n    class Program\n    {\n        static void WorkingWithIntegers()\n        {\n            int a = 18;\n            int b = 6;\n            int c = a + b;\n            Console.WriteLine(c);\n            c = a - b;\n            Console.WriteLine(c);\n            c = a * b;\n            Console.WriteLine(c);\n            c = a / b;\n            Console.WriteLine(c);\n        }\n\n        static void OrderPrecedence()\n        {\n            int a = 5;\n            int b = 4;\n            int c = 2;\n            int d = a + b * c;\n            Console.WriteLine(d);\n\n            d = (a  + b) * c;\n            Console.WriteLine(d);\n\n            d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n            Console.WriteLine(d);\n\n            int e = 7;\n            int f = 4;\n            int g = 3;\n            int h = (e  + f) / g;\n            Console.WriteLine(h);\n        }\n\n        static void Main(string[] args)\n        {\n            WorkingWithIntegers();\n\n            OrderPrecedence();\n\n        }\n    }\n}\n```\n\n## Explore integer precision and limits\n\nThat last sample showed you that integer division truncates the result.\nYou can get the **remainder** by using the **modulo** operator, the `%` character. Try the following code in your `Main` method:\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\nThe C# integer type differs from mathematical integers in one other\nway: the `int` type has minimum and maximum limits. Add this code to\nyour `Main` method to see those limits:\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\nIf a calculation produces a value that exceeds those limits, you\nhave an **underflow** or **overflow** condition. The answer appears\nto wrap from one limit to the other. Add these two lines to your `Main`\nmethod to see an example:\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\nNotice that the answer is very close to the minimum (negative) integer. It's\nthe same as `min + 2`.\nThe addition operation **overflowed** the allowed values for integers.\nThe answer is a very large negative number because an overflow \"wraps around\"\nfrom the largest possible integer value to the smallest.\n\nThere are other numeric types with different limits and precision that you\nwould use when the `int` type doesn't meet your needs. Let's explore those next.\n\nOnce again, let's move the code you wrote in this section into a separate method. Name it `TestLimits`.\n\n## Work with the double type\n\nThe `double` numeric type represents a double-precision floating point\nnumber. Those terms may be new to you. A **floating point** number is\nuseful to represent non-integral numbers that may be very large or small\nin magnitude. **Double-precision** means that these numbers are stored\nusing greater precision than **single-precision**. On modern computers,\nit is more common to use double precision than single precision numbers.\nLet's explore. Add the following code and see the result:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nNotice that the answer includes the decimal portion of the quotient. Try a slightly\nmore complicated expression with doubles:\n\n```csharp\ndouble e = 19;\ndouble f = 23;\ndouble g = 8;\ndouble h = (e  + f) / g;\nConsole.WriteLine(h);\n```\n\nThe range of a double value is much greater than integer values. Try the following\ncode below what you've written so far:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nThese values are printed out in scientific notation. The number to\nthe left of the `E` is the significand. The number to the right is the exponent,\nas a power of 10.\n\nJust like decimal numbers in math, doubles in C# can have rounding errors. Try this code:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nYou know that `0.3` repeating is not exactly the same as `1/3`.\n\n***Challenge***\n\nTry other calculations with large numbers, small numbers, multiplication\nand division using the `double` type.  Try more complicated calculations.\n\nAfter you've spent some time with the challenge, take the code you've written\nand place it in a new method. Name that new method `WorkWithDoubles`.\n\n## Work with fixed point types\n\nYou've seen the basic numeric types in C#: integers and doubles.  There is one\nother type to learn: the `decimal` type. The `decimal` type has a smaller\nrange but greater precision than `double`. The term **fixed point** means\nthat the decimal point (or binary point) doesn't move. Let's take a look:\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\nNotice that the range is smaller than the `double` type. You can see the greater\nprecision with the decimal type by trying the following code:\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\nThe `M` suffix on the numbers is how you indicate that a constant should use the\n`decimal` type.\n\nNotice that the math using the decimal type has more digits to the right\nof the decimal point.\n\n***Challenge***\n\nNow that you've seen the different numeric types, write code that calculates\nthe area of a circle whose radius is 2.50 centimeters. Remember that the area of a circle\nis the radius squared multiplied by PI. One hint: .NET contains a constant\nfor PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.\n\nYou should get an answer between 19 and 20.\nYou can check your answer by [looking at the finished sample code on GitHub](https://github.com/dotnet/samples/tree/master/csharp/numbers-quickstart/Program.cs#L104-L106)\n\nTry some other formulas if you'd like.\n\nYou've completed the \"Numbers in C#\" quickstart. You can continue with\nthe [Branches and loops](branches-and-loops-local.md) quickstart in\nyour own development environment.\n\nYou can learn more about numbers in C# in the following topics:\n\n- [Integral Types Table](../../language-reference/keywords/integral-types-table.md)\n- [Floating-Point Types Table](../../language-reference/keywords/floating-point-types-table.md)\n- [Built-In Types Table](../../language-reference/keywords/built-in-types-table.md)\n- [Implicit Numeric Conversions Table](../../language-reference/keywords/implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](../../language-reference/keywords/explicit-numeric-conversions-table.md)\n","nodes":[{"pos":[4,169],"embed":true,"restype":"x-metadata","content":"title: Numbers in C# - Introduction to C# tutorial\ndescription: Learn C# by exploring numeric types, their properties and methods.\nms.date: 10/31/2017\nms.custom: mvc","nodes":[{"content":"Numbers in C# - Introduction to C# tutorial","nodes":[{"pos":[0,43],"content":"Numbers in C# - Introduction to C# tutorial","nodes":[{"content":"Numbers in C# - Introduction to C# tutorial","pos":[0,43]}]}],"path":["title"],"nosxs":false},{"content":"Learn C# by exploring numeric types, their properties and methods.","nodes":[{"pos":[0,66],"content":"Learn C# by exploring numeric types, their properties and methods.","nodes":[{"content":"Learn C# by exploring numeric types, their properties and methods.","pos":[0,66]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[177,230],"content":"Manipulate integral and floating point numbers in C\\#","linkify":"Manipulate integral and floating point numbers in C\\#","nodes":[{"content":"Manipulate integral and floating point numbers in C<ph id=\"ph1\">\\#</ph>","pos":[0,53],"source":"Manipulate integral and floating point numbers in C\\#"}]},{"content":"This tutorial teaches you about the numeric types in C# interactively.","pos":[232,302]},{"content":"You'll write small amounts of code, then you'll compile and run that code.","pos":[303,377]},{"content":"The tutorial contains a series of lessons that explore numbers and math operations in C#.","pos":[378,467]},{"content":"These lessons teach you the fundamentals of the C# language.","pos":[468,528]},{"content":"This tutorial expects you to have a machine you can use for development.","pos":[530,602]},{"content":"The .NET topic <bpt id=\"p1\">[</bpt>Get Started in 10 minutes<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept> has instructions for setting up your local development environment on Mac, PC or Linux.","pos":[603,769],"source":" The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment on Mac, PC or Linux."},{"content":"A quick overview of the commands you'll use is in the <bpt id=\"p1\">[</bpt>Become familiar with the development tools<ept id=\"p1\">](local-environment.md)</ept> with links to more details.","pos":[770,918],"source":" A quick overview of the commands you'll use is in the [Become familiar with the development tools](local-environment.md) with links to more details."},{"pos":[923,943],"content":"Explore integer math","linkify":"Explore integer math","nodes":[{"content":"Explore integer math","pos":[0,20]}]},{"content":"Create a directory named <bpt id=\"p1\">**</bpt>numbers-quickstart<ept id=\"p1\">**</ept>.","pos":[945,993],"source":"Create a directory named **numbers-quickstart**."},{"content":"Make that the current directory and run <ph id=\"ph1\">`dotnet new console -n NumbersInCSharp -o .`</ph>.","pos":[994,1079],"source":" Make that the current directory and run `dotnet new console -n NumbersInCSharp -o .`."},{"pos":[1081,1203],"content":"Open <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> in your favorite editor, and replace the line <ph id=\"ph1\">`Console.WriteLine(\"Hello World!\");`</ph> with the following:","source":"Open **Program.cs** in your favorite editor, and replace the line `Console.WriteLine(\"Hello World!\");` with the following:"},{"pos":[1280,1340],"content":"Run this code by typing <ph id=\"ph1\">`dotnet run`</ph> in your command window.","source":"Run this code by typing `dotnet run` in your command window."},{"content":"You've just seen one of the fundamental math operations with integers.","pos":[1342,1412]},{"content":"The <ph id=\"ph1\">`int`</ph> type represents an <bpt id=\"p1\">**</bpt>integer<ept id=\"p1\">**</ept>, a positive or negative whole number.","pos":[1413,1491],"source":" The `int` type represents an **integer**, a positive or negative whole number."},{"content":"You use the <ph id=\"ph1\">`+`</ph> symbol for addition.","pos":[1492,1528],"source":" You use the `+` symbol for addition."},{"content":"Other common mathematical operations for integers include:","pos":[1529,1587]},{"pos":[1591,1610],"content":"<ph id=\"ph1\">`-`</ph> for subtraction","source":"`-` for subtraction"},{"pos":[1613,1635],"content":"<ph id=\"ph1\">`*`</ph> for multiplication","source":"`*` for multiplication"},{"pos":[1638,1654],"content":"<ph id=\"ph1\">`/`</ph> for division","source":"`/` for division"},{"content":"Start by exploring those different operations.","pos":[1656,1702]},{"content":"Add these lines after the line that writes the value of <ph id=\"ph1\">`c`</ph>:","pos":[1703,1763],"source":" Add these lines after the line that writes the value of `c`:"},{"pos":[1879,1939],"content":"Run this code by typing <ph id=\"ph1\">`dotnet run`</ph> in your command window.","source":"Run this code by typing `dotnet run` in your command window."},{"content":"You can also experiment by performing multiple mathematics operations in the same line, if you'd like.","pos":[1941,2043]},{"content":"Try <ph id=\"ph1\">`c = a + b - 12 * 17;`</ph> for example.","pos":[2044,2083],"source":" Try `c = a + b - 12 * 17;` for example."},{"content":"Mixing variables and constant numbers is allowed.","pos":[2084,2133]},{"pos":[2137,2492],"content":"[!TIP]\nAs you explore C# (or any programming language), you'll\nmake mistakes when you write code. The **compiler** will\nfind those errors and report them to you. When the output\ncontains error messages, look closely at the example code\nand the code in your window to see what to fix.\nThat exercise will help you learn the structure of C# code.","leadings":["","> ","> ","> ","> ","> ","> "],"nodes":[{"content":"As you explore C# (or any programming language), you'll\nmake mistakes when you write code. The **compiler** will\nfind those errors and report them to you. When the output\ncontains error messages, look closely at the example code\nand the code in your window to see what to fix.\nThat exercise will help you learn the structure of C# code.","pos":[7,343],"nodes":[{"content":"As you explore C# (or any programming language), you'll make mistakes when you write code.","pos":[0,90],"source":"As you explore C# (or any programming language), you'll\nmake mistakes when you write code."},{"content":"The <bpt id=\"p1\">**</bpt>compiler<ept id=\"p1\">**</ept> will find those errors and report them to you.","pos":[91,154],"source":" The **compiler** will\nfind those errors and report them to you."},{"content":"When the output contains error messages, look closely at the example code and the code in your window to see what to fix.","pos":[155,276],"source":" When the output\ncontains error messages, look closely at the example code\nand the code in your window to see what to fix."},{"content":"That exercise will help you learn the structure of C# code.","pos":[277,336],"source":"\nThat exercise will help you learn the structure of C# code."}]}]},{"content":"You've finished the first step.","pos":[2494,2525]},{"content":"Before you start the next section, let's move the current code into a separate method.","pos":[2526,2612]},{"content":"That makes it easier to start working with a new example.","pos":[2613,2670]},{"content":"Rename your <ph id=\"ph1\">`Main`</ph> method to <ph id=\"ph2\">`WorkingWithIntegers`</ph> and write a new <ph id=\"ph3\">`Main`</ph> method that calls <ph id=\"ph4\">`WorkingWithIntegers`</ph>.","pos":[2671,2785],"source":" Rename your `Main` method to `WorkingWithIntegers` and write a new `Main` method that calls `WorkingWithIntegers`."},{"content":"When you have finished, your code should look like this:","pos":[2786,2842]},{"pos":[3374,3401],"content":"Explore order of operations","linkify":"Explore order of operations","nodes":[{"content":"Explore order of operations","pos":[0,27]}]},{"content":"Comment out the call to <ph id=\"ph1\">`WorkingWithIntegers()`</ph>.","pos":[3403,3451],"source":"Comment out the call to `WorkingWithIntegers()`."},{"content":"It will make the output less cluttered as you work in this section:","pos":[3452,3519]},{"content":"The <ph id=\"ph1\">`//`</ph> starts a <bpt id=\"p1\">**</bpt>comment<ept id=\"p1\">**</ept> in C#.","pos":[3561,3597],"source":"The `//` starts a **comment** in C#."},{"content":"Comments are any text you want to keep in your source code but not execute as code.","pos":[3598,3681]},{"content":"The compiler does not generate any executable code from comments.","pos":[3682,3747]},{"content":"The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.","pos":[3749,3888],"source":"The C# language defines the precedence of different mathematics operations\nwith rules consistent with the rules you learned in mathematics."},{"content":"Multiplication and division take precedence over addition and subtraction.","pos":[3889,3963],"source":"\nMultiplication and division take precedence over addition and subtraction."},{"content":"Explore that by adding the following code to your <ph id=\"ph1\">`Main`</ph> method, and executing <ph id=\"ph2\">`dotnet run`</ph>:","pos":[3964,4056],"source":"\nExplore that by adding the following code to your `Main` method, and executing\n`dotnet run`:"},{"content":"The output demonstrates that the multiplication is performed before the addition.","pos":[4148,4229]},{"content":"You can force a different order of operation by adding parentheses around the operation or operations you want performed first.","pos":[4231,4358],"source":"You can force a different order of operation by adding parentheses around\nthe operation or operations you want performed first."},{"content":"Add the following lines and run again:","pos":[4359,4397],"source":" Add the following\nlines and run again:"},{"content":"Explore more by combining many different operations.","pos":[4454,4506]},{"content":"Add something like the following lines at the bottom of your <ph id=\"ph1\">`Main`</ph> method.","pos":[4507,4582],"source":" Add something like\nthe following lines at the bottom of your `Main` method."},{"content":"Try <ph id=\"ph1\">`dotnet run`</ph> again.","pos":[4583,4606],"source":" Try `dotnet run` again."},{"content":"You may have noticed an interesting behavior for integers.","pos":[4686,4744]},{"content":"Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.","pos":[4745,4874],"source":" Integer\ndivision always produces an integer result, even when you'd expect the result to include a decimal or fractional portion."},{"pos":[4876,4967],"content":"If you haven't seen this behavior, try the following code at the end of your <ph id=\"ph1\">`Main`</ph> method:","source":"If you haven't seen this behavior, try the following code at the end\nof your `Main` method:"},{"pos":[5061,5104],"content":"Type <ph id=\"ph1\">`dotnet run`</ph> again to see the results.","source":"Type `dotnet run` again to see the results."},{"content":"Before moving on, let's take all the code you've written in this section and put it in a new method.","pos":[5106,5206],"source":"Before moving on, let's take all the code you've written in this\nsection and put it in a new method."},{"content":"Call that new method <ph id=\"ph1\">`OrderPrecedence`</ph>.","pos":[5207,5246],"source":" Call that new method `OrderPrecedence`."},{"content":"You should end up with something like this:","pos":[5247,5290],"source":"\nYou should end up with something like this:"},{"pos":[6339,6375],"content":"Explore integer precision and limits","linkify":"Explore integer precision and limits","nodes":[{"content":"Explore integer precision and limits","pos":[0,36]}]},{"content":"That last sample showed you that integer division truncates the result.","pos":[6377,6448]},{"content":"You can get the <bpt id=\"p1\">**</bpt>remainder<ept id=\"p1\">**</ept> by using the <bpt id=\"p2\">**</bpt>modulo<ept id=\"p2\">**</ept> operator, the <ph id=\"ph1\">`%`</ph> character.","pos":[6449,6531],"source":"\nYou can get the **remainder** by using the **modulo** operator, the `%` character."},{"content":"Try the following code in your <ph id=\"ph1\">`Main`</ph> method:","pos":[6532,6577],"source":" Try the following code in your `Main` method:"},{"content":"The C# integer type differs from mathematical integers in one other way: the <ph id=\"ph1\">`int`</ph> type has minimum and maximum limits.","pos":[6745,6864],"source":"The C# integer type differs from mathematical integers in one other\nway: the `int` type has minimum and maximum limits."},{"content":"Add this code to your <ph id=\"ph1\">`Main`</ph> method to see those limits:","pos":[6865,6921],"source":" Add this code to\nyour `Main` method to see those limits:"},{"content":"If a calculation produces a value that exceeds those limits, you have an <bpt id=\"p1\">**</bpt>underflow<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>overflow<ept id=\"p2\">**</ept> condition.","pos":[7049,7162],"source":"If a calculation produces a value that exceeds those limits, you\nhave an **underflow** or **overflow** condition."},{"content":"The answer appears to wrap from one limit to the other.","pos":[7163,7218],"source":" The answer appears\nto wrap from one limit to the other."},{"content":"Add these two lines to your <ph id=\"ph1\">`Main`</ph> method to see an example:","pos":[7219,7279],"source":" Add these two lines to your `Main`\nmethod to see an example:"},{"content":"Notice that the answer is very close to the minimum (negative) integer.","pos":[7370,7441]},{"content":"It's the same as <ph id=\"ph1\">`min + 2`</ph>.","pos":[7442,7469],"source":" It's\nthe same as `min + 2`."},{"content":"The addition operation <bpt id=\"p1\">**</bpt>overflowed<ept id=\"p1\">**</ept> the allowed values for integers.","pos":[7470,7540],"source":"\nThe addition operation **overflowed** the allowed values for integers."},{"content":"The answer is a very large negative number because an overflow \"wraps around\" from the largest possible integer value to the smallest.","pos":[7541,7675],"source":"\nThe answer is a very large negative number because an overflow \"wraps around\"\nfrom the largest possible integer value to the smallest."},{"content":"There are other numeric types with different limits and precision that you would use when the <ph id=\"ph1\">`int`</ph> type doesn't meet your needs.","pos":[7677,7806],"source":"There are other numeric types with different limits and precision that you\nwould use when the `int` type doesn't meet your needs."},{"content":"Let's explore those next.","pos":[7807,7832]},{"content":"Once again, let's move the code you wrote in this section into a separate method.","pos":[7834,7915]},{"content":"Name it <ph id=\"ph1\">`TestLimits`</ph>.","pos":[7916,7937],"source":" Name it `TestLimits`."},{"pos":[7942,7967],"content":"Work with the double type","linkify":"Work with the double type","nodes":[{"content":"Work with the double type","pos":[0,25]}]},{"content":"The <ph id=\"ph1\">`double`</ph> numeric type represents a double-precision floating point number.","pos":[7969,8047],"source":"The `double` numeric type represents a double-precision floating point\nnumber."},{"content":"Those terms may be new to you.","pos":[8048,8078]},{"content":"A <bpt id=\"p1\">**</bpt>floating point<ept id=\"p1\">**</ept> number is useful to represent non-integral numbers that may be very large or small in magnitude.","pos":[8079,8196],"source":" A **floating point** number is\nuseful to represent non-integral numbers that may be very large or small\nin magnitude."},{"content":"<bpt id=\"p1\">**</bpt>Double-precision<ept id=\"p1\">**</ept> means that these numbers are stored using greater precision than <bpt id=\"p2\">**</bpt>single-precision<ept id=\"p2\">**</ept>.","pos":[8197,8304],"source":"**Double-precision** means that these numbers are stored\nusing greater precision than **single-precision**."},{"content":"On modern computers, it is more common to use double precision than single precision numbers.","pos":[8305,8398],"source":" On modern computers,\nit is more common to use double precision than single precision numbers."},{"content":"Let's explore.","pos":[8399,8413],"source":"\nLet's explore."},{"content":"Add the following code and see the result:","pos":[8414,8456]},{"content":"Notice that the answer includes the decimal portion of the quotient.","pos":[8562,8630]},{"content":"Try a slightly more complicated expression with doubles:","pos":[8631,8687],"source":" Try a slightly\nmore complicated expression with doubles:"},{"content":"The range of a double value is much greater than integer values.","pos":[8795,8859]},{"content":"Try the following code below what you've written so far:","pos":[8860,8916],"source":" Try the following\ncode below what you've written so far:"},{"content":"These values are printed out in scientific notation.","pos":[9054,9106]},{"content":"The number to the left of the <ph id=\"ph1\">`E`</ph> is the significand.","pos":[9107,9160],"source":" The number to\nthe left of the `E` is the significand."},{"content":"The number to the right is the exponent, as a power of 10.","pos":[9161,9219],"source":" The number to the right is the exponent,\nas a power of 10."},{"content":"Just like decimal numbers in math, doubles in C# can have rounding errors.","pos":[9221,9295]},{"content":"Try this code:","pos":[9296,9310]},{"pos":[9379,9442],"content":"You know that <ph id=\"ph1\">`0.3`</ph> repeating is not exactly the same as <ph id=\"ph2\">`1/3`</ph>.","source":"You know that `0.3` repeating is not exactly the same as `1/3`."},{"pos":[9444,9459],"content":"<bpt id=\"p1\">***</bpt>Challenge<ept id=\"p1\">***</ept>","source":"***Challenge***"},{"content":"Try other calculations with large numbers, small numbers, multiplication and division using the <ph id=\"ph1\">`double`</ph> type.","pos":[9461,9571],"source":"Try other calculations with large numbers, small numbers, multiplication\nand division using the `double` type."},{"content":"Try more complicated calculations.","pos":[9573,9607]},{"content":"After you've spent some time with the challenge, take the code you've written and place it in a new method.","pos":[9609,9716],"source":"After you've spent some time with the challenge, take the code you've written\nand place it in a new method."},{"content":"Name that new method <ph id=\"ph1\">`WorkWithDoubles`</ph>.","pos":[9717,9756],"source":" Name that new method `WorkWithDoubles`."},{"pos":[9761,9788],"content":"Work with fixed point types","linkify":"Work with fixed point types","nodes":[{"content":"Work with fixed point types","pos":[0,27]}]},{"content":"You've seen the basic numeric types in C#: integers and doubles.","pos":[9790,9854]},{"content":"There is one other type to learn: the <ph id=\"ph1\">`decimal`</ph> type.","pos":[9856,9909],"source":"  There is one\nother type to learn: the `decimal` type."},{"content":"The <ph id=\"ph1\">`decimal`</ph> type has a smaller range but greater precision than <ph id=\"ph2\">`double`</ph>.","pos":[9910,9985],"source":" The `decimal` type has a smaller\nrange but greater precision than `double`."},{"content":"The term <bpt id=\"p1\">**</bpt>fixed point<ept id=\"p1\">**</ept> means that the decimal point (or binary point) doesn't move.","pos":[9986,10071],"source":" The term **fixed point** means\nthat the decimal point (or binary point) doesn't move."},{"content":"Let's take a look:","pos":[10072,10090]},{"content":"Notice that the range is smaller than the <ph id=\"ph1\">`double`</ph> type.","pos":[10242,10298],"source":"Notice that the range is smaller than the `double` type."},{"content":"You can see the greater precision with the decimal type by trying the following code:","pos":[10299,10384],"source":" You can see the greater\nprecision with the decimal type by trying the following code:"},{"pos":[10522,10618],"content":"The <ph id=\"ph1\">`M`</ph> suffix on the numbers is how you indicate that a constant should use the <ph id=\"ph2\">`decimal`</ph> type.","source":"The `M` suffix on the numbers is how you indicate that a constant should use the\n`decimal` type."},{"pos":[10620,10714],"content":"Notice that the math using the decimal type has more digits to the right of the decimal point.","source":"Notice that the math using the decimal type has more digits to the right\nof the decimal point."},{"pos":[10716,10731],"content":"<bpt id=\"p1\">***</bpt>Challenge<ept id=\"p1\">***</ept>","source":"***Challenge***"},{"content":"Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 centimeters.","pos":[10733,10864],"source":"Now that you've seen the different numeric types, write code that calculates\nthe area of a circle whose radius is 2.50 centimeters."},{"content":"Remember that the area of a circle is the radius squared multiplied by PI.","pos":[10865,10939],"source":" Remember that the area of a circle\nis the radius squared multiplied by PI."},{"content":"One hint: .NET contains a constant for PI, <ph id=\"ph1\">&lt;xref:System.Math.PI?displayProperty=nameWithType&gt;</ph> that you can use for that value.","pos":[10940,11066],"source":" One hint: .NET contains a constant\nfor PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value."},{"content":"You should get an answer between 19 and 20.","pos":[11068,11111]},{"content":"You can check your answer by <bpt id=\"p1\">[</bpt>looking at the finished sample code on GitHub<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/csharp/numbers-quickstart/Program.cs#L104-L106)</ept>","pos":[11112,11282],"source":"\nYou can check your answer by [looking at the finished sample code on GitHub](https://github.com/dotnet/samples/tree/master/csharp/numbers-quickstart/Program.cs#L104-L106)"},{"content":"Try some other formulas if you'd like.","pos":[11284,11322]},{"content":"You've completed the \"Numbers in C#\" quickstart.","pos":[11324,11372]},{"content":"You can continue with the <bpt id=\"p1\">[</bpt>Branches and loops<ept id=\"p1\">](branches-and-loops-local.md)</ept> quickstart in your own development environment.","pos":[11373,11496],"source":" You can continue with\nthe [Branches and loops](branches-and-loops-local.md) quickstart in\nyour own development environment."},{"content":"You can learn more about numbers in C# in the following topics:","pos":[11498,11561]},{"pos":[11565,11646],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../language-reference/keywords/integral-types-table.md)</ept>","source":"[Integral Types Table](../../language-reference/keywords/integral-types-table.md)"},{"pos":[11649,11742],"content":"<bpt id=\"p1\">[</bpt>Floating-Point Types Table<ept id=\"p1\">](../../language-reference/keywords/floating-point-types-table.md)</ept>","source":"[Floating-Point Types Table](../../language-reference/keywords/floating-point-types-table.md)"},{"pos":[11745,11826],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../language-reference/keywords/built-in-types-table.md)</ept>","source":"[Built-In Types Table](../../language-reference/keywords/built-in-types-table.md)"},{"pos":[11829,11938],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../language-reference/keywords/implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](../../language-reference/keywords/implicit-numeric-conversions-table.md)"},{"pos":[11941,12050],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](../../language-reference/keywords/explicit-numeric-conversions-table.md)"}]}