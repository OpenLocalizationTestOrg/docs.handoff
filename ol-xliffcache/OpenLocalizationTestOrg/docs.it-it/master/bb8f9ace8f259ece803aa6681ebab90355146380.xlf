<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="command-line-building-with-csc-exe.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb8f9ace8f259ece803aa6681ebab90355146380</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\compiler-options\command-line-building-with-csc-exe.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88674c9c0e1d8bbede601b50f48c79ea8ef6db43</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac44baab1128c3360cf869f5e80b394d32002efc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Command-line build with csc.exe</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Command-line build with csc.exe</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can invoke the C# compiler by typing the name of its executable file (<bpt id="p1">*</bpt>csc.exe<ept id="p1">*</ept>) at a command prompt.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">**</bpt>Developer Command Prompt for Visual Studio<ept id="p1">**</ept> window, all the necessary environment variables are set for you.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information on how to access this tool, see the <bpt id="p1">[</bpt>Developer Command Prompt for Visual Studio<ept id="p1">](../../../framework/tools/developer-command-prompt-for-vs.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you use a standard Command Prompt window, you must adjust your path before you can invoke <bpt id="p1">*</bpt>csc.exe<ept id="p1">*</ept> from any subdirectory on your computer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You also must run <bpt id="p1">*</bpt>vsvars32.bat<ept id="p1">*</ept> to set the appropriate environment variables to support command-line builds.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about <bpt id="p1">*</bpt>vsvars32.bat<ept id="p1">*</ept>, including instructions for how to find and run it, see <bpt id="p2">[</bpt>How to: Set Environment Variables for the Visual Studio Command Line<ept id="p2">](../../../csharp/language-reference/compiler-options/how-to-set-environment-variables-for-the-visual-studio-command-line.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you're working on a computer that has only the <ph id="ph1">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>, you can use the C# compiler at the <bpt id="p1">**</bpt>SDK Command Prompt<ept id="p1">**</ept>, which you open from the <bpt id="p2">**</bpt>Microsoft .NET Framework SDK<ept id="p2">**</ept> menu option.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also use MSBuild to build C# programs programmatically.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>MSBuild<ept id="p1">](/visualstudio/msbuild/msbuild)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>csc.exe<ept id="p1">*</ept> executable file usually is located in the Microsoft.NET\Framework<ph id="ph1">\\</ph><bpt id="p2">*</bpt><ph id="ph2">\&lt;</ph>Version&gt;<ept id="p2">*</ept> folder under the <bpt id="p3">*</bpt>Windows<ept id="p3">*</ept> directory.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Its location might vary depending on the exact configuration of a particular computer.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If more than one version of the .NET Framework is installed on your computer, you'll find multiple versions of this file.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about such installations, see <bpt id="p1">[</bpt>How to: determine which versions of the .NET Framework are installed<ept id="p1">](../../../framework/migration-guide/how-to-determine-which-versions-are-installed.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you build a project by using the Visual Studio IDE, you can display the <bpt id="p1">**</bpt>csc<ept id="p1">**</ept> command and its associated compiler options in the <bpt id="p2">**</bpt>Output<ept id="p2">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To display this information, follow the instructions in <bpt id="p1">[</bpt>How to: View, Save, and Configure Build Log Files<ept id="p1">](/visualstudio/ide/how-to-view-save-and-configure-build-log-files#to-change-the-amount-of-information-included-in-the-build-log)</ept> to change the verbosity level of the log data to <bpt id="p2">**</bpt>Normal<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Detailed<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After you rebuild your project, search the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window for <bpt id="p2">**</bpt>csc<ept id="p2">**</ept> to find the invocation of the C# compiler.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>In this topic<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Rules for command-line syntax<ept id="p1">](#rules-for-command-line-syntax-for-the-c-compiler)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sample command lines<ept id="p1">](#sample-command-lines-for-the-c-compiler)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Differences between C# compiler and C++ compiler output<ept id="p1">](#differences-between-c-compiler-and-c-compiler-output)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Rules for command-line syntax for the C# compiler</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The C# compiler uses the following rules when it interprets arguments given on the operating system command line:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Arguments are delimited by white space, which is either a space or a tab.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The caret character (^) is not recognized as an escape character or delimiter.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The character is handled by the command-line parser in the operating system before it's passed to the <ph id="ph1">`argv`</ph> array in the program.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A string enclosed in double quotation marks ("string") is interpreted as a single argument, regardless of white space that is contained within.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A quoted string can be embedded in an argument.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A double quotation mark preceded by a backslash (<ph id="ph1">\\</ph>") is interpreted as a literal double quotation mark character (").</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Backslashes are interpreted literally, unless they immediately precede a double quotation mark.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If an even number of backslashes is followed by a double quotation mark, one backslash is put in the <ph id="ph1">`argv`</ph> array for every pair of backslashes, and the double quotation mark is interpreted as a string delimiter.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If an odd number of backslashes is followed by a double quotation mark, one backslash is put in the <ph id="ph1">`argv`</ph> array for every pair of backslashes, and the double quotation mark is "escaped" by the remaining backslash.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This causes a literal double quotation mark (") to be added in <ph id="ph1">`argv`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Sample command lines for the C# compiler</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Compiles <bpt id="p1">*</bpt>File.cs<ept id="p1">*</ept> producing <bpt id="p2">*</bpt>File.exe<ept id="p2">*</ept>:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Compiles <bpt id="p1">*</bpt>File.cs<ept id="p1">*</ept> producing <bpt id="p2">*</bpt>File.dll<ept id="p2">*</ept>:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Compiles <bpt id="p1">*</bpt>File.cs<ept id="p1">*</ept> and creates <bpt id="p2">*</bpt>My.exe<ept id="p2">*</ept>:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Compiles all the C# files in the current directory with optimizations enabled and defines the DEBUG symbol.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The output is <bpt id="p1">*</bpt>File2.exe<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Compiles all the C# files in the current directory producing a debug version of <bpt id="p1">*</bpt>File2.dll<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>No logo and no warnings are displayed:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Compiles all the C# files in the current directory to <bpt id="p1">*</bpt>Something.xyz<ept id="p1">*</ept> (a DLL):</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Differences between C# compiler and C++ compiler output</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>There are no object (<bpt id="p1">*</bpt>.obj<ept id="p1">*</ept>) files created as a result of invoking the C# compiler; output files are created directly.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>As a result of this, the C# compiler does not need a linker.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Compiler Options<ept id="p1">](../../../csharp/language-reference/compiler-options/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Compiler Options Listed Alphabetically<ept id="p1">](../../../csharp/language-reference/compiler-options/listed-alphabetically.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Compiler Options Listed by Category<ept id="p1">](../../../csharp/language-reference/compiler-options/listed-by-category.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Main() and Command-Line Arguments<ept id="p1">](../../../csharp/programming-guide/main-and-command-args/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command-Line Arguments<ept id="p1">](../../../csharp/programming-guide/main-and-command-args/command-line-arguments.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Display Command-Line Arguments<ept id="p1">](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Access Command-Line Arguments Using foreach<ept id="p1">](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Main() Return Values<ept id="p1">](../../../csharp/programming-guide/main-and-command-args/main-return-values.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>