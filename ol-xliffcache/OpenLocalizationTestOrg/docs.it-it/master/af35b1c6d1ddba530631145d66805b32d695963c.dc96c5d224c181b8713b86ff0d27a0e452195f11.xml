{"content":"---\ntitle: \"ISymUnmanagedWriter::RemapToken Method | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"reference\"\napi_name: \n  - \"ISymUnmanagedWriter.RemapToken\"\napi_location: \n  - \"diasymreader.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ISymUnmanagedWriter::RemapToken\"\ndev_langs: \n  - \"C++\"\nhelpviewer_keywords: \n  - \"ISymUnmanagedWriter::RemapToken method [.NET Framework debugging]\"\n  - \"RemapToken method [.NET Framework debugging]\"\nms.assetid: bca92682-ee1e-467f-8fb0-d8d4617f82fe\ntopic_type: \n  - \"apiref\"\ncaps.latest.revision: 7\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# ISymUnmanagedWriter::RemapToken Method\nNotifies the symbol writer that a metadata token has been remapped as the metadata was emitted. If the symbol writer has stored the old token within the symbol store, it must either update the stored token with the new value, or it must save the map for the corresponding symbol reader to remap during the read phase.  \n  \n## Syntax  \n  \n```  \nHRESULT RemapToken(  \n    [in] mdToken  oldToken,  \n    [in] mdToken  newToken);  \n```  \n  \n#### Parameters  \n `oldToken`  \n [in] The metadata token that was remapped.  \n  \n `newToken`  \n [in] The new metadata token to which `oldToken` was remapped.  \n  \n## Return Value  \n S_OK if the method succeeds; otherwise, E_FAIL or some other error code.  \n  \n## Requirements  \n **Header:** CorSym.idl, CorSym.h  \n  \n## See Also  \n [ISymUnmanagedWriter Interface](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)","nodes":[{"pos":[12,67],"content":"ISymUnmanagedWriter::RemapToken Method | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"ISymUnmanagedWriter::RemapToken Method | Microsoft Docs","pos":[0,55]}]},{"pos":[721,759],"content":"ISymUnmanagedWriter::RemapToken Method","linkify":"ISymUnmanagedWriter::RemapToken Method","nodes":[{"content":"ISymUnmanagedWriter::RemapToken Method","pos":[0,38]}]},{"content":"Notifies the symbol writer that a metadata token has been remapped as the metadata was emitted.","pos":[760,855]},{"content":"If the symbol writer has stored the old token within the symbol store, it must either update the stored token with the new value, or it must save the map for the corresponding symbol reader to remap during the read phase.","pos":[856,1077]},{"pos":[1086,1092],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1201,1211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The metadata token that was remapped.","pos":[1229,1271]},{"content":"[in] The new metadata token to which <ph id=\"ph1\">`oldToken`</ph> was remapped.","pos":[1292,1353],"source":" [in] The new metadata token to which `oldToken` was remapped."},{"pos":[1362,1374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"S_OK if the method succeeds; otherwise, E_FAIL or some other error code.","pos":[1378,1450]},{"pos":[1459,1471],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[1475,1507],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorSym.idl, CorSym.h","source":"**Header:** CorSym.idl, CorSym.h"},{"pos":[1516,1524],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1528,1646],"content":"<bpt id=\"p1\">[</bpt>ISymUnmanagedWriter Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)</ept>","source":"[ISymUnmanagedWriter Interface](../../../../docs/framework/unmanaged-api/diagnostics/isymunmanagedwriter-interface.md)"}]}