{"content":"---\ntitle: \"Expression-bodied members (C# Programming Guide) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"expression-bodied members[C#]\"\n  - \"C# language, expresion-bodied members\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Expression-bodied members (C# programming guide)\nExpression body definitions let you provide a member's implementation in a very concise, readable form. You can use an expression body definition whenever the logic for any supported member, such as a method or property, consists of a single expression. An expression body definition has the following general syntax:\n\n```csharp\nmember => expression;\n```\n\nwhere *expression* is a valid expression. \n\nSupport for expression body definitions was introduced for methods and property get accessors in C# 6 and was expanded in C# 7. Expression body definitions can be used with the type members listed in the following table: \n\n|Member  |Supported as of... |\n|---------|---------|\n|[Method](#methods)  |C# 6 |\n|[Constructor](#constructors)   |C# 7 |\n|[Finalizer](#finalizers)     |C# 7 |\n|[Property Get](#property-get-statements)  |C# 6 |\n|[Property Set](#property-set-statements)  |C# 7 |\n|[Indexer](#indexers)       |C# 7 |\n\n## Methods\n\nAn expression-bodied method consists of a single expression that returns a value whose type matches the method's return type, or, for methods that return `void`, that performs some operation. For example, types that override the <xref:System.Object.ToString%2A> method typically include a single expression that returns the string representation of the current object. \n\nThe following example defines a `Person` class that overrides the <xref:System.Object.ToString%2A> method with an expression body definition. It also defines a `Show` method that displays a name to the console. Note that the `return` keyword is not used in the `ToString` expression body definition.\n\n[!code-cs[expression-bodied-methods](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-methods.cs)]  \n\nFor more information, see [Methods (C# Programming Guide)](../classes-and-structs/methods.md).\n \n## Constructors\n\nAn expression body definition for a constructor typically consists of a single assignment expression or a method call that handles the constructor's arguments or initializes instance state. \n\nThe following example defines a `Location` class whose constructor has a single string parameter named *name*. The expression body definition assigns the argument to the `Name` property.\n\n[!code-cs[expression-bodied-constructor](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-ctor.cs#1)]  \n\nFor more information, see [Constructors (C# Programming Guide)](../classes-and-structs/constructors.md).\n\n## Finalizers\n\nAn expression body definition for a finalizer typically contains cleanup statements, such as statements that release unmanaged resources.\n\nThe following example defines a finalizer that uses an expression body definition to indicate that the finalizer has been called.\n\n[!code-cs[expression-bodied-finalizer](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-destructor.cs#1)]  \n\nFor more information, see [Finalizers (C# Programming Guide)](../classes-and-structs/destructors.md).\n\n## Property get statements\n\nIf you choose to implement a property get accessor yourself, you can use an expression body definition for single expressions that simply return the property value. Note that the `return` statement isn't used.\n\nThe following example defines a `Location.Name` property whose property get accessor returns the value of the private `locationName` field that backs the property. \n\n[!code-cs[expression-bodied-property-getter](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-ctor.cs#1)]  \n\nRead-only properties that use an expression body definition can be implemented without an explicit `set` statement. The syntax is:\n\n```csharp\nPropertyName => returnValue;\n```\n\nThe following example defines a `Location` class whose read-only `Name` property is implemented as an expression body definition that returns the value of the private `locationName` field.\n\n[!code-cs[expression-bodied-constructor](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-readonly.cs#1)]  \n\nFor more information, see [Properties (C# Programming Guide)](../classes-and-structs/properties.md).\n\n## Property set statements\n\nIf you choose to implement a property set accessor yourself, you can use an expression body definition for a single-line expression that assigns a value to the field that backs the property.\n\nThe following example defines a `Location.Name` property whose property set statement assigns its input argument to the private `locationName` field that backs the property.\n\n[!code-cs[expression-bodied-property-setter](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-ctor.cs#1)]  \n\nFor more information, see [Properties (C# Programming Guide)](../classes-and-structs/properties.md).\n\n## Indexers\n\nLike properties, an indexer's get and set accessors consist of expression body definitions if the get accessor consists of a single statement that returns a value or the set accessor performs a simple assignment.\n\nThe following example defines a class named `Sports` that includes an internal <xref:System.String> array that contains the names of a number of sports. Both the indexer's get and set accessors are implemented as expression body definitions.\n\n[!code-cs[expression-bodied-indexer](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/expr-bodied-indexers.cs#1)] \n\nFor more information, see [Indexers (C# Programming Guide)](../indexers/index.md).\n\n","nodes":[{"pos":[4,338],"embed":true,"restype":"x-metadata","content":"title: \"Expression-bodied members (C# Programming Guide) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"expression-bodied members[C#]\"\n  - \"C# language, expresion-bodied members\"\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Expression-bodied members (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,65],"content":"Expression-bodied members (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Expression-bodied members (C# Programming Guide) | Microsoft Docs","pos":[0,65]}]}],"path":["title"]}],"yml":true},{"pos":[345,393],"content":"Expression-bodied members (C# programming guide)","linkify":"Expression-bodied members (C# programming guide)","nodes":[{"content":"Expression-bodied members (C# programming guide)","pos":[0,48]}]},{"content":"Expression body definitions let you provide a member's implementation in a very concise, readable form.","pos":[394,497]},{"content":"You can use an expression body definition whenever the logic for any supported member, such as a method or property, consists of a single expression.","pos":[498,647]},{"content":"An expression body definition has the following general syntax:","pos":[648,711]},{"pos":[750,791],"content":"where <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is a valid expression.","source":"where *expression* is a valid expression."},{"content":"Support for expression body definitions was introduced for methods and property get accessors in C# 6 and was expanded in C# 7.","pos":[794,921]},{"content":"Expression body definitions can be used with the type members listed in the following table:","pos":[922,1014]},{"content":"Member","pos":[1018,1024]},{"content":"Supported as of...","pos":[1027,1045]},{"pos":[1071,1089],"content":"<bpt id=\"p1\">[</bpt>Method<ept id=\"p1\">](#methods)</ept>","source":"[Method](#methods)"},{"content":"C# 6","pos":[1092,1096]},{"pos":[1100,1128],"content":"<bpt id=\"p1\">[</bpt>Constructor<ept id=\"p1\">](#constructors)</ept>","source":"[Constructor](#constructors)"},{"content":"C# 7","pos":[1132,1136]},{"pos":[1140,1164],"content":"<bpt id=\"p1\">[</bpt>Finalizer<ept id=\"p1\">](#finalizers)</ept>","source":"[Finalizer](#finalizers)"},{"content":"C# 7","pos":[1170,1174]},{"pos":[1178,1218],"content":"<bpt id=\"p1\">[</bpt>Property Get<ept id=\"p1\">](#property-get-statements)</ept>","source":"[Property Get](#property-get-statements)"},{"content":"C# 6","pos":[1221,1225]},{"pos":[1229,1269],"content":"<bpt id=\"p1\">[</bpt>Property Set<ept id=\"p1\">](#property-set-statements)</ept>","source":"[Property Set](#property-set-statements)"},{"content":"C# 7","pos":[1272,1276]},{"pos":[1280,1300],"content":"<bpt id=\"p1\">[</bpt>Indexer<ept id=\"p1\">](#indexers)</ept>","source":"[Indexer](#indexers)"},{"content":"C# 7","pos":[1308,1312]},{"pos":[1319,1326],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"An expression-bodied method consists of a single expression that returns a value whose type matches the method's return type, or, for methods that return <ph id=\"ph1\">`void`</ph>, that performs some operation.","pos":[1328,1519],"source":"An expression-bodied method consists of a single expression that returns a value whose type matches the method's return type, or, for methods that return `void`, that performs some operation."},{"content":"For example, types that override the <ph id=\"ph1\">&lt;xref:System.Object.ToString%2A&gt;</ph> method typically include a single expression that returns the string representation of the current object.","pos":[1520,1696],"source":" For example, types that override the <xref:System.Object.ToString%2A> method typically include a single expression that returns the string representation of the current object."},{"content":"The following example defines a <ph id=\"ph1\">`Person`</ph> class that overrides the <ph id=\"ph2\">&lt;xref:System.Object.ToString%2A&gt;</ph> method with an expression body definition.","pos":[1699,1840],"source":"The following example defines a `Person` class that overrides the <xref:System.Object.ToString%2A> method with an expression body definition."},{"content":"It also defines a <ph id=\"ph1\">`Show`</ph> method that displays a name to the console.","pos":[1841,1909],"source":" It also defines a `Show` method that displays a name to the console."},{"content":"Note that the <ph id=\"ph1\">`return`</ph> keyword is not used in the <ph id=\"ph2\">`ToString`</ph> expression body definition.","pos":[1910,1998],"source":" Note that the `return` keyword is not used in the `ToString` expression body definition."},{"pos":[2139,2233],"content":"For more information, see <bpt id=\"p1\">[</bpt>Methods (C# Programming Guide)<ept id=\"p1\">](../classes-and-structs/methods.md)</ept>.","source":"For more information, see [Methods (C# Programming Guide)](../classes-and-structs/methods.md)."},{"pos":[2239,2251],"content":"Constructors","linkify":"Constructors","nodes":[{"content":"Constructors","pos":[0,12]}]},{"content":"An expression body definition for a constructor typically consists of a single assignment expression or a method call that handles the constructor's arguments or initializes instance state.","pos":[2253,2442]},{"content":"The following example defines a <ph id=\"ph1\">`Location`</ph> class whose constructor has a single string parameter named <bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept>.","pos":[2445,2555],"source":"The following example defines a `Location` class whose constructor has a single string parameter named *name*."},{"content":"The expression body definition assigns the argument to the <ph id=\"ph1\">`Name`</ph> property.","pos":[2556,2631],"source":" The expression body definition assigns the argument to the `Name` property."},{"pos":[2775,2879],"content":"For more information, see <bpt id=\"p1\">[</bpt>Constructors (C# Programming Guide)<ept id=\"p1\">](../classes-and-structs/constructors.md)</ept>.","source":"For more information, see [Constructors (C# Programming Guide)](../classes-and-structs/constructors.md)."},{"pos":[2884,2894],"content":"Finalizers","linkify":"Finalizers","nodes":[{"content":"Finalizers","pos":[0,10]}]},{"content":"An expression body definition for a finalizer typically contains cleanup statements, such as statements that release unmanaged resources.","pos":[2896,3033]},{"content":"The following example defines a finalizer that uses an expression body definition to indicate that the finalizer has been called.","pos":[3035,3164]},{"pos":[3312,3413],"content":"For more information, see <bpt id=\"p1\">[</bpt>Finalizers (C# Programming Guide)<ept id=\"p1\">](../classes-and-structs/destructors.md)</ept>.","source":"For more information, see [Finalizers (C# Programming Guide)](../classes-and-structs/destructors.md)."},{"pos":[3418,3441],"content":"Property get statements","linkify":"Property get statements","nodes":[{"content":"Property get statements","pos":[0,23]}]},{"content":"If you choose to implement a property get accessor yourself, you can use an expression body definition for single expressions that simply return the property value.","pos":[3443,3607]},{"content":"Note that the <ph id=\"ph1\">`return`</ph> statement isn't used.","pos":[3608,3652],"source":" Note that the `return` statement isn't used."},{"pos":[3654,3817],"content":"The following example defines a <ph id=\"ph1\">`Location.Name`</ph> property whose property get accessor returns the value of the private <ph id=\"ph2\">`locationName`</ph> field that backs the property.","source":"The following example defines a `Location.Name` property whose property get accessor returns the value of the private `locationName` field that backs the property."},{"content":"Read-only properties that use an expression body definition can be implemented without an explicit <ph id=\"ph1\">`set`</ph> statement.","pos":[3966,4081],"source":"Read-only properties that use an expression body definition can be implemented without an explicit `set` statement."},{"content":"The syntax is:","pos":[4082,4096]},{"pos":[4142,4330],"content":"The following example defines a <ph id=\"ph1\">`Location`</ph> class whose read-only <ph id=\"ph2\">`Name`</ph> property is implemented as an expression body definition that returns the value of the private <ph id=\"ph3\">`locationName`</ph> field.","source":"The following example defines a `Location` class whose read-only `Name` property is implemented as an expression body definition that returns the value of the private `locationName` field."},{"pos":[4478,4578],"content":"For more information, see <bpt id=\"p1\">[</bpt>Properties (C# Programming Guide)<ept id=\"p1\">](../classes-and-structs/properties.md)</ept>.","source":"For more information, see [Properties (C# Programming Guide)](../classes-and-structs/properties.md)."},{"pos":[4583,4606],"content":"Property set statements","linkify":"Property set statements","nodes":[{"content":"Property set statements","pos":[0,23]}]},{"content":"If you choose to implement a property set accessor yourself, you can use an expression body definition for a single-line expression that assigns a value to the field that backs the property.","pos":[4608,4798]},{"pos":[4800,4973],"content":"The following example defines a <ph id=\"ph1\">`Location.Name`</ph> property whose property set statement assigns its input argument to the private <ph id=\"ph2\">`locationName`</ph> field that backs the property.","source":"The following example defines a `Location.Name` property whose property set statement assigns its input argument to the private `locationName` field that backs the property."},{"pos":[5121,5221],"content":"For more information, see <bpt id=\"p1\">[</bpt>Properties (C# Programming Guide)<ept id=\"p1\">](../classes-and-structs/properties.md)</ept>.","source":"For more information, see [Properties (C# Programming Guide)](../classes-and-structs/properties.md)."},{"pos":[5226,5234],"content":"Indexers","linkify":"Indexers","nodes":[{"content":"Indexers","pos":[0,8]}]},{"content":"Like properties, an indexer's get and set accessors consist of expression body definitions if the get accessor consists of a single statement that returns a value or the set accessor performs a simple assignment.","pos":[5236,5448]},{"content":"The following example defines a class named <ph id=\"ph1\">`Sports`</ph> that includes an internal <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> array that contains the names of a number of sports.","pos":[5450,5602],"source":"The following example defines a class named `Sports` that includes an internal <xref:System.String> array that contains the names of a number of sports."},{"content":"Both the indexer's get and set accessors are implemented as expression body definitions.","pos":[5603,5691]},{"pos":[5834,5916],"content":"For more information, see <bpt id=\"p1\">[</bpt>Indexers (C# Programming Guide)<ept id=\"p1\">](../indexers/index.md)</ept>.","source":"For more information, see [Indexers (C# Programming Guide)](../indexers/index.md)."}]}