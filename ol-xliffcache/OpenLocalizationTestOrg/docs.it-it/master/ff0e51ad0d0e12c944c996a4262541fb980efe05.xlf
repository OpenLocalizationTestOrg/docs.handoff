<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="creating-satellite-assemblies-for-desktop-apps.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff0e51ad0d0e12c944c996a4262541fb980efe05</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\resources\creating-satellite-assemblies-for-desktop-apps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32780bf4a32fd6456af99e7014f649c38295bee5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b17bd0379030cbdf4d089be6053d57ff149b60a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Creating Satellite Assemblies for Desktop Apps</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating Satellite Assemblies for Desktop Apps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Resource files play a central role in localized applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>They enable an application to display strings, images, and other data in the user's own language and culture, and to provide alternate data if resources for the user's own language or culture are unavailable.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET Framework uses a hub-and-spoke model to locate and retrieve localized resources.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The hub is the main assembly that contains the non-localizable executable code and the resources for a single culture, which is called the neutral or default culture.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The default culture is the fallback culture for the application; it is used when no localized resources are available.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute to designate the culture of the application's default culture.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each spoke connects to a satellite assembly that contains the resources for a single localized culture but does not contain any code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because the satellite assemblies are not part of the main assembly, you can easily update or replace resources that correspond to a specific culture without replacing the main assembly for the application.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The resources of an application's default culture can also be stored in a satellite assembly.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To do this, you assign the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute a value of <ph id="ph2">&lt;xref:System.Resources.UltimateResourceFallbackLocation.Satellite?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Satellite Assembly Name and Location</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The hub-and-spoke model requires that you place resources in specific locations so that they can be easily located and used.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you do not compile and name resources as expected, or if you do not place them in the correct locations, the common language runtime will not be able to locate them and will use the resources of the default culture instead.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The .NET Framework Resource Manager, represented by a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object, is used to automatically access localized resources.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Resource Manager requires the following:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A single satellite assembly must include all the resources for a particular culture.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In other words, you should compile multiple .txt or .resx files into a single binary .resources file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There must be a separate subdirectory in the application directory for each localized culture that stores that culture's resources.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The subdirectory name must be the same as the culture name.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Alternately, you can store your satellite assemblies in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In this case, the culture information component of the assembly's strong name must indicate its culture.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>(See the <bpt id="p1">[</bpt>Installing Satellite Assemblies in the Global Assembly Cache<ept id="p1">](#SN)</ept> section later in this topic.)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If your application includes resources for subcultures, place each subculture in a separate subdirectory under the application directory.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Do not place subcultures in subdirectories under their main culture's directory.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The satellite assembly must have the same name as the application, and must use the file name extension ".resources.dll".</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, if an application is named Example.exe, the name of each satellite assembly should be Example.resources.dll.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Note that the satellite assembly name does not indicate the culture of its resource files.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, the satellite assembly appears in a directory that does specify the culture.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Information about the culture of the satellite assembly must be included in the assembly's metadata.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To store the culture name in the satellite assembly's metadata, you specify the <ph id="ph1">`/culture`</ph> option when you use <bpt id="p1">[</bpt>Assembly Linker<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept> to embed resources in the satellite assembly.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following illustration shows a sample directory structure and location requirements for applications that you are not installing in the <bpt id="p1">[</bpt>global assembly cache<ept id="p1">](../../../docs/framework/app-domains/gac.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The items with .txt and .resources extensions will not ship with the final application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These are the intermediate resource files used to create the final satellite resource assemblies.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example, you could substitute .resx files for the .txt files.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Satellite assemblies<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/resources/media/satelliteassemblydir.gif "</bpt>satelliteassemblydir<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Satellite assembly directory</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Compiling Satellite Assemblies</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You use <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to compile text files or XML (.resx) files that contain resources to binary .resources files.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You then use <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept> to compile .resources files into satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Al.exe creates an assembly from the .resources files that you specify.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Satellite assemblies can contain only resources; they cannot contain any executable code.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following Al.exe command creates a satellite assembly for the application <ph id="ph1">`Example`</ph> from the German resources file strings.de.resources.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following Al.exe command also creates a satellite assembly for the application <ph id="ph1">`Example`</ph> from the file strings.de.resources.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/template<ept id="p1">**</ept> option causes the satellite assembly to inherit all assembly metadata except for its culture information from the parent assembly (Example.dll).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following table describes the Al.exe options used in these commands in more detail.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>-target:<ept id="p1">**</ept>lib</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specifies that your satellite assembly is compiled to a library (.dll) file.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because a satellite assembly does not contain executable code and is not an application's main assembly, you must save satellite assemblies as DLLs.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>-embed:<ept id="p1">**</ept>strings.de.resources</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Specifies the name of the resource file to embed when Al.exe compiles the assembly.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can embed multiple .resources files in a satellite assembly, but if you are following the hub-and-spoke model, you must compile one satellite assembly for each culture.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>However, you can create separate .resources files for strings and objects.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>-culture:<ept id="p1">**</ept>de</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies the culture of the resource to compile.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The common language runtime uses this information when it searches for the resources for a specified culture.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you omit this option, Al.exe will still compile the resource, but the runtime will not be able to find it when a user requests it.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>-out:<ept id="p1">**</ept>Example.resources.dll</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Specifies the name of the output file.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The name must follow the naming standard <bpt id="p1">*</bpt>baseName<ept id="p1">*</ept>.resources.<bpt id="p2">*</bpt>extension<ept id="p2">*</ept>, where <bpt id="p3">*</bpt>baseName<ept id="p3">*</ept> is the name of the main assembly and <bpt id="p4">*</bpt>extension<ept id="p4">*</ept> is a valid file name extension (such as .dll).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that the runtime is not able to determine the culture of a satellite assembly based on its output file name; you must use the <bpt id="p1">**</bpt>/culture<ept id="p1">**</ept> option to specify it.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>-template:<ept id="p1">**</ept>Example.dll</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Specifies an assembly from which the satellite assembly will inherit all assembly metadata except the culture field.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This option affects satellite assemblies only if you specify an assembly that has a <bpt id="p1">[</bpt>strong name<ept id="p1">](../../../docs/framework/app-domains/strong-named-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For a complete list of options available with Al.exe, see <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Satellite Assemblies: An Example</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following is a simple "Hello world" example that displays a message box containing a localized greeting.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The example includes resources for the English (United States), French (France), and Russian (Russia) cultures, and its fallback culture is English.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To create the example, do the following:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Create a resource file named Greeting.resx or Greeting.txt to contain the resource for the default culture.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Store a single string named <ph id="ph1">`HelloString`</ph> whose value is "Hello world!"</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>in this file.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To indicate that English (en) is the application's default culture, add the following <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute?displayProperty=nameWithType&gt;</ph> attribute to the application's AssemblyInfo file or to the main source code file that will be compiled into the application's main assembly.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Add support for additional cultures (en-US, fr-FR, and ru-RU) to the application as follows:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To support the en-US or English (United States) culture, create a resource file named Greeting.en-US.resx or Greeting.en-US.txt, and store in it a single string named <ph id="ph1">`HelloString`</ph> whose value is "Hi world!"</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To support the fr-FR or French (France) culture, create a resource file named Greeting.fr-FR.resx or Greeting.fr-FR.txt, and store in it a single string named <ph id="ph1">`HelloString`</ph> whose value is "Salut tout le monde!"</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To support the ru-RU or Russian (Russia) culture, create a resource file named Greeting.ru-RU.resx or Greeting.ru-RU.txt, and store in it a single string named <ph id="ph1">`HelloString`</ph> whose value is "Всем привет!"</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>Resgen.exe<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to compile each text or XML resource file to a binary .resources file.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The output is a set of files that have the same root file name as the .resx or .txt files, but a .resources extension.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you create the example with Visual Studio, the compilation process is handled automatically.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you aren't using Visual Studio, run the following commands to compile the .resx files into .resources files:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If your resources are in text files instead of XML files, replace the .resx extension with .txt.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Compile the following source code along with the resources for the default culture into the application's main assembly:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you are using the command line rather than Visual Studio to create the example, you should modify the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class constructor to the following: <ph id="ph2">`ResourceManager rm = new ResourceManager("Greetings", typeof(Example).Assembly);`</ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the application is named Example and you are compiling from the command line, the command for the C# compiler is:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The corresponding Visual Basic compiler command is:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Create a subdirectory in the main application directory for each localized culture supported by the application.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You should create an en-US, an fr-FR, and an ru-RU subdirectory.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Visual Studio creates these subdirectories automatically as part of the compilation process.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Embed the individual culture-specific .resources files into satellite assemblies and save them to the appropriate directory.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The command to do this for each .resources file is:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>culture<ept id="p1">*</ept> is the name of the culture whose resources the satellite assembly contains.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Visual Studio handles this process automatically.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can then run the example.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>It will randomly make one of the supported cultures the current culture and display a localized greeting.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Installing Satellite Assemblies in the Global Assembly Cache</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Instead of installing assemblies in a local application subdirectory, you can install them in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This is particularly useful if you have class libraries and class library resource assemblies that are used by multiple applications.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Installing assemblies in the global assembly cache requires that they have strong names.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Strong-named assemblies are signed with a valid public/private key pair.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>They contain version information that the runtime uses to determine which assembly to use to satisfy a binding request.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information about strong names and versioning, see <bpt id="p1">[</bpt>Assembly Versioning<ept id="p1">](../../../docs/framework/app-domains/assembly-versioning.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For more information about strong names, see <bpt id="p1">[</bpt>Strong-Named Assemblies<ept id="p1">](../../../docs/framework/app-domains/strong-named-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When you are developing an application, it is unlikely that you will have access to the final public/private key pair.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In order to install a satellite assembly in the global assembly cache and ensure that it works as expected, you can use a technique called delayed signing.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When you delay sign an assembly, at build time you reserve space in the file for the strong name signature.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The actual signing is delayed until later, when the final public/private key pair is available.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For more information about delayed signing, see <bpt id="p1">[</bpt>Delay Signing an Assembly<ept id="p1">](../../../docs/framework/app-domains/delay-sign-assembly.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Obtaining the Public Key</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To delay sign an assembly, you must have access to the public key.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can either obtain the real public key from the organization in your company that will do the eventual signing, or create a public key by using the <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following Sn.exe command creates a test public/private key pair.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>–k<ept id="p1">**</ept> option specifies that Sn.exe should create a new key pair and save it in a file named TestKeyPair.snk.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You can extract the public key from the file that contains the test key pair.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following command extracts the public key from TestKeyPair.snk and saves it in PublicKey.snk:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Delay Signing an Assembly</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>After you obtain or create the public key, you use the <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept> to compile the assembly and specify delayed signing.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following Al.exe command creates a strong-named satellite assembly for the application StringLibrary from the strings.ja.resources file:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-delay+<ept id="p1">**</ept> option specifies that the Assembly Linker should delay sign the assembly.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-keyfile<ept id="p1">**</ept> option specifies the name of the key file that contains the public key to use to delay sign the assembly.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Re-signing an Assembly</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Before you deploy your application, you must re-sign the delay signed satellite assembly with the real key pair.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>You can do this by using Sn.exe.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The following Sn.exe command signs StringLibrary.resources.dll with the key pair stored in the file RealKeyPair.snk.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>–R<ept id="p1">**</ept> option specifies that a previously signed or delay signed assembly is to be re-signed.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Installing a Satellite Assembly in the Global Assembly Cache</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When the runtime searches for resources in the resource fallback process, it looks in the <bpt id="p1">[</bpt>global assembly cache<ept id="p1">](../../../docs/framework/app-domains/gac.md)</ept> first.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>(For more information, see the "Resource Fallback Process" section of the <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> topic.) As soon as a satellite assembly is signed with a strong name, it can be installed in the global assembly cache by using the <bpt id="p2">[</bpt>Global Assembly Cache Tool (Gacutil.exe)<ept id="p2">](../../../docs/framework/tools/gacutil-exe-gac-tool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The following Gacutil.exe command installs StringLibrary.resources.dll in the global assembly cache:</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/i<ept id="p1">**</ept> option specifies that Gacutil.exe should install the specified assembly into the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>After the satellite assembly is installed in the cache, the resources it contains become available to all applications that are designed to use the satellite assembly.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Resources in the Global Assembly Cache: An Example</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The following example uses a method in a .NET Framework class library to extract and return a localized greeting from a resource file.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The library and its resources are registered in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The example includes resources for the English (United States), French (France), Russian (Russia), and English cultures.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>English is the default culture; its resources are stored in the main assembly.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The example initially delay signs the library and its satellite assemblies with a public key, then re-signs them with a public/private key pair.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To create the example, do the following:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If you are not using Visual Studio, use the following <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept> command to create a public/private key pair named ResKey.snk:</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If you are using Visual Studio, use the <bpt id="p1">**</bpt>Signing<ept id="p1">**</ept> tab of the project <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> dialog box to generate the key file.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Use the following <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept> command to create a public key file named PublicKey.snk:</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Create a resource file named Strings.resx to contain the resource for the default culture.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Store a single string named <ph id="ph1">`Greeting`</ph> whose value is "How do you do?"</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>in that file.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>To indicate that "en" is the application's default culture, add the following <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute?displayProperty=nameWithType&gt;</ph> attribute to the application's AssemblyInfo file or to the main source code file that will be compiled into the application's main assembly:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Add support for additional cultures (the en-US, fr-FR, and ru-RU cultures) to the application as follows:</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>To support the "en-US" or English (United States) culture, create a resource file named Strings.en-US.resx or Strings.en-US.txt, and store in it a single string named <ph id="ph1">`Greeting`</ph> whose value is "Hello!".</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To support the "fr-FR" or French (France) culture, create a resource file named Strings.fr-FR.resx or Strings.fr-FR.txt and store in it a single string named <ph id="ph1">`Greeting`</ph> whose value is "Bon jour!"</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>To support the "ru-RU" or Russian (Russia) culture, create a resource file named Strings.ru-RU.resx or Strings.ru-RU.txt and store in it a single string named <ph id="ph1">`Greeting`</ph> whose value is "Привет!"</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>Resgen.exe<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to compile each text or XML resource file to a binary .resources file.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The output is a set of files that have the same root file name as the .resx or .txt files, but a .resources extension.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If you create the example with Visual Studio, the compilation process is handled automatically.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If you aren't using Visual Studio, run the following command to compile the .resx files into .resources files:</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>filename<ept id="p1">*</ept> is the optional path, file name, and extension of the .resx or text file.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Compile the following source code for StringLibrary.vb or StringLibrary.cs along with the resources for the default culture into a delay signed library assembly named StringLibrary.dll:</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If you are using the command line rather than Visual Studio to create the example, you should modify the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class constructor to <ph id="ph2">`ResourceManager rm = new ResourceManager("Strings",`</ph> <ph id="ph3">`typeof(Example).Assembly);`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The command for the C# compiler is:</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The corresponding Visual Basic compiler command is:</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Create a subdirectory in the main application directory for each localized culture supported by the application.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>You should create an en-US, an fr-FR, and an ru-RU subdirectory.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Visual Studio creates these subdirectories automatically as part of the compilation process.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Because all satellite assemblies have the same file name, the subdirectories are used to store individual culture-specific satellite assemblies until they are signed with a public/private key pair.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Embed the individual culture-specific .resources files into delay signed satellite assemblies and save them to the appropriate directory.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The command to do this for each .resources file is:</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>culture<ept id="p1">*</ept> is the name of a culture.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>In this example, the culture names are en-US, fr-FR, and ru-RU.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Re-sign StringLibrary.dll by using the <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept> as follows:</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Re-sign the individual satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>To do this, use the <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept> as follows for each satellite assembly:</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Register StringLibrary.dll and each of its satellite assemblies in the global assembly cache by using the following command:</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>filename<ept id="p1">*</ept> is the name of the file to register.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If you are using Visual Studio, create a new <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept> project named <ph id="ph1">`Example`</ph>, add a reference to StringLibrary.dll and the following source code to it, and compile.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To compile from the command line, use the following command for the C# compiler:</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The command line for the Visual Basic compiler is:</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Run Example.exe.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delay Signing an Assembly<ept id="p1">](../../../docs/framework/app-domains/delay-sign-assembly.md)</ept></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Al.exe (Assembly Linker)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sn.exe (Strong Name Tool)<ept id="p1">](../../../docs/framework/tools/sn-exe-strong-name-tool.md)</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Gacutil.exe (Global Assembly Cache Tool)<ept id="p1">](../../../docs/framework/tools/gacutil-exe-gac-tool.md)</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resources in Desktop Apps<ept id="p1">](../../../docs/framework/resources/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>