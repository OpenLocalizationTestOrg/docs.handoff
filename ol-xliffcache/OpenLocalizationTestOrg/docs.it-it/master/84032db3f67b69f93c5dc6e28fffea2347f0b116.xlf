<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="remote-vs-local-execution.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84032db3f67b69f93c5dc6e28fffea2347f0b116</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\remote-vs-local-execution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf5200892255460458b656420ed635e1f8c25545</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35f780094cb93967be7c141ae3d4ec1f8d374496</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Remote vs. Local Execution | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Remote vs. Local Execution</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can decide to execute your queries either remotely (that is, the database engine executes the query against the database) or locally (<ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> executes the query against a local cache).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remote Execution</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Consider the following query:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If your database has thousands of rows of orders, you do not want to retrieve them all to process a small subset.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> class implements the <ph id="ph3">&lt;xref:System.Linq.IQueryable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This approach makes sure that such queries can be executed remotely.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Two major benefits flow from this technique:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Unnecessary data is not retrieved.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A query executed by the database engine is often more efficient because of the database indexes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Local Execution</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In other situations, you might want to have the complete set of related entities in the local cache.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For this purpose, <ph id="ph1">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> provides the <ph id="ph2">&lt;xref:System.Data.Linq.EntitySet%601.Load%2A&gt;</ph> method to explicitly load all the members of the <ph id="ph3">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> is already loaded, subsequent queries are executed locally.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This approach helps in two ways:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the complete set must be used locally or multiple times, you can avoid remote queries and associated latencies.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The entity can be serialized as a complete entity.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following code fragment illustrates how local execution can be obtained:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Comparison</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These two capabilities provide a powerful combination of options: remote execution for large collections and local execution for small collections or where the complete collection is needed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You implement remote execution through <ph id="ph1">&lt;xref:System.Linq.IQueryable&gt;</ph>, and local execution against an in-memory <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To force local execution (that is, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>), see <bpt id="p1">[</bpt>Convert a Type to a Generic IEnumerable<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/convert-a-type-to-a-generic-ienumerable.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Queries Against Unordered Sets</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note the important difference between a local collection that implements <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> and a collection that provides remote queries executed against <bpt id="p1">*</bpt>unordered sets<ept id="p1">*</ept> in a relational database.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> methods such as those that use index values require list semantics, which typically cannot be obtained through a remote query against an unordered set.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For this reason, such methods implicitly load the <ph id="ph1">&lt;xref:System.Data.Linq.EntitySet%601&gt;</ph> to allow local execution.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Concepts<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>