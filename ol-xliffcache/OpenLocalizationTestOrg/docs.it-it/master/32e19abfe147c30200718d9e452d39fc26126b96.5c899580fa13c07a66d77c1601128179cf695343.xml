{"content":"---\ntitle: \"Character Escapes in Regular Expressions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"unescaped characters\"\n  - \"replacement patterns\"\n  - \"characters, escapes\"\n  - \"regular expressions, character escapes\"\n  - \"escape characters\"\n  - \".NET Framework regular expressions, character escapes\"\n  - \"constructs, character escapes\"\nms.assetid: f49cc9cc-db7d-4058-8b8a-422bc08b29b0\ncaps.latest.revision: 31\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Character Escapes in Regular Expressions\nThe backslash (\\\\) in a regular expression indicates one of the following:  \n  \n-   The character that follows it is a special character, as shown in the table in the following section. For example, `\\b` is an anchor that indicates that a regular expression match should begin on a word boundary, `\\t` represents a tab, and `\\x020` represents a space.  \n  \n-   A character that otherwise would be interpreted as an unescaped language construct should be interpreted literally. For example, a brace (`{`) begins the definition of a quantifier, but a backslash followed by a brace (`\\{`) indicates that the regular expression engine should match the brace. Similarly, a single backslash marks the beginning of an escaped language construct, but two backslashes (`\\\\`) indicate that the regular expression engine should match the backslash.  \n  \n> [!NOTE]\n>  Character escapes are recognized in regular expression patterns but not in replacement patterns.  \n  \n## Character Escapes in .NET  \n The following table lists the character escapes supported by regular expressions in .NET.  \n  \n|Character or sequence|Description|  \n|---------------------------|-----------------|  \n|All characters except for the following:<br /><br /> . $ ^ { [ ( &#124; ) * + ? \\|Characters other than those listed in the **Character or sequence** column have no special meaning in regular expressions; they match themselves.<br /><br /> The characters included in the **Character or sequence** column are special regular expression language elements. To match them in a regular expression, they must be escaped or included in a [positive character group](../../../docs/standard/base-types/character-classes-in-regular-expressions.md). For example, the regular expression `\\$\\d+` or `[$]\\d+` matches \"$1200\".|  \n|`\\a`|Matches a bell (alarm) character, `\\u0007`.|  \n|`\\b`|In a `[`*character_group*`]` character class, matches a backspace, `\\u0008`.  (See [Character Classes](../../../docs/standard/base-types/character-classes-in-regular-expressions.md).) Outside a character class, `\\b` is an anchor that matches a word boundary. (See [Anchors](../../../docs/standard/base-types/anchors-in-regular-expressions.md).)|  \n|`\\t`|Matches a tab, `\\u0009`.|  \n|`\\r`|Matches a carriage return, `\\u000D`. Note that `\\r` is not equivalent to the newline character, `\\n`.|  \n|`\\v`|Matches a vertical tab, `\\u000B`.|  \n|`\\f`|Matches a form feed, `\\u000C`.|  \n|`\\n`|Matches a new line, `\\u000A`.|  \n|`\\e`|Matches an escape, `\\u001B`.|  \n|`\\` *nnn*|Matches an ASCII character, where *nnn* consists of two or three digits that represent the octal character code. For example, `\\040` represents a space character. This construct is interpreted as a backreference if it has only one digit (for example, `\\2`) or if it corresponds to the number of a capturing group. (See [Backreference Constructs](../../../docs/standard/base-types/backreference-constructs-in-regular-expressions.md).)|  \n|`\\x` *nn*|Matches an ASCII character, where *nn* is a two-digit hexadecimal character code.|  \n|`\\c` *X*|Matches an ASCII control character, where X is the letter of the control character. For example, `\\cC` is CTRL-C.|  \n|`\\u` *nnnn*|Matches a UTF-16 code unit whose value is *nnnn* hexadecimal. **Note:**  The Perl 5 character escape that is used to specify Unicode is not supported by .NET. The Perl 5 character escape has the form `\\x{`*####*`…}`, where *####*`…` is a series of hexadecimal digits. Instead, use `\\u`*nnnn*.|  \n|`\\`|When followed by a character that is not recognized as an escaped character, matches that character. For example, `\\*` matches an asterisk (*) and is the same as `\\x2A`.|  \n  \n## An Example  \n The following example illustrates the use of character escapes in a regular expression. It parses a string that contains the names of the world's largest cities and their populations in 2009. Each city name is separated from its population by a tab (`\\t`) or a vertical bar (&#124; or `\\u007c`). Individual cities and their populations are separated from each other by a carriage return and line feed.  \n  \n [!code-csharp[RegularExpressions.Language.Escapes#1](../../../samples/snippets/csharp/VS_Snippets_CLR/regularexpressions.language.escapes/cs/escape1.cs#1)]\n [!code-vb[RegularExpressions.Language.Escapes#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/regularexpressions.language.escapes/vb/escape1.vb#1)]  \n  \n The regular expression `\\G(.+)[\\t|\\u007c](.+)\\r?\\n` is interpreted as shown in the following table.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`\\G`|Begin the match where the last match ended.|  \n|`(.+)`|Match any character one or more times. This is the first capturing group.|  \n|`[\\t\\u007c]`|Match a tab (`\\t`) or a vertical bar (&#124;).|  \n|`(.+)`|Match any character one or more times. This is the second capturing group.|  \n|`\\r?\\n`|Match zero or one occurrence of a carriage return followed by a new line.|  \n  \n## See Also  \n [Regular Expression Language - Quick Reference](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)","nodes":[{"pos":[12,69],"content":"Character Escapes in Regular Expressions | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Character Escapes in Regular Expressions | Microsoft Docs","pos":[0,57]}]},{"pos":[628,668],"content":"Character Escapes in Regular Expressions","linkify":"Character Escapes in Regular Expressions","nodes":[{"content":"Character Escapes in Regular Expressions","pos":[0,40]}]},{"content":"The backslash (<ph id=\"ph1\">\\\\</ph>) in a regular expression indicates one of the following:","pos":[669,743],"source":"The backslash (\\\\) in a regular expression indicates one of the following:"},{"content":"The character that follows it is a special character, as shown in the table in the following section.","pos":[753,854]},{"content":"For example, <ph id=\"ph1\">`\\b`</ph> is an anchor that indicates that a regular expression match should begin on a word boundary, <ph id=\"ph2\">`\\t`</ph> represents a tab, and <ph id=\"ph3\">`\\x020`</ph> represents a space.","pos":[855,1020],"source":" For example, `\\b` is an anchor that indicates that a regular expression match should begin on a word boundary, `\\t` represents a tab, and `\\x020` represents a space."},{"content":"A character that otherwise would be interpreted as an unescaped language construct should be interpreted literally.","pos":[1030,1145]},{"content":"For example, a brace (<ph id=\"ph1\">`{`</ph>) begins the definition of a quantifier, but a backslash followed by a brace (<ph id=\"ph2\">`\\{`</ph>) indicates that the regular expression engine should match the brace.","pos":[1146,1323],"source":" For example, a brace (`{`) begins the definition of a quantifier, but a backslash followed by a brace (`\\{`) indicates that the regular expression engine should match the brace."},{"content":"Similarly, a single backslash marks the beginning of an escaped language construct, but two backslashes (<ph id=\"ph1\">`\\\\`</ph>) indicate that the regular expression engine should match the backslash.","pos":[1324,1506],"source":" Similarly, a single backslash marks the beginning of an escaped language construct, but two backslashes (`\\\\`) indicate that the regular expression engine should match the backslash."},{"pos":[1514,1621],"content":"[!NOTE]\n Character escapes are recognized in regular expression patterns but not in replacement patterns.","leadings":["","> "],"nodes":[{"content":"Character escapes are recognized in regular expression patterns but not in replacement patterns.","pos":[9,105]}]},{"pos":[1630,1655],"content":"Character Escapes in .NET","linkify":"Character Escapes in .NET","nodes":[{"content":"Character Escapes in .NET","pos":[0,25]}]},{"content":"The following table lists the character escapes supported by regular expressions in .NET.","pos":[1659,1748]},{"content":"Character or sequence","pos":[1755,1776]},{"content":"Description","pos":[1777,1788]},{"content":"All characters except for the following:","pos":[1843,1883]},{"content":".","pos":[1896,1897]},{"content":"$ ^ { [ ( &amp;#124; ) * + ?","pos":[1898,1922],"source":" $ ^ { [ ( &#124; ) * + ?"},{"content":"Characters other than those listed in the <bpt id=\"p1\">**</bpt>Character or sequence<ept id=\"p1\">**</ept> column have no special meaning in regular expressions; they match themselves.","pos":[1925,2070],"source":"Characters other than those listed in the **Character or sequence** column have no special meaning in regular expressions; they match themselves."},{"content":"The characters included in the <bpt id=\"p1\">**</bpt>Character or sequence<ept id=\"p1\">**</ept> column are special regular expression language elements.","pos":[2083,2196],"source":" The characters included in the **Character or sequence** column are special regular expression language elements."},{"content":"To match them in a regular expression, they must be escaped or included in a <bpt id=\"p1\">[</bpt>positive character group<ept id=\"p1\">](../../../docs/standard/base-types/character-classes-in-regular-expressions.md)</ept>.","pos":[2197,2380],"source":" To match them in a regular expression, they must be escaped or included in a [positive character group](../../../docs/standard/base-types/character-classes-in-regular-expressions.md)."},{"content":"For example, the regular expression <ph id=\"ph1\">`\\$\\d+`</ph> or <ph id=\"ph2\">`[$]\\d+`</ph> matches \"$1200\".","pos":[2381,2453],"source":" For example, the regular expression `\\$\\d+` or `[$]\\d+` matches \"$1200\"."},{"pos":[2463,2506],"content":"Matches a bell (alarm) character, <ph id=\"ph1\">`\\u0007`</ph>.","source":"Matches a bell (alarm) character, `\\u0007`."},{"content":"In a <ph id=\"ph1\">`[`</ph><bpt id=\"p1\">*</bpt>character_group<ept id=\"p1\">*</ept><ph id=\"ph2\">`]`</ph> character class, matches a backspace, <ph id=\"ph3\">`\\u0008`</ph>.","pos":[2516,2592],"source":"In a `[`*character_group*`]` character class, matches a backspace, `\\u0008`."},{"content":"(See <bpt id=\"p1\">[</bpt>Character Classes<ept id=\"p1\">](../../../docs/standard/base-types/character-classes-in-regular-expressions.md)</ept>.) Outside a character class, <ph id=\"ph1\">`\\b`</ph> is an anchor that matches a word boundary.","pos":[2594,2774],"source":"  (See [Character Classes](../../../docs/standard/base-types/character-classes-in-regular-expressions.md).) Outside a character class, `\\b` is an anchor that matches a word boundary."},{"content":"(See <bpt id=\"p1\">[</bpt>Anchors<ept id=\"p1\">](../../../docs/standard/base-types/anchors-in-regular-expressions.md)</ept>.)","pos":[2775,2860],"source":" (See [Anchors](../../../docs/standard/base-types/anchors-in-regular-expressions.md).)"},{"pos":[2870,2894],"content":"Matches a tab, <ph id=\"ph1\">`\\u0009`</ph>.","source":"Matches a tab, `\\u0009`."},{"content":"Matches a carriage return, <ph id=\"ph1\">`\\u000D`</ph>.","pos":[2904,2940],"source":"Matches a carriage return, `\\u000D`."},{"content":"Note that <ph id=\"ph1\">`\\r`</ph> is not equivalent to the newline character, <ph id=\"ph2\">`\\n`</ph>.","pos":[2941,3005],"source":" Note that `\\r` is not equivalent to the newline character, `\\n`."},{"pos":[3015,3048],"content":"Matches a vertical tab, <ph id=\"ph1\">`\\u000B`</ph>.","source":"Matches a vertical tab, `\\u000B`."},{"pos":[3058,3088],"content":"Matches a form feed, <ph id=\"ph1\">`\\u000C`</ph>.","source":"Matches a form feed, `\\u000C`."},{"pos":[3098,3127],"content":"Matches a new line, <ph id=\"ph1\">`\\u000A`</ph>.","source":"Matches a new line, `\\u000A`."},{"pos":[3137,3165],"content":"Matches an escape, <ph id=\"ph1\">`\\u001B`</ph>.","source":"Matches an escape, `\\u001B`."},{"pos":[3170,3179],"content":"<ph id=\"ph1\">`\\`</ph> <bpt id=\"p1\">*</bpt><ph id=\"ph2\">nnn</ph><ept id=\"p1\">*</ept>","source":"`\\` *nnn*"},{"content":"Matches an ASCII character, where <bpt id=\"p1\">*</bpt><ph id=\"ph1\">nnn</ph><ept id=\"p1\">*</ept> consists of two or three digits that represent the octal character code.","pos":[3180,3292],"source":"Matches an ASCII character, where *nnn* consists of two or three digits that represent the octal character code."},{"content":"For example, <ph id=\"ph1\">`\\040`</ph> represents a space character.","pos":[3293,3342],"source":" For example, `\\040` represents a space character."},{"content":"This construct is interpreted as a backreference if it has only one digit (for example, <ph id=\"ph1\">`\\2`</ph>) or if it corresponds to the number of a capturing group.","pos":[3343,3493],"source":" This construct is interpreted as a backreference if it has only one digit (for example, `\\2`) or if it corresponds to the number of a capturing group."},{"content":"(See <bpt id=\"p1\">[</bpt>Backreference Constructs<ept id=\"p1\">](../../../docs/standard/base-types/backreference-constructs-in-regular-expressions.md)</ept>.)","pos":[3494,3613],"source":" (See [Backreference Constructs](../../../docs/standard/base-types/backreference-constructs-in-regular-expressions.md).)"},{"pos":[3618,3627],"content":"<ph id=\"ph1\">`\\x`</ph> <bpt id=\"p1\">*</bpt><ph id=\"ph2\">nn</ph><ept id=\"p1\">*</ept>","source":"`\\x` *nn*"},{"pos":[3628,3709],"content":"Matches an ASCII character, where <bpt id=\"p1\">*</bpt><ph id=\"ph1\">nn</ph><ept id=\"p1\">*</ept> is a two-digit hexadecimal character code.","source":"Matches an ASCII character, where *nn* is a two-digit hexadecimal character code."},{"pos":[3714,3722],"content":"<ph id=\"ph1\">`\\c`</ph> <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>","source":"`\\c` *X*"},{"content":"Matches an ASCII control character, where X is the letter of the control character.","pos":[3723,3806]},{"content":"For example, <ph id=\"ph1\">`\\cC`</ph> is CTRL-C.","pos":[3807,3836],"source":" For example, `\\cC` is CTRL-C."},{"pos":[3841,3852],"content":"<ph id=\"ph1\">`\\u`</ph> <bpt id=\"p1\">*</bpt><ph id=\"ph2\">nnnn</ph><ept id=\"p1\">*</ept>","source":"`\\u` *nnnn*"},{"content":"Matches a UTF-16 code unit whose value is <bpt id=\"p1\">*</bpt><ph id=\"ph1\">nnnn</ph><ept id=\"p1\">*</ept> hexadecimal.","pos":[3853,3914],"source":"Matches a UTF-16 code unit whose value is *nnnn* hexadecimal."},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept>  The Perl 5 character escape that is used to specify Unicode is not supported by .NET.","pos":[3915,4011],"source":"**Note:**  The Perl 5 character escape that is used to specify Unicode is not supported by .NET."},{"content":"The Perl 5 character escape has the form <ph id=\"ph1\">`\\x{`</ph><bpt id=\"p1\">*</bpt><ph id=\"ph2\">####</ph><ept id=\"p1\">*</ept><ph id=\"ph3\">`…}`</ph>, where <bpt id=\"p2\">*</bpt><ph id=\"ph4\">####</ph><ept id=\"p2\">*</ept><ph id=\"ph5\">`…`</ph> is a series of hexadecimal digits.","pos":[4012,4120],"source":" The Perl 5 character escape has the form `\\x{`*####*`…}`, where *####*`…` is a series of hexadecimal digits."},{"content":"Instead, use <ph id=\"ph1\">`\\u`</ph><bpt id=\"p1\">*</bpt><ph id=\"ph2\">nnnn</ph><ept id=\"p1\">*</ept>.","pos":[4121,4145],"source":" Instead, use `\\u`*nnnn*."},{"content":"When followed by a character that is not recognized as an escaped character, matches that character.","pos":[4154,4254]},{"content":"For example, <ph id=\"ph1\">`\\*`</ph> matches an asterisk (*) and is the same as <ph id=\"ph2\">`\\x2A`</ph>.","pos":[4255,4323],"source":" For example, `\\*` matches an asterisk (*) and is the same as `\\x2A`."},{"pos":[4333,4343],"content":"An Example","linkify":"An Example","nodes":[{"content":"An Example","pos":[0,10]}]},{"content":"The following example illustrates the use of character escapes in a regular expression.","pos":[4347,4434]},{"content":"It parses a string that contains the names of the world's largest cities and their populations in 2009.","pos":[4435,4538]},{"content":"Each city name is separated from its population by a tab (<ph id=\"ph1\">`\\t`</ph>) or a vertical bar (&amp;#124; or <ph id=\"ph2\">`\\u007c`</ph>).","pos":[4539,4642],"source":" Each city name is separated from its population by a tab (`\\t`) or a vertical bar (&#124; or `\\u007c`)."},{"content":"Individual cities and their populations are separated from each other by a carriage return and line feed.","pos":[4643,4748]},{"pos":[4755,5068],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>RegularExpressions.Language.Escapes#1<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/regularexpressions.language.escapes/cs/escape1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>RegularExpressions.Language.Escapes#1<ept id=\"p4\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/regularexpressions.language.escapes/vb/escape1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[RegularExpressions.Language.Escapes#1](../../../samples/snippets/csharp/VS_Snippets_CLR/regularexpressions.language.escapes/cs/escape1.cs#1)]\n [!code-vb[RegularExpressions.Language.Escapes#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/regularexpressions.language.escapes/vb/escape1.vb#1)]"},{"pos":[5075,5174],"content":"The regular expression <ph id=\"ph1\">`\\G(.+)[\\t|\\u007c](.+)\\r?\\n`</ph> is interpreted as shown in the following table.","source":"The regular expression `\\G(.+)[\\t|\\u007c](.+)\\r?\\n` is interpreted as shown in the following table."},{"content":"Pattern","pos":[5181,5188]},{"content":"Description","pos":[5189,5200]},{"content":"Begin the match where the last match ended.","pos":[5246,5289]},{"content":"Match any character one or more times.","pos":[5301,5339]},{"content":"This is the first capturing group.","pos":[5340,5374]},{"pos":[5392,5438],"content":"Match a tab (<ph id=\"ph1\">`\\t`</ph>) or a vertical bar (&amp;#124;).","source":"Match a tab (`\\t`) or a vertical bar (&#124;)."},{"content":"Match any character one or more times.","pos":[5450,5488]},{"content":"This is the second capturing group.","pos":[5489,5524]},{"content":"Match zero or one occurrence of a carriage return followed by a new line.","pos":[5537,5610]},{"pos":[5620,5628],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[5632,5761],"content":"<bpt id=\"p1\">[</bpt>Regular Expression Language - Quick Reference<ept id=\"p1\">](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)</ept>","source":"[Regular Expression Language - Quick Reference](../../../docs/standard/base-types/regular-expression-language-quick-reference.md)"}]}