{"content":"---\ntitle: \"Auto-Implemented Properties - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"auto-implemented properties [C#]\"\n  - \"properties [C#], auto-implemented\"\nms.assetid: aa55fa97-ccec-431f-b5e9-5ac789fd32b7\n---\n# Auto-Implemented Properties (C# Programming Guide)\nIn C# 3.0 and later, auto-implemented properties make property-declaration more concise when no additional logic is required in the property accessors. They also enable client code to create objects. When you declare a property as shown in the following example, the compiler creates a private, anonymous backing field that can only be accessed through the property's `get` and `set` accessors.  \n  \n## Example  \n The following example shows a simple class that has some auto-implemented properties:  \n  \n [!code-csharp[csProgGuideLINQ#28](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideLINQ/CS/csRef30LangFeatures_2.cs#28)]  \n  \n In C# 6 and later, you can initialize auto-implemented properties similarly to fields:  \n  \n```csharp  \npublic string FirstName { get; set; } = \"Jane\";  \n```  \n  \n The class that is shown in the previous example is mutable. Client code can change the values in objects after they are created. In complex classes that contain significant behavior (methods) as well as data, it is often necessary to have public properties. However, for small classes or structs that just encapsulate a set of values (data) and have little or no behaviors, you should either make the objects immutable by declaring the set accessor as [private](../../../csharp/language-reference/keywords/private.md) (immutable to consumers) or by declaring only a get accessor (immutable everywhere except the constructor).  For more information, see [How to: Implement a Lightweight Class with Auto-Implemented Properties](../../../csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md).  \n  \n## See also\n\n- [Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)\n- [Modifiers](../../../csharp/language-reference/keywords/modifiers.md)\n","nodes":[{"pos":[4,253],"embed":true,"restype":"x-metadata","content":"title: \"Auto-Implemented Properties - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"auto-implemented properties [C#]\"\n  - \"properties [C#], auto-implemented\"\nms.assetid: aa55fa97-ccec-431f-b5e9-5ac789fd32b7","nodes":[{"content":"Auto-Implemented Properties - C# Programming Guide","nodes":[{"pos":[0,50],"content":"Auto-Implemented Properties - C# Programming Guide","nodes":[{"content":"Auto-Implemented Properties - C# Programming Guide","pos":[0,50]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[260,310],"content":"Auto-Implemented Properties (C# Programming Guide)","linkify":"Auto-Implemented Properties (C# Programming Guide)","nodes":[{"content":"Auto-Implemented Properties (C# Programming Guide)","pos":[0,50]}]},{"content":"In C# 3.0 and later, auto-implemented properties make property-declaration more concise when no additional logic is required in the property accessors.","pos":[311,462]},{"content":"They also enable client code to create objects.","pos":[463,510]},{"content":"When you declare a property as shown in the following example, the compiler creates a private, anonymous backing field that can only be accessed through the property's <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors.","pos":[511,705],"source":" When you declare a property as shown in the following example, the compiler creates a private, anonymous backing field that can only be accessed through the property's `get` and `set` accessors."},{"pos":[714,721],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows a simple class that has some auto-implemented properties:","pos":[725,810]},{"content":"In C# 6 and later, you can initialize auto-implemented properties similarly to fields:","pos":[953,1039]},{"content":"The class that is shown in the previous example is mutable.","pos":[1117,1176]},{"content":"Client code can change the values in objects after they are created.","pos":[1177,1245]},{"content":"In complex classes that contain significant behavior (methods) as well as data, it is often necessary to have public properties.","pos":[1246,1374]},{"content":"However, for small classes or structs that just encapsulate a set of values (data) and have little or no behaviors, you should either make the objects immutable by declaring the set accessor as <bpt id=\"p1\">[</bpt>private<ept id=\"p1\">](../../../csharp/language-reference/keywords/private.md)</ept> (immutable to consumers) or by declaring only a get accessor (immutable everywhere except the constructor).","pos":[1375,1742],"source":" However, for small classes or structs that just encapsulate a set of values (data) and have little or no behaviors, you should either make the objects immutable by declaring the set accessor as [private](../../../csharp/language-reference/keywords/private.md) (immutable to consumers) or by declaring only a get accessor (immutable everywhere except the constructor)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Implement a Lightweight Class with Auto-Implemented Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md)</ept>.","pos":[1744,1971],"source":"  For more information, see [How to: Implement a Lightweight Class with Auto-Implemented Properties](../../../csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md)."},{"pos":[1980,1988],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1992,2073],"content":"<bpt id=\"p1\">[</bpt>Properties<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept>","source":"[Properties](../../../csharp/programming-guide/classes-and-structs/properties.md)"},{"pos":[2076,2145],"content":"<bpt id=\"p1\">[</bpt>Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/modifiers.md)</ept>","source":"[Modifiers](../../../csharp/language-reference/keywords/modifiers.md)"}]}