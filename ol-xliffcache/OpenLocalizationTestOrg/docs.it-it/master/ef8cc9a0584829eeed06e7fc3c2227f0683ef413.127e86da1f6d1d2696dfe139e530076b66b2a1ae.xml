{"content":"---\ntitle: \"bool (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"bool_CSharpKeyword\"\n  - \"bool\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"bool keyword [C#]\"\nms.assetid: 551cfe35-2632-4343-af49-33ad12da08e2\ncaps.latest.revision: 30\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# bool (C# Reference)\nThe `bool` keyword is an alias of <xref:System.Boolean?displayProperty=fullName>. It is used to declare variables to store the Boolean values, [true](../../../csharp/language-reference/keywords/true.md) and [false](../../../csharp/language-reference/keywords/false.md).  \n  \n> [!NOTE]\n>  If you require a Boolean variable that can also have a value of `null`, use `bool?`. For more information, see [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md).  \n  \n## Literals  \n You can assign a Boolean value to a `bool` variable. You can also assign an expression that evaluates to `bool` to a `bool` variable.  \n  \n [!code-cs[csrefKeywordsTypes#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_1.cs)]  \n  \n The default value of a `bool` variable is `false`. The default value of a `bool?` variable is `null`.  \n  \n## Conversions  \n In C++, a value of type `bool` can be converted to a value of type `int`; in other words, `false` is equivalent to zero and `true` is equivalent to nonzero values. In C#, there is no conversion between the `bool` type and other types. For example, the following `if` statement is invalid in C#:  \n  \n [!code-cs[csrefKeywordsTypes#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_2.cs)]  \n  \n To test a variable of the type `int`, you have to explicitly compare it to a value, such as zero, as follows:  \n  \n [!code-cs[csrefKeywordsTypes#3](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_3.cs)]  \n  \n## Example  \n In this example, you enter a character from the keyboard and the program checks if the input character is a letter. If it is a letter, it checks if it is lowercase or uppercase. These checks are performed with the <xref:System.Char.IsLetter%2A>, and <xref:System.Char.IsLower%2A>, both of which return the `bool` type:  \n  \n [!code-cs[csrefKeywordsTypes#4](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_4.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)   \n [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)   \n [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)   \n [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)","nodes":[{"pos":[4,560],"nodes":[{"content":"bool (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,36],"content":"bool (C# Reference) | Microsoft Docs","nodes":[{"content":"bool (C# Reference) | Microsoft Docs","pos":[0,36]}]}],"pos":[6,45],"yaml":true}],"content":"title: \"bool (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"bool_CSharpKeyword\"\n  - \"bool\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"bool keyword [C#]\"\nms.assetid: 551cfe35-2632-4343-af49-33ad12da08e2\ncaps.latest.revision: 30\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[567,586],"content":"bool (C# Reference)","linkify":"bool (C# Reference)","nodes":[{"content":"bool (C# Reference)","pos":[0,19]}]},{"content":"The <ph id=\"ph1\">`bool`</ph> keyword is an alias of <ph id=\"ph2\">&lt;xref:System.Boolean?displayProperty=fullName&gt;</ph>.","pos":[587,668],"source":"The `bool` keyword is an alias of <xref:System.Boolean?displayProperty=fullName>."},{"content":"It is used to declare variables to store the Boolean values, <bpt id=\"p1\">[</bpt>true<ept id=\"p1\">](../../../csharp/language-reference/keywords/true.md)</ept> and <bpt id=\"p2\">[</bpt>false<ept id=\"p2\">](../../../csharp/language-reference/keywords/false.md)</ept>.","pos":[669,856],"source":" It is used to declare variables to store the Boolean values, [true](../../../csharp/language-reference/keywords/true.md) and [false](../../../csharp/language-reference/keywords/false.md)."},{"pos":[864,1062],"content":"[!NOTE]\n If you require a Boolean variable that can also have a value of `null`, use `bool?`. For more information, see [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md).","leadings":["","> "],"nodes":[{"content":"If you require a Boolean variable that can also have a value of `null`, use `bool?`. For more information, see [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md).","pos":[9,196],"nodes":[{"content":"If you require a Boolean variable that can also have a value of <ph id=\"ph1\">`null`</ph>, use <ph id=\"ph2\">`bool?`</ph>.","pos":[0,84],"source":"If you require a Boolean variable that can also have a value of `null`, use `bool?`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept>.","pos":[85,187],"source":" For more information, see [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md)."}]}]},{"pos":[1071,1079],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can assign a Boolean value to a <ph id=\"ph1\">`bool`</ph> variable.","pos":[1083,1135],"source":"You can assign a Boolean value to a `bool` variable."},{"content":"You can also assign an expression that evaluates to <ph id=\"ph1\">`bool`</ph> to a <ph id=\"ph2\">`bool`</ph> variable.","pos":[1136,1216],"source":" You can also assign an expression that evaluates to `bool` to a `bool` variable."},{"pos":[1223,1329],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsTypes#1<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsTypes#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_1.cs)]"},{"content":"The default value of a <ph id=\"ph1\">`bool`</ph> variable is <ph id=\"ph2\">`false`</ph>.","pos":[1336,1386],"source":"The default value of a `bool` variable is `false`."},{"content":"The default value of a <ph id=\"ph1\">`bool?`</ph> variable is <ph id=\"ph2\">`null`</ph>.","pos":[1387,1437],"source":" The default value of a `bool?` variable is `null`."},{"pos":[1446,1457],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"In C++, a value of type <ph id=\"ph1\">`bool`</ph> can be converted to a value of type <ph id=\"ph2\">`int`</ph>; in other words, <ph id=\"ph3\">`false`</ph> is equivalent to zero and <ph id=\"ph4\">`true`</ph> is equivalent to nonzero values.","pos":[1461,1624],"source":"In C++, a value of type `bool` can be converted to a value of type `int`; in other words, `false` is equivalent to zero and `true` is equivalent to nonzero values."},{"content":"In C#, there is no conversion between the <ph id=\"ph1\">`bool`</ph> type and other types.","pos":[1625,1695],"source":" In C#, there is no conversion between the `bool` type and other types."},{"content":"For example, the following <ph id=\"ph1\">`if`</ph> statement is invalid in C#:","pos":[1696,1755],"source":" For example, the following `if` statement is invalid in C#:"},{"pos":[1762,1868],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsTypes#2<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsTypes#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_2.cs)]"},{"pos":[1875,1984],"content":"To test a variable of the type <ph id=\"ph1\">`int`</ph>, you have to explicitly compare it to a value, such as zero, as follows:","source":"To test a variable of the type `int`, you have to explicitly compare it to a value, such as zero, as follows:"},{"pos":[1991,2097],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsTypes#3<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsTypes#3](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_3.cs)]"},{"pos":[2106,2113],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, you enter a character from the keyboard and the program checks if the input character is a letter.","pos":[2117,2232]},{"content":"If it is a letter, it checks if it is lowercase or uppercase.","pos":[2233,2294]},{"content":"These checks are performed with the <ph id=\"ph1\">&lt;xref:System.Char.IsLetter%2A&gt;</ph>, and <ph id=\"ph2\">&lt;xref:System.Char.IsLower%2A&gt;</ph>, both of which return the <ph id=\"ph3\">`bool`</ph> type:","pos":[2295,2435],"source":" These checks are performed with the <xref:System.Char.IsLetter%2A>, and <xref:System.Char.IsLower%2A>, both of which return the `bool` type:"},{"pos":[2442,2548],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsTypes#4<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsTypes#4](../../../csharp/language-reference/keywords/codesnippet/CSharp/bool_4.cs)]"},{"pos":[2557,2582],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2696,2704],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2708,2768],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2772,2839],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2843,2911],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[2915,3007],"source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3011,3103],"source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id=\"ph1\"> </ph>","pos":[3107,3227],"source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) "},{"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","pos":[3231,3350],"source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}