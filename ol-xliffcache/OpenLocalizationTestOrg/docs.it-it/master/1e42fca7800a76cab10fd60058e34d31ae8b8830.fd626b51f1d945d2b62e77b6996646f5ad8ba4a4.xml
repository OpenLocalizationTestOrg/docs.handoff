{"content":"---\ntitle: \"Conversions Between Strings and Other Types (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"data type conversion [Visual Basic], string\"\n  - \"conversions [Visual Basic], type\"\n  - \"string conversion [Visual Basic]\"\n  - \"conversions [Visual Basic], data type\"\n  - \"type conversion [Visual Basic], string\"\n  - \"regional options\"\nms.assetid: c3a99596-f09a-44a5-81dd-1b89a094f1df\n---\n# Conversions Between Strings and Other Types (Visual Basic)\nYou can convert a numeric, `Boolean`, or date/time value to a `String`. You can also convert in the reverse direction — from a string value to numeric, `Boolean`, or `Date` — provided the contents of the string can be interpreted as a valid value of the destination data type. If they cannot, a run-time error occurs.  \n  \n The conversions for all these assignments, in either direction, are narrowing conversions. You should use the type conversion keywords (`CBool`, `CByte`, `CDate`, `CDbl`, `CDec`, `CInt`, `CLng`, `CSByte`, `CShort`, `CSng`, `CStr`, `CUInt`, `CULng`, `CUShort`, and `CType`). The <xref:Microsoft.VisualBasic.Strings.Format%2A> and <xref:Microsoft.VisualBasic.Conversion.Val%2A> functions give you additional control over conversions between strings and numbers.  \n  \n If you have defined a class or structure, you can define type conversion operators between `String` and the type of your class or structure. For more information, see [How to: Define a Conversion Operator](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md).  \n  \n## Conversion of Numbers to Strings  \n You can use the `Format` function to convert a number to a formatted string, which can include not only the appropriate digits but also formatting symbols such as a currency sign (such as `$`), thousands separators or *digit grouping symbols* (such as `,`), and a decimal separator (such as `.`). `Format` automatically uses the appropriate symbols according to the **Regional Options** settings specified in the Windows **Control Panel**.  \n  \n Note that the concatenation (`&`) operator can convert a number to a string implicitly, as the following example shows.  \n  \n```  \n' The following statement converts count to a String value.  \nStr = \"The total count is \" & count  \n```  \n  \n## Conversion of Strings to Numbers  \n You can use the `Val` function to explicitly convert the digits in a string to a number. `Val` reads the string until it encounters a character other than a digit, space, tab, line feed, or period. The sequences \"&O\" and \"&H\" alter the base of the number system and terminate the scanning. Until it stops reading, `Val` converts all appropriate characters to a numeric value. For example, the following statement returns the value `141.825`.  \n  \n `Val(\"   14   1.825 miles\")`  \n  \n When Visual Basic converts a string to a numeric value, it uses the **Regional Options** settings specified in the Windows **Control Panel** to interpret the thousands separator, decimal separator, and currency symbol. This means that a conversion might succeed under one setting but not another. For example, `\"$14.20\"` is acceptable in the English (United States) locale but not in any French locale.  \n  \n## See also\n\n- [Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)\n- [Widening and Narrowing Conversions](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)\n- [Implicit and Explicit Conversions](../../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)\n- [How to: Convert an Object to Another Type in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type.md)\n- [Array Conversions](../../../../visual-basic/programming-guide/language-features/data-types/array-conversions.md)\n- [Data Types](../../../../visual-basic/language-reference/data-types/index.md)\n- [Type Conversion Functions](../../../../visual-basic/language-reference/functions/type-conversion-functions.md)\n- [Introduction to International Applications Based on the .NET Framework](/visualstudio/ide/introduction-to-international-applications-based-on-the-dotnet-framework)\n","nodes":[{"pos":[4,402],"embed":true,"restype":"x-metadata","content":"title: \"Conversions Between Strings and Other Types (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"data type conversion [Visual Basic], string\"\n  - \"conversions [Visual Basic], type\"\n  - \"string conversion [Visual Basic]\"\n  - \"conversions [Visual Basic], data type\"\n  - \"type conversion [Visual Basic], string\"\n  - \"regional options\"\nms.assetid: c3a99596-f09a-44a5-81dd-1b89a094f1df","nodes":[{"content":"Conversions Between Strings and Other Types (Visual Basic)","nodes":[{"pos":[0,58],"content":"Conversions Between Strings and Other Types (Visual Basic)","nodes":[{"content":"Conversions Between Strings and Other Types (Visual Basic)","pos":[0,58]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[409,467],"content":"Conversions Between Strings and Other Types (Visual Basic)","linkify":"Conversions Between Strings and Other Types (Visual Basic)","nodes":[{"content":"Conversions Between Strings and Other Types (Visual Basic)","pos":[0,58]}]},{"content":"You can convert a numeric, <ph id=\"ph1\">`Boolean`</ph>, or date/time value to a <ph id=\"ph2\">`String`</ph>.","pos":[468,539],"source":"You can convert a numeric, `Boolean`, or date/time value to a `String`."},{"content":"You can also convert in the reverse direction — from a string value to numeric, <ph id=\"ph1\">`Boolean`</ph>, or <ph id=\"ph2\">`Date`</ph> — provided the contents of the string can be interpreted as a valid value of the destination data type.","pos":[540,744],"source":" You can also convert in the reverse direction — from a string value to numeric, `Boolean`, or `Date` — provided the contents of the string can be interpreted as a valid value of the destination data type."},{"content":"If they cannot, a run-time error occurs.","pos":[745,785]},{"content":"The conversions for all these assignments, in either direction, are narrowing conversions.","pos":[792,882]},{"content":"You should use the type conversion keywords (<ph id=\"ph1\">`CBool`</ph>, <ph id=\"ph2\">`CByte`</ph>, <ph id=\"ph3\">`CDate`</ph>, <ph id=\"ph4\">`CDbl`</ph>, <ph id=\"ph5\">`CDec`</ph>, <ph id=\"ph6\">`CInt`</ph>, <ph id=\"ph7\">`CLng`</ph>, <ph id=\"ph8\">`CSByte`</ph>, <ph id=\"ph9\">`CShort`</ph>, <ph id=\"ph10\">`CSng`</ph>, <ph id=\"ph11\">`CStr`</ph>, <ph id=\"ph12\">`CUInt`</ph>, <ph id=\"ph13\">`CULng`</ph>, <ph id=\"ph14\">`CUShort`</ph>, and <ph id=\"ph15\">`CType`</ph>).","pos":[883,1065],"source":" You should use the type conversion keywords (`CBool`, `CByte`, `CDate`, `CDbl`, `CDec`, `CInt`, `CLng`, `CSByte`, `CShort`, `CSng`, `CStr`, `CUInt`, `CULng`, `CUShort`, and `CType`)."},{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Strings.Format%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Conversion.Val%2A&gt;</ph> functions give you additional control over conversions between strings and numbers.","pos":[1066,1251],"source":" The <xref:Microsoft.VisualBasic.Strings.Format%2A> and <xref:Microsoft.VisualBasic.Conversion.Val%2A> functions give you additional control over conversions between strings and numbers."},{"content":"If you have defined a class or structure, you can define type conversion operators between <ph id=\"ph1\">`String`</ph> and the type of your class or structure.","pos":[1258,1398],"source":"If you have defined a class or structure, you can define type conversion operators between `String` and the type of your class or structure."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Define a Conversion Operator<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>.","pos":[1399,1576],"source":" For more information, see [How to: Define a Conversion Operator](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)."},{"pos":[1585,1617],"content":"Conversion of Numbers to Strings","linkify":"Conversion of Numbers to Strings","nodes":[{"content":"Conversion of Numbers to Strings","pos":[0,32]}]},{"content":"You can use the <ph id=\"ph1\">`Format`</ph> function to convert a number to a formatted string, which can include not only the appropriate digits but also formatting symbols such as a currency sign (such as <ph id=\"ph2\">`$`</ph>), thousands separators or <bpt id=\"p1\">*</bpt>digit grouping symbols<ept id=\"p1\">*</ept> (such as <ph id=\"ph3\">`,`</ph>), and a decimal separator (such as <ph id=\"ph4\">`.`</ph>).","pos":[1621,1917],"source":"You can use the `Format` function to convert a number to a formatted string, which can include not only the appropriate digits but also formatting symbols such as a currency sign (such as `$`), thousands separators or *digit grouping symbols* (such as `,`), and a decimal separator (such as `.`)."},{"content":"<ph id=\"ph1\">`Format`</ph> automatically uses the appropriate symbols according to the <bpt id=\"p1\">**</bpt>Regional Options<ept id=\"p1\">**</ept> settings specified in the Windows <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept>.","pos":[1918,2060],"source":"`Format` automatically uses the appropriate symbols according to the **Regional Options** settings specified in the Windows **Control Panel**."},{"pos":[2067,2186],"content":"Note that the concatenation (<ph id=\"ph1\">`&amp;`</ph>) operator can convert a number to a string implicitly, as the following example shows.","source":"Note that the concatenation (`&`) operator can convert a number to a string implicitly, as the following example shows."},{"pos":[2310,2342],"content":"Conversion of Strings to Numbers","linkify":"Conversion of Strings to Numbers","nodes":[{"content":"Conversion of Strings to Numbers","pos":[0,32]}]},{"content":"You can use the <ph id=\"ph1\">`Val`</ph> function to explicitly convert the digits in a string to a number.","pos":[2346,2434],"source":"You can use the `Val` function to explicitly convert the digits in a string to a number."},{"content":"<ph id=\"ph1\">`Val`</ph> reads the string until it encounters a character other than a digit, space, tab, line feed, or period.","pos":[2435,2543],"source":"`Val` reads the string until it encounters a character other than a digit, space, tab, line feed, or period."},{"content":"The sequences \"&amp;O\" and \"&amp;H\" alter the base of the number system and terminate the scanning.","pos":[2544,2635],"source":" The sequences \"&O\" and \"&H\" alter the base of the number system and terminate the scanning."},{"content":"Until it stops reading, <ph id=\"ph1\">`Val`</ph> converts all appropriate characters to a numeric value.","pos":[2636,2721],"source":" Until it stops reading, `Val` converts all appropriate characters to a numeric value."},{"content":"For example, the following statement returns the value <ph id=\"ph1\">`141.825`</ph>.","pos":[2722,2787],"source":" For example, the following statement returns the value `141.825`."},{"content":"When Visual Basic converts a string to a numeric value, it uses the <bpt id=\"p1\">**</bpt>Regional Options<ept id=\"p1\">**</ept> settings specified in the Windows <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept> to interpret the thousands separator, decimal separator, and currency symbol.","pos":[2829,3047],"source":"When Visual Basic converts a string to a numeric value, it uses the **Regional Options** settings specified in the Windows **Control Panel** to interpret the thousands separator, decimal separator, and currency symbol."},{"content":"This means that a conversion might succeed under one setting but not another.","pos":[3048,3125]},{"content":"For example, <ph id=\"ph1\">`\"$14.20\"`</ph> is acceptable in the English (United States) locale but not in any French locale.","pos":[3126,3231],"source":" For example, `\"$14.20\"` is acceptable in the English (United States) locale but not in any French locale."},{"pos":[3240,3248],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3252,3379],"content":"<bpt id=\"p1\">[</bpt>Type Conversions in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept>","source":"[Type Conversions in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)"},{"pos":[3382,3529],"content":"<bpt id=\"p1\">[</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>","source":"[Widening and Narrowing Conversions](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)"},{"pos":[3532,3677],"content":"<bpt id=\"p1\">[</bpt>Implicit and Explicit Conversions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept>","source":"[Implicit and Explicit Conversions](../../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)"},{"pos":[3680,3856],"content":"<bpt id=\"p1\">[</bpt>How to: Convert an Object to Another Type in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type.md)</ept>","source":"[How to: Convert an Object to Another Type in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type.md)"},{"pos":[3859,3972],"content":"<bpt id=\"p1\">[</bpt>Array Conversions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/array-conversions.md)</ept>","source":"[Array Conversions](../../../../visual-basic/programming-guide/language-features/data-types/array-conversions.md)"},{"pos":[3975,4052],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[4055,4166],"content":"<bpt id=\"p1\">[</bpt>Type Conversion Functions<ept id=\"p1\">](../../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept>","source":"[Type Conversion Functions](../../../../visual-basic/language-reference/functions/type-conversion-functions.md)"},{"pos":[4169,4333],"content":"<bpt id=\"p1\">[</bpt>Introduction to International Applications Based on the .NET Framework<ept id=\"p1\">](/visualstudio/ide/introduction-to-international-applications-based-on-the-dotnet-framework)</ept>","source":"[Introduction to International Applications Based on the .NET Framework](/visualstudio/ide/introduction-to-international-applications-based-on-the-dotnet-framework)"}]}