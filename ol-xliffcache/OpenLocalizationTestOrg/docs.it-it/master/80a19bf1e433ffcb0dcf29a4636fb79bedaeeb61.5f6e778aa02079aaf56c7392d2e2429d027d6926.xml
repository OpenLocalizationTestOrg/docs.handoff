{"content":"---\ntitle: \"Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting\"\nms.date: \"03/30/2017\"\nms.assetid: 05d2321c-8acb-49d7-a6cd-8ef2220c6775\n---\n# Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting\nThis topic describes the format of trace data, how to view it, and approaches that use the Service Trace Viewer to troubleshoot your application.  \n  \n## Using the Service Trace Viewer Tool  \n The Windows Communication Foundation (WCF) Service Trace Viewer tool helps you correlate diagnostic traces produced by WCF listeners to locate the root cause of an error. The tool gives you a way to easily view, group, and filter traces so that you can diagnose, repair and verify issues with WCF services. For more information about using this tool, see [Service Trace Viewer Tool (SvcTraceViewer.exe)](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md).  \n  \n This topic contains screenshots of traces generated by running the [Tracing and Message Logging](../../../../../docs/framework/wcf/samples/tracing-and-message-logging.md) sample, when viewed using the [Service Trace Viewer Tool (SvcTraceViewer.exe)](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md). This topic demonstrates how to understand trace content, activities and their correlation, and how to analyze large numbers of traces when troubleshooting.  \n  \n## Viewing Trace Content  \n A trace event contains the following most significant information:  \n  \n-   Activity name when set.  \n  \n-   Emission time.  \n  \n-   Trace level.  \n  \n-   Trace source name.  \n  \n-   Process name.  \n  \n-   Thread id.  \n  \n-   A unique trace identifier, which is a URL that points to a destination in Microsoft Docs, from which you can obtain more information related to the trace.  \n  \n All of these can be seen in the upper right panel in the Service Trace Viewer, or in the **Basic Information** section in the formatted view of the lower-right panel when selecting a trace.  \n  \n> [!NOTE]\n>  If the client and the service are on the same machine, the traces for both applications will be present. These can be filtered using the **Process Name** column.  \n  \n In addition, the formatted view also provides a description for the trace and additional detailed information when available. The latter can include exception type and message, call stacks, message action, from/to fields, and other exception information.  \n  \n In the XML view, useful xml tags include the following:  \n  \n-   `<SubType>` (trace level).  \n  \n-   `<TimeCreated>`.  \n  \n-   `<Source>` (trace source name).  \n  \n-   `<Correlation>` (activity id set when emitting the trace).  \n  \n-   `<Execution>` (process and thread id).  \n  \n-   `<Computer>`.  \n  \n-   `<ExtendedData>`, including `<Action>`, `<MessageID>` and the `<ActivityId>` set in the message header when sending a message.  \n  \n If you examine the \"Sent a message over a channel\" trace, you may see the following content.  \n  \n```xml  \n<E2ETraceEvent xmlns=\"http://schemas.microsoft.com/2004/06/E2ETraceEvent\">  \n   <System xmlns=\"http://schemas.microsoft.com/2004/06/windows/eventlog/system\">  \n      <EventID>262163</EventID>  \n      <Type>3</Type>  \n      <SubType Name=\"Information\">0</SubType>  \n      <Level>8</Level>  \n      <TimeCreated SystemTime=\"2006-08-04T18:45:30.8491051Z\" />  \n      <Source Name=\"System.ServiceModel\" />  \n       <Correlation ActivityID=\"{27c6331d-8998-43aa-a382-03239013a6bd}\"/>  \n       <Execution ProcessName=\"client\" ProcessID=\"1808\" ThreadID=\"1\" />  \n       <Channel />  \n       <Computer>TEST1</Computer>  \n   </System>  \n   <ApplicationData>  \n       <TraceData>  \n          <DataItem>  \n             <TraceRecord xmlns=\"http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord\" Severity=\"Information\">  \n                 <TraceIdentifier>http://msdn.microsoft.com/library/System.ServiceModel.Channels.MessageSent.aspx</TraceIdentifier>  \n                 <Description>Sent a message over a channel.</Description>  \n                 <AppDomain>client.exe</AppDomain>  \n                 <Source>System.ServiceModel.Channels.ClientFramingDuplexSessionChannel/35191196</Source>  \n                <ExtendedData xmlns=\"http://schemas.microsoft.com/2006/08/ServiceModel/MessageTransmitTraceRecord\">  \n  \n                  <MessageProperties>  \n                     <AllowOutputBatching>False</AllowOutputBatching>  \n                  </MessageProperties>  \n                  <MessageHeaders>  \n                     <Action d4p1:mustUnderstand=\"1\" xmlns:d4p1=\"http://www.w3.org/2003/05/soap-envelope\" xmlns=\"http://www.w3.org/2005/08/addressing\">http://Microsoft.ServiceModel.Samples/ICalculator/Multiply</Action>  \n                     <MessageID xmlns=\"http://www.w3.org/2005/08/addressing\">urn:uuid:7c6670d8-4c9c-496e-b6a0-2ceb6db35338</MessageID>  \n                     <ActivityId CorrelationId=\"b02e2189-0816-4387-980c-dd8e306440f5\" xmlns=\"http://schemas.microsoft.com/2004/09/ServiceModel/Diagnostics\">27c6331d-8998-43aa-a382-03239013a6bd</ActivityId>  \n                     <ReplyTo xmlns=\"http://www.w3.org/2005/08/addressing\">  \n                        <Address>http://www.w3.org/2005/08/addressing/anonymous</Address>  \n                    </ReplyTo>  \n                    <To d4p1:mustUnderstand=\"1\" xmlns:d4p1=\"http://www.w3.org/2003/05/soap-envelope\" xmlns=\"http://www.w3.org/2005/08/addressing\">net.tcp://localhost/servicemodelsamples/service</To>  \n                  </MessageHeaders>  \n                  <RemoteAddress>net.tcp://localhost/servicemodelsamples/service</RemoteAddress>  \n                </ExtendedData>  \n            </TraceRecord>  \n          </DataItem>  \n       </TraceData>  \n   </ApplicationData>  \n</E2ETraceEvent>  \n```  \n  \n## ServiceModel E2E Tracing  \n When the `System.ServiceModel` trace source is set with a `switchValue` other than Off, and `ActivityTracing`, WCF creates activities and transfers for WCF processing.  \n  \n An activity is a logical unit of processing that groups all traces related to that processing unit. For example, you can define one activity for each request. Transfers create a causal relationship between activities within endpoints. Propagating the activity ID enables you to relate activities across endpoints. This can be done by setting `propagateActivity`=`true` in configuration at every endpoint. Activities, transfers, and propagation allow you to perform error correlation. In this way, you can find the root cause of an error more quickly.  \n  \n On the client, one WCF activity is created for each object model call (for example, Open ChannelFactory, Add, Divide, and so on.) Each of the operation calls is processed in a \"Process Action\" activity.  \n  \n In the following screenshot, extracted from the [Tracing and Message Logging](../../../../../docs/framework/wcf/samples/tracing-and-message-logging.md) sample the left panel displays the list of activities created in the client process, sorted by creation time. The following is a chronological list of activities:  \n  \n-   Constructed the channel factory (ClientBase).  \n  \n-   Opened the channel factory.  \n  \n-   Processed the Add action.  \n  \n-   Set up the Secure Session (this OCCURRED on the first request) and processed three security infrastructure response messages: RST, RSTR, SCT (Process message 1, 2, 3).  \n  \n-   Processed the Subtract, Multiply, and Divide requests.  \n  \n-   Closed the channel factory, and doing so closed the Secure session and processed the security message response Cancel.  \n  \n We see the security infrastructure messages because of the wsHttpBinding.  \n  \n> [!NOTE]\n>  In WCF, we show response messages being processed initially in a separate activity (Process message) before we correlate them to the corresponding Process Action activity that includes the request message, through a transfer. This happens for infrastructure messages and asynchronous requests and is due to the fact that we must inspect the message, read the activityId header, and identify the existing Process Action activity with that id to correlate to it. For synchronous requests, we are blocking for the response and hence know which Process action the response relates to.  \n  \nThe following image shows WCF client activities listed by creation time (left panel) and their nested activities and traces (upper right panel):\n\n ![Screenshot showing WCF client activities listed by creation time.](./media/using-service-trace-viewer-for-viewing-correlated-traces-and-troubleshooting/wcf-client-activities-creation-time.gif)  \n  \n When we select an activity in the left panel, we can see nested activities and traces on the upper right panel. Therefore, this is a reduced hierarchical view of the list of activities on the left, based on the selected parent activity. Because the selected Process action Add is the first request made, this activity contains the Set Up Secure Session activity (transfer to, transfer back from), and traces for the actual processing of the Add action.  \n  \n If we double click the Process action Add activity in the left panel, we can see a graphical representation of the client WCF activities related to Add. The first activity on the left is the root activity (0000), which is the default activity. WCF transfers out of the ambient activity. If this is not defined, WCF transfers out of 0000. Here, the second activity, Process Action Add, transfers out of 0. Then we see Setup Secure Session.  \n\n The following image shows a graph view of WCF client activities, specifically Ambient Activity (here 0), Process action, and Set Up Secure Session:   \n\n ![Graph in the Trace Viewer showing Ambient Activity and Process action.](./media/using-service-trace-viewer-for-viewing-correlated-traces-and-troubleshooting/wcf-activities-graph-ambient-process.gif)   \n  \n On the upper right panel, we can see all traces related to the Process Action Add activity. Specifically, we have sent the request message (\"Sent a message over a channel\") and received the response (\"Received a message over a channel\") in the same activity. This is shown in the following graph. For clarity, the Set up Secure Session activity is collapsed in the graph.  \n  \n The following image shows a list of traces for the Process Action activity. We send the request and receive the response in the same activity.\n \n ![Screenshot of Trace Viewer showing a list of traces for the Process Action activity](./media/using-service-trace-viewer-for-viewing-correlated-traces-and-troubleshooting/process-action-traces.gif)  \n  \n Here, we load client traces only for clarity, but service traces (request message received and response message sent) appear in the same activity if they are also loaded in the tool and `propagateActivity` was set to `true.` This is shown in a later illustration.  \n  \n On the service, the activity model maps to the WCF concepts as follows:  \n  \n1.  We construct and open a ServiceHost (this may create several host-related activities, for instance, in the case of security).  \n  \n2.  We create a Listen At activity for each listener in the ServiceHost (with transfers in and out of Open ServiceHost).  \n  \n3.  When the listener detects a communication request initiated by the client, it transfers to a \"Receive Bytes\" activity, in which all bytes sent from the client are processed. In this activity, we can see any connection errors that have happened during the client-service interaction.  \n  \n4.  For each set of bytes that is received that corresponds to a message, we process these bytes in a \"Process Message\" activity, where we create the WCF Message object. In this activity, we see errors related to a bad envelope or a malformed message.  \n  \n5.  Once the message is formed, we transfer to a Process Action activity. If `propagateActivity` is set to `true` on both the client and service, this activity has the same id as the one defined in the client, and described previously. From this stage we start to benefit from direct correlation across endpoints, because all traces emitted in WCF that are related to the request are in that same activity, including the response message processing.  \n  \n6.  For out-of-process action, we create an \"Execute user code\" activity to isolate traces emitted in user code from the ones emitted in WCF. In the preceding example, the \"Service sends Add response\" trace is emitted in the \"Execute User code\" activity not in the activity propagated by the client, if applicable.  \n  \n In the illustration that follows, the first activity on the left is the root activity (0000), which is the default activity. The next three activities are to open the ServiceHost. The activity in column 5 is the listener, and the remaining activities (6 to 8) describe the WCF processing of a message, from bytes processing to user code activation.  \n\n The following image shows a graph view of WCF service activities:   \n\n ![Screenshot of Trace Viewer showing a list of WCF service activities](./media/using-service-trace-viewer-for-viewing-correlated-traces-and-troubleshooting/wcf-service-activities.gif)  \n\n The following screenshot shows the activities for both the client and service, and highlights the Process Action Add activity across processes (orange). Arrows relate the request and response messages sent and received by the client and service. The traces of Process Action are separated across processes in the graph, but shown as part of the same activity in the upper-right panel. In this panel, we can see client traces for sent messages followed by service traces for received and processed messages.  \n  \n The following images shows a graph view of both WCF client and service activities  \n \n ![Graph from Trace Viewer that shows both WCF client and service activities.](./media/using-service-trace-viewer-for-viewing-correlated-traces-and-troubleshooting/wcf-client-service-activities.gif)   \n  \n In the following error scenario, error and warning traces at the service and client are related. An exception is first thrown in user code on the service (right-most green activity that includes a warning trace for the exception \"The service cannot process this request in user code.\"). When the response is sent to the client, a warning trace is again emitted to denote the fault message (left pink activity). The client then closes its WCF client (yellow activity on the lower-left side), which aborts the connection to the service. The service throws an error (longest pink activity on the right).  \n  \n ![Using the Trace Viewer](../../../../../docs/framework/wcf/diagnostics/tracing/media/wcfc-e2etrace9s.gif \"wcfc_e2etrace9s\")  \nError correlation across the service and client  \n  \n The sample used to generate these traces is a series of synchronous requests using the wsHttpBinding. There are deviations from this graph for scenarios without security, or with asynchronous requests, where the Process Action activity encompasses the begin and end operations that constitute the asynchronous call, and shows transfers to a callback activity. For more information about additional scenarios, see [End-To-End Tracing Scenarios](../../../../../docs/framework/wcf/diagnostics/tracing/end-to-end-tracing-scenarios.md).  \n  \n## Troubleshooting Using the Service Trace Viewer  \n When you load trace files in the Service Trace Viewer Tool, you can select any red or yellow activity on the left panel to track down the cause of a problem in your application. The 000 activity typically has unhandled exceptions that bubble up to the user.  \n  \n  The following image shows how to select a red or yellow activity to locate the root of a problem.   \n ![Screenshot of red or yellow activities for locating the root of a problem.](./media/using-service-trace-viewer-for-viewing-correlated-traces-and-troubleshooting/service-trace-viewer.gif)  \n\n On the upper right panel, you can examine traces for the activity you selected on the left. You can then examine red or yellow traces in that panel and see how they are correlated. In the preceding graph, we see warning traces both for the client and service in the same Process Action activity.  \n  \n If these traces do not provide you with the root cause of the error, you can utilize the graph by double-clicking the selected activity on the left panel (here Process action). The graph with related activities is then displayed. You can then expand related activities (by clicking the \"+\" signs) to find the first emitted trace in red or yellow in a related activity. Keep expanding the activities that happened just before the red or yellow trace of interest, following transfers to related activities or message flows across endpoints, until you track the root cause of the problem.  \n  \n ![Using the Trace Viewer](../../../../../docs/framework/wcf/diagnostics/tracing/media/wcfc-e2etrace9s.gif \"wcfc_e2etrace9s\")  \nExpanding activities to track the root cause of a problem  \n  \n If ServiceModel `ActivityTracing` is off but ServiceModel tracing is on, you can see ServiceModel traces emitted in the 0000 activity. However, this requires more effort to understand the correlation of these traces.  \n  \n If Message Logging is enabled, you can use the Message Tab to see which message is impacted by the error. By double-clicking a message in red or yellow, you can see the graph view of the related activities. These activities are the ones most closely related to the request where an error happened.  \n  \n ![Screenshot of Trace Viewer with message logging enabled.](./media/using-service-trace-viewer-for-viewing-correlated-traces-and-troubleshooting/message-logging-enabled.gif)  \n\nTo start troubleshooting, you can also pick a red or yellow message trace and double click it to track the root cause.  \n  \n## See also\n\n- [End-To-End Tracing Scenarios](../../../../../docs/framework/wcf/diagnostics/tracing/end-to-end-tracing-scenarios.md)\n- [Service Trace Viewer Tool (SvcTraceViewer.exe)](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)\n- [Tracing](../../../../../docs/framework/wcf/diagnostics/tracing/index.md)\n","nodes":[{"pos":[4,160],"embed":true,"restype":"x-metadata","content":"title: \"Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting\"\nms.date: \"03/30/2017\"\nms.assetid: 05d2321c-8acb-49d7-a6cd-8ef2220c6775","nodes":[{"content":"Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting","nodes":[{"pos":[0,76],"content":"Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting","nodes":[{"content":"Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting","pos":[0,76]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[167,243],"content":"Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting","linkify":"Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting","nodes":[{"content":"Using Service Trace Viewer for Viewing Correlated Traces and Troubleshooting","pos":[0,76]}]},{"content":"This topic describes the format of trace data, how to view it, and approaches that use the Service Trace Viewer to troubleshoot your application.","pos":[244,389]},{"pos":[398,433],"content":"Using the Service Trace Viewer Tool","linkify":"Using the Service Trace Viewer Tool","nodes":[{"content":"Using the Service Trace Viewer Tool","pos":[0,35]}]},{"content":"The Windows Communication Foundation (WCF) Service Trace Viewer tool helps you correlate diagnostic traces produced by WCF listeners to locate the root cause of an error.","pos":[437,607]},{"content":"The tool gives you a way to easily view, group, and filter traces so that you can diagnose, repair and verify issues with WCF services.","pos":[608,743]},{"content":"For more information about using this tool, see <bpt id=\"p1\">[</bpt>Service Trace Viewer Tool (SvcTraceViewer.exe)<ept id=\"p1\">](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)</ept>.","pos":[744,924],"source":" For more information about using this tool, see [Service Trace Viewer Tool (SvcTraceViewer.exe)](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)."},{"content":"This topic contains screenshots of traces generated by running the <bpt id=\"p1\">[</bpt>Tracing and Message Logging<ept id=\"p1\">](../../../../../docs/framework/wcf/samples/tracing-and-message-logging.md)</ept> sample, when viewed using the <bpt id=\"p2\">[</bpt>Service Trace Viewer Tool (SvcTraceViewer.exe)<ept id=\"p2\">](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)</ept>.","pos":[931,1264],"source":"This topic contains screenshots of traces generated by running the [Tracing and Message Logging](../../../../../docs/framework/wcf/samples/tracing-and-message-logging.md) sample, when viewed using the [Service Trace Viewer Tool (SvcTraceViewer.exe)](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)."},{"content":"This topic demonstrates how to understand trace content, activities and their correlation, and how to analyze large numbers of traces when troubleshooting.","pos":[1265,1420]},{"pos":[1429,1450],"content":"Viewing Trace Content","linkify":"Viewing Trace Content","nodes":[{"content":"Viewing Trace Content","pos":[0,21]}]},{"content":"A trace event contains the following most significant information:","pos":[1454,1520]},{"content":"Activity name when set.","pos":[1530,1553]},{"content":"Emission time.","pos":[1563,1577]},{"content":"Trace level.","pos":[1587,1599]},{"content":"Trace source name.","pos":[1609,1627]},{"content":"Process name.","pos":[1637,1650]},{"content":"Thread id.","pos":[1660,1670]},{"content":"A unique trace identifier, which is a URL that points to a destination in Microsoft Docs, from which you can obtain more information related to the trace.","pos":[1680,1834]},{"pos":[1841,2030],"content":"All of these can be seen in the upper right panel in the Service Trace Viewer, or in the <bpt id=\"p1\">**</bpt>Basic Information<ept id=\"p1\">**</ept> section in the formatted view of the lower-right panel when selecting a trace.","source":"All of these can be seen in the upper right panel in the Service Trace Viewer, or in the **Basic Information** section in the formatted view of the lower-right panel when selecting a trace."},{"pos":[2038,2210],"content":"[!NOTE]\n If the client and the service are on the same machine, the traces for both applications will be present. These can be filtered using the **Process Name** column.","leadings":["","> "],"nodes":[{"content":"If the client and the service are on the same machine, the traces for both applications will be present. These can be filtered using the **Process Name** column.","pos":[9,170],"nodes":[{"content":"If the client and the service are on the same machine, the traces for both applications will be present.","pos":[0,104]},{"content":"These can be filtered using the <bpt id=\"p1\">**</bpt>Process Name<ept id=\"p1\">**</ept> column.","pos":[105,161],"source":" These can be filtered using the **Process Name** column."}]}]},{"content":"In addition, the formatted view also provides a description for the trace and additional detailed information when available.","pos":[2217,2342]},{"content":"The latter can include exception type and message, call stacks, message action, from/to fields, and other exception information.","pos":[2343,2471]},{"content":"In the XML view, useful xml tags include the following:","pos":[2478,2533]},{"pos":[2543,2569],"content":"<ph id=\"ph1\">`&lt;SubType&gt;`</ph> (trace level).","source":"`<SubType>` (trace level)."},{"pos":[2579,2595],"content":"<ph id=\"ph1\">`&lt;TimeCreated&gt;`</ph>.","source":"`<TimeCreated>`."},{"pos":[2605,2636],"content":"<ph id=\"ph1\">`&lt;Source&gt;`</ph> (trace source name).","source":"`<Source>` (trace source name)."},{"pos":[2646,2704],"content":"<ph id=\"ph1\">`&lt;Correlation&gt;`</ph> (activity id set when emitting the trace).","source":"`<Correlation>` (activity id set when emitting the trace)."},{"pos":[2714,2752],"content":"<ph id=\"ph1\">`&lt;Execution&gt;`</ph> (process and thread id).","source":"`<Execution>` (process and thread id)."},{"pos":[2762,2775],"content":"<ph id=\"ph1\">`&lt;Computer&gt;`</ph>.","source":"`<Computer>`."},{"pos":[2785,2911],"content":"<ph id=\"ph1\">`&lt;ExtendedData&gt;`</ph>, including <ph id=\"ph2\">`&lt;Action&gt;`</ph>, <ph id=\"ph3\">`&lt;MessageID&gt;`</ph> and the <ph id=\"ph4\">`&lt;ActivityId&gt;`</ph> set in the message header when sending a message.","source":"`<ExtendedData>`, including `<Action>`, `<MessageID>` and the `<ActivityId>` set in the message header when sending a message."},{"content":"If you examine the \"Sent a message over a channel\" trace, you may see the following content.","pos":[2918,3010]},{"pos":[5793,5817],"content":"ServiceModel E2E Tracing","linkify":"ServiceModel E2E Tracing","nodes":[{"content":"ServiceModel E2E Tracing","pos":[0,24]}]},{"pos":[5821,5988],"content":"When the <ph id=\"ph1\">`System.ServiceModel`</ph> trace source is set with a <ph id=\"ph2\">`switchValue`</ph> other than Off, and <ph id=\"ph3\">`ActivityTracing`</ph>, WCF creates activities and transfers for WCF processing.","source":"When the `System.ServiceModel` trace source is set with a `switchValue` other than Off, and `ActivityTracing`, WCF creates activities and transfers for WCF processing."},{"content":"An activity is a logical unit of processing that groups all traces related to that processing unit.","pos":[5995,6094]},{"content":"For example, you can define one activity for each request.","pos":[6095,6153]},{"content":"Transfers create a causal relationship between activities within endpoints.","pos":[6154,6229]},{"content":"Propagating the activity ID enables you to relate activities across endpoints.","pos":[6230,6308]},{"content":"This can be done by setting <ph id=\"ph1\">`propagateActivity`</ph><ph id=\"ph2\">=</ph><ph id=\"ph3\">`true`</ph> in configuration at every endpoint.","pos":[6309,6399],"source":" This can be done by setting `propagateActivity`=`true` in configuration at every endpoint."},{"content":"Activities, transfers, and propagation allow you to perform error correlation.","pos":[6400,6478]},{"content":"In this way, you can find the root cause of an error more quickly.","pos":[6479,6545]},{"content":"On the client, one WCF activity is created for each object model call (for example, Open ChannelFactory, Add, Divide, and so on.) Each of the operation calls is processed in a \"Process Action\" activity.","pos":[6552,6754]},{"content":"In the following screenshot, extracted from the <bpt id=\"p1\">[</bpt>Tracing and Message Logging<ept id=\"p1\">](../../../../../docs/framework/wcf/samples/tracing-and-message-logging.md)</ept> sample the left panel displays the list of activities created in the client process, sorted by creation time.","pos":[6761,7022],"source":"In the following screenshot, extracted from the [Tracing and Message Logging](../../../../../docs/framework/wcf/samples/tracing-and-message-logging.md) sample the left panel displays the list of activities created in the client process, sorted by creation time."},{"content":"The following is a chronological list of activities:","pos":[7023,7075]},{"content":"Constructed the channel factory (ClientBase).","pos":[7085,7130]},{"content":"Opened the channel factory.","pos":[7140,7167]},{"content":"Processed the Add action.","pos":[7177,7202]},{"content":"Set up the Secure Session (this OCCURRED on the first request) and processed three security infrastructure response messages: RST, RSTR, SCT (Process message 1, 2, 3).","pos":[7212,7379]},{"content":"Processed the Subtract, Multiply, and Divide requests.","pos":[7389,7443]},{"content":"Closed the channel factory, and doing so closed the Secure session and processed the security message response Cancel.","pos":[7453,7571]},{"content":"We see the security infrastructure messages because of the wsHttpBinding.","pos":[7578,7651]},{"pos":[7659,8250],"content":"[!NOTE]\n In WCF, we show response messages being processed initially in a separate activity (Process message) before we correlate them to the corresponding Process Action activity that includes the request message, through a transfer. This happens for infrastructure messages and asynchronous requests and is due to the fact that we must inspect the message, read the activityId header, and identify the existing Process Action activity with that id to correlate to it. For synchronous requests, we are blocking for the response and hence know which Process action the response relates to.","leadings":["","> "],"nodes":[{"content":"In WCF, we show response messages being processed initially in a separate activity (Process message) before we correlate them to the corresponding Process Action activity that includes the request message, through a transfer. This happens for infrastructure messages and asynchronous requests and is due to the fact that we must inspect the message, read the activityId header, and identify the existing Process Action activity with that id to correlate to it. For synchronous requests, we are blocking for the response and hence know which Process action the response relates to.","pos":[9,589],"nodes":[{"content":"In WCF, we show response messages being processed initially in a separate activity (Process message) before we correlate them to the corresponding Process Action activity that includes the request message, through a transfer.","pos":[0,225]},{"content":"This happens for infrastructure messages and asynchronous requests and is due to the fact that we must inspect the message, read the activityId header, and identify the existing Process Action activity with that id to correlate to it.","pos":[226,460]},{"content":"For synchronous requests, we are blocking for the response and hence know which Process action the response relates to.","pos":[461,580]}]}]},{"content":"The following image shows WCF client activities listed by creation time (left panel) and their nested activities and traces (upper right panel):","pos":[8256,8400]},{"content":"Screenshot showing WCF client activities listed by creation time.","pos":[8405,8470]},{"content":"When we select an activity in the left panel, we can see nested activities and traces on the upper right panel.","pos":[8604,8715]},{"content":"Therefore, this is a reduced hierarchical view of the list of activities on the left, based on the selected parent activity.","pos":[8716,8840]},{"content":"Because the selected Process action Add is the first request made, this activity contains the Set Up Secure Session activity (transfer to, transfer back from), and traces for the actual processing of the Add action.","pos":[8841,9056]},{"content":"If we double click the Process action Add activity in the left panel, we can see a graphical representation of the client WCF activities related to Add.","pos":[9063,9215]},{"content":"The first activity on the left is the root activity (0000), which is the default activity.","pos":[9216,9306]},{"content":"WCF transfers out of the ambient activity.","pos":[9307,9349]},{"content":"If this is not defined, WCF transfers out of 0000.","pos":[9350,9400]},{"content":"Here, the second activity, Process Action Add, transfers out of 0.","pos":[9401,9467]},{"content":"Then we see Setup Secure Session.","pos":[9468,9501]},{"content":"The following image shows a graph view of WCF client activities, specifically Ambient Activity (here 0), Process action, and Set Up Secure Session:","pos":[9506,9653]},{"content":"Graph in the Trace Viewer showing Ambient Activity and Process action.","pos":[9661,9731]},{"content":"On the upper right panel, we can see all traces related to the Process Action Add activity.","pos":[9867,9958]},{"content":"Specifically, we have sent the request message (\"Sent a message over a channel\") and received the response (\"Received a message over a channel\") in the same activity.","pos":[9959,10125]},{"content":"This is shown in the following graph.","pos":[10126,10163]},{"content":"For clarity, the Set up Secure Session activity is collapsed in the graph.","pos":[10164,10238]},{"content":"The following image shows a list of traces for the Process Action activity.","pos":[10245,10320]},{"content":"We send the request and receive the response in the same activity.","pos":[10321,10387]},{"content":"Screenshot of Trace Viewer showing a list of traces for the Process Action activity","pos":[10393,10476]},{"pos":[10596,10859],"content":"Here, we load client traces only for clarity, but service traces (request message received and response message sent) appear in the same activity if they are also loaded in the tool and <ph id=\"ph1\">`propagateActivity`</ph> was set to <ph id=\"ph2\">`true.`</ph> This is shown in a later illustration.","source":"Here, we load client traces only for clarity, but service traces (request message received and response message sent) appear in the same activity if they are also loaded in the tool and `propagateActivity` was set to `true.` This is shown in a later illustration."},{"content":"On the service, the activity model maps to the WCF concepts as follows:","pos":[10866,10937]},{"content":"We construct and open a ServiceHost (this may create several host-related activities, for instance, in the case of security).","pos":[10947,11072]},{"content":"We create a Listen At activity for each listener in the ServiceHost (with transfers in and out of Open ServiceHost).","pos":[11082,11198]},{"content":"When the listener detects a communication request initiated by the client, it transfers to a \"Receive Bytes\" activity, in which all bytes sent from the client are processed.","pos":[11208,11381]},{"content":"In this activity, we can see any connection errors that have happened during the client-service interaction.","pos":[11382,11490]},{"content":"For each set of bytes that is received that corresponds to a message, we process these bytes in a \"Process Message\" activity, where we create the WCF Message object.","pos":[11500,11665]},{"content":"In this activity, we see errors related to a bad envelope or a malformed message.","pos":[11666,11747]},{"content":"Once the message is formed, we transfer to a Process Action activity.","pos":[11757,11826]},{"content":"If <ph id=\"ph1\">`propagateActivity`</ph> is set to <ph id=\"ph2\">`true`</ph> on both the client and service, this activity has the same id as the one defined in the client, and described previously.","pos":[11827,11988],"source":" If `propagateActivity` is set to `true` on both the client and service, this activity has the same id as the one defined in the client, and described previously."},{"content":"From this stage we start to benefit from direct correlation across endpoints, because all traces emitted in WCF that are related to the request are in that same activity, including the response message processing.","pos":[11989,12202]},{"content":"For out-of-process action, we create an \"Execute user code\" activity to isolate traces emitted in user code from the ones emitted in WCF.","pos":[12212,12349]},{"content":"In the preceding example, the \"Service sends Add response\" trace is emitted in the \"Execute User code\" activity not in the activity propagated by the client, if applicable.","pos":[12350,12522]},{"content":"In the illustration that follows, the first activity on the left is the root activity (0000), which is the default activity.","pos":[12529,12653]},{"content":"The next three activities are to open the ServiceHost.","pos":[12654,12708]},{"content":"The activity in column 5 is the listener, and the remaining activities (6 to 8) describe the WCF processing of a message, from bytes processing to user code activation.","pos":[12709,12877]},{"content":"The following image shows a graph view of WCF service activities:","pos":[12882,12947]},{"content":"Screenshot of Trace Viewer showing a list of WCF service activities","pos":[12955,13022]},{"content":"The following screenshot shows the activities for both the client and service, and highlights the Process Action Add activity across processes (orange).","pos":[13141,13293]},{"content":"Arrows relate the request and response messages sent and received by the client and service.","pos":[13294,13386]},{"content":"The traces of Process Action are separated across processes in the graph, but shown as part of the same activity in the upper-right panel.","pos":[13387,13525]},{"content":"In this panel, we can see client traces for sent messages followed by service traces for received and processed messages.","pos":[13526,13647]},{"content":"The following images shows a graph view of both WCF client and service activities","pos":[13654,13735]},{"content":"Graph from Trace Viewer that shows both WCF client and service activities.","pos":[13743,13817]},{"content":"In the following error scenario, error and warning traces at the service and client are related.","pos":[13946,14042]},{"content":"An exception is first thrown in user code on the service (right-most green activity that includes a warning trace for the exception \"The service cannot process this request in user code.\").","pos":[14043,14232]},{"content":"When the response is sent to the client, a warning trace is again emitted to denote the fault message (left pink activity).","pos":[14233,14356]},{"content":"The client then closes its WCF client (yellow activity on the lower-left side), which aborts the connection to the service.","pos":[14357,14480]},{"content":"The service throws an error (longest pink activity on the right).","pos":[14481,14546]},{"content":"<bpt id=\"p1\">![</bpt>Using the Trace Viewer<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../../docs/framework/wcf/diagnostics/tracing/media/wcfc-e2etrace9s.gif \"</bpt>wcfc_e2etrace9s<ept id=\"p2\">\")</ept>","pos":[14553,14677],"source":"![Using the Trace Viewer](../../../../../docs/framework/wcf/diagnostics/tracing/media/wcfc-e2etrace9s.gif \"wcfc_e2etrace9s\")"},{"content":"Error correlation across the service and client","pos":[14680,14727]},{"content":"The sample used to generate these traces is a series of synchronous requests using the wsHttpBinding.","pos":[14734,14835]},{"content":"There are deviations from this graph for scenarios without security, or with asynchronous requests, where the Process Action activity encompasses the begin and end operations that constitute the asynchronous call, and shows transfers to a callback activity.","pos":[14836,15093]},{"content":"For more information about additional scenarios, see <bpt id=\"p1\">[</bpt>End-To-End Tracing Scenarios<ept id=\"p1\">](../../../../../docs/framework/wcf/diagnostics/tracing/end-to-end-tracing-scenarios.md)</ept>.","pos":[15094,15265],"source":" For more information about additional scenarios, see [End-To-End Tracing Scenarios](../../../../../docs/framework/wcf/diagnostics/tracing/end-to-end-tracing-scenarios.md)."},{"pos":[15274,15320],"content":"Troubleshooting Using the Service Trace Viewer","linkify":"Troubleshooting Using the Service Trace Viewer","nodes":[{"content":"Troubleshooting Using the Service Trace Viewer","pos":[0,46]}]},{"content":"When you load trace files in the Service Trace Viewer Tool, you can select any red or yellow activity on the left panel to track down the cause of a problem in your application.","pos":[15324,15501]},{"content":"The 000 activity typically has unhandled exceptions that bubble up to the user.","pos":[15502,15581]},{"content":"The following image shows how to select a red or yellow activity to locate the root of a problem.","pos":[15589,15686]},{"content":"Screenshot of red or yellow activities for locating the root of a problem.","pos":[15693,15767]},{"content":"On the upper right panel, you can examine traces for the activity you selected on the left.","pos":[15884,15975]},{"content":"You can then examine red or yellow traces in that panel and see how they are correlated.","pos":[15976,16064]},{"content":"In the preceding graph, we see warning traces both for the client and service in the same Process Action activity.","pos":[16065,16179]},{"content":"If these traces do not provide you with the root cause of the error, you can utilize the graph by double-clicking the selected activity on the left panel (here Process action).","pos":[16186,16362]},{"content":"The graph with related activities is then displayed.","pos":[16363,16415]},{"content":"You can then expand related activities (by clicking the \"+\" signs) to find the first emitted trace in red or yellow in a related activity.","pos":[16416,16554]},{"content":"Keep expanding the activities that happened just before the red or yellow trace of interest, following transfers to related activities or message flows across endpoints, until you track the root cause of the problem.","pos":[16555,16771]},{"content":"<bpt id=\"p1\">![</bpt>Using the Trace Viewer<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../../../docs/framework/wcf/diagnostics/tracing/media/wcfc-e2etrace9s.gif \"</bpt>wcfc_e2etrace9s<ept id=\"p2\">\")</ept>","pos":[16778,16902],"source":"![Using the Trace Viewer](../../../../../docs/framework/wcf/diagnostics/tracing/media/wcfc-e2etrace9s.gif \"wcfc_e2etrace9s\")"},{"content":"Expanding activities to track the root cause of a problem","pos":[16905,16962]},{"content":"If ServiceModel <ph id=\"ph1\">`ActivityTracing`</ph> is off but ServiceModel tracing is on, you can see ServiceModel traces emitted in the 0000 activity.","pos":[16969,17103],"source":"If ServiceModel `ActivityTracing` is off but ServiceModel tracing is on, you can see ServiceModel traces emitted in the 0000 activity."},{"content":"However, this requires more effort to understand the correlation of these traces.","pos":[17104,17185]},{"content":"If Message Logging is enabled, you can use the Message Tab to see which message is impacted by the error.","pos":[17192,17297]},{"content":"By double-clicking a message in red or yellow, you can see the graph view of the related activities.","pos":[17298,17398]},{"content":"These activities are the ones most closely related to the request where an error happened.","pos":[17399,17489]},{"content":"Screenshot of Trace Viewer with message logging enabled.","pos":[17498,17554]},{"content":"To start troubleshooting, you can also pick a red or yellow message trace and double click it to track the root cause.","pos":[17673,17791]},{"pos":[17800,17808],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[17812,17929],"content":"<bpt id=\"p1\">[</bpt>End-To-End Tracing Scenarios<ept id=\"p1\">](../../../../../docs/framework/wcf/diagnostics/tracing/end-to-end-tracing-scenarios.md)</ept>","source":"[End-To-End Tracing Scenarios](../../../../../docs/framework/wcf/diagnostics/tracing/end-to-end-tracing-scenarios.md)"},{"pos":[17932,18063],"content":"<bpt id=\"p1\">[</bpt>Service Trace Viewer Tool (SvcTraceViewer.exe)<ept id=\"p1\">](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)</ept>","source":"[Service Trace Viewer Tool (SvcTraceViewer.exe)](../../../../../docs/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe.md)"},{"pos":[18066,18139],"content":"<bpt id=\"p1\">[</bpt>Tracing<ept id=\"p1\">](../../../../../docs/framework/wcf/diagnostics/tracing/index.md)</ept>","source":"[Tracing](../../../../../docs/framework/wcf/diagnostics/tracing/index.md)"}]}