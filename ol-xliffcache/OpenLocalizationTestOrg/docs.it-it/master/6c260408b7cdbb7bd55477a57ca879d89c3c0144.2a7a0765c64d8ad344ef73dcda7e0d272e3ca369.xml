{"content":"---\ntitle: \"Structs - C# Programming Guide\"\nms.custom: seodec18\nms.date: 08/21/2018\nhelpviewer_keywords: \n  - \"C# language, structs\"\n  - \"structs [C#]\"\nms.assetid: b7cf4ff2-0eb7-4e5c-93d5-b2196b4f5d89\n---\n# Structs (C# Programming Guide)\n\nStructs are defined by using the [struct](../../language-reference/keywords/struct.md) keyword, for example:  \n  \n [!code-csharp[csProgGuideObjects#39](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#39)]  \n  \nStructs share most of the same syntax as classes. The name of the struct must be a valid C# [identifier name](../inside-a-program/identifier-names.md). Structs are more limited than classes in the following ways:  \n  \n- Within a struct declaration, fields cannot be initialized unless they are declared as const or static.  \n- A struct cannot declare a default constructor (a constructor without parameters) or a finalizer.  \n- Structs are copied on assignment. When a struct is assigned to a new variable, all the data is copied, and any modification to the new copy does not change the data for the original copy. This is important to remember when working with collections of value types such as `Dictionary<string, myStruct>`.  \n- Structs are value types, unlike classes, which are reference types.  \n- Unlike classes, structs can be instantiated without using a `new` operator.  \n- Structs can declare constructors that have parameters. \n- A struct cannot inherit from another struct or class, and it cannot be the base of a class. All structs inherit directly from <xref:System.ValueType>, which inherits from <xref:System.Object>.  \n- A struct can implement interfaces. \n- A struct cannot be `null`, and a struct variable cannot be assigned `null` unless the variable is declared as a nullable type.\n  \n## Related sections  \n\nFor more information:  \n  \n- [Using Structs](using-structs.md)\n- [Constructors](constructors.md)\n- [Nullable Types](../nullable-types/index.md)\n- [How to: Know the Difference Between Passing a Struct and Passing a Class Reference to a Method](how-to-know-the-difference-passing-a-struct-and-passing-a-class-to-a-method.md)\n- [How to: Implement User-Defined Conversions Between Structs](../statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md)\n\n## See also\n\n- [C# Programming Guide](../index.md)\n- [Classes and Structs](index.md)\n- [Classes](classes.md)\n- [Identifier names](../inside-a-program/identifier-names.md)\n","nodes":[{"pos":[4,200],"embed":true,"restype":"x-metadata","content":"title: \"Structs - C# Programming Guide\"\nms.custom: seodec18\nms.date: 08/21/2018\nhelpviewer_keywords: \n  - \"C# language, structs\"\n  - \"structs [C#]\"\nms.assetid: b7cf4ff2-0eb7-4e5c-93d5-b2196b4f5d89","nodes":[{"content":"Structs - C# Programming Guide","nodes":[{"pos":[0,30],"content":"Structs - C# Programming Guide","nodes":[{"content":"Structs - C# Programming Guide","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[207,237],"content":"Structs (C# Programming Guide)","linkify":"Structs (C# Programming Guide)","nodes":[{"content":"Structs (C# Programming Guide)","pos":[0,30]}]},{"pos":[239,347],"content":"Structs are defined by using the <bpt id=\"p1\">[</bpt>struct<ept id=\"p1\">](../../language-reference/keywords/struct.md)</ept> keyword, for example:","source":"Structs are defined by using the [struct](../../language-reference/keywords/struct.md) keyword, for example:"},{"content":"Structs share most of the same syntax as classes.","pos":[481,530]},{"content":"The name of the struct must be a valid C# <bpt id=\"p1\">[</bpt>identifier name<ept id=\"p1\">](../inside-a-program/identifier-names.md)</ept>.","pos":[531,632],"source":" The name of the struct must be a valid C# [identifier name](../inside-a-program/identifier-names.md)."},{"content":"Structs are more limited than classes in the following ways:","pos":[633,693]},{"content":"Within a struct declaration, fields cannot be initialized unless they are declared as const or static.","pos":[701,803]},{"content":"A struct cannot declare a default constructor (a constructor without parameters) or a finalizer.","pos":[808,904]},{"content":"Structs are copied on assignment.","pos":[909,942]},{"content":"When a struct is assigned to a new variable, all the data is copied, and any modification to the new copy does not change the data for the original copy.","pos":[943,1096]},{"content":"This is important to remember when working with collections of value types such as <ph id=\"ph1\">`Dictionary&lt;string, myStruct&gt;`</ph>.","pos":[1097,1211],"source":" This is important to remember when working with collections of value types such as `Dictionary<string, myStruct>`."},{"content":"Structs are value types, unlike classes, which are reference types.","pos":[1216,1283]},{"pos":[1288,1363],"content":"Unlike classes, structs can be instantiated without using a <ph id=\"ph1\">`new`</ph> operator.","source":"Unlike classes, structs can be instantiated without using a `new` operator."},{"content":"Structs can declare constructors that have parameters.","pos":[1368,1422]},{"content":"A struct cannot inherit from another struct or class, and it cannot be the base of a class.","pos":[1426,1517]},{"content":"All structs inherit directly from <ph id=\"ph1\">&lt;xref:System.ValueType&gt;</ph>, which inherits from <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph>.","pos":[1518,1618],"source":" All structs inherit directly from <xref:System.ValueType>, which inherits from <xref:System.Object>."},{"content":"A struct can implement interfaces.","pos":[1623,1657]},{"pos":[1661,1787],"content":"A struct cannot be <ph id=\"ph1\">`null`</ph>, and a struct variable cannot be assigned <ph id=\"ph2\">`null`</ph> unless the variable is declared as a nullable type.","source":"A struct cannot be `null`, and a struct variable cannot be assigned `null` unless the variable is declared as a nullable type."},{"pos":[1794,1810],"content":"Related sections","linkify":"Related sections","nodes":[{"content":"Related sections","pos":[0,16]}]},{"content":"For more information:","pos":[1814,1835]},{"pos":[1843,1876],"content":"<bpt id=\"p1\">[</bpt>Using Structs<ept id=\"p1\">](using-structs.md)</ept>","source":"[Using Structs](using-structs.md)"},{"pos":[1879,1910],"content":"<bpt id=\"p1\">[</bpt>Constructors<ept id=\"p1\">](constructors.md)</ept>","source":"[Constructors](constructors.md)"},{"pos":[1913,1957],"content":"<bpt id=\"p1\">[</bpt>Nullable Types<ept id=\"p1\">](../nullable-types/index.md)</ept>","source":"[Nullable Types](../nullable-types/index.md)"},{"pos":[1960,2136],"content":"<bpt id=\"p1\">[</bpt>How to: Know the Difference Between Passing a Struct and Passing a Class Reference to a Method<ept id=\"p1\">](how-to-know-the-difference-passing-a-struct-and-passing-a-class-to-a-method.md)</ept>","source":"[How to: Know the Difference Between Passing a Struct and Passing a Class Reference to a Method](how-to-know-the-difference-passing-a-struct-and-passing-a-class-to-a-method.md)"},{"pos":[2139,2297],"content":"<bpt id=\"p1\">[</bpt>How to: Implement User-Defined Conversions Between Structs<ept id=\"p1\">](../statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md)</ept>","source":"[How to: Implement User-Defined Conversions Between Structs](../statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md)"},{"pos":[2302,2310],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2314,2349],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../index.md)</ept>","source":"[C# Programming Guide](../index.md)"},{"pos":[2352,2383],"content":"<bpt id=\"p1\">[</bpt>Classes and Structs<ept id=\"p1\">](index.md)</ept>","source":"[Classes and Structs](index.md)"},{"pos":[2386,2407],"content":"<bpt id=\"p1\">[</bpt>Classes<ept id=\"p1\">](classes.md)</ept>","source":"[Classes](classes.md)"},{"pos":[2410,2469],"content":"<bpt id=\"p1\">[</bpt>Identifier names<ept id=\"p1\">](../inside-a-program/identifier-names.md)</ept>","source":"[Identifier names](../inside-a-program/identifier-names.md)"}]}