{"content":"---\ntitle: \"Compiler Error CS0173\"\nms.date: 08/14/2018\nf1_keywords:\n  - \"CS0173\"\nhelpviewer_keywords:\n  - \"CS0173\"\nms.assetid: eb1797ad-bf62-4e2b-8922-bef4aff36954\n---\n# Compiler Error CS0173\n\nType of conditional expression cannot be determined because there is no implicit conversion between 'class1' and 'class2'\n\nConversions between classes are useful when you want objects of different classes to work with the same code. However, two classes that work together cannot have mutual and redundant conversions, or no implicit conversions. The types of `class1` and `class2` are determined independently, and the more general type is selected as the type of the conditional expression. For more information about how types are determined, see [Conditional operator cannot cast implicitly](https://stackoverflow.com/questions/2215745/conditional-operator-cannot-cast-implicitly/2215959#2215959).\n\nTo resolve CS0173, verify that there is one and only one implicit conversion between `class1` and `class2`, regardless of which direction the conversion is in and regardless of which class the conversion is in. For more information, see [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) and [Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md).\n\n## Example\n\nThe following examples generate compiler error CS0173:\n\n```csharp\npublic class C {}\n\npublic class A\n{\n    // The following code defines an implicit conversion operator from\n    // type C to type A.\n    //public static implicit operator A(C c)\n    //{\n    //    A a = new A();\n    //    a = c;\n    //    return a;\n    //}\n}\n\npublic class MyClass\n{\n    public static void F(bool b)\n    {\n        A a = new A();\n        C c = new C();\n\n        // The following line causes CS0173 because there is no implicit\n        // conversion from a to c or from c to a.\n        object o = b ? a : c;\n\n        // To resolve the error, you can cast a and c.\n        // object o = b ? (object)a : (object)c;\n\n        // Alternatively, you can add a conversion operator from class C to\n        // class A, or from class A to class C, but not both.\n    }\n\n   public static void Main()\n   {\n      F(true);\n   }\n}\n```\n\n```csharp\nclass M\n{\n    static int Main ()\n    {\n        int X = 1;\n        // The following line causes CS0173.\n        object o = (X == 0) ? null : null;\n        return -1;\n    }\n}\n```\n","nodes":[{"pos":[4,163],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Error CS0173\"\nms.date: 08/14/2018\nf1_keywords:\n  - \"CS0173\"\nhelpviewer_keywords:\n  - \"CS0173\"\nms.assetid: eb1797ad-bf62-4e2b-8922-bef4aff36954","nodes":[{"content":"Compiler Error CS0173","nodes":[{"pos":[0,21],"content":"Compiler Error CS0173","nodes":[{"content":"Compiler Error CS0173","pos":[0,21]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[170,191],"content":"Compiler Error CS0173","linkify":"Compiler Error CS0173","nodes":[{"content":"Compiler Error CS0173","pos":[0,21]}]},{"content":"Type of conditional expression cannot be determined because there is no implicit conversion between 'class1' and 'class2'","pos":[193,314]},{"content":"Conversions between classes are useful when you want objects of different classes to work with the same code.","pos":[316,425]},{"content":"However, two classes that work together cannot have mutual and redundant conversions, or no implicit conversions.","pos":[426,539]},{"content":"The types of <ph id=\"ph1\">`class1`</ph> and <ph id=\"ph2\">`class2`</ph> are determined independently, and the more general type is selected as the type of the conditional expression.","pos":[540,685],"source":" The types of `class1` and `class2` are determined independently, and the more general type is selected as the type of the conditional expression."},{"content":"For more information about how types are determined, see <bpt id=\"p1\">[</bpt>Conditional operator cannot cast implicitly<ept id=\"p1\">](https://stackoverflow.com/questions/2215745/conditional-operator-cannot-cast-implicitly/2215959#2215959)</ept>.","pos":[686,894],"source":" For more information about how types are determined, see [Conditional operator cannot cast implicitly](https://stackoverflow.com/questions/2215745/conditional-operator-cannot-cast-implicitly/2215959#2215959)."},{"content":"To resolve CS0173, verify that there is one and only one implicit conversion between <ph id=\"ph1\">`class1`</ph> and <ph id=\"ph2\">`class2`</ph>, regardless of which direction the conversion is in and regardless of which class the conversion is in.","pos":[896,1106],"source":"To resolve CS0173, verify that there is one and only one implicit conversion between `class1` and `class2`, regardless of which direction the conversion is in and regardless of which class the conversion is in."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept> and <bpt id=\"p2\">[</bpt>Conversion Operators<ept id=\"p2\">](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)</ept>.","pos":[1107,1372],"source":" For more information, see [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md) and [Conversion Operators](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)."},{"pos":[1377,1384],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following examples generate compiler error CS0173:","pos":[1386,1440]}]}