{"content":"---\ntitle: C# Attributes - A tour of the C# language\ndescription: Learn about declarative programming using attributes in C#\nms.date: 08/10/2016\nms.assetid: 753bcfe2-7ddd-4487-9513-ba70937fc8e9\n---\n\n# Attributes\n\nTypes, members, and other entities in a C# program support modifiers that control certain aspects of their behavior. For example, the accessibility of a method is controlled using the `public`, `protected`, `internal`, and `private` modifiers. C# generalizes this capability such that user-defined types of declarative information can be attached to program entities and retrieved at run-time. Programs specify this additional declarative information by defining and using ***attributes***.\n\nThe following example declares a `HelpAttribute` attribute that can be placed on program entities to provide links to their associated documentation.\n\n[!code-csharp[AttributeDefined](../../../samples/snippets/csharp/tour/attributes/Program.cs#L3-L20)]\n\nAll attribute classes derive from the <xref:System.Attribute> base class provided by the standard library. Attributes can be applied by giving their name, along with any arguments, inside square brackets just before the associated declaration. If an attribute’s name ends in `Attribute`, that part of the name can be omitted when the attribute is referenced. For example, the `HelpAttribute` can be used as follows.\n\n[!code-csharp[AttributeApplied](../../../samples/snippets/csharp/tour/attributes/Program.cs#L22-L28)]\n\nThis example attaches a `HelpAttribute` to the `Widget` class. It adds another `HelpAttribute` to the `Display` method in the class. The public constructors of an attribute class control the information that must be provided when the attribute is attached to a program entity. Additional information can be provided by referencing public read-write properties of the attribute class (such as the reference to the `Topic` property previously).\n\nThe metadata defined by attributes can be read and manipulated at runtime using reflection. When a particular attribute is requested using this technique, the constructor for the attribute class is invoked with the information provided in the program source, and the resulting attribute instance is returned. If additional information was provided through properties, those properties are set to the given values before the attribute instance is returned.\n\nThe following code sample demonstrates how to get the `HelpAttribute` instances associated to the `Widget` class and its `Display` method.\n\n[!code-csharp[AttributeRead](../../../samples/snippets/csharp/tour/attributes/Program.cs#ReadAttributes)]\n\n>[!div class=\"step-by-step\"]\n>[Previous](delegates.md)","nodes":[{"pos":[4,193],"embed":true,"restype":"x-metadata","content":"title: C# Attributes - A tour of the C# language\ndescription: Learn about declarative programming using attributes in C#\nms.date: 08/10/2016\nms.assetid: 753bcfe2-7ddd-4487-9513-ba70937fc8e9","nodes":[{"content":"C# Attributes - A tour of the C# language","nodes":[{"pos":[0,41],"content":"C# Attributes - A tour of the C# language","nodes":[{"content":"C# Attributes - A tour of the C# language","pos":[0,41]}]}],"path":["title"],"nosxs":false},{"content":"Learn about declarative programming using attributes in C#","nodes":[{"pos":[0,58],"content":"Learn about declarative programming using attributes in C#","nodes":[{"content":"Learn about declarative programming using attributes in C#","pos":[0,58]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[201,211],"content":"Attributes","linkify":"Attributes","nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"Types, members, and other entities in a C# program support modifiers that control certain aspects of their behavior.","pos":[213,329]},{"content":"For example, the accessibility of a method is controlled using the <ph id=\"ph1\">`public`</ph>, <ph id=\"ph2\">`protected`</ph>, <ph id=\"ph3\">`internal`</ph>, and <ph id=\"ph4\">`private`</ph> modifiers.","pos":[330,456],"source":" For example, the accessibility of a method is controlled using the `public`, `protected`, `internal`, and `private` modifiers."},{"content":"C# generalizes this capability such that user-defined types of declarative information can be attached to program entities and retrieved at run-time.","pos":[457,606]},{"content":"Programs specify this additional declarative information by defining and using <bpt id=\"p1\">***</bpt>attributes<ept id=\"p1\">***</ept>.","pos":[607,703],"source":" Programs specify this additional declarative information by defining and using ***attributes***."},{"pos":[705,854],"content":"The following example declares a <ph id=\"ph1\">`HelpAttribute`</ph> attribute that can be placed on program entities to provide links to their associated documentation.","source":"The following example declares a `HelpAttribute` attribute that can be placed on program entities to provide links to their associated documentation."},{"content":"All attribute classes derive from the <ph id=\"ph1\">&lt;xref:System.Attribute&gt;</ph> base class provided by the standard library.","pos":[958,1064],"source":"All attribute classes derive from the <xref:System.Attribute> base class provided by the standard library."},{"content":"Attributes can be applied by giving their name, along with any arguments, inside square brackets just before the associated declaration.","pos":[1065,1201]},{"content":"If an attribute’s name ends in <ph id=\"ph1\">`Attribute`</ph>, that part of the name can be omitted when the attribute is referenced.","pos":[1202,1316],"source":" If an attribute’s name ends in `Attribute`, that part of the name can be omitted when the attribute is referenced."},{"content":"For example, the <ph id=\"ph1\">`HelpAttribute`</ph> can be used as follows.","pos":[1317,1373],"source":" For example, the `HelpAttribute` can be used as follows."},{"content":"This example attaches a <ph id=\"ph1\">`HelpAttribute`</ph> to the <ph id=\"ph2\">`Widget`</ph> class.","pos":[1478,1540],"source":"This example attaches a `HelpAttribute` to the `Widget` class."},{"content":"It adds another <ph id=\"ph1\">`HelpAttribute`</ph> to the <ph id=\"ph2\">`Display`</ph> method in the class.","pos":[1541,1610],"source":" It adds another `HelpAttribute` to the `Display` method in the class."},{"content":"The public constructors of an attribute class control the information that must be provided when the attribute is attached to a program entity.","pos":[1611,1754]},{"content":"Additional information can be provided by referencing public read-write properties of the attribute class (such as the reference to the <ph id=\"ph1\">`Topic`</ph> property previously).","pos":[1755,1920],"source":" Additional information can be provided by referencing public read-write properties of the attribute class (such as the reference to the `Topic` property previously)."},{"content":"The metadata defined by attributes can be read and manipulated at runtime using reflection.","pos":[1922,2013]},{"content":"When a particular attribute is requested using this technique, the constructor for the attribute class is invoked with the information provided in the program source, and the resulting attribute instance is returned.","pos":[2014,2230]},{"content":"If additional information was provided through properties, those properties are set to the given values before the attribute instance is returned.","pos":[2231,2377]},{"pos":[2379,2517],"content":"The following code sample demonstrates how to get the <ph id=\"ph1\">`HelpAttribute`</ph> instances associated to the <ph id=\"ph2\">`Widget`</ph> class and its <ph id=\"ph3\">`Display`</ph> method.","source":"The following code sample demonstrates how to get the `HelpAttribute` instances associated to the `Widget` class and its `Display` method."},{"pos":[2627,2680],"content":"[!div class=\"step-by-step\"]\n[Previous](delegates.md)","leadings":["",">"],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Previous<ept id=\"p1\">](delegates.md)</ept>","pos":[28,52],"source":"[Previous](delegates.md)"}]}]}