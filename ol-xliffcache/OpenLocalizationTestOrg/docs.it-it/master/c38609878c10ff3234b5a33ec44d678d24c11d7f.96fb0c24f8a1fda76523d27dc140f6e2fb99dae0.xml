{"content":"---\ntitle: \"Iterators (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: f26b5c1e-fe9d-4004-b287-da7919d717ae\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Iterators (Visual Basic)\nAn *iterator* can be used to step through collections such as lists and arrays.  \n  \n An iterator method or `get` accessor performs a custom iteration over a collection. An iterator method uses the [Yield](../../../visual-basic/language-reference/statements/yield-statement.md) statement to return each element one at a time. When a `Yield` statement is reached, the current location in code is remembered. Execution is restarted from that location the next time the iterator function is called.  \n  \n You consume an iterator from client code by using a [For Each…Next](../../../visual-basic/language-reference/statements/for-each-next-statement.md) statement, or by using a LINQ query.  \n  \n In the following example, the first iteration of the `For Each` loop causes execution to proceed  in the `SomeNumbers` iterator method until the first `Yield` statement is reached. This iteration returns a value of 3, and the current location in the iterator method is retained. On the next iteration of the loop, execution in the iterator method continues from where it left off, again stopping when it reaches a `Yield` statement. This iteration returns a value of 5, and the current location in the iterator method is again retained. The loop completes when the end of the iterator method is reached.  \n  \n```vb  \nSub Main()  \n    For Each number As Integer In SomeNumbers()  \n        Console.Write(number & \" \")  \n    Next  \n    ' Output: 3 5 8  \n    Console.ReadKey()  \nEnd Sub  \n  \nPrivate Iterator Function SomeNumbers() As System.Collections.IEnumerable  \n    Yield 3  \n    Yield 5  \n    Yield 8  \nEnd Function  \n```  \n  \n The return type of an iterator method or `get` accessor can be <xref:System.Collections.IEnumerable>, <xref:System.Collections.Generic.IEnumerable%601>, <xref:System.Collections.IEnumerator>, or <xref:System.Collections.Generic.IEnumerator%601>.  \n  \n You can use an `Exit Function` or `Return` statement to end the iteration.  \n  \n A Visual Basic iterator function or `get` accessor declaration includes an [Iterator](../../../visual-basic/language-reference/modifiers/iterator.md) modifier.  \n  \n Iterators were introduced in Visual Basic in Visual Studio 2012.  \n  \n **In this topic**  \n  \n-   [Simple Iterator](#BKMK_SimpleIterator)  \n  \n-   [Creating a Collection Class](#BKMK_CollectionClass)  \n  \n-   [Try Blocks](#BKMK_TryBlocks)  \n  \n-   [Anonymous Methods](#BKMK_AnonymousMethods)  \n  \n-   [Using Iterators with a Generic List](#BKMK_GenericList)  \n  \n-   [Syntax Information](#BKMK_SyntaxInformation)  \n  \n-   [Technical Implementation](#BKMK_Technical)  \n  \n-   [Use of Iterators](#BKMK_UseOfIterators)  \n  \n> [!NOTE]\n>  For all examples in the topic except the Simple Iterator example, include [Imports](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md) statements for the `System.Collections` and `System.Collections.Generic` namespaces.  \n  \n##  <a name=\"BKMK_SimpleIterator\"></a> Simple Iterator  \n The following example has a single `Yield` statement that is inside a [For…Next](../../../visual-basic/language-reference/statements/for-next-statement.md) loop. In `Main`, each iteration of the `For Each` statement body creates a call to the iterator function, which proceeds to the next `Yield` statement.  \n  \n```vb  \nSub Main()  \n    For Each number As Integer In EvenSequence(5, 18)  \n        Console.Write(number & \" \")  \n    Next  \n    ' Output: 6 8 10 12 14 16 18  \n    Console.ReadKey()  \nEnd Sub  \n  \nPrivate Iterator Function EvenSequence(  \nByVal firstNumber As Integer, ByVal lastNumber As Integer) _  \nAs System.Collections.Generic.IEnumerable(Of Integer)  \n  \n    ' Yield even numbers in the range.  \n    For number As Integer = firstNumber To lastNumber  \n        If number Mod 2 = 0 Then  \n            Yield number  \n        End If  \n    Next  \nEnd Function  \n```  \n  \n##  <a name=\"BKMK_CollectionClass\"></a> Creating a Collection Class  \n In the following example, the `DaysOfTheWeek` class implements the <xref:System.Collections.IEnumerable> interface, which requires a <xref:System.Collections.IEnumerable.GetEnumerator%2A> method. The compiler implicitly calls the `GetEnumerator` method, which returns an <xref:System.Collections.IEnumerator>.  \n  \n The `GetEnumerator` method returns each string one at a time by using the `Yield` statement, and  an `Iterator` modifier is in the function declaration.  \n  \n```vb  \nSub Main()  \n    Dim days As New DaysOfTheWeek()  \n    For Each day As String In days  \n        Console.Write(day & \" \")  \n    Next  \n    ' Output: Sun Mon Tue Wed Thu Fri Sat  \n    Console.ReadKey()  \nEnd Sub  \n  \nPrivate Class DaysOfTheWeek  \n    Implements IEnumerable  \n  \n    Public days =  \n        New String() {\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"}  \n  \n    Public Iterator Function GetEnumerator() As IEnumerator _  \n        Implements IEnumerable.GetEnumerator  \n  \n        ' Yield each day of the week.  \n        For i As Integer = 0 To days.Length - 1  \n            Yield days(i)  \n        Next  \n    End Function  \nEnd Class  \n```  \n  \n The following example creates a `Zoo` class that contains a collection of animals.  \n  \n The `For Each` statement that refers to the class instance (`theZoo`) implicitly calls the `GetEnumerator` method. The `For Each` statements that refer to the `Birds` and `Mammals` properties use the `AnimalsForType` named iterator method.  \n  \n```vb  \nSub Main()  \n    Dim theZoo As New Zoo()  \n  \n    theZoo.AddMammal(\"Whale\")  \n    theZoo.AddMammal(\"Rhinoceros\")  \n    theZoo.AddBird(\"Penguin\")  \n    theZoo.AddBird(\"Warbler\")  \n  \n    For Each name As String In theZoo  \n        Console.Write(name & \" \")  \n    Next  \n    Console.WriteLine()  \n    ' Output: Whale Rhinoceros Penguin Warbler  \n  \n    For Each name As String In theZoo.Birds  \n        Console.Write(name & \" \")  \n    Next  \n    Console.WriteLine()  \n    ' Output: Penguin Warbler  \n  \n    For Each name As String In theZoo.Mammals  \n        Console.Write(name & \" \")  \n    Next  \n    Console.WriteLine()  \n    ' Output: Whale Rhinoceros  \n  \n    Console.ReadKey()  \nEnd Sub  \n  \nPublic Class Zoo  \n    Implements IEnumerable  \n  \n    ' Private members.  \n    Private animals As New List(Of Animal)  \n  \n    ' Public methods.  \n    Public Sub AddMammal(ByVal name As String)  \n        animals.Add(New Animal With {.Name = name, .Type = Animal.TypeEnum.Mammal})  \n    End Sub  \n  \n    Public Sub AddBird(ByVal name As String)  \n        animals.Add(New Animal With {.Name = name, .Type = Animal.TypeEnum.Bird})  \n    End Sub  \n  \n    Public Iterator Function GetEnumerator() As IEnumerator _  \n        Implements IEnumerable.GetEnumerator  \n  \n        For Each theAnimal As Animal In animals  \n            Yield theAnimal.Name  \n        Next  \n    End Function  \n  \n    ' Public members.  \n    Public ReadOnly Property Mammals As IEnumerable  \n        Get  \n            Return AnimalsForType(Animal.TypeEnum.Mammal)  \n        End Get  \n    End Property  \n  \n    Public ReadOnly Property Birds As IEnumerable  \n        Get  \n            Return AnimalsForType(Animal.TypeEnum.Bird)  \n        End Get  \n    End Property  \n  \n    ' Private methods.  \n    Private Iterator Function AnimalsForType( _  \n    ByVal type As Animal.TypeEnum) As IEnumerable  \n        For Each theAnimal As Animal In animals  \n            If (theAnimal.Type = type) Then  \n                Yield theAnimal.Name  \n            End If  \n        Next  \n    End Function  \n  \n    ' Private class.  \n    Private Class Animal  \n        Public Enum TypeEnum  \n            Bird  \n            Mammal  \n        End Enum  \n  \n        Public Property Name As String  \n        Public Property Type As TypeEnum  \n    End Class  \nEnd Class  \n```  \n  \n##  <a name=\"BKMK_TryBlocks\"></a> Try Blocks  \n Visual Basic allows a `Yield` statement in the `Try` block of a [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md). A `Try` block that has a `Yield` statement can have `Catch` blocks, and can have a `Finally` block.  \n  \n The following example includes `Try`, `Catch`, and `Finally` blocks in an iterator function. The `Finally` block in the iterator function executes before the `For Each` iteration finishes.  \n  \n```vb  \nSub Main()  \n    For Each number As Integer In Test()  \n        Console.WriteLine(number)  \n    Next  \n    Console.WriteLine(\"For Each is done.\")  \n  \n    ' Output:  \n    '  3  \n    '  4  \n    '  Something happened. Yields are done.  \n    '  Finally is called.  \n    '  For Each is done.  \n    Console.ReadKey()  \nEnd Sub  \n  \nPrivate Iterator Function Test() As IEnumerable(Of Integer)  \n    Try  \n        Yield 3  \n        Yield 4  \n        Throw New Exception(\"Something happened. Yields are done.\")  \n        Yield 5  \n        Yield 6  \n    Catch ex As Exception  \n        Console.WriteLine(ex.Message)  \n    Finally  \n        Console.WriteLine(\"Finally is called.\")  \n    End Try  \nEnd Function  \n```  \n  \n A `Yield` statement cannot be inside a `Catch` block or a `Finally` block.  \n  \n If the `For Each` body (instead of the iterator method) throws an exception, a `Catch` block in the iterator function is not executed, but a `Finally` block in the iterator function is executed. A `Catch` block inside an iterator function catches only exceptions that occur inside the iterator function.  \n  \n##  <a name=\"BKMK_AnonymousMethods\"></a> Anonymous Methods  \n In Visual Basic, an anonymous function can be an iterator function. The following example illustrates this.  \n  \n```vb  \nDim iterateSequence = Iterator Function() _  \n                      As IEnumerable(Of Integer)  \n                          Yield 1  \n                          Yield 2  \n                      End Function  \n  \nFor Each number As Integer In iterateSequence()  \n    Console.Write(number & \" \")  \nNext  \n' Output: 1 2  \nConsole.ReadKey()  \n```  \n  \n The following example has a non-iterator method that validates the arguments. The method returns the result of an anonymous iterator that describes the collection elements.  \n  \n```vb  \nSub Main()  \n    For Each number As Integer In GetSequence(5, 10)  \n        Console.Write(number & \" \")  \n    Next  \n    ' Output: 5 6 7 8 9 10  \n    Console.ReadKey()  \nEnd Sub  \n  \nPublic Function GetSequence(ByVal low As Integer, ByVal high As Integer) _  \nAs IEnumerable  \n    ' Validate the arguments.  \n    If low < 1 Then  \n        Throw New ArgumentException(\"low is too low\")  \n    End If  \n    If high > 140 Then  \n        Throw New ArgumentException(\"high is too high\")  \n    End If  \n  \n    ' Return an anonymous iterator function.  \n    Dim iterateSequence = Iterator Function() As IEnumerable  \n                              For index = low To high  \n                                  Yield index  \n                              Next  \n                          End Function  \n    Return iterateSequence()  \nEnd Function  \n```  \n  \n If validation is instead inside the iterator function, the validation cannot be performed until the start of the first iteration of the `For Each` body.  \n  \n##  <a name=\"BKMK_GenericList\"></a> Using Iterators with a Generic List  \n In the following example, the `Stack(Of T)` generic class implements the <xref:System.Collections.Generic.IEnumerable%601> generic interface. The `Push` method assigns values to an array of type `T`. The <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method returns the array values by using the `Yield` statement.  \n  \n In addition to the generic <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method, the non-generic <xref:System.Collections.IEnumerable.GetEnumerator%2A> method must also be implemented. This is because <xref:System.Collections.Generic.IEnumerable%601> inherits from <xref:System.Collections.IEnumerable>. The non-generic implementation defers to the generic implementation.  \n  \n The example uses named iterators to support various ways of iterating through the same collection of data. These named iterators are the `TopToBottom` and `BottomToTop` properties, and the `TopN` method.  \n  \n The `BottomToTop` property declaration includes the `Iterator` keyword.  \n  \n```vb  \nSub Main()  \n    Dim theStack As New Stack(Of Integer)  \n  \n    ' Add items to the stack.  \n    For number As Integer = 0 To 9  \n        theStack.Push(number)  \n    Next  \n  \n    ' Retrieve items from the stack.  \n    ' For Each is allowed because theStack implements  \n    ' IEnumerable(Of Integer).  \n    For Each number As Integer In theStack  \n        Console.Write(\"{0} \", number)  \n    Next  \n    Console.WriteLine()  \n    ' Output: 9 8 7 6 5 4 3 2 1 0  \n  \n    ' For Each is allowed, because theStack.TopToBottom  \n    ' returns IEnumerable(Of Integer).  \n    For Each number As Integer In theStack.TopToBottom  \n        Console.Write(\"{0} \", number)  \n    Next  \n    Console.WriteLine()  \n    ' Output: 9 8 7 6 5 4 3 2 1 0  \n  \n    For Each number As Integer In theStack.BottomToTop  \n        Console.Write(\"{0} \", number)  \n    Next  \n    Console.WriteLine()  \n    ' Output: 0 1 2 3 4 5 6 7 8 9   \n  \n    For Each number As Integer In theStack.TopN(7)  \n        Console.Write(\"{0} \", number)  \n    Next  \n    Console.WriteLine()  \n    ' Output: 9 8 7 6 5 4 3  \n  \n    Console.ReadKey()  \nEnd Sub  \n  \nPublic Class Stack(Of T)  \n    Implements IEnumerable(Of T)  \n  \n    Private values As T() = New T(99) {}  \n    Private top As Integer = 0  \n  \n    Public Sub Push(ByVal t As T)  \n        values(top) = t  \n        top = top + 1  \n    End Sub  \n  \n    Public Function Pop() As T  \n        top = top - 1  \n        Return values(top)  \n    End Function  \n  \n    ' This function implements the GetEnumerator method. It allows  \n    ' an instance of the class to be used in a For Each statement.  \n    Public Iterator Function GetEnumerator() As IEnumerator(Of T) _  \n        Implements IEnumerable(Of T).GetEnumerator  \n  \n        For index As Integer = top - 1 To 0 Step -1  \n            Yield values(index)  \n        Next  \n    End Function  \n  \n    Public Iterator Function GetEnumerator1() As IEnumerator _  \n        Implements IEnumerable.GetEnumerator  \n  \n        Yield GetEnumerator()  \n    End Function  \n  \n    Public ReadOnly Property TopToBottom() As IEnumerable(Of T)  \n        Get  \n            Return Me  \n        End Get  \n    End Property  \n  \n    Public ReadOnly Iterator Property BottomToTop As IEnumerable(Of T)  \n        Get  \n            For index As Integer = 0 To top - 1  \n                Yield values(index)  \n            Next  \n        End Get  \n    End Property  \n  \n    Public Iterator Function TopN(ByVal itemsFromTop As Integer) _  \n        As IEnumerable(Of T)  \n  \n        ' Return less than itemsFromTop if necessary.  \n        Dim startIndex As Integer =  \n            If(itemsFromTop >= top, 0, top - itemsFromTop)  \n  \n        For index As Integer = top - 1 To startIndex Step -1  \n            Yield values(index)  \n        Next  \n    End Function  \nEnd Class  \n  \n```  \n  \n##  <a name=\"BKMK_SyntaxInformation\"></a> Syntax Information  \n An iterator can occur as a method or `get` accessor. An iterator cannot occur in an event, instance constructor, static constructor, or static destructor.  \n  \n An implicit conversion must exist from the expression type in the `Yield` statement to the return type of the iterator.  \n  \n In Visual Basic, an iterator method cannot have any `ByRef` parameters.  \n  \n In Visual Basic, \"Yield\" is not a reserved word and has special meaning only when it is used in an `Iterator` method or `get` accessor.  \n  \n##  <a name=\"BKMK_Technical\"></a> Technical Implementation  \n Although you write an iterator as a method, the compiler translates it into a nested class that is, in effect, a state machine. This class keeps track of the position of the iterator as long the `For Each...Next` loop in the client code continues.  \n  \n To see what the compiler does, you can use the Ildasm.exe tool to view the Microsoft intermediate language code that is generated for an iterator method.  \n  \n When you create an iterator for a [class](../../../csharp/language-reference/keywords/class.md) or [struct](../../../csharp/language-reference/keywords/struct.md), you do not have to implement the whole <xref:System.Collections.IEnumerator> interface. When the compiler detects the iterator, it automatically generates the `Current`, `MoveNext`, and `Dispose` methods of the <xref:System.Collections.IEnumerator> or <xref:System.Collections.Generic.IEnumerator%601> interface.  \n  \n On each successive iteration of the `For Each…Next` loop (or the direct call to `IEnumerator.MoveNext`), the next iterator code body resumes after the previous `Yield` statement. It then continues to the next `Yield` statement until the end of the iterator body is reached, or until an `Exit Function` or `Return` statement is encountered.  \n  \n Iterators do not support the <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName> method. To re-iterate from the start, you must obtain a new iterator.  \n  \n For additional information, see the [Visual Basic Language Specification](../../../visual-basic/reference/language-specification.md).  \n  \n##  <a name=\"BKMK_UseOfIterators\"></a> Use of Iterators  \n Iterators enable you to maintain the simplicity of a `For Each` loop when you need to use complex code to populate a list sequence. This can be useful when you want to do the following:  \n  \n-   Modify the list sequence after the first `For Each` loop iteration.  \n  \n-   Avoid fully loading a large list before the first iteration of a `For Each` loop. An example is a paged fetch to load a batch of table rows. Another example is the <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> method, which implements iterators within the .NET Framework.  \n  \n-   Encapsulate building the list in the iterator. In the iterator method, you can build the list and then yield each result in a loop.  \n  \n## See Also  \n <xref:System.Collections.Generic>   \n <xref:System.Collections.Generic.IEnumerable%601>   \n [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md)   \n [Yield Statement](../../../visual-basic/language-reference/statements/yield-statement.md)   \n [Iterator](../../../visual-basic/language-reference/modifiers/iterator.md)","nodes":[{"pos":[4,410],"nodes":[{"content":"Iterators (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,41],"content":"Iterators (Visual Basic) | Microsoft Docs","nodes":[{"content":"Iterators (Visual Basic) | Microsoft Docs","pos":[0,41]}]}],"pos":[6,50],"yaml":true}],"content":"title: \"Iterators (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: f26b5c1e-fe9d-4004-b287-da7919d717ae\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[417,441],"content":"Iterators (Visual Basic)","linkify":"Iterators (Visual Basic)","nodes":[{"content":"Iterators (Visual Basic)","pos":[0,24]}]},{"pos":[442,521],"content":"An <bpt id=\"p1\">*</bpt>iterator<ept id=\"p1\">*</ept> can be used to step through collections such as lists and arrays.","source":"An *iterator* can be used to step through collections such as lists and arrays."},{"content":"An iterator method or <ph id=\"ph1\">`get`</ph> accessor performs a custom iteration over a collection.","pos":[528,611],"source":"An iterator method or `get` accessor performs a custom iteration over a collection."},{"content":"An iterator method uses the <bpt id=\"p1\">[</bpt>Yield<ept id=\"p1\">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> statement to return each element one at a time.","pos":[612,767],"source":" An iterator method uses the [Yield](../../../visual-basic/language-reference/statements/yield-statement.md) statement to return each element one at a time."},{"content":"When a <ph id=\"ph1\">`Yield`</ph> statement is reached, the current location in code is remembered.","pos":[768,848],"source":" When a `Yield` statement is reached, the current location in code is remembered."},{"content":"Execution is restarted from that location the next time the iterator function is called.","pos":[849,937]},{"pos":[944,1128],"content":"You consume an iterator from client code by using a <bpt id=\"p1\">[</bpt>For Each…Next<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> statement, or by using a LINQ query.","source":"You consume an iterator from client code by using a [For Each…Next](../../../visual-basic/language-reference/statements/for-each-next-statement.md) statement, or by using a LINQ query."},{"content":"In the following example, the first iteration of the <ph id=\"ph1\">`For Each`</ph> loop causes execution to proceed  in the <ph id=\"ph2\">`SomeNumbers`</ph> iterator method until the first <ph id=\"ph3\">`Yield`</ph> statement is reached.","pos":[1135,1315],"source":"In the following example, the first iteration of the `For Each` loop causes execution to proceed  in the `SomeNumbers` iterator method until the first `Yield` statement is reached."},{"content":"This iteration returns a value of 3, and the current location in the iterator method is retained.","pos":[1316,1413]},{"content":"On the next iteration of the loop, execution in the iterator method continues from where it left off, again stopping when it reaches a <ph id=\"ph1\">`Yield`</ph> statement.","pos":[1414,1567],"source":" On the next iteration of the loop, execution in the iterator method continues from where it left off, again stopping when it reaches a `Yield` statement."},{"content":"This iteration returns a value of 5, and the current location in the iterator method is again retained.","pos":[1568,1671]},{"content":"The loop completes when the end of the iterator method is reached.","pos":[1672,1738]},{"pos":[2066,2311],"content":"The return type of an iterator method or <ph id=\"ph1\">`get`</ph> accessor can be <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Collections.IEnumerator&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>.","source":"The return type of an iterator method or `get` accessor can be <xref:System.Collections.IEnumerable>, <xref:System.Collections.Generic.IEnumerable%601>, <xref:System.Collections.IEnumerator>, or <xref:System.Collections.Generic.IEnumerator%601>."},{"pos":[2318,2392],"content":"You can use an <ph id=\"ph1\">`Exit Function`</ph> or <ph id=\"ph2\">`Return`</ph> statement to end the iteration.","source":"You can use an `Exit Function` or `Return` statement to end the iteration."},{"pos":[2399,2558],"content":"A Visual Basic iterator function or <ph id=\"ph1\">`get`</ph> accessor declaration includes an <bpt id=\"p1\">[</bpt>Iterator<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept> modifier.","source":"A Visual Basic iterator function or `get` accessor declaration includes an [Iterator](../../../visual-basic/language-reference/modifiers/iterator.md) modifier."},{"content":"Iterators were introduced in Visual Basic in Visual Studio 2012.","pos":[2565,2629]},{"pos":[2636,2653],"content":"<bpt id=\"p1\">**</bpt>In this topic<ept id=\"p1\">**</ept>","source":"**In this topic**"},{"pos":[2663,2702],"content":"<bpt id=\"p1\">[</bpt>Simple Iterator<ept id=\"p1\">](#BKMK_SimpleIterator)</ept>","source":"[Simple Iterator](#BKMK_SimpleIterator)"},{"pos":[2712,2764],"content":"<bpt id=\"p1\">[</bpt>Creating a Collection Class<ept id=\"p1\">](#BKMK_CollectionClass)</ept>","source":"[Creating a Collection Class](#BKMK_CollectionClass)"},{"pos":[2774,2803],"content":"<bpt id=\"p1\">[</bpt>Try Blocks<ept id=\"p1\">](#BKMK_TryBlocks)</ept>","source":"[Try Blocks](#BKMK_TryBlocks)"},{"pos":[2813,2856],"content":"<bpt id=\"p1\">[</bpt>Anonymous Methods<ept id=\"p1\">](#BKMK_AnonymousMethods)</ept>","source":"[Anonymous Methods](#BKMK_AnonymousMethods)"},{"pos":[2866,2922],"content":"<bpt id=\"p1\">[</bpt>Using Iterators with a Generic List<ept id=\"p1\">](#BKMK_GenericList)</ept>","source":"[Using Iterators with a Generic List](#BKMK_GenericList)"},{"pos":[2932,2977],"content":"<bpt id=\"p1\">[</bpt>Syntax Information<ept id=\"p1\">](#BKMK_SyntaxInformation)</ept>","source":"[Syntax Information](#BKMK_SyntaxInformation)"},{"pos":[2987,3030],"content":"<bpt id=\"p1\">[</bpt>Technical Implementation<ept id=\"p1\">](#BKMK_Technical)</ept>","source":"[Technical Implementation](#BKMK_Technical)"},{"pos":[3040,3080],"content":"<bpt id=\"p1\">[</bpt>Use of Iterators<ept id=\"p1\">](#BKMK_UseOfIterators)</ept>","source":"[Use of Iterators](#BKMK_UseOfIterators)"},{"pos":[3088,3364],"content":"[!NOTE]\n For all examples in the topic except the Simple Iterator example, include [Imports](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md) statements for the `System.Collections` and `System.Collections.Generic` namespaces.","leadings":["","> "],"nodes":[{"content":"For all examples in the topic except the Simple Iterator example, include <bpt id=\"p1\">[</bpt>Imports<ept id=\"p1\">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept> statements for the <ph id=\"ph1\">`System.Collections`</ph> and <ph id=\"ph2\">`System.Collections.Generic`</ph> namespaces.","pos":[9,274],"source":"For all examples in the topic except the Simple Iterator example, include [Imports](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md) statements for the `System.Collections` and `System.Collections.Generic` namespaces."}]},{"pos":[3374,3424],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_SimpleIterator\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Simple Iterator","linkify":"<a name=\"BKMK_SimpleIterator\"></a> Simple Iterator","source":"<a name=\"BKMK_SimpleIterator\"></a> Simple Iterator"},{"content":"The following example has a single <ph id=\"ph1\">`Yield`</ph> statement that is inside a <bpt id=\"p1\">[</bpt>For…Next<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> loop.","pos":[3428,3589],"source":"The following example has a single `Yield` statement that is inside a [For…Next](../../../visual-basic/language-reference/statements/for-next-statement.md) loop."},{"content":"In <ph id=\"ph1\">`Main`</ph>, each iteration of the <ph id=\"ph2\">`For Each`</ph> statement body creates a call to the iterator function, which proceeds to the next <ph id=\"ph3\">`Yield`</ph> statement.","pos":[3590,3735],"source":" In `Main`, each iteration of the `For Each` statement body creates a call to the iterator function, which proceeds to the next `Yield` statement."},{"pos":[4318,4381],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_CollectionClass\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Creating a Collection Class","linkify":"<a name=\"BKMK_CollectionClass\"></a> Creating a Collection Class","source":"<a name=\"BKMK_CollectionClass\"></a> Creating a Collection Class"},{"content":"In the following example, the <ph id=\"ph1\">`DaysOfTheWeek`</ph> class implements the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, which requires a <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> method.","pos":[4385,4580],"source":"In the following example, the `DaysOfTheWeek` class implements the <xref:System.Collections.IEnumerable> interface, which requires a <xref:System.Collections.IEnumerable.GetEnumerator%2A> method."},{"content":"The compiler implicitly calls the <ph id=\"ph1\">`GetEnumerator`</ph> method, which returns an <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator&gt;</ph>.","pos":[4581,4694],"source":" The compiler implicitly calls the `GetEnumerator` method, which returns an <xref:System.Collections.IEnumerator>."},{"pos":[4701,4853],"content":"The <ph id=\"ph1\">`GetEnumerator`</ph> method returns each string one at a time by using the <ph id=\"ph2\">`Yield`</ph> statement, and  an <ph id=\"ph3\">`Iterator`</ph> modifier is in the function declaration.","source":"The `GetEnumerator` method returns each string one at a time by using the `Yield` statement, and  an `Iterator` modifier is in the function declaration."},{"pos":[5528,5610],"content":"The following example creates a <ph id=\"ph1\">`Zoo`</ph> class that contains a collection of animals.","source":"The following example creates a `Zoo` class that contains a collection of animals."},{"content":"The <ph id=\"ph1\">`For Each`</ph> statement that refers to the class instance (<ph id=\"ph2\">`theZoo`</ph>) implicitly calls the <ph id=\"ph3\">`GetEnumerator`</ph> method.","pos":[5617,5731],"source":"The `For Each` statement that refers to the class instance (`theZoo`) implicitly calls the `GetEnumerator` method."},{"content":"The <ph id=\"ph1\">`For Each`</ph> statements that refer to the <ph id=\"ph2\">`Birds`</ph> and <ph id=\"ph3\">`Mammals`</ph> properties use the <ph id=\"ph4\">`AnimalsForType`</ph> named iterator method.","pos":[5732,5856],"source":" The `For Each` statements that refer to the `Birds` and `Mammals` properties use the `AnimalsForType` named iterator method."},{"pos":[8193,8233],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_TryBlocks\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Try Blocks","linkify":"<a name=\"BKMK_TryBlocks\"></a> Try Blocks","source":"<a name=\"BKMK_TryBlocks\"></a> Try Blocks"},{"content":"Visual Basic allows a <ph id=\"ph1\">`Yield`</ph> statement in the <ph id=\"ph2\">`Try`</ph> block of a <bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.","pos":[8237,8419],"source":"Visual Basic allows a `Yield` statement in the `Try` block of a [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)."},{"content":"A <ph id=\"ph1\">`Try`</ph> block that has a <ph id=\"ph2\">`Yield`</ph> statement can have <ph id=\"ph3\">`Catch`</ph> blocks, and can have a <ph id=\"ph4\">`Finally`</ph> block.","pos":[8420,8519],"source":" A `Try` block that has a `Yield` statement can have `Catch` blocks, and can have a `Finally` block."},{"content":"The following example includes <ph id=\"ph1\">`Try`</ph>, <ph id=\"ph2\">`Catch`</ph>, and <ph id=\"ph3\">`Finally`</ph> blocks in an iterator function.","pos":[8526,8618],"source":"The following example includes `Try`, `Catch`, and `Finally` blocks in an iterator function."},{"content":"The <ph id=\"ph1\">`Finally`</ph> block in the iterator function executes before the <ph id=\"ph2\">`For Each`</ph> iteration finishes.","pos":[8619,8714],"source":" The `Finally` block in the iterator function executes before the `For Each` iteration finishes."},{"pos":[9440,9514],"content":"A <ph id=\"ph1\">`Yield`</ph> statement cannot be inside a <ph id=\"ph2\">`Catch`</ph> block or a <ph id=\"ph3\">`Finally`</ph> block.","source":"A `Yield` statement cannot be inside a `Catch` block or a `Finally` block."},{"content":"If the <ph id=\"ph1\">`For Each`</ph> body (instead of the iterator method) throws an exception, a <ph id=\"ph2\">`Catch`</ph> block in the iterator function is not executed, but a <ph id=\"ph3\">`Finally`</ph> block in the iterator function is executed.","pos":[9521,9715],"source":"If the `For Each` body (instead of the iterator method) throws an exception, a `Catch` block in the iterator function is not executed, but a `Finally` block in the iterator function is executed."},{"content":"A <ph id=\"ph1\">`Catch`</ph> block inside an iterator function catches only exceptions that occur inside the iterator function.","pos":[9716,9824],"source":" A `Catch` block inside an iterator function catches only exceptions that occur inside the iterator function."},{"pos":[9834,9888],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_AnonymousMethods\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Anonymous Methods","linkify":"<a name=\"BKMK_AnonymousMethods\"></a> Anonymous Methods","source":"<a name=\"BKMK_AnonymousMethods\"></a> Anonymous Methods"},{"content":"In Visual Basic, an anonymous function can be an iterator function.","pos":[9892,9959]},{"content":"The following example illustrates this.","pos":[9960,9999]},{"content":"The following example has a non-iterator method that validates the arguments.","pos":[10359,10436]},{"content":"The method returns the result of an anonymous iterator that describes the collection elements.","pos":[10437,10531]},{"pos":[11392,11544],"content":"If validation is instead inside the iterator function, the validation cannot be performed until the start of the first iteration of the <ph id=\"ph1\">`For Each`</ph> body.","source":"If validation is instead inside the iterator function, the validation cannot be performed until the start of the first iteration of the `For Each` body."},{"pos":[11554,11621],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_GenericList\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Using Iterators with a Generic List","linkify":"<a name=\"BKMK_GenericList\"></a> Using Iterators with a Generic List","source":"<a name=\"BKMK_GenericList\"></a> Using Iterators with a Generic List"},{"content":"In the following example, the <ph id=\"ph1\">`Stack(Of T)`</ph> generic class implements the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> generic interface.","pos":[11625,11766],"source":"In the following example, the `Stack(Of T)` generic class implements the <xref:System.Collections.Generic.IEnumerable%601> generic interface."},{"content":"The <ph id=\"ph1\">`Push`</ph> method assigns values to an array of type <ph id=\"ph2\">`T`</ph>.","pos":[11767,11824],"source":" The `Push` method assigns values to an array of type `T`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method returns the array values by using the <ph id=\"ph2\">`Yield`</ph> statement.","pos":[11825,11959],"source":" The <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method returns the array values by using the `Yield` statement."},{"content":"In addition to the generic <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method, the non-generic <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> method must also be implemented.","pos":[11966,12171],"source":"In addition to the generic <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method, the non-generic <xref:System.Collections.IEnumerable.GetEnumerator%2A> method must also be implemented."},{"content":"This is because <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph>.","pos":[12172,12290],"source":" This is because <xref:System.Collections.Generic.IEnumerable%601> inherits from <xref:System.Collections.IEnumerable>."},{"content":"The non-generic implementation defers to the generic implementation.","pos":[12291,12359]},{"content":"The example uses named iterators to support various ways of iterating through the same collection of data.","pos":[12366,12472]},{"content":"These named iterators are the <ph id=\"ph1\">`TopToBottom`</ph> and <ph id=\"ph2\">`BottomToTop`</ph> properties, and the <ph id=\"ph3\">`TopN`</ph> method.","pos":[12473,12569],"source":" These named iterators are the `TopToBottom` and `BottomToTop` properties, and the `TopN` method."},{"pos":[12576,12647],"content":"The <ph id=\"ph1\">`BottomToTop`</ph> property declaration includes the <ph id=\"ph2\">`Iterator`</ph> keyword.","source":"The `BottomToTop` property declaration includes the `Iterator` keyword."},{"pos":[15482,15538],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_SyntaxInformation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Syntax Information","linkify":"<a name=\"BKMK_SyntaxInformation\"></a> Syntax Information","source":"<a name=\"BKMK_SyntaxInformation\"></a> Syntax Information"},{"content":"An iterator can occur as a method or <ph id=\"ph1\">`get`</ph> accessor.","pos":[15542,15594],"source":"An iterator can occur as a method or `get` accessor."},{"content":"An iterator cannot occur in an event, instance constructor, static constructor, or static destructor.","pos":[15595,15696]},{"pos":[15703,15822],"content":"An implicit conversion must exist from the expression type in the <ph id=\"ph1\">`Yield`</ph> statement to the return type of the iterator.","source":"An implicit conversion must exist from the expression type in the `Yield` statement to the return type of the iterator."},{"pos":[15829,15900],"content":"In Visual Basic, an iterator method cannot have any <ph id=\"ph1\">`ByRef`</ph> parameters.","source":"In Visual Basic, an iterator method cannot have any `ByRef` parameters."},{"pos":[15907,16042],"content":"In Visual Basic, \"Yield\" is not a reserved word and has special meaning only when it is used in an <ph id=\"ph1\">`Iterator`</ph> method or <ph id=\"ph2\">`get`</ph> accessor.","source":"In Visual Basic, \"Yield\" is not a reserved word and has special meaning only when it is used in an `Iterator` method or `get` accessor."},{"pos":[16052,16106],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_Technical\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Technical Implementation","linkify":"<a name=\"BKMK_Technical\"></a> Technical Implementation","source":"<a name=\"BKMK_Technical\"></a> Technical Implementation"},{"content":"Although you write an iterator as a method, the compiler translates it into a nested class that is, in effect, a state machine.","pos":[16110,16237]},{"content":"This class keeps track of the position of the iterator as long the <ph id=\"ph1\">`For Each...Next`</ph> loop in the client code continues.","pos":[16238,16357],"source":" This class keeps track of the position of the iterator as long the `For Each...Next` loop in the client code continues."},{"content":"To see what the compiler does, you can use the Ildasm.exe tool to view the Microsoft intermediate language code that is generated for an iterator method.","pos":[16364,16517]},{"content":"When you create an iterator for a <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](../../../csharp/language-reference/keywords/class.md)</ept> or <bpt id=\"p2\">[</bpt>struct<ept id=\"p2\">](../../../csharp/language-reference/keywords/struct.md)</ept>, you do not have to implement the whole <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.","pos":[16524,16775],"source":"When you create an iterator for a [class](../../../csharp/language-reference/keywords/class.md) or [struct](../../../csharp/language-reference/keywords/struct.md), you do not have to implement the whole <xref:System.Collections.IEnumerator> interface."},{"content":"When the compiler detects the iterator, it automatically generates the <ph id=\"ph1\">`Current`</ph>, <ph id=\"ph2\">`MoveNext`</ph>, and <ph id=\"ph3\">`Dispose`</ph> methods of the <ph id=\"ph4\">&lt;xref:System.Collections.IEnumerator&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> interface.","pos":[16776,17000],"source":" When the compiler detects the iterator, it automatically generates the `Current`, `MoveNext`, and `Dispose` methods of the <xref:System.Collections.IEnumerator> or <xref:System.Collections.Generic.IEnumerator%601> interface."},{"content":"On each successive iteration of the <ph id=\"ph1\">`For Each…Next`</ph> loop (or the direct call to <ph id=\"ph2\">`IEnumerator.MoveNext`</ph>), the next iterator code body resumes after the previous <ph id=\"ph3\">`Yield`</ph> statement.","pos":[17007,17185],"source":"On each successive iteration of the `For Each…Next` loop (or the direct call to `IEnumerator.MoveNext`), the next iterator code body resumes after the previous `Yield` statement."},{"content":"It then continues to the next <ph id=\"ph1\">`Yield`</ph> statement until the end of the iterator body is reached, or until an <ph id=\"ph2\">`Exit Function`</ph> or <ph id=\"ph3\">`Return`</ph> statement is encountered.","pos":[17186,17346],"source":" It then continues to the next `Yield` statement until the end of the iterator body is reached, or until an `Exit Function` or `Return` statement is encountered."},{"content":"Iterators do not support the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName&gt;</ph> method.","pos":[17353,17461],"source":"Iterators do not support the <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName> method."},{"content":"To re-iterate from the start, you must obtain a new iterator.","pos":[17462,17523]},{"pos":[17530,17663],"content":"For additional information, see the <bpt id=\"p1\">[</bpt>Visual Basic Language Specification<ept id=\"p1\">](../../../visual-basic/reference/language-specification.md)</ept>.","source":"For additional information, see the [Visual Basic Language Specification](../../../visual-basic/reference/language-specification.md)."},{"pos":[17673,17724],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_UseOfIterators\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> Use of Iterators","linkify":"<a name=\"BKMK_UseOfIterators\"></a> Use of Iterators","source":"<a name=\"BKMK_UseOfIterators\"></a> Use of Iterators"},{"content":"Iterators enable you to maintain the simplicity of a <ph id=\"ph1\">`For Each`</ph> loop when you need to use complex code to populate a list sequence.","pos":[17728,17859],"source":"Iterators enable you to maintain the simplicity of a `For Each` loop when you need to use complex code to populate a list sequence."},{"content":"This can be useful when you want to do the following:","pos":[17860,17913]},{"pos":[17923,17990],"content":"Modify the list sequence after the first <ph id=\"ph1\">`For Each`</ph> loop iteration.","source":"Modify the list sequence after the first `For Each` loop iteration."},{"content":"Avoid fully loading a large list before the first iteration of a <ph id=\"ph1\">`For Each`</ph> loop.","pos":[18000,18081],"source":"Avoid fully loading a large list before the first iteration of a `For Each` loop."},{"content":"An example is a paged fetch to load a batch of table rows.","pos":[18082,18140]},{"content":"Another example is the <ph id=\"ph1\">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> method, which implements iterators within the .NET Framework.","pos":[18141,18274],"source":" Another example is the <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> method, which implements iterators within the .NET Framework."},{"content":"Encapsulate building the list in the iterator.","pos":[18284,18330]},{"content":"In the iterator method, you can build the list and then yield each result in a loop.","pos":[18331,18415]},{"pos":[18424,18432],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic&gt;</ph>","pos":[18436,18469],"source":"<xref:System.Collections.Generic> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>","pos":[18474,18523],"source":"<xref:System.Collections.Generic.IEnumerable%601> "},{"content":"<bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[18528,18636],"source":"[For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Yield Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[18640,18730],"source":"[Yield Statement](../../../visual-basic/language-reference/statements/yield-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Iterator<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept>","pos":[18734,18808],"source":"[Iterator](../../../visual-basic/language-reference/modifiers/iterator.md)"}]}