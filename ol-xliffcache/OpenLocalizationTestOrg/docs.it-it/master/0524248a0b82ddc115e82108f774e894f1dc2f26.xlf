<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-handle-an-exception-using-try-catch.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0524248a0b82ddc115e82108f774e894f1dc2f26</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\exceptions\how-to-handle-an-exception-using-try-catch.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a5379644e5f0b064b93d496e37a881f25fd7555</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53fbc9a6d6fc2a7aafecc020ff2d33a4a7d4762a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Handle an Exception Using try-catch - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Handle an Exception Using try/catch (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The purpose of a <bpt id="p1">[</bpt>try-catch<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept> block is to catch and handle an exception generated by working code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Some exceptions can be handled in a <ph id="ph1">`catch`</ph> block and the problem solved without the exception being re-thrown; however, more often the only thing that you can do is make sure that the appropriate exception is thrown.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> is not the most appropriate exception: <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> makes more sense for the method because the error is caused by the <ph id="ph3">`index`</ph> argument passed in by the caller.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The code that causes an exception is enclosed in the <ph id="ph1">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`catch`</ph> statement is added immediately after to handle <ph id="ph2">`IndexOutOfRangeException`</ph>, if it occurs.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`catch`</ph> block handles the <ph id="ph2">`IndexOutOfRangeException`</ph> and throws the more appropriate <ph id="ph3">`ArgumentOutOfRangeException`</ph> exception instead.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In order to provide the caller with as much information as possible, consider specifying the original exception as the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> of the new exception.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property is <bpt id="p1">[</bpt>readonly<ept id="p1">](../../../csharp/language-reference/keywords/readonly.md)</ept>, you must assign it in the constructor of the new exception.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exceptions and Exception Handling<ept id="p1">](../../../csharp/programming-guide/exceptions/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Handling<ept id="p1">](../../../csharp/programming-guide/exceptions/exception-handling.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>