<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-use-spinwait-to-implement-a-two-phase-wait-operation.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00eabedc3c8f2795b36ddf095633f6ad9257fb56</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\how-to-use-spinwait-to-implement-a-two-phase-wait-operation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ab253c078ba8c59e558f48398c5a12951fef669</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c539fc9bd256106d39786187554c0f31fbb68df</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Use SpinWait to Implement a Two-Phase Wait Operation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use SpinWait to Implement a Two-Phase Wait Operation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.SpinWait?displayProperty=fullName&gt;</ph> object to implement a two-phase wait operation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the first phase, the synchronization object, a <ph id="ph1">`Latch`</ph>, spins for a few cycles while it checks whether the lock has become available.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the second phase, if the lock becomes available, then the <ph id="ph1">`Wait`</ph> method returns without using the <ph id="ph2">&lt;xref:System.Threading.ManualResetEvent?displayProperty=fullName&gt;</ph> to perform its wait; otherwise, <ph id="ph3">`Wait`</ph> performs the wait.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example shows a very basic implementation of a Latch synchronization primitive.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use this data structure when wait times are expected to be very short.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This example is for demonstration purposes only.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you require latch-type functionality in your program, consider using <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CDS_SpinWait#03<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/cds_spinwait/cs/spinwait03.cs#03)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CDS_SpinWait#03<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/cds_spinwait/vb/spinwait2.vb#03)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The latch uses the <ph id="ph1">&lt;xref:System.Threading.SpinWait&gt;</ph> object to spin in place only until the next call to <ph id="ph2">`SpinOnce`</ph> causes the <ph id="ph3">&lt;xref:System.Threading.SpinWait&gt;</ph> to yield the time slice of the thread.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>At that point, the latch causes its own context switch by calling <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> and passing in the remainder of the time-out value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The logging output shows how often the Latch was able to increase performance by acquiring the lock without using the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SpinWait<ept id="p1">](../../../docs/standard/threading/spinwait.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading Objects and Features<ept id="p1">](../../../docs/standard/threading/threading-objects-and-features.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>