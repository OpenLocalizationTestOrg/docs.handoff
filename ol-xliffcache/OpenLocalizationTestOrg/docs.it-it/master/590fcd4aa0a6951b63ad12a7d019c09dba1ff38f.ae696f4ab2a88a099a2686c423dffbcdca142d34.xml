{"content":"---\ntitle: \"Try...Catch...Finally Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Try...Catch...Finally\"\n  - \"vb.when\"\n  - \"vb.Finally\"\n  - \"vb.Catch\"\n  - \"vb.Try\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Try...Catch...Finally statements\"\n  - \"Try statement\"\n  - \"try-catch exception handling, Try...Catch...Finally statements\"\n  - \"error handling, while running code\"\n  - \"Try statement, Try...Catch...Finally\"\n  - \"Finally keyword [Visual Basic], Try...Catch...Finally\"\n  - \"Catch statement\"\n  - \"When keyword\"\n  - \"Visual Basic code, handling errors while running\"\n  - \"structured exception handling, Try...Catch...Finally statements\"\nms.assetid: d6488026-ccb3-42b8-a810-0d97b9d6472b\ncaps.latest.revision: 69\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Try...Catch...Finally Statement (Visual Basic)\nProvides a way to handle some or all possible errors that may occur in a given block of code, while still running code.  \n  \n## Syntax  \n  \n```  \nTry  \n    [ tryStatements ]  \n    [ Exit Try ]  \n[ Catch [ exception [ As type ] ] [ When expression ]  \n    [ catchStatements ]  \n    [ Exit Try ] ]  \n[ Catch ... ]  \n[ Finally  \n    [ finallyStatements ] ]  \nEnd Try  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`tryStatements`|Optional. Statement(s) where an error can occur. Can be a compound statement.|  \n|`Catch`|Optional. Multiple `Catch` blocks permitted. If an exception occurs when processing the `Try` block, each `Catch` statement is examined in textual order to determine whether it handles the exception, with `exception` representing the exception that has been thrown.|  \n|`exception`|Optional. Any variable name. The initial value of `exception` is the value of the thrown error. Used with `Catch` to specify the error caught. If omitted, the `Catch` statement catches any exception.|  \n|`type`|Optional. Specifies the type of class filter. If the value of `exception` is of the type specified by `type` or of a derived type, the identifier becomes bound to the exception object.|  \n|`When`|Optional. A `Catch` statement with a `When` clause catches exceptions only when `expression` evaluates to `True`. A `When` clause is applied only after checking the type of the exception, and `expression` may refer to the identifier representing the exception.|  \n|`expression`|Optional. Must be implicitly convertible to `Boolean`. Any expression that describes a generic filter. Typically used to filter by error number. Used with `When` keyword to specify circumstances under which the error is caught.|  \n|`catchStatements`|Optional. Statement(s) to handle errors that occur in the associated `Try` block. Can be a compound statement.|  \n|`Exit Try`|Optional. Keyword that breaks out of the `Try...Catch...Finally` structure. Execution resumes with the code immediately following the `End Try` statement. The `Finally` statement will still be executed. Not allowed in `Finally` blocks.|  \n|`Finally`|Optional. A `Finally` block is always executed when execution leaves any part of the `Try...Catch` statement.|  \n|`finallyStatements`|Optional. Statement(s) that are executed after all other error processing has occurred.|  \n|`End Try`|Terminates the `Try...Catch...Finally` structure.|  \n  \n## Remarks  \n If you expect that a particular exception might occur during a particular section of code, put the code in a `Try` block and use a `Catch` block to retain control and handle the exception if it occurs.  \n  \n A `Try…Catch` statement consists of a `Try` block followed by one or more `Catch` clauses, which specify handlers for various exceptions. When an exception is thrown in a `Try` block, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] looks for the `Catch` statement that handles the exception. If a matching `Catch` statement is not found, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] examines the method that called the current method, and so on up the call stack. If no `Catch` block is found, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] displays an unhandled exception message to the user and stops execution of the program.  \n  \n You can use more than one `Catch` statement in a `Try…Catch` statement. If you do this, the order of the `Catch` clauses is significant because they are examined in order. Catch the more specific exceptions before the less specific ones.  \n  \n The following `Catch` statement conditions are the least specific, and will catch all exceptions that derive from the <xref:System.Exception> class. You should ordinarily use one of these variations as the last `Catch` block in the `Try...Catch...Finally` structure, after catching all the specific exceptions you expect. Control flow can never reach a `Catch` block that follows either of these variations.  \n  \n-   The `type` is `Exception`, for example: `Catch ex As Exception`  \n  \n-   The statement has no `exception` variable, for example: `Catch`  \n  \n When a `Try…Catch…Finally` statement is nested in another `Try` block, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] first examines each `Catch` statement in the innermost `Try` block. If no matching `Catch` statement is found, the search proceeds to the `Catch` statements of the outer `Try…Catch…Finally` block.  \n  \n Local variables from a `Try` block are not available in a `Catch` block because they are separate blocks. If you want to use a variable in more than one block, declare the variable outside the `Try...Catch...Finally` structure.  \n  \n> [!TIP]\n>  The `Try…Catch…Finally` statement is available as an IntelliSense code snippet. In the Code Snippets Manager, expand **Code Patterns - If, For Each, Try Catch, Property, etc**, and then **Error Handling (Exceptions)**. For more information, see [Code Snippets](https://docs.microsoft.com/visualstudio/ide/code-snippets).  \n  \n## Finally Block  \n If you have one or more statements that must run before you exit the `Try` structure, use a `Finally` block. Control passes to the `Finally` block just before it passes out of the `Try…Catch` structure. This is true even if an exception occurs anywhere inside the `Try` structure.  \n  \n A `Finally` block is useful for running any code that must execute even if there is an exception. Control is passed to the `Finally` block regardless of how the `Try...Catch` block exits.  \n  \n The code in a `Finally` block runs even if your code encounters a `Return` statement in a `Try` or `Catch` block. Control does not pass from a `Try` or `Catch` block to the corresponding `Finally` block in the following cases:  \n  \n-   An [End Statement](../../../visual-basic/language-reference/statements/end-statement.md) is encountered in the `Try` or `Catch` block.  \n  \n-   A <xref:System.StackOverflowException> is thrown in the `Try` or `Catch` block.  \n  \n It is not valid to explicitly transfer execution into a `Finally` block. Transferring execution out of a `Finally` block is not valid, except through an exception.  \n  \n If a `Try` statement does not contain at least one `Catch` block, it must contain a `Finally` block.  \n  \n> [!TIP]\n>  If you do not have to catch specific exceptions, the `Using` statement behaves like a `Try…Finally` block, and guarantees disposal of the resources, regardless of how you exit the block. This is true even with an unhandled exception. For more information, see [Using Statement](../../../visual-basic/language-reference/statements/using-statement.md).  \n  \n## Exception Argument  \n The `Catch` block `exception` argument is an instance of the <xref:System.Exception> class or a class that derives from the `Exception` class. The `Exception` class instance corresponds to the error that occurred in the `Try` block.  \n  \n The properties of the `Exception` object help to identify the cause and location of an exception. For example, the <xref:System.Exception.StackTrace%2A> property lists the called methods that led to the exception, helping you find where the error occurred in the code. <xref:System.Exception.Message%2A> returns a message that describes the exception. <xref:System.Exception.HelpLink%2A> returns a link to an associated Help file. <xref:System.Exception.InnerException%2A> returns the `Exception` object that caused the current exception, or it returns `Nothing` if there is no original `Exception`.  \n  \n## Considerations When Using a Try…Catch Statement  \n Use a `Try…Catch` statement only to signal the occurrence of unusual or unanticipated program events. Reasons for this include the following:  \n  \n-   Catching exceptions at runtime creates additional overhead, and is likely to be slower than pre-checking to avoid exceptions.  \n  \n-   If a `Catch` block is not handled correctly, the exception might not be reported correctly to users.  \n  \n-   Exception handling makes a program more complex.  \n  \n You do not always need a `Try…Catch` statement to check for a condition that is likely to occur. The following example checks whether a file exists before trying to open it. This reduces the need for catching an exception thrown by the <xref:System.IO.File.OpenText%2A> method.  \n  \n [!code-vb[VbVbalrStatements#94](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_1.vb)]  \n  \n Ensure that code in `Catch` blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages. Otherwise, exceptions might remain unknown.  \n  \n## Async Methods  \n If you mark a method with the [Async](../../../visual-basic/language-reference/modifiers/async.md) modifier, you can use the [Await](../../../visual-basic/language-reference/operators/await-operator.md) operator in the method. A statement with the `Await` operator suspends execution of the method until the awaited task completes. The task represents ongoing work. When the task that's associated with the `Await` operator finishes, execution resumes in the same method. For more information, see [Control Flow in Async Programs](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md).  \n  \n A task returned by an Async method may end in a faulted state, indicating that it completed due to an unhandled exception. A task may also end in a canceled state, which results in an `OperationCanceledException` being thrown out of the await expression. To catch either type of exception, place the `Await` expression that's associated with the task in a `Try` block, and catch the exception in the `Catch` block. An example is provided later in this topic.  \n  \n A task can be in a faulted state because multiple exceptions were responsible for its faulting. For example, the task might be the result of a call to <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName>. When you await such a task, the caught exception is only one of the exceptions, and you can't predict which exception will be caught. An example is provided later in this topic.  \n  \n An `Await` expression can't be inside a `Catch` block or `Finally` block.  \n  \n## Iterators  \n An iterator function or `Get` accessor performs a custom iteration over a collection. An iterator uses a [Yield](../../../visual-basic/language-reference/statements/yield-statement.md) statement to return each element of the collection one at a time. You call an iterator function by using a [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md).  \n  \n A `Yield` statement can be inside a `Try` block. A `Try` block that contains a `Yield` statement can have `Catch` blocks, and can have a `Finally` block. See the \"Try Blocks in Visual Basic\" section of [Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7) for an example.  \n  \n A `Yield` statement cannot be inside a `Catch` block or a `Finally` block.  \n  \n If the `For Each` body (outside of the iterator function) throws an exception, a `Catch` block in the iterator function is not executed, but a `Finally` block in the iterator function is executed. A `Catch` block inside an iterator function catches only exceptions that occur inside the iterator function.  \n  \n## Partial-Trust Situations  \n In partial-trust situations, such as an application hosted on a network share, `Try...Catch...Finally` does not catch security exceptions that occur before the method that contains the call is invoked. The following example, when you put it on a server share and run from there, produces the error \"System.Security.SecurityException: Request Failed.\" For more information about security exceptions, see the <xref:System.Security.SecurityException> class.  \n  \n [!code-vb[VbVbalrStatements#85](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_2.vb)]  \n  \n In such a partial-trust situation, you have to put the `Process.Start` statement in a separate `Sub`. The initial call to the `Sub` will fail. This enables `Try...Catch` to catch it before the `Sub` that contains `Process.Start` is started and the security exception produced.  \n  \n## Example  \n The following example illustrates the structure of the `Try...Catch...Finally` statement.  \n  \n [!code-vb[VbVbalrStatements#86](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_3.vb)]  \n  \n## Example  \n In the following example, the `CreateException` method throws a `NullReferenceException`. The code that generates the exception is not in a `Try` block. Therefore, the `CreateException` method does not handle the exception. The `RunSample` method does handle the exception because the call to the `CreateException` method is in a `Try` block.  \n  \n The example includes `Catch` statements for several types of exceptions, ordered from the most specific to the most general.  \n  \n [!code-vb[VbVbalrStatements#91](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_4.vb)]  \n  \n## Example  \n The following example shows how to use a `Catch When` statement to filter on a conditional expression. If the conditional expression evaluates to `True`, the code in the `Catch` block runs.  \n  \n [!code-vb[VbVbalrStatements#92](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_5.vb)]  \n  \n## Example  \n The following example has a `Try…Catch` statement that is contained in a `Try` block. The inner `Catch` block throws an exception that has its `InnerException` property set to the original exception. The outer `Catch` block reports its own exception and the inner exception.  \n  \n [!code-vb[VbVbalrStatements#93](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_6.vb)]  \n  \n## Example  \n The following example illustrates exception handling for async methods. To catch an exception that applies to an async task, the `Await` expression is in a `Try` block of the caller, and the exception is caught in the `Catch` block.  \n  \n Uncomment the `Throw New Exception` line in the example to demonstrate exception handling. The exception is caught in the `Catch` block, the task's `IsFaulted` property is set to `True`, and the task's `Exception.InnerException` property is set to the exception.  \n  \n Uncomment the `Throw New OperationCancelledException` line to demonstrate what happens when you cancel an asynchronous process. The exception is caught in the `Catch` block, and the task's `IsCanceled` property is set to `True`. However, under some conditions that don't apply to this example, `IsFaulted` is set to `True` and `IsCanceled` is set to `False`.  \n  \n [!code-vb[csAsyncExceptions#1](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_7.vb)]  \n  \n## Example  \n The following example illustrates exception handling where multiple tasks can result in multiple exceptions. The `Try` block has the `Await` expression for the task that <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName> returned. The task is complete when the three tasks to which <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName> is applied are complete.  \n  \n Each of the three tasks causes an exception. The `Catch` block iterates through the exceptions, which are found in the `Exception.InnerExceptions` property of the task that `Task.WhenAll` returned.  \n  \n [!code-vb[csAsyncExceptions#3](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_8.vb)]  \n  \n## See Also  \n <xref:Microsoft.VisualBasic.Information.Err%2A>   \n <xref:System.Exception>   \n [Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md)   \n [On Error Statement](../../../visual-basic/language-reference/statements/on-error-statement.md)   \n [Best Practices for Using Code Snippets](https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets)   \n [Exception Handling](https://msdn.microsoft.com/library/dd997415)   \n [Throw Statement](../../../visual-basic/language-reference/statements/throw-statement.md)","nodes":[{"pos":[4,1092],"nodes":[{"content":"Try...Catch...Finally Statement (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,63],"content":"Try...Catch...Finally Statement (Visual Basic) | Microsoft Docs","nodes":[{"content":"Try...Catch...Finally Statement (Visual Basic) | Microsoft Docs","pos":[0,63]}]}],"pos":[6,72],"yaml":true}],"content":"title: \"Try...Catch...Finally Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Try...Catch...Finally\"\n  - \"vb.when\"\n  - \"vb.Finally\"\n  - \"vb.Catch\"\n  - \"vb.Try\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Try...Catch...Finally statements\"\n  - \"Try statement\"\n  - \"try-catch exception handling, Try...Catch...Finally statements\"\n  - \"error handling, while running code\"\n  - \"Try statement, Try...Catch...Finally\"\n  - \"Finally keyword [Visual Basic], Try...Catch...Finally\"\n  - \"Catch statement\"\n  - \"When keyword\"\n  - \"Visual Basic code, handling errors while running\"\n  - \"structured exception handling, Try...Catch...Finally statements\"\nms.assetid: d6488026-ccb3-42b8-a810-0d97b9d6472b\ncaps.latest.revision: 69\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[1099,1145],"content":"Try...Catch...Finally Statement (Visual Basic)","linkify":"Try...Catch...Finally Statement (Visual Basic)","nodes":[{"content":"Try...Catch...Finally Statement (Visual Basic)","pos":[0,46]}]},{"content":"Provides a way to handle some or all possible errors that may occur in a given block of code, while still running code.","pos":[1146,1265]},{"pos":[1274,1280],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1524,1529],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[1536,1540]},{"content":"Definition","pos":[1541,1551]},{"content":"Optional.","pos":[1584,1593]},{"content":"Statement(s) where an error can occur.","pos":[1594,1632]},{"content":"Can be a compound statement.","pos":[1633,1661]},{"content":"Optional.","pos":[1674,1683]},{"content":"Multiple <ph id=\"ph1\">`Catch`</ph> blocks permitted.","pos":[1684,1718],"source":" Multiple `Catch` blocks permitted."},{"content":"If an exception occurs when processing the <ph id=\"ph1\">`Try`</ph> block, each <ph id=\"ph2\">`Catch`</ph> statement is examined in textual order to determine whether it handles the exception, with <ph id=\"ph3\">`exception`</ph> representing the exception that has been thrown.","pos":[1719,1939],"source":" If an exception occurs when processing the `Try` block, each `Catch` statement is examined in textual order to determine whether it handles the exception, with `exception` representing the exception that has been thrown."},{"content":"Optional.","pos":[1956,1965]},{"content":"Any variable name.","pos":[1966,1984]},{"content":"The initial value of <ph id=\"ph1\">`exception`</ph> is the value of the thrown error.","pos":[1985,2051],"source":" The initial value of `exception` is the value of the thrown error."},{"content":"Used with <ph id=\"ph1\">`Catch`</ph> to specify the error caught.","pos":[2052,2098],"source":" Used with `Catch` to specify the error caught."},{"content":"If omitted, the <ph id=\"ph1\">`Catch`</ph> statement catches any exception.","pos":[2099,2155],"source":" If omitted, the `Catch` statement catches any exception."},{"content":"Optional.","pos":[2167,2176]},{"content":"Specifies the type of class filter.","pos":[2177,2212]},{"content":"If the value of <ph id=\"ph1\">`exception`</ph> is of the type specified by <ph id=\"ph2\">`type`</ph> or of a derived type, the identifier becomes bound to the exception object.","pos":[2213,2351],"source":" If the value of `exception` is of the type specified by `type` or of a derived type, the identifier becomes bound to the exception object."},{"content":"Optional.","pos":[2363,2372]},{"content":"A <ph id=\"ph1\">`Catch`</ph> statement with a <ph id=\"ph2\">`When`</ph> clause catches exceptions only when <ph id=\"ph3\">`expression`</ph> evaluates to <ph id=\"ph4\">`True`</ph>.","pos":[2373,2476],"source":" A `Catch` statement with a `When` clause catches exceptions only when `expression` evaluates to `True`."},{"content":"A <ph id=\"ph1\">`When`</ph> clause is applied only after checking the type of the exception, and <ph id=\"ph2\">`expression`</ph> may refer to the identifier representing the exception.","pos":[2477,2623],"source":" A `When` clause is applied only after checking the type of the exception, and `expression` may refer to the identifier representing the exception."},{"content":"Optional.","pos":[2641,2650]},{"content":"Must be implicitly convertible to <ph id=\"ph1\">`Boolean`</ph>.","pos":[2651,2695],"source":" Must be implicitly convertible to `Boolean`."},{"content":"Any expression that describes a generic filter.","pos":[2696,2743]},{"content":"Typically used to filter by error number.","pos":[2744,2785]},{"content":"Used with <ph id=\"ph1\">`When`</ph> keyword to specify circumstances under which the error is caught.","pos":[2786,2868],"source":" Used with `When` keyword to specify circumstances under which the error is caught."},{"content":"Optional.","pos":[2891,2900]},{"content":"Statement(s) to handle errors that occur in the associated <ph id=\"ph1\">`Try`</ph> block.","pos":[2901,2972],"source":" Statement(s) to handle errors that occur in the associated `Try` block."},{"content":"Can be a compound statement.","pos":[2973,3001]},{"content":"Optional.","pos":[3017,3026]},{"content":"Keyword that breaks out of the <ph id=\"ph1\">`Try...Catch...Finally`</ph> structure.","pos":[3027,3092],"source":" Keyword that breaks out of the `Try...Catch...Finally` structure."},{"content":"Execution resumes with the code immediately following the <ph id=\"ph1\">`End Try`</ph> statement.","pos":[3093,3171],"source":" Execution resumes with the code immediately following the `End Try` statement."},{"content":"The <ph id=\"ph1\">`Finally`</ph> statement will still be executed.","pos":[3172,3219],"source":" The `Finally` statement will still be executed."},{"content":"Not allowed in <ph id=\"ph1\">`Finally`</ph> blocks.","pos":[3220,3252],"source":" Not allowed in `Finally` blocks."},{"content":"Optional.","pos":[3267,3276]},{"content":"A <ph id=\"ph1\">`Finally`</ph> block is always executed when execution leaves any part of the <ph id=\"ph2\">`Try...Catch`</ph> statement.","pos":[3277,3376],"source":" A `Finally` block is always executed when execution leaves any part of the `Try...Catch` statement."},{"content":"Optional.","pos":[3401,3410]},{"content":"Statement(s) that are executed after all other error processing has occurred.","pos":[3411,3488]},{"pos":[3503,3552],"content":"Terminates the <ph id=\"ph1\">`Try...Catch...Finally`</ph> structure.","source":"Terminates the `Try...Catch...Finally` structure."},{"pos":[3562,3569],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3573,3774],"content":"If you expect that a particular exception might occur during a particular section of code, put the code in a <ph id=\"ph1\">`Try`</ph> block and use a <ph id=\"ph2\">`Catch`</ph> block to retain control and handle the exception if it occurs.","source":"If you expect that a particular exception might occur during a particular section of code, put the code in a `Try` block and use a `Catch` block to retain control and handle the exception if it occurs."},{"content":"A <ph id=\"ph1\">`Try…Catch`</ph> statement consists of a <ph id=\"ph2\">`Try`</ph> block followed by one or more <ph id=\"ph3\">`Catch`</ph> clauses, which specify handlers for various exceptions.","pos":[3781,3918],"source":"A `Try…Catch` statement consists of a `Try` block followed by one or more `Catch` clauses, which specify handlers for various exceptions."},{"content":"When an exception is thrown in a <ph id=\"ph1\">`Try`</ph> block, <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> looks for the <ph id=\"ph3\">`Catch`</ph> statement that handles the exception.","pos":[3919,4114],"source":" When an exception is thrown in a `Try` block, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] looks for the `Catch` statement that handles the exception."},{"content":"If a matching <ph id=\"ph1\">`Catch`</ph> statement is not found, <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> examines the method that called the current method, and so on up the call stack.","pos":[4115,4331],"source":" If a matching `Catch` statement is not found, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] examines the method that called the current method, and so on up the call stack."},{"content":"If no <ph id=\"ph1\">`Catch`</ph> block is found, <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> displays an unhandled exception message to the user and stops execution of the program.","pos":[4332,4539],"source":" If no `Catch` block is found, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] displays an unhandled exception message to the user and stops execution of the program."},{"content":"You can use more than one <ph id=\"ph1\">`Catch`</ph> statement in a <ph id=\"ph2\">`Try…Catch`</ph> statement.","pos":[4546,4617],"source":"You can use more than one `Catch` statement in a `Try…Catch` statement."},{"content":"If you do this, the order of the <ph id=\"ph1\">`Catch`</ph> clauses is significant because they are examined in order.","pos":[4618,4717],"source":" If you do this, the order of the `Catch` clauses is significant because they are examined in order."},{"content":"Catch the more specific exceptions before the less specific ones.","pos":[4718,4783]},{"content":"The following <ph id=\"ph1\">`Catch`</ph> statement conditions are the least specific, and will catch all exceptions that derive from the <ph id=\"ph2\">&lt;xref:System.Exception&gt;</ph> class.","pos":[4790,4938],"source":"The following `Catch` statement conditions are the least specific, and will catch all exceptions that derive from the <xref:System.Exception> class."},{"content":"You should ordinarily use one of these variations as the last <ph id=\"ph1\">`Catch`</ph> block in the <ph id=\"ph2\">`Try...Catch...Finally`</ph> structure, after catching all the specific exceptions you expect.","pos":[4939,5111],"source":" You should ordinarily use one of these variations as the last `Catch` block in the `Try...Catch...Finally` structure, after catching all the specific exceptions you expect."},{"content":"Control flow can never reach a <ph id=\"ph1\">`Catch`</ph> block that follows either of these variations.","pos":[5112,5197],"source":" Control flow can never reach a `Catch` block that follows either of these variations."},{"pos":[5207,5270],"content":"The <ph id=\"ph1\">`type`</ph> is <ph id=\"ph2\">`Exception`</ph>, for example: <ph id=\"ph3\">`Catch ex As Exception`</ph>","source":"The `type` is `Exception`, for example: `Catch ex As Exception`"},{"pos":[5280,5343],"content":"The statement has no <ph id=\"ph1\">`exception`</ph> variable, for example: <ph id=\"ph2\">`Catch`</ph>","source":"The statement has no `exception` variable, for example: `Catch`"},{"content":"When a <ph id=\"ph1\">`Try…Catch…Finally`</ph> statement is nested in another <ph id=\"ph2\">`Try`</ph> block, <ph id=\"ph3\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> first examines each <ph id=\"ph4\">`Catch`</ph> statement in the innermost <ph id=\"ph5\">`Try`</ph> block.","pos":[5350,5578],"source":"When a `Try…Catch…Finally` statement is nested in another `Try` block, [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] first examines each `Catch` statement in the innermost `Try` block."},{"content":"If no matching <ph id=\"ph1\">`Catch`</ph> statement is found, the search proceeds to the <ph id=\"ph2\">`Catch`</ph> statements of the outer <ph id=\"ph3\">`Try…Catch…Finally`</ph> block.","pos":[5579,5707],"source":" If no matching `Catch` statement is found, the search proceeds to the `Catch` statements of the outer `Try…Catch…Finally` block."},{"content":"Local variables from a <ph id=\"ph1\">`Try`</ph> block are not available in a <ph id=\"ph2\">`Catch`</ph> block because they are separate blocks.","pos":[5714,5819],"source":"Local variables from a `Try` block are not available in a `Catch` block because they are separate blocks."},{"content":"If you want to use a variable in more than one block, declare the variable outside the <ph id=\"ph1\">`Try...Catch...Finally`</ph> structure.","pos":[5820,5941],"source":" If you want to use a variable in more than one block, declare the variable outside the `Try...Catch...Finally` structure."},{"pos":[5949,6279],"content":"[!TIP]\n The `Try…Catch…Finally` statement is available as an IntelliSense code snippet. In the Code Snippets Manager, expand **Code Patterns - If, For Each, Try Catch, Property, etc**, and then **Error Handling (Exceptions)**. For more information, see [Code Snippets](https://docs.microsoft.com/visualstudio/ide/code-snippets).","leadings":["","> "],"nodes":[{"content":"The `Try…Catch…Finally` statement is available as an IntelliSense code snippet. In the Code Snippets Manager, expand **Code Patterns - If, For Each, Try Catch, Property, etc**, and then **Error Handling (Exceptions)**. For more information, see [Code Snippets](https://docs.microsoft.com/visualstudio/ide/code-snippets).","pos":[8,328],"nodes":[{"content":"The <ph id=\"ph1\">`Try…Catch…Finally`</ph> statement is available as an IntelliSense code snippet.","pos":[0,79],"source":"The `Try…Catch…Finally` statement is available as an IntelliSense code snippet."},{"content":"In the Code Snippets Manager, expand <bpt id=\"p1\">**</bpt>Code Patterns - If, For Each, Try Catch, Property, etc<ept id=\"p1\">**</ept>, and then <bpt id=\"p2\">**</bpt>Error Handling (Exceptions)<ept id=\"p2\">**</ept>.","pos":[80,218],"source":" In the Code Snippets Manager, expand **Code Patterns - If, For Each, Try Catch, Property, etc**, and then **Error Handling (Exceptions)**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Code Snippets<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/code-snippets)</ept>.","pos":[219,320],"source":" For more information, see [Code Snippets](https://docs.microsoft.com/visualstudio/ide/code-snippets)."}]}]},{"pos":[6288,6301],"content":"Finally Block","linkify":"Finally Block","nodes":[{"content":"Finally Block","pos":[0,13]}]},{"content":"If you have one or more statements that must run before you exit the <ph id=\"ph1\">`Try`</ph> structure, use a <ph id=\"ph2\">`Finally`</ph> block.","pos":[6305,6413],"source":"If you have one or more statements that must run before you exit the `Try` structure, use a `Finally` block."},{"content":"Control passes to the <ph id=\"ph1\">`Finally`</ph> block just before it passes out of the <ph id=\"ph2\">`Try…Catch`</ph> structure.","pos":[6414,6507],"source":" Control passes to the `Finally` block just before it passes out of the `Try…Catch` structure."},{"content":"This is true even if an exception occurs anywhere inside the <ph id=\"ph1\">`Try`</ph> structure.","pos":[6508,6585],"source":" This is true even if an exception occurs anywhere inside the `Try` structure."},{"content":"A <ph id=\"ph1\">`Finally`</ph> block is useful for running any code that must execute even if there is an exception.","pos":[6592,6689],"source":"A `Finally` block is useful for running any code that must execute even if there is an exception."},{"content":"Control is passed to the <ph id=\"ph1\">`Finally`</ph> block regardless of how the <ph id=\"ph2\">`Try...Catch`</ph> block exits.","pos":[6690,6779],"source":" Control is passed to the `Finally` block regardless of how the `Try...Catch` block exits."},{"content":"The code in a <ph id=\"ph1\">`Finally`</ph> block runs even if your code encounters a <ph id=\"ph2\">`Return`</ph> statement in a <ph id=\"ph3\">`Try`</ph> or <ph id=\"ph4\">`Catch`</ph> block.","pos":[6786,6899],"source":"The code in a `Finally` block runs even if your code encounters a `Return` statement in a `Try` or `Catch` block."},{"content":"Control does not pass from a <ph id=\"ph1\">`Try`</ph> or <ph id=\"ph2\">`Catch`</ph> block to the corresponding <ph id=\"ph3\">`Finally`</ph> block in the following cases:","pos":[6900,7012],"source":" Control does not pass from a `Try` or `Catch` block to the corresponding `Finally` block in the following cases:"},{"pos":[7022,7156],"content":"An <bpt id=\"p1\">[</bpt>End Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/end-statement.md)</ept> is encountered in the <ph id=\"ph1\">`Try`</ph> or <ph id=\"ph2\">`Catch`</ph> block.","source":"An [End Statement](../../../visual-basic/language-reference/statements/end-statement.md) is encountered in the `Try` or `Catch` block."},{"pos":[7166,7245],"content":"A <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph> is thrown in the <ph id=\"ph2\">`Try`</ph> or <ph id=\"ph3\">`Catch`</ph> block.","source":"A <xref:System.StackOverflowException> is thrown in the `Try` or `Catch` block."},{"content":"It is not valid to explicitly transfer execution into a <ph id=\"ph1\">`Finally`</ph> block.","pos":[7252,7324],"source":"It is not valid to explicitly transfer execution into a `Finally` block."},{"content":"Transferring execution out of a <ph id=\"ph1\">`Finally`</ph> block is not valid, except through an exception.","pos":[7325,7415],"source":" Transferring execution out of a `Finally` block is not valid, except through an exception."},{"pos":[7422,7522],"content":"If a <ph id=\"ph1\">`Try`</ph> statement does not contain at least one <ph id=\"ph2\">`Catch`</ph> block, it must contain a <ph id=\"ph3\">`Finally`</ph> block.","source":"If a `Try` statement does not contain at least one `Catch` block, it must contain a `Finally` block."},{"pos":[7530,7890],"content":"[!TIP]\n If you do not have to catch specific exceptions, the `Using` statement behaves like a `Try…Finally` block, and guarantees disposal of the resources, regardless of how you exit the block. This is true even with an unhandled exception. For more information, see [Using Statement](../../../visual-basic/language-reference/statements/using-statement.md).","leadings":["","> "],"nodes":[{"content":"If you do not have to catch specific exceptions, the `Using` statement behaves like a `Try…Finally` block, and guarantees disposal of the resources, regardless of how you exit the block. This is true even with an unhandled exception. For more information, see [Using Statement](../../../visual-basic/language-reference/statements/using-statement.md).","pos":[8,358],"nodes":[{"content":"If you do not have to catch specific exceptions, the <ph id=\"ph1\">`Using`</ph> statement behaves like a <ph id=\"ph2\">`Try…Finally`</ph> block, and guarantees disposal of the resources, regardless of how you exit the block.","pos":[0,186],"source":"If you do not have to catch specific exceptions, the `Using` statement behaves like a `Try…Finally` block, and guarantees disposal of the resources, regardless of how you exit the block."},{"content":"This is true even with an unhandled exception.","pos":[187,233]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/using-statement.md)</ept>.","pos":[234,350],"source":" For more information, see [Using Statement](../../../visual-basic/language-reference/statements/using-statement.md)."}]}]},{"pos":[7899,7917],"content":"Exception Argument","linkify":"Exception Argument","nodes":[{"content":"Exception Argument","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">`Catch`</ph> block <ph id=\"ph2\">`exception`</ph> argument is an instance of the <ph id=\"ph3\">&lt;xref:System.Exception&gt;</ph> class or a class that derives from the <ph id=\"ph4\">`Exception`</ph> class.","pos":[7921,8063],"source":"The `Catch` block `exception` argument is an instance of the <xref:System.Exception> class or a class that derives from the `Exception` class."},{"content":"The <ph id=\"ph1\">`Exception`</ph> class instance corresponds to the error that occurred in the <ph id=\"ph2\">`Try`</ph> block.","pos":[8064,8153],"source":" The `Exception` class instance corresponds to the error that occurred in the `Try` block."},{"content":"The properties of the <ph id=\"ph1\">`Exception`</ph> object help to identify the cause and location of an exception.","pos":[8160,8257],"source":"The properties of the `Exception` object help to identify the cause and location of an exception."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property lists the called methods that led to the exception, helping you find where the error occurred in the code.","pos":[8258,8428],"source":" For example, the <xref:System.Exception.StackTrace%2A> property lists the called methods that led to the exception, helping you find where the error occurred in the code."},{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> returns a message that describes the exception.","pos":[8429,8511],"source":" <xref:System.Exception.Message%2A> returns a message that describes the exception."},{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.HelpLink%2A&gt;</ph> returns a link to an associated Help file.","pos":[8512,8590],"source":" <xref:System.Exception.HelpLink%2A> returns a link to an associated Help file."},{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> returns the <ph id=\"ph2\">`Exception`</ph> object that caused the current exception, or it returns <ph id=\"ph3\">`Nothing`</ph> if there is no original <ph id=\"ph4\">`Exception`</ph>.","pos":[8591,8759],"source":" <xref:System.Exception.InnerException%2A> returns the `Exception` object that caused the current exception, or it returns `Nothing` if there is no original `Exception`."},{"pos":[8768,8815],"content":"Considerations When Using a Try…Catch Statement","linkify":"Considerations When Using a Try…Catch Statement","nodes":[{"content":"Considerations When Using a Try…Catch Statement","pos":[0,47]}]},{"content":"Use a <ph id=\"ph1\">`Try…Catch`</ph> statement only to signal the occurrence of unusual or unanticipated program events.","pos":[8819,8920],"source":"Use a `Try…Catch` statement only to signal the occurrence of unusual or unanticipated program events."},{"content":"Reasons for this include the following:","pos":[8921,8960]},{"content":"Catching exceptions at runtime creates additional overhead, and is likely to be slower than pre-checking to avoid exceptions.","pos":[8970,9095]},{"pos":[9105,9205],"content":"If a <ph id=\"ph1\">`Catch`</ph> block is not handled correctly, the exception might not be reported correctly to users.","source":"If a `Catch` block is not handled correctly, the exception might not be reported correctly to users."},{"content":"Exception handling makes a program more complex.","pos":[9215,9263]},{"content":"You do not always need a <ph id=\"ph1\">`Try…Catch`</ph> statement to check for a condition that is likely to occur.","pos":[9270,9366],"source":"You do not always need a `Try…Catch` statement to check for a condition that is likely to occur."},{"content":"The following example checks whether a file exists before trying to open it.","pos":[9367,9443]},{"content":"This reduces the need for catching an exception thrown by the <ph id=\"ph1\">&lt;xref:System.IO.File.OpenText%2A&gt;</ph> method.","pos":[9444,9547],"source":" This reduces the need for catching an exception thrown by the <xref:System.IO.File.OpenText%2A> method."},{"pos":[9554,9700],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#94<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#94](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_1.vb)]"},{"content":"Ensure that code in <ph id=\"ph1\">`Catch`</ph> blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages.","pos":[9707,9843],"source":"Ensure that code in `Catch` blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages."},{"content":"Otherwise, exceptions might remain unknown.","pos":[9844,9887]},{"pos":[9896,9909],"content":"Async Methods","linkify":"Async Methods","nodes":[{"content":"Async Methods","pos":[0,13]}]},{"content":"If you mark a method with the <bpt id=\"p1\">[</bpt>Async<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/async.md)</ept> modifier, you can use the <bpt id=\"p2\">[</bpt>Await<ept id=\"p2\">](../../../visual-basic/language-reference/operators/await-operator.md)</ept> operator in the method.","pos":[9913,10139],"source":"If you mark a method with the [Async](../../../visual-basic/language-reference/modifiers/async.md) modifier, you can use the [Await](../../../visual-basic/language-reference/operators/await-operator.md) operator in the method."},{"content":"A statement with the <ph id=\"ph1\">`Await`</ph> operator suspends execution of the method until the awaited task completes.","pos":[10140,10244],"source":" A statement with the `Await` operator suspends execution of the method until the awaited task completes."},{"content":"The task represents ongoing work.","pos":[10245,10278]},{"content":"When the task that's associated with the <ph id=\"ph1\">`Await`</ph> operator finishes, execution resumes in the same method.","pos":[10279,10384],"source":" When the task that's associated with the `Await` operator finishes, execution resumes in the same method."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Control Flow in Async Programs<ept id=\"p1\">](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept>.","pos":[10385,10534],"source":" For more information, see [Control Flow in Async Programs](../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)."},{"content":"A task returned by an Async method may end in a faulted state, indicating that it completed due to an unhandled exception.","pos":[10541,10663]},{"content":"A task may also end in a canceled state, which results in an <ph id=\"ph1\">`OperationCanceledException`</ph> being thrown out of the await expression.","pos":[10664,10795],"source":" A task may also end in a canceled state, which results in an `OperationCanceledException` being thrown out of the await expression."},{"content":"To catch either type of exception, place the <ph id=\"ph1\">`Await`</ph> expression that's associated with the task in a <ph id=\"ph2\">`Try`</ph> block, and catch the exception in the <ph id=\"ph3\">`Catch`</ph> block.","pos":[10796,10955],"source":" To catch either type of exception, place the `Await` expression that's associated with the task in a `Try` block, and catch the exception in the `Catch` block."},{"content":"An example is provided later in this topic.","pos":[10956,10999]},{"content":"A task can be in a faulted state because multiple exceptions were responsible for its faulting.","pos":[11006,11101]},{"content":"For example, the task might be the result of a call to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph>.","pos":[11102,11228],"source":" For example, the task might be the result of a call to <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName>."},{"content":"When you await such a task, the caught exception is only one of the exceptions, and you can't predict which exception will be caught.","pos":[11229,11362]},{"content":"An example is provided later in this topic.","pos":[11363,11406]},{"pos":[11413,11486],"content":"An <ph id=\"ph1\">`Await`</ph> expression can't be inside a <ph id=\"ph2\">`Catch`</ph> block or <ph id=\"ph3\">`Finally`</ph> block.","source":"An `Await` expression can't be inside a `Catch` block or `Finally` block."},{"pos":[11495,11504],"content":"Iterators","linkify":"Iterators","nodes":[{"content":"Iterators","pos":[0,9]}]},{"content":"An iterator function or <ph id=\"ph1\">`Get`</ph> accessor performs a custom iteration over a collection.","pos":[11508,11593],"source":"An iterator function or `Get` accessor performs a custom iteration over a collection."},{"content":"An iterator uses a <bpt id=\"p1\">[</bpt>Yield<ept id=\"p1\">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept> statement to return each element of the collection one at a time.","pos":[11594,11758],"source":" An iterator uses a [Yield](../../../visual-basic/language-reference/statements/yield-statement.md) statement to return each element of the collection one at a time."},{"content":"You call an iterator function by using a <bpt id=\"p1\">[</bpt>For Each...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.","pos":[11759,11908],"source":" You call an iterator function by using a [For Each...Next Statement](../../../visual-basic/language-reference/statements/for-each-next-statement.md)."},{"content":"A <ph id=\"ph1\">`Yield`</ph> statement can be inside a <ph id=\"ph2\">`Try`</ph> block.","pos":[11915,11963],"source":"A `Yield` statement can be inside a `Try` block."},{"content":"A <ph id=\"ph1\">`Try`</ph> block that contains a <ph id=\"ph2\">`Yield`</ph> statement can have <ph id=\"ph3\">`Catch`</ph> blocks, and can have a <ph id=\"ph4\">`Finally`</ph> block.","pos":[11964,12068],"source":" A `Try` block that contains a `Yield` statement can have `Catch` blocks, and can have a `Finally` block."},{"content":"See the \"Try Blocks in Visual Basic\" section of <bpt id=\"p1\">[</bpt>Iterators<ept id=\"p1\">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept> for an example.","pos":[12069,12216],"source":" See the \"Try Blocks in Visual Basic\" section of [Iterators](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7) for an example."},{"pos":[12223,12297],"content":"A <ph id=\"ph1\">`Yield`</ph> statement cannot be inside a <ph id=\"ph2\">`Catch`</ph> block or a <ph id=\"ph3\">`Finally`</ph> block.","source":"A `Yield` statement cannot be inside a `Catch` block or a `Finally` block."},{"content":"If the <ph id=\"ph1\">`For Each`</ph> body (outside of the iterator function) throws an exception, a <ph id=\"ph2\">`Catch`</ph> block in the iterator function is not executed, but a <ph id=\"ph3\">`Finally`</ph> block in the iterator function is executed.","pos":[12304,12500],"source":"If the `For Each` body (outside of the iterator function) throws an exception, a `Catch` block in the iterator function is not executed, but a `Finally` block in the iterator function is executed."},{"content":"A <ph id=\"ph1\">`Catch`</ph> block inside an iterator function catches only exceptions that occur inside the iterator function.","pos":[12501,12609],"source":" A `Catch` block inside an iterator function catches only exceptions that occur inside the iterator function."},{"pos":[12618,12642],"content":"Partial-Trust Situations","linkify":"Partial-Trust Situations","nodes":[{"content":"Partial-Trust Situations","pos":[0,24]}]},{"content":"In partial-trust situations, such as an application hosted on a network share, <ph id=\"ph1\">`Try...Catch...Finally`</ph> does not catch security exceptions that occur before the method that contains the call is invoked.","pos":[12646,12847],"source":"In partial-trust situations, such as an application hosted on a network share, `Try...Catch...Finally` does not catch security exceptions that occur before the method that contains the call is invoked."},{"content":"The following example, when you put it on a server share and run from there, produces the error \"System.Security.SecurityException: Request Failed.\"","pos":[12848,12996]},{"content":"For more information about security exceptions, see the <ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph> class.","pos":[12997,13100],"source":" For more information about security exceptions, see the <xref:System.Security.SecurityException> class."},{"pos":[13107,13253],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#85<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#85](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_2.vb)]"},{"content":"In such a partial-trust situation, you have to put the <ph id=\"ph1\">`Process.Start`</ph> statement in a separate <ph id=\"ph2\">`Sub`</ph>.","pos":[13260,13361],"source":"In such a partial-trust situation, you have to put the `Process.Start` statement in a separate `Sub`."},{"content":"The initial call to the <ph id=\"ph1\">`Sub`</ph> will fail.","pos":[13362,13402],"source":" The initial call to the `Sub` will fail."},{"content":"This enables <ph id=\"ph1\">`Try...Catch`</ph> to catch it before the <ph id=\"ph2\">`Sub`</ph> that contains <ph id=\"ph3\">`Process.Start`</ph> is started and the security exception produced.","pos":[13403,13536],"source":" This enables `Try...Catch` to catch it before the `Sub` that contains `Process.Start` is started and the security exception produced."},{"pos":[13545,13552],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13556,13645],"content":"The following example illustrates the structure of the <ph id=\"ph1\">`Try...Catch...Finally`</ph> statement.","source":"The following example illustrates the structure of the `Try...Catch...Finally` statement."},{"pos":[13652,13798],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#86<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#86](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_3.vb)]"},{"pos":[13807,13814],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, the <ph id=\"ph1\">`CreateException`</ph> method throws a <ph id=\"ph2\">`NullReferenceException`</ph>.","pos":[13818,13907],"source":"In the following example, the `CreateException` method throws a `NullReferenceException`."},{"content":"The code that generates the exception is not in a <ph id=\"ph1\">`Try`</ph> block.","pos":[13908,13970],"source":" The code that generates the exception is not in a `Try` block."},{"content":"Therefore, the <ph id=\"ph1\">`CreateException`</ph> method does not handle the exception.","pos":[13971,14041],"source":" Therefore, the `CreateException` method does not handle the exception."},{"content":"The <ph id=\"ph1\">`RunSample`</ph> method does handle the exception because the call to the <ph id=\"ph2\">`CreateException`</ph> method is in a <ph id=\"ph3\">`Try`</ph> block.","pos":[14042,14160],"source":" The `RunSample` method does handle the exception because the call to the `CreateException` method is in a `Try` block."},{"pos":[14167,14291],"content":"The example includes <ph id=\"ph1\">`Catch`</ph> statements for several types of exceptions, ordered from the most specific to the most general.","source":"The example includes `Catch` statements for several types of exceptions, ordered from the most specific to the most general."},{"pos":[14298,14444],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#91<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_4.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#91](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_4.vb)]"},{"pos":[14453,14460],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to use a <ph id=\"ph1\">`Catch When`</ph> statement to filter on a conditional expression.","pos":[14464,14566],"source":"The following example shows how to use a `Catch When` statement to filter on a conditional expression."},{"content":"If the conditional expression evaluates to <ph id=\"ph1\">`True`</ph>, the code in the <ph id=\"ph2\">`Catch`</ph> block runs.","pos":[14567,14653],"source":" If the conditional expression evaluates to `True`, the code in the `Catch` block runs."},{"pos":[14660,14806],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#92<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_5.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#92](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_5.vb)]"},{"pos":[14815,14822],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example has a <ph id=\"ph1\">`Try…Catch`</ph> statement that is contained in a <ph id=\"ph2\">`Try`</ph> block.","pos":[14826,14911],"source":"The following example has a `Try…Catch` statement that is contained in a `Try` block."},{"content":"The inner <ph id=\"ph1\">`Catch`</ph> block throws an exception that has its <ph id=\"ph2\">`InnerException`</ph> property set to the original exception.","pos":[14912,15025],"source":" The inner `Catch` block throws an exception that has its `InnerException` property set to the original exception."},{"content":"The outer <ph id=\"ph1\">`Catch`</ph> block reports its own exception and the inner exception.","pos":[15026,15100],"source":" The outer `Catch` block reports its own exception and the inner exception."},{"pos":[15107,15253],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#93<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_6.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#93](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/try-catch-finally-statement_6.vb)]"},{"pos":[15262,15269],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example illustrates exception handling for async methods.","pos":[15273,15344]},{"content":"To catch an exception that applies to an async task, the <ph id=\"ph1\">`Await`</ph> expression is in a <ph id=\"ph2\">`Try`</ph> block of the caller, and the exception is caught in the <ph id=\"ph3\">`Catch`</ph> block.","pos":[15345,15505],"source":" To catch an exception that applies to an async task, the `Await` expression is in a `Try` block of the caller, and the exception is caught in the `Catch` block."},{"content":"Uncomment the <ph id=\"ph1\">`Throw New Exception`</ph> line in the example to demonstrate exception handling.","pos":[15512,15602],"source":"Uncomment the `Throw New Exception` line in the example to demonstrate exception handling."},{"content":"The exception is caught in the <ph id=\"ph1\">`Catch`</ph> block, the task's <ph id=\"ph2\">`IsFaulted`</ph> property is set to <ph id=\"ph3\">`True`</ph>, and the task's <ph id=\"ph4\">`Exception.InnerException`</ph> property is set to the exception.","pos":[15603,15774],"source":" The exception is caught in the `Catch` block, the task's `IsFaulted` property is set to `True`, and the task's `Exception.InnerException` property is set to the exception."},{"content":"Uncomment the <ph id=\"ph1\">`Throw New OperationCancelledException`</ph> line to demonstrate what happens when you cancel an asynchronous process.","pos":[15781,15908],"source":"Uncomment the `Throw New OperationCancelledException` line to demonstrate what happens when you cancel an asynchronous process."},{"content":"The exception is caught in the <ph id=\"ph1\">`Catch`</ph> block, and the task's <ph id=\"ph2\">`IsCanceled`</ph> property is set to <ph id=\"ph3\">`True`</ph>.","pos":[15909,16009],"source":" The exception is caught in the `Catch` block, and the task's `IsCanceled` property is set to `True`."},{"content":"However, under some conditions that don't apply to this example, <ph id=\"ph1\">`IsFaulted`</ph> is set to <ph id=\"ph2\">`True`</ph> and <ph id=\"ph3\">`IsCanceled`</ph> is set to <ph id=\"ph4\">`False`</ph>.","pos":[16010,16139],"source":" However, under some conditions that don't apply to this example, `IsFaulted` is set to `True` and `IsCanceled` is set to `False`."},{"pos":[16146,16279],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>csAsyncExceptions#1<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_7.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[csAsyncExceptions#1](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_7.vb)]"},{"pos":[16288,16295],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example illustrates exception handling where multiple tasks can result in multiple exceptions.","pos":[16299,16407]},{"content":"The <ph id=\"ph1\">`Try`</ph> block has the <ph id=\"ph2\">`Await`</ph> expression for the task that <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph> returned.","pos":[16408,16549],"source":" The `Try` block has the `Await` expression for the task that <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName> returned."},{"content":"The task is complete when the three tasks to which <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph> is applied are complete.","pos":[16550,16696],"source":" The task is complete when the three tasks to which <xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName> is applied are complete."},{"content":"Each of the three tasks causes an exception.","pos":[16703,16747]},{"content":"The <ph id=\"ph1\">`Catch`</ph> block iterates through the exceptions, which are found in the <ph id=\"ph2\">`Exception.InnerExceptions`</ph> property of the task that <ph id=\"ph3\">`Task.WhenAll`</ph> returned.","pos":[16748,16900],"source":" The `Catch` block iterates through the exceptions, which are found in the `Exception.InnerExceptions` property of the task that `Task.WhenAll` returned."},{"pos":[16907,17040],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>csAsyncExceptions#3<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_8.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[csAsyncExceptions#3](../../../csharp/language-reference/keywords/codesnippet/VisualBasic/try-catch-finally-statement_8.vb)]"},{"pos":[17049,17057],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Information.Err%2A&gt;</ph>","pos":[17061,17108],"source":"<xref:Microsoft.VisualBasic.Information.Err%2A> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>","pos":[17113,17136],"source":"<xref:System.Exception> "},{"content":"<bpt id=\"p1\">[</bpt>Exit Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[17141,17229],"source":"[Exit Statement](../../../visual-basic/language-reference/statements/exit-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>On Error Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[17233,17329],"source":"[On Error Statement](../../../visual-basic/language-reference/statements/on-error-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>Best Practices for Using Code Snippets<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets)</ept><ph id=\"ph1\"> </ph>","pos":[17333,17458],"source":"[Best Practices for Using Code Snippets](https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets) "},{"content":"<bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](https://msdn.microsoft.com/library/dd997415)</ept><ph id=\"ph1\"> </ph>","pos":[17462,17528],"source":"[Exception Handling](https://msdn.microsoft.com/library/dd997415) "},{"content":"<bpt id=\"p1\">[</bpt>Throw Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/throw-statement.md)</ept>","pos":[17532,17621],"source":"[Throw Statement](../../../visual-basic/language-reference/statements/throw-statement.md)"}]}