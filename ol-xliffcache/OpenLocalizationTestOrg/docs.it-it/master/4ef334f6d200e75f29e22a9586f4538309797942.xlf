<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="fixed-statement.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ef334f6d200e75f29e22a9586f4538309797942</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\fixed-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">561ca5bc3bcbfde6b80de1dca71892f71fe3de3c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d3e4526c48bbae67ff40c7ec9f3650589376c60</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>fixed Statement - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>fixed Statement (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`fixed`</ph> statement prevents the garbage collector from relocating a movable variable.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`fixed`</ph> statement is only permitted in an <bpt id="p1">[</bpt>unsafe<ept id="p1">](unsafe.md)</ept> context.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`fixed`</ph> can also be used to create <bpt id="p1">[</bpt>fixed size buffers<ept id="p1">](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`fixed`</ph> statement sets a pointer to a managed variable and "pins" that variable during the execution of the statement.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pointers to movable managed variables are useful only in a <ph id="ph1">`fixed`</ph> context.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Without a <ph id="ph1">`fixed`</ph> context, garbage collection could relocate the variables unpredictably.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The C# compiler only lets you assign a pointer to a managed variable in a <ph id="ph1">`fixed`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can initialize a pointer by using an array, a string, a fixed-size buffer, or the address of a variable.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of variable addresses, arrays, and strings.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about fixed-size buffers, see <bpt id="p1">[</bpt>Fixed Size Buffers<ept id="p1">](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.3, the <ph id="ph1">`fixed`</ph> statement operates on additional types beyond arrays, strings, fixed-size buffers, or unmanaged variables.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Any type that implements a method named <ph id="ph1">`GetPinnableReference`</ph> can be pinned.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetPinnableReference`</ph> must return a <ph id="ph2">`ref`</ph> variable to an unmanaged type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See the topic on <bpt id="p1">[</bpt>pointer types<ept id="p1">](../../programming-guide/unsafe-code-pointers/pointer-types.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The .NET types <ph id="ph1">&lt;xref:System.Span%601?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.ReadOnlySpan%601?displayProperty=nameWithType&gt;</ph> introduced in .NET Core 2.0 make use of this pattern and can be pinned.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is shown in the following example:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you are creating types that should participate in this pattern, see <ph id="ph1">&lt;xref:System.Span%601.GetPinnableReference?displayProperty=nameWithType&gt;</ph> for an example of implementing the pattern.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Multiple pointers can be initialized in one statement if they are all the same type:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To initialize pointers of different types, simply nest <ph id="ph1">`fixed`</ph> statements, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>After the code in the statement is executed, any pinned variables are unpinned and subject to garbage collection.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Therefore, do not point to those variables outside the <ph id="ph1">`fixed`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The variables declared in the <ph id="ph1">`fixed`</ph> statement are scoped to that statement, making this easier:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Pointers initialized in <ph id="ph1">`fixed`</ph> statements are readonly variables.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you want to modify the pointer value, you must declare a second pointer variable, and modify that.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The variable declared in the <ph id="ph1">`fixed`</ph> statement cannot be modified:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In unsafe mode, you can allocate memory on the stack, where it is not subject to garbage collection and therefore does not need to be pinned.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>stackalloc<ept id="p1">](stackalloc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unsafe<ept id="p1">](unsafe.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fixed Size Buffers<ept id="p1">](../../programming-guide/unsafe-code-pointers/fixed-size-buffers.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>