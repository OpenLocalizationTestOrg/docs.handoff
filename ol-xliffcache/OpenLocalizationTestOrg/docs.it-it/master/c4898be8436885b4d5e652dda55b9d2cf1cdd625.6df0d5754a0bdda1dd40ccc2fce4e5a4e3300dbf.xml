{"content":"---\ntitle: \"Compiler Error CS0686 | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"error-reference\"\nf1_keywords: \n  - \"CS0686\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"CS0686\"\nms.assetid: 821ea0c9-87d8-4902-8f0b-dcad72312132\ncaps.latest.revision: 7\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Compiler Error CS0686\nAccessor 'accessor' cannot implement interface member 'member' for type 'type'. Use an explicit interface implementation.  \n  \n Suggested: This error can occur when implementing an interface that contains method names which conflict with the auto-generated methods associated with a property or event. The get/set methods for properties are generated as get_property and set_property, and the add/remove methods for events are generated as add_event and remove_event. If an interface contains either of these methods, a conflict occurs. To avoid this error, implement the methods using an explicit interface implementation. To do this, specify the function as:  \n  \n```  \n  \n      Interface.get_property() { /* */ }  \nInterface.set_property() { /* */ }  \n```  \n  \n## Example  \n The following sample generates CS0686:  \n  \n```  \n// CS0686.cs  \ninterface I  \n{  \n    int get_P();  \n}  \n  \nclass C : I  \n{  \n    public int P  \n    {  \n        get { return 1; }  // CS0686  \n    }  \n}  \n// But the following is valid:  \nclass D : I  \n{  \n    int I.get_P() { return 1; }  \n    public static void Main() {}  \n}  \n```  \n  \n## Example  \n This error can also occur when declaring events.  The event construct automatically generates the `add_``event` and `remove_``event` methods, which could conflict with the methods of the same name in an interface, as in the following sample:  \n  \n```  \n// CS0686b.cs  \nusing System;  \n  \ninterface I  \n{  \n    void add_OnMyEvent(EventHandler e);  \n}  \n  \nclass C : I  \n{  \n    public event EventHandler OnMyEvent  \n    {  \n        add { }  // CS0686  \n        remove { }  \n    }  \n}  \n  \n// Correct (using explicit interface implementation):  \nclass D : I  \n{  \n    void I.add_OnMyEvent(EventHandler e) {}  \n    public static void Main() {}  \n}  \n```","nodes":[{"pos":[12,50],"content":"Compiler Error CS0686 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error CS0686 | Microsoft Docs","pos":[0,38]}]},{"pos":[542,563],"content":"Compiler Error CS0686","linkify":"Compiler Error CS0686","nodes":[{"content":"Compiler Error CS0686","pos":[0,21]}]},{"content":"Accessor 'accessor' cannot implement interface member 'member' for type 'type'.","pos":[564,643]},{"content":"Use an explicit interface implementation.","pos":[644,685]},{"content":"Suggested: This error can occur when implementing an interface that contains method names which conflict with the auto-generated methods associated with a property or event.","pos":[692,865]},{"content":"The get/set methods for properties are generated as get_property and set_property, and the add/remove methods for events are generated as add_event and remove_event.","pos":[866,1031]},{"content":"If an interface contains either of these methods, a conflict occurs.","pos":[1032,1100]},{"content":"To avoid this error, implement the methods using an explicit interface implementation.","pos":[1101,1187]},{"content":"To do this, specify the function as:","pos":[1188,1224]},{"pos":[1331,1338],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following sample generates CS0686:","pos":[1342,1380]},{"pos":[1683,1690],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This error can also occur when declaring events.","pos":[1694,1742]},{"content":"The event construct automatically generates the <ph id=\"ph1\">`add_``event`</ph> and <ph id=\"ph2\">`remove_``event`</ph> methods, which could conflict with the methods of the same name in an interface, as in the following sample:","pos":[1744,1935],"source":"  The event construct automatically generates the `add_``event` and `remove_``event` methods, which could conflict with the methods of the same name in an interface, as in the following sample:"}]}