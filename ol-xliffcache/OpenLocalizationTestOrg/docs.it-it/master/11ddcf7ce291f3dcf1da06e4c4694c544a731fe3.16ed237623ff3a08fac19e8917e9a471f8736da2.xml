{"content":"---\ntitle: \"How to: Create and Run a Long Running Workflow | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: c0043c89-2192-43c9-986d-3ecec4dd8c9c\ncaps.latest.revision: 40\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# How to: Create and Run a Long Running Workflow\nOne of the central features of [!INCLUDE[wf](../../../includes/wf-md.md)] is the runtimeâ€™s ability to persist and unload idle workflows to a database. The steps in [How to: Run a Workflow](../../../docs/framework/windows-workflow-foundation/how-to-run-a-workflow.md) demonstrated the basics of workflow hosting using a console application. Examples were shown of starting workflows, workflow lifecycle handlers, and resuming bookmarks. In order to demonstrate workflow persistence effectively, a more complex workflow host is required that supports starting and resuming multiple workflow instances. This step in the tutorial demonstrates how to create a Windows form host application that supports starting and resuming multiple workflow instances, workflow persistence, and provides a basis for the advanced features such as tracking and versioning that are demonstrated in subsequent tutorial steps.  \n  \n> [!NOTE]\n>  This tutorial step and the subsequent steps use all three workflow types from [How to: Create a Workflow](../../../docs/framework/windows-workflow-foundation/how-to-create-a-workflow.md). If you did not complete all three types you can download a completed version of the steps from [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976).  \n  \n> [!NOTE]\n>  To download a completed version or view a video walkthrough of the tutorial, see [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976).  \n  \n## In this topic  \n  \n-   [To create the persistence database](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_CreatePersistenceDatabase)  \n  \n-   [To add the reference to the DurableInstancing assemblies](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddReference)  \n  \n-   [To create the workflow host form](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_CreateForm)  \n  \n-   [To add the properties and helper methods of the form](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddHelperMethods)  \n  \n-   [To configure the instance store, workflow lifecycle handlers, and extensions](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_ConfigureWorkflowApplication)  \n  \n-   [To enable starting and resuming multiple workflow types](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_WorkflowVersionMap)  \n  \n-   [To start a new workflow](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_StartWorkflow)  \n  \n-   [To resume a workflow](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_ResumeWorkflow)  \n  \n-   [To terminate a workflow](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_TerminateWorkflow)  \n  \n-   [To build and run the application](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_BuildAndRun)  \n  \n###  <a name=\"BKMK_CreatePersistenceDatabase\"></a> To create the persistence database  \n  \n1.  Open SQL Server Management Studio and connect to the local server, for example **.\\SQLEXPRESS**. Right-click the **Databases** node on the local server, and select **New Database**. Name the new database **WF45GettingStartedTutorial**, accept all other values, and select **OK**.  \n  \n    > [!NOTE]\n    >  Ensure that you have **Create Database** permission on the local server before creating the database.  \n  \n2.  Choose **Open**, **File** from the **File** menu. Browse to the following folder: `C:\\Windows\\Microsoft.NET\\Framework\\4.0.30319\\sql\\en`  \n  \n     Select the following two files and click **Open**.  \n  \n    -   SqlWorkflowInstanceStoreLogic.sql  \n  \n    -   SqlWorkflowInstanceStoreSchema.sql  \n  \n3.  Choose **SqlWorkflowInstanceStoreSchema.sql** from the **Window** menu. Ensure that **WF45GettingStartedTutorial** is selected in the **Available Databases** drop-down and choose **Execute** from the **Query** menu.  \n  \n4.  Choose **SqlWorkflowInstanceStoreLogic.sql** from the **Window** menu. Ensure that **WF45GettingStartedTutorial** is selected in the **Available Databases** drop-down and choose **Execute** from the **Query** menu.  \n  \n    > [!WARNING]\n    >  It is important to perform the previous two steps in the correct order. If the queries are executed out of order, errors occur and the persistence database is not configured correctly.  \n  \n###  <a name=\"BKMK_AddReference\"></a> To add the reference to the DurableInstancing assemblies  \n  \n1.  Right-click **NumberGuessWorkflowHost** in **Solution Explorer** and select **Add Reference**.  \n  \n2.  Select **Assemblies** from the **Add Reference** list, and type `DurableInstancing` into the **Search Assemblies** box. This filters the assemblies and makes the desired references easier to select.  \n  \n3.  Check the checkbox beside **System.Activities.DurableInstancing** and **System.Runtime.DurableInstancing** from the **Search Results** list, and click **OK**.  \n  \n###  <a name=\"BKMK_CreateForm\"></a> To create the workflow host form  \n  \n> [!NOTE]\n>  The steps in this procedure describe how to add and configure the form manually. If desired, you can download the solution files for the tutorial and add the completed form to the project. To download the tutorial files, see [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976). Once the files are downloaded, right-click **NumberGuessWorkflowHost** and choose **Add Reference**. Add a reference to **System.Windows.Forms** and **System.Drawing**. These references are added automatically if you add a new form from the **Add**, **New Item** menu, but must be added manually when importing a form. Once the references are added, right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Add**, **Existing Item**. Browse to the `Form` folder in the project files, select **WorkflowHostForm.cs** (or **WorkflowHostForm.vb**), and click **Add**. If you choose to import the form, then you can skip down to the next section, [To add the properties and helper methods of the form](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddHelperMethods).  \n  \n1.  Right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Add**, **New Item**.  \n  \n2.  In the **Installed** templates list, choose **Windows Form**, type `WorkflowHostForm` in the **Name** box, and click **Add**.  \n  \n3.  Configure the following properties on the form.  \n  \n    |Property|Value|  \n    |--------------|-----------|  \n    |FormBorderStyle|FixedSingle|  \n    |MaximizeBox|False|  \n    |Size|400, 420|  \n  \n4.  Add the following controls to the form in the order specified and configure the properties as directed.  \n  \n    |Control|Property: Value|  \n    |-------------|---------------------|  \n    |**Button**|Name: NewGame<br /><br /> Location: 13, 13<br /><br /> Size: 75, 23<br /><br /> Text: New Game|  \n    |**Label**|Location: 94, 18<br /><br /> Text: Guess a number from 1 to|  \n    |**ComboBox**|Name: NumberRange<br /><br /> DropDownStyle: DropDownList<br /><br /> Items: 10, 100, 1000<br /><br /> Location: 228, 12<br /><br /> Size: 143, 21|  \n    |**Label**|Location: 13, 43<br /><br /> Text: Workflow type|  \n    |**ComboBox**|Name: WorkflowType<br /><br /> DropDownStyle: DropDownList<br /><br /> Items: StateMachineNumberGuessWorkflow, FlowchartNumberGuessWorkflow, SequentialNumberGuessWorkflow<br /><br /> Location: 94, 40<br /><br /> Size: 277, 21|  \n    |**Label**|Name: WorkflowVersion<br /><br /> Location: 13, 362<br /><br /> Text: Workflow version|  \n    |**GroupBox**|Location: 13, 67<br /><br /> Size: 358, 287<br /><br /> Text: Game|  \n  \n    > [!NOTE]\n    >  When adding the following controls, put them into the GroupBox.  \n  \n    |Control|Property: Value|  \n    |-------------|---------------------|  \n    |**Label**|Location: 7, 20<br /><br /> Text: Workflow Instance Id|  \n    |**ComboBox**|Name: InstanceId<br /><br /> DropDownStyle: DropDownList<br /><br /> Location: 121, 17<br /><br /> Size: 227, 21|  \n    |**Label**|Location: 7, 47<br /><br /> Text: Guess|  \n    |**TextBox**|Name: Guess<br /><br /> Location: 50, 44<br /><br /> Size: 65, 20|  \n    |**Button**|Name: EnterGuess<br /><br /> Location: 121, 42<br /><br /> Size: 75, 23<br /><br /> Text: Enter Guess|  \n    |**Button**|Name: QuitGame<br /><br /> Location: 274, 42<br /><br /> Size: 75, 23<br /><br /> Text: Quit|  \n    |**TextBox**|Name: WorkflowStatus<br /><br /> Location: 10, 73<br /><br /> Multiline: True<br /><br /> ReadOnly: True<br /><br /> ScrollBars: Vertical<br /><br /> Size: 338, 208|  \n  \n5.  Set the **AcceptButton** property of the form to **EnterGuess**.  \n  \n The following example illustrates the completed form.  \n  \n ![WF45 Getting Started Tutorial Workflow Host Form](../../../docs/framework/windows-workflow-foundation/media/wf45gettingstartedtutorialworkflowhostform.png \"WF45GettingStartedTutorialWorkflowHostForm\")  \n  \n###  <a name=\"BKMK_AddHelperMethods\"></a> To add the properties and helper methods of the form  \n The steps in this section add properties and helper methods to the form class that configure the UI of the form to support running and resuming number guess workflows.  \n  \n1.  Right-click **WorkflowHostForm** in **Solution Explorer** and choose **View Code**.  \n  \n2.  Add the following `using` (or `Imports`) statements at the top of the file with the other `using` (or `Imports`) statements.  \n  \n    ```vb  \n    Imports System.Windows.Forms  \n    Imports System.Activities.DurableInstancing  \n    Imports System.Activities  \n    Imports System.Data.SqlClient  \n    Imports System.IO  \n    ```  \n  \n    ```csharp  \n    using System.Windows.Forms;  \n    using System.Activities.DurableInstancing;  \n    using System.Activities;  \n    using System.Data.SqlClient;  \n    using System.IO;  \n    ```  \n  \n3.  Add the following member declarations to the **WorkflowHostForm** class.  \n  \n    ```vb  \n    Const connectionString = \"Server=.\\SQLEXPRESS;Initial Catalog=WF45GettingStartedTutorial;Integrated Security=SSPI\"  \n    Dim store As SqlWorkflowInstanceStore  \n    Dim WorkflowStarting As Boolean  \n    ```  \n  \n    ```csharp  \n    const string connectionString = \"Server=.\\\\SQLEXPRESS;Initial Catalog=WF45GettingStartedTutorial;Integrated Security=SSPI\";  \n    SqlWorkflowInstanceStore store;  \n    bool WorkflowStarting;  \n    ```  \n  \n    > [!NOTE]\n    >  If your connection string is different, update `connectionString` to refer to your database.  \n  \n4.  Add a `WorkflowInstanceId` property to the `WorkflowFormHost` class.  \n  \n    ```vb  \n    Public ReadOnly Property WorkflowInstanceId() As Guid  \n        Get  \n            If InstanceId.SelectedIndex = -1 Then  \n                Return Guid.Empty  \n            Else  \n                Return New Guid(InstanceId.SelectedItem.ToString())  \n            End If  \n        End Get  \n    End Property  \n    ```  \n  \n    ```csharp  \n    public Guid WorkflowInstanceId  \n    {  \n        get  \n        {  \n            return InstanceId.SelectedIndex == -1 ? Guid.Empty : (Guid)InstanceId.SelectedItem;  \n        }  \n    }  \n    ```  \n  \n     The `InstanceId` combo box displays a list of persisted workflow instance ids, and the `WorkflowInstanceId` property returns the currently selected workflow.  \n  \n5.  Add a handler for the form `Load` event. To add the handler, switch to **Design View** for the form, click the **Events** icon at the top of the **Properties** window, and double-click **Load**.  \n  \n    ```vb  \n    Private Sub WorkflowHostForm_Load(sender As Object, e As EventArgs) Handles Me.Load  \n  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private void WorkflowHostForm_Load(object sender, EventArgs e)  \n    {  \n  \n    }  \n    ```  \n  \n6.  Add the following code to `WorkflowHostForm_Load`.  \n  \n    ```vb  \n    'Initialize the store and configure it so that it can be used for  \n    'multiple WorkflowApplication instances.  \n    store = New SqlWorkflowInstanceStore(connectionString)  \n    WorkflowApplication.CreateDefaultInstanceOwner(store, Nothing, WorkflowIdentityFilter.Any)  \n  \n    'Set default ComboBox selections.  \n    NumberRange.SelectedIndex = 0  \n    WorkflowType.SelectedIndex = 0  \n  \n    ListPersistedWorkflows()  \n    ```  \n  \n    ```csharp  \n    // Initialize the store and configure it so that it can be used for  \n    // multiple WorkflowApplication instances.  \n    store = new SqlWorkflowInstanceStore(connectionString);  \n    WorkflowApplication.CreateDefaultInstanceOwner(store, null, WorkflowIdentityFilter.Any);  \n  \n    // Set default ComboBox selections.  \n    NumberRange.SelectedIndex = 0;  \n    WorkflowType.SelectedIndex = 0;  \n  \n    ListPersistedWorkflows();  \n    ```  \n  \n     When the form loads, the `SqlWorkflowInstanceStore` is configured, the range and workflow type combo boxes are set to default values, and the persisted workflow instances are added to the `InstanceId` combo box.  \n  \n7.  Add a `SelectedIndexChanged` handler for `InstanceId`. To add the handler, switch to **Design View** for the form, select the `InstanceId` combo box, click the **Events** icon at the top of the **Properties** window, and double-click **SelectedIndexChanged**.  \n  \n    ```vb  \n    Private Sub InstanceId_SelectedIndexChanged(sender As Object, e As EventArgs) Handles InstanceId.SelectedIndexChanged  \n  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private void InstanceId_SelectedIndexChanged(object sender, EventArgs e)  \n    {  \n  \n    }  \n    ```  \n  \n8.  Add the following code to `InstanceId_SelectedIndexChanged`. Whenever the user selects a workflow by using the combo box this handler updates the status window.  \n  \n    ```vb  \n    If InstanceId.SelectedIndex = -1 Then  \n        Return  \n    End If  \n  \n    'Clear the status window.  \n    WorkflowStatus.Clear()  \n  \n    'Get the workflow version and display it.  \n    'If the workflow is just starting then this info will not  \n    'be available in the persistence store so do not try and retrieve it.  \n    If Not WorkflowStarting Then  \n        Dim instance As WorkflowApplicationInstance = _  \n            WorkflowApplication.GetInstance(WorkflowInstanceId, store)  \n  \n        WorkflowVersion.Text = _  \n            WorkflowVersionMap.GetIdentityDescription(instance.DefinitionIdentity)  \n  \n        'Unload the instance.  \n        instance.Abandon()  \n    End If  \n    ```  \n  \n    ```csharp  \n    if (InstanceId.SelectedIndex == -1)  \n    {  \n        return;  \n    }  \n  \n    // Clear the status window.  \n    WorkflowStatus.Clear();  \n  \n    // Get the workflow version and display it.  \n    // If the workflow is just starting then this info will not  \n    // be available in the persistence store so do not try and retrieve it.  \n    if (!WorkflowStarting)  \n    {  \n        WorkflowApplicationInstance instance =  \n            WorkflowApplication.GetInstance(this.WorkflowInstanceId, store);  \n  \n        WorkflowVersion.Text =  \n            WorkflowVersionMap.GetIdentityDescription(instance.DefinitionIdentity);  \n  \n        // Unload the instance.  \n        instance.Abandon();  \n    }  \n    ```  \n  \n9. Add the following `ListPersistedWorkflows` method to the form class.  \n  \n    ```vb  \n    Private Sub ListPersistedWorkflows()  \n        Using localCon As New SqlConnection(connectionString)  \n            Dim localCmd As String = _  \n                \"Select [InstanceId] from [System.Activities.DurableInstancing].[Instances] Order By [CreationTime]\"  \n  \n            Dim cmd As SqlCommand = localCon.CreateCommand()  \n            cmd.CommandText = localCmd  \n            localCon.Open()  \n            Using reader As SqlDataReader = cmd.ExecuteReader(CommandBehavior.CloseConnection)  \n  \n                While (reader.Read())  \n                    'Get the InstanceId of the persisted Workflow.  \n                    Dim id As Guid = Guid.Parse(reader(0).ToString())  \n                    InstanceId.Items.Add(id)  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    using (SqlConnection localCon = new SqlConnection(connectionString))  \n    {  \n        string localCmd =  \n            \"Select [InstanceId] from [System.Activities.DurableInstancing].[Instances] Order By [CreationTime]\";  \n  \n        SqlCommand cmd = localCon.CreateCommand();  \n        cmd.CommandText = localCmd;  \n        localCon.Open();  \n        using (SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection))  \n        {  \n            while (reader.Read())  \n            {  \n                // Get the InstanceId of the persisted Workflow  \n                Guid id = Guid.Parse(reader[0].ToString());  \n                InstanceId.Items.Add(id);  \n            }  \n        }  \n    }  \n    ```  \n  \n     `ListPersistedWorkflows` queries the instance store for persisted workflow instances, and adds the instance ids to the `cboInstanceId` combo box.  \n  \n10. Add the following `UpdateStatus` method and corresponding delegate to the form class. This method updates the status window on the form with the status of the currently running workflow.  \n  \n    ```vb  \n    Private Delegate Sub UpdateStatusDelegate(msg As String)  \n    Public Sub UpdateStatus(msg As String)  \n        'We may be on a different thread so we need to  \n        'make this call using BeginInvoke.  \n        If InvokeRequired Then  \n            BeginInvoke(New UpdateStatusDelegate(AddressOf UpdateStatus), msg)  \n        Else  \n            If Not msg.EndsWith(vbCrLf) Then  \n                msg = msg & vbCrLf  \n            End If  \n  \n            WorkflowStatus.AppendText(msg)  \n  \n            'Ensure that the newly added status is visible.  \n            WorkflowStatus.SelectionStart = WorkflowStatus.Text.Length  \n            WorkflowStatus.ScrollToCaret()  \n        End If  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private delegate void UpdateStatusDelegate(string msg);  \n    public void UpdateStatus(string msg)  \n    {  \n        // We may be on a different thread so we need to  \n        // make this call using BeginInvoke.  \n        if (InvokeRequired)  \n        {  \n            BeginInvoke(new UpdateStatusDelegate(UpdateStatus), msg);  \n        }  \n        else  \n        {  \n            if (!msg.EndsWith(\"\\r\\n\"))  \n            {  \n                msg += \"\\r\\n\";  \n            }  \n            WorkflowStatus.AppendText(msg);  \n  \n            WorkflowStatus.SelectionStart = WorkflowStatus.Text.Length;  \n            WorkflowStatus.ScrollToCaret();  \n        }  \n    }  \n    ```  \n  \n11. Add the following `GameOver` method and corresponding delegate to the form class. When a workflow completes, this method updates the form UI by removing the instance id of the completed workflow from the **InstanceId** combo box.  \n  \n    ```vb  \n    Private Delegate Sub GameOverDelegate()  \n    Private Sub GameOver()  \n        If InvokeRequired Then  \n            BeginInvoke(New GameOverDelegate(AddressOf GameOver))  \n        Else  \n            'Remove this instance from the InstanceId combo box.  \n            InstanceId.Items.Remove(InstanceId.SelectedItem)  \n            InstanceId.SelectedIndex = -1  \n        End If  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private delegate void GameOverDelegate();  \n    private void GameOver()  \n    {  \n        if (InvokeRequired)  \n        {  \n            BeginInvoke(new GameOverDelegate(GameOver));  \n        }  \n        else  \n        {  \n            // Remove this instance from the combo box  \n            InstanceId.Items.Remove(InstanceId.SelectedItem);  \n            InstanceId.SelectedIndex = -1;  \n        }  \n    }  \n    ```  \n  \n###  <a name=\"BKMK_ConfigureWorkflowApplication\"></a> To configure the instance store, workflow lifecycle handlers, and extensions  \n  \n1.  Add a `ConfigureWorkflowApplication` method to the form class.  \n  \n    ```vb  \n    Private Sub ConfigureWorkflowApplication(wfApp As WorkflowApplication)  \n  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private void ConfigureWorkflowApplication(WorkflowApplication wfApp)  \n    {      \n    }  \n    ```  \n  \n     This method configures the `WorkflowApplication`, adds the desired extensions, and adds handlers for the workflow lifecycle events.  \n  \n2.  In `ConfigureWorkflowApplication`, specify the `SqlWorkflowInstanceStore` for the `WorkflowApplication`.  \n  \n    ```vb  \n    'Configure the persistence store.  \n    wfApp.InstanceStore = store  \n    ```  \n  \n    ```csharp  \n    // Configure the persistence store.  \n    wfApp.InstanceStore = store;  \n    ```  \n  \n3.  Next, create a `StringWriter` instance and add it to the `Extensions` collection of the `WorkflowApplication`. When a `StringWriter` is added to the extensions it captures all `WriteLine` activity output. When the workflow becomes idle, the `WriteLine` output can be extracted from the `StringWriter` and displayed on the form.  \n  \n    ```vb  \n    'Add a StringWriter to the extensions. This captures the output  \n    'from the WriteLine activities so we can display it in the form.  \n    Dim sw As New StringWriter()  \n    wfApp.Extensions.Add(sw)  \n    ```  \n  \n    ```csharp  \n    // Add a StringWriter to the extensions. This captures the output  \n    // from the WriteLine activities so we can display it in the form.  \n    StringWriter sw = new StringWriter();  \n    wfApp.Extensions.Add(sw);  \n    ```  \n  \n4.  Add the following handler for the `Completed` event. When a workflow successfully completes, the number of turns taken to guess the number is displayed to the status window. If the workflow terminates, the exception information that caused the termination is displayed. At the end of the handler the `GameOver` method is called, which removes the completed workflow from the workflow list.  \n  \n    ```vb  \n    wfApp.Completed = _  \n        Sub(e As WorkflowApplicationCompletedEventArgs)  \n            If e.CompletionState = ActivityInstanceState.Faulted Then  \n                UpdateStatus(String.Format(\"Workflow Terminated. Exception: {0}\" & vbCrLf & \"{1}\", _  \n                    e.TerminationException.GetType().FullName, _  \n                    e.TerminationException.Message))  \n            ElseIf e.CompletionState = ActivityInstanceState.Canceled Then  \n                UpdateStatus(\"Workflow Canceled.\")  \n            Else  \n                Dim Turns As Integer = Convert.ToInt32(e.Outputs(\"Turns\"))  \n                UpdateStatus(String.Format(\"Congratulations, you guessed the number in {0} turns.\", Turns))  \n            End If  \n            GameOver()  \n        End Sub  \n    ```  \n  \n    ```csharp  \n    wfApp.Completed = delegate(WorkflowApplicationCompletedEventArgs e)  \n    {  \n        if (e.CompletionState == ActivityInstanceState.Faulted)  \n        {  \n            UpdateStatus(string.Format(\"Workflow Terminated. Exception: {0}\\r\\n{1}\",  \n                e.TerminationException.GetType().FullName,  \n                e.TerminationException.Message));  \n        }  \n        else if (e.CompletionState == ActivityInstanceState.Canceled)  \n        {  \n            UpdateStatus(\"Workflow Canceled.\");  \n        }  \n        else  \n        {  \n            int Turns = Convert.ToInt32(e.Outputs[\"Turns\"]);  \n            UpdateStatus(string.Format(\"Congratulations, you guessed the number in {0} turns.\", Turns));  \n        }  \n        GameOver();  \n    };  \n    ```  \n  \n5.  Add the following `Aborted` and `OnUnhandledException` handlers. The `GameOver` method is not called from the `Aborted` handler because when a workflow instance is aborted, it does not terminate, and it is possible to resume the instance at a later time.  \n  \n    ```vb  \n    wfApp.Aborted = _  \n        Sub(e As WorkflowApplicationAbortedEventArgs)  \n            UpdateStatus(String.Format(\"Workflow Aborted. Exception: {0}\" & vbCrLf & \"{1}\", _  \n                e.Reason.GetType().FullName, _  \n                e.Reason.Message))  \n        End Sub  \n  \n    wfApp.OnUnhandledException = _  \n        Function(e As WorkflowApplicationUnhandledExceptionEventArgs)  \n            UpdateStatus(String.Format(\"Unhandled Exception: {0}\" & vbCrLf & \"{1}\", _  \n                e.UnhandledException.GetType().FullName, _  \n                e.UnhandledException.Message))  \n            GameOver()  \n            Return UnhandledExceptionAction.Terminate  \n        End Function  \n    ```  \n  \n    ```csharp  \n    wfApp.Aborted = delegate(WorkflowApplicationAbortedEventArgs e)  \n    {  \n        UpdateStatus(string.Format(\"Workflow Aborted. Exception: {0}\\r\\n{1}\",  \n                e.Reason.GetType().FullName,  \n                e.Reason.Message));  \n    };  \n  \n    wfApp.OnUnhandledException = delegate(WorkflowApplicationUnhandledExceptionEventArgs e)  \n    {  \n        UpdateStatus(string.Format(\"Unhandled Exception: {0}\\r\\n{1}\",  \n                e.UnhandledException.GetType().FullName,  \n                e.UnhandledException.Message));  \n        GameOver();  \n        return UnhandledExceptionAction.Terminate;  \n    };  \n    ```  \n  \n6.  Add the following `PersistableIdle` handler. This handler retrieves the `StringWriter` extension that was added, extracts the output from the `WriteLine` activities, and displays it in the status window.  \n  \n    ```vb  \n    wfApp.PersistableIdle = _  \n        Function(e As WorkflowApplicationIdleEventArgs)  \n            'Send the current WriteLine outputs to the status window.  \n            Dim writers = e.GetInstanceExtensions(Of StringWriter)()  \n            For Each writer In writers  \n                UpdateStatus(writer.ToString())  \n            Next  \n            Return PersistableIdleAction.Unload  \n        End Function  \n    ```  \n  \n    ```csharp  \n    wfApp.PersistableIdle = delegate(WorkflowApplicationIdleEventArgs e)  \n    {  \n        // Send the current WriteLine outputs to the status window.  \n        var writers = e.GetInstanceExtensions<StringWriter>();  \n        foreach (var writer in writers)  \n        {  \n            UpdateStatus(writer.ToString());  \n        }  \n        return PersistableIdleAction.Unload;  \n    };  \n    ```  \n  \n     The <xref:System.Activities.PersistableIdleAction> enumeration has three values: <xref:System.Activities.PersistableIdleAction>, <xref:System.Activities.PersistableIdleAction>, and <xref:System.Activities.PersistableIdleAction>. <xref:System.Activities.PersistableIdleAction> causes the workflow to persist but it does not cause the workflow to unload. <xref:System.Activities.PersistableIdleAction> causes the workflow to persist and be unloaded.  \n  \n     The following example is the completed `ConfigureWorkflowApplication` method.  \n  \n    ```vb  \n    Private Sub ConfigureWorkflowApplication(wfApp As WorkflowApplication)  \n        'Configure the persistence store.  \n        wfApp.InstanceStore = store  \n  \n        'Add a StringWriter to the extensions. This captures the output  \n        'from the WriteLine activities so we can display it in the form.  \n        Dim sw As New StringWriter()  \n        wfApp.Extensions.Add(sw)  \n  \n        wfApp.Completed = _  \n            Sub(e As WorkflowApplicationCompletedEventArgs)  \n                If e.CompletionState = ActivityInstanceState.Faulted Then  \n                    UpdateStatus(String.Format(\"Workflow Terminated. Exception: {0}\" & vbCrLf & \"{1}\", _  \n                        e.TerminationException.GetType().FullName, _  \n                        e.TerminationException.Message))  \n                ElseIf e.CompletionState = ActivityInstanceState.Canceled Then  \n                    UpdateStatus(\"Workflow Canceled.\")  \n                Else  \n                    Dim Turns As Integer = Convert.ToInt32(e.Outputs(\"Turns\"))  \n                    UpdateStatus(String.Format(\"Congratulations, you guessed the number in {0} turns.\", Turns))  \n                End If  \n                GameOver()  \n            End Sub  \n  \n        wfApp.Aborted = _  \n            Sub(e As WorkflowApplicationAbortedEventArgs)  \n                UpdateStatus(String.Format(\"Workflow Aborted. Exception: {0}\" & vbCrLf & \"{1}\", _  \n                    e.Reason.GetType().FullName, _  \n                    e.Reason.Message))  \n            End Sub  \n  \n        wfApp.OnUnhandledException = _  \n            Function(e As WorkflowApplicationUnhandledExceptionEventArgs)  \n                UpdateStatus(String.Format(\"Unhandled Exception: {0}\" & vbCrLf & \"{1}\", _  \n                    e.UnhandledException.GetType().FullName, _  \n                    e.UnhandledException.Message))  \n                GameOver()  \n                Return UnhandledExceptionAction.Terminate  \n            End Function  \n  \n        wfApp.PersistableIdle = _  \n            Function(e As WorkflowApplicationIdleEventArgs)  \n                'Send the current WriteLine outputs to the status window.  \n                Dim writers = e.GetInstanceExtensions(Of StringWriter)()  \n                For Each writer In writers  \n                    UpdateStatus(writer.ToString())  \n                Next  \n                Return PersistableIdleAction.Unload  \n            End Function  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private void ConfigureWorkflowApplication(WorkflowApplication wfApp)  \n    {  \n        // Configure the persistence store.  \n        wfApp.InstanceStore = store;  \n  \n        // Add a StringWriter to the extensions. This captures the output  \n        // from the WriteLine activities so we can display it in the form.  \n        StringWriter sw = new StringWriter();  \n        wfApp.Extensions.Add(sw);  \n  \n        wfApp.Completed = delegate(WorkflowApplicationCompletedEventArgs e)  \n        {  \n            if (e.CompletionState == ActivityInstanceState.Faulted)  \n            {  \n                UpdateStatus(string.Format(\"Workflow Terminated. Exception: {0}\\r\\n{1}\",  \n                    e.TerminationException.GetType().FullName,  \n                    e.TerminationException.Message));  \n            }  \n            else if (e.CompletionState == ActivityInstanceState.Canceled)  \n            {  \n                UpdateStatus(\"Workflow Canceled.\");  \n            }  \n            else  \n            {  \n                int Turns = Convert.ToInt32(e.Outputs[\"Turns\"]);  \n                UpdateStatus(string.Format(\"Congratulations, you guessed the number in {0} turns.\", Turns));  \n            }  \n            GameOver();  \n        };  \n  \n        wfApp.Aborted = delegate(WorkflowApplicationAbortedEventArgs e)  \n        {  \n            UpdateStatus(string.Format(\"Workflow Aborted. Exception: {0}\\r\\n{1}\",  \n                    e.Reason.GetType().FullName,  \n                    e.Reason.Message));  \n        };  \n  \n        wfApp.OnUnhandledException = delegate(WorkflowApplicationUnhandledExceptionEventArgs e)  \n        {  \n            UpdateStatus(string.Format(\"Unhandled Exception: {0}\\r\\n{1}\",  \n                    e.UnhandledException.GetType().FullName,  \n                    e.UnhandledException.Message));  \n            GameOver();  \n            return UnhandledExceptionAction.Terminate;  \n        };  \n  \n        wfApp.PersistableIdle = delegate(WorkflowApplicationIdleEventArgs e)  \n        {  \n            // Send the current WriteLine outputs to the status window.  \n            var writers = e.GetInstanceExtensions<StringWriter>();  \n            foreach (var writer in writers)  \n            {  \n                UpdateStatus(writer.ToString());  \n            }  \n            return PersistableIdleAction.Unload;  \n        };  \n    }  \n    ```  \n  \n###  <a name=\"BKMK_WorkflowVersionMap\"></a> To enable starting and resuming multiple workflow types  \n In order to resume a workflow instance, the host has to provide the workflow definition. In this tutorial there are three workflow types, and subsequent tutorial steps introduce multiple versions of these types. `WorkflowIdentity` provides a way for a host application to associate identifying information with a persisted workflow instance. The steps in this section demonstrate how to create a utility class to assist with mapping the workflow identity from a persisted workflow instance to the corresponding workflow definition. [!INCLUDE[crabout](../../../includes/crabout-md.md)]`WorkflowIdentity` and versioning, see [Using WorkflowIdentity and Versioning](../../../docs/framework/windows-workflow-foundation/using-workflowidentity-and-versioning.md).  \n  \n1.  Right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Add**, **Class**. Type `WorkflowVersionMap` into the **Name** box and click **Add**.  \n  \n2.  Add the following `using` or `Imports` statements at the top of the file with the other `using` or `Imports` statements.  \n  \n    ```vb  \n    Imports NumberGuessWorkflowActivities  \n    Imports System.Activities  \n    ```  \n  \n    ```csharp  \n    using NumberGuessWorkflowActivities;  \n    using System.Activities;  \n    ```  \n  \n3.  Replace the `WorkflowVersionMap` class declaration with the following declaration.  \n  \n    ```vb  \n    Public Module WorkflowVersionMap  \n        Dim map As Dictionary(Of WorkflowIdentity, Activity)  \n  \n        'Current version identities.  \n        Public StateMachineNumberGuessIdentity As WorkflowIdentity  \n        Public FlowchartNumberGuessIdentity As WorkflowIdentity  \n        Public SequentialNumberGuessIdentity As WorkflowIdentity  \n  \n        Sub New()  \n            map = New Dictionary(Of WorkflowIdentity, Activity)  \n  \n            'Add the current workflow version identities.  \n            StateMachineNumberGuessIdentity = New WorkflowIdentity With  \n            {  \n                .Name = \"StateMachineNumberGuessWorkflow\",  \n                .Version = New Version(1, 0, 0, 0)  \n            }  \n  \n            FlowchartNumberGuessIdentity = New WorkflowIdentity With  \n            {  \n                .Name = \"FlowchartNumberGuessWorkflow\",  \n                .Version = New Version(1, 0, 0, 0)  \n            }  \n  \n            SequentialNumberGuessIdentity = New WorkflowIdentity With  \n            {  \n                .Name = \"SequentialNumberGuessWorkflow\",  \n                .Version = New Version(1, 0, 0, 0)  \n            }  \n  \n            map.Add(StateMachineNumberGuessIdentity, New StateMachineNumberGuessWorkflow())  \n            map.Add(FlowchartNumberGuessIdentity, New FlowchartNumberGuessWorkflow())  \n            map.Add(SequentialNumberGuessIdentity, New SequentialNumberGuessWorkflow())  \n        End Sub  \n  \n        Public Function GetWorkflowDefinition(identity As WorkflowIdentity) As Activity  \n            Return map(identity)  \n        End Function  \n  \n        Public Function GetIdentityDescription(identity As WorkflowIdentity) As String  \n            Return identity.ToString()  \n        End Function  \n    End Module  \n    ```  \n  \n    ```csharp  \n    public static class WorkflowVersionMap  \n    {  \n        static Dictionary<WorkflowIdentity, Activity> map;  \n  \n        // Current version identities.  \n        static public WorkflowIdentity StateMachineNumberGuessIdentity;  \n        static public WorkflowIdentity FlowchartNumberGuessIdentity;  \n        static public WorkflowIdentity SequentialNumberGuessIdentity;  \n  \n        static WorkflowVersionMap()  \n        {  \n            map = new Dictionary<WorkflowIdentity, Activity>();  \n  \n            // Add the current workflow version identities.  \n            StateMachineNumberGuessIdentity = new WorkflowIdentity  \n            {  \n                Name = \"StateMachineNumberGuessWorkflow\",  \n                Version = new Version(1, 0, 0, 0)  \n            };  \n  \n            FlowchartNumberGuessIdentity = new WorkflowIdentity  \n            {  \n                Name = \"FlowchartNumberGuessWorkflow\",  \n                Version = new Version(1, 0, 0, 0)  \n            };  \n  \n            SequentialNumberGuessIdentity = new WorkflowIdentity  \n            {  \n                Name = \"SequentialNumberGuessWorkflow\",  \n                Version = new Version(1, 0, 0, 0)  \n            };  \n  \n            map.Add(StateMachineNumberGuessIdentity, new StateMachineNumberGuessWorkflow());  \n            map.Add(FlowchartNumberGuessIdentity, new FlowchartNumberGuessWorkflow());  \n            map.Add(SequentialNumberGuessIdentity, new SequentialNumberGuessWorkflow());  \n        }  \n  \n        public static Activity GetWorkflowDefinition(WorkflowIdentity identity)  \n        {  \n            return map[identity];  \n        }  \n  \n        public static string GetIdentityDescription(WorkflowIdentity identity)  \n        {          \n            return identity.ToString();  \n       }  \n    }  \n    ```  \n  \n     `WorkflowVersionMap` contains three workflow identities that map to the three workflow definitions from this tutorial and is used in the following sections when workflows are started and resumed.  \n  \n###  <a name=\"BKMK_StartWorkflow\"></a> To start a new workflow  \n  \n1.  Add a `Click` handler for `NewGame`. To add the handler, switch to **Design View** for the form, and double-click `NewGame`. A `NewGame_Click` handler is added and the view switches to code view for the form. Whenever the user clicks this button a new workflow is started.  \n  \n    ```vb  \n    Private Sub NewGame_Click(sender As Object, e As EventArgs) Handles NewGame.Click  \n  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private void NewGame_Click(object sender, EventArgs e)  \n    {  \n  \n    }  \n    ```  \n  \n2.  Add the following code to the click handler. This code creates a dictionary of input arguments for the workflow, keyed by argument name. This dictionary has one entry that contains the range of the randomly generated number retrieved from the range combo box.  \n  \n    ```vb  \n    Dim inputs As New Dictionary(Of String, Object)()  \n    inputs.Add(\"MaxNumber\", Convert.ToInt32(NumberRange.SelectedItem))  \n    ```  \n  \n    ```csharp  \n    var inputs = new Dictionary<string, object>();  \n    inputs.Add(\"MaxNumber\", Convert.ToInt32(NumberRange.SelectedItem));  \n    ```  \n  \n3.  Next, add the following code that starts the workflow. The `WorkflowIdentity` and workflow definition corresponding to the type of workflow selected are retrieved using the `WorkflowVersionMap` helper class. Next, a new `WorkflowApplication` instance is created using the workflow definition, `WorkflowIdentity`, and dictionary of input arguments.  \n  \n    ```vb  \n    Dim identity As WorkflowIdentity = Nothing  \n    Select Case WorkflowType.SelectedItem.ToString()  \n        Case \"SequentialNumberGuessWorkflow\"  \n            identity = WorkflowVersionMap.SequentialNumberGuessIdentity  \n  \n        Case \"StateMachineNumberGuessWorkflow\"  \n            identity = WorkflowVersionMap.StateMachineNumberGuessIdentity  \n  \n        Case \"FlowchartNumberGuessWorkflow\"  \n            identity = WorkflowVersionMap.FlowchartNumberGuessIdentity  \n    End Select  \n  \n    Dim wf As Activity = WorkflowVersionMap.GetWorkflowDefinition(identity)  \n  \n    Dim wfApp = New WorkflowApplication(wf, inputs, identity)  \n    ```  \n  \n    ```csharp  \n    WorkflowIdentity identity = null;  \n    switch (WorkflowType.SelectedItem.ToString())  \n    {  \n        case \"SequentialNumberGuessWorkflow\":  \n            identity = WorkflowVersionMap.SequentialNumberGuessIdentity;  \n            break;  \n  \n        case \"StateMachineNumberGuessWorkflow\":  \n            identity = WorkflowVersionMap.StateMachineNumberGuessIdentity;  \n            break;  \n  \n        case \"FlowchartNumberGuessWorkflow\":  \n            identity = WorkflowVersionMap.FlowchartNumberGuessIdentity;  \n            break;  \n    };  \n  \n    Activity wf = WorkflowVersionMap.GetWorkflowDefinition(identity);  \n  \n    WorkflowApplication wfApp = new WorkflowApplication(wf, inputs, identity);  \n    ```  \n  \n4.  Next, add the following code which adds the workflow to the workflow list and displays the workflow's version information on the form.  \n  \n    ```vb  \n    'Add the workflow to the list and display the version information.  \n    WorkflowStarting = True  \n    InstanceId.SelectedIndex = InstanceId.Items.Add(wfApp.Id)  \n    WorkflowVersion.Text = identity.ToString()  \n    WorkflowStarting = False  \n    ```  \n  \n    ```csharp  \n    // Add the workflow to the list and display the version information.  \n    WorkflowStarting = true;  \n    InstanceId.SelectedIndex = InstanceId.Items.Add(wfApp.Id);  \n    WorkflowVersion.Text = identity.ToString();  \n    WorkflowStarting = false;  \n    ```  \n  \n5.  Call `ConfigureWorkflowApplication` to configure the instance store, extensions, and workflow lifecycle handlers for this `WorkflowApplication` instance.  \n  \n    ```vb  \n    'Configure the instance store, extensions, and   \n    'workflow lifecycle handlers.  \n    ConfigureWorkflowApplication(wfApp)  \n    ```  \n  \n    ```csharp  \n    // Configure the instance store, extensions, and   \n    // workflow lifecycle handlers.  \n    ConfigureWorkflowApplication(wfApp);  \n    ```  \n  \n6.  Finally, call `Run`.  \n  \n    ```vb  \n    'Start the workflow.  \n    wfApp.Run()  \n    ```  \n  \n    ```  \n    // Start the workflow.  \n    wfApp.Run();  \n    ```  \n  \n     The following example is the completed `NewGame_Click` handler.  \n  \n    ```vb  \n    Private Sub NewGame_Click(sender As Object, e As EventArgs) Handles NewGame.Click  \n        'Start a new workflow.  \n        Dim inputs As New Dictionary(Of String, Object)()  \n        inputs.Add(\"MaxNumber\", Convert.ToInt32(NumberRange.SelectedItem))  \n  \n        Dim identity As WorkflowIdentity = Nothing  \n        Select Case WorkflowType.SelectedItem.ToString()  \n            Case \"SequentialNumberGuessWorkflow\"  \n                identity = WorkflowVersionMap.SequentialNumberGuessIdentity  \n  \n            Case \"StateMachineNumberGuessWorkflow\"  \n                identity = WorkflowVersionMap.StateMachineNumberGuessIdentity  \n  \n            Case \"FlowchartNumberGuessWorkflow\"  \n                identity = WorkflowVersionMap.FlowchartNumberGuessIdentity  \n        End Select  \n  \n        Dim wf As Activity = WorkflowVersionMap.GetWorkflowDefinition(identity)  \n  \n        Dim wfApp = New WorkflowApplication(wf, inputs, identity)  \n  \n        'Add the workflow to the list and display the version information.  \n        WorkflowStarting = True  \n        InstanceId.SelectedIndex = InstanceId.Items.Add(wfApp.Id)  \n        WorkflowVersion.Text = identity.ToString()  \n        WorkflowStarting = False  \n  \n        'Configure the instance store, extensions, and   \n        'workflow lifecycle handlers.  \n        ConfigureWorkflowApplication(wfApp)  \n  \n        'Start the workflow.  \n        wfApp.Run()  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private void NewGame_Click(object sender, EventArgs e)  \n    {  \n        var inputs = new Dictionary<string, object>();  \n        inputs.Add(\"MaxNumber\", Convert.ToInt32(NumberRange.SelectedItem));  \n  \n        WorkflowIdentity identity = null;  \n        switch (WorkflowType.SelectedItem.ToString())  \n        {  \n            case \"SequentialNumberGuessWorkflow\":  \n                identity = WorkflowVersionMap.SequentialNumberGuessIdentity;  \n                break;  \n  \n            case \"StateMachineNumberGuessWorkflow\":  \n                identity = WorkflowVersionMap.StateMachineNumberGuessIdentity;  \n                break;  \n  \n            case \"FlowchartNumberGuessWorkflow\":  \n                identity = WorkflowVersionMap.FlowchartNumberGuessIdentity;  \n                break;  \n        };  \n  \n        Activity wf = WorkflowVersionMap.GetWorkflowDefinition(identity);  \n  \n        WorkflowApplication wfApp = new WorkflowApplication(wf, inputs, identity);  \n  \n        // Add the workflow to the list and display the version information.  \n        WorkflowStarting = true;  \n        InstanceId.SelectedIndex = InstanceId.Items.Add(wfApp.Id);  \n        WorkflowVersion.Text = identity.ToString();  \n        WorkflowStarting = false;  \n  \n        // Configure the instance store, extensions, and   \n        // workflow lifecycle handlers.  \n        ConfigureWorkflowApplication(wfApp);  \n  \n        // Start the workflow.  \n        wfApp.Run();  \n    }  \n    ```  \n  \n###  <a name=\"BKMK_ResumeWorkflow\"></a> To resume a workflow  \n  \n1.  Add a `Click` handler for `EnterGuess`. To add the handler, switch to **Design View** for the form, and double-click `EnterGuess`. Whenever the user clicks this button a workflow is resumed.  \n  \n    ```vb  \n    Private Sub EnterGuess_Click(sender As Object, e As EventArgs) Handles EnterGuess.Click  \n  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private void EnterGuess_Click(object sender, EventArgs e)  \n    {  \n  \n    }  \n    ```  \n  \n2.  Add the following code to ensure that a workflow is selected in the workflow list, and that the user's guess is valid.  \n  \n    ```vb  \n    If WorkflowInstanceId = Guid.Empty Then  \n        MessageBox.Show(\"Please select a workflow.\")  \n        Return  \n    End If  \n  \n    Dim userGuess As Integer  \n    If Not Int32.TryParse(Guess.Text, userGuess) Then  \n        MessageBox.Show(\"Please enter an integer.\")  \n        Guess.SelectAll()  \n        Guess.Focus()  \n        Return  \n    End If  \n    ```  \n  \n    ```csharp  \n    if (WorkflowInstanceId == Guid.Empty)  \n    {  \n        MessageBox.Show(\"Please select a workflow.\");  \n        return;  \n    }  \n  \n    int guess;  \n    if (!Int32.TryParse(Guess.Text, out guess))  \n    {  \n        MessageBox.Show(\"Please enter an integer.\");  \n        Guess.SelectAll();  \n        Guess.Focus();  \n        return;  \n    }  \n    ```  \n  \n3.  Next, retrieve the `WorkflowApplicationInstance` of the persisted workflow instance. A `WorkflowApplicationInstance` represents a persisted workflow instance that has not yet been associated with a workflow definition. The `DefinitionIdentity` of the `WorkflowApplicationInstance` contains the `WorkflowIdentity` of the persisted workflow instance. In this tutorial, the `WorkflowVersionMap` utility class is used to map the `WorkflowIdentity` to the correct workflow definition. Once the workflow definition is retrieved, a `WorkflowApplication` is created, using the correct workflow definition.  \n  \n    ```vb  \n    Dim instance As WorkflowApplicationInstance = _  \n        WorkflowApplication.GetInstance(WorkflowInstanceId, store)  \n  \n    'Use the persisted WorkflowIdentity to retrieve the correct workflow  \n    'definition from the dictionary.  \n    Dim wf As Activity = _  \n        WorkflowVersionMap.GetWorkflowDefinition(instance.DefinitionIdentity)  \n  \n    'Associate the WorkflowApplication with the correct definition  \n    Dim wfApp As WorkflowApplication = _  \n        New WorkflowApplication(wf, instance.DefinitionIdentity)  \n    ```  \n  \n    ```csharp  \n    WorkflowApplicationInstance instance =  \n        WorkflowApplication.GetInstance(WorkflowInstanceId, store);  \n  \n    // Use the persisted WorkflowIdentity to retrieve the correct workflow  \n    // definition from the dictionary.  \n    Activity wf =  \n        WorkflowVersionMap.GetWorkflowDefinition(instance.DefinitionIdentity);  \n  \n    // Associate the WorkflowApplication with the correct definition  \n    WorkflowApplication wfApp =  \n        new WorkflowApplication(wf, instance.DefinitionIdentity);  \n    ```  \n  \n4.  Once the `WorkflowApplication` is created, configure the instance store, workflow lifecycle handlers, and extensions by calling `ConfigureWorkflowApplication`. These steps must be done every time a new `WorkflowApplication` is created, and they must be done before the workflow instance is loaded into the `WorkflowApplication`. After the workflow is loaded, it is resumed with the user's guess.  \n  \n    ```vb  \n    'Configure the extensions and lifecycle handlers.  \n    'Do this before the instance is loaded. Once the instance is  \n    'loaded it is too late to add extensions.  \n    ConfigureWorkflowApplication(wfApp)  \n  \n    'Load the workflow.  \n    wfApp.Load(instance)  \n  \n    'Resume the workflow.  \n    wfApp.ResumeBookmark(\"EnterGuess\", userGuess)  \n    ```  \n  \n    ```csharp  \n    // Configure the extensions and lifecycle handlers.  \n    // Do this before the instance is loaded. Once the instance is  \n    // loaded it is too late to add extensions.  \n    ConfigureWorkflowApplication(wfApp);  \n  \n    // Load the workflow.  \n    wfApp.Load(instance);  \n  \n    // Resume the workflow.  \n    wfApp.ResumeBookmark(\"EnterGuess\", guess);  \n    ```  \n  \n5.  Finally, clear the guess textbox and prepare the form to accept another guess.  \n  \n    ```vb  \n    'Clear the Guess textbox.  \n    Guess.Clear()  \n    Guess.Focus()  \n    ```  \n  \n    ```csharp  \n    // Clear the Guess textbox.  \n    Guess.Clear();  \n    Guess.Focus();  \n    ```  \n  \n     The following example is the completed `EnterGuess_Click` handler.  \n  \n    ```vb  \n    Private Sub EnterGuess_Click(sender As Object, e As EventArgs) Handles EnterGuess.Click  \n        If WorkflowInstanceId = Guid.Empty Then  \n            MessageBox.Show(\"Please select a workflow.\")  \n            Return  \n        End If  \n  \n        Dim userGuess As Integer  \n        If Not Int32.TryParse(Guess.Text, userGuess) Then  \n            MessageBox.Show(\"Please enter an integer.\")  \n            Guess.SelectAll()  \n            Guess.Focus()  \n            Return  \n        End If  \n  \n        Dim instance As WorkflowApplicationInstance = _  \n            WorkflowApplication.GetInstance(WorkflowInstanceId, store)  \n  \n        'Use the persisted WorkflowIdentity to retrieve the correct workflow  \n        'definition from the dictionary.  \n        Dim wf As Activity = _  \n            WorkflowVersionMap.GetWorkflowDefinition(instance.DefinitionIdentity)  \n  \n        'Associate the WorkflowApplication with the correct definition  \n        Dim wfApp As WorkflowApplication = _  \n            New WorkflowApplication(wf, instance.DefinitionIdentity)  \n  \n        'Configure the extensions and lifecycle handlers.  \n        'Do this before the instance is loaded. Once the instance is  \n        'loaded it is too late to add extensions.  \n        ConfigureWorkflowApplication(wfApp)  \n  \n        'Load the workflow.  \n        wfApp.Load(instance)  \n  \n        'Resume the workflow.  \n        wfApp.ResumeBookmark(\"EnterGuess\", userGuess)  \n  \n        'Clear the Guess textbox.  \n        Guess.Clear()  \n        Guess.Focus()  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private void EnterGuess_Click(object sender, EventArgs e)  \n    {  \n        if (WorkflowInstanceId == Guid.Empty)  \n        {  \n            MessageBox.Show(\"Please select a workflow.\");  \n            return;  \n        }  \n  \n        int guess;  \n        if (!Int32.TryParse(Guess.Text, out guess))  \n        {  \n            MessageBox.Show(\"Please enter an integer.\");  \n            Guess.SelectAll();  \n            Guess.Focus();  \n            return;  \n        }  \n  \n        WorkflowApplicationInstance instance =  \n            WorkflowApplication.GetInstance(WorkflowInstanceId, store);  \n  \n        // Use the persisted WorkflowIdentity to retrieve the correct workflow  \n        // definition from the dictionary.  \n        Activity wf =  \n            WorkflowVersionMap.GetWorkflowDefinition(instance.DefinitionIdentity);  \n  \n        // Associate the WorkflowApplication with the correct definition  \n        WorkflowApplication wfApp =  \n            new WorkflowApplication(wf, instance.DefinitionIdentity);  \n  \n        // Configure the extensions and lifecycle handlers.  \n        // Do this before the instance is loaded. Once the instance is  \n        // loaded it is too late to add extensions.  \n        ConfigureWorkflowApplication(wfApp);  \n  \n        // Load the workflow.  \n        wfApp.Load(instance);  \n  \n        // Resume the workflow.  \n        wfApp.ResumeBookmark(\"EnterGuess\", guess);  \n  \n        // Clear the Guess textbox.  \n        Guess.Clear();  \n        Guess.Focus();  \n    }  \n    ```  \n  \n###  <a name=\"BKMK_TerminateWorkflow\"></a> To terminate a workflow  \n  \n1.  Add a `Click` handler for `QuitGame`. To add the handler, switch to **Design View** for the form, and double-click `QuitGame`. Whenever the user clicks this button the currently selected workflow is terminated.  \n  \n    ```vb  \n    Private Sub QuitGame_Click(sender As Object, e As EventArgs) Handles QuitGame.Click  \n  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    private void QuitGame_Click(object sender, EventArgs e)  \n    {  \n  \n    }  \n    ```  \n  \n2.  Add the following code to the `QuitGame_Click` handler. This code first checks to ensure that a workflow is selected in the workflow list. Then it loads the persisted instance into a `WorkflowApplicationInstance`, uses the `DefinitionIdentity` to determine the correct workflow definition, and then initializes the `WorkflowApplication`. Next the extensions and workflow lifecycle handlers are configured with a call to `ConfigureWorkflowApplication`. Once the `WorkflowApplication` is configured, it is loaded, and then `Terminate` is called.  \n  \n    ```vb  \n    If WorkflowInstanceId = Guid.Empty Then  \n        MessageBox.Show(\"Please select a workflow.\")  \n        Return  \n    End If  \n  \n    Dim instance As WorkflowApplicationInstance = _  \n        WorkflowApplication.GetInstance(WorkflowInstanceId, store)  \n  \n    'Use the persisted WorkflowIdentity to retrieve the correct workflow  \n    'definition from the dictionary.  \n    Dim wf As Activity = WorkflowVersionMap.GetWorkflowDefinition(instance.DefinitionIdentity)  \n  \n    'Associate the WorkflowApplication with the correct definition.  \n    Dim wfApp As WorkflowApplication = _  \n        New WorkflowApplication(wf, instance.DefinitionIdentity)  \n  \n    'Configure the extensions and lifecycle handlers.  \n    ConfigureWorkflowApplication(wfApp)  \n  \n    'Load the workflow.  \n    wfApp.Load(instance)  \n  \n    'Terminate the workflow.  \n    wfApp.Terminate(\"User resigns.\")  \n    ```  \n  \n    ```csharp  \n    if (WorkflowInstanceId == Guid.Empty)  \n    {  \n        MessageBox.Show(\"Please select a workflow.\");  \n        return;  \n    }  \n  \n    WorkflowApplicationInstance instance =  \n        WorkflowApplication.GetInstance(WorkflowInstanceId, store);  \n  \n    // Use the persisted WorkflowIdentity to retrieve the correct workflow  \n    // definition from the dictionary.  \n    Activity wf = WorkflowVersionMap.GetWorkflowDefinition(instance.DefinitionIdentity);  \n  \n    // Associate the WorkflowApplication with the correct definition  \n    WorkflowApplication wfApp =  \n        new WorkflowApplication(wf, instance.DefinitionIdentity);  \n  \n    // Configure the extensions and lifecycle handlers  \n    ConfigureWorkflowApplication(wfApp);  \n  \n    // Load the workflow.  \n    wfApp.Load(instance);  \n  \n    // Terminate the workflow.  \n    wfApp.Terminate(\"User resigns.\");  \n    ```  \n  \n###  <a name=\"BKMK_BuildAndRun\"></a> To build and run the application  \n  \n1.  Double-click **Program.cs** (or **Module1.vb**) in **Solution Explorer** to display the code.  \n  \n2.  Add the following `using` (or `Imports`) statement at the top of the file with the other `using` (or `Imports`) statements.  \n  \n    ```vb  \n    Imports System.Windows.Forms  \n    ```  \n  \n    ```csharp  \n    using System.Windows.Forms;  \n    ```  \n  \n3.  Remove or comment out the existing workflow hosting code from [How to: Run a Workflow](../../../docs/framework/windows-workflow-foundation/how-to-run-a-workflow.md), and replace it with the following code.  \n  \n    ```vb  \n    Sub Main()  \n        Application.EnableVisualStyles()  \n        Application.Run(New WorkflowHostForm())  \n    End Sub  \n    ```  \n  \n    ```csharp  \n    static void Main(string[] args)  \n    {  \n        Application.EnableVisualStyles();  \n        Application.Run(new WorkflowHostForm());  \n    }  \n    ```  \n  \n4.  Right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Properties**. In the **Application** tab, specify **Windows Application** for the **Output type**. This step is optional, but if it is not followed the console window is displayed in addition to the form.  \n  \n5.  Press Ctrl+Shift+B to build the application.  \n  \n6.  Ensure that **NumberGuessWorkflowHost** is set as the startup application, and press Ctrl+F5 to start the application.  \n  \n7.  Select a range for the guessing game and the type of workflow to start, and click **New Game**. Enter a guess in the **Guess** box and click **Go** to submit your guess. Note that the output from the `WriteLine` activities is displayed on the form.  \n  \n8.  Start several workflows using different workflow types and number ranges, enter some guesses, and switch between the workflows by selecting from the **Workflow Instance Id** list.  \n  \n     Note that when you switch to a new workflow, the previous guesses and progress of the workflow are not displayed in the status window. The reason the status is not available is because it is not captured and saved anywhere. In the next step of the tutorial, [How to: Create a Custom Tracking Participant](../../../docs/framework/windows-workflow-foundation/how-to-create-a-custom-tracking-participant.md), you create a custom tracking participant that saves this information.","nodes":[{"pos":[12,75],"content":"How to: Create and Run a Long Running Workflow | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Create and Run a Long Running Workflow | Microsoft Docs","pos":[0,63]}]},{"pos":[341,387],"content":"How to: Create and Run a Long Running Workflow","linkify":"How to: Create and Run a Long Running Workflow","nodes":[{"content":"How to: Create and Run a Long Running Workflow","pos":[0,46]}]},{"content":"One of the central features of <ph id=\"ph1\">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph> is the runtimeâ€™s ability to persist and unload idle workflows to a database.","pos":[388,538],"source":"One of the central features of [!INCLUDE[wf](../../../includes/wf-md.md)] is the runtimeâ€™s ability to persist and unload idle workflows to a database."},{"content":"The steps in <bpt id=\"p1\">[</bpt>How to: Run a Workflow<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-run-a-workflow.md)</ept> demonstrated the basics of workflow hosting using a console application.","pos":[539,727],"source":" The steps in [How to: Run a Workflow](../../../docs/framework/windows-workflow-foundation/how-to-run-a-workflow.md) demonstrated the basics of workflow hosting using a console application."},{"content":"Examples were shown of starting workflows, workflow lifecycle handlers, and resuming bookmarks.","pos":[728,823]},{"content":"In order to demonstrate workflow persistence effectively, a more complex workflow host is required that supports starting and resuming multiple workflow instances.","pos":[824,987]},{"content":"This step in the tutorial demonstrates how to create a Windows form host application that supports starting and resuming multiple workflow instances, workflow persistence, and provides a basis for the advanced features such as tracking and versioning that are demonstrated in subsequent tutorial steps.","pos":[988,1290]},{"pos":[1298,1703],"content":"[!NOTE]\n This tutorial step and the subsequent steps use all three workflow types from [How to: Create a Workflow](../../../docs/framework/windows-workflow-foundation/how-to-create-a-workflow.md). If you did not complete all three types you can download a completed version of the steps from [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976).","leadings":["","> "],"nodes":[{"content":" This tutorial step and the subsequent steps use all three workflow types from [How to: Create a Workflow](../../../docs/framework/windows-workflow-foundation/how-to-create-a-workflow.md). If you did not complete all three types you can download a completed version of the steps from [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976).","pos":[8,403],"nodes":[{"content":"This tutorial step and the subsequent steps use all three workflow types from <bpt id=\"p1\">[</bpt>How to: Create a Workflow<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-a-workflow.md)</ept>.","pos":[1,188],"source":" This tutorial step and the subsequent steps use all three workflow types from [How to: Create a Workflow](../../../docs/framework/windows-workflow-foundation/how-to-create-a-workflow.md)."},{"content":"If you did not complete all three types you can download a completed version of the steps from <bpt id=\"p1\">[</bpt>Windows Workflow Foundation (WF45) - Getting Started Tutorial<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=248976)</ept>.","pos":[189,395],"source":" If you did not complete all three types you can download a completed version of the steps from [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976)."}]}]},{"pos":[1711,1914],"content":"[!NOTE]\n To download a completed version or view a video walkthrough of the tutorial, see [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976).","leadings":["","> "],"nodes":[{"content":"To download a completed version or view a video walkthrough of the tutorial, see <bpt id=\"p1\">[</bpt>Windows Workflow Foundation (WF45) - Getting Started Tutorial<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=248976)</ept>.","pos":[9,201],"source":" To download a completed version or view a video walkthrough of the tutorial, see [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976)."}]},{"pos":[1923,1936],"content":"In this topic","linkify":"In this topic","nodes":[{"content":"In this topic","pos":[0,13]}]},{"pos":[1946,2115],"content":"<bpt id=\"p1\">[</bpt>To create the persistence database<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_CreatePersistenceDatabase)</ept>","source":"[To create the persistence database](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_CreatePersistenceDatabase)"},{"pos":[2125,2303],"content":"<bpt id=\"p1\">[</bpt>To add the reference to the DurableInstancing assemblies<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddReference)</ept>","source":"[To add the reference to the DurableInstancing assemblies](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddReference)"},{"pos":[2313,2465],"content":"<bpt id=\"p1\">[</bpt>To create the workflow host form<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_CreateForm)</ept>","source":"[To create the workflow host form](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_CreateForm)"},{"pos":[2475,2653],"content":"<bpt id=\"p1\">[</bpt>To add the properties and helper methods of the form<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddHelperMethods)</ept>","source":"[To add the properties and helper methods of the form](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddHelperMethods)"},{"pos":[2663,2877],"content":"<bpt id=\"p1\">[</bpt>To configure the instance store, workflow lifecycle handlers, and extensions<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_ConfigureWorkflowApplication)</ept>","source":"[To configure the instance store, workflow lifecycle handlers, and extensions](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_ConfigureWorkflowApplication)"},{"pos":[2887,3070],"content":"<bpt id=\"p1\">[</bpt>To enable starting and resuming multiple workflow types<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_WorkflowVersionMap)</ept>","source":"[To enable starting and resuming multiple workflow types](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_WorkflowVersionMap)"},{"pos":[3080,3226],"content":"<bpt id=\"p1\">[</bpt>To start a new workflow<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_StartWorkflow)</ept>","source":"[To start a new workflow](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_StartWorkflow)"},{"pos":[3236,3380],"content":"<bpt id=\"p1\">[</bpt>To resume a workflow<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_ResumeWorkflow)</ept>","source":"[To resume a workflow](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_ResumeWorkflow)"},{"pos":[3390,3540],"content":"<bpt id=\"p1\">[</bpt>To terminate a workflow<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_TerminateWorkflow)</ept>","source":"[To terminate a workflow](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_TerminateWorkflow)"},{"pos":[3550,3703],"content":"<bpt id=\"p1\">[</bpt>To build and run the application<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_BuildAndRun)</ept>","source":"[To build and run the application](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_BuildAndRun)"},{"pos":[3714,3794],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_CreatePersistenceDatabase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To create the persistence database","linkify":"<a name=\"BKMK_CreatePersistenceDatabase\"></a> To create the persistence database","source":"<a name=\"BKMK_CreatePersistenceDatabase\"></a> To create the persistence database"},{"content":"Open SQL Server Management Studio and connect to the local server, for example <bpt id=\"p1\">**</bpt>.\\SQLEXPRESS<ept id=\"p1\">**</ept>.","pos":[3804,3900],"source":"Open SQL Server Management Studio and connect to the local server, for example **.\\SQLEXPRESS**."},{"content":"Right-click the <bpt id=\"p1\">**</bpt>Databases<ept id=\"p1\">**</ept> node on the local server, and select <bpt id=\"p2\">**</bpt>New Database<ept id=\"p2\">**</ept>.","pos":[3901,3985],"source":" Right-click the **Databases** node on the local server, and select **New Database**."},{"content":"Name the new database <bpt id=\"p1\">**</bpt>WF45GettingStartedTutorial<ept id=\"p1\">**</ept>, accept all other values, and select <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>.","pos":[3986,4083],"source":" Name the new database **WF45GettingStartedTutorial**, accept all other values, and select **OK**."},{"pos":[4095,4211],"content":"[!NOTE]\nEnsure that you have **Create Database** permission on the local server before creating the database.","leadings":["","    >  "],"nodes":[{"content":"Ensure that you have <bpt id=\"p1\">**</bpt>Create Database<ept id=\"p1\">**</ept> permission on the local server before creating the database.","pos":[8,109],"source":"Ensure that you have **Create Database** permission on the local server before creating the database."}]},{"content":"Choose <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> from the <bpt id=\"p3\">**</bpt>File<ept id=\"p3\">**</ept> menu.","pos":[4221,4270],"source":"Choose **Open**, **File** from the **File** menu."},{"content":"Browse to the following folder: <ph id=\"ph1\">`C:\\Windows\\Microsoft.NET\\Framework\\4.0.30319\\sql\\en`</ph>","pos":[4271,4356],"source":" Browse to the following folder: `C:\\Windows\\Microsoft.NET\\Framework\\4.0.30319\\sql\\en`"},{"pos":[4367,4417],"content":"Select the following two files and click <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>.","source":"Select the following two files and click **Open**."},{"content":"SqlWorkflowInstanceStoreLogic.sql","pos":[4431,4464]},{"content":"SqlWorkflowInstanceStoreSchema.sql","pos":[4478,4512]},{"content":"Choose <bpt id=\"p1\">**</bpt>SqlWorkflowInstanceStoreSchema.sql<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Window<ept id=\"p2\">**</ept> menu.","pos":[4522,4593],"source":"Choose **SqlWorkflowInstanceStoreSchema.sql** from the **Window** menu."},{"content":"Ensure that <bpt id=\"p1\">**</bpt>WF45GettingStartedTutorial<ept id=\"p1\">**</ept> is selected in the <bpt id=\"p2\">**</bpt>Available Databases<ept id=\"p2\">**</ept> drop-down and choose <bpt id=\"p3\">**</bpt>Execute<ept id=\"p3\">**</ept> from the <bpt id=\"p4\">**</bpt>Query<ept id=\"p4\">**</ept> menu.","pos":[4594,4737],"source":" Ensure that **WF45GettingStartedTutorial** is selected in the **Available Databases** drop-down and choose **Execute** from the **Query** menu."},{"content":"Choose <bpt id=\"p1\">**</bpt>SqlWorkflowInstanceStoreLogic.sql<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Window<ept id=\"p2\">**</ept> menu.","pos":[4747,4817],"source":"Choose **SqlWorkflowInstanceStoreLogic.sql** from the **Window** menu."},{"content":"Ensure that <bpt id=\"p1\">**</bpt>WF45GettingStartedTutorial<ept id=\"p1\">**</ept> is selected in the <bpt id=\"p2\">**</bpt>Available Databases<ept id=\"p2\">**</ept> drop-down and choose <bpt id=\"p3\">**</bpt>Execute<ept id=\"p3\">**</ept> from the <bpt id=\"p4\">**</bpt>Query<ept id=\"p4\">**</ept> menu.","pos":[4818,4961],"source":" Ensure that **WF45GettingStartedTutorial** is selected in the **Available Databases** drop-down and choose **Execute** from the **Query** menu."},{"pos":[4973,5175],"content":"[!WARNING]\nIt is important to perform the previous two steps in the correct order. If the queries are executed out of order, errors occur and the persistence database is not configured correctly.","leadings":["","    >  "],"nodes":[{"content":"It is important to perform the previous two steps in the correct order. If the queries are executed out of order, errors occur and the persistence database is not configured correctly.","pos":[11,195],"nodes":[{"content":"It is important to perform the previous two steps in the correct order.","pos":[0,71]},{"content":"If the queries are executed out of order, errors occur and the persistence database is not configured correctly.","pos":[72,184]}]}]},{"pos":[5186,5275],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_AddReference\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To add the reference to the DurableInstancing assemblies","linkify":"<a name=\"BKMK_AddReference\"></a> To add the reference to the DurableInstancing assemblies","source":"<a name=\"BKMK_AddReference\"></a> To add the reference to the DurableInstancing assemblies"},{"pos":[5285,5379],"content":"Right-click <bpt id=\"p1\">**</bpt>NumberGuessWorkflowHost<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and select <bpt id=\"p3\">**</bpt>Add Reference<ept id=\"p3\">**</ept>.","source":"Right-click **NumberGuessWorkflowHost** in **Solution Explorer** and select **Add Reference**."},{"content":"Select <bpt id=\"p1\">**</bpt>Assemblies<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept> list, and type <ph id=\"ph1\">`DurableInstancing`</ph> into the <bpt id=\"p3\">**</bpt>Search Assemblies<ept id=\"p3\">**</ept> box.","pos":[5389,5508],"source":"Select **Assemblies** from the **Add Reference** list, and type `DurableInstancing` into the **Search Assemblies** box."},{"content":"This filters the assemblies and makes the desired references easier to select.","pos":[5509,5587]},{"pos":[5597,5755],"content":"Check the checkbox beside <bpt id=\"p1\">**</bpt>System.Activities.DurableInstancing<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>System.Runtime.DurableInstancing<ept id=\"p2\">**</ept> from the <bpt id=\"p3\">**</bpt>Search Results<ept id=\"p3\">**</ept> list, and click <bpt id=\"p4\">**</bpt>OK<ept id=\"p4\">**</ept>.","source":"Check the checkbox beside **System.Activities.DurableInstancing** and **System.Runtime.DurableInstancing** from the **Search Results** list, and click **OK**."},{"pos":[5766,5829],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_CreateForm\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To create the workflow host form","linkify":"<a name=\"BKMK_CreateForm\"></a> To create the workflow host form","source":"<a name=\"BKMK_CreateForm\"></a> To create the workflow host form"},{"pos":[5837,7026],"content":"[!NOTE]\n The steps in this procedure describe how to add and configure the form manually. If desired, you can download the solution files for the tutorial and add the completed form to the project. To download the tutorial files, see [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976). Once the files are downloaded, right-click **NumberGuessWorkflowHost** and choose **Add Reference**. Add a reference to **System.Windows.Forms** and **System.Drawing**. These references are added automatically if you add a new form from the **Add**, **New Item** menu, but must be added manually when importing a form. Once the references are added, right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Add**, **Existing Item**. Browse to the `Form` folder in the project files, select **WorkflowHostForm.cs** (or **WorkflowHostForm.vb**), and click **Add**. If you choose to import the form, then you can skip down to the next section, [To add the properties and helper methods of the form](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddHelperMethods).","leadings":["","> "],"nodes":[{"content":" The steps in this procedure describe how to add and configure the form manually. If desired, you can download the solution files for the tutorial and add the completed form to the project. To download the tutorial files, see [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976). Once the files are downloaded, right-click **NumberGuessWorkflowHost** and choose **Add Reference**. Add a reference to **System.Windows.Forms** and **System.Drawing**. These references are added automatically if you add a new form from the **Add**, **New Item** menu, but must be added manually when importing a form. Once the references are added, right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Add**, **Existing Item**. Browse to the `Form` folder in the project files, select **WorkflowHostForm.cs** (or **WorkflowHostForm.vb**), and click **Add**. If you choose to import the form, then you can skip down to the next section, [To add the properties and helper methods of the form](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddHelperMethods).","pos":[8,1187],"nodes":[{"content":"The steps in this procedure describe how to add and configure the form manually.","pos":[1,81]},{"content":"If desired, you can download the solution files for the tutorial and add the completed form to the project.","pos":[82,189]},{"content":"To download the tutorial files, see <bpt id=\"p1\">[</bpt>Windows Workflow Foundation (WF45) - Getting Started Tutorial<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=248976)</ept>.","pos":[190,337],"source":" To download the tutorial files, see [Windows Workflow Foundation (WF45) - Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkID=248976)."},{"content":"Once the files are downloaded, right-click <bpt id=\"p1\">**</bpt>NumberGuessWorkflowHost<ept id=\"p1\">**</ept> and choose <bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept>.","pos":[338,438],"source":" Once the files are downloaded, right-click **NumberGuessWorkflowHost** and choose **Add Reference**."},{"content":"Add a reference to <bpt id=\"p1\">**</bpt>System.Windows.Forms<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>System.Drawing<ept id=\"p2\">**</ept>.","pos":[439,506],"source":" Add a reference to **System.Windows.Forms** and **System.Drawing**."},{"content":"These references are added automatically if you add a new form from the <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>New Item<ept id=\"p2\">**</ept> menu, but must be added manually when importing a form.","pos":[507,656],"source":" These references are added automatically if you add a new form from the **Add**, **New Item** menu, but must be added manually when importing a form."},{"content":"Once the references are added, right-click <bpt id=\"p1\">**</bpt>NumberGuessWorkflowHost<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Existing Item<ept id=\"p4\">**</ept>.","pos":[657,791],"source":" Once the references are added, right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Add**, **Existing Item**."},{"content":"Browse to the <ph id=\"ph1\">`Form`</ph> folder in the project files, select <bpt id=\"p1\">**</bpt>WorkflowHostForm.cs<ept id=\"p1\">**</ept> (or <bpt id=\"p2\">**</bpt>WorkflowHostForm.vb<ept id=\"p2\">**</ept>), and click <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>.","pos":[792,921],"source":" Browse to the `Form` folder in the project files, select **WorkflowHostForm.cs** (or **WorkflowHostForm.vb**), and click **Add**."},{"content":"If you choose to import the form, then you can skip down to the next section, <bpt id=\"p1\">[</bpt>To add the properties and helper methods of the form<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddHelperMethods)</ept>.","pos":[922,1179],"source":" If you choose to import the form, then you can skip down to the next section, [To add the properties and helper methods of the form](../../../docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md#BKMK_AddHelperMethods)."}]}]},{"pos":[7036,7134],"content":"Right-click <bpt id=\"p1\">**</bpt>NumberGuessWorkflowHost<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>New Item<ept id=\"p4\">**</ept>.","source":"Right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Add**, **New Item**."},{"pos":[7144,7269],"content":"In the <bpt id=\"p1\">**</bpt>Installed<ept id=\"p1\">**</ept> templates list, choose <bpt id=\"p2\">**</bpt>Windows Form<ept id=\"p2\">**</ept>, type <ph id=\"ph1\">`WorkflowHostForm`</ph> in the <bpt id=\"p3\">**</bpt>Name<ept id=\"p3\">**</ept> box, and click <bpt id=\"p4\">**</bpt>Add<ept id=\"p4\">**</ept>.","source":"In the **Installed** templates list, choose **Windows Form**, type `WorkflowHostForm` in the **Name** box, and click **Add**."},{"content":"Configure the following properties on the form.","pos":[7279,7326]},{"content":"Property","pos":[7337,7345]},{"content":"Value","pos":[7346,7351]},{"content":"FormBorderStyle","pos":[7395,7410]},{"content":"FixedSingle","pos":[7411,7422]},{"content":"MaximizeBox","pos":[7431,7442]},{"content":"False","pos":[7443,7448]},{"content":"Size","pos":[7457,7461]},{"content":"400, 420","pos":[7462,7470]},{"content":"Add the following controls to the form in the order specified and configure the properties as directed.","pos":[7481,7584]},{"content":"Control","pos":[7595,7602]},{"content":"Property: Value","pos":[7603,7618]},{"pos":[7671,7681],"content":"<bpt id=\"p1\">**</bpt>Button<ept id=\"p1\">**</ept>","source":"**Button**"},{"content":"Name: NewGame","pos":[7682,7695]},{"content":"Location: 13, 13","pos":[7708,7724]},{"content":"Size: 75, 23","pos":[7737,7749]},{"content":"Text: New Game","pos":[7762,7776]},{"pos":[7785,7794],"content":"<bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept>","source":"**Label**"},{"content":"Location: 94, 18","pos":[7795,7811]},{"content":"Text: Guess a number from 1 to","pos":[7824,7854]},{"pos":[7863,7875],"content":"<bpt id=\"p1\">**</bpt>ComboBox<ept id=\"p1\">**</ept>","source":"**ComboBox**"},{"content":"Name: NumberRange","pos":[7876,7893]},{"content":"DropDownStyle: DropDownList","pos":[7906,7933]},{"content":"Items: 10, 100, 1000","pos":[7946,7966]},{"content":"Location: 228, 12","pos":[7979,7996]},{"content":"Size: 143, 21","pos":[8009,8022]},{"pos":[8031,8040],"content":"<bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept>","source":"**Label**"},{"content":"Location: 13, 43","pos":[8041,8057]},{"content":"Text: Workflow type","pos":[8070,8089]},{"pos":[8098,8110],"content":"<bpt id=\"p1\">**</bpt>ComboBox<ept id=\"p1\">**</ept>","source":"**ComboBox**"},{"content":"Name: WorkflowType","pos":[8111,8129]},{"content":"DropDownStyle: DropDownList","pos":[8142,8169]},{"content":"Items: StateMachineNumberGuessWorkflow, FlowchartNumberGuessWorkflow, SequentialNumberGuessWorkflow","pos":[8182,8281]},{"content":"Location: 94, 40","pos":[8294,8310]},{"content":"Size: 277, 21","pos":[8323,8336]},{"pos":[8345,8354],"content":"<bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept>","source":"**Label**"},{"content":"Name: WorkflowVersion","pos":[8355,8376]},{"content":"Location: 13, 362","pos":[8389,8406]},{"content":"Text: Workflow version","pos":[8419,8441]},{"pos":[8450,8462],"content":"<bpt id=\"p1\">**</bpt>GroupBox<ept id=\"p1\">**</ept>","source":"**GroupBox**"},{"content":"Location: 13, 67","pos":[8463,8479]},{"content":"Size: 358, 287","pos":[8492,8506]},{"content":"Text: Game","pos":[8519,8529]},{"pos":[8542,8620],"content":"[!NOTE]\nWhen adding the following controls, put them into the GroupBox.","leadings":["","    >  "],"nodes":[{"content":"When adding the following controls, put them into the GroupBox.","pos":[8,71]}]},{"content":"Control","pos":[8631,8638]},{"content":"Property: Value","pos":[8639,8654]},{"pos":[8707,8716],"content":"<bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept>","source":"**Label**"},{"content":"Location: 7, 20","pos":[8717,8732]},{"content":"Text: Workflow Instance Id","pos":[8745,8771]},{"pos":[8780,8792],"content":"<bpt id=\"p1\">**</bpt>ComboBox<ept id=\"p1\">**</ept>","source":"**ComboBox**"},{"content":"Name: InstanceId","pos":[8793,8809]},{"content":"DropDownStyle: DropDownList","pos":[8822,8849]},{"content":"Location: 121, 17","pos":[8862,8879]},{"content":"Size: 227, 21","pos":[8892,8905]},{"pos":[8914,8923],"content":"<bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept>","source":"**Label**"},{"content":"Location: 7, 47","pos":[8924,8939]},{"content":"Text: Guess","pos":[8952,8963]},{"pos":[8972,8983],"content":"<bpt id=\"p1\">**</bpt>TextBox<ept id=\"p1\">**</ept>","source":"**TextBox**"},{"content":"Name: Guess","pos":[8984,8995]},{"content":"Location: 50, 44","pos":[9008,9024]},{"content":"Size: 65, 20","pos":[9037,9049]},{"pos":[9058,9068],"content":"<bpt id=\"p1\">**</bpt>Button<ept id=\"p1\">**</ept>","source":"**Button**"},{"content":"Name: EnterGuess","pos":[9069,9085]},{"content":"Location: 121, 42","pos":[9098,9115]},{"content":"Size: 75, 23","pos":[9128,9140]},{"content":"Text: Enter Guess","pos":[9153,9170]},{"pos":[9179,9189],"content":"<bpt id=\"p1\">**</bpt>Button<ept id=\"p1\">**</ept>","source":"**Button**"},{"content":"Name: QuitGame","pos":[9190,9204]},{"content":"Location: 274, 42","pos":[9217,9234]},{"content":"Size: 75, 23","pos":[9247,9259]},{"content":"Text: Quit","pos":[9272,9282]},{"pos":[9291,9302],"content":"<bpt id=\"p1\">**</bpt>TextBox<ept id=\"p1\">**</ept>","source":"**TextBox**"},{"content":"Name: WorkflowStatus","pos":[9303,9323]},{"content":"Location: 10, 73","pos":[9336,9352]},{"content":"Multiline: True","pos":[9365,9380]},{"content":"ReadOnly: True","pos":[9393,9407]},{"content":"ScrollBars: Vertical","pos":[9420,9440]},{"content":"Size: 338, 208","pos":[9453,9467]},{"pos":[9478,9542],"content":"Set the <bpt id=\"p1\">**</bpt>AcceptButton<ept id=\"p1\">**</ept> property of the form to <bpt id=\"p2\">**</bpt>EnterGuess<ept id=\"p2\">**</ept>.","source":"Set the **AcceptButton** property of the form to **EnterGuess**."},{"content":"The following example illustrates the completed form.","pos":[9549,9602]},{"pos":[9609,9811],"content":"<bpt id=\"p1\">![</bpt>WF45 Getting Started Tutorial Workflow Host Form<ept id=\"p1\">]</ept><bpt id=\"p2\">(../../../docs/framework/windows-workflow-foundation/media/wf45gettingstartedtutorialworkflowhostform.png \"</bpt>WF45GettingStartedTutorialWorkflowHostForm<ept id=\"p2\">\")</ept>","source":"![WF45 Getting Started Tutorial Workflow Host Form](../../../docs/framework/windows-workflow-foundation/media/wf45gettingstartedtutorialworkflowhostform.png \"WF45GettingStartedTutorialWorkflowHostForm\")"},{"pos":[9822,9911],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_AddHelperMethods\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To add the properties and helper methods of the form","linkify":"<a name=\"BKMK_AddHelperMethods\"></a> To add the properties and helper methods of the form","source":"<a name=\"BKMK_AddHelperMethods\"></a> To add the properties and helper methods of the form"},{"content":"The steps in this section add properties and helper methods to the form class that configure the UI of the form to support running and resuming number guess workflows.","pos":[9915,10082]},{"pos":[10092,10175],"content":"Right-click <bpt id=\"p1\">**</bpt>WorkflowHostForm<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>View Code<ept id=\"p3\">**</ept>.","source":"Right-click **WorkflowHostForm** in **Solution Explorer** and choose **View Code**."},{"pos":[10185,10309],"content":"Add the following <ph id=\"ph1\">`using`</ph> (or <ph id=\"ph2\">`Imports`</ph>) statements at the top of the file with the other <ph id=\"ph3\">`using`</ph> (or <ph id=\"ph4\">`Imports`</ph>) statements.","source":"Add the following `using` (or `Imports`) statements at the top of the file with the other `using` (or `Imports`) statements."},{"pos":[10722,10794],"content":"Add the following member declarations to the <bpt id=\"p1\">**</bpt>WorkflowHostForm<ept id=\"p1\">**</ept> class.","source":"Add the following member declarations to the **WorkflowHostForm** class."},{"pos":[11260,11367],"content":"[!NOTE]\nIf your connection string is different, update `connectionString` to refer to your database.","leadings":["","    >  "],"nodes":[{"content":"If your connection string is different, update <ph id=\"ph1\">`connectionString`</ph> to refer to your database.","pos":[8,100],"source":"If your connection string is different, update `connectionString` to refer to your database."}]},{"pos":[11377,11445],"content":"Add a <ph id=\"ph1\">`WorkflowInstanceId`</ph> property to the <ph id=\"ph2\">`WorkflowFormHost`</ph> class.","source":"Add a `WorkflowInstanceId` property to the `WorkflowFormHost` class."},{"pos":[12008,12165],"content":"The <ph id=\"ph1\">`InstanceId`</ph> combo box displays a list of persisted workflow instance ids, and the <ph id=\"ph2\">`WorkflowInstanceId`</ph> property returns the currently selected workflow.","source":"The `InstanceId` combo box displays a list of persisted workflow instance ids, and the `WorkflowInstanceId` property returns the currently selected workflow."},{"content":"Add a handler for the form <ph id=\"ph1\">`Load`</ph> event.","pos":[12175,12215],"source":"Add a handler for the form `Load` event."},{"content":"To add the handler, switch to <bpt id=\"p1\">**</bpt>Design View<ept id=\"p1\">**</ept> for the form, click the <bpt id=\"p2\">**</bpt>Events<ept id=\"p2\">**</ept> icon at the top of the <bpt id=\"p3\">**</bpt>Properties<ept id=\"p3\">**</ept> window, and double-click <bpt id=\"p4\">**</bpt>Load<ept id=\"p4\">**</ept>.","pos":[12216,12369],"source":" To add the handler, switch to **Design View** for the form, click the **Events** icon at the top of the **Properties** window, and double-click **Load**."},{"pos":[12628,12678],"content":"Add the following code to <ph id=\"ph1\">`WorkflowHostForm_Load`</ph>.","source":"Add the following code to `WorkflowHostForm_Load`."},{"pos":[13605,13816],"content":"When the form loads, the <ph id=\"ph1\">`SqlWorkflowInstanceStore`</ph> is configured, the range and workflow type combo boxes are set to default values, and the persisted workflow instances are added to the <ph id=\"ph2\">`InstanceId`</ph> combo box.","source":"When the form loads, the `SqlWorkflowInstanceStore` is configured, the range and workflow type combo boxes are set to default values, and the persisted workflow instances are added to the `InstanceId` combo box."},{"content":"Add a <ph id=\"ph1\">`SelectedIndexChanged`</ph> handler for <ph id=\"ph2\">`InstanceId`</ph>.","pos":[13826,13880],"source":"Add a `SelectedIndexChanged` handler for `InstanceId`."},{"content":"To add the handler, switch to <bpt id=\"p1\">**</bpt>Design View<ept id=\"p1\">**</ept> for the form, select the <ph id=\"ph1\">`InstanceId`</ph> combo box, click the <bpt id=\"p2\">**</bpt>Events<ept id=\"p2\">**</ept> icon at the top of the <bpt id=\"p3\">**</bpt>Properties<ept id=\"p3\">**</ept> window, and double-click <bpt id=\"p4\">**</bpt>SelectedIndexChanged<ept id=\"p4\">**</ept>.","pos":[13881,14085],"source":" To add the handler, switch to **Design View** for the form, select the `InstanceId` combo box, click the **Events** icon at the top of the **Properties** window, and double-click **SelectedIndexChanged**."},{"content":"Add the following code to <ph id=\"ph1\">`InstanceId_SelectedIndexChanged`</ph>.","pos":[14388,14448],"source":"Add the following code to `InstanceId_SelectedIndexChanged`."},{"content":"Whenever the user selects a workflow by using the combo box this handler updates the status window.","pos":[14449,14548]},{"pos":[16008,16076],"content":"Add the following <ph id=\"ph1\">`ListPersistedWorkflows`</ph> method to the form class.","source":"Add the following `ListPersistedWorkflows` method to the form class."},{"pos":[17671,17816],"content":"<ph id=\"ph1\">`ListPersistedWorkflows`</ph> queries the instance store for persisted workflow instances, and adds the instance ids to the <ph id=\"ph2\">`cboInstanceId`</ph> combo box.","source":"`ListPersistedWorkflows` queries the instance store for persisted workflow instances, and adds the instance ids to the `cboInstanceId` combo box."},{"content":"Add the following <ph id=\"ph1\">`UpdateStatus`</ph> method and corresponding delegate to the form class.","pos":[17826,17911],"source":"Add the following `UpdateStatus` method and corresponding delegate to the form class."},{"content":"This method updates the status window on the form with the status of the currently running workflow.","pos":[17912,18012]},{"content":"Add the following <ph id=\"ph1\">`GameOver`</ph> method and corresponding delegate to the form class.","pos":[19449,19530],"source":"Add the following `GameOver` method and corresponding delegate to the form class."},{"content":"When a workflow completes, this method updates the form UI by removing the instance id of the completed workflow from the <bpt id=\"p1\">**</bpt>InstanceId<ept id=\"p1\">**</ept> combo box.","pos":[19531,19678],"source":" When a workflow completes, this method updates the form UI by removing the instance id of the completed workflow from the **InstanceId** combo box."},{"pos":[20551,20676],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_ConfigureWorkflowApplication\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To configure the instance store, workflow lifecycle handlers, and extensions","linkify":"<a name=\"BKMK_ConfigureWorkflowApplication\"></a> To configure the instance store, workflow lifecycle handlers, and extensions","source":"<a name=\"BKMK_ConfigureWorkflowApplication\"></a> To configure the instance store, workflow lifecycle handlers, and extensions"},{"pos":[20686,20748],"content":"Add a <ph id=\"ph1\">`ConfigureWorkflowApplication`</ph> method to the form class.","source":"Add a `ConfigureWorkflowApplication` method to the form class."},{"pos":[21002,21133],"content":"This method configures the <ph id=\"ph1\">`WorkflowApplication`</ph>, adds the desired extensions, and adds handlers for the workflow lifecycle events.","source":"This method configures the `WorkflowApplication`, adds the desired extensions, and adds handlers for the workflow lifecycle events."},{"pos":[21143,21247],"content":"In <ph id=\"ph1\">`ConfigureWorkflowApplication`</ph>, specify the <ph id=\"ph2\">`SqlWorkflowInstanceStore`</ph> for the <ph id=\"ph3\">`WorkflowApplication`</ph>.","source":"In `ConfigureWorkflowApplication`, specify the `SqlWorkflowInstanceStore` for the `WorkflowApplication`."},{"content":"Next, create a <ph id=\"ph1\">`StringWriter`</ph> instance and add it to the <ph id=\"ph2\">`Extensions`</ph> collection of the <ph id=\"ph3\">`WorkflowApplication`</ph>.","pos":[21462,21572],"source":"Next, create a `StringWriter` instance and add it to the `Extensions` collection of the `WorkflowApplication`."},{"content":"When a <ph id=\"ph1\">`StringWriter`</ph> is added to the extensions it captures all <ph id=\"ph2\">`WriteLine`</ph> activity output.","pos":[21573,21666],"source":" When a `StringWriter` is added to the extensions it captures all `WriteLine` activity output."},{"content":"When the workflow becomes idle, the <ph id=\"ph1\">`WriteLine`</ph> output can be extracted from the <ph id=\"ph2\">`StringWriter`</ph> and displayed on the form.","pos":[21667,21789],"source":" When the workflow becomes idle, the `WriteLine` output can be extracted from the `StringWriter` and displayed on the form."},{"content":"Add the following handler for the <ph id=\"ph1\">`Completed`</ph> event.","pos":[22281,22333],"source":"Add the following handler for the `Completed` event."},{"content":"When a workflow successfully completes, the number of turns taken to guess the number is displayed to the status window.","pos":[22334,22454]},{"content":"If the workflow terminates, the exception information that caused the termination is displayed.","pos":[22455,22550]},{"content":"At the end of the handler the <ph id=\"ph1\">`GameOver`</ph> method is called, which removes the completed workflow from the workflow list.","pos":[22551,22670],"source":" At the end of the handler the `GameOver` method is called, which removes the completed workflow from the workflow list."},{"content":"Add the following <ph id=\"ph1\">`Aborted`</ph> and <ph id=\"ph2\">`OnUnhandledException`</ph> handlers.","pos":[24273,24337],"source":"Add the following `Aborted` and `OnUnhandledException` handlers."},{"content":"The <ph id=\"ph1\">`GameOver`</ph> method is not called from the <ph id=\"ph2\">`Aborted`</ph> handler because when a workflow instance is aborted, it does not terminate, and it is possible to resume the instance at a later time.","pos":[24338,24527],"source":" The `GameOver` method is not called from the `Aborted` handler because when a workflow instance is aborted, it does not terminate, and it is possible to resume the instance at a later time."},{"content":"Add the following <ph id=\"ph1\">`PersistableIdle`</ph> handler.","pos":[25907,25951],"source":"Add the following `PersistableIdle` handler."},{"content":"This handler retrieves the <ph id=\"ph1\">`StringWriter`</ph> extension that was added, extracts the output from the <ph id=\"ph2\">`WriteLine`</ph> activities, and displays it in the status window.","pos":[25952,26110],"source":" This handler retrieves the `StringWriter` extension that was added, extracts the output from the `WriteLine` activities, and displays it in the status window."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.PersistableIdleAction&gt;</ph> enumeration has three values: <ph id=\"ph2\">&lt;xref:System.Activities.PersistableIdleAction&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Activities.PersistableIdleAction&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Activities.PersistableIdleAction&gt;</ph>.","pos":[26978,27206],"source":"The <xref:System.Activities.PersistableIdleAction> enumeration has three values: <xref:System.Activities.PersistableIdleAction>, <xref:System.Activities.PersistableIdleAction>, and <xref:System.Activities.PersistableIdleAction>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.PersistableIdleAction&gt;</ph> causes the workflow to persist but it does not cause the workflow to unload.","pos":[27207,27330],"source":"<xref:System.Activities.PersistableIdleAction> causes the workflow to persist but it does not cause the workflow to unload."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.PersistableIdleAction&gt;</ph> causes the workflow to persist and be unloaded.","pos":[27331,27425],"source":"<xref:System.Activities.PersistableIdleAction> causes the workflow to persist and be unloaded."},{"pos":[27436,27513],"content":"The following example is the completed <ph id=\"ph1\">`ConfigureWorkflowApplication`</ph> method.","source":"The following example is the completed `ConfigureWorkflowApplication` method."},{"pos":[32389,32483],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_WorkflowVersionMap\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To enable starting and resuming multiple workflow types","linkify":"<a name=\"BKMK_WorkflowVersionMap\"></a> To enable starting and resuming multiple workflow types","source":"<a name=\"BKMK_WorkflowVersionMap\"></a> To enable starting and resuming multiple workflow types"},{"content":"In order to resume a workflow instance, the host has to provide the workflow definition.","pos":[32487,32575]},{"content":"In this tutorial there are three workflow types, and subsequent tutorial steps introduce multiple versions of these types.","pos":[32576,32698]},{"content":"<ph id=\"ph1\">`WorkflowIdentity`</ph> provides a way for a host application to associate identifying information with a persisted workflow instance.","pos":[32699,32828],"source":"`WorkflowIdentity` provides a way for a host application to associate identifying information with a persisted workflow instance."},{"content":"The steps in this section demonstrate how to create a utility class to assist with mapping the workflow identity from a persisted workflow instance to the corresponding workflow definition.","pos":[32829,33018]},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph><ph id=\"ph2\">`WorkflowIdentity`</ph> and versioning, see <bpt id=\"p1\">[</bpt>Using WorkflowIdentity and Versioning<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/using-workflowidentity-and-versioning.md)</ept>.","pos":[33019,33244],"source":"[!INCLUDE[crabout](../../../includes/crabout-md.md)]`WorkflowIdentity` and versioning, see [Using WorkflowIdentity and Versioning](../../../docs/framework/windows-workflow-foundation/using-workflowidentity-and-versioning.md)."},{"content":"Right-click <bpt id=\"p1\">**</bpt>NumberGuessWorkflowHost<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Class<ept id=\"p4\">**</ept>.","pos":[33254,33349],"source":"Right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Add**, **Class**."},{"content":"Type <ph id=\"ph1\">`WorkflowVersionMap`</ph> into the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> box and click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.","pos":[33350,33416],"source":" Type `WorkflowVersionMap` into the **Name** box and click **Add**."},{"pos":[33426,33546],"content":"Add the following <ph id=\"ph1\">`using`</ph> or <ph id=\"ph2\">`Imports`</ph> statements at the top of the file with the other <ph id=\"ph3\">`using`</ph> or <ph id=\"ph4\">`Imports`</ph> statements.","source":"Add the following `using` or `Imports` statements at the top of the file with the other `using` or `Imports` statements."},{"pos":[33760,33842],"content":"Replace the <ph id=\"ph1\">`WorkflowVersionMap`</ph> class declaration with the following declaration.","source":"Replace the `WorkflowVersionMap` class declaration with the following declaration."},{"pos":[37475,37670],"content":"<ph id=\"ph1\">`WorkflowVersionMap`</ph> contains three workflow identities that map to the three workflow definitions from this tutorial and is used in the following sections when workflows are started and resumed.","source":"`WorkflowVersionMap` contains three workflow identities that map to the three workflow definitions from this tutorial and is used in the following sections when workflows are started and resumed."},{"pos":[37681,37738],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_StartWorkflow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To start a new workflow","linkify":"<a name=\"BKMK_StartWorkflow\"></a> To start a new workflow","source":"<a name=\"BKMK_StartWorkflow\"></a> To start a new workflow"},{"content":"Add a <ph id=\"ph1\">`Click`</ph> handler for <ph id=\"ph2\">`NewGame`</ph>.","pos":[37748,37784],"source":"Add a `Click` handler for `NewGame`."},{"content":"To add the handler, switch to <bpt id=\"p1\">**</bpt>Design View<ept id=\"p1\">**</ept> for the form, and double-click <ph id=\"ph1\">`NewGame`</ph>.","pos":[37785,37872],"source":" To add the handler, switch to **Design View** for the form, and double-click `NewGame`."},{"content":"A <ph id=\"ph1\">`NewGame_Click`</ph> handler is added and the view switches to code view for the form.","pos":[37873,37956],"source":" A `NewGame_Click` handler is added and the view switches to code view for the form."},{"content":"Whenever the user clicks this button a new workflow is started.","pos":[37957,38020]},{"content":"Add the following code to the click handler.","pos":[38269,38313]},{"content":"This code creates a dictionary of input arguments for the workflow, keyed by argument name.","pos":[38314,38405]},{"content":"This dictionary has one entry that contains the range of the randomly generated number retrieved from the range combo box.","pos":[38406,38528]},{"content":"Next, add the following code that starts the workflow.","pos":[38848,38902]},{"content":"The <ph id=\"ph1\">`WorkflowIdentity`</ph> and workflow definition corresponding to the type of workflow selected are retrieved using the <ph id=\"ph2\">`WorkflowVersionMap`</ph> helper class.","pos":[38903,39055],"source":" The `WorkflowIdentity` and workflow definition corresponding to the type of workflow selected are retrieved using the `WorkflowVersionMap` helper class."},{"content":"Next, a new <ph id=\"ph1\">`WorkflowApplication`</ph> instance is created using the workflow definition, <ph id=\"ph2\">`WorkflowIdentity`</ph>, and dictionary of input arguments.","pos":[39056,39195],"source":" Next, a new `WorkflowApplication` instance is created using the workflow definition, `WorkflowIdentity`, and dictionary of input arguments."},{"content":"Next, add the following code which adds the workflow to the workflow list and displays the workflow's version information on the form.","pos":[40607,40741]},{"pos":[41305,41458],"content":"Call <ph id=\"ph1\">`ConfigureWorkflowApplication`</ph> to configure the instance store, extensions, and workflow lifecycle handlers for this <ph id=\"ph2\">`WorkflowApplication`</ph> instance.","source":"Call `ConfigureWorkflowApplication` to configure the instance store, extensions, and workflow lifecycle handlers for this `WorkflowApplication` instance."},{"pos":[41791,41811],"content":"Finally, call <ph id=\"ph1\">`Run`</ph>.","source":"Finally, call `Run`."},{"pos":[41963,42026],"content":"The following example is the completed <ph id=\"ph1\">`NewGame_Click`</ph> handler.","source":"The following example is the completed `NewGame_Click` handler."},{"pos":[44993,45048],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_ResumeWorkflow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To resume a workflow","linkify":"<a name=\"BKMK_ResumeWorkflow\"></a> To resume a workflow","source":"<a name=\"BKMK_ResumeWorkflow\"></a> To resume a workflow"},{"content":"Add a <ph id=\"ph1\">`Click`</ph> handler for <ph id=\"ph2\">`EnterGuess`</ph>.","pos":[45058,45097],"source":"Add a `Click` handler for `EnterGuess`."},{"content":"To add the handler, switch to <bpt id=\"p1\">**</bpt>Design View<ept id=\"p1\">**</ept> for the form, and double-click <ph id=\"ph1\">`EnterGuess`</ph>.","pos":[45098,45188],"source":" To add the handler, switch to **Design View** for the form, and double-click `EnterGuess`."},{"content":"Whenever the user clicks this button a workflow is resumed.","pos":[45189,45248]},{"content":"Add the following code to ensure that a workflow is selected in the workflow list, and that the user's guess is valid.","pos":[45506,45624]},{"content":"Next, retrieve the <ph id=\"ph1\">`WorkflowApplicationInstance`</ph> of the persisted workflow instance.","pos":[46392,46476],"source":"Next, retrieve the `WorkflowApplicationInstance` of the persisted workflow instance."},{"content":"A <ph id=\"ph1\">`WorkflowApplicationInstance`</ph> represents a persisted workflow instance that has not yet been associated with a workflow definition.","pos":[46477,46610],"source":" A `WorkflowApplicationInstance` represents a persisted workflow instance that has not yet been associated with a workflow definition."},{"content":"The <ph id=\"ph1\">`DefinitionIdentity`</ph> of the <ph id=\"ph2\">`WorkflowApplicationInstance`</ph> contains the <ph id=\"ph3\">`WorkflowIdentity`</ph> of the persisted workflow instance.","pos":[46611,46740],"source":" The `DefinitionIdentity` of the `WorkflowApplicationInstance` contains the `WorkflowIdentity` of the persisted workflow instance."},{"content":"In this tutorial, the <ph id=\"ph1\">`WorkflowVersionMap`</ph> utility class is used to map the <ph id=\"ph2\">`WorkflowIdentity`</ph> to the correct workflow definition.","pos":[46741,46871],"source":" In this tutorial, the `WorkflowVersionMap` utility class is used to map the `WorkflowIdentity` to the correct workflow definition."},{"content":"Once the workflow definition is retrieved, a <ph id=\"ph1\">`WorkflowApplication`</ph> is created, using the correct workflow definition.","pos":[46872,46989],"source":" Once the workflow definition is retrieved, a `WorkflowApplication` is created, using the correct workflow definition."},{"content":"Once the <ph id=\"ph1\">`WorkflowApplication`</ph> is created, configure the instance store, workflow lifecycle handlers, and extensions by calling <ph id=\"ph2\">`ConfigureWorkflowApplication`</ph>.","pos":[48097,48256],"source":"Once the `WorkflowApplication` is created, configure the instance store, workflow lifecycle handlers, and extensions by calling `ConfigureWorkflowApplication`."},{"content":"These steps must be done every time a new <ph id=\"ph1\">`WorkflowApplication`</ph> is created, and they must be done before the workflow instance is loaded into the <ph id=\"ph2\">`WorkflowApplication`</ph>.","pos":[48257,48425],"source":" These steps must be done every time a new `WorkflowApplication` is created, and they must be done before the workflow instance is loaded into the `WorkflowApplication`."},{"content":"After the workflow is loaded, it is resumed with the user's guess.","pos":[48426,48492]},{"content":"Finally, clear the guess textbox and prepare the form to accept another guess.","pos":[49269,49347]},{"pos":[49560,49626],"content":"The following example is the completed <ph id=\"ph1\">`EnterGuess_Click`</ph> handler.","source":"The following example is the completed `EnterGuess_Click` handler."},{"pos":[52762,52823],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_TerminateWorkflow\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To terminate a workflow","linkify":"<a name=\"BKMK_TerminateWorkflow\"></a> To terminate a workflow","source":"<a name=\"BKMK_TerminateWorkflow\"></a> To terminate a workflow"},{"content":"Add a <ph id=\"ph1\">`Click`</ph> handler for <ph id=\"ph2\">`QuitGame`</ph>.","pos":[52833,52870],"source":"Add a `Click` handler for `QuitGame`."},{"content":"To add the handler, switch to <bpt id=\"p1\">**</bpt>Design View<ept id=\"p1\">**</ept> for the form, and double-click <ph id=\"ph1\">`QuitGame`</ph>.","pos":[52871,52959],"source":" To add the handler, switch to **Design View** for the form, and double-click `QuitGame`."},{"content":"Whenever the user clicks this button the currently selected workflow is terminated.","pos":[52960,53043]},{"content":"Add the following code to the <ph id=\"ph1\">`QuitGame_Click`</ph> handler.","pos":[53295,53350],"source":"Add the following code to the `QuitGame_Click` handler."},{"content":"This code first checks to ensure that a workflow is selected in the workflow list.","pos":[53351,53433]},{"content":"Then it loads the persisted instance into a <ph id=\"ph1\">`WorkflowApplicationInstance`</ph>, uses the <ph id=\"ph2\">`DefinitionIdentity`</ph> to determine the correct workflow definition, and then initializes the <ph id=\"ph3\">`WorkflowApplication`</ph>.","pos":[53434,53632],"source":" Then it loads the persisted instance into a `WorkflowApplicationInstance`, uses the `DefinitionIdentity` to determine the correct workflow definition, and then initializes the `WorkflowApplication`."},{"content":"Next the extensions and workflow lifecycle handlers are configured with a call to <ph id=\"ph1\">`ConfigureWorkflowApplication`</ph>.","pos":[53633,53746],"source":" Next the extensions and workflow lifecycle handlers are configured with a call to `ConfigureWorkflowApplication`."},{"content":"Once the <ph id=\"ph1\">`WorkflowApplication`</ph> is configured, it is loaded, and then <ph id=\"ph2\">`Terminate`</ph> is called.","pos":[53747,53838],"source":" Once the `WorkflowApplication` is configured, it is loaded, and then `Terminate` is called."},{"pos":[55665,55729],"content":"<bpt id=\"p1\">&lt;a name=\"BKMK_BuildAndRun\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> To build and run the application","linkify":"<a name=\"BKMK_BuildAndRun\"></a> To build and run the application","source":"<a name=\"BKMK_BuildAndRun\"></a> To build and run the application"},{"pos":[55739,55832],"content":"Double-click <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> (or <bpt id=\"p2\">**</bpt>Module1.vb<ept id=\"p2\">**</ept>) in <bpt id=\"p3\">**</bpt>Solution Explorer<ept id=\"p3\">**</ept> to display the code.","source":"Double-click **Program.cs** (or **Module1.vb**) in **Solution Explorer** to display the code."},{"pos":[55842,55965],"content":"Add the following <ph id=\"ph1\">`using`</ph> (or <ph id=\"ph2\">`Imports`</ph>) statement at the top of the file with the other <ph id=\"ph3\">`using`</ph> (or <ph id=\"ph4\">`Imports`</ph>) statements.","source":"Add the following `using` (or `Imports`) statement at the top of the file with the other `using` (or `Imports`) statements."},{"pos":[56098,56303],"content":"Remove or comment out the existing workflow hosting code from <bpt id=\"p1\">[</bpt>How to: Run a Workflow<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-run-a-workflow.md)</ept>, and replace it with the following code.","source":"Remove or comment out the existing workflow hosting code from [How to: Run a Workflow](../../../docs/framework/windows-workflow-foundation/how-to-run-a-workflow.md), and replace it with the following code."},{"content":"Right-click <bpt id=\"p1\">**</bpt>NumberGuessWorkflowHost<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> and choose <bpt id=\"p3\">**</bpt>Properties<ept id=\"p3\">**</ept>.","pos":[56640,56731],"source":"Right-click **NumberGuessWorkflowHost** in **Solution Explorer** and choose **Properties**."},{"content":"In the <bpt id=\"p1\">**</bpt>Application<ept id=\"p1\">**</ept> tab, specify <bpt id=\"p2\">**</bpt>Windows Application<ept id=\"p2\">**</ept> for the <bpt id=\"p3\">**</bpt>Output type<ept id=\"p3\">**</ept>.","pos":[56732,56816],"source":" In the **Application** tab, specify **Windows Application** for the **Output type**."},{"content":"This step is optional, but if it is not followed the console window is displayed in addition to the form.","pos":[56817,56922]},{"content":"Press Ctrl+Shift+B to build the application.","pos":[56932,56976]},{"pos":[56986,57104],"content":"Ensure that <bpt id=\"p1\">**</bpt>NumberGuessWorkflowHost<ept id=\"p1\">**</ept> is set as the startup application, and press Ctrl+F5 to start the application.","source":"Ensure that **NumberGuessWorkflowHost** is set as the startup application, and press Ctrl+F5 to start the application."},{"content":"Select a range for the guessing game and the type of workflow to start, and click <bpt id=\"p1\">**</bpt>New Game<ept id=\"p1\">**</ept>.","pos":[57114,57209],"source":"Select a range for the guessing game and the type of workflow to start, and click **New Game**."},{"content":"Enter a guess in the <bpt id=\"p1\">**</bpt>Guess<ept id=\"p1\">**</ept> box and click <bpt id=\"p2\">**</bpt>Go<ept id=\"p2\">**</ept> to submit your guess.","pos":[57210,57283],"source":" Enter a guess in the **Guess** box and click **Go** to submit your guess."},{"content":"Note that the output from the <ph id=\"ph1\">`WriteLine`</ph> activities is displayed on the form.","pos":[57284,57362],"source":" Note that the output from the `WriteLine` activities is displayed on the form."},{"pos":[57372,57551],"content":"Start several workflows using different workflow types and number ranges, enter some guesses, and switch between the workflows by selecting from the <bpt id=\"p1\">**</bpt>Workflow Instance Id<ept id=\"p1\">**</ept> list.","source":"Start several workflows using different workflow types and number ranges, enter some guesses, and switch between the workflows by selecting from the **Workflow Instance Id** list."},{"content":"Note that when you switch to a new workflow, the previous guesses and progress of the workflow are not displayed in the status window.","pos":[57562,57696]},{"content":"The reason the status is not available is because it is not captured and saved anywhere.","pos":[57697,57785]},{"content":"In the next step of the tutorial, <bpt id=\"p1\">[</bpt>How to: Create a Custom Tracking Participant<ept id=\"p1\">](../../../docs/framework/windows-workflow-foundation/how-to-create-a-custom-tracking-participant.md)</ept>, you create a custom tracking participant that saves this information.","pos":[57786,58037],"source":" In the next step of the tutorial, [How to: Create a Custom Tracking Participant](../../../docs/framework/windows-workflow-foundation/how-to-create-a-custom-tracking-participant.md), you create a custom tracking participant that saves this information."}]}