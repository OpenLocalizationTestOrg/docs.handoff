{"content":"---\ntitle: C# Statements - A tour of the C# language\ndescription: You create the actions of a C# program using statements\nms.date: 11/06/2016\nms.assetid: 5409c379-5622-4fae-88b5-1654276ea8d4\n---\n\n# Statements\n\nThe actions of a program are expressed using *statements*. C# supports several different kinds of statements, a number of which are defined in terms of embedded statements.\n\nA *block* permits multiple statements to be written in contexts where a single statement is allowed. A block consists of a list of statements written between the delimiters `{` and `}`.\n\n*Declaration statements* are used to declare local variables and constants.\n\n*Expression statements* are used to evaluate expressions. Expressions that can be used as statements include method invocations, object allocations using the `new` operator, assignments using `=` and the compound assignment operators, increment and decrement operations using the `++` and `--` operators and `await` expressions.\n\n*Selection statements* are used to select one of a number of possible statements for execution based on the value of some expression. In this group are the `if` and `switch` statements.\n\n*Iteration statements* are used to execute repeatedly an embedded statement. In this group are the `while`, `do`, `for`, and `foreach` statements.\n\n*Jump statements* are used to transfer control. In this group are the `break`, `continue`, `goto`, `throw`, `return`, and `yield` statements.\n\nThe `try`...`catch` statement is used to catch exceptions that occur during execution of a block, and the `try`...`finally` statement is used to specify finalization code that is always executed, whether an exception occurred or not.\n\nThe `checked` and `unchecked` statements are used to control the overflow-checking context for integral-type arithmetic operations and conversions.\n\nThe `lock` statement is used to obtain the mutual-exclusion lock for a given object, execute a statement, and then release the lock.\n\nThe `using` statement is used to obtain a resource, execute a statement, and then dispose of that resource.\n\nThe following lists the kinds of statements that can be used, and provides an example for each.\n\n* Local variable declaration:\n\n [!code-csharp[Declarations](../../../samples/snippets/csharp/tour/statements/Program.cs#L9-L15)]\n\n* Local constant declaration:\n\n [!code-csharp[ConstantDeclarations](../../../samples/snippets/csharp/tour/statements/Program.cs#L17-L22)]\n\n* Expression statement:\n\n [!code-csharp[Expressions](../../../samples/snippets/csharp/tour/statements/Program.cs#L24-L31)]\n\n* `if` statement:\n\n [!code-csharp[IfStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L33-L43)]\n\n* `switch` statement:\n\n [!code-csharp[SwitchStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L45-L60)]\n\n* `while` statement:\n\n [!code-csharp[WhileStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L62-L70)]\n\n* `do` statement:\n\n [!code-csharp[DoStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L72-L81)]\n\n* `for` statement:\n\n [!code-csharp[ForStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L83-L89)]\n\n* `foreach` statement:\n\n [!code-csharp[ForEachStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L91-L97)]\n\n* `break` statement:\n\n [!code-csharp[BreakStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L99-L108)]\n\n* `continue` statement:\n\n [!code-csharp[ContinueStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L110-L118)]\n\n* `goto` statement:\n\n [!code-csharp[GotoStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L120-L129)]\n\n* `return` statement:\n\n [!code-csharp[ReturnStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L131-L139)]\n\n* `yield` statement:\n\n [!code-csharp[YieldStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L141-L155)]\n\n* `throw` statements and `try` statements:\n\n [!code-csharp[TryThrow](../../../samples/snippets/csharp/tour/statements/Program.cs#L157-L183)]\n\n* `checked` and `unchecked` statements:\n\n [!code-csharp[CheckedUncheckedStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L185-L196)]\n\n* `lock` statement:\n\n [!code-csharp[LockStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L257-L273)]\n\n* `using` statement:\n\n [!code-csharp[UsingStatement](../../../samples/snippets/csharp/tour/statements/Program.cs#L198-L206)]\n\n>[!div class=\"step-by-step\"]\n>[Previous](expressions.md)\n>[Next](classes-and-objects.md)","nodes":[{"pos":[4,190],"embed":true,"restype":"x-metadata","content":"title: C# Statements - A tour of the C# language\ndescription: You create the actions of a C# program using statements\nms.date: 11/06/2016\nms.assetid: 5409c379-5622-4fae-88b5-1654276ea8d4","nodes":[{"content":"C# Statements - A tour of the C# language","nodes":[{"pos":[0,41],"content":"C# Statements - A tour of the C# language","nodes":[{"content":"C# Statements - A tour of the C# language","pos":[0,41]}]}],"path":["title"],"nosxs":false},{"content":"You create the actions of a C# program using statements","nodes":[{"pos":[0,55],"content":"You create the actions of a C# program using statements","nodes":[{"content":"You create the actions of a C# program using statements","pos":[0,55]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[198,208],"content":"Statements","linkify":"Statements","nodes":[{"content":"Statements","pos":[0,10]}]},{"content":"The actions of a program are expressed using <bpt id=\"p1\">*</bpt>statements<ept id=\"p1\">*</ept>.","pos":[210,268],"source":"The actions of a program are expressed using *statements*."},{"content":"C# supports several different kinds of statements, a number of which are defined in terms of embedded statements.","pos":[269,382]},{"content":"A <bpt id=\"p1\">*</bpt>block<ept id=\"p1\">*</ept> permits multiple statements to be written in contexts where a single statement is allowed.","pos":[384,484],"source":"A *block* permits multiple statements to be written in contexts where a single statement is allowed."},{"content":"A block consists of a list of statements written between the delimiters <ph id=\"ph1\">`{`</ph> and <ph id=\"ph2\">`}`</ph>.","pos":[485,569],"source":" A block consists of a list of statements written between the delimiters `{` and `}`."},{"pos":[571,646],"content":"<bpt id=\"p1\">*</bpt>Declaration statements<ept id=\"p1\">*</ept> are used to declare local variables and constants.","source":"*Declaration statements* are used to declare local variables and constants."},{"content":"<bpt id=\"p1\">*</bpt>Expression statements<ept id=\"p1\">*</ept> are used to evaluate expressions.","pos":[648,705],"source":"*Expression statements* are used to evaluate expressions."},{"content":"Expressions that can be used as statements include method invocations, object allocations using the <ph id=\"ph1\">`new`</ph> operator, assignments using <ph id=\"ph2\">`=`</ph> and the compound assignment operators, increment and decrement operations using the <ph id=\"ph3\">`++`</ph> and <ph id=\"ph4\">`--`</ph> operators and <ph id=\"ph5\">`await`</ph> expressions.","pos":[706,976],"source":" Expressions that can be used as statements include method invocations, object allocations using the `new` operator, assignments using `=` and the compound assignment operators, increment and decrement operations using the `++` and `--` operators and `await` expressions."},{"content":"<bpt id=\"p1\">*</bpt>Selection statements<ept id=\"p1\">*</ept> are used to select one of a number of possible statements for execution based on the value of some expression.","pos":[978,1111],"source":"*Selection statements* are used to select one of a number of possible statements for execution based on the value of some expression."},{"content":"In this group are the <ph id=\"ph1\">`if`</ph> and <ph id=\"ph2\">`switch`</ph> statements.","pos":[1112,1163],"source":" In this group are the `if` and `switch` statements."},{"content":"<bpt id=\"p1\">*</bpt>Iteration statements<ept id=\"p1\">*</ept> are used to execute repeatedly an embedded statement.","pos":[1165,1241],"source":"*Iteration statements* are used to execute repeatedly an embedded statement."},{"content":"In this group are the <ph id=\"ph1\">`while`</ph>, <ph id=\"ph2\">`do`</ph>, <ph id=\"ph3\">`for`</ph>, and <ph id=\"ph4\">`foreach`</ph> statements.","pos":[1242,1311],"source":" In this group are the `while`, `do`, `for`, and `foreach` statements."},{"content":"<bpt id=\"p1\">*</bpt>Jump statements<ept id=\"p1\">*</ept> are used to transfer control.","pos":[1313,1360],"source":"*Jump statements* are used to transfer control."},{"content":"In this group are the <ph id=\"ph1\">`break`</ph>, <ph id=\"ph2\">`continue`</ph>, <ph id=\"ph3\">`goto`</ph>, <ph id=\"ph4\">`throw`</ph>, <ph id=\"ph5\">`return`</ph>, and <ph id=\"ph6\">`yield`</ph> statements.","pos":[1361,1454],"source":" In this group are the `break`, `continue`, `goto`, `throw`, `return`, and `yield` statements."},{"pos":[1456,1689],"content":"The <ph id=\"ph1\">`try`</ph>...<ph id=\"ph2\">`catch`</ph> statement is used to catch exceptions that occur during execution of a block, and the <ph id=\"ph3\">`try`</ph>...<ph id=\"ph4\">`finally`</ph> statement is used to specify finalization code that is always executed, whether an exception occurred or not.","source":"The `try`...`catch` statement is used to catch exceptions that occur during execution of a block, and the `try`...`finally` statement is used to specify finalization code that is always executed, whether an exception occurred or not."},{"pos":[1691,1838],"content":"The <ph id=\"ph1\">`checked`</ph> and <ph id=\"ph2\">`unchecked`</ph> statements are used to control the overflow-checking context for integral-type arithmetic operations and conversions.","source":"The `checked` and `unchecked` statements are used to control the overflow-checking context for integral-type arithmetic operations and conversions."},{"pos":[1840,1972],"content":"The <ph id=\"ph1\">`lock`</ph> statement is used to obtain the mutual-exclusion lock for a given object, execute a statement, and then release the lock.","source":"The `lock` statement is used to obtain the mutual-exclusion lock for a given object, execute a statement, and then release the lock."},{"pos":[1974,2081],"content":"The <ph id=\"ph1\">`using`</ph> statement is used to obtain a resource, execute a statement, and then dispose of that resource.","source":"The `using` statement is used to obtain a resource, execute a statement, and then dispose of that resource."},{"content":"The following lists the kinds of statements that can be used, and provides an example for each.","pos":[2083,2178]},{"content":"Local variable declaration:","pos":[2182,2209]},{"content":"Local constant declaration:","pos":[2312,2339]},{"content":"Expression statement:","pos":[2451,2472]},{"pos":[2575,2590],"content":"<ph id=\"ph1\">`if`</ph> statement:","source":"`if` statement:"},{"pos":[2693,2712],"content":"<ph id=\"ph1\">`switch`</ph> statement:","source":"`switch` statement:"},{"pos":[2819,2837],"content":"<ph id=\"ph1\">`while`</ph> statement:","source":"`while` statement:"},{"pos":[2943,2958],"content":"<ph id=\"ph1\">`do`</ph> statement:","source":"`do` statement:"},{"pos":[3061,3077],"content":"<ph id=\"ph1\">`for`</ph> statement:","source":"`for` statement:"},{"pos":[3181,3201],"content":"<ph id=\"ph1\">`foreach`</ph> statement:","source":"`foreach` statement:"},{"pos":[3309,3327],"content":"<ph id=\"ph1\">`break`</ph> statement:","source":"`break` statement:"},{"pos":[3434,3455],"content":"<ph id=\"ph1\">`continue`</ph> statement:","source":"`continue` statement:"},{"pos":[3566,3583],"content":"<ph id=\"ph1\">`goto`</ph> statement:","source":"`goto` statement:"},{"pos":[3690,3709],"content":"<ph id=\"ph1\">`return`</ph> statement:","source":"`return` statement:"},{"pos":[3818,3836],"content":"<ph id=\"ph1\">`yield`</ph> statement:","source":"`yield` statement:"},{"pos":[3944,3984],"content":"<ph id=\"ph1\">`throw`</ph> statements and <ph id=\"ph2\">`try`</ph> statements:","source":"`throw` statements and `try` statements:"},{"pos":[4086,4123],"content":"<ph id=\"ph1\">`checked`</ph> and <ph id=\"ph2\">`unchecked`</ph> statements:","source":"`checked` and `unchecked` statements:"},{"pos":[4242,4259],"content":"<ph id=\"ph1\">`lock`</ph> statement:","source":"`lock` statement:"},{"pos":[4366,4384],"content":"<ph id=\"ph1\">`using`</ph> statement:","source":"`using` statement:"},{"pos":[4491,4578],"content":"[!div class=\"step-by-step\"]\n[Previous](expressions.md)\n[Next](classes-and-objects.md)","leadings":["",">",">"],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Previous<ept id=\"p1\">](expressions.md)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">[</bpt>Next<ept id=\"p2\">](classes-and-objects.md)</ept>","pos":[28,85],"source":"[Previous](expressions.md)\n[Next](classes-and-objects.md)"}]}]}