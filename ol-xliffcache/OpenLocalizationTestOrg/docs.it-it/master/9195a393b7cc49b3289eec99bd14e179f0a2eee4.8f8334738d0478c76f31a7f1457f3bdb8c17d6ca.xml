{"content":"---\ntitle: \"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred because the loop bounds and the step variable do not widen to the same type | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"bc30982\"\n  - \"vbc30982\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"BC30982\"\nms.assetid: 741e85d9-a747-42ad-a1e1-a3f1928aaff5\ncaps.latest.revision: 30\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Type of &#39;&lt;variablename&gt;&#39; cannot be inferred because the loop bounds and the step variable do not widen to the same type\nYou have written a `For...Next` loop in which the compiler cannot infer a data type for the loop control variable because the following conditions are true:  \n  \n-   The data type of the loop control variable is not specified with an `As` clause.  \n  \n-   The loop bounds and step variable contain at least two data types.  \n  \n-   No standard conversions exist between the data types.  \n  \n Therefore, the compiler cannot infer the data type of a loop's control variable.  \n  \n In the following example, the step variable is a character and the loop bounds are both integers. Because there is no standard conversion between characters and integers, this error is reported.  \n  \n```vb  \nDim stepVar = \"1\"c  \nDim m = 0  \nDim n = 20  \n  \n' Not valid.  \n' For i = 1 To 10 Step stepVar  \n    ' Loop processing  \n' Next  \n```  \n  \n **Error ID:** BC30982  \n  \n## To correct this error  \n  \n-   Change the types of the loop bounds and step variable as necessary so that at least one of them is a type that the others widen to. In the preceding example, change the type of `stepVar` to `Integer`.  \n  \n    ```  \n    Dim stepVar = 1  \n    ```  \n  \n     —or—  \n  \n    ```  \n    Dim stepVar As Integer = 1  \n    ```  \n  \n-   Use explicit conversion functions to convert the loop bounds and step variable to the appropriate types. In the preceding example, apply the `Val` function to `stepVar`.  \n  \n    ```  \n    For i = 1 To 10 Step Val(stepVar)  \n        ' Loop processing  \n    Next  \n    ```  \n  \n## See Also  \n <xref:Microsoft.VisualBasic.Conversion.Val%2A>   \n [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md)   \n [Implicit and Explicit Conversions](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)   \n [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)   \n [Option Infer Statement](../../../visual-basic/language-reference/statements/option-infer-statement.md)   \n [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md)   \n [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)","nodes":[{"pos":[12,162],"content":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred because the loop bounds and the step variable do not widen to the same type | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Type of &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>variablename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; cannot be inferred because the loop bounds and the step variable do not widen to the same type | Microsoft Docs","pos":[0,150],"source":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred because the loop bounds and the step variable do not widen to the same type | Microsoft Docs"}]},{"pos":[701,834],"content":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred because the loop bounds and the step variable do not widen to the same type","linkify":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred because the loop bounds and the step variable do not widen to the same type","nodes":[{"content":"Type of &amp;#39;<ph id=\"ph1\">&amp;lt;</ph>variablename<ph id=\"ph2\">&amp;gt;</ph>&amp;#39; cannot be inferred because the loop bounds and the step variable do not widen to the same type","pos":[0,133],"source":"Type of &#39;&lt;variablename&gt;&#39; cannot be inferred because the loop bounds and the step variable do not widen to the same type"}]},{"pos":[835,991],"content":"You have written a <ph id=\"ph1\">`For...Next`</ph> loop in which the compiler cannot infer a data type for the loop control variable because the following conditions are true:","source":"You have written a `For...Next` loop in which the compiler cannot infer a data type for the loop control variable because the following conditions are true:"},{"pos":[1001,1081],"content":"The data type of the loop control variable is not specified with an <ph id=\"ph1\">`As`</ph> clause.","source":"The data type of the loop control variable is not specified with an `As` clause."},{"content":"The loop bounds and step variable contain at least two data types.","pos":[1091,1157]},{"content":"No standard conversions exist between the data types.","pos":[1167,1220]},{"content":"Therefore, the compiler cannot infer the data type of a loop's control variable.","pos":[1227,1307]},{"content":"In the following example, the step variable is a character and the loop bounds are both integers.","pos":[1314,1411]},{"content":"Because there is no standard conversion between characters and integers, this error is reported.","pos":[1412,1508]},{"pos":[1662,1683],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC30982","source":"**Error ID:** BC30982"},{"pos":[1692,1713],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"content":"Change the types of the loop bounds and step variable as necessary so that at least one of them is a type that the others widen to.","pos":[1723,1854]},{"content":"In the preceding example, change the type of <ph id=\"ph1\">`stepVar`</ph> to <ph id=\"ph2\">`Integer`</ph>.","pos":[1855,1923],"source":" In the preceding example, change the type of `stepVar` to `Integer`."},{"content":"—or—","pos":[1979,1983]},{"content":"Use explicit conversion functions to convert the loop bounds and step variable to the appropriate types.","pos":[2049,2153]},{"content":"In the preceding example, apply the <ph id=\"ph1\">`Val`</ph> function to <ph id=\"ph2\">`stepVar`</ph>.","pos":[2154,2218],"source":" In the preceding example, apply the `Val` function to `stepVar`."},{"pos":[2329,2337],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>For...Next Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2391,2490],"source":" [For...Next Statement](../../../visual-basic/language-reference/statements/for-next-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Implicit and Explicit Conversions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept><ph id=\"ph1\"> </ph>","pos":[2493,2637],"source":" [Implicit and Explicit Conversions](../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id=\"ph1\"> </ph>","pos":[2640,2757],"source":" [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Option Infer Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2760,2865],"source":" [Option Infer Statement](../../../visual-basic/language-reference/statements/option-infer-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type Conversion Functions<ept id=\"p1\">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id=\"ph1\"> </ph>","pos":[2868,2978],"source":" [Type Conversion Functions](../../../visual-basic/language-reference/functions/type-conversion-functions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Widening and Narrowing Conversions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>","pos":[2981,3126],"source":" [Widening and Narrowing Conversions](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)"}]}