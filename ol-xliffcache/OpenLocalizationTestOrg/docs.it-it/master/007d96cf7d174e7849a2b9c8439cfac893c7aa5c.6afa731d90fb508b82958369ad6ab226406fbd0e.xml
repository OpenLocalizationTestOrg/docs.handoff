{"content":"---\ntitle: Building .NET Core Docker Images\ndescription: Understanding Docker images and .NET Core\nkeywords: .NET, .NET Core, Docker\nauthor: spboyer\nms.author: shboyer\nms.date: 08/29/2016\nms.topic: article\nms.prod: .net-core\nms.technology: dotnet-docker\nms.devlang: dotnet\nms.assetid: 03c28597-7e73-46d6-a9c3-f9cb55642739\n---\n \n\n#Building Docker Images for .NET Core Applications\n\nIn order to get an understanding of how to use .NET Core and Docker together, we must first get to know the different Docker images that are offered and when is the right use case for them. Here we will walk through the variations offered, build an ASP.NET Core Web API, use the Yeoman Docker tools to create a debuggable container as well as peek at how Visual Studio Code can assist in the process. \n\n## Docker Image Optimizations\n\nWhen building Docker images for developers, we focused on three main scenarios:\n\n- Images used to develop .NET Core apps\n- Images used to build .NET Core apps\n- Images used to run .NET Core apps\n\nWhy three images?\nWhen developing, building and running containerized applications, we have different priorities.\n- **Development:**  How fast can you iterate changes, and the ability to debug the changes. The size of the image isn't as important, rather can you make changes to your code and see them quickly. Some of our tools, like [yo docker](https://aka.ms/yodocker) for use in VS Code use this image during development time. \n- **Build:** What's needed to compile your app. This includes the compiler and any other dependencies to optimize the binaries. This image isn't the image you deploy, rather it's an image you use to build the content you place into a production image. This image would be used in your continuous integration, or build environment. For instance, rather than installing all the dependencies directly on a build agent, the build agent would instance a build image to compile the application with all the dependencies required to build the app contained within the image. Your build agent only needs to know how to run this Docker image. \n- **Production:** How fast you can deploy and start your image. This image is small so it can quickly travel across the network from your Docker Registry to your Docker hosts. The contents are ready to run enabling the fastest time from Docker run to processing results. In the immutable Docker model, there's no need for dynamic compilation of code. The content you place in this image would be limited to the binaries and content needed to run the application. For example, the published output using `dotnet publish` which contains the compiled binaries, images, .js and .css files. Over time, you'll see images that contain pre-jitted packages.  \n\nThough there are multiple versions of the .NET Core image, they all share one or more layers. The amount of disk space needed to store or the delta to pull from your registry is much smaller than the whole because all of the images share the same base layer and potentially others.  \n\n## Docker image variations\n\nTo achieve the goals above, we provide image variants under [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/).\n\n- `microsoft/dotnet:<version>-sdk` : that is **microsoft/dotnet:1.0.0-preview2-sdk**, this image contains the .NET Core SDK which includes the .NET Core and Command Line Tools (CLI). This image maps to the **development scenario**. You would use this image for local development, debugging and unit testing. For example, all the development you do, before you check in your code. This image can also be used for your **build** scenarios.\n\n- `microsoft/dotnet:<version>-core` : that is **microsoft/dotnet:1.0.0-core**, image which runs [portable .NET Core applications](../deploying/index.md) and it is optimized for running your application in **production**. It does not contain the SDK, and is meant to take the optimized output of `dotnet publish`. The portable runtime is well suited for Docker container scenarios as running multiple containers benefit from shared image layers.  \n\n## Alternative images\n\nIn addition to the optimized scenarios of development, build and production, we provide additional images:\n\n- `microsoft/dotnet:<version>-onbuild` : that is **microsoft/dotnet:1.0.0-preview2-onbuild**, contains [ONBUILD](https://docs.docker.com/engine/reference/builder/#/onbuild) triggers. The build will [COPY](https://docs.docker.com/engine/reference/builder/#/copy) your application, run `dotnet restore` and create an [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#/entrypoint) `dotnet run` instruction to run the application when the Docker image is run. While not an optimized image for production, some may find it useful to simply copy their source code into an image and run it. \n\n- `microsoft/dotnet:<version>-core-deps` : that is **microsoft/dotnet:1.0.0-core-deps**, if you wish to run self-contained applications use this image. It contains the operating system with all of the native dependencies needed by .NET Core. This image can also be used as a base image for your own custom CoreFX or CoreCLR builds. While the **onbuild** variant is optimized to simply place your code in an image and run it, this image is optimized to have only the operating system dependencies required to run .NET Core apps that have the .NET Runtime packaged with the application. This image isn't generally optimized for running multiple .NET Core containers on the same host, as each image carries the .NET Core runtime within the application, and you will not benefit from image layering.   \n\nLatest versions of each variant:\n\n- `microsoft/dotnet` or `microsoft/dotnet:latest` (includes SDK)\n- `microsoft/dotnet:onbuild`\n- `microsoft/dotnet:core`\n- `microsoft/dotnet:core-deps`\n\nHere is a list of the images after a `docker pull <imagename>` on a development machine to show the various sizes. Notice, the development/build variant, `microsoft/dotnet:1.0.0-preview2-sdk` is larger as it contains the SDK to develop and build your application. The production variant, `microsoft/dotnet:core` is smaller, as it only contains the .NET Core runtime. \nThe minimal image capable of being used on Linux, `core-deps`, is quite smaller, however your application will need to copy a private copy of the .NET Runtime with it. Since containers are already private isolation barriers, you will lose that optimization when running multiple dotnet based containers. \n\n```\nREPOSITORY          TAG                     IMAGE ID            SIZE\nmicrosoft/dotnet    1.0.0-preview2-onbuild  19b6a6c4b1db        540.4 MB\nmicrosoft/dotnet    onbuild                 19b6a6c4b1db        540.4 MB\nmicrosoft/dotnet    1.0.0-preview2-sdk      a92c3d9ad0e7        540.4 MB\nmicrosoft/dotnet    core                    5224a9f2a2aa        253.2 MB\nmicrosoft/dotnet    1.0.0-core-deps         c981a2eebe0e        166.2 MB\nmicrosoft/dotnet    core-deps               c981a2eebe0e        166.2 MB\nmicrosoft/dotnet    latest                  03c10abbd08a        540.4 MB\nmicrosoft/dotnet    1.0.0-core              b8da4a1fd280        253.2 MB\n```\n\n## Prerequisites\n\nTo build and run, you'll need a few things installed:\n\n- [.NET Core](http://dot.net)\n- [Docker](https://www.docker.com/products/docker) to run your Docker containers locally \n- [Yeoman generator for ASP.NET](https://github.com/omnisharp/generator-aspnet) for creating the Web API application\n- [Yeoman generator for Docker](http://aka.ms/yodocker) from Microsoft\n\nInstall the Yeoman generators for ASP.NET Core and Docker using npm \n\n```\nnpm install -g yo generator-aspnet generator-docker\n```\n\n> [!NOTE]\n> This sample will be using [Visual Studio Code](http://code.visualstudio.com) for the editor.\n\n## Creating the Web API application\n\nFor a reference point, before we containerize the application, first run the application locally. \n\nThe finished application is located in the\n[dotnet/docs repository on GitHub](https://github.com/dotnet/docs/tree/master/samples/core/docker/building-net-docker-images). For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples).\n\nCreate a directory for your application.\n\nOpen a command or terminal session in that directory and use the ASP.NET Yeoman generator by typing the following:\n```\nyo aspnet\n```\n\nSelect **Web API Application** and type **api** for the name of the app and tap enter.  Once the application is scaffolded, change to the `/api` directory and restore the NuGet dependencies using `dotnet restore`.\n\n```\ncd api\ndotnet restore\n```\n\nTest the application using `dotnet run` and browsing to **http://localhost:5000/api/values**\n\n```javascript\n[\n    \"value1\",\n    \"value2\"\n]\n```\n\nUse `Ctrl+C` to stop the application.\n\n## Adding Docker support\n\nAdding Docker support to the project is achieved using the Yeoman generator from Microsoft. It currently supports .NET Core, Node.js and Go projects by creating a Dockerfile and scripts that help build and run projects inside containers. Visual Studio Code specific files are also added (launch.json, tasks.json) for editor debugging and command palette support.\n\n```console\n$ yo docker\n\n     _-----_     ╭──────────────────────────╮\n    |       |    │   Welcome to the Docker  │\n    |--(o)--|    │        generator!        │\n   `---------´   │     Let's add Docker     │\n    ( _´U`_ )    │  container magic to your │\n    /___A___\\   /│           app!           │\n     |  ~  |     ╰──────────────────────────╯\n   __'.___.'__\n ´   `  |° ´ Y `\n\n? What language is your project using? (Use arrow keys)\n❯ .NET Core\n  Golang\n  Node.js\n\n```\n\n- Select `.NET Core` as the project type\n- `rtm` for the version of .NET Core\n- `Y` the project uses a web server\n- `5000` is the port the Web API application is listening on (http://localhost:5000)\n- `api` for the image name\n- `api` for the service name\n- `api` for the compose project \n- `Y` to overwrite the current Dockerfile\n\nWhen the generator is complete, the following files are added to the project\n\n- .vscode/launch.json\n- Dockerfile.debug\n- Dockerfile\n- docker-compose.debug.yml\n- docker-compose.yml\n- dockerTask.ps1\n- dockerTask.sh\n- .vscode/tasks.json\n\nThe generator creates two Dockerfiles.\n\n**Dockerfile.debug** - this file is based on the **microsoft/dotnet:1.0.0-preview2-sdk** image which if you note from the list of image variants, includes the SDK, CLI and .NET Core and will be the image used for development and debugging (F5). Including all of these components produces a larger image with a size roughly of 540MB.\n\n**Dockerfile** - this image is the release image based on **microsoft/dotnet:1.0.0-core** and should be used for production. This image when built is approximately 253 MB.\n\n### Creating the Docker images\nUsing the `dockerTask.sh` or `dockerTask.ps1` script, we can build or compose the image and container for the **api** application for a specific environment. Build the **debug** image by running the following command.\n\n```bash\n./dockerTask.sh build debug\n```\n\nThe image will build the ASP.NET application, run `dotnet restore`, add the debugger to the image, set an `ENTRYPOINT` and finally copy the app to the image. The result is a Docker image named *api* with a `TAG` of *debug*.  See the images on the machine using `docker images`.\n\n```bash\ndocker images\n\nREPOSITORY          TAG                  IMAGE ID            CREATED             SIZE\napi                 debug                70e89fbc5dbe        a few seconds ago   779.8 MB\n```\n\nAnother way to generate the image and run the application within the Docker container is to open the application in Visual Studio Code and use the debugging tools. \n\nSelect the debugging icon in the View Bar on the left side of VS Code.\n\n![vscode debugging icon](./media/building-net-docker-images/debugging_debugicon.png)\n\nThen tap the play icon or F5 to generate the image and start the application within the container. The Web API will be launched using your default web browser at http://localhost:5000.\n\n![VSCode Docker Tools Debug](./media/building-net-docker-images/docker-tools-vscode-f5.png)\n\nYou may set break points in your application, step through, etc. just as if the application was running locally on your development machine as opposed to inside the container. The benefit to debugging within the container is this is the same image that would be deployed to a production environment.\n\nCreating the release or production image requires simply running the command from the terminal passing the `release` environment name.\n\n```bash\n./dockerTask build release\n```\n\nThe command creates the image based on the smaller **microsoft/dotnet:core** base image, [EXPOSE](https://docs.docker.com/engine/reference/builder/#/expose) port 5000, sets the [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#/entrypoint) for `dotnet api.dll` and copies it to the `/app` directory. There is no debugger, SDK or `dotnet restore` resulting in a much smaller image. The image is named **api** with a `TAG` of **latest**.\n\n```\nREPOSITORY          TAG                  IMAGE ID            CREATED             SIZE\napi                 debug                70e89fbc5dbe        1 hour ago        779.8 MB\napi                 latest               ef17184c8de6        1 hour ago        260.7 MB\n```\n\n## Summary\n\nUsing the Docker generator to add the necessary files to our Web API application made the process simple to create the development and production versions of the images.  The tooling is cross platform by also providing a PowerShell script to accomplish the same results on Windows and Visual Studio Code integration providing step through debugging of the application within the container. By understanding the image variants and the target scenarios, you can optimize your inner-loop development process, while achieving optimized images for production deployments.  \n\n\n","nodes":[{"pos":[11,43],"content":"Building .NET Core Docker Images","needQuote":true,"needEscape":true,"nodes":[{"content":"Building .NET Core Docker Images","pos":[0,32]}]},{"pos":[57,98],"content":"Understanding Docker images and .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":"Understanding Docker images and .NET Core","pos":[0,41]}]},{"pos":[109,132],"content":".NET, .NET Core, Docker","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core, Docker","pos":[0,23]}]},{"pos":[330,379],"content":"Building Docker Images for .NET Core Applications","linkify":"Building Docker Images for .NET Core Applications","nodes":[{"content":"Building Docker Images for .NET Core Applications","pos":[0,49]}]},{"content":"In order to get an understanding of how to use .NET Core and Docker together, we must first get to know the different Docker images that are offered and when is the right use case for them.","pos":[381,570]},{"content":"Here we will walk through the variations offered, build an ASP.NET Core Web API, use the Yeoman Docker tools to create a debuggable container as well as peek at how Visual Studio Code can assist in the process.","pos":[571,781]},{"pos":[787,813],"content":"Docker Image Optimizations","linkify":"Docker Image Optimizations","nodes":[{"content":"Docker Image Optimizations","pos":[0,26]}]},{"content":"When building Docker images for developers, we focused on three main scenarios:","pos":[815,894]},{"content":"Images used to develop .NET Core apps","pos":[898,935]},{"content":"Images used to build .NET Core apps","pos":[938,973]},{"content":"Images used to run .NET Core apps","pos":[976,1009]},{"content":"Why three images?","pos":[1011,1028]},{"content":"When developing, building and running containerized applications, we have different priorities.","pos":[1029,1124],"source":"\nWhen developing, building and running containerized applications, we have different priorities."},{"content":"<bpt id=\"p1\">**</bpt>Development:<ept id=\"p1\">**</ept>  How fast can you iterate changes, and the ability to debug the changes.","pos":[1127,1216],"source":"**Development:**  How fast can you iterate changes, and the ability to debug the changes."},{"content":"The size of the image isn't as important, rather can you make changes to your code and see them quickly.","pos":[1217,1321]},{"content":"Some of our tools, like <bpt id=\"p1\">[</bpt>yo docker<ept id=\"p1\">](https://aka.ms/yodocker)</ept> for use in VS Code use this image during development time.","pos":[1322,1441],"source":" Some of our tools, like [yo docker](https://aka.ms/yodocker) for use in VS Code use this image during development time."},{"content":"<bpt id=\"p1\">**</bpt>Build:<ept id=\"p1\">**</ept> What's needed to compile your app.","pos":[1445,1490],"source":"**Build:** What's needed to compile your app."},{"content":"This includes the compiler and any other dependencies to optimize the binaries.","pos":[1491,1570]},{"content":"This image isn't the image you deploy, rather it's an image you use to build the content you place into a production image.","pos":[1571,1694]},{"content":"This image would be used in your continuous integration, or build environment.","pos":[1695,1773]},{"content":"For instance, rather than installing all the dependencies directly on a build agent, the build agent would instance a build image to compile the application with all the dependencies required to build the app contained within the image.","pos":[1774,2010]},{"content":"Your build agent only needs to know how to run this Docker image.","pos":[2011,2076]},{"content":"<bpt id=\"p1\">**</bpt>Production:<ept id=\"p1\">**</ept> How fast you can deploy and start your image.","pos":[2080,2141],"source":"**Production:** How fast you can deploy and start your image."},{"content":"This image is small so it can quickly travel across the network from your Docker Registry to your Docker hosts.","pos":[2142,2253]},{"content":"The contents are ready to run enabling the fastest time from Docker run to processing results.","pos":[2254,2348]},{"content":"In the immutable Docker model, there's no need for dynamic compilation of code.","pos":[2349,2428]},{"content":"The content you place in this image would be limited to the binaries and content needed to run the application.","pos":[2429,2540]},{"content":"For example, the published output using <ph id=\"ph1\">`dotnet publish`</ph> which contains the compiled binaries, images, .js and .css files.","pos":[2541,2663],"source":" For example, the published output using `dotnet publish` which contains the compiled binaries, images, .js and .css files."},{"content":"Over time, you'll see images that contain pre-jitted packages.","pos":[2664,2726]},{"content":"Though there are multiple versions of the .NET Core image, they all share one or more layers.","pos":[2730,2823]},{"content":"The amount of disk space needed to store or the delta to pull from your registry is much smaller than the whole because all of the images share the same base layer and potentially others.","pos":[2824,3011]},{"pos":[3018,3041],"content":"Docker image variations","linkify":"Docker image variations","nodes":[{"content":"Docker image variations","pos":[0,23]}]},{"pos":[3043,3166],"content":"To achieve the goals above, we provide image variants under <bpt id=\"p1\">[</bpt>microsoft/dotnet<ept id=\"p1\">](https://hub.docker.com/r/microsoft/dotnet/)</ept>.","source":"To achieve the goals above, we provide image variants under [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)."},{"content":"<ph id=\"ph1\">`microsoft/dotnet:&lt;version&gt;-sdk`</ph> : that is <bpt id=\"p1\">**</bpt>microsoft/dotnet:1.0.0-preview2-sdk<ept id=\"p1\">**</ept>, this image contains the .NET Core SDK which includes the .NET Core and Command Line Tools (CLI).","pos":[3170,3350],"source":"`microsoft/dotnet:<version>-sdk` : that is **microsoft/dotnet:1.0.0-preview2-sdk**, this image contains the .NET Core SDK which includes the .NET Core and Command Line Tools (CLI)."},{"content":"This image maps to the <bpt id=\"p1\">**</bpt>development scenario<ept id=\"p1\">**</ept>.","pos":[3351,3399],"source":" This image maps to the **development scenario**."},{"content":"You would use this image for local development, debugging and unit testing.","pos":[3400,3475]},{"content":"For example, all the development you do, before you check in your code.","pos":[3476,3547]},{"content":"This image can also be used for your <bpt id=\"p1\">**</bpt>build<ept id=\"p1\">**</ept> scenarios.","pos":[3548,3605],"source":" This image can also be used for your **build** scenarios."},{"content":"<ph id=\"ph1\">`microsoft/dotnet:&lt;version&gt;-core`</ph> : that is <bpt id=\"p1\">**</bpt>microsoft/dotnet:1.0.0-core<ept id=\"p1\">**</ept>, image which runs <bpt id=\"p2\">[</bpt>portable .NET Core applications<ept id=\"p2\">](../deploying/index.md)</ept> and it is optimized for running your application in <bpt id=\"p3\">**</bpt>production<ept id=\"p3\">**</ept>.","pos":[3609,3827],"source":"`microsoft/dotnet:<version>-core` : that is **microsoft/dotnet:1.0.0-core**, image which runs [portable .NET Core applications](../deploying/index.md) and it is optimized for running your application in **production**."},{"content":"It does not contain the SDK, and is meant to take the optimized output of <ph id=\"ph1\">`dotnet publish`</ph>.","pos":[3828,3919],"source":" It does not contain the SDK, and is meant to take the optimized output of `dotnet publish`."},{"content":"The portable runtime is well suited for Docker container scenarios as running multiple containers benefit from shared image layers.","pos":[3920,4051]},{"pos":[4058,4076],"content":"Alternative images","linkify":"Alternative images","nodes":[{"content":"Alternative images","pos":[0,18]}]},{"content":"In addition to the optimized scenarios of development, build and production, we provide additional images:","pos":[4078,4184]},{"content":"<ph id=\"ph1\">`microsoft/dotnet:&lt;version&gt;-onbuild`</ph> : that is <bpt id=\"p1\">**</bpt>microsoft/dotnet:1.0.0-preview2-onbuild<ept id=\"p1\">**</ept>, contains <bpt id=\"p2\">[</bpt>ONBUILD<ept id=\"p2\">](https://docs.docker.com/engine/reference/builder/#/onbuild)</ept> triggers.","pos":[4188,4368],"source":"`microsoft/dotnet:<version>-onbuild` : that is **microsoft/dotnet:1.0.0-preview2-onbuild**, contains [ONBUILD](https://docs.docker.com/engine/reference/builder/#/onbuild) triggers."},{"content":"The build will <bpt id=\"p1\">[</bpt>COPY<ept id=\"p1\">](https://docs.docker.com/engine/reference/builder/#/copy)</ept> your application, run <ph id=\"ph1\">`dotnet restore`</ph> and create an <bpt id=\"p2\">[</bpt>ENTRYPOINT<ept id=\"p2\">](https://docs.docker.com/engine/reference/builder/#/entrypoint)</ept> <ph id=\"ph2\">`dotnet run`</ph> instruction to run the application when the Docker image is run.","pos":[4369,4654],"source":" The build will [COPY](https://docs.docker.com/engine/reference/builder/#/copy) your application, run `dotnet restore` and create an [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#/entrypoint) `dotnet run` instruction to run the application when the Docker image is run."},{"content":"While not an optimized image for production, some may find it useful to simply copy their source code into an image and run it.","pos":[4655,4782]},{"content":"<ph id=\"ph1\">`microsoft/dotnet:&lt;version&gt;-core-deps`</ph> : that is <bpt id=\"p1\">**</bpt>microsoft/dotnet:1.0.0-core-deps<ept id=\"p1\">**</ept>, if you wish to run self-contained applications use this image.","pos":[4787,4936],"source":"`microsoft/dotnet:<version>-core-deps` : that is **microsoft/dotnet:1.0.0-core-deps**, if you wish to run self-contained applications use this image."},{"content":"It contains the operating system with all of the native dependencies needed by .NET Core.","pos":[4937,5026]},{"content":"This image can also be used as a base image for your own custom CoreFX or CoreCLR builds.","pos":[5027,5116]},{"content":"While the <bpt id=\"p1\">**</bpt>onbuild<ept id=\"p1\">**</ept> variant is optimized to simply place your code in an image and run it, this image is optimized to have only the operating system dependencies required to run .NET Core apps that have the .NET Runtime packaged with the application.","pos":[5117,5369],"source":" While the **onbuild** variant is optimized to simply place your code in an image and run it, this image is optimized to have only the operating system dependencies required to run .NET Core apps that have the .NET Runtime packaged with the application."},{"content":"This image isn't generally optimized for running multiple .NET Core containers on the same host, as each image carries the .NET Core runtime within the application, and you will not benefit from image layering.","pos":[5370,5580]},{"content":"Latest versions of each variant:","pos":[5585,5617]},{"pos":[5621,5683],"content":"<ph id=\"ph1\">`microsoft/dotnet`</ph> or <ph id=\"ph2\">`microsoft/dotnet:latest`</ph> (includes SDK)","source":"`microsoft/dotnet` or `microsoft/dotnet:latest` (includes SDK)"},{"content":"Here is a list of the images after a <ph id=\"ph1\">`docker pull &lt;imagename&gt;`</ph> on a development machine to show the various sizes.","pos":[5771,5885],"source":"Here is a list of the images after a `docker pull <imagename>` on a development machine to show the various sizes."},{"content":"Notice, the development/build variant, <ph id=\"ph1\">`microsoft/dotnet:1.0.0-preview2-sdk`</ph> is larger as it contains the SDK to develop and build your application.","pos":[5886,6034],"source":" Notice, the development/build variant, `microsoft/dotnet:1.0.0-preview2-sdk` is larger as it contains the SDK to develop and build your application."},{"content":"The production variant, <ph id=\"ph1\">`microsoft/dotnet:core`</ph> is smaller, as it only contains the .NET Core runtime.","pos":[6035,6137],"source":" The production variant, `microsoft/dotnet:core` is smaller, as it only contains the .NET Core runtime."},{"content":"The minimal image capable of being used on Linux, <ph id=\"ph1\">`core-deps`</ph>, is quite smaller, however your application will need to copy a private copy of the .NET Runtime with it.","pos":[6138,6306],"source":" \nThe minimal image capable of being used on Linux, `core-deps`, is quite smaller, however your application will need to copy a private copy of the .NET Runtime with it."},{"content":"Since containers are already private isolation barriers, you will lose that optimization when running multiple dotnet based containers.","pos":[6307,6442]},{"pos":[7110,7123],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"To build and run, you'll need a few things installed:","pos":[7125,7178]},{"pos":[7182,7209],"content":"<bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](http://dot.net)</ept>","source":"[.NET Core](http://dot.net)"},{"pos":[7212,7298],"content":"<bpt id=\"p1\">[</bpt>Docker<ept id=\"p1\">](https://www.docker.com/products/docker)</ept> to run your Docker containers locally","source":"[Docker](https://www.docker.com/products/docker) to run your Docker containers locally"},{"pos":[7302,7416],"content":"<bpt id=\"p1\">[</bpt>Yeoman generator for ASP.NET<ept id=\"p1\">](https://github.com/omnisharp/generator-aspnet)</ept> for creating the Web API application","source":"[Yeoman generator for ASP.NET](https://github.com/omnisharp/generator-aspnet) for creating the Web API application"},{"pos":[7419,7487],"content":"<bpt id=\"p1\">[</bpt>Yeoman generator for Docker<ept id=\"p1\">](http://aka.ms/yodocker)</ept> from Microsoft","source":"[Yeoman generator for Docker](http://aka.ms/yodocker) from Microsoft"},{"content":"Install the Yeoman generators for ASP.NET Core and Docker using npm","pos":[7489,7556]},{"pos":[7622,7724],"content":"[!NOTE]\nThis sample will be using [Visual Studio Code](http://code.visualstudio.com) for the editor.","leadings":["","> "],"nodes":[{"content":"This sample will be using <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](http://code.visualstudio.com)</ept> for the editor.","pos":[8,100],"source":"This sample will be using [Visual Studio Code](http://code.visualstudio.com) for the editor."}]},{"pos":[7729,7761],"content":"Creating the Web API application","linkify":"Creating the Web API application","nodes":[{"content":"Creating the Web API application","pos":[0,32]}]},{"content":"For a reference point, before we containerize the application, first run the application locally.","pos":[7763,7860]},{"content":"The finished application is located in the <bpt id=\"p1\">[</bpt>dotnet/docs repository on GitHub<ept id=\"p1\">](https://github.com/dotnet/docs/tree/master/samples/core/docker/building-net-docker-images)</ept>.","pos":[7863,8032],"source":"The finished application is located in the\n[dotnet/docs repository on GitHub](https://github.com/dotnet/docs/tree/master/samples/core/docker/building-net-docker-images)."},{"content":"For download instructions, see <bpt id=\"p1\">[</bpt>Samples and Tutorials<ept id=\"p1\">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.","pos":[8033,8158],"source":" For download instructions, see [Samples and Tutorials](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)."},{"content":"Create a directory for your application.","pos":[8160,8200]},{"content":"Open a command or terminal session in that directory and use the ASP.NET Yeoman generator by typing the following:","pos":[8202,8316]},{"content":"Select <bpt id=\"p1\">**</bpt>Web API Application<ept id=\"p1\">**</ept> and type <bpt id=\"p2\">**</bpt>api<ept id=\"p2\">**</ept> for the name of the app and tap enter.","pos":[8336,8422],"source":"Select **Web API Application** and type **api** for the name of the app and tap enter."},{"content":"Once the application is scaffolded, change to the <ph id=\"ph1\">`/api`</ph> directory and restore the NuGet dependencies using <ph id=\"ph2\">`dotnet restore`</ph>.","pos":[8424,8549],"source":"  Once the application is scaffolded, change to the `/api` directory and restore the NuGet dependencies using `dotnet restore`."},{"pos":[8582,8674],"content":"Test the application using <ph id=\"ph1\">`dotnet run`</ph> and browsing to <bpt id=\"p1\">**</bpt>http://localhost:5000/api/values<ept id=\"p1\">**</ept>","source":"Test the application using `dotnet run` and browsing to **http://localhost:5000/api/values**"},{"pos":[8726,8763],"content":"Use <ph id=\"ph1\">`Ctrl+C`</ph> to stop the application.","source":"Use `Ctrl+C` to stop the application."},{"pos":[8768,8789],"content":"Adding Docker support","linkify":"Adding Docker support","nodes":[{"content":"Adding Docker support","pos":[0,21]}]},{"content":"Adding Docker support to the project is achieved using the Yeoman generator from Microsoft.","pos":[8791,8882]},{"content":"It currently supports .NET Core, Node.js and Go projects by creating a Dockerfile and scripts that help build and run projects inside containers.","pos":[8883,9028]},{"content":"Visual Studio Code specific files are also added (launch.json, tasks.json) for editor debugging and command palette support.","pos":[9029,9153]},{"pos":[9629,9667],"content":"Select <ph id=\"ph1\">`.NET Core`</ph> as the project type","source":"Select `.NET Core` as the project type"},{"pos":[9670,9704],"content":"<ph id=\"ph1\">`rtm`</ph> for the version of .NET Core","source":"`rtm` for the version of .NET Core"},{"pos":[9707,9740],"content":"<ph id=\"ph1\">`Y`</ph> the project uses a web server","source":"`Y` the project uses a web server"},{"pos":[9743,9825],"content":"<ph id=\"ph1\">`5000`</ph> is the port the Web API application is listening on (http://localhost:5000)","source":"`5000` is the port the Web API application is listening on (http://localhost:5000)"},{"pos":[9828,9852],"content":"<ph id=\"ph1\">`api`</ph> for the image name","source":"`api` for the image name"},{"pos":[9855,9881],"content":"<ph id=\"ph1\">`api`</ph> for the service name","source":"`api` for the service name"},{"pos":[9884,9913],"content":"<ph id=\"ph1\">`api`</ph> for the compose project","source":"`api` for the compose project"},{"pos":[9917,9956],"content":"<ph id=\"ph1\">`Y`</ph> to overwrite the current Dockerfile","source":"`Y` to overwrite the current Dockerfile"},{"content":"When the generator is complete, the following files are added to the project","pos":[9958,10034]},{"content":".vscode/launch.json","pos":[10038,10057]},{"content":"Dockerfile.debug","pos":[10060,10076]},{"content":"Dockerfile","pos":[10079,10089]},{"content":"docker-compose.debug.yml","pos":[10092,10116]},{"content":"docker-compose.yml","pos":[10119,10137]},{"content":"dockerTask.ps1","pos":[10140,10154]},{"content":"dockerTask.sh","pos":[10157,10170]},{"content":".vscode/tasks.json","pos":[10173,10191]},{"content":"The generator creates two Dockerfiles.","pos":[10193,10231]},{"content":"<bpt id=\"p1\">**</bpt>Dockerfile.debug<ept id=\"p1\">**</ept> - this file is based on the <bpt id=\"p2\">**</bpt>microsoft/dotnet:1.0.0-preview2-sdk<ept id=\"p2\">**</ept> image which if you note from the list of image variants, includes the SDK, CLI and .NET Core and will be the image used for development and debugging (F5).","pos":[10233,10477],"source":"**Dockerfile.debug** - this file is based on the **microsoft/dotnet:1.0.0-preview2-sdk** image which if you note from the list of image variants, includes the SDK, CLI and .NET Core and will be the image used for development and debugging (F5)."},{"content":"Including all of these components produces a larger image with a size roughly of 540MB.","pos":[10478,10565]},{"content":"<bpt id=\"p1\">**</bpt>Dockerfile<ept id=\"p1\">**</ept> - this image is the release image based on <bpt id=\"p2\">**</bpt>microsoft/dotnet:1.0.0-core<ept id=\"p2\">**</ept> and should be used for production.","pos":[10567,10691],"source":"**Dockerfile** - this image is the release image based on **microsoft/dotnet:1.0.0-core** and should be used for production."},{"content":"This image when built is approximately 253 MB.","pos":[10692,10738]},{"pos":[10744,10770],"content":"Creating the Docker images","linkify":"Creating the Docker images","nodes":[{"content":"Creating the Docker images","pos":[0,26]}]},{"content":"Using the <ph id=\"ph1\">`dockerTask.sh`</ph> or <ph id=\"ph2\">`dockerTask.ps1`</ph> script, we can build or compose the image and container for the <bpt id=\"p1\">**</bpt>api<ept id=\"p1\">**</ept> application for a specific environment.","pos":[10771,10928],"source":"Using the `dockerTask.sh` or `dockerTask.ps1` script, we can build or compose the image and container for the **api** application for a specific environment."},{"content":"Build the <bpt id=\"p1\">**</bpt>debug<ept id=\"p1\">**</ept> image by running the following command.","pos":[10929,10988],"source":" Build the **debug** image by running the following command."},{"content":"The image will build the ASP.NET application, run <ph id=\"ph1\">`dotnet restore`</ph>, add the debugger to the image, set an <ph id=\"ph2\">`ENTRYPOINT`</ph> and finally copy the app to the image.","pos":[11031,11188],"source":"The image will build the ASP.NET application, run `dotnet restore`, add the debugger to the image, set an `ENTRYPOINT` and finally copy the app to the image."},{"content":"The result is a Docker image named <bpt id=\"p1\">*</bpt>api<ept id=\"p1\">*</ept> with a <ph id=\"ph1\">`TAG`</ph> of <bpt id=\"p2\">*</bpt>debug<ept id=\"p2\">*</ept>.","pos":[11189,11254],"source":" The result is a Docker image named *api* with a `TAG` of *debug*."},{"content":"See the images on the machine using <ph id=\"ph1\">`docker images`</ph>.","pos":[11256,11308],"source":"  See the images on the machine using `docker images`."},{"content":"Another way to generate the image and run the application within the Docker container is to open the application in Visual Studio Code and use the debugging tools.","pos":[11514,11677]},{"content":"Select the debugging icon in the View Bar on the left side of VS Code.","pos":[11680,11750]},{"content":"vscode debugging icon","pos":[11754,11775]},{"content":"Then tap the play icon or F5 to generate the image and start the application within the container.","pos":[11838,11936]},{"content":"The Web API will be launched using your default web browser at http://localhost:5000.","pos":[11937,12022]},{"content":"VSCode Docker Tools Debug","pos":[12026,12051]},{"content":"You may set break points in your application, step through, etc. just as if the application was running locally on your development machine as opposed to inside the container.","pos":[12117,12292]},{"content":"The benefit to debugging within the container is this is the same image that would be deployed to a production environment.","pos":[12293,12416]},{"pos":[12418,12552],"content":"Creating the release or production image requires simply running the command from the terminal passing the <ph id=\"ph1\">`release`</ph> environment name.","source":"Creating the release or production image requires simply running the command from the terminal passing the `release` environment name."},{"content":"The command creates the image based on the smaller <bpt id=\"p1\">**</bpt>microsoft/dotnet:core<ept id=\"p1\">**</ept> base image, <bpt id=\"p2\">[</bpt>EXPOSE<ept id=\"p2\">](https://docs.docker.com/engine/reference/builder/#/expose)</ept> port 5000, sets the <bpt id=\"p3\">[</bpt>ENTRYPOINT<ept id=\"p3\">](https://docs.docker.com/engine/reference/builder/#/entrypoint)</ept> for <ph id=\"ph1\">`dotnet api.dll`</ph> and copies it to the <ph id=\"ph2\">`/app`</ph> directory.","pos":[12594,12906],"source":"The command creates the image based on the smaller **microsoft/dotnet:core** base image, [EXPOSE](https://docs.docker.com/engine/reference/builder/#/expose) port 5000, sets the [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#/entrypoint) for `dotnet api.dll` and copies it to the `/app` directory."},{"content":"There is no debugger, SDK or <ph id=\"ph1\">`dotnet restore`</ph> resulting in a much smaller image.","pos":[12907,12987],"source":" There is no debugger, SDK or `dotnet restore` resulting in a much smaller image."},{"content":"The image is named <bpt id=\"p1\">**</bpt>api<ept id=\"p1\">**</ept> with a <ph id=\"ph1\">`TAG`</ph> of <bpt id=\"p2\">**</bpt>latest<ept id=\"p2\">**</ept>.","pos":[12988,13042],"source":" The image is named **api** with a `TAG` of **latest**."},{"pos":[13318,13325],"content":"Summary","linkify":"Summary","nodes":[{"content":"Summary","pos":[0,7]}]},{"content":"Using the Docker generator to add the necessary files to our Web API application made the process simple to create the development and production versions of the images.","pos":[13327,13496]},{"content":"The tooling is cross platform by also providing a PowerShell script to accomplish the same results on Windows and Visual Studio Code integration providing step through debugging of the application within the container.","pos":[13498,13716]},{"content":"By understanding the image variants and the target scenarios, you can optimize your inner-loop development process, while achieving optimized images for production deployments.","pos":[13717,13893]}]}