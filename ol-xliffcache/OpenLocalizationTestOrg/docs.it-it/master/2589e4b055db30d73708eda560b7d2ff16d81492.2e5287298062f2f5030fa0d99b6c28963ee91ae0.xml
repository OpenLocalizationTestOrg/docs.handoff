{"content":"---\ntitle: \"+ Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.+\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"arithmetic operators, addition\"\n  - \"+ operator\"\n  - \"concatenation operators, syntax\"\n  - \"strings [Visual Basic], concatenating\"\n  - \"sum operator\"\nms.assetid: 5694778f-0a2c-4539-8009-f66f318fb46d\ncaps.latest.revision: 26\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# + Operator (Visual Basic)\nAdds two numbers or returns the positive value of a numeric expression. Can also be used to concatenate two string expressions.  \n  \n## Syntax  \n  \n```  \n  \n      expression1 + expression2  \n- or -  \n+ expression1  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`expression1`|Required. Any numeric or string expression.|  \n|`expression2`|Required unless the `+` operator is calculating a negative value. Any numeric or string expression.|  \n  \n## Result  \n If `expression1` and `expression2` are both numeric, the result is their arithmetic sum.  \n  \n If `expression2` is absent, the `+` operator is the *unary* identity operator for the unchanged value of an expression. In this sense, the operation consists of retaining the sign of `expression1`, so the result is negative if `expression1` is negative.  \n  \n If `expression1` and `expression2` are both strings, the result is the concatenation of their values.  \n  \n If `expression1` and `expression2` are of mixed types, the action taken depends on their types, their contents, and the setting of the [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md). For more information, see the tables in \"Remarks.\"  \n  \n## Supported Types  \n All numeric types, including the unsigned and floating-point types and `Decimal`, and `String`.  \n  \n## Remarks  \n In general, `+` performs arithmetic addition when possible, and concatenates only when both expressions are strings.  \n  \n If neither expression is an `Object`, Visual Basic takes the following actions.  \n  \n|Data types of expressions|Action by compiler|  \n|---|---|  \n|Both expressions are numeric data types (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, `ULong`, `Decimal`, `Single`, or `Double`)|Add. The result data type is a numeric type appropriate for the data types of `expression1` and `expression2`. See the \"Integer Arithmetic\" tables in [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md).|  \n|Both expressions are of type `String`|Concatenate.|  \n|One expression is a numeric data type and the other is a string|If `Option Strict` is `On`, then generate a compiler error.<br /><br /> If `Option Strict` is `Off`, then implicitly convert the `String` to `Double` and add.<br /><br /> If the `String` cannot be converted to `Double`, then throw an <xref:System.InvalidCastException> exception.|  \n|One expression is a numeric data type, and the other is [Nothing](../../../visual-basic/language-reference/nothing.md)|Add, with `Nothing` valued as zero.|  \n|One expression is a string, and the other is `Nothing`|Concatenate, with `Nothing` valued as \"\".|  \n  \n If one expression is an `Object` expression, Visual Basic takes the following actions.  \n  \n|Data types of expressions|Action by compiler|  \n|---|---|  \n|`Object` expression holds a numeric value and the other is a numeric data type|If `Option Strict` is `On`, then generate a compiler error.<br /><br /> If `Option Strict` is `Off`, then add.|  \n|`Object` expression holds a numeric value and the other is of type `String`|If `Option Strict` is `On`, then generate a compiler error.<br /><br /> If `Option Strict` is `Off`, then implicitly convert the `String` to `Double` and add.<br /><br /> If the `String` cannot be converted to `Double`, then throw an <xref:System.InvalidCastException> exception.|  \n|`Object` expression holds a string and the other is a numeric data type|If `Option Strict` is `On`, then generate a compiler error.<br /><br /> If `Option Strict` is `Off`, then implicitly convert the string `Object` to `Double` and add.<br /><br /> If the string `Object` cannot be converted to `Double`, then throw an <xref:System.InvalidCastException> exception.|  \n|`Object` expression holds a string and the other is of type `String`|If `Option Strict` is `On`, then generate a compiler error.<br /><br /> If `Option Strict` is `Off`, then implicitly convert `Object` to `String` and concatenate.|  \n  \n If both expressions are `Object` expressions, Visual Basic takes the following actions (`Option Strict Off` only).  \n  \n|Data types of expressions|Action by compiler|  \n|---|---|  \n|Both `Object` expressions hold numeric values|Add.|  \n|Both `Object` expressions are of type `String`|Concatenate.|  \n|One `Object` expression holds a numeric value and the other holds a string|Implicitly convert the string `Object` to `Double` and add.<br /><br /> If the string `Object` cannot be converted to a numeric value, then throw an <xref:System.InvalidCastException> exception.|  \n  \n If either `Object` expression evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md) or <xref:System.DBNull>, the `+` operator treats it as a `String` with a value of \"\".  \n  \n> [!NOTE]\n>  When you use the `+` operator, you might not be able to determine whether addition or string concatenation will occur. Use the `&` operator for concatenation to eliminate ambiguity and to provide self-documenting code.  \n  \n## Overloading  \n The `+` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `+` operator to add numbers. If the operands are both numeric, Visual Basic computes the arithmetic result. The arithmetic result represents the sum of the two operands.  \n  \n [!code-vb[VbVbalrOperators#6](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/addition-operator_1.vb)]  \n  \n You can also use the `+` operator to concatenate strings. If the operands are both strings, Visual Basic concatenates them. The concatenation result represents a single string consisting of the contents of the two operands one after the other.  \n  \n If the operands are of mixed types, the result depends on the setting of the [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md). The following example illustrates the result when `Option Strict` is `On`.  \n  \n [!code-vb[VbVbalrOperators#53](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/addition-operator_2.vb)]  \n  \n [!code-vb[VbVbalrOperators#50](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/addition-operator_3.vb)]  \n[!code-vb[VbVbalrOperators#51](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/addition-operator_4.vb)]  \n  \n The following example illustrates the result when `Option Strict` is `Off`.  \n  \n [!code-vb[VbVbalrOperators#54](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/addition-operator_5.vb)]  \n  \n [!code-vb[VbVbalrOperators#50](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/addition-operator_3.vb)]  \n[!code-vb[VbVbalrOperators#52](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/addition-operator_6.vb)]  \n  \n To eliminate ambiguity, you should use the `&` operator instead of `+` for concatenation.  \n  \n## See Also  \n [& Operator](../../../visual-basic/language-reference/operators/concatenation-operator.md)   \n [Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md)   \n [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)   \n [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)","nodes":[{"pos":[4,709],"embed":true,"restype":"x-metadata","content":"title: \"+ Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.+\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"arithmetic operators, addition\"\n  - \"+ operator\"\n  - \"concatenation operators, syntax\"\n  - \"strings [Visual Basic], concatenating\"\n  - \"sum operator\"\nms.assetid: 5694778f-0a2c-4539-8009-f66f318fb46d\ncaps.latest.revision: 26\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"+ Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[2,42],"content":"Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"Operator (Visual Basic) | Microsoft Docs","pos":[0,40]}]}],"path":["title"]}],"yml":true},{"pos":[716,741],"content":"+ Operator (Visual Basic)","linkify":"+ Operator (Visual Basic)","nodes":[{"content":"+ Operator (Visual Basic)","pos":[0,25]}]},{"content":"Adds two numbers or returns the positive value of a numeric expression.","pos":[742,813]},{"content":"Can also be used to concatenate two string expressions.","pos":[814,869]},{"pos":[878,884],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[970,975],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[982,986]},{"content":"Definition","pos":[987,997]},{"content":"Required.","pos":[1028,1037]},{"content":"Any numeric or string expression.","pos":[1038,1071]},{"content":"Required unless the <ph id=\"ph1\">`+`</ph> operator is calculating a negative value.","pos":[1090,1155],"source":"Required unless the `+` operator is calculating a negative value."},{"content":"Any numeric or string expression.","pos":[1156,1189]},{"pos":[1199,1205],"content":"Result","linkify":"Result","nodes":[{"content":"Result","pos":[0,6]}]},{"pos":[1209,1297],"content":"If <ph id=\"ph1\">`expression1`</ph> and <ph id=\"ph2\">`expression2`</ph> are both numeric, the result is their arithmetic sum.","source":"If `expression1` and `expression2` are both numeric, the result is their arithmetic sum."},{"content":"If <ph id=\"ph1\">`expression2`</ph> is absent, the <ph id=\"ph2\">`+`</ph> operator is the <bpt id=\"p1\">*</bpt>unary<ept id=\"p1\">*</ept> identity operator for the unchanged value of an expression.","pos":[1304,1423],"source":"If `expression2` is absent, the `+` operator is the *unary* identity operator for the unchanged value of an expression."},{"content":"In this sense, the operation consists of retaining the sign of <ph id=\"ph1\">`expression1`</ph>, so the result is negative if <ph id=\"ph2\">`expression1`</ph> is negative.","pos":[1424,1557],"source":" In this sense, the operation consists of retaining the sign of `expression1`, so the result is negative if `expression1` is negative."},{"pos":[1564,1665],"content":"If <ph id=\"ph1\">`expression1`</ph> and <ph id=\"ph2\">`expression2`</ph> are both strings, the result is the concatenation of their values.","source":"If `expression1` and `expression2` are both strings, the result is the concatenation of their values."},{"content":"If <ph id=\"ph1\">`expression1`</ph> and <ph id=\"ph2\">`expression2`</ph> are of mixed types, the action taken depends on their types, their contents, and the setting of the <bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>.","pos":[1672,1913],"source":"If `expression1` and `expression2` are of mixed types, the action taken depends on their types, their contents, and the setting of the [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)."},{"content":"For more information, see the tables in \"Remarks.\"","pos":[1914,1964]},{"pos":[1973,1988],"content":"Supported Types","linkify":"Supported Types","nodes":[{"content":"Supported Types","pos":[0,15]}]},{"pos":[1992,2087],"content":"All numeric types, including the unsigned and floating-point types and <ph id=\"ph1\">`Decimal`</ph>, and <ph id=\"ph2\">`String`</ph>.","source":"All numeric types, including the unsigned and floating-point types and `Decimal`, and `String`."},{"pos":[2096,2103],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2107,2223],"content":"In general, <ph id=\"ph1\">`+`</ph> performs arithmetic addition when possible, and concatenates only when both expressions are strings.","source":"In general, `+` performs arithmetic addition when possible, and concatenates only when both expressions are strings."},{"pos":[2230,2309],"content":"If neither expression is an <ph id=\"ph1\">`Object`</ph>, Visual Basic takes the following actions.","source":"If neither expression is an `Object`, Visual Basic takes the following actions."},{"content":"Data types of expressions","pos":[2316,2341]},{"content":"Action by compiler","pos":[2342,2360]},{"pos":[2377,2527],"content":"Both expressions are numeric data types (<ph id=\"ph1\">`SByte`</ph>, <ph id=\"ph2\">`Byte`</ph>, <ph id=\"ph3\">`Short`</ph>, <ph id=\"ph4\">`UShort`</ph>, <ph id=\"ph5\">`Integer`</ph>, <ph id=\"ph6\">`UInteger`</ph>, <ph id=\"ph7\">`Long`</ph>, <ph id=\"ph8\">`ULong`</ph>, <ph id=\"ph9\">`Decimal`</ph>, <ph id=\"ph10\">`Single`</ph>, or <ph id=\"ph11\">`Double`</ph>)","source":"Both expressions are numeric data types (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, `ULong`, `Decimal`, `Single`, or `Double`)"},{"content":"Add.","pos":[2528,2532]},{"content":"The result data type is a numeric type appropriate for the data types of <ph id=\"ph1\">`expression1`</ph> and <ph id=\"ph2\">`expression2`</ph>.","pos":[2533,2638],"source":" The result data type is a numeric type appropriate for the data types of `expression1` and `expression2`."},{"content":"See the \"Integer Arithmetic\" tables in <bpt id=\"p1\">[</bpt>Data Types of Operator Results<ept id=\"p1\">](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)</ept>.","pos":[2639,2797],"source":" See the \"Integer Arithmetic\" tables in [Data Types of Operator Results](../../../visual-basic/language-reference/operators/data-types-of-operator-results.md)."},{"pos":[2802,2839],"content":"Both expressions are of type <ph id=\"ph1\">`String`</ph>","source":"Both expressions are of type `String`"},{"content":"Concatenate.","pos":[2840,2852]},{"content":"One expression is a numeric data type and the other is a string","pos":[2857,2920]},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`On`</ph>, then generate a compiler error.","pos":[2921,2980],"source":"If `Option Strict` is `On`, then generate a compiler error."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, then implicitly convert the <ph id=\"ph3\">`String`</ph> to <ph id=\"ph4\">`Double`</ph> and add.","pos":[2993,3079],"source":"If `Option Strict` is `Off`, then implicitly convert the `String` to `Double` and add."},{"content":"If the <ph id=\"ph1\">`String`</ph> cannot be converted to <ph id=\"ph2\">`Double`</ph>, then throw an <ph id=\"ph3\">&lt;xref:System.InvalidCastException&gt;</ph> exception.","pos":[3092,3200],"source":"If the `String` cannot be converted to `Double`, then throw an <xref:System.InvalidCastException> exception."},{"pos":[3205,3323],"content":"One expression is a numeric data type, and the other is <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept>","source":"One expression is a numeric data type, and the other is [Nothing](../../../visual-basic/language-reference/nothing.md)"},{"pos":[3324,3359],"content":"Add, with <ph id=\"ph1\">`Nothing`</ph> valued as zero.","source":"Add, with `Nothing` valued as zero."},{"pos":[3364,3418],"content":"One expression is a string, and the other is <ph id=\"ph1\">`Nothing`</ph>","source":"One expression is a string, and the other is `Nothing`"},{"pos":[3419,3460],"content":"Concatenate, with <ph id=\"ph1\">`Nothing`</ph> valued as \"\".","source":"Concatenate, with `Nothing` valued as \"\"."},{"pos":[3468,3554],"content":"If one expression is an <ph id=\"ph1\">`Object`</ph> expression, Visual Basic takes the following actions.","source":"If one expression is an `Object` expression, Visual Basic takes the following actions."},{"content":"Data types of expressions","pos":[3561,3586]},{"content":"Action by compiler","pos":[3587,3605]},{"pos":[3622,3700],"content":"<ph id=\"ph1\">`Object`</ph> expression holds a numeric value and the other is a numeric data type","source":"`Object` expression holds a numeric value and the other is a numeric data type"},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`On`</ph>, then generate a compiler error.","pos":[3701,3760],"source":"If `Option Strict` is `On`, then generate a compiler error."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, then add.","pos":[3773,3811],"source":"If `Option Strict` is `Off`, then add."},{"pos":[3816,3891],"content":"<ph id=\"ph1\">`Object`</ph> expression holds a numeric value and the other is of type <ph id=\"ph2\">`String`</ph>","source":"`Object` expression holds a numeric value and the other is of type `String`"},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`On`</ph>, then generate a compiler error.","pos":[3892,3951],"source":"If `Option Strict` is `On`, then generate a compiler error."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, then implicitly convert the <ph id=\"ph3\">`String`</ph> to <ph id=\"ph4\">`Double`</ph> and add.","pos":[3964,4050],"source":"If `Option Strict` is `Off`, then implicitly convert the `String` to `Double` and add."},{"content":"If the <ph id=\"ph1\">`String`</ph> cannot be converted to <ph id=\"ph2\">`Double`</ph>, then throw an <ph id=\"ph3\">&lt;xref:System.InvalidCastException&gt;</ph> exception.","pos":[4063,4171],"source":"If the `String` cannot be converted to `Double`, then throw an <xref:System.InvalidCastException> exception."},{"pos":[4176,4247],"content":"<ph id=\"ph1\">`Object`</ph> expression holds a string and the other is a numeric data type","source":"`Object` expression holds a string and the other is a numeric data type"},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`On`</ph>, then generate a compiler error.","pos":[4248,4307],"source":"If `Option Strict` is `On`, then generate a compiler error."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, then implicitly convert the string <ph id=\"ph3\">`Object`</ph> to <ph id=\"ph4\">`Double`</ph> and add.","pos":[4320,4413],"source":"If `Option Strict` is `Off`, then implicitly convert the string `Object` to `Double` and add."},{"content":"If the string <ph id=\"ph1\">`Object`</ph> cannot be converted to <ph id=\"ph2\">`Double`</ph>, then throw an <ph id=\"ph3\">&lt;xref:System.InvalidCastException&gt;</ph> exception.","pos":[4426,4541],"source":"If the string `Object` cannot be converted to `Double`, then throw an <xref:System.InvalidCastException> exception."},{"pos":[4546,4614],"content":"<ph id=\"ph1\">`Object`</ph> expression holds a string and the other is of type <ph id=\"ph2\">`String`</ph>","source":"`Object` expression holds a string and the other is of type `String`"},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`On`</ph>, then generate a compiler error.","pos":[4615,4674],"source":"If `Option Strict` is `On`, then generate a compiler error."},{"content":"If <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>, then implicitly convert <ph id=\"ph3\">`Object`</ph> to <ph id=\"ph4\">`String`</ph> and concatenate.","pos":[4687,4777],"source":"If `Option Strict` is `Off`, then implicitly convert `Object` to `String` and concatenate."},{"pos":[4785,4899],"content":"If both expressions are <ph id=\"ph1\">`Object`</ph> expressions, Visual Basic takes the following actions (<ph id=\"ph2\">`Option Strict Off`</ph> only).","source":"If both expressions are `Object` expressions, Visual Basic takes the following actions (`Option Strict Off` only)."},{"content":"Data types of expressions","pos":[4906,4931]},{"content":"Action by compiler","pos":[4932,4950]},{"pos":[4967,5012],"content":"Both <ph id=\"ph1\">`Object`</ph> expressions hold numeric values","source":"Both `Object` expressions hold numeric values"},{"content":"Add.","pos":[5013,5017]},{"pos":[5022,5068],"content":"Both <ph id=\"ph1\">`Object`</ph> expressions are of type <ph id=\"ph2\">`String`</ph>","source":"Both `Object` expressions are of type `String`"},{"content":"Concatenate.","pos":[5069,5081]},{"pos":[5086,5160],"content":"One <ph id=\"ph1\">`Object`</ph> expression holds a numeric value and the other holds a string","source":"One `Object` expression holds a numeric value and the other holds a string"},{"content":"Implicitly convert the string <ph id=\"ph1\">`Object`</ph> to <ph id=\"ph2\">`Double`</ph> and add.","pos":[5161,5220],"source":"Implicitly convert the string `Object` to `Double` and add."},{"content":"If the string <ph id=\"ph1\">`Object`</ph> cannot be converted to a numeric value, then throw an <ph id=\"ph2\">&lt;xref:System.InvalidCastException&gt;</ph> exception.","pos":[5233,5355],"source":"If the string `Object` cannot be converted to a numeric value, then throw an <xref:System.InvalidCastException> exception."},{"pos":[5363,5554],"content":"If either <ph id=\"ph1\">`Object`</ph> expression evaluates to <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../visual-basic/language-reference/nothing.md)</ept> or <ph id=\"ph2\">&lt;xref:System.DBNull&gt;</ph>, the <ph id=\"ph3\">`+`</ph> operator treats it as a <ph id=\"ph4\">`String`</ph> with a value of \"\".","source":"If either `Object` expression evaluates to [Nothing](../../../visual-basic/language-reference/nothing.md) or <xref:System.DBNull>, the `+` operator treats it as a `String` with a value of \"\"."},{"pos":[5562,5791],"content":"[!NOTE]\n When you use the `+` operator, you might not be able to determine whether addition or string concatenation will occur. Use the `&` operator for concatenation to eliminate ambiguity and to provide self-documenting code.","leadings":["","> "],"nodes":[{"content":"When you use the `+` operator, you might not be able to determine whether addition or string concatenation will occur. Use the `&` operator for concatenation to eliminate ambiguity and to provide self-documenting code.","pos":[9,227],"nodes":[{"content":"When you use the <ph id=\"ph1\">`+`</ph> operator, you might not be able to determine whether addition or string concatenation will occur.","pos":[0,118],"source":"When you use the `+` operator, you might not be able to determine whether addition or string concatenation will occur."},{"content":"Use the <ph id=\"ph1\">`&amp;`</ph> operator for concatenation to eliminate ambiguity and to provide self-documenting code.","pos":[119,218],"source":" Use the `&` operator for concatenation to eliminate ambiguity and to provide self-documenting code."}]}]},{"pos":[5800,5811],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`+`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[5815,5973],"source":"The `+` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[5974,6082]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[6083,6224],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[6233,6240],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`+`</ph> operator to add numbers.","pos":[6244,6303],"source":"The following example uses the `+` operator to add numbers."},{"content":"If the operands are both numeric, Visual Basic computes the arithmetic result.","pos":[6304,6382]},{"content":"The arithmetic result represents the sum of the two operands.","pos":[6383,6444]},{"content":"You can also use the <ph id=\"ph1\">`+`</ph> operator to concatenate strings.","pos":[6587,6644],"source":"You can also use the `+` operator to concatenate strings."},{"content":"If the operands are both strings, Visual Basic concatenates them.","pos":[6645,6710]},{"content":"The concatenation result represents a single string consisting of the contents of the two operands one after the other.","pos":[6711,6830]},{"content":"If the operands are of mixed types, the result depends on the setting of the <bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>.","pos":[6837,7020],"source":"If the operands are of mixed types, the result depends on the setting of the [Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)."},{"content":"The following example illustrates the result when <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`On`</ph>.","pos":[7021,7095],"source":" The following example illustrates the result when `Option Strict` is `On`."},{"pos":[7509,7584],"content":"The following example illustrates the result when <ph id=\"ph1\">`Option Strict`</ph> is <ph id=\"ph2\">`Off`</ph>.","source":"The following example illustrates the result when `Option Strict` is `Off`."},{"pos":[7998,8087],"content":"To eliminate ambiguity, you should use the <ph id=\"ph1\">`&amp;`</ph> operator instead of <ph id=\"ph2\">`+`</ph> for concatenation.","source":"To eliminate ambiguity, you should use the `&` operator instead of `+` for concatenation."},{"pos":[8096,8104],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>&amp; Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[8108,8199],"source":"[& Operator](../../../visual-basic/language-reference/operators/concatenation-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/concatenation-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[8203,8308],"source":"[Concatenation Operators](../../../visual-basic/language-reference/operators/concatenation-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[8312,8411],"source":"[Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[8415,8540],"source":"[Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[8544,8657],"source":"[Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[8661,8809],"source":"[Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>","pos":[8813,8918],"source":"[Option Strict Statement](../../../visual-basic/language-reference/statements/option-strict-statement.md)"}]}