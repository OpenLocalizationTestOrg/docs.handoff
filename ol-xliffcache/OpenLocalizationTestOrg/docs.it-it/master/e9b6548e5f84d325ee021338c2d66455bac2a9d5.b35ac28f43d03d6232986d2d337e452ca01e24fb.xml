{"content":"---\ntitle: \"XML Serialization with XML Web Services | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"XML Web services, XML serialization\"\n  - \"XML serialization, XML Web services\"\n  - \"SOAP, XML serialization\"\n  - \"asmx files\"\n  - \"serialization, SOAP\"\n  - \"XML serialization, attributes\"\n  - \"attributes [.NET Framework], XML serialization\"\n  - \".asmx files\"\n  - \"encoded XML serialization\"\n  - \"literal XML serialization\"\n  - \"serialization, attributes\"\nms.assetid: a416192f-8102-458e-bc0a-0b8f3f784da9\ncaps.latest.revision: 5\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# XML Serialization with XML Web Services\nXML serialization is the underlying transport mechanism used in the XML Web services architecture, performed by the [XmlSerializer](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx) class. To control the XML generated by an XML Web service, you can apply the attributes listed in both [Attributes That Control XML Serialization](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md) and [Attributes That Control Encoded SOAP Serialization](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md) to the classes, return values, parameters, and fields of a file used to create an XML Web service (.asmx). For more information about creating an XML Web service, see [Building XML Web Services Using ASP.NET](http://msdn.microsoft.com/en-us/01dfc27c-c68e-4910-a0aa-5e4c2a766b0c).  \n  \n## Literal and Encoded Styles  \n The XML generated by an XML Web service can be formatted in either one of two ways, either literal or encoded, as explained in [Customizing SOAP Messages](http://msdn.microsoft.com/en-us/1d777288-c0d9-4e6a-b638-f010da031952). Therefore there are two sets of attributes that control XML serialization. The attributes listed in [Attributes That Control XML Serialization](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md) are designed to control literal style XML. The attributes listed in [Attributes That Control Encoded SOAP Serialization](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md) control the encoded style. By selectively applying these attributes, you can tailor an application to return either, or both styles. Furthermore, these attributes can be applied (as appropriate) to return values and parameters.  \n  \n### Example of Using Both Styles  \n When you're creating an XML Web service, you can use both sets of attributes on the methods. In the following code example, the class named `MyService` contains two XML Web service methods, `MyLiteralMethod` and `MyEncodedMethod`. Both methods perform the same function: returning an instance of the `Order` class. In the `Order` class, the <xref:System.Xml.Serialization.XmlTypeAttribute> and the <xref:System.Xml.Serialization.SoapTypeAttribute> attributes are both applied to the `OrderID` field, and both attributes have their `ElementName` property set to different values.  \n  \n To run the example, paste the code into a file with an .asmx extension, and place the file into a virtual directory managed by Internet Information Services (IIS). From an HTML browser, such as Internet Explorer, type the name of the computer, virtual directory, and file.  \n  \n```vb  \n<%@ WebService Language=\"VB\" Class=\"MyService\" %>  \nImports System  \nImports System.Web.Services  \nImports System.Web.Services.Protocols  \nImports System.Xml.Serialization  \nPublic Class Order  \n    ' Both types of attributes can be applied. Depending on which type  \n    ' the method used, either one will affect the call.  \n    <SoapElement(ElementName:= \"EncodedOrderID\"), _  \n    XmlElement(ElementName:= \"LiteralOrderID\")> _  \n    public OrderID As String  \nEnd Class  \n  \nPublic Class MyService  \n    <WebMethod, SoapDocumentMethod> _  \n    public Function MyLiteralMethod() As Order   \n        Dim myOrder As Order = New Order()  \n        return myOrder  \n    End Function  \n    <WebMethod, SoapRpcMethod> _  \n    public Function MyEncodedMethod() As Order   \n        Dim myOrder As Order = New Order()  \n        return myOrder  \n    End Function  \nEnd Class  \n  \n```  \n  \n```csharp  \n<%@ WebService Language=\"C#\" Class=\"MyService\" %>  \nusing System;  \nusing System.Web.Services;  \nusing System.Web.Services.Protocols;  \nusing System.Xml.Serialization;  \npublic class Order{  \n    // Both types of attributes can be applied. Depending on which type  \n    // the method used, either one will affect the call.  \n    [SoapElement(ElementName = \"EncodedOrderID\")]  \n    [XmlElement(ElementName = \"LiteralOrderID\")]  \n    public String OrderID;  \n}  \npublic class MyService{  \n    [WebMethod][SoapDocumentMethod]  \n    public Order MyLiteralMethod(){  \n        Order myOrder = new Order();  \n        return myOrder;  \n    }  \n    [WebMethod][SoapRpcMethod]  \n    public Order MyEncodedMethod(){  \n        Order myOrder = new Order();  \n        return myOrder;  \n    }  \n}  \n```  \n  \n The following code example calls `MyLiteralMethod`. The element name is changed to \"LiteralOrderID\".  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">  \n    <soap:Body>  \n        <MyLiteralMethodResponse xmlns=\"http://tempuri.org/\">  \n            <MyLiteralMethodResult>  \n                <LiteralOrderID>string</LiteralOrderID>  \n            </MyLiteralMethodResult>  \n        </MyLiteralMethodResponse>  \n    </soap:Body>  \n</soap:Envelope>  \n```  \n  \n The following code example calls `MyEncodedMethod`. The element name is \"EncodedOrderID\".  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:tns=\"http://tempuri.org/\" xmlns:types=\"http://tempuri.org/encodedTypes\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">  \n    <soap:Body soap:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">  \n        <tns:MyEncodedMethodResponse>  \n            <MyEncodedMethodResult href=\"#id1\" />  \n        </tns:MyEncodedMethodResponse>  \n        <types:Order id=\"id1\" xsi:type=\"types:Order\">  \n            <EncodedOrderID xsi:type=\"xsd:string\">string</EncodedOrderID>  \n        </types:Order>  \n    </soap:Body>  \n</soap:Envelope>  \n```  \n  \n### Applying Attributes to Return Values  \n You can also apply attributes to return values to control the namespace, element name, and so forth. The following code example applies the `XmlElementAttribute` attribute to the return value of the `MyLiteralMethod` method. Doing so allows you to control the namespace and element name.  \n  \n```vb  \n<WebMethod, SoapDocumentMethod> _  \npublic Function MyLiteralMethod() As _  \n<XmlElement(Namespace:=\"http://www.cohowinery.com\", _  \nElementName:= \"BookOrder\")> _  \nOrder   \n    Dim myOrder As Order = New Order()  \n    return myOrder  \nEnd Function  \n  \n```  \n  \n```csharp  \n[return: XmlElement(Namespace = \"http://www.cohowinery.com\",  \nElementName = \"BookOrder\")]  \n[WebMethod][SoapDocumentMethod]  \npublic Order MyLiteralMethod(){  \n    Order myOrder = new Order();  \n    return myOrder;  \n}  \n```  \n  \n When invoked, the code returns XML that resembles the following.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">  \n    <soap:Body>  \n        <MyLiteralMethodResponse xmlns=\"http://tempuri.org/\">  \n            <BookOrder xmlns=\"http://www.cohowinery.com\">  \n                <LiteralOrderID>string</LiteralOrderID>  \n            </BookOrder>  \n        </MyLiteralMethodResponse>  \n    </soap:Body>  \n</soap:Envelope>  \n```  \n  \n### Attributes Applied to Parameters  \n You can also apply attributes to parameters to specify namespace, element name and so forth. The following code example adds a parameter to the `MyLiteralMethodResponse` method, and applies the `XmlAttributeAttribute` attribute to the parameter. The element name and namespace are both set for the parameter.  \n  \n```vb  \n<WebMethod, SoapDocumentMethod> _  \npublic Function MyLiteralMethod(<XmlElement _  \n(\"MyOrderID\", Namespace:=\"http://www.microsoft.com\")>ID As String) As _  \n<XmlElement(Namespace:=\"http://www.cohowinery.com\", _  \nElementName:= \"BookOrder\")> _  \nOrder   \n    Dim myOrder As Order = New Order()  \n    myOrder.OrderID = ID  \n    return myOrder  \nEnd Function  \n  \n```  \n  \n```csharp  \n[return: XmlElement(Namespace = \"http://www.cohowinery.com\",  \nElementName = \"BookOrder\")]  \n[WebMethod][SoapDocumentMethod]  \npublic Order MyLiteralMethod([XmlElement(\"MyOrderID\",   \nNamespace=\"http://www.microsoft.com\")] string ID){  \n    Order myOrder = new Order();  \n    myOrder.OrderID = ID;  \n    return myOrder;  \n}   \n```  \n  \n The SOAP request would resemble the following.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">  \n    <soap:Body>  \n        <MyLiteralMethod xmlns=\"http://tempuri.org/\">  \n            <MyOrderID xmlns=\"http://www.microsoft.com\">string</MyOrderID>  \n        </MyLiteralMethod>  \n    </soap:Body>  \n</soap:Envelope>  \n```  \n  \n### Applying Attributes to Classes  \n If you need to control the namespace of elements that correlate to classes, you can apply `XmlTypeAttribute`, `XmlRootAttribute`, and `SoapTypeAttribute`, as appropriate. The following code example applies all three to the `Order` class.  \n  \n```vb  \n<XmlType(\"BigBookService\"), _  \nSoapType(\"SoapBookService\"), _  \nXmlRoot(\"BookOrderForm\")> _  \nPublic Class Order  \n    ' Both types of attributes can be applied. Depending on which  \n    ' the method used, either one will affect the call.  \n    <SoapElement(ElementName:= \"EncodedOrderID\"), _  \n    XmlElement(ElementName:= \"LiteralOrderID\")> _  \n    public OrderID As String  \nEnd Class  \n  \n```  \n  \n```csharp  \n[XmlType(\"BigBooksService\", Namespace = \"http://www.cpandl.com\")]  \n[SoapType(\"SoapBookService\")]  \n[XmlRoot(\"BookOrderForm\")]  \npublic class Order{  \n    // Both types of attributes can be applied. Depending on which  \n    // the method used, either one will affect the call.  \n    [SoapElement(ElementName = \"EncodedOrderID\")]  \n    [XmlElement(ElementName = \"LiteralOrderID\")]  \n    public String OrderID;  \n}  \n```  \n  \n The results of applying the `XmlTypeAttribute` and `SoapTypeAttribute` can be seen when you examine the service description, as shown in the following code example.  \n  \n```  \n    <s:element name=\"BookOrderForm\" type=\"s0:BigBookService\" />   \n- <s:complexType name=\"BigBookService\">  \n- <s:sequence>  \n    <s:element minOccurs=\"0\" maxOccurs=\"1\" name=\"LiteralOrderID\" type=\"s:string\" />   \n    </s:sequence>  \n  \n- <s:schema targetNamespace=\"http://tempuri.org/encodedTypes\">  \n- <s:complexType name=\"SoapBookService\">  \n- <s:sequence>  \n    <s:element minOccurs=\"1\" maxOccurs=\"1\" name=\"EncodedOrderID\" type=\"s:string\" />   \n    </s:sequence>  \n    </s:complexType>  \n    </s:schema>  \n```  \n  \n The effect of the `XmlRootAttribute` can also be seen in the HTTP GET and HTTP POST results, as follows.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<BookOrderForm xmlns=\"http://tempuri.org/\">  \n    <LiteralOrderID>string</LiteralOrderID>  \n</BookOrderForm>  \n```  \n  \n## See Also  \n [XML and SOAP Serialization](../../../docs/framework/serialization/xml-and-soap-serialization.md)   \n [Attributes That Control Encoded SOAP Serialization](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)   \n [How to: Serialize an Object as a SOAP-Encoded XML Stream](../../../docs/framework/serialization/how-to-serialize-an-object-as-a-soap-encoded-xml-stream.md)   \n [How to: Override Encoded SOAP XML Serialization](../../../docs/framework/serialization/how-to-override-encoded-soap-xml-serialization.md)   \n [Introducing XML Serialization](../../../docs/framework/serialization/introducing-xml-serialization.md)   \n [How to: Serialize an Object](../../../docs/framework/serialization/how-to-serialize-an-object.md)   \n [How to: Deserialize an Object](../../../docs/framework/serialization/how-to-deserialize-an-object.md)","nodes":[{"pos":[12,68],"content":"XML Serialization with XML Web Services | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"XML Serialization with XML Web Services | Microsoft Docs","pos":[0,56]}]},{"pos":[772,811],"content":"XML Serialization with XML Web Services","linkify":"XML Serialization with XML Web Services","nodes":[{"content":"XML Serialization with XML Web Services","pos":[0,39]}]},{"content":"XML serialization is the underlying transport mechanism used in the XML Web services architecture, performed by the <bpt id=\"p1\">[</bpt>XmlSerializer<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx)</ept> class.","pos":[812,1036],"source":"XML serialization is the underlying transport mechanism used in the XML Web services architecture, performed by the [XmlSerializer](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx) class."},{"content":"To control the XML generated by an XML Web service, you can apply the attributes listed in both <bpt id=\"p1\">[</bpt>Attributes That Control XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept> and <bpt id=\"p2\">[</bpt>Attributes That Control Encoded SOAP Serialization<ept id=\"p2\">](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)</ept> to the classes, return values, parameters, and fields of a file used to create an XML Web service (.asmx).","pos":[1037,1517],"source":" To control the XML generated by an XML Web service, you can apply the attributes listed in both [Attributes That Control XML Serialization](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md) and [Attributes That Control Encoded SOAP Serialization](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md) to the classes, return values, parameters, and fields of a file used to create an XML Web service (.asmx)."},{"content":"For more information about creating an XML Web service, see <bpt id=\"p1\">[</bpt>Building XML Web Services Using ASP.NET<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01dfc27c-c68e-4910-a0aa-5e4c2a766b0c)</ept>.","pos":[1518,1690],"source":" For more information about creating an XML Web service, see [Building XML Web Services Using ASP.NET](http://msdn.microsoft.com/en-us/01dfc27c-c68e-4910-a0aa-5e4c2a766b0c)."},{"pos":[1699,1725],"content":"Literal and Encoded Styles","linkify":"Literal and Encoded Styles","nodes":[{"content":"Literal and Encoded Styles","pos":[0,26]}]},{"content":"The XML generated by an XML Web service can be formatted in either one of two ways, either literal or encoded, as explained in <bpt id=\"p1\">[</bpt>Customizing SOAP Messages<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1d777288-c0d9-4e6a-b638-f010da031952)</ept>.","pos":[1729,1954],"source":"The XML generated by an XML Web service can be formatted in either one of two ways, either literal or encoded, as explained in [Customizing SOAP Messages](http://msdn.microsoft.com/en-us/1d777288-c0d9-4e6a-b638-f010da031952)."},{"content":"Therefore there are two sets of attributes that control XML serialization.","pos":[1955,2029]},{"content":"The attributes listed in <bpt id=\"p1\">[</bpt>Attributes That Control XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept> are designed to control literal style XML.","pos":[2030,2225],"source":" The attributes listed in [Attributes That Control XML Serialization](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md) are designed to control literal style XML."},{"content":"The attributes listed in <bpt id=\"p1\">[</bpt>Attributes That Control Encoded SOAP Serialization<ept id=\"p1\">](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)</ept> control the encoded style.","pos":[2226,2423],"source":" The attributes listed in [Attributes That Control Encoded SOAP Serialization](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md) control the encoded style."},{"content":"By selectively applying these attributes, you can tailor an application to return either, or both styles.","pos":[2424,2529]},{"content":"Furthermore, these attributes can be applied (as appropriate) to return values and parameters.","pos":[2530,2624]},{"pos":[2634,2662],"content":"Example of Using Both Styles","linkify":"Example of Using Both Styles","nodes":[{"content":"Example of Using Both Styles","pos":[0,28]}]},{"content":"When you're creating an XML Web service, you can use both sets of attributes on the methods.","pos":[2666,2758]},{"content":"In the following code example, the class named <ph id=\"ph1\">`MyService`</ph> contains two XML Web service methods, <ph id=\"ph2\">`MyLiteralMethod`</ph> and <ph id=\"ph3\">`MyEncodedMethod`</ph>.","pos":[2759,2896],"source":" In the following code example, the class named `MyService` contains two XML Web service methods, `MyLiteralMethod` and `MyEncodedMethod`."},{"content":"Both methods perform the same function: returning an instance of the <ph id=\"ph1\">`Order`</ph> class.","pos":[2897,2980],"source":" Both methods perform the same function: returning an instance of the `Order` class."},{"content":"In the <ph id=\"ph1\">`Order`</ph> class, the <ph id=\"ph2\">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph> and the <ph id=\"ph3\">&lt;xref:System.Xml.Serialization.SoapTypeAttribute&gt;</ph> attributes are both applied to the <ph id=\"ph4\">`OrderID`</ph> field, and both attributes have their <ph id=\"ph5\">`ElementName`</ph> property set to different values.","pos":[2981,3244],"source":" In the `Order` class, the <xref:System.Xml.Serialization.XmlTypeAttribute> and the <xref:System.Xml.Serialization.SoapTypeAttribute> attributes are both applied to the `OrderID` field, and both attributes have their `ElementName` property set to different values."},{"content":"To run the example, paste the code into a file with an .asmx extension, and place the file into a virtual directory managed by Internet Information Services (IIS).","pos":[3251,3414]},{"content":"From an HTML browser, such as Internet Explorer, type the name of the computer, virtual directory, and file.","pos":[3415,3523]},{"content":"The following code example calls <ph id=\"ph1\">`MyLiteralMethod`</ph>.","pos":[5223,5274],"source":"The following code example calls `MyLiteralMethod`."},{"content":"The element name is changed to \"LiteralOrderID\".","pos":[5275,5323]},{"content":"The following code example calls <ph id=\"ph1\">`MyEncodedMethod`</ph>.","pos":[5850,5901],"source":"The following code example calls `MyEncodedMethod`."},{"content":"The element name is \"EncodedOrderID\".","pos":[5902,5939]},{"pos":[6722,6758],"content":"Applying Attributes to Return Values","linkify":"Applying Attributes to Return Values","nodes":[{"content":"Applying Attributes to Return Values","pos":[0,36]}]},{"content":"You can also apply attributes to return values to control the namespace, element name, and so forth.","pos":[6762,6862]},{"content":"The following code example applies the <ph id=\"ph1\">`XmlElementAttribute`</ph> attribute to the return value of the <ph id=\"ph2\">`MyLiteralMethod`</ph> method.","pos":[6863,6986],"source":" The following code example applies the `XmlElementAttribute` attribute to the return value of the `MyLiteralMethod` method."},{"content":"Doing so allows you to control the namespace and element name.","pos":[6987,7049]},{"content":"When invoked, the code returns XML that resembles the following.","pos":[7570,7634]},{"pos":[8174,8206],"content":"Attributes Applied to Parameters","linkify":"Attributes Applied to Parameters","nodes":[{"content":"Attributes Applied to Parameters","pos":[0,32]}]},{"content":"You can also apply attributes to parameters to specify namespace, element name and so forth.","pos":[8210,8302]},{"content":"The following code example adds a parameter to the <ph id=\"ph1\">`MyLiteralMethodResponse`</ph> method, and applies the <ph id=\"ph2\">`XmlAttributeAttribute`</ph> attribute to the parameter.","pos":[8303,8455],"source":" The following code example adds a parameter to the `MyLiteralMethodResponse` method, and applies the `XmlAttributeAttribute` attribute to the parameter."},{"content":"The element name and namespace are both set for the parameter.","pos":[8456,8518]},{"content":"The SOAP request would resemble the following.","pos":[9252,9298]},{"pos":[9754,9784],"content":"Applying Attributes to Classes","linkify":"Applying Attributes to Classes","nodes":[{"content":"Applying Attributes to Classes","pos":[0,30]}]},{"content":"If you need to control the namespace of elements that correlate to classes, you can apply <ph id=\"ph1\">`XmlTypeAttribute`</ph>, <ph id=\"ph2\">`XmlRootAttribute`</ph>, and <ph id=\"ph3\">`SoapTypeAttribute`</ph>, as appropriate.","pos":[9788,9958],"source":"If you need to control the namespace of elements that correlate to classes, you can apply `XmlTypeAttribute`, `XmlRootAttribute`, and `SoapTypeAttribute`, as appropriate."},{"content":"The following code example applies all three to the <ph id=\"ph1\">`Order`</ph> class.","pos":[9959,10025],"source":" The following code example applies all three to the `Order` class."},{"pos":[10879,11043],"content":"The results of applying the <ph id=\"ph1\">`XmlTypeAttribute`</ph> and <ph id=\"ph2\">`SoapTypeAttribute`</ph> can be seen when you examine the service description, as shown in the following code example.","source":"The results of applying the `XmlTypeAttribute` and `SoapTypeAttribute` can be seen when you examine the service description, as shown in the following code example."},{"pos":[11574,11678],"content":"The effect of the <ph id=\"ph1\">`XmlRootAttribute`</ph> can also be seen in the HTTP GET and HTTP POST results, as follows.","source":"The effect of the `XmlRootAttribute` can also be seen in the HTTP GET and HTTP POST results, as follows."},{"pos":[11854,11862],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>XML and SOAP Serialization<ept id=\"p1\">](../../../docs/framework/serialization/xml-and-soap-serialization.md)</ept><ph id=\"ph1\"> </ph>","pos":[11866,11964],"source":"[XML and SOAP Serialization](../../../docs/framework/serialization/xml-and-soap-serialization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Attributes That Control Encoded SOAP Serialization<ept id=\"p1\">](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)</ept><ph id=\"ph1\"> </ph>","pos":[11967,12114],"source":" [Attributes That Control Encoded SOAP Serialization](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Serialize an Object as a SOAP-Encoded XML Stream<ept id=\"p1\">](../../../docs/framework/serialization/how-to-serialize-an-object-as-a-soap-encoded-xml-stream.md)</ept><ph id=\"ph1\"> </ph>","pos":[12117,12275],"source":" [How to: Serialize an Object as a SOAP-Encoded XML Stream](../../../docs/framework/serialization/how-to-serialize-an-object-as-a-soap-encoded-xml-stream.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Override Encoded SOAP XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/how-to-override-encoded-soap-xml-serialization.md)</ept><ph id=\"ph1\"> </ph>","pos":[12278,12418],"source":" [How to: Override Encoded SOAP XML Serialization](../../../docs/framework/serialization/how-to-override-encoded-soap-xml-serialization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Introducing XML Serialization<ept id=\"p1\">](../../../docs/framework/serialization/introducing-xml-serialization.md)</ept><ph id=\"ph1\"> </ph>","pos":[12421,12526],"source":" [Introducing XML Serialization](../../../docs/framework/serialization/introducing-xml-serialization.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Serialize an Object<ept id=\"p1\">](../../../docs/framework/serialization/how-to-serialize-an-object.md)</ept><ph id=\"ph1\"> </ph>","pos":[12529,12629],"source":" [How to: Serialize an Object](../../../docs/framework/serialization/how-to-serialize-an-object.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Deserialize an Object<ept id=\"p1\">](../../../docs/framework/serialization/how-to-deserialize-an-object.md)</ept>","pos":[12632,12735],"source":" [How to: Deserialize an Object](../../../docs/framework/serialization/how-to-deserialize-an-object.md)"}]}