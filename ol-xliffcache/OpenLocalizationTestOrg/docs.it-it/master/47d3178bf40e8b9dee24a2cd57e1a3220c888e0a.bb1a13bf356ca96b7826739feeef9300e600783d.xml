{"content":"---\ntitle: \"String Canonical Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"ESQL\"\nms.assetid: 5e2cbebd-5df3-47c7-b0e2-49a17ab22bfb\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# String Canonical Functions\n[!INCLUDE[esql](../../../../../../includes/esql-md.md)] includes string canonical functions.  \n  \n## Remarks  \n The following table shows the string [!INCLUDE[esql](../../../../../../includes/esql-md.md)] canonical functions.  \n  \n|Function|Description|  \n|--------------|-----------------|  \n|`Concat (` `string1`, `string2``)`|Returns a string that contains `string2` appended to `string1`.<br /><br /> **Arguments**<br /><br /> `string1`: The string to which `string2` is appended.<br /><br /> `string2`: The string that is appended to `string1`.<br /><br /> **Return Value**<br /><br /> A `String`. An error will occur if the length of the return value string is greater than the maximum length allowed.<br /><br /> **Example**<br /><br /> `-- The following example returns abcxyz.`<br /><br /> `Concat('abc', 'xyz')`|  \n|`Contains (` `string`, `target``)`|Returns `true` if `target` is contained in `string`.<br /><br /> **Arguments**<br /><br /> `string`: The string that is searched.<br /><br /> `target`: The target string that is searched for.<br /><br /> **Return Value**<br /><br /> `true` if `target` is contained in `string`; otherwise `false`.<br /><br /> **Example**<br /><br /> `-- The following example returns true.`<br /><br /> `Contains('abc', 'bc')`|  \n|`EndsWith (` `string`, `target``)`|Returns `true` if `target` ends with `string`.<br /><br /> **Arguments**<br /><br /> `string`: The string that is searched.<br /><br /> `target`: The target string searched for at the end of `string`.<br /><br /> **Return Value**<br /><br /> `True` if `string` ends with `target`; otherwise `false`.<br /><br /> **Example**<br /><br /> `-- The following example returns true.`<br /><br /> `EndsWith('abc', 'bc')` **Note:**  If you are using the [!INCLUDE[ssNoVersion](../../../../../../includes/ssnoversion-md.md)] data provider, this function returns `false` if the string is stored in a fixed length string column and `target` is a constant. In this case, the entire string is searched, including any padding trailing spaces. A possible workaround is to trim the data in the fixed length string, as in the following example: `EndsWith(TRIM(string), target)`|  \n|`IndexOf(` `target`, `string``)`|Returns the position of `target` inside `string`, or 0 if not found. Returns 1 to indicate the beginning of `string`. Index numbering starts from 1.<br /><br /> **Arguments**<br /><br /> `target`: The string that is searched for.<br /><br /> `string`: The string that is searched.<br /><br /> **Return Value**<br /><br /> An `Int32`.<br /><br /> **Example**<br /><br /> `-- The following example returns 4.`<br /><br /> `IndexOf('xyz', 'abcxyz')`|  \n|`Left (` `string`, `length``)`|Returns the first `length` characters from the left side of `string`. If the length of `string` is less than `length`, the entire string is returned.<br /><br /> **Arguments**<br /><br /> `string`: A `String`.<br /><br /> `length`: An `Int16`, `Int32`, `Int64`, or `Byte`. `length` cannot be less than zero.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns abc.`<br /><br /> `Left('abcxyz', 3)`|  \n|`Length (` `string` `)`|Returns the (`Int32`) length, in characters, of the string.<br /><br /> **Arguments**<br /><br /> `string`: A `String`.<br /><br /> **Return Value**<br /><br /> An `Int32`.<br /><br /> **Example**<br /><br /> `-- The following example returns 6.`<br /><br /> `Legth('abcxyz')`|  \n|`LTrim(` `string` `)`|Returns `string` without leading whitespace.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns abc.`<br /><br /> `LTrim('   abc')`|  \n|`Replace (` `string1`, `string2`, `string3``)`|Returns `string1`, with all occurrences of `string2` replaced by `string3`.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns abcxyz.`<br /><br /> `Concat('abc', 'xyz')`|  \n|`Reverse (` `string` `)`|Returns `string` with the order of the characters reversed.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns dcba.`<br /><br /> `Reverse('abcd')`|  \n|`Right (` `string`, `length``)`|Returns the last `length` characters from the `string`. If the length of `string` is less than `length`, the entire string is returned.<br /><br /> **Arguments**<br /><br /> `string`: A `String`.<br /><br /> `length`: An `Int16`, `Int32`, `Int64`, or `Byte`. `length` cannot be less than zero.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns xyz.`<br /><br /> `Right('abcxyz', 3)`|  \n|`RTrim(` `string` `)`|Returns `string` without trailing whitespace.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.|  \n|`Substring (` `string`, `start`, `length``)`|Returns the substring of the string starting at position `start`, with a length of `length` characters. A start of 1 indicates the first character of the string. Index numbering starts from 1.<br /><br /> **Arguments**<br /><br /> `string`: A `String`.<br /><br /> `start`: An `Int16`, `Int32`, `Int64` and `Byte`. `start` cannot be less than one.<br /><br /> `length`: An `Int16`, `Int32`, `Int64` and `Byte`. `length` cannot be less than zero.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns xyz.`<br /><br /> `Substring('abcxyz', 4, 3)`|  \n|`StartsWith (` `string`, `target``)`|Returns `true` if `string` starts with `target`.<br /><br /> **Arguments**<br /><br /> `string`: The string that is searched.<br /><br /> `target`: The target string searched for at the start of `string`.<br /><br /> **Return Value**<br /><br /> `True` if `string` starts with `target`; otherwise `false`.<br /><br /> **Example**<br /><br /> `-- The following example returns true.`<br /><br /> `StartsWith('abc', 'ab')`|  \n|`ToLower(` `string` `)`|Returns `string` with uppercase characters converted to lowercase.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns abc.`<br /><br /> `ToLower('ABC')`|  \n|`ToUpper(` `string` `)`|Returns `string` with lowercase characters converted to uppercase.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns ABC.`<br /><br /> `ToUpper('abc')`|  \n|`Trim(` `string` `)`|Returns `string` without leading and trailing whitespace.<br /><br /> **Arguments**<br /><br /> A `String`.<br /><br /> **Return Value**<br /><br /> A `String`.<br /><br /> **Example**<br /><br /> `-- The following example returns abc.`<br /><br /> `Trim('      abc   ')`|  \n  \n These functions will return `null` if given `null` input.  \n  \n Equivalent functionality is available in the Microsoft SQL Client Managed Provider. For more information, see [SqlClient for Entity Framework Functions](../../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md).  \n  \n## See Also  \n [Canonical Functions](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)","nodes":[{"pos":[4,412],"embed":true,"restype":"x-metadata","content":"title: \"String Canonical Functions | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"ESQL\"\nms.assetid: 5e2cbebd-5df3-47c7-b0e2-49a17ab22bfb\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"String Canonical Functions | Microsoft Docs","nodes":[{"pos":[0,43],"content":"String Canonical Functions | Microsoft Docs","nodes":[{"content":"String Canonical Functions | Microsoft Docs","pos":[0,43]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[419,445],"content":"String Canonical Functions","linkify":"String Canonical Functions","nodes":[{"content":"String Canonical Functions","pos":[0,26]}]},{"pos":[502,538],"content":"includes string canonical functions."},{"pos":[547,554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[558,671],"content":"The following table shows the string <ph id=\"ph1\">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> canonical functions.","source":"The following table shows the string [!INCLUDE[esql](../../../../../../includes/esql-md.md)] canonical functions."},{"content":"Function","pos":[678,686]},{"content":"Description","pos":[687,698]},{"pos":[740,774],"content":"<ph id=\"ph1\">`Concat (`</ph> <ph id=\"ph2\">`string1`</ph>, <ph id=\"ph3\">`string2``)`</ph>","source":"`Concat (` `string1`, `string2``)`"},{"content":"Returns a string that contains <ph id=\"ph1\">`string2`</ph> appended to <ph id=\"ph2\">`string1`</ph>.","pos":[775,838],"source":"Returns a string that contains `string2` appended to `string1`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[851,864],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string1`</ph>: The string to which <ph id=\"ph2\">`string2`</ph> is appended.","pos":[877,930],"source":"`string1`: The string to which `string2` is appended."},{"content":"<ph id=\"ph1\">`string2`</ph>: The string that is appended to <ph id=\"ph2\">`string1`</ph>.","pos":[943,995],"source":"`string2`: The string that is appended to `string1`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[1008,1024],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[1037,1048],"source":"A `String`."},{"content":"An error will occur if the length of the return value string is greater than the maximum length allowed.","pos":[1049,1153]},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1166,1177],"source":"**Example**"},{"pos":[1272,1306],"content":"<ph id=\"ph1\">`Contains (`</ph> <ph id=\"ph2\">`string`</ph>, <ph id=\"ph3\">`target``)`</ph>","source":"`Contains (` `string`, `target``)`"},{"content":"Returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`target`</ph> is contained in <ph id=\"ph3\">`string`</ph>.","pos":[1307,1359],"source":"Returns `true` if `target` is contained in `string`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1372,1385],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: The string that is searched.","pos":[1398,1436],"source":"`string`: The string that is searched."},{"content":"<ph id=\"ph1\">`target`</ph>: The target string that is searched for.","pos":[1449,1498],"source":"`target`: The target string that is searched for."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[1511,1527],"source":"**Return Value**"},{"content":"<ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`target`</ph> is contained in <ph id=\"ph3\">`string`</ph>; otherwise <ph id=\"ph4\">`false`</ph>.","pos":[1540,1603],"source":"`true` if `target` is contained in `string`; otherwise `false`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[1616,1627],"source":"**Example**"},{"pos":[1721,1755],"content":"<ph id=\"ph1\">`EndsWith (`</ph> <ph id=\"ph2\">`string`</ph>, <ph id=\"ph3\">`target``)`</ph>","source":"`EndsWith (` `string`, `target``)`"},{"content":"Returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`target`</ph> ends with <ph id=\"ph3\">`string`</ph>.","pos":[1756,1802],"source":"Returns `true` if `target` ends with `string`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[1815,1828],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: The string that is searched.","pos":[1841,1879],"source":"`string`: The string that is searched."},{"content":"<ph id=\"ph1\">`target`</ph>: The target string searched for at the end of <ph id=\"ph2\">`string`</ph>.","pos":[1892,1956],"source":"`target`: The target string searched for at the end of `string`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[1969,1985],"source":"**Return Value**"},{"content":"<ph id=\"ph1\">`True`</ph> if <ph id=\"ph2\">`string`</ph> ends with <ph id=\"ph3\">`target`</ph>; otherwise <ph id=\"ph4\">`false`</ph>.","pos":[1998,2055],"source":"`True` if `string` ends with `target`; otherwise `false`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[2068,2079],"source":"**Example**"},{"content":"<ph id=\"ph1\">`EndsWith('abc', 'bc')`</ph> <bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept>  If you are using the <ph id=\"ph2\">[!INCLUDE[ssNoVersion](../../../../../../includes/ssnoversion-md.md)]</ph> data provider, this function returns <ph id=\"ph3\">`false`</ph> if the string is stored in a fixed length string column and <ph id=\"ph4\">`target`</ph> is a constant.","pos":[2145,2399],"source":"`EndsWith('abc', 'bc')` **Note:**  If you are using the [!INCLUDE[ssNoVersion](../../../../../../includes/ssnoversion-md.md)] data provider, this function returns `false` if the string is stored in a fixed length string column and `target` is a constant."},{"content":"In this case, the entire string is searched, including any padding trailing spaces.","pos":[2400,2483]},{"content":"A possible workaround is to trim the data in the fixed length string, as in the following example: <ph id=\"ph1\">`EndsWith(TRIM(string), target)`</ph>","pos":[2484,2615],"source":" A possible workaround is to trim the data in the fixed length string, as in the following example: `EndsWith(TRIM(string), target)`"},{"pos":[2620,2652],"content":"<ph id=\"ph1\">`IndexOf(`</ph> <ph id=\"ph2\">`target`</ph>, <ph id=\"ph3\">`string``)`</ph>","source":"`IndexOf(` `target`, `string``)`"},{"content":"Returns the position of <ph id=\"ph1\">`target`</ph> inside <ph id=\"ph2\">`string`</ph>, or 0 if not found.","pos":[2653,2721],"source":"Returns the position of `target` inside `string`, or 0 if not found."},{"content":"Returns 1 to indicate the beginning of <ph id=\"ph1\">`string`</ph>.","pos":[2722,2770],"source":" Returns 1 to indicate the beginning of `string`."},{"content":"Index numbering starts from 1.","pos":[2771,2801]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[2814,2827],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`target`</ph>: The string that is searched for.","pos":[2840,2882],"source":"`target`: The string that is searched for."},{"content":"<ph id=\"ph1\">`string`</ph>: The string that is searched.","pos":[2895,2933],"source":"`string`: The string that is searched."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[2946,2962],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>.","pos":[2975,2986],"source":"An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[2999,3010],"source":"**Example**"},{"pos":[3104,3134],"content":"<ph id=\"ph1\">`Left (`</ph> <ph id=\"ph2\">`string`</ph>, <ph id=\"ph3\">`length``)`</ph>","source":"`Left (` `string`, `length``)`"},{"content":"Returns the first <ph id=\"ph1\">`length`</ph> characters from the left side of <ph id=\"ph2\">`string`</ph>.","pos":[3135,3204],"source":"Returns the first `length` characters from the left side of `string`."},{"content":"If the length of <ph id=\"ph1\">`string`</ph> is less than <ph id=\"ph2\">`length`</ph>, the entire string is returned.","pos":[3205,3284],"source":" If the length of `string` is less than `length`, the entire string is returned."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[3297,3310],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: A <ph id=\"ph2\">`String`</ph>.","pos":[3323,3344],"source":"`string`: A `String`."},{"content":"<ph id=\"ph1\">`length`</ph>: An <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, <ph id=\"ph4\">`Int64`</ph>, or <ph id=\"ph5\">`Byte`</ph>.","pos":[3357,3407],"source":"`length`: An `Int16`, `Int32`, `Int64`, or `Byte`."},{"content":"<ph id=\"ph1\">`length`</ph> cannot be less than zero.","pos":[3408,3442],"source":"`length` cannot be less than zero."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[3455,3471],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[3484,3495],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[3508,3519],"source":"**Example**"},{"pos":[3608,3631],"content":"<ph id=\"ph1\">`Length (`</ph> <ph id=\"ph2\">`string`</ph> <ph id=\"ph3\">`)`</ph>","source":"`Length (` `string` `)`"},{"content":"Returns the (<ph id=\"ph1\">`Int32`</ph>) length, in characters, of the string.","pos":[3632,3691],"source":"Returns the (`Int32`) length, in characters, of the string."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[3704,3717],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: A <ph id=\"ph2\">`String`</ph>.","pos":[3730,3751],"source":"`string`: A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[3764,3780],"source":"**Return Value**"},{"content":"An <ph id=\"ph1\">`Int32`</ph>.","pos":[3793,3804],"source":"An `Int32`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[3817,3828],"source":"**Example**"},{"pos":[3913,3934],"content":"<ph id=\"ph1\">`LTrim(`</ph> <ph id=\"ph2\">`string`</ph> <ph id=\"ph3\">`)`</ph>","source":"`LTrim(` `string` `)`"},{"content":"Returns <ph id=\"ph1\">`string`</ph> without leading whitespace.","pos":[3935,3979],"source":"Returns `string` without leading whitespace."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[3992,4005],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4018,4029],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[4042,4058],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4071,4082],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[4095,4106],"source":"**Example**"},{"pos":[4193,4239],"content":"<ph id=\"ph1\">`Replace (`</ph> <ph id=\"ph2\">`string1`</ph>, <ph id=\"ph3\">`string2`</ph>, <ph id=\"ph4\">`string3``)`</ph>","source":"`Replace (` `string1`, `string2`, `string3``)`"},{"content":"Returns <ph id=\"ph1\">`string1`</ph>, with all occurrences of <ph id=\"ph2\">`string2`</ph> replaced by <ph id=\"ph3\">`string3`</ph>.","pos":[4240,4315],"source":"Returns `string1`, with all occurrences of `string2` replaced by `string3`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[4328,4341],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4354,4365],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[4378,4394],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4407,4418],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[4431,4442],"source":"**Example**"},{"pos":[4537,4561],"content":"<ph id=\"ph1\">`Reverse (`</ph> <ph id=\"ph2\">`string`</ph> <ph id=\"ph3\">`)`</ph>","source":"`Reverse (` `string` `)`"},{"content":"Returns <ph id=\"ph1\">`string`</ph> with the order of the characters reversed.","pos":[4562,4621],"source":"Returns `string` with the order of the characters reversed."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[4634,4647],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4660,4671],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[4684,4700],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[4713,4724],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[4737,4748],"source":"**Example**"},{"pos":[4836,4867],"content":"<ph id=\"ph1\">`Right (`</ph> <ph id=\"ph2\">`string`</ph>, <ph id=\"ph3\">`length``)`</ph>","source":"`Right (` `string`, `length``)`"},{"content":"Returns the last <ph id=\"ph1\">`length`</ph> characters from the <ph id=\"ph2\">`string`</ph>.","pos":[4868,4923],"source":"Returns the last `length` characters from the `string`."},{"content":"If the length of <ph id=\"ph1\">`string`</ph> is less than <ph id=\"ph2\">`length`</ph>, the entire string is returned.","pos":[4924,5003],"source":" If the length of `string` is less than `length`, the entire string is returned."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[5016,5029],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: A <ph id=\"ph2\">`String`</ph>.","pos":[5042,5063],"source":"`string`: A `String`."},{"content":"<ph id=\"ph1\">`length`</ph>: An <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, <ph id=\"ph4\">`Int64`</ph>, or <ph id=\"ph5\">`Byte`</ph>.","pos":[5076,5126],"source":"`length`: An `Int16`, `Int32`, `Int64`, or `Byte`."},{"content":"<ph id=\"ph1\">`length`</ph> cannot be less than zero.","pos":[5127,5161],"source":"`length` cannot be less than zero."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[5174,5190],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[5203,5214],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[5227,5238],"source":"**Example**"},{"pos":[5328,5349],"content":"<ph id=\"ph1\">`RTrim(`</ph> <ph id=\"ph2\">`string`</ph> <ph id=\"ph3\">`)`</ph>","source":"`RTrim(` `string` `)`"},{"content":"Returns <ph id=\"ph1\">`string`</ph> without trailing whitespace.","pos":[5350,5395],"source":"Returns `string` without trailing whitespace."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[5408,5421],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[5434,5445],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[5458,5474],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[5487,5498],"source":"A `String`."},{"pos":[5503,5547],"content":"<ph id=\"ph1\">`Substring (`</ph> <ph id=\"ph2\">`string`</ph>, <ph id=\"ph3\">`start`</ph>, <ph id=\"ph4\">`length``)`</ph>","source":"`Substring (` `string`, `start`, `length``)`"},{"content":"Returns the substring of the string starting at position <ph id=\"ph1\">`start`</ph>, with a length of <ph id=\"ph2\">`length`</ph> characters.","pos":[5548,5651],"source":"Returns the substring of the string starting at position `start`, with a length of `length` characters."},{"content":"A start of 1 indicates the first character of the string.","pos":[5652,5709]},{"content":"Index numbering starts from 1.","pos":[5710,5740]},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[5753,5766],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: A <ph id=\"ph2\">`String`</ph>.","pos":[5779,5800],"source":"`string`: A `String`."},{"content":"<ph id=\"ph1\">`start`</ph>: An <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, <ph id=\"ph4\">`Int64`</ph> and <ph id=\"ph5\">`Byte`</ph>.","pos":[5813,5862],"source":"`start`: An `Int16`, `Int32`, `Int64` and `Byte`."},{"content":"<ph id=\"ph1\">`start`</ph> cannot be less than one.","pos":[5863,5895],"source":"`start` cannot be less than one."},{"content":"<ph id=\"ph1\">`length`</ph>: An <ph id=\"ph2\">`Int16`</ph>, <ph id=\"ph3\">`Int32`</ph>, <ph id=\"ph4\">`Int64`</ph> and <ph id=\"ph5\">`Byte`</ph>.","pos":[5908,5958],"source":"`length`: An `Int16`, `Int32`, `Int64` and `Byte`."},{"content":"<ph id=\"ph1\">`length`</ph> cannot be less than zero.","pos":[5959,5993],"source":"`length` cannot be less than zero."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[6006,6022],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[6035,6046],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6059,6070],"source":"**Example**"},{"pos":[6167,6203],"content":"<ph id=\"ph1\">`StartsWith (`</ph> <ph id=\"ph2\">`string`</ph>, <ph id=\"ph3\">`target``)`</ph>","source":"`StartsWith (` `string`, `target``)`"},{"content":"Returns <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">`string`</ph> starts with <ph id=\"ph3\">`target`</ph>.","pos":[6204,6252],"source":"Returns `true` if `string` starts with `target`."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[6265,6278],"source":"**Arguments**"},{"content":"<ph id=\"ph1\">`string`</ph>: The string that is searched.","pos":[6291,6329],"source":"`string`: The string that is searched."},{"content":"<ph id=\"ph1\">`target`</ph>: The target string searched for at the start of <ph id=\"ph2\">`string`</ph>.","pos":[6342,6408],"source":"`target`: The target string searched for at the start of `string`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[6421,6437],"source":"**Return Value**"},{"content":"<ph id=\"ph1\">`True`</ph> if <ph id=\"ph2\">`string`</ph> starts with <ph id=\"ph3\">`target`</ph>; otherwise <ph id=\"ph4\">`false`</ph>.","pos":[6450,6509],"source":"`True` if `string` starts with `target`; otherwise `false`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6522,6533],"source":"**Example**"},{"pos":[6629,6652],"content":"<ph id=\"ph1\">`ToLower(`</ph> <ph id=\"ph2\">`string`</ph> <ph id=\"ph3\">`)`</ph>","source":"`ToLower(` `string` `)`"},{"content":"Returns <ph id=\"ph1\">`string`</ph> with uppercase characters converted to lowercase.","pos":[6653,6719],"source":"Returns `string` with uppercase characters converted to lowercase."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[6732,6745],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[6758,6769],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[6782,6798],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[6811,6822],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[6835,6846],"source":"**Example**"},{"pos":[6932,6955],"content":"<ph id=\"ph1\">`ToUpper(`</ph> <ph id=\"ph2\">`string`</ph> <ph id=\"ph3\">`)`</ph>","source":"`ToUpper(` `string` `)`"},{"content":"Returns <ph id=\"ph1\">`string`</ph> with lowercase characters converted to uppercase.","pos":[6956,7022],"source":"Returns `string` with lowercase characters converted to uppercase."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[7035,7048],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[7061,7072],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[7085,7101],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[7114,7125],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[7138,7149],"source":"**Example**"},{"pos":[7235,7255],"content":"<ph id=\"ph1\">`Trim(`</ph> <ph id=\"ph2\">`string`</ph> <ph id=\"ph3\">`)`</ph>","source":"`Trim(` `string` `)`"},{"content":"Returns <ph id=\"ph1\">`string`</ph> without leading and trailing whitespace.","pos":[7256,7313],"source":"Returns `string` without leading and trailing whitespace."},{"content":"<bpt id=\"p1\">**</bpt>Arguments<ept id=\"p1\">**</ept>","pos":[7326,7339],"source":"**Arguments**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[7352,7363],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Return Value<ept id=\"p1\">**</ept>","pos":[7376,7392],"source":"**Return Value**"},{"content":"A <ph id=\"ph1\">`String`</ph>.","pos":[7405,7416],"source":"A `String`."},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[7429,7440],"source":"**Example**"},{"pos":[7535,7592],"content":"These functions will return <ph id=\"ph1\">`null`</ph> if given <ph id=\"ph2\">`null`</ph> input.","source":"These functions will return `null` if given `null` input."},{"content":"Equivalent functionality is available in the Microsoft SQL Client Managed Provider.","pos":[7599,7682]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>SqlClient for Entity Framework Functions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md)</ept>.","pos":[7683,7831],"source":" For more information, see [SqlClient for Entity Framework Functions](../../../../../../docs/framework/data/adonet/ef/sqlclient-for-ef-functions.md)."},{"pos":[7840,7848],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7852,7964],"content":"<bpt id=\"p1\">[</bpt>Canonical Functions<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)</ept>","source":"[Canonical Functions](../../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)"}]}