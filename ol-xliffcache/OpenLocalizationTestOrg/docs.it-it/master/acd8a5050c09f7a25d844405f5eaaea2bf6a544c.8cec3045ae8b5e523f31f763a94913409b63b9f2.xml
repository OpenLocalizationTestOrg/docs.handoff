{"content":"---\ntitle: \"How to: Query An Assembly&#39;s Metadata with Reflection (LINQ) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: c4cdce49-b1c8-4420-b12a-9ff7e6671368\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Query An Assembly&#39;s Metadata with Reflection (LINQ) (C#)\nThe following example shows how LINQ can be used with reflection to retrieve specific metadata about methods that match a specified search criterion. In this case, the query will find the names of all the methods in the assembly that return enumerable types such as arrays.  \n  \n## Example  \n  \n```csharp  \nusing System.Reflection;  \nusing System.IO;  \nnamespace LINQReflection  \n{  \n    class ReflectionHowTO  \n    {  \n        static void Main(string[] args)  \n        {  \n            Assembly assembly = Assembly.Load(\"System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken= b77a5c561934e089\");  \n            var pubTypesQuery = from type in assembly.GetTypes()  \n                        where type.IsPublic  \n                            from method in type.GetMethods()  \n                            where method.ReturnType.IsArray == true   \n                                || ( method.ReturnType.GetInterface(  \n                                    typeof(System.Collections.Generic.IEnumerable<>).FullName ) != null  \n                                && method.ReturnType.FullName != \"System.String\" )  \n                            group method.ToString() by type.ToString();  \n  \n            foreach (var groupOfMethods in pubTypesQuery)  \n            {  \n                Console.WriteLine(\"Type: {0}\", groupOfMethods.Key);  \n                foreach (var method in groupOfMethods)  \n                {  \n                    Console.WriteLine(\"  {0}\", method);  \n                }  \n            }  \n  \n            Console.WriteLine(\"Press any key to exit\");  \n            Console.ReadKey();  \n        }  \n    }    \n}  \n```  \n  \n The example uses the <xref:System.Reflection.Assembly.GetTypes%2A> method to return an array of types in the specified assembly. The [where](../../../../csharp/language-reference/keywords/where-clause.md) filter is applied so that only public types are returned. For each public type, a subquery is generated by using the <xref:System.Reflection.MethodInfo> array that is returned from the <xref:System.Type.GetMethods%2A> call. These results are filtered to return only those methods whose return type is an array or else a type that implements <xref:System.Collections.Generic.IEnumerable%601>. Finally, these results are grouped by using the type name as a key.  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces.  \n  \n## See Also  \n [LINQ to Objects (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)","nodes":[{"pos":[12,97],"content":"How to: Query An Assembly&#39;s Metadata with Reflection (LINQ) (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Query An Assembly&amp;#39;s Metadata with Reflection (LINQ) (C#) | Microsoft Docs","pos":[0,85],"source":"How to: Query An Assembly&#39;s Metadata with Reflection (LINQ) (C#) | Microsoft Docs"}]},{"pos":[382,450],"content":"How to: Query An Assembly&#39;s Metadata with Reflection (LINQ) (C#)","linkify":"How to: Query An Assembly&#39;s Metadata with Reflection (LINQ) (C#)","nodes":[{"content":"How to: Query An Assembly&amp;#39;s Metadata with Reflection (LINQ) (C#)","pos":[0,68],"source":"How to: Query An Assembly&#39;s Metadata with Reflection (LINQ) (C#)"}]},{"content":"The following example shows how LINQ can be used with reflection to retrieve specific metadata about methods that match a specified search criterion.","pos":[451,600]},{"content":"In this case, the query will find the names of all the methods in the assembly that return enumerable types such as arrays.","pos":[601,724]},{"pos":[733,740],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The example uses the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetTypes%2A&gt;</ph> method to return an array of types in the specified assembly.","pos":[2090,2218],"source":"The example uses the <xref:System.Reflection.Assembly.GetTypes%2A> method to return an array of types in the specified assembly."},{"content":"The <bpt id=\"p1\">[</bpt>where<ept id=\"p1\">](../../../../csharp/language-reference/keywords/where-clause.md)</ept> filter is applied so that only public types are returned.","pos":[2219,2352],"source":" The [where](../../../../csharp/language-reference/keywords/where-clause.md) filter is applied so that only public types are returned."},{"content":"For each public type, a subquery is generated by using the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> array that is returned from the <ph id=\"ph2\">&lt;xref:System.Type.GetMethods%2A&gt;</ph> call.","pos":[2353,2518],"source":" For each public type, a subquery is generated by using the <xref:System.Reflection.MethodInfo> array that is returned from the <xref:System.Type.GetMethods%2A> call."},{"content":"These results are filtered to return only those methods whose return type is an array or else a type that implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[2519,2686],"source":" These results are filtered to return only those methods whose return type is an array or else a type that implements <xref:System.Collections.Generic.IEnumerable%601>."},{"content":"Finally, these results are grouped by using the type name as a key.","pos":[2687,2754]},{"pos":[2763,2781],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[2785,2960],"content":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and <ph id=\"ph1\">`using`</ph> directives for the System.Linq and System.IO namespaces.","source":"Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces."},{"pos":[2969,2977],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2981,3074],"content":"<bpt id=\"p1\">[</bpt>LINQ to Objects (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept>","source":"[LINQ to Objects (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)"}]}