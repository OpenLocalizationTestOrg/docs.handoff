{"content":"---\ntitle: \"Customizing the Appearance of an Existing Control by Creating a ControlTemplate\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"control contract [WPF]\"\n  - \"controls [WPF], visual structure changes\"\n  - \"ControlTemplate [WPF], customizing for existing controls\"\n  - \"skinning controls [WPF]\"\n  - \"controls [WPF], appearance specified by state\"\n  - \"templates [WPF], custom for existing controls\"\nms.assetid: 678dd116-43a2-4b8c-82b5-6b826f126e31\n---\n# Customizing the Appearance of an Existing Control by Creating a ControlTemplate\n<a name=\"introduction\"></a> A <xref:System.Windows.Controls.ControlTemplate> specifies the visual structure and visual behavior of a control. You can customize the appearance of a control by giving it a new <xref:System.Windows.Controls.ControlTemplate>. When you create a <xref:System.Windows.Controls.ControlTemplate>, you replace the appearance of an existing control without changing its functionality. For example, you can make the buttons in your application round instead of the default square shape, but the button will still raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.  \n  \n This topic explains the various parts of a <xref:System.Windows.Controls.ControlTemplate>, demonstrates creating a simple <xref:System.Windows.Controls.ControlTemplate> for a <xref:System.Windows.Controls.Button>, and explains how to understand the control contract of a control so that you can customize its appearance. Because you create a <xref:System.Windows.Controls.ControlTemplate> in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)], you can change a control's appearance without writing any code. You can also use a designer, such as Microsoft Expression Blend, to create custom control templates. This topic shows examples in the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] that customize the appearance of a <xref:System.Windows.Controls.Button> and lists the complete example at the end of the topic. For more information about using Expression Blend, see [Styling a control that supports templates](https://go.microsoft.com/fwlink/?LinkId=161153).  \n  \n The following illustrations show a <xref:System.Windows.Controls.Button> that uses the <xref:System.Windows.Controls.ControlTemplate> that is created in this topic.  \n  \n ![A button with a custom control template.](./media/ndp-buttonnormal.png \"NDP_ButtonNormal\")  \nA button that uses a custom control template  \n  \n ![A button with a red border.](./media/ndp-buttonmouseover.png \"NDP_ButtonMouseOver\")  \nA button that uses a custom control template and has the mouse pointer over it  \n\n<a name=\"prerequisites\"></a>   \n## Prerequisites  \n This topic assumes that you understand how to create and use controls and styles as discussed in [Controls](index.md). The concepts discussed in this topic apply to elements that inherit from the <xref:System.Windows.Controls.Control> class, except for the <xref:System.Windows.Controls.UserControl>. You cannot apply a <xref:System.Windows.Controls.ControlTemplate> to a <xref:System.Windows.Controls.UserControl>.  \n  \n<a name=\"when_you_should_create_a_controltemplate\"></a>   \n## When You Should Create a ControlTemplate  \n Controls have many properties, such as <xref:System.Windows.Controls.Border.Background%2A>, <xref:System.Windows.Controls.Control.Foreground%2A>, and <xref:System.Windows.Controls.Control.FontFamily%2A>, that you can set to specify different aspects of the control's appearance, but the changes that you can make by setting these properties are limited. For example, you can set the <xref:System.Windows.Controls.Control.Foreground%2A> property to blue and <xref:System.Windows.Controls.Control.FontStyle%2A> to italic on a <xref:System.Windows.Controls.CheckBox>.  \n  \n Without the ability to create a new <xref:System.Windows.Controls.ControlTemplate> for controls, all controls in every [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]-based application would have the same general appearance, which would limit the ability to create an application with a custom look and feel. By default, every <xref:System.Windows.Controls.CheckBox> has similar characteristics. For example, the content of the <xref:System.Windows.Controls.CheckBox> is always to the right of the selection indicator, and the check mark is always used to indicate that the <xref:System.Windows.Controls.CheckBox> is selected.  \n  \n You create a <xref:System.Windows.Controls.ControlTemplate> when you want to customize the control's appearance beyond what setting the other properties on the control will do. In the example of the <xref:System.Windows.Controls.CheckBox>, suppose that you want the content of the check box to be above the selection indicator and you want an X to indicate that the <xref:System.Windows.Controls.CheckBox> is selected. You specify these changes in the <xref:System.Windows.Controls.ControlTemplate> of the <xref:System.Windows.Controls.CheckBox>.  \n  \n The following illustration shows a <xref:System.Windows.Controls.CheckBox> that uses a default <xref:System.Windows.Controls.ControlTemplate>.  \n  \n ![A checkbox with the default control template.](./media/ndp-checkboxdefault.png \"NDP_CheckBoxDefault\")  \nA CheckBox that uses the default control template  \n  \n The following illustration shows a <xref:System.Windows.Controls.CheckBox> that uses a custom <xref:System.Windows.Controls.ControlTemplate> to place the content of the <xref:System.Windows.Controls.CheckBox> above the selection indicator and displays an X when the <xref:System.Windows.Controls.CheckBox> is selected.  \n  \n ![A checkbox with a custom control template.](./media/ndp-checkboxcustom.png \"NDP_CheckBoxCustom\")  \nA CheckBox that uses a custom control template  \n  \n The <xref:System.Windows.Controls.ControlTemplate> for the <xref:System.Windows.Controls.CheckBox> in this sample is relatively complex, so this topic uses a simpler example of creating a <xref:System.Windows.Controls.ControlTemplate> for a <xref:System.Windows.Controls.Button>.  \n  \n<a name=\"changing_the_visual_structure_of_a_control\"></a>   \n## Changing the Visual Structure of a Control  \n In [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], a control is often a composite <xref:System.Windows.FrameworkElement> objects. When you create a <xref:System.Windows.Controls.ControlTemplate>, you combine <xref:System.Windows.FrameworkElement> objects to build a single control. A <xref:System.Windows.Controls.ControlTemplate> must have only one <xref:System.Windows.FrameworkElement> as its root element. The root element usually contains other <xref:System.Windows.FrameworkElement> objects. The combination of objects makes up the control's visual structure.  \n  \n The following example creates a custom <xref:System.Windows.Controls.ControlTemplate> for the <xref:System.Windows.Controls.Button>. The <xref:System.Windows.Controls.ControlTemplate> creates the visual structure of the <xref:System.Windows.Controls.Button>. This example does not change the button's appearance when you move the mouse pointer over it or click it. Changing the button's appearance when it is in a different state is discussed later in this topic.  \n  \n In this example, the visual structure consists of the following parts:  \n  \n-   A <xref:System.Windows.Controls.Border> named `RootElement` that serves as the template's root <xref:System.Windows.FrameworkElement>.  \n  \n-   A <xref:System.Windows.Controls.Grid> that is a child of `RootElement`.  \n  \n-   A <xref:System.Windows.Controls.ContentPresenter> that displays the button's content. The <xref:System.Windows.Controls.ContentPresenter> enables any type of object to be displayed.  \n  \n [!code-xaml[VSMButtonTemplate#BasicTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#basictemplate)]  \n  \n### Preserving the Functionality of a Control's Properties by Using TemplateBinding  \n When you create a new <xref:System.Windows.Controls.ControlTemplate>, you still might want to use the public properties to change the control's appearance. The [TemplateBinding](../advanced/templatebinding-markup-extension.md) markup extension binds a property of an element that is in the <xref:System.Windows.Controls.ControlTemplate> to a public property that is defined by the control. When you use [TemplateBinding](../advanced/templatebinding-markup-extension.md), you enable properties on the control to act as parameters to the template. That is, when a property on a control is set, that value is passed on to the element that has the [TemplateBinding](../advanced/templatebinding-markup-extension.md) on it.  \n  \n The following example repeats the part of the preceding example that uses the [TemplateBinding](../advanced/templatebinding-markup-extension.md) markup extension to bind properties of elements that are in the <xref:System.Windows.Controls.ControlTemplate> to public properties that are defined by the button.  \n  \n [!code-xaml[VSMButtonTemplate#TemplateBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#templatebinding)]  \n  \n In this example, the <xref:System.Windows.Controls.Grid> has its <xref:System.Windows.Controls.Panel.Background%2A?displayProperty=nameWithType> property template bound to <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType>. Because <xref:System.Windows.Controls.Panel.Background%2A?displayProperty=nameWithType> is template bound, you can create multiple buttons that use the same <xref:System.Windows.Controls.ControlTemplate> and set the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> to different values on each button. If <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> was not template bound to a property of an element in the <xref:System.Windows.Controls.ControlTemplate>, setting the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> of a button would have no impact on the button's appearance.  \n  \n Note that the names of the two properties do not need to be identical. In the preceding example, the <xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Controls.Button> is template bound to the <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Controls.ContentPresenter>. This enables the content of the button to be positioned horizontally. <xref:System.Windows.Controls.ContentPresenter> does not have a property named `HorizontalContentAlignment`, but <xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A?displayProperty=nameWithType> can be bound to <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A?displayProperty=nameWithType>. When you template bind a property, be sure that the target and source properties are the same type.  \n  \n The <xref:System.Windows.Controls.Control> class defines several properties that must be used by the control template to have an effect on the control when they are set. How the <xref:System.Windows.Controls.ControlTemplate> uses the property depends on the property. The <xref:System.Windows.Controls.ControlTemplate> must use the property in one of the following ways:  \n  \n-   An element in the <xref:System.Windows.Controls.ControlTemplate> template binds to the property.  \n  \n-   An element in the <xref:System.Windows.Controls.ControlTemplate> inherits the property from a parent <xref:System.Windows.FrameworkElement>.  \n  \n The following table lists the visual properties inherited by a control from the <xref:System.Windows.Controls.Control> class. It also indicates whether the default control template of a control uses the inherited property value or if it must be template bound.  \n  \n|Property|Usage method|  \n|--------------|------------------|  \n|<xref:System.Windows.Controls.Control.Background%2A>|Template binding|  \n|<xref:System.Windows.Controls.Control.BorderThickness%2A>|Template binding|  \n|<xref:System.Windows.Controls.Control.BorderBrush%2A>|Template binding|  \n|<xref:System.Windows.Controls.Control.FontFamily%2A>|Property inheritance or template binding|  \n|<xref:System.Windows.Controls.Control.FontSize%2A>|Property inheritance or template binding|  \n|<xref:System.Windows.Controls.Control.FontStretch%2A>|Property inheritance or template binding|  \n|<xref:System.Windows.Controls.Control.FontWeight%2A>|Property inheritance or template binding|  \n|<xref:System.Windows.Controls.Control.Foreground%2A>|Property inheritance or template binding|  \n|<xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A>|Template binding|  \n|<xref:System.Windows.Controls.Control.Padding%2A>|Template binding|  \n|<xref:System.Windows.Controls.Control.VerticalContentAlignment%2A>|Template binding|  \n  \n The table lists only the visual properties inherited from the <xref:System.Windows.Controls.Control> class. Apart from the properties listed in the table, a control may also inherit the <xref:System.Windows.FrameworkElement.DataContext%2A>, <xref:System.Windows.FrameworkElement.Language%2A>, and <xref:System.Windows.Controls.TextBlock.TextDecorations%2A> properties from the parent framework element.  \n  \n Also, if the <xref:System.Windows.Controls.ContentPresenter> is in the <xref:System.Windows.Controls.ControlTemplate> of a <xref:System.Windows.Controls.ContentControl>, the <xref:System.Windows.Controls.ContentPresenter> will automatically bind to the <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> and <xref:System.Windows.Controls.ContentControl.Content%2A> properties. Likewise, an <xref:System.Windows.Controls.ItemsPresenter> that is in the <xref:System.Windows.Controls.ControlTemplate> of an <xref:System.Windows.Controls.ItemsControl> will automatically bind to the <xref:System.Windows.Controls.ItemsControl.Items%2A> and <xref:System.Windows.Controls.ItemsPresenter> properties.  \n  \n The following example creates two buttons that use the <xref:System.Windows.Controls.ControlTemplate> defined in the preceding example. The example sets the <xref:System.Windows.Controls.Control.Background%2A>, <xref:System.Windows.Controls.Control.Foreground%2A>, and <xref:System.Windows.Controls.Control.FontSize%2A> properties on each button. Setting the <xref:System.Windows.Controls.Control.Background%2A> property has an effect because it is template bound in the <xref:System.Windows.Controls.ControlTemplate>. Even though the <xref:System.Windows.Controls.Control.Foreground%2A> and <xref:System.Windows.Controls.Control.FontSize%2A> properties are not template bound, setting them has an effect because their values are inherited.  \n  \n [!code-xaml[VSMButtonTemplate#ButtonDeclaration](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#buttondeclaration)]  \n  \n The preceding example produces output that is similar to the following illustration.  \n  \n ![Two buttons, one blue and one purple.](./media/ndp-buttontwo.png \"NDP_ButtonTwo\")  \nTwo buttons with different background colors  \n  \n<a name=\"changing_the_appearance_of_a_control_depending_on_its_state\"></a>   \n## Changing the Appearance of a Control Depending on Its State  \n The difference between a button with its default appearance and the button in the preceding example is that the default button subtly changes when it is in different states. For example, the default button's appearance changes when the button is pressed, or when the mouse pointer is over the button. Although the <xref:System.Windows.Controls.ControlTemplate> does not change the functionality of a control, it does change the control's visual behavior. A visual behavior describes the control appearance when it is in a certain state. To understand the difference between the functionality and visual behavior of a control, consider the button example. The button's functionality is to raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when it is clicked, but the button's visual behavior is to change its appearance when it is pointed to or pressed.  \n  \n You use <xref:System.Windows.VisualState> objects to specify the appearance of a control when it is in a certain state. A <xref:System.Windows.VisualState> contains a <xref:System.Windows.Media.Animation.Storyboard> that changes the appearance of the elements that are in the <xref:System.Windows.Controls.ControlTemplate>. You do not have to write any code to make this occur because the control's logic changes state by using the <xref:System.Windows.VisualStateManager>. When the control enters the state that is specified by the <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> property, the <xref:System.Windows.Media.Animation.Storyboard> begins. When the control exits the state, the <xref:System.Windows.Media.Animation.Storyboard> stops.  \n  \n The following example shows the <xref:System.Windows.VisualState> that changes the appearance of a <xref:System.Windows.Controls.Button> when the mouse pointer is over it. The <xref:System.Windows.Media.Animation.Storyboard> changes the button's border color by changing the color of the `BorderBrush`. If you refer to the <xref:System.Windows.Controls.ControlTemplate> example at the beginning of this topic, you will recall that `BorderBrush` is the name of the <xref:System.Windows.Media.SolidColorBrush> that is assigned to the <xref:System.Windows.Controls.Border.Background%2A> of the <xref:System.Windows.Controls.Border>.  \n  \n [!code-xaml[VSMButtonTemplate#4](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#4)]  \n  \n The control is responsible for defining the states as part of its control contract, which is discussed in detail in [Customizing Other Controls by Understanding the Control Contract](#customizing_other_controls_by_understanding_the_control_contract) later in this topic. The following table lists the states that are specified for the <xref:System.Windows.Controls.Button>.  \n  \n|VisualState Name|VisualStateGroup Name|Description|  \n|----------------------|---------------------------|-----------------|  \n|Normal|CommonStates|The default state.|  \n|MouseOver|CommonStates|The mouse pointer is positioned over the control.|  \n|Pressed|CommonStates|The control is pressed.|  \n|Disabled|CommonStates|The control is disabled.|  \n|Focused|FocusStates|The control has focus.|  \n|Unfocused|FocusStates|The control does not have focus.|  \n  \n The <xref:System.Windows.Controls.Button> defines two state groups: the `CommonStates` group contains the `Normal`, `MouseOver`, `Pressed`, and `Disabled` states. The `FocusStates` group contains the `Focused` and `Unfocused` states. States in the same state group are mutually exclusive. The control is always in exactly one state per group. For example, a <xref:System.Windows.Controls.Button> can have focus even when the mouse pointer is not over it, so a <xref:System.Windows.Controls.Button> in the `Focused` state can be in the `MouseOver`, `Pressed`, or `Normal` state.  \n  \n You add <xref:System.Windows.VisualState> objects to <xref:System.Windows.VisualStateGroup> objects. You add <xref:System.Windows.VisualStateGroup> objects to the <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> attached property. The following example defines the <xref:System.Windows.VisualState> objects for the `Normal`, `MouseOver`, and `Pressed` states, which are all in the `CommonStates` group. The <xref:System.Windows.VisualState.Name%2A> of each <xref:System.Windows.VisualState> matches the name in the preceding table. The `Disabled` state and the states in the `FocusStates` group are omitted to keep the example short, but they are included in the entire example at the end of this topic.  \n  \n> [!NOTE]\n>  Be sure to set the <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> attached property on the root <xref:System.Windows.FrameworkElement> of the <xref:System.Windows.Controls.ControlTemplate>.  \n  \n [!code-xaml[VSMButtonTemplate#VisualStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#visualstates)]  \n  \n The preceding example produces output that is similar to the following illustrations.  \n  \n ![A button with a custom control template.](./media/ndp-buttonnormal.png \"NDP_ButtonNormal\")  \nA button that uses a custom control template in the normal state  \n  \n ![A button with a red border.](./media/ndp-buttonmouseover.png \"NDP_ButtonMouseOver\")  \nA button that uses a custom control template in the mouse over state  \n  \n ![The border is transparent on a pressed button.](./media/ndp-buttonpressed.png \"NDP_ButtonPressed\")  \nA button that uses a custom control template in the pressed state  \n  \n To find the visual states for controls that are included with [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], see [Control Styles and Templates](control-styles-and-templates.md).  \n  \n<a name=\"specifying_the_behavior_of_a_control_when_it_transitions_between_states\"></a>   \n## Specifying the Behavior of a Control When It Transitions Between States  \n In the preceding example, the appearance of the button also changes when the user clicks it, but unless the button is pressed for a full second, the user does not see the effect. By default, the animation takes one second to occur. Because users are likely to click and release a button in much less time, the visual feedback will not be effective if you leave the <xref:System.Windows.Controls.ControlTemplate> in its default state.  \n  \n You can specify the amount of time that it takes an animation to occur to smoothly transition a control from one state to another by adding <xref:System.Windows.VisualTransition> objects to the <xref:System.Windows.Controls.ControlTemplate>. When you create a <xref:System.Windows.VisualTransition>, you specify one or more of the following:  \n  \n-   The time it takes for a transition between states to occur.  \n  \n-   Additional changes in the control's appearance that occur at the time of the transition.  \n  \n-   Which states the <xref:System.Windows.VisualTransition> is applied to.  \n  \n### Specifying the Duration of a Transition  \n You can specify how long a transition takes by setting the <xref:System.Windows.VisualTransition.GeneratedDuration%2A> property. The preceding example has a <xref:System.Windows.VisualState> that specifies that the button's border becomes transparent when the button is pressed, but the animation takes too long to be noticeable if the button is quickly pressed and released. You can use a <xref:System.Windows.VisualTransition> to specify the amount of time it takes the control to transition into the pressed state. The following example specifies that the control takes one hundredth of a second to go into the pressed state.  \n  \n [!code-xaml[VSMButtonTemplate#PressedTransition](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#pressedtransition)]  \n  \n### Specifying Changes to the Control's Appearance During a Transition  \n The <xref:System.Windows.VisualTransition> contains a <xref:System.Windows.Media.Animation.Storyboard> that begins when the control transitions between states. For example, you can specify that a certain animation occurs when the control transitions from the `MouseOver` state to the `Normal` State. The following example creates a <xref:System.Windows.VisualTransition> that specifies that when the user moves the mouse pointer away from the button, the button's border changes to blue, then to yellow, then to black in 1.5 seconds.  \n  \n [!code-xaml[VSMButtonTemplate#8](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#8)]  \n  \n### Specifying When a VisualTransition Is Applied  \n A <xref:System.Windows.VisualTransition> can be restricted to apply to only certain states, or it can be applied any time the control transitions between states. In the preceding example, the <xref:System.Windows.VisualTransition> is applied when the control goes from the `MouseOver` state to the `Normal` state; in the example before that, the <xref:System.Windows.VisualTransition> is applied when the control goes into the `Pressed` state. You restrict when a <xref:System.Windows.VisualTransition> is applied by setting the <xref:System.Windows.VisualTransition.To%2A> and <xref:System.Windows.VisualTransition.From%2A> properties. The following table describes the levels of restriction from most restrictive to least restrictive.  \n  \n|Type of restriction|Value of From|Value of To|  \n|-------------------------|-------------------|-----------------|  \n|From a specified state to another specified state|The name of a <xref:System.Windows.VisualState>|The name of a <xref:System.Windows.VisualState>|  \n|From any state to a specified state|Not set|The name of a <xref:System.Windows.VisualState>|  \n|From a specified state to any state|The name of a <xref:System.Windows.VisualState>|Not set|  \n|From any state to any other state|Not set|Not set|  \n  \n You can have multiple <xref:System.Windows.VisualTransition> objects in a <xref:System.Windows.VisualStateGroup> that refer to the same state, but they will be used in the order that the previous table specifies. In the following example, there are two <xref:System.Windows.VisualTransition> objects. When the control transitions from the `Pressed` state to the `MouseOver` state, the <xref:System.Windows.VisualTransition> that has both <xref:System.Windows.VisualTransition.From%2A> and <xref:System.Windows.VisualTransition.To%2A> set is used. When the control transitions from a state that is not `Pressed` to the `MouseOver` state, the other state is used.  \n  \n [!code-xaml[VSMButtonTemplate#7](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#7)]  \n  \n The <xref:System.Windows.VisualStateGroup> has a <xref:System.Windows.VisualStateGroup.Transitions%2A> property that contains the <xref:System.Windows.VisualTransition> objects that apply to the <xref:System.Windows.VisualState> objects in the <xref:System.Windows.VisualStateGroup>. As the <xref:System.Windows.Controls.ControlTemplate> author, you are free to include any <xref:System.Windows.VisualTransition> you want. However, if the <xref:System.Windows.VisualTransition.To%2A> and <xref:System.Windows.VisualTransition.From%2A> properties are set to state names that are not in the <xref:System.Windows.VisualStateGroup>, the <xref:System.Windows.VisualTransition> is ignored.  \n  \n The following example shows the <xref:System.Windows.VisualStateGroup> for the `CommonStates`. The example defines a <xref:System.Windows.VisualTransition> for each of the button's following transitions.  \n  \n-   To the `Pressed` state.  \n  \n-   To the `MouseOver` state.  \n  \n-   From the `Pressed` state to the `MouseOver` state.  \n  \n-   From the `MouseOver` state to the `Normal` state.  \n  \n [!code-xaml[VSMButtonTemplate#VisualTransitions](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#visualtransitions)]  \n  \n<a name=\"customizing_other_controls_by_understanding_the_control_contract\"></a>   \n## Customizing Other Controls by Understanding the Control Contract  \n A control that uses a <xref:System.Windows.Controls.ControlTemplate> to specify its visual structure (by using <xref:System.Windows.FrameworkElement> objects) and visual behavior (by using <xref:System.Windows.VisualState> objects) uses the parts control model. Many of the controls that are included with [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] 4 use this model. The parts that a <xref:System.Windows.Controls.ControlTemplate> author needs to be aware of are communicated through the control contract. When you understand the parts of a control contract, you can customize the appearance of any control that uses the parts control model.  \n  \n A control contract has three elements:  \n  \n-   The visual elements that the control's logic uses.  \n  \n-   The states of the control and the group each state belongs to.  \n  \n-   The public properties that visually affect the control.  \n  \n### Visual Elements in the Control Contract  \n Sometimes a control's logic interacts with a <xref:System.Windows.FrameworkElement> that is in the <xref:System.Windows.Controls.ControlTemplate>. For example, the control might handle an event of one of its elements. When a control expects to find a particular <xref:System.Windows.FrameworkElement> in the <xref:System.Windows.Controls.ControlTemplate>, it must convey that information to the <xref:System.Windows.Controls.ControlTemplate> author. The control uses the <xref:System.Windows.TemplatePartAttribute> to convey the type of element that is expected, and what the name of the element should be. The <xref:System.Windows.Controls.Button> does not have <xref:System.Windows.FrameworkElement> parts in its control contract, but other controls, such as the <xref:System.Windows.Controls.ComboBox>, do.  \n  \n The following example shows the <xref:System.Windows.TemplatePartAttribute> objects that are specified on the <xref:System.Windows.Controls.ComboBox> class. The logic of <xref:System.Windows.Controls.ComboBox> expects to find a <xref:System.Windows.Controls.TextBox> named `PART_EditableTextBox` and a <xref:System.Windows.Controls.Primitives.Popup> named `PART_Popup` in its <xref:System.Windows.Controls.ControlTemplate>.  \n  \n [!code-csharp[VSMButtonTemplate#ComboBoxContract](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/controlcontracts.cs#comboboxcontract)]\n [!code-vb[VSMButtonTemplate#ComboBoxContract](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmbuttontemplate/visualbasic/window1.xaml.vb#comboboxcontract)]  \n  \n The following example shows a simplified <xref:System.Windows.Controls.ControlTemplate> for the <xref:System.Windows.Controls.ComboBox> that includes the elements that are specified by the <xref:System.Windows.TemplatePartAttribute> objects on the <xref:System.Windows.Controls.ComboBox> class.  \n  \n [!code-xaml[VSMButtonTemplate#ComboBoxTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#comboboxtemplate)]  \n  \n### States in the Control Contract  \n The states of a control are also a part of the control contract. The example of creating a <xref:System.Windows.Controls.ControlTemplate> for a <xref:System.Windows.Controls.Button> shows how to specify the appearance of a <xref:System.Windows.Controls.Button> depending on its states. You create a <xref:System.Windows.VisualState> for each specified state and put all <xref:System.Windows.VisualState> objects that share a <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A> in a <xref:System.Windows.VisualStateGroup>, as described in [Changing the Appearance of a Control Depending on Its State](#changing_the_appearance_of_a_control_depending_on_its_state) earlier in this topic. Third-party controls should specify states by using the <xref:System.Windows.TemplateVisualStateAttribute>, which enables designer tools, such as Expression Blend, to expose the control's states for authoring control templates.  \n  \n To find the control contract for controls that are included with [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], see [Control Styles and Templates](control-styles-and-templates.md).  \n  \n### Properties in the Control Contract  \n The public properties that visually affect the control are also included in the control contract. You can set these properties to change the appearance of the control without creating a new <xref:System.Windows.Controls.ControlTemplate>. You can also use the [TemplateBinding](../advanced/templatebinding-markup-extension.md) markup extension to bind properties of elements that are in the <xref:System.Windows.Controls.ControlTemplate> to public properties that are defined by the <xref:System.Windows.Controls.Button>.  \n  \n The following example shows the control contract for the button.  \n  \n [!code-csharp[VSMButtonTemplate#ButtonContract](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/controlcontracts.cs#buttoncontract)]\n [!code-vb[VSMButtonTemplate#ButtonContract](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmbuttontemplate/visualbasic/window1.xaml.vb#buttoncontract)]  \n  \n When creating a <xref:System.Windows.Controls.ControlTemplate>, it is often easiest to begin with an existing <xref:System.Windows.Controls.ControlTemplate> and make changes to it. You can do one of the following to change an existing <xref:System.Windows.Controls.ControlTemplate>:  \n  \n-   Use a designer, such as Expression Blend, which provides a graphical user interface for creating control templates. For more information, see [Styling a control that supports templates](https://go.microsoft.com/fwlink/?LinkId=161153).  \n  \n-   Get the default <xref:System.Windows.Controls.ControlTemplate> and edit it. To find the default control templates that are included with [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], see [Default WPF Themes](https://go.microsoft.com/fwlink/?LinkID=158252).  \n  \n<a name=\"complete_example\"></a>   \n## Complete Example  \n The following example shows the complete <xref:System.Windows.Controls.Button><xref:System.Windows.Controls.ControlTemplate> that is discussed in this topic.  \n  \n [!code-xaml[VSMButtonTemplate#3](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#3)]  \n  \n## See also\n\n- [Styling and Templating](styling-and-templating.md)\n","nodes":[{"pos":[4,492],"embed":true,"restype":"x-metadata","content":"title: \"Customizing the Appearance of an Existing Control by Creating a ControlTemplate\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"control contract [WPF]\"\n  - \"controls [WPF], visual structure changes\"\n  - \"ControlTemplate [WPF], customizing for existing controls\"\n  - \"skinning controls [WPF]\"\n  - \"controls [WPF], appearance specified by state\"\n  - \"templates [WPF], custom for existing controls\"\nms.assetid: 678dd116-43a2-4b8c-82b5-6b826f126e31","nodes":[{"content":"Customizing the Appearance of an Existing Control by Creating a ControlTemplate","nodes":[{"pos":[0,79],"content":"Customizing the Appearance of an Existing Control by Creating a ControlTemplate","nodes":[{"content":"Customizing the Appearance of an Existing Control by Creating a ControlTemplate","pos":[0,79]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[499,578],"content":"Customizing the Appearance of an Existing Control by Creating a ControlTemplate","linkify":"Customizing the Appearance of an Existing Control by Creating a ControlTemplate","nodes":[{"content":"Customizing the Appearance of an Existing Control by Creating a ControlTemplate","pos":[0,79]}]},{"content":"<bpt id=\"p1\">&lt;a name=\"introduction\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept> A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> specifies the visual structure and visual behavior of a control.","pos":[579,720],"source":"<a name=\"introduction\"></a> A <xref:System.Windows.Controls.ControlTemplate> specifies the visual structure and visual behavior of a control."},{"content":"You can customize the appearance of a control by giving it a new <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.","pos":[721,833],"source":" You can customize the appearance of a control by giving it a new <xref:System.Windows.Controls.ControlTemplate>."},{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, you replace the appearance of an existing control without changing its functionality.","pos":[834,985],"source":" When you create a <xref:System.Windows.Controls.ControlTemplate>, you replace the appearance of an existing control without changing its functionality."},{"content":"For example, you can make the buttons in your application round instead of the default square shape, but the button will still raise the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.","pos":[986,1188],"source":" For example, you can make the buttons in your application round instead of the default square shape, but the button will still raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event."},{"content":"This topic explains the various parts of a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, demonstrates creating a simple <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, and explains how to understand the control contract of a control so that you can customize its appearance.","pos":[1195,1515],"source":"This topic explains the various parts of a <xref:System.Windows.Controls.ControlTemplate>, demonstrates creating a simple <xref:System.Windows.Controls.ControlTemplate> for a <xref:System.Windows.Controls.Button>, and explains how to understand the control contract of a control so that you can customize its appearance."},{"content":"Because you create a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you can change a control's appearance without writing any code.","pos":[1516,1723],"source":" Because you create a <xref:System.Windows.Controls.ControlTemplate> in [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)], you can change a control's appearance without writing any code."},{"content":"You can also use a designer, such as Microsoft Expression Blend, to create custom control templates.","pos":[1724,1824]},{"content":"This topic shows examples in the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> that customize the appearance of a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> and lists the complete example at the end of the topic.","pos":[1825,2058],"source":" This topic shows examples in the [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] that customize the appearance of a <xref:System.Windows.Controls.Button> and lists the complete example at the end of the topic."},{"content":"For more information about using Expression Blend, see <bpt id=\"p1\">[</bpt>Styling a control that supports templates<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=161153)</ept>.","pos":[2059,2206],"source":" For more information about using Expression Blend, see [Styling a control that supports templates](https://go.microsoft.com/fwlink/?LinkId=161153)."},{"pos":[2213,2377],"content":"The following illustrations show a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> that uses the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> that is created in this topic.","source":"The following illustrations show a <xref:System.Windows.Controls.Button> that uses the <xref:System.Windows.Controls.ControlTemplate> that is created in this topic."},{"content":"<bpt id=\"p1\">![</bpt>A button with a custom control template.<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/ndp-buttonnormal.png \"</bpt>NDP_ButtonNormal<ept id=\"p2\">\")</ept>","pos":[2384,2476],"source":"![A button with a custom control template.](./media/ndp-buttonnormal.png \"NDP_ButtonNormal\")"},{"content":"A button that uses a custom control template","pos":[2479,2523]},{"content":"<bpt id=\"p1\">![</bpt>A button with a red border.<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/ndp-buttonmouseover.png \"</bpt>NDP_ButtonMouseOver<ept id=\"p2\">\")</ept>","pos":[2530,2615],"source":"![A button with a red border.](./media/ndp-buttonmouseover.png \"NDP_ButtonMouseOver\")"},{"content":"A button that uses a custom control template and has the mouse pointer over it","pos":[2618,2696]},{"pos":[2735,2748],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"content":"This topic assumes that you understand how to create and use controls and styles as discussed in <bpt id=\"p1\">[</bpt>Controls<ept id=\"p1\">](index.md)</ept>.","pos":[2752,2870],"source":"This topic assumes that you understand how to create and use controls and styles as discussed in [Controls](index.md)."},{"content":"The concepts discussed in this topic apply to elements that inherit from the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> class, except for the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>.","pos":[2871,3052],"source":" The concepts discussed in this topic apply to elements that inherit from the <xref:System.Windows.Controls.Control> class, except for the <xref:System.Windows.Controls.UserControl>."},{"content":"You cannot apply a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>.","pos":[3053,3167],"source":" You cannot apply a <xref:System.Windows.Controls.ControlTemplate> to a <xref:System.Windows.Controls.UserControl>."},{"pos":[3235,3275],"content":"When You Should Create a ControlTemplate","linkify":"When You Should Create a ControlTemplate","nodes":[{"content":"When You Should Create a ControlTemplate","pos":[0,40]}]},{"content":"Controls have many properties, such as <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Border.Background%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Control.FontFamily%2A&gt;</ph>, that you can set to specify different aspects of the control's appearance, but the changes that you can make by setting these properties are limited.","pos":[3279,3632],"source":"Controls have many properties, such as <xref:System.Windows.Controls.Border.Background%2A>, <xref:System.Windows.Controls.Control.Foreground%2A>, and <xref:System.Windows.Controls.Control.FontFamily%2A>, that you can set to specify different aspects of the control's appearance, but the changes that you can make by setting these properties are limited."},{"content":"For example, you can set the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph> property to blue and <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Control.FontStyle%2A&gt;</ph> to italic on a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>.","pos":[3633,3843],"source":" For example, you can set the <xref:System.Windows.Controls.Control.Foreground%2A> property to blue and <xref:System.Windows.Controls.Control.FontStyle%2A> to italic on a <xref:System.Windows.Controls.CheckBox>."},{"content":"Without the ability to create a new <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for controls, all controls in every <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>-based application would have the same general appearance, which would limit the ability to create an application with a custom look and feel.","pos":[3850,4192],"source":"Without the ability to create a new <xref:System.Windows.Controls.ControlTemplate> for controls, all controls in every [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]-based application would have the same general appearance, which would limit the ability to create an application with a custom look and feel."},{"content":"By default, every <ph id=\"ph1\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> has similar characteristics.","pos":[4193,4279],"source":" By default, every <xref:System.Windows.Controls.CheckBox> has similar characteristics."},{"content":"For example, the content of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> is always to the right of the selection indicator, and the check mark is always used to indicate that the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> is selected.","pos":[4280,4510],"source":" For example, the content of the <xref:System.Windows.Controls.CheckBox> is always to the right of the selection indicator, and the check mark is always used to indicate that the <xref:System.Windows.Controls.CheckBox> is selected."},{"content":"You create a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> when you want to customize the control's appearance beyond what setting the other properties on the control will do.","pos":[4517,4693],"source":"You create a <xref:System.Windows.Controls.ControlTemplate> when you want to customize the control's appearance beyond what setting the other properties on the control will do."},{"content":"In the example of the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>, suppose that you want the content of the check box to be above the selection indicator and you want an X to indicate that the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> is selected.","pos":[4694,4935],"source":" In the example of the <xref:System.Windows.Controls.CheckBox>, suppose that you want the content of the check box to be above the selection indicator and you want an X to indicate that the <xref:System.Windows.Controls.CheckBox> is selected."},{"content":"You specify these changes in the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph>.","pos":[4936,5063],"source":" You specify these changes in the <xref:System.Windows.Controls.ControlTemplate> of the <xref:System.Windows.Controls.CheckBox>."},{"pos":[5070,5212],"content":"The following illustration shows a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> that uses a default <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.","source":"The following illustration shows a <xref:System.Windows.Controls.CheckBox> that uses a default <xref:System.Windows.Controls.ControlTemplate>."},{"content":"<bpt id=\"p1\">![</bpt>A checkbox with the default control template.<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/ndp-checkboxdefault.png \"</bpt>NDP_CheckBoxDefault<ept id=\"p2\">\")</ept>","pos":[5219,5322],"source":"![A checkbox with the default control template.](./media/ndp-checkboxdefault.png \"NDP_CheckBoxDefault\")"},{"content":"A CheckBox that uses the default control template","pos":[5325,5374]},{"pos":[5381,5699],"content":"The following illustration shows a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> that uses a custom <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to place the content of the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> above the selection indicator and displays an X when the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> is selected.","source":"The following illustration shows a <xref:System.Windows.Controls.CheckBox> that uses a custom <xref:System.Windows.Controls.ControlTemplate> to place the content of the <xref:System.Windows.Controls.CheckBox> above the selection indicator and displays an X when the <xref:System.Windows.Controls.CheckBox> is selected."},{"content":"<bpt id=\"p1\">![</bpt>A checkbox with a custom control template.<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/ndp-checkboxcustom.png \"</bpt>NDP_CheckBoxCustom<ept id=\"p2\">\")</ept>","pos":[5706,5804],"source":"![A checkbox with a custom control template.](./media/ndp-checkboxcustom.png \"NDP_CheckBoxCustom\")"},{"content":"A CheckBox that uses a custom control template","pos":[5807,5853]},{"pos":[5860,6139],"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.CheckBox&gt;</ph> in this sample is relatively complex, so this topic uses a simpler example of creating a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for a <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Button&gt;</ph>.","source":"The <xref:System.Windows.Controls.ControlTemplate> for the <xref:System.Windows.Controls.CheckBox> in this sample is relatively complex, so this topic uses a simpler example of creating a <xref:System.Windows.Controls.ControlTemplate> for a <xref:System.Windows.Controls.Button>."},{"pos":[6209,6251],"content":"Changing the Visual Structure of a Control","linkify":"Changing the Visual Structure of a Control","nodes":[{"content":"Changing the Visual Structure of a Control","pos":[0,42]}]},{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, a control is often a composite <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> objects.","pos":[6255,6419],"source":"In [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], a control is often a composite <xref:System.Windows.FrameworkElement> objects."},{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, you combine <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> objects to build a single control.","pos":[6420,6571],"source":" When you create a <xref:System.Windows.Controls.ControlTemplate>, you combine <xref:System.Windows.FrameworkElement> objects to build a single control."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> must have only one <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> as its root element.","pos":[6572,6699],"source":" A <xref:System.Windows.Controls.ControlTemplate> must have only one <xref:System.Windows.FrameworkElement> as its root element."},{"content":"The root element usually contains other <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> objects.","pos":[6700,6787],"source":" The root element usually contains other <xref:System.Windows.FrameworkElement> objects."},{"content":"The combination of objects makes up the control's visual structure.","pos":[6788,6855]},{"content":"The following example creates a custom <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph>.","pos":[6862,6994],"source":"The following example creates a custom <xref:System.Windows.Controls.ControlTemplate> for the <xref:System.Windows.Controls.Button>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> creates the visual structure of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph>.","pos":[6995,7120],"source":" The <xref:System.Windows.Controls.ControlTemplate> creates the visual structure of the <xref:System.Windows.Controls.Button>."},{"content":"This example does not change the button's appearance when you move the mouse pointer over it or click it.","pos":[7121,7226]},{"content":"Changing the button's appearance when it is in a different state is discussed later in this topic.","pos":[7227,7325]},{"content":"In this example, the visual structure consists of the following parts:","pos":[7332,7402]},{"pos":[7412,7546],"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Border&gt;</ph> named <ph id=\"ph2\">`RootElement`</ph> that serves as the template's root <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.","source":"A <xref:System.Windows.Controls.Border> named `RootElement` that serves as the template's root <xref:System.Windows.FrameworkElement>."},{"pos":[7556,7627],"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Grid&gt;</ph> that is a child of <ph id=\"ph2\">`RootElement`</ph>.","source":"A <xref:System.Windows.Controls.Grid> that is a child of `RootElement`."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> that displays the button's content.","pos":[7637,7722],"source":"A <xref:System.Windows.Controls.ContentPresenter> that displays the button's content."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> enables any type of object to be displayed.","pos":[7723,7818],"source":" The <xref:System.Windows.Controls.ContentPresenter> enables any type of object to be displayed."},{"pos":[7980,8059],"content":"Preserving the Functionality of a Control's Properties by Using TemplateBinding","linkify":"Preserving the Functionality of a Control's Properties by Using TemplateBinding","nodes":[{"content":"Preserving the Functionality of a Control's Properties by Using TemplateBinding","pos":[0,79]}]},{"content":"When you create a new <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, you still might want to use the public properties to change the control's appearance.","pos":[8063,8218],"source":"When you create a new <xref:System.Windows.Controls.ControlTemplate>, you still might want to use the public properties to change the control's appearance."},{"content":"The <bpt id=\"p1\">[</bpt>TemplateBinding<ept id=\"p1\">](../advanced/templatebinding-markup-extension.md)</ept> markup extension binds a property of an element that is in the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to a public property that is defined by the control.","pos":[8219,8452],"source":" The [TemplateBinding](../advanced/templatebinding-markup-extension.md) markup extension binds a property of an element that is in the <xref:System.Windows.Controls.ControlTemplate> to a public property that is defined by the control."},{"content":"When you use <bpt id=\"p1\">[</bpt>TemplateBinding<ept id=\"p1\">](../advanced/templatebinding-markup-extension.md)</ept>, you enable properties on the control to act as parameters to the template.","pos":[8453,8608],"source":" When you use [TemplateBinding](../advanced/templatebinding-markup-extension.md), you enable properties on the control to act as parameters to the template."},{"content":"That is, when a property on a control is set, that value is passed on to the element that has the <bpt id=\"p1\">[</bpt>TemplateBinding<ept id=\"p1\">](../advanced/templatebinding-markup-extension.md)</ept> on it.","pos":[8609,8780],"source":" That is, when a property on a control is set, that value is passed on to the element that has the [TemplateBinding](../advanced/templatebinding-markup-extension.md) on it."},{"pos":[8787,9095],"content":"The following example repeats the part of the preceding example that uses the <bpt id=\"p1\">[</bpt>TemplateBinding<ept id=\"p1\">](../advanced/templatebinding-markup-extension.md)</ept> markup extension to bind properties of elements that are in the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to public properties that are defined by the button.","source":"The following example repeats the part of the preceding example that uses the [TemplateBinding](../advanced/templatebinding-markup-extension.md) markup extension to bind properties of elements that are in the <xref:System.Windows.Controls.ControlTemplate> to public properties that are defined by the button."},{"content":"In this example, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Grid&gt;</ph> has its <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Panel.Background%2A?displayProperty=nameWithType&gt;</ph> property template bound to <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType&gt;</ph>.","pos":[9258,9512],"source":"In this example, the <xref:System.Windows.Controls.Grid> has its <xref:System.Windows.Controls.Panel.Background%2A?displayProperty=nameWithType> property template bound to <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Panel.Background%2A?displayProperty=nameWithType&gt;</ph> is template bound, you can create multiple buttons that use the same <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and set the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType&gt;</ph> to different values on each button.","pos":[9513,9846],"source":" Because <xref:System.Windows.Controls.Panel.Background%2A?displayProperty=nameWithType> is template bound, you can create multiple buttons that use the same <xref:System.Windows.Controls.ControlTemplate> and set the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> to different values on each button."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType&gt;</ph> was not template bound to a property of an element in the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, setting the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType&gt;</ph> of a button would have no impact on the button's appearance.","pos":[9847,10192],"source":" If <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> was not template bound to a property of an element in the <xref:System.Windows.Controls.ControlTemplate>, setting the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> of a button would have no impact on the button's appearance."},{"content":"Note that the names of the two properties do not need to be identical.","pos":[10199,10269]},{"content":"In the preceding example, the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> is template bound to the <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph>.","pos":[10270,10632],"source":" In the preceding example, the <xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Controls.Button> is template bound to the <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Controls.ContentPresenter>."},{"content":"This enables the content of the button to be positioned horizontally.","pos":[10633,10702]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> does not have a property named <ph id=\"ph2\">`HorizontalContentAlignment`</ph>, but <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A?displayProperty=nameWithType&gt;</ph> can be bound to <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A?displayProperty=nameWithType&gt;</ph>.","pos":[10703,11021],"source":"<xref:System.Windows.Controls.ContentPresenter> does not have a property named `HorizontalContentAlignment`, but <xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A?displayProperty=nameWithType> can be bound to <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A?displayProperty=nameWithType>."},{"content":"When you template bind a property, be sure that the target and source properties are the same type.","pos":[11022,11121]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> class defines several properties that must be used by the control template to have an effect on the control when they are set.","pos":[11128,11297],"source":"The <xref:System.Windows.Controls.Control> class defines several properties that must be used by the control template to have an effect on the control when they are set."},{"content":"How the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> uses the property depends on the property.","pos":[11298,11395],"source":" How the <xref:System.Windows.Controls.ControlTemplate> uses the property depends on the property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> must use the property in one of the following ways:","pos":[11396,11498],"source":" The <xref:System.Windows.Controls.ControlTemplate> must use the property in one of the following ways:"},{"pos":[11508,11604],"content":"An element in the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> template binds to the property.","source":"An element in the <xref:System.Windows.Controls.ControlTemplate> template binds to the property."},{"pos":[11614,11754],"content":"An element in the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> inherits the property from a parent <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.","source":"An element in the <xref:System.Windows.Controls.ControlTemplate> inherits the property from a parent <xref:System.Windows.FrameworkElement>."},{"content":"The following table lists the visual properties inherited by a control from the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> class.","pos":[11761,11886],"source":"The following table lists the visual properties inherited by a control from the <xref:System.Windows.Controls.Control> class."},{"content":"It also indicates whether the default control template of a control uses the inherited property value or if it must be template bound.","pos":[11887,12021]},{"content":"Property","pos":[12028,12036]},{"content":"Usage method","pos":[12037,12049]},{"content":"Template binding","pos":[12145,12161]},{"content":"Template binding","pos":[12224,12240]},{"content":"Template binding","pos":[12299,12315]},{"content":"Property inheritance or template binding","pos":[12373,12413]},{"content":"Property inheritance or template binding","pos":[12469,12509]},{"content":"Property inheritance or template binding","pos":[12568,12608]},{"content":"Property inheritance or template binding","pos":[12666,12706]},{"content":"Property inheritance or template binding","pos":[12764,12804]},{"content":"Template binding","pos":[12878,12894]},{"content":"Template binding","pos":[12949,12965]},{"content":"Template binding","pos":[13037,13053]},{"content":"The table lists only the visual properties inherited from the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> class.","pos":[13061,13168],"source":"The table lists only the visual properties inherited from the <xref:System.Windows.Controls.Control> class."},{"content":"Apart from the properties listed in the table, a control may also inherit the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Language%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Controls.TextBlock.TextDecorations%2A&gt;</ph> properties from the parent framework element.","pos":[13169,13463],"source":" Apart from the properties listed in the table, a control may also inherit the <xref:System.Windows.FrameworkElement.DataContext%2A>, <xref:System.Windows.FrameworkElement.Language%2A>, and <xref:System.Windows.Controls.TextBlock.TextDecorations%2A> properties from the parent framework element."},{"content":"Also, if the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> is in the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> of a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> will automatically bind to the <ph id=\"ph5\">&lt;xref:System.Windows.Controls.ContentControl.ContentTemplate%2A&gt;</ph> and <ph id=\"ph6\">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> properties.","pos":[13470,13860],"source":"Also, if the <xref:System.Windows.Controls.ContentPresenter> is in the <xref:System.Windows.Controls.ControlTemplate> of a <xref:System.Windows.Controls.ContentControl>, the <xref:System.Windows.Controls.ContentPresenter> will automatically bind to the <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> and <xref:System.Windows.Controls.ContentControl.Content%2A> properties."},{"content":"Likewise, an <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ItemsPresenter&gt;</ph> that is in the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> of an <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> will automatically bind to the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Controls.ItemsPresenter&gt;</ph> properties.","pos":[13861,14177],"source":" Likewise, an <xref:System.Windows.Controls.ItemsPresenter> that is in the <xref:System.Windows.Controls.ControlTemplate> of an <xref:System.Windows.Controls.ItemsControl> will automatically bind to the <xref:System.Windows.Controls.ItemsControl.Items%2A> and <xref:System.Windows.Controls.ItemsPresenter> properties."},{"content":"The following example creates two buttons that use the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> defined in the preceding example.","pos":[14184,14319],"source":"The following example creates two buttons that use the <xref:System.Windows.Controls.ControlTemplate> defined in the preceding example."},{"content":"The example sets the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Control.FontSize%2A&gt;</ph> properties on each button.","pos":[14320,14530],"source":" The example sets the <xref:System.Windows.Controls.Control.Background%2A>, <xref:System.Windows.Controls.Control.Foreground%2A>, and <xref:System.Windows.Controls.Control.FontSize%2A> properties on each button."},{"content":"Setting the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property has an effect because it is template bound in the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.","pos":[14531,14702],"source":" Setting the <xref:System.Windows.Controls.Control.Background%2A> property has an effect because it is template bound in the <xref:System.Windows.Controls.ControlTemplate>."},{"content":"Even though the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Control.FontSize%2A&gt;</ph> properties are not template bound, setting them has an effect because their values are inherited.","pos":[14703,14924],"source":" Even though the <xref:System.Windows.Controls.Control.Foreground%2A> and <xref:System.Windows.Controls.Control.FontSize%2A> properties are not template bound, setting them has an effect because their values are inherited."},{"content":"The preceding example produces output that is similar to the following illustration.","pos":[15091,15175]},{"content":"<bpt id=\"p1\">![</bpt>Two buttons, one blue and one purple.<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/ndp-buttontwo.png \"</bpt>NDP_ButtonTwo<ept id=\"p2\">\")</ept>","pos":[15182,15265],"source":"![Two buttons, one blue and one purple.](./media/ndp-buttontwo.png \"NDP_ButtonTwo\")"},{"content":"Two buttons with different background colors","pos":[15268,15312]},{"pos":[15399,15458],"content":"Changing the Appearance of a Control Depending on Its State","linkify":"Changing the Appearance of a Control Depending on Its State","nodes":[{"content":"Changing the Appearance of a Control Depending on Its State","pos":[0,59]}]},{"content":"The difference between a button with its default appearance and the button in the preceding example is that the default button subtly changes when it is in different states.","pos":[15462,15635]},{"content":"For example, the default button's appearance changes when the button is pressed, or when the mouse pointer is over the button.","pos":[15636,15762]},{"content":"Although the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> does not change the functionality of a control, it does change the control's visual behavior.","pos":[15763,15916],"source":" Although the <xref:System.Windows.Controls.ControlTemplate> does not change the functionality of a control, it does change the control's visual behavior."},{"content":"A visual behavior describes the control appearance when it is in a certain state.","pos":[15917,15998]},{"content":"To understand the difference between the functionality and visual behavior of a control, consider the button example.","pos":[15999,16116]},{"content":"The button's functionality is to raise the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event when it is clicked, but the button's visual behavior is to change its appearance when it is pointed to or pressed.","pos":[16117,16339],"source":" The button's functionality is to raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when it is clicked, but the button's visual behavior is to change its appearance when it is pointed to or pressed."},{"content":"You use <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph> objects to specify the appearance of a control when it is in a certain state.","pos":[16346,16465],"source":"You use <xref:System.Windows.VisualState> objects to specify the appearance of a control when it is in a certain state."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph> contains a <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> that changes the appearance of the elements that are in the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.","pos":[16466,16669],"source":" A <xref:System.Windows.VisualState> contains a <xref:System.Windows.Media.Animation.Storyboard> that changes the appearance of the elements that are in the <xref:System.Windows.Controls.ControlTemplate>."},{"content":"You do not have to write any code to make this occur because the control's logic changes state by using the <ph id=\"ph1\">&lt;xref:System.Windows.VisualStateManager&gt;</ph>.","pos":[16670,16819],"source":" You do not have to write any code to make this occur because the control's logic changes state by using the <xref:System.Windows.VisualStateManager>."},{"content":"When the control enters the state that is specified by the <ph id=\"ph1\">&lt;xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType&gt;</ph> property, the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> begins.","pos":[16820,17020],"source":" When the control enters the state that is specified by the <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> property, the <xref:System.Windows.Media.Animation.Storyboard> begins."},{"content":"When the control exits the state, the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> stops.","pos":[17021,17114],"source":" When the control exits the state, the <xref:System.Windows.Media.Animation.Storyboard> stops."},{"content":"The following example shows the <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph> that changes the appearance of a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> when the mouse pointer is over it.","pos":[17121,17292],"source":"The following example shows the <xref:System.Windows.VisualState> that changes the appearance of a <xref:System.Windows.Controls.Button> when the mouse pointer is over it."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> changes the button's border color by changing the color of the <ph id=\"ph2\">`BorderBrush`</ph>.","pos":[17293,17423],"source":" The <xref:System.Windows.Media.Animation.Storyboard> changes the button's border color by changing the color of the `BorderBrush`."},{"content":"If you refer to the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> example at the beginning of this topic, you will recall that <ph id=\"ph2\">`BorderBrush`</ph> is the name of the <ph id=\"ph3\">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> that is assigned to the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Border.Background%2A&gt;</ph> of the <ph id=\"ph5\">&lt;xref:System.Windows.Controls.Border&gt;</ph>.","pos":[17424,17750],"source":" If you refer to the <xref:System.Windows.Controls.ControlTemplate> example at the beginning of this topic, you will recall that `BorderBrush` is the name of the <xref:System.Windows.Media.SolidColorBrush> that is assigned to the <xref:System.Windows.Controls.Border.Background%2A> of the <xref:System.Windows.Controls.Border>."},{"content":"The control is responsible for defining the states as part of its control contract, which is discussed in detail in <bpt id=\"p1\">[</bpt>Customizing Other Controls by Understanding the Control Contract<ept id=\"p1\">](#customizing_other_controls_by_understanding_the_control_contract)</ept> later in this topic.","pos":[17886,18156],"source":"The control is responsible for defining the states as part of its control contract, which is discussed in detail in [Customizing Other Controls by Understanding the Control Contract](#customizing_other_controls_by_understanding_the_control_contract) later in this topic."},{"content":"The following table lists the states that are specified for the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>.","pos":[18157,18259],"source":" The following table lists the states that are specified for the <xref:System.Windows.Controls.Button>."},{"content":"VisualState Name","pos":[18266,18282]},{"content":"VisualStateGroup Name","pos":[18283,18304]},{"content":"Description","pos":[18305,18316]},{"content":"Normal","pos":[18394,18400]},{"content":"CommonStates","pos":[18401,18413]},{"content":"The default state.","pos":[18414,18432]},{"content":"MouseOver","pos":[18437,18446]},{"content":"CommonStates","pos":[18447,18459]},{"content":"The mouse pointer is positioned over the control.","pos":[18460,18509]},{"content":"Pressed","pos":[18514,18521]},{"content":"CommonStates","pos":[18522,18534]},{"content":"The control is pressed.","pos":[18535,18558]},{"content":"Disabled","pos":[18563,18571]},{"content":"CommonStates","pos":[18572,18584]},{"content":"The control is disabled.","pos":[18585,18609]},{"content":"Focused","pos":[18614,18621]},{"content":"FocusStates","pos":[18622,18633]},{"content":"The control has focus.","pos":[18634,18656]},{"content":"Unfocused","pos":[18661,18670]},{"content":"FocusStates","pos":[18671,18682]},{"content":"The control does not have focus.","pos":[18683,18715]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> defines two state groups: the <ph id=\"ph2\">`CommonStates`</ph> group contains the <ph id=\"ph3\">`Normal`</ph>, <ph id=\"ph4\">`MouseOver`</ph>, <ph id=\"ph5\">`Pressed`</ph>, and <ph id=\"ph6\">`Disabled`</ph> states.","pos":[18723,18885],"source":"The <xref:System.Windows.Controls.Button> defines two state groups: the `CommonStates` group contains the `Normal`, `MouseOver`, `Pressed`, and `Disabled` states."},{"content":"The <ph id=\"ph1\">`FocusStates`</ph> group contains the <ph id=\"ph2\">`Focused`</ph> and <ph id=\"ph3\">`Unfocused`</ph> states.","pos":[18886,18956],"source":" The `FocusStates` group contains the `Focused` and `Unfocused` states."},{"content":"States in the same state group are mutually exclusive.","pos":[18957,19011]},{"content":"The control is always in exactly one state per group.","pos":[19012,19065]},{"content":"For example, a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> can have focus even when the mouse pointer is not over it, so a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> in the <ph id=\"ph3\">`Focused`</ph> state can be in the <ph id=\"ph4\">`MouseOver`</ph>, <ph id=\"ph5\">`Pressed`</ph>, or <ph id=\"ph6\">`Normal`</ph> state.","pos":[19066,19300],"source":" For example, a <xref:System.Windows.Controls.Button> can have focus even when the mouse pointer is not over it, so a <xref:System.Windows.Controls.Button> in the `Focused` state can be in the `MouseOver`, `Pressed`, or `Normal` state."},{"content":"You add <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph> objects to <ph id=\"ph2\">&lt;xref:System.Windows.VisualStateGroup&gt;</ph> objects.","pos":[19307,19407],"source":"You add <xref:System.Windows.VisualState> objects to <xref:System.Windows.VisualStateGroup> objects."},{"content":"You add <ph id=\"ph1\">&lt;xref:System.Windows.VisualStateGroup&gt;</ph> objects to the <ph id=\"ph2\">&lt;xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType&gt;</ph> attached property.","pos":[19408,19579],"source":" You add <xref:System.Windows.VisualStateGroup> objects to the <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> attached property."},{"content":"The following example defines the <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph> objects for the <ph id=\"ph2\">`Normal`</ph>, <ph id=\"ph3\">`MouseOver`</ph>, and <ph id=\"ph4\">`Pressed`</ph> states, which are all in the <ph id=\"ph5\">`CommonStates`</ph> group.","pos":[19580,19751],"source":" The following example defines the <xref:System.Windows.VisualState> objects for the `Normal`, `MouseOver`, and `Pressed` states, which are all in the `CommonStates` group."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.VisualState.Name%2A&gt;</ph> of each <ph id=\"ph2\">&lt;xref:System.Windows.VisualState&gt;</ph> matches the name in the preceding table.","pos":[19752,19880],"source":" The <xref:System.Windows.VisualState.Name%2A> of each <xref:System.Windows.VisualState> matches the name in the preceding table."},{"content":"The <ph id=\"ph1\">`Disabled`</ph> state and the states in the <ph id=\"ph2\">`FocusStates`</ph> group are omitted to keep the example short, but they are included in the entire example at the end of this topic.","pos":[19881,20052],"source":" The `Disabled` state and the states in the `FocusStates` group are omitted to keep the example short, but they are included in the entire example at the end of this topic."},{"pos":[20060,20304],"content":"[!NOTE]\n Be sure to set the <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> attached property on the root <xref:System.Windows.FrameworkElement> of the <xref:System.Windows.Controls.ControlTemplate>.","leadings":["","> "],"nodes":[{"content":"Be sure to set the <ph id=\"ph1\">&lt;xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType&gt;</ph> attached property on the root <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> of the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.","pos":[9,242],"source":"Be sure to set the <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> attached property on the root <xref:System.Windows.FrameworkElement> of the <xref:System.Windows.Controls.ControlTemplate>."}]},{"content":"The preceding example produces output that is similar to the following illustrations.","pos":[20461,20546]},{"content":"<bpt id=\"p1\">![</bpt>A button with a custom control template.<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/ndp-buttonnormal.png \"</bpt>NDP_ButtonNormal<ept id=\"p2\">\")</ept>","pos":[20553,20645],"source":"![A button with a custom control template.](./media/ndp-buttonnormal.png \"NDP_ButtonNormal\")"},{"content":"A button that uses a custom control template in the normal state","pos":[20648,20712]},{"content":"<bpt id=\"p1\">![</bpt>A button with a red border.<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/ndp-buttonmouseover.png \"</bpt>NDP_ButtonMouseOver<ept id=\"p2\">\")</ept>","pos":[20719,20804],"source":"![A button with a red border.](./media/ndp-buttonmouseover.png \"NDP_ButtonMouseOver\")"},{"content":"A button that uses a custom control template in the mouse over state","pos":[20807,20875]},{"content":"<bpt id=\"p1\">![</bpt>The border is transparent on a pressed button.<ept id=\"p1\">]</ept><bpt id=\"p2\">(./media/ndp-buttonpressed.png \"</bpt>NDP_ButtonPressed<ept id=\"p2\">\")</ept>","pos":[20882,20982],"source":"![The border is transparent on a pressed button.](./media/ndp-buttonpressed.png \"NDP_ButtonPressed\")"},{"content":"A button that uses a custom control template in the pressed state","pos":[20985,21050]},{"pos":[21057,21270],"content":"To find the visual states for controls that are included with <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Control Styles and Templates<ept id=\"p1\">](control-styles-and-templates.md)</ept>.","source":"To find the visual states for controls that are included with [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], see [Control Styles and Templates](control-styles-and-templates.md)."},{"pos":[21369,21440],"content":"Specifying the Behavior of a Control When It Transitions Between States","linkify":"Specifying the Behavior of a Control When It Transitions Between States","nodes":[{"content":"Specifying the Behavior of a Control When It Transitions Between States","pos":[0,71]}]},{"content":"In the preceding example, the appearance of the button also changes when the user clicks it, but unless the button is pressed for a full second, the user does not see the effect.","pos":[21444,21622]},{"content":"By default, the animation takes one second to occur.","pos":[21623,21675]},{"content":"Because users are likely to click and release a button in much less time, the visual feedback will not be effective if you leave the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> in its default state.","pos":[21676,21877],"source":" Because users are likely to click and release a button in much less time, the visual feedback will not be effective if you leave the <xref:System.Windows.Controls.ControlTemplate> in its default state."},{"content":"You can specify the amount of time that it takes an animation to occur to smoothly transition a control from one state to another by adding <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> objects to the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.","pos":[21884,22125],"source":"You can specify the amount of time that it takes an animation to occur to smoothly transition a control from one state to another by adding <xref:System.Windows.VisualTransition> objects to the <xref:System.Windows.Controls.ControlTemplate>."},{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph>, you specify one or more of the following:","pos":[22126,22225],"source":" When you create a <xref:System.Windows.VisualTransition>, you specify one or more of the following:"},{"content":"The time it takes for a transition between states to occur.","pos":[22235,22294]},{"content":"Additional changes in the control's appearance that occur at the time of the transition.","pos":[22304,22392]},{"pos":[22402,22472],"content":"Which states the <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> is applied to.","source":"Which states the <xref:System.Windows.VisualTransition> is applied to."},{"pos":[22482,22521],"content":"Specifying the Duration of a Transition","linkify":"Specifying the Duration of a Transition","nodes":[{"content":"Specifying the Duration of a Transition","pos":[0,39]}]},{"content":"You can specify how long a transition takes by setting the <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition.GeneratedDuration%2A&gt;</ph> property.","pos":[22525,22653],"source":"You can specify how long a transition takes by setting the <xref:System.Windows.VisualTransition.GeneratedDuration%2A> property."},{"content":"The preceding example has a <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph> that specifies that the button's border becomes transparent when the button is pressed, but the animation takes too long to be noticeable if the button is quickly pressed and released.","pos":[22654,22900],"source":" The preceding example has a <xref:System.Windows.VisualState> that specifies that the button's border becomes transparent when the button is pressed, but the animation takes too long to be noticeable if the button is quickly pressed and released."},{"content":"You can use a <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> to specify the amount of time it takes the control to transition into the pressed state.","pos":[22901,23042],"source":" You can use a <xref:System.Windows.VisualTransition> to specify the amount of time it takes the control to transition into the pressed state."},{"content":"The following example specifies that the control takes one hundredth of a second to go into the pressed state.","pos":[23043,23153]},{"pos":[23324,23390],"content":"Specifying Changes to the Control's Appearance During a Transition","linkify":"Specifying Changes to the Control's Appearance During a Transition","nodes":[{"content":"Specifying Changes to the Control's Appearance During a Transition","pos":[0,66]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> contains a <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> that begins when the control transitions between states.","pos":[23394,23553],"source":"The <xref:System.Windows.VisualTransition> contains a <xref:System.Windows.Media.Animation.Storyboard> that begins when the control transitions between states."},{"content":"For example, you can specify that a certain animation occurs when the control transitions from the <ph id=\"ph1\">`MouseOver`</ph> state to the <ph id=\"ph2\">`Normal`</ph> State.","pos":[23554,23693],"source":" For example, you can specify that a certain animation occurs when the control transitions from the `MouseOver` state to the `Normal` State."},{"content":"The following example creates a <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> that specifies that when the user moves the mouse pointer away from the button, the button's border changes to blue, then to yellow, then to black in 1.5 seconds.","pos":[23694,23927],"source":" The following example creates a <xref:System.Windows.VisualTransition> that specifies that when the user moves the mouse pointer away from the button, the button's border changes to blue, then to yellow, then to black in 1.5 seconds."},{"pos":[24066,24111],"content":"Specifying When a VisualTransition Is Applied","linkify":"Specifying When a VisualTransition Is Applied","nodes":[{"content":"Specifying When a VisualTransition Is Applied","pos":[0,45]}]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> can be restricted to apply to only certain states, or it can be applied any time the control transitions between states.","pos":[24115,24276],"source":"A <xref:System.Windows.VisualTransition> can be restricted to apply to only certain states, or it can be applied any time the control transitions between states."},{"content":"In the preceding example, the <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> is applied when the control goes from the <ph id=\"ph2\">`MouseOver`</ph> state to the <ph id=\"ph3\">`Normal`</ph> state; in the example before that, the <ph id=\"ph4\">&lt;xref:System.Windows.VisualTransition&gt;</ph> is applied when the control goes into the <ph id=\"ph5\">`Pressed`</ph> state.","pos":[24277,24558],"source":" In the preceding example, the <xref:System.Windows.VisualTransition> is applied when the control goes from the `MouseOver` state to the `Normal` state; in the example before that, the <xref:System.Windows.VisualTransition> is applied when the control goes into the `Pressed` state."},{"content":"You restrict when a <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> is applied by setting the <ph id=\"ph2\">&lt;xref:System.Windows.VisualTransition.To%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.VisualTransition.From%2A&gt;</ph> properties.","pos":[24559,24751],"source":" You restrict when a <xref:System.Windows.VisualTransition> is applied by setting the <xref:System.Windows.VisualTransition.To%2A> and <xref:System.Windows.VisualTransition.From%2A> properties."},{"content":"The following table describes the levels of restriction from most restrictive to least restrictive.","pos":[24752,24851]},{"content":"Type of restriction","pos":[24858,24877]},{"content":"Value of From","pos":[24878,24891]},{"content":"Value of To","pos":[24892,24903]},{"content":"From a specified state to another specified state","pos":[24976,25025]},{"pos":[25026,25073],"content":"The name of a <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph>","source":"The name of a <xref:System.Windows.VisualState>"},{"pos":[25074,25121],"content":"The name of a <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph>","source":"The name of a <xref:System.Windows.VisualState>"},{"content":"From any state to a specified state","pos":[25126,25161]},{"content":"Not set","pos":[25162,25169]},{"pos":[25170,25217],"content":"The name of a <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph>","source":"The name of a <xref:System.Windows.VisualState>"},{"content":"From a specified state to any state","pos":[25222,25257]},{"pos":[25258,25305],"content":"The name of a <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph>","source":"The name of a <xref:System.Windows.VisualState>"},{"content":"Not set","pos":[25306,25313]},{"content":"From any state to any other state","pos":[25318,25351]},{"content":"Not set","pos":[25352,25359]},{"content":"Not set","pos":[25360,25367]},{"content":"You can have multiple <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> objects in a <ph id=\"ph2\">&lt;xref:System.Windows.VisualStateGroup&gt;</ph> that refer to the same state, but they will be used in the order that the previous table specifies.","pos":[25375,25587],"source":"You can have multiple <xref:System.Windows.VisualTransition> objects in a <xref:System.Windows.VisualStateGroup> that refer to the same state, but they will be used in the order that the previous table specifies."},{"content":"In the following example, there are two <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> objects.","pos":[25588,25675],"source":" In the following example, there are two <xref:System.Windows.VisualTransition> objects."},{"content":"When the control transitions from the <ph id=\"ph1\">`Pressed`</ph> state to the <ph id=\"ph2\">`MouseOver`</ph> state, the <ph id=\"ph3\">&lt;xref:System.Windows.VisualTransition&gt;</ph> that has both <ph id=\"ph4\">&lt;xref:System.Windows.VisualTransition.From%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.VisualTransition.To%2A&gt;</ph> set is used.","pos":[25676,25921],"source":" When the control transitions from the `Pressed` state to the `MouseOver` state, the <xref:System.Windows.VisualTransition> that has both <xref:System.Windows.VisualTransition.From%2A> and <xref:System.Windows.VisualTransition.To%2A> set is used."},{"content":"When the control transitions from a state that is not <ph id=\"ph1\">`Pressed`</ph> to the <ph id=\"ph2\">`MouseOver`</ph> state, the other state is used.","pos":[25922,26036],"source":" When the control transitions from a state that is not `Pressed` to the `MouseOver` state, the other state is used."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.VisualStateGroup&gt;</ph> has a <ph id=\"ph2\">&lt;xref:System.Windows.VisualStateGroup.Transitions%2A&gt;</ph> property that contains the <ph id=\"ph3\">&lt;xref:System.Windows.VisualTransition&gt;</ph> objects that apply to the <ph id=\"ph4\">&lt;xref:System.Windows.VisualState&gt;</ph> objects in the <ph id=\"ph5\">&lt;xref:System.Windows.VisualStateGroup&gt;</ph>.","pos":[26172,26455],"source":"The <xref:System.Windows.VisualStateGroup> has a <xref:System.Windows.VisualStateGroup.Transitions%2A> property that contains the <xref:System.Windows.VisualTransition> objects that apply to the <xref:System.Windows.VisualState> objects in the <xref:System.Windows.VisualStateGroup>."},{"content":"As the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> author, you are free to include any <ph id=\"ph2\">&lt;xref:System.Windows.VisualTransition&gt;</ph> you want.","pos":[26456,26594],"source":" As the <xref:System.Windows.Controls.ControlTemplate> author, you are free to include any <xref:System.Windows.VisualTransition> you want."},{"content":"However, if the <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition.To%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.VisualTransition.From%2A&gt;</ph> properties are set to state names that are not in the <ph id=\"ph3\">&lt;xref:System.Windows.VisualStateGroup&gt;</ph>, the <ph id=\"ph4\">&lt;xref:System.Windows.VisualTransition&gt;</ph> is ignored.","pos":[26595,26855],"source":" However, if the <xref:System.Windows.VisualTransition.To%2A> and <xref:System.Windows.VisualTransition.From%2A> properties are set to state names that are not in the <xref:System.Windows.VisualStateGroup>, the <xref:System.Windows.VisualTransition> is ignored."},{"content":"The following example shows the <ph id=\"ph1\">&lt;xref:System.Windows.VisualStateGroup&gt;</ph> for the <ph id=\"ph2\">`CommonStates`</ph>.","pos":[26862,26956],"source":"The following example shows the <xref:System.Windows.VisualStateGroup> for the `CommonStates`."},{"content":"The example defines a <ph id=\"ph1\">&lt;xref:System.Windows.VisualTransition&gt;</ph> for each of the button's following transitions.","pos":[26957,27065],"source":" The example defines a <xref:System.Windows.VisualTransition> for each of the button's following transitions."},{"pos":[27075,27098],"content":"To the <ph id=\"ph1\">`Pressed`</ph> state.","source":"To the `Pressed` state."},{"pos":[27108,27133],"content":"To the <ph id=\"ph1\">`MouseOver`</ph> state.","source":"To the `MouseOver` state."},{"pos":[27143,27193],"content":"From the <ph id=\"ph1\">`Pressed`</ph> state to the <ph id=\"ph2\">`MouseOver`</ph> state.","source":"From the `Pressed` state to the `MouseOver` state."},{"pos":[27203,27252],"content":"From the <ph id=\"ph1\">`MouseOver`</ph> state to the <ph id=\"ph2\">`Normal`</ph> state.","source":"From the `MouseOver` state to the `Normal` state."},{"pos":[27504,27568],"content":"Customizing Other Controls by Understanding the Control Contract","linkify":"Customizing Other Controls by Understanding the Control Contract","nodes":[{"content":"Customizing Other Controls by Understanding the Control Contract","pos":[0,64]}]},{"content":"A control that uses a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to specify its visual structure (by using <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> objects) and visual behavior (by using <ph id=\"ph3\">&lt;xref:System.Windows.VisualState&gt;</ph> objects) uses the parts control model.","pos":[27572,27833],"source":"A control that uses a <xref:System.Windows.Controls.ControlTemplate> to specify its visual structure (by using <xref:System.Windows.FrameworkElement> objects) and visual behavior (by using <xref:System.Windows.VisualState> objects) uses the parts control model."},{"content":"Many of the controls that are included with <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> 4 use this model.","pos":[27834,27977],"source":" Many of the controls that are included with [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)] 4 use this model."},{"content":"The parts that a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> author needs to be aware of are communicated through the control contract.","pos":[27978,28116],"source":" The parts that a <xref:System.Windows.Controls.ControlTemplate> author needs to be aware of are communicated through the control contract."},{"content":"When you understand the parts of a control contract, you can customize the appearance of any control that uses the parts control model.","pos":[28117,28252]},{"content":"A control contract has three elements:","pos":[28259,28297]},{"content":"The visual elements that the control's logic uses.","pos":[28307,28357]},{"content":"The states of the control and the group each state belongs to.","pos":[28367,28429]},{"content":"The public properties that visually affect the control.","pos":[28439,28494]},{"pos":[28504,28543],"content":"Visual Elements in the Control Contract","linkify":"Visual Elements in the Control Contract","nodes":[{"content":"Visual Elements in the Control Contract","pos":[0,39]}]},{"content":"Sometimes a control's logic interacts with a <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that is in the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.","pos":[28547,28693],"source":"Sometimes a control's logic interacts with a <xref:System.Windows.FrameworkElement> that is in the <xref:System.Windows.Controls.ControlTemplate>."},{"content":"For example, the control might handle an event of one of its elements.","pos":[28694,28764]},{"content":"When a control expects to find a particular <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> in the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, it must convey that information to the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> author.","pos":[28765,28996],"source":" When a control expects to find a particular <xref:System.Windows.FrameworkElement> in the <xref:System.Windows.Controls.ControlTemplate>, it must convey that information to the <xref:System.Windows.Controls.ControlTemplate> author."},{"content":"The control uses the <ph id=\"ph1\">&lt;xref:System.Windows.TemplatePartAttribute&gt;</ph> to convey the type of element that is expected, and what the name of the element should be.","pos":[28997,29153],"source":" The control uses the <xref:System.Windows.TemplatePartAttribute> to convey the type of element that is expected, and what the name of the element should be."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> does not have <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> parts in its control contract, but other controls, such as the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph>, do.","pos":[29154,29356],"source":" The <xref:System.Windows.Controls.Button> does not have <xref:System.Windows.FrameworkElement> parts in its control contract, but other controls, such as the <xref:System.Windows.Controls.ComboBox>, do."},{"content":"The following example shows the <ph id=\"ph1\">&lt;xref:System.Windows.TemplatePartAttribute&gt;</ph> objects that are specified on the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> class.","pos":[29363,29519],"source":"The following example shows the <xref:System.Windows.TemplatePartAttribute> objects that are specified on the <xref:System.Windows.Controls.ComboBox> class."},{"content":"The logic of <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> expects to find a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> named <ph id=\"ph3\">`PART_EditableTextBox`</ph> and a <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> named <ph id=\"ph5\">`PART_Popup`</ph> in its <ph id=\"ph6\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.","pos":[29520,29786],"source":" The logic of <xref:System.Windows.Controls.ComboBox> expects to find a <xref:System.Windows.Controls.TextBox> named `PART_EditableTextBox` and a <xref:System.Windows.Controls.Primitives.Popup> named `PART_Popup` in its <xref:System.Windows.Controls.ControlTemplate>."},{"pos":[30114,30408],"content":"The following example shows a simplified <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> that includes the elements that are specified by the <ph id=\"ph3\">&lt;xref:System.Windows.TemplatePartAttribute&gt;</ph> objects on the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> class.","source":"The following example shows a simplified <xref:System.Windows.Controls.ControlTemplate> for the <xref:System.Windows.Controls.ComboBox> that includes the elements that are specified by the <xref:System.Windows.TemplatePartAttribute> objects on the <xref:System.Windows.Controls.ComboBox> class."},{"pos":[30571,30601],"content":"States in the Control Contract","linkify":"States in the Control Contract","nodes":[{"content":"States in the Control Contract","pos":[0,30]}]},{"content":"The states of a control are also a part of the control contract.","pos":[30605,30669]},{"content":"The example of creating a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> shows how to specify the appearance of a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Button&gt;</ph> depending on its states.","pos":[30670,30890],"source":" The example of creating a <xref:System.Windows.Controls.ControlTemplate> for a <xref:System.Windows.Controls.Button> shows how to specify the appearance of a <xref:System.Windows.Controls.Button> depending on its states."},{"content":"You create a <ph id=\"ph1\">&lt;xref:System.Windows.VisualState&gt;</ph> for each specified state and put all <ph id=\"ph2\">&lt;xref:System.Windows.VisualState&gt;</ph> objects that share a <ph id=\"ph3\">&lt;xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A&gt;</ph> in a <ph id=\"ph4\">&lt;xref:System.Windows.VisualStateGroup&gt;</ph>, as described in <bpt id=\"p1\">[</bpt>Changing the Appearance of a Control Depending on Its State<ept id=\"p1\">](#changing_the_appearance_of_a_control_depending_on_its_state)</ept> earlier in this topic.","pos":[30891,31301],"source":" You create a <xref:System.Windows.VisualState> for each specified state and put all <xref:System.Windows.VisualState> objects that share a <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A> in a <xref:System.Windows.VisualStateGroup>, as described in [Changing the Appearance of a Control Depending on Its State](#changing_the_appearance_of_a_control_depending_on_its_state) earlier in this topic."},{"content":"Third-party controls should specify states by using the <ph id=\"ph1\">&lt;xref:System.Windows.TemplateVisualStateAttribute&gt;</ph>, which enables designer tools, such as Expression Blend, to expose the control's states for authoring control templates.","pos":[31302,31529],"source":" Third-party controls should specify states by using the <xref:System.Windows.TemplateVisualStateAttribute>, which enables designer tools, such as Expression Blend, to expose the control's states for authoring control templates."},{"pos":[31536,31752],"content":"To find the control contract for controls that are included with <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Control Styles and Templates<ept id=\"p1\">](control-styles-and-templates.md)</ept>.","source":"To find the control contract for controls that are included with [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], see [Control Styles and Templates](control-styles-and-templates.md)."},{"pos":[31762,31796],"content":"Properties in the Control Contract","linkify":"Properties in the Control Contract","nodes":[{"content":"Properties in the Control Contract","pos":[0,34]}]},{"content":"The public properties that visually affect the control are also included in the control contract.","pos":[31800,31897]},{"content":"You can set these properties to change the appearance of the control without creating a new <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.","pos":[31898,32037],"source":" You can set these properties to change the appearance of the control without creating a new <xref:System.Windows.Controls.ControlTemplate>."},{"content":"You can also use the <bpt id=\"p1\">[</bpt>TemplateBinding<ept id=\"p1\">](../advanced/templatebinding-markup-extension.md)</ept> markup extension to bind properties of elements that are in the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to public properties that are defined by the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph>.","pos":[32038,32320],"source":" You can also use the [TemplateBinding](../advanced/templatebinding-markup-extension.md) markup extension to bind properties of elements that are in the <xref:System.Windows.Controls.ControlTemplate> to public properties that are defined by the <xref:System.Windows.Controls.Button>."},{"content":"The following example shows the control contract for the button.","pos":[32327,32391]},{"content":"When creating a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, it is often easiest to begin with an existing <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and make changes to it.","pos":[32711,32891],"source":"When creating a <xref:System.Windows.Controls.ControlTemplate>, it is often easiest to begin with an existing <xref:System.Windows.Controls.ControlTemplate> and make changes to it."},{"content":"You can do one of the following to change an existing <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>:","pos":[32892,32993],"source":" You can do one of the following to change an existing <xref:System.Windows.Controls.ControlTemplate>:"},{"content":"Use a designer, such as Expression Blend, which provides a graphical user interface for creating control templates.","pos":[33003,33118]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Styling a control that supports templates<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkId=161153)</ept>.","pos":[33119,33237],"source":" For more information, see [Styling a control that supports templates](https://go.microsoft.com/fwlink/?LinkId=161153)."},{"content":"Get the default <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and edit it.","pos":[33247,33322],"source":"Get the default <xref:System.Windows.Controls.ControlTemplate> and edit it."},{"content":"To find the default control templates that are included with <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Default WPF Themes<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkID=158252)</ept>.","pos":[33323,33540],"source":" To find the default control templates that are included with [!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)], see [Default WPF Themes](https://go.microsoft.com/fwlink/?LinkID=158252)."},{"pos":[33584,33600],"content":"Complete Example","linkify":"Complete Example","nodes":[{"content":"Complete Example","pos":[0,16]}]},{"pos":[33604,33761],"content":"The following example shows the complete <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph><ph id=\"ph2\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> that is discussed in this topic.","source":"The following example shows the complete <xref:System.Windows.Controls.Button><xref:System.Windows.Controls.ControlTemplate> that is discussed in this topic."},{"pos":[33899,33907],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[33911,33962],"content":"<bpt id=\"p1\">[</bpt>Styling and Templating<ept id=\"p1\">](styling-and-templating.md)</ept>","source":"[Styling and Templating](styling-and-templating.md)"}]}