{"content":"---\ntitle: \"How to: Write a Simple Parallel.For Loop\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"Parallel.For, How to Write\"\n  - \"for loop, parallel construction in .NET\"\n  - \"parallel for loops, how to use\"\nms.assetid: 9029ba7f-a9d1-4526-8c84-c88716dba5d4\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Write a Simple Parallel.For Loop\n\nThis topic contains two examples that illustrate the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method. The first uses the <xref:System.Threading.Tasks.Parallel.For%28System.Int64%2CSystem.Int64%2CSystem.Action%7BSystem.Int64%7D%29?displayProperty=nameWithType> method overload, and the second uses the <xref:System.Threading.Tasks.Parallel.For%28System.Int32%2CSystem.Int32%2CSystem.Action%7BSystem.Int32%7D%29?displayProperty=nameWithType> overload, the two simplest overloads of the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method. You can use these two overloads of the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method when you do not need to cancel the loop, break out of the loop iterations, or maintain any thread-local state.\n\n> [!NOTE]\n> This documentation uses lambda expressions to define delegates in TPL. If you are not familiar with lambda expressions in C# or Visual Basic, see [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md).\n\nThe first example calculates the size of files in a single directory. The second computes the product of two matrices.\n\n## Directory size example\n\nThis example is a simple command-line utility that calculates the total size of files in a directory. It expects a single directory path as an argument, and reports the number and total size of the files in that directory. After verifying that the directory exists, it uses the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method to enumerate the files in the directory and determine their file sizes. Each file size is then added to the `totalSize` variable. Note that the addition is performed by calling the <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> so that the addition is performed as an atomic operation. Otherwise, multiple tasks could try to update the `totalSize` variable simultaneously.\n\n[!code-csharp[Conceptual.Parallel.For#1](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.parallel.for/cs/for1.cs#1)]\n[!code-vb[Conceptual.Parallel.For#1](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.parallel.for/vb/for1.vb#1)]\n\n## Matrix and stopwatch example\n\nThis example uses the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method to compute the product of two matrices. It also shows how to use the <xref:System.Diagnostics.Stopwatch?displayProperty=nameWithType> class to compare the performance of a parallel loop with a non-parallel loop. Note that, because it can generate a large volume of output, the example allows output to be redirected to a file.\n\n[!code-csharp[TPL_Parallel#01](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_parallel/cs/simpleparallelfor.cs#01)]\n[!code-vb[TPL_Parallel#01](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_parallel/vb/simpleparallelfor.vb#01)]\n\nWhen parallelizing any code, including loops, one important goal is to utilize the processors as much as possible without over parallelizing to the point where the overhead for parallel processing negates any performance benefits. In this particular example, only the outer loop is parallelized because there is not very much work performed in the inner loop. The combination of a small amount of work and undesirable cache effects can result in performance degradation in nested parallel loops. Therefore, parallelizing the outer loop only is the best way to maximize the benefits of concurrency on most systems.\n\n## The Delegate\n\nThe third parameter of this overload of <xref:System.Threading.Tasks.Parallel.For%2A> is a delegate of type `Action<int>` in C# or `Action(Of Integer)` in Visual Basic. An `Action` delegate, whether it has zero, one or sixteen type parameters, always returns void. In Visual Basic, the behavior of an `Action` is defined with a `Sub`. The example uses a lambda expression to create the delegate, but you can create the delegate in other ways as well. For more information, see [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md).\n\n## The Iteration Value\n\nThe delegate takes a single input parameter whose value is the current iteration. This iteration value is supplied by the runtime and its starting value is the index of the first element on the segment (partition) of the source that is being processed on the current thread.\n\nIf you require more control over the concurrency level, use one of the overloads that takes a <xref:System.Threading.Tasks.ParallelOptions?displayProperty=nameWithType> input parameter, such as: <xref:System.Threading.Tasks.Parallel.For%28System.Int32%2CSystem.Int32%2CSystem.Threading.Tasks.ParallelOptions%2CSystem.Action%7BSystem.Int32%2CSystem.Threading.Tasks.ParallelLoopState%7D%29?displayProperty=nameWithType>.\n\n## Return Value and Exception Handling\n\n<xref:System.Threading.Tasks.Parallel.For%2A> returns a <xref:System.Threading.Tasks.ParallelLoopResult?displayProperty=nameWithType> object when all threads have completed. This return value is useful when you are stopping or breaking loop iteration manually, because the <xref:System.Threading.Tasks.ParallelLoopResult> stores information such as the last iteration that ran to completion. If one or more exceptions occur on one of the threads, a <xref:System.AggregateException?displayProperty=nameWithType> will be thrown.\n\nIn the code in this example, the return value of <xref:System.Threading.Tasks.Parallel.For%2A> is not used.\n\n## Analysis and Performance\n\nYou can use the Performance Wizard to view CPU usage on your computer. As an experiment, increase the number of columns and rows in the matrices. The larger the matrices, the greater the performance difference between the parallel and sequential versions of the computation. When the matrix is small, the sequential version will run faster because of the overhead in setting up the parallel loop.\n\nSynchronous calls to shared resources, like the Console or the File System, will significantly degrade the performance of a parallel loop. When measuring performance, try to avoid calls such as <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> within the loop.\n\n## Compile the Code\n\nCopy and paste this code into a Visual Studio project.\n\n## See also\n\n- <xref:System.Threading.Tasks.Parallel.For%2A>\n- <xref:System.Threading.Tasks.Parallel.ForEach%2A>\n- [Data Parallelism](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)\n- [Parallel Programming](../../../docs/standard/parallel-programming/index.md)\n","nodes":[{"pos":[4,365],"embed":true,"restype":"x-metadata","content":"title: \"How to: Write a Simple Parallel.For Loop\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords:\n  - \"Parallel.For, How to Write\"\n  - \"for loop, parallel construction in .NET\"\n  - \"parallel for loops, how to use\"\nms.assetid: 9029ba7f-a9d1-4526-8c84-c88716dba5d4\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Write a Simple Parallel.For Loop","nodes":[{"pos":[0,40],"content":"How to: Write a Simple Parallel.For Loop","nodes":[{"content":"How to: Write a Simple Parallel.For Loop","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[372,412],"content":"How to: Write a Simple Parallel.For Loop","linkify":"How to: Write a Simple Parallel.For Loop","nodes":[{"content":"How to: Write a Simple Parallel.For Loop","pos":[0,40]}]},{"content":"This topic contains two examples that illustrate the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[414,549],"source":"This topic contains two examples that illustrate the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method."},{"content":"The first uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%28System.Int64%2CSystem.Int64%2CSystem.Action%7BSystem.Int64%7D%29?displayProperty=nameWithType&gt;</ph> method overload, and the second uses the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Parallel.For%28System.Int32%2CSystem.Int32%2CSystem.Action%7BSystem.Int32%7D%29?displayProperty=nameWithType&gt;</ph> overload, the two simplest overloads of the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[550,1014],"source":" The first uses the <xref:System.Threading.Tasks.Parallel.For%28System.Int64%2CSystem.Int64%2CSystem.Action%7BSystem.Int64%7D%29?displayProperty=nameWithType> method overload, and the second uses the <xref:System.Threading.Tasks.Parallel.For%28System.Int32%2CSystem.Int32%2CSystem.Action%7BSystem.Int32%7D%29?displayProperty=nameWithType> overload, the two simplest overloads of the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method."},{"content":"You can use these two overloads of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> method when you do not need to cancel the loop, break out of the loop iterations, or maintain any thread-local state.","pos":[1015,1246],"source":" You can use these two overloads of the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method when you do not need to cancel the loop, break out of the loop iterations, or maintain any thread-local state."},{"pos":[1250,1528],"content":"[!NOTE]\nThis documentation uses lambda expressions to define delegates in TPL. If you are not familiar with lambda expressions in C# or Visual Basic, see [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md).","leadings":["","> "],"nodes":[{"content":"This documentation uses lambda expressions to define delegates in TPL. If you are not familiar with lambda expressions in C# or Visual Basic, see [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md).","pos":[8,276],"nodes":[{"content":"This documentation uses lambda expressions to define delegates in TPL.","pos":[0,70]},{"content":"If you are not familiar with lambda expressions in C# or Visual Basic, see <bpt id=\"p1\">[</bpt>Lambda Expressions in PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)</ept>.","pos":[71,268],"source":" If you are not familiar with lambda expressions in C# or Visual Basic, see [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)."}]}]},{"content":"The first example calculates the size of files in a single directory.","pos":[1530,1599]},{"content":"The second computes the product of two matrices.","pos":[1600,1648]},{"pos":[1653,1675],"content":"Directory size example","linkify":"Directory size example","nodes":[{"content":"Directory size example","pos":[0,22]}]},{"content":"This example is a simple command-line utility that calculates the total size of files in a directory.","pos":[1677,1778]},{"content":"It expects a single directory path as an argument, and reports the number and total size of the files in that directory.","pos":[1779,1899]},{"content":"After verifying that the directory exists, it uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> method to enumerate the files in the directory and determine their file sizes.","pos":[1900,2108],"source":" After verifying that the directory exists, it uses the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method to enumerate the files in the directory and determine their file sizes."},{"content":"Each file size is then added to the <ph id=\"ph1\">`totalSize`</ph> variable.","pos":[2109,2166],"source":" Each file size is then added to the `totalSize` variable."},{"content":"Note that the addition is performed by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType&gt;</ph> so that the addition is performed as an atomic operation.","pos":[2167,2347],"source":" Note that the addition is performed by calling the <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> so that the addition is performed as an atomic operation."},{"content":"Otherwise, multiple tasks could try to update the <ph id=\"ph1\">`totalSize`</ph> variable simultaneously.","pos":[2348,2434],"source":" Otherwise, multiple tasks could try to update the `totalSize` variable simultaneously."},{"pos":[2699,2727],"content":"Matrix and stopwatch example","linkify":"Matrix and stopwatch example","nodes":[{"content":"Matrix and stopwatch example","pos":[0,28]}]},{"content":"This example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> method to compute the product of two matrices.","pos":[2729,2872],"source":"This example uses the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method to compute the product of two matrices."},{"content":"It also shows how to use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Stopwatch?displayProperty=nameWithType&gt;</ph> class to compare the performance of a parallel loop with a non-parallel loop.","pos":[2873,3044],"source":" It also shows how to use the <xref:System.Diagnostics.Stopwatch?displayProperty=nameWithType> class to compare the performance of a parallel loop with a non-parallel loop."},{"content":"Note that, because it can generate a large volume of output, the example allows output to be redirected to a file.","pos":[3045,3159]},{"content":"When parallelizing any code, including loops, one important goal is to utilize the processors as much as possible without over parallelizing to the point where the overhead for parallel processing negates any performance benefits.","pos":[3409,3639]},{"content":"In this particular example, only the outer loop is parallelized because there is not very much work performed in the inner loop.","pos":[3640,3768]},{"content":"The combination of a small amount of work and undesirable cache effects can result in performance degradation in nested parallel loops.","pos":[3769,3904]},{"content":"Therefore, parallelizing the outer loop only is the best way to maximize the benefits of concurrency on most systems.","pos":[3905,4022]},{"pos":[4027,4039],"content":"The Delegate","linkify":"The Delegate","nodes":[{"content":"The Delegate","pos":[0,12]}]},{"content":"The third parameter of this overload of <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A&gt;</ph> is a delegate of type <ph id=\"ph2\">`Action&lt;int&gt;`</ph> in C# or <ph id=\"ph3\">`Action(Of Integer)`</ph> in Visual Basic.","pos":[4041,4209],"source":"The third parameter of this overload of <xref:System.Threading.Tasks.Parallel.For%2A> is a delegate of type `Action<int>` in C# or `Action(Of Integer)` in Visual Basic."},{"content":"An <ph id=\"ph1\">`Action`</ph> delegate, whether it has zero, one or sixteen type parameters, always returns void.","pos":[4210,4305],"source":" An `Action` delegate, whether it has zero, one or sixteen type parameters, always returns void."},{"content":"In Visual Basic, the behavior of an <ph id=\"ph1\">`Action`</ph> is defined with a <ph id=\"ph2\">`Sub`</ph>.","pos":[4306,4375],"source":" In Visual Basic, the behavior of an `Action` is defined with a `Sub`."},{"content":"The example uses a lambda expression to create the delegate, but you can create the delegate in other ways as well.","pos":[4376,4491]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Lambda Expressions in PLINQ and TPL<ept id=\"p1\">](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)</ept>.","pos":[4492,4640],"source":" For more information, see [Lambda Expressions in PLINQ and TPL](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)."},{"pos":[4645,4664],"content":"The Iteration Value","linkify":"The Iteration Value","nodes":[{"content":"The Iteration Value","pos":[0,19]}]},{"content":"The delegate takes a single input parameter whose value is the current iteration.","pos":[4666,4747]},{"content":"This iteration value is supplied by the runtime and its starting value is the index of the first element on the segment (partition) of the source that is being processed on the current thread.","pos":[4748,4940]},{"pos":[4942,5360],"content":"If you require more control over the concurrency level, use one of the overloads that takes a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelOptions?displayProperty=nameWithType&gt;</ph> input parameter, such as: <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Parallel.For%28System.Int32%2CSystem.Int32%2CSystem.Threading.Tasks.ParallelOptions%2CSystem.Action%7BSystem.Int32%2CSystem.Threading.Tasks.ParallelLoopState%7D%29?displayProperty=nameWithType&gt;</ph>.","source":"If you require more control over the concurrency level, use one of the overloads that takes a <xref:System.Threading.Tasks.ParallelOptions?displayProperty=nameWithType> input parameter, such as: <xref:System.Threading.Tasks.Parallel.For%28System.Int32%2CSystem.Int32%2CSystem.Threading.Tasks.ParallelOptions%2CSystem.Action%7BSystem.Int32%2CSystem.Threading.Tasks.ParallelLoopState%7D%29?displayProperty=nameWithType>."},{"pos":[5365,5400],"content":"Return Value and Exception Handling","linkify":"Return Value and Exception Handling","nodes":[{"content":"Return Value and Exception Handling","pos":[0,35]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopResult?displayProperty=nameWithType&gt;</ph> object when all threads have completed.","pos":[5402,5575],"source":"<xref:System.Threading.Tasks.Parallel.For%2A> returns a <xref:System.Threading.Tasks.ParallelLoopResult?displayProperty=nameWithType> object when all threads have completed."},{"content":"This return value is useful when you are stopping or breaking loop iteration manually, because the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopResult&gt;</ph> stores information such as the last iteration that ran to completion.","pos":[5576,5793],"source":" This return value is useful when you are stopping or breaking loop iteration manually, because the <xref:System.Threading.Tasks.ParallelLoopResult> stores information such as the last iteration that ran to completion."},{"content":"If one or more exceptions occur on one of the threads, a <ph id=\"ph1\">&lt;xref:System.AggregateException?displayProperty=nameWithType&gt;</ph> will be thrown.","pos":[5794,5928],"source":" If one or more exceptions occur on one of the threads, a <xref:System.AggregateException?displayProperty=nameWithType> will be thrown."},{"pos":[5930,6037],"content":"In the code in this example, the return value of <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A&gt;</ph> is not used.","source":"In the code in this example, the return value of <xref:System.Threading.Tasks.Parallel.For%2A> is not used."},{"pos":[6042,6066],"content":"Analysis and Performance","linkify":"Analysis and Performance","nodes":[{"content":"Analysis and Performance","pos":[0,24]}]},{"content":"You can use the Performance Wizard to view CPU usage on your computer.","pos":[6068,6138]},{"content":"As an experiment, increase the number of columns and rows in the matrices.","pos":[6139,6213]},{"content":"The larger the matrices, the greater the performance difference between the parallel and sequential versions of the computation.","pos":[6214,6342]},{"content":"When the matrix is small, the sequential version will run faster because of the overhead in setting up the parallel loop.","pos":[6343,6464]},{"content":"Synchronous calls to shared resources, like the Console or the File System, will significantly degrade the performance of a parallel loop.","pos":[6466,6604]},{"content":"When measuring performance, try to avoid calls such as <ph id=\"ph1\">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> within the loop.","pos":[6605,6740],"source":" When measuring performance, try to avoid calls such as <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> within the loop."},{"pos":[6745,6761],"content":"Compile the Code","linkify":"Compile the Code","nodes":[{"content":"Compile the Code","pos":[0,16]}]},{"content":"Copy and paste this code into a Visual Studio project.","pos":[6763,6817]},{"pos":[6822,6830],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[6934,7039],"content":"<bpt id=\"p1\">[</bpt>Data Parallelism<ept id=\"p1\">](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)</ept>","source":"[Data Parallelism](../../../docs/standard/parallel-programming/data-parallelism-task-parallel-library.md)"},{"pos":[7042,7118],"content":"<bpt id=\"p1\">[</bpt>Parallel Programming<ept id=\"p1\">](../../../docs/standard/parallel-programming/index.md)</ept>","source":"[Parallel Programming](../../../docs/standard/parallel-programming/index.md)"}]}