{"content":"---\ntitle: \"Windows Workflow Architecture | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 1d4c6495-d64a-46d0-896a-3a01fac90aa9\ncaps.latest.revision: 20\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Windows Workflow Architecture\n[!INCLUDE[wf](../../../includes/wf-md.md)] raises the abstraction level for developing interactive long-running applications. Units of work are encapsulated as activities. Activities run in an environment that provides facilities for flow control, exception handling, fault propagation, persistence of state data, loading and unloading of in-progress workflows from memory, tracking, and transaction flow.  \n  \n## Activity Architecture  \n Activities are developed as CLR types that derive from either <xref:System.Activities.Activity>, <xref:System.Activities.CodeActivity>, <xref:System.Activities.AsyncCodeActivity>, or <xref:System.Activities.NativeActivity>, or their variants that return a value, <xref:System.Activities.Activity%601>, <xref:System.Activities.CodeActivity%601>, <xref:System.Activities.AsyncCodeActivity%601>, or <xref:System.Activities.NativeActivity%601>. Developing activities that derive from <xref:System.Activities.Activity> allows the user to assemble pre-existing activities to quickly create units of work that execute in the workflow environment. <xref:System.Activities.CodeActivity>, on the other hand, enables execution logic to be authored in managed code using <xref:System.Activities.CodeActivityContext> primarily for access to activity arguments. <xref:System.Activities.AsyncCodeActivity> is similar to <xref:System.Activities.CodeActivity> except that it can be used to implement asynchronous tasks. Developing activities that derive from <xref:System.Activities.NativeActivity> allows users to access the runtime through the <xref:System.Activities.NativeActivityContext> for functionality like scheduling children, creating bookmarks, invoking asynchronous work, registering transactions, and more.  \n  \n Authoring activities that derive from <xref:System.Activities.Activity> is declarative and these activities can be authored in XAML. In the following example, an activity called `Prompt` is created using other activities for the execution body.  \n  \n```  \n<Activity x:Class='Prompt'  \n  xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml'  \n    xmlns:z='http://schemas.microsoft.com/netfx/2008/xaml/schema'  \nxmlns:my='clr-namespace:XAMLActivityDefinition;assembly=XAMLActivityDefinition'  \nxmlns:s=\"clr-namespace:System;assembly=mscorlib\"  \nxmlns=\"http://schemas.microsoft.com/2009/workflow\">  \n<z:SchemaType.Members>  \n    <z:SchemaType.SchemaProperty Name='Text' Type=' InArgument(s:String)' />  \n  <z:SchemaType.SchemaProperty Name='Response' Type='OutArgument(s:String)' />  \n</z:SchemaType.Members>  \n  <Sequence>  \n    <my:WriteLine Text='[Text]' />  \n    <my:ReadLine BookmarkName='r1' Result='[Response]' />  \n  </Sequence>  \n</Activity>  \n```  \n  \n## Activity Context  \n The <xref:System.Activities.ActivityContext> is the activity author's interface to the workflow runtime and provides access to the runtime's wealth of features. In the following example, an activity is defined that uses the execution context to create a bookmark (the mechanism that allows an activity to register a continuation point in its execution that can be resumed by a host passing data into the activity).  \n  \n [!code-csharp[CFX_WorkflowApplicationExample#15](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  \n  \n## Activity Life Cycle  \n An instance of an activity starts out in the <xref:System.Activities.ActivityInstanceState> state. Unless exceptions are encountered, it remains in this state until all child activities are finished executing and any other pending work (<xref:System.Activities.Bookmark> objects, for instance) is completed, at which point it transitions to the <xref:System.Activities.ActivityInstanceState> state. The parent of an activity instance can request a child to cancel; if the child is able to be canceled it completes in the <xref:System.Activities.ActivityInstanceState> state. If an exception is thrown during execution, the runtime puts the activity into the <xref:System.Activities.ActivityInstanceState> state and propagates the exception up the parent chain of activities. Following are the three completion states of an activity:  \n  \n-   **Closed:** The activity has completed its work and exited.  \n  \n-   **Canceled:** The activity has gracefully abandoned its work and exited. Work is not explicitly rolled back when this state is entered.  \n  \n-   **Faulted:** The activity has encountered an error and has exited without completing its work.  \n  \n Activities remain in the <xref:System.Activities.ActivityInstanceState> state when they are persisted or unloaded.","nodes":[{"pos":[12,58],"content":"Windows Workflow Architecture | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Windows Workflow Architecture | Microsoft Docs","pos":[0,46]}]},{"pos":[324,353],"content":"Windows Workflow Architecture","linkify":"Windows Workflow Architecture","nodes":[{"content":"Windows Workflow Architecture","pos":[0,29]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph> raises the abstraction level for developing interactive long-running applications.","pos":[354,479],"source":"[!INCLUDE[wf](../../../includes/wf-md.md)] raises the abstraction level for developing interactive long-running applications."},{"content":"Units of work are encapsulated as activities.","pos":[480,525]},{"content":"Activities run in an environment that provides facilities for flow control, exception handling, fault propagation, persistence of state data, loading and unloading of in-progress workflows from memory, tracking, and transaction flow.","pos":[526,759]},{"pos":[768,789],"content":"Activity Architecture","linkify":"Activity Architecture","nodes":[{"content":"Activity Architecture","pos":[0,21]}]},{"content":"Activities are developed as CLR types that derive from either <ph id=\"ph1\">&lt;xref:System.Activities.Activity&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Activities.CodeActivity&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Activities.NativeActivity&gt;</ph>, or their variants that return a value, <ph id=\"ph5\">&lt;xref:System.Activities.Activity%601&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Activities.CodeActivity%601&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Activities.AsyncCodeActivity%601&gt;</ph>, or <ph id=\"ph8\">&lt;xref:System.Activities.NativeActivity%601&gt;</ph>.","pos":[793,1233],"source":"Activities are developed as CLR types that derive from either <xref:System.Activities.Activity>, <xref:System.Activities.CodeActivity>, <xref:System.Activities.AsyncCodeActivity>, or <xref:System.Activities.NativeActivity>, or their variants that return a value, <xref:System.Activities.Activity%601>, <xref:System.Activities.CodeActivity%601>, <xref:System.Activities.AsyncCodeActivity%601>, or <xref:System.Activities.NativeActivity%601>."},{"content":"Developing activities that derive from <ph id=\"ph1\">&lt;xref:System.Activities.Activity&gt;</ph> allows the user to assemble pre-existing activities to quickly create units of work that execute in the workflow environment.","pos":[1234,1432],"source":" Developing activities that derive from <xref:System.Activities.Activity> allows the user to assemble pre-existing activities to quickly create units of work that execute in the workflow environment."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.CodeActivity&gt;</ph>, on the other hand, enables execution logic to be authored in managed code using <ph id=\"ph2\">&lt;xref:System.Activities.CodeActivityContext&gt;</ph> primarily for access to activity arguments.","pos":[1433,1640],"source":"<xref:System.Activities.CodeActivity>, on the other hand, enables execution logic to be authored in managed code using <xref:System.Activities.CodeActivityContext> primarily for access to activity arguments."},{"content":"<ph id=\"ph1\">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> is similar to <ph id=\"ph2\">&lt;xref:System.Activities.CodeActivity&gt;</ph> except that it can be used to implement asynchronous tasks.","pos":[1641,1795],"source":"<xref:System.Activities.AsyncCodeActivity> is similar to <xref:System.Activities.CodeActivity> except that it can be used to implement asynchronous tasks."},{"content":"Developing activities that derive from <ph id=\"ph1\">&lt;xref:System.Activities.NativeActivity&gt;</ph> allows users to access the runtime through the <ph id=\"ph2\">&lt;xref:System.Activities.NativeActivityContext&gt;</ph> for functionality like scheduling children, creating bookmarks, invoking asynchronous work, registering transactions, and more.","pos":[1796,2096],"source":" Developing activities that derive from <xref:System.Activities.NativeActivity> allows users to access the runtime through the <xref:System.Activities.NativeActivityContext> for functionality like scheduling children, creating bookmarks, invoking asynchronous work, registering transactions, and more."},{"content":"Authoring activities that derive from <ph id=\"ph1\">&lt;xref:System.Activities.Activity&gt;</ph> is declarative and these activities can be authored in XAML.","pos":[2103,2235],"source":"Authoring activities that derive from <xref:System.Activities.Activity> is declarative and these activities can be authored in XAML."},{"content":"In the following example, an activity called <ph id=\"ph1\">`Prompt`</ph> is created using other activities for the execution body.","pos":[2236,2347],"source":" In the following example, an activity called `Prompt` is created using other activities for the execution body."},{"pos":[3067,3083],"content":"Activity Context","linkify":"Activity Context","nodes":[{"content":"Activity Context","pos":[0,16]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.ActivityContext&gt;</ph> is the activity author's interface to the workflow runtime and provides access to the runtime's wealth of features.","pos":[3087,3247],"source":"The <xref:System.Activities.ActivityContext> is the activity author's interface to the workflow runtime and provides access to the runtime's wealth of features."},{"content":"In the following example, an activity is defined that uses the execution context to create a bookmark (the mechanism that allows an activity to register a continuation point in its execution that can be resumed by a host passing data into the activity).","pos":[3248,3501]},{"pos":[3508,3655],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CFX_WorkflowApplicationExample#15<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[CFX_WorkflowApplicationExample#15](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]"},{"pos":[3664,3683],"content":"Activity Life Cycle","linkify":"Activity Life Cycle","nodes":[{"content":"Activity Life Cycle","pos":[0,19]}]},{"content":"An instance of an activity starts out in the <ph id=\"ph1\">&lt;xref:System.Activities.ActivityInstanceState&gt;</ph> state.","pos":[3687,3785],"source":"An instance of an activity starts out in the <xref:System.Activities.ActivityInstanceState> state."},{"content":"Unless exceptions are encountered, it remains in this state until all child activities are finished executing and any other pending work (<ph id=\"ph1\">&lt;xref:System.Activities.Bookmark&gt;</ph> objects, for instance) is completed, at which point it transitions to the <ph id=\"ph2\">&lt;xref:System.Activities.ActivityInstanceState&gt;</ph> state.","pos":[3786,4085],"source":" Unless exceptions are encountered, it remains in this state until all child activities are finished executing and any other pending work (<xref:System.Activities.Bookmark> objects, for instance) is completed, at which point it transitions to the <xref:System.Activities.ActivityInstanceState> state."},{"content":"The parent of an activity instance can request a child to cancel; if the child is able to be canceled it completes in the <ph id=\"ph1\">&lt;xref:System.Activities.ActivityInstanceState&gt;</ph> state.","pos":[4086,4261],"source":" The parent of an activity instance can request a child to cancel; if the child is able to be canceled it completes in the <xref:System.Activities.ActivityInstanceState> state."},{"content":"If an exception is thrown during execution, the runtime puts the activity into the <ph id=\"ph1\">&lt;xref:System.Activities.ActivityInstanceState&gt;</ph> state and propagates the exception up the parent chain of activities.","pos":[4262,4461],"source":" If an exception is thrown during execution, the runtime puts the activity into the <xref:System.Activities.ActivityInstanceState> state and propagates the exception up the parent chain of activities."},{"content":"Following are the three completion states of an activity:","pos":[4462,4519]},{"pos":[4529,4588],"content":"<bpt id=\"p1\">**</bpt>Closed:<ept id=\"p1\">**</ept> The activity has completed its work and exited.","source":"**Closed:** The activity has completed its work and exited."},{"content":"<bpt id=\"p1\">**</bpt>Canceled:<ept id=\"p1\">**</ept> The activity has gracefully abandoned its work and exited.","pos":[4598,4670],"source":"**Canceled:** The activity has gracefully abandoned its work and exited."},{"content":"Work is not explicitly rolled back when this state is entered.","pos":[4671,4733]},{"pos":[4743,4837],"content":"<bpt id=\"p1\">**</bpt>Faulted:<ept id=\"p1\">**</ept> The activity has encountered an error and has exited without completing its work.","source":"**Faulted:** The activity has encountered an error and has exited without completing its work."},{"content":"Activities remain in the <ph id=\"ph1\">&lt;xref:System.Activities.ActivityInstanceState&gt;</ph> state when they are persisted or unloaded.","pos":[4844,4958],"source":"Activities remain in the <xref:System.Activities.ActivityInstanceState> state when they are persisted or unloaded."}]}