{"content":"---\ntitle: \"Overview of Using Controls in Windows Forms\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Windows Forms, controls\"\n  - \"controls [Windows Forms]\"\n  - \"custom controls [Windows Forms]\"\nms.assetid: fddbe951-4485-459d-a5fd-665ea346dbc1\n---\n# Overview of Using Controls in Windows Forms\nThis topic describes the essential elements of a Windows Forms application and provides a simple example that uses controls and handles events in a Windows Forms application.  \n  \n## Simple Windows Forms Applications  \n At a minimum, a Windows Forms application consists of the following elements:  \n  \n-   One or more classes that derive from <xref:System.Windows.Forms.Form?displayProperty=nameWithType>.  \n  \n-   A `Main` method that invokes the `static` (`shared` in Visual Basic) <xref:System.Windows.Forms.Application.Run%2A> method and passes a <xref:System.Windows.Forms.Form> instance to it. The <xref:System.Windows.Forms.Application.Run%2A> method processes messages from the operating system to the application.  \n  \n The following code example shows the essential elements of a Windows Forms application.  \n  \n```vb  \nOption Explicit  \nOption Strict  \n  \nImports System  \nImports System.Windows.Forms  \n  \nPublic Class MyForm  \n   Inherits Form  \n  \n   Public Sub New()  \n      Me.Text = \"Hello World\"  \n   End Sub 'New  \n  \n   <STAThread()> _  \n   Public Shared Sub Main()  \n      Dim aform As New MyForm()  \n      ' The Application.Run method processes messages from the operating system   \n      ' to your application. If you comment out the next line of code,   \n      ' your application will compile and execute, but because it is not in the  \n      ' message loop, it will exit after an instance of the form is created.  \n      Application.Run(aform)  \n   End Sub  \nEnd Class  \n```  \n  \n```csharp  \nusing System;  \nusing System.Windows.Forms;  \n  \npublic class MyForm : Form {  \n  \n   public MyForm() {  \n      this.Text = \"Hello World\";  \n   }  \n   [STAThread]  \n   public static void Main(string[] args) {  \n     MyForm aform = new MyForm();  \n// The Application.Run method processes messages from the operating system   \n// to your application. If you comment out the next line of code,   \n// your application will compile and execute, but because it is not in the // message loop, it will exit after an instance of the form is created.  \n      Application.Run(aform);  \n   }  \n}  \n```  \n  \n## Using Controls in a Windows Forms Application  \n The following code example shows a simple application that illustrates how Windows Forms applications use controls and handle events. The example consists of three buttons on a form; each button changes the background color when clicked.  \n  \n```vb  \nOption Explicit  \nOption Strict  \n  \nImports System  \nImports System.ComponentModel  \nImports System.Windows.Forms  \nImports System.Resources  \nImports System.Drawing  \n  \nPublic Class MyForm  \n   Inherits Form  \n   Private red As Button  \n   Private blue As Button  \n   Private green As Button  \n  \n   Public Sub New()  \n      InitializeComponent()  \n   End Sub  \n  \n   Protected Overloads Overrides Sub Dispose(disposing as Boolean)  \n      MyBase.Dispose(disposing)  \n   End Sub  \n  \n   ' InitializeComponent is a helper method for the constructor.   \n   ' It is included for consistency with code that is   \n   ' auto-generated by the Windows Forms designer in Visual Studio.   \n   Private Sub InitializeComponent()  \n  \n      ' Creates three buttons, sets their properties, and attaches  \n      ' an event handler to each button.  \n      red = New Button()  \n      red.Text = \"Red\"  \n      red.Location = New Point(100, 50)  \n      red.Size = New Size(50, 50)  \n      AddHandler red.Click, AddressOf button_Click  \n      Controls.Add(red)  \n  \n      blue = New Button()  \n      blue.Text = \"Blue\"  \n      blue.Location = New Point(100, 100)  \n      blue.Size = New Size(50, 50)  \n      AddHandler blue.Click, AddressOf button_Click  \n      Controls.Add(blue)  \n  \n      green = New Button()  \n      green.Text = \"Green\"  \n      green.Location = New Point(100, 150)  \n      green.Size = New Size(50, 50)  \n      AddHandler green.Click, AddressOf button_Click  \n      Controls.Add(green)  \n   End Sub  \n  \n   ' Event handler.  \n   Private Sub button_Click(sender As Object, e As EventArgs)  \n      If sender Is red Then  \n         Me.BackColor = Color.Red  \n      Else  \n         If sender Is blue Then  \n            Me.BackColor = Color.Blue  \n         Else  \n            Me.BackColor = Color.Green  \n         End If  \n      End If   \n   End Sub  \n  \n   ' The STAThreadAttribute informs the common language runtime that  \n   ' Windows Forms uses the single-threaded apartment model.  \n   <STAThread()> _  \n   Public Shared Sub Main()  \n      Application.Run(New MyForm())  \n   End Sub  \nEnd Class  \n```  \n  \n```csharp  \nusing System;  \nusing System.ComponentModel;  \nusing System.Windows.Forms;  \nusing System.Resources;  \nusing System.Drawing;  \n  \npublic class MyForm : Form {  \n   private Button red;  \n   private Button blue;  \n   private Button green;  \n  \n   public MyForm() : base() {     \n      InitializeComponent();     \n   }  \n  \n   protected override void Dispose(bool disposing) {  \n      base.Dispose(disposing);  \n   }  \n  \n// InitializeComponent is a helper method for the constructor.   \n// It is included for consistency with code that is   \n// auto-generated by the Windows Forms designer in Visual Studio.   \n   private void InitializeComponent() {  \n  \n// A delegate for the click event of a button. The argument to   \n// the constructor contains a reference to the method that performs the   \n// event handling logic.  \n      EventHandler handler = new EventHandler(button_Click);  \n  \n// Creates three buttons, sets their properties, and attaches  \n// an event handler to each button.  \n  \n      red = new Button();  \n      red.Text = \"Red\";  \n      red.Location = new Point(100, 50);  \n      red.Size = new Size(50, 50);  \n      red.Click +=handler;  \n      Controls.Add(red);  \n  \n      blue = new Button();  \n      blue.Text = \"Blue\";  \n      blue.Location = new Point(100, 100);  \n      blue.Size = new Size(50, 50);  \n      blue.Click += handler;  \n      Controls.Add(blue);  \n  \n      green = new Button();  \n      green.Text = \"Green\";  \n      green.Location = new Point(100, 150);  \n      green.Size = new Size(50, 50);  \n      green.Click += handler;  \n      Controls.Add(green);        \n      }  \n  \n   // Event handler.  \n   private void button_Click(object sender, EventArgs e) {  \n            if (sender == red) this.BackColor = Color.Red ;  \n                  else if (sender == blue) this.BackColor = Color.Blue;  \n                  else this.BackColor = Color.Green;  \n        }  \n   // The STAThreadAttribute informs the common language runtime that  \n   // Windows Forms uses the single-threaded apartment model.  \n  [STAThread]  \n   public static void Main(string[] args) {  \n   Application.Run(new MyForm());  \n   }  \n  \n}  \n```  \n  \n## See also\n\n- [Developing Custom Windows Forms Controls with the .NET Framework](developing-custom-windows-forms-controls.md)\n- [Windows Forms Control Development Basics](windows-forms-control-development-basics.md)\n","nodes":[{"pos":[4,282],"embed":true,"restype":"x-metadata","content":"title: \"Overview of Using Controls in Windows Forms\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"Windows Forms, controls\"\n  - \"controls [Windows Forms]\"\n  - \"custom controls [Windows Forms]\"\nms.assetid: fddbe951-4485-459d-a5fd-665ea346dbc1","nodes":[{"content":"Overview of Using Controls in Windows Forms","nodes":[{"pos":[0,43],"content":"Overview of Using Controls in Windows Forms","nodes":[{"content":"Overview of Using Controls in Windows Forms","pos":[0,43]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[289,332],"content":"Overview of Using Controls in Windows Forms","linkify":"Overview of Using Controls in Windows Forms","nodes":[{"content":"Overview of Using Controls in Windows Forms","pos":[0,43]}]},{"content":"This topic describes the essential elements of a Windows Forms application and provides a simple example that uses controls and handles events in a Windows Forms application.","pos":[333,507]},{"pos":[516,549],"content":"Simple Windows Forms Applications","linkify":"Simple Windows Forms Applications","nodes":[{"content":"Simple Windows Forms Applications","pos":[0,33]}]},{"content":"At a minimum, a Windows Forms application consists of the following elements:","pos":[553,630]},{"pos":[640,739],"content":"One or more classes that derive from <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form?displayProperty=nameWithType&gt;</ph>.","source":"One or more classes that derive from <xref:System.Windows.Forms.Form?displayProperty=nameWithType>."},{"content":"A <ph id=\"ph1\">`Main`</ph> method that invokes the <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`shared`</ph> in Visual Basic) <ph id=\"ph4\">&lt;xref:System.Windows.Forms.Application.Run%2A&gt;</ph> method and passes a <ph id=\"ph5\">&lt;xref:System.Windows.Forms.Form&gt;</ph> instance to it.","pos":[749,933],"source":"A `Main` method that invokes the `static` (`shared` in Visual Basic) <xref:System.Windows.Forms.Application.Run%2A> method and passes a <xref:System.Windows.Forms.Form> instance to it."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Application.Run%2A&gt;</ph> method processes messages from the operating system to the application.","pos":[934,1056],"source":" The <xref:System.Windows.Forms.Application.Run%2A> method processes messages from the operating system to the application."},{"content":"The following code example shows the essential elements of a Windows Forms application.","pos":[1063,1150]},{"pos":[2449,2494],"content":"Using Controls in a Windows Forms Application","linkify":"Using Controls in a Windows Forms Application","nodes":[{"content":"Using Controls in a Windows Forms Application","pos":[0,45]}]},{"content":"The following code example shows a simple application that illustrates how Windows Forms applications use controls and handle events.","pos":[2498,2631]},{"content":"The example consists of three buttons on a form; each button changes the background color when clicked.","pos":[2632,2735]},{"pos":[7033,7041],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7045,7156],"content":"<bpt id=\"p1\">[</bpt>Developing Custom Windows Forms Controls with the .NET Framework<ept id=\"p1\">](developing-custom-windows-forms-controls.md)</ept>","source":"[Developing Custom Windows Forms Controls with the .NET Framework](developing-custom-windows-forms-controls.md)"},{"pos":[7159,7246],"content":"<bpt id=\"p1\">[</bpt>Windows Forms Control Development Basics<ept id=\"p1\">](windows-forms-control-development-basics.md)</ept>","source":"[Windows Forms Control Development Basics](windows-forms-control-development-basics.md)"}]}