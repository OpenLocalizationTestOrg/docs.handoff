{"content":"---\ntitle: \"How to: Rotate, Reflect, and Skew Images\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"images [Windows Forms], reflecting\"\n  - \"images [Windows Forms], rotating\"\n  - \"images [Windows Forms], skewing\"\nms.assetid: a3bf97eb-63ed-425a-ba07-dcc65efb567c\n---\n# How to: Rotate, Reflect, and Skew Images\nYou can rotate, reflect, and skew an image by specifying destination points for the upper-left, upper-right, and lower-left corners of the original image. The three destination points determine an affine transformation that maps the original rectangular image to a parallelogram.  \n  \n## Example  \n For example, suppose the original image is a rectangle with upper-left corner at (0, 0), upper-right corner at (100, 0), and lower-left corner at (0, 50). Now suppose you map those three points to destination points as follows.  \n  \n|Original point|Destination point|  \n|--------------------|-----------------------|  \n|Upper-left (0, 0)|(200, 20)|  \n|Upper-right (100, 0)|(110, 100)|  \n|Lower-left (0, 50)|(250, 30)|  \n  \n The following illustration shows the original image and the image mapped to the parallelogram. The original image has been skewed, reflected, rotated, and translated. The x-axis along the top edge of the original image is mapped to the line that runs through (200, 20) and (110, 100). The y-axis along the left edge of the original image is mapped to the line that runs through (200, 20) and (250, 30).  \n  \n ![The original image and the image mapped to the parallelogram.](./media/how-to-rotate-reflect-and-skew-images/reflected-skewed-rotated-illustration.gif)  \n  \n The following illustration shows a similar transformation applied to a photographic image:  \n  \n ![The picture of a climber and the picture mapped to the parallelogram.](./media/how-to-rotate-reflect-and-skew-images/reflected-skewed-rotated-photo.png)  \n  \n The following illustration shows a similar transformation applied to a metafile:  \n  \n ![Illustration of shapes and text and that mapped to the parallelogram.](./media/how-to-rotate-reflect-and-skew-images/reflected-skewed-rotated-metafile.png)  \n  \n The following example produces the images shown in the first illustration.  \n  \n [!code-csharp[System.Drawing.WorkingWithImages#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.WorkingWithImages/CS/Class1.cs#61)]\n [!code-vb[System.Drawing.WorkingWithImages#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.WorkingWithImages/VB/Class1.vb#61)]  \n  \n## Compiling the Code  \n The preceding example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. Make sure to replace `Stripes.bmp` with the path to an image that is valid on your system.  \n  \n## See also\n\n- [Working with Images, Bitmaps, Icons, and Metafiles](working-with-images-bitmaps-icons-and-metafiles.md)\n","nodes":[{"pos":[4,298],"embed":true,"restype":"x-metadata","content":"title: \"How to: Rotate, Reflect, and Skew Images\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"images [Windows Forms], reflecting\"\n  - \"images [Windows Forms], rotating\"\n  - \"images [Windows Forms], skewing\"\nms.assetid: a3bf97eb-63ed-425a-ba07-dcc65efb567c","nodes":[{"content":"How to: Rotate, Reflect, and Skew Images","nodes":[{"pos":[0,40],"content":"How to: Rotate, Reflect, and Skew Images","nodes":[{"content":"How to: Rotate, Reflect, and Skew Images","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[305,345],"content":"How to: Rotate, Reflect, and Skew Images","linkify":"How to: Rotate, Reflect, and Skew Images","nodes":[{"content":"How to: Rotate, Reflect, and Skew Images","pos":[0,40]}]},{"content":"You can rotate, reflect, and skew an image by specifying destination points for the upper-left, upper-right, and lower-left corners of the original image.","pos":[346,500]},{"content":"The three destination points determine an affine transformation that maps the original rectangular image to a parallelogram.","pos":[501,625]},{"pos":[634,641],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"For example, suppose the original image is a rectangle with upper-left corner at (0, 0), upper-right corner at (100, 0), and lower-left corner at (0, 50).","pos":[645,799]},{"content":"Now suppose you map those three points to destination points as follows.","pos":[800,872]},{"content":"Original point","pos":[879,893]},{"content":"Destination point","pos":[894,911]},{"content":"Upper-left (0, 0)","pos":[965,982]},{"content":"(200, 20)","pos":[983,992]},{"content":"Upper-right (100, 0)","pos":[997,1017]},{"content":"(110, 100)","pos":[1018,1028]},{"content":"Lower-left (0, 50)","pos":[1033,1051]},{"content":"(250, 30)","pos":[1052,1061]},{"content":"The following illustration shows the original image and the image mapped to the parallelogram.","pos":[1069,1163]},{"content":"The original image has been skewed, reflected, rotated, and translated.","pos":[1164,1235]},{"content":"The x-axis along the top edge of the original image is mapped to the line that runs through (200, 20) and (110, 100).","pos":[1236,1353]},{"content":"The y-axis along the left edge of the original image is mapped to the line that runs through (200, 20) and (250, 30).","pos":[1354,1471]},{"content":"The original image and the image mapped to the parallelogram.","pos":[1480,1541]},{"content":"The following illustration shows a similar transformation applied to a photographic image:","pos":[1638,1728]},{"content":"The picture of a climber and the picture mapped to the parallelogram.","pos":[1737,1806]},{"content":"The following illustration shows a similar transformation applied to a metafile:","pos":[1896,1976]},{"content":"Illustration of shapes and text and that mapped to the parallelogram.","pos":[1985,2054]},{"content":"The following example produces the images shown in the first illustration.","pos":[2147,2221]},{"pos":[2536,2554],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"The preceding example is designed for use with Windows Forms, and it requires <ph id=\"ph1\">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph><ph id=\"ph2\">`e`</ph>, which is a parameter of the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event handler.","pos":[2558,2767],"source":"The preceding example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler."},{"content":"Make sure to replace <ph id=\"ph1\">`Stripes.bmp`</ph> with the path to an image that is valid on your system.","pos":[2768,2858],"source":" Make sure to replace `Stripes.bmp` with the path to an image that is valid on your system."},{"pos":[2867,2875],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2879,2983],"content":"<bpt id=\"p1\">[</bpt>Working with Images, Bitmaps, Icons, and Metafiles<ept id=\"p1\">](working-with-images-bitmaps-icons-and-metafiles.md)</ept>","source":"[Working with Images, Bitmaps, Icons, and Metafiles](working-with-images-bitmaps-icons-and-metafiles.md)"}]}