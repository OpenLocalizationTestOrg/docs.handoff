{"content":"---\ntitle: \"Generating and Compiling Source Code from a CodeDOM Graph | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"code compilers\"\n  - \"CodeDOM, generating source code\"\n  - \"Code Document Object Model, graphs\"\n  - \"templated code generation\"\n  - \"source code, generating\"\n  - \"dynamically representing source code\"\n  - \"generating CodeDOM graphs\"\n  - \"Code Document Object Model, generating source code\"\n  - \"translating language to language\"\n  - \"compiling assemblies\"\n  - \"generating source code in multiple languages\"\n  - \"graphing with CodeDOM\"\n  - \"dynamic compilation\"\n  - \"assemblies [.NET Framework], CodeDOM\"\n  - \"source code generation\"\n  - \"outputting source code by CodeDOM\"\n  - \"code generators\"\n  - \"compiling source code, multiple languages\"\n  - \"CodeDOM, graphs\"\nms.assetid: 6c864c8e-6dd3-4a65-ace0-36879d9a9c42\ncaps.latest.revision: 20\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# Generating and Compiling Source Code from a CodeDOM Graph\nThe <xref:System.CodeDom.Compiler> namespace provides interfaces for generating source code from CodeDOM object graphs and for managing compilation with supported compilers. A code provider can produce source code in a particular programming language according to a CodeDOM graph. A class that derives from <xref:System.CodeDom.Compiler.CodeDomProvider> can typically provide methods for generating and compiling code for the language the provider supports.  \n  \n## Using a CodeDOM code provider to generate source code  \n To generate source code in a particular language, you need a CodeDOM graph that represents the structure of the source code to generate.  \n  \n The following example demonstrate how to create an instance of a <xref:Microsoft.CSharp.CSharpCodeProvider>:  \n  \n [!code-cpp[CodeDomExample#21](../../../samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source3.cpp#21)]\n [!code-csharp[CodeDomExample#21](../../../samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source3.cs#21)]\n [!code-vb[CodeDomExample#21](../../../samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source3.vb#21)]  \n  \n The graph for code generation is typically contained in a <xref:System.CodeDom.CodeCompileUnit>. To generate code for a **CodeCompileUnit** that contains a CodeDOM graph, call the <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> method of the code provider. This method has a parameter for a <xref:System.IO.TextWriter> that it uses to generate the source code, so it is sometimes necessary to first create a **TextWriter** that can be written to. The following example demonstrates generating code from a **CodeCompileUnit** and writing the generated source code to a file named HelloWorld.cs.  \n  \n [!code-cpp[CodeDomExample#22](../../../samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source3.cpp#22)]\n [!code-csharp[CodeDomExample#22](../../../samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source3.cs#22)]\n [!code-vb[CodeDomExample#22](../../../samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source3.vb#22)]  \n  \n## Using a CodeDOM code provider to compile assemblies  \n **Invoking compilation**  \n  \n To compile an assembly using a CodeDom provider, you must have either source code to compile in a language for which you have a compiler, or a CodeDOM graph that source code to compile can be generated from.  \n  \n If you are compiling from a CodeDOM graph, pass the <xref:System.CodeDom.CodeCompileUnit> containing the graph to the <xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom%2A> method of the code provider. If you have a source code file in a language that the compiler understands, pass the name of the file containing the source code to the <xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile%2A> method of the CodeDom provider. You can also pass a string containing source code in a language that the compiler understands to the <xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource%2A> method of the CodeDom provider.  \n  \n **Configuring compilation parameters**  \n  \n All of the standard compilation-invoking methods of a CodeDom provider have a parameter of type <xref:System.CodeDom.Compiler.CompilerParameters> that indicates the options to use for compilation.  \n  \n You can specify a file name for the output assembly in the <xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A> property of the **CompilerParameters**. Otherwise, a default output file name will be used.  \n  \n By default, a new **CompilerParameters** is initialized with its <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> property set to **false**. If you are compiling an executable program, you must set the **GenerateExecutable** property to **true**. When the **GenerateExecutable** is set to **false**, the compiler will generate a class library.  \n  \n If you are compiling an executable from a CodeDOM graph, a <xref:System.CodeDom.CodeEntryPointMethod> must be defined in the graph. If there are multiple code entry points, it may be necessary to set the <xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A> property of the **CompilerParameters** to the name of the class that defines the entry point to use.  \n  \n To include debug information in a generated executable, set the <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A> property to **true**.  \n  \n If your project references any assemblies, you must specify the assembly names as items in a <xref:System.Collections.Specialized.StringCollection> as the <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A> property of the **CompilerParameters** you use when invoking compilation.  \n  \n You can compile an assembly that is written to memory rather than disk by setting the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A> property to **true**. When an assembly is generated in memory, your code can obtain a reference to the generated assembly from the <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> property of a <xref:System.CodeDom.Compiler.CompilerResults>. If an assembly is written to disk, you can obtain the path to the generated assembly from the <xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A> property of a **CompilerResults**.  \n  \n To specify a custom command-line arguments string to use when invoking the compilation process, set the string in the <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A> property.  \n  \n If a Win32 security token is required to invoke the compiler process, specify the token in the <xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A> property.  \n  \n To link a Win32 resource file into the compiled assembly, specify the name of the Win32 resource file in the <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> property.  \n  \n To specify a warning level at which to halt compilation, set the <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A> property to an integer that represents the warning level at which to halt compilation. You can also configure the compiler to halt compilation if warnings are encountered by setting the <xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A> property to **true**.  \n  \n The following code example demonstrates compiling a source file using a CodeDom provider derived from the <xref:System.CodeDom.Compiler.CodeDomProvider> class.  \n  \n [!code-cpp[CodeDomExample#23](../../../samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source3.cpp#23)]\n [!code-csharp[CodeDomExample#23](../../../samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source3.cs#23)]\n [!code-vb[CodeDomExample#23](../../../samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source3.vb#23)]  \n  \n## Languages with Initial Support  \n The .NET Framework provides code compilers and code generators for the following languages: C#, Visual Basic, C++, and JScript. CodeDOM support can be extended to other languages by implementing language-specific code generators and code compilers.  \n  \n## See Also  \n <xref:System.CodeDom>   \n <xref:System.CodeDom.Compiler>   \n [Dynamic Source Code Generation and Compilation](../../../docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md)   \n [CodeDOM Quick Reference](http://msdn.microsoft.com/en-us/c77b8bfd-0a32-4e36-b59a-4f687f32c524)","nodes":[{"pos":[4,1074],"embed":true,"restype":"x-metadata","content":"title: \"Generating and Compiling Source Code from a CodeDOM Graph | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"code compilers\"\n  - \"CodeDOM, generating source code\"\n  - \"Code Document Object Model, graphs\"\n  - \"templated code generation\"\n  - \"source code, generating\"\n  - \"dynamically representing source code\"\n  - \"generating CodeDOM graphs\"\n  - \"Code Document Object Model, generating source code\"\n  - \"translating language to language\"\n  - \"compiling assemblies\"\n  - \"generating source code in multiple languages\"\n  - \"graphing with CodeDOM\"\n  - \"dynamic compilation\"\n  - \"assemblies [.NET Framework], CodeDOM\"\n  - \"source code generation\"\n  - \"outputting source code by CodeDOM\"\n  - \"code generators\"\n  - \"compiling source code, multiple languages\"\n  - \"CodeDOM, graphs\"\nms.assetid: 6c864c8e-6dd3-4a65-ace0-36879d9a9c42\ncaps.latest.revision: 20\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"Generating and Compiling Source Code from a CodeDOM Graph | Microsoft Docs","nodes":[{"pos":[0,74],"content":"Generating and Compiling Source Code from a CodeDOM Graph | Microsoft Docs","nodes":[{"content":"Generating and Compiling Source Code from a CodeDOM Graph | Microsoft Docs","pos":[0,74]}]}],"path":["title"]}],"yml":true},{"pos":[1081,1138],"content":"Generating and Compiling Source Code from a CodeDOM Graph","linkify":"Generating and Compiling Source Code from a CodeDOM Graph","nodes":[{"content":"Generating and Compiling Source Code from a CodeDOM Graph","pos":[0,57]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler&gt;</ph> namespace provides interfaces for generating source code from CodeDOM object graphs and for managing compilation with supported compilers.","pos":[1139,1312],"source":"The <xref:System.CodeDom.Compiler> namespace provides interfaces for generating source code from CodeDOM object graphs and for managing compilation with supported compilers."},{"content":"A code provider can produce source code in a particular programming language according to a CodeDOM graph.","pos":[1313,1419]},{"content":"A class that derives from <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> can typically provide methods for generating and compiling code for the language the provider supports.","pos":[1420,1596],"source":" A class that derives from <xref:System.CodeDom.Compiler.CodeDomProvider> can typically provide methods for generating and compiling code for the language the provider supports."},{"pos":[1605,1658],"content":"Using a CodeDOM code provider to generate source code","linkify":"Using a CodeDOM code provider to generate source code","nodes":[{"content":"Using a CodeDOM code provider to generate source code","pos":[0,53]}]},{"content":"To generate source code in a particular language, you need a CodeDOM graph that represents the structure of the source code to generate.","pos":[1662,1798]},{"content":"The following example demonstrate how to create an instance of a <ph id=\"ph1\">&lt;xref:Microsoft.CSharp.CSharpCodeProvider&gt;</ph>:","pos":[1805,1913],"source":"The following example demonstrate how to create an instance of a <xref:Microsoft.CSharp.CSharpCodeProvider>:"},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>CodeDomExample#21<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source3.cpp#21)</ept><ept id=\"p1\">]</ept>","pos":[1920,2031],"source":"[!code-cpp[CodeDomExample#21](../../../samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source3.cpp#21)]"},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CodeDomExample#21<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source3.cs#21)</ept><ept id=\"p1\">]</ept>","pos":[2033,2148],"source":"[!code-csharp[CodeDomExample#21](../../../samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source3.cs#21)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>CodeDomExample#21<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source3.vb#21)</ept><ept id=\"p1\">]</ept>","pos":[2150,2266],"source":"[!code-vb[CodeDomExample#21](../../../samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source3.vb#21)]"},{"content":"The graph for code generation is typically contained in a <ph id=\"ph1\">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.","pos":[2273,2369],"source":"The graph for code generation is typically contained in a <xref:System.CodeDom.CodeCompileUnit>."},{"content":"To generate code for a <bpt id=\"p1\">**</bpt>CodeCompileUnit<ept id=\"p1\">**</ept> that contains a CodeDOM graph, call the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A&gt;</ph> method of the code provider.","pos":[2370,2559],"source":" To generate code for a **CodeCompileUnit** that contains a CodeDOM graph, call the <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> method of the code provider."},{"content":"This method has a parameter for a <ph id=\"ph1\">&lt;xref:System.IO.TextWriter&gt;</ph> that it uses to generate the source code, so it is sometimes necessary to first create a <bpt id=\"p1\">**</bpt>TextWriter<ept id=\"p1\">**</ept> that can be written to.","pos":[2560,2749],"source":" This method has a parameter for a <xref:System.IO.TextWriter> that it uses to generate the source code, so it is sometimes necessary to first create a **TextWriter** that can be written to."},{"content":"The following example demonstrates generating code from a <bpt id=\"p1\">**</bpt>CodeCompileUnit<ept id=\"p1\">**</ept> and writing the generated source code to a file named HelloWorld.cs.","pos":[2750,2896],"source":" The following example demonstrates generating code from a **CodeCompileUnit** and writing the generated source code to a file named HelloWorld.cs."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>CodeDomExample#22<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source3.cpp#22)</ept><ept id=\"p1\">]</ept>","pos":[2903,3014],"source":"[!code-cpp[CodeDomExample#22](../../../samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source3.cpp#22)]"},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CodeDomExample#22<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source3.cs#22)</ept><ept id=\"p1\">]</ept>","pos":[3016,3131],"source":"[!code-csharp[CodeDomExample#22](../../../samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source3.cs#22)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>CodeDomExample#22<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source3.vb#22)</ept><ept id=\"p1\">]</ept>","pos":[3133,3249],"source":"[!code-vb[CodeDomExample#22](../../../samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source3.vb#22)]"},{"pos":[3258,3309],"content":"Using a CodeDOM code provider to compile assemblies","linkify":"Using a CodeDOM code provider to compile assemblies","nodes":[{"content":"Using a CodeDOM code provider to compile assemblies","pos":[0,51]}]},{"pos":[3313,3337],"content":"<bpt id=\"p1\">**</bpt>Invoking compilation<ept id=\"p1\">**</ept>","source":"**Invoking compilation**"},{"content":"To compile an assembly using a CodeDom provider, you must have either source code to compile in a language for which you have a compiler, or a CodeDOM graph that source code to compile can be generated from.","pos":[3344,3551]},{"content":"If you are compiling from a CodeDOM graph, pass the <ph id=\"ph1\">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> containing the graph to the <ph id=\"ph2\">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom%2A&gt;</ph> method of the code provider.","pos":[3558,3777],"source":"If you are compiling from a CodeDOM graph, pass the <xref:System.CodeDom.CodeCompileUnit> containing the graph to the <xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom%2A> method of the code provider."},{"content":"If you have a source code file in a language that the compiler understands, pass the name of the file containing the source code to the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile%2A&gt;</ph> method of the CodeDom provider.","pos":[3778,4019],"source":" If you have a source code file in a language that the compiler understands, pass the name of the file containing the source code to the <xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile%2A> method of the CodeDom provider."},{"content":"You can also pass a string containing source code in a language that the compiler understands to the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource%2A&gt;</ph> method of the CodeDom provider.","pos":[4020,4228],"source":" You can also pass a string containing source code in a language that the compiler understands to the <xref:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource%2A> method of the CodeDom provider."},{"pos":[4235,4273],"content":"<bpt id=\"p1\">**</bpt>Configuring compilation parameters<ept id=\"p1\">**</ept>","source":"**Configuring compilation parameters**"},{"content":"All of the standard compilation-invoking methods of a CodeDom provider have a parameter of type <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters&gt;</ph> that indicates the options to use for compilation.","pos":[4280,4476],"source":"All of the standard compilation-invoking methods of a CodeDom provider have a parameter of type <xref:System.CodeDom.Compiler.CompilerParameters> that indicates the options to use for compilation."},{"content":"You can specify a file name for the output assembly in the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A&gt;</ph> property of the <bpt id=\"p1\">**</bpt>CompilerParameters<ept id=\"p1\">**</ept>.","pos":[4483,4649],"source":"You can specify a file name for the output assembly in the <xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A> property of the **CompilerParameters**."},{"content":"Otherwise, a default output file name will be used.","pos":[4650,4701]},{"content":"By default, a new <bpt id=\"p1\">**</bpt>CompilerParameters<ept id=\"p1\">**</ept> is initialized with its <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A&gt;</ph> property set to <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","pos":[4708,4871],"source":"By default, a new **CompilerParameters** is initialized with its <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> property set to **false**."},{"content":"If you are compiling an executable program, you must set the <bpt id=\"p1\">**</bpt>GenerateExecutable<ept id=\"p1\">**</ept> property to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>.","pos":[4872,4977],"source":" If you are compiling an executable program, you must set the **GenerateExecutable** property to **true**."},{"content":"When the <bpt id=\"p1\">**</bpt>GenerateExecutable<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>, the compiler will generate a class library.","pos":[4978,5074],"source":" When the **GenerateExecutable** is set to **false**, the compiler will generate a class library."},{"content":"If you are compiling an executable from a CodeDOM graph, a <ph id=\"ph1\">&lt;xref:System.CodeDom.CodeEntryPointMethod&gt;</ph> must be defined in the graph.","pos":[5081,5212],"source":"If you are compiling an executable from a CodeDOM graph, a <xref:System.CodeDom.CodeEntryPointMethod> must be defined in the graph."},{"content":"If there are multiple code entry points, it may be necessary to set the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A&gt;</ph> property of the <bpt id=\"p1\">**</bpt>CompilerParameters<ept id=\"p1\">**</ept> to the name of the class that defines the entry point to use.","pos":[5213,5448],"source":" If there are multiple code entry points, it may be necessary to set the <xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A> property of the **CompilerParameters** to the name of the class that defines the entry point to use."},{"pos":[5455,5617],"content":"To include debug information in a generated executable, set the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A&gt;</ph> property to <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","source":"To include debug information in a generated executable, set the <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A> property to **true**."},{"pos":[5624,5926],"content":"If your project references any assemblies, you must specify the assembly names as items in a <ph id=\"ph1\">&lt;xref:System.Collections.Specialized.StringCollection&gt;</ph> as the <ph id=\"ph2\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A&gt;</ph> property of the <bpt id=\"p1\">**</bpt>CompilerParameters<ept id=\"p1\">**</ept> you use when invoking compilation.","source":"If your project references any assemblies, you must specify the assembly names as items in a <xref:System.Collections.Specialized.StringCollection> as the <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A> property of the **CompilerParameters** you use when invoking compilation."},{"content":"You can compile an assembly that is written to memory rather than disk by setting the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A&gt;</ph> property to <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","pos":[5933,6110],"source":"You can compile an assembly that is written to memory rather than disk by setting the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A> property to **true**."},{"content":"When an assembly is generated in memory, your code can obtain a reference to the generated assembly from the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A&gt;</ph> property of a <ph id=\"ph2\">&lt;xref:System.CodeDom.Compiler.CompilerResults&gt;</ph>.","pos":[6111,6348],"source":" When an assembly is generated in memory, your code can obtain a reference to the generated assembly from the <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> property of a <xref:System.CodeDom.Compiler.CompilerResults>."},{"content":"If an assembly is written to disk, you can obtain the path to the generated assembly from the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A&gt;</ph> property of a <bpt id=\"p1\">**</bpt>CompilerResults<ept id=\"p1\">**</ept>.","pos":[6349,6542],"source":" If an assembly is written to disk, you can obtain the path to the generated assembly from the <xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A> property of a **CompilerResults**."},{"content":"To specify a custom command-line arguments string to use when invoking the compilation process, set the string in the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A&gt;</ph> property.","pos":[6549,6745],"source":"To specify a custom command-line arguments string to use when invoking the compilation process, set the string in the <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A> property."},{"content":"If a Win32 security token is required to invoke the compiler process, specify the token in the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A&gt;</ph> property.","pos":[6752,6919],"source":"If a Win32 security token is required to invoke the compiler process, specify the token in the <xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A> property."},{"content":"To link a Win32 resource file into the compiled assembly, specify the name of the Win32 resource file in the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A&gt;</ph> property.","pos":[6926,7111],"source":"To link a Win32 resource file into the compiled assembly, specify the name of the Win32 resource file in the <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> property."},{"content":"To specify a warning level at which to halt compilation, set the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A&gt;</ph> property to an integer that represents the warning level at which to halt compilation.","pos":[7118,7335],"source":"To specify a warning level at which to halt compilation, set the <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A> property to an integer that represents the warning level at which to halt compilation."},{"content":"You can also configure the compiler to halt compilation if warnings are encountered by setting the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A&gt;</ph> property to <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","pos":[7336,7531],"source":" You can also configure the compiler to halt compilation if warnings are encountered by setting the <xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A> property to **true**."},{"content":"The following code example demonstrates compiling a source file using a CodeDom provider derived from the <ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class.","pos":[7538,7697],"source":"The following code example demonstrates compiling a source file using a CodeDom provider derived from the <xref:System.CodeDom.Compiler.CodeDomProvider> class."},{"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>CodeDomExample#23<ept id=\"p2\">](../../../samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source3.cpp#23)</ept><ept id=\"p1\">]</ept>","pos":[7704,7815],"source":"[!code-cpp[CodeDomExample#23](../../../samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source3.cpp#23)]"},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CodeDomExample#23<ept id=\"p2\">](../../../samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source3.cs#23)</ept><ept id=\"p1\">]</ept>","pos":[7817,7932],"source":"[!code-csharp[CodeDomExample#23](../../../samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source3.cs#23)]"},{"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>CodeDomExample#23<ept id=\"p2\">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source3.vb#23)</ept><ept id=\"p1\">]</ept>","pos":[7934,8050],"source":"[!code-vb[CodeDomExample#23](../../../samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source3.vb#23)]"},{"pos":[8059,8089],"content":"Languages with Initial Support","linkify":"Languages with Initial Support","nodes":[{"content":"Languages with Initial Support","pos":[0,30]}]},{"content":"The .NET Framework provides code compilers and code generators for the following languages: C#, Visual Basic, C++, and JScript.","pos":[8093,8220]},{"content":"CodeDOM support can be extended to other languages by implementing language-specific code generators and code compilers.","pos":[8221,8341]},{"pos":[8350,8358],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.CodeDom&gt;</ph>","pos":[8362,8383],"source":"<xref:System.CodeDom> "},{"content":"<ph id=\"ph1\">&lt;xref:System.CodeDom.Compiler&gt;</ph>","pos":[8388,8418],"source":"<xref:System.CodeDom.Compiler> "},{"content":"<bpt id=\"p1\">[</bpt>Dynamic Source Code Generation and Compilation<ept id=\"p1\">](../../../docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md)</ept><ph id=\"ph1\"> </ph>","pos":[8423,8570],"source":"[Dynamic Source Code Generation and Compilation](../../../docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md) "},{"content":"<bpt id=\"p1\">[</bpt>CodeDOM Quick Reference<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c77b8bfd-0a32-4e36-b59a-4f687f32c524)</ept>","pos":[8574,8669],"source":"[CodeDOM Quick Reference](http://msdn.microsoft.com/en-us/c77b8bfd-0a32-4e36-b59a-4f687f32c524)"}]}