{"content":"---\ntitle: What's new in C# 7.2\ndescription: An overview of new features in C# 7.2.\nms.date: 08/16/2017\n---\n\n# What's new in C# 7.2\n\nC# 7.2 is another point release that adds a number of useful features.\nOne theme for this release is working more efficiently with value types by\navoiding unnecessary copies or allocations.\n\nThe remaining features are small, nice-to-have features.\n\nC# 7.2 uses the [language version selection](../language-reference/configure-language-version.md)\nconfiguration element to select the compiler language version.\n\nThe new language features in this release are:\n\n* [Techniques for writing safe efficient code](#safe-efficient-code-enhancements)\n  - A combination of syntax improvements that enable working with value types using reference semantics.\n* [Non-trailing named arguments](#non-trailing-named-arguments)\n  - Named arguments can be followed by positional arguments.\n* [Leading underscores in numeric literals](#leading-underscores-in-numeric-literals)\n  - Numeric literals can now have leading underscores before any printed digits.\n* [`private protected` access modifier](#private-protected-access-modifier)\n  - The `private protected` access modifier enables access for derived classes in the same assembly.\n* [Conditional `ref` expressions](#conditional-ref-expressions)\n  - The result of a conditional expression (`?:`) can now be a reference.\n\n## Safe efficient code enhancements\n\nLanguage features introduced in 7.2 let you work with value types\nwhile using reference semantics. They\nare designed to increase performance by minimizing copying value types without\nincurring the memory allocations associated with using reference types. The\nfeatures include:\n\n- The `in` modifier on parameters, to specify that an argument is passed by reference but not modified by the called method. Adding the `in` modifier to an argument is a [source compatible change](version-update-considerations.md#source-compatible-changes).\n- The `ref readonly` modifier on method returns, to indicate that a method returns its value by reference but doesn't allow writes to that object. Adding the `ref readonly` modifier is a [source compatible change](version-update-considerations.md#source-compatible-changes), if the return is assigned to a value. Adding the `readonly` modifier to an existing `ref` return statement is an [incompatible change](version-update-considerations.md#incompatible-changes). It requires callers to update the declaration of `ref` local variables to include the `readonly` modifier.\n- The `readonly struct` declaration, to indicate that a struct is immutable and should be passed as an `in` parameter to its member methods. Adding the `readonly` modifier to an existing struct declaration is a [binary compatible change](version-update-considerations.md#binary-compatible-changes).\n- The `ref struct` declaration, to indicate that a struct type accesses managed memory directly and must always be stack allocated. Adding the `ref` modifier to an existing `struct` declaration is an [incompatible change](version-update-considerations.md#incompatible-changes). A `ref struct` cannot be a member of a class or used in other locations where it may be allocated on the heap.\n\nYou can read more about all these changes in [Write safe efficient code](../write-safe-efficient-code.md).\n\n## Non-trailing named arguments\n\nMethod calls may now use named arguments that precede positional arguments when those\nnamed arguments are in the correct positions. For more information see\n[Named and optional arguments](../programming-guide/classes-and-structs/named-and-optional-arguments.md).\n\n## Leading underscores in numeric literals\n\nThe implementation of support for digit separators in C# 7.0\ndidn't allow the `_` to be the first character of the literal value. Hex\nand binary numeric literals may now begin with an `_`.\n\nFor example:\n\n```csharp\nint binaryValue = 0b_0101_0101;\n```\n\n## _private protected_ access modifier\n\nA new compound access modifier: `private protected` indicates that a member may be\naccessed by containing class or derived classes that are declared in the same assembly. While `protected internal`\nallows access by derived classes or classes that are in the same assembly, `private protected`\nlimits access to derived types declared in the same assembly.\n\nFor more information see [access modifiers](../language-reference/keywords/access-modifiers.md) in the language reference.\n\n## Conditional `ref` expressions\n\nFinally, the conditional expression may produce a ref result instead of a value result. For example, you would write the following to retrieve a reference to the first element in one of two arrays:\n\n```csharp\nref var r = ref (arr != null ? ref arr[0] : ref otherArr[0]);\n```\n\nThe variable `r` is a reference to the first value in either `arr` or `otherArr`.\n\nFor more information, see [conditional operator (?:)](../language-reference/operators/conditional-operator.md) in the language reference.\n","nodes":[{"pos":[4,103],"embed":true,"restype":"x-metadata","content":"title: What's new in C# 7.2\ndescription: An overview of new features in C# 7.2.\nms.date: 08/16/2017","nodes":[{"content":"What's new in C# 7.2","nodes":[{"pos":[0,20],"content":"What's new in C# 7.2","nodes":[{"content":"What's new in C# 7.2","pos":[0,20]}]}],"path":["title"],"nosxs":false},{"content":"An overview of new features in C# 7.2.","nodes":[{"pos":[0,38],"content":"An overview of new features in C# 7.2.","nodes":[{"content":"An overview of new features in C# 7.2.","pos":[0,38]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[111,131],"content":"What's new in C# 7.2","linkify":"What's new in C# 7.2","nodes":[{"content":"What's new in C# 7.2","pos":[0,20]}]},{"content":"C# 7.2 is another point release that adds a number of useful features.","pos":[133,203]},{"content":"One theme for this release is working more efficiently with value types by avoiding unnecessary copies or allocations.","pos":[204,322],"source":"\nOne theme for this release is working more efficiently with value types by\navoiding unnecessary copies or allocations."},{"content":"The remaining features are small, nice-to-have features.","pos":[324,380]},{"pos":[382,542],"content":"C# 7.2 uses the <bpt id=\"p1\">[</bpt>language version selection<ept id=\"p1\">](../language-reference/configure-language-version.md)</ept> configuration element to select the compiler language version.","source":"C# 7.2 uses the [language version selection](../language-reference/configure-language-version.md)\nconfiguration element to select the compiler language version."},{"content":"The new language features in this release are:","pos":[544,590]},{"pos":[594,673],"content":"<bpt id=\"p1\">[</bpt>Techniques for writing safe efficient code<ept id=\"p1\">](#safe-efficient-code-enhancements)</ept>","source":"[Techniques for writing safe efficient code](#safe-efficient-code-enhancements)"},{"content":"A combination of syntax improvements that enable working with value types using reference semantics.","pos":[678,778]},{"pos":[781,842],"content":"<bpt id=\"p1\">[</bpt>Non-trailing named arguments<ept id=\"p1\">](#non-trailing-named-arguments)</ept>","source":"[Non-trailing named arguments](#non-trailing-named-arguments)"},{"content":"Named arguments can be followed by positional arguments.","pos":[847,903]},{"pos":[906,989],"content":"<bpt id=\"p1\">[</bpt>Leading underscores in numeric literals<ept id=\"p1\">](#leading-underscores-in-numeric-literals)</ept>","source":"[Leading underscores in numeric literals](#leading-underscores-in-numeric-literals)"},{"content":"Numeric literals can now have leading underscores before any printed digits.","pos":[994,1070]},{"pos":[1073,1146],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`private protected`</ph> access modifier<ept id=\"p1\">](#private-protected-access-modifier)</ept>","source":"[`private protected` access modifier](#private-protected-access-modifier)"},{"pos":[1151,1247],"content":"The <ph id=\"ph1\">`private protected`</ph> access modifier enables access for derived classes in the same assembly.","source":"The `private protected` access modifier enables access for derived classes in the same assembly."},{"pos":[1250,1311],"content":"<bpt id=\"p1\">[</bpt>Conditional <ph id=\"ph1\">`ref`</ph> expressions<ept id=\"p1\">](#conditional-ref-expressions)</ept>","source":"[Conditional `ref` expressions](#conditional-ref-expressions)"},{"pos":[1316,1385],"content":"The result of a conditional expression (<ph id=\"ph1\">`?:`</ph>) can now be a reference.","source":"The result of a conditional expression (`?:`) can now be a reference."},{"pos":[1390,1422],"content":"Safe efficient code enhancements","linkify":"Safe efficient code enhancements","nodes":[{"content":"Safe efficient code enhancements","pos":[0,32]}]},{"content":"Language features introduced in 7.2 let you work with value types while using reference semantics.","pos":[1424,1522],"source":"Language features introduced in 7.2 let you work with value types\nwhile using reference semantics."},{"content":"They are designed to increase performance by minimizing copying value types without incurring the memory allocations associated with using reference types.","pos":[1523,1678],"source":" They\nare designed to increase performance by minimizing copying value types without\nincurring the memory allocations associated with using reference types."},{"content":"The features include:","pos":[1679,1700],"source":" The\nfeatures include:"},{"content":"The <ph id=\"ph1\">`in`</ph> modifier on parameters, to specify that an argument is passed by reference but not modified by the called method.","pos":[1704,1826],"source":"The `in` modifier on parameters, to specify that an argument is passed by reference but not modified by the called method."},{"content":"Adding the <ph id=\"ph1\">`in`</ph> modifier to an argument is a <bpt id=\"p1\">[</bpt>source compatible change<ept id=\"p1\">](version-update-considerations.md#source-compatible-changes)</ept>.","pos":[1827,1959],"source":" Adding the `in` modifier to an argument is a [source compatible change](version-update-considerations.md#source-compatible-changes)."},{"content":"The <ph id=\"ph1\">`ref readonly`</ph> modifier on method returns, to indicate that a method returns its value by reference but doesn't allow writes to that object.","pos":[1962,2106],"source":"The `ref readonly` modifier on method returns, to indicate that a method returns its value by reference but doesn't allow writes to that object."},{"content":"Adding the <ph id=\"ph1\">`ref readonly`</ph> modifier is a <bpt id=\"p1\">[</bpt>source compatible change<ept id=\"p1\">](version-update-considerations.md#source-compatible-changes)</ept>, if the return is assigned to a value.","pos":[2107,2272],"source":" Adding the `ref readonly` modifier is a [source compatible change](version-update-considerations.md#source-compatible-changes), if the return is assigned to a value."},{"content":"Adding the <ph id=\"ph1\">`readonly`</ph> modifier to an existing <ph id=\"ph2\">`ref`</ph> return statement is an <bpt id=\"p1\">[</bpt>incompatible change<ept id=\"p1\">](version-update-considerations.md#incompatible-changes)</ept>.","pos":[2273,2425],"source":" Adding the `readonly` modifier to an existing `ref` return statement is an [incompatible change](version-update-considerations.md#incompatible-changes)."},{"content":"It requires callers to update the declaration of <ph id=\"ph1\">`ref`</ph> local variables to include the <ph id=\"ph2\">`readonly`</ph> modifier.","pos":[2426,2532],"source":" It requires callers to update the declaration of `ref` local variables to include the `readonly` modifier."},{"content":"The <ph id=\"ph1\">`readonly struct`</ph> declaration, to indicate that a struct is immutable and should be passed as an <ph id=\"ph2\">`in`</ph> parameter to its member methods.","pos":[2535,2673],"source":"The `readonly struct` declaration, to indicate that a struct is immutable and should be passed as an `in` parameter to its member methods."},{"content":"Adding the <ph id=\"ph1\">`readonly`</ph> modifier to an existing struct declaration is a <bpt id=\"p1\">[</bpt>binary compatible change<ept id=\"p1\">](version-update-considerations.md#binary-compatible-changes)</ept>.","pos":[2674,2831],"source":" Adding the `readonly` modifier to an existing struct declaration is a [binary compatible change](version-update-considerations.md#binary-compatible-changes)."},{"content":"The <ph id=\"ph1\">`ref struct`</ph> declaration, to indicate that a struct type accesses managed memory directly and must always be stack allocated.","pos":[2834,2963],"source":"The `ref struct` declaration, to indicate that a struct type accesses managed memory directly and must always be stack allocated."},{"content":"Adding the <ph id=\"ph1\">`ref`</ph> modifier to an existing <ph id=\"ph2\">`struct`</ph> declaration is an <bpt id=\"p1\">[</bpt>incompatible change<ept id=\"p1\">](version-update-considerations.md#incompatible-changes)</ept>.","pos":[2964,3109],"source":" Adding the `ref` modifier to an existing `struct` declaration is an [incompatible change](version-update-considerations.md#incompatible-changes)."},{"content":"A <ph id=\"ph1\">`ref struct`</ph> cannot be a member of a class or used in other locations where it may be allocated on the heap.","pos":[3110,3220],"source":" A `ref struct` cannot be a member of a class or used in other locations where it may be allocated on the heap."},{"pos":[3222,3328],"content":"You can read more about all these changes in <bpt id=\"p1\">[</bpt>Write safe efficient code<ept id=\"p1\">](../write-safe-efficient-code.md)</ept>.","source":"You can read more about all these changes in [Write safe efficient code](../write-safe-efficient-code.md)."},{"pos":[3333,3361],"content":"Non-trailing named arguments","linkify":"Non-trailing named arguments","nodes":[{"content":"Non-trailing named arguments","pos":[0,28]}]},{"content":"Method calls may now use named arguments that precede positional arguments when those named arguments are in the correct positions.","pos":[3363,3494],"source":"Method calls may now use named arguments that precede positional arguments when those\nnamed arguments are in the correct positions."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Named and optional arguments<ept id=\"p1\">](../programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept>.","pos":[3495,3625],"source":" For more information see\n[Named and optional arguments](../programming-guide/classes-and-structs/named-and-optional-arguments.md)."},{"pos":[3630,3669],"content":"Leading underscores in numeric literals","linkify":"Leading underscores in numeric literals","nodes":[{"content":"Leading underscores in numeric literals","pos":[0,39]}]},{"content":"The implementation of support for digit separators in C# 7.0 didn't allow the <ph id=\"ph1\">`_`</ph> to be the first character of the literal value.","pos":[3671,3800],"source":"The implementation of support for digit separators in C# 7.0\ndidn't allow the `_` to be the first character of the literal value."},{"content":"Hex and binary numeric literals may now begin with an <ph id=\"ph1\">`_`</ph>.","pos":[3801,3859],"source":" Hex\nand binary numeric literals may now begin with an `_`."},{"content":"For example:","pos":[3861,3873]},{"pos":[3925,3960],"content":"<bpt id=\"p1\">_</bpt>private protected<ept id=\"p1\">_</ept> access modifier","linkify":"_private protected_ access modifier","source":"_private protected_ access modifier"},{"content":"A new compound access modifier: <ph id=\"ph1\">`private protected`</ph> indicates that a member may be accessed by containing class or derived classes that are declared in the same assembly.","pos":[3962,4132],"source":"A new compound access modifier: `private protected` indicates that a member may be\naccessed by containing class or derived classes that are declared in the same assembly."},{"content":"While <ph id=\"ph1\">`protected internal`</ph> allows access by derived classes or classes that are in the same assembly, <ph id=\"ph2\">`private protected`</ph> limits access to derived types declared in the same assembly.","pos":[4133,4316],"source":" While `protected internal`\nallows access by derived classes or classes that are in the same assembly, `private protected`\nlimits access to derived types declared in the same assembly."},{"pos":[4318,4440],"content":"For more information see <bpt id=\"p1\">[</bpt>access modifiers<ept id=\"p1\">](../language-reference/keywords/access-modifiers.md)</ept> in the language reference.","source":"For more information see [access modifiers](../language-reference/keywords/access-modifiers.md) in the language reference."},{"pos":[4445,4474],"content":"Conditional <ph id=\"ph1\">`ref`</ph> expressions","linkify":"Conditional `ref` expressions","source":"Conditional `ref` expressions"},{"content":"Finally, the conditional expression may produce a ref result instead of a value result.","pos":[4476,4563]},{"content":"For example, you would write the following to retrieve a reference to the first element in one of two arrays:","pos":[4564,4673]},{"pos":[4752,4833],"content":"The variable <ph id=\"ph1\">`r`</ph> is a reference to the first value in either <ph id=\"ph2\">`arr`</ph> or <ph id=\"ph3\">`otherArr`</ph>.","source":"The variable `r` is a reference to the first value in either `arr` or `otherArr`."},{"pos":[4835,4972],"content":"For more information, see <bpt id=\"p1\">[</bpt>conditional operator (?:)<ept id=\"p1\">](../language-reference/operators/conditional-operator.md)</ept> in the language reference.","source":"For more information, see [conditional operator (?:)](../language-reference/operators/conditional-operator.md) in the language reference."}]}