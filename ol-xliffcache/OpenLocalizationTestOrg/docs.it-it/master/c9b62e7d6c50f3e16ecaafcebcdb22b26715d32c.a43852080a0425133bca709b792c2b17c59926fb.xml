{"content":"---\ntitle: What is \"managed code\"?\ndescription: What is \"managed code\"?\nkeywords: .NET, .NET Core\nauthor: blackdwarf\nms.author: mairaw\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net\nms.technology: dotnet-standard\nms.devlang: dotnet\nms.assetid: 20bb7ea8-192e-4a96-8ef3-e10e1950fd3d\n---\n\n# What is \"managed code\"?\n\nWhen working with .NET Framework, you will often encounter the term \"managed code\". This document will explain what this term means and additional information around it.\n\nTo put it very simply, managed code is just that: code whose execution is managed by a runtime. In this case, the runtime in question is called the **Common Language Runtime** or CLR, regardless of the implementation ([Mono](http://www.mono-project.com/) or .NET Framework or .NET Core). CLR is in charge of taking the managed code, compiling it into machine code and then executing it. On top of that, runtime provides several important services such as automatic memory management, security boundaries, type safety etc.\n\nContrast this to the way you would run a C/C++ program, also called \"unmanaged code\". In the unmanaged world, the programmer is in charge of pretty much everything. The actual program is, essentially, a binary that the operating system (OS) loads into memory and starts. Everything else, from memory management to security considerations are a burden of the programmer.\n\nManaged code is written in one of the high-level languages that can be run on top of the .NET platform, such as C#, Visual Basic, F# and others. When you compile code written in those languages with their respective compiler, you don’t get machine code. You get **Intermediate Language** code which the runtime then compiles and executes. C++ is the one exception to this rule, as it can also produce native, unmanaged binaries that run on Windows.\n\n## Intermediate Language & execution\n\nWhat is \"Intermediate Language\" (or IL for short)? It is a product of compilation of code written in high-level .NET languages. Once you compile your code written in one of these languages, you will get a binary that is made out of IL. It is important to note that the IL is independent from any specific language that runs on top of the runtime; there is even a separate specification for it that you can read if you’re so inclined.\n\nOnce you produce IL from your high-level code, you will most likely want to run it. This is where the CLR takes over and starts the process of **Just-In-Time** compiling, or **JIT-ing** your code from IL to machine code that can actually be run on a CPU. In this way, the CLR knows exactly what your code is doing and can effectively _manage_ it.\n\nIntermediate Language is sometimes also called Common Intermediate Language (CIL) or Microsoft Intermediate Language (MSIL).\n\n## Unmanaged code interoperability\n\nOf course, the CLR allows passing the boundaries between managed and unmanaged world, and there is a lot of code that does that, even in the [Base Class Libraries](framework-libraries.md). This is called **interoperability** or just **interop** for short. These provisions would allow you to, for example, wrap up an unmanaged library and call into it. However, it is important to note that once you do this, when the code passes the boundaries of the runtime, the actual management of the execution is again in the hand of unmanaged code, and thus falls under the same restrictions.\n\nSimilar to this, C# is one language that allows you to use unmanaged constructs such as pointers directly in code by utilizing what is known as **unsafe context** which designates a piece of code for which the execution is not managed by the CLR.\n\n## More resources\n\n*   [.NET Framework Conceptual Overview](https://msdn.microsoft.com/library/zw4w595w.aspx)\n*   [Unsafe Code and Pointers](https://msdn.microsoft.com/library/t2yzs44b.aspx)\n*   [Interoperability (C# Programming guide)](https://msdn.microsoft.com/library/ms173184.aspx)\n","nodes":[{"pos":[11,34],"content":"What is \"managed code\"?","needQuote":true,"needEscape":true,"nodes":[{"content":"What is \"managed code\"?","pos":[0,23]}]},{"pos":[48,71],"content":"What is \"managed code\"?","needQuote":true,"needEscape":true,"nodes":[{"content":"What is \"managed code\"?","pos":[0,23]}]},{"pos":[82,97],"content":".NET, .NET Core","needQuote":true,"needEscape":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"pos":[293,316],"content":"What is \"managed code\"?","linkify":"What is \"managed code\"?","nodes":[{"content":"What is \"managed code\"?","pos":[0,23]}]},{"content":"When working with .NET Framework, you will often encounter the term \"managed code\".","pos":[318,401]},{"content":"This document will explain what this term means and additional information around it.","pos":[402,487]},{"content":"To put it very simply, managed code is just that: code whose execution is managed by a runtime.","pos":[489,584]},{"content":"In this case, the runtime in question is called the <bpt id=\"p1\">**</bpt>Common Language Runtime<ept id=\"p1\">**</ept> or CLR, regardless of the implementation (<bpt id=\"p2\">[</bpt>Mono<ept id=\"p2\">](http://www.mono-project.com/)</ept> or .NET Framework or .NET Core).","pos":[585,776],"source":" In this case, the runtime in question is called the **Common Language Runtime** or CLR, regardless of the implementation ([Mono](http://www.mono-project.com/) or .NET Framework or .NET Core)."},{"content":"CLR is in charge of taking the managed code, compiling it into machine code and then executing it.","pos":[777,875]},{"content":"On top of that, runtime provides several important services such as automatic memory management, security boundaries, type safety etc.","pos":[876,1010]},{"content":"Contrast this to the way you would run a C/C++ program, also called \"unmanaged code\".","pos":[1012,1097]},{"content":"In the unmanaged world, the programmer is in charge of pretty much everything.","pos":[1098,1176]},{"content":"The actual program is, essentially, a binary that the operating system (OS) loads into memory and starts.","pos":[1177,1282]},{"content":"Everything else, from memory management to security considerations are a burden of the programmer.","pos":[1283,1381]},{"content":"Managed code is written in one of the high-level languages that can be run on top of the .NET platform, such as C#, Visual Basic, F# and others.","pos":[1383,1527]},{"content":"When you compile code written in those languages with their respective compiler, you don’t get machine code.","pos":[1528,1636]},{"content":"You get <bpt id=\"p1\">**</bpt>Intermediate Language<ept id=\"p1\">**</ept> code which the runtime then compiles and executes.","pos":[1637,1721],"source":" You get **Intermediate Language** code which the runtime then compiles and executes."},{"content":"C++ is the one exception to this rule, as it can also produce native, unmanaged binaries that run on Windows.","pos":[1722,1831]},{"pos":[1836,1869],"content":"Intermediate Language & execution","linkify":"Intermediate Language & execution","nodes":[{"content":"Intermediate Language &amp; execution","pos":[0,33],"source":"Intermediate Language & execution"}]},{"content":"What is \"Intermediate Language\" (or IL for short)?","pos":[1871,1921]},{"content":"It is a product of compilation of code written in high-level .NET languages.","pos":[1922,1998]},{"content":"Once you compile your code written in one of these languages, you will get a binary that is made out of IL.","pos":[1999,2106]},{"content":"It is important to note that the IL is independent from any specific language that runs on top of the runtime; there is even a separate specification for it that you can read if you’re so inclined.","pos":[2107,2304]},{"content":"Once you produce IL from your high-level code, you will most likely want to run it.","pos":[2306,2389]},{"content":"This is where the CLR takes over and starts the process of <bpt id=\"p1\">**</bpt>Just-In-Time<ept id=\"p1\">**</ept> compiling, or <bpt id=\"p2\">**</bpt>JIT-ing<ept id=\"p2\">**</ept> your code from IL to machine code that can actually be run on a CPU.","pos":[2390,2560],"source":" This is where the CLR takes over and starts the process of **Just-In-Time** compiling, or **JIT-ing** your code from IL to machine code that can actually be run on a CPU."},{"content":"In this way, the CLR knows exactly what your code is doing and can effectively <bpt id=\"p1\">_</bpt>manage<ept id=\"p1\">_</ept> it.","pos":[2561,2652],"source":" In this way, the CLR knows exactly what your code is doing and can effectively _manage_ it."},{"content":"Intermediate Language is sometimes also called Common Intermediate Language (CIL) or Microsoft Intermediate Language (MSIL).","pos":[2654,2778]},{"pos":[2783,2814],"content":"Unmanaged code interoperability","linkify":"Unmanaged code interoperability","nodes":[{"content":"Unmanaged code interoperability","pos":[0,31]}]},{"content":"Of course, the CLR allows passing the boundaries between managed and unmanaged world, and there is a lot of code that does that, even in the <bpt id=\"p1\">[</bpt>Base Class Libraries<ept id=\"p1\">](framework-libraries.md)</ept>.","pos":[2816,3004],"source":"Of course, the CLR allows passing the boundaries between managed and unmanaged world, and there is a lot of code that does that, even in the [Base Class Libraries](framework-libraries.md)."},{"content":"This is called <bpt id=\"p1\">**</bpt>interoperability<ept id=\"p1\">**</ept> or just <bpt id=\"p2\">**</bpt>interop<ept id=\"p2\">**</ept> for short.","pos":[3005,3071],"source":" This is called **interoperability** or just **interop** for short."},{"content":"These provisions would allow you to, for example, wrap up an unmanaged library and call into it.","pos":[3072,3168]},{"content":"However, it is important to note that once you do this, when the code passes the boundaries of the runtime, the actual management of the execution is again in the hand of unmanaged code, and thus falls under the same restrictions.","pos":[3169,3399]},{"pos":[3401,3647],"content":"Similar to this, C# is one language that allows you to use unmanaged constructs such as pointers directly in code by utilizing what is known as <bpt id=\"p1\">**</bpt>unsafe context<ept id=\"p1\">**</ept> which designates a piece of code for which the execution is not managed by the CLR.","source":"Similar to this, C# is one language that allows you to use unmanaged constructs such as pointers directly in code by utilizing what is known as **unsafe context** which designates a piece of code for which the execution is not managed by the CLR."},{"pos":[3652,3666],"content":"More resources","linkify":"More resources","nodes":[{"content":"More resources","pos":[0,14]}]},{"pos":[3672,3758],"content":"<bpt id=\"p1\">[</bpt>.NET Framework Conceptual Overview<ept id=\"p1\">](https://msdn.microsoft.com/library/zw4w595w.aspx)</ept>","source":"[.NET Framework Conceptual Overview](https://msdn.microsoft.com/library/zw4w595w.aspx)"},{"pos":[3763,3839],"content":"<bpt id=\"p1\">[</bpt>Unsafe Code and Pointers<ept id=\"p1\">](https://msdn.microsoft.com/library/t2yzs44b.aspx)</ept>","source":"[Unsafe Code and Pointers](https://msdn.microsoft.com/library/t2yzs44b.aspx)"},{"pos":[3844,3935],"content":"<bpt id=\"p1\">[</bpt>Interoperability (C# Programming guide)<ept id=\"p1\">](https://msdn.microsoft.com/library/ms173184.aspx)</ept>","source":"[Interoperability (C# Programming guide)](https://msdn.microsoft.com/library/ms173184.aspx)"}]}