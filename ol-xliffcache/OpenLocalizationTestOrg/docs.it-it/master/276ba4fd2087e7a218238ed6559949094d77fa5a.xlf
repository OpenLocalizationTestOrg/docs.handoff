<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">276ba4fd2087e7a218238ed6559949094d77fa5a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\profiling\functionidmapper-function.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b2ddfa848321e531625f599cd32226409fec390</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0fa2dd357fd1ab9bbc284898fdc00c62d2426ca2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>FunctionIDMapper Function | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>FunctionIDMapper Function</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Notifies the profiler that the given identifier of a function may be remapped to an alternative ID to be used in the <bpt id="p1">[</bpt>FunctionEnter2<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md)</ept>, <bpt id="p2">[</bpt>FunctionLeave2<ept id="p2">](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md)</ept>, and <bpt id="p3">[</bpt>FunctionTailcall2<ept id="p3">](../../../../docs/framework/unmanaged-api/profiling/functiontailcall2-function.md)</ept> callbacks for that function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FunctionIDMapper`</ph> also enables the profiler to indicate whether it wants to receive callbacks for that function.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[in] The function identifier to be remapped.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>[out] A pointer to a value that the profiler sets to <ph id="ph1">`true`</ph> if it wants to receive <ph id="ph2">`FunctionEnter2`</ph>, <ph id="ph3">`FunctionLeave2`</ph>, and <ph id="ph4">`FunctionTailcall2`</ph> callbacks; otherwise, it sets this value to <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The profiler returns a value that the execution engine uses as an alternative function identifier.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The return value cannot be null unless <ph id="ph1">`false`</ph> is returned in <ph id="ph2">`pbHookFunction`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Otherwise, a null return value will produce unpredictable results, including possibly halting the process.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FunctionIDMapper`</ph> function is a callback.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It is implemented by the profiler to remap a function ID to some other identifier that is more useful for the profiler.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FunctionIDMapper`</ph> returns the alternate ID to be used for any given function.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The execution engine then honors the profiler's request by passing this alternate ID, in addition to the traditional function ID, back to the profiler in the <ph id="ph1">`clientData`</ph> parameter of the <ph id="ph2">`FunctionEnter2`</ph>, <ph id="ph3">`FunctionLeave2`</ph>, and <ph id="ph4">`FunctionTailcall2`</ph> hooks, to identify the function for which the hook is being called.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>ICorProfilerInfo::SetFunctionIDMapper<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setfunctionidmapper-method.md)</ept> method to specify the implementation of the <ph id="ph1">`FunctionIDMapper`</ph> function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can call the <ph id="ph1">`ICorProfilerInfo::SetFunctionIDMapper`</ph> method only once, and we recommend that you do so in the <bpt id="p1">[</bpt>ICorProfilerCallback::Initialize<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-initialize-method.md)</ept> callback.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By default, it is assumed that a profiler that sets the COR_PRF_MONITOR_ENTERLEAVE flag by using <bpt id="p1">[</bpt>ICorProfilerInfo::SetEventMask<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-seteventmask-method.md)</ept>, and which sets hooks via <bpt id="p2">[</bpt>ICorProfilerInfo::SetEnterLeaveFunctionHooks<ept id="p2">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setenterleavefunctionhooks-method.md)</ept> or <bpt id="p3">[</bpt>ICorProfilerInfo2::SetEnterLeaveFunctionHooks2<ept id="p3">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-setenterleavefunctionhooks2-method.md)</ept>, should receive the <ph id="ph1">`FunctionEnter2`</ph>, <ph id="ph2">`FunctionLeave2`</ph>, and <ph id="ph3">`FunctionTailcall2`</ph> callbacks for every function.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, profilers may implement <ph id="ph1">`FunctionIDMapper`</ph> to selectively avoid receiving these callbacks for certain functions by setting <ph id="ph2">`pbHookFunction`</ph> to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Profilers should be tolerant of cases where multiple threads of a profiled application are calling the same method/function simultaneously.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In such cases, the profiler may receive multiple <ph id="ph1">`FunctionIDMapper`</ph> callbacks for the same <ph id="ph2">`FunctionID`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The profiler should be certain to return the same values from this callback when it is called multiple times with the same <ph id="ph1">`FunctionID`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> CorProf.idl</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> CorGuids.lib</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept> <ph id="ph1">[!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SetFunctionIDMapper Method<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-setfunctionidmapper-method.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>FunctionIDMapper2 Function<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/functionidmapper2-function.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>FunctionEnter2 Function<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/functionenter2-function.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>FunctionLeave2 Function<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/functionleave2-function.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>FunctionTailcall2 Function<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/functiontailcall2-function.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Profiling Global Static Functions<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/profiling-global-static-functions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>